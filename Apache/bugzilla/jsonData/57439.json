[{"text": "Created attachment 32367\nAllow to change body timeout per location\n\nInitial situation\n*****************\n\nI am using Apache httpd as a reverse proxy to several web applications. In addition, I use mod_reqtimeout to mitigate DoS attacks by setting timeouts and minimum data rates.\n\nAs the RequestReadTimeout setting can only be performed per virtual host all locations of a virtual host are bound to the same timing limits. The only way to change the timeout for a location is to move it to a separate virtual host.\n\nHowever, this might not always be feasible and practicable so that the adjustment or de-activation of the timeout per location is desirable.\n\nUse case\n********\n\nA client uses a WebSocket to frequently send data to an application server. The WebSocket is initiated by a JS script that is provided on another location. Besides the WS application, other HTTP-based services may be served on the same virtual host. The applications and services may depend on each other so they can not be separated.\n\n<VirtualHost>\n  RequestReadTimeout header=2 body=10\n\n  <Location /client.js>\n    ProxyPass http://wshost:11111/\n    ProxyPassReverse http://wshost:11111/\n  </Location>\n\n  <Location /websocket>\n    ProxyPass ws://wshost:22222/\n    ProxyPassReverse  ws://wshost:22222/\n  </Location>\n\n  <Location /http-service-1>\n    ...\n  </Location>\n\n  <Location /http-service-2>\n    ...\n  </Location>\n\n</VirtualHost>\n\nFollowing problems arise with the current implementation of RequestReadTimeout.\n\n* The timeout/data rate requirements of the services may differ, so the least restricting timings have to be used for all locations\n* mod_proxy_wstunnel in its current implementation completely removes mod_reqtimeout from the list of input filters in order to avoid interceptions due to timeouts or unaccomplished data rates. Hence, unused connections (e.g. crashed client) are never terminated. \n* There is no possiblity to make data rate requirements to WS clients, e.g. well-known application with predictable data rate\n\nAssuming that mod_proxy_wstunnel does not remove the mod_reqtimeout input filter following configuration would be desirable for this use case.\n \n<VirtualHost>\n  RequestReadTimeout header=10-30 body=10\n\n  <Location /client.js>\n    ProxyPass http://wshost:11111/\n    ProxyPassReverse http://wshost:11111/\n  </Location>\n\n  <Location /websocket>\n    RequestReadTimeout body=3600\n\n    ProxyPass ws://wshost:22222/\n    ProxyPassReverse  ws://wshost:22222/\n  </Location>\n\n  <Location /http-service-1>\n    # de-activation\n    RequestReadTimeout body=0\n    ...\n  </Location>\n\n  <Location /http-service-2>\n    RequestReadTimeout body=10-7200,DataRate=50\n    ...\n  </Location>\n\n</VirtualHost>\n\nNote that for a location only the \"body settings\" can be adjusted.\n\nApproach\n********\n\nFor the stated reasons, I would like to provide a patch that implements the adjustment of the body timeout and body data rate per location.\n\nThe patch uses the post_perdir_config hook (instead of post_read_request) in order to get access to the location configuration. Based on this configuration the timeout and data rate requirement are adjusted for the receiving of the body data.", "tags": [], "creator": "a.abfalterer@gmail.com", "is_private": false, "count": 0, "id": 180280, "time": "2015-01-13T14:27:11Z", "bug_id": 57439, "creation_time": "2015-01-13T14:27:11Z", "attachment_id": 32367}, {"count": 1, "tags": [], "bug_id": 57439, "attachment_id": null, "id": 180281, "time": "2015-01-13T14:31:26Z", "creator": "covener@gmail.com", "creation_time": "2015-01-13T14:31:26Z", "is_private": false, "text": "> Hence, unused connections (e.g. crashed client) are never terminated.\n\nwstunnel shouldn't depend on a timeout to see that a client has closed their end of the socket.  It should be woken up when the application crash triggers the socket to be closed by the clients host OS."}, {"count": 2, "tags": [], "bug_id": 57439, "attachment_id": null, "id": 180282, "time": "2015-01-13T15:34:50Z", "creator": "micha@lenk.info", "creation_time": "2015-01-13T15:34:50Z", "is_private": false, "text": "Eric, that's not the point. mod_reqtimeout isn't used to enforce timeouts\non cooperative clients but on (intentionally or unintentionally) uncooperative\nclients.\n\nI agree with Armin that HTTP clients might need different timeout settings than\nWebSocket clients. With the current mod_reqtimeout implementation this is\nimpossible if HTTP clients and WebSocket clients share the same virtual server.\nSo there is a need to address that. Do you agree?"}, {"count": 3, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "(In reply to Micha Lenk from comment #2)\n> Eric, that's not the point. mod_reqtimeout isn't used to enforce timeouts\n> on cooperative clients but on (intentionally or unintentionally)\n> uncooperative clients.\n\nI'm referring specifically to the quoted text about a crashed client.  \n\n> I agree with Armin that HTTP clients might need different timeout settings\n> than WebSocket clients. With the current mod_reqtimeout implementation this is\n> impossible if HTTP clients and WebSocket clients share the same virtual\n> server So there is a need to address that. Do you agree?\n\nI agree that different body timeouts per-directory are useful for HTTP and it doesn't seem problematic, but I haven't thought enough about what it means for websockets. In trunk, there is already an idle timeout available, I am not sure if mod_reqtimeout could work in that case (it gets in the way when there is I/O, not when the connection is idle because there are no reads occurring)", "id": 180284, "time": "2015-01-13T15:56:40Z", "bug_id": 57439, "creation_time": "2015-01-13T15:56:40Z", "is_private": false}, {"count": 4, "tags": [], "creator": "a.abfalterer@gmail.com", "attachment_id": null, "text": "(In reply to Eric Covener from comment #3)\n> I'm referring specifically to the quoted text about a crashed client.  \n\nWith \"crashed client\" I actually meant half-open connections due to a client OS crash.\n\n> I am not sure if mod_reqtimeout could work in that case (it gets in the way\n> when there is I/O, not when the connection is idle because there are no\n> reads occurring)\n\nmod_reqtimeout assigns the wanted timeout to the socket, thus, there must not necessarily be any I/O", "id": 180384, "time": "2015-01-19T14:47:28Z", "bug_id": 57439, "creation_time": "2015-01-19T14:47:28Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 57439, "attachment_id": null, "id": 180385, "time": "2015-01-19T15:09:31Z", "creator": "covener@gmail.com", "creation_time": "2015-01-19T15:09:31Z", "is_private": false, "text": "(In reply to Armin Abfalterer from comment #4)\n> (In reply to Eric Covener from comment #3)\n> > I'm referring specifically to the quoted text about a crashed client.  \n> \n> With \"crashed client\" I actually meant half-open connections due to a client\n> OS crash.\n\nOkay, I see.\n\n> \n> > I am not sure if mod_reqtimeout could work in that case (it gets in the way\n> > when there is I/O, not when the connection is idle because there are no\n> > reads occurring)\n> \n> mod_reqtimeout assigns the wanted timeout to the socket, thus, there must\n> not necessarily be any I/O\n\nI don't think that tiemout affects what you want when the caller is mostly stuck in poll/select/epoll with their own timeout passed in.  You'd have to get lucky and have a read/write pending but that should be rare in wstunnel."}, {"count": 6, "tags": [], "bug_id": 57439, "attachment_id": null, "id": 180386, "time": "2015-01-19T15:12:11Z", "creator": "covener@gmail.com", "creation_time": "2015-01-19T15:12:11Z", "is_private": false, "text": "I should elaborate, because wstunnel is non-HTTP it cannot block in either direction (where the APR socket timeout is used), it needs to poll on both for read/write."}, {"count": 7, "tags": [], "creator": "micha@lenk.info", "attachment_id": 33116, "is_private": false, "id": 185339, "time": "2015-09-18T11:11:07Z", "bug_id": 57439, "creation_time": "2015-09-18T11:11:07Z", "text": "Created attachment 33116\nAllow to change body timeout per location\n\nI stripped some renamed variables from the patch that caused some extra noise.\n\nAdditionally the patch is now based on SVN branch 2.4.x, rev. 1703807.\n\nIt was successfully tested with Apache 2.4.16."}]
[{"count": 0, "tags": [], "bug_id": 60085, "attachment_id": null, "is_private": false, "id": 193492, "time": "2016-09-05T15:29:52Z", "creator": "be_strew@yahoo.co.uk", "creation_time": "2016-09-05T15:29:52Z", "text": "So in our test where we encountered the error we have 20 threads, executing a mix of HTTP and JDBC requests.\n\nWe noticed that after a period of time (2.5 hours) the response times would appear to slow down and it was found that this was due to Jmeter, rather than the application under test.\n\nThe JDBC connection config has Max Number of connections = 0, in order to assign a single pool to each thread with one connection in it.\n\nJmeter was responding to memory pressure by performing full GCs and this was skewing the response time results.\n\nTaking a heap dump after running a test for 2 hours it was noticed that there were 212,185 AbstractJDBCTestElements in the heap and also the same number of org.apache.commons.dbcp2.PoolingDataSource$PoolGuardConnectionWrapper classes.\n\nThe PoolingDataSource for DBCP (v 2.2.1), which appears bundled with Jmeter, returns an instance of PoolingDataSource$PoolGuardConnectionWrapper for each call to getConnection().  The PoolGuardConnectionWrapper does not override the default hashcode/equals.\n\nTherefore, as the test runs the static map perConnCache maintained by the AbstractJDBCTestElements class fills up as each time we hit getConnection, we are receiving a new object.  This behaviour is unaffected by the LRU for the prepared statements as the map sees a new connection each time.\n\nFor a reason I have not found yet, this also causes a link to be held to the AbstractJDBCTestElements.\n\nThis will cause Jmeter to run out of memory and breaks our long duration tests.\n\nI haven't tested this with previous versions of Jmeter, as this is a new application under test and I don't have time to back port the tests."}, {"count": 1, "tags": [], "text": "Created attachment 34200\nHeap dump analysis\n\nAdded a screenshot from the heap dump", "attachment_id": 34200, "bug_id": 60085, "id": 193493, "time": "2016-09-05T15:31:28Z", "creator": "be_strew@yahoo.co.uk", "creation_time": "2016-09-05T15:31:28Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 60085, "attachment_id": null, "id": 193504, "time": "2016-09-06T06:00:36Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-09-06T06:00:36Z", "is_private": false, "text": "What type of sql statements do you use and are you keeping the samplers? Could you provide a minimal test that exhibits the described behaviour?"}, {"count": 3, "tags": [], "bug_id": 60085, "attachment_id": 34204, "is_private": false, "id": 193506, "time": "2016-09-06T09:42:54Z", "creator": "be_strew@yahoo.co.uk", "creation_time": "2016-09-06T09:42:54Z", "text": "Created attachment 34204\nExample Jmeter script with memory leak\n\nThe problem occurs with prepared statements, as these involve the cache of prepared statements that AbstractJdbcTestElement maintains (perConnCache).  As discussed above each time a connection is pulled from the pool, it has a different Java identity and therefore the map grows unbounded.\n\nI have attached a simplified test that shows the problem.  This test looks for Postgres to be on localhost@5432 with a DB called jmetertest.\n\nI tried this with Postgres 9.5 on Ubuntu.\n\nI just used the postgres user.\n\nThe following table needs created:\n\nCREATE TABLE public.test\n(\n  id integer NOT NULL DEFAULT nextval('test_id_seq'::regclass),\n  text character varying(64),\n  CONSTRAINT \"PK_ID\" PRIMARY KEY (id)\n)\nWITH (\n  OIDS=FALSE\n);\nALTER TABLE public.test\n  OWNER TO postgres;\n\n\nIf you run the test for a minute then take a heap dump you will see an example of the problem it appears immediately.\n\nThe count of instances of org.apache.commons.dbcp2.PoolingDataSource$PoolGuardConnectionWrapper and org.apache.jmeter.protocol.jdbc.AbstractJDBCTestElement$1 will be the number of executions of the sampler."}, {"count": 4, "tags": [], "bug_id": 60085, "is_private": false, "text": "Created attachment 34211\nRemove perConnMap as it is useless and has a memory leak\n\nRemove pool for prepared statements, as it didn't work with the current jdbc pool implementation and newer jdbc drivers should support pooling themselves.", "id": 193523, "time": "2016-09-06T18:23:00Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-09-06T18:23:00Z", "attachment_id": 34211}, {"count": 5, "tags": [], "bug_id": 60085, "attachment_id": null, "id": 193553, "time": "2016-09-07T19:28:58Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-09-07T19:28:58Z", "is_private": false, "text": "Date: Wed Sep  7 19:26:17 2016\nNew Revision: 1759668\n\nURL: http://svn.apache.org/viewvc?rev=1759668&view=rev\nLog:\nRemove cache for prepared statements, as it didn't work with the current\njdbc pool implementation and current jdbc drivers should support caching\nof prepared statements themselves.\n\nBugzilla Id: 60085\n\nModified:\n    jmeter/trunk/bin/jmeter.properties\n    jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java\n    jmeter/trunk/xdocs/changes.xml\n    jmeter/trunk/xdocs/usermanual/properties_reference.xml"}, {"count": 6, "tags": [], "bug_id": 60085, "attachment_id": null, "is_private": false, "id": 193618, "time": "2016-09-10T16:21:30Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-09-10T16:21:30Z", "text": "Date: Sat Sep 10 16:16:01 2016\nNew Revision: 1760194\n\nURL: http://svn.apache.org/viewvc?rev=1760194&view=rev\nLog:\nFollowup to r1759668. Close PreparedStatements as they are no longer cached and reused.\n\nBugzilla Id: 60085\n\nModified:\n    jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java"}, {"count": 7, "tags": [], "bug_id": 60085, "attachment_id": null, "id": 197268, "time": "2017-02-25T14:13:26Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2017-02-25T14:13:26Z", "is_private": false, "text": "*** Bug 60749 has been marked as a duplicate of this bug. ***"}]
[{"count": 0, "tags": [], "creator": "murilo.v.andretta@gmail.com", "text": "We have a server that hosts three .NET v4.0 applications (each one in their own app pool) and another application that is hosted in Jakarta/Tomcat 7, which goes through IIS for authentication, and is forwarded to Jakarta/Tomcat(isapi_redirect.dll)\n\nWe've started noticing that every now and then one of the .NET application pools was (randomly) hanging, requiring the support team to log on to the server and recycle it. Initially, we thought that the problem was related to the applications themselves, maybe memory leaks.\n\nFurther investigations confirmed that the applications pools were hanging because Jakarta was using Named Mutexes, and sometimes ones that were currently owned by different processes (one of the other App Pools). And since Named Mutexes are shared across processes, any process trying to use it would be blocked until owner process releases the Mutex.\n\nLong story short, we've confirmed that the hangs happen because Tomcat is leaking mutexes and not releasing them back to the other applications.\n\nThis seems to be very similar to the problem described here in this thread: \nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=58813#c0\n\nBut no one has replied to it.\n\nAlso, the change log (https://tomcat.apache.org/connectors-doc/miscellaneous/changelog.html) shows a fix between versions \"1.2.35 and 1.2.36\" stating \"Fix dead-lock caused by not releasing mutex on close. (mturk)\" which seems to be exactly what we're facing, but either that was another issue, or the fix did not work.\n\nAre there any plans to have this fixed in a future release?", "id": 190299, "time": "2016-04-15T22:04:08Z", "bug_id": 59334, "creation_time": "2016-04-15T22:04:08Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 59334, "attachment_id": null, "id": 190310, "time": "2016-04-16T15:44:30Z", "creator": "markt@apache.org", "creation_time": "2016-04-16T15:44:30Z", "is_private": false, "text": "Correct product"}, {"count": 2, "tags": [], "bug_id": 59334, "attachment_id": null, "id": 190311, "time": "2016-04-16T15:44:53Z", "creator": "markt@apache.org", "creation_time": "2016-04-16T15:44:53Z", "is_private": false, "text": "First question is what version of the connector are you using?"}, {"count": 3, "tags": [], "creator": "murilo.v.andretta@gmail.com", "attachment_id": null, "id": 190325, "time": "2016-04-17T12:01:43Z", "bug_id": 59334, "creation_time": "2016-04-17T12:01:43Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #2)\n> First question is what version of the connector are you using?\n\n1.2.40"}, {"count": 4, "tags": [], "text": "Adding more information, we've tried with versions 1.2.30 and 1.2.36 to see if that would help, but 1.2.30 made it worse, as the app pools would crash all the time, and 1.2.36 presents the same issues as 1.2.40 in terms of hanging the other app pools. \n\nAppreciate if anyone has any update on this.", "attachment_id": null, "bug_id": 59334, "id": 190562, "time": "2016-04-26T14:20:51Z", "creator": "murilo.v.andretta@gmail.com", "creation_time": "2016-04-26T14:20:51Z", "is_private": false}, {"count": 5, "tags": [], "text": "Here's what's going on:\n\nFirst callstack is:\n\n00 00000000`10b7deb8 00000000`76ff9f20 ntdll!ZwWaitForSingleObject+0xa \n01 00000000`10b7dec0 00000001`8001b178 kernel32!WaitForSingleObjectEx+0x9c \n02 00000000`10b7df80 000007fe`fb7e1c9b isapi_redirect!HttpFilterProc+0x148 [c:\\workplace\\tomcat-connectors-1.2.40-src\\native\\iis\\jk_isapi_plugin.c @ 2172]\n03 00000000`10b7e400 000007fe`fb7e1f2d filter!W3_FILTER_CONTEXT::NotifyFilters+0x149\n<snip>\n\nThis thread owns the critical section blocking everyone else.\n\nLooking at source code we see that we\u2019re stuck here:\n\n\n            if (!is_mapread) {\n                WaitForSingleObject(init_cs, INFINITE);\n                if (!is_mapread)\n                    is_mapread = init_jk(serverName);\n                ReleaseMutex(init_cs);\n            }\n\n\nWe're stuck on that WaitForSingleObject line.  This code waits for \u201cinit_cs\u201d which is a Named Mutex to be released.  But this Named Mutex is currently owned:\n\nHandle 0000000000000278\n  Type                   Mutant\n  Attributes         0\n  GrantedAccess 0x1f0001:\n         Delete,ReadControl,WriteDac,WriteOwner,Synch\n         QueryState\n  HandleCount  4\n  PointerCount   8\n  Name         \\BaseNamedObjects\\JK_C__PROGRAM_FILES_APACHE_SOFTWARE_FOUNDATION_JAKARTA_ISAPI_REDIRECTOR_BIN_ISAPI_REDIRECT_MUTEX\n  Object specific information\n    Mutex is Owned\n    Mutant Owner 3048.2198\n\n\nNote the owner is a thread inside this same process.  Owner PID is 0x3048 (decimal 12360 which is PID of this same process).  Thread 0x2198 is thread 3.\n\nThis is thread 3 in this same dump shows that the Named Mutex has leaked as its callstack shows an idle thread not doing anything and with this callstack will never release anything.\n\n\n0:003> k\n# Child-SP          RetAddr           Call Site\n00 00000000`022efa08 00000000`76fedfbc ntdll!ZwRemoveIoCompletion+0xa\n01 00000000`022efa10 000007fe`f76f2b0e kernel32!GetQueuedCompletionStatus+0x48\n02 00000000`022efa70 000007fe`f76f1b95 w3tp!THREAD_POOL_DATA::ThreadPoolThread+0x56\n03 00000000`022efad0 00000000`76fea4bd w3tp!THREAD_MANAGER::ThreadManagerThread+0x5d\n04 00000000`022efb00 00000000`77356461 kernel32!BaseThreadInitThunk+0xd\n05 00000000`022efb30 00000000`00000000 ntdll!RtlUserThreadStart+0x1d\n\n\nSome code ran on this thread (inside Jakarta) that took ownership of the Named Mutex and then something happened and that code did not release that Named Mutex\u2026 so now this whole process is stuck.", "attachment_id": null, "bug_id": 59334, "id": 190634, "time": "2016-04-28T17:07:58Z", "creator": "murilo.v.andretta@gmail.com", "creation_time": "2016-04-28T17:07:58Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 59334, "text": "The problem was fixed by updating the code as suggested in this bug report:\n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=59334 \n\nPlease ensure this is added to future versions as this was quite troublesome for us to figure it out and have it fix.", "id": 190752, "time": "2016-05-06T17:20:34Z", "creator": "murilo.v.andretta@gmail.com", "creation_time": "2016-05-06T17:20:34Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 59334, "text": "I'm confused: what fix did you apply? There is no fix attached to this bug report.", "id": 191292, "time": "2016-05-27T13:52:09Z", "creator": "chris@christopherschultz.net", "creation_time": "2016-05-27T13:52:09Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 59334, "text": "Hi!\n\nI think the link to the proposed patch should be to:\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=58813#c1\n\nMatthew Reiter analyzed the problem there in detail and found out that the bug is in TerminateFilter (in jk_isapi_plugin.c) \n\nversion 1.2.41 \nLine 2424:    ReleaseMutex(&init_cs);\n\nshould be:    ReleaseMutex(init_cs);\n\nHere is his explanation:\n---\nIn TerminateFilter (in jk_isapi_plugin.c), ReleaseMutex is being called with the address of the init_cs variable rather than its value, causing init_cs to never be released. As a result, when GetExtensionVersion is subsequently called, it is unable to acquire init_cs and so the plugin never finishes initializing. I was able to confirm that removing the extra \"&\" fixes the problem.\n---\n\nCould you please fix this, cause we are having this critical problem as well!\n\nThanks!\n  swobi", "id": 193568, "time": "2016-09-09T09:07:32Z", "creator": "e9025902@stud2.tuwien.ac.at", "creation_time": "2016-09-09T09:07:32Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 9, "id": 193656, "time": "2016-09-12T19:07:17Z", "bug_id": 59334, "creation_time": "2016-09-12T19:07:17Z", "text": "\n\n*** This bug has been marked as a duplicate of bug 58813 ***"}]
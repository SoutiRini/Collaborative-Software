[{"count": 0, "tags": [], "text": "Hello, I'm trying to solve a problem we're having where some of our long-\nrunning streaming CGI scripts are causing Apache to grow continuously, \neventually consuming all system memory and starving Apache and other processes \n(manifested as Apache returning HTTP 500 (internal server error) responses to \nsubsequent requests to other resources, and other weirdness). I've reduced the \ntest to a really simple CGI script which reproduces the memory growth reliably \nfor me (see steps to reproduce below).\n\nI'm wondering if this is normal behaviour (is continuous streaming not \nsupported?), or perhaps I'm just mangling my headers or missing something \nreally obvious. Any insight you guys have would be great. If it's a bug in \nApache, my apologies for darkening your door at Christmastime. ;-)\n\nI've observed the behaviour on both of our setups:\n\nLinux: 2.6.13.4.D400-LEAF (a custom (i.e. suspect) roll-our-own Linux - gcc \nversion 4.0.2 20051125, Red Hat 4.0.2-8).\nApache: 2.0.55\n\nLinux: Ubuntu Fiesty (standard, nothing special)\nApache: 2.2.3\n\nSteps to reproduce:\n-------------------\n1. Restart Apache.\n2. Point a browser at the CGI script (see offending cgi script (1) below) \nrunning either runPlain() or runMultipart().\n3. Run ps every 10 seconds for 10 minutes (see ps log script (2) below).\n\nMy observations:\n-----------------\n1. In both the plain/text and multipart case, I observed Apache's memory \ngrowing linearly at a rate of ~19.6kB/min (typically in 4kB increments \ndepending on your Linux/MMU page size).\n\n2. When I stopped the script after 5 minutes, Apache did not appear to free its \nmemory. Then, when I restarted the script, Apache ran flat for 5 minutes before \nstarting to grab more memory. This suggests that when a CGI script stops, \nApache frees some of its internal memory pool, but does not release it to \nsystem memory, instead reusing it for future CGI scripts. I found I had to \nrestart Apache after each test to avoid masking the memory growth of subsequent \ntests.\n\n3. I tried various data rates in my below scripts, by adjusting the sleep time, \nchars per line and lines per cycle, and found the memory growth rate was \nroughly a linear function of the CGI's data output rate (with the function \nflattening at high data rates probably due to CPU/network saturation).\n\n4. I tried various other stabs in the dark, like flushing stdout on each cycle \n(before the sleep). No change to the growth rate.\n\n1. Offending cgi script:\n------------------------\n#include <time.h>\n#include <dirent.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n/*\nmain.\n*/\nint main(int argc, char *argv[])\n{\n    runPlain();\n}\n\n/*\nRun a text/plain test.\n*/\nint runPlain()\n{\n    int i,j;\n    printf(\"Content-type: text/plain; charset=us-ascii\\n\\n\");\n    for (i=0; ; i++)\n    {\n        for (j=0; j<5; j++)\n        {\n            printf(\"%d,%d: wakka wakka wakka wakka wakka wakka wakka\\n\",i,j);\n        }\n        printf(\"\\n\");\n        usleep(5000);\n    }\n}\n\n/*\nRun a multipart/mixed-replace test\nper http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html section 7.2.1.\n*/\nint runMultipart()\n{\n    int i,j,num;\n    printf(\"Content-type: multipart/mixed-replace; boundary=myboundary\\n\\n\");\n    printf(\"Preamble\\n\");\n    for (i=0; ; i++)\n    {\n        printf(\"--myboundary\\n\");\n        printf(\"Content-type: text/plain; charset=us-ascii\\n\\n\");\n        for (j=0; j<5; j++)\n        {\n            printf(\"%d,%d: wakka wakka wakka wakka wakka wakka wakka\\n\",i,j);\n        }\n        printf(\"\\n\");\n        usleep(5000);\n    }\n}\n\n2. ps log:\n----------\n#!/bin/sh\n\ninterval=$1\nwhile :\ndo\n  timestamp=`date +%Y.%m.%d-%H.%M.%S`\n  ps -o pid,pcpu,mem,cmd | sed \"s/^/$timestamp  /\"\n  sleep $interval\ndone", "is_private": false, "bug_id": 44123, "id": 112001, "time": "2007-12-21T14:28:28Z", "creator": "garrett.gallant@ge.com", "creation_time": "2007-12-21T14:28:28Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 44123, "text": "This is fixed in trunk. The relevant commits are\n\nr924452\nr910326\nr821481\nr821477\nr821471\nr814807\n\nand maybe others.", "id": 147168, "time": "2011-06-15T22:23:19Z", "creator": "sf@sfritsch.de", "creation_time": "2011-06-15T22:23:19Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "sf@sfritsch.de", "text": "2.4.1 is released, closing", "id": 154202, "time": "2012-02-26T16:47:38Z", "bug_id": 44123, "creation_time": "2012-02-26T16:47:38Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 41258, "attachment_id": null, "id": 97436, "time": "2006-12-29T02:28:50Z", "creator": "arjan.tijms@mbuyu.nl", "creation_time": "2006-12-29T02:28:50Z", "is_private": false, "text": "We're using a number of custom tags that accept JSF (deferred) EL through\ndynamic attributes. In JSP 2.1 this is illegal. I therefore tried to deactivate\nexpression evaluation by escaping the #{ pattern, but it seems that Tomcat 6.0.7\nignores this?\n\nE.g.\n\n<x:myTag id=\"someID\" someDynamicAttribute=\"\\#{someBean.someProp} />\n\nWhere myTag would be declared like this:\n\n<tag>\n      <description>...</description>\n      <name>myTag</name>\n      <tag-class>com.someClass</tag-class>\n      <body-content>empty</body-content>\n            <attribute>\n          <description>...</description>\n          <name>id</name>\n          <required>false</required>\n          <rtexprvalue>false</rtexprvalue>\n      </attribute>\n\n      <dynamic-attributes>true</dynamic-attributes>\n  </tag>\n\nThis results in a:\n\norg.apache.jasper.JasperException: Unable to compile class for JSP\n\n\nwhere the deepest nested stack trace starts with:\n\njava.lang.NullPointerException\n   at\norg.apache.jasper.compiler.Generator$GenerateVisitor.evaluateAttribute(Generator.java:2777)\n   at\norg.apache.jasper.compiler.Generator$GenerateVisitor.generateSetters(Generator.java:2988)\n   at\norg.apache.jasper.compiler.Generator$GenerateVisitor.generateCustomStart(Generator.java:2169)\n   at\norg.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1689)\n   at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1507)\n   at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2336)\n   at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2386)\n   at\norg.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1705)\n   at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1507)\n   at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2336)\n\n\nIn a simple outputText escaping is ignored too.\n\nSomething like:\n\n<h:outputText value=\"\\#{someBean.someProp}\" />\n\nwould render a literal \"\\\" before the value of \"someProp\".\n\nEscaping EL is mentioned here:\nhttp://java.sun.com/javaee/5/docs/tutorial/doc/JSPIntro7.html\ne.g.\n\n\"Escape the #{ or ${characters as follows:\n|some text \\#{ some more\\${ text\n| and\n|<my:tag someAttribute=\"sometext\\#{more\\${text\" />\"\n\n\n|"}, {"count": 1, "tags": [], "bug_id": 41258, "attachment_id": null, "is_private": false, "id": 97550, "time": "2007-01-02T17:03:51Z", "creator": "funkman@joedog.org", "creation_time": "2007-01-02T17:03:51Z", "text": "Dup of 41257 \n\n*** This bug has been marked as a duplicate of 41257 ***"}]
[{"count": 0, "tags": [], "text": "The fix revision 777567 was aimed to remove an resource leak bug on the  DataInputStream object \"randomIS\"in the method \"run\" of the file \"/tomcat/tc6.0.x/trunk/java/org/apache/catalina/session/ManagerBase.java\" , but it is incomplete. \n\nWhen the statements at lines 256 throw any eception, the object \"randomIS\" can not be closed as expected. The best way to close such resource object is putting such close operations in the finaly block of a try-catch-finally structure.\n\nBesides that, when DataInputStream is created unsuccessfully but the  temp FileInputStream object is created successfully at lines 250,  the temp FileInputStream object will be leak. \n\nThe Same problem is also existed in the method of \"setRandomFile\".  \"randomIS\" should also be closed in the finally block of a try-catch-finally clause, and the temp FileInputStream object should also be closed explicitly. \n\nThe buggy code is copies as bellows: \n\n\n private class PrivilegedSetRandomFile\n            implements PrivilegedAction<DataInputStream>{\n        \n        public PrivilegedSetRandomFile(String s) {\n            devRandomSource = s;\n        }\n        \n        public DataInputStream run(){\n            try {\n                File f=new File( devRandomSource );\n                if( ! f.exists() ) return null;\n 250              randomIS= new DataInputStream( new FileInputStream(f));\n                randomIS.readLong();\n                if( log.isDebugEnabled() )\n                    log.debug( \"Opening \" + devRandomSource );\n                return randomIS;\n            } catch (IOException ex){\n                log.warn(\"Error reading \" + devRandomSource, ex);\n 257               if (randomIS != null) {\n                    try {\n                        randomIS.close();\n                    } catch (Exception e) {\n                        log.warn(\"Failed to close randomIS.\");\n                    }\n                }\n                devRandomSource = null;\n                randomIS=null;\n                return null;\n            }\n        }\n    }\n\n\n  public void setRandomFile( String s ) {\n        // as a hack, you can use a static file - and generate the same\n        // session ids ( good for strange debugging )\n        if (Globals.IS_SECURITY_ENABLED){\n            randomIS = AccessController.doPrivileged(new PrivilegedSetRandomFile(s));\n        } else {\n            try{\n                devRandomSource=s;\n                File f=new File( devRandomSource );\n                if( ! f.exists() ) return;\n                randomIS= new DataInputStream( new FileInputStream(f));\n                randomIS.readLong();\n                if( log.isDebugEnabled() )\n                    log.debug( \"Opening \" + devRandomSource );\n            } catch( IOException ex ) {\n553            log.warn(\"Error reading \" + devRandomSource, ex);\n                if (randomIS != null) {\n                    try {\n                        randomIS.close();\n                    } catch (Exception e) {\n                        log.warn(\"Failed to close randomIS.\");\n                    }\n                }\n                devRandomSource = null;\n                randomIS=null;\n            }\n        }\n    }", "is_private": false, "bug_id": 52720, "id": 153965, "time": "2012-02-21T09:51:12Z", "creator": "lianggt08@sei.pku.edu.cn", "creation_time": "2012-02-21T09:51:12Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 52720, "attachment_id": null, "is_private": false, "id": 154765, "time": "2012-03-09T20:13:04Z", "creator": "markt@apache.org", "creation_time": "2012-03-09T20:13:04Z", "text": "(In reply to comment #0)\n> When the statements at lines 256 throw any eception,\n\nIf that happens, the container will have much bigger problems than a resource leak.\n\n> Besides that, when DataInputStream is created unsuccessfully but the  temp\n> FileInputStream object is created successfully at lines 250,  the temp\n> FileInputStream object will be leak. \n\nAgain, the type of exception that could trigger that to happen is going to represent far bigger problems than a resource leak.\n\n\n> The Same problem is also existed in the method of \"setRandomFile\".\n\nSee above.\n\nThere isn't anything here that is actually going to cause a problem for a user. I am therefore dropping the severity to a realistic level.\n\nThese issues do not exist in later versions since the session ID generation has been refactored.\n\nSimply using a finally block will not achieve the desired outcome.\n\nGiven the extremely low chances of this ever happening and that for it to happen something far worse has to go wrong (such as an OOME) I am resolving this as WONTFIX."}]
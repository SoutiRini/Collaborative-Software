[{"count": 0, "tags": [], "bug_id": 46128, "text": "Created attachment 22793\nPatch to fix apr_tokenize_to_argv\n\ngiven this input string\ncat << EOL\n> String String 123456 \"Quoted String\" \"Quoted with a \\\"escaped quote\\\"\"\nEOL\n\n\nand running the string through apr_tokenize_to_argv.\n\napr_tokenize_to_argv(inputstr, &argv, pool);\n\nWhen dumping argv it looks like this\n\nargv[0] = \"String\";\nargv[1] = \"String\";\nargv[2] = \"123456\";\nargv[3] = \"Quoted String\";\nargv[4] = \"Quoted with \";\nargv[5] = \"escaped quote\\\"\";\n\nInstead of\n\nargv[0] = \"String\";\nargv[1] = \"String\";\nargv[2] = \"123456\";\nargv[3] = \"Quoted String\";\nargv[4] = \"Quoted with \\\"escaped quote\\\"\";\n\nI've narrowed it down to line 117 last changed in revision 60398 (ie. July of 2000)\n\nThe way the code reads is (expanded out)\n1) IF the string is quoted and the current character is a space OR a tab, then skip the next character and continue\n  - OR -\n2) IF the current character is a backslash (\\) and the next character is one of (space, tab, double quote, or single quote) then skip the next character and continue.\n\nThe problem is the first major OR clause should JUST continue and NOT skip the next character (which in the sample string above is the backslash in front of the double quote).\n\nSo that first IF block should have the first or clause removed completely, as the second if statement also does a check for \"not\" that scenario so it won't break;", "id": 122016, "time": "2008-10-29T20:12:59Z", "creator": "urkle@outoforder.cc", "creation_time": "2008-10-29T20:12:59Z", "is_private": false, "attachment_id": 22793}, {"count": 1, "tags": [], "bug_id": 46128, "is_private": false, "text": "Yeah, I get you point. There is no need to skip an extra character if a space or tab is found inside quotes (the loop will just bump the pointer up in due course). As it is, backslash gets skipped, therefore missing the escape.\n\nI will commit to trunk. Thanks for the patch!", "id": 122328, "time": "2008-11-10T00:11:17Z", "creator": "bojan@rexursive.com", "creation_time": "2008-11-10T00:11:17Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "One other thing we may also want to fix is handling of escapes inside quotes. Normally, if you have those inside quotes, they'll not be interpreted as escapes, but as literals. In other words, something like this:\n\n./run \"Today\\ is\\ a\\ nice\\ day\"\n\nWill preserve backslashes for the program. However, this will not:\n\n./run Today\\ is\\ a\\ nice\\ day\n\nWe hose backslashes in both cases (which is not the result of your patch, it was always like this).", "is_private": false, "bug_id": 46128, "id": 122329, "time": "2008-11-10T00:41:25Z", "creator": "bojan@rexursive.com", "creation_time": "2008-11-10T00:41:25Z", "attachment_id": null}]
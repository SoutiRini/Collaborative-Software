[{"count": 0, "tags": [], "text": "Hello,\n\nI stumbled on this issue while transferring large compressed files or large JavaScript files from JBoss/Tomcat through a reverse proxy implemented with Apache + mod_proxy + mod_ssl. Sometimes files got corrupted during the transfer.\n\nI activated mod_dumpio on Apache and -Djavax.net.debug=all on Java and I found out what triggers this problem.\n\nThe problem happens when:\n1. Apache is using ProxyPass to an https:// URL.\n2. The backend server sends data using Transfer-Encoding: chunked (typically when dynamically generating content, or when sending data compressed on the fly)\n3. The backend splits the chunk length between two different SSL blocks.\n\nFor instance, if the backend is sending \"...<previous_chunk>...\\r\\n2000\\r\\n...<new_8kb_chunk>...\", but the SSL processor in the backend splits that into \"...<previous_chunk>...\\r\\n2\" (encrypt that, send to the Apache proxy) and then \"000\\r\\n...<new_8kb_chunk>...\" (encrypt that, send to the Apache proxy), Apache/mod_proxy/mod_ssl will \"lose\" the \"2\" in the end of the first SSL block, consequently it will assume \"000\\r\\n\" is the length of the next chunk and it will fail.\n\nI have done some debugging using mod_dumpio and I have also created a Python script implementing a dummy webserver that introduces the reported behaviour. I will post those with the results in comments to this bug.\n\nI am posting this with severity \"major\" since it causes data corruption. I saw bug #31822 that might be a related issue, but as that one seems to happen only with mod_cache and happened with Apache 2.0, I decided to open a separate bug.\n\nI reproduced this exact problem with an Apache 2.2.17 built from scratch but using APR-1.2.7 from RedHat. These are the configure settings I used:\n\n./configure --prefix /root/apache/install --enable-proxy --enable-ssl --enable-dumpio --with-apr=/usr --with-apr-util=/usr\n\nThanks,\nFilipe", "is_private": false, "bug_id": 50481, "id": 142742, "time": "2010-12-15T11:10:05Z", "creator": "filbranden@gmail.com", "creation_time": "2010-12-15T11:10:05Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 50481, "is_private": false, "text": "Created attachment 26411\nTest case for the bug\n\nThis attachment contains all the files needed to reproduce the bug, the output of tests done with \"curl\" showing the problem and also the error_log generated with mod_dumpio and LogLevel debug showing the problem.\n\nTo run the dummy webservers:\n1. cd dummyws\n2. Generate self-signed openssl certificates in server.key and server.crt\n3. Run ./dummy_webserver_chunked_works.py, it will listen on port 8443\n4. Ctrl+C to stop it.\n5. Run ./dummy_webserver_chunked_breaks_apache.py, it will also listen on port 8443 (you run either one or the other.)\n\nI reproduced this issue with many different Apache servers (the one included in CentOS 5 as well). I included the modified httpd.conf for the vanilla 2.2.17 I compiled in install/conf/httpd.conf inside the tgz, but other than enabling debug, these are the only two lines that are needed (or a similar one adjusting the proxy URLs):\n\nSSLProxyEngine on\nProxyPass /test https://localhost:8443/\n\nI also set up my Apache in port 8080, if you decide to use a different port then adapt client.sh accordingly.\n\nNext step is to run the tests.\n1. cd client\n2. Make sure Apache is up and ./dummy_webserver_chunked_works.py is running.\n3. Run ./client.sh works\n4. This will generate files output_dummy_works.txt and output_proxy_works.txt\n5. Stop ./dummy_webserver_chunked_works.py and start ./dummy_webserver_chunked_breaks_apache.py instead.\n6. Run ./client.sh breaks_apache\n7. This will generate files output_dummy_breaks_apache.txt and output_proxy_breaks_apache.txt\n\nLooking at the contents of the .txt files, you will see that all of them contain the two lines \"First 16 chars\" and \"Last  16 chars\", except for output_proxy_breaks_apache.txt which goes through the Apache proxy, in that case it will contain only the line \"First 16 chars\". Note that the same access going from curl directly to the dummy webserver does not show this problem, curl correctly understands the split chunked length. I tried the same in Firefox and had the same results, if I access the ./dummy_webserver_chunked_breaks_apache.py server on port 8443 with Firefox it shows the content correctly, if I go through the Apache proxy on port 8080 I get the truncated output.\n\nIn directory install/logs are two snippets of Apache's error_log with LogLevel debug and mod_dumpio activated for both input and output.\n\nIn file error_log_works.txt you will find the following:\n\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 4 bytes\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): 10\\r\\n\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [readbytes-nonblocking] 16 readbytes\n...\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 16 bytes\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): First 16 chars\\r\\n\n...\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-nonblocking] 0 readbytes\n...\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 2 bytes\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): \\r\\n\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-nonblocking] 0 readbytes\n...\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 4 bytes\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): 10\\r\\n\n...\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 16 bytes\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): Last  16 chars\\r\\n\n...\n[Wed Dec 15 07:48:48 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-nonblocking] 0 readbytes\n\nNow, in file error_log_breaks_apache.txt this is what you will see:\n\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 4 bytes\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): 10\\r\\n\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [readbytes-nonblocking] 16 readbytes\n...\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 16 bytes\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): First 16 chars\\r\\n\n...\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-nonblocking] 0 readbytes\n...\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 2 bytes\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): \\r\\n\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-nonblocking] 0 readbytes\n...\n[Wed Dec 15 07:49:39 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-blocking] 0 readbytes\n...\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 3 bytes\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): 0\\r\\n         <<<<<============================\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-blocking] 0 readbytes\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 16 bytes\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): Last  16 chars\\r\\n\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(113): mod_dumpio: dumpio_in [getline-blocking] 0 readbytes\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(55): mod_dumpio:  dumpio_in (data-TRANSIENT): 2 bytes\n[Wed Dec 15 07:49:40 2010] [debug] mod_dumpio.c(74): mod_dumpio:  dumpio_in (data-TRANSIENT): \\r\\n\n\nAs you can see, the \"1\" is getting eaten by Apache somewhere.\n\nWe are worried that this problem might affect other pages, so I'll be looking at a way to fix Apache here, if I come up with a patch I'll post it here in this bug, but I would appreciate it if you could also have a look and see if you can find the issue (you can certainly find the issue easier than I can).\n\nThanks,\nFilipe", "id": 142745, "time": "2010-12-15T11:33:25Z", "creator": "filbranden@gmail.com", "creation_time": "2010-12-15T11:33:25Z", "attachment_id": 26411}, {"count": 2, "tags": [], "text": "Thank you for the excellent report, analysis and test case. Can you please try if the following patch fixes your issue?\n\nIndex: modules/ssl/ssl_engine_io.c\n===================================================================\n--- modules/ssl/ssl_engine_io.c (revision 1051073)\n+++ modules/ssl/ssl_engine_io.c (working copy)\n@@ -749,6 +749,10 @@\n         status = ssl_io_input_read(inctx, buf + offset, &tmplen);\n\n         if (status != APR_SUCCESS) {\n+            if (APR_STATUS_IS_EAGAIN(status) && (*len > 0)) {\n+                /* Safe the part of the line we already got */\n+                char_buffer_write(&inctx->cbuf, buf, *len);\n+            }\n             return status;\n         }\n\n@@ -775,6 +779,10 @@\n\n         *len = bytes;\n     }\n+    else {\n+        /* Safe the part of the line we already got */\n+        char_buffer_write(&inctx->cbuf, buf, *len);\n+    }\n\n     return APR_SUCCESS;\n }", "is_private": false, "id": 142857, "creator": "rpluem@apache.org", "time": "2010-12-20T08:24:23Z", "bug_id": 50481, "creation_time": "2010-12-20T08:24:23Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "filbranden@gmail.com", "text": "Hi Ruediger,\n\nThank you so much for the very quick response and for providing a patch for this issue!\n\nThis morning I tested it both against my \"mock\" backend and then I re-built the RPM (RedHat EL5, 2.2.3 + patches, I added your patch to the list) we have in the production environment and the issue against the \"real\" backend (JBoss AS) was fixed as well.\n\nIs this patch safe to use in production? Has it gone through regression tests yet? Can you tell me if it will be committed to 2.2.18 and to 2.3.latest?\n\nThanks a lot!\nFilipe", "id": 142861, "time": "2010-12-20T14:30:51Z", "bug_id": 50481, "creation_time": "2010-12-20T14:30:51Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "text": "Hi,\n\nIn particular, am I correct to assume that ssl_io_input_getline is used only by ssl_io_filter_input which is used only by the https *client* that in turn is used only by mod_proxy? How localized is this change? Can it affect mod_ssl as an https server?\n\nThanks,\nFilipe", "is_private": false, "id": 142864, "creator": "filbranden@gmail.com", "time": "2010-12-20T15:52:39Z", "bug_id": 50481, "creation_time": "2010-12-20T15:52:39Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "(In reply to comment #3)\n\n> \n> Is this patch safe to use in production? Has it gone through regression tests\n> yet? Can you tell me if it will be committed to 2.2.18 and to 2.3.latest?\n\nI have run the Apache test suite against trunk with this patch included and no regressions have been found. The same is true for the current state of the 2.2.x branch with this patch included: No regressions against the test suite.\nI have committed it to trunk aka 2.3 as r1051468.\nI plan to propose it for backport to 2.2.x. Bug me here if I forget about it.", "id": 142882, "time": "2010-12-21T06:44:05Z", "bug_id": 50481, "creation_time": "2010-12-21T06:44:05Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 50481, "text": "(In reply to comment #4)\n> In particular, am I correct to assume that ssl_io_input_getline is used only by\n> ssl_io_filter_input which is used only by the https *client* that in turn is\n> used only by mod_proxy? How localized is this change? Can it affect mod_ssl as\n> an https server?\n\nI also affects the https server as this code is used during the dechunking of data. In your case you noticed the error with chunked responses but the same error exists without this patch with chunked request bodys (e.g. in a POST request) that are transfered via SSL.", "id": 142883, "time": "2010-12-21T06:46:39Z", "creator": "rpluem@apache.org", "creation_time": "2010-12-21T06:46:39Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 50481, "text": "Proposed for backport as r1052212.", "id": 142926, "time": "2010-12-23T05:11:40Z", "creator": "rpluem@apache.org", "creation_time": "2010-12-23T05:11:40Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "csapuntz@gmail.com", "attachment_id": null, "is_private": false, "id": 145610, "time": "2011-04-06T18:57:02Z", "bug_id": 50481, "creation_time": "2011-04-06T18:57:02Z", "text": "Questions/comments on the patch: \n\n * what would be returned at end of stream without CR/LF? I suspect the code would just not return the last bit of data...\n * what are the semantics of MODE_GET_LINE? Is it OK to return an error and data?\n * char_buffer_write doesn't append. If the function gets EAGAIN twice in a row, it will clobber the first bit of data."}, {"count": 9, "tags": [], "creator": "csapuntz@gmail.com", "attachment_id": null, "text": "(In reply to comment #7)\n> Proposed for backport as r1052212.\n\nThanks for the patch. Helped me out of a bind on a server I was using.\n\nHere's another patch to consider for the problem. Should deal with the issues brought up in comment 8. The patch is an alternative to the one in the mail. \nIt also fixed the issue for me.\n\n--- modules/ssl/ssl_engine_io.c 2011-04-06 18:28:48.000000000 -0700\n+++ modules/ssl/ssl_engine_io.c 2011-04-06 18:28:48.000000000 -0700\n@@ -741,7 +741,7 @@\n         status = ssl_io_input_read(inctx, buf + offset, &tmplen);\n\n         if (status != APR_SUCCESS) {\n-            return status;\n+            return (*len > 0) ? APR_SUCCESS : status;\n         }\n\n         *len += tmplen;", "id": 145612, "time": "2011-04-06T21:38:50Z", "bug_id": 50481, "creation_time": "2011-04-06T21:38:50Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 50481, "text": "For reference, the change committed to 2.2.x was r1069427\n\nYou pose good questions!  This code is particularly arcane.  We had some list discussion of this:\n\nhttp://www.mail-archive.com/dev@httpd.apache.org/msg49951.html\n\n(In reply to comment #8)\n> Questions/comments on the patch: \n> \n>  * what would be returned at end of stream without CR/LF? I suspect the code\n> would just not return the last bit of data...\n\nI believe it would fail with APR_EOF; not particularly sure though.\n\n>  * what are the semantics of MODE_GET_LINE? Is it OK to return an error and\n> data?\n\nPer list discussion... it's not really clear.\n\n>  * char_buffer_write doesn't append. If the function gets EAGAIN twice in a\n> row, it will clobber the first bit of data.\n\nIn the case where ssl_io_input_read() is called with a non-empty cbuf, that function will copy the cbuf contents into the passed-in 'buf' buffer; so it gets copied out then the cbuf pointers are reset.", "id": 145617, "time": "2011-04-07T08:17:08Z", "creator": "jorton@redhat.com", "creation_time": "2011-04-07T08:17:08Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "As Joe notes in comment #10 this was fixed on 2.2.18 release.", "id": 170037, "time": "2013-09-11T15:13:56Z", "bug_id": 50481, "creation_time": "2013-09-11T15:13:56Z", "is_private": false}]
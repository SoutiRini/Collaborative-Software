[{"text": "If org.apache.log4j.FileAppender buffers output (option BufferedIO set to true), then the underlying WriterAppender's field immediateFlush will set to false.\n\nSo, the FileAppender will skip flushing and it is very likely that the last few log events will not be recorded on disk when the application exits.\n\nTo avoid the loss of these events, an optional virtual-machine shutdown that flushes automatically at the end should be used.", "tags": [], "bug_id": 45934, "attachment_id": null, "count": 0, "id": 121145, "time": "2008-10-02T04:40:56Z", "creator": "m@rtin-burger.de", "creation_time": "2008-10-02T04:40:56Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 22667\nPatch to FileAppender.java that produces implementation of proposed feature.\n\nThe attached patch implements the proposed feature using a shutdown thread. It adds a new optional option \"ShutdownHook\" (default: false). If this option is set to true and option \"BufferedIO\" is set to true as well, the shutdown hook will be registered in method setFile(...).\n\nNote: The test suite runs without any error after applying the patch, at least on my system.", "is_private": false, "id": 121146, "creator": "m@rtin-burger.de", "time": "2008-10-02T04:51:20Z", "bug_id": 45934, "creation_time": "2008-10-02T04:51:20Z", "attachment_id": 22667}, {"count": 2, "tags": [], "text": "Comment on attachment 22667\nPatch to FileAppender.java that produces implementation of proposed feature.\n\n>Index: src/main/java/org/apache/log4j/FileAppender.java\n>===================================================================\n>--- src/main/java/org/apache/log4j/FileAppender.java\t(revision 701074)\n>+++ src/main/java/org/apache/log4j/FileAppender.java\t(working copy)\n>@@ -17,14 +17,21 @@\n> \n> package org.apache.log4j;\n> \n>-import java.io.*;\n>+import java.io.BufferedWriter;\n>+import java.io.File;\n>+import java.io.FileNotFoundException;\n>+import java.io.FileOutputStream;\n>+import java.io.IOException;\n>+import java.io.InterruptedIOException;\n>+import java.io.Writer;\n> \n>-import org.apache.log4j.spi.ErrorCode;\n>-import org.apache.log4j.helpers.QuietWriter;\n> import org.apache.log4j.helpers.LogLog;\n>+import org.apache.log4j.helpers.QuietWriter;\n>+import org.apache.log4j.spi.ErrorCode;\n> \n> // Contibutors: Jens Uwe Pipka <jens.pipka@gmx.de>\n> //              Ben Sandee\n>+//              Martin Burger <m@rtin-burger.de>\n> \n> /**\n>  *  FileAppender appends log events to a file.\n>@@ -60,6 +67,11 @@\n>    */\n>   protected int bufferSize = 8*1024;\n> \n>+  /**\n>+   * Do we use shutdown hook to flush buffer automatically? \n>+   */\n>+  protected boolean useShutdownHook = false;\n>+\n> \n>   /**\n>      The default constructor does not do anything.\n>@@ -85,7 +97,7 @@\n>   FileAppender(Layout layout, String filename, boolean append, boolean bufferedIO,\n> \t       int bufferSize) throws IOException {\n>     this.layout = layout;\n>-    this.setFile(filename, append, bufferedIO, bufferSize);\n>+    this.setFile(filename, append, bufferedIO, bufferSize, useShutdownHook);\n>   }\n> \n>   /**\n>@@ -101,7 +113,7 @@\n>   FileAppender(Layout layout, String filename, boolean append)\n>                                                              throws IOException {\n>     this.layout = layout;\n>-    this.setFile(filename, append, false, bufferSize);\n>+    this.setFile(filename, append, false, bufferSize, useShutdownHook);\n>   }\n> \n>   /**\n>@@ -156,7 +168,7 @@\n>   void activateOptions() {\n>     if(fileName != null) {\n>       try {\n>-\tsetFile(fileName, fileAppend, bufferedIO, bufferSize);\n>+\tsetFile(fileName, fileAppend, bufferedIO, bufferSize, useShutdownHook);\n>       }\n>       catch(java.io.IOException e) {\n> \terrorHandler.error(\"setFile(\"+fileName+\",\"+fileAppend+\") call failed.\",\n>@@ -167,6 +179,10 @@\n>       LogLog.warn(\"File option not set for appender [\"+name+\"].\");\n>       LogLog.warn(\"Are you using FileAppender instead of ConsoleAppender?\");\n>     }\n>+\n>+    if (this.bufferedIO && this.useShutdownHook) {\n>+      Runtime.getRuntime().addShutdownHook(new FileAppenderShutdownHook(this));\n>+    }\n>   }\n> \n>  /**\n>@@ -176,6 +192,9 @@\n>   void closeFile() {\n>     if(this.qw != null) {\n>       try {\n>+    if (this.bufferedIO && this.useShutdownHook) {\n>+      this.qw.flush();\n>+    }\n> \tthis.qw.close();\n>       }\n>       catch(java.io.IOException e) {\n>@@ -210,6 +229,15 @@\n>     return this.bufferSize;\n>   }\n> \n>+  /**\n>+  Get the value of the <b>ShutdownHook</b> option.\n>+\n>+  */\n>+  public\n>+  boolean getShutdownHook() {\n>+   return this.useShutdownHook;\n>+  }\n>+\n> \n> \n>   /**\n>@@ -255,6 +283,43 @@\n>   }\n> \n>   /**\n>+  The <b>ShutdownHook</b> option takes a boolean value. It is set to\n>+  <code>false</code> by default. If <code>true</code> and <code>BufferedIO</code>\n>+  is set to <code>true</code> as well, a virtual-machine shutdown hook will\n>+  be registered that flushes and closes the underling stream.\n>+  \n>+  <p>Use this option to avoid lost log messages.</p>\n>+\n>+  @see WriterAppender#setImmediateFlush(boolean)\n>+  */\n>+  public\n>+  void setShutdownHook(boolean shutdownHook) {\n>+   this.useShutdownHook = shutdownHook;\n>+  }\n>+\n>+\n>+  /**\n>+  <p>Sets and <i>opens</i> the file where the log output will\n>+  go. The specified file must be writable.\n>+\n>+  <p>If there was already an opened file, then the previous file\n>+  is closed first.\n>+\n>+  <p><b>Do not use this method directly. To configure a FileAppender\n>+  or one of its subclasses, set its properties one by one and then\n>+  call activateOptions.</b>\n>+\n>+  @param fileName The path to the log file.\n>+  @param append   If true will append to fileName. Otherwise will\n>+      truncate fileName.  */\n>+  public\n>+  synchronized\n>+  void setFile(String fileName, boolean append, boolean bufferedIO, int bufferSize)\n>+                                                          throws IOException {\n>+    this.setFile(fileName, append, bufferedIO, bufferSize, useShutdownHook);\n>+  }\n>+  \n>+  /**\n>     <p>Sets and <i>opens</i> the file where the log output will\n>     go. The specified file must be writable.\n> \n>@@ -270,7 +335,7 @@\n>         truncate fileName.  */\n>   public\n>   synchronized\n>-  void setFile(String fileName, boolean append, boolean bufferedIO, int bufferSize)\n>+  void setFile(String fileName, boolean append, boolean bufferedIO, int bufferSize, boolean shutdownHook)\n>                                                             throws IOException {\n>     LogLog.debug(\"setFile called: \"+fileName+\", \"+append);\n> \n>@@ -313,6 +378,7 @@\n>     this.fileAppend = append;\n>     this.bufferedIO = bufferedIO;\n>     this.bufferSize = bufferSize;\n>+    this.useShutdownHook = shutdownHook;\n>     writeHeader();\n>     LogLog.debug(\"setFile ended\");\n>   }\n>@@ -338,5 +404,20 @@\n>     this.fileName = null;\n>     super.reset();\n>   }\n>+\n>+\n>+  private static class FileAppenderShutdownHook extends Thread {\n>+\n>+      private final FileAppender appender;\n>+\n>+      public FileAppenderShutdownHook(FileAppender appender) {\n>+          this.appender = appender;\n>+      }\n>+\n>+      public void run() {\n>+          this.appender.close();\n>+      }\n>+  }\n>+\n> }\n> \n>", "is_private": false, "id": 177438, "creator": "alejandrejesus1123@gmail.com", "time": "2014-08-29T12:24:46Z", "bug_id": 45934, "creation_time": "2014-08-29T12:24:46Z", "attachment_id": 22667}]
[{"count": 0, "attachment_id": 24444, "bug_id": 48085, "text": "Created attachment 24444\nPOI throws OutOfMemoryError while parsing this short file\n\nAn OutOfMemoryError is thrown while parsing a very short (1024 bytes long),\ndefect XLS file with\nWorkbookFactory.create(inputStream);\n(see attached file)\n\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n    at\norg.apache.poi.poifs.storage.BlockAllocationTableReader.<init>(BlockAllocationTableReader.java:82)\n    at\norg.apache.poi.poifs.filesystem.POIFSFileSystem.<init>(POIFSFileSystem.java:164)\n    at org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:316)\n    at org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:297)\n    at\norg.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:60)", "id": 131492, "time": "2009-10-29T08:24:42Z", "creator": "leo@lww.at", "creation_time": "2009-10-29T08:24:42Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Try increasing your java heap size - the default is very small\n\nExcel files aren't very memory friendly to process, if you really do have memory issues, then you'll need to use the eventmodel (see the docs for details)", "id": 131493, "time": "2009-10-29T08:27:07Z", "bug_id": 48085, "creation_time": "2009-10-29T08:27:07Z", "is_private": false}, {"count": 2, "tags": [], "text": "(In reply to comment #1)\n> Try increasing your java heap size - the default is very small\n> Excel files aren't very memory friendly to process, if you really do have\n> memory issues, then you'll need to use the eventmodel (see the docs for\n> details)\n\nIncreasing the heap size to 2gb doesn't help and the file is only of 1024 bytes size! I don't think the HSSF parser should take more than 2gb for a defect 1024 byte file!", "is_private": false, "bug_id": 48085, "id": 131494, "time": "2009-10-29T08:34:14Z", "creator": "leo@lww.at", "creation_time": "2009-10-29T08:34:14Z", "attachment_id": null}, {"count": 3, "attachment_id": 24445, "bug_id": 48085, "text": "Created attachment 24445\nscreenshot of Excel 2008 for Mac error message when opening err.xls\n\nThis looks like a classic case of a malformed file causing an infinite recursion error. I have some concerns that this is an example of a DOS attack against any POI based spiders.\n\nI do wonder how this file was created, was it a damaged file from a bad disk or a crash?\n\nI think this is a bug, but I don't think it has a high priority. I suggest that the OP put a try-catch around opening the workbook. I know that this is not ideal.", "id": 131495, "time": "2009-10-29T08:57:11Z", "creator": "dfisher@jmlafferty.com", "creation_time": "2009-10-29T08:57:11Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "leo@lww.at", "attachment_id": null, "id": 131496, "time": "2009-10-29T09:14:22Z", "bug_id": 48085, "creation_time": "2009-10-29T09:14:22Z", "is_private": false, "text": "(In reply to comment #3)\n> This looks like a classic case of a malformed file causing an infinite\n> recursion error. I have some concerns that this is an example of a DOS attack\n> against any POI based spiders.\n\n> I do wonder how this file was created, was it a damaged file from a bad disk or\n> a crash?\n\nI don't know how this file has been generated (I got it as bug report for a POI-enabled application). I don't think that it was maliciously generated. It looks to be like an XLS header with all nullbytes replaced with spaces. It' clearly invalid, but Apache POI normally throws a \"normal\" exception if used with invalid files and does not need huge amounts of memory.\n\n> I think this is a bug, but I don't think it has a high priority. I suggest that\n> the OP put a try-catch around opening the workbook. I know that this is not\n> ideal.\n\nThank you for the tip. This seems to at least avoid the complete crash of the application in this case."}, {"count": 5, "tags": [], "creator": "josh@apache.org", "text": "Fixed in svn r832505\n\njunit added\n\nThe sample file has a corrupted header block. It looks like many of the bytes have been replaced with spaces.  Thus the reported number of allocation table blocks is 0x20202001. I put a restriction that this field must not exceed 0x0000FFFF (which might correspond to a file size of 4GB). The largest value found in the existing POI test data is 0x00000059.", "id": 131635, "time": "2009-11-03T11:05:10Z", "bug_id": 48085, "creation_time": "2009-11-03T11:05:10Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 24159, "text": "I posted this to the user list:\n\n\nI just came across a deadlock condition in my code brought out by\nLog4J.  Here is a simplified view of the objects in play:\n\nclass State {\n   Logger log1;\n  \n   synchronized void setState() {\n     // Something takes a long time here\n     log.debug(\"hello world\");\n   }\n\n   synchronized Object getState() {\n   }\n\n   public String toString() {\n      return \"state=\" + getState();\n   }\n}\n\nSo, imagine that I call in thread (1)\n\nLogger log2;\nState s = new State();\nlog.debug(s);\n\nAnd then, in another thread (2), I called setState().  It is in the\nmiddle of setState when this debug statement is fired.\n\nIn thread (1), the logger holds a lock on\n'org.apache.log4j.spi.RootCategory'.  The renderer attempts construct\nthe message by calling s.toString(), and toString calls getState().\n\nThread (1) has to wait for setState in thread (2) to exit.  But setState\ncan't exit until it has finished logging.\n\n\n\nOn Fri, 2003-10-24 at 15:26, Elias Ross wrote:\n> \n> Here is the stack trace:\n\norg.apache.log4j.WriterAppender.append(WriterAppender.java:150)\norg.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n        - locked <d6655dd0> (a\norg.jboss.logging.appender.DailyRollingFileAppender)\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n        org.apache.log4j.Category.callAppenders(Category.java:187)\n        - locked <d52e5db0> (a org.apache.log4j.spi.RootCategory)\n\nI suggest what needs to happen is that the rendering stage has to take\nplace without holding any locks.  But that would mean that\nAppenderSkeleton would have to be re-written (but only slightly):\n\n1.  Holding locks, all major pre-conditions are checked.  (Is the event\nfilterable?  Is the threshold set too low?)\n2.  The message is rendered.\n3.  Holding any final locks necessary to actually write/output the\nmessage, the rendered message is then sent to disk/the network/wherever.\n\nI've run into this problem two times:  One time while using JBoss,\nanother time using a third-party library that uses log4j.  Since more\nand more libraries and platforms use log4j (or commons-logging), this\nsort of \"rendering-interference\"--especially on multiple-CPU\nmachines--is very worrisome.", "id": 46332, "time": "2003-10-27T18:26:28Z", "creator": "eross@m-qube.com", "creation_time": "2003-10-27T18:26:28Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "eross@m-qube.com", "text": "\nI'm wondering if this issue has been resolved in Log4j 1.3?  I can lend my\nassistance, as I have dealt with multi-processor issues many times on our\nSolaris machines.\n\nIt is also a performance problem, as you have to hold category locks while the\nappender is doing its thing.  If you're appending to two disks, or to JMS and a\nSocket, then the IO throughput could be increased dramatically for\nmulti-processor machines.", "id": 48999, "time": "2003-12-12T19:49:23Z", "bug_id": 24159, "creation_time": "2003-12-12T19:49:23Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "is_private": false, "id": 49373, "time": "2003-12-18T20:20:10Z", "bug_id": 24159, "creation_time": "2003-12-18T20:20:10Z", "text": "Elias, \n\nThis bug is impossible to fix as long as log4j holds any exclusive lock while \nrendering the message object. The way log4j is designed, the rendering of the \nmessage object is done at the latest possible moment, that is when formatting \nthe log message. \n\nIf log4j holds to any lock at that moment (when rendering the object) a \ndeadlock will occur. In log4j 1.2.8, the lock is on a logger object. In log4j \nversion 1.3, the lock is on the appender itself even if locks on loggers are \nnon-exclusive read-write locks.\n\nIn short, either we modify our code making log4j thread *unsafe* or you change \nyour code. The former is not an option. As such, I am marking this report as \nWONTFIX. "}, {"count": 3, "tags": [], "bug_id": 24159, "text": "Created attachment 9633\nDiffs for AppenderSkeleton and WriterAppender", "id": 49376, "time": "2003-12-18T21:13:21Z", "creator": "eross@m-qube.com", "creation_time": "2003-12-18T21:13:21Z", "is_private": false, "attachment_id": 9633}, {"count": 4, "tags": [], "bug_id": 24159, "attachment_id": 9634, "is_private": false, "id": 49379, "time": "2003-12-18T22:15:45Z", "creator": "eross@m-qube.com", "creation_time": "2003-12-18T22:15:45Z", "text": "Created attachment 9634\nChanged appender attachable to return a copy-on-write array"}, {"count": 5, "tags": [], "bug_id": 24159, "attachment_id": 9635, "text": "Created attachment 9635\nChanged category to not lock on the appender attachable", "id": 49380, "time": "2003-12-18T22:16:24Z", "creator": "eross@m-qube.com", "creation_time": "2003-12-18T22:16:24Z", "is_private": false}, {"count": 6, "tags": [], "creator": "eross@m-qube.com", "attachment_id": null, "is_private": false, "id": 49381, "time": "2003-12-18T22:27:10Z", "bug_id": 24159, "creation_time": "2003-12-18T22:27:10Z", "text": "\nOkay, you can have your cake and eat it too.  (\"Have your synchronization and\navoid deadlocks too\"?)\n\nThere are a few problems with the AppenderAttachable changes I suggest.  One is\nthat it's not efficient to maintain a vector and array.  Two, iteration is\neffectively doubled, but this can be optimized.  And I also think the cached\narray needs to be cleared after every add and remove, just in case an\nadd+remove+get is done in another thread.  Anyway, I'll leave that up to you to\noptimize and remove that boundry (somewhat) easily solved condition.\n\nI'm re-opening in the hope that you will reconsider your conclusion.  I believe\nthere are more than the two alternatives you suggest.\n"}, {"count": 7, "text": "Ceki,\n\nHave you looked at my proposed changes?  Perhaps you won't change\nAppenderSkeleton to be deadlock free, however I would appreciate it if you gave\nit some consideration.\n\nMy proposed changes work (and aren't impossible) but I can understand wanting to\npreserve compatibility so changing AppenderSkeleton might be inappropriate.  How\nabout creating a AppenderSupport or AppenderBase?", "creator": "eross@m-qube.com", "attachment_id": null, "id": 63163, "time": "2004-09-07T17:42:20Z", "bug_id": 24159, "creation_time": "2004-09-07T17:42:20Z", "tags": [], "is_private": false}, {"count": 8, "text": "Created attachment 12840\nChanges against Log4J 1.3 CVS", "creator": "eross@m-qube.com", "attachment_id": 12840, "id": 64074, "time": "2004-09-22T22:11:21Z", "bug_id": 24159, "creation_time": "2004-09-22T22:11:21Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 24159, "is_private": false, "id": 64076, "creation_time": "2004-09-22T22:12:49Z", "time": "2004-09-22T22:12:49Z", "creator": "eross@m-qube.com", "text": "\nI tried using read-write locks and other techniques, which do indeed\nwork but are not really backwards compatible, but I think the best\nsolution I came up with is this: (you can refer to the diffs against CVS)\n\n1.  While synchronized, check on the threshold\n2.  Call getRenderedMessage(), ignore the result\n3.  While synchronized, check if guard is set or closed\n                     ...then call append()\n\nThe trick with calling LoggingEvent.getRenderedMessage() early is that\nit caches the rendered form of the message.  This is something not\navailable in 1.2, but will work in 1.3.\n\nHere is the result for those who can't view the attachment:\n\npublic abstract class AppenderSkeleton implements Appender, OptionHandler {\n\n...\n\n  public void doAppend(LoggingEvent event) {\n    if (!canAppend(event))\n      return;\n    // Pre-render the message to prevent deadlock\n    event.getRenderedMessage();\n    doAppend0(event);\n  }\n\n  private synchronized void doAppend0(LoggingEvent event) {\n    if (closed) {\n      LogLog.error(\n        \"Attempted to append to closed appender named [\" + name + \"].\");\n      return;\n    }\n    try {\n      if (guard)\n        return;\n      guard = true;\n      append(event);\n    } finally {\n      guard = false;\n    }\n  }\n\n  private synchronized boolean canAppend(LoggingEvent event) {\n    if (!isAsSevereAsThreshold(event.getLevel())) {\n      return false;\n    }\n    Filter f = this.headFilter;\n\nFILTER_LOOP:\n    while (f != null) {\n      switch (f.decide(event)) {\n      case Filter.DENY:\n        return false;\n      case Filter.ACCEPT:\n        break FILTER_LOOP;\n      case Filter.NEUTRAL:\n        f = f.getNext();\n      }\n    }\n    return true;\n  }\n\n\n", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 24159, "attachment_id": null, "is_private": false, "id": 68270, "time": "2004-12-10T19:05:15Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-10T19:05:15Z", "text": "I don't think this is worth doing: if log4j had a serious deadlock situation, \nwe'd have heard more about it by now, after years of wide-spread usage.  Of \ncourse you could come up with contrived code to fit any point you're trying to \nmake, but it's just that: contrived."}, {"count": 11, "tags": [], "creator": "eross@m-qube.com", "attachment_id": null, "is_private": false, "id": 68280, "time": "2004-12-10T19:39:23Z", "bug_id": 24159, "creation_time": "2004-12-10T19:39:23Z", "text": "I feel a bit frustrated because I've been bitten in the ass a few times\nencountering this \"contrived\" problem and I haven't been taken very\nseriously pointing this out.  As I have tried to explain, this is\nsomething that has happened before on servers at this company, and it's\nsomething we'd like to have fixed.\n\nIf you one day turned on DEBUG and soon watched your server lock up,\nyou'd be shaking your fist at whoever designed log4j.  It is not just\nsome annoying bug, it's also something that can result in your server\nhanging.  And I'd rather have the server reboot than do that...  I admit\nmy test case was \"contrived\", but in the real world people employ\nmultiple levels of indirection and the actual triggering mechanism can\nbe quite convoluted.  And it can lurk until one unlucky day somebody\nunknowingly turns on DEBUG.\n\nI thought in the quest for helping fix this bug we could improve\nconcurrency and multi-threading.  Even if you think this bug is dumb,\nwouldn't you like to improve in this area?\n\nI sent out some changes that will maintain compatibility and fix this\nissue, have you seen them?\n\nI've also talked to several people who use JBoss who have run into this before.  "}, {"count": 12, "tags": [], "bug_id": 24159, "attachment_id": null, "is_private": false, "id": 68720, "time": "2004-12-20T11:22:49Z", "creator": "meling@acm.org", "creation_time": "2004-12-20T11:22:49Z", "text": "I support any attempt to fix this bug, as I also have experienced this problem \non several occasions.  SO PLEASE FIX IT.\n\nHein Meling\n\n\n(In reply to comment #11)\n> I feel a bit frustrated because I've been bitten in the ass a few times\n> encountering this \"contrived\" problem and I haven't been taken very\n> seriously pointing this out.  As I have tried to explain, this is\n> something that has happened before on servers at this company, and it's\n> something we'd like to have fixed.\n> \n> If you one day turned on DEBUG and soon watched your server lock up,\n> you'd be shaking your fist at whoever designed log4j.  It is not just\n> some annoying bug, it's also something that can result in your server\n> hanging.  And I'd rather have the server reboot than do that...  I admit\n> my test case was \"contrived\", but in the real world people employ\n> multiple levels of indirection and the actual triggering mechanism can\n> be quite convoluted.  And it can lurk until one unlucky day somebody\n> unknowingly turns on DEBUG.\n> \n> I thought in the quest for helping fix this bug we could improve\n> concurrency and multi-threading.  Even if you think this bug is dumb,\n> wouldn't you like to improve in this area?\n> \n> I sent out some changes that will maintain compatibility and fix this\n> issue, have you seen them?\n> \n> I've also talked to several people who use JBoss who have run into this \nbefore.  \n\n"}, {"count": 13, "tags": [], "creator": "eross@m-qube.com", "text": "\nFrom a thread on the JBoss forum:\nhttp://www.jboss.org/index.html?module=bb&op=viewtopic&t=56740\n\nAlanY\nLocation: Perth, Western Australia\n-----------------------------------\n\nNot sure if this is related to your problem ... but we too have had JBoss\nhanging during web requests and also other servlet related activities.\n\nHad to use JProfiler to help us work out what was going on. It revealed that\nlog4j (yes amazing as it seems) is causing blocked threads.\n\nYou can refer to http://issues.apache.org/bugzilla/show_bug.cgi?id=24159 in\nbugzilla for a rundown on the problem.\n\nWhilst we are not 100% positive that this is our problem I am in the process of\nturning off the logging to see if the problem still occurs. Unfortunately this\ncan take anywhere from 10 minutes to 8 hours of testing as the deadlock is\ndifficult to isolate in such a big system as ours.\n\nAnyhow - hope this helps and let us know how you get on. ", "id": 69113, "time": "2004-12-31T05:38:11Z", "bug_id": 24159, "creation_time": "2004-12-31T05:38:11Z", "is_private": false, "attachment_id": null}, {"count": 14, "text": "1.2.12 candidate", "bug_id": 24159, "attachment_id": null, "id": 76892, "time": "2005-07-01T19:56:19Z", "creator": "mwomack@apache.org", "creation_time": "2005-07-01T19:56:19Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "bug_id": 24159, "text": "is there any reason to acquire the RootCategory lock before the renderer \nconstructing the message?", "id": 77237, "time": "2005-07-13T01:02:43Z", "creator": "arthur_tsang@hotmail.com", "creation_time": "2005-07-13T01:02:43Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "\nI'm the person who filed the bug 1 1/2 years ago...\n\nDespite having to wait, I think that 1.2 is probably too early and\nlikely too disruptive.  You would have to change the synchronization\nbehavior of AppenderSkeleton, which would subtly break classes that\nextend AppenderSkeleton or its subclasses.\n\nIn 1.3, you have already cleaned up the coarse locking in the Category\n(Logger) class with respect to adding and removing appenders by using a\nread-write lock.  This is a step in the right direction.  My concurrent\nappender uses the same read-write class and my AppenderSkeleton (called\nConcurrentAppender) is nearly identical in implementation to the\noriginal, except for a few additional finer-locked objects.\n\nFor 1.3, it would be reasonable to include a concurrent appender tree.\nIn addition to having better performance and less coarse locking (and no\ndead-locks), it would be a reasonable parent class for network- and\nJDBC-based loggers.  Eventually, they could form the basis of appenders\nin a future release.\n\nFrom working with application services (namely JBoss) for over two\nyears, it is imperative to have a logging subsystem that is dead-lock\nfree and high-performance on two and four-processor machines.  Although,\nwe do not log a huge volume typically, it is necessary for debugging a\nlive a system.  My original complaint came from debugging a third-party\nlibrary on a application system.\n\nIf you want a more current version of the concurrent.zip for review, please let\nme know.  \"Changes against Log4J 1.3 CVS\" is out of date.\n", "id": 77315, "time": "2005-07-15T03:19:21Z", "creator": "eross@m-qube.com", "creation_time": "2005-07-15T03:19:21Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 24159, "text": "1.2.12 declined\n\nLeaving open for review in 1.3 work.  Thanks for the comments, Elias.", "id": 77340, "time": "2005-07-15T18:49:15Z", "creator": "mwomack@apache.org", "creation_time": "2005-07-15T18:49:15Z", "is_private": false, "attachment_id": null}, {"count": 18, "text": "I also support any attempt to fix this bug. We were bitten by this as well; it\nwas unexpected that our appender would get called while a \"global\" lock was held\nand ended up causing a deadlock in our highly multithreaded application.\n\n(In reply to comment #12)\n> I support any attempt to fix this bug, as I also have experienced this problem \n> on several occasions.  SO PLEASE FIX IT.\n> \n> Hein Meling\n> \n> \n> (In reply to comment #11)\n> > I feel a bit frustrated because I've been bitten in the ass a few times\n> > encountering this \"contrived\" problem and I haven't been taken very\n> > seriously pointing this out.  As I have tried to explain, this is\n> > something that has happened before on servers at this company, and it's\n> > something we'd like to have fixed.\n> > \n> > If you one day turned on DEBUG and soon watched your server lock up,\n> > you'd be shaking your fist at whoever designed log4j.  It is not just\n> > some annoying bug, it's also something that can result in your server\n> > hanging.  And I'd rather have the server reboot than do that...  I admit\n> > my test case was \"contrived\", but in the real world people employ\n> > multiple levels of indirection and the actual triggering mechanism can\n> > be quite convoluted.  And it can lurk until one unlucky day somebody\n> > unknowingly turns on DEBUG.\n> > \n> > I thought in the quest for helping fix this bug we could improve\n> > concurrency and multi-threading.  Even if you think this bug is dumb,\n> > wouldn't you like to improve in this area?\n> > \n> > I sent out some changes that will maintain compatibility and fix this\n> > issue, have you seen them?\n> > \n> > I've also talked to several people who use JBoss who have run into this \n> before.  \n> \n> \n\n", "bug_id": 24159, "attachment_id": null, "id": 82782, "time": "2005-11-23T21:52:55Z", "creator": "rgenter@silverlink.com", "creation_time": "2005-11-23T21:52:55Z", "tags": [], "is_private": false}, {"count": 19, "tags": [], "creator": "carnold@apache.org", "text": "My unsubstantiated opinion is that the proposed solution would break the locking\ncontract so it can't be addressed in a 1.x branch.\n\nFrom what I can tell, the observed problem is not a regression.  The\ncoarse-grain locking approach has been in log4j likely forever.  The problem\nonly manifests itself when you pass an Object (not a String) as the message and\nthe toString() method itself logs or otherwise acquires a lock on a log4j\nobject.  If the developer does not pass objects or only pass objects where he\nknows that toString() does not acquire locks, the problem does not occur.\n\nIf a lock is released to allow a locking toString() to be called, all the\npotential code paths that might be executed (possibly including custom appenders\nand layouts) must be audited to see if their will be any interaction between the\nin-process logging request and logging requests that may be called in the\ntoString() call or if the release of the lock might allow any other logging\nrequest to enter the pipeline while the original request is suspended.  Much of\nthe log4j internals aren't thread safe by themselves and depend on the outer\nsynchronization to keep things safe.\n\nAnother approach would be to use a thread with a timeout to call toString().  If\nthe call blocked, then some message like \"Message unavailable timeout while\ncalling CLASSNAME.toString() \" could be created.  It would add overhead to any\ncall where msg is not a String and all the preconditions are satisified, however\nthat may not be high relative to the processing cost of most appenders.\n", "id": 83184, "time": "2005-12-03T23:03:39Z", "bug_id": 24159, "creation_time": "2005-12-03T23:03:39Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 24159, "text": "Although the *first* comments were suggesting changing AppenderSkeleton, I\nhave been suggesting in the later comments an alternative solution that does\nnot break compatibility.\n\nI offer the following suggestion:\n\nMaintain the existing appender class tree as-is.  Introduce a new package\ncalled org.apache.log4j.concurrent which contains deadlock-free and concurrent\nappenders.  (These are within an attachment to this bug, I also have newer\nversions to offer which have several tweaks.)\n\nMake any new 1.3 appenders (e.g. \"log4j.rolling.RollingFileAppender\") derive\nfrom log4j.concurrent.FileAppender.\n\nMake the new org.apache.log4j.pattern.PatternConverter thread-safe.  (All\nof them for 1.3 are, except the DatePatternConverter.)\n\nAlthough \"Layout\" does not indicate thread usage pattern, by convention it\nappears thread-unsafe.  I suggest that you fix it by stating that\nimplementations must be thread-safe and fix the log4j implementations to match.\n(Alternatively, assume that this class must be externally locked.  This increases\nthe locking scope for all usages, although locking may not be necessary.)  (Note\nthat string buffer reuse does not help performance for mature JVM versions.)\n\nAdvantages:  Synchronization convention guaranteed for users who derive from\nexisting appender classes.  Provides a standard implementation base for\napplication servers, such as JBoss and Tomcat.\n\nDisadvantages:  Existing appender classes are \"mirrored\" and increase\nmaintenence cost.  Additional code bloat.  (Note:  If the classes in this\npackage are not used, there is no memory impact.)\n\n* Note:  There may be some possible way to create an AppenderSkeleton that uses\ntwo different locking strategies, which are configured by system property, a\nconfiguration key, or by class name.  You would want to have any subclass\nimplementation by default use the original locking strategy.  I considered this\napproach, but I thought it better to clean up the existing AppenderSkeleton\nugliness instead.\n\n* Note:  If somebody would allow it, I would like to have repository access so\nthat I may check-in and maintain the classes properly myself.  I'm not sure what\nthe secret handshake is, but I have repository access for some other open\nprojects, so I believe I'm generally trustworthy.", "id": 83185, "time": "2005-12-04T02:22:13Z", "creator": "eross@m-qube.com", "creation_time": "2005-12-04T02:22:13Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 24159, "attachment_id": 9634, "is_private": false, "id": 83186, "time": "2005-12-04T02:24:19Z", "creator": "eross@m-qube.com", "creation_time": "2005-12-04T02:24:19Z", "text": "Comment on attachment 9634\nChanged appender attachable to return a copy-on-write array\n\nLog4j 1.3 now uses a read-write lock so the copy-on-write strategy for the\nappender list is probably not necessary.  (It probably does perform better,\nhowever.)"}, {"count": 22, "tags": [], "bug_id": 24159, "attachment_id": 17133, "id": 83187, "creation_time": "2005-12-04T03:12:10Z", "time": "2005-12-04T03:12:10Z", "creator": "eross@m-qube.com", "text": "Created attachment 17133\nConcurrent library enhancements\n\nThis patch implements the proposal above.", "is_private": false}, {"count": 23, "tags": [], "creator": "eross@m-qube.com", "attachment_id": null, "is_private": false, "id": 83189, "time": "2005-12-04T03:36:51Z", "bug_id": 24159, "creation_time": "2005-12-04T03:36:51Z", "text": "\n> My unsubstantiated opinion is that the proposed solution would \n> break the locking contract so it can't be addressed in a 1.x branch.\n\nAgain, the locking contract only exists for AppenderSkeleton.\n\n\nNote:  Although 99.99% of the users use strings or generally Object.toString()\nas their output message, there is nothing to prevent users from using any other\ncustom object as well.  For example, I wrote an Appender a while back that would\naccept a data structure which contained (essentially) multiple database columns'\nworth of data.\n\nNote 2:  Log4j would cause deadlocks for JBoss when a user logged an Object\nwhich triggered a class loading operation.  This is because JBoss itself uses Log4J.\n\nNote 3:  There is a way with 1.3 to have Log4j render \"printf\"-style messages. \nCurrently, Log4J converts it to a string before calling \"append\", though the\nstring may or may not be actually logged if a filter is present.  (My particular\napplication uses filtering based on MDC values, I would greatly benefit from\n*not* rendering complicated data structures or calculated values from\nObject.toString().)\n\nAn optimization of this behavior would be to create temporary object like this:\n\nclass FormattedMessage {\n  String msg;\n  Object param[];\n  public String toString() { /* format here */ }\n}\n\nIf the call to FormattedMessage.toString() was called when holding a lock on\nAppenderSkeleton, it would greatly increase deadlock potential for statements\nsuch as:\n\nLogger.debug(\"Object stuff: {}\", obj);\n\nWhere \"obj\" itself called Logger.\n"}, {"count": 24, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "> Another approach would be to use a thread with a timeout to call toString().  If\n> the call blocked, then some message like \"Message unavailable timeout while\n> calling CLASSNAME.toString() \" could be created.\n\nI don't know if there would be any way to \"undo\" a deadlock condition.  Perhaps\nyou could call \"Thread.stop\" on one of the deadlocked threads.  This has\npotential to create additional deadlocks.\n\n> Much of\n> the log4j internals aren't thread safe by themselves and depend on the outer\n> synchronization to keep things safe.\n\nMany of the \"internals\" are public classes which are not really internal at all\nand need proper documentation and/or locking.\n\nIt is irresponsible to not state or establish the contract or convention of how\na library's public classes can (or cannot) used within multiple threads.  Even\nthough, for example, a \"Layout\" implementation may not be typically used outside\nof a locking context or appender, it is not guaranteed or even implied this is\nhow it will be used.\n\nThe JDK used to be somewhat haphazard about this, but it's important to state at\nleast if a class is thread-safe or not thread-safe.  It's also important to\nstate how locking is performed in the thread-safe case (or not necessary due to\ndesign.)\n\nOf course, users generally expect things to work for their multi-threaded\napplications.  It's usually good to design with this in mind.  If\nmulti-threaded, unlocked use is dangerous, it needs to be spelled out.  (Did you\nknow that if multiple threads modify and access a java.util.HashMap you can\nlock-up one thread?  If the user reads the JavaDoc they anticipate bad things\nmight happen without locking.)\n", "id": 83190, "time": "2005-12-04T03:56:40Z", "creator": "eross@m-qube.com", "creation_time": "2005-12-04T03:56:40Z", "is_private": false}, {"count": 25, "tags": [], "creator": "eross@m-qube.com", "text": "Created attachment 17612\nConcurrent library enhancements, some other doc fixes\n\n\nSynchronized with revision 375439.", "id": 85493, "time": "2006-02-07T02:20:03Z", "bug_id": 24159, "creation_time": "2006-02-07T02:20:03Z", "is_private": false, "attachment_id": 17612}, {"count": 26, "tags": [], "bug_id": 24159, "text": "Created attachment 17613\nConcurrent library enhancements, some other doc fixes\n\nFix small hole in concurrent.WriterAppender.setWriter()", "id": 85494, "time": "2006-02-07T02:33:37Z", "creator": "eross@m-qube.com", "creation_time": "2006-02-07T02:33:37Z", "is_private": false, "attachment_id": 17613}, {"count": 27, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "Eliminated unused variables and documentation fixes committed to log4j trunk committed in rev \n376836 and 376836.\n\nConcurrent appender project added to Sandbox in rev 376902.  Project can be checked out using\n\nsvn co http://svn.apache.org/repos/asf/logging/sandbox/log4j/concurrent log4j-concurrent\n\nCan be built with either Maven or Ant but each require log4j 1.3 to be provided.  Ant build:\n\nant -Dlog4j.jar=/foo/log4j-1.3alpha-8.jar\n\nMaven build requires manually adding a log4j-1.3alpha8 entry to the local repository.  Maven doesn't \nlike the hyphen in \"1.3alpha-8\".", "id": 85694, "time": "2006-02-11T02:16:45Z", "creator": "carnold@apache.org", "creation_time": "2006-02-11T02:16:45Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 24159, "text": "I'll leave it up to the Log4j people to decide if they want these fixes.", "id": 85890, "time": "2006-02-17T18:23:48Z", "creator": "eross@m-qube.com", "creation_time": "2006-02-17T18:23:48Z", "is_private": false, "attachment_id": null}, {"count": 29, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "\nIt also happended to us when printing a POJO that had to be initialized by\nHibernate. It hanged all the threads in the hole application. The fix was to\nconvert the object to string before logging it (e.g. log.debug(\"\" + obj); ) We\nhad to go thru the hole system and modify all the occurrences.\n\nI think the chances of this happening will increase as more libraries use lo", "id": 87479, "time": "2006-03-31T16:02:14Z", "creator": "humberto.hernandez@softtek.com", "creation_time": "2006-03-31T16:02:14Z", "is_private": false}, {"count": 30, "tags": [], "bug_id": 24159, "attachment_id": null, "is_private": false, "id": 89881, "time": "2006-06-07T14:05:29Z", "creator": "jerome@coffeebreaks.org", "creation_time": "2006-06-07T14:05:29Z", "text": "We are hitting the same issue given the following:\n\n- one thread logs a specially internationalized exception class with an\noverriden getLocalizedMessage(Locale ) method that formats a message according\nto the locale. We reuse the code doing the formatting from another class and\nthat reused code contains some log4j calls\n- another thread triggers a logging simulateneously\n\n\nWe cannot use the \"\" + object trick as the logging of the object is initiated by\nthe printStackTrace which delegates to the VectorWriter.println(Object) call (in\nour case the Object is the exception).\n\n\n\n\nOur current solution is to disable the logging in our third party library that\ndoes the formatting but this is not satisfying. We can try to remove the logging\nfrom the third party library but that removes some functionality.\n\nWe believe the concurrent version of the Appender is the correct way to solve\nthe issue as given the log below, lock 04dbb288 in Thread 1 below wouldn't be\nacquired. I don't see another solution right now.\n\n\nDetails:\n\nFound one Java-level deadlock:\n=============================\n\"Thread 1\":\n  waiting to lock monitor 0x00a89914 (object 0x04dbb830, a\norg.apache.log4j.spi.RootCategory),\n  which is held by \"Thread 2\"\n\"Thread 2\":\n  waiting to lock monitor 0x00a89934 (object 0x04dbb288, a\norg.apache.log4j.ConsoleAppender),\n  which is held by \"Thread 1\"\n\nJava stack information for the threads listed above:\n===================================================\n\"Thread 1\":\n        at org.apache.log4j.Category.callAppenders(Category.java:185)\n        - waiting to lock <0x04dbb830> (a org.apache.log4j.spi.RootCategory)\n        at org.apache.log4j.Category.forcedLog(Category.java:372)\n        at org.apache.log4j.Category.debug(Category.java:241)\n        at com.yyy.MyFormater.format(MyFormater.java:328)\n        at com.xxx.MyException.getLocalizedMessage(MyException.java:273)\n        at com.xxx.MyException.getLocalizedMessage(MyException.java:259)\n        at java.lang.Throwable.toString(Throwable.java:344)\n        at com.xxx.MyException.toString(MyException.java:334)\n        at org.apache.log4j.spi.VectorWriter.println(ThrowableInformation.java:88)\n        at java.lang.Throwable.printStackTrace(Throwable.java:510)\n        - locked <0x06028c48> (a org.apache.log4j.spi.VectorWriter)\n        at\norg.apache.log4j.spi.ThrowableInformation.getThrowableStrRep(ThrowableInformation.java:50)\n        at\norg.apache.log4j.spi.LoggingEvent.getThrowableStrRep(LoggingEvent.java:333)\n        at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:295)\n        at org.apache.log4j.WriterAppender.append(WriterAppender.java:150)\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n        - locked <0x04dbb288> (a org.apache.log4j.ConsoleAppender)\n        at\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n        at org.apache.log4j.Category.callAppenders(Category.java:187)\n        - locked <0x04dc4c08> (a org.apache.log4j.Logger)\n        at org.apache.log4j.Category.forcedLog(Category.java:372)\n        at org.apache.log4j.Category.error(Category.java:303)\n        at com.xxx.Controller.handleError(Controller.java:92)\n        [...]\n\"Thread 2\":\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:201)\n        - waiting to lock <0x04dbb288> (a org.apache.log4j.ConsoleAppender)\n        at\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n        at org.apache.log4j.Category.callAppenders(Category.java:187)\n        - locked <0x04dbb830> (a org.apache.log4j.spi.RootCategory)\n        at org.apache.log4j.Category.forcedLog(Category.java:372)\n        at org.apache.log4j.Category.error(Category.java:286)\n        at com.xxx.OtherController.handleError(OtherController.java:214)\n        [...]"}, {"count": 31, "tags": [], "bug_id": 24159, "text": "*** Bug 33855 has been marked as a duplicate of this bug. ***", "id": 90799, "time": "2006-06-30T20:43:05Z", "creator": "eross@m-qube.com", "creation_time": "2006-06-30T20:43:05Z", "is_private": false, "attachment_id": null}, {"count": 32, "tags": [], "bug_id": 24159, "text": "Additional elements of 2006-02-07 2:33 attachment committed in rev 418432.", "id": 90802, "time": "2006-07-01T03:48:18Z", "creator": "carnold@apache.org", "creation_time": "2006-07-01T03:48:18Z", "is_private": false, "attachment_id": null}, {"count": 33, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "text": "Per vote on log4j-dev concluded on 2006-07-25, the concurrent package from the sandbox has been \nmoved over to the trunk for further feedback and development.  The concurrent package classes have \nbeen added to the base log4j.jar and not spun off into a log4j-concurrent.jar as previous suggested.\n\nThe tests from the sandbox were not migrated from the sandbox.  DeadlockTest is a test of TTCCLayout \nand not a test of the concurrent package and so should be in the corresponding test case.  In addition, it \nwould run out of heap space since it attempts to fire off debug requests as fast as possible for a fixed \nduration.  PerformanceTest is not a unit test.  It would be good to have unit tests that cover the new code, \nbut I'm not undertaking that.\n\nCommitted in rev 426073. ", "id": 91656, "time": "2006-07-27T13:36:54Z", "bug_id": 24159, "creation_time": "2006-07-27T13:36:54Z", "is_private": false}, {"count": 34, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "I support any attempt to fix this bug, as I also have experienced this problem.\n\nWe're a large cable company using Tomcat for our app server needs in the back \noffice for serving our content and binary streams. During our recent efforts \nto scale some of our apps to multiple markets... we are doing benchmarking of \nour servers and we're running into dead locks.\n\nUpon investigation, we found that the root is log4j as already explained in \nthis bug/thread descriptions.\n\nWe strongly support fixing this bug.", "id": 93455, "time": "2006-09-12T19:14:25Z", "creator": "srikanth_ganapavarapu@tvworks.com", "creation_time": "2006-09-12T19:14:25Z", "is_private": false}, {"count": 35, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "In continuation my earlier remarks... our markets deployment results in close \nto Half a Million investment in hardware for new markets' scaling. With this \nbug blocking us... we're not able to move forward and thinking alternatives!", "id": 93456, "time": "2006-09-12T19:15:50Z", "creator": "srikanth_ganapavarapu@tvworks.com", "creation_time": "2006-09-12T19:15:50Z", "is_private": false}, {"count": 36, "text": "Created attachment 18997\nUnit tests for concurrent library, couple bug fixes\n\nHere are some unit tests which I created.  Should cover much of the\nfunctionality.", "bug_id": 24159, "attachment_id": 18997, "id": 94789, "time": "2006-10-12T17:26:30Z", "creator": "genman@noderunner.net", "creation_time": "2006-10-12T17:26:30Z", "tags": [], "is_private": false}, {"count": 37, "tags": [], "bug_id": 24159, "attachment_id": 18998, "text": "Created attachment 18998\nUnit tests for concurrent library, couple bug fixes\n\nAdded test for FileAppender (somehow missed those)", "id": 94791, "time": "2006-10-12T17:55:42Z", "creator": "genman@noderunner.net", "creation_time": "2006-10-12T17:55:42Z", "is_private": false}, {"count": 38, "tags": [], "bug_id": 24159, "attachment_id": 19004, "text": "Created attachment 19004\nRollingFileAppender and ReentrantReadWriteLock  etc.\n\nRollingFileAppender addition, also incorporates fixes in attachment 18998. I\nalso (for usability) changed the locking strategy to use reentrant locking. My\nchanges contain code from Doug Lea, which is public domain code:\n\nhttp://g.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html", "id": 94822, "time": "2006-10-13T12:09:58Z", "creator": "genman@noderunner.net", "creation_time": "2006-10-13T12:09:58Z", "is_private": false}, {"count": 39, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "\nCode and tests checked in and integrated with the ANT build.\n\nI'm reasonably happy with the enhancement.\n\nProbably I need more documentation, but there is package.html and JavaDoc for\nall classes.  Further enhancements can be added as separate issues.", "id": 98623, "time": "2007-01-28T00:24:03Z", "creator": "genman@noderunner.net", "creation_time": "2007-01-28T00:24:03Z", "is_private": false}, {"count": 40, "text": "Changes committed in rev 500148 appear to be related to this bug, but attributed to bug 19004 which \nisn't a log4j bug.", "bug_id": 24159, "attachment_id": null, "id": 98760, "time": "2007-01-30T08:45:05Z", "creator": "carnold@apache.org", "creation_time": "2007-01-30T08:45:05Z", "tags": [], "is_private": false}, {"count": 41, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "text": "Rev 502386 avoided use of Boolean.valueOf(boolean) (added JDK 1.4).  Again misattributed to bug 19004.", "id": 98887, "time": "2007-02-01T14:31:20Z", "bug_id": 24159, "creation_time": "2007-02-01T14:31:20Z", "is_private": false}, {"count": 42, "tags": [], "bug_id": 24159, "attachment_id": null, "text": "*** Bug 41274 has been marked as a duplicate of this bug. ***", "id": 107107, "time": "2007-08-22T19:44:50Z", "creator": "carnold@apache.org", "creation_time": "2007-08-22T19:44:50Z", "is_private": false}]
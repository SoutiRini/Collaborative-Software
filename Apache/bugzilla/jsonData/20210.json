[{"count": 0, "tags": [], "creator": "cp1965@ROGERS.com", "is_private": false, "id": 37717, "creation_time": "2003-05-24T14:15:35Z", "time": "2003-05-24T14:15:35Z", "bug_id": 20210, "text": "I looked at the Java code for Path and PathElement classes.  These two classes \nare used in ANT scripts to implement path blocks such as:\n\n<classpath>\n   <pathelement path=\"lib1,lib2\" />\n   <pathelement localion=\"lib/mylib.jar\">\n</classpath>\n\nI am writing an ANT task that scans previously defined Jars (as above) and \ncalls the JUnit tests on them.  The point is that I want to use a previously \ndefined Jar inside of <classpath>.  The obvious way is to use id references \nsince ANT is XML.  I can do that by putting id attribute and rely on XML to do \nthe rest.  \n\n<classpath>\n   <pathelement path=\"lib1,lib2\" />\n   <pathelement id=\"ref.mylib\" localion=\"lib/mylib.jar\">\n</classpath>\n\nHowever once the <pathelement> (i.e. the object of type Path.PathElement), how \ncan I get the absolute file path to the Jar file?  Intuitively, there should be \na pointer back to the containing Path object.  I don't see it!  Also, there \nshould be some sort of search method on the Path object to look for the \nabsolute path to the Jar file.  We can assume that the Jar file exists because \nthe <classpath> has already run int the 'init' target.\n\nYou might say that the <classpath> block is only declarative and that the Java, \nJavaDoc or similar programs will determine if the Jar file exists.  I will \npoint out that there is a real necessity for a search method to look whether \nthe Jar file exists or not.  \n\nFurthermore, I suspect that this code already exists in your class loader.  I \nwill seach for it.  Such search method should be in the Path class.\n\nRegards,\nColbert Philippe", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 20210, "attachment_id": null, "is_private": false, "id": 37794, "time": "2003-05-26T07:22:00Z", "creator": "bodewig@apache.org", "creation_time": "2003-05-26T07:22:00Z", "text": "Give an id to your <classpath> instead of the <pathelement>.  You can use\nPath#list to get to all its elements.\n\nDoes this address your problem (I'm not sure I understand it)?"}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "text": "PathElement#getParts does all that's needed.", "id": 38026, "time": "2003-05-30T07:57:58Z", "bug_id": 20210, "creation_time": "2003-05-30T07:57:58Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 40423, "attachment_id": null, "id": 93085, "time": "2006-09-06T10:33:14Z", "creator": "vbeltran@ac.upc.edu", "creation_time": "2006-09-06T10:33:14Z", "is_private": false, "text": "Under high ssl loads (SPECweb2005 Banking application) the acceptor thread\ntemporally (60s approx.) stops accepting new connections. The Acceptor thread\nblocks (see above the stacktrace) waiting for client data to finish the ssl\nhandshake, but the client has closed the connection due a connection timeout, so\nit never sends the data. All the subsequent handshakes also block because the\nclients that are waiting to establish a connection get canceled too.\n\nThis behavior prevents the server from accepting any new connections and greatly\ndegrades the performance of the APR connector.\n\nA possible workaround maybe to let the Acceptor thread only accept the\nconnection and the Worker threads call to setSocketOptions() (only the first\ntime). This change will improve the robustness and scalability of the connector.\n\nRegards,\n\n- Vicen\u00e7\n\nPS: IMHO this is an ugly workaround and the whole threading model of the APR\nconnector should be re-thought.\n\n\n\n\n\nName: http-8443-Acceptor-0\nState: RUNNABLE\nTotal blocked: 4  Total waited: 84\n\nStack trace:\norg.apache.tomcat.jni.SSLSocket.handshake(Native Method)\norg.apache.tomcat.util.net.AprEndpoint.setSocketOptions(AprEndpoint.java:850)\norg.apache.tomcat.util.net.AprEndpoint$Acceptor.run(AprEndpoint.java:1004)\njava.lang.Thread.run(Thread.java:797)"}, {"count": 1, "tags": [], "bug_id": 40423, "attachment_id": null, "id": 93089, "time": "2006-09-06T11:14:43Z", "creator": "remm@apache.org", "creation_time": "2006-09-06T11:14:43Z", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of 40418 ***"}]
[{"count": 0, "tags": [], "bug_id": 28006, "text": "In a production environment, under load the following scenario\ndeveloped:\n- Async buffer filled up, and the proceeding requests took priority\n  over the Dispatcher,\n- additional requests were blocked,\n- as the system finished enough requests so that the low prio\n  Dispatcher could run, it proceeded with its appender calls\n- each event processed, freed another slot for one of the blocked\n  threads, which in turn immediately took over the CPU from the\n  Dispatcher.\n\nThe end effect was a severly choked system.\nEven worse, on Solaris the blocked threads are not scheduled fairly,\nbut in nearly-LIFO order, leading to near-arbitrary delays.\n\nThe priority for the Dispatcher should be normal by default.\nI don't mind if there are niche use cases which require a low\nprio for the Dispatcher, but that should then be made optionally\nconfigurable.\n\nI can provide the simple change, plus a fix for the race condition\nwhich can develop between the Dispatcher and the blocked threads\nwhen the Dispatcher manages to process 2 events before the next\nthread inserts one. Drop me a note.\n\nTo test for this scenario, you need a slow Appender such as a DB appender, or \nadd an artificial delay. \n\nAs far as I know, this applies 1.2.8 (even though I looked at 1.2.4 for the \nfix)\n\n Martin", "id": 54794, "time": "2004-03-28T21:43:11Z", "creator": "schulz@videotron.ca", "creation_time": "2004-03-28T21:43:11Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 28006, "is_private": false, "count": 1, "id": 54795, "time": "2004-03-28T21:51:44Z", "creator": "paul.smith@lawlex.com.au", "creation_time": "2004-03-28T21:51:44Z", "text": "Ouch.  We would appreciate a unified diff against the HEAD of log4j cvs if you \ncan.\n\nI agree that a default of normal priority would be nice, however I am wondering \nwhether we should maintain the backward 'compatibility' and leave the default \npriority as it is now, and we could expose the priority as a Javabean property \nto be modified via the config.  We would then need to document clearly the \nlimitations of the priority under stress.\n\nIf you have any time to create a junit test to reproduce the current problem \nprior to the change and verify that the the change fixes the issue, that would \nbe even better!  :)\n\ncheers,\n\nPaul Smith"}, {"count": 2, "tags": [], "text": "Marking this as a duplicate of 38137 which I'm using as a catch all for blocking\nissues with the AsyncAppender.  A new AsyncAppender implementation was added for\nbug 38982 which hopefully will also eliminate the deadlock issues observed.  The\nDispatcher thread does not have its priority assigned, though that could be\nadded as a configuration parameter.\n\nIf you a test platform and could test the new implementation (the first\nattachment describes how to adapt it to log4j 1.2), it would be appreciated. \nSorry that it took so long.\n\n*** This bug has been marked as a duplicate of 38137 ***", "attachment_id": null, "id": 86896, "creator": "carnold@apache.org", "time": "2006-03-16T06:31:08Z", "bug_id": 28006, "creation_time": "2006-03-16T06:31:08Z", "is_private": false}]
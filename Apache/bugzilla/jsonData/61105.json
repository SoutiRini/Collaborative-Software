[{"attachment_id": null, "tags": [], "bug_id": 61105, "is_private": false, "count": 0, "id": 198817, "time": "2017-05-18T19:09:05Z", "creator": "markt@apache.org", "creation_time": "2017-05-18T19:09:05Z", "text": "From a discussion at TomcatCon, it would be a better default if Tomcat rolled log files by default to avoid filling disks. We probably need to err on the side of caution regarding how long to keep the files for."}, {"count": 1, "tags": [], "creator": "violetagg@apache.org", "is_private": false, "text": "Hi,\n\nCurrently the log files (except catalina.out which is available on OSes != Windows) are rotated by default based on the date.\nWe can introduce in addition a configuration for the file size and also how many files to keep. Do we want to archive files when rotate them or just a simple renaming is enough?\n\nWhat about catalina.out file? Do we want a rotation for this file also? There is already enhancement about something similar https://bz.apache.org/bugzilla/show_bug.cgi?id=53930\n\nWhat about the log files created by the Tomcat service on Windows? Do we want to have something similar for them also?\n\nThanks,\nVioleta", "id": 199060, "time": "2017-06-05T19:41:12Z", "bug_id": 61105, "creation_time": "2017-06-05T19:41:12Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 61105, "attachment_id": null, "id": 199061, "time": "2017-06-05T19:44:56Z", "creator": "markt@apache.org", "creation_time": "2017-06-05T19:44:56Z", "is_private": false, "text": "The conversation at TomcatCon was around putting a (relatively large) limit on the number of files that are kept by default. Picking a number of of thin air, how does 90 days sound?\n\nThere was no concern expressed about the log files that are currently not rolled (generally, I suspect, because well written apps won;t trigger content to those files)."}, {"count": 3, "tags": [], "text": "Hi,\n\nWhat do you think about this approach?\nhttps://github.com/apache/tomcat/pull/60\n\nThanks,\nVioleta", "is_private": false, "id": 199073, "creator": "violetagg@apache.org", "time": "2017-06-06T11:01:13Z", "bug_id": 61105, "creation_time": "2017-06-06T11:01:13Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Hi,\n\nIn the PR [1] there is a proposal for merging the proposed functionality with https://github.com/apache/tomee/blob/master/tomee/tomee-juli/src/main/java/org/apache/tomee/jul/handler/rotating/LocalFileHandler.java\n\nI checked the TomEE's LocalFileHandler and it provides many useful features.\n\nIf there is a demand I can port it to Tomcat.\n\nRegards,\nVioleta\n\n[1] https://github.com/apache/tomcat/pull/60", "is_private": false, "id": 199086, "creator": "violetagg@apache.org", "time": "2017-06-06T18:31:13Z", "bug_id": 61105, "creation_time": "2017-06-06T18:31:13Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "text": "(In reply to Violeta Georgieva from comment #3)\n> Hi,\n> \n> What do you think about this approach?\n> https://github.com/apache/tomcat/pull/60\n> \n\n+    public static final int DEFAULT_MAX_DAYS = 90;\n+    private int maxDays = DEFAULT_MAX_DAYS;\n\nI do not like the idea of built-in default limit in java code.\n\nI am open to discuss whether it is feasible for Tomcat 9,\nbut such built-in limit cannot be backported to stable versions (8.5 and earlier).\n\nI think it is better to add limits explicitly to the default logging.properties configuration.\n\n\n+        String sMaxDays = getProperty(className + \".maxDays\", String.valueOf(DEFAULT_MAX_DAYS));\n+        if (maxDays <= 0) {\n+            try {\n+                maxDays = Integer.parseInt(sMaxDays);\n+            } catch (NumberFormatException ignore) {\n+                // no-op\n+            }\n+        }\n\nI think the above try/catch block is never executed, as \"if (maxDays <= 0)\" is always false, as maxDays is \"90\" by default.\n\n+    private DirectoryStream<Path> streamFilesForDelete() throws IOException {\n+        FileTime maxDaysOffset = FileTime.from(Instant.now().minus(maxDays, ChronoUnit.DAYS));\n+        return Files.newDirectoryStream(new File(directory).toPath(), path -> {\n+            String fileName = path.getFileName().toString();\n+            return fileName.startsWith(prefix) && fileName.endsWith(suffix)\n+                    && Files.getLastModifiedTime(path).compareTo(maxDaysOffset) < 0;\n+        });\n+    }\n\nI do not like the above.\n\n1. \"fileName.startsWith(prefix)\" will result in false positives.\n\n2. I'd prefer to test the date in the file name, not file modification date.\n\n\nBTW, for access logs I usually have an empty prefix, grouping the files into separate directories by month:\nfileDateFormat=\"yyyy-MM'/webappname.'yyyy-MM-dd\"\nprefix=\"\"\nsuffix=\".access.log\"\n\nSuch feature is not implemented for JULI logging yet. If it were, the \"fileName.startsWith(prefix)\" here would be true for every file.", "id": 199090, "time": "2017-06-06T22:53:45Z", "bug_id": 61105, "creation_time": "2017-06-06T22:53:45Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 61105, "attachment_id": null, "id": 199112, "time": "2017-06-09T01:49:53Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2017-06-09T01:49:53Z", "is_private": false, "text": "Hi,\n\n> There was no concern expressed about the log files that are currently not\n> rolled (generally, I suspect, because well written apps won;t trigger content\n> to those files).\n\nWe do have concerns about rotate the output to stdout/stderr.\nIn most of our cases, this is due to logging framework conflict between log4j and logback in a web application.\nThe default behavior is that all the logging content are eventually gone to catalina.out.\nMost of the users even won't be aware of it, until being alerted by running out of the disk space (The web application may run for months).\n\nTo avoid this, we actually have implemented a feature in Tomcat to rotate catalina.out on a daily basis.\nUnder the hood we use a customized PrintStream to replace System.out/System.err, capture the content, and output to JULI.\nSince it is rotated by day, it make us easier to keep the latest N files.\n\nI know the best solution will be solving the conflict, but according to our experience, most of the user don't know there is a conflict.\n\nIn there any interest in adding this feature to Tomcat?"}, {"count": 7, "tags": [], "text": "Hi,\n\n(In reply to Konstantin Kolinko from comment #5)\n> (In reply to Violeta Georgieva from comment #3)\n> > Hi,\n> > \n> > What do you think about this approach?\n> > https://github.com/apache/tomcat/pull/60\n> > \n> \n> +    public static final int DEFAULT_MAX_DAYS = 90;\n> +    private int maxDays = DEFAULT_MAX_DAYS;\n> \n> I do not like the idea of built-in default limit in java code.\n> \n> I am open to discuss whether it is feasible for Tomcat 9,\n> but such built-in limit cannot be backported to stable versions (8.5 and\n> earlier).\n> \n> I think it is better to add limits explicitly to the default\n> logging.properties configuration.\n> \n> \n> +        String sMaxDays = getProperty(className + \".maxDays\",\n> String.valueOf(DEFAULT_MAX_DAYS));\n> +        if (maxDays <= 0) {\n> +            try {\n> +                maxDays = Integer.parseInt(sMaxDays);\n> +            } catch (NumberFormatException ignore) {\n> +                // no-op\n> +            }\n> +        }\n> \n> I think the above try/catch block is never executed, as \"if (maxDays <= 0)\"\n> is always false, as maxDays is \"90\" by default.\n> \n> +    private DirectoryStream<Path> streamFilesForDelete() throws IOException\n> {\n> +        FileTime maxDaysOffset = FileTime.from(Instant.now().minus(maxDays,\n> ChronoUnit.DAYS));\n> +        return Files.newDirectoryStream(new File(directory).toPath(), path\n> -> {\n> +            String fileName = path.getFileName().toString();\n> +            return fileName.startsWith(prefix) && fileName.endsWith(suffix)\n> +                    &&\n> Files.getLastModifiedTime(path).compareTo(maxDaysOffset) < 0;\n> +        });\n> +    }\n> \n> I do not like the above.\n> \n> 1. \"fileName.startsWith(prefix)\" will result in false positives.\n> \n> 2. I'd prefer to test the date in the file name, not file modification date.\n> \n> \n> BTW, for access logs I usually have an empty prefix, grouping the files into\n> separate directories by month:\n> fileDateFormat=\"yyyy-MM'/webappname.'yyyy-MM-dd\"\n> prefix=\"\"\n> suffix=\".access.log\"\n> \n> Such feature is not implemented for JULI logging yet. If it were, the\n> \"fileName.startsWith(prefix)\" here would be true for every file.\n\nThanks for the review. I prepared a new patch where I applied all your recommendations. Can you take a look at it?\n\nVioleta", "attachment_id": null, "id": 199127, "creator": "violetagg@apache.org", "time": "2017-06-09T20:32:48Z", "bug_id": 61105, "creation_time": "2017-06-09T20:32:48Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 61105, "is_private": false, "count": 8, "id": 199232, "time": "2017-06-16T11:10:17Z", "creator": "violetagg@apache.org", "creation_time": "2017-06-16T11:10:17Z", "text": "Any comments?"}, {"count": 9, "tags": [], "bug_id": 61105, "attachment_id": null, "is_private": false, "id": 199242, "time": "2017-06-16T14:38:51Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-06-16T14:38:51Z", "text": "(In reply to Violeta Georgieva from comment #8)\n> Any comments?\n\nGenerally: I like it.\n\n1. Typo in method name: obtainDateFormPath  s/Form/From/\n\n2. Building a pattern,\n\n> pattern = Pattern.compile(\"^(\" + prefix + \")\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}(\" + suffix + \")$\");\n\nThis should use  (Pattern.quote(prefix) + \"...\" + Pattern.quote(suffix))\n\nPrefix and suffix can contain special characters, e.g. '.' = any character. Wrapping them with Pattern.quote() solves this issue.\n\n3. Temporary directory handling in unit test\n\nThere is a base Test class that provides support for temporary directories,\n\nhttps://github.com/apache/tomcat/blob/trunk/test/org/apache/catalina/startup/LoggingBaseTest.java\n\nDifferences:\n- It respects system property \"tomcat.test.temp\"\n- It uses creates a random directory for the test, to allow running several tests in parallel\ntempDir = Files.createTempDirectory(tempBasePath, \"test\").toFile();\n\nMaybe it is not a good idea to use LoggingBaseTest directly as a base class,\nas it initializes logging and this test tests logging, but it can be used to copy some code."}, {"attachment_id": null, "tags": [], "bug_id": 61105, "is_private": false, "count": 10, "id": 199250, "time": "2017-06-16T19:29:35Z", "creator": "violetagg@apache.org", "creation_time": "2017-06-16T19:29:35Z", "text": "(In reply to Konstantin Kolinko from comment #9)\n> (In reply to Violeta Georgieva from comment #8)\n> > Any comments?\n> \n> Generally: I like it.\n> \n> 1. Typo in method name: obtainDateFormPath  s/Form/From/\n\nFixed\n\n> 2. Building a pattern,\n> \n> > pattern = Pattern.compile(\"^(\" + prefix + \")\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}(\" + suffix + \")$\");\n> \n> This should use  (Pattern.quote(prefix) + \"...\" + Pattern.quote(suffix))\n> \n> Prefix and suffix can contain special characters, e.g. '.' = any character.\n> Wrapping them with Pattern.quote() solves this issue.\n>\n\nFixed, added a test also\n \n> 3. Temporary directory handling in unit test\n> \n> There is a base Test class that provides support for temporary directories,\n> \n> https://github.com/apache/tomcat/blob/trunk/test/org/apache/catalina/startup/\n> LoggingBaseTest.java\n> \n> Differences:\n> - It respects system property \"tomcat.test.temp\"\n> - It uses creates a random directory for the test, to allow running several\n> tests in parallel\n> tempDir = Files.createTempDirectory(tempBasePath, \"test\").toFile();\n> \n> Maybe it is not a good idea to use LoggingBaseTest directly as a base class,\n> as it initializes logging and this test tests logging, but it can be used to\n> copy some code.\n\nFixed\n\nThanks for the review,\nVioleta"}, {"count": 11, "tags": [], "creator": "violetagg@apache.org", "attachment_id": null, "text": "The change is applied and will be available in 9.0.0.M22 onwards.\nThe log files will be kept by default 90 days.\n\nDo we want this change in the previous versions? May be with different default value?\n\nThanks,\nVioleta", "id": 199251, "time": "2017-06-16T19:34:24Z", "bug_id": 61105, "creation_time": "2017-06-16T19:34:24Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 61105, "attachment_id": null, "id": 199258, "time": "2017-06-17T09:30:05Z", "creator": "markt@apache.org", "creation_time": "2017-06-17T09:30:05Z", "is_private": false, "text": "Happy to see it back-ported. I'd disable by default though so there is no change of behaviour in stable versions."}, {"count": 13, "tags": [], "bug_id": 61105, "attachment_id": null, "id": 199260, "time": "2017-06-17T17:08:00Z", "creator": "mjfarwell@gmail.com", "creation_time": "2017-06-17T17:08:00Z", "is_private": false, "text": "It would great to see this functionality backported.  Bringing it into Tomcat 8.5 and set it as disabled by default makes sense to me."}, {"count": 14, "tags": [], "bug_id": 61105, "attachment_id": null, "id": 199275, "time": "2017-06-19T10:25:24Z", "creator": "violetagg@apache.org", "creation_time": "2017-06-19T10:25:24Z", "is_private": false, "text": "Hi,\n\nThe new functionality was back ported to:\n- 8.5.x for 8.5.16 onwards\n- 8.0.x for 8.0.45 onwards\n- 7.0.x for 7.0.79 onwards\n\nThe default will be: keep the log files forever.\n\nRegards,\nVioleta"}]
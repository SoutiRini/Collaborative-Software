[{"count": 0, "tags": [], "bug_id": 55198, "attachment_id": 30535, "text": "Created attachment 30535\nWar demonstrating the issue\n\nQuote entity in html element attribute evaluated in tagx if attribute contains EL expression \n\nIf your tagx file contains an html element such as\n<a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\nIt renders as\n<a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\n\nIf your tagx file contains an html element such as\n<a href=\"#\" onclick=\"window.alert(&quot;${text}!&quot;)\">foobar</a>\nIt renders as (if text='foobar')\n<a href=\"#\" onclick=\"window.alert(\"foobar\")\">foobar</a>\nMost browsers aren't too happy with this.\n\nI would have expected this to render as\n<a href=\"#\" onclick=\"window.alert(&quot;foobar&quot;)\">foobar</a>\nI browsed through jsp 2.1 spec and couldn't identify anything that explicitly covered this, but I would expect valid xml output from a tagx file.\n\nYou don't see this behaviour if you use a tag file. We need to use tagx files to work around various problems in WebSphere and WebLogic containers.\n\nA test war is attached. It is setup for servlet spec 2.5 and jsp 2.1 --- I am actually using a Tomcat 6 container, but thought I'd test this on the latest release.\n\nThe output I receive from the test war on tomcat 7.0.41:\n\n\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Test the output of tag and tagx containing quote entity in html element attribute</title>\n\t</head>\n\t<body>\n\t\t<p>.tag file gives:</p>\n\t\t\n\n\n\n<ul>\n\t<li><a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">Click me to display &quot;Hello World!&quot;</a></li>\n\t<li><a href=\"#\" onclick=\"window.alert(&quot;foobar&quot;)\">Click me to display &quot;foobar&quot;</a></li>\n</ul>\n\n\t\t<p>.tagx file gives:</p>\n\t\t<ul><li><a onclick=\"window.alert(&quot;Hello World!&quot;)\" href=\"#\">Click me to display \"Hello World!\"</a></li><li><a onclick=\"window.alert(\"foobar\")\" href=\"#\">Click me to display \"foobar\"</a></li></ul>\n\t</body>\n</html>", "id": 168279, "time": "2013-07-05T04:32:38Z", "creator": "evan.greensmith@exari.com", "creation_time": "2013-07-05T04:32:38Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 55198, "text": "Fixed in trunk and 7.0.x and will be included in 7.0.43 onwards.\n\nSince you are using 6.0.x, I have moved this to 6.0.x and proposed the fix for back-porting.", "id": 168296, "time": "2013-07-05T16:50:20Z", "creator": "markt@apache.org", "creation_time": "2013-07-05T16:50:20Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "evan.greensmith@exari.com", "text": "(In reply to Mark Thomas from comment #1)\n> Fixed in trunk and 7.0.x and will be included in 7.0.43 onwards.\n> \n> Since you are using 6.0.x, I have moved this to 6.0.x and proposed the fix\n> for back-porting.\n\nThanks Mark.\n\nI can also confirm that I see the same output in 6.0.37, with the final link in the test case rendered as \n\n<a onclick=\"window.alert(\"foobar\")\" href=\"#\">", "id": 168364, "time": "2013-07-08T00:13:31Z", "bug_id": 55198, "creation_time": "2013-07-08T00:13:31Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 55198, "attachment_id": null, "id": 168469, "time": "2013-07-10T19:25:35Z", "creator": "markt@apache.org", "creation_time": "2013-07-10T19:25:35Z", "is_private": false, "text": "Please be aware that a contributor spotted that the tagx file provided as part fo the test case is not valid. No elements at all may be present inside a <jsp:text> element. Tomcat 7 & 8 will be updated to enforce this specification requirement.\n\nThis issue, however, remains valid and the fix is not affected."}, {"count": 4, "tags": [], "creator": "evan.greensmith@exari.com", "attachment_id": null, "text": "(In reply to Mark Thomas from comment #3)\n> Please be aware that a contributor spotted that the tagx file provided as\n> part fo the test case is not valid. No elements at all may be present inside\n> a <jsp:text> element. Tomcat 7 & 8 will be updated to enforce this\n> specification requirement.\n> \n\nThanks for the heads up Mark.\n\nI can't see the <jsp:text> element in the clickme.tagx. Is there something that is being converted to a <jsp:text> which ends up with elements inside?", "id": 168495, "time": "2013-07-10T22:54:42Z", "bug_id": 55198, "creation_time": "2013-07-10T22:54:42Z", "is_private": false}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "For the record, the change in 7.0.43 for this bug is r1500065\n\nIt changed how EL output is escaped in tag attributes - see bug 55735.\nI think this change in EL escaping was an inadvertent one, as the original issue is about static content. It did not say about escaping of EL output.\n\nAs this issue is an older one, I will comment on the specification here.\n\n\n1. Reading the JSP specification\n\nJSP 2.3 (JSP2.3MR.pdf) chapter JSP.6.3.9 \"Template Content\" says how static\ncontent shall be rendered:\n\nIt says about XML fragments that\n\"The interpretation of such an XML element is to pass its textual representation to the\ncurrent value of out, after the whitespace processing described in Section JSP.6.2.3.\"\n\n\nTesting this feature, I see an odd behaviour. A simple example would be a\nJSPX page like this:\n\n[[[\n<jsp:root version=\"2.0\" xmlns:jsp=\"http://java.sun.com/JSP/Page\">\n<jsp:directive.page contentType=\"text/plain\" />\n<foo bar=\"&lt;HH&gt;\" baz=\"&quot;JJ&quot;\" foo=\"&amp;\">\n&lt;LL&gt;\n</foo>\n</jsp:root>\n]]]\n\n\nI expect it to render &lt;HH&gt;, &quot;JJ&quot;, &amp; and &lt;LL&gt;,\nas that is a textual representation of the above XML, but\nin all 7.0.47, 7.0.42 and 6.0.37 it renders:\n\n foo=\"&\" baz=\"&quot;JJ&quot;\" bar=\"<HH>\" and <LL>\n\nSomehow only the quotes are rendered correctly.\n\n\n2. It would be nice to expand what is written in JSP.6.2.3. to the EL expressions in those XML fragments, so that Tomcat renders well-formed XML,\nbut it is likely that such an interpretation is wrong.\n\nIf I do such expansion, I would say that\n\n- ELs in attributes of tags in XML fragments have to have their text content escaped\n\n- ELs in tag bodies of tags in XML fragments have to have their text content escaped\n\n- ELs in the body of <jsp:text/> elements shall be rendered as is, without escaping.\n\nAs per JSP.6.2.3 <jsp:text/> generates arbitrary content.\n\n- ELs in <![CDATA[...]]> blocks:\n\nThe easy way is to render the content of CDATA blocks as text. In this case the usual escaping rules apply.\n\n(If CDATA were rendered CDATA as CDATA, the usual escaping rules do not apply, but one would have to beware of ']]>' in EL output).\n\n\nIt would be nice to interpret the specification this way and throw away a number of escapeXml calls, but it is likely that such an interpretation is wrong.\n\n\nWith r1500065 the ELs in attributes of tags in XML fragments\nare now escaped automatically.\n\nMy own example is that the code like this in JSPX files\n\n<a href=\"${fn:escapeXml(url)}\">...</a>\n\nnow produces URLs that are escaped twice, with &ampamp;s.\nThis is the issue reported in bug 55735.\n\n\nThis change has not changed how ELs are handled in tag bodies. Only attributes were affected.\n\nLooking at textRotate.jspx in the Tomcat examples web application, it does not expect that ${name} expression were escaped automatically. It explicitly calls escapeXml().", "id": 171046, "time": "2013-11-05T03:27:30Z", "bug_id": 55198, "creation_time": "2013-11-05T03:27:30Z", "is_private": false}, {"count": 6, "tags": [], "creator": "markt@apache.org", "text": "I've updated the back-port proposal to include a fix for the regression identified in bug 55735.\n\nRegarding the \n\n<foo bar=\"&lt;HH&gt;\" baz=\"&quot;JJ&quot;\" foo=\"&amp;\">\n&lt;LL&gt;\n</foo>\n\nissue, I have a fix for that but it strikes me as the sort of thing that could break lots of stuff. I suggest opening a new issue for that against Tomcat 8, fixing it there and seeing what feedback we get before we back-port it.", "id": 171074, "time": "2013-11-05T23:03:50Z", "bug_id": 55198, "creation_time": "2013-11-05T23:03:50Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 55198, "text": "This has been fixed in 6.0.x and will be included in 6.0.38 onwards.", "id": 172173, "time": "2014-01-08T13:23:41Z", "creator": "markt@apache.org", "creation_time": "2014-01-08T13:23:41Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 55198, "attachment_id": null, "id": 173893, "time": "2014-03-17T22:22:36Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-03-17T22:22:36Z", "is_private": false, "text": "For reference:\n\n(In reply to Evan Greensmith from comment #0)\n>\n> If your tagx file contains an html element such as\n> <a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\n> It renders as\n> <a href=\"#\" onclick=\"window.alert(&quot;Hello World!&quot;)\">foobar</a>\n> \n\nTechnically, the textual value of the attribute of an xml tag, as returned by XML parser here is [window.alert(\"Hello World!\")].\n\nThe legacy behaviour - in 7.0.42 here is that when printing the tag attributes the double quotes are replaced  (\") -> (&quot;). In the tag next no replacements are performed.\n\nThis behaviour is applied to the double quotes only, but not to other special symbols.\n\nUsing the OP's test.war if I replace the first (non-EL) tag in clickme.tag and clickme.tagx with the following:\n\n<li><a href=\"#\" onclick=\"window.alert(&quot;&lt;&amp;&gt;&#039;Hello World!&quot;)\">Click me to display &quot;&lt;&amp;&gt;&#039;Hello World!&quot;</a></li>\n\nTomcat 7.0.42 renders it as following:\n\n- for clickme.tag:\n\n<li><a href=\"#\" onclick=\"window.alert(&quot;&lt;&amp;&gt;&#039;Hello World!&quot;)\">Click me to display &quot;&lt;&amp;&gt;&#039;Hello World!&quot;</a></li>\n\n- for clickme.tagx:\n\n<li><a onclick=\"window.alert(&quot;<&>'Hello World!&quot;)\" href=\"#\">Click me to display \"<&>'Hello World!\"</a></li>\n\nNote that tag file renders as the source is, tagx file renders the texts as returned by XML parser, only replacing \"->&quot; in tag attribute, but nowhere else.\n\nI am not saying that this is correct. I am just documenting the legacy behaviour.\n\n\nIn the code, the place responsible for s/\"/&quot;/ replacement is\nGenerator$GenerateVisitor.visit(Node.UninterpretedTag n),\n\n    out.print(DOUBLE_QUOTE);\n    out.print(attrs.getValue(i).replace(\"\\\"\", \"&quot;\"));\n    out.print(DOUBLE_QUOTE);\n\nIf attribute value does not contain double quote chars (e.g. xml-escaping has already been applied to it during previous processing), it will be printed as is.\n\n\nFor reference,\nregressions related to an attempt to fix this issue thus far are:\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=56265\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=56029\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=55735"}]
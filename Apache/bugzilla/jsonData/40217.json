[{"count": 0, "tags": [], "text": "I have the following block in my httpd.conf, outside of any Virtual Host directive:\n\n<FilesMatch\n\"^\\.(perms.xml|home.xml|htaccess|davaccess|htaccess.ssl|localUsers|localGroups|ftpaccess)$\">\n    Order allow,deny\n    Deny from all\n    Satisfy All\n</FilesMatch>\n\nThis block is intended to hide files that control access for apache and another\napp that reads the filesystem.  When accessing the space using a web browser,\nall files matching the pattern above are hidden as expected.\n\nWhen using a DAV client such as WebDrive, the files are returned in the\ndirectory listing.  This causes problems when attempting to copy a folder\ncontaining hidden files to a new location, as the DAV client is aware of the\nhidden file and tries to copy it.  \n\nIt seems like one or more dav permissions is not correctly limited in a general\nFilesMatch block, when in fact all permissions for both DAV and non-DAV access\nshould be removed by the above block.", "attachment_id": null, "id": 92061, "creator": "anthony.atkins@vt.edu", "time": "2006-08-08T21:32:07Z", "bug_id": 40217, "creation_time": "2006-08-08T21:32:07Z", "is_private": false}, {"count": 1, "tags": [], "text": "(In reply to comment #0)\n> I have the following block in my httpd.conf, outside of any Virtual Host\ndirective:\n> \n> <FilesMatch\n>\n\"^\\.(perms.xml|home.xml|htaccess|davaccess|htaccess.ssl|localUsers|localGroups|ftpaccess)$\">\n>     Order allow,deny\n>     Deny from all\n>     Satisfy All\n> </FilesMatch>\n> \n> This block is intended to hide files that control access for apache and another\n> app that reads the filesystem.  When accessing the space using a web browser,\n\nFrom my point of view this is not what filesmatch is designed for. You can\nprevent access to these files, but not prevent showing them. Think of Unix\nfilesystem permissions:\n\nYou may have files in a directory on which you have no permissions. As long as\nyou have read permissions on the directory you can see them.\n\n> all files matching the pattern above are hidden as expected.\n\nWhat do you mean by hidden? Do you have configured mod_autoindex and they don't\nshow up in the mod_autoindex generated listings?\n\n> \n> When using a DAV client such as WebDrive, the files are returned in the\n> directory listing.  This causes problems when attempting to copy a folder\n\nAs stated above I would see this as works as designed.", "is_private": false, "id": 92091, "creation_time": "2006-08-09T20:28:12Z", "time": "2006-08-09T20:28:12Z", "creator": "rpluem@apache.org", "bug_id": 40217, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 40217, "is_private": false, "count": 2, "id": 92093, "time": "2006-08-09T20:39:59Z", "creator": "anthony.atkins@vt.edu", "creation_time": "2006-08-09T20:39:59Z", "text": "I disagree that FilesMatch is not intended to hide files, mod_autoindex does not\ndisplay files that match the above patter.  Moreover, you get a \"403 Forbidden\"\nwhen trying to read a file that matches the FilesMatch pattern from any web\nbrowser.  Again, everything *but* DAV honors the FilesMatch directive as specified.\n\nAnyway, if you don't think FilesMatch should be used in this way, how would you\nsuggest preventing a DAV client from seeing access control files?  "}, {"attachment_id": null, "tags": [], "bug_id": 40217, "is_private": false, "count": 3, "id": 92095, "time": "2006-08-09T21:15:48Z", "creator": "rpluem@apache.org", "creation_time": "2006-08-09T21:15:48Z", "text": "(In reply to comment #2)\n> I disagree that FilesMatch is not intended to hide files, mod_autoindex does not\n\nIn order to prevent files from showing up in a mod_autoindex listing and thus\nhiding them, you should use IndexIgnore. I guess it is just because\nmod_autoindex fails to detect the mime type of the file that it does not display\nit. But this not really intentional.\n\n> display files that match the above patter.  Moreover, you get a \"403 \nForbidden\"\n> when trying to read a file that matches the FilesMatch pattern from any web\n\nIn this case you try to access the file itself. That is what filesmatch prevents\nand should prevent. This is also prevented in the dav case. You can *see* the\nfiles in Webdrive but you *cannot* access them.\n\n> browser.  Again, everything *but* DAV honors the FilesMatch directive as\nspecified.\n\nWhat do you mean by everything? I see only mod_autoindex and the behaviour there\nis not intentional.\n\n> \n> Anyway, if you don't think FilesMatch should be used in this way, how would you\n> suggest preventing a DAV client from seeing access control files?  \n\nThis is not possible. Again think of the Unix filesystem permissions here. If\nyou want to prevent someone from *seeing* files in a directory you have to\nrevoke read permissions on this directory. The same is true for mod_dav. Seeing\na file is not a property or permission of the file, but of the directory or\nbetter the collection in the dav case. But of course you can prevent people from\naccessing the access control files via filesmatch."}, {"count": 4, "tags": [], "bug_id": 40217, "attachment_id": null, "is_private": false, "id": 92096, "time": "2006-08-09T21:43:40Z", "creator": "anthony.atkins@vt.edu", "creation_time": "2006-08-09T21:43:40Z", "text": "IndexIgnore doesn't affect the DAV functionality.  I explicitly added all of the\naccess control files to an IndexIgnore block and they still show up.  \n\nTry it and see."}, {"count": 5, "tags": [], "bug_id": 40217, "attachment_id": null, "id": 92097, "time": "2006-08-09T21:55:09Z", "creator": "anthony.atkins@vt.edu", "creation_time": "2006-08-09T21:55:09Z", "is_private": false, "text": ">>Again, everything *but* DAV honors the FilesMatch directive as\nspecified.\n>>\n>What do you mean by everything? I see only mod_autoindex and the behaviour there\nis not intentional.\n>\n\nGET access to the file itself is limited by the FilesMatch directive, as is the\ndisplay of the file in the index created by mod_auto_index.  That's what I meant\nby \"everything\".\n\nIf you're saying you can't limit GET access to a file, you're mistaken.  Apache\ncan definitely be configured not to display directories or files for which it\nitself has read access."}, {"count": 6, "tags": [], "bug_id": 40217, "attachment_id": null, "is_private": false, "id": 92098, "time": "2006-08-09T22:01:53Z", "creator": "anthony.atkins@vt.edu", "creation_time": "2006-08-09T22:01:53Z", "text": "Okay, didn't mean to sound so harsh.  I reread your note, I understand your\npoint about the containing directory.  But to extend your analogy, if I have the\npermissions necessary to read a directory, but I'm not allowed to read a file by\nan ACL, then I won't see the file in the directory listing, period.  You need\nboth permissions to be able to see a file in a directory listing, which is my\npoint.  DAV is apparently honoring the directory permissions and ignoring the\nfile permissions."}, {"count": 7, "tags": [], "text": "(In reply to comment #5)\n\n> \n> If you're saying you can't limit GET access to a file, you're mistaken.  Apache\n\nI did not say this I said the opposite.\n\n> can definitely be configured not to display directories or files for which it\n> itself has read access.\n\nBut this is only true if the IndexOption ShowForbidden is not set. So I must\ncorrect myself a little bit regarding the 'non intentional' statement. Depending\non the configuration setting of mod_autoindex this behaviour is intentional.\n\n", "is_private": false, "id": 92104, "creation_time": "2006-08-10T08:03:19Z", "time": "2006-08-10T08:03:19Z", "creator": "rpluem@apache.org", "bug_id": 40217, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 40217, "attachment_id": null, "is_private": false, "id": 92105, "time": "2006-08-10T08:08:34Z", "creator": "rpluem@apache.org", "creation_time": "2006-08-10T08:08:34Z", "text": "(In reply to comment #6)\n> Okay, didn't mean to sound so harsh.  I reread your note, I understand your\n> point about the containing directory.  But to extend your analogy, if I have the\n> permissions necessary to read a directory, but I'm not allowed to read a file by\n> an ACL, then I won't see the file in the directory listing, period.  You need\n\nThis is just plain wrong on a standard Unix file system. If you have the\npermission to read the directory you see the file in the directory listing. I\nadmit that I don't know if this behaviour changes if you are using POSIX ACLS.\nBTW: The same seems to be true with NTFS on Windows.\n\n"}, {"count": 9, "tags": [], "bug_id": 40217, "attachment_id": null, "id": 92106, "time": "2006-08-10T13:00:15Z", "creator": "anthony.atkins@vt.edu", "creation_time": "2006-08-10T13:00:15Z", "is_private": false, "text": "The default behavior of mod_autoindex is not to show files that are restricted\nby a FilesMatch block.\n\nAlso, I specifically used the example of ACLs because those are a better match\nfor what FilesMatch does than regular UNIX perms.  \n\nAnyway, I'm going to try a demonstration, I suspect that it's just one of the\nmethods that's not working as expected.\n\nHave you tried to replicate this?"}, {"count": 10, "tags": [], "text": "Okay, I just did some testing.  The files are not revealed when using the GET\nmethod, but are revealed when using the PROPFIND method with a depth of 1.  So\nit seems like all this talk about mod_autoindex is beside the point.  It's the\nPROPFIND handling in mod_dav that exhibits the unexpected behavior.", "is_private": false, "id": 92110, "creation_time": "2006-08-10T13:57:20Z", "time": "2006-08-10T13:57:20Z", "creator": "anthony.atkins@vt.edu", "bug_id": 40217, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 40217, "is_private": false, "count": 11, "id": 92111, "time": "2006-08-10T14:29:05Z", "creator": "slive@apache.org", "creation_time": "2006-08-10T14:29:05Z", "text": "I'm no DAV expert, but I do believe there is a bug here.  If you look at the\nPROPFIND multistatus response for such a directory, I believe it should be\nshowing a different status and omitting the get* elements for access-restricted\nfiles.  Instead, it is showing them just like any other file.\n\n"}, {"count": 12, "tags": [], "bug_id": 40217, "attachment_id": null, "id": 92112, "time": "2006-08-10T14:39:06Z", "creator": "jorton@redhat.com", "creation_time": "2006-08-10T14:39:06Z", "is_private": false, "text": "[collision with joshua]\n\nI completely agree with Ruediger that the correct behaviour should be to reveal\nthe existence/non-existence of a resource by name in mod_dav.\n\nmod_dav does not however apply any access control checks during a PROPFIND walk,\nwhich is certainly a bug: you can do a Depth: infinity walk straight through\nprotected areas, and discover properties of protected resources in a Depth: 1\neven if infinity is disabled.  Fixing this was somewhat more complicated that\njust adding a subreq call in the walker because of the error handling IIRC from\nworking on this for mod_dav 1.0.\n\nReturning simply a name in a 200 propstat for protected resources is probably\ncorrect; not sure how DAV clients will react to such resources though."}, {"attachment_id": null, "tags": [], "bug_id": 40217, "is_private": false, "count": 13, "id": 92114, "time": "2006-08-10T15:04:28Z", "creator": "anthony.atkins@vt.edu", "creation_time": "2006-08-10T15:04:28Z", "text": "I have a pretty good idea how DAV clients react, having testing mod_dav with\nWebDrive, Web Folders, and the DAV support built into OS X.\n\nIn our case, all the files we hide (.davaccess), etc. start with a leading dot. \n\nIf the client program is configured to hide \"dot files\", then the name/icon of\nthe file will not be displayed to the end user.  If the client program is\nconfigured to display \"dot files\", the name/icon will be displayed.  All three\nclients base their directory listings on the results of the PROPFIND.\n\nIf a user attempts to copy a directory containing restricted files, the client\nwill attempt to request the restricted files and fail with an error.\n\nThis is precisely why I reported this problem."}, {"count": 14, "tags": [], "text": "Anthony, the question isn't how clients now react, it is how would they react if\nthe PROPFIND response was correct (including the restricted files, but with the\ncorrect status and without the extra details).", "attachment_id": null, "id": 92117, "creator": "slive@apache.org", "time": "2006-08-10T17:19:15Z", "bug_id": 40217, "creation_time": "2006-08-10T17:19:15Z", "is_private": false}, {"count": 15, "tags": [], "creator": "anthony.atkins@vt.edu", "attachment_id": null, "id": 92120, "time": "2006-08-10T17:39:05Z", "bug_id": 40217, "creation_time": "2006-08-10T17:39:05Z", "is_private": false, "text": "Ah, got it.  I could probably arrange for a perl script to pretend to be Apache\nand return an edited replay of a normal propfind.  I'll let you know what I\nfigure out.\n"}, {"count": 16, "tags": [], "bug_id": 40217, "attachment_id": 31920, "id": 177179, "time": "2014-08-15T06:12:12Z", "creator": "ralf.habacker@freenet.de", "creation_time": "2014-08-15T06:12:12Z", "is_private": false, "text": "Created attachment 31920\nHack to exclude ms office 2010 generated temporary files\n\nThis patch excludes temporary files generated by ms office 2010 from the webdav directory listing."}]
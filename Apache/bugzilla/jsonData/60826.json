[{"count": 0, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "id": 197496, "time": "2017-03-06T20:56:29Z", "bug_id": 60826, "creation_time": "2017-03-06T20:56:29Z", "is_private": false, "text": "On TIKA-1195, we have a request for handling xlsb formats. I'm opening this issue to track work towards this goal. \n\nAs I find time, I'll work on this: https://github.com/tballison/poi/tree/xlsb\n\nIf someone wants to beat me to it, don't let me stop you."}, {"count": 1, "tags": [], "bug_id": 60826, "attachment_id": null, "id": 197588, "time": "2017-03-10T18:22:00Z", "creator": "tallison@mitre.org", "creation_time": "2017-03-10T18:22:00Z", "is_private": false, "text": "If anyone has a chance to review the xlsb parser, I'd greatly appreciate it.\n\nI think that it is close to being ready to be committed.\n\nIt duplicates more than I'd like, but we can refactor in the future.  I couldn't get around some of the bean-based structures, or I had to copy+paste.  Ugh.\n\n https://github.com/tballison/poi/tree/xlsb\n\nUnless there are objections, I'll plan to commit this towards the middle of this coming week."}, {"count": 2, "tags": [], "text": "r1787228\n\nLet me know if there is anything we need to change API-wise before the next release.\n\nAny other feedback is welcomed, too.", "is_private": false, "id": 197722, "creator": "tallison@mitre.org", "time": "2017-03-16T18:39:04Z", "bug_id": 60826, "creation_time": "2017-03-16T18:39:04Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Broke the build because I failed to update stress tests.\n\nShould be fixed r1787264.", "is_private": false, "id": 197726, "creator": "tallison@mitre.org", "time": "2017-03-16T22:33:51Z", "bug_id": 60826, "creation_time": "2017-03-16T22:33:51Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Sorry for the late review.\n\nGlobal: Replace 3.15-beta3 with 3.16-beta3\nXSSFBHeaderFooter: headerFooterHelper should either be a static final member, or even better, a non-instantiable (static) class with static methods.\nDocs: use https URLs when possible\nDocs: spell out full org.apache.poi... rather than abbreviating to o.a.p\nXSSFBRelation: can getContents be moved up to a superclass (POIXMLRelation)? There isn't any logic here that's specific to XSSFB.\nXSSFBRichStr: we should try to make this implement the RichString interface later.\nXSSFBRecordType: lookup can have constant lookup time if we use a Map at the expense of some memory.", "is_private": false, "id": 197728, "creator": "onealj@apache.org", "time": "2017-03-16T23:40:17Z", "bug_id": 60826, "creation_time": "2017-03-16T23:40:17Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "XSSFBRichTextString: add @org.apache.poi.util.NotImplemented annotation to stubbed functions that haven't been implemented yet.\nGlobal: add @since 3.16-beta3 javadoc to all new classes\nXSSFBCellHeader: formatAddressAsString can be implemented using new CellAddress(int row, int col).formatAsString().\nXSSFBSharedStringsTable: change constructor Javadoc to @since 3.16-beta3.\nXSSFBSharedStringsTable: should getItems return an unmodifiableList or a copy of the list?\nXSSFBCellRange: \"public static final int length\" is the standard modifier order. See http://stackoverflow.com/a/10299123/2683399 for order\nXSSFBCellRange: this should have tighter integration with o.a.p.ss.util.AreaReference in the future, but AreaReference probably needs some cleanup first.\nXSSFBCommentsTable: should the natural ordering of CellAddresses be implemented into the CellAddress class itself instead as CellAddressComparator inner class? Or perhaps as a standalone class if both row-major and column-major ordering is needed.\nXSSFBCommentsTable: add a comment to CellAddressComparator that this implementation is row-major ordering\nXSSFEventBasedExcelExtractor: any reason for elevating visibility from private? Was this just a quick fix to get the code to work? Is the performance acceptable if you add accessors to private members? If not, does protected work?\nXSSFBEventBasedExcelExtractor: should we log caught and suppressed exceptions to the POILogger rather than stderr?\nTestExtractorFactory: replace assertTrue(String.contains(String)) with POITestCase.assertContains(String haystack, String needle)\nTestXSSFBReader: import assertContains from POITestCase rather than redefining.\nTestXSSFBEventBasedExcelExtractor: testShapes uses String.indexOf(String) > -1. Consider using or adding something to POITestCase to make the purpose clearer.", "id": 197737, "time": "2017-03-17T04:34:46Z", "bug_id": 60826, "creation_time": "2017-03-17T04:34:46Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 60826, "attachment_id": null, "text": "Clean up per Javen's feedback.", "id": 197738, "time": "2017-03-17T08:26:22Z", "creator": "tallison@mitre.org", "creation_time": "2017-03-17T08:26:22Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 60826, "text": "Javen, \n  Many, many thanks for your careful code review!  Changes made r1787320.\nLet me know if you see anything else worth changing.\n\nDetails:\n\nGlobal: Replace 3.15-beta3 with 3.16-beta3\n\t>Done\n\nXSSFBHeaderFooter: headerFooterHelper should either be a static final member, or even better, a non-instantiable (static) class with static methods.\n\t>Changed to static final.  Y, we should make that a non-instantiable static class.  I was working with what was already in POI.\n\nDocs: use https URLs when possible \n\t>I found one in package.html, should I also change them in the license headers?\n\nDocs: spell out full org.apache.poi... rather than abbreviating to o.a.p\n\t>Done.\n\nXSSFBRelation: can getContents be moved up to a superclass (POIXMLRelation)? There isn't any logic here that's specific to XSSFB.\n\t>Done, and removed from XSSFRelation\n\nXSSFBRichStr: we should try to make this implement the RichString interface later.\n\t>Agreed.\n\nXSSFBRecordType: lookup can have constant lookup time if we use a Map at the expense of some memory.\n\t>Done.\n\nXSSFBRichTextString: add @org.apache.poi.util.NotImplemented annotation to stubbed functions that haven't been implemented yet.\n\t>Done.\n\nGlobal: add @since 3.16-beta3 javadoc to all new classes\n\t>Done.\n\nXSSFBCellHeader: formatAddressAsString can be implemented using new CellAddress(int row, int col).formatAsString().\n\t>As part of premature optimization, I was trying to cut down on new objects.  Turns out that was vestigial to an earlier draft, and I've removed it.\n\nXSSFBSharedStringsTable: change constructor Javadoc to @since 3.16-beta3.\n\t>deleted. Relying on @since 3.16-beta3 at class level.\n\t\nXSSFBSharedStringsTable: should getItems return an unmodifiableList or a copy of the list?\n\t>Yes...always the tradeoff of security vs efficiency.  I've modified it to make a copy.\n\nXSSFBCellRange: \"public static final int length\" is the standard modifier order. See http://stackoverflow.com/a/10299123/2683399 for order\n\t>Did a global replace in xssf.  I suspect we could do this across the project. \n\nXSSFBCellRange: this should have tighter integration with o.a.p.ss.util.AreaReference in the future, but AreaReference probably needs some cleanup first.\n\t>Agreed.\n\nXSSFBCommentsTable: should the natural ordering of CellAddresses be implemented into the CellAddress class itself instead as CellAddressComparator inner class? Or perhaps as a standalone class if both row-major and column-major ordering is needed.\n\t>Duh.  CellAddress already naturally sorts row-major.  I removed the CellAddressComparator in XSSFBCommentsTable. \n\nXSSFEventBasedExcelExtractor: any reason for elevating visibility from private? Was this just a quick fix to get the code to work? Is the performance acceptable if you add accessors to private members? If not, does protected work?\n\t>All back to private with access via getters.\n\nXSSFBEventBasedExcelExtractor: should we log caught and suppressed exceptions to the POILogger rather than stderr?\n\t>Done in both XSSFBEvent... and XSSFEvent...\n\nTestExtractorFactory: replace assertTrue(String.contains(String)) with POITestCase.assertContains(String haystack, String needle)\n\t>Done throughout TestExtractorFactory\n\nTestXSSFBReader: import assertContains from POITestCase rather than redefining.\n\t>Gah.  Thank you.  Done.\n\nTestXSSFBEventBasedExcelExtractor: testShapes uses String.indexOf(String) > -1. Consider using or adding something to POITestCase to make the purpose clearer\n\t>Used POITestCase and fixed TestXSSFEventBasedExcelExtractor throughout as well.", "id": 197741, "time": "2017-03-17T10:11:39Z", "creator": "tallison@mitre.org", "creation_time": "2017-03-17T10:11:39Z", "is_private": false, "attachment_id": null}]
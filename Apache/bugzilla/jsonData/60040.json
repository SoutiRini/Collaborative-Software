[{"count": 0, "tags": [], "bug_id": 60040, "attachment_id": null, "text": "After the commit 91e6a646 by Andreas Beeker 2015-09-07 22:34:21, the Locale used to formatting is not fixed to Locale.US anymore. \n\nBut on Locales where DecimalFormat symbols are different from US, like in Brazil: \n\n'.' => ',' and ',' => '.' \n\nthe code is formatting wrong, mainly because the code uses this symbols fixed in char format like in this code:\n\nprivate void writeFractional(StringBuffer result, StringBuffer output) {\n        int digit;\n        int strip;\n        ListIterator<Special> it;\n        if (fractionalSpecials.size() > 0) {\n            digit = result.indexOf(\".\") + 1;  // <===== HERE\n            if (exponent != null)\n                strip = result.indexOf(\"e\") - 1;\n            else\n                strip = result.length() - 1;\n            while (strip > digit && result.charAt(strip) == '0')\n                strip--;\n            it = fractionalSpecials.listIterator();\n            while (it.hasNext()) {\n                Special s = it.next();\n                char resultCh = result.charAt(digit);\n                if (resultCh != '0' || s.ch == '0' || digit < strip)\n                    output.setCharAt(s.pos, resultCh);\n                else if (s.ch == '?') {\n                    // This is when we're in trailing zeros, and the format is '?'.  We still strip out remaining '#'s later\n                    output.setCharAt(s.pos, ' ');\n                }\n                digit++;\n            }\n        }\n    }", "id": 193313, "time": "2016-08-24T14:53:20Z", "creator": "fernandopeinado@gmail.com", "creation_time": "2016-08-24T14:53:20Z", "is_private": false}, {"count": 1, "tags": [], "creator": "fernandopeinado@gmail.com", "attachment_id": 34174, "id": 193332, "time": "2016-08-25T20:06:44Z", "bug_id": 60040, "creation_time": "2016-08-25T20:06:44Z", "is_private": false, "text": "Created attachment 34174\nReplacing some use of the chars '.' and ',' by the correct symbol"}, {"count": 2, "tags": [], "bug_id": 60040, "text": "Created attachment 34175\nNew Patch", "id": 193333, "time": "2016-08-25T20:33:18Z", "creator": "fernandopeinado@gmail.com", "creation_time": "2016-08-25T20:33:18Z", "is_private": false, "attachment_id": 34175}, {"count": 3, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 193589, "time": "2016-09-10T06:54:26Z", "bug_id": 60040, "creation_time": "2016-09-10T06:54:26Z", "is_private": false, "text": "Thanks for the locale-specific information! It is always helpful to have Locale-specific feedback from users outside the US/UK.\n\nI see that there is a variable CellNumberPartHandler ph that is a member of CellNumberFormatter. This class contains getDecimalPoint (but not grouping separator). Inside this class are some hard-coded '.' literals. Any chance these would cause bugs in your Locale?\n\nI have never looked at CellNumberFormatter or CellNumberPartHandler before today, so perhaps you would be more knowledgeable here. Would it be better to use the part handler to contain the locale-specific separator characters rather than a new dfs variable?"}, {"count": 4, "attachment_id": null, "bug_id": 60040, "text": "Would you be willing to write a unit test for either o.a.p.ss.format.TestCellFormat (preferred) or o.a.p.ss.usermodel.TestDataFormatter?\n\nIt would be nice to have a test case to make sure there aren't regressions on this feature in the future.\n\nhttps://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/format/ -> https://svn.apache.org/viewvc/poi/trunk/src/testcases/org/apache/poi/ss/format/\n\nhttps://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/usermodel/DataFormatter.java -> https://svn.apache.org/viewvc/poi/trunk/src/testcases/org/apache/poi/ss/usermodel/TestDataFormatter.java", "id": 193590, "time": "2016-09-10T07:14:45Z", "creator": "onealj@apache.org", "creation_time": "2016-09-10T07:14:45Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 60040, "text": "I still had trouble with this patch, I reverted to the use of US locale (formats ok) and fix the DecimalFormat symbolics afterwards when all CellNumberFormatter logic has passed. Whenever CellFormat.getInstance is called that format (the object) is cached. Using a local final DecimalFormatSymbols in the CellNumberFormatter is not a good idea (especially when unit testing different locales).\n\nI changed the corresponding POI version to 3.15 in this ticket.\n\nUnit test with the use of locale\npublic class TestCellFormat {\n\n\tfinal static Locale NL = new Locale(\"nl\", \"NL\");\n\tchar pound = '\\u00A3';\n\tchar euro = '\\u20AC';\n\n\t// Accounting -> 0 decimal places, default currency symbol\n\tString formatDft = \"_-\\\"$\\\"* #,##0_-;\\\\-\\\"$\\\"* #,##0_-;_-\\\"$\\\"* \\\"-\\\"_-;_-@_-\";\n\t// Accounting -> 0 decimal places, US currency symbol\n\tString formatUS = \"_-[$$-409]* #,##0_ ;_-[$$-409]* -#,##0 ;_-[$$-409]* \\\"-\\\"_-;_-@_-\";\n\t// Accounting -> 0 decimal places, UK currency symbol\n\tString formatUK = \"_-[$\" + pound + \"-809]* #,##0_-;\\\\-[$\" + pound + \"-809]* #,##0_-;_-[$\" + pound\n\t\t\t+ \"-809]* \\\"-\\\"??_-;_-@_-\";\n\t// French style accounting, euro sign comes after not before\n\tString formatFR = \"_-#,##0* [$\" + euro + \"-40C]_-;\\\\-#,##0* [$\" + euro + \"-40C]_-;_-\\\"-\\\"??* [$\" + euro\n\t\t\t+ \"-40C] _-;_-@_-\";\n\t// Dutch style accounting, euro sign comes before\n\tString formatNL = \"_-\\\"\u20ac\\\"* #,##0.00_-;\\\\-\\\"\u20ac\\\"* #,##0.00_-;_-\\\"\u20ac\\\"* \\\"-\\\"_-;_-@_-\";\n\n\t@Test(enabled = true)\n\tpublic void testAccountingFormatsNL() throws IOException {\n\n\t\tLocaleUtil.setUserLocale(NL);\n\n\t\t// Has +ve, -ve and zero rules\n\t\tCellFormat cfDft = CellFormat.getInstance(formatDft);\n\t\tCellFormat cfUS = CellFormat.getInstance(formatUS);\n\t\tCellFormat cfUK = CellFormat.getInstance(formatUK);\n\t\tCellFormat cfFR = CellFormat.getInstance(formatFR);\n\t\tCellFormat cfNL = CellFormat.getInstance(formatNL);\n\n\t\t// For +ve numbers, should be Space + currency symbol + spaces + whole\n\t\t// number with commas + space\n\t\t// (Except French, which is mostly reversed...)\n\t\tassertEquals(\" $   12 \", cfDft.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" $   12 \", cfUS.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" \" + pound + \"   12 \", cfUK.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" 12   \" + euro + \" \", cfFR.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" \" + euro + \"   12,33 \", cfNL.apply(Double.valueOf(12.33)).text);\n\n\t\tassertEquals(\" $   16.789 \", cfDft.apply(Double.valueOf(16789.2)).text);\n\t\tassertEquals(\" $   16.789 \", cfUS.apply(Double.valueOf(16789.2)).text);\n\t\tassertEquals(\" \" + pound + \"   16.789 \", cfUK.apply(Double.valueOf(16789.2)).text);\n\t\tassertEquals(\" 16.789   \" + euro + \" \", cfFR.apply(Double.valueOf(16789.2)).text);\n\t\tassertEquals(\" \" + euro + \"   16.789,20 \", cfNL.apply(Double.valueOf(16789.2)).text);\n\n\t\tassertEquals(\" $   - \", cfDft.apply(Double.valueOf(0)).text);\n\t\tassertEquals(\" \" + euro + \"   - \", cfNL.apply(Double.valueOf(0)).text);\n\n\t\t// Test in US locale\n\t\tLocaleUtil.setUserLocale(Locale.US);\n\n\t\t// For +ve numbers, should be Space + currency symbol + spaces + whole\n\t\t// number with commas + space\n\t\t// (Except French, which is mostly reversed...)\n\t\tassertEquals(\" $   12 \", cfDft.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" $   12 \", cfUS.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" \" + pound + \"   12 \", cfUK.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" 12   \" + euro + \" \", cfFR.apply(Double.valueOf(12.33)).text);\n\t\tassertEquals(\" \" + euro + \"   12.33 \", cfNL.apply(Double.valueOf(12.33)).text);\n\n\t\tassertEquals(\" $   16,789 \", cfDft.apply(Double.valueOf(16789.2)).text);\n\t\tassertEquals(\" $   16,789 \", cfUS.apply(Double.valueOf(16789.2)).text);\n\t\tassertEquals(\" \" + pound + \"   16,789 \", cfUK.apply(Double.valueOf(16789.2)).text);\n\t\tassertEquals(\" 16,789   \" + euro + \" \", cfFR.apply(Double.valueOf(16789.2)).text);\n\n\t\t// For -ve numbers, gets a bit more complicated...\n\t\tassertEquals(\"-$   12 \", cfDft.apply(Double.valueOf(-12.33)).text);\n\t\tassertEquals(\" $   -12 \", cfUS.apply(Double.valueOf(-12.33)).text);\n\t\tassertEquals(\"-\" + pound + \"   12 \", cfUK.apply(Double.valueOf(-12.33)).text);\n\t\tassertEquals(\"-12   \" + euro + \" \", cfFR.apply(Double.valueOf(-12.33)).text);\n\n\t\tassertEquals(\"-$   16,789 \", cfDft.apply(Double.valueOf(-16789.2)).text);\n\t\tassertEquals(\" $   -16,789 \", cfUS.apply(Double.valueOf(-16789.2)).text);\n\t\tassertEquals(\"-\" + pound + \"   16,789 \", cfUK.apply(Double.valueOf(-16789.2)).text);\n\t\tassertEquals(\"-16,789   \" + euro + \" \", cfFR.apply(Double.valueOf(-16789.2)).text);\n\t\tassertEquals(\" \" + euro + \"   16,789.20 \", cfNL.apply(Double.valueOf(16789.2)).text);\n\n\t\tassertEquals(\" $   - \", cfDft.apply(Double.valueOf(0)).text);\n\t\tassertEquals(\" \" + euro + \"   - \", cfNL.apply(Double.valueOf(0)).text);\n\t}\n}", "id": 197574, "time": "2017-03-09T17:00:18Z", "creator": "blommers80@gmail.com", "creation_time": "2017-03-09T17:00:18Z", "is_private": false, "attachment_id": null}, {"count": 6, "text": "Created attachment 34813\nNative US locale processing of formats and changing Decimal and Grouping afterwards", "bug_id": 60040, "attachment_id": 34813, "id": 197575, "time": "2017-03-09T17:01:58Z", "creator": "blommers80@gmail.com", "creation_time": "2017-03-09T17:01:58Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 60040, "attachment_id": null, "text": "- I would suggest a solution similar to Fernando's Solution (i.e. replacing the string literals with a correct locale based separators).\n Here I have attached a possible solution and added a unit test to TestDataFormatter.java (see the attached CustomFormatting.patch file). \n It seems like the CellNumberPartHandler class is used to parse the format (i.e. \"#,##0 ;(#,##0) ;\"-\"\"), and such formats are not locale specific.", "id": 198218, "time": "2017-04-10T09:05:11Z", "creator": "samsontesfay@tagetik.com", "creation_time": "2017-04-10T09:05:11Z", "is_private": false}, {"count": 8, "attachment_id": 34903, "bug_id": 60040, "text": "Created attachment 34903\nProposedSolution+UnitTest", "id": 198219, "time": "2017-04-10T09:06:17Z", "creator": "samsontesfay@tagetik.com", "creation_time": "2017-04-10T09:06:17Z", "tags": [], "is_private": false}]
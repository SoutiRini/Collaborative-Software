[{"count": 0, "tags": [], "bug_id": 51524, "attachment_id": null, "text": "The current (r1147828) constructor of the PapBinTable class does something like:\n\nList<PAPX> newPapxs = new LinkedList<PAPX>();\nforeach character in docText\n   do something\n   List<PAPX> papxs = new LinkedList<PAPX>();\n   foreach paragraph in paragraphs\n      do something with papxs\n   do something with papxs and newPapxs\nset this.paragraphs to newPapxs\n\nThe problem is that the overall complexity rises quadratically with the document size. For instance I have a document which has 341742 paragraphs and docText at this point is 653186 characters log. I didn't even have the patience to wait until it finishes. \n\nIn 3.7, this constructor was much simpler, this.paragraphs was not transformed. This introduced a performance regression. We had an experiment where we processed and indexed the content of some doc files. The time rose from 9 to 54 minutes between 3.7 and 3.8.beta3. \n\nThe document I talked about comes from the govdocs dataset. It's public.\n\nhttp://domex.nps.edu/corp/files/govdocs1/007/007488.doc\n\nThere is probably a good reason for this, but the performance regression is significant and the previous version seems to have worked well enough. Maybe this transformation could be disabled with some switch or a system property.", "id": 147976, "time": "2011-07-18T14:52:43Z", "creator": "antoni.mylka@aduna-software.com", "creation_time": "2011-07-18T14:52:43Z", "is_private": false}, {"count": 1, "tags": [], "creator": "antoni.mylka@aduna-software.com", "attachment_id": 27297, "id": 147980, "time": "2011-07-18T16:46:33Z", "bug_id": 51524, "creation_time": "2011-07-18T16:46:33Z", "is_private": false, "text": "Created attachment 27297\nHack which disables the paragraphs structure rebuild\n\nThe attached file is an ugly hack I whipped up for myself. It allows me to bypass the paragraph rebuilding procedure. The HWPFDocument constructor takes 5 seconds now and I can use the content. Without it the constructor would take more than an hour on my machine. I didn't wait to the end.\n\nObviously this doesn't solve the problem and there are definitely consequences I'm not aware of. So please, either apply the patch (or something along the lines, allowing the user to bypass that method) and document the consequences, or accelerate that code to do what it's supposed to do faster.\n\nThe link I supplied gives a good test case."}, {"count": 2, "tags": [], "bug_id": 51524, "text": "Antoni,\n\nRebuilding PAPX table is central point in paragraph processing. It shall not be disabled in a way like \"get me old poi\", because old poi based on incorrect algorithm.\n\nPrevious version looked for all PAPX and called them paragraphs. Current version construct the text, split it into paragraphs and applies PAPX. I.e. in previous version you missed some text from document in case there were not PAPX for it. For example, in document by the link you provide 151 parts of text were missing.\n\nSo disabling this feature can be usefull only in one case - you want to work with PAPX directly. I have no idea why someone will want to do it outside of POI.\n\nAnyway, personally i'm sad it is done in PapBinTable. It shall be done on different level, in completely different place. There should be at least two different APIs: one for low-level files processing, including parsing PAPX structures, complex file tables, etc., and second - to work with document, with tables, lists, paragraphs, etc. Rebuilding paragraphs list shall be on the second level.\n\nBut making such change will break API for sure. So we need to wait until 4.0, where \"old\" way to work with PAPX will be provided and preserved in \"first level API\", as well as DocumentParser with different options on the \"second level API\".\n\nAnyway, again, i rewrite this code partially and now it tooks 4 seconds. Please, let me know if it's acceptable. If possible, please check if data parsed are correct - errors could be.", "id": 147983, "time": "2011-07-18T18:53:57Z", "creator": "vlsergey@gmail.com", "creation_time": "2011-07-18T18:53:57Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "antoni.mylka@aduna-software.com", "is_private": false, "count": 3, "id": 148002, "time": "2011-07-19T12:25:41Z", "bug_id": 51524, "creation_time": "2011-07-19T12:25:41Z", "text": "It seems that your fix works. Thanks very much!"}]
[{"count": 0, "tags": [], "bug_id": 53388, "attachment_id": null, "id": 159823, "time": "2012-06-08T12:55:52Z", "creator": "peter.hans.nilsson@volvo.com", "creation_time": "2012-06-08T12:55:52Z", "is_private": false, "text": "Hi,\n\nCamed across a strange thing today. A customer said his reverse proxied website was not working over https.\n\nAfter some troubleshooting I found this:\n\n[Fri Jun 08 08:18:40 2012] [error] proxy: BALANCER: (balancer://idm). All workers are in error state\n[Fri Jun 08 08:19:38 2012] [error] proxy: BALANCER: (balancer://idm). All workers are in error state\n\n<Proxy balancer://iam>\n Order deny,allow\n Allow from all\n\n BalancerMember http://xxx.xxx.xx.xx:8080/iam route=worker0 \n BalancerMember http://xxx.xxx.xx.xx:8080/iam route=worker1 \n\n</Proxy>\n\nProxyPass               /iam     balancer://idm stickysession=JSESSIONID\nProxyPassReverse        /iam    balancer://idm\n\nShould be:\n\nProxyPass               /iam     balancer://iam stickysession=JSESSIONID\nProxyPassReverse        /iam    balancer://iam\n\nSo it seems like when you write a name of a balancer member which isn't defined, it's not checked when verifying the config. It starts up with no errors. But when accessing it, it gererates 503s.\n\nBest regards,\n\nPeter"}, {"count": 1, "tags": [], "bug_id": 53388, "attachment_id": null, "id": 159915, "time": "2012-06-12T09:38:22Z", "creator": "egarreau@gmail.com", "creation_time": "2012-06-12T09:38:22Z", "is_private": false, "text": "Hi\n\nuse <Proxy balancer://idm> and it should work better ;-)\n\nfrom my personal experience, my advice is to use the <Proxy> object as a pure substitution for {protocol://host:port}, and nothing more.\n\n<Proxy balancer://foo>\n    # do not add a trailing '/' after IP:PORT  (do not add a path, too)\n    BalancerMember       http://127.0.0.1:1234\n    BalancerMember       http://127.0.0.1:2345\n</Proxy>\n\nthis view allows to clarify the substitution which is made by mod_proxy_balancer, by keeping equivalent things together:\n - level: substitute protocol://host:port (balancer's job)\n    * balancer://foo  --->  http://127.0.0.1:1234\n - level: substitute request path  (ProxyPass' job)\n    * balancer://foo/path1  -->  http://127.0.0.1:1234/path2\n\nI found this logic to be a safe method to avoid the famous \"double /\" side-effect that you get when you want to \"ProxyPass /\"...\n\neric"}, {"count": 2, "tags": [], "bug_id": 53388, "attachment_id": null, "id": 163123, "time": "2012-11-01T15:32:01Z", "creator": "peter.hans.nilsson@volvo.com", "creation_time": "2012-11-01T15:32:01Z", "is_private": false, "text": "I don't understand your answer I am afraid.\n\nI still find this to be an issue. Their should be an inbuilt mechanism checking that the balancermember exits.\n/Peter"}, {"count": 3, "tags": [], "bug_id": 53388, "text": "(In reply to comment #2)\n> I don't understand your answer I am afraid.\n> \n> I still find this to be an issue. Their should be an inbuilt mechanism\n> checking that the balancermember exits.\n> /Peter\n\nHi\n\nMy answer was only about the path appended to the 'scheme:/host:port/' declaration of your BalancerMembers (my experience says a BalancerMember should be seen as a \"pure\" host definition, and that the optional backend path should be declared in the ProxyPass/ProxyPassReverse lines)\n\nAnyway, I understand your point. Indeed, using a non-existent Proxy or using a Proxy which has zero BalancerMember has the same '503' effect, because this information is a pure run-time evaluation made by lbmethod providers (it is not their role to detect a wrong setup)\n\nThis happens because the object is transparently created when the 'ProxyPass' directive is evaluated (it is probably made in order to allow a forward declaration of the balancer itself):\n(mod_proxy.c)\n(((\n        proxy_balancer *balancer = ap_proxy_get_balancer(cmd->pool, conf, r);\n        if (!balancer) {\n            const char *err = ap_proxy_add_balancer(&balancer,\n                                                    cmd->pool,\n                                                    conf, r);\n)))\n\nMaybe a coherence check in the post_config hook could validate that there is no 'balancer://' object with zero elements ? (I can /try/ to make it...)\n\neric", "id": 163175, "time": "2012-11-05T09:08:37Z", "creator": "egarreau@gmail.com", "creation_time": "2012-11-05T09:08:37Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 53388, "text": "What would be great Eric!\n\n/Peter", "id": 163177, "time": "2012-11-05T09:41:08Z", "creator": "peter.hans.nilsson@volvo.com", "creation_time": "2012-11-05T09:41:08Z", "tags": [], "is_private": false}]
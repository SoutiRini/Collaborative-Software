[{"count": 0, "tags": [], "bug_id": 6788, "attachment_id": null, "id": 11350, "time": "2002-03-01T15:38:35Z", "creator": "neilasmyth@yahoo.com", "creation_time": "2002-03-01T15:38:35Z", "is_private": false, "text": "Task: javac\nAttribute: target\n\nThe use of the target attribute with a value of \"1.1\" does not seem to be \nworking. \n\nSystem info:\n=======\nsrc 462 :java -version\njava version \"1.4.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.0-b92)\nJava HotSpot(TM) Client VM (build 1.4.0-b92, mixed mode)\n\nsrc>ant -version\nAnt version 1.4 compiled on September 3 2001\n=======\n\nIf I do a straightforward javac with the \"-target 1.1\" parameter the generated \nbytecode works fine under a 1.1 JRE. However if I do a corresponding task in \nant the generated bytecode does not work under a 1.1 JRE.\n\nThe same attribute works fine with the 1.3 jdk compiler, so maybe something has \nchenged in the java interface to the compiler between 1.3 and 1.4?\n\nIn any case, it means I am cannot use ant1.4.1 with jdk1.4 which I would like \nto do.\n\nRegards,\n\nNeil"}, {"count": 1, "tags": [], "creator": "malachi@eoti.org", "is_private": false, "id": 11351, "creation_time": "2002-03-01T16:25:03Z", "time": "2002-03-01T16:25:03Z", "bug_id": 6788, "text": "I use JDK1.4 at home with Ant 1.4.1....  Although I agree it should work, you shouldn't use the 1.1 \ntarget unless absolutely necessary.  I understand why you don't choose a target of 1.4, but is \nthere a particular reason you are making your code JDK1.1x compliant instead of 1.2 or 1.3?", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 6788, "attachment_id": null, "id": 11426, "time": "2002-03-04T12:43:30Z", "creator": "neilasmyth@yahoo.com", "creation_time": "2002-03-04T12:43:30Z", "is_private": false, "text": "Not an Ant bug but a JDK bug:\n\nThe bytecode generated from the \"target\" option on javac is\ninvalid for execution on non-1.4 JVMs under certain circumstances.\n\nIn particular, in 1.4 there is a new method on\nStringBugger: append(StringBuffer), which was not present\npreviously. Because no such mthod existed in prior versions\nof the JVM, sode such as\n\nStringBuffer a = new StringBuffer();\na.append(new StringBuffer(\"b\"));\n\nworked fine as \".toString()\" was automatically appended.\nThis no longer happens as a result of the new StringBuffer\nmethod.\n\nIt seems to me the target option should be enhanced to\nappend the \".toString()\" in the case where the target is a\nversion prior to 1.4.\n"}]
[{"count": 0, "tags": [], "bug_id": 7213, "attachment_id": null, "text": "Index: src/java/org/apache/poi/hssf/record/FooterRecord.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/hssf/record/FooterRecord.java,v\nretrieving revision 1.4\ndiff -u -r1.4 FooterRecord.java\n--- src/java/org/apache/poi/hssf/record/FooterRecord.java\t1 Mar 2002 \n13:10:15 -0000\t1.4\n+++ src/java/org/apache/poi/hssf/record/FooterRecord.java\t18 Mar 2002 \n17:00:17 -0000\n@@ -63,6 +63,7 @@\n  * Description:  Specifies the footer for a sheet<P>\n  * REFERENCE:  PG 317 Microsoft Excel 97 Developer's Kit (ISBN: 1-57231-498-2)\n<P>\n  * @author Andrew C. Oliver (acoliver at apache dot org)\n+ * @author Shawn Laubach (laubach@acm.org) Modified 3/14/02\n  * @version 2.0-pre\n  */\n \n@@ -117,7 +118,7 @@\n         if (size > 0)\n         {\n             field_1_footer_len = data[ 0 + offset ];\n-            field_2_footer     = new String(data, 1 + offset,\n+            field_2_footer     = new String(data, 3 + offset, // [Shawn] \nChanged 1 to 3 for offset of string\n                                             LittleEndian.ubyteToInt( \nfield_1_footer_len) );\n         }\n     }\n@@ -153,9 +154,9 @@\n      * @see #getFooter()\n      */\n \n-    public byte getFooterLength()\n+    public short getFooterLength()\n     {\n-        return field_1_footer_len;\n+        return (short)(0xFF & field_1_footer_len); // [Shawn] Fixed needing \nunsigned byte\n     }\n \n     /**\n@@ -189,15 +190,15 @@\n \n         if (getFooterLength() > 0)\n         {\n-            len++;\n+            len+=3; // [Shawn] Fixed for two null bytes in the length\n         }\n         LittleEndian.putShort(data, 0 + offset, sid);\n         LittleEndian.putShort(data, 2 + offset,\n                               ( short ) ((len - 4) + getFooterLength()));\n         if (getFooterLength() > 0)\n         {\n-            data[ 4 + offset ] = getFooterLength();\n-            StringUtil.putCompressedUnicode(getFooter(), data, 5 + offset);\n+            data[ 4 + offset ] = (byte)getFooterLength();\n+            StringUtil.putCompressedUnicode(getFooter(), data, 7 + offset); // \n[Shawn] Place the string in the correct offset\n         }\n         return getRecordSize();\n     }\n@@ -208,7 +209,7 @@\n \n         if (getFooterLength() > 0)\n         {\n-            retval++;\n+            retval+=3; // [Shawn] Fixed for two null bytes in the length\n         }\n         return retval + getFooterLength();\n     }\nIndex: src/java/org/apache/poi/hssf/record/HeaderRecord.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/hssf/record/HeaderRecord.java,v\nretrieving revision 1.4\ndiff -u -r1.4 HeaderRecord.java\n--- src/java/org/apache/poi/hssf/record/HeaderRecord.java\t1 Mar 2002 \n13:10:15 -0000\t1.4\n+++ src/java/org/apache/poi/hssf/record/HeaderRecord.java\t18 Mar 2002 \n17:00:17 -0000\n@@ -63,6 +63,7 @@\n  * Description:  Specifies a header for a sheet<P>\n  * REFERENCE:  PG 321 Microsoft Excel 97 Developer's Kit (ISBN: 1-57231-498-2)\n<P>\n  * @author Andrew C. Oliver (acoliver at apache dot org)\n+ * @author Shawn Laubach (laubach@acm.org) Modified 3/14/02\n  * @version 2.0-pre\n  */\n \n@@ -117,7 +118,7 @@\n         if (size > 0)\n         {\n             field_1_header_len = data[ 0 + offset ];\n-            field_2_header     = new String(data, 1 + offset,\n+            field_2_header     = new String(data, 3 + offset, // [Shawn] \nChanged 1 to 3 for offset of string\n                                             LittleEndian.ubyteToInt\n(field_1_header_len));\n         }\n     }\n@@ -153,9 +154,9 @@\n      * @see #getHeader()\n      */\n \n-    public byte getHeaderLength()\n+    public short getHeaderLength()\n     {\n-        return field_1_header_len;\n+        return (short)(0xFF & field_1_header_len); // [Shawn] Fixed needing \nunsigned byte\n     }\n \n     /**\n@@ -189,15 +190,16 @@\n \n         if (getHeaderLength() != 0)\n         {\n-            len++;\n+            len+=3; // [Shawn] Fixed for two null bytes in the length\n         }\n         LittleEndian.putShort(data, 0 + offset, sid);\n         LittleEndian.putShort(data, 2 + offset,\n                               ( short ) ((len - 4) + getHeaderLength()));\n+\n         if (getHeaderLength() > 0)\n         {\n-            data[ 4 + offset ] = getHeaderLength();\n-            StringUtil.putCompressedUnicode(getHeader(), data, 5 + offset);\n+            data[ 4 + offset ] = (byte)getHeaderLength();\n+            StringUtil.putCompressedUnicode(getHeader(), data, 7 + offset); // \n[Shawn] Place the string in the correct offset\n         }\n         return getRecordSize();\n     }\n@@ -208,7 +210,7 @@\n \n         if (getHeaderLength() != 0)\n         {\n-            retval++;\n+            retval+=3; // [Shawn] Fixed for two null bytes in the length\n         }\n         retval += getHeaderLength();\n         return retval;", "id": 11948, "time": "2002-03-18T17:02:47Z", "creator": "shawn.laubach@b1b.tinker.af.mil", "creation_time": "2002-03-18T17:02:47Z", "is_private": false}, {"count": 1, "tags": [], "text": "Some context from poi mailing list:\n\nAre you sure that the header and footer records are 100% accurate.  Whenever I \nrun Biff Viewer and look at the records, it cuts the last two characters off.  \nAlso, the length for the strings seem to be 3 less than the length for the \nrecord.  1 byte for the length of the string, x number of bytes for the string, \nand 2 bytes for what.  In all the Excel files I looked at, the two bytes after \nthe string length are nulls.  I'm needing to insert headers and footers so I \nwrote some code that updated the record and got some trailing gibberish.  After \nplaying around, I made the record insert the two null bytes after the string \nlength.  Updated all the places then can happen and everything seemed to work.  \n\nIf you think that this understanding of the record is valid, I'll send the \npatches for the code. \n\nBTW, the unsigned byte problem occurs in the headers and footers.  I fixed this \nalso. \n", "attachment_id": null, "bug_id": 7213, "id": 12906, "time": "2002-04-06T11:17:58Z", "creator": "glens@apache.org", "creation_time": "2002-04-06T11:17:58Z", "is_private": false}, {"count": 2, "tags": [], "creator": "glens@apache.org", "text": "Hrrm this bug seems to have been applied.\n\nBTW, when summitting patches.  Attach them.  Avoids wrapping problems.", "id": 13024, "time": "2002-04-08T14:06:38Z", "bug_id": 7213, "creation_time": "2002-04-08T14:06:38Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 7213, "text": "Confirmed that this patch has been applied, however no one has any memory of \nthe event.  Closing.", "id": 13025, "time": "2002-04-08T14:14:30Z", "creator": "glens@apache.org", "creation_time": "2002-04-08T14:14:30Z", "is_private": false, "attachment_id": null}]
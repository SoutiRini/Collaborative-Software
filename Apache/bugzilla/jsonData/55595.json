[{"count": 0, "tags": [], "bug_id": 55595, "is_private": false, "id": 170270, "attachment_id": 30882, "creator": "tajuddin@amazon.com", "creation_time": "2013-09-25T17:23:53Z", "time": "2013-09-25T17:23:53Z", "text": "Created attachment 30882\nProposed patch to trunk\n\nI have a use case for accessing the parameters of a request in multiple threads in order to generate the response. In that situation, there is a race condition in org.apache.catalina.connector.Request when attempting to access parameters. \n\nThe first thread in will flag the parameters as parsed while successive threads may retrieve partially-constructed parameters. I can retrieve the parameters in the request thread before dispatching to the other threads, and this problem does not occur. However, that imposes overhead on my environment where it may not be required.\n\nA little synchronization should handle this case without creating any overhead for the standard single-threaded request handling use cases. I have attached a patch with a proposed solution. Any feedback is welcome."}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "text": "See section 2.3.3.4 of the Servlet 3.1 specification.\n\nAdding synchronization would add unnecessary overhead for the significant majority of users who do not need multi-threaded access to the parameters.", "id": 170271, "time": "2013-09-25T17:28:36Z", "bug_id": 55595, "creation_time": "2013-09-25T17:28:36Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "A bit more commentary to avoid grumbling:\n\n1. While uncontended locks are cheap, they still have a cost that nobody else wants to pay.\n\n2. If you need to access request parameters from multiple threads, you can do so yourself without having to modify the container to do it for you. Two examples I can think of are to wrap the request in an HttpServletRequestWrapper that you write which includes synchronization for any of the getParameter...() family of methods, or to use a similar but simpler interface (e.g. just not HttpServletRequestWrapper).\n\nIn any case, you will need to take special care not to retain references to the request or response in those other threads. Otherwise, you risk a security vulnerability at worst and mass confusion at the least.\n\nIf you don't want to complicate your own servlet code with this kind of thing, you could even write a Filter to apply a wrapper for those servlets for which it is appropriate.", "is_private": false, "bug_id": 55595, "id": 170274, "time": "2013-09-25T21:33:26Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-09-25T21:33:26Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 55595, "text": "In user land - the simple solution is to perform a request.getParameter(\"anything\") before the multithreaded logic is executed.\n\nThis will trigger the parsing of the request parameters.\n\nThen the multithreaded logic can run. (But it is still a use at your own risk since HttpServletRequest was never meant to be thread safe)", "count": 3, "id": 170282, "time": "2013-09-26T12:17:40Z", "creator": "funkman@apache.org", "creation_time": "2013-09-26T12:17:40Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 55595, "text": "We are actually trying to avoid the simple user land solution. This would prevent any processing that does not depend on the parameters from starting before the parameters are parsed. Since parsing parameters can be a heavy-weight operation, especially in the case of a chunked post, we would like to allow some processing to start before parsing.\n\nWrapping the request seems reasonable on the surface, but it forces the application to assume that the data structures underneath the parameters cannot be changed by the container without going through one of the getParameter...() methods. Is this an assumption that can be safely made?", "id": 170289, "time": "2013-09-26T16:45:52Z", "creator": "tajuddin@amazon.com", "creation_time": "2013-09-26T16:45:52Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 55595, "attachment_id": null, "text": "(In reply to Brian Tajuddin from comment #4)\n> Wrapping the request seems reasonable on the surface, but it forces the\n> application to assume that the data structures underneath the parameters\n> cannot be changed by the container without going through one of the\n> getParameter...() methods. Is this an assumption that can be safely made?\n\nI think you're missing the point: _none_ of the APIs exposed by HttpServletRequest are thread-safe, regardless of how innocuous they might seem.  It's up to the application to insure that only one thread at a time utilizes the HttpServletRequest object.  (The same applies to the response object.)  Having a filter wrap the request and response with your own objects that synchronize internally is the way to go.", "id": 170291, "time": "2013-09-26T17:56:02Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2013-09-26T17:56:02Z", "is_private": false}]
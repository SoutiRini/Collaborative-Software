[{"count": 0, "text": "Problem found and tested in 1.3.x, and noticed in 2.0.x as well\n\n  Installing in either Japanese XP or Win2k to a directory containing Japanese\ncharacters such as \"C:\\Program Files\\\u30ad\u306e\", Apache fails to start due to being\nunable to find httpd.conf file.  Examination of the error message shows that the\npath it's looking in for httpd.conf is not the actual installed directory.. some\nof the japanese characters have been changed.\n\n  In util_win32.c, strlwr() is being used 3 times.  strlwr() assumes an ANSI\ncharacter string and thus adds 0x20 to some of the multibyte japanese\ncharacters.  Replacing with _mbslwr() would solve this problem.  However, the\nsurrounding code which searches for '/', etc in the string is not\nmultibyte-safe.  I think it should ignore bytes which are preceeded by a byte\ngreater than 0x7F.", "bug_id": 25522, "is_private": false, "id": 49114, "time": "2003-12-15T03:59:50Z", "creator": "daniela@research.canon.com.au", "creation_time": "2003-12-15T03:59:50Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 25522, "attachment_id": null, "is_private": false, "id": 93859, "time": "2006-09-19T20:15:11Z", "creator": "wrowe@apache.org", "creation_time": "2006-09-19T20:15:11Z", "text": "Sorry, I'm going to say 'wontfix' to 1.3 because mbcs wasn't supported.\n\nApache 2 introduced all-utf-8 all the time, so this should work entirely\nwithout incident.  Because it's utf-8 file paths and not any of the \nasia-specific code pages, we never need to worry about trailing-byte\n'/' or other ascii valid characters as multibyte data.\n\nIf you can reproduce in Apache 2, open a new bug with lots of details.\nRemember, Apache 2 onwards, everything on the win32 port is being\nhandled in utf-8 internally."}]
[{"count": 0, "tags": [], "bug_id": 50920, "attachment_id": null, "text": "There are many code fragments which compare two strings or one string with a constant characters in httpd. These comparisons continue when two characters are equal to each other, and stop when two characters are not equal. The whole comparison process can be optimized by word-wise comparison. \n\nFor example:\n\n/httpd-2.2.17/modules/http/http_filters.c:592\n\t    while (*b == '0') {\n\n    /* Skip leading zeros */\n    while (*b == '0') {\n        ++b;\n    }\n\n\ncan be optimized as:\n\nwhile( *(unsigned int *)b == 0x30303030 ) {\n   b += 4;\n}\n\nwhile( *b == '0')\n{\n   b ++;\n}\n\nin my unit test, if b has more than 4 '0' from the beginning, the patch will be faster. And the optimization result will be more and more clear, when string b has more '0' from the beginning. \n\nThere are also other places which can be optimized in a similar way, and I list them as follows:\n\n\n/httpd-2.2.17/modules/generators/mod_autoindex.c:2169\n   while (title_endp > title_name && *title_endp == '/') {\n        *title_endp-- = '\\0';\n    }\n==============================================================================\n/httpd-2.2.17/modules/http/http_filters.c:592\n\n/* Skip leading zeros */\n    while (*b == '0') {\n        ++b;\n    }\n\n===============================================================================\n/httpd-2.2.17/modules/mappers/mod_alias.c:309\ndo {\n                ++aliasp;\n            } while (*aliasp == '/');\n\n===============================================================================\n/httpd-2.2.17/modules/mappers/mod_alias.c:312\n  do {\n                ++urip;\n            } while (*urip == '/');\n===============================================================================\n/httpd-2.2.17/server/config.c:367\n\n/* MIME type arguments */\n            while (p2 > handler && p2[-1] == ' ')\n                --p2; /* strip trailing spaces */\n\n==============================================================================\n/httpd-2.2.17/server/util_script.c:294\n\t            while (lu && uri[lu-1] == '/') lu--;\n==============================================================================\n/httpd-2.2.17/server/protocol.c:507\n while ((uri[0] == '/') && (uri[1] == '/')) {\n        ++uri ;\n    }\n\n==============================================================================\n/httpd-2.2.17/server/core.c:3519\n\n while (*path == '/') {\n            ++path;\n        }\n\n==============================================================================\n/httpd-2.2.17/server/core.c:3542\n\nwhile (*path == '/') {\n            ++path;\n        }\n\n==============================================================================\n/httpd-2.2.17/server/util.c:516\n\n do {\n                ++s;\n            } while (*s == '/');\n\n=============================================================================\n/httpd-2.2.17/srclib/apr/file_io/unix/filepath.c:73\ndo {\n            ++(*inpath);\n        } while (**inpath == '/');\n\n=============================================================================\n/httpd-2.2.17/srclib/apr/file_io/unix/filepath.c:164\n\n while (addpath[0] == '/')\n            ++addpath;\n\n=============================================================================\n/httpd-2.2.17/srclib/apr/strings/apr_fnmatch.c:88\n\n/* Collapse multiple stars. */\n\t    while (c == '*') {\n\t\tc = *++pattern;\n\t    }\n\n==============================================================================\n/httpd-2.2.17/srclib/apr/strings/apr_snprintf.c:187\n   for (i = ndigit - 1; i > 0 && p1[i] == '0'; i--)\n        ndigit--;", "id": 144955, "time": "2011-03-12T17:54:52Z", "creator": "songlinhai0543@gmail.com", "creation_time": "2011-03-12T17:54:52Z", "is_private": false}, {"count": 1, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "text": "(a) Isn't this the kind of thing best left to an optimising compiler?\n(b) Since the size of int is not fixed, your patch breaks portability.\n\nDon't you think readability should trump outguessing-the-compiler here?", "id": 144958, "time": "2011-03-12T19:55:23Z", "bug_id": 50920, "creation_time": "2011-03-12T19:55:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50920, "attachment_id": null, "text": "No optimizing compiler is able to perform this type of optimization. We need to write word-wise comparison codes by ourselves. \n\nI may make some misleading claims in my original bug report.\nActually, based on my unit testing, the suggested implementation almost always runs faster.\nWhen the length is smaller than 4 bytes, there is negligible performance difference.\nWhen the length is larger than 4 bytes, the version I suggested runs \nmuch faster.\nFor example, when the trailing blank length is 10 bytes, the version I suggested only takes about 3/4 the time the original version takes. And when the trailing blank length is 20, the version I suggested only takes about HALF the time the original version takes.", "id": 144963, "time": "2011-03-13T00:58:50Z", "creator": "songlinhai0543@gmail.com", "creation_time": "2011-03-13T00:58:50Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 50920, "attachment_id": null, "text": "Linhai,\n\nlet me caution you that the httpd project isn't going to be receptive to\nper-platform optimizations that result in less readable code.  In fact, 2.0\nwas a milestone in moving these hundreds of #ifdef exceptions out of the project\nand giving them away to a portability layer.\n\nPer-platform optimizations are welcomed - at the Apache APR (portable runtime)\nproject, which is happy to deal with OS, CPU or driver discrepancies.  I'd\nencourage you to continue your research, and propose optimizations to that\nproject (there is a dev@apr.apache.org mailing list, and a separate APR bug\ncategory in bugzilla).", "id": 144964, "time": "2011-03-13T01:08:48Z", "creator": "wrowe@apache.org", "creation_time": "2011-03-13T01:08:48Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "nick@webthing.com", "is_private": false, "count": 4, "id": 144965, "time": "2011-03-13T04:50:02Z", "bug_id": 50920, "creation_time": "2011-03-13T04:50:02Z", "text": "(In reply to comment #2)\n> the trailing blank length is 20, the version I suggested only takes about HALF\n> the time the original version takes.\n\nCan't see a trailing blanks example in there.\n\nYour first example, leading zeros, is typical: the likelihood of there being any, let alone many, is low.  If we were expecting to skip 20 leading zeros, maybe we'd have used strspn.\n\nIf you want to make a case for a patch, I'd suggest all of:\n(a) A usage case where there's a likelihood of long strings in real life.\n(b) A macro that doesn't detract from readability.\n(c) Address portability issues like sizeof and endianness."}]
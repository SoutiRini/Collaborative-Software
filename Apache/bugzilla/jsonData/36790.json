[{"count": 0, "tags": [], "creator": "jafshar@vignette.com", "attachment_id": null, "is_private": false, "id": 80405, "time": "2005-09-23T23:40:14Z", "bug_id": 36790, "creation_time": "2005-09-23T23:40:14Z", "text": "Shouldn't the following two-line jsp response with \n\n  Content-Type: application/x-foobar\n\n?\n\n<% response.setContentType(\"application/x-foobar\");%>\nHello World at <%=new java.util.Date()%>.\n\nIt's actually responding with\n\n   Content-Type: application/x-foobar;charset=ISO-8859-1\n\n1) Should \"charset\" only be appended to non-\"text/*\" content?\n\n2) I think JSP compiler automatically adds a\nsetContentType(\"text/html;charset=ISO-8859-1\") at the beginning if not present.\nRegardless, shouldn't a subsequent setContentType() make it forget the previous\n\"charset\"?\n\n3) In a servlet, this works correctly:\n\n\t\tresponse.setContentType(\"text/html; charset=utf-8\");\n\t\tresponse.reset();\n\t\tresponse.setContentType(\"application/x-foobar\");\n\nIt will not append \"charset\". Adding a response.reset() to the .jsp does not\nhelp -- charset is still present."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "This behaviour is as per the JSP spec.\n<spec-quote section=\"JSP.4.2\">\nFor JSP pages in standard syntax, it is the character encoding specified by the\npageEncoding attribute of the page directive or by a JSP configuration element\npage-encoding whose URL pattern matches the page. ... If there\u2019s no such\nspecification, no initial response character encoding is passed to\nServletResponse.setContentType() - the ServletResponse object\u2019s default,\nISO-8859-1, isused.\n</spec-quote>", "id": 80406, "time": "2005-09-23T23:59:34Z", "bug_id": 36790, "creation_time": "2005-09-23T23:59:34Z", "is_private": false}, {"count": 2, "tags": [], "creator": "jafshar@vignette.com", "text": "I understand the character encoding defaults to ISO-8859-1, but I guess it boils\ndown to for the following servlet code, shouldn't the Content-Type be\n\"application/x-foobar\"? Tomcat 5.0.28 is sending\n\"application/x-foobar;charset=utf-8\".\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, java.io.IOException {\n\t\tresponse.setContentType(\"text/html; charset=utf-8\");\n\t\tresponse.setContentType(\"application/x-foobar\");\n\t\tresponse.getOutputStream().println(new java.util.Date().toString());\n\t\tresponse.getOutputStream().close();\n    }\n\nThe spec doesn't seem clear on what happens when setContentType() is called a\nsecond time without a charset, but it does seem clear that \"charset\" should only\nget added for \"text/*\" MIME types.\n\nIs the standard clear on whether \"charset\" should be sent if the servlet does this?\n\n\t\tresponse.setContentType(\"text/html; charset=utf-8\");\n\t\tresponse.setContentType(\"text/html\");\n\nShould the response default back to ISO-8859-1, and should the Content-Type have\n\";charset=ISO-8859-1\" appended?\n\nSRV.5.4 Internationalization\n...\nThe setCharacterEncoding, setContentType, and\nsetLocale methods can be called repeatedly to change the character encoding.\nCalls made after the servlet response\u2019s getWriter method has been called or after\nthe response is committed have no effect on the character encoding. Calls to\nsetContentType set the character encoding only if the given content type string\nprovides a value for the charset attribute.\n...\nIn the case of HTTP, the locale is communicated via the Content-\nLanguage header, the character encoding as part of the Content-Type header for\ntext media types.", "id": 80425, "time": "2005-09-24T19:17:13Z", "bug_id": 36790, "creation_time": "2005-09-24T19:17:13Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "william.barker@wilshire.com", "attachment_id": null, "is_private": false, "id": 80430, "time": "2005-09-24T21:08:40Z", "bug_id": 36790, "creation_time": "2005-09-24T21:08:40Z", "text": "The spec is very clear that if you are using response.getWriter (e.g. you are \nusing a JSP page), then you get a charset on your content type.  Since you've \nalready quoted the section, I won't bother to quote it again :).\n\nYou have already pointed to the solution to your problem in your bullet 3) \nabove:  Don't use JSP pages for binary content.  \n\nYou can try TC 5.5, which has as much support as Tomcat will ever have for \nyour misuse of JSP pages.  "}, {"count": 4, "attachment_id": null, "bug_id": 36790, "text": "(In reply to comment #3)\n> The spec is very clear that if you are using response.getWriter (e.g. you are \n> using a JSP page), then you get a charset on your content type. \n\nOkay, let's ignore JSP's for now. Should this servlet respond with\n\n    Content-Type: application/x-foobar;charset=UTF-8\n\nIt does on Tomcat 5.0.28 and 5.5, but I don't think it should be \nappending \"charset\".\n\nThe spec says \"charset\" should only be appended for text media content types.\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.util.*;\n\npublic class HelloWorldServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse \nresponse) throws ServletException, java.io.IOException {\n\tresponse.setContentType(\"text/html; charset=utf-8\");\n\tresponse.setContentType(\"application/x-foobar\");\n\tresponse.getOutputStream().println(new java.util.Date().toString());\n\tresponse.getOutputStream().close();\n    }\n}\n\n", "id": 80439, "time": "2005-09-25T05:54:13Z", "creator": "jafshar@vignette.com", "creation_time": "2005-09-25T05:54:13Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 80440, "time": "2005-09-25T10:10:28Z", "bug_id": 36790, "creation_time": "2005-09-25T10:10:28Z", "text": "For crying out loud, you quoted the part of the spec that requires this\nbehaviour in comment #2. Please, just read the spec.\n\n<spec-quote section=\"SRV.5.2\">\nThe setCharacterEncoding, setContentType, and setLocale methods can be called\nrepeatedly to change the character encoding ... Calls to setContentType set the\ncharacter encoding only if the given content type string provides a value for\nthe charset attribute.\n</sepc-quote>\n\nTherefore, response.setContentType(\"text/html; charset=utf-8\"); sets the\ncharacter encoding and response.setContentType(\"application/x-foobar\"); does not\nchange it.\n\nThis is not a bug. If you re-open this bug again, it is just going to be closed\nagain with no further comment.\n\nIf you have further questions about this, then please ask them on the\ntomcat-user mailing list although to be perfectly frank you could save yourself\nsome time by reading the spec."}]
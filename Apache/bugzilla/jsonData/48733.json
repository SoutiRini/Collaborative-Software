[{"count": 0, "tags": [], "creator": "alex_watson@standardandpoors.com", "attachment_id": null, "text": "The current line breaking algorithm in FOP 0.95 uses two static classes LineBreakStatus and LineBreakUtils to implement the standard Unicode line breaking algorithm (UTR 14).\n\nIn particular, this handles currency expressions such as $US150 and $A250 to prevent line breaks within each number.\n\nHowever, my company uses a different convention of putting the country before the currency symbol (eg. US$150 and A$250). Unfortunately, this allows a line break between the country and the currency symbol.\n\nI have checked the UTR14 spec and I know this is non-standard. It prohibits breaks between (PR,AL) but allows breaks between (AL,PR).\n\nMy enhancement request is for a way to override the default line-break pairs at runtime. This is not currently possible because the LineBreakStatus and LineBreakUtils classes are static with private members.\n\nThe simplest change would be to make the LineBreakUtils class public, change the PAIR_TABLE to non-final and then add a method setLineBreakPairProperty(int, int, byte). This would not break any existing unittests or functionality, but would allow me to write something like this when I create my FopFactory:\n\nLineBreakUtils.setLineBreakPairProperty(\n  LineBreakUtils.LINE_BREAK_PROPERTY_AL,\n  LineBreakUtils.LINE_BREAK_PROPERTY_PR,\n  LineBreakUtils.PROHIBITED_BREAK);\n\nHowever, as LineBreakUtils is a generated java file I have an alternate patch for LineBreakStatus that would achieve the same thing (but is a little more work).\n\nPlease advise if there is a way to achieve this with current FOP functionality, or if my suggested code enhancements are appropriate. I can provide PATCH code for either approach if requested.", "id": 134448, "time": "2010-02-12T04:21:13Z", "bug_id": 48733, "creation_time": "2010-02-12T04:21:13Z", "is_private": false}, {"count": 1, "tags": [], "text": "(In reply to comment #0)\n> \n> However, my company uses a different convention of putting the country before\n> the currency symbol (eg. US$150 and A$250). Unfortunately, this allows a line\n> break between the country and the currency symbol.\n>\nThe usual solution for special cases requiring the standard linebreaking to be overwritten is to add a zero width breaking or non breaking (depending on what you want to achieve) joiner character to the input stream. Typically as part of the XSL transformation step if you have one.\n> \n> The simplest change would be to make the LineBreakUtils class public, change\n> the PAIR_TABLE to non-final and then add a method setLineBreakPairProperty(int,\n> int, byte). This would not break any existing unittests or functionality, but\n> would allow me to write something like this when I create my FopFactory:\n> \n> LineBreakUtils.setLineBreakPairProperty(\n>   LineBreakUtils.LINE_BREAK_PROPERTY_AL,\n>   LineBreakUtils.LINE_BREAK_PROPERTY_PR,\n>   LineBreakUtils.PROHIBITED_BREAK);\n> \nWhile it is desirable to make line breaking behaviour more flexible your approach of exposing setters on static variables making them modifiable at runtime is non thread safe and also does not allow linebreaking customization on a per fop invocation basis as obviously these tables are shared across all fop instances.\n\nA more generic approach possibly using interfaces, factories and configurable line breaking providers may be more appropriate. However, as pointed out above this may be an overkill in your case as, depending on your FOP production pipeline, injecting non breaking word joiner (U+2060) into your currency amounts could be a simple solution not requiring any FOP code changes.", "attachment_id": null, "bug_id": 48733, "id": 134451, "time": "2010-02-12T06:50:00Z", "creator": "manuel@apache.org", "creation_time": "2010-02-12T06:50:00Z", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "vhennebert@gmail.com", "text": "Hi,\n\nLike Manuel said, the appropriate way to deal with such special case is to insert Word Joiner (U+2060) or otherwise Zero Width Space (U+200B) at the right places in the text. In your case: US&#x2060;$150, A&#x2060;$250. Have a look at chapter 16 of the Unicode Standard 5.2 (http://www.unicode.org/versions/Unicode5.2.0/). This is much more flexible as that allows you to alter the algorithm's behaviour only locally; it's also more practical than modifying FOP's source code.\n\nIf you have any further question feel free to ask on the fop-users list:\nhttp://xmlgraphics.apache.org/fop/maillist.html#fop-user\n\nHTH,\nVincent", "id": 134455, "time": "2010-02-12T10:39:10Z", "bug_id": 48733, "creation_time": "2010-02-12T10:39:10Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "id": 156929, "time": "2012-04-01T13:55:06Z", "bug_id": 48733, "creation_time": "2012-04-01T13:55:06Z", "is_private": false}]
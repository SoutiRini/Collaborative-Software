[{"count": 0, "tags": [], "bug_id": 19006, "attachment_id": null, "id": 35128, "creation_time": "2003-04-14T17:14:36Z", "time": "2003-04-14T17:14:36Z", "creator": "cfouque@montrouge.sema.slb.com", "text": "By now, most ANT tasks, elements and attributes (for example 'fileset' and \n'webxml') are used easily only if all files to process are in the same \n'WorkArea'.\n\nBut for big projects, the fact that each developper has all files in its own \n'WorkArea' has drawbacks :\n-  Each WorkArea contains too many files (several thousands) to be correcly \nmanaged by a human being.\n-  Whenever a developper modifies the interface of a low level API, he has to \ndeliver it to all other developpers, and this manual delivery process NEVER \nworks correctly.\n\nSo we use following concepts and methods :\n-  At one time, the project manager creates a 'Baseline', which is a 'WorkArea' \ncorresponding to a project version, containing a coherent set of versions of all \nfiles, builds it with classpath=Baseline, the publishes it read-only for all \ndeveloppers.\n-  Each developper then creates his own 'WorkArea' pointing to the common \n'Baseline' :\n   -  At the beginning, the WorkArea contains only empty folders, but NO file.\n   -  The developper puts in his WorkArea only NEW and MODIFIED files.\n   -  For compilation, the classpath is 'WorkArea;Baseline'.\n-  That permits all developpers to easily handle a sparse WorkArea with a \nlimited number of files, and automatically use the SAME low level APIs delived \nin the Baseline.\n\nWhen needed, the project manager can also create an 'Incremental Baseline' by \nbuilding it as a WorkArea pointing to an existing 'Baseline', then publishing it \nread-only.\nEach developer can then create his own new WorkArea pointing to the incremental \nBaseline, and the classpath is then 'WorkArea;Incremental Baseline;Full \nBaseline'.\n\nWe also sometimes use more than 3 levels.\n\nSo, the (class)path to search for files can be any one of these ones:\n1)  'WorkArea'\n2)  'WorkArea:Full Baseline'\n3)  'WorkArea;Incremental Baseline;Full Baseline\n4)  ...\n\nIn my wrapper script (written in perl), I follow the 'WorkArea' to 'Baseline' \nlinks to get the full PATH, and I call ant with the corresponding options :\n1)  '-Dbasedir=WorkArea'\n2)  '-Dbasedir=WorkArea'  '-Dsp1=Full Baseline'\n3)  '-Dbasedir=WorkArea'  '-Dsp1=Incremental Baseline'  '-Dsp2=Full Baseline'\n4)  ...\n\nSo ANT is aware of the full PATH.\n\nBut this is NOT easily handled in the 'build.xml' file, mainly because the \n'fileset' element requires an EXISTING 'dir' attribute.\n\nSo, if I want to manage n levels of WorkArea, I have to n-plicate each task, \nwith 'if' and 'unless' attributes (see example with 3 levels at the bottom).\n\n\nBelow are my enhancement requests, that I hope can be implemented in ANT 1.6 :\n\nA)  fileset\n-----------\nMy main enhancement request is that the 'fileset' element accepts the 'path' and \n'pathref' attributes similar respectively to the 'classpath' and 'classpathref' \nattributes of the 'javac' task.\n\nB)  war\n-------\nSimilarly, the 'war' task should accept the 'webxmlpath' and 'webxmlpathref' \nattributes to search for the file specified by the 'webxml' attribute.\n\nC)  property\n------------\nSimilarly, when the 'location' attribute is specified and the value of \n'location' is NOT an absolute path, the 'property' element should accept the \n'path' and 'pathref' attributes to search for the file specified by the \n'location' attribute there, and NOT in the project's 'basedir'.\n\nD)  fileset\n-----------\nWhen the 'dir' attribute is specified, the 'fileset' element should accept the \n'mandatory' attribute, with default value 'true'.  When its value is 'false', \nthe task should NOT fail, but the 'fileset' element should be simply ignored.\n\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n<project  name=\"exampleWar\"  default=\"exampleWar\">\n  \n  \n  <description>ANT build file for example.war</description>\n  \n  \n  <!--\n      Verify that the destination folder exists.\n      Define the destination file.\n   -->\n  <target  name=\"init\">     \n    \n    <echo  level=\"verbose\"  message=\"Project Name = ${ant.project.name}\"/>\n  \n    <!-- Create the time stamp -->\n    <tstamp/>\n  \n    <property   name=\"webapps\"        value=\"tomcat/webapps\"/>\n    <available  property=\"webappsOK\"  type=\"dir\"  file=\"${webapps}\"/>\n    <fail  unless=\"webappsOK\"\n           message=\" *****  Folder  '${webapps}'  NOT found  *****\"/>\n    <echo  level=\"verbose\"  message=\"webapps      = ${webapps}\"/>\n    <property   name=\"destfile\"    location=\"${webapps}/example.war\"/>\n    <echo  level=\"verbose\"  message=\"destfile     = ${destfile}\"/>\n    \n  </target>\n  \n  \n  <!--\n      -  Verify that the source folders of the WorkArea exist.\n      -  Each path includes only a folder of the Workarea.\n   -->\n  <target  name=\"pathBasedir\"  depends=\"init\"  if=\"basedir\">\n    \n    <property       name=\"config\"    location=\"config\"/>\n    <available  property=\"configOK\"  type=\"dir\"  file=\"${config}\"/>\n    <fail  unless=\"configOK\"\n           message=\" *****  Folder  '${config}'  NOT found  *****\"/>\n    <echo  level=\"verbose\"  message=\"config     = ${config}\"/>\n    \n    <property       name=\"appli\"    location=\"${webapps}/myAppli\"/>\n    <available  property=\"appliOK\"  type=\"dir\"  file=\"${appli}\"/>\n    <fail  unless=\"appliOK\"\n           message=\" *****  Folder  '${appli}'  NOT found  *****\"/>\n    <echo  level=\"verbose\"  message=\"appli      = ${appli}\"/>\n    \n    <path  id=\"configPath\">\n      <pathelement  location=\"${config}\"/>\n    </path>       \n    \n  </target>\n  \n  \n  <!--\n      Search 'WEB-INF/web.xml' in the Workarea.\n   -->\n  <target  name=\"webXmlBasedir\"  if=\"basedir\"\n           depends=\"pathBasedir\">\n    \n    <available  property=\"web.xml\"  type=\"file\"\n                    file=\"${appli}/WEB-INF/web.xml\"\n                   value=\"${appli}/WEB-INF/web.xml\"/>\n    \n  </target>\n  \n  \n  <!--\n      If the WorkArea points to a Baseline :\n      -  Verify that the source folders of the Baseline exist.\n      -  Each path includes a folder of the Workarea and the corresponding\n         folder of the Baseline.\n   -->\n  <target  name=\"pathSp1\"  depends=\"init\"  if=\"sp1\">\n       \n    <property       name=\"config1\"    location=\"${sp1}/config\"/>\n    <available  property=\"config1OK\"  type=\"dir\"  file=\"${config1}\"/>\n    <fail  unless=\"config1OK\"\n           message=\" *****  Folder  '${config1}'  NOT found  *****\"/>\n    <echo  level=\"verbose\"  message=\"config1     = ${config1}\"/>\n    \n    <property       name=\"appli1\"  location=\"${sp1}/${webapps}/myAppli\"/>\n    <available  property=\"appli1OK\"  type=\"dir\"  file=\"${appli1}\"/>\n    <fail  unless=\"appli1OK\"\n           message=\" *****  Folder  '${appli1}'  NOT found  *****\"/>\n    <echo  level=\"verbose\"  message=\"appli1      = ${appli1}\"/>\n    \n    <path  id=\"configPath\">\n      <pathelement  location=\"${config}\"/>\n      <pathelement  location=\"${config1}\"/>\n    </path>       \n    \n  </target>\n  \n  \n  <!--\n      If the WorkArea points to a Baseline and 'WEB-INF/web.xml'\n      was NOT found in the WorkArea, search it in the Baseline.\n   -->\n  <target  name=\"webXmlSp1\"  if=\"sp1\"  unless=\"web.xml\"\n           depends=\"webXmlBasedir,pathSp1\">\n    \n    <available  property=\"web.xml\"  type=\"file\"\n                    file=\"${appli1}/WEB-INF/web.xml\"\n                   value=\"${appli1}/WEB-INF/web.xml\"/>\n    \n  </target>\n  \n  \n  <!--\n      If the pointed Baseline points to another Baseline :\n      -  Verify that the source folders of the other Baseline exist.\n      -  Each path includes a folder of the Workarea and the corresponding\n         folder of both Baselines.\n   -->\n  <target  name=\"pathSp2\"  depends=\"init\"  if=\"sp2\">\n       \n    <property       name=\"config2\"    location=\"${sp2}/config\"/>\n    <available  property=\"config2OK\"  type=\"dir\"  file=\"${config2}\"/>\n    <fail  unless=\"config2OK\"\n           message=\" *****  Folder  '${config2}'  NOT found  *****\"/>\n    <echo  level=\"verbose\"  message=\"config2     = ${config2}\"/>\n    \n    <property       name=\"appli2\"  location=\"${sp2}/${webapps}/myAppli\"/>\n    <available  property=\"appli2OK\"  type=\"dir\"  file=\"${appli2}\"/>\n    <fail  unless=\"appli2OK\"\n           message=\" *****  Folder  '${appli2}'  NOT found  *****\"/>\n    <echo  level=\"verbose\"  message=\"appli2      = ${appli2}\"/>\n    \n    <path  id=\"configPath\">\n      <pathelement  location=\"${config}\"/>\n      <pathelement  location=\"${config1}\"/>\n      <pathelement  location=\"${config2}\"/>\n    </path>       \n    \n  </target>\n  \n  \n  <!--\n      If the pointed Baseline points to another Baseline and\n      'WEB-INF/web.xml' was NOT found in the WorkArea or in the\n      Baseline, search it in the other Baseline.\n   -->\n  <target  name=\"webXmlSp2\"  if=\"sp2\"  unless=\"web.xml\"\n           depends=\"webXmlBasedir,webXmlSp1,pathSp2\">\n    \n    <available  property=\"web.xml\"  type=\"file\"\n                 file=\"${appli2}/WEB-INF/web.xml\"\n                value=\"${appli2}/WEB-INF/web.xml\"/>\n    \n  </target>\n  \n  \n  <!--\n      Verify that 'WEB-INF/web.xml', each required Java library and\n      properties file exists in its precise folder\n   -->\n  <target  name=\"verifyFiles\"\n           depends=\"  pathBasedir,   pathSp1,   pathSp2,\n                    webXmlBasedir, webXmlSp1, webXmlSp2\">\n    \n    <fail  unless=\"web.xml\"\n           message=\" *****  'web.xml' not found  *****\"/>\n    <echo  level=\"verbose\"  message=\"web.xml = ${web.xml}\"/>\n    \n    <available  property=\"client.properties\"  file=\"client.properties\">\n      <filepath refid=\"configPath\"/>\n    </available>\n    <fail  unless=\"client.properties\"\n           message=\" *****  'client.properties' not found  *****\"/>\n    \n  </target>\n  \n  \n  <!--\n      If the WorkArea does NOT point to a Baseline :\n      Generation of the 'war' file from the WorkArea only\n   -->\n  <target  name=\"exampleBaseDir\"  unless=\"sp1\"\n           depends=\"verifyFiles\">\n    \n    <war  destfile=\"${destfile}\"  duplicate=\"preserve\"\n          webxml=\"${web.xml}\">\n      <zipfileset  filemode=\"644\"  prefix=\"WEB-INF\"  dir=\"${config}\">\n        <include  name=\"client.properties\"/>\n      </zipfileset>\n    </war>\n    \n  </target>\n  \n  \n  <!--\n      If the WorkArea points to a Baseline :\n      Generation of the 'war' file from the WorkArea and the pointed Baseline\n   -->\n  <target  name=\"exampleSp1\"  if=\"sp1\"  unless=\"sp2\"\n           depends=\"verifyFiles\">\n    \n    <war  destfile=\"${destfile}\"  duplicate=\"preserve\"\n          webxml=\"${web.xml}\">\n      <zipfileset  filemode=\"644\"  prefix=\"WEB-INF\"  dir=\"${config}\">\n        <include  name=\"client.properties\"/>\n      </zipfileset>\n      <zipfileset  filemode=\"644\"  prefix=\"WEB-INF\"  dir=\"${config1}\">\n        <include  name=\"client.properties\"/>\n      </zipfileset>\n    </war>\n    \n  </target>\n  \n  \n  <!--\n      If the pointed Baseline points to another Baseline :\n      Generation of the 'war' file from the WorkArea and both Baselines\n   -->\n  <target  name=\"exampleSp2\"  if=\"sp2\"\n           depends=\"verifyFiles\">\n    \n    <war  destfile=\"${destfile}\"  duplicate=\"preserve\"\n          webxml=\"${web.xml}\">\n      \n      <zipfileset  prefix=\"WEB-INF\"  dir=\"${config}\">\n        <include  name=\"client.properties\"/>\n      </zipfileset>\n      <zipfileset  prefix=\"WEB-INF\"  dir=\"${config1}\">\n        <include  name=\"client.properties\"/>\n      </zipfileset>\n      <zipfileset  prefix=\"WEB-INF\"  dir=\"${config2}\">\n        <include  name=\"client.properties\"/>\n      </zipfileset>\n    </war>\n    \n  </target>\n  \n  \n  <!--\n      Generation of the 'war' file\n   -->\n  <target  name=\"exampleWar\"  depends=\"exampleBaseDir,\n                                       exampleSp1,\n                                       exampleSp2\"/>\n  \n  \n  <!--\n      Deletion of the 'war' file\n   -->\n  <target  name=\"clean\">\n    <delete  file=\"${destfile}\"/>\n  </target>\n  \n  \n</project>", "is_private": false}, {"count": 1, "tags": [], "bug_id": 19006, "attachment_id": null, "text": "ping, I have a feeling noone ever really understood this bug.  Perhaps your\noutlook has changed in such a way as to more concisely explain the problem, or\nthis has become a non-issue with some workaround?\n\nThanks", "id": 75434, "time": "2005-05-26T19:20:55Z", "creator": "mbenson@apache.org", "creation_time": "2005-05-26T19:20:55Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 19006, "attachment_id": null, "id": 90687, "creation_time": "2006-06-27T21:17:12Z", "time": "2006-06-27T21:17:12Z", "creator": "mbenson@apache.org", "text": "Hmm, maybe I do understand what this bug was after:  fileset to contain paths. \nThat runs counter to fileset's intent, but with 1.7 resource collection support\npaths can be used pretty much anywhere filesets can (in core anyway).  So I will\ncall this fixed considering that this bug has stayed in NEEDINFO for a year plus.", "is_private": false}]
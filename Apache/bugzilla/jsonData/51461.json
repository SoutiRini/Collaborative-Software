[{"count": 0, "tags": [], "text": "Created attachment 27238\nExamples of 66048 bytes XLS which generates and infinite loop\n\nIn IOUtils.readFully() with certain specific file types / size (tested with Microsoft Excel) I had an infinite loop when basically channel.read() infinitely returns 0 (instead of -1 or the number of bytes read).\n\nAs per JDK 1.6 NIO documentation (http://download.oracle.com/javase/6/docs/api/java/nio/channels/ReadableByteChannel.html), it's \"possible\" that ReadableByteChannel.read returns 0, quoting:\n\nint read()\n\nReturns:\n    The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream \n\n\nNow basically I got an infinite loop on all files which are funnily enough of the same file size (66048 bytes = 65536 content + 512 header), so I'm wondering whether this is related to that or to the specific file.\n\nI'm attaching the XLS which generates the infinite loop (broken.xls) and a working one (working.xls).\n\nI also created a test case mimicking the way I was reading the file (using Tika OfficeParser) which shows the issue (and the working case). In order to run the JUnit you'll need the two test files on the same folder you run it from.\n\nI fine wrote a tentative patch (1 character), which passes the test case and temporarily solved the problem in the production instance I was working on, but I'm not fully sure it's the correct way to do it.\n\nI had this on Win 2008 Server (virtualized with VMWare) and my local MacOSX 10.6", "is_private": false, "bug_id": 51461, "id": 147672, "time": "2011-07-01T12:00:23Z", "creator": "gabriele@apache.org", "creation_time": "2011-07-01T12:00:23Z", "attachment_id": 27238}, {"count": 1, "tags": [], "creator": "gabriele@apache.org", "attachment_id": 27239, "text": "Created attachment 27239\nExample of XLS which does NOT generate infinite loop\n\nOther file needed to run the test case I'm gonna attach", "id": 147673, "time": "2011-07-01T12:01:19Z", "bug_id": 51461, "creation_time": "2011-07-01T12:01:19Z", "is_private": false}, {"count": 2, "tags": [], "creator": "gabriele@apache.org", "attachment_id": 27240, "is_private": false, "id": 147674, "time": "2011-07-01T12:02:27Z", "bug_id": 51461, "creation_time": "2011-07-01T12:02:27Z", "text": "Created attachment 27240\nTest case which generates the infinite loop with \"broken.xls\"\n\nThis JUnit test case breaks with broken.xls and will work with working.xls using poi-3.8-beta3.\n\nThe JUnit passes when applying the patch I'm gonna attach."}, {"count": 3, "text": "Created attachment 27241\n1 character patch which makes the test case pass with \"broken.xls\"\n\nThe patch basically handles the case that \n\nchannel.read()\n\nreturns 0 indefinitely.\n\nIt only adds a = to the < condition in the if.\n\nTest case passes, but not sure why the issue generates (seems related to the file size being multiple of 512 but I tried with a simple 512 header + 512 content xls file and it actually worked without the patch, so a bit puzzled :)", "bug_id": 51461, "attachment_id": 27241, "id": 147675, "time": "2011-07-01T12:06:08Z", "creator": "gabriele@apache.org", "creation_time": "2011-07-01T12:06:08Z", "tags": [], "is_private": false}, {"count": 4, "text": "Hmm, pesky. I had hit something like this before, but I thought I'd fixed it already (but checking when we reached the end of the block). It does seem to be something around reading to the end of the last block when it's an exact multiple.\n\nWhat's the proposed fix?", "bug_id": 51461, "is_private": false, "id": 147676, "time": "2011-07-01T12:06:58Z", "creator": "apache@gagravarr.org", "creation_time": "2011-07-01T12:06:58Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "creator": "gabriele@apache.org", "text": "Created attachment 27242\nExample of 66048 bytes XLS which generates and infinite loop (clean)", "id": 147678, "time": "2011-07-01T13:04:24Z", "bug_id": 51461, "creation_time": "2011-07-01T13:04:24Z", "is_private": false, "attachment_id": 27242}, {"count": 6, "tags": [], "text": "The content of attachment 27238 has been deleted by\n    Tony Stevenson <tony@pc-tony.com>\nwho provided the following reason:\n\nAsked for by the user - 13:55:25 < mindthegab> pctony: can you try this link https://issues.apache.org/bugzilla/attachment.cgi?id=27238&action=delete ?\n\nThe token used to delete this attachment was generated at 2011-07-01 13:04:41 UTC.", "attachment_id": null, "bug_id": 51461, "id": 147679, "time": "2011-07-01T13:05:02Z", "creator": "tony@pc-tony.com", "creation_time": "2011-07-01T13:05:02Z", "is_private": false}, {"count": 7, "tags": [], "creator": "gabriele@apache.org", "attachment_id": null, "text": "Thanks Tony!\n\nFor the test case purposes please check attachment \n\nhttps://issues.apache.org/bugzilla/attachment.cgi?id=27242\n\n\nNOTE: \n\nYou might need to remame it to broken.xls (or change the test case which expects this name), since now it was renamed by bugzilla to broken-1.xls", "id": 147680, "time": "2011-07-01T13:10:38Z", "bug_id": 51461, "creation_time": "2011-07-01T13:10:38Z", "is_private": false}, {"count": 8, "tags": [], "text": "I can't reproduce the infinite loop using your supplied file - it works fine for me\n\nI'm not sure we want to stop reading as soon as we hit zero bytes back from a read call though, as your patch suggests. Think of the case of reading from a slop stream, eg from a network. It's quite possible for that to return zero when there's no data yet, but more still to come. The contract for readFully is that it should keep going until there is no more data available, which we'd break for that situation\n\nAt the point your file hits an infinite loop, what are the values of:\n * total \n * b.capacity() \n * b.position()\n?", "is_private": false, "bug_id": 51461, "id": 147682, "time": "2011-07-01T15:15:51Z", "creator": "apache@gagravarr.org", "creation_time": "2011-07-01T15:15:51Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "There's a rumour that one of the machines at work might be showing up this JVM specific issue too, which'll hopefully let me get the details on what the state is when the loop is triggered if Gabriele isn't able to do so.\n\n(Until we know what's going on on these JVM's when they loop, we can't identify if it's our fault or the JVM's, and try to fix/workaround as appropriate)", "attachment_id": null, "bug_id": 51461, "id": 147986, "time": "2011-07-18T19:52:02Z", "creator": "apache@gagravarr.org", "creation_time": "2011-07-18T19:52:02Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 51461, "is_private": false, "text": "Hey Nick, \nI do have the same problem an I was able to reproduce it with the attached file.\nThe values you've requested are:\ntotal = 65536\nb.capacity = 66048\nb.position = 66048\nLet me know if you need more data.\nRegards, \nTorben", "id": 147990, "time": "2011-07-19T07:29:32Z", "creator": "torben.quast@westernacher.com", "creation_time": "2011-07-19T07:29:32Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 147998, "time": "2011-07-19T11:29:07Z", "bug_id": 51461, "creation_time": "2011-07-19T11:29:07Z", "is_private": false, "text": "(In reply to comment #10)\n> The values you've requested are:\n> total = 65536\n> b.capacity = 66048\n> b.position = 66048\n\nThat should be breaking out on\n\n         if (total == b.capacity() || b.position() == b.capacity()) {\n\nThat was fixed as part of issue #51100 on 2011-04-21, so I think the issue is people using an older version of POI without this fix\n\nGabriele or Torben - can you confirm when the version of POI you're using dates from? (I fear it may be earlier in April than this)"}, {"count": 12, "tags": [], "bug_id": 51461, "is_private": false, "text": "Hey Nick, \nyou are right. I'm using the version 20110401. I also had a peek at the svn but I only compared the files \"manually\" :-). Didn't see (without code highlighting) that there are two methods \"readFully\" and I only saw the line \"if (total == len)\" and thought that nothing had changed.\nThanks for the hint.\nRegards, \nTorben", "id": 148000, "time": "2011-07-19T12:13:16Z", "creator": "torben.quast@westernacher.com", "creation_time": "2011-07-19T12:13:16Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Looks like this is actually bug #51100, but everyone got confused and were sure the fix from that was present, when alas it wasn't...\n\n*** This bug has been marked as a duplicate of bug 51100 ***", "id": 148032, "time": "2011-07-20T11:43:15Z", "bug_id": 51461, "creation_time": "2011-07-20T11:43:15Z", "is_private": false}]
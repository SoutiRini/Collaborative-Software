[{"count": 0, "tags": [], "text": "Created attachment 22264\nPatch to allow binding port to be set per worker in mod_proxy\n\nThis is an enhancement to what is described in\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=44806\n\nAllow a binding port and ip-address to be set for individual workers for out going proxy requests.\n\nThe format of configuration is\n\n<Proxy http://url>\nProxySet bind=myhost.com:port+range\n</Proxy>\n\ne.g\n<Proxy http://url>\nProxySet bind=myhost.com:8000+1000\n</Proxy>\n\nThe same can also be used in balancer sections for\nBalancerMember in <Proxy balancer://cluster>", "is_private": false, "id": 118694, "creator": "rahul.g.nair@gmail.com", "time": "2008-07-16T00:32:45Z", "bug_id": 45405, "creation_time": "2008-07-16T00:32:45Z", "attachment_id": 22264}, {"count": 1, "tags": [], "text": "Comments:\n\n1)  In this version, you're still defining variables inside the for(;;) statement.  As noted in the parent enhancement 44806, that is not a portable construction for some compilers.  Please pull the declarations out of the for() statements.  Otherwise, except for a small change in which structure the data is stored in, the code looks almost identical to our prior solution, so it should work without additional extensive testing.\n\n2)  My thought was to have BOTH a virtual-host-wide \"ProxyBindAddress\" and an individual setting for a proxy worker if separately defined.  Therefore, when a worker is first initialized, shouldn't it copy the bind-address info from the \"conf\" structure to the \"worker\" structure (which maybe subsequently overwritten by a worker-specific directive)?  Simply copying the data from one structure to the other should suffice, INCLUDING copying the pointer - as \"conf\" should never be released as long as it has a \"worker\" structure under it.  I make one assumption:  That at least one \"worker\" structure will always exist for each \"conf\" structure (I have not confirmed that in the code).\n\nAs such:\n  changes to proxy_util.c would be as per this patch, not 44806.\n  changes to mod_proxy.c from both would be combined into a parsing routine that\n     passes the character string and addresses for 3 parameters.  The fourth\n     parameter, \"...->bindopt_set\" could be determined from the return code of\n     the parsing subroutine (char *; NULL == success, otherwise error message).\n     There would be minimal code changes to both line ranges for the TWO calls\n     to the parser, one for \"ProxyBindAddress\" and one for \"ProxySet ... bind=\".\n   + Also, a \"new_worker()\" routine needs to copy data from \"conf\" to \"worker\".\n  changes to mod_proxy.h would have BOTH changes, one from each enhancement.\n\nfor mod_proxy.c:\nchar *parse_bind_address(char *addr, apr_sockaddr_t **bind_addr, \n     apr_port_t *bind_port, apr_port_t *bind_range)\nmove the parsing code into here - adjusting as necessary.\n\nfrom main configuration - ProxyBindAddress()\nset_proxy_bindaddr(cmd_parms *parms, void *dummy, const char *addr)\n+{\n+    char *range, *host, *scope_id;\n+    apr_port_t port;\n+    int r = 0;\n+\n+    proxy_server_conf *psf =\n+    ap_get_module_config(parms->server->module_config, &proxy_module);\n+\n++   char *rc;\n++   rc = parse_bind_address( addr, &psf->bind_addr, &psf->bind_port, &psf->bind_range)\n++   if (rc == NULL) {\n++       psf->bind_idx = 0;\n++       psf->bindopt_set = 1;\n++   } \n+    return rc;\n\nfrom worker configuration - ProxySet() ... bind=\n+    else if (!strcasecmp(key, \"bind\")) {\n++       char *rc;\n++       rc = parse_bind_address( (char*)val, &worker->bind_addr,\n++                                &worker->bind_port, &worker->bind_range)\n++       if (rc == NULL) {\n++           worker->bind_idx = 0;\n++           worker->bindopt_set = 1;\n++       }\n++       return rc;\n+    }\n     else {\n         return \"unknown Worker parameter\";\n\nConfiguration notes:\n - Workers defined via ProxySet BEFORE ProxyBindAddress would inherit the default settings of no info (unspecified address, port 0, range 1).\n - Workers defined via ProxySet AFTER ProxyBindAddress should inherit the ProxyBindAddress settings in effect for its scope (main config, virtual host, etc).", "attachment_id": null, "id": 118733, "creator": "software+apache-httpd@kd6lvw.ampr.org", "time": "2008-07-16T11:12:38Z", "bug_id": 45405, "creation_time": "2008-07-16T11:12:38Z", "is_private": false}, {"count": 2, "tags": [], "text": "> 1)  In this version, you're still defining variables inside the for(;;)\n> statement.  As noted in the parent enhancement 44806, that is not a portable\n> construction for some compilers.  Please pull the declarations out of the for()\n\noops sorry, some habits are hard to break :(\n\n> Configuration notes:\n>  - Workers defined via ProxySet BEFORE ProxyBindAddress would inherit the\n> default settings of no info (unspecified address, port 0, range 1).\n>  - Workers defined via ProxySet AFTER ProxyBindAddress should inherit the\n> ProxyBindAddress settings in effect for its scope (main config, virtual host,\n> etc).\n\nI am not sure relying on the order of definition is a good thing. Perhaps a better idea would be to delay the merge of server and worker conf until the actual connection has to be made?\n\n", "attachment_id": null, "id": 118756, "creator": "rahul.g.nair@gmail.com", "time": "2008-07-17T06:40:37Z", "bug_id": 45405, "creation_time": "2008-07-17T06:40:37Z", "is_private": false}, {"count": 3, "tags": [], "text": "Created attachment 22271\nupdated patch with both server wide and workerspecific bind", "attachment_id": 22271, "id": 118757, "creator": "rahul.g.nair@gmail.com", "time": "2008-07-17T07:16:45Z", "bug_id": 45405, "creation_time": "2008-07-17T07:16:45Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 45405, "text": "Generally, looks good.  I like your solution to the configuration issue I raised - with no need to copy conf->bind* to worker->bind*.  I see we got rid of \"bindopt_set\" as redundant (I hated that too).\n\nParsing: \"if (range) ...\" - closing brace.  Should \"if((apr_parse_addr_port()...\" be inside the closing brace?  If we have ONLY a hostname, we don't have a range, so we never set \"host\" - and thus apr_sockaddr_info_get() will fail.  Yet it seems as if \"ip/hostname\" with NO port or range should work.  Moving the \"if((apr-parse...\" outside of the \"if (range) ...\" closing brace appears to restore what syntax we defined.\n\nParsing:  Range can be set to zero INTERNALLY.  We lost the \"r+1\" bump-up (\"conf-> or worker->bind_range = r + 1;\") from the original patch before we converted the parser to a separate subroutine.  Fix:\n\nChange comparison in apr_status_t bind_to_addr() from \"<\" to \"<=\", i.e.\n+    for(i = 0; i <= range; ++i) { /* loop until we can bind correctly*/\n(line 2277 after patch applied).\n\nAdditional comment:  \"apr_pcalloc(p, sizeof(proxy_bind_addr))\"\nDo we know that this will never return NULL (i.e. \"out of memory\")?  If we can't guarentee that, then we need to check the value and abort parsing.\nAssumption:  Allocated memory is zeroed.  Therefore, variables referenced but not set are zero (pointers NULL), especially the parameters to parse_bind_address().\n\n\nDocumentation:\n-------------------------------------------------------------------------\nCommand: ProxyBindAddress   [<hostname/address-literal>][:<port>+<range>]\nCommand: ProxyPass ... bind=[<hostname/address-literal>][:<port>+<range>]\nCommand: ProxySet  ... bind=[<hostname/address-literal>][:<port>+<range>]\nContext: server config, virtual host (Should <PROXY> sections be allowed too?)\nDefault: Address: unspecified address (\"0.0.0.0\" for IPv4; \"::/128\" for IPv6)\n         Port: unspecified port (0 => use any port available - OS choice)\n         Range:  0 (use only the port specified, if any)\nStatus:  Extension\n\nThis command is useful in order to restrict outbound proxy server requests to use the specified IP address(es) and/or (TCP) port range.  Such limits may be imposed by server firewall design as a security measure or for statistical data collection.  The ProxyPass and ProxySet versions of the command override the general declaration for a particular proxy worker or balancer.\n\nSpecifying a hostname or an address-literal shall bind all outbound proxy\nrequests to the IP address(es) specified or resolved.  DNS resolution is\nused to translate hostnames at configuration time, so if a hostname maps to\nmultiple addresses, the address used may vary across requests. (Internally, all resolved addresses are stored.)  Should the DNS data for the hostname change, Apache will ignore any such changes until it reloads its configuration or is stopped and restarted.  If DNS resolution fails, no source binding takes place and an error is issued.  As noted elsewhere in the Apache documentation, IPv6 address literals that contain colons must appear in brackets.\n\nSpecifying a non-zero port locks in that port as the one used, or if a non-zero range is specified, the first one used.  Specifying a range indicates how many additional consecutive ports beyond the first may be used.  Specifying a range of \"+0\" means that only the specified port is used, thus causing serialization of requests.  This may deny additional requests made in parallel.  A warning may be issued to the system log for a range less than 8.  Explicitly specifying port 0, thus allowing the operating system to choose a random port, does not permit a range value and is equivalent to omitting the port value.\n\nExamples:\n  ProxyBindAddress 192.0.2.1:10000+10\n\nThis sets the IP address to the IPv4 address of 192.0.2.1\nThere are 11 valid ports for this range:  10000-10010\nIPv6-only sites will not be reachable.  Only IPv4 sites will be contacted.\n\n  ProxyBindAddress [2001:df8::1]:49151+9\n\nThis sets the IP address to the IPv6 address of 2001:df8::1\nThere are 10 valid ports for this range:  49151-49160\nIPv4-only sites will not be reachable.  Only IPv6 sites will be contacted.\n\n  ProxyBindAddress localhost\n\nThis sets the IP address to the IPv6 address of ::1 and the IPv4 address to 127.0.0.1 (assuming DNS records are set for both IP versions).  The operating system chooses the outbound port to use.  Both IPv4 and IPv6 sites are reachable.  However, as the loopback address is restricted, only sites on the same physical host can be reached.\n\nNotes:\nIn the current implementation, it is not possible to specify separate port\nranges for different addresses or address families.  It is also considered an\nerror to specify an interface with an IPv6 address literal (\"%\" parameter).  Specifying port 0 with a range is invalid.  Specifying an address literal also locks the proxy server into the address family the literal belongs to.  Therefore, only a hostname produces an address family independent assignment assuming that both DNS A (IPv4) and AAAA (IPv6) records exist for the name.  Internally, not specifying the command at all actually skips any attempt to bind the source address and port of the outbound request (the default behavior before this command was added).  However, explicitly using the command with the unspecified address will cause address and port binding, even if the result turns out to be the same action as if the command were unspecified (i.e. port also 0).  Using the IPv4 unspecified address (\"0.0.0.0\") will force IPv4-only connections, and similarly with IPv6 (\"::\" forces IPv6 only).\n\nWhere a non-zero port value is specified, a range value less than the number of available workers (or child processes for non-threaded servers) may yield connection failures when all ports in the range are in use, even when there are available worker threads/processes.  Therefore, the range value should equal or exceed the maximum possible number of proxy workers.\n\nApache Hackers' note:\nThis code appears to be address family independent.  Therefore, if address family data other than IPv4 and IPv6 are returned from apr_parse_addr_port(), and such other address family data are accepted by bind_to_addr(), other address families may work.  The code only attempts binding where both the source and destination have the SAME address family.  If the source and destination have no common address family, \"DECLINED\" is returned.", "id": 118779, "time": "2008-07-17T14:11:04Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-07-17T14:11:04Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": 22278, "bug_id": 45405, "text": "Created attachment 22278\nUpdated patch correcting the mistakes :)\n\n>\"apr_pcalloc(p, sizeof(proxy_bind_addr))\"\n>Do we know that this will never return NULL (i.e. \"out of memory\")?\n-The pool will call abort_fn (system abort set in main.c unless overridden)\nbefore returning null. This and the fact that we are allocating memory during configuration reading phase (i.e the pool is from conf rather than a custom pool) assures us that apache will exit rather than give us null for this pool.\n\n>Allocated memory is zeroed. \n-apr_pcalloc is just defined as apr_palloc + memset in apr_pools.h", "id": 118796, "time": "2008-07-18T02:25:30Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-07-18T02:25:30Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 45405, "is_private": false, "text": "Created attachment 22283\nChanges suggested applied.", "id": 118833, "time": "2008-07-18T12:08:25Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-07-18T12:08:25Z", "attachment_id": 22283}, {"count": 7, "tags": [], "bug_id": 45405, "attachment_id": null, "is_private": false, "id": 118834, "time": "2008-07-18T12:23:59Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-07-18T12:23:59Z", "text": "I noted two problems:\n\n1)  Error:  Change to how we parsed \"range\":  By not bumping by one in the parser as we used to do, we caused a potential division by zero at the modulo division in bind_to_addr().  Revert condition in for-loop, bump by one in the parser, and adjust boundary tests, syslog warning, and set range = 1 where user omits it.\n\n2)  Performance issue -- Rotating across the port range on different calls to bind_to_addr():  As is, we seem to be starting each subsequent search for a port at the port after we started the last search.  The adjustment I proposed starts the search at the port after where we ENDED the last search.  There seemed little point re-checking FIRST ports we skipped last call, as opposed to checking ports that we might not have checked last time.  If we had checked them all last time, it doesn't matter where we start.\n\nAlso noted:  Setting \"idx\" = \"i + 1\" doesn't necessarily rotate in the matter intended.  It could also set \"idx\" == \"range\", but idx implicitly has a valuation range of 0...(range -1).  As we use it with modulo arithmetic, we got lucky and properly handled exceeding the maximum value.  I think this also meant that \"idx\" on calls after the first would NEVER be zero and therefore the first port might have been selected less often than the round-robin we intended.\n\nI chose not to invalidate the previous updated patch as I have NOT tested my suggestion with corrections above applied."}, {"count": 8, "tags": [], "text": "Created attachment 22293\nA tiny ruby test file to simulate binding ports\n\nRun this as ruby ./binder.rb,\nThis is the proposed (slightly changed from your patch) rotation scheme,\nThe logic in each function is same as in apache module.\nI will post the patch as soon as testing is complete.", "is_private": false, "bug_id": 45405, "id": 118875, "time": "2008-07-21T08:11:24Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-07-21T08:11:24Z", "attachment_id": 22293}, {"count": 9, "tags": [], "text": "Created attachment 22296\nupdated patch\n\nThe updated patch (Using the same rotation logic as in the ruby test file)\n\nThe configuration I used to test was:\n \nProxyRequests On\nProxyVia on\n\n<Proxy http://webproxy.india.sun.com>\n    Allow from all\n    ProxySet bind=agneyam.india.sun.com:4040+10\n</Proxy>\n\n<Proxy http://vault.red.iplanet.com>\n    Allow from all\n    ProxySet bind=agneyam.india.sun.com:3030+10\n</Proxy>\n\n\nProxyBindAddress agneyam.india.sun.com:9090+10", "is_private": false, "bug_id": 45405, "id": 118890, "time": "2008-07-22T00:02:42Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-07-22T00:02:42Z", "attachment_id": 22296}, {"count": 10, "tags": [], "text": "I believe you missed a couple of points that I made in last suggested patch.  These do not affect the outcome but do affect efficiency:\n\n1)  Bind_to_addr() \"const int range = bind->range + 1;\":  This means that it will have to add one for every try per address family to bind to a port in the range.  I incremented the value in the parser because that is one exactly ONCE, not once per attempt to bind.  It repeats a fixed operation over and over which only need be done once forever (until reconfigured).\n\n2)  Bind_to_addr() \"bind->idx = idx + i + 1;\":  Technically incorrect.  \"idx\" is defined to have values 0...(range-1), and this code can set \"idx\" to equal 2*range-1 or MORE.  The only reason the code works is the modulo arithimetic on line 2278.  Note that an optimizing compiler will realize that \"idx\" remains equal to \"bind->idx\" and thus compile this as \"bind->idx += i + 1;\".  I still think that this should be \"bind->idx = (idx + i + 1) % range;\" OR \"bind->idx = (port - start + 1) % range;\" (same result but perhaps earier to comprehend for someone not familiar with the code) to keep the variable inside our defined limits for it.\n\n3)  New point:  parse_bind_address().  Since we have a \"struct proxy_bind_addr\", we don't need to pass by reference three structure elements.  We could pass the address to the structure itself instead.  This also allows us to set \"bind->idx=0\" in one place -- the parser, not two as we do now, and should anything else call the parser in the future, then the value won't be forgotten.", "attachment_id": null, "id": 118911, "creator": "software+apache-httpd@kd6lvw.ampr.org", "time": "2008-07-22T11:55:41Z", "bug_id": 45405, "creation_time": "2008-07-22T11:55:41Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 45405, "text": "One last thing I noted:  parse_bind_address()\n- Should explicitly return 0 upon success.", "id": 118913, "time": "2008-07-22T12:01:04Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-07-22T12:01:04Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": 22300, "bug_id": 45405, "text": "Created attachment 22300\nupdated patch\n\n1)  Bind_to_addr() \"const int range = bind->range + 1;\":  \n-agreed\n\n2)  Bind_to_addr() \"bind->idx = idx + i + 1;\":  Technically incorrect.\n-agreed\n\n3) proxy_bind_addr\", We could pass the address to the structure \n- done\n\nOne caveat is that if the range defined is lesser than the number of workers\navailable, apache will start to return 404 after the range is exhausted. This is because the workers keep the backend connection open even after the connection completes. This causes a newly requested worker to not get a free port. (If the number of workers is lower than range, one of the workers currently holding the open connection will be used for the connection)\n\nHow ever, I dont see a way to check this during configuration time. (the number of workers may be modified after the proxy bind directives are run.)", "id": 118919, "time": "2008-07-22T23:40:24Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-07-22T23:40:24Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 45405, "attachment_id": 22309, "id": 118959, "time": "2008-07-23T14:59:18Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-07-23T14:59:18Z", "is_private": false, "text": "Created attachment 22309\nUpdated patch\n\nUpdated patch - Cosmetic issues only - functionality not broken:\n\nChanges:\n+++ modules/proxy/proxy_util.c\n@@ -2349,6 +2374,24 @@\n...\n+                ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"proxy: %s: can not bind to %s:%u+%u\",\n+                        proxy_function,bind->addr, bind->port, bind->range, NULL);\n+                return DECLINED;\n\n=>   ..., bind->range - 1, NULL);\n\nInternally, it's one more than the admin specified in the configuration, so we have to subtract one to get the original value that was human-specified.\n\n\nComment in parser:\n+    * we dont accept a range with out a port either.\nwithout is one word in English.\n\nAdded two additional comment lines.\n\n\nI believe we're done.  I have not actually tested the patch."}, {"count": 14, "tags": [], "text": "Request for review posted to developers mailing list today.", "attachment_id": null, "id": 121885, "creator": "software+apache-httpd@kd6lvw.ampr.org", "time": "2008-10-26T13:55:19Z", "bug_id": 45405, "creation_time": "2008-10-26T13:55:19Z", "is_private": false}, {"count": 15, "tags": [], "text": "BUMP(after 2 years).  The patch is done, but not picked up by the HTTPD trunk.  Is there anything else that need be done?", "is_private": false, "bug_id": 45405, "id": 140831, "time": "2010-10-19T13:59:25Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2010-10-19T13:59:25Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 45405, "is_private": false, "count": 16, "id": 141764, "time": "2010-11-17T10:03:00Z", "creator": "i.galic@brainsware.org", "creation_time": "2010-11-17T10:03:00Z", "text": "(In reply to comment #15)\n> Is there anything else that need be done?\nIt's quite good practice to also post to dev@"}, {"count": 17, "tags": [], "text": "RE - Comment #16:  Note that I did exactly that <B>two years ago</B> (25 months) as noted by comment #14.", "is_private": false, "id": 141774, "creator": "software+apache-httpd@kd6lvw.ampr.org", "time": "2010-11-17T14:22:50Z", "bug_id": 45405, "creation_time": "2010-11-17T14:22:50Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 45405, "is_private": false, "text": "\nsurprisingly nobody answers, although I think it's a great piece of code which allows stronger firewall DMZ/MZ rules.\n\nthe associated documentation is clear, and the exchanges show the code quality has been studied thoroughly, so I don't see any reason to stay away from the trunk.\n\nis there someone thinking this feature could create a major regression or performance drop ?  (I've not tested it)", "id": 141795, "time": "2010-11-18T06:43:48Z", "creator": "egarreau@gmail.com", "creation_time": "2010-11-18T06:43:48Z", "attachment_id": null}, {"count": 19, "attachment_id": null, "bug_id": 45405, "is_private": false, "id": 141816, "time": "2010-11-18T20:51:58Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2010-11-18T20:51:58Z", "tags": [], "text": "I've been running it as a patch to my local copy of httpd 2.2.17 and have yet to notice any problems.  The machine is on an IPv4 /29 and virtually-hosts 5 IP addresses, and I do confirm that the outbound address I picked is not the default that the OS would pick - so I know it works.  My proxy function listens only on the \"localhost\" addresses (I have IPv4+IPv6), so there's little security risk for me."}, {"count": 20, "tags": [], "bug_id": 45405, "is_private": false, "text": "A simpler variant of this has already been committed some time ago, see PR 29404 and r1034916. Definitely still missing is documentation and support for ProxySet.\n\nSelecting a port range is also not supported, but frankly I don't see the value of that.", "id": 147507, "time": "2011-06-25T20:52:26Z", "creator": "sf@sfritsch.de", "creation_time": "2011-06-25T20:52:26Z", "attachment_id": null}, {"count": 21, "tags": [], "text": "The value of selecting the port range is that it can be pre-determined and/or reserved in advance and thus programmed into a firewall.  Some people prefer stricter control than others.  Some may want to reserve other ranges for other programs/services and thus need to tell apache to avoid such.\n\nAs far as documentation goes, you're the first to ask for it formally.  I'll see if I can generate such during July.  It won't be substantially different that what was presented in text except for the HTML tags that will be added and a diff file generated.\n\nNote that this proposal predated the \"simpler one\" committed by two years (July 2008 vs. November 2010, but opened in 2004).  I'm supposed to know that someone came along, opened a bug in parallel, and did the same work when after 4 years, it still had not been committed -- as opposed to abandoned?  Regardless, it was [first] propsoed against Apache version 1 where this approach started with version 2 and ignored 1.  Also note that this version is more versitile - in that the address/port range may differ per worker or proxied target, not constant across all proxied connections.", "is_private": false, "id": 147508, "creator": "software+apache-httpd@kd6lvw.ampr.org", "time": "2011-06-25T22:02:25Z", "bug_id": 45405, "creation_time": "2011-06-25T22:02:25Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 45405, "is_private": false, "count": 22, "id": 147537, "time": "2011-06-27T21:11:40Z", "creator": "sf@sfritsch.de", "creation_time": "2011-06-27T21:11:40Z", "text": "(In reply to comment #21)\nSorry, my comment was merely meant to document the current status, because I wanted to apply your patch and was surprised that some similar functionality was already present. I did not mean to imply that you should write the documentation or put any more work into your patch.\n\nI would have preferred if your more complete patch would have been applied in the first place. The per-target configuration is definitely something I want (that's what I meant with ProxySet). Reverting the patch from PR 29404 and applying this one is still a possibility, but I am not yet decided, yet."}, {"count": 23, "tags": [], "text": "Thank you - although I cannot take 100% of the credit.  This was a combination effort between two people.  I was more responsible for the concept, QA, debugging, and documentation, while \"Rahul\" wrote the alpha version (cf. bug 44806).\n\nWhat we need most is a proponent who can get this added to the trunk and to the production versions.  We've tried posting to the developers list, but no one seemed interested.\n\nOur version also accepts hostnames and IPv6 literals.  I don't think the other one does.  I also think it was commited ONLY to trunk and not to production versions, because I don't remember seeing it present in 2.2.19.", "attachment_id": null, "id": 147539, "creator": "software+apache-httpd@kd6lvw.ampr.org", "time": "2011-06-27T23:32:19Z", "bug_id": 45405, "creation_time": "2011-06-27T23:32:19Z", "is_private": false}, {"count": 24, "tags": [], "text": "Created attachment 27455\nUpdated patch - against httpd-2.2.20\n\nThe current patch has mismatches due to other things having been added to httpd.", "is_private": false, "id": 149012, "creator": "software+apache-httpd@kd6lvw.ampr.org", "time": "2011-09-03T06:18:25Z", "bug_id": 45405, "creation_time": "2011-09-03T06:18:25Z", "attachment_id": 27455}]
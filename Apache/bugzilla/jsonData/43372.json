[{"count": 0, "tags": [], "bug_id": 43372, "attachment_id": null, "id": 108101, "time": "2007-09-12T21:27:30Z", "creator": "sean@awesomeplay.com", "creation_time": "2007-09-12T21:27:30Z", "is_private": false, "text": "The documentation does not at all make clear that AddType will scan a file name\nfor an extension instead of using the end of the filename as the extension. \nThat is, the following directive:\n\nAddHandler x-httpd-php .php\n\nWill cause all of the following files to be marked as x-httpd-php files:\n\ntest.php\ntest.php.gz\ntest.php.html.gz\ntest.gz.php.html\ntest.php.jpg\ntest.php.txt\n\nIn some cases, this can result in a huge security hole when using AddHandler to\nregister handlers for PHP or other script/CGI engines.  Some distributions of\nApache are shipping with AddHandler directives for certain script engine modules\nwhere AddType directives should be used, resulting in security vulnerabilities\nfor applications that allow users to upload files and only using extension\nchecks (admittedly a fault in the application, but it's apparently common).\n\nThe documentation for AddHandler simply doesn't make it obvious that this will\noccur, which I believe is why many experienced Apache distribution maintainers\nand administrators are using AddHandler instead of AddType when they shouldn't be.\n\n(Note that I have filed bugs to alter the default configurations for the Apache\ndistributions I've found with this configuration error already.  This bug is for\na documentation enhancement, not for a change in any particular distribution's\ndfault configuration.)"}, {"count": 1, "tags": [], "bug_id": 43372, "text": "It appears you haven't read\nhttp://httpd.apache.org/docs/2.2/mod/mod_mime.html#multipleext\n(on the same page as the AddHandler docs)\nor\nhttp://httpd.apache.org/docs/2.2/mod/directive-dict.html#Syntax\n(linked directly from the AddHandler docs)\n\nAlso, AddType has exactly the same behavior and should NOT be used in place of\nAddHandler.\n\nBut I'll give you that, even though this is already well-documented, it is still\na moderately common user error. So I'll accept that it would be a good idea to\nexplicitly mention this behavior in the text of all the Add* directives.", "id": 108151, "time": "2007-09-13T07:49:09Z", "creator": "slive@apache.org", "creation_time": "2007-09-13T07:49:09Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 43372, "attachment_id": null, "id": 108157, "time": "2007-09-13T10:47:00Z", "creator": "slive@apache.org", "creation_time": "2007-09-13T10:47:00Z", "is_private": false, "text": "Fixed in docs."}, {"count": 3, "tags": [], "bug_id": 43372, "attachment_id": null, "id": 108178, "time": "2007-09-13T14:35:39Z", "creator": "sean@awesomeplay.com", "creation_time": "2007-09-13T14:35:39Z", "is_private": false, "text": "Yes, admittedly I didn't look hard enough.  I guess at least some vendors'\nApache distribution maintainers are as equally negligent in reading docs as I\nam.  :)\n\n\"Also, AddType has exactly the same behavior and should NOT be used in place of\nAddHandler.\"\n\nThis is not true so far as I can tell.  I've switched the two directives on the\nconfig in question and the behavior most definitetely did change.  I double\nchecked: the following file is executed by mod_php when using AddHandler, but is\nnot when using AddType:\n\ntest.php.jpg\n\nThe following is correctly executed in both configurations:\n\ntest.php"}, {"count": 4, "tags": [], "bug_id": 43372, "text": "That's only because when you have two extensions applying the same type of\nmeta-data (content-type in this case), the last one wins. But it doesn't avoid\nany security problems that might be caused by forgetting about multiple\nextensions, because test.php.foo would still be treated as a cgi script.\n\nSo please don't use AddType to set handlers. It causes many other problems.", "id": 108180, "time": "2007-09-13T17:21:08Z", "creator": "slive@apache.org", "creation_time": "2007-09-13T17:21:08Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 43372, "text": "What then is the correct way to ensure that only files with a particular final\nextension are handled by certain handler?\n\nThe multiple-extension documentation states what happens with multiple\nextensions, but doesn't really say how to fix such setups.  Even in a\nnon-security situation, things like phpDocumentor generate files with names like\nfoo.php.html that are always getting passed to mod_php on this vendor's config.\n I'd like to pass on to them the correct information for fixing the problem if\nAddType is not right.", "id": 108183, "time": "2007-09-13T18:47:13Z", "creator": "sean@awesomeplay.com", "creation_time": "2007-09-13T18:47:13Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "slive@apache.org", "attachment_id": null, "id": 108199, "time": "2007-09-14T06:23:52Z", "bug_id": 43372, "creation_time": "2007-09-14T06:23:52Z", "is_private": false, "text": "The correct solution is not to assume that only the last extension matters. Unix\nhas used multiple significant extensions for a long time; this is not an Apache\ninvention. (Other good solutions including only turning on php handler\nprocessing in places where it is really required, rather than turning it on\nglobally. It is usually easy enough to designate certain directories for php\nexecution and make sure that non-php files don't get put there.)\n\nBut if you really want a match-only-final-extension solution, I recently added\none here:\nhttp://httpd.apache.org/docs/2.2/mod/mod_mime.html#multipleext"}, {"count": 7, "tags": [], "creator": "sean@awesomeplay.com", "attachment_id": null, "id": 108212, "time": "2007-09-14T13:49:57Z", "bug_id": 43372, "creation_time": "2007-09-14T13:49:57Z", "is_private": false, "text": "Heh, so far as I'm concerned, the proper solution is to _never_ match on file\nextension when possible.  Unfortunately, too much software out there of the Perl\nand PHP varieties don't do that.  :/\n\nIt seems that this is frequently believed by other distributions.  I've checked\nthe configurations on a number of servers, and most Linux distributions, Apache\ncontrol panels, and a few other custom distributions of Apache all are using\nAddType instead of AddHandler.  What problems could that cause?  These systems\nseem to work great, but I'd like to understand things a bit better.\n\nBy the way, thanks for explaining all of this and updating the docs to be more\nexplicit.  You rock."}, {"count": 8, "attachment_id": null, "bug_id": 43372, "is_private": false, "id": 108228, "time": "2007-09-15T07:28:26Z", "creator": "slive@apache.org", "creation_time": "2007-09-15T07:28:26Z", "tags": [], "text": "AddType will mess up any module that expects to be able to act on the real\ncontent-type of a resource, rather than the \"magic\" type used for activating\nhandlers. This includes at least mod_negotiation and mod_security.\n\nThe error is so widespread because php's docs show AddType. That has long ago\nbeen reported as a bug in their bug database, but it has never been fixed."}, {"count": 9, "tags": [], "text": "Ah.  I'd warrant that's because of the difficulty of ensuring that only the last\nextension is used for invoking a handler.  Your solution works, but I wonder if\nmaybe it would just be simpler (especially in terms of documenting behavior) to\nadd a directive that does the same thing, or modifying AddHandler to somehow be\nable to specify that only the last extension should be used.  I think people\nwill always go for the simplest configuration directive that works, so if it\ncomes down to the file matching plus sethandler call vs something as simple as\nAddType, people will go for the latter.\n\nHate to say it, but the multi-extension behavior really is just not what most\npeople want with CGI-based handlers, and the behavior that people want (and is\nsecure and doesn't break anything else) is what Apache should make the easiest\nto configure.\n\nJust adding a single directive that combines the FilesMatch functionality with\nthe SetHandler behavior would go a long way towards fixing commonly broken\nsetups, perhaps.  Something like:\n\nSetFileHandler x-foo \\.foo$\n\nDuplicate functionality isn't usually a good thing, but if you're really having\nthat many problems with configurations in the wild (which definitely seems to be\nthe case), I'd say it's safe to assume the current mechanisms are just too obtuse.", "is_private": false, "bug_id": 43372, "id": 108232, "time": "2007-09-15T15:15:43Z", "creator": "sean@awesomeplay.com", "creation_time": "2007-09-15T15:15:43Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 7617, "text": "This is a repost of a bug that I reported to dev@httpd.apache.org list in 2001. \nSince that forum is usually primarily concerned with development of Apache 2, I \nam open this as a Bugzilla bug. The bug never made it into the former Apache \nbugtracking system, although it did have some similarities to some (VERY old) \nexisting bug reports for various architectures.\n\nThere is an apparent race condition in Apache 1.3.x CGI handling which results \nin occasional unnecessary 3-second delays resulting from a pause between when a \nCGI child process closes it output pipe and when that process subsequently \nexits. Under normal circumstances, it appears that only Solaris x86 is majorly \naffected.\n\nSpecifically, the code in mod_cgi.c reads from its child process until the \nchild process breaks the pipe. The cleanup code in alloc.c then calls waitpid() \nwith WNOHANG to check to see if its child process has died; if its pid is not \nwaiting, Apache assumes that the process has hung. It sends a SIGTERM, waits 3 \nseconds, then sends a SIGKILL. The relevant code is in free_proc_chain() in \nalloc.c.\n\nThe former assumption (if the child pid is not waiting to be reaped, the child \nprocess must have hung and should be killed) appears to be erroneous on at \nleast some configurations. Specifically, imagine that the CGI child process \nexits 10ms after the cleanup code in alloc.c is run. In this case, the Apache \nprocess sleeps 3 seconds, when really it didn't need to.\n\nThis problem is only client-visible with HTTP/1.1 keep-alive, Apache running as \na single process, or bad luck where the client talks to the same child more \nthan once. The user-visible symptom is then a 3-second delay following a CGI \nrequest, before the next request is serviced.\n\nTo try to reproduce the problem:\n\n    * Build Apache \"out of the box\" with a straight configure\n\n    * Enable .cgi processing. Here is the diff between the default config\n      file and the one with .cgi processing enabled:\n\n          317c317\n          <     Options Indexes FollowSymLinks MultiViews\n          ---\n          >     Options Indexes FollowSymLinks MultiViews ExecCGI\n          784c784\n          <     #AddHandler cgi-script .cgi\n          ---\n          >     AddHandler cgi-script .cgi\n\n    * Put a test CGI under the default DocumentRoot. Here is one that\n      explicitly triggers the bug:\n\n          #!/usr/local/bin/perl\n          # break.cgi - triggers the 3-second delay on any system\n          print \"Content-Type: text/plain\\n\\n\";\n          print \"Hello, world.\\n\";\n          close STDOUT;\n          sleep 1;\n\n      And here is one that should NOT trigger the bug purposely, but still\n      exhibits problems on our Solaris x86 systems:\n\n          #!/usr/local/bin/perl\n          # test.cgi - on Solaris x86, sometimes exhibits 3-second delay\n          print \"Content-Type: text/plain\\n\\n\";\n          print \"Hello, world.\\n\";\n\n    * Connect to the HTTP server via telnet, and make a Keep-Alive request.\n      Repeat the request after getting a response. With break.cgi, you should\n      see a 3-second delay after every response. With test.cgi on an affected\n      system, the 3-second delay occurs regularly but sporadically.\n\nOn Solaris x86 on a dual-processor box, we see this behavior perhaps 10-20% of \nthe time for any particular child (using the test.cgi case above). On most \nother systems we tested, you have to explicitly try to trigger the bug (for \nexample, using the break.cgi above).\n\nWe're not sure why Solaris x86 exhibits the delay even without a forced delay \nbetween pipe closing and process exit. Perhaps Solaris is doing some cleanup \nthat Linux is not, or there is some child reaping issue with the multiple \nprocessors.\n\nHere are the configurations we tested. Patched Apaches (with mod_perl or \nmod_ssl capabilities) had the same behaviors as straight out-of-the-box \nconfigurations; having DSOs enabled was likewise irrelevant.\n\n    * Solaris x86, dual processor Intel boxes, Apache 1.3.9, 1.3.1[247], 1.3.24\n        * On Apache 1.3.14, mod_perl and mod_ssl and non-DSO variants\n        * All configurations display sporadic 3-second CGI delays\n          even in a simple Hello, world CGI.\n    * Solaris on a single processor Sparc box, Apache 1.3.12, 1.3.24;\n      Linux, single processor Intel boxes, Apache 1.3.12, 1.3.14;\n      FreeBSD, dual processor Intel box, Apache 1.3.12;\n      OpenBSD, single process Intel box, Apache 1.3.12\n        * Without explicitly closing STDOUT, the bug doesn't appear,\n          but if you close STDOUT and do really anything at all\n          (including just a timing loop), the bug appears\n\nI will attach my test script, a simple Perl script that opens a socket \nconnection to a webserver and does repeated HTTP/1.1 Keep-Alive requests, \ntiming each trial, to this bug. It vastly simplifies the last step in the repro \ncase above.\n\nThis bug may be the same as PR 6961 (repeated requests for a simple cgi invoke \ndelay of Apache) and is related loosely to PR 6226 (closing STDOUT doesn't end \nsession to allow background processing of code). I also originally sent an e-\nmail to dev@httpd.apache.org about this, which came up with a couple followups. \nThe URL to that in the archive is here:\n\n    http://groups.yahoo.com/group/new-httpd/message/19853\n\nThere was a very short discussion (apparently this problem has a bit of a \nhistory!) but no resolution.", "id": 12500, "time": "2002-03-29T19:58:37Z", "creator": "andrew@tellme.com", "creation_time": "2002-03-29T19:58:37Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "andrew@tellme.com", "is_private": false, "id": 12504, "creation_time": "2002-03-29T20:40:15Z", "time": "2002-03-29T20:40:15Z", "bug_id": 7617, "text": "Created attachment 1445\nPerl script which loops doing timed Keep-Alive HTTP requests", "attachment_id": 1445}, {"count": 2, "tags": [], "bug_id": 7617, "text": "I am encountering this same behavior running Apache 1.3.26 on Red Hat Linux 7.3.\nThis behavior also occured while running 2.0.36 on Red Hat Linux 7.3.\n\nMy access log reports a 3 second delay between a block of requests and the last\nrequest.  This only occurs when a CGI is involved.  For example,\n\n127.0.0.1 - - [08/Jul/2002:11:40:45 -0500] \"GET /cgi-bin/script.cgi HTTP/1.1\"\n200 4212\n127.0.0.1 - - [08/Jul/2002:11:40:45 -0500] \"GET /style.css HTTP/1.1\" 304 -\n127.0.0.1 - - [08/Jul/2002:11:40:45 -0500] \"GET /new.gif HTTP/1.1\" 304 -\n127.0.0.1 - - [08/Jul/2002:11:40:45 -0500] \"GET /resubmit.gif HTTP/1.1\" 304 -\n127.0.0.1 - - [08/Jul/2002:11:40:45 -0500] \"GET /reqmod.gif HTTP/1.1\" 304 -\n127.0.0.1 - - [08/Jul/2002:11:40:45 -0500] \"GET /appr.gif HTTP/1.1\" 304 -\n127.0.0.1 - - [08/Jul/2002:11:40:45 -0500] \"GET /disappr.gif HTTP/1.1\" 304 -\n127.0.0.1 - - [08/Jul/2002:11:40:48 -0500] \"GET /classifiedFooter.js HTTP/1.1\" 304 -\n\nEven though all non-CGI documents requested are 304s (Not Modified), there is\nstill a 3 second delay on the last document.  I've tried using several different\nbrowsers to access the page and the behavior is consistent.", "id": 19123, "time": "2002-07-08T16:59:32Z", "creator": "Anthony_Thomas_J@cat.com", "creation_time": "2002-07-08T16:59:32Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 7617, "text": "Kai Risku posted a patch for Apache 2.0.40 to fix this problem. I haven't \ntested it yet, but I will take a look. TJ, you may want to file a separate bug \nfor the Apache httpd-2.0 product so the right set of developers see it (I \nwould, but I haven't replicated the problem on 2.0 yet since we don't use 2.0 \nin production and don't have many CGIs in any case). Here is the link to the \nmessage with the patch:\n\n    http://groups.yahoo.com/group/new-httpd/message/40597\n\nYou may also want to mention Linux in the bug since it's been replicated twice \non Linux now. I'd also be curious as to the hardware configuration of the boxes \nthat this behavior shows up on. Are they dual-CPU?", "id": 24963, "time": "2002-10-21T21:46:10Z", "creator": "andrew@tellme.com", "creation_time": "2002-10-21T21:46:10Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 7617, "text": "I think the suggestion from Mr Risku to poll at .1 second intervals is unfortunately not good enough, if you do a lot of request in a short time (which would be the reason for using Keep-Alive at all), even a 100 ms delay on each request is noticeable. What I have done to solve the problem for us is simply to remove both the 3-sec waiting and the (in our setting) unnecessary killing from alloc.c. Perhaps this could lead to problems in other cases. Anyway, I get the problem on both 1.3 and 2.0 on a standard Compaq computer with just one processor running Linux 7.3. (7.2 and earlier did not trigger the problem).  >     //if (need_timeout) >     //sleep(3);  >       //if (p->kill_how == kill_after_timeout) >       //kill(p->pid, SIGKILL);  ", "id": 24979, "time": "2002-10-22T08:26:17Z", "creator": "bo@kase.se", "creation_time": "2002-10-22T08:26:17Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 7617, "text": "I agree with Bengdt.  The problem lies more fundamentally with how keep-alives\nare being dealt with.  The cost of using keep-alives in this situation can be\nquite an annoyance.  I also used a similiar solution, except I only changed the\nsleep(3); to sleep(0);.  Those are the ones that cause the problem in my mind,\nand I don't have a heavy enough load on my machine to warrant anything else.  My\nmachine is a a 1GHz, single process machine with 256 MB RAM running RH 7.3.  I\nam essentially the only user of the machine besides for occasional application\ntesting which occurs. 1.3.27 is still producing this bug.", "id": 25127, "time": "2002-10-24T13:36:19Z", "creator": "Anthony_Thomas_J@cat.com", "creation_time": "2002-10-24T13:36:19Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 7617, "attachment_id": null, "text": "A few random thoughts...\n\nDoes \"SetEnv nokeepalive\" inside container for CGI directory help?\n\n---/---\n\nNote that mod_cgi already plays a game to avoid the possibility of delay\nwhen the CGI is run as a subrequest.  See the comment, and the pool\npassed to ap_bspawn_child():\n\n    /*\n     * we spawn out of r->main if it's there so that we can avoid\n     * waiting for free_proc_chain to cleanup in the middle of an\n     * SSI request -djg\n     */\n    if (!ap_bspawn_child(r->main ? r->main->pool : r->pool, cgi_child,\n                         (void *) &cld, kill_after_timeout,\n                         &script_out, &script_in, &script_err)) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, r,\n                    \"couldn't spawn child process: %s\", r->filename);\n        return HTTP_INTERNAL_SERVER_ERROR;\n    }\n\nIf the pool were r->connection->pool, the cleanup (and possible sleeping)\nwouldn't happen until a point where it wouldn't hold up output for the client,\nbut on the other hand you could have undesired storage growth if many\nCGIs were run on the same connection. You'd need to tune MaxKeepAliveRequests\naccordingly.\n\n---/---\n\nAnother possible kludge:\n\nsave the CGI process pid (retcode from ap_bspawn_child()), then after the \ncall \"ap_send_fb(script_in, r)\" to send the output of the CGI, do this:\n\n  if (kill(saved_pid, 0) == 0) { /* child process still alive */\n    ap_rflush(r);  /* flush any held output to the client before we\n                    * risk waiting for the CGI process to exit\n                    */\n  }\n\n--/--\n\nIt might be useful to change free_proc_change() to sleep first for\n300ms or so instead of 3 seconds.  But it shouldn't start sending\nsignals any sooner than the current code does.  It just should be\nable to reap status sooner.\n", "id": 25130, "time": "2002-10-24T14:14:46Z", "creator": "trawick@apache.org", "creation_time": "2002-10-24T14:14:46Z", "is_private": false}, {"count": 7, "tags": [], "creator": "bo@kase.se", "attachment_id": null, "id": 25932, "time": "2002-11-08T14:14:14Z", "bug_id": 7617, "creation_time": "2002-11-08T14:14:14Z", "is_private": false, "text": "I don't know why this bug is not being considered. I now try to post it as a\nLinux/Apache 2.0 bug, since it is to be found there too, in case that will draw\nmore interest. I would think it is a major problem that Apache can not run\ncgi-scripts with keep-alive, and I would like our technical department to be\nable to upgrade our apache installations (for security fixes etc) without me\nhaving to patch it first. I am not sufficiently aware of the purpose of the\nproblematic code to propose a final solution - in my own case, it is quite OK to\njust throw it out, but I would think it serves some purpose - perhaps to stop\nfaulty cgi-scripts from running endlessly. Perhaps it could be specified in the\nconfiguration file whether this action is wanted or not."}, {"count": 8, "tags": [], "bug_id": 7617, "attachment_id": null, "id": 25939, "time": "2002-11-08T14:27:24Z", "creator": "trawick@apache.org", "creation_time": "2002-11-08T14:27:24Z", "is_private": false, "text": "A colleague of mine is working on this for Apache 1.3.  I expect that\nthis will be resolved in Apache 2.0 fairly soon too.\n"}, {"count": 9, "tags": [], "text": "*** Bug 13049 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 26011, "creator": "wrowe@apache.org", "time": "2002-11-09T17:56:29Z", "bug_id": 7617, "creation_time": "2002-11-09T17:56:29Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 7617, "attachment_id": null, "id": 26119, "time": "2002-11-12T04:32:47Z", "creator": "stoddard@apache.org", "creation_time": "2002-11-12T04:32:47Z", "is_private": false, "text": "A fix has been committed to APR and should be available with APR 0.9.2 (Apache \n2.0.44)"}]
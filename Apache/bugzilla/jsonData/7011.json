[{"attachment_id": null, "tags": [], "bug_id": 7011, "is_private": false, "count": 0, "id": 11629, "time": "2002-03-10T17:29:46Z", "creator": "poi-support@buni.org", "creation_time": "2002-03-10T17:29:46Z", "text": "While inconsistancy in the documentation is okay in order to accomidate those\nwho dislike abbreviations and as an enigmatic marketing ploy \"the project with\ntwo names that are spelled the same\"...  Inconsistant capitalization in\nclassfile names is a pain.  For example Sun's URL vs Url stuff... YUCK.  So I\nput it that PoiFSConstants should be capitalized or everywhere else in POIFS\nshouldn't be...   :-p\n\n(org.apache.poi.poifs.common.PoiFSConstants)"}, {"count": 1, "tags": [], "text": "cvs server: Diffing .\ncvs server: Diffing build\ncvs server: Diffing legal\ncvs server: Diffing lib\ncvs server: Diffing lib/core\ncvs server: Diffing lib/optional\ncvs server: Diffing src\ncvs server: Diffing src/contrib\ncvs server: Diffing src/contrib/lib\ncvs server: Diffing src/contrib/src\ncvs server: Diffing src/contrib/src/org\ncvs server: Diffing src/contrib/src/org/apache\ncvs server: Diffing src/contrib/src/org/apache/poi\ncvs server: Diffing src/contrib/src/org/apache/poi/contrib\ncvs server: Diffing src/contrib/src/org/apache/poi/contrib/poibrowser\ncvs server: Diffing src/contrib/targets\ncvs server: Diffing src/documentation\ncvs server: Diffing src/documentation/images\ncvs server: Diffing src/documentation/stylesheets\ncvs server: Diffing src/documentation/stylesheets/printer_skin\ncvs server: Diffing src/documentation/xdocs\ncvs server: Diffing src/documentation/xdocs/dtd\ncvs server: Diffing src/documentation/xdocs/hdf\ncvs server: Diffing src/documentation/xdocs/hpsf\ncvs server: Diffing src/documentation/xdocs/hssf\ncvs server: Diffing src/documentation/xdocs/plan\ncvs server: Diffing src/documentation/xdocs/poifs\ncvs server: Diffing src/documentation/xdocs/poifs/html\ncvs server: Diffing src/documentation/xdocs/resolutions\ncvs server: Diffing src/documentation/xdocs/utils\ncvs server: Diffing src/examples\ncvs server: Diffing src/examples/src\ncvs server: Diffing src/examples/src/org\ncvs server: Diffing src/examples/src/org/apache\ncvs server: Diffing src/examples/src/org/apache/poi\ncvs server: Diffing src/examples/src/org/apache/poi/hssf\ncvs server: Diffing src/examples/src/org/apache/poi/hssf/usermodel\ncvs server: Diffing src/examples/src/org/apache/poi/hssf/usermodel/examples\ncvs server: Diffing src/java\ncvs server: Diffing src/java/org\ncvs server: Diffing src/java/org/apache\ncvs server: Diffing src/java/org/apache/poi\ncvs server: Diffing src/java/org/apache/poi/hdf\ncvs server: Diffing src/java/org/apache/poi/hpsf\ncvs server: Diffing src/java/org/apache/poi/hpsf/littleendian\ncvs server: Diffing src/java/org/apache/poi/hpsf/wellknown\ncvs server: Diffing src/java/org/apache/poi/hssf\ncvs server: Diffing src/java/org/apache/poi/hssf/dev\ncvs server: Diffing src/java/org/apache/poi/hssf/eventmodel\ncvs server: Diffing src/java/org/apache/poi/hssf/model\ncvs server: Diffing src/java/org/apache/poi/hssf/record\ncvs server: Diffing src/java/org/apache/poi/hssf/record/aggregates\ncvs server: Diffing src/java/org/apache/poi/hssf/record/formula\ncvs server: Diffing src/java/org/apache/poi/hssf/usermodel\ncvs server: Diffing src/java/org/apache/poi/hssf/util\ncvs server: Diffing src/java/org/apache/poi/poifs\ncvs server: Diffing src/java/org/apache/poi/poifs/common\nIndex: src/java/org/apache/poi/poifs/common/PoiFSConstants.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/common/PoiFSConstants.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 PoiFSConstants.java\n--- src/java/org/apache/poi/poifs/common/PoiFSConstants.java\t31 Jan 2002 \n02:23:44 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/common/PoiFSConstants.java\t14 Mar 2002 \n14:49:06 -0000\n@@ -61,11 +61,11 @@\n  * @author Marc Johnson (mjohnson at apache dot org)\n  */\n \n-public interface PoiFSConstants\n+public interface POIFSConstants\n {\n     public static final int BIG_BLOCK_SIZE = 0x0200;\n     public static final int END_OF_CHAIN   = -2;\n     public static final int PROPERTY_SIZE  = 0x0080;\n     public static final int UNUSED_BLOCK   = -1;\n-}   // end public interface PoiFSConstants;\n+}   // end public interface POIFSConstants;\n \ncvs server: Diffing src/java/org/apache/poi/poifs/dev\ncvs server: Diffing src/java/org/apache/poi/poifs/eventfilesystem\ncvs server: Diffing src/java/org/apache/poi/poifs/filesystem\nIndex: src/java/org/apache/poi/poifs/filesystem/POIFSDocument.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/filesystem/POIFSDocument.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 POIFSDocument.java\n--- src/java/org/apache/poi/poifs/filesystem/POIFSDocument.java\t31 Jan 2002 \n02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/filesystem/POIFSDocument.java\t14 Mar 2002 \n14:49:09 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.dev.POIFSViewable;\n import org.apache.poi.poifs.property.DocumentProperty;\n import org.apache.poi.poifs.property.Property;\n@@ -628,7 +628,7 @@\n                     writer.processPOIFSWriterEvent(\n                         new POIFSWriterEvent(dstream, path, name, size));\n                     dstream.writeFiller(countBlocks()\n-                                        * PoiFSConstants\n+                                        * POIFSConstants\n                                             .BIG_BLOCK_SIZE, DocumentBlock\n                                             .getFillByte());\n                 }\n@@ -654,8 +654,8 @@\n             {\n                 if (writer != null)\n                 {\n-                    rval = (size + PoiFSConstants.BIG_BLOCK_SIZE - 1)\n-                           / PoiFSConstants.BIG_BLOCK_SIZE;\n+                    rval = (size + POIFSConstants.BIG_BLOCK_SIZE - 1)\n+                           / POIFSConstants.BIG_BLOCK_SIZE;\n                 }\n                 else\n                 {\nIndex: src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 POIFSFileSystem.java\n--- src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java\t31 Jan \n2002 02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/filesystem/POIFSFileSystem.java\t14 Mar \n2002 14:49:11 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.dev.POIFSViewable;\n import org.apache.poi.poifs.property.DirectoryProperty;\n import org.apache.poi.poifs.property.DocumentProperty;\ncvs server: Diffing src/java/org/apache/poi/poifs/property\nIndex: src/java/org/apache/poi/poifs/property/Property.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/property/Property.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 Property.java\n--- src/java/org/apache/poi/poifs/property/Property.java\t31 Jan 2002 \n02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/property/Property.java\t14 Mar 2002 \n14:49:13 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.dev.POIFSViewable;\n import org.apache.poi.util.ByteField;\n import org.apache.poi.util.IntegerField;\n@@ -124,7 +124,7 @@\n \n     protected Property()\n     {\n-        _raw_data = new byte[ PoiFSConstants.PROPERTY_SIZE ];\n+        _raw_data = new byte[ POIFSConstants.PROPERTY_SIZE ];\n         Arrays.fill(_raw_data, _default_fill);\n         _name_size         = new ShortField(_name_size_offset);\n         _property_type     =\n@@ -160,9 +160,9 @@\n \n     protected Property(final int index, final byte [] array, final int offset)\n     {\n-        _raw_data = new byte[ PoiFSConstants.PROPERTY_SIZE ];\n+        _raw_data = new byte[ POIFSConstants.PROPERTY_SIZE ];\n         System.arraycopy(array, offset, _raw_data, 0,\n-                         PoiFSConstants.PROPERTY_SIZE);\n+                         POIFSConstants.PROPERTY_SIZE);\n         _name_size         = new ShortField(_name_size_offset, _raw_data);\n         _property_type     =\n             new ByteField(PropertyConstants.PROPERTY_TYPE_OFFSET, _raw_data);\nIndex: src/java/org/apache/poi/poifs/property/PropertyFactory.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/property/PropertyFactory.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 PropertyFactory.java\n--- src/java/org/apache/poi/poifs/property/PropertyFactory.java\t31 Jan 2002 \n02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/property/PropertyFactory.java\t14 Mar 2002 \n14:49:14 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.storage.ListManagedBlock;\n \n /**\n@@ -102,7 +102,7 @@\n         {\n             byte[] data           = blocks[ j ].getData();\n             int    property_count = data.length\n-                                    / PoiFSConstants.PROPERTY_SIZE;\n+                                    / POIFSConstants.PROPERTY_SIZE;\n             int    offset         = 0;\n \n             for (int k = 0; k < property_count; k++)\n@@ -130,7 +130,7 @@\n                         properties.add(null);\n                         break;\n                 }\n-                offset += PoiFSConstants.PROPERTY_SIZE;\n+                offset += POIFSConstants.PROPERTY_SIZE;\n             }\n         }\n         return properties;\nIndex: src/java/org/apache/poi/poifs/property/PropertyTable.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/property/PropertyTable.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 PropertyTable.java\n--- src/java/org/apache/poi/poifs/property/PropertyTable.java\t31 Jan 2002 \n02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/property/PropertyTable.java\t14 Mar 2002 \n14:49:15 -0000\n@@ -60,7 +60,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.filesystem.BATManaged;\n import org.apache.poi.poifs.storage.BlockWritable;\n import org.apache.poi.poifs.storage.PropertyBlock;\n@@ -88,7 +88,7 @@\n \n     public PropertyTable()\n     {\n-        _start_block = PoiFSConstants.END_OF_CHAIN;\n+        _start_block = POIFSConstants.END_OF_CHAIN;\n         _properties  = new ArrayList();\n         addProperty(new RootProperty());\n         _blocks = null;\n@@ -110,7 +110,7 @@\n                          final RawDataBlockList blockList)\n         throws IOException\n     {\n-        _start_block = PoiFSConstants.END_OF_CHAIN;\n+        _start_block = POIFSConstants.END_OF_CHAIN;\n         _blocks      = null;\n         _properties  =\n             PropertyFactory\nIndex: src/java/org/apache/poi/poifs/property/RootProperty.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/property/RootProperty.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 RootProperty.java\n--- src/java/org/apache/poi/poifs/property/RootProperty.java\t31 Jan 2002 \n02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/property/RootProperty.java\t14 Mar 2002 \n14:49:15 -0000\n@@ -59,7 +59,7 @@\n \n import java.io.IOException;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.storage.SmallDocumentBlock;\n \n /**\n@@ -83,7 +83,7 @@\n         // overrides\n         setNodeColor(_NODE_BLACK);\n         setPropertyType(PropertyConstants.ROOT_TYPE);\n-        setStartBlock(PoiFSConstants.END_OF_CHAIN);\n+        setStartBlock(POIFSConstants.END_OF_CHAIN);\n     }\n \n     /**\ncvs server: Diffing src/java/org/apache/poi/poifs/storage\nIndex: src/java/org/apache/poi/poifs/storage/BATBlock.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/BATBlock.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 BATBlock.java\n--- src/java/org/apache/poi/poifs/storage/BATBlock.java\t31 Jan 2002 02:23:45 -\n0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/BATBlock.java\t14 Mar 2002 14:49:16 -\n0000\n@@ -60,7 +60,7 @@\n \n import java.util.Arrays;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.IntegerField;\n import org.apache.poi.util.LittleEndian;\n import org.apache.poi.util.LittleEndianConsts;\n@@ -76,7 +76,7 @@\n     extends BigBlock\n {\n     private static final int  _entries_per_block      =\n-        PoiFSConstants.BIG_BLOCK_SIZE / LittleEndianConsts.INT_SIZE;\n+        POIFSConstants.BIG_BLOCK_SIZE / LittleEndianConsts.INT_SIZE;\n     private static final int  _entries_per_xbat_block = _entries_per_block\n                                                             - 1;\n     private static final int  _xbat_chain_offset      =\n@@ -91,7 +91,7 @@\n \n     private BATBlock()\n     {\n-        _data = new byte[ PoiFSConstants.BIG_BLOCK_SIZE ];\n+        _data = new byte[ POIFSConstants.BIG_BLOCK_SIZE ];\n         Arrays.fill(_data, _default_value);\n         _fields = new IntegerField[ _entries_per_block ];\n         int offset = 0;\n@@ -164,7 +164,7 @@\n             {\n                 blocks[ index ].setXBATChain(startBlock + index + 1);\n             }\n-            blocks[ index ].setXBATChain(PoiFSConstants.END_OF_CHAIN);\n+            blocks[ index ].setXBATChain(POIFSConstants.END_OF_CHAIN);\n         }\n         return blocks;\n     }\nIndex: src/java/org/apache/poi/poifs/storage/BlockAllocationTableReader.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/BlockAllocationTableReader.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 BlockAllocationTableReader.java\n--- src/java/org/apache/poi/poifs/storage/BlockAllocationTableReader.java\n\t31 Jan 2002 02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/BlockAllocationTableReader.java\n\t14 Mar 2002 14:49:17 -0000\n@@ -60,7 +60,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.IntList;\n import org.apache.poi.util.LittleEndian;\n import org.apache.poi.util.LittleEndianConsts;\n@@ -158,7 +158,7 @@\n                     offset                  += LittleEndianConsts.INT_SIZE;\n                 }\n                 chain_index = LittleEndian.getInt(data, chain_index_offset);\n-                if (chain_index == PoiFSConstants.END_OF_CHAIN)\n+                if (chain_index == POIFSConstants.END_OF_CHAIN)\n                 {\n                     break;\n                 }\n@@ -222,7 +222,7 @@\n         List blocks       = new ArrayList();\n         int  currentBlock = startBlock;\n \n-        while (currentBlock != PoiFSConstants.END_OF_CHAIN)\n+        while (currentBlock != POIFSConstants.END_OF_CHAIN)\n         {\n             blocks.add(blockList.remove(currentBlock));\n             currentBlock = _entries.get(currentBlock);\n@@ -261,7 +261,7 @@\n      * @param index of the current block\n      *\n      * @return index of the next block (may be\n-     *         PoiFSConstants.END_OF_CHAIN, indicating end of chain\n+     *         POIFSConstants.END_OF_CHAIN, indicating end of chain\n      *         (duh))\n      *\n      * @exception IOException if the current block is unused\n@@ -305,7 +305,7 @@\n             {\n                 int entry = LittleEndian.getInt(data, offset);\n \n-                if (entry == PoiFSConstants.UNUSED_BLOCK)\n+                if (entry == POIFSConstants.UNUSED_BLOCK)\n                 {\n                     raw_blocks.zap(_entries.size());\n                 }\nIndex: src/java/org/apache/poi/poifs/storage/BlockAllocationTableWriter.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/BlockAllocationTableWriter.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 BlockAllocationTableWriter.java\n--- src/java/org/apache/poi/poifs/storage/BlockAllocationTableWriter.java\n\t31 Jan 2002 02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/BlockAllocationTableWriter.java\n\t14 Mar 2002 14:49:18 -0000\n@@ -60,7 +60,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.filesystem.BATManaged;\n import org.apache.poi.util.IntList;\n import org.apache.poi.util.LittleEndian;\n@@ -95,7 +95,7 @@\n \n     public BlockAllocationTableWriter()\n     {\n-        _start_block = PoiFSConstants.END_OF_CHAIN;\n+        _start_block = POIFSConstants.END_OF_CHAIN;\n         _entries     = new IntList();\n         _blocks      = new BATBlock[ 0 ];\n     }\n@@ -162,7 +162,7 @@\n             {\n                 _entries.add(index++);\n             }\n-            _entries.add(PoiFSConstants.END_OF_CHAIN);\n+            _entries.add(POIFSConstants.END_OF_CHAIN);\n         }\n         return startBlock;\n     }\nIndex: src/java/org/apache/poi/poifs/storage/DocumentBlock.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/DocumentBlock.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 DocumentBlock.java\n--- src/java/org/apache/poi/poifs/storage/DocumentBlock.java\t31 Jan 2002 \n02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/DocumentBlock.java\t14 Mar 2002 \n14:49:19 -0000\n@@ -61,7 +61,7 @@\n \n import java.util.Arrays;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.IntegerField;\n import org.apache.poi.util.LittleEndian;\n import org.apache.poi.util.LittleEndianConsts;\n@@ -118,7 +118,7 @@\n \n     private DocumentBlock()\n     {\n-        _data = new byte[ PoiFSConstants.BIG_BLOCK_SIZE ];\n+        _data = new byte[ POIFSConstants.BIG_BLOCK_SIZE ];\n         Arrays.fill(_data, _default_value);\n     }\n \n@@ -141,7 +141,7 @@\n \n     public boolean partiallyRead()\n     {\n-        return _bytes_read != PoiFSConstants.BIG_BLOCK_SIZE;\n+        return _bytes_read != POIFSConstants.BIG_BLOCK_SIZE;\n     }\n \n     /**\n@@ -168,7 +168,7 @@\n                                            final int size)\n     {\n         DocumentBlock[] rval   =\n-            new DocumentBlock[ (size + PoiFSConstants.BIG_BLOCK_SIZE - 1) / \nPoiFSConstants.BIG_BLOCK_SIZE ];\n+            new DocumentBlock[ (size + POIFSConstants.BIG_BLOCK_SIZE - 1) / \nPOIFSConstants.BIG_BLOCK_SIZE ];\n         int             offset = 0;\n \n         for (int k = 0; k < rval.length; k++)\n@@ -176,14 +176,14 @@\n             rval[ k ] = new DocumentBlock();\n             if (offset < array.length)\n             {\n-                int length = Math.min(PoiFSConstants.BIG_BLOCK_SIZE,\n+                int length = Math.min(POIFSConstants.BIG_BLOCK_SIZE,\n                                       array.length - offset);\n \n                 System.arraycopy(array, offset, rval[ k ]._data, 0, length);\n-                if (length != PoiFSConstants.BIG_BLOCK_SIZE)\n+                if (length != POIFSConstants.BIG_BLOCK_SIZE)\n                 {\n                     Arrays.fill(rval[ k ]._data, length,\n-                                PoiFSConstants.BIG_BLOCK_SIZE,\n+                                POIFSConstants.BIG_BLOCK_SIZE,\n                                 _default_value);\n                 }\n             }\n@@ -191,7 +191,7 @@\n             {\n                 Arrays.fill(rval[ k ]._data, _default_value);\n             }\n-            offset += PoiFSConstants.BIG_BLOCK_SIZE;\n+            offset += POIFSConstants.BIG_BLOCK_SIZE;\n         }\n         return rval;\n     }\n@@ -207,10 +207,10 @@\n     public static void read(final DocumentBlock [] blocks,\n                             final byte [] buffer, final int offset)\n     {\n-        int firstBlockIndex  = offset / PoiFSConstants.BIG_BLOCK_SIZE;\n-        int firstBlockOffset = offset % PoiFSConstants.BIG_BLOCK_SIZE;\n+        int firstBlockIndex  = offset / POIFSConstants.BIG_BLOCK_SIZE;\n+        int firstBlockOffset = offset % POIFSConstants.BIG_BLOCK_SIZE;\n         int lastBlockIndex   = (offset + buffer.length - 1)\n-                               / PoiFSConstants.BIG_BLOCK_SIZE;\n+                               / POIFSConstants.BIG_BLOCK_SIZE;\n \n         if (firstBlockIndex == lastBlockIndex)\n         {\n@@ -223,14 +223,14 @@\n \n             System.arraycopy(blocks[ firstBlockIndex ]._data,\n                              firstBlockOffset, buffer, buffer_offset,\n-                             PoiFSConstants.BIG_BLOCK_SIZE\n+                             POIFSConstants.BIG_BLOCK_SIZE\n                              - firstBlockOffset);\n-            buffer_offset += PoiFSConstants.BIG_BLOCK_SIZE - firstBlockOffset;\n+            buffer_offset += POIFSConstants.BIG_BLOCK_SIZE - firstBlockOffset;\n             for (int j = firstBlockIndex + 1; j < lastBlockIndex; j++)\n             {\n                 System.arraycopy(blocks[ j ]._data, 0, buffer, buffer_offset,\n-                                 PoiFSConstants.BIG_BLOCK_SIZE);\n-                buffer_offset += PoiFSConstants.BIG_BLOCK_SIZE;\n+                                 POIFSConstants.BIG_BLOCK_SIZE);\n+                buffer_offset += POIFSConstants.BIG_BLOCK_SIZE;\n             }\n             System.arraycopy(blocks[ lastBlockIndex ]._data, 0, buffer,\n                              buffer_offset, buffer.length - buffer_offset);\nIndex: src/java/org/apache/poi/poifs/storage/HeaderBlockConstants.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/HeaderBlockConstants.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 HeaderBlockConstants.java\n--- src/java/org/apache/poi/poifs/storage/HeaderBlockConstants.java\t31 Jan \n2002 02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/HeaderBlockConstants.java\t14 Mar \n2002 14:49:19 -0000\n@@ -55,7 +55,7 @@\n \n package org.apache.poi.poifs.storage;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.IntegerField;\n import org.apache.poi.util.LittleEndian;\n import org.apache.poi.util.LittleEndianConsts;\n@@ -73,7 +73,7 @@\n     public static final long _signature             = 0xE11AB1A1E011CFD0L;\n     public static final int  _bat_array_offset      = 0x4c;\n     public static final int  _max_bats_in_header    =\n-        (PoiFSConstants.BIG_BLOCK_SIZE - _bat_array_offset)\n+        (POIFSConstants.BIG_BLOCK_SIZE - _bat_array_offset)\n         / LittleEndianConsts.INT_SIZE;\n \n     // useful offsets\nIndex: src/java/org/apache/poi/poifs/storage/HeaderBlockReader.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/HeaderBlockReader.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 HeaderBlockReader.java\n--- src/java/org/apache/poi/poifs/storage/HeaderBlockReader.java\t31 Jan \n2002 02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/HeaderBlockReader.java\t14 Mar \n2002 14:49:20 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.IntegerField;\n import org.apache.poi.util.LittleEndian;\n import org.apache.poi.util.LittleEndianConsts;\n@@ -103,17 +103,17 @@\n     public HeaderBlockReader(final InputStream stream)\n         throws IOException\n     {\n-        _data = new byte[ PoiFSConstants.BIG_BLOCK_SIZE ];\n+        _data = new byte[ POIFSConstants.BIG_BLOCK_SIZE ];\n         int byte_count = stream.read(_data);\n \n-        if (byte_count != PoiFSConstants.BIG_BLOCK_SIZE)\n+        if (byte_count != POIFSConstants.BIG_BLOCK_SIZE)\n         {\n             String type = \" byte\" + ((byte_count == 1) ? (\"\")\n                                                        : (\"s\"));\n \n             throw new IOException(\"Unable to read entire header; \"\n                                   + byte_count + type + \" read; expected \"\n-                                  + PoiFSConstants.BIG_BLOCK_SIZE + \" bytes\");\n+                                  + POIFSConstants.BIG_BLOCK_SIZE + \" bytes\");\n         }\n \n         // verify signature\nIndex: src/java/org/apache/poi/poifs/storage/HeaderBlockWriter.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/HeaderBlockWriter.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 HeaderBlockWriter.java\n--- src/java/org/apache/poi/poifs/storage/HeaderBlockWriter.java\t31 Jan \n2002 02:23:45 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/HeaderBlockWriter.java\t14 Mar \n2002 14:49:21 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.IntegerField;\n import org.apache.poi.util.LittleEndianConsts;\n import org.apache.poi.util.LongField;\n@@ -99,7 +99,7 @@\n \n     public HeaderBlockWriter()\n     {\n-        _data = new byte[ PoiFSConstants.BIG_BLOCK_SIZE ];\n+        _data = new byte[ POIFSConstants.BIG_BLOCK_SIZE ];\n         Arrays.fill(_data, _default_value);\n         new LongField(_signature_offset, _signature, _data);\n         new IntegerField(0x08, 0, _data);\n@@ -115,15 +115,15 @@\n         new IntegerField(0x28, 0, _data);\n         _bat_count      = new IntegerField(_bat_count_offset, 0, _data);\n         _property_start = new IntegerField(_property_start_offset,\n-                                           PoiFSConstants.END_OF_CHAIN,\n+                                           POIFSConstants.END_OF_CHAIN,\n                                            _data);\n         new IntegerField(0x34, 0, _data);\n         new IntegerField(0x38, 0x1000, _data);\n         _sbat_start = new IntegerField(_sbat_start_offset,\n-                                       PoiFSConstants.END_OF_CHAIN, _data);\n+                                       POIFSConstants.END_OF_CHAIN, _data);\n         new IntegerField(0x40, 1, _data);\n         _xbat_start = new IntegerField(_xbat_start_offset,\n-                                       PoiFSConstants.END_OF_CHAIN, _data);\n+                                       POIFSConstants.END_OF_CHAIN, _data);\n         _xbat_count = new IntegerField(_xbat_count_offset, 0, _data);\n     }\n \n@@ -170,7 +170,7 @@\n         else\n         {\n             rvalue = BATBlock.createXBATBlocks(new int[ 0 ], 0);\n-            _xbat_start.set(PoiFSConstants.END_OF_CHAIN, _data);\n+            _xbat_start.set(POIFSConstants.END_OF_CHAIN, _data);\n         }\n         _xbat_count.set(rvalue.length, _data);\n         return rvalue;\nIndex: src/java/org/apache/poi/poifs/storage/PropertyBlock.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/PropertyBlock.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 PropertyBlock.java\n--- src/java/org/apache/poi/poifs/storage/PropertyBlock.java\t31 Jan 2002 \n02:23:46 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/PropertyBlock.java\t14 Mar 2002 \n14:49:21 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.poifs.property.Property;\n import org.apache.poi.util.IntegerField;\n import org.apache.poi.util.LittleEndian;\n@@ -75,7 +75,7 @@\n     extends BigBlock\n {\n     private static final int _properties_per_block =\n-        PoiFSConstants.BIG_BLOCK_SIZE / PoiFSConstants.PROPERTY_SIZE;\n+        POIFSConstants.BIG_BLOCK_SIZE / POIFSConstants.PROPERTY_SIZE;\n     private Property[]       _properties;\n \n     /**\nIndex: src/java/org/apache/poi/poifs/storage/RawDataBlock.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/RawDataBlock.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 RawDataBlock.java\n--- src/java/org/apache/poi/poifs/storage/RawDataBlock.java\t31 Jan 2002 \n02:23:46 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/RawDataBlock.java\t14 Mar 2002 \n14:49:22 -0000\n@@ -55,7 +55,7 @@\n \n package org.apache.poi.poifs.storage;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n \n import java.io.*;\n \n@@ -83,21 +83,21 @@\n     public RawDataBlock(final InputStream stream)\n         throws IOException\n     {\n-        _data = new byte[ PoiFSConstants.BIG_BLOCK_SIZE ];\n+        _data = new byte[ POIFSConstants.BIG_BLOCK_SIZE ];\n         int count = stream.read(_data);\n \n         if (count == -1)\n         {\n             _eof = true;\n         }\n-        else if (count != PoiFSConstants.BIG_BLOCK_SIZE)\n+        else if (count != POIFSConstants.BIG_BLOCK_SIZE)\n         {\n             String type = \" byte\" + ((count == 1) ? (\"\")\n                                                   : (\"s\"));\n \n             throw new IOException(\"Unable to read entire block; \" + count\n                                   + type + \" read; expected \"\n-                                  + PoiFSConstants.BIG_BLOCK_SIZE + \" bytes\");\n+                                  + POIFSConstants.BIG_BLOCK_SIZE + \" bytes\");\n         }\n         else\n         {\nIndex: src/java/org/apache/poi/poifs/storage/SmallDocumentBlock.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/SmallDocumentBlock.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 SmallDocumentBlock.java\n--- src/java/org/apache/poi/poifs/storage/SmallDocumentBlock.java\t31 Jan \n2002 02:23:46 -0000\t1.1.1.1\n+++ src/java/org/apache/poi/poifs/storage/SmallDocumentBlock.java\t14 Mar \n2002 14:49:23 -0000\n@@ -59,7 +59,7 @@\n \n import java.util.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n \n /**\n  * Storage for documents that are too small to use regular\n@@ -75,7 +75,7 @@\n     private static final byte _default_fill         = ( byte ) 0xff;\n     private static final int  _block_size           = 64;\n     private static final int  _blocks_per_big_block =\n-        PoiFSConstants.BIG_BLOCK_SIZE / _block_size;\n+        POIFSConstants.BIG_BLOCK_SIZE / _block_size;\n \n     private SmallDocumentBlock(final byte [] data, final int index)\n     {\ncvs server: Diffing src/java/org/apache/poi/util\ncvs server: Diffing src/models\ncvs server: Diffing src/records\ncvs server: Diffing src/records/definitions\ncvs server: Diffing src/records/styles\ncvs server: Diffing src/resources\ncvs server: Diffing src/resources/devtools\ncvs server: Diffing src/resources/entities\ncvs server: Diffing src/resources/entities/catalog-demo\ncvs server: Diffing src/scratchpad\ncvs server: Diffing src/scratchpad/lib\ncvs server: Diffing src/scratchpad/src\ncvs server: Diffing src/scratchpad/src/org\ncvs server: Diffing src/scratchpad/src/org/apache\ncvs server: Diffing src/scratchpad/src/org/apache/poi\ncvs server: Diffing src/scratchpad/src/org/apache/poi/generator\ncvs server: Diffing src/scratchpad/src/org/apache/poi/hdf\ncvs server: Diffing src/scratchpad/src/org/apache/poi/hdf/extractor\ncvs server: Diffing src/scratchpad/src/org/apache/poi/hdf/extractor/data\ncvs server: Diffing src/scratchpad/src/org/apache/poi/hdf/extractor/util\ncvs server: Diffing src/scratchpad/src/org/apache/poi/hdf/model\ncvs server: Diffing src/scratchpad/src/org/apache/poi/hdf/model/hdftypes\ncvs server: Diffing src/scratchpad/targets\ncvs server: Diffing src/targets\ncvs server: Diffing src/testcases\ncvs server: Diffing src/testcases/org\ncvs server: Diffing src/testcases/org/apache\ncvs server: Diffing src/testcases/org/apache/poi\ncvs server: Diffing src/testcases/org/apache/poi/hssf\ncvs server: Diffing src/testcases/org/apache/poi/hssf/data\ncvs server: Diffing src/testcases/org/apache/poi/hssf/record\ncvs server: Diffing src/testcases/org/apache/poi/hssf/usermodel\ncvs server: Diffing src/testcases/org/apache/poi/poifs\ncvs server: Diffing src/testcases/org/apache/poi/poifs/eventfilesystem\ncvs server: Diffing src/testcases/org/apache/poi/poifs/filesystem\ncvs server: Diffing src/testcases/org/apache/poi/poifs/property\nIndex: src/testcases/org/apache/poi/poifs/property/TestDirectoryProperty.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/testcases/org/apache/poi/poifs/property/TestDirectoryProperty.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 TestDirectoryProperty.java\n--- src/testcases/org/apache/poi/poifs/property/TestDirectoryProperty.java\n\t31 Jan 2002 02:23:52 -0000\t1.1.1.1\n+++ src/testcases/org/apache/poi/poifs/property/TestDirectoryProperty.java\n\t14 Mar 2002 14:49:25 -0000\n@@ -61,7 +61,7 @@\n \n import junit.framework.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n \n /**\n  * Class to test DirectoryProperty functionality\nIndex: src/testcases/org/apache/poi/poifs/property/TestRootProperty.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/testcases/org/apache/poi/poifs/property/TestRootProperty.java,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 TestRootProperty.java\n--- src/testcases/org/apache/poi/poifs/property/TestRootProperty.java\t31 Jan \n2002 02:23:52 -0000\t1.1.1.1\n+++ src/testcases/org/apache/poi/poifs/property/TestRootProperty.java\t14 Mar \n2002 14:49:26 -0000\n@@ -61,7 +61,7 @@\n \n import junit.framework.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n \n /**\n  * Class to test RootProperty functionality\n@@ -124,7 +124,7 @@\n         {\n             _testblock[ index ] = ( byte ) 0;\n         }\n-        _testblock[ index++ ] = ( byte ) PoiFSConstants.END_OF_CHAIN;\n+        _testblock[ index++ ] = ( byte ) POIFSConstants.END_OF_CHAIN;\n         for (; index < 0x78; index++)\n         {\n             _testblock[ index ] = ( byte ) 0xff;\ncvs server: Diffing src/testcases/org/apache/poi/poifs/storage\nIndex: \nsrc/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableReader.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableReader.ja\nva,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 TestBlockAllocationTableReader.java\n--- \nsrc/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableReader.java\n\t31 Jan 2002 02:23:52 -0000\t1.1.1.1\n+++ \nsrc/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableReader.java\n\t14 Mar 2002 14:49:35 -0000\n@@ -61,7 +61,7 @@\n \n import junit.framework.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.LittleEndian;\n import org.apache.poi.util.LittleEndianConsts;\n \n@@ -1209,15 +1209,15 @@\n         // create a document, minus the header block, and use that to\n         // create a RawDataBlockList. The document will exist entire\n         // of BATBlocks and XBATBlocks\n-        // \n+        //\n         // we will create two XBAT blocks, which will encompass 128\n         // BAT blocks between them, and two extra BAT blocks which\n         // will be in the block array passed to the constructor. This\n         // makes a total of 130 BAT blocks, which will encompass\n         // 16,640 blocks, for a file size of some 8.5 megabytes.\n-        // \n+        //\n         // Naturally, we'll fake that out ...\n-        // \n+        //\n         // map of blocks:\n         // block 0: xbat block 0\n         // block 1: xbat block 1\n@@ -1254,7 +1254,7 @@\n             else if (i % 256 == 255)\n             {\n                 assertEquals(\"Verify end of chain for block \" + i,\n-                             PoiFSConstants.END_OF_CHAIN,\n+                             POIFSConstants.END_OF_CHAIN,\n                              table.getNextBlockIndex(i));\n             }\n             else\n@@ -1276,7 +1276,7 @@\n     {\n \n         // strategy:\n-        // \n+        //\n         // 1. set up a single BAT block from which to construct a\n         // BAT. create nonsense blocks in the raw data block list\n         // corresponding to the indices in the BAT block.\nIndex: \nsrc/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableWriter.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableWriter.ja\nva,v\nretrieving revision 1.1.1.1\ndiff -u -r1.1.1.1 TestBlockAllocationTableWriter.java\n--- \nsrc/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableWriter.java\n\t31 Jan 2002 02:23:52 -0000\t1.1.1.1\n+++ \nsrc/testcases/org/apache/poi/poifs/storage/TestBlockAllocationTableWriter.java\n\t14 Mar 2002 14:49:36 -0000\n@@ -61,7 +61,7 @@\n \n import junit.framework.*;\n \n-import org.apache.poi.poifs.common.PoiFSConstants;\n+import org.apache.poi.poifs.common.POIFSConstants;\n import org.apache.poi.util.LittleEndian;\n import org.apache.poi.util.LittleEndianConsts;\n \n@@ -189,7 +189,7 @@\n                 offset += LittleEndianConsts.INT_SIZE;\n             }\n             LittleEndian.putInt(expected, offset,\n-                                PoiFSConstants.END_OF_CHAIN);\n+                                POIFSConstants.END_OF_CHAIN);\n             offset += 4;\n             block_index++;\n         }\n@@ -197,7 +197,7 @@\n         // add BAT block indices\n         LittleEndian.putInt(expected, offset, block_index++);\n         offset += LittleEndianConsts.INT_SIZE;\n-        LittleEndian.putInt(expected, offset, PoiFSConstants.END_OF_CHAIN);\n+        LittleEndian.putInt(expected, offset, POIFSConstants.END_OF_CHAIN);\n         for (int k = 0; k < expected.length; k++)\n         {\n             assertEquals(\"At offset \" + k, expected[ k ], output[ k ]);\ncvs server: Diffing src/testcases/org/apache/poi/util\ncvs server: Diffing src/testcases/org/apache/poi/util/data\ncvs server: Diffing tools\ncvs server: Diffing tools/ant\ncvs server: Diffing tools/ant/bin\ncvs server: Diffing tools/ant/lib\ncvs server: Diffing tools/centipede\ncvs server: Diffing tools/centipede/lib\ncvs server: Diffing tools/centipede/src\ncvs server: Diffing tools/centipede/src/java\ncvs server: Diffing tools/centipede/src/resources\ncvs server: Diffing tools/centipede/src/resources/stylesheets\ncvs server: Diffing tools/centipede/targets\ncvs server: Diffing tools/cocoon\ncvs server: Diffing tools/cocoon/conf\ncvs server: Diffing tools/cocoon/lib\ncvs server: Diffing tools/lib\ncvs server: Diffing tools/targets\ncvs server: Diffing tools/targets/deprecated\n", "is_private": false, "bug_id": 7011, "id": 11793, "time": "2002-03-14T14:51:20Z", "creator": "llefevre@fivia.com", "creation_time": "2002-03-14T14:51:20Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 7011, "text": "applied, don't forget to put your name in the @author tags in the future.. thanks", "id": 11829, "time": "2002-03-15T02:51:44Z", "creator": "poi-support@buni.org", "creation_time": "2002-03-15T02:51:44Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 7011, "is_private": false, "count": 3, "id": 13210, "time": "2002-04-10T23:38:38Z", "creator": "poi-support@buni.org", "creation_time": "2002-04-10T23:38:38Z", "text": "I applied this a while ago... I think.."}]
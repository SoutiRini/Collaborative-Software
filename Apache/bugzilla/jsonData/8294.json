[{"count": 0, "attachment_id": null, "bug_id": 8294, "is_private": false, "id": 14046, "time": "2002-04-19T12:15:54Z", "creator": "simon.spruzen@rbos.com", "creation_time": "2002-04-19T12:15:54Z", "tags": [], "text": "Can <apply> be enhanced:\n\n1. Parallel=false only:\nAllow <srcfile/> and <targetfile/> to appear as many times as required (this is \noccasionally neccessary for odd command lines). If srcfile appears more than \nonce, whether each srcfile/target is expanded into the same filename, or \nwhether each srcfile is expanded into the next unused filename is dependent on \na new attribute, usenext, e.g.\n\nif the source file list is a.xml, b.xml, c.xml\n\nand srcfile element appears twice it will be expanded thus:\n\n<srcfile/> <srcfile/>                             a.xml a.xml\n<srcfile usenext=\"true\"/> <srcfile/>              b.xml b.xml\n<secfile/> <srcfile usenext=\"true\"/>              a.xml b.xml\n\nThe same applies to targetfile.\n\nThis wouldn't be allowed for parallel=true.\n\n2. Fix mapper support so the flatten mapper really does what it says (i.e. \nstrip off the preceeding path), rather than cause the current directory to be \nprepended to the flattened file.\n\n3. Allow arbitrary substitutable parameter lists that don't depend on filesets. \nSo in <apply> I could define a list:\n\n<apply ...>\n   <list id=\"arg.list.one\" value=\"value1,value2,value3\"/>\n\nand refer to it in the middle of the arg list as follows:\n   <arg .../>\n   <arg listid=\"arg.list.one\"/>\n   <arg listid=\"arg.list.one\" usenext=\"true\"/>\n   ...\n</apply>\n\nWhich would expand to: value1 value2\nthe usenext attribute working in the same way as for srcfile/targetfile's \nusenext, above.\n\nMultiple lists would be allowed. The rule for expansion of lists of different \nlengths would be:\n\n- apply stops at the end of the longest fileset or list\n- shorted lists would be silently be expanded to empty strings, or perhaps to \nwhatever value the default attribute was set to, i.e. for two lists:\n\n<list id=\"arg.list.one\" value=\"value1,value2,value3\" default=\"boo\"/>\n<list id=\"arg.list.two\" value=\"hello,goodbye,ok,whatever\"/>\n\nwould expand to, given <listarg id=\"arg.list.one\"/> <listarg id=\"arg.list.two\"/>\n\nvalue1 hello\nvalue2 goodbye\nvalue3 ok\nboo whatever\n\nOf course, changing arg would add lists to every task that allowed the arg \nelement, not just apply.\n\n\nsimon."}, {"count": 1, "attachment_id": null, "bug_id": 8294, "is_private": false, "id": 25927, "time": "2002-11-08T13:50:39Z", "creator": "bodewig@apache.org", "creation_time": "2002-11-08T13:50:39Z", "tags": [], "text": "Does <apply>'s relative attribute address point 2?"}, {"count": 2, "tags": [], "creator": "simon.spruzen@rbos.com", "is_private": false, "text": "Reckon it would. Also haven't retried mapper support in ant 1.5, so it might be \nfixed (or my understanding might be broken...)\n\nsimon.\n", "id": 25929, "time": "2002-11-08T13:55:47Z", "bug_id": 8294, "creation_time": "2002-11-08T13:55:47Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 8294, "text": "About point (1), this looks like you want to emulate the functionality of \nxargs, and I can see value in that for as you state odd commands.\n\nAs far as (3), I'm not sure I understand the rational, and the value of it. \nWould you have a real world use case that could maybe demonstrate more the \nusefulness of such an addition?\n\nThanks, --DD", "id": 25958, "time": "2002-11-08T16:53:31Z", "creator": "ddevienne@lgc.com", "creation_time": "2002-11-08T16:53:31Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "text": "taking out of NEEDINFO and noting my opinion that (3) above is probably usable\nwith apply filelist support, and especially with resource support in 1.7 .  This\nleaves (1) remaining; changing the summary to reflect (1) only.", "is_private": false, "bug_id": 8294, "id": 90681, "time": "2006-06-27T21:06:11Z", "creator": "mbenson@apache.org", "creation_time": "2006-06-27T21:06:11Z", "attachment_id": null}]
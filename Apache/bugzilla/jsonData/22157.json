[{"count": 0, "tags": [], "bug_id": 22157, "text": "The current xml-rpc driver eager loads all of the results. This can be\nproblematic (to say the least) when large result sets are invloved. A better\nsolution may be to allow the caller to set a page size (via a setting in the\nxpath service) that determines the number of documents returned at a time and\nload the documents when next() is called. The hasNext method would need to have\nenough information to determine if more results are available. An example of\nusage is shown below.\n\nResourceSet results = (do your query here);\nif (results.hasNext())\n{\n  for (int i = 0; results.hasNext(), ++i)\n  {\n    if (i > n)\n    {\n      if (i > n + pagesize)\n        break;\n\n      ... do your resource thing ...\n  }\n}", "id": 42227, "time": "2003-08-06T04:51:14Z", "creator": "kevin@rocketred.com.au", "creation_time": "2003-08-06T04:51:14Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 22157, "is_private": false, "count": 1, "id": 42281, "time": "2003-08-06T18:42:12Z", "creator": "Terry.Rosenbaum@gmail.com", "creation_time": "2003-08-06T18:42:12Z", "text": "I've built a customized version of Xindice\nwith changes to support lazy resource sets\nin the embedded version.\n\nI will attach as an example the new LazyResourceSetImpl\nand diffs of the 2 files modified to permit\nits use.\n\nThe change required a new class\n(org.apache.xindice.client.xmldb.LazyResourceSetImpl),\nand changes to org.apache.xindice.client.xmldb.CollectionImpl and\norg.apache.xindice.client.xmldb.services.XUpdateQueryServiceImpl.\n\nThe changes to CollectionImpl are those necessary to return a\nLazyResourceSetImpl rather than a ResourceSetImpl. The changes\nto XUpdateQueryServiceImpl were necessary because XUpdateQueryServiceImpl\nrelied on ResourceSetImpl.getResource(index) which is not\nsupported by LazyResourceSetImpl. Instead, the first XMLResource\nis retrieved from the ResourceSet via its iterator.\n\nWith these changes, you lose indexed access to the ResourceSet,\nlose the ability to add to the ResourceSet, lose the ability to\nremove remove resources from the ResourceSet, and lose the ability\nto get the size of the ResourceSet. What you end up with is essentially\nto a read-only forward-only cursor that you might get from a RDBMS.\n\nWhat you gain is the ability to handle large resource sets without\nrunning out of memory. The memory required is only that necessary to\ncontain the list of keys for the resources.\n\nThe following methods of the LazyResourceSetImpl throw an\nXMLDBException(ErrorCodes.NOT_IMPLEMENTED, message) exception\nif invoked:\n\npublic Resource getResource(long index)\npublic long getSize()\npublic void addResource(Resource res)\npublic void removeResource(long index)\npublic Resource getMembersAsResource()\n\nAll that remains functional is:\npublic ResourceIterator getIterator()\nand\npublic void clear().\n\nYou can get an iterator and clear the\nResourceSet -- that's it. But, this\nallows handling of much larger query\nresults.\n\nThe only unimplemented method used internally\nin Xindice was the getResource(long index)\nused to get the result count in XUpdateQueryServiceImpl\nto retrieve the result count. Using an iterator\nworks just as well.\n\nSuch a change will break any applications that\nrely on the disallowed methods. That is why I\ndid not offer this as a \"patch\". More work could\nbe done to offer this as an alternative query\nservice would solve the problem of backwards\ncompatibility."}, {"count": 2, "tags": [], "text": "Created attachment 7674\nLazy implementation of ResourceSet for embeded Xindice", "is_private": false, "id": 42283, "creator": "Terry.Rosenbaum@gmail.com", "time": "2003-08-06T18:44:03Z", "bug_id": 22157, "creation_time": "2003-08-06T18:44:03Z", "attachment_id": 7674}, {"count": 3, "tags": [], "bug_id": 22157, "is_private": false, "text": "Created attachment 7675\npatches to CollectionImpl for use of LazyResourceSetImpl", "id": 42284, "time": "2003-08-06T18:45:04Z", "creator": "Terry.Rosenbaum@gmail.com", "creation_time": "2003-08-06T18:45:04Z", "attachment_id": 7675}, {"count": 4, "tags": [], "bug_id": 22157, "attachment_id": 7676, "id": 42285, "time": "2003-08-06T18:45:36Z", "creator": "Terry.Rosenbaum@gmail.com", "creation_time": "2003-08-06T18:45:36Z", "is_private": false, "text": "Created attachment 7676\npatches to XUpdateQueryServiceImpl for use of LazyResourceSetImpl"}, {"count": 5, "tags": [], "creator": "kevin@rocketred.com.au", "text": "I'm going to take a look at adding this to the embeded and managed drivers and\ntry an find a way that gives the caller the choice of which internal\nimplementation to use (or starts with the lazy version and falls back to the\neager version if one of the eager methods is called).", "id": 42302, "time": "2003-08-06T23:49:34Z", "bug_id": 22157, "creation_time": "2003-08-06T23:49:34Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "kevinoneill@apache.org", "text": "re-assigned back to me.", "count": 6, "id": 48855, "time": "2003-12-10T20:23:38Z", "bug_id": 22157, "creation_time": "2003-12-10T20:23:38Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 22157, "is_private": false, "id": 48856, "time": "2003-12-10T20:25:54Z", "creator": "kevinoneill@apache.org", "creation_time": "2003-12-10T20:25:54Z", "tags": [], "text": "removed the [patch] tag as the working code from terry is only a part\nimplementation."}, {"count": 8, "tags": [], "bug_id": 22157, "text": "Keep mail list in the loop", "id": 48857, "time": "2003-12-10T20:32:27Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-12-10T20:32:27Z", "is_private": false, "attachment_id": null}]
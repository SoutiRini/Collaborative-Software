[{"count": 0, "tags": [], "creator": "chris@skipoles.co.uk", "is_private": false, "text": "Setup:\nTwo Tomcat 5.0.30 servers arranged in a cluster with synchronous replication\nusing multicast.\nApache server using mod_jk2 to load balance between the two servers in a\nround-robin manner (no sticky sessions)\n\nApplication:\nInitially discovered the problem while testing clustering of the wicket\nframework. However, problem can be replicated with small servlet (see bottom of\ndescription). This servlet handles two requests:\n\n1) Request arrives to servlet (on serverA), which sets a session attribute and\nthen outputs an HTML page. The HTML page contains a style sheet link with an\nhref back to the same servlet.\n2) Request for dynamically generated stylesheet arrives (on serverB). The\nsession is not accessed and the css content is output.\n\nI added debug to org.apache.catalina.cluster.session.DeltaRequest and what I see\nhappening is as follows:\n\n1) Request to servlet arrives on serverA. Servlet sets a session attribute and\nreturns the HTML content.\n2) ServerA sends the delta request containing one AttributeInfo object to\nserverB and then resets its actions list.\n3) ServerB receives the delta request containing the one AttributeInfo object\n4) DeltaRequest.execute(DeltaSession) sets the attribute on the session.\nHowever, it DOESN'T remove the AttributeInfo object from the actions list.\n\n5) Request to servlet arrives on serverB (to retrieve the css content). Servlet\nreturns the css content but does not update the session.\n6) DeltaManager.requestCompleted(String) is called on serverB. This checks if\nthe actions list of the delta request is non-empty.\n7) The actions list is non-empty because it contains the AttributeInfo object\nfrom the previous synchronization (4). Thus, the AttributeInfo object is sent\nback to serverA (which starts again at 3). \n\nThe net result is that the same AttributeInfo object bounces back and forth\nbetween the two servers for each request that come in (regardless of whether the\nrequest alters the session or not). When the original page contains many\ndynamically generated images (retrieved concurrently by the browser) the\nexternalization code finally falls in a heap with EOF and NPE problems due to\nthe two machines trying to synchronize different copies of the same\nAttributeInfo object.\n\nThe solution to the problem is to change the DeltaRequest.execute(DeltaSession)\nmethod to remove the AttributeInfo objects from the actions list after it has\nfinished processing them:\n\npublic synchronized void execute(DeltaSession session) {\n    .... \n        }//switch\n    }//for\n>>  reset();  \n    session.endAccess();\n}\n\nThis appears to solve the problem.\n\nExample servlet (if anyone wants to test this out):\npublic class MyAppServlet extends HttpServlet {\n\n    protected void doGet(final HttpServletRequest request, final\nHttpServletResponse response)\n            throws ServletException, IOException {\n        final String action = request.getParameter(\"action\");\n        if ( \"css\".equals(action) ) {\n            response.setContentType(\"text/css\");\n            PrintWriter out = response.getWriter();\n            out.println(\".someStyle {\\n    padding: 5px;\\n}\");\n        }\n        else {\n            request.getSession().setAttribute(\"test\", \"value\");\n            response.setContentType(\"text/html\");\n            PrintWriter out = response.getWriter();\n            out.println(\"<html>\\n<head>\\n<title>Test Page</title>\");\n            out.println(\"    <link rel=\\\"stylesheet\\\"\nhref=\\\"/myapp/myapp?action=css\\\"></script>\");\n            out.println(\"</head>\\n<body>\\n    <h2>Test\nPage</h2>\\n</body>\\n</html>\");\n        }\n    }\n\n    protected void doPost(final HttpServletRequest request, final\nHttpServletResponse response)\n            throws ServletException, IOException {\n        doGet(request, response);\n    }\n\n}", "id": 74115, "time": "2005-04-26T10:53:26Z", "bug_id": 34615, "creation_time": "2005-04-26T10:53:26Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 34615, "attachment_id": 14842, "text": "Created attachment 14842\nMinimum servlet that causes the unecessary AttributeInfo replication", "id": 74116, "time": "2005-04-26T10:55:29Z", "creator": "chris@skipoles.co.uk", "creation_time": "2005-04-26T10:55:29Z", "is_private": false}, {"count": 2, "tags": [], "creator": "fhanik@apache.org", "is_private": false, "text": "Good catch.", "id": 74179, "time": "2005-04-27T17:48:52Z", "bug_id": 34615, "creation_time": "2005-04-27T17:48:52Z", "attachment_id": null}]
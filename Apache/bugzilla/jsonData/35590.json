[{"count": 0, "tags": [], "bug_id": 35590, "attachment_id": null, "id": 75751, "time": "2005-07-02T21:33:50Z", "creator": "nichoj@alum.rpi.edu", "creation_time": "2005-07-02T21:33:50Z", "is_private": false, "text": "Seeing as it is possible to specify the compiler javac uses through\n\"build.compiler\", I think it would be extremely useful to be able to control\nwhich  VM version to generate class files for. This would be of particular\ninterest to downstream packagers, in order to finely tune which VM versions a\npackage would be compiled for."}, {"count": 1, "tags": [], "bug_id": 35590, "is_private": false, "id": 75752, "creation_time": "2005-07-02T22:57:57Z", "time": "2005-07-02T22:57:57Z", "creator": "jkf@apache.org", "text": "From the manual on javac:\n\ntarget  \t\n\nGenerate class files for specific VM version (e.g., 1.1 or 1.2). Note that the\ndefault value depends on the JVM that is running Ant. In particular, if you use\nJDK 1.4+ the generated classes will not be usable for a 1.1 Java VM unless you\nexplicitly set this attribute to the value 1.1 (which is the default value for\nJDK 1.1 to 1.3). We highly recommend to always specify this attribute.\n\nand the example\n  <javac srcdir=\"${src}\"\n         destdir=\"${build}\"\n         fork=\"true\"\n         source=\"1.2\"\n         target=\"1.2\"\n  />\n\nPlease state why this is not sufficient? (one could replace\ntarget=\"1.2\" by target=\"${destversion}\"", "attachment_id": null}, {"count": 2, "tags": [], "text": "Your suggestion is definately a possibility, and if it was a project that I was\nworking on, I would go with that.\n\nHowever, from the perspective of a packager, it's one more thing to patch and\nanother patch to maintain. Now, with defining which compiler to use, its easy\nenough to define build.compiler either on the command line or in a properties\nfile. It would be nice to have similar way to define which VM version class\nfiles should work with.", "attachment_id": null, "bug_id": 35590, "id": 76959, "time": "2005-07-04T01:57:19Z", "creator": "nichoj@alum.rpi.edu", "creation_time": "2005-07-04T01:57:19Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "alexeys@inventigo.com", "is_private": false, "id": 76961, "time": "2005-07-04T02:43:23Z", "bug_id": 35590, "creation_time": "2005-07-04T02:43:23Z", "tags": [], "text": "You can create the following bulid script that copies the original build script\nand adds <presetdef>. The script uses ANT Contrib and assumes there is a space\ncharacter (including newline) after <project>.\n\nRun it before executing the real build (maybe by creating a shell script), then\nrun ANT with new buildscript with giver parameters:\n\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<project name=\"smartbuild\" default=\"all\" basedir=\".\">\n  <taskdef resource=\"net/sf/antcontrib/antcontrib.properties\">\n    <classpath>\n      <pathelement location=\"lib/ant-contrib.jar\"/>\n    </classpath>\n  </taskdef>\n\n  <target name=\"all\">\n    <if><not><uptodate srcfile=\"build.xml\" targetfile=\"updated.xml\"/></not>\n      <then>\n        <copy file=\"build.xml\" tofile=\"updated.xml\"/>\n        <replaceregexp file=\"updated.xml\" match=\"(&lt;project.*?>)(\\s)\"\nreplace=\"\\1&lt;presetdef name=&quot;javac&quot;>&lt;javac\ncompiler=&quot;$${build.compiler}&quot;/>&lt;/presetdef>\\2\"/>\n      </then>\n    </if>\n  </target>\n</project>\n\nThis is a batch script that can be used to executed updated build:\n\n#!/bin/bash\nant -f build2.xml\nant -f updated.xml $@\n\nWith ANT, you can execute the target and then execute <ant> with updated file.\n\n- Alexey.\n\n\n"}, {"count": 4, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "id": 76964, "time": "2005-07-04T07:47:05Z", "bug_id": 35590, "creation_time": "2005-07-04T07:47:05Z", "is_private": false, "text": "> Now, with defining which compiler to use, its easy\n> enough to define build.compiler either on the command line or in a \n> properties file. It would be nice to have similar way to define which \n> VM version class files should work with.\n\nbuild.xml\n<project>\n    <property file=\"build.properties\"/>\n    ....\n    <!-- set defaults -->\n    <property name=\"javac.source\" value=\"1.4\"/>\n    <property name=\"javac.target\" value=\"1.4\"/>\n\n    <javac source=\"${javac.source}\" target=\"${javac.target}\" ...\n\n\nbuild.properties\njavac.source=1.3\njavac.target=1.3\n\n\nCould also be override on startup\n    ant -Djavac.source=1.5 -Djavac.target=1.5\n\n\n\nAll like Matt said. \nWhere is the problem?"}, {"count": 5, "tags": [], "bug_id": 35590, "attachment_id": null, "id": 77011, "time": "2005-07-05T19:55:56Z", "creator": "mbenson@apache.org", "creation_time": "2005-07-05T19:55:56Z", "is_private": false, "text": "I didn't say that, Martijn did! :)"}, {"count": 6, "attachment_id": null, "bug_id": 35590, "is_private": false, "id": 90693, "time": "2006-06-27T21:28:07Z", "creator": "mbenson@apache.org", "creation_time": "2006-06-27T21:28:07Z", "tags": [], "text": "1.7 will support properties ant.build.javac.source and ant.build.javac.target\nthanks to Stefan IIRC."}]
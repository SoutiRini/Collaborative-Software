[{"count": 0, "tags": [], "text": "Created attachment 23883\nPatch vs 1.3.4 version of apr_dbd_pgsql.c\n\nThis pertains to apr_dbd_pgsql.so in the dbd utilities, functions dbd_pgsql_query and dbd_pgsql_pquery_internal.\n\nThe same variable, 'ret', is re-used for 3 different purposes:  1) to store native Postgresql return codes for the primary query; 2) to store native Postgresql return codes for supporting queries related to transaction SAVEPOINTs; 3) to store and return the appropriate APR return code to the caller. This leads to two issues in the current trunk.\n\nBecause ret is used first for native postgresql codes and then for returning an APR error code, the native code must be translated.  The dbd functions only specify 0 on success, and some error code on failure, and thus do not require meaningful translation of any native error code.  However, postgres does not use 0 for a success code in libpq calls, so it IS required to modify ret to 0 for any postgres success codes.  This is done correctly when transactions are not used, or when transactions with default mode are used.  But when APR_DBD_TRANSACTION_IGNORE_ERRORS mode is used, the functions in question will set a postgres SAVEPOINT prior to executing the primary query, and release or rollback to the savepoint depending on query success or failure.  In the case of a successful primary query, the variable ret is set to the return code of the query that releases the savepoint, but that code is not translated back to 0 on success.\n\nThe second problem is that on failure of the primary query, the return code from that primary query is lost entirely due to the re-use of 'ret' for the rollback to the savepoint.\n\nAttached is a patch that should remedy this situation.  I added a second variable, 'transret' specifically to take the return codes related to operation around transaction SAVEPOINTs.  The original 'ret' value from the primary query is no longer modified after initial translation.", "is_private": false, "id": 128294, "creation_time": "2009-06-25T13:45:00Z", "time": "2009-06-25T13:45:00Z", "creator": "wayne_jensen@trendmicro.com", "bug_id": 47431, "attachment_id": 23883}, {"count": 1, "tags": [], "text": "Or we can just do:\n\nint ret = PQresultStatus(res);\n\nin those places, which will then have local scope. But, yeah, I get your point.", "attachment_id": null, "id": 128370, "creator": "bojan@rexursive.com", "time": "2009-06-29T00:04:09Z", "bug_id": 47431, "creation_time": "2009-06-29T00:04:09Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 47431, "text": "Created attachment 23896\nAlternative patch\n\nDoes this work for you too?", "id": 128371, "time": "2009-06-29T00:16:21Z", "creator": "bojan@rexursive.com", "creation_time": "2009-06-29T00:16:21Z", "is_private": false, "attachment_id": 23896}, {"count": 3, "tags": [], "text": "Hi,\n\nYour patch is a more elegant solution, although I usually prefer to avoid masking variable names at deeper scope since it can make bugs more subtle.  If there's no prohibition in the apache standards then your patch works for me.", "attachment_id": null, "id": 128400, "creator": "wayne_jensen@trendmicro.com", "time": "2009-06-29T10:14:58Z", "bug_id": 47431, "creation_time": "2009-06-29T10:14:58Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 47431, "is_private": false, "text": "This has been fixed in trunk, 1.4.x and 1.3.x. Thanks for the patch!", "id": 128448, "time": "2009-06-30T14:47:38Z", "creator": "bojan@rexursive.com", "creation_time": "2009-06-30T14:47:38Z", "attachment_id": null}]
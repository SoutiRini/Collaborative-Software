[{"count": 0, "tags": [], "bug_id": 26435, "text": "It's possible to change the log level of a logger by using the JMX interface \nclass LoggerDynamicMBean class in LOG4J. The setAttribute() methods set a new \npriority but you cannot change the priority for an explicit category only for \nthe root logger (see log4j.properties file) at the end of this description.\n\nOriginal source snippet of setAttribute():\n if (name.equals(\"priority\")) {\n            if (value instanceof String) {\n                String s = (String) value;\n                Level p = logger.getLevel();\n\n                if (s.equalsIgnoreCase(\"NULL\")) {\n                    p = null;\n                } else {\n                    p = OptionConverter.toLevel(s, p);\n                }\n\n                logger.setPriority(p);\n            }\n        } else {\n            throw (new AttributeNotFoundException(\"Attribute \" + name +\n                \" not found in \" + this.getClass().getName()));\n        }\n\nThe OptionConverter used in this codes also provides a mechanism to internally \nchange a level for one Level by passing level and new value separated with a #-\nsign. But this only leads to a ClassNotFoundException (e.g. \"INFO#tui.musyk\" => \nno class) or InvocationTargetException.\nThere seems no way to influence the behaviour of a single package or class \nlogger via JMX, even though it would be very easy by adding an additional \nmethod to the Log4J interface classes. E.g. something like:\n\npublic void setLogLevelForClassOrPackage(\n            String className, String newLevelAsString) {\n\n        // get the old logger responsible for this class or package\n        Logger oldLogState = LogManager.getLogger(className);\n        // get its current level\n        Level oldLevel = oldLogState.getLevel();\n        Category cat = oldLogState.getParent();\n        while (oldLevel == null) {\n            if (cat != null) {\n                oldLevel = cat.getLevel();\n                cat = cat.getParent();\n            } else {\n                break;\n            }\n        }\n        // create a newLevel from the old level and the new level string\n        // representation\n        Level newLevel = OptionConverter.toLevel(newLevelAsString, oldLevel);\n        // set the new level\n        oldLogState.setLevel(newLevel);\n}\n\n-----------------\n\nCurrent log4j.properties content:\nlog4j.additivity.tui.musyk=false\nlog4j.rootLogger=DEBUG,MUSYK1,MUSYK2\nlog4j.category.tui.musyk=DEBUG,MUSYK1,MUSYK2\nlog4j.category.test.musyk=DEBUG,MUSYK1,MUSYK2\nlog4j.category.tui.irisplus=DEBUG,MUSYK1,MUSYK2\nlog4j.appender.MUSYK1=org.apache.log4j.ConsoleAppender\nlog4j.appender.MUSYK2=org.apache.log4j.RollingFileAppender\nlog4j.appender.MUSYK2.File=D:/tmp/log/musyk.log\nlog4j.appender.MUSYK2.Append=false\nlog4j.appender.MUSYK2.MaxFileSize=8096KB\nlog4j.appender.MUSYK2.MaxBackupIndex=1\nlog4j.appender.MUSYK1.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MUSYK2.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MUSYK1.layout.ConversionPattern=%-5p [%t] %-d{dd.MM. \nHH:mm:ss:SSS} %m \\n\nlog4j.appender.MUSYK2.layout.ConversionPattern=%m \\n\nlog4j.debug=true", "id": 51183, "time": "2004-01-26T11:39:23Z", "creator": "lars.wunderlich@tui.de", "creation_time": "2004-01-26T11:39:23Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "jessh@ptc.com", "text": "There are other issues with the log4j JMX MBeans.\n\nThe biggest is that a single LoggerRepository is deeply and thoroughly assumed\nthroughout the code.  If you have a LoggerRepository per web app and/or other\nprivate repositories, the log4j MBeans are useless.\n\nThey also fail to disable getAttribute on password attributes.\n\nOn the other hand, I believe what you're trying to do worked fine one you\nregister the logger in question with the MBeans.  I don't know for sure as I\nwrote my own set of MBeans some time back that now cover a good deal more than\nthose provided with log4j.", "id": 79381, "attachment_id": null, "bug_id": 26435, "creation_time": "2005-09-05T04:47:20Z", "time": "2005-09-05T04:47:20Z", "is_private": false}, {"count": 2, "tags": [], "text": "\n> The biggest is that a single LoggerRepository is deeply and thoroughly assumed\n> throughout the code.  If you have a LoggerRepository per web app and/or other\n> private repositories, the log4j MBeans are useless.\n\nAddressed in fix\n\n> They also fail to disable getAttribute on password attributes.\n\nNot addressed.  How do you know (without guessing on a string) if an attribute\nis a password or not?\n\n> On the other hand, I believe what you're trying to do worked fine one you\n> register the logger in question with the MBeans.  I don't know for sure as I\n> wrote my own set of MBeans some time back that now cover a good deal more than\n> those provided with log4j.\n\nFeel free to contribute!", "is_private": false, "bug_id": 26435, "id": 98627, "time": "2007-01-28T02:05:16Z", "creator": "genman@noderunner.net", "creation_time": "2007-01-28T02:05:16Z", "attachment_id": null}]
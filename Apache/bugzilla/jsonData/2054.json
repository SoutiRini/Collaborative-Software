[{"count": 0, "tags": [], "creator": "kayingl@ca.ibm.com", "attachment_id": null, "text": "The test case sa02.xml (see below) is run using TestDriver.java (see below) \nwhich extends the DefaultHandler class and implements the startElement() \nmethod. On method calls to getType() using the Attributes object passed into \nthe startElement() method as a parameter, it returns \"NMTOKENS\" instead \nof \"NMTOKEN\" on the attribute \"nmtoken\".\n\n================================================================================\nA snapshot of the Actual result:\n================================================================================\nContentHandler: startElement (String uri, String local, String raw, Attributes \nattrs)\nuri: \nlocal: attributes\nraw: attributes\nattrs: { ---- Attributes ---- \nattr0\nURI: \nLocalName: notation\nQName: notation\nIndex (uri, lname): 0\nIndex (qname): 0\nType (index): (nonce|foo|bar)\nType (uri, lname): (nonce|foo|bar)\nType (qname): (nonce|foo|bar)\nValue (index): nonce\nValue (uri, lname): nonce\nValue (qname): nonce\n\n---- Attributes ---- \nattr1\nURI: \nLocalName: nmtoken\nQName: nmtoken\nIndex (uri, lname): 1\nIndex (qname): 1\nType (index): NMTOKENS\nType (uri, lname): NMTOKENS\nType (qname): NMTOKENS\nValue (index): this-gets-normalized\nValue (uri, lname): this-gets-normalized\nValue (qname): this-gets-normalized\n\n---- Attributes ---- \nattr2\nURI: \nLocalName: nmtokens\nQName: nmtokens\nIndex (uri, lname): 2\nIndex (qname): 2\nType (index): NMTOKENS\nType (uri, lname): NMTOKENS\nType (qname): NMTOKENS\nValue (index): this\n also gets normalized\nValue (uri, lname): this\n also gets normalized\nValue (qname): this\n also gets normalized\n================================================================================\nTest case sa02.xml:\n================================================================================\n<?xml version='1.0' standalone='yes'?>\n\n<!DOCTYPE attributes [\n    <!ELEMENT attributes EMPTY>\n\n    <!--\n\t2.9 gives validity constraints applying to attributes\n\tin standalone docs:  no external defaults or decls\n\tcausing normalization.\n\n\t3.3.3 describes the normalization rules\n    -->\n\n    <!ATTLIST attributes\n\ttoken\t\t(a|b|c)\t\t\"a\"\n\tnotation\t(nonce|foo|bar)\t#IMPLIED\n\tnmtoken\t\tNMTOKEN\t\t#IMPLIED\n\tnmtokens\tNMTOKENS\t#IMPLIED\n\tid\t\tID\t\t#IMPLIED\n\tidref\t\tIDREF\t\t#IMPLIED\n\tidrefs\t\tIDREFS\t\t#IMPLIED\n\tentity\t\tENTITY\t\t#IMPLIED\n\tentities\tENTITIES\t#IMPLIED\n\tcdata\t\tCDATA\t\t#IMPLIED\n\t>\n    \n    <!ENTITY internal \" internal&number; \">\n    <!ENTITY number \"42\">\n\n    <!NOTATION nonce SYSTEM \"file:/dev/null\">\n    <!NOTATION foo PUBLIC \"-//public id//foo\" \"file:/dev/null\">\n    <!NOTATION bar SYSTEM \"file:/dev/tty\">\n\n    <!ENTITY unparsed-1 PUBLIC \"-//some public//ID\" \"file:/dev/console\"\n\t\t\tNDATA nonce>\n    <!ENTITY unparsed-2 SYSTEM \"scheme://host/data\"\n\t\t\tNDATA foo>\n]>\n\n<attributes\n    notation =\t\" nonce \"\n    nmtoken =\t\" this-gets-normalized \"\n    nmtokens =\t\" this&#x0d;&#x0a; also\t gets&#x20; normalized \"\n    id =\t\"\t&internal; \"\n    idref =\t\" &internal;\n    \"\n    idrefs =\t\" &internal;  &internal;    &internal;\"\n    entity =\t\" unparsed-1 \"\n    entities =\t\"unparsed-1 unparsed-2\"\n    cdata =\t\"nothing happens to this one!\"\n    />\n================================================================================\nSteps to Reproduce:\n1. Save and Compile the TestDriver.java program\n2. Set the classpath pointing to the xerces.jar file and the directory storing \nTestDriver.class file.\n3. Run TestDriver in the directory storing the TestDriver.class file using the \ncommand below:\n   java TestDriver d [uri of sa02.xml] t\n   d --- default parser class (which is set to \norg.apache.xerces.parsers.SAXParser); \n   uri --- the full uri of the file in the local system. e.g. \"d:/Test/sa02.xml\"\n   t --- to set validation to \"true\", any other input will set validation \nto \"false\"\n================================================================================\nTestDriver.java\n================================================================================\nimport java.io.*;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.*;\n\n\npublic class TestDriver \nextends DefaultHandler {\n\n    //\n    // Constants\n    //\n\n    /** Default parser name. */\n    private static final String \n    DEFAULT_PARSER_NAME = \"org.apache.xerces.parsers.SAXParser\";\n    private static boolean setValidation    = false; //defaults\n    //\n    // Data\n    //\n    String uri \t\t\t= null; \t// file to parse\n    static String parserName\t= null; \t// parser name\n    /** Canonical output. */\n    protected boolean canonical;\n\n    //\n    // Constructors\n    //\n\n    /** Default constructor. */\n//\tUsage: TestDriver [fully qualified parser name] [uri] [validation (t/f)]\n\n    public static void main (String [] argv)\n    {\n    \tTestDriver td = new TestDriver();\n\n\tboolean validate;\n\tif (argv[2].equals(\"t\"))\n    \t\tvalidate = true;\n\telse\n\t\tvalidate = false;    \t\n    \tsetValidation(validate);\n\tif (!argv[0].equals(\"d\"))\n    \t\ttd.print(argv[0], argv[1]);\n\telse\n\t\ttd.print(DEFAULT_PARSER_NAME, argv[1]);\n    }\n    public TestDriver () {}\n\n    public static void setValidation (boolean isValidating) {\n    \tsetValidation = isValidating;\t\n    }\n    /** Prints the output from the SAX callbacks. */\n    public static void print(String parserNm, String uri) {\n\n        try {\n            DefaultHandler handler = new TestDriver();\n\t    parserName = parserNm;\n\n\t    try {\n\t\t    // for parser that implements XMLReader\t    \n\t\t    XMLReader parser = XMLReaderFactory.createXMLReader\n(parserName);\n\t\n\t\t    parser.setFeature(\"http://xml.org/sax/features/validation\", \nsetValidation);\n\n\t            parser.setEntityResolver(handler);\n\t  \t    parser.setContentHandler(handler);\n\t            parser.setErrorHandler(handler);\n\t            parser.setDTDHandler(handler);\n\n\t\t    parser.parse(uri);\n\t\t} catch (SAXException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n        } catch (Exception e) {\n            \te.printStackTrace();\n        }\n    } // print(String,String,boolean)\n\n    /** Start element. */\n    public void startElement(String uri, String local, String raw, \n                             Attributes attrs) {\n\n\t    System.out.println(\"ContentHandler: startElement (String uri, \nString local, String raw, Attributes attrs)\");\n\t    System.out.println(\"uri: \" + uri);\n\t    System.out.println(\"local: \" + local);\n\t    System.out.println(\"raw: \" + raw);\n\t    if (attrs != null)\n\t    {\n\t\tSystem.out.print(\"attrs: { \");\n        \tint len = attrs.getLength();\n\n            \tfor (int i = 0; i < len; i++) {\n\n\t\t\tString aURI = attrs.getURI(i);\n\t\t\tString aLocalName = attrs.getLocalName(i);\n\t\t\tString aQName = attrs.getQName(i);\n\t\t\tSystem.out.println(\"---- Attributes ---- \");\n\t\t\tSystem.out.println(\"attr\" + i);\n\t\t\tSystem.out.println(\"URI: \" + aURI);\n\t\t\tSystem.out.println(\"LocalName: \" + aLocalName);\n\t\t\tSystem.out.println(\"QName: \" + aQName);\n\t\t\tSystem.out.println(\"Index (uri, lname): \" + \nattrs.getIndex(aURI, aLocalName));\n\t\t\tSystem.out.println(\"Index (qname): \" + attrs.getIndex\n(aQName));\n\t\t\tSystem.out.println(\"Type (index): \" + attrs.getType(i));\n\t\t\tSystem.out.println(\"Type (uri, lname): \" + attrs.getType\n(aURI, aLocalName));\n\t\t\tSystem.out.println(\"Type (qname): \" + attrs.getType\n(aQName));\n\t\t\tSystem.out.println(\"Value (index): \" + attrs.getValue\n(i));\n\t\t\tSystem.out.println(\"Value (uri, lname): \" + \nattrs.getValue(aURI, aLocalName));\n\t\t\tSystem.out.println(\"Value (qname): \" + attrs.getValue\n(aQName));\n\t\t\tSystem.out.println(\"\");\n\t        }\t    \t\n\t        System.out.println(\" }\");\n\t    }\n\t    else\n\t    {\n\t    \tSystem.out.println(\"attrs: null\");\n\t    }\t    \n\t    System.out.println(\"\");\t\n\t    System.out.flush();\n    } // startElement(String,String,String,Attributes)\n}\n================================================================================\nPlatform:\nI have only run the test locally with WIN2000 and JDK1.3.\n================================================================================", "id": 2780, "time": "2001-06-07T08:04:37Z", "bug_id": 2054, "creation_time": "2001-06-07T08:04:37Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 2054, "is_private": false, "text": "Created attachment 196\nTestDriver.class", "id": 2781, "time": "2001-06-07T08:07:24Z", "creator": "kayingl@ca.ibm.com", "creation_time": "2001-06-07T08:07:24Z", "attachment_id": 196}, {"count": 2, "tags": [], "bug_id": 2054, "text": "Fixed. Typo.", "id": 3047, "time": "2001-06-18T12:24:53Z", "creator": "sandygao@ca.ibm.com", "creation_time": "2001-06-18T12:24:53Z", "is_private": false, "attachment_id": null}]
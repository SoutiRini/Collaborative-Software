[{"count": 0, "tags": [], "bug_id": 51664, "attachment_id": null, "is_private": false, "id": 148641, "time": "2011-08-16T13:45:31Z", "creator": "med1985@gmail.com", "creation_time": "2011-08-16T13:45:31Z", "text": "This patch serves to address the slow performance of accessibility features in PDF creation. This is a collaborative effort between myself and Jeremias."}, {"count": 1, "tags": [], "text": "Created attachment 27391\npatch", "attachment_id": 27391, "id": 148642, "creation_time": "2011-08-16T13:45:56Z", "time": "2011-08-16T13:45:56Z", "creator": "med1985@gmail.com", "bug_id": 51664, "is_private": false}, {"count": 2, "tags": [], "creator": "med1985@gmail.com", "attachment_id": 27392, "is_private": false, "id": 148643, "time": "2011-08-16T14:11:13Z", "bug_id": 51664, "creation_time": "2011-08-16T14:11:13Z", "text": "Created attachment 27392\nMore tests\n\nThis patch has been separated since it is purely unit tests."}, {"count": 3, "tags": [], "text": "Just some background on the problem:\n\nIt was found that enabling accessibility (tagged PDF) decreases PDF production performance considerably.\n\nI've profiled FOP with an FO file (about 10 pages). I ran both FO->PDF and FO->IF->PDF scenarios to isolate the bulk of the \"lost\" time. It turns out that the FO-IF stage doesn't lose a lot of performance due to the additional work. So I concentrated on IF->PDF.\n\nThe VisualVM profiler highlighted PDFDocument.getWriterFor() and BufferedOutputStream.flush() as hot spots in the accessibility case. Most of that is caused by PDFDictionary, PDFArray and PDFName. And the strong weight on these two is actually expected since Tagged PDF structures are all dictionaries and arrays. Lots of them.\n\nLook at the PDF sizes:\n- Normal PDF: 105 KB (65 PDF Objects)\n- Tagged PDF: 868 KB (6462 PDF Objects)\n\nThat's A LOT of additional content. All dictionaries and arrays that cannot be compressed (in PDF 1.4). That also means a big increase in I/O output. So it's in nature of tagged PDF that it must be considerably slower.\n\nWhat I've tried now is to address the hot spot I found above. I got rid of the Writers for encoding text output. Instead I switched to a StringBuilder that is flushed to the OutputStream when necessary. That decreases the average processing time after warm-up (IF->PDF case) from 775ms to 460ms (normal PDF from 355ms to 325ms). That is a speed-up of:\n\n(460 - 325) / (775 - 355) = 135 / 420 = 0.32 = -68%\nSo it cuts the tagged PDF penalty to a third.\n\nThat was the IF->PDF case. Here are the measurements for the FO->PDF case (the same test document:\n\nnormal PDF: 772ms --> 712ms\ntagged PDF: 1472ms --> 1042ms\n\nnormal PDF: 712 / 772 = 0.92 (-8%)\ntagged PDF: 1042 / 1472 = 0.71 (-29%)\ntagged PDF penalty: (1042 - 712) / (1472 - 772) = 330 / 700 = 0.47 (-53%)\n\nThere's a catch: This optimization requires a backwards-incompatible change in the PDF library. The PDFWritable interface changes from\nvoid outputInline(OutputStream out, Writer writer) throws IOException;\nto\nvoid outputInline(OutputStream out, StringBuilder textBuffer) throws IOException;\n\nThe same applies to PDFObject.formatObject(). Both are very central parts of the PDF library. It could invalidate pending patches or private additions from third-parties. But it doesn't seem to be easy enough to write adapter code to work around this.", "is_private": false, "id": 148645, "creator": "jeremias@apache.org", "time": "2011-08-16T14:39:23Z", "bug_id": 51664, "creation_time": "2011-08-16T14:39:23Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 51664, "attachment_id": null, "id": 150171, "creation_time": "2011-10-05T09:55:37Z", "time": "2011-10-05T09:55:37Z", "creator": "bowditch_chris@hotmail.com", "text": "Thanks for the patch Mehdi. Looking at [1] I realised that you haven't yet filed an ICLA. The ASF encourages all contributors to do so and it is a pre-requisite to becoming a committer. Since you have filed  a number of patches its about time you filed in the ICLA as described in [2]. Thanks\n\n[1] http://people.apache.org/committer-index.html\n[2] http://www.apache.org/licenses/", "is_private": false}, {"count": 5, "tags": [], "bug_id": 51664, "attachment_id": null, "is_private": false, "id": 150172, "time": "2011-10-05T10:38:18Z", "creator": "med1985@gmail.com", "creation_time": "2011-10-05T10:38:18Z", "text": "(In reply to comment #4)\n> Thanks for the patch Mehdi. Looking at [1] I realised that you haven't yet\n> filed an ICLA. The ASF encourages all contributors to do so and it is a\n> pre-requisite to becoming a committer. Since you have filed  a number of\n> patches its about time you filed in the ICLA as described in [2]. Thanks\n> \n> [1] http://people.apache.org/committer-index.html\n> [2] http://www.apache.org/licenses/\n\nI have faxed the appropriate documents."}, {"count": 6, "tags": [], "bug_id": 51664, "attachment_id": null, "id": 152613, "time": "2012-01-06T16:05:15Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2012-01-06T16:05:15Z", "is_private": false, "text": "Hi Mehdi, Jeremias\n\nThanks for the patch. This has been committed in revision: 1228243. I had to adjust the unit tests to Junit 4, but otherwise the changes are fine.\n\nThanks,\n\nChris"}]
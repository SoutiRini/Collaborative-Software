[{"attachment_id": null, "tags": [], "bug_id": 58095, "text": "Sample:\n\n<script type=\"text/javascript\" src=\"/somepath/myfile.js\"></script>\n\nResults in the following in the generated class:\n\n<script type=\"text/javascript\" src=\"/somepath/myfile.js\"/>\n\nSince the latter is invalid HTML (script tag is not self-closing), it results in severe page issues depending on the page content occurring below it.\n\nThe workaround is to put some non-empty body, eg:\n\n<script type=\"text/javascript\" src=\"/somepath/myfile.js\">//DONT REMOVE</script>", "count": 0, "id": 183864, "time": "2015-07-02T21:01:01Z", "creator": "jonesgav@oildex.com", "creation_time": "2015-07-02T21:01:01Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 58095, "is_private": false, "count": 1, "id": 183866, "time": "2015-07-02T22:28:11Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-07-02T22:28:11Z", "text": "Do you have a test case? Is this .jspx or .jsp?\n\nWhat does \"generated jsp\" mean?\n\nRecommendation for suppressing the coalescing of the tags:\n\n<script type=\"text/javascript\" src=\"/somepath/myfile.js\"><!-- comment --></script>"}, {"count": 2, "text": "TAGX and JSPX only.  Standard JSPs & Tags don't seem to exhibit this.  Interestingly, JSP *Documents* having an extension of just \"jsp\" (rather than jspx) don't seem to either.\n\nGenerated JSP(X)/Tag(X) = the <filename>_jsp(x).java that Jasper creates.\n\neg.)\n\n<script type=\"text/javascript\" src=\"/docp/js/common/common.js\"></script>\n\nBecomes:\n\nout.write(\"<script src=\\\"/docp/js/common/common.js\\\" type=\\\"text/javascript\\\"/>\");\n\nThe testcase should be as simple as adding the sample snippet above to a JSP and compiling it using Jasper.\n\nWe'll apply your recommendation to dodge this, thanks.", "creator": "jonesgav@oildex.com", "is_private": false, "id": 183869, "time": "2015-07-02T22:46:23Z", "bug_id": 58095, "creation_time": "2015-07-02T22:46:23Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "text": "I'm not sure this is a Tomcat issue, but I'm not sure exactly how Tomcat does its XML parsing, etc. I know that I've seen this problem with other XML-oriented HTML-handling software as well.\n\nA specific case in point: Apache Cocoon will take a <script></script> pair in an XSLT and generate <script/> in the output. We have to use the same tricks like <script><xsl:comment>boo!</xsl:comment></script> in order to prevent the XML serializer from coalescing the tags together.\n\nThe problem is likely to be that the XML serializer doesn't realize that there are certain HTML tags that cannot be self-closing (and <script> is the only one I know of of-hand). As far as XML is concerned, <script></script> (with no child elements) is equivalent to <script/>, so this behavior is completely acceptable. But since this is really HTML, those rules sometimes don't apply.\n\nHave you tried using application/xhtml+xml as your content type? If you do that, the browser might use an XML parsed instead of an HTML parser, *and* you are likely to get the benefit of using avoiding a \"quirks\" rendering more and instead use a standards-compliant parser *and* renderer.", "is_private": false, "id": 183881, "creator": "chris@christopherschultz.net", "time": "2015-07-03T17:46:48Z", "bug_id": 58095, "creation_time": "2015-07-03T17:46:48Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 58095, "is_private": false, "count": 4, "id": 183912, "time": "2015-07-06T20:15:43Z", "creator": "markt@apache.org", "creation_time": "2015-07-06T20:15:43Z", "text": "JSP documents have to be well-formed XML. If you use tags from another namespace then there is an assumption that they follow the rules for XML. If they don't then you'll need to work-around it. The approach Chris suggests is probably the easiest in this case but you can also use CDATA blocks if you wish."}, {"count": 5, "tags": [], "bug_id": 58095, "text": "Thanks for the input.\n\nRegarding Content-Type: Jasper sets the content type in the generated source file by itself, i.e:\n\n     response.setContentType(\"text/xml;charset=UTF-8\");\n\nI havent been able to confirm if it even makes a difference... at this time we've been employing the workaround across many of our jsp documents.\n\nWe have also similar found issues with a self-closing <form> tag.  \n\nWe worked around it the same way as above.  Ideally, I suppose, it would be possible to instruct Jasper to not coalesce tags vs.", "id": 183961, "time": "2015-07-08T15:25:32Z", "creator": "jonesgav@oildex.com", "creation_time": "2015-07-08T15:25:32Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 58095, "attachment_id": null, "text": "(In reply to jonesgav from comment #5)\n> We have also similar found issues with a self-closing <form> tag.  \n\nI'm pretty sure a form with no child elements is not legal anyway.\n\n> We worked around it the same way as above.  Ideally, I suppose, it would be\n> possible to instruct Jasper to not coalesce tags vs.\n\nOr you could use .jsp instead of .jspx, right? They are slightly different beasts.", "id": 183963, "time": "2015-07-08T17:16:58Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-07-08T17:16:58Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 58095, "attachment_id": null, "is_private": false, "id": 184665, "time": "2015-08-19T20:26:36Z", "creator": "kcboyes@gmail.com", "creation_time": "2015-08-19T20:26:36Z", "text": "I've played around with basic.jspx from the examples webapp.\nIf you recall, it sets the content-type to be application/xhtml+xml.\nWhen I add a <script> tag with an empty body the output gets the self-closing tag the page renders fine.\nMy test was pretty limited given that I used one browser (chrome) for my testing.\n\nSo, it seems that setting the content type may be a good solution when possible.\n\nAs I was saying over on the user mailing list\n(http://mail-archives.apache.org/mod_mbox/tomcat-users/201508.mbox/%3CCADAecHWXdqy50jGdZfo43fzEOX6ZVKab27ZEJaMVMrHjWYUFOQ@mail.gmail.com%3E)\nI'm in the middle of migrating a large (and fairly old) code base from weblogic to tomcat.\nThe generator used by WL didn't collapse the empty <script> tags so it hadn't been a problem.\nIt also allowed us to write some incorrect code that we've been cleaning up as we progress with the migration to tomcat.\n\nIn response to the comments in this bug and my email to the user list,\nI've recently tried to change our application so that the content type is xhtml+xml but it was difficult and didn't work.\nIt was easier in the end to change all of the empty <script> tags to have comments.\nWe also found that empty <div> and <span> tags could cause problems so we've added comments to those as well.\n\nBut that leaves us vulnerable.  If a developer doesn't understand the issue and \"cleans up\" code then things will break.\nWe've tried to make it clear by saying <script>//do not remove</script> but that only goes so far.\nWe also had to put in special cases to our minification process to not strip those comments.\nFinally, as a minor issue, it increases the size of the response going back to the client.\n\nI'm proposing a patch that works around those problems.\nIt's a simple patch that will write out a closing tag when there is no body and we're producing text/html.\nIf the content type is anything else it will continue to produce the self-closing tags."}, {"count": 8, "tags": [], "bug_id": 58095, "attachment_id": 33019, "id": 184666, "time": "2015-08-19T20:27:46Z", "creator": "kcboyes@gmail.com", "creation_time": "2015-08-19T20:27:46Z", "is_private": false, "text": "Created attachment 33019\nPatch"}]
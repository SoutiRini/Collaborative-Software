[{"count": 0, "tags": [], "creator": "Gorowitch@yahoo.com", "text": "testsuite test using the junit task.\n\nWhen I execute the tasks step by step they work just fine.\n\nso \n\tant\tcompilepackage\t// compiles the source files including the unit \ntests.\nand\n\tant \ttestpackage\t\t// starts up the unit tests.\n\nSo this works fine.\n\nWhen I use\n\tant\ttestpackage\n\nAnt smoothly starts executing the compilepackage target, but my unit test fails \n(Apparently because the file AllTests.class which I use to group my tests does \nnot exist. But that file certainly should exist since it should be created by \nthe compilepackage target.\n\nSo to summarize the problem:\n\nThe JUnit task appears to be started before the files that should be created by \nthe preceding Javac task are created. \n\nEither\n\tJUnit starts looking for the files it needs before the Javac task has \nended. \nOr\n\tThe files aren't visible at the moment JUnit starts ( in this case this \nwould be an NT-related problem)\n\nAre there any known workarounds ? \n\nKind regards,\nSven.", "id": 8531, "time": "2001-12-03T07:28:58Z", "bug_id": 5241, "creation_time": "2001-12-03T07:28:58Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 5241, "attachment_id": null, "is_private": false, "id": 8925, "time": "2001-12-14T08:02:58Z", "creator": "bodewig@apache.org", "creation_time": "2001-12-14T08:02:58Z", "text": "If you change the junit task to run with fork=\"true\", does that change anything."}, {"count": 2, "tags": [], "bug_id": 5241, "attachment_id": null, "is_private": false, "id": 8962, "time": "2001-12-17T01:00:12Z", "creator": "Gorowitch@yahoo.com", "creation_time": "2001-12-17T01:00:12Z", "text": "Here's a target scetch that should help to reconstruct the problem. Always start \nfrom a clean build to test this. This works when run twice !!!\n\n<target name=\"mytarget\" depends=\"init\">\n  <sequential>\n    <!--\n      The command below also compiles the source mypackage.AllTests.java \n    -->\n    <javac srcdir=\"${src}\" destdir=\"${build}\" \nincludes=\"mypackage/${sourcefiles}\"/>\n\t\n    <junit haltonfailure=\"yes\" fork=\"no\">\n      <formatter type=\"xml\" />\n      <test name=\"mypackage.AllTests\" todir=\"${testresult}\"/>\n    </junit>\n  </sequential>\n</target>\n\nNote: Putting fork to yes and setting the classpath explicitly seems to solve \nthe problem.\n"}, {"count": 3, "attachment_id": null, "bug_id": 5241, "is_private": false, "id": 10767, "time": "2002-02-15T17:23:31Z", "creator": "bodewig@apache.org", "creation_time": "2002-02-15T17:23:31Z", "tags": [], "text": "A guess:\n\nAllTests.class is in a directory that is on your CLASSPATH, this directory\ndoes not exist when you start Ant, but is created by a target compilepackage\ndepends upon.\n\nIf I'm correct, then the JVM removes the directory from the CLASSPATH before it\nstarts Ant (JDK 1.3+ shows this behaviour) - so AllTests.class is effectively\nnot on your CLASSPATH.  The forked <junit> task gets a fresh VM and this time\naround the directory gets not removed, as it is there - therefore the tests get \nrun.\n\nYou could create the directory before you start Ant, or you could use a nested\n<classpath> element in your <junit> task that points to the created directory\n- or you could stick to a forked junit execution."}, {"count": 4, "tags": [], "bug_id": 5241, "attachment_id": null, "is_private": false, "id": 12691, "time": "2002-04-02T14:49:46Z", "creator": "bodewig@apache.org", "creation_time": "2002-04-02T14:49:46Z", "text": "Ping."}]
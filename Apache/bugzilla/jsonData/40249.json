[{"count": 0, "tags": [], "creator": "ryan@thebookhauler.com", "text": "I had an Out of Memory exception from the replace task (I was trying to do a\nreplace on a huge file).  I'll log a separate bug that replace can't work on an\naribtrarily large file.\n\nThe issue here is that the stack trace I got was removed because when ant\ncatches an exception, it tries to create new objects which causes more\nOutOfMemory exceptions.  When the new OutOfMemoryExceptions are created, the\noriginal exception is lost.\n\nHere's the stack trace that I received when I ran \"ant -v <mytarget>\":\ndb-import:\n  [replace] Replacing in\nC:\\projects\\bookhauler\\trunk\\bookhauler\\out\\data\\rsshill_bhProd3.sql: $db.name\n--> rsshill_bhDev\nError was: Java heap space\n  [antcall] Exiting C:\\projects\\bookhauler\\trunk\\bookhauler\\build.xml.\nC:\\projects\\bookhauler\\trunk\\bookhauler\\build.xml:481:\njava.lang.OutOfMemoryError: Java heap space\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1227)\n        at\norg.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)\n        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1217)\n        at\norg.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)\n        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1217)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1186)\n        at\norg.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.Main.runBuild(Main.java:668)\n        at org.apache.tools.ant.Main.startAnt(Main.java:187)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:246)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:67)\nCaused by: java.lang.OutOfMemoryError: Java heap space\n--- Nested Exception ---\njava.lang.OutOfMemoryError: Java heap space\nFound exception java.lang.OutOfMemoryError: Java heap space\n  [antcall] Exiting C:\\projects\\bookhauler\\trunk\\bookhauler\\build.xml.\nC:\\projects\\bookhauler\\trunk\\bookhauler\\build.xml:481:\njava.lang.OutOfMemoryError: Java heap space\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1227)\n        at\norg.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)\n        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1217)\n        at\norg.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)\n        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1217)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1186)\n        at\norg.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.Main.runBuild(Main.java:668)\n        at org.apache.tools.ant.Main.startAnt(Main.java:187)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:246)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:67)\nCaused by: java.lang.OutOfMemoryError: Java heap space\n--- Nested Exception ---\njava.lang.OutOfMemoryError: Java heap space\nFound exception java.lang.OutOfMemoryError: Java heap space\n\nBUILD FAILED\nC:\\projects\\bookhauler\\trunk\\bookhauler\\build.xml:481:\njava.lang.OutOfMemoryError: Java heap space\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1227)\n        at\norg.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)\n        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1217)\n        at\norg.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:37)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:382)\n        at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:107)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1217)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1186)\n        at\norg.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1069)\n        at org.apache.tools.ant.Main.runBuild(Main.java:668)\n        at org.apache.tools.ant.Main.startAnt(Main.java:187)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:246)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:67)\nCaused by: java.lang.OutOfMemoryError: Java heap space\n--- Nested Exception ---\njava.lang.OutOfMemoryError: Java heap space\n\nTotal time: 18 seconds", "id": 92201, "time": "2006-08-14T13:53:47Z", "bug_id": 40249, "creation_time": "2006-08-14T13:53:47Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Isn't this true for Java in general?  OOMEs are encountered due to cumulative\neffects and the proverbial straw that breaks the camel's back is likely to be a\ndifferent culprit from one run to the next.  Do you have an exceptionally large\nbuild?  Are you using custom tasks, etc.?  You can try forking certain things,\ne.g. <javac>, <java>, etc.  You can increase the total memory available to your\nAnt JVM with -X JVM options...", "attachment_id": null, "bug_id": 40249, "id": 92206, "time": "2006-08-14T14:46:27Z", "creator": "mbenson@apache.org", "creation_time": "2006-08-14T14:46:27Z", "is_private": false}, {"count": 2, "tags": [], "text": "I don't have any custom tasks and my build file is 600 lines long (although all\nof the targets that got executed were all within a 140 line block).  I'm using\n-Xmx512M (on a machine with only 1GB of physical ram, although plenty of virtual\nmemory).  \n\nThe last line number in the ant version of the stack trace shows the antcall to\nthe target that had the actual exception.  After using echos to figure out where\nthe build was really failing, it turns out that it was when I was using the\nreplace task on an 86 MB file. I was trying to rebuild my development database.\n The only tasks I called before the replace were sql, mkdir, copy, echo and\nproperty. \n\nI managed to get around this by using -Xmx1024M which is a little rediculous,\nbut hey - a guy's got deadlines.", "attachment_id": null, "bug_id": 40249, "id": 92223, "time": "2006-08-15T13:10:15Z", "creator": "ryan@thebookhauler.com", "creation_time": "2006-08-15T13:10:15Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 40249, "attachment_id": null, "text": "So in this case the cause for the OOME was not \"near impossible\" to find, as you\nfound it with some fairly simple debugging steps, right?  ;)  I stand by my\nprevious characterization of OOMEs in general, however.  Since you submitted the\n<replace> bug separately as bug 40250 I will leave this one to its generic\ninterpretation (OOMEs in general), but don't know what we could really do to\nmake detecting their causes easier.", "id": 92225, "time": "2006-08-15T13:41:26Z", "creator": "mbenson@apache.org", "creation_time": "2006-08-15T13:41:26Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 40249, "text": "Google for -XX:+HeapDumpOnOutOfMemoryError and jhat. All will be revealed. :-)", "id": 92315, "time": "2006-08-17T19:50:51Z", "creator": "jglick@apache.org", "creation_time": "2006-08-17T19:50:51Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "ryan@thebookhauler.com", "text": "I don't mean to be rude, but it did take me a couple of hours to figure out what\nshould have been obvious if the stack trace had been correct.\n\nIf this is a really difficult bug to fix, then the current status is correct. \nOn the other hand, having if it's not, then having exception handling code throw\nexceptions that obstruficate the original exception makes ANT a lot harder to\nwork with.\n\nPerhaps I'm just being difficult - I got burned wasting a lot of time trying to\nfigure out something that may have been obvious if I was using the right tools,\nas Jesse pointed out.  This is my last post on the subject - promise.", "id": 92334, "time": "2006-08-18T13:13:58Z", "bug_id": 40249, "creation_time": "2006-08-18T13:13:58Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "mbenson@apache.org", "text": "(In reply to comment #5)\n> I don't mean to be rude, but it did take me a couple of hours to figure out what\n> should have been obvious if the stack trace had been correct.\n> \n> If this is a really difficult bug to fix, then the current status is correct. \n> On the other hand, having if it's not, then having exception handling code throw\n> exceptions that obstruficate the original exception makes ANT a lot harder to\n> work with.\n> \n> Perhaps I'm just being difficult - I got burned wasting a lot of time trying to\n> figure out something that may have been obvious if I was using the right tools,\n> as Jesse pointed out.  This is my last post on the subject - promise.\n\nThat's not necessarily the best thing.  If you believe there really IS some way\nin which the Ant code could be modified to alleviate some of the difficulties of\ncoping with such a situation, we would definitely be interested.  I didn't get\nthat from this bug report until your last comment.  If this is correct, maybe\nthe OOME is not the important/operative issue and rather the exception\npropagation from <antcall> is.  If this is correct I would encourage you to:\n\na) assemble a small build example that exhibits the problem.\nb) open a new bug report, referencing this one, and attaching the example\ncreated in step (a).\n\nbr,\nMatt", "id": 92336, "time": "2006-08-18T13:42:54Z", "bug_id": 40249, "creation_time": "2006-08-18T13:42:54Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "text": "Hey, its ok to be pissed off with tool that dont work right. Why else would new\nones be written.\n\nPresumably the problem is we cannot create a new BuildException with stack trace.\n\noptions\n -catch OOME and handle by printing out current fault, saying set ANT_OPTS to\n-XX whatever\n\n -preallocate an emergency buffer and delete all references to it then force a\nsystem.gc before creating a buildexception.\n\nI've not done the latter on a java app, though it takes me back to some C++\nemergency heap management code. Its a dog to test.", "id": 92360, "time": "2006-08-19T21:43:15Z", "bug_id": 40249, "creation_time": "2006-08-19T21:43:15Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "creator": "martin.rexa@centrum.cz", "is_private": false, "id": 125956, "time": "2009-04-02T11:06:37Z", "bug_id": 46957, "creation_time": "2009-04-02T11:06:37Z", "tags": [], "text": "During investigation of memory leaks in our web-application I was checking heap using jhat and I found that the biggest memory leak is caused by tomcat itself. Heap contain big amount of instances of class PageContextImpl (over 1000). These instances reference JspWriterImpl (property baseOut) which reference huge buffer (property cb which in our case has 1MB size - in total these buffers use over 1GB).\nThis situation happens during big load, my understanding (might be wrong) of the situation is that pool containing Page Contexts is not big enough which causes bigger number of page contexts being created and then released. But most of them stay referenced by jsp classes via tag handlers so they can't be garbage collected.\n\nPartial fix could be done in method org.apache.jasper.runtime.TagHandlerPool.reuse(Tag handler)\nadding following code line at the begining of the method:\nhandler.setPageContext(null);\n\nThis fixes simple jsp like this:\n\n<%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\n<c:if test=\"${true}\">\n   Test message\n</c:if>\n\nI've tested this patch and checked via jhat, reference is removed. But the problem still remains for jsp with nested tags. My guess is that some fix should be done in part generating servlet code from JSP to remove all references to Page Context once the servlet finishes it's service method."}, {"count": 1, "tags": [], "bug_id": 46957, "text": "Take a look in the docs for\norg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER\n\nIf you need more information about this setting, please use the users list.", "id": 126078, "time": "2009-04-08T04:15:06Z", "creator": "markt@apache.org", "creation_time": "2009-04-08T04:15:06Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "martin.rexa@centrum.cz", "text": "I know about the LIMIT_BUFFER option but I don't like it. My intention is to decrease time spent on Garbage Collection but the LIMIT_BUFFER=true seems to do exactly opposite - my understanding is that it would mean allocation and releasing big buffer basically on every request.\n\nI don't think the report is invalid, JSP servlet has intention to release the page context at the end. And the fact that big number of page contexts hang up in the memory after being released only because of references from tag handlers is something that should be fixed - no matter whether each such page context references 1MB buffer or not. And I think the fix should not be that hard - it should be just about removing reference between tag handlers and page contexts after tag handler does the job (as I see in the code whenever tag handler starts doing it's job first thing done is setting page context and parent).\n\nI'll try to create test webapplication, jmeter based test scenario and jhat oql statements showing the problem.", "id": 126083, "time": "2009-04-08T05:11:58Z", "bug_id": 46957, "creation_time": "2009-04-08T05:11:58Z", "tags": [], "is_private": false}]
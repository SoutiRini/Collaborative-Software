[{"count": 0, "tags": [], "bug_id": 47960, "attachment_id": null, "id": 130962, "time": "2009-10-08T00:26:30Z", "creator": "herijunk@gmx.ch", "creation_time": "2009-10-08T00:26:30Z", "is_private": false, "text": "The appender tag of xml configuration allows formally to be like that:\n\n    <appender name=\"STANDARD_APPENDERS\" class=\"\">\n        <appender-ref ref=\"CONSOLE.ERR\"/>\n        <appender-ref ref=\"CONSOLE.OUT\"/>\n        <appender-ref ref=\"FILE\"/>\n    </appender>\n\nAccording to DTD:\n\n<!ELEMENT appender (errorHandler?, param*, layout?, filter*, appender-ref*)> <!ATTLIST appender\n  name          ID      #REQUIRED\n  class         CDATA   #REQUIRED\n>\n\nThe current implementation of log4j (1.2.15) cannot resolve such a construct (empty class attribute -> ClassNotFountException)\n\nMy propsal:\n1. Allow an empty class attribute if the children are only appender-ref elements.\n2. Resolve a reference to such an appender declaration like there would be all three appender-ref's (in logger or other appender declarations)."}, {"count": 1, "tags": [], "bug_id": 47960, "attachment_id": null, "text": "I wrote this reply after a similar posting on log4j-user after a related post.  However, I can't find my reply in the archive, so maybe it did not get there:\n\n\nOn Sep 29, 2009, at 8:56 PM, Curt Arnold wrote:\n\nI believe it is only used by AsyncAppender and similar appenders that encapsulate another appender.\n\n<appender class=\"org.apache.log4j.AsyncAppender\">\n\t<appender-ref ref=\"console\"/>\n</appender>\n\nIf you want to reuse configuration fragments, you can use the external entity facility of XML to include any arbitrary XML content from another file.  It doesn't work with earlier log4j's, but should work with anything from the last few years.\n\n<!DOCTYPE log4j:configuration [\n<!ENTITY boilerplate SYSTEM 'boilerplate.xml'>\n]>\n<log4j:configuration....>\n&boilerplate;\n</log4j:configuration>\n\nThe following are new comments:\n\n\nThere are multiple places where the DOMConfiguration expects to resolve a appender name and get a single Appender back.  Rewriting DOMConfigurator to handle an array of appenders or some similar structure would be a significant modification and may pose compatibility issues.\n\nIf it were to be done, the easiest way to implement would be to create a CompositeAppender that would delegate to the nested appenders.  However, except for the magic of interpreting a blank class name as CompositeAdapter,  you could accomplish the same objective by just writing the CompositeAdapter and specifying its class name.", "id": 130979, "time": "2009-10-08T06:37:52Z", "creator": "carnold@apache.org", "creation_time": "2009-10-08T06:37:52Z", "is_private": false}, {"count": 2, "tags": [], "creator": "herijunk@gmx.ch", "attachment_id": null, "id": 130984, "time": "2009-10-08T08:04:46Z", "bug_id": 47960, "creation_time": "2009-10-08T08:04:46Z", "is_private": false, "text": "Thanks for the clarifications and suggenstions.\nIf I have time I will look how difficult it would be to implement such a CompositeAppender. \nBTW: The question one week ago on the users list was also from me. But I did never see any response to it."}, {"count": 3, "tags": [], "bug_id": 47960, "attachment_id": 24365, "id": 131001, "time": "2009-10-08T15:44:00Z", "creator": "herijunk@gmx.ch", "creation_time": "2009-10-08T15:44:00Z", "is_private": false, "text": "Created attachment 24365\ncontribution CompositeAppender, incl. testcase\n\nnew implementation of and testcase for CompositeAppender"}, {"count": 4, "tags": [], "creator": "herijunk@gmx.ch", "attachment_id": null, "is_private": false, "id": 131002, "time": "2009-10-08T15:54:02Z", "bug_id": 47960, "creation_time": "2009-10-08T15:54:02Z", "text": "I have implemented a new CompositeAppender (in fact copied the AsynchAppender and deleted unnecessary code).\nDOMConfigurator enhanced: empty class attribute is now expanded to new CompositeAppender. Check, if the childs of a CompositeAppender are all appender-ref. Otherwise continue on the loop like it does on other unresolved children.\nDOMTestCase enhanced by a new test testComposite(), along with new test resource files input/xml/DOMTestCaseCompositeAppender.xml (based on input/xml/DOMTestCase1.xml), witness/dom.A1.composite (based on witness/dom.A1.1) and witness/dom.A2.1 (based on witness/dom.A2.composite). \nThe testcase nearly succeeded: Only the written stacktraces had two more lines, compared to the witness file. Also the existing tests showed this behaviour. I suppose this is due an inconsistence in my developement environment (I ran the tests within eclipse, JDK 1.4) and not because something is wrong implemented.\n\nCodeBase: Trunk, Revision 823021\nAll my changes are marked with \" // CHa Heri Bender (CompositeAppender)\"\n\nHope you will enjoy my contribution and add it to the repository.\n\nHeri"}]
[{"count": 0, "text": "FAQ says:\n\"Because the configureAndWatch launches a separate wathdog thread, and because there is no way to stop this thread in log4j 1.2, the configureAndWatch  method is unsafe for use in J2EE envrironments where applications are recycled.\"\n\nHowever in HA production J2EE environment it is crucial to have possiblity to change logging settings (mainly LEVEL) without restarting server.\nTo simply achieve this:\n- add option to configuration file: watchDelay=<miliseconds>\n- if watchDelay is declared log4j watches for changes in configuration file.\n- skip idea of watchDog and check directly inside calls of logger.debug/info that there is a need to reload configuration file - by this, it will be 100% safe in J2EE.", "bug_id": 49571, "is_private": false, "id": 138270, "time": "2010-07-08T04:52:40Z", "creator": "tomaszbechm@gmail.com", "creation_time": "2010-07-08T04:52:40Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "dtn-asfbugs@corefiling.co.uk", "attachment_id": null, "id": 150266, "time": "2011-10-06T16:26:08Z", "bug_id": 49571, "creation_time": "2011-10-06T16:26:08Z", "is_private": false, "text": "I've implemented a workaround in my J2EE app which involves subclassing FileWatchdog and adding a shutdown() method to interrupt its thread at application undeploy/shutdown.\n\nSince our app already calls LogManager.shutdown() when undeployed (and this seems like the right thing to do in order to ensure appenders close() methods etc. are called), I'd favour addressing this bug by making the thread spawned by configureAndWatch be shut down as part of LogManager.shutdown()."}, {"count": 2, "tags": [], "bug_id": 49571, "attachment_id": null, "is_private": false, "id": 150267, "time": "2011-10-06T16:29:35Z", "creator": "dtn-asfbugs@corefiling.co.uk", "creation_time": "2011-10-06T16:29:35Z", "text": "To expand a little on comment 1 ... the solution proposed in comment 0 would work, but it seems more risky to victimize a random log.debug/info call to do the work of checking if the config has changed and reloading it, since this may unexpectedly slow down whatever part of my app called the logger (and in the worst case, an exception might be raised as part of doing some logging). Polling for and applying log4j config changes is exactly the sort of thing a background thread should be used for; we just need to ensure that log4j makes an effort to shut down any threads it has started when LogManager.shutdown is called."}, {"count": 3, "tags": [], "creator": "mpassell@grovehillsoftware.com", "attachment_id": null, "id": 152962, "time": "2012-01-19T23:42:19Z", "bug_id": 49571, "creation_time": "2012-01-19T23:42:19Z", "is_private": false, "text": "Any new thoughts on this? I'd also like to be able to stop the watchdog thread as part of LogManager.shutdown(). Newer versions of Tomcat highlight resources that haven't been cleaned up as a webapp is unloaded and it would be nice to be able to clean up the watchdog thread. Another issue (https://issues.apache.org/bugzilla/show_bug.cgi?id=50486) addressed a similar problem with MDC.clear()."}]
[{"count": 0, "text": "Created attachment 34454\nJMX file to benchmark insertion throughput of SQL Databases\n\nHi,\n\nI update from JMeter 2.11 to JMeter 3.0 and faced issues with the JDBC Sampler.\n\nI execute as many insertion queries as possible against different databases to measure their throughput. Switching to JMeter 3 decreased the throughput by 2 on different databases.\n\nFor example, on H2, I had 7000 inserts/sec; now I'm around 3500 i/s.\n\nIn the bug 58786, there is a discussion about performance regression but the patch has been merged, so I guess there is a workaround, but I didn't find it.\n\nI attached a jmx file. You can notice that I set the poolMax to 1 instead of 10, but it does not solve the problem.\n\nHow can work around this issue?\n\nRegards", "creator": "thomas.peyrard@outlook.com", "attachment_id": 34454, "id": 195035, "time": "2016-11-16T15:08:44Z", "bug_id": 60382, "creation_time": "2016-11-16T15:08:44Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 60382, "is_private": false, "id": 195043, "time": "2016-11-16T17:04:00Z", "creator": "thomas.peyrard@outlook.com", "creation_time": "2016-11-16T17:04:00Z", "tags": [], "text": "I also noticed big issues with logging. Some runs might need more Xmx to avoid issues.\n\nBelow is a stack trace of a run of 10 minutes where executing the query takes 1% (not shown) and logging 36,47% and closing connection 43,64%!\n__________________________________________________________________________________________________________________________________________________________________________________\nStack Trace\tSample Count\tPercentage(%)\njava.lang.Thread.run()\t3 658\t98,972\n   org.apache.jmeter.threads.JMeterThread.run()\t3 658\t98,972\n      org.apache.jmeter.threads.JMeterThread.processSampler(Sampler, Sampler, JMeterContext)\t3 541\t95,806\n         org.apache.jmeter.threads.JMeterThread.executeSamplePackage(Sampler, TransactionSampler, SamplePackage, JMeterContext)\t3 541\t95,806\n            org.apache.jmeter.threads.JMeterThread.runPreProcessors(List)\t1 889\t51,109\n               org.apache.jmeter.protocol.jdbc.processor.JDBCPreProcessor.process()\t1 736\t46,97\n                  org.apache.jmeter.protocol.jdbc.processor.AbstractJDBCProcessor.process()\t1 736\t46,97\n                     org.apache.jmeter.protocol.jdbc.AbstractJDBCTestElement.close(Connection)\t1 613\t43,642\n                        org.apache.commons.dbcp2.PoolingDataSource$PoolGuardConnectionWrapper.close()\t1 613\t43,642\n                           org.apache.commons.dbcp2.DelegatingConnection.close()\t1 613\t43,642\n                              org.apache.commons.dbcp2.DelegatingConnection.closeInternal()\t1 612\t43,615\n                                 org.apache.commons.dbcp2.PoolableConnection.close()\t1 611\t43,588\n                                    org.apache.commons.pool2.impl.GenericObjectPool.returnObject(Object)\t1 607\t43,479\n                                       org.apache.commons.pool2.impl.BaseGenericObjectPool.swallowException(Exception)\t1 348\t36,472\n                                          org.apache.commons.dbcp2.SwallowedExceptionLogger.onSwallowException(Exception)\t1 348\t36,472\n                                             org.apache.commons.logging.impl.LogKitLogger.warn(Object, Throwable)\t1 333\t36,066\n                                                org.apache.log.Logger.warn(String, Throwable)\t1 333\t36,066\n                                                   org.apache.log.Logger.output(Priority, String, Throwable)\t1 332\t36,039\n                                                      org.apache.log.Logger.output(LogEvent)\t1 327\t35,904\n                                                         org.apache.log.Logger.fireEvent(LogEvent, LogTarget[])\t1 327\t35,904\n                                                            org.apache.log.output.AbstractTarget.processEvent(LogEvent)\t1 327\t35,904\n                                                               org.apache.log.output.AbstractOutputTarget.doProcessEvent(LogEvent)\t1 327\t35,904\n                                                                  org.apache.log.output.io.WriterTarget.write(String)\t753\t20,373\n                                                                     java.io.Writer.write(String)\t732\t19,805\n                                                                        java.io.OutputStreamWriter.write(String, int, int)\t732\t19,805\n                                                                           sun.nio.cs.StreamEncoder.write(String, int, int)\t732\t19,805\n                                                                              sun.nio.cs.StreamEncoder.write(char[], int, int)\t673\t18,209\n                                                                                 sun.nio.cs.StreamEncoder.implWrite(char[], int, int)\t668\t18,074\n                                                                                    java.nio.charset.CharsetEncoder.encode(CharBuffer, ByteBuffer, boolean)\t666\t18,019\n                                                                                       sun.nio.cs.SingleByte$Encoder.encodeLoop(CharBuffer, ByteBuffer)\t666\t18,019\n                                                                                          sun.nio.cs.SingleByte$Encoder.encodeArrayLoop(CharBuffer, ByteBuffer)\t655\t17,722\n                                                                                             sun.nio.cs.SingleByte.access$000(CoderResult, Buffer, int, Buffer, int)\t1\t0,027\n_____________________________________________________________________________________________________________________________________________________________________________________\n\nLooking at the logkit.xml file, I can see it still references excalibur, is expected?\n...  \n <factory type=\"file\" class=\"org.apache.avalon.excalibur.logger.factory.FileTargetFactory\"/>\n..."}, {"count": 2, "tags": [], "bug_id": 60382, "attachment_id": null, "id": 195044, "time": "2016-11-16T17:20:56Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-11-16T17:20:56Z", "is_private": false, "text": "Please retry with current nightly (or 3.1 RC3). 3.0 had a problem with caching the connections from the pool.\n\nYou might also try (with current nightly or RC) to set an empty validation query and see if that helps a bit further."}, {"count": 3, "tags": [], "text": "I built from the code and give it a try. It seems better.\n\nI'll run all my tests during the night.", "attachment_id": null, "id": 195045, "creator": "thomas.peyrard@outlook.com", "time": "2016-11-16T18:10:25Z", "bug_id": 60382, "creation_time": "2016-11-16T18:10:25Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 60382, "is_private": false, "id": 195064, "time": "2016-11-17T17:36:21Z", "creator": "thomas.peyrard@outlook.com", "creation_time": "2016-11-17T17:36:21Z", "tags": [], "text": "JMeter 3.1 as of HEAD of 16th of November solved my issue on my dev machine (12 cores) but did not at all on my VM Server (4 cores).\n\nI don't see any error in JMeter logs. \nI'll try to attach a profiler to see where the difference could from. But the dbcp2 pool seems to behave really differently from Excalibur and involves some issue on my side :/"}, {"count": 5, "text": "Created attachment 34460\nCreate sample data to be used with the testplan\n\nThe testplan needs input data. I have guessed, what the data should look like and created a perl script, that generates that data (probably a bit too much).\n\nWith that data and profiling with jmc (with oracle java 8) by using:\n\nexport JVM_ARGS=\"-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:StartFlightRecording=duration=60s,filename=recordings_v2_13.jfr\"\n/bin/jmeter -t /tmp/dbcp2-test/test-dbcp2.jmx -l /tmp/dbcp2-test/test-dbcp2_v3_1.jtl -j /tmp/dbcp2-test/test-dbcp2_v3_1.log -n -Jdb_url=\"jdbc:h2:mem:\" -Jdb_class=org.h2.Driver -Jclient_data_dir=/tmp/dbcp-test2\n\nI created a bit of profiling data and looking at it, saw that you are suffering from the removal of the prepared statement cache. H2 will spent 20% of the whole cpu cycles parsing the prepared statements.\n\nModern jdbc driver should be able to cache those statements on their own. Are you using H2 in production as well? Could you test whether you have the same problems with your production db?", "creator": "felix.schumacher@internetallee.de", "attachment_id": 34460, "id": 195082, "time": "2016-11-19T13:25:35Z", "bug_id": 60382, "creation_time": "2016-11-19T13:25:35Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 60382, "attachment_id": null, "id": 195102, "time": "2016-11-21T09:48:46Z", "creator": "thomas.peyrard@outlook.com", "creation_time": "2016-11-21T09:48:46Z", "is_private": false, "text": "Thanks for the test and profiling.\n\nI got the same results when profiling H2 driver. I don't use H2 in production, it's used in our benchmark/monitoring framework to spot regression either of client or the database or out framework.\n\nOur users cache prepared statements in their application, so we are the only one to face regression with JMeter 3.1 :)\n\nI'll either change H2 for another DB or try another driver.\n\nFor information, data / queries come from TPC-H.\n\nRegards,\nThomas"}, {"count": 7, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "is_private": false, "text": "Hello,\nCan we close this bug or do you have more things in mind ?\nThanks", "id": 195349, "time": "2016-12-04T13:37:06Z", "bug_id": 60382, "creation_time": "2016-12-04T13:37:06Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "yes we can close it.", "attachment_id": null, "id": 195356, "creator": "thomas.peyrard@outlook.com", "time": "2016-12-05T11:18:58Z", "bug_id": 60382, "creation_time": "2016-12-05T11:18:58Z", "is_private": false}]
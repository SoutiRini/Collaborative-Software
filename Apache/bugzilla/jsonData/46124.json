[{"count": 0, "tags": [], "bug_id": 46124, "attachment_id": null, "id": 122007, "time": "2008-10-29T15:47:41Z", "creator": "schui@tririga.com", "creation_time": "2008-10-29T15:47:41Z", "is_private": false, "text": "When a user tries to remove an animation node, the removeAnimation function fails to remove the associated \"animation sandwich\" object that left in the TargetInfo.otherAnimations internal storage. The sandwich is referring to a 'null' animation which cause null pointer exception when the viewer tries to execute all animations against the target element.\n\n========= Here is the exception ===========\njava.lang.NullPointerException\n\tat org.apache.batik.anim.AnimationEngine.tick(AnimationEngine.java:389)\n\tat org.apache.batik.bridge.SVGAnimationEngine.access$601(SVGAnimationEngine.java:99)\n\tat org.apache.batik.bridge.SVGAnimationEngine$AnimationTickRunnable.run(SVGAnimationEngine.java:859)\n\tat org.apache.batik.util.RunnableQueue.run(RunnableQueue.java:237)\n\tat java.lang.Thread.run(Unknown Source)\n\n========== Here is a test case ============\n\tvar activeElement = svgDoc.getElementById(\"theElement\");\n        var anim = svgDoc.createElementNS(\"http://www.w3.org/2000/svg\", \"animateMotion\");\n        anim.setAttributeNS(null, \"id\", \"1\");\n        anim.setAttributeNS(null, \"dur\", \"1\");\n        anim.setAttributeNS(null, \"path\", \"m 0, 0 L 0, 5\");\n       \tanim.setAttributeNS(null, \"begin\", \"indefinite\");\n       \tanim.setAttributeNS(null, \"fill\", \"freeze\");\n       \tactiveElement.appendChild(anim);\n       \t\n       \tvar anim2 = svgDoc.createElementNS(\"http://www.w3.org/2000/svg\", \"animate\");\n        anim2.setAttributeNS(null, \"id\", \"2\");\n        anim2.setAttributeNS(null, \"dur\", \"1\");\n        anim2.setAttributeNS(null, \"values\", \"0;26;51;76;102\");\n        anim2.setAttributeNS(null, \"attributeName\", \"x\");\n       \tanim2.setAttributeNS(null, \"begin\", \"indefinite\");\n       \tanim2.setAttributeNS(null, \"fill\", \"freeze\");\n       \tactiveElement.appendChild(anim2);\n       \t\n       \tactiveElement.removeChild(anim);\n       \t\n       \tanim2.beginElement();\n\n=========== here is the purposed solution ==============\n    protected Sandwich removeSandwich(AnimationTarget target, short type,\n\t\t\tString ns, String an) {\n\t\tTargetInfo info = getTargetInfo(target);\n\t\tSandwich sandwich;\n\t\tif (type == ANIM_TYPE_XML) {\n\t\t\tsandwich = (Sandwich) info.xmlAnimations.remove(ns, an);\n\t\t} else if (type == ANIM_TYPE_CSS) {\n\t\t\tsandwich = (Sandwich) info.cssAnimations.remove(an);\n\t\t} else {\n\t\t\tsandwich = (Sandwich) info.otherAnimations.remove(an);\n\t\t}\n\t\treturn sandwich;\n\t}\n\n    public void removeAnimation(AbstractAnimation anim) {\n         timedDocumentRoot.removeChild(anim.getTimedElement());\n        AbstractAnimation nextHigher = anim.higherAnimation;\n        if (nextHigher != null) {\n            nextHigher.markDirty();\n        }\n        moveToBottom(anim);\n        if (anim.higherAnimation != null) {\n            anim.higherAnimation.lowerAnimation = null;\n        }\n        AnimationInfo animInfo = getAnimationInfo(anim);\n        Sandwich sandwich = getSandwich(animInfo.target, animInfo.type,\n                                        animInfo.attributeNamespaceURI,\n                                        animInfo.attributeLocalName);\n        if (sandwich.animation == anim) {\n            sandwich.animation = null;\n            sandwich.lowestAnimation = null;\n            sandwich.shouldUpdate = true;\n            removeSandwich(animInfo.target, animInfo.type,\n                                        animInfo.attributeNamespaceURI,\n                                        animInfo.attributeLocalName);\n        }\n    }"}, {"count": 1, "tags": [], "bug_id": 46124, "attachment_id": 22812, "is_private": false, "id": 122069, "time": "2008-10-31T04:35:14Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2008-10-31T04:35:14Z", "text": "Created attachment 22812\nTest case created from proposed solution\n\nTest case created from proposed solution which, unfortunately, was incomplete. ;-)\n\nTried to guess the missing information and fixed the test case (reviewing it would be helpful)."}, {"count": 2, "tags": [], "bug_id": 46124, "attachment_id": 22813, "id": 122070, "time": "2008-10-31T04:36:05Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2008-10-31T04:36:05Z", "is_private": false, "text": "Created attachment 22813\nPatch created from proposed solution\n\nPatch created from proposed solution which, unfortunately, didn't refer to which file the changes referred to. ;-)\n\nMinor improvements such as indent corrections and add missing documentation.\n\nConfirmed that the patch fixes the exception compared to Batik 1.7 release. :-)"}, {"count": 3, "tags": [], "bug_id": 46124, "attachment_id": null, "is_private": false, "id": 122228, "time": "2008-11-05T19:55:18Z", "creator": "cam@apache.org", "creation_time": "2008-11-05T19:55:18Z", "text": "Hi Steve and Helder.\n\nThanks for the bug report, and the attached patch and test.  The proposed solution doesn't completely solve the bug, however.  When an animation is removed, its effect needs to be removed also.  This is meant to be achieved by leaving the Sandwich object in there, with no animations in it but with shouldUpdate = true.\n\nThe ANIM_TYPE_OTHER case is just missing a check in tick() to ensure sandwich.animation is not null (as is checked for XML/CSS animations earlier in the method).\n\nThis is now fixed in r711765.\n"}, {"count": 4, "tags": [], "bug_id": 46124, "attachment_id": null, "text": "*** Bug 44439 has been marked as a duplicate of this bug. ***", "id": 123918, "time": "2009-01-10T04:26:59Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-01-10T04:26:59Z", "is_private": false}]
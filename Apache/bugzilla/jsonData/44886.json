[{"count": 0, "tags": [], "bug_id": 44886, "attachment_id": 21864, "text": "Created attachment 21864\nHex dump of PICT blip\n\nNow that Bug 44857 is resolved and I can fully parse the Escher records in a test file we happen to use in testing, I have been investigating the subtle change in the MD5 of the returned data.  The reason turned out to be obvious, but it turns out the contents of the picture were unusable both before and after as the format of the picture record is nonsense internally, or at least it's nonsense when parsed as a WMF/EMF blip.\n\nI've attachd a hex dump of the blip in question which has the header parsed out by hand.  The declared length of this blip I have already confirmed to be correct, but as you can see the contents seem to be completely unrelated to the code currently used for EMF and WMF, so the format must be something else entirely.\n\nThe remaining data doesn't appear to contain a declaration of the length of itself, so I've been wondering if perhaps it's an opaque blob of PICT data.  I don't know the format of PICT though so I can't confirm this right now.", "id": 115935, "time": "2008-04-27T18:38:01Z", "creator": "trejkaz@trypticon.org", "creation_time": "2008-04-27T18:38:01Z", "is_private": false}, {"count": 1, "tags": [], "creator": "trejkaz@trypticon.org", "is_private": false, "text": "Okay here's some more analysis.  It isn't a raw PICT, but it isn't the same as the other blip either.  However, it's remarkably similar unless I have this all wrong.\n\nAfter the header, we have...\n\n   57 32 7B 91 23 5D DB 36 7A DB FF 17 FE F3 A7 05\n   C7 15 69 2D E5 89 A3 6F 66 03 D6 24 F7 DB 1D 13 (32 bytes unknown)\n\n   72 A1 00 00                                       <-- cb (uncompressed size)\n\n   00 00 00 00 00 00 00 00 A3 00 00 00 40 00 00 00   <-- rcBounds\n\n   25 ED 1F 00 6A B1 0C 00                           <-- ptSize\n\n   23 04 00 00                                       <-- cbSave (compressed size)\n\n   00                                                <-- fCompression\n\n   FE                                                <-- fFilter\n\ncbSave using this scheme does exactly match the remaining data in the blip.\n\nSo I take it this is the same as EMF/WMF but with 32 bytes of UID instead of 16?\n", "id": 115936, "time": "2008-04-27T18:56:58Z", "bug_id": 44886, "creation_time": "2008-04-27T18:56:58Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "trejkaz@trypticon.org", "attachment_id": null, "id": 115937, "time": "2008-04-27T19:51:05Z", "bug_id": 44886, "creation_time": "2008-04-27T19:51:05Z", "is_private": false, "text": "Someone emailed me from the POI project saying they're looking into it.\n"}, {"count": 3, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "is_private": false, "id": 115939, "time": "2008-04-27T20:16:14Z", "bug_id": 44886, "creation_time": "2008-04-27T20:16:14Z", "text": "(In reply to comment #2)\n> Someone emailed me from the POI project saying they're looking into it.\n> \n\nI'm having trouble finding documentation for the Escher file stream.  This is the best I have found -from this page:\nhttp://www.microsoft.com/interop/docs/OfficeBinaryFormats.mspx\nthis file:\nhttp://download.microsoft.com/download/0/B/E/0BE8BDD7-E5E8-422A-ABFD-4342ED7AD886/OfficeDrawing97-2007BinaryFormatSpecification.pdf\n\nMy understanding is that it is completely OK for POI contributors to use these documents.  Does anyone know of a better resource describing the Escher file format?  Perhaps we could update the POI source with a reference/URL to that document.\n\nIt looks like this particular record (recordId == RECORD_ID_PICT) is described on page 16 of the above document and from what I can tell, the unknown binary data might be in zlib/deflate format.\n\nHope this helps."}, {"count": 4, "tags": [], "text": "If we can trust the comments in that document, then:\n  1. EMF, WMF and PICT are the same afterall.\n  2. Any of these may have a second UID after the first.\n  3. The means of determining this is\n     blip_instance ^ blip_signature == 1, where both of these values appear to be\n     nontrivial to compute (to me anyway.)\n", "is_private": false, "id": 115940, "creator": "trejkaz@trypticon.org", "time": "2008-04-27T21:12:47Z", "bug_id": 44886, "creation_time": "2008-04-27T21:12:47Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "dfisher@jmlafferty.com", "text": "Hi Guys,\n\nYegor has worked through these formats for me and he can tell you what is up. If I recall the PICT format may require that you download Quicktime for Java from Apple. Also, Yegor had success with either WMF or EMF, but not the other.\n\nAlso, AFAIK the OSP should cover the use of the format spec, but that won't help with PICT. That is Apple's Quickdraw format as grown from what 24 years ago. Apple has always published the format. It wouldn't be too hard to format. I do have gnerative code in FORTRAN if there becomes a desire to generate.\n\nRegards,\nDave", "id": 115941, "attachment_id": null, "bug_id": 44886, "creation_time": "2008-04-27T21:40:54Z", "time": "2008-04-27T21:40:54Z", "is_private": false}, {"count": 6, "tags": [], "text": "In terms of getting the actual PICT data into a renderable image, that's a separate problem IMO, and one which lies outside of POI.\n\nFor this bug record, the problem is determining when to read the extra 16 bytes of UID.  If someone can figure that out, then we'll have a way to get out the byte[] data, and some other library can read the PICT data, just like some other library reads the WMF and EMF.\n", "attachment_id": null, "bug_id": 44886, "id": 115942, "time": "2008-04-27T23:23:26Z", "creator": "trejkaz@trypticon.org", "creation_time": "2008-04-27T23:23:26Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 44886, "is_private": false, "count": 7, "id": 115950, "time": "2008-04-28T01:38:16Z", "creator": "josh@apache.org", "creation_time": "2008-04-28T01:38:16Z", "text": "(In reply to comment #4)\n> If we can trust the comments in that document, then:\n>   3. The means of determining this is\n>      blip_instance ^ blip_signature == 1, where both of these values appear to\n> be nontrivial to compute (to me anyway.)\n\nI guess you got this from page 17.  The full text is:\n\n\"The primary UID is only saved to disk if (blip_instance ^ blip_signature == 1). Blip_instance is MSOFBH.inst and  blip_signature is one of the values defined in MSOBI\"\n\nMSFOBH seems to be the common record header from page 8.  I believe the POI class EscherRecordHeader corresponds to this:\nMSOFBH.ver,inst <=> EscherRecordHeader.options\nMSOFBH.fbt      <=> EscherRecordHeader.recordId \nMSOFBH.cbLength <=> EscherRecordHeader.remainingBytes\n\nSo the inst field probably corresponds to EscherRecord.getInstance()\n\nMSOBI enum is mentioned on page 15.  It's not clear to me how to calculate blip_signature.  The exclusive or operator giving a result of 1 is also a bit weird here.  Note that none of the constants from MSOBI have the LSB set. So perhaps the test for writing the extra UID is whether the LSB of EscherRecord.getInstance() is set.  Perhaps the expression was written as such to emphasize that this rule only works when blip_signature == EscherRecord.getInstance() & 0x0FFE.\n\nThis is all speculation on my part.  You might be best to verify the behaviour empirically.  Two existing POI junits hit the method EscherMetafileBlip.fillFields() 4 times:\nTestHSSFPictureData.testPictures() line: 45\t\"SimpleWithImages.xls\"\nTestOLE2Embeding.testEmbeding() line: 36\t\"ole2-embedding.xls\"\n- so perhaps with these files, and your current examples you can decipher Microsoft's cryptic description of the m_rgbUidPrimary field."}, {"count": 8, "tags": [], "bug_id": 44886, "attachment_id": null, "id": 115952, "time": "2008-04-28T01:57:11Z", "creator": "yegor@dinom.ru", "creation_time": "2008-04-28T01:57:11Z", "is_private": false, "text": "//  3. The means of determining this is\n//     blip_instance ^ blip_signature == 1, where both of these values appear to be\n//     nontrivial to compute (to me anyway.)\n\nI figured out how to do this check. See what we have:\n\nMetafile signatures are defined in the spec as follows:\n\ntypedef enum\n   {\n   msobiWMF  = 0x216,      // Metafile header then compressed WMF\n   msobiEMF  = 0x3D4,      // Metafile header then compressed EMF\n   msobiPICT = 0x542,      // Metafile header then compressed PICT\n   }\nMSOBI;\n\nIn your test data EscherMetafileBlip.Options=0x5430\n\nAccording to the spec:\n 0x543 ^ 0x542 == 1; //bingo! need to read extra 16 bytes \n\n\nI attached my version of EscherMetafileBlip. Please exercise it against your test data and confirm it works OK. If it does, I will commit the fix.\nNote, I reverted your previous fix. EscherMetafileBlip.field_2_cb always defines the correct metafile size.   \n\nAlso, it would be good to have test data where blip_instance ^ blip_signature != 1. Please attach a sample if you find one.\n\nRegards,\nYegor"}, {"count": 9, "tags": [], "creator": "yegor@dinom.ru", "text": "Created attachment 21867\nA version of EscherMetafileBlip which correctly processes primary blip UID", "id": 115953, "time": "2008-04-28T01:59:40Z", "bug_id": 44886, "creation_time": "2008-04-28T01:59:40Z", "is_private": false, "attachment_id": 21867}, {"count": 10, "attachment_id": null, "bug_id": 44886, "is_private": false, "id": 115954, "time": "2008-04-28T02:06:30Z", "creator": "yegor@dinom.ru", "creation_time": "2008-04-28T02:06:30Z", "tags": [], "text": "> \n> Also, AFAIK the OSP should cover the use of the format spec, but that won't\n> help with PICT. That is Apple's Quickdraw format as grown from what 24 years\n> ago. Apple has always published the format. It wouldn't be too hard to format.\n> I do have gnerative code in FORTRAN if there becomes a desire to generate.\n> \n\nI don't think we will encounter legal issues with it.\nWe don't create  or interpret metafiles. We only extract metafiles from existing documents or insert them into xls or ppt. "}, {"count": 11, "tags": [], "text": "That version of EscherMetafileBlip fixes the problem for me.\n\nAlso I stepped through all our test files looking for a blip where the result was 0x00, but I couldn't find one.\n", "attachment_id": null, "bug_id": 44886, "id": 115994, "time": "2008-04-28T16:08:00Z", "creator": "trejkaz@trypticon.org", "creation_time": "2008-04-28T16:08:00Z", "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 44886, "is_private": false, "id": 115996, "time": "2008-04-28T16:22:45Z", "creator": "trejkaz@trypticon.org", "creation_time": "2008-04-28T16:22:45Z", "tags": [], "text": "Somewhat related to this, is it possible that suggestFileExtension() using the format mask directly is also slightly incorrect?\n"}, {"count": 13, "tags": [], "bug_id": 44886, "text": "(In reply to comment #12)\n> Somewhat related to this, is it possible that suggestFileExtension() using the\n> format mask directly is also slightly incorrect?\n> \n\nGood catch. The correct version should use blip.recordId():\n\n    public String suggestFileExtension()\n    {\n        switch (blip.getRecordId())\n        {\n            case EscherMetafileBlip.RECORD_ID_WMF:\n                return \"wmf\";\n            case EscherMetafileBlip.RECORD_ID_EMF:\n                return \"emf\";\n            case EscherMetafileBlip.RECORD_ID_PICT:\n                return \"pict\";\n            case EscherBitmapBlip.RECORD_ID_PNG:\n                return \"png\";\n            case EscherBitmapBlip.RECORD_ID_JPEG:\n                return \"jpeg\";\n            case EscherBitmapBlip.RECORD_ID_DIB:\n                return \"dib\";\n            default:\n                return \"\";\n        }\n    }\n\nYegor", "id": 116029, "time": "2008-04-29T08:16:32Z", "creator": "yegor@dinom.ru", "creation_time": "2008-04-29T08:16:32Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 44886, "text": "Thanks for the patch. \nI committed my version and a unit test.\n\nYegor\n", "count": 14, "id": 116043, "time": "2008-04-29T23:27:27Z", "creator": "yegor@dinom.ru", "creation_time": "2008-04-29T23:27:27Z", "is_private": false}]
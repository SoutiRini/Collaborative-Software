[{"count": 0, "tags": [], "bug_id": 56041, "attachment_id": null, "id": 172579, "time": "2014-01-21T00:32:47Z", "creator": "erik@adaptations.com", "creation_time": "2014-01-21T00:32:47Z", "is_private": false, "text": "A common use case, is for client side web apps to provide a constantly refreshed display. The display could be refreshed, for example, with data fetched periodically from the web server. This functionality is used to keep a display updated with changes on the server, such as graphs, tables, messages, etc. \n\nIn the context of an authenticated web page, in which the original page view and subsequent ajax calls all need to be authenticated, the session mechanism will currently update the session cookie with each request, and the expiry time parameter will continually \"keep up\" with real time. In many cases the web app requirements are that the expiry time should remain at the time when the primary page was provided to the client, with subsequent ajax fetches not updating the expiry. This would provide the experience most people would expect for an authenticated web page left unattended: It will eventually time out.\n\nAnother use case is the ability for a client web app to query the server for authentication state, in order to provide a smooth user experience for re-login or a timeout page. Clearly such a server query needs to be included in the authentication realm, yet not affect the expiry of the session.\n\nThere would be different ways of implementing this. There could be a server config directive to inhibit expiry incrementing per some sort of path match (e.g. within a LocationMatch). I don't know enough about internals to know the best technical direction.\n\nAnother approach, one that would be handy for client web app developers, would be a request header field which would inhibit expiry incrementing.\n\nAnother use case would be the ability to give the end user the option of \"staying logged in\", enabled by a user interface prompt. This would be facilitated by a server request that would be intended to refresh the session and bring the expiry up to date. This could be accomplished either by a specific end-point, configured on the server, or by a header field recognized by mod_session (or friends.)"}, {"count": 1, "tags": [], "bug_id": 56041, "attachment_id": null, "id": 172606, "time": "2014-01-21T22:35:22Z", "creator": "erik@adaptations.com", "creation_time": "2014-01-21T22:35:22Z", "is_private": false, "text": "I've made a first pass, adding a configuration parameter SessionRefreshExpiry. This config can be set directly in a config file, or set via an If config, triggered on a request header field. I tested with a header field named \"X-Session-Refresh-Expiry\". Both direct config and via If behave as expected.\n\nI have another couple of changes to sessions that I need for my current project. One has been submitted in bugzilla as an enhancement (need to have cookie with \"session\" lifetime), and another not submitted yet (need \"hard lifetime\" of session -- the session may not live longer than this time limit.)\n\nIs it better to submit these as additional patches or as one unified patch? They involve the same set of files or at least overlap -- I don't know enough about svn to determine how difficult it is to manage multiple patches as the codebase is progressively modified without checkin..."}]
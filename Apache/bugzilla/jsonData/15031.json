[{"count": 0, "tags": [], "text": "BELOW IS AN ANT CFG FILE THAT DESCRIBES THE PROBLEM\n\n<!--\nAnt 1.5 has a bug/limitation that can mask problems during make.\nThe <copy> operation does not spot or report files that are bad symlinks\nit just ignores them.\n\n\nto set up test case ....\n>mkdir /tmp/src_with_some_bad_links\n>cd /tmp/src_with_some_bad_links\n\n>cat hello > realfile\n>ln -s realfile goodlink\n>ln -s nonexistantfile badlink\n\ncopy this file to /tmp and then run ant ...\n>ant -buildfile /tmp/bad.xml\n\n/tmp/target ends up with ...\n  goodfile\n  realfile\n\nThere is no mention of the fact that there is a bad symlink.\nAnt does not report it and it does not return any indication there was a \nproblem.\n\nIf however I use an explicit file name \n(eg <copy file=\"/tmp/src_with_some_bad_links/badlink\" todir=\"/tmp/target\"/>) \nthen I do get an error (a nasty java error)\n\nBut this is not what I want to do - nor is it the sort of error message I \nexpect (cos it looks like ant has dumped its pants).\n\n-->\n\n\n\n\n<project name=\"AntBug\" default=\"default\" basedir=\".\">\n\n    <target name=\"default\">\n\n        <copy todir=\"/tmp/target\">\n            <fileset dir=\"/tmp/src_with_some_bad_links\"/>\n        </copy>\n\n    </target>\n\n</project>", "attachment_id": null, "bug_id": 15031, "id": 27345, "time": "2002-12-03T18:39:28Z", "creator": "john.lonergan@ubsw.com", "creation_time": "2002-12-03T18:39:28Z", "is_private": false}, {"count": 1, "tags": [], "text": "I'm not sure what we can do here. Java does not support symlinks. The methods\njava.io.File.getAbsolutePath() and getCanonicalPath() return the same value for\nthe broken link - so the trick of detecting links from the difference between\nthese two is not available. Also, according to java.io.File the file does not exist.\n\nBTW, for me Ant did not drop its pants on the explicit copy of the broken link.\nI get\n/tmp/bad.xml:12: Warning: Could not find file\n/tmp/src_with_some_bad_links/badlink to copy.\n\nSeems reasonable behaviour given the limitations above.\n\nI'm going to mark this as WONTFIX meaning CANTFIX. Sorry.", "is_private": false, "bug_id": 15031, "id": 41218, "time": "2003-07-23T13:21:23Z", "creator": "conor@apache.org", "creation_time": "2003-07-23T13:21:23Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "john.lonergan@ubsw.com", "attachment_id": null, "id": 41236, "time": "2003-07-23T14:53:16Z", "bug_id": 15031, "creation_time": "2003-07-23T14:53:16Z", "is_private": false, "text": "\nBUT YOU CANFIX !\n\n\nYou say \"Also, according to java.io.File the file does not exist.\" - thats the \nkey though isn't it!\nAny file that exists in the directory but for which java.io.File.exists() \nreturn false is almost certainly a dead symlink.\nWe don't actually need to know its a symlink all we are trying to trap is the \nerror where ant cannot copy the given file for some reason. I would argue that \nant should also report an error for files that DO exist but however do not have \nread access.\n\n\nThe program below traps these cases easily.\n\nls -l /tmp/src_with_some_bad_links/\n\n\tlrwxrwxrwx   1 badlink -> nonexistantfile\n\tlrwxrwxrwx   1 goodlink -> realfile\n\t-rw-r--r--   1 realfile\n\t----------   1 unreadable\n\n... we get ....\n\n/tmp/src_with_some_bad_links: is a directory\n/tmp/src_with_some_bad_links/realfile: exists and is readable\n/tmp/src_with_some_bad_links/realfile: exists and is readable\n/tmp/src_with_some_bad_links/badlink:exists in the parent directory, but does \nnot actually exist - this is a dead symlink - ANT SHOULD REPORT THIS ERROR\n/tmp/src_with_some_bad_links/unreadable: exists but is not readable ANT SHOULD \nREPORT THIS ERROR\n\n\n\nGiven this proof I would say it is entirely unreasonable that ant ignore such \nbuild errors.\n\n\n\n==================================================\nimport java.io.File;\n\nclass test {\n  public static  void main(String [] args ) {\n    test(\"/tmp//src_with_some_bad_links\");\n  }\n\n  static void test(String name) {\n    test(new java.io.File(name));\n  }\n\n  static void test(File f) {\n\n    try {\n      String filename = f.getCanonicalPath();\n      try {\n        if (f.isDirectory()) {\n          System.err.println(filename+\": is a directory\");\n          File[] files = f.listFiles();\n\n          for (int iFile=0; iFile < files.length; iFile++) {\n            test(files[iFile]);\n          }\n        }\n        else {\n\n          if ( f.exists() ) {\n            if ( f.canRead() ) System.err.println(filename+\": exists and is \nreadable\");\n            else System.err.println(filename+\": exists but is not readable ANT \nSHOULD REPORT THIS ERROR\");\n          }\n          else {\n            System.err.println(filename+\":exists in the parent directory, but \ndoes not actually exist - this is a dead symlink - ANT SHOULD REPORT THIS \nERROR\");\n          }\n        }\n      }\n      catch(Exception e) {\n        System.err.println(filename + \":exception \" + e.getMessage());\n      }\n    }\n    catch(Exception e) {\n      System.err.println(e.getMessage());\n    }\n  }\n}\n\n\n"}, {"count": 3, "tags": [], "bug_id": 15031, "attachment_id": null, "text": "I think there is some possibility that JL may have a way to fix this, but more\nconsideration is needed. How does it react to things like named pipes and other\nfile system wierdos? Are these results true on all *nix's? What about across\ndifferent filesystems that may be mounted. And what about Cygwin?\n\nJL, you might be interested to read bug 1550 for which I found a way to infer\nthe existance of Symlinks for the followsymlinks atribute. You will need to\nanswer the same types of questions before you can say that your method really\nidentifies broken symlinks only.\n\nEven if it doesn't identify them specifically, it is possible that the other\nthings identified could be worth reporting with a warning, or even failing the\nbuild.", "id": 41254, "time": "2003-07-23T18:03:42Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-07-23T18:03:42Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "john.lonergan@ubsw.com", "is_private": false, "id": 41263, "time": "2003-07-23T22:48:38Z", "bug_id": 15031, "creation_time": "2003-07-23T22:48:38Z", "tags": [], "text": "Lets say the symlink issue is a red herring.\n\nThe underlying problem is that Ant is not detecting unreadable or nonexistant \nfiles consistently and so my builds are apparently suceeding where infact the \nis a problem in our package and fies are missing - this is bad however you look \nat it.\n\nI have already demonstrated that ant can be tightened up so that it reports an \nerror in the case where the directory says the file exists but io.File reports \nit as notexistant\n\nAnt does correctly detect that it can't copy a regular file that is \npermissioned as unreadble but it doesn't detect the case I mention above.\n\nLets focus on detection of files that cannot be read (for whatever reason) and \nnot let symlink detection sidetrack us.\n\nAnyway looking at CopyDir.java I see that scanDir does this \n(srcFile.lastModified() > destFile.lastModified())) \n\nAccording to the JDK API docs ... \"lastModified() Returns: ... 0L if the file \ndoes not exist or if an I/O error occurs\". \nSo for my dead link lastModified() is returning 0 (to indicate an error) and \nthe lack of error detection code tricks the method into  thinking a copy is not \nrequired. \nTo test this I set the overwrite=\"yes\" attribute. Hey presto ant now dies when \nit encounters the dead sym link. \nSo the code should actually be detecting the error value zero returned from \nlastModified() and in the case of the source file it should treat this as an \nerror.\n\nSo right now ant behaves inconsistently. \n-If you explicitely tell ant to copy a dead link then it detects this and \nfailed.\n-If you are copying a dir and set overwrite='yes' then it detects dead links \nwithin dirs.\n-If you are copying direct and -don-t  set overwrite=\"yes\" then ant fails to \ndetect the unreadable dead link.\n\nSo perhaps the focus of this discussion should be on making ant behave \nconsistently with respect to unreadable and nonexistant files - ie abort.\n\nThx John"}, {"count": 5, "tags": [], "bug_id": 15031, "attachment_id": null, "text": "Surely we don't need to do much more than  call File.exists() and if it returns \nfalse then abort with an error ?\n\nDoing this explicitely is much cleared than trying to infer a problem by \nlooking out for zero returned from lastModified(). \n\nI still think the tag needs to error check the return value from lastModified() \nbut I think the code should explicitely check File.exists() and File.readable()", "id": 41265, "time": "2003-07-23T23:05:02Z", "creator": "john.lonergan@ubsw.com", "creation_time": "2003-07-23T23:05:02Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 15031, "attachment_id": null, "text": "Well, the situation you describe does seem to be somewhat inconsistant. Your\ncomments suggest that overwrite could be used as a workaround, but that is\nadmittedly inefficient at best, and in some cases might not be satisfactory. I'm\nsold that there is something to be fixed, but not being a commiter I can't\npromise anything. In your place, I would create a patch and attach it. Then we\ncan hope Connor or another commiter agrees, and commits your patch.", "id": 41790, "time": "2003-07-30T15:43:34Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-07-30T15:43:34Z", "is_private": false}, {"count": 7, "tags": [], "text": "Coming back to a really old report.\n\nI completely agree that Ant is inconsistent here, even though it has come to behave\nbetter in single-file copy here, it will report that the file doesn't exist (what\nConor notes below).\n\nBut this inconsistency goes further than just <copy>, we don't deal with those\nunreadable/non-existant files in other tasks either.\n\nAs for the copy case, I'm afraid we are getting struck by backwards compatibility\nagain.  Touching the current beahvior would lead to breaking builds if we made\ncopy fail on bad symlinks.  All we could do was issuing a warning, IMHO.", "attachment_id": null, "id": 72343, "creation_time": "2005-03-14T11:28:52Z", "time": "2005-03-14T11:28:52Z", "creator": "bodewig@apache.org", "bug_id": 15031, "is_private": false}, {"count": 8, "tags": [], "bug_id": 15031, "attachment_id": null, "text": "Re\n> Touching the current beahavior would lead to breaking builds if we made\n> copy fail on bad symlinks.  All we could do was issuing a warning, IMHO.\n\nCausing builds to break might be acceptable if you consider that those builds \nmay actually be broken anyway, or at least on borrowed time, because of these \nunreported problems with the build. \n\nI think its far better to abort and force the user to fix the problem by way \nof removing the dead link or by coding round it in build.xml.\n\n\n\n", "id": 78276, "time": "2005-08-09T14:45:58Z", "creator": "john.lonergan@ubs.com", "creation_time": "2005-08-09T14:45:58Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 15031, "is_private": false, "text": "An earlier posting suggested that ...\n\n    <copy overwrite=\"yes\" \n\nis a workaround (though an obscure and v.poor one) in that forcing the copy \ncauses the task to abort on dead symlinks.\n\nHowever, since the original posting something may have changes in the Java \ncode. This 'workaound' doesn't work - ie no abort happens.\n\nSo Ant still does not report this dead link problem and now there's no way to \ncause ant to fallover either.\n\n", "id": 78277, "time": "2005-08-09T15:00:04Z", "creator": "john.lonergan@ubs.com", "creation_time": "2005-08-09T15:00:04Z", "attachment_id": null}]
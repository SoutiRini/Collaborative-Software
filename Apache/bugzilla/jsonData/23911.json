[{"count": 0, "tags": [], "text": "With the latest version of Apache (2.0.47) we are seeing occassional defunct/zombie cgi's.  The \ncgi's can't be killed (won't die with kill -9 pid) but do die if we kill the parent httpd process.\n\nThis seems to me to be identical to bug report 21737 --- but with the 2.0.47 version (21737 was \nfor the 1... version).  Since their fix was to alloc.c, and I don't see an alloc.c to compare too, I'm \nseeking help on fixing this problem.\n\nThe zombies are not taking up cpu cycles, of course... but do tend to deplete the process count \npool. We've counted as high as 60 zombies in one situation.  Last night there were 8.", "is_private": false, "bug_id": 23911, "id": 45882, "time": "2003-10-18T17:33:17Z", "creator": "dcook@cookware.com", "creation_time": "2003-10-18T17:33:17Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "trawick@apache.org", "text": "suexec or not?\n\nmod_cgi or mod_cgid?\n\nprobably doesn't matter, but which MPM?\n", "id": 45904, "attachment_id": null, "bug_id": 23911, "creation_time": "2003-10-19T23:49:31Z", "time": "2003-10-19T23:49:31Z", "is_private": false}, {"count": 2, "tags": [], "creator": "dcook@cookware.com", "attachment_id": null, "text": "configure:12836: checking whether to enable mod_suexec\nconfigure:12888: result: no\n\n\nconfig.log:MPM_LIB='server/mpm/prefork/libprefork.la'\nconfig.log:MPM_NAME='prefork'\nconfig.log:MPM_SUBDIR_NAME='prefork'\nconfig.log:#define APACHE_MPM_DIR \"server/mpm/prefork\"\n\n\n./httpd -l\nCompiled in modules:\n  core.c\n  mod_access.c\n  mod_auth.c\n  mod_include.c\n  mod_log_config.c\n  mod_env.c\n  mod_setenvif.c\n  mod_ssl.c\n  prefork.c\n  http_core.c\n  mod_mime.c\n  mod_status.c\n  mod_autoindex.c\n  mod_asis.c\n  mod_cgi.c\n  mod_negotiation.c\n  mod_dir.c\n  mod_imap.c\n  mod_actions.c\n  mod_userdir.c\n  mod_alias.c\n  mod_rewrite.c\n  mod_so.c", "id": 45905, "time": "2003-10-20T00:25:10Z", "bug_id": 23911, "creation_time": "2003-10-20T00:25:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 23911, "text": "Does this happen even for simple CGIs such as printenv (in cgi-bin dir of\ndefault install), or only for setuid binaries, or what?\n\nAlso, can you get a truss of a CGI request, including both the web server child\nhandling the request and the CGI itself?\n\nStart the server like this:\n\n# truss -o outfile -f ./httpd -DONE_PROCESS\n\nand run a couple of CGI requests, then use ps to see whether or not the zombie\nproblem occurs, then interupt truss+httpd.  If this run exhibited the zombie\nproblem, send in the truss.  If not, you may need to start the server normally,\nrun truss against one of the children (truss -o outfile -f -p PID) and keep\ndoing CGI requests until the truss-ed process handles it and we can see the trace.\n", "id": 46167, "time": "2003-10-23T19:20:30Z", "creator": "trawick@apache.org", "creation_time": "2003-10-23T19:20:30Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "It is not specific to any cgi.  It is difficult for us to reproduce this because we can't predict when it \nwill happen and these are public/commercial servers with which we don't have the luxury of \nplaying with.\n\nIs there something I can do once I get zombies?  The zombies usually belong to one or two \nparents.  If there is information that I can get from that parent for you that would be useful, let me \nknow (just killed 27 zombies in fact).", "is_private": false, "bug_id": 23911, "id": 46257, "time": "2003-10-24T17:58:42Z", "creator": "dcook@cookware.com", "creation_time": "2003-10-24T17:58:42Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "I don't know what the next step is, unfortunately.\n\nI've been testing 2.0.47 with default config (prefork, mod_cgi, no suexec) this\nafternoon and using printenv as the example cgi.  No long-term zombies. \nprintenv goes through zombie state temporarily but Apache cleans it up very soon\nafter.\n\nI'm curious about how you can tell it isn't specific to some cgi.  All I see\nfrom ps for zombies is\n\n trawick  6872 29703  0                   0:00 <defunct>\n\nIs it possible that the zombie represents a child process that the CGI script\ncreated, and not the CGI script itself?\n\nApache parent\n  -> Apache child process\n        -> CGI script\n             -> some command invoked by the CGI\n\nMaybe there is some infrequent condition where the Apache child process\nterminates the CGI script before it has reaped status from the command it runs,\nand then the Apache child process becomes the parent of the command invoked by\nthe CGI.  Since the Apache child process doesn't call waitpid() to collect\nstatus from arbitrary processes, then the zombie never gets cleaned up.\n\nApache will terminate the CGI script with SIGTERM (and later SIGKILL) if the CGI\nscript keeps running for a while after the client connection drops.\n\n>Is there something I can do once I get zombies?\n\nnothing easy that I know of...\n", "attachment_id": null, "id": 47008, "creator": "trawick@apache.org", "time": "2003-11-07T18:27:51Z", "bug_id": 23911, "creation_time": "2003-11-07T18:27:51Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 23911, "is_private": false, "id": 47027, "time": "2003-11-07T22:24:22Z", "creator": "trawick@apache.org", "creation_time": "2003-11-07T22:24:22Z", "tags": [], "text": "I wasn't able to recreate any zombies in this scenario\n\nApache parent\n  -> Apache child process\n        -> CGI script\n             -> some command invoked by the CGI\n\nwhen the CGI script exited without reaping status from its child.  (just the way\nUnix works I guess)\n\nIf you set MaxRequestsPerChild relatively low, won't that take care of zombies?\n\nAnother VERY stray thought is to write a simple module that calls waitpid(-1,,)\nto try to reap status from any stray child process remaining for any reason. \nSince this is prefork, it shouldn't interfere with any other requests.\n"}, {"count": 7, "tags": [], "bug_id": 23911, "attachment_id": null, "id": 79558, "time": "2005-09-07T17:41:30Z", "creator": "jorton@redhat.com", "creation_time": "2005-09-07T17:41:30Z", "is_private": false, "text": "Is this reproducible in 2.0.54?"}, {"count": 8, "tags": [], "creator": "tech@tnet.no", "attachment_id": null, "text": "I run Debian stable with apache2 2.0.54. I can confirm that this version leaves\ndefuncts every now and then. It does this every few days, and what's happening\nis all the defuncts lock up all the apache processes and the server is\nunresponsible and has to be restarted.", "id": 83756, "time": "2005-12-17T03:02:24Z", "bug_id": 23911, "creation_time": "2005-12-17T03:02:24Z", "is_private": false}, {"count": 9, "tags": [], "creator": "nick@webthing.com", "text": "Does this affect 2.2.x?", "id": 109089, "time": "2007-10-07T17:07:33Z", "bug_id": 23911, "creation_time": "2007-10-07T17:07:33Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "id": 138562, "time": "2010-07-20T09:19:59Z", "bug_id": 23911, "creation_time": "2010-07-20T09:19:59Z", "is_private": false, "text": "Nearly three years in NEEDINFO, closing old 2.0 report.  If it's not fixed in 2.0.latest, it won't get fixed in 2.0.any."}, {"count": 11, "tags": [], "text": "Still there in 2.2.13-1fc11.\n\nI have isolated it: it can be simply reproduced with a cgi containing\n\n    sleep 9999 >/dev/null &\n\nand fixed by redirecting the stderr of the child:\n\n    sleep 9999 >/dev/null 2> /dev/null &\n\n(the stdout redir is needed anyway for the HTTP request to complete)\n\nSo it boils down to: CGI exits with the stderr dup'ed over to a lingering child.\nI assume this is linked to Apache's capture of CGI's stderrs (for error_log), not expecting their lifecycle to be decoupled from the CGI process's.\n\nApologies if this is not the proper place to reopen. Spank me in that case :)", "attachment_id": null, "bug_id": 23911, "id": 149235, "time": "2011-09-14T17:11:25Z", "creator": "alexandre.ferrieux@orange-ftgroup.com", "creation_time": "2011-09-14T17:11:25Z", "is_private": false}]
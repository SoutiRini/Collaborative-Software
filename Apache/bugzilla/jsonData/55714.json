[{"count": 0, "tags": [], "bug_id": 55714, "attachment_id": 30982, "id": 170879, "time": "2013-10-28T13:57:04Z", "creator": "benjamin.gam@gmail.com", "creation_time": "2013-10-28T13:57:04Z", "is_private": false, "text": "Created attachment 30982\nInput file with a background image\n\nHi and thank you for this great library. I'm using 3.10-beta2\n\nI try to copy some slides from a presentation to a new blank presentation, like this :\n\nXMLSlideShow srcPptx = null;\ntry (InputStream is = Resources.getResource(\"test.pptx\").openStream()) {\n    srcPptx = new XMLSlideShow(is);\n}\n\nint slideIndex = 0;\nfor (XSLFSlide srcSlide : srcPptx.getSlides()) {\n    XMLSlideShow newPptx = new XMLSlideShow();\n    \n    // Add slide\n    XSLFSlide newSlide = newPptx.createSlide();\n    XSLFSlideLayout srcSlideLayout = srcSlide.getSlideLayout();\n    XSLFSlideMaster srcSlideMaster = srcSlide.getSlideMaster();\n    XSLFSlideLayout newSlideLayout = newSlide.getSlideLayout();\n    XSLFSlideMaster newSlideMaster = newSlide.getSlideMaster();\n    newSlideLayout.importContent(srcSlideLayout);\n    newSlideMaster.importContent(srcSlideMaster); \n    newSlide.importContent(srcSlide);\n    \n    // Write the new presentation\n    try (OutputStream os = new FileOutputStream(\"slide-\" + (slideIndex++) + \".pptx\")) {\n        newPptx.write(os);\n    }\n}\n\nIt seems to work great, except that background images are not copied.\nI join you an input .pptx to reproduce.\n\nTell me if you need more details."}, {"count": 1, "tags": [], "text": "PPTX files are a zip of XML files.\n\nAre you able to unzip the resulting file, and diff the slide and layout xml to see what's different between the slides that include the background and those who lost it?", "attachment_id": null, "id": 170880, "creator": "apache@gagravarr.org", "time": "2013-10-28T14:21:30Z", "bug_id": 55714, "creation_time": "2013-10-28T14:21:30Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55714, "attachment_id": null, "id": 170882, "time": "2013-10-28T14:34:29Z", "creator": "benjamin.gam@gmail.com", "creation_time": "2013-10-28T14:34:29Z", "is_private": false, "text": "(In reply to Nick Burch from comment #1)\n> PPTX files are a zip of XML files.\n> \n> Are you able to unzip the resulting file, and diff the slide and layout xml\n> to see what's different between the slides that include the background and\n> those who lost it?\n\nYes, here it is.\n\nThe source pptx slide contains at the beginning :\n\n...\n<p:cSld>\n<p:bg>\n  <p:bgPr>\n    <a:blipFill dpi=\"0\" rotWithShape=\"1\">\n      <a:blip r:embed=\"rId2\" cstate=\"print\">\n        <a:lum />\n      </a:blip>\n      <a:srcRect />\n      <a:stretch>\n        <a:fillRect />\n      </a:stretch>\n    </a:blipFill>\n    <a:effectLst />\n  </p:bgPr>\n</p:bg>\n<p:spTree>\n...\n\nAnd the resulting pptx does not contains the <p:bg> tag :\n\n...\n<p:cSld>\n<p:spTree>\n...\n\nI tried to debug into the copy process, and it seems that it never pass in the XSLFBackground.copy method (but it does for all the other shapes)."}, {"count": 3, "tags": [], "bug_id": 55714, "attachment_id": null, "id": 170885, "time": "2013-10-28T16:25:30Z", "creator": "benjamin.gam@gmail.com", "creation_time": "2013-10-28T16:25:30Z", "is_private": false, "text": "After further debugging, I think I have found where the problem is.\n\nin XSLFSlide.importContent (line 228), we have :\nXSLFBackground bgShape = getBackground();\n\ninstead of :\nXSLFBackground bgShape = src.getBackground();\n\nIt seems to import correctly the background in the new pptx, but it's not enough. The <p:bgPr> is not copied (as I said in my previous comment). If I copy it manually like that :\nnewSlide.getXmlObject().getCSld().setBg(srcSlide.getXmlObject().getCSld().getBg());\n\nThe background works."}, {"count": 4, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 170887, "time": "2013-10-28T16:35:08Z", "bug_id": 55714, "creation_time": "2013-10-28T16:35:08Z", "is_private": false, "text": "Looks promising!\n\nAny chance you could write a short junit unit test that shows the problem? We can use that to test your proposed fix, as well as to ensure it stays fixed into the future!"}, {"count": 5, "tags": [], "bug_id": 55714, "attachment_id": null, "is_private": false, "id": 170888, "time": "2013-10-28T17:07:30Z", "creator": "benjamin.gam@gmail.com", "creation_time": "2013-10-28T17:07:30Z", "text": "I was on the right path, however it does not seem to work if the background is carried by the slide master. Do you have any idea about it? Thanks."}, {"count": 6, "text": "It seems that there is no way to add a new slide master or slide layout in POI for the moment, and the copy process keeps overlapping old ones.\nSo I am stuck here now.", "creator": "benjamin.gam@gmail.com", "is_private": false, "id": 170933, "time": "2013-10-30T14:36:56Z", "bug_id": 55714, "creation_time": "2013-10-30T14:36:56Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "text": "(In reply to Benjamin Gamard from comment #6)\n> It seems that there is no way to add a new slide master or slide layout in\n> POI for the moment, and the copy process keeps overlapping old ones.\n> So I am stuck here now.\n\nIt might not be that much extra work to implement new slide master and/or layout support for XSLF, so that might be the way to go!\n\n(There may be some IDs that need fixing up, and you'll need to identify the smallest valid new master/layout for when creating the new one)", "is_private": false, "id": 171135, "creation_time": "2013-11-07T22:06:56Z", "time": "2013-11-07T22:06:56Z", "creator": "apache@gagravarr.org", "bug_id": 55714, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 55714, "attachment_id": null, "is_private": false, "id": 194564, "time": "2016-10-19T23:47:16Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-10-19T23:47:16Z", "text": "fixed via r1765733"}]
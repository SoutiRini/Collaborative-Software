[{"count": 0, "tags": [], "bug_id": 36313, "attachment_id": null, "id": 78869, "time": "2005-08-23T07:17:27Z", "creator": "mikael.forslund@gmail.com", "creation_time": "2005-08-23T07:17:27Z", "is_private": false, "text": "I have developed a simple perl filer (FilterConnectionHandler) that replaces the\nURI and host part on the fly when issuing a HTTP 1.1 CONNECT request to the\nserver. (This did not work with the rewrite module as it seems that the\nproxy_connect module is invoked before the rewrite module so the perl script was\nthe only way I could do this easily.) \n\nThe effect of applying this filter to a connection url is this:\n\n    http://localhost/test     =>     http://localhost:2098\n\nFor a mapping file (see the script below) that contains the mapping(s):\n\n    /test localhost:2098\n    /yahoo www.yahoo.com:80\n\n\nThis all works fine for up to 5 connections but for the 6'th connection the\napache webserver hangs indefinetely until I close one of the previous\nconnections. This means that the server is completely blocked and does not even\nserve standard GET and POST requests. \n\nI have concluded that is definetly has something to do with mod_perl.so because\nwhen I comment the perl stuff out from the httpd.conf file and specifying the\nfull internal host:port with the CONNECT command it all works very well.\n\nSo the basic modules needed for the CONNECT feature is this:\nmod_proxy.so\nmod_proxy_connect.so\n\nAnd to do perl filtering I need:\nmod_perl.so\n\nHere is my script that does the filtering:\n\npackage TEST::CONNECTRewriter;\n  \nuse strict;\nuse warnings;\nuse diagnostics;\n  \nuse constant MAPPINGS    => \"c:\\\\mappings.txt\";\n  \nuse base qw(Apache2::Filter);\nuse vars qw(@mappings $initialized);  \n     \nuse Apache2::Log;  \nuse Apache2::ServerUtil;  \n  \nuse APR::Brigade ();\nuse APR::Bucket ();\n  \nuse Apache2::Const -compile => qw(OK DECLINED);\nuse APR::Const     -compile => ':common';\n    \nsub loadMappings {  \t  \t\n    open(MAPPINGSFILE, \"<\" . MAPPINGS);  \t\n\t\n    my @mappinglist = <MAPPINGSFILE>;\n    @mappinglist = sort(@mappinglist);\n    my $mapping;\n\n    foreach $mapping (@mappinglist)\n    {\t   \n        my @targets = split('\\s', $mapping);\n\tpush(@mappings, [$targets[0],$targets[1]]);\t   \t   \t   \t   \n    }\n    close(MAPPINGSFILE);\n}\n  \nsub handler : FilterConnectionHandler {\n    $| = 1;\n\n    my($filter, $bb, $mode, $block, $readbytes) = @_;\n                      \n    return Apache2::Const::DECLINED if $filter->ctx;\n\n    Apache2::ServerUtil->server->log->info(\">>>>>>>HANDLER ENTERED\\n\");\n                      \n    if($initialized == 0) {          \n        &loadMappings;\n        $initialized = 1;\n    }\n            \n    Apache2::ServerUtil->server->log->info(\"before next_brigade\\n\");\n      \n    my $rv = $filter->next->get_brigade($bb, $mode, $block, $readbytes);\n      \n    Apache2::ServerUtil->server->log->info(\"after next_brigade\\n\");\n      \n    return $rv unless $rv == APR::Const::SUCCESS;     \n  \n    for (my $b = $bb->first; $b; $b = $bb->next($b)) \n    {     \t  \n        $b->read(my $data);\n          \n        Apache2::ServerUtil->server->log->info(\"data: $data\\n\");\n\n        my $mapping;\n\tforeach $mapping (@mappings)\n\t{\t   \t      \n  \t    my $src = \"CONNECT \" . @{$mapping}[0] . \" HTTP/1.1\";\t  \t      \n  \t    my $rep = \"CONNECT \" . @{$mapping}[1] . \" HTTP/1.1\";\t\n  \t        \t      \t  \t      \n            if ($data and $data =~ s|^($src)$|$rep|) \n            {\n                my $nb = APR::Bucket->new($bb->bucket_alloc, $data);\n                $b->insert_after($nb);\n                $b->remove; # no longer needed\n                $filter->ctx(1); # flag that that we have done the job\n                last;\n            }\n        }  \n    }      \n    Apache2::ServerUtil->server->log->info(\"======= DONE =======\\n\");\n  \n    Apache2::Const::OK;\n}\n1;\n\n\nI am using ActivePerl and the mod_perl.so associated with it. I can unfortunally\nnot provide with my test environment but the bug can be reproduced by doing\nsomething simular to the following. Just startup one apache instance running the\nPERL script found above and start 6 instances of telnet and connect to to the\nserver like so:\n\n$ telnet localhost 80\nTrying ###.###.###.###...\nConnected to localhost\nEscape character is '^]'.\nCONNECT /yahoo HTTP/1.1\nHost: /yahoo\n\nThe 6'th time the server is hanging and doesn't serve any request what so ever. \n\n\nI would be extremely happy if this \"bug\" was fixed... \nHappy hunting :) \nCheers \n/Mikael Forslund"}, {"count": 1, "tags": [], "creator": "jorton@redhat.com", "text": "Try asking on modperl@perl.apache.org, it's not relaly clear whether this is\nsome problem with your code, with mod_perl, or what.", "id": 78921, "attachment_id": null, "bug_id": 36313, "creation_time": "2005-08-24T16:32:22Z", "time": "2005-08-24T16:32:22Z", "is_private": false}, {"count": 2, "tags": [], "text": "(In reply to comment #1)\n> Try asking on modperl@perl.apache.org, it's not relaly clear whether this is\n> some problem with your code, with mod_perl, or what.\n\nThanks for your reply. I have changed strategy and have found another solution\nthat works for me. Thanks again. /M", "attachment_id": null, "bug_id": 36313, "id": 78965, "time": "2005-08-25T08:19:32Z", "creator": "mikael.forslund@gmail.com", "creation_time": "2005-08-25T08:19:32Z", "is_private": false}]
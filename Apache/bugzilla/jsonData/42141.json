[{"count": 0, "tags": [], "text": "When saving a new scenario in the GUI of JMeter, the \"Save as...\" dialog shows a\nfilename which is the exact copy of the test plan.\n\nThe problem is that the field which holds the name of the test plan accepts any\ncharacter (which is a good idea) while, under windows, a file name cannot\ncontain the following characters:\n    \\ / : * ? \" < > |\n\nThere is a real need to escape/replace/delete the forbidden characters when\ncopying the plan test's name to the file name field.\n\nI think that under *nix, some characters like / * ? and | are also forbidden.\n\nThank you for improving this very useful application.", "attachment_id": null, "bug_id": 42141, "id": 101784, "time": "2007-04-17T02:42:12Z", "creator": "michel.nolard@gmail.com", "creation_time": "2007-04-17T02:42:12Z", "is_private": false}, {"count": 1, "tags": [], "creator": "michel.nolard@gmail.com", "text": "I changed the OS target as I think that there are forbidden characters for file\nnames on any platform, at least the directory separator.", "id": 101785, "time": "2007-04-17T02:43:21Z", "bug_id": 42141, "creation_time": "2007-04-17T02:43:21Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 42141, "is_private": false, "text": "Note: I haven't made it clear enough (sorry for that): the problem is a\nusability problem as the name is not corrected in the _DialogBox_ but it IS on\nthe _FileSystem_ without notifying the user !\n\nA very simple test case:\n - Create a new test plan\n - Name the test plan using the directory separator in it\n    e.g on Unix: \"I prefer HTTP/1.1\"\n        on Windows: \"Is it a good name ?\"\n - Save this test plan and look at the \"file name\" field in the dialog box\n - Select \"Save\" and look on the file system to see that the filename has been\nchanged", "id": 101787, "time": "2007-04-17T02:50:20Z", "creator": "michel.nolard@gmail.com", "creation_time": "2007-04-17T02:50:20Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42141, "attachment_id": 27506, "id": 149306, "creation_time": "2011-09-16T07:20:24Z", "time": "2011-09-16T07:20:24Z", "creator": "p.mouawad@ubik-ingenierie.com", "text": "Created attachment 27506\nFix to the issue\n\nPatch removes all OS forbidden chars and non ascii ones.\nRegards\nPhilippe", "is_private": false}, {"count": 4, "tags": [], "bug_id": 42141, "attachment_id": null, "id": 149345, "time": "2011-09-16T23:44:04Z", "creator": "sebb@apache.org", "creation_time": "2011-09-16T23:44:04Z", "is_private": false, "text": "Many of the so-called \"forbidden\" characters are actually allowed on other systems. And why should one not be allowed to use the directory separator?\n\nBy the way, [ and ] are valid in path names on OpenVMS; they are used to enclose the directory portion.\n\nSo I don't think this is the correct way to solve the problem; it is likely to prevent some legitimate characters from being used.\n\nAny validation needs to use the underlying JVM and OS; perhaps one way to do this would be to create the file, and then see what file name it was given?"}, {"count": 5, "tags": [], "bug_id": 42141, "attachment_id": null, "id": 149361, "time": "2011-09-17T07:52:36Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-17T07:52:36Z", "is_private": false, "text": "Hello Sebb,\nMy approach was a bit enforcing than just removing OS characters.\nI was thinking that it would be better to avoid space and non ascii characters in files name.\n\nAlso note that the changes on the characters occurs only to compute name from node name,but you can then put these characters if you want to.\n\nI see you don't agree with this approach, so I will implement yours and submit a new patch.\nThanks for reviewing.\nRegards\nPhilippe"}, {"count": 6, "tags": [], "creator": "sebb@apache.org", "text": "Sorry, should have read the bug more carefully.\n\nIt does make sense to sanitise the default name, however my concerns about OS variations still hold.\n\nIt's not obvious how to do this without annoying users on some OSes.\nIn particular, on Unix I think the only disallowed character is /.\n\nFor maximum portability, the generated name should probably contain alphanumeric ascii characters only, with the possible exception of underscore and dash, but that would be very restricting.\n\nSo perhaps the default name should depend on the OS.\n\nIs it possible to determine which characters are disallowed on a file system?\n\nIf so, should these be deleted or replaced?\n\nAlso, I think it should be possible to disable the conversion. This could be done by using a JMeter property - no need for a run-time switch.", "id": 149365, "time": "2011-09-17T11:44:46Z", "bug_id": 42141, "creation_time": "2011-09-17T11:44:46Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "text": "I didn't find an api to test for os fordidden chars.\nIt may exist in java 7  but nook for us.\nIf i add a property to diable sanitize, it is ok for you ?\nRegards\nPhilippe", "id": 149450, "time": "2011-09-18T09:07:01Z", "bug_id": 42141, "creation_time": "2011-09-18T09:07:01Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 42141, "attachment_id": 27526, "id": 149457, "time": "2011-09-18T13:11:22Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-18T13:11:22Z", "is_private": false, "text": "Created attachment 27526\nFix to the issue\n\nHello,\nI added option :\njmeter.saveas.sanitize=true\n\nRegards\nPhilippe"}, {"count": 9, "tags": [], "bug_id": 42141, "is_private": false, "text": "[BTW, the jmeter.properties patch is wrong, it removes some lines; make sure you update your workspace before creating patches.]\n\nSorry, I'm still not convinced that this feature is appropriate.\n\nPostponing for now.", "id": 149459, "time": "2011-09-18T13:58:06Z", "creator": "sebb@apache.org", "creation_time": "2011-09-18T13:58:06Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 42141, "is_private": false, "text": "Created attachment 27528\nFix to the issue\n\nSorry for the mistake.\nHere it is corrected.\nNo problem for me if it's not taken into account.\nMaybe by the way it should be an improvement rather than a bug.\n\nRegards\nPhilippe", "id": 149462, "time": "2011-09-18T17:30:30Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-18T17:30:30Z", "attachment_id": 27528}, {"count": 11, "tags": [], "creator": "michel.nolard@gmail.com", "attachment_id": null, "id": 149480, "time": "2011-09-19T08:49:11Z", "bug_id": 42141, "creation_time": "2011-09-19T08:49:11Z", "is_private": false, "text": "\n[Warning: long comment]\n\nGreat ! I am quite happy to see things are moving on this point.\n\nFirst, this is a usability _bug_ and not _enhancement_ (although one may say that a fix for a bug enhances the experience...), as the visual feedback shown to the user works against what is actually done. Correct feedback is not a feature to be eventually added, but it is part of the application's good behaviour.\n\nSecond, I agree that restricting the set of allowed characters arbitrarily and in a platform independent way is not wise and would be a source of many more complaints. We know that some file systems accepts only 8.3 file names while others allow nearly the full UTF-8 range of values. This makes a point to an OS-specific adaptation solution.\n\nThird, here are two links for those who want to know that, finally, there is no good way to check a filename conformance to the OS rules in Java 6 although there is one in Java 7 :\nhttp://stackoverflow.com/questions/893977/java-how-to-find-out-whether-a-file-name-is-valid\nhttp://stackoverflow.com/questions/122400/what-are-reserved-filenames-for-various-platforms\n\nFourth, under Linux/Unix, only the slash ('/') is forbidden as a pure file name character, while it is not when part of its path. The same limitation stands under Windows with the backslash ('\\') but there are some others more too.\n\t\nFinally, my proposal, hoping this makes everyone happy :\n * The problem is on the feedback, so there is not a real need to jump onto the technical limitation of the filename by enforcing it too early.\n * As the OS does already well that job as it knows itself quite well, why don't we rely on it simply ?\n * In the following snippet, when using an illegal filename instead of the 'xxx', an exception is thrown (error message under Windows is shown just under the java sample) :\n-----8<---------8<----\n    /* 1 */    File foobar = new File( \"xxx\" );\n    /* 2 */    foobar.getParentFile().mkdirs();\n    /* 3 */    foobar.createNewFile();\n-----8<---------8<----\n\n-----8<---------8<----\n    java.io.FileNotFoundException: 'xxx' (The filename, directory name, or volume label syntax is incorrect)\n-----8<---------8<----\n\t\n * Please, note that the second line which allows the user to insert the directory separator safely.\n * Please, notice that createNewFile() returns a boolean _and_ may throw at the same time.\n\nSo the actual solution I propose for all platforms :\n - allow anything to be typed in by the user as a filename,\n - use the \"second line trick\" (getParentFile().mkdirs()) to avoid directory separator problems,\n - try to create the file using createNewFile() and redisplay the file save dialog whenever an exception is thrown, while showing the error message to the user so that she can correct the filename accordingly,\n - _never ever_ change the user's input without at least telling her.\n\nHoping this will help a bit,\n\nThanks for your attention."}, {"count": 12, "tags": [], "bug_id": 42141, "attachment_id": null, "id": 149487, "time": "2011-09-19T11:10:19Z", "creator": "sebb@apache.org", "creation_time": "2011-09-19T11:10:19Z", "is_private": false, "text": "(In reply to comment #11)\n... \n> So the actual solution I propose for all platforms :\n>  - allow anything to be typed in by the user as a filename,\n>  - use the \"second line trick\" (getParentFile().mkdirs()) to avoid directory\n> separator problems,\n>  - try to create the file using createNewFile() and redisplay the file save\n> dialog whenever an exception is thrown, while showing the error message to the\n> user so that she can correct the filename accordingly,\n>  - _never ever_ change the user's input without at least telling her.\n\nThat seems very sensible; let the JVM/OS do the work.\n\nI just wonder whether one should use mkdirs() before trying createNewFile()?\n\n[ignore my comment #4 about allowing separators, not relevant here]\n\nIf I include a directory separator in a sampler name, do I really want to create the file in a subdirectory? \n\nI would have thought the normal usage is to create all the files in the current directory; if they start being saved in a different directory just because the name happens to contain a path separator, that could be very confusing.\n\nAlso, what about leading ../ path segments? Should those be allowed?\nWith the current JMeter (WinXP), these are accepted [and they change the default working directory for the File Save dialog!] And xyz/abc is also allowed if there is an existing xyz directory.\n\nI'm inclined to disallow parent segments as well (the user can still navigate to the required directory). This will require a specific check; we cannot use createNewFile without risking accidental changes to arbitrary directories.\n\nAs an aside, it would be useful to have some JUnit test cases for the code, so it would be helpful to have the validation as a separate method."}]
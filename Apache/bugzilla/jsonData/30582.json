[{"count": 0, "tags": [], "bug_id": 30582, "attachment_id": null, "id": 61799, "time": "2004-08-11T08:31:07Z", "creator": "mike.elmsly@ihug.co.nz", "creation_time": "2004-08-11T08:31:07Z", "is_private": false, "text": "Example as in email excerpt below (I've pasted sample source below that)\n\nHi Rob, All,\n        heres my situation as an example\n\nI have\n\n[Reporting HOST]----[FW]----[BASTION HOST]----[FW]----[WEBSERVER]\n\nI can ssh to the bastion host from my reporting host but not directly to\nthe webserver.  What I wanted to do was retreive log files, without\nstoring them temporarily on the bastion host which involved some messy\nworkarounds to first retrieve the files and then clean up afterwards. \nHence the tunnel...Heres a sample from my demo build file....\n\n\n<taskdef name=\"sshtunnel\" classname=\"org.mike.Ant.SSHTunnel\"\nclasspath=\"/home/elmslym/anttunnel.jar\"/>\n\n<!-- tunnel_retrieve - If bastion_host property is defined then first\nbring files down from\n                remote host by tunneling through bastion host -->\n        <target name=\"tunnel_retrieve\" if=\"env.bastion_host\" >\n                <sshtunnel host=\"${env.bastion_host}\"\n                  username=\"${user.name}\"\n                  keyfile=\"${user.home}/.ssh/id_dsa\"\n                  knownhosts=\"${user.home}/.ssh/known_hosts\"\n                  passphrase=\"youre kidding me\"\n                  lport=\"2222\"\n                  rport=\"22\"\n                  rhost=\"${env.remote_host}\">\n                        <scp\n                               \nfile=\"${user.name}@localhost:${env.remote_dir}/${env.remote_file_pattern}\"\n                                todir=\"${env.local_dir}\"\n                                keyfile=\"${user.home}/.ssh/id_dsa\"\n                                knownhosts=\"${user.home}/.ssh/known_hosts\"\n                                trust=\"yes\"\n                                passphrase=\"\"\n                                compressionlevel=\"9\"\n                                port=\"2222\"/>\n                </sshtunnel>\n        </target>\n\nso I use the ssh tunnel task to setup an ssh tunnel on port 2222 going\nthrough my bastion_host to the remote host on port 22.\n\nInside my sshtunnel task I nest an scp task to connect to the remote\nhost through the tunnel and bring the files back.  However I could just\nas easily nest a deploy task to a remote tomcat server etc.\n\nCheers,\nMike\n\n================================================================================\n\n/**\n * \n * Copyright  2000-2002,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n * \n */\n\npackage org.apache.tools.ant.taskdefs.optional.ssh;\n\nimport org.apache.tools.ant.*;\nimport org.apache.tools.ant.taskdefs.optional.ssh.*;\nimport java.util.Vector;\nimport java.util.Iterator;\nimport com.jcraft.jsch.*;\n\n/**\n * Creates an SSH tunnel that nested tasks can utilize to perform tasks on\nremote hosts.\n *\n * @author    Mike Elmsly mike.elmsly@ihug.co.nz\n * @version   $Revision: 1.0 $\n * @created   July 5, 2004\n * @since     Ant 1.6.1\n */\n\n \n\npublic class SSHTunnel extends SSHBase  implements TaskContainer {\n\n\t/**\n\t * \n\t */\n\t//Set internal attributes here\n\tprivate String rhost, lport, rport;  \n\tprivate Vector nestedtasks=new Vector();\n\tprivate long maxwait = 0;\n\tprivate Session session;\n\t\n\tpublic SSHTunnel() {\n\t\tsuper();\n\t}\n\t\n\tpublic void execute() throws BuildException {\n\t\t//Check for valid configuration of task\n\t\tif (getHost() == null) {\n\t\t\t\t\tthrow new BuildException(\"Host is required.\");\n\t\t}\n\t\tif (getUserInfo().getName() == null) {\n\t\t\tthrow new BuildException(\"Username is required.\");\n\t\t}\n\t\tif (getUserInfo().getKeyfile() == null\n\t\t\t&& getUserInfo().getPassword() == null) {\n\t\t\t\tthrow new BuildException(\"Password or Keyfile is required.\");\n\t\t}\n\t\tif (getRhost()==null || getLport()==null || getRport()==null) {\n\t\t\t\tthrow new BuildException(\"Tunnel information is required. \\n Either rhost,\nlport or rport is not set.\");\n\t\t}\n\t\t\n\t\t//Create Connection\n\t\ttry {\n\t\t\tsession = openSession();\n\t\t\tsession.setTimeout((int) maxwait);\n\t\t\tsession.setPortForwardingL(Integer.parseInt(lport), rhost,\nInteger.parseInt(rport));\n\t\t\tlog(\"SSHTunnel : Connection created successfully.\", Project.MSG_INFO);\n\t\t} catch (Exception e) {\n\t\t\t\tlog(\"SSHTunnel : Connect Failed\", Project.MSG_ERR);\n\t\t\t\t//throw exception as if connect fails we want to abort nested tasks\n\t\t\t\tthrow new BuildException(\"SSHTunnel Task Failed: Unable to create tunnel\", e);\n\t\t}\n\t\t\n\t\t//Execute Nested tasks\n\t\ttry {\n\t\t\t\texecuteNestedTasks();\n\t\t} catch (BuildException e) {\n\t\t\t\tlog(\"Nested Tasks Failed!\", Project.MSG_ERR);\n\t\t\t\t \n\t\t\t//In the event of failure attempt to close the tunnel\n\t\t\tlog(\"Attempting Disconnect\", Project.MSG_ERR);\n\t\t\tif (session != null) {\n\t\t\t\t\tsession.disconnect();\n\t\t\t} else {\n\t\t\t\tlog(\"Session is null, can't call disconnect\", Project.MSG_ERR);\n\t\t\t}\n\t\t\t//Once the tunnel is closed throw a build exception.\n\t\t\tthrow new BuildException(\"Nested Tasks Failed:\", e);\n\t\t\t} catch (Exception etwo) {\n\t\t\t\t\tlog(\"SSHTunnel Disconnect Failed\", Project.MSG_ERR);\n\t\t\t\t\t//Tunnel close may have failed but throw build exception for failed tasks\nanyway\n\t\t\t\t\tthrow new BuildException(\"Nested Tasks Failed:\", etwo);\n\t\t\t}\n\t\t//Lastly, if all has gone well, disconnect\n\t\ttry {\n\t\t\t\tlog(\"Attempting Disconnect\", Project.MSG_ERR);\n\t\t\t\tif (session != null) {\n\t\t\t\t\tsession.disconnect();\n\t\t\t\t} else {\n\t\t\t\t\tlog(\"Session is null\", Project.MSG_ERR);\n\t\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t\t\t\tlog(\"SSHTunnel Disconnect Failed\", Project.MSG_ERR);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\tprivate void executeNestedTasks()  throws BuildException {\n\t\tIterator taskiterator = nestedtasks.iterator();\n\t\twhile (taskiterator.hasNext()) {\n\t\t\tTask thetask = (Task) taskiterator.next();\n\t\t\tif ( thetask instanceof UnknownElement) {\n\t\t\t\t((UnknownElement) thetask).maybeConfigure();\n\t\t\t\tthetask = ((UnknownElement) thetask).getTask();\n\t\t\t\tif (thetask == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthetask.perform();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new BuildException(e);\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see org.apache.tools.ant.TaskContainer#addTask(org.apache.tools.ant.Task)\n\t */\n\tpublic void addTask(Task task) throws BuildException {\n\t\t// TODO Auto-generated method stub\n\t//\tSystem.out.println(\"In addTask with task:\" + task.toString());\n\t\t//log(\"In addTask with task:\" + task.toString());\n\t\tthis.nestedtasks.add(task);\n\t}\n\t\n\t\n\tpublic void addTask(UnknownElement task) throws BuildException {\n\t\t\tthis.nestedtasks.add(task);\n\t\t}\t\n\t/**\n\t * @return\n\t */\n\tpublic String getLport() {\n\t\treturn lport;\n\t}\n\n\t/**\n\t * @return\n\t */\n\tpublic long getTimeout() {\n\t\treturn maxwait;\n\t}\n\n\t/**\n\t * @return\n\t */\n\tpublic String getRhost() {\n\t\treturn rhost;\n\t}\n\n\t/**\n\t * @return\n\t */\n\tpublic String getRport() {\n\t\treturn rport;\n\t}\n\n\t/**\n\t * @param string\n\t */\n\tpublic void setLport(String string) {\n\t\tlport = string;\n\t}\n\n\t/**\n\t * @param l\n\t */\n\tpublic void setTimeout(long l) {\n\t\tmaxwait = l;\n\t}\n\n\t/**\n\t * @param string\n\t */\n\tpublic void setRhost(String string) {\n\t\trhost = string;\n\t}\n\n\t/**\n\t * @param string\n\t */\n\tpublic void setRport(String string) {\n\t\trport = string;\n\t}\n\n}"}, {"count": 1, "tags": [], "text": "Created attachment 12661\nSample code, manual page for enhancement,", "is_private": false, "id": 63141, "creator": "mike.elmsly@ihug.co.nz", "time": "2004-09-06T23:05:31Z", "bug_id": 30582, "creation_time": "2004-09-06T23:05:31Z", "attachment_id": 12661}, {"count": 2, "tags": [], "bug_id": 30582, "text": "43083 also covers the same ground.\n\n*** This bug has been marked as a duplicate of 43083 ***", "id": 106912, "time": "2007-08-19T10:47:23Z", "creator": "peterreilly@apache.org", "creation_time": "2007-08-19T10:47:23Z", "is_private": false, "attachment_id": null}]
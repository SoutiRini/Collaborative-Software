[{"count": 0, "tags": [], "creator": "gael.stevens@oracle.com", "text": "The problem shows up when running AbsoluteFTP.jsp.  In our environment,\n the when following bit of code is extecuted:\n\n                     String responseAdvisoryEncoding =\n                         uc.getContentEncoding();\n                     if (responseAdvisoryEncoding != null)\n                         r = new InputStreamReader(i,\n                         responseAdvisoryEncoding);\n                     else\n                         r = new InputStreamReader(i, DEFAULT_ENCODING);\n\n The responseAdvisoryEncoding is 8bit, which is not a legal\n characterSet for the InputStreamReader, and\n a javax.servlet.jsp.JspException: 8bit is eventually thrown.\n\n One workaround is to put a try catch around it, and use the default\n encoding, as below.\n\n                    String responseAdvisoryEncoding =\n                       uc.getContentEncoding();\n                    if (responseAdvisoryEncoding != null)\n                       try { // contentEncoding can be 8bit, not a java encoding\n                         r = new InputStreamReader(i,\n                           responseAdvisoryEncoding);\n                       } catch (java.io.UnsupportedEncodingException ex){\n                         r = new InputStreamReader(i, DEFAULT_ENCODING);\n                       }\n                     else\n                         r = new InputStreamReader(i, DEFAULT_ENCODING);\n\n The basic issue is that content encoding, does not necessarily map to a\n java character encoding.  Im using jdk 1.3.1, so the new java nio Charset is\n not available.", "id": 18098, "time": "2002-06-19T18:29:25Z", "bug_id": 10024, "creation_time": "2002-06-19T18:29:25Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": 2154, "bug_id": 10024, "text": "Created attachment 2154\nFixes 8bit encoding error for AbsoluteFtp.jsp (20020514)", "id": 18370, "time": "2002-06-22T01:58:55Z", "creator": "gael.stevens@oracle.com", "creation_time": "2002-06-22T01:58:55Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "gael.stevens@oracle.com", "is_private": false, "text": "It may be that the charset from the ContentType is what you want, rather than\nthe ContentEncoding to create the InputStreamReader.  If so, then that\nattached diff file may be of some help.   The charset attribute of the content\ntype (if present) provides a good mapping (earlier jdk versions had some issues\nwith IANNA's TIS-620 v.s java's TIS620, don't know if it's fixed in a later\njdk).  The uc.getContentEncoding() really doesn't relate to the java encoding\nparameter (jdk 1.3) of the InputStreamReader's constructor.\n", "id": 18371, "time": "2002-06-22T02:07:37Z", "bug_id": 10024, "creation_time": "2002-06-22T02:07:37Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "It may be that the problem is with the example, AbsoluteFtp.jsp. As per the\nspec, 7.4 under Character Encoding : \n  Note that the charEncoding attribute should normally only be required when\n  accessing absolute URL resources where the protocol is not HTTP, and where the\n  encoding is not ISO-8859-1.\n\nIf so, then the example should include the charEncoding attribute.  Perhaps\na clarification of the spec is needed here.  The above section also says :\n\n  If the response has content encoding information (e.g.\n  URLConnection.getContentEncoding() has a non null value), then the\n  character encoding specified is used.\n\nIn the case of the URLConnection.getContentEncoding() returning 8bit, which is \nof course, non null and also not a valid java character encoding, what should be\nthe result?  This case is not covered in the error section under For External \nResources, as the URLConnection class does not throw an exception.  ", "is_private": false, "id": 18421, "creator": "gael.stevens@oracle.com", "time": "2002-06-23T16:13:21Z", "bug_id": 10024, "creation_time": "2002-06-23T16:13:21Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 10024, "is_private": false, "count": 4, "id": 18685, "time": "2002-06-27T22:22:27Z", "creator": "justyna.horwat@sun.com", "creation_time": "2002-06-27T22:22:27Z", "text": "This is an issue that needs to be resolved in the JSTL specification. Currently \nthe reference implementation correctly implements section 7.4 of the spec.\n\nI went ahead and filed your bug against the JSTL specification. Once the issue \nis addressed by the specification, it can be fixed in the RI."}, {"count": 5, "tags": [], "creator": "pierre.delisle@sun.com", "text": "JSTL 1.1 has been amended to properly handle this bug.\nAdvisory character encoding now properly fetched from \"charset\" attribute\nof \"content-type\" header.", "id": 34176, "time": "2003-03-31T14:01:57Z", "bug_id": 10024, "creation_time": "2003-03-31T14:01:57Z", "is_private": false, "attachment_id": null}]
[{"id": 202394, "tags": [], "bug_id": 61810, "is_private": false, "count": 0, "text": "The Problem:\n\nWhen the traffic spikes, the web application's business thread pool becomes full.\n\nJstack shows one of the thread is holding a lock that block most of other threads. The stack trace is as follows:\n\n\"HSFBizProcessor-DEFAULT-12-thread-332\" Id=10156 RUNNABLE\n        at java.util.zip.ZipFile.open(Native Method)\n        at java.util.zip.ZipFile.<init>(ZipFile.java:219)\n        at java.util.zip.ZipFile.<init>(ZipFile.java:149)\n        at java.util.jar.JarFile.<init>(JarFile.java:166)\n        at java.util.jar.JarFile.<init>(JarFile.java:130)\n        at org.apache.catalina.loader.WebappClassLoaderBase.openJARs(WebappClassLoaderBase.java:3120)\n        at org.apache.catalina.loader.WebappClassLoaderBase.findResourceInternal(WebappClassLoaderBase.java:3409)\n        -  locked [Ljava.util.jar.JarFile;@972f6eb\n        at org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:3152)\n        at org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:1373)\n        at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1861)\n        -  locked org.apache.catalina.loader.WebappClassLoader@726ec590\n\n\nWe have a web application who has ~800 jar files under WEB-INF/lib. By default tomcat will close all the JarFile objects if there is no access to the jar file after 90s, which is hard-coded.\n\nHowever, if at some point, we need to load a class that is not loaded before, tomcat will have to open all the jar files before trying to load the class. What makes matter worse is that, the disk is HDD, which makes Opening ~800 jar files quite time consuming, eventually cause this operation to block all other threads.\n\n\nLessons learned:\n\nEnable parallel class loading, so that one thread trying to load a class don't block other threads. However, if multiple threads trying to load the same class, the issue might still happen.\n\n\nNew Proposal:\n\nFrom my point of view, the reason why Tomcat close all the jars opened is to release the file descriptors to save resources. If resource is not a problem, we can keeps all the jar opened for a fairly long time, or even keeps them always opened. \n\nTherefore, we propose to introduce a new attribute, called 'jarOpenInterval', in WebappClassLoaderBase, to track the interval that can keep all the jars opened if they are not accessed. The default value is 90000 milliseconds, which is the same as the current implementation. The attribute can be configured in two ways:\n\n1. static configuration in context.xml\n\n<Loader jarOpenInterval=\"90000\" />\n\n2. dynamic configuration via JMX. This value should be changed during runtime.\n\n\nAny thoughts?\n\np.s. About the default value for jarOpenInterval, I found that Tomcat 8+ has removed the implementation of the close jar operation, which indeed will hold all the file descriptors during start up. Does that mean that holding all the file descriptor is not a issue any more? Can we keep all jars open by default?", "time": "2017-11-24T05:38:30Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2017-11-24T05:38:30Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "(In reply to Huxing Zhang from comment #0)\n> p.s. About the default value for jarOpenInterval, I found that Tomcat 8+ has\n> removed the implementation of the close jar operation, which indeed will\n> hold all the file descriptors during start up. Does that mean that holding\n> all the file descriptor is not a issue any more? Can we keep all jars open\n> by default?\n\nSo this is only an issue for Tomcat 7, then, correct?\n\nI wonder if it's worth a change for such an old version of Tomcat. Tomcat 7 at this point is *very* stable.\n\nI have no objections to this new feature; just wondering if it makes more sense to patch Tomcat 7 or encourage \"the client\" to upgrade to Tomcat 8+.", "id": 202407, "time": "2017-11-24T23:17:31Z", "bug_id": 61810, "creation_time": "2017-11-24T23:17:31Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61810, "attachment_id": null, "is_private": false, "id": 202408, "time": "2017-11-25T04:15:10Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2017-11-25T04:15:10Z", "text": "(In reply to Christopher Schultz from comment #1)\n> (In reply to Huxing Zhang from comment #0)\n> > p.s. About the default value for jarOpenInterval, I found that Tomcat 8+ has\n> > removed the implementation of the close jar operation, which indeed will\n> > hold all the file descriptors during start up. Does that mean that holding\n> > all the file descriptor is not a issue any more? Can we keep all jars open\n> > by default?\n> \n> So this is only an issue for Tomcat 7, then, correct?\n\nYes.\n\n> \n> I wonder if it's worth a change for such an old version of Tomcat. Tomcat 7\n> at this point is *very* stable.\n\nI don't want to change the default value for tomcat 7 by adding this new feature. But I think tomcat should support the option to turn it off.\n\n> \n> I have no objections to this new feature; just wondering if it makes more\n> sense to patch Tomcat 7 or encourage \"the client\" to upgrade to Tomcat 8+.\n\nYes, we are planning to upgrade to Tomcat 8.5, but it needs some time. We have to fix it since it does affect the business.\n\nI have a patch for this feature, and will upload it later."}, {"count": 3, "tags": [], "bug_id": 61810, "attachment_id": 35581, "text": "Created attachment 35581\nSupport configure the interval to keep all jars open if no jar is accessed", "id": 202558, "time": "2017-12-04T02:17:04Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2017-12-04T02:17:04Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 61810, "attachment_id": null, "is_private": false, "id": 202687, "time": "2017-12-11T03:45:30Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2017-12-11T03:45:30Z", "text": "Any comments on the patch? If there is no objection, I am planning to commit the code in the next one or two days."}, {"count": 5, "tags": [], "bug_id": 61810, "attachment_id": null, "id": 202733, "creation_time": "2017-12-12T13:55:39Z", "time": "2017-12-12T13:55:39Z", "creator": "knst.kolinko@gmail.com", "text": "1. Overall it looks OK.\nYou must update documentation as well\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/loader.html\n\n2. FYI: See also bug 52448. Its idea is to scan the jars and cache their indexes, to reopen only those jars that contain the class that is to be loaded.", "is_private": false}, {"text": "> 2197 \tsynchronized (jarFiles) {\n> 2198 \t   if (force || (jarOpenInterval > 0 && System.currentTimeMillis()\n> 2199 \t                            > (lastJarAccessed + jarOpenInterval))) {\n\nThe above lines can be additionally wrapped with \"if (force || (jarOpenInterval > 0))\", to avoid wasting time on \"synchronized (jarFiles)\" when jarOpenInterval is negative (the jar closing feature is turned off).", "tags": [], "bug_id": 61810, "is_private": false, "count": 6, "id": 202734, "time": "2017-12-12T14:04:06Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-12-12T14:04:06Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 61810, "attachment_id": null, "text": "(In reply to Konstantin Kolinko from comment #5)\n> 1. Overall it looks OK.\n> You must update documentation as well\n> http://tomcat.apache.org/tomcat-7.0-doc/config/loader.html\n\nRight, it is on my TODO list.\n\n> \n> 2. FYI: See also bug 52448. Its idea is to scan the jars and cache their\n> indexes, to reopen only those jars that contain the class that is to be\n> loaded.\n\n\nYes, actually I would like to propose a similar enhancement after finishing this, that is instead of reopen all the jars, we could just open the specific jar if we know that where the class/resource is located.\n\nDuring startup, Tomcat scans the jars for annotations, at this time, class are loaded as resource, but  not defined, therefore MANIFEST.MF are not required.\n\nHowever, when a class is loaded during runtime, MANIFEST.MF is required according to JVM spec. If the jars are closed, we have to open all the jars to find the class. This logic can be found within org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String, java.lang.String, boolean):\n\n        ResourceEntry entry = resourceEntries.get(path);\n        if (entry != null) {\n            if (manifestRequired && entry.manifest == MANIFEST_UNKNOWN) {\n                // This resource was added to the cache when a request was made\n                // for the resource that did not need the manifest. Now the\n                // manifest is required, the cache entry needs to be updated.\n                synchronized (jarFiles) {\n                    if (openJARs()) {\n                        ...\n                     }\n                }\n            }\n            return entry;\n        }\n\nIf we can record which jar is a class is loaded (as resource) from, we can just open that specific jar file instead of all jars.\n\nThis will be very helpful when a class is scanned before and being loaded for the first time.", "id": 202849, "time": "2017-12-20T06:37:53Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2017-12-20T06:37:53Z", "is_private": false}, {"count": 8, "tags": [], "creator": "huxing.zhang@gmail.com", "attachment_id": null, "is_private": false, "id": 202850, "time": "2017-12-20T06:43:20Z", "bug_id": 61810, "creation_time": "2017-12-20T06:43:20Z", "text": "(In reply to Konstantin Kolinko from comment #6)\n> > 2197 \tsynchronized (jarFiles) {\n> > 2198 \t   if (force || (jarOpenInterval > 0 && System.currentTimeMillis()\n> > 2199 \t                            > (lastJarAccessed + jarOpenInterval))) {\n> \n> The above lines can be additionally wrapped with \"if (force ||\n> (jarOpenInterval > 0))\", to avoid wasting time on \"synchronized (jarFiles)\"\n> when jarOpenInterval is negative (the jar closing feature is turned off).\n\nDo mean sth. like this?\n\nif (jarFiles.length > 0 && (force || jarOpenInterval > 0)) {\n    synchronized (jarFiles) {\n        if (force || (jarOpenInterval > 0 && System.currentTimeMillis()\n                                  > (lastJarAccessed + jarOpenInterval))) {\n            ...\n        }\n    }\n}\n\nIf so, yes, I think it is better, I will take that."}, {"count": 9, "tags": [], "bug_id": 61810, "attachment_id": null, "id": 202866, "time": "2017-12-20T14:23:26Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-12-20T14:23:26Z", "is_private": false, "text": "(In reply to Huxing Zhang from comment #8)\n> (In reply to Konstantin Kolinko from comment #6)\n> \n> Do mean sth. like this?\n> \n> if (jarFiles.length > 0 && (force || jarOpenInterval > 0)) {\n> ...\n> \n> If so, yes, I think it is better, I will take that.\n\nYes."}, {"count": 10, "tags": [], "bug_id": 61810, "attachment_id": null, "id": 202886, "creation_time": "2017-12-21T14:38:08Z", "time": "2017-12-21T14:38:08Z", "creator": "huxing.zhang@gmail.com", "text": "This feature will be available from 7.0.84 onwards.", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 25777, "is_private": false, "text": "A potentially serious regression seems to have been introduced between 1.6 beta\n3 and the final release, I believe caused by\n\n----------------------------\nrevision 1.155\ndate: 2003/12/11 12:11:36;  author: peterreilly;  state: Exp;  lines: +2 -12\nIn addReference, remove calling tostring on the references being added.\nThe tostring can be a very expensive operation, and causes\nmassive slowdown when used in conjuction with antcall.\n----------------------------\n\nThe effect is that if one script defines a path object including another path\nobject, it cannot pass it to another script with <ant>; an error results. It is\nas if the XML form of the reference's definition, rather than its final value,\nis being passed. This is very bad because it breaks encapsulation of the scripts\n- and anyway the default for <ant> is inheritrefs=\"false\", meaning that the\nchild script is not getting all the references the parent might have used to\ncreate the reference it explicitly passed.\n\nSee the attached log. Here script1.xml calls script2.xml, passing it a path\nwhich should consist of foo.jar:bar.jar. In scenario A, to make things\ninteresting, the passed reference name is actually used for another purpose (the\nfoo.jar component) in script1.xml, but script2.xml should not know or care about\nthis. In scenario B, a fresh reference name is chosen. In either scenario,\nscript2.xml accepts the passed-in reference and tries to use it.\n\nEither scenario works fine in Ant 1.5.3, and in fact in Ant 1.6 beta 3. In the\nAnt 1.6 final release, or the development HEAD, you get an error in script2.xml:\nin scenario A, it confuses the two usages of the reference name \"path1\" and\nthinks there is a circularity error; in B, it just thinks that a path component\nis undefined (because script2.xml cannot see \"path1\").\n\n(Note that passing -verbose does not show you the original stack trace of the\nexception that was thrown; this information is lost when you run the child\nbuild. This is a separate bug in ProjectHelper for which I will attach a patch.\nThe HEAD build in /space/src/ant/dist shown in the log includes this patch so\nyou can see where the exception is being thrown from.)\n\nWhen I back out the abovementioned Project.java patch and try again, the build\nworks as it did before.\n\nNote that you can make things work with the buggy Project if you use scenario B\n(choose a fresh reference name for the passed path) and add inheritrefs=\"true\"\nto <ant>, so that script2.xml can see path1 and evaluate path2 ~ path3 using it.\nAs I say, this is undesirable because it breaks encapsulation: script2.xml has\nto accept random references from script1.xml.\n\nBTW I encountered this bug because my own scripts were broken by it; I have a\nmaster script for a module with a javac path with ref 'cp', and a target 'test'\nbuilds a ref 'source.cp' ~ ${cp}:src and then calls a child script with unit\ntests, which accept a reference to path to compile tests against. This setup\nworked until the Ant 1.6 release.\n\nIf the new behavior is accidental, it is potentially serious and should be\ncovered by unit tests. If it is intentional, it is IMHO undesirable (breaks\nuser's intuitive model of passing a value to a child script, inconsistent with\nhow string properties work), and also an incompatible change not mentioned in\nWHATSNEW.\n\nNot sure how to fix except by backing out Peter's optimization. It would be fine\nto pass a lazy Path object, constructed on demand, *if* this were really\ntransparent, so that references were looked up in the context of the project\nwhich defined the path, rather than the project which is using it.\n\nBTW a disturbing thing about this bug is that it seems that calling toString()\non Path mutates it and modifies its behavior (I am guessing because\ndieOnCircularReference calls setChecked). Not very nice for someone trying to\nrun Ant in a debugger which calls toString() on objects in the call stack for\npurposes of inspection.", "id": 49753, "time": "2003-12-28T01:19:16Z", "creator": "jglick@apache.org", "creation_time": "2003-12-28T01:19:16Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 25777, "attachment_id": 9714, "is_private": false, "id": 49754, "time": "2003-12-28T01:19:39Z", "creator": "jglick@apache.org", "creation_time": "2003-12-28T01:19:39Z", "text": "Created attachment 9714\nShell script log demoing bug"}, {"count": 2, "tags": [], "text": "Created attachment 9715\nSuggested patch to ProjectHelper to solve lack of stack trace (incidental problem mentioned in bug report)", "is_private": false, "id": 49755, "creator": "jglick@apache.org", "time": "2003-12-28T01:20:52Z", "bug_id": 25777, "creation_time": "2003-12-28T01:20:52Z", "attachment_id": 9715}, {"count": 3, "tags": [], "bug_id": 25777, "is_private": false, "text": "Created attachment 9716\nSuggested patch to fix the bug in the case of <path>", "id": 49756, "time": "2003-12-28T01:55:43Z", "creator": "jglick@apache.org", "creation_time": "2003-12-28T01:55:43Z", "attachment_id": 9716}, {"count": 4, "tags": [], "bug_id": 25777, "is_private": false, "text": "The attached patch seems to work on the test case, i.e. for <path>. (All unit\ntests pass with it for me.) It seems that adding a Reference to a Path's\n'elements' list just adds the Reference, which itself does not have a reference\nto the Project. This is OK in and of itself, but when <ant> passes a reference\nit calls clone(), and Path.clone() just passes along the raw Reference (i.e.\nname) without any context. So the patch just references the Reference eagerly,\nwhen it is added in setRefid.\n\nAn alternative patch would change clone() to not simply clone 'elements' but\ncreate a new list with any Reference's replaced by their referents. However it\nmight be trickier to do that way since I think it would need to also recursively\nprocess elements of type Path - perhaps by clone()ing them too. Maybe something like\n\np.elements = (Vector)elements.clone();\n// ADDED ->\nListIterator i = p.elements.listIterator();\nwhile (i.hasNext()) {\n    Object r = i.next();\n    if (r instanceof Reference) {\n        // (also check here that it is really a Path)\n        Path p = (Path)r.getReferencedObject(getProject());\n        i.set(p.clone());\n    }\n}\n// <- ADDED\n\nNote #1: I would have thought that the patch would break the usage of adding a\nreference to a path you have not defined yet, e.g.\n\n---%<---\n<path id=\"path2\">\n    <path refid=\"path1\"/>\n    <pathelement location=\"bar.jar\"/>\n</path>\n<path id=\"path1\">\n    <pathelement location=\"foo.jar\"/>\n</path>\n---%<---\n\nFor reasons I don't understand, this seems to work the same as before, with the\nsame odd message as before (message introduced between 1.5.3 and 1.6 beta 3):\n\n---%<---\nBuildfile: script1.xml\nOverriding previous definition of reference to path1\n\none-A:\n\ntwo-A:\n     [echo] pathval=/tmp/foo.jar:/tmp/bar.jar\n---%<---\n\nIMHO it should never have worked (the analogous forward reference does not work\nfor string properties), but perhaps someone relies on this behavior.\n\nNote #2: the patch only corrects <path>. I assume that other datatypes in Ant\nwhich use refid, e.g. <fileset>, <xmlcatalog>, etc., suffer from the same bug,\nunless they happen to override clone() in such a way as to dereference all\nReference's.", "id": 49757, "time": "2003-12-28T02:17:00Z", "creator": "jglick@apache.org", "creation_time": "2003-12-28T02:17:00Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "I defenitely think that Peter removal of the toString() was the right thing to \ndo. This was not just some optimization, it was a superflous call causing a \n20% time increase in some builds. Not peanuts at all. (And maskerading a real \nbug, the one you have found).\n\nI would like to find a solution that applies to all references, not only Paths.\nIt seem to me what is missing is for <ant/> to call some form of \"resolve\" \nmethod, when passing a reference. So, instead of just a call to clone() we \nwould do a call to something like cloneAndResolve() that will perhaps use \nsomething simillar to dieOnCircularReference to resolve all inner references \nof the object.\n\nI guess in principle you only need to do this when references are passed \nexplicitly and inheritRefs=false; when inheritRefs=true, it may not be needed.\n", "is_private": false, "id": 49786, "creator": "j_a_fernandez@yahoo.com", "time": "2003-12-29T11:17:51Z", "bug_id": 25777, "creation_time": "2003-12-29T11:17:51Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 49793, "time": "2003-12-29T17:27:47Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-12-29T17:27:47Z", "text": "It does look like the removal of the toString causes a BC issue.\n\nHowever, the use of toString() in Project#addReference() to resolve\ndependences looks like an unintended side-effect.\n\nThe problem is that Project a exports reference r which has a reference\nto a non-exported reference c, this appears to only work for paths in 1.5\ndue to the implementation of \"toString()\".\n\nThe patch to Path however causes some unit tests to fail.\nPathTest#testEmptyElementIfIsReference\nAddTypeTest#testConditionConditionTask,testAddConfigured"}, {"count": 7, "tags": [], "text": "[To Jose] Not sure whether the method should be clone() or cloneAndResolve().\nProbably only needed when some refs are passed explicitly (not quite obvious to\nme). And yes, removing toString() in Peter's patch was definitely desirable; it\nis just that it exposed some underlying bugs.\n\n[To Peter] The only side-effect of toString() here is that it sets the checked\nflag for circular refs. If you call dieOnCircularRefs with the first project, it\nsucceeds; with the second project, it fails. So if you call toString() on the\npath before passing it, dOCR succeeds and sets checked; otherwise, it is called\nlater when the Path is used, with the wrong project (project #2), and fails.\nPath.list() gives the correct result so long as dOCR does not prevent it from\nreturning!\n\n(BTW all unit tests passed for me with the original patch, not sure why it would\nbe different for you.)\n\n[Generally] The essence of the problem is this: Reference is meaningless without\na Project context; Path (e.g.) potentially keeps a bunch of Reference's around,\nand also one Project. The Reference should be resolved w.r.t. the Project in\nwhich it was defined, which is normally held by the Path which is also holding\nthe Reference.\n\nPath.dieOnCircularReference() is buggy because it passes a single Project\nthrough the whole recursive call tree, which is nonsense. Each nested Path may\nhave its own Project. Attaching a patch which corrects this (for Path only -\nshould not be hard to generalize for other data types). It seems to fix the\nobserved problem. Note that DataType.dieOnCircularReference should just not take\na Project parameter at all - it is useless, since a correct subclass would not\nuse it except to recurse.\n\nYet another solution is to just keep a Project pointer in Reference to begin\nwith. I will attach a different patch that follows this approach. Again, the\npatch only corrects Path. However it should be much easier to generalize to\nother data types than the original patch: just do a global search-and-replace of\ngetReferencedObject(...something...) with getReferencedObject(), plus some\nsanity checking of course, and fix the handful of explicit uses of new\nReference(...) to take a Project parameter. The patch introduces two API changes\nof note:\n\n1. Reference now has a bean field 'project' of type Project, and a constructor\ntaking Project, and a method getReferencedObject() with no args. Making a\nReference without an associated Project, or derefering the ref with a different\nproject, becomes deprecated.\n\n2. IntrospectionHelper can assign attribute values based not only on types with\na constructor taking String, but also for those taking the pair\n(Project,String). Path was already doing this with a special case which is\ngeneralized by the patch.\n\nI think I like this patch best since it addresses the core problem directly and\nmore understandably, without any apparent overhead. Seems to fix the reported\nbug. Does not break existing unit tests (for me).", "is_private": false, "id": 49803, "creator": "jglick@apache.org", "time": "2003-12-29T19:07:06Z", "bug_id": 25777, "creation_time": "2003-12-29T19:07:06Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 25777, "is_private": false, "text": "Created attachment 9729\nFix for buggy Path.dieOnCircularReference", "id": 49804, "time": "2003-12-29T19:07:41Z", "creator": "jglick@apache.org", "creation_time": "2003-12-29T19:07:41Z", "attachment_id": 9729}, {"count": 9, "tags": [], "bug_id": 25777, "attachment_id": 9730, "is_private": false, "id": 49805, "time": "2003-12-29T19:08:59Z", "creator": "jglick@apache.org", "creation_time": "2003-12-29T19:08:59Z", "text": "Created attachment 9730\nRecommended patch - changes Reference to keep track of which Project it is associated with"}, {"count": 10, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 49806, "time": "2003-12-29T19:12:03Z", "creator": "jglick@apache.org", "creation_time": "2003-12-29T19:12:03Z", "text": "Note that the third patch also makes the Project parameter to\nDataType.dieOnCircularReference superfluous."}, {"count": 11, "tags": [], "bug_id": 25777, "is_private": false, "text": "I added the change to projecthelper and introspectionhelper.\n\nThe change to references seem like a good idea - need to\nthink on it and get other committers input. - peter.", "id": 49855, "time": "2003-12-30T16:59:40Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-12-30T16:59:40Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 25777, "is_private": false, "text": "*** Bug 29974 has been marked as a duplicate of this bug. ***", "id": 60296, "time": "2004-07-08T11:39:39Z", "creator": "peterreilly@apache.org", "creation_time": "2004-07-08T11:39:39Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "Hi folks, this bug is still open (I have created myself a bug demo using the\nduplicate bug 29974).\nI am having a look at the part of the patch of Jesse which was covering\nReference.java.\nI am assigning the bug to me, but welcome all suggestions ...", "is_private": false, "id": 69018, "creator": "antoine@apache.org", "time": "2004-12-27T19:21:26Z", "bug_id": 25777, "creation_time": "2004-12-27T19:21:26Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "Created attachment 13857\nchanges in Reference of Jesse Glick + changes in ant + testcases\n\nI have implemented here what Jesse mentioned earlier :\nquote :\ndo a global search-and-replace of\ngetReferencedObject(...something...) with getReferencedObject(), plus some\nsanity checking of course, and fix the handful of explicit uses of new\nReference(...) to take a Project parameter.", "is_private": false, "id": 69064, "creator": "antoine@apache.org", "time": "2004-12-29T22:16:05Z", "bug_id": 25777, "creation_time": "2004-12-29T22:16:05Z", "attachment_id": 13857}, {"count": 15, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 69065, "time": "2004-12-29T22:33:27Z", "creator": "antoine@apache.org", "creation_time": "2004-12-29T22:33:27Z", "text": "I am wondering what can be the impact of the changes in Reference.java for API\nusers. In order to do what Jesse described, I have to change in the source code\nof the testcases the creation of references so that they work with new\nReference(Project, String) instead of new Reference(String); otherwise the\nreferences created programmatically would not be usable. \nIs this the kind of problems that you had in mind Peter ?"}, {"count": 16, "tags": [], "creator": "jglick@apache.org", "text": "Cool...\n\nIn Property, I think the whole 'fallback' field is totally unnecessary now and\nshould be deleted, and the (undocumented) constructor Property(boolean\nuserProperty, Project fallback) could be deprecated.\n\nShould add to Javadoc of DataType.dieOnCircularReference that the project\nparameter is now useless - at least in the default impl. (No idea why anyone\nwould override this, but it is nonfinal.)\n\nProjectHelper.java error reporting patch may still be valid.", "id": 69082, "time": "2004-12-30T15:57:04Z", "bug_id": 25777, "creation_time": "2004-12-30T15:57:04Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 25777, "text": "Created attachment 13912\npatch to Reference and unit test\n\nHi Antoine, your patch is a bit too extreme and not backward compible.\nI think that all that needs to be done is to change\nReference#getReferencedObject(Project) to use the project in the\nreference (if present) and not the project in the parameter.\nI have attached a patch with the changes to Reference and the\nunit test.", "id": 69279, "time": "2005-01-06T18:00:41Z", "creator": "peterreilly@apache.org", "creation_time": "2005-01-06T18:00:41Z", "is_private": false, "attachment_id": 13912}, {"count": 18, "tags": [], "text": "Hi Jesse, the projecthelper patch has already been applied.\n", "is_private": false, "id": 69280, "creator": "peterreilly@apache.org", "time": "2005-01-06T18:03:16Z", "bug_id": 25777, "creation_time": "2005-01-06T18:03:16Z", "attachment_id": null}, {"count": 19, "tags": [], "creator": "antoine@apache.org", "text": "Hi Peter,\nfeel free to proceed, I trust you. I also thought that my patch was too extreme.\nCheers,\nAntoine", "id": 69292, "time": "2005-01-06T21:47:38Z", "bug_id": 25777, "creation_time": "2005-01-06T21:47:38Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 25777, "is_private": false, "text": "Re. Peter's patch, wouldn't it be better to at least deprecate\ngetReferencedObject(Project) and remove the project parameter from all uses, as\nAntoine's patch did? Seems just needlessly confusing to leave the now-useless\nproject parameter in there everywhere. I would rather suggest starting with\nAntoine's patch (with the minor comments I mentioned) and just making\ngetReferencedObject(Project) behave as you have it, i.e. using the supplied\nproject as a fallback only, but still deprecating it. As far as I can see, this\nwould be compatible.", "id": 69321, "time": "2005-01-07T02:00:46Z", "creator": "jglick@apache.org", "creation_time": "2005-01-07T02:00:46Z", "attachment_id": null}, {"count": 21, "tags": [], "creator": "peterreilly@apache.org", "text": "I think that Antonies patch is not backward compatible.\nAny third party tasks that create references will not\nwork, this can be seen from the changes that were\nnecessary to the unit tests.", "id": 69346, "time": "2005-01-07T13:08:24Z", "bug_id": 25777, "creation_time": "2005-01-07T13:08:24Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 69438, "time": "2005-01-08T18:52:29Z", "creator": "jglick@apache.org", "creation_time": "2005-01-08T18:52:29Z", "text": "Try Antoine's patch minus most test patches plus making the parameter to\ngetReferencedObject(Project) only be a fallback, as in your (Peter's) patch.\nWhere is the incompatibility exactly?"}, {"count": 23, "tags": [], "bug_id": 25777, "is_private": false, "text": "I did try the tests without being patched and with the change\nto Reference#getReferencedObject(Project) and all\nof them failed.\nfor example with DirSetTest.\n   [junit] Testsuite: org.apache.tools.ant.types.DirSetTest\n    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0.016 sec\n\n    [junit] Testcase: testFileSetIsNoDirSet took 0.011 sec\n    [junit]     FAILED\n    [junit] expected:<dummy doesn't denote a DirSet> but was:<No project set on\nreference to dummy>\n    [junit] junit.framework.ComparisonFailure: expected:<dummy doesn't denote a\nDirSet> but was:<No project set on reference to dummy>\n    [junit]     at junit.framework.Assert.assertEquals(Assert.java:81)\n\nIt may not be too much of an issue, as one is meant to use\nProject#addReference(String, Object) rather than create the\nreference directly, but there may be third party code that does this.", "id": 69479, "time": "2005-01-10T14:44:58Z", "creator": "peterreilly@apache.org", "creation_time": "2005-01-10T14:44:58Z", "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 70051, "time": "2005-01-25T02:23:49Z", "creator": "jglick@apache.org", "creation_time": "2005-01-25T02:23:49Z", "text": "Wasn't this now FIXED for 1.7? Is there something else coming?"}, {"count": 25, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 70162, "time": "2005-01-27T11:33:21Z", "creator": "peterreilly@apache.org", "creation_time": "2005-01-27T11:33:21Z", "text": "Yes it is in 1.7. Question, should we push it to 1.6.3?"}, {"count": 26, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 70181, "time": "2005-01-27T16:14:57Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-27T16:14:57Z", "text": "Is there a danger in doing so?  This is restoring BC from pre 1.6, right?"}, {"count": 27, "tags": [], "bug_id": 25777, "attachment_id": null, "is_private": false, "id": 70205, "time": "2005-01-27T22:05:48Z", "creator": "jglick@apache.org", "creation_time": "2005-01-27T22:05:48Z", "text": "So at least marking FIXED for 1.7 for now.\n\nSince this is a regression, I would be in favor of merging to 1.6.3 to get\npeople the fix as soon as possible."}, {"count": 28, "tags": [], "bug_id": 25777, "text": "That's kind of where I was going.", "id": 70206, "time": "2005-01-27T22:12:30Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-27T22:12:30Z", "is_private": false, "attachment_id": null}, {"count": 29, "tags": [], "text": "Ok it is moved to 1.6.3!\n", "is_private": false, "id": 70223, "creator": "peterreilly@apache.org", "time": "2005-01-28T10:40:17Z", "bug_id": 25777, "creation_time": "2005-01-28T10:40:17Z", "attachment_id": null}]
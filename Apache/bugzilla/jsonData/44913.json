[{"attachment_id": 21888, "tags": [], "creator": "jacob.abrams@glu.com", "text": "Created attachment 21888\nSource code to demonstrate the bug. The main class is ZipUtils.\n\nI have a simple class that can compress and extract zip files using the classes in the package org.apache.tools.zip. The compression works fine and several zip programs are able to read the file: Info-zip, ALZip, etc. However when I attempt to extract the zip file again using the classes in org.apache.tools.zip it fails. There is no exception thrown, instead the method getEntries() returns a value of 0, indicating that this is a completely empty zip file.\n\nIf you modify this line of code in my ZipUtils class, it will start working:\n\nWORKS:\n\nfinal ZipOutputStream jos = new ZipOutputStream( new BufferedOutputStream( new FileOutputStream( outfile ) ) );\n\nDOESN'T WORK:\n\nfinal ZipOutputStream jos = new ZipOutputStream( outfile );\n\nThe subsequent line causes the ZipOutputStream to use a RandomAccessFile when making the zip file. I would prefer to use the RandomAccessFile because it does not result in the creation of extra Data Descriptor chunks that waste space. I don't know if the problem is with the compression or the extraction, but my guess is the extraction since I can open the created zip file in many native programs.\n\nI have attached my code to this bug.", "count": 0, "id": 116074, "time": "2008-04-30T12:28:39Z", "bug_id": 44913, "creation_time": "2008-04-30T12:28:39Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44913, "text": "I have encountered the same problem, however the problem only comes up when using a simple Ant build script.\n\nThe Ant build script does the following steps:\n\n1. Create a zip file containing one file, a jar\n1.a. Test unzipping the original jar file to ensure that it is valid/works\n2. Unzip the zip file\n3. Unzip the jar file from the unzipped zip file\n\nAt step 3 the unzip operation fails.  Note that this problem occurs only using an Ant build script with no custom classes or coding.  Here's the exception that I get:\n\njava.io.EOFException\n\tat java.io.RandomAccessFile.readFully(RandomAccessFile.java:383)\n\tat java.io.RandomAccessFile.readFully(RandomAccessFile.java:361)\n\tat org.apache.tools.zip.ZipFile.populateFromCentralDirectory(ZipFile.java:267)\n\tat org.apache.tools.zip.ZipFile.<init>(ZipFile.java:143)\n\tat org.apache.tools.ant.taskdefs.Expand.expandFile(Expand.java:136)\n\tat org.apache.tools.ant.taskdefs.Expand.execute(Expand.java:106)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)", "id": 116345, "time": "2008-05-07T09:47:44Z", "creator": "david.green@maketechnologies.com", "creation_time": "2008-05-07T09:47:44Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 44913, "attachment_id": null, "id": 116346, "time": "2008-05-07T09:50:10Z", "creator": "david.green@maketechnologies.com", "creation_time": "2008-05-07T09:50:10Z", "is_private": false, "text": "I suspect that the zip file creation is the culprit, since 3rd party tools cannot unzip the file correctly."}, {"count": 3, "tags": [], "bug_id": 44913, "attachment_id": null, "id": 116351, "time": "2008-05-07T11:20:27Z", "creator": "david.green@maketechnologies.com", "creation_time": "2008-05-07T11:20:27Z", "is_private": false, "text": "this may be an OS-specific or VM-specific issue, as the same build succeeds on MacOS X but fails on Linux 2.6.18-53.1.14.el5PAE #1 SMP Wed Mar 5 12:07:47 EST 2008 i686 i686 i386 GNU/Linux\n\nVM configuration:\n\n[echoproperties] java.runtime.name=Java(TM) SE Runtime Environment\n[echoproperties] java.runtime.version=1.6.0_06-b02\n[echoproperties] java.specification.name=Java Platform API Specification\n[echoproperties] java.specification.vendor=Sun Microsystems Inc.\n[echoproperties] java.specification.version=1.6\n[echoproperties] java.vendor=Sun Microsystems Inc.\n[echoproperties] java.vendor.url=http\\://java.sun.com/\n[echoproperties] java.vendor.url.bug=http\\://java.sun.com/cgi-bin/bugreport.cgi\n[echoproperties] java.version=1.6.0_06\n[echoproperties] java.vm.info=mixed mode\n[echoproperties] java.vm.name=Java HotSpot(TM) Server VM\n[echoproperties] java.vm.specification.name=Java Virtual Machine Specification\n[echoproperties] java.vm.specification.vendor=Sun Microsystems Inc.\n[echoproperties] java.vm.specification.version=1.0\n[echoproperties] java.vm.vendor=Sun Microsystems Inc.\n[echoproperties] java.vm.version=10.0-b22\n"}, {"count": 4, "tags": [], "bug_id": 44913, "text": "interesting thing about this problem:  after creating the zip file, unzip it and discover that jar files that were zipped are now exactly double their original size.", "id": 116352, "time": "2008-05-07T11:48:42Z", "creator": "david.green@maketechnologies.com", "creation_time": "2008-05-07T11:48:42Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "david.green@maketechnologies.com", "text": "stupid me... turns out that my Ant build script was copying these jar files with a filterset prior to zipping them up.  Please ignore my previous comments.", "count": 5, "id": 116354, "time": "2008-05-07T12:32:52Z", "bug_id": 44913, "creation_time": "2008-05-07T12:32:52Z", "is_private": false}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "Jacob, does this happen independent of the input you use?\n\nRoundtripping archives is part of Ant's testsuite so I'm pretty certain that it works when used the way Ant uses it (<zip> uses the file argument constructor).  It could be related to the things you are trying to compress/extract.\n\nWith the attachment on its own it seems to work for me.", "id": 118806, "time": "2008-07-18T04:02:50Z", "bug_id": 44913, "creation_time": "2008-07-18T04:02:50Z", "is_private": false}]
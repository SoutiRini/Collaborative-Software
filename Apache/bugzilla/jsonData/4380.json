[{"count": 0, "tags": [], "bug_id": 4380, "attachment_id": null, "text": "The current tomcat ISAPI redirector cannot cope with more than\none filter / website => you can only have one redirector / website.\n\nIn some installation environments it is useful to allow multiple\nredirectors on the one website, though having too many could affect\nperformance.\n\nThis patch changes the headers used by the Filter to communicate\nto the Extension so that they are unique(ish) for each installed redirector.\n\nThe FilterProc clobbers these headers on entry (for security reasons) so\nthe next filter in the chain used to clobber the entries for a succesful\nuri/worker mapping, meaning you couldn't have 2 redirectors on the one \nwebsite.\n\nThe headers are currently a munge of the extension_uri.\nAnyone got a better unique id?\n\nDiff follows ... \n\nIndex: jk_isapi_plugin.c\n===================================================================\nRCS file: /home/cvspublic/jakarta-tomcat/src/native/mod_jk/iis/jk_isapi_plugin.c,v\nretrieving revision 1.9\ndiff -u -r1.9 jk_isapi_plugin.c\n--- jk_isapi_plugin.c\t2001/10/01 00:27:11\t1.9\n+++ jk_isapi_plugin.c\t2001/10/07 21:15:04\n@@ -86,13 +86,14 @@\n  * 2. The name of the worker to be used.\n  *\n  */\n-#define URI_HEADER_NAME         (\"TOMCATURI:\")\n-#define WORKER_HEADER_NAME      (\"TOMCATWORKER:\")\n #define CONTENT_LENGTH          (\"CONTENT_LENGTH:\")\n \n-#define HTTP_URI_HEADER_NAME     (\"HTTP_TOMCATURI\")\n-#define HTTP_WORKER_HEADER_NAME  (\"HTTP_TOMCATWORKER\")\n+char URI_HEADER_NAME[INTERNET_MAX_URL_LENGTH];\n+char WORKER_HEADER_NAME[INTERNET_MAX_URL_LENGTH];\n \n+char HTTP_URI_HEADER_NAME[INTERNET_MAX_URL_LENGTH];\n+char HTTP_WORKER_HEADER_NAME[INTERNET_MAX_URL_LENGTH];\n+\n #define REGISTRY_LOCATION       (\"Software\\\\Apache Software Foundation\\\\Jakarta Isapi Redirector\\\\1.0\")\n #define EXTENSION_URI_TAG       (\"extension_uri\")\n \n@@ -790,6 +791,8 @@\n static int initialize_extension(void)\n {\n     int rc = JK_FALSE;  \n+\tchar *tmp;\n+\tchar extension_header[INTERNET_MAX_URL_LENGTH];\n \n     if(read_registry_init_data()) {\n         jk_map_t *map;\n@@ -805,13 +808,41 @@\n \t\t} else {\n \t\t\t jk_log(logger, JK_LOG_DEBUG, \"Using registry.\\n\");\n \t\t}\n+\n+\t\t// Construct and normalise the headers to be used\n+\t\t// to track redirections from filter to extension\n+\t\t// these must be unique / filter to support multiple filters\n+ \t\tstrcpy(URI_HEADER_NAME, \"TOMCATURI\");\n+ \t\tstrcpy(WORKER_HEADER_NAME, \"TOMCATWORKER\");\n+\t\t// Take the extension_uri and mangle it\n+\t\tstrcpy(extension_header, extension_uri);\n+\t\ttmp = extension_header;\n+\t\twhile(*tmp) {\n+\t\t\tif('_' == *tmp) {\n+\t\t\t\t*tmp = '-';\n+\t\t\t}\n+\t\t\ttmp++;\n+\t\t}\n+\t\t*tmp = '\\0';\n+\t\t\n+\t\tstrcat(URI_HEADER_NAME, extension_header);\n+\t\tstrcat(WORKER_HEADER_NAME, extension_header);\n+\t\tstrcpy(HTTP_URI_HEADER_NAME, \"HTTP_\");\n+\t\tstrcpy(HTTP_WORKER_HEADER_NAME, \"HTTP_\");\n+\t\tstrcat(HTTP_URI_HEADER_NAME, URI_HEADER_NAME);\n+\t\tstrcat(HTTP_WORKER_HEADER_NAME, WORKER_HEADER_NAME);\n+\t\tstrcat(URI_HEADER_NAME, \":\");\n+\t\tstrcat(WORKER_HEADER_NAME, \":\");\n+\t\t\n \t\tjk_log(logger, JK_LOG_DEBUG, \"Using log file %s.\\n\", log_file);\n \t\tjk_log(logger, JK_LOG_DEBUG, \"Using log level %d.\\n\", log_level);\n \t\tjk_log(logger, JK_LOG_DEBUG, \"Using extension uri %s.\\n\", extension_uri);\n \t\tjk_log(logger, JK_LOG_DEBUG, \"Using worker file %s.\\n\", worker_file);\n \t\tjk_log(logger, JK_LOG_DEBUG, \"Using worker mount file %s.\\n\", worker_mount_file);\n \n-        \n+\t\tjk_log(logger, JK_LOG_DEBUG, \"Using tomcat headers '%s' and '%s'.\\n\", URI_HEADER_NAME, WORKER_HEADER_NAME);\n+\t\tjk_log(logger, JK_LOG_DEBUG, \"Using http tomcat headers '%s' and '%s'.\\n\", HTTP_URI_HEADER_NAME, HTTP_WORKER_HEADER_NAME);\n+       \n         if(map_alloc(&map)) {\n             if(map_read_properties(map, worker_mount_file)) {\n                 if(uri_worker_map_alloc(&uw_map, map, logger)) {\n@@ -987,6 +1018,8 @@\n     GET_SERVER_VARIABLE_VALUE(HTTP_WORKER_HEADER_NAME, (*worker_name));           \n     GET_SERVER_VARIABLE_VALUE(HTTP_URI_HEADER_NAME, s->req_uri);     \n \n+    jk_log(logger, JK_LOG_DEBUG, \"Into init_ws_service for uri '%s' using worker '%s'.\\n\", s->req_uri, (*worker_name));\n+\n     if(s->req_uri) {\n         char *t = strchr(s->req_uri, '?');\n         if(t) {\n@@ -1005,6 +1038,8 @@\n             return JK_FALSE;\n         getparents(s->req_uri);\n     }\n+\t\n+    jk_log(logger, JK_LOG_DEBUG, \"Initing service for uri '%s' using worker '%s'.\\n\", s->req_uri, (*worker_name));\n     \n     GET_SERVER_VARIABLE_VALUE(\"AUTH_TYPE\", s->auth_type);\n     GET_SERVER_VARIABLE_VALUE(\"REMOTE_USER\", s->remote_user);", "id": 7072, "time": "2001-10-23T13:29:56Z", "creator": "timw@ihug.co.nz", "creation_time": "2001-10-23T13:29:56Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 4380, "attachment_id": null, "text": "A sample config for this features would be useful", "id": 7076, "time": "2001-10-23T15:01:45Z", "creator": "nacho@apache.org", "creation_time": "2001-10-23T15:01:45Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "ealves@mobicomp.com", "attachment_id": null, "text": "Prepost pings are not sent before the first request over a new connection.\n\n  Here's a possible patch:\n\n<---- START OF PATCH ---->\n---\njakarta-tomcat-connectors-1.2.14.1-src-original/jk/native/common/jk_ajp_common.c\n   2005-05-26 15:36:14.000000000 +0100\n+++\njakarta-tomcat-connectors-1.2.14.1-src-modified/jk/native/common/jk_ajp_common.c\n   2005-08-26 18:25:22.000000000 +0100\n@@ -1229,7 +1229,11 @@\n         }\n         /* no need to handle cping/cpong here since it should be at connection\ntime */\n\n-        if (ajp_connect_to_endpoint(ae, l) == JK_TRUE) {\n+        if ((ajp_connect_to_endpoint(ae, l) == JK_TRUE) &&\n+                ((ae->worker->connect_timeout > 0) ||\n+                (!(ae->worker->prepost_timeout > 0)) ||\n+                (ajp_handle_cping_cpong(ae, ae->worker->prepost_timeout, l)\n+                    == JK_TRUE))) {\n             /*\n              * After we are connected, each error that we are going to\n              * have is probably unrecoverable\n<---- END OF PATCH ---->", "id": 79077, "time": "2005-08-26T19:42:53Z", "bug_id": 36385, "creation_time": "2005-08-26T19:42:53Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 36385, "attachment_id": null, "text": "cping/cpong are handled in ajp_connect_to_endpoint", "id": 79320, "time": "2005-09-02T10:43:15Z", "creator": "hgomez@apache.org", "creation_time": "2005-09-02T10:43:15Z", "is_private": false}, {"count": 2, "tags": [], "creator": "ealves@mobicomp.com", "attachment_id": null, "text": "(In reply to comment #1)\n> cping/cpong are handled in ajp_connect_to_endpoint\n\n  ajp_connect_to_endpoint sends a ping to validate the connection if\nconnect_timeout has been set.\n  However, if you haven't set connect_timeout and you've set prepost_timeout\n(asking for a ping to be sent before every request), no ping will be sent before\nthe first request.\n\n  Here's an alternative patch (against mod_jk 1.2.14) that I hope better\nillustrates what I'm trying to say:\n\n<---- START OF PATCH ---->\n--- jk_ajp_common.c\t2005-09-02 10:22:18.446771900 +0100\n+++ jk_ajp_common.c_modified\t2005-09-02 10:25:36.164484700 +0100\n@@ -881,6 +881,11 @@\n                         ae->worker->connect_timeout, l);\n             JK_TRACE_EXIT(l);\n             return rc;\n+        } else if (ae->worker->prepost_timeout > 0) {\n+            rc = ajp_handle_cping_cpong (ae,\n+                        ae->worker->prepost_timeout, l);\n+            JK_TRACE_EXIT(l);\n+            return rc;\n         }\n         JK_TRACE_EXIT(l);\n         return JK_TRUE;\n<---- END OF PATCH ---->\n\n  I understand that I can get the same behaviour by setting connect_timeout to\nthe same value as prepost_timeout, but setting prepost_timeout should be enough\nto have a ping sent before every request.", "id": 79321, "time": "2005-09-02T11:33:10Z", "bug_id": 36385, "creation_time": "2005-09-02T11:33:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 36385, "attachment_id": null, "id": 79322, "time": "2005-09-02T11:46:07Z", "creator": "hgomez@apache.org", "creation_time": "2005-09-02T11:46:07Z", "is_private": false, "text": "Well I prefer :\n\n         /* no need to handle cping/cpong here since it should be at connection\ntime */\n\n-        if (ajp_connect_to_endpoint(ae, l) == JK_TRUE) {\n+        if ((ajp_connect_to_endpoint(ae, l) == JK_TRUE) &&\n+                ((ae->worker->connect_timeout < 0) &&\n+                ((ae->worker->prepost_timeout > 0)) ||\n+                (ajp_handle_cping_cpong(ae, ae->worker->prepost_timeout, l)\n+                    == JK_TRUE))) {\n             /*\n              * After we are connected, each error that we are going to\n              * have is probably unrecoverable\n\n\nDon't send a ping before request if a ping as been send during connect !"}, {"count": 4, "tags": [], "bug_id": 36385, "attachment_id": null, "is_private": false, "id": 79323, "time": "2005-09-02T12:05:32Z", "creator": "hgomez@apache.org", "creation_time": "2005-09-02T12:05:32Z", "text": "Index: jk_ajp_common.c\n===================================================================\nRCS file: /home/cvs//jakarta-tomcat-connectors/jk/native/common/jk_ajp_common.c,v\nretrieving revision 1.119\ndiff -u -r1.119 jk_ajp_common.c\n--- jk_ajp_common.c\t26 May 2005 14:36:14 -0000\t1.119\n+++ jk_ajp_common.c\t2 Sep 2005 10:04:17 -0000\n@@ -1227,9 +1227,20 @@\n             JK_TRACE_EXIT(l);\n             return JK_FALSE;\n         }\n-        /* no need to handle cping/cpong here since it should be at connection\ntime */\n+        \n+        if ((ajp_connect_to_endpoint(ae, l) == JK_TRUE)) {\n \n-        if (ajp_connect_to_endpoint(ae, l) == JK_TRUE) {\n+           /* no need to handle cping/cpong if allready sent at connection time */\n+\n+           if ((ae->worker->connect_timeout <= 0) &&\n(ae->worker->prepost_timeout > 0)) {\n+             if (ajp_handle_cping_cpong(ae, ae->worker->prepost_timeout, l) !=\nJK_TRUE) {\n+                jk_log(l, JK_LOG_INFO,\n+                       \"Error sending ping pong on a fresh connection\");\n+                JK_TRACE_EXIT(l);\n+                return JK_FALSE;\n+             }\n+           }\n+           \n             /*\n              * After we are connected, each error that we are going to\n              * have is probably unrecoverable\n\nHere is my latest prefered patch.\n\nBTW, I couldn't commit it (damnt eclipse)"}, {"count": 5, "text": "Sending cping/cpong makes no sense if connect was successful,\nand it was deliberately removed from recent versions.\najp_connect_to_enpoint uses timeout (socket_timeout), and\nif it succeeds there is no need to try sending cping/cpong.\nTomcat will either hang or simply refuse the connection if\nthe max thread limit gets reached, so the first phase in that\ncase will fail.\nIMO there is no point of sending cping/cpong if new connection\nis established. It makes sense only with already connected sockets where\nit is used to deal with broken sockets.\n\n\n", "bug_id": 36385, "attachment_id": null, "id": 79324, "time": "2005-09-02T12:40:08Z", "creator": "mturk@apache.org", "creation_time": "2005-09-02T12:40:08Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 36385, "attachment_id": null, "id": 79326, "time": "2005-09-02T13:08:04Z", "creator": "ealves@mobicomp.com", "creation_time": "2005-09-02T13:08:04Z", "is_private": false, "text": "Comments inline.\n\n(In reply to comment #5)\n> Sending cping/cpong makes no sense if connect was successful,\n> and it was deliberately removed from recent versions.\n> ajp_connect_to_enpoint uses timeout (socket_timeout), and\n> if it succeeds there is no need to try sending cping/cpong.\n> Tomcat will either hang or simply refuse the connection if\n> the max thread limit gets reached, so the first phase in that\n> case will fail.\n\n  I've found this behaviour (which I consider a bug) when Enhydra/Tomcat had a\nproblem that allowed me to establish connections to the AJP port but wouldn't\nrespond to any requests (including the first one on a fresh connection).\n\n> IMO there is no point of sending cping/cpong if new connection\n> is established. It makes sense only with already connected sockets where\n> it is used to deal with broken sockets.\n\n  But that's the sole reason for the existence of the connect_timeout property:\nfor sending a cping/cpong after a new connection is established. What I think\nthat is a bug is the fact that if I use only prepost_timeout and not\nconnect_timeout, there is no cping/cpong before the first request (at least, if\nthis is the intended behavior, a remark should be make in the documentation).\n"}, {"count": 7, "tags": [], "text": "(In reply to comment #5)\n> Sending cping/cpong makes no sense if connect was successful,\n> and it was deliberately removed from recent versions.\n\n> ajp_connect_to_enpoint uses timeout (socket_timeout), and\n> if it succeeds there is no need to try sending cping/cpong.\n> Tomcat will either hang or simply refuse the connection if\n> the max thread limit gets reached, so the first phase in that\n> case will fail.\n\nI didn't agree. Even if you connect to the remote Tomcat, this one could be\nhang and that was the ping/pong goal, detect a zombie or hanged tomcat.\n\nI got case where the tomcat was able to do the accept but was in serious trouble\nat a later time, and didn't process the request.\n\n> IMO there is no point of sending cping/cpong if new connection\n> is established. It makes sense only with already connected sockets where\n> it is used to deal with broken sockets.\n\n", "is_private": false, "bug_id": 36385, "id": 79329, "time": "2005-09-02T13:54:10Z", "creator": "hgomez@apache.org", "creation_time": "2005-09-02T13:54:10Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 36385, "attachment_id": null, "id": 79330, "time": "2005-09-02T14:36:32Z", "creator": "remm@apache.org", "creation_time": "2005-09-02T14:36:32Z", "is_private": false, "text": "(In reply to comment #7)\n> I didn't agree. Even if you connect to the remote Tomcat, this one could be\n> hang and that was the ping/pong goal, detect a zombie or hanged tomcat.\n> \n> I got case where the tomcat was able to do the accept but was in serious trouble\n> at a later time, and didn't process the request.\n\nOk, but I don't see a way to guarantee that a Tomcat will process a request.\nAnswering a pong right after an accept does not add much."}, {"count": 9, "tags": [], "text": "at least you could be sure some sort of code in the request handler is still\nalive and running.\n\nNot a 100% guarantee of course :(", "is_private": false, "bug_id": 36385, "id": 79331, "time": "2005-09-02T14:43:19Z", "creator": "hgomez@apache.org", "creation_time": "2005-09-02T14:43:19Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 36385, "attachment_id": null, "id": 79333, "time": "2005-09-02T16:53:37Z", "creator": "remm@apache.org", "creation_time": "2005-09-02T16:53:37Z", "is_private": false, "text": "(In reply to comment #9)\n> at least you could be sure some sort of code in the request handler is still\n> alive and running.\n\nYes, it means the acceptor thread has managed to allocate a processor thread. If\nit can't it's supposed to close the socket, though, which should indicate the\nTomcat instance is \"down\".\n\nIf it does allocate the processor and starts doing things, I don't see how it\ncan fail to send a pong back. What is the Tomcat state where there would be a\nproblem ?\n\n(BTW, I think I've fixed the biggest AJP APR bugs, so you can test it: if your\nservers have resource efficiency issues, then it can't hurt)"}, {"count": 11, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "text": "This will be fixed in version 1.2.27.", "id": 112377, "time": "2008-01-01T16:03:54Z", "bug_id": 36385, "creation_time": "2008-01-01T16:03:54Z", "is_private": false}]
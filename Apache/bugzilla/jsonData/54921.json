[{"count": 0, "attachment_id": null, "creator": "george.forman@gmail.com", "is_private": false, "id": 167003, "time": "2013-05-03T04:01:20Z", "bug_id": 54921, "creation_time": "2013-05-03T04:01:20Z", "tags": [], "text": "My Servlet uses the Java Preferences API to persist a sequence number periodically.\n\nIf I *restart* my servlet without taking the entire Tomcat7 JVM down, then the next time my servlet tries to persist the updated number via Preferences.sync(), Catalina throws this error:\n\nMay 02, 2013 8:38:14 PM org.apache.catalina.loader.WebappClassLoader loadClass\nINFO: Illegal access: this web application instance has been stopped already.  Could not load com.sun.org.apache.xalan.internal.xsltc.dom.XSLTCDTMManager.  \n\nThe eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact.\njava.lang.IllegalStateException\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1599)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1558)\n        at com.sun.org.apache.xalan.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:548)\n        at com.sun.org.apache.xalan.internal.utils.ObjectFactory.lookUpFactoryClass(ObjectFactory.java:223)\n        at com.sun.org.apache.xalan.internal.xsltc.dom.XSLTCDTMManager.getDTMManagerClass(XSLTCDTMManager.java:112)\n        at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.<init>(TransformerFactoryImpl.java:239)\n        at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.<init>(TransformerFactoryImpl.java:231)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:525)\n        at java.lang.Class.newInstance0(Class.java:374)\n        at java.lang.Class.newInstance(Class.java:327)\n        at javax.xml.transform.FactoryFinder.newInstance(FactoryFinder.java:188)\n        at javax.xml.transform.FactoryFinder.find(FactoryFinder.java:296)\n        at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:101)\n        at java.util.prefs.XmlSupport.writeDoc(XmlSupport.java:263)\n        at java.util.prefs.XmlSupport.exportMap(XmlSupport.java:355)\n        at java.util.prefs.FileSystemPreferences$7.run(FileSystemPreferences.java:622)\n        at java.util.prefs.FileSystemPreferences$7.run(FileSystemPreferences.java:615)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.util.prefs.FileSystemPreferences.writeBackCache(FileSystemPreferences.java:614)\n        at java.util.prefs.FileSystemPreferences.syncSpiPrivileged(FileSystemPreferences.java:801)\n        at java.util.prefs.FileSystemPreferences.access$2300(FileSystemPreferences.java:50)\n        at java.util.prefs.FileSystemPreferences$12.run(FileSystemPreferences.java:771)\n        at java.util.prefs.FileSystemPreferences$12.run(FileSystemPreferences.java:769)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.util.prefs.FileSystemPreferences.syncSpi(FileSystemPreferences.java:768)\n        at java.util.prefs.AbstractPreferences.sync2(AbstractPreferences.java:1332)\n        at java.util.prefs.AbstractPreferences.sync(AbstractPreferences.java:1323)\n        at java.util.prefs.FileSystemPreferences.sync(FileSystemPreferences.java:747)\n        at com.hpl.suggester.Suggest.saveSerialNumber(Suggest.java:97)\n\n\nSearched Google and couldn't find anyone else complaining about this.  Probably not that common to be using the new Java Preferences API under Tomcat??  Anyway, it should just work.  I guess I'll use the older Java Properties API on a file somewhere."}, {"text": "It isn't clear which preferences API you are using. The code appears to be using \"java.util.prefs\" which is from Java 1.4 yet you state you are using a \"new\" preferences API. Something doesn't add up here.\n\nWhat you seeing is a form of memory leak [1]. It isn't possible to tell if this is an application issue, a JRE issue or a Tomcat issue. If it is a Tomcat issue we should be able to fix it. If it is a JRE issue we might be able to work around it. If it is an application issue there is nothing we can do.\n\nTo progress this we need the simplest possible test case that reproduces this. From your description you should be able to do this with a single JSP or Servlet. If you provide a Servlet, please just provide the source code for the Servlet (it should not have any 3rd party dependencies).\n\nFinally, this issue may be platform dependent so please can you provide information on exactly what platform (OS, JVM) you are seeing this issue on.\n\n[1] http://people.apache.org/~markt/presentations/2010-11-04-Memory-Leaks-60mins.pdf", "tags": [], "creator": "markt@apache.org", "attachment_id": null, "count": 1, "id": 167031, "time": "2013-05-04T09:46:46Z", "bug_id": 54921, "creation_time": "2013-05-04T09:46:46Z", "is_private": false}, {"text": "I can't reproduce this with a simple test case based on the information provided in the original report.\n\nGiven that it has been two weeks without a response to my request for further information I am closing this as INVALID. It can always be re-opened if a test case that demonstrates the issue is made available.", "tags": [], "creator": "markt@apache.org", "attachment_id": null, "count": 2, "id": 167305, "time": "2013-05-20T09:59:43Z", "bug_id": 54921, "creation_time": "2013-05-20T09:59:43Z", "is_private": false}, {"count": 3, "tags": [], "text": "(In reply to comment #1)\n> It isn't clear which preferences API you are using. The code appears to be\n> using \"java.util.prefs\" which is from Java 1.4 yet you state you are using a\n> \"new\" preferences API. Something doesn't add up here.\n> \n\n+1 to all that Mark wrote.\n\n1. The \"java.util.prefs.FileSystemPreferences\" class from your stacktrace is not present in neither one of Oracle JDKs {6u45 or 7u21} on Windows.\n\n2. Your stack trace is not full. It is not clear to what execution thread it belongs. (E.g. if it is called from a Finalizer, there is no wonder in such behaviour).\n\nYou have to provide some sample web application that reproduces this and more details on your platform.\n\n3. Some classloader memory leaks in JRE classes may be avoided by preloading those classes when Tomcat starts. There is a Listener that can be configured to do that, if you know what classes to preload.\nFurther discussion belongs to the users@ mailing list.", "is_private": false, "id": 167306, "creator": "knst.kolinko@gmail.com", "time": "2013-05-20T13:40:02Z", "bug_id": 54921, "creation_time": "2013-05-20T13:40:02Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "This alleged vulnerability was reported to us by our internal security group. Apparently, all versions of Apache 2.2, including the latest version 2.2.11 are affected by a bug that can cause DoS attacks to be made very trivially.\n\nWhile there are a lot of DoS tools available today, this one is particularly interesting because it holds the connection open while sending incomplete HTTP requests to the server.\n\nIn this case, the server will open the connection and wait for the complete header to be received. However, the client (the DoS tool) will not send it and will instead keep sending bogus header lines which will keep the connection allocated.\nThe initial part of the HTTP request is completely legitimate:\n\nGET / HTTP/1.1\\r\\n\nHost: host\\r\\n\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.503l3; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; MSOffice 12)\\r\\n\nContent-Length: 42\\r\\n\n\nAfter sending this the client waits for certain time \u2013 notice that it is missing one CRLF to finish the header which is otherwise completely legitimate. The bogus header line the tools sends is currently:\n\nX-a: b\\r\\n\n\nWhich obviously doesn't mean anything to the server so it keeps waiting for the rest of the header to arrive.\n\nThis link at iDefense labs has the code required to run teh exploit: https://ialert.idefense.com/idcontent/2009/exploit_code/487469-Web_Server_HTTP_Header_DoS.php.txt", "attachment_id": null, "bug_id": 47417, "id": 128231, "time": "2009-06-24T09:30:05Z", "creator": "sailesh_kyanam@fanniemae.com", "creation_time": "2009-06-24T09:30:05Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 47417, "text": "This is by design; see LimitRequest* directives for mitigation, especially;\n\nhttp://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfields\n\nThe httpd group is reviewing alternatives for timeout processing, but is\nalready well aware of similar complaints.  In the interim, see iptables and\nsimilar firewall tools and appliances to restrict abusive behavior patterns\nat the IP and TCP layers, and LimitRequestFields etc to control the number\nof headers expected by your specific environment.", "id": 128245, "time": "2009-06-24T13:39:38Z", "creator": "wrowe@apache.org", "creation_time": "2009-06-24T13:39:38Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "is_private": false, "id": 128254, "time": "2009-06-24T17:09:18Z", "bug_id": 47417, "creation_time": "2009-06-24T17:09:18Z", "text": "Will, with all due respect, I don't think the fact we're aware of it (and in the wake of slowloris everyone is discussing it) invalidates a bug report applied to current versions.\n\nIn the short term, we need to publish something on mitigation.  We have yet to do even that!"}, {"count": 3, "text": "Nick;\n\nthis particular report describes the problem that arbitrary headers of some\narbitrary number (limit 100 by default) are accepted individually by httpd.\nThat is not a bug.\n\nReclosing.  An appropriate bug report w.r.t. timeouts would be entirely\nappropriate, and I'm sure this reporter would appreciate being cc'ed on that\nparticular case.\n\nWhat is described here is absolutely not a bug.", "creator": "wrowe@apache.org", "is_private": false, "id": 128260, "time": "2009-06-24T22:20:53Z", "bug_id": 47417, "creation_time": "2009-06-24T22:20:53Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47417, "text": "Thanks for your feedback and insights.\n\nWhether we call this a bug, feature or known issue - I was able to very trivially bring down numerous Apache web servers using a modified version of this script. I could \"workaround\" the issue by reducing timeout to very low numbers (which are always not acceptable in our situation) and/or limit the headers to unreasonably small numbers (no idea what affect this would have on some of our more complex apps). The only realistic option I found to work around this issue is to allocate a large number of processes and assign a large number of threads to each process (I use mpm_worker), and then hope the the script kiddid attacking me is not a persistent *gentleman*.\n\nOfcourse, there are other options such as using firewalls and IDS - both of which are not practical in many of our use cases.", "id": 128300, "time": "2009-06-25T21:33:33Z", "creator": "sailesh_kyanam@fanniemae.com", "creation_time": "2009-06-25T21:33:33Z", "is_private": false, "attachment_id": null}]
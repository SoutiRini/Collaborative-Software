[{"count": 0, "tags": [], "bug_id": 18719, "attachment_id": null, "id": 34544, "time": "2003-04-04T17:59:57Z", "creator": "edelkind-apache-dev@episec.com", "creation_time": "2003-04-04T17:59:57Z", "is_private": false, "text": "Below is a full train-of-debugging log of my research into this problem.  At\nthe end of this log is my conclusion, with recommendations and a workaround.\nI have not submitted a patch because there are multiple methods of\ncorrection, and the decision of which to implement may be debatable.\n\n---------------------------------------------------------------\n\nIndications:\n\n  - when requesting many static files, the server does not output any data.\n\n  - many png and jpg icons fall prey to this, in addition to many html files\n    and random data, though it seems the stock gif icons do not.  I have not\n    researched this further.\n\n  - httpd aborts the connection with no output (not even headers).\n\n  - informational messages in logs (log level INFO):\n    [Tue Apr 01 11:34:43 2003] [info] (70023)This function has not been\nimplemented on this platform: core_output_filter: writing data to the network\n\n\t\n\nInvestigation:\n\n  - core.c (4029): ap_log_error().\n\n**** backtrace ****\nBreakpoint 1, 0x40176509 in apr_strerror ()\n   from /usr/pkg/apache/lib/libapr-0.so.0\n(gdb) bt\n#0  0x40176509 in apr_strerror () from /usr/pkg/apache/lib/libapr-0.so.0\n#1  0x808f65a in log_error_core (file=0x80be6ca \"core.c\", line=4029, level=6,\n    status=70023, s=0x8152828, r=0x0, pool=0x0,\n    fmt=0x80c0be0 \"core_output_filter: writing data to the network\",\n    args=0xbfffec28) at log.c:519\n#2  0x808f86c in ap_log_error (file=0x80be6ca \"core.c\", line=4029, level=6,\n    status=70023, s=0x8152828,\n    fmt=0x80c0be0 \"core_output_filter: writing data to the network\")\n    at log.c:561\n#3  0x80a5847 in core_output_filter (f=0x815a230, b=0x81665f0) at core.c:4029\n#4  0x809ac57 in ap_pass_brigade (next=0x815a230, bb=0x815f9c0)\n    at util_filter.c:540\n#5  0x80730a2 in ap_http_header_filter (f=0x815ecc8, b=0x815f9c0)\n    at http_protocol.c:1716\n#6  0x809ac57 in ap_pass_brigade (next=0x815ecc8, bb=0x815f9c0)\n    at util_filter.c:540 \n#7  0x809dd17 in ap_content_length_filter (f=0x815ecb0, b=0x815f9c0)\n    at protocol.c:1299\n#8  0x809ac57 in ap_pass_brigade (next=0x815ecb0, bb=0x815f9c0)\n    at util_filter.c:540\n#9  0x8074c7e in ap_byterange_filter (f=0x815ec98, bb=0x815f9c0)\n    at http_protocol.c:2881\n#10 0x809ac57 in ap_pass_brigade (next=0x815ec98, bb=0x815f9c0)\n    at util_filter.c:540\n---Type <return> to continue, or q <return> to quit---\n#11 0x80a422c in default_handler (r=0x815e058) at core.c:3384\n#12 0x808b2c1 in ap_run_handler (r=0x815e058) at config.c:194\n#13 0x808bb0e in ap_invoke_handler (r=0x815e058) at config.c:401\n#14 0x8075adc in ap_process_request (r=0x815e058) at http_request.c:288\n#15 0x806fb6f in ap_process_http_connection (c=0x8159ee0) at http_core.c:293\n#16 0x8098151 in ap_run_process_connection (c=0x8159ee0) at connection.c:85\n#17 0x8098540 in ap_process_connection (c=0x8159ee0, csd=0x8159e18)\n    at connection.c:207\n#18 0x8089a67 in child_main (child_num_arg=2) at prefork.c:696\n#19 0x8089c09 in make_child (s=0x80d1f48, slot=2) at prefork.c:790\n#20 0x8089c84 in startup_children (number_to_start=3) at prefork.c:808\n#21 0x808a0b6 in ap_mpm_run (_pconf=0x80cf840, plog=0x8107920, s=0x80d1f48)\n    at prefork.c:1024\n#22 0x8091183 in main (argc=3, argv=0xbffff2c4) at main.c:651\n#23 0x4021a543 in __libc_start_main () from /lib/libc.so.6\n\n\n**** relevant code (core.c:4029) ****\n        if (rv != APR_SUCCESS) {\n            ap_log_error(APLOG_MARK, APLOG_INFO, rv, c->base_server,\n                         \"core_output_filter: writing data to the network\");\n\n\n**** last definition of rv ****\n                rv = sendfile_it_all(net,      /* the network information   */\n                                     fd,       /* the file to send          */\n                                     &hdtr,    /* header and trailer iovecs */\n                                     foffset,  /* offset in the file to begin\n                                                  sending from              */\n                                     flen,     /* length of file            */\n                                     nbytes + flen, /* total length including\n                                                       headers              */\n                                     &bytes_sent,   /* how many bytes were\n                                                       sent                 */\n                                     flags);   /* apr_sendfile flags        */\n\n\n\n*** debugging ***\n\n--- in core.c/sendfile_it_all() ---\n(gdb) print file_bytes_left\n$3 = 484\n(gdb) step\n2760            rv = apr_sendfile(c->client_socket, fd, hdtr, &file_offset,\n&tmplen,\n(gdb) step\n2762            *bytes_sent += tmplen;\n(gdb) print rv\n$4 = 70023\n\n--------------------\n./srclib/apr/include/apr_errno.h:#define APR_ENOTIMPL       (APR_OS_START_STATUS\n+ 23)\n./srclib/apr/include/apr_errno.h:#define APR_OS_START_STATUS   \n(APR_OS_START_ERROR + APR_OS_ERRSPACE_SIZE)\n./srclib/apr/include/apr_errno.h:#define APR_OS_START_ERROR     20000\n./srclib/apr/include/apr_errno.h:#define APR_OS_ERRSPACE_SIZE 50000\n\nAPR_ENOTIMPL == 70023\n---------------------\n\n... after stepping through debugging data ...\n\n./srclib/apr/network_io/unix/sockopt.c/apr_socket_opt_set()\n\treturns APR_ENOTIMPL\n\n(gdb) step\n157             one = 1;\n(gdb)  \n160         if (opt & APR_SO_KEEPALIVE) {\n(gdb) \n172         if (opt & APR_SO_DEBUG) {\n(gdb) \n180         if (opt & APR_SO_REUSEADDR) {\n(gdb) \n188         if (opt & APR_SO_SNDBUF) {\n(gdb) \n200         if (opt & APR_SO_NONBLOCK) {\n(gdb) \n213         if (opt & APR_SO_LINGER) {\n(gdb) \n228         if (opt & APR_SO_TIMEOUT) { \n(gdb) \n232         if (opt & APR_TCP_NODELAY) {\n(gdb) \n262         if (opt & APR_TCP_NOPUSH) {\n(gdb) \n307             return APR_ENOTIMPL;\n(gdb) bt\n#0  apr_socket_opt_set (sock=0x815a338, opt=1024, on=1) at sockopt.c:307\n#1  0x4017bbb9 in apr_socket_sendfile (sock=0x815a338, file=0x815fdb0, \n    hdtr=0xbfffec3c, offset=0xbfffec1c, len=0xbfffec00, flags=0)\n    at sendrecv.c:299\n#2  0x4017c036 in apr_sendfile (sock=0x815a338, file=0x815fdb0, \n    hdtr=0xbfffec3c, offset=0xbfffec1c, len=0xbfffec00, flags=1)\n    at sendrecv.c:1052\n#3  0x80a3658 in sendfile_it_all (c=0x815a728, fd=0x815fdb0, hdtr=0xbfffec3c, \n    file_offset=0, file_bytes_left=484, total_bytes_left=737, \n    bytes_sent=0xbfffec4c, flags=1) at core.c:2760\n#4  0x80a5699 in core_output_filter (f=0x815a750, b=0x8166580) at core.c:3964\n#5  0x809ac57 in ap_pass_brigade (next=0x815a750, bb=0x815fec8)\n    at util_filter.c:540\n#6  0x80730a2 in ap_http_header_filter (f=0x815f1d0, b=0x815fec8)\n    at http_protocol.c:1716\n#7  0x809ac57 in ap_pass_brigade (next=0x815f1d0, bb=0x815fec8)\n    at util_filter.c:540\n#8  0x809dd17 in ap_content_length_filter (f=0x815f1b8, b=0x815fec8)\n    at protocol.c:1299\n#9  0x809ac57 in ap_pass_brigade (next=0x815f1b8, bb=0x815fec8)\n    at util_filter.c:540\n#10 0x8074c7e in ap_byterange_filter (f=0x815f1a0, bb=0x815fec8)\n    at http_protocol.c:2881\n#11 0x809ac57 in ap_pass_brigade (next=0x815f1a0, bb=0x815fec8)\n    at util_filter.c:540\n#12 0x80a422c in default_handler (r=0x815e560) at core.c:3384\n#13 0x808b2c1 in ap_run_handler (r=0x815e560) at config.c:194\n#14 0x808bb0e in ap_invoke_handler (r=0x815e560) at config.c:401\n#15 0x8075adc in ap_process_request (r=0x815e560) at http_request.c:288\n#16 0x806fb6f in ap_process_http_connection (c=0x815a400) at http_core.c:293\n#17 0x8098151 in ap_run_process_connection (c=0x815a400) at connection.c:85\n#18 0x8098540 in ap_process_connection (c=0x815a400, csd=0x815a338)\n    at connection.c:207\n#19 0x8089a67 in child_main (child_num_arg=1) at prefork.c:696\n#20 0x8089c09 in make_child (s=0x80d1f48, slot=1) at prefork.c:790\n#21 0x8089c84 in startup_children (number_to_start=4) at prefork.c:808\n#22 0x808a0b6 in ap_mpm_run (_pconf=0x80cf840, plog=0x8107920, s=0x80d1f48)\n    at prefork.c:1024\n#23 0x8091183 in main (argc=3, argv=0xbffff2c4) at main.c:651\n#24 0x40227543 in __libc_start_main () from /lib/libc.so.6\n\n---------------\nAPR_TCP_NOPUSH == 1024\nAPR_TCP_NODELAY == 512\nAPR_INCOMPLETE_READ == 4096\n---------------\n\nAPR_TCP_NODELAY is set upon connection\n\nProblematic files set APR_TCP_NOPUSH and exit before output\nAcceptable files set APR_INCOMPLETE_READ after complete output\n\n*** acceptable files ***\n(gdb) bt\n#0  apr_socket_opt_set (sock=0x815a338, opt=4096, on=1) at sockopt.c:156\n#1  0x8098474 in ap_lingering_close (c=0x815a400) at connection.c:183\n#2  0x8089a76 in child_main (child_num_arg=1) at prefork.c:697\n#3  0x8089c09 in make_child (s=0x80d1f48, slot=1) at prefork.c:790\n#4  0x8089c84 in startup_children (number_to_start=4) at prefork.c:808\n#5  0x808a0b6 in ap_mpm_run (_pconf=0x80cf840, plog=0x8107920, s=0x80d1f48)\n    at prefork.c:1024\n#6  0x8091183 in main (argc=3, argv=0xbffff2c4) at main.c:651\n#7  0x40227543 in __libc_start_main () from /lib/libc.so.6\n(gdb) \n\n\n-----------\n  - Acceptable files do not call sendfile_it_all() from\n    core_output_filter().\n  - Use the --without-sendfile option as a workaround for this problem\n    (emulate_sendfile() will be called instead).\n\n  - APR_TCP_NOPUSH_FLAG == 0 in this configuration\n  - APR_TCP_NOPUSH_FLAG == TCP_CORK on a working linux system\n  - APR_TCP_NOPUSH_FLAG == TCP_NOPUSH on a working freebsd system\n\n\n\nConclusion:\n\n  Just because sendfile() exists on the system doesn't necessarily mean that\n  a TCP_NOPUSH variant will be available (or detected).  Ways to alleviate\n  this problem include:\n\n\t- better checking for TCP_CORK (the tested system _does_ support it,\n\t  but the apr configure checks for TCP_CORK in netinet/tcp.h,\n\t  whereas it was only in linux/tcp.h, due to old libc header files)\n\t- make TCP_NOPUSH functionality dependent on APR_TCP_NOPUSH_FLAG\n\t  (and just live with any extra packets that are generated)\n\t- make the use of sendfile(2) dependent on APR_TCP_NOPUSH_FLAG\n\t  (i.e. #if APR_HAS_SENDFILE && APR_TCP_NOPUSH_FLAG), in which case\n\t  emulate_sendfile() will be used in its stead.\n\n  Workaround: configure apache with the --without-sendfile option."}, {"count": 1, "tags": [], "bug_id": 18719, "text": "Most of the debugging in this log was actually done on apache 2.0.44.\nHowever, the issue remains in 2.0.45.", "id": 34546, "time": "2003-04-04T18:16:05Z", "creator": "edelkind-apache-dev@episec.com", "creation_time": "2003-04-04T18:16:05Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 18719, "text": "What version of Linux is this?\n\nCan you tweak the code to ignore the tcp_cork-not-implemented problem, then see\nif performance for serving static files is still better when using sendfile, or\nif the lack of tcp_cork means it is better to go with mmap for serving static files?\n\nTo switch between sendfile and mmap, use a strategically-placed \"EnableSendfile\nOff\" directive.  (I'm assuming you don't have \"EnableMMap Off\" anywhere.)\n\nIf mmap is faster, then that would have some bearing on the appropriate fix.\n\nThanks!", "id": 34548, "time": "2003-04-04T18:21:11Z", "creator": "trawick@apache.org", "creation_time": "2003-04-04T18:21:11Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "ernesto_z@gmx.de", "attachment_id": null, "text": "I had the same problem with Apache 2.0.45 (--enable-so --enable-mods-shared=all\n--enable-ssl --with-mpm=prefork) on a Linux system (RedHat 7.3, 2.4.16, a\nvirtually dedicated machine). I simply got no output from the server, even\nsetting the LogLevel to \"debug\" brought no error messages and the correct file\nsizes for the _not_ transmitted files where in the access log.\n\nI tracked the problem for a while and found out that it only occured with static\nfiles (changing the filename to .shtml or .php fixed the problem). Then, I found\nout that the \"critical\" file size is exactly 256 bytes (hardly a coincidence, I\nassume) - all files larger than 255 bytes were not transmitted. Maybe this\ninformation helps a little.\n\nAfter checking in here, I used the proposed patch \"EnableSendfile Off\" and it\nworked. Thanks a lot.\n\nRegards,\nErnesto Zimmermann\n\nPS: I use Apache 2.0.45 under RedHat 8.0 (kernel 2.4.20) on my own machine and\nhad no problems ...", "id": 37908, "time": "2003-05-28T09:57:01Z", "bug_id": 18719, "creation_time": "2003-05-28T09:57:01Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 18719, "attachment_id": null, "id": 75891, "time": "2005-06-03T02:04:21Z", "creator": "chip@force-elite.com", "creation_time": "2005-06-03T02:04:21Z", "is_private": false, "text": "Is there anything for httpd to change here? It seems like this was caused by a\nbuggy kernel sendfile()."}, {"count": 5, "tags": [], "text": "No activity after a very long time in NEEDINFO; assuming expired.", "is_private": false, "bug_id": 18719, "id": 92056, "time": "2006-08-08T20:29:44Z", "creator": "nick@webthing.com", "creation_time": "2006-08-08T20:29:44Z", "attachment_id": null}]
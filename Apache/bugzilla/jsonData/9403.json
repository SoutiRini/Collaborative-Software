[{"count": 0, "tags": [], "bug_id": 9403, "is_private": false, "text": "When using the HSSFRow.cellIterator to traverse through a document, the column \ninformation is in reverse-sequential order.  For example, if iterating through \na document with data in two rows and three columns, the data will be in this \norder:\n\n(0,2),(0,1),(0,0),(1,2),(1,1),(1,0).\n\nThe HSSFSheet.rowIterator properly iterates through the data in forward-\nsequential order.\n\nI duplicated this bug in the 1.5 release and the 1.6 build release.", "id": 16685, "time": "2002-05-24T17:55:37Z", "creator": "ssavela@claymore-consulting.com", "creation_time": "2002-05-24T17:55:37Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "id": 16686, "time": "2002-05-24T17:57:23Z", "bug_id": 9403, "creation_time": "2002-05-24T17:57:23Z", "is_private": false, "text": "There is no contract guaranteeing the order.  Furthermore, they can appear in\nany order in the underlying file format."}, {"count": 2, "tags": [], "creator": "ssavela@claymore-consulting.com", "is_private": false, "id": 16687, "creation_time": "2002-05-24T18:11:49Z", "time": "2002-05-24T18:11:49Z", "bug_id": 9403, "text": "If there is an implied ordering of the cells (a number that can be retrieved \nfrom getCellNum()), why wouldn't the cellIterator() method return the rows in \nthat order?\n\nIt seems inconsitent at best since the rowIterator does return (at least in my \nexample) the rows in the implied order that they exist in the spreadsheet.\n\nThe documentation should reflect the fact that the *Iterator routines will \nreturn the results in random order.\n", "attachment_id": null}, {"count": 3, "tags": [], "creator": "poi-support@buni.org", "is_private": false, "id": 16693, "creation_time": "2002-05-24T22:17:48Z", "time": "2002-05-24T22:17:48Z", "bug_id": 9403, "text": "The implied ordering is \"whatever is in the file\" or some variant of \"whatever\nwas most efficient to store\".  This is where the rubber meets the road.  While I\nrealize it can be inconvienient for the user to reorder, its far more efficient\nthen us ordering them in a particular order.  If they are precisely in reverse\nbecause of something we're doing, feel free to submit a patch, but I'm against\nenforcing any contract as to the order.  Your point about the documentation is\nwell taken, please submit a patch and I'll apply it against the head. (2.0)", "attachment_id": null}, {"count": 4, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "text": "(if patch is provided please reopen)\n", "id": 16694, "time": "2002-05-24T22:18:10Z", "bug_id": 9403, "creation_time": "2002-05-24T22:18:10Z", "is_private": false}, {"count": 5, "tags": [], "creator": "titanandrews@nc.rr.com", "is_private": false, "id": 28058, "creation_time": "2002-12-19T15:31:06Z", "time": "2002-12-19T15:31:06Z", "bug_id": 9403, "text": "I respectfully disagree with the decision to close this bug. It just makes \nsense to have the cellIterator() return the Iterator in the correct forward \norder. This method could be very convenient, but if the programmer has to \nreorder it, it's pretty much useless. I believe this is happening because \nHashMap was used. Couldn't a different data structure be used instead? Can we \nplease keep this one open for a while and let some folks vote on it? \n\nthanks,\n\nBarry", "attachment_id": null}, {"count": 6, "tags": [], "creator": "poi-support@buni.org", "is_private": false, "id": 28060, "creation_time": "2002-12-19T16:21:21Z", "time": "2002-12-19T16:21:21Z", "bug_id": 9403, "text": "Sure.  You can leave it open and please feel free to vote (if enough people feel\nthat way and I think they are making an INFORMED vote I/other commiters may\nchange my/our mind).  I'm retargeting to 2.0 because there is like NO way we're\nbackporting such changes into 1.5.1 (behavioral/feature-oriented,etc).  However,\nthe fact we're using a HashMap will change in 3.0 and instead we'll probably\nreturn them in the order you suggest just due to HOW we'll be storing it.  I\njust don't want to guarantee order in this interface because it could change and\nthe file format itself might effect it.  Personally, I think you're suffering\nfrom file-format API versus VBA-style API confusion.  The HSSF usermodel is to\ngive you access to the file format without exposing you to certain nasty details\n(such as the fact that rows are completely unrelated to cells and all the little\nrecords and intricacies).  VBA and Formula 1 make it look like you're using\nExcel (and one interfaces with Excel single-threadedly, and the other is a full\nimplementation of Excel in Java more or less...to the tune of 10k).  Its the\ndifference between abstracting the file format to you and creating an\nimplementation of Excel.  We make this decision for performance reasons and\nsimplicity.  (Formula 1 and VBA APIs are simpler to conceieve but harder to\nmaster because there are just so freaking many of them...10 different ways to do\nEVERYTHING... HSSF seeks a greater conceptual simplicity.  Also \"convienience\nfunctions\" are by [apparent] community consensus until a later release -- we're\nall infected with eXtremeProgramming style thought.)\n\nBesides.  Just because you need the cells or rows in order, doesn't mean\neveryone does.  Depending on what you're doing, the reactor pattern (in your own\ncode) might help you here regardless of whether you're using the eventmodel:\nhttp://www.freeroller.net/page/acoliver/20021215#the_reactor_pattern_in_reading ", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 9403, "text": "Hi,\n\nI'm new to this, so please excuse me if I do anything incorrectly. I've voted \nfor this to be changed because of the following:\n-> While no contract to order exists, there is certainly a logical expectation \nof sequence because the HSSFSheet.rowIterator() does deliver its results \nordered from low to high, so why not HSSFRow.cellIterator?\n-> It appears easy to do - I got an ordered sequence by simply changing the \nHashMap cells to TreeMap (and removing the constructors initial capacity) in \nHSSFRow.java - only 3 lines. By the way, this will make it consistent with the \nTreeMap rows defined in HSSFSheet.java.\n\nIf the change is declined, perhaps a compromise method (e.g. \nHSSFRow.orderedCellIterator() - that converts the HashMap to a TreeMap?).\n\nCheers,\nSean", "count": 7, "id": 36211, "time": "2003-04-28T08:59:07Z", "creator": "sean.geraty@qsuper.qld.gov.au", "creation_time": "2003-04-28T08:59:07Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 9403, "attachment_id": null, "id": 84583, "creation_time": "2006-01-13T03:32:54Z", "time": "2006-01-13T03:32:54Z", "creator": "jheight@apache.org", "text": "As a result of the recent performance change, the storage of the HSSFCell\nobjects was changed from a TreeMap implementation to an array based one.\n\nThis has the beneficial sideeffect that the cellIterator is now in cell order.\n\nThis change is available in SVN.\n\nJason", "is_private": false}]
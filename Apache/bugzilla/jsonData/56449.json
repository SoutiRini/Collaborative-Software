[{"count": 0, "tags": [], "bug_id": 56449, "attachment_id": 31552, "text": "Created attachment 31552\nThe exception captured\n\n@ServerEndpoint(\"/push/echo\")\npublic class EchoAnnotation {    \n    @OnOpen\n    public void open(Session session) {\n        try { \n            if(session.isOpen()) session.getBasicRemote().sendText(\n            \"Welcome!\");\n        } catch(Exception e) { \n            try {\n                session.close();\n            } catch (IOException e1) {\n                // Ignore\n            }\n        }\n    }\n\n\nDoing session.getAsynRemote() is working.\nImportant: This errors happens with thousands of websockets.", "id": 174813, "time": "2014-04-23T16:13:18Z", "creator": "veliscu.cristi@gmail.com", "creation_time": "2014-04-23T16:13:18Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 56449, "is_private": false, "id": 174822, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2014-04-23T21:45:31Z", "time": "2014-04-23T21:45:31Z", "text": "At the moment, I don't see a code path that could trigger this. The session is open when it is created so something must be closing it very quickly. My assumption is that there must be an error path triggering this but I don;t see it so far. What would be very useful is the stack trace from when the session is closed. If I add some debug logging are you able to build Tomcat from source and run your test to collect some more information?"}, {"count": 2, "tags": [], "bug_id": 56449, "text": "Hi Mark,\n\nFYI, I can reproduce the given stack trace if I use a client that sends an initial Websocket Request but immediately closes the TCP connection. E.g., when running the following Java code on Windows while Tomcat (trunk) is running using the NIO connector:\n\n        String str = \"GET /examples/websocket/chat HTTP/1.1\\r\\n\"\n                + \"Host: localhost:8080\\r\\n\"\n                + \"Sec-WebSocket-Version: 13\\r\\n\"\n                + \"Origin: http://localhost:8080\\r\\n\"\n                + \"Sec-WebSocket-Key: 8Ydn5qfZ/eg0v37Jh4n6tw==\\r\\n\"\n                + \"Connection: keep-alive, Upgrade\\r\\n\"\n                + \"Upgrade: websocket\\r\\n\\r\\n\";\n        byte[] bytes = str.getBytes(\"UTF-8\");\n\n        try (Socket s = new Socket(\"127.0.0.1\", 8080)) {\n        \ts.getOutputStream().write(bytes);\n        }\n\nI then get the following exceptions (I think the first is expected):\n\n24-Apr-2014 00:07:57.351 SEVERE [http-nio-8080-exec-1] websocket.chat.ChatAnnotation.onError Chat Error: java.io.IOException: java.util.concurrent.ExecutionException: java.nio.channels.ClosedChannelException\n java.io.IOException: java.util.concurrent.ExecutionException: java.nio.channels.ClosedChannelException\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:242)\n\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:486)\n\tat org.apache.tomcat.websocket.WsSession.doClose(WsSession.java:417)\n\tat org.apache.tomcat.websocket.WsSession.close(WsSession.java:394)\n\tat org.apache.tomcat.websocket.WsSession.close(WsSession.java:388)\n\tat websocket.chat.ChatAnnotation.broadcast(ChatAnnotation.java:99)\n\tat websocket.chat.ChatAnnotation.start(ChatAnnotation.java:59)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.tomcat.websocket.pojo.PojoEndpointBase.doOnOpen(PojoEndpointBase.java:58)\n\tat org.apache.tomcat.websocket.pojo.PojoEndpointServer.onOpen(PojoEndpointServer.java:70)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:129)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:678)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1575)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1533)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.util.concurrent.ExecutionException: java.nio.channels.ClosedChannelException\n\tat org.apache.tomcat.websocket.FutureToSendHandler.get(FutureToSendHandler.java:102)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:235)\n\t... 20 more\nCaused by: java.nio.channels.ClosedChannelException\n\tat sun.nio.ch.SocketChannelImpl.ensureWriteOpen(SocketChannelImpl.java:265)\n\tat sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:474)\n\tat org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:122)\n\tat org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:184)\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWriteInternal(NioServletOutputStream.java:94)\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doWrite(NioServletOutputStream.java:61)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.writeInternal(AbstractServletOutputStream.java:158)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(AbstractServletOutputStream.java:124)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:99)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:390)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:284)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:230)\n\t... 20 more\n\n\n24-Apr-2014 00:07:57.397 SEVERE [http-nio-8080-exec-1] org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process Error reading request, ignored\n java.lang.IllegalStateException: The WebSocket session [0] has been closed and no method (apart from close()) may be called on a closed session\n\tat org.apache.tomcat.websocket.WsSession.checkState(WsSession.java:652)\n\tat org.apache.tomcat.websocket.WsSession.addMessageHandler(WsSession.java:168)\n\tat org.apache.tomcat.websocket.pojo.PojoEndpointBase.doOnOpen(PojoEndpointBase.java:81)\n\tat org.apache.tomcat.websocket.pojo.PojoEndpointServer.onOpen(PojoEndpointServer.java:70)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:129)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:678)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1575)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1533)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\nThis happens only if the client immediately closes the connection after sending the request. If it waits a bit before closing it (or I just connect with a browser like Firefox), I don't get any error.\nHowever, I don't know if the cause of that exception is the same as in the original report.", "id": 174823, "time": "2014-04-23T22:16:29Z", "creator": "kpreisser@apache.org", "creation_time": "2014-04-23T22:16:29Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 56449, "attachment_id": null, "text": "Thanks for that.\n\nAn immediate close was one of the options I considered but I dismissed it as I didn't think the close message could have been read that early. What i didn't consider was that the close of the connection rather than the close message may have triggered the state change on the session. I'll dig some more.", "id": 174825, "time": "2014-04-24T06:06:57Z", "creator": "markt@apache.org", "creation_time": "2014-04-24T06:06:57Z", "is_private": false}, {"count": 4, "tags": [], "text": "(In reply to Mark Thomas from comment #1)\n> At the moment, I don't see a code path that could trigger this. The session\n> is open when it is created so something must be closing it very quickly. My\n> assumption is that there must be an error path triggering this but I don;t\n> see it so far. What would be very useful is the stack trace from when the\n> session is closed. If I add some debug logging are you able to build Tomcat\n> from source and run your test to collect some more information?\n\nMark, HI\n\nI am evaluating Tomcat websockets implementation. For this, I use a client side websockets library that creates connection after connection. After a while (<10000 connections) the error is thrown and Tomcat 8 server hangs for a while. \n\nI attached HTTP NIO connector configuration used:\n    <Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               connectionTimeout=\"20000\" keepAliveTimeout=\"-1\" redirectPort=\"8443\" \n\t       acceptCount=\"20000\" acceptorThreadCount=\"8\" \n\t       minSpareThreads=\"100\" maxThreads=\"10000\" \n\t       maxConnections=\"-1\" URIEncoding=\"UTF-8\" \n               maxKeepAliveRequests=\"-1\" />\n\n\nRegards, \nCristian", "is_private": false, "id": 174829, "creator": "veliscu.cristi@gmail.com", "time": "2014-04-24T08:08:56Z", "bug_id": 56449, "creation_time": "2014-04-24T08:08:56Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 56449, "is_private": false, "id": 174830, "attachment_id": null, "creator": "veliscu.cristi@gmail.com", "creation_time": "2014-04-24T08:11:50Z", "time": "2014-04-24T08:11:50Z", "text": "(In reply to Mark Thomas from comment #3)\n> Thanks for that.\n> \n> An immediate close was one of the options I considered but I dismissed it as\n> I didn't think the close message could have been read that early. What i\n> didn't consider was that the close of the connection rather than the close\n> message may have triggered the state change on the session. I'll dig some\n> more.\n\nFYI, NO errors reproduced in other Web/EE java servers\n\nRegards,\nCristian"}, {"count": 6, "tags": [], "bug_id": 56449, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #3)\n> What I\n> didn't consider was that the close of the connection rather than the close\n> message may have triggered the state change on the session.\n\nNeither did I consider that the onOpen method could close the session. That appears to be what is triggering this particular error.\n\nThis has been fixed in 8.0.x for 8.0.6 onwards and 7.0.x for 7.0.54 onwards.", "id": 174831, "time": "2014-04-24T08:14:29Z", "creator": "markt@apache.org", "creation_time": "2014-04-24T08:14:29Z", "is_private": false}, {"count": 7, "tags": [], "creator": "veliscu.cristi@gmail.com", "is_private": false, "text": "(In reply to Mark Thomas from comment #6)\n> (In reply to Mark Thomas from comment #3)\n> > What I\n> > didn't consider was that the close of the connection rather than the close\n> > message may have triggered the state change on the session.\n> \n> Neither did I consider that the onOpen method could close the session. That\n> appears to be what is triggering this particular error.\n> \n> This has been fixed in 8.0.x for 8.0.6 onwards and 7.0.x for 7.0.54 onwards.\n\nI will come back when will test the release 8.0.6 \nThank you for the fastness. \n\n\nRegards, \nCristian", "id": 174837, "time": "2014-04-24T12:12:39Z", "bug_id": 56449, "creation_time": "2014-04-24T12:12:39Z", "attachment_id": null}]
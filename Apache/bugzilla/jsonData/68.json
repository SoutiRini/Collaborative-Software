[{"count": 0, "tags": [], "bug_id": 68, "is_private": false, "id": 49, "creation_time": "2001-01-26T09:05:04Z", "time": "2001-01-26T09:05:04Z", "creator": "vincent.hardy@sun.com", "text": "TD>    This is more or less to document a regression in\nTD> feDisplacementMap.  If I had to guess I would put the blame on me,\nTD> but who knows.  Here is the stack trace (looks nasty, something is\nTD> blowing up in the g2d renderer, ugg! - bad transform?)\n\n\n    This is mostly directed at Vincent.\n\n    This bug does still exist and I have tracked this down to the\nConcretePatternPaintContext.  The problem is that\nConcretePatternPaintContext.getRaster sometimes returns null.  The\nreason and how to fix it are much more complex.\n\n    The PatternPaint stuff bases it's self on the AOI during the\nrender, this is in an attempt to avoid generating lots of data that\nisn't needed.  However The GraphicsNodeRable wasn't updating the AOI\nHint when it constructed it's Graphics2D to call the paint method for\nthe Patterned rectangle.\n\n    This means that the AOI was the same one that was used at the\nstart of the rendering chain, so it didn't account for the growth of\nthe AOI due to the needs of feDisplacementMap (it can pull data that\nwas out of bounds into the rendering bounds).\n\n    I have fixed GraphicsNodeRable8bit so it updates this hint.  This\nhas fixed the bug and made feDisplacementMap behave correctly when the\ndisplaced object is partly off screen.  However I have concerns about\nthis hint in general:\n\n     1) Don't we need to ensure that anyone who adjusts the usr2dev\n        transform adjusts this hint?  Hard to do now, and _very_ hard\n        to ensure into the future (in fact I'm guessing adding a few\n        transform attributes into the chain will blow the current\n        code out of the water).\n\n     2) Would it be better to replace the use of TileRable (Which\n        needs a good estimate of the needed tiled area) with TileRed\n        which only ever generates the areas requested (which means\n        that we can setup TileRed to cover the entire bounding box of\n        the filled object and AOI processing will just \"drop out\").", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 68, "text": "Done quite a while ago.", "id": 2207, "time": "2001-05-02T09:46:10Z", "creator": "deweese@apache.org", "creation_time": "2001-05-02T09:46:10Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 51105, "is_private": false, "text": "I have a JPanel containing a graph (it's the JFreeChart's ChartPanel). It contains few bars, lines, texts, and also translucent rounded rectangles. \nI need to insert this graph into PDF report generated by Eclipse BIRT. So I have to transform my graf into an SVG image and put it into the BIRT.\n\nIt's done by this Batik code:\n\n        DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();\n        Document document = domImpl.createDocument(\"http://www.w3.org/2000/svg\", \"svg\", null);\n\n        // Create an instance of the SVG Graphic\n        SVGGraphics2D svgGraphic = new SVGGraphics2D(document);\n\n        // draw the chart in the SVG generator\n        Rectangle2D bounds = new Rectangle(100, 500);\n        chart.draw(svgGraphic, bounds);\n\n        // Write svg file\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        Writer out = new OutputStreamWriter(outputStream, \"UTF-8\");\n        svgGraphic.stream(out, true /* use css styles */);\n        outputStream.flush();\n        outputStream.close();\n        byte[] svgData = outputStream.toByteArray();\n\nSo I have the SVG in form of byte array. Ok, now I give this array to the Eclipse BIRT Framework. I did some investigation and I found that BIRT uses \nthe code below to insert an svg image into PDF report(of course it's a bit adapted for this bug report and to enable me to provide some results):\n\n        byte[] svgData = ... viz the code above\n        File fileName = new File(\"C:\\\\bad.pdf\");\n\t\n\tOutputStream out = new BufferedOutputStream(new FileOutputStream(fileName));\n\t\t\t\n\tcom.lowagie.text.Rectangle pagesize = new com.lowagie.text.Rectangle(1000, 500);\n\tcom.lowagie.text.Document document = new com.lowagie.text.Document(pagesize, 50, 50, 50, 50);\n\tPdfWriter writer = PdfWriter.getInstance(document, out);\n\tdocument.open();\n\t\t\t\n\tPdfContentByte contentByte = writer.getDirectContent();\n\tPdfTemplate template = contentByte.createTemplate(1000, 500);\n\tGraphics2D g2D = template.createGraphics(1000, 500);\n\n\tPrintTranscoder transcoder = new PrintTranscoder();\n\ttranscoder.transcode(new TranscoderInput(new ByteArrayInputStream(data)), null);\n\tPageFormat pg = new PageFormat();\n\tPaper p = new Paper();\n\tp.setSize(1000, 500);\n\tp.setImageableArea(0, 0, 1000, 500);\n\tpg.setPaper(p);\n\ttranscoder.print(g2D, pg, 0);\n\tg2D.dispose();\n\tcontentByte.addTemplate(template, 0, 0);\n\t\t\t\n\tdocument.close();\n\tout.close();\n\nThe resulting PDF really contains my graph, but it absolutely ignores translucent shapes as you can see in the attached file \"bad.pdf\".\nSo I did \"my way\" PDF generation directly with the iText:\n\n        File fileName = new File(\"C:\\\\good.pdf\");\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n\n        com.lowagie.text.Rectangle pagesize = new com.lowagie.text.Rectangle(1000, 500);\n        com.lowagie.text.Document document = com.lowagie.text.new Document(pagesize, 50, 50, 50, 50);\n\t\t\n\tPdfWriter writer = PdfWriter.getInstance(document, out);\n\tdocument.open();\n\tPdfContentByte cb = writer.getDirectContent();\n\tPdfTemplate tp = cb.createTemplate(1000, 500);\n\tGraphics2D g2 = tp.createGraphics(1000, 500, new DefaultFontMapper());\n\tRectangle2D r2D = new Rectangle2D.Double(0, 0, 1000, 500);\n\tchart.draw(g2, r2D);\n\tg2.dispose();\n\tcb.addTemplate(tp, 0, 0);\n\t\t\n\tdocument.close();\n        out.close();\n\nAs you can see I the part with the PrintTranscoder is skipped and graph is drawn directly to the PDF using iText's Graphics implementation. \nSee the attached file \"good.pdf\". The result is perfect. I thought that the generated SVG can be broken, but saving it as SVG file and \nopening it in the GIMP for example give me good results. So the problem must be somewhere in the PrintTranscoder.", "id": 145943, "time": "2011-04-22T06:21:58Z", "creator": "jan.krakora.cz@gmail.com", "creation_time": "2011-04-22T06:21:58Z", "attachment_id": null}, {"count": 1, "attachment_id": 26924, "bug_id": 51105, "text": "Created attachment 26924\nexample of the generated svg", "id": 145944, "time": "2011-04-22T06:23:51Z", "creator": "jan.krakora.cz@gmail.com", "creation_time": "2011-04-22T06:23:51Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "jan.krakora.cz@gmail.com", "attachment_id": 26925, "id": 145945, "time": "2011-04-22T06:25:12Z", "bug_id": 51105, "creation_time": "2011-04-22T06:25:12Z", "is_private": false, "text": "Created attachment 26925\nPDF with bad result"}, {"count": 3, "tags": [], "bug_id": 51105, "is_private": false, "text": "Created attachment 26926\nPDF with good result", "id": 145946, "time": "2011-04-22T06:25:44Z", "creator": "jan.krakora.cz@gmail.com", "creation_time": "2011-04-22T06:25:44Z", "attachment_id": 26926}, {"count": 4, "tags": [], "bug_id": 51105, "attachment_id": null, "text": "I suspect that the issue is the following from line 201 of org.apache.batik.ext.awt.GraphicsUtil:\n\n        // Ugly Hack alert.  This Makes it use our SrcOver implementation\n        // Which doesn't seem to have as many bugs as the JDK one when\n        // going between different src's and destinations (of course it's\n        // also a lot slower).\n        Composite g2dComposite = g2d.getComposite();\n        if (g2d.getRenderingHint(RenderingHintsKeyExt.KEY_TRANSCODING) ==\n            RenderingHintsKeyExt.VALUE_TRANSCODING_PRINTING) {\n            if (SVGComposite.OVER.equals(g2dComposite)) {\n                g2d.setComposite(SVGComposite.OVER);\n            }\n        }\n\nYou could try commenting out this block in your local tests and see if you get the expected results.  If so the issue is likely in iText which would appear to not support custom composite classes (unlike the real JDK print graphics).  It's possible that the bugs in the JDK implementation have been fixed since this code was added but verifying that would be a _lot_ of work.", "id": 145949, "time": "2011-04-22T09:17:39Z", "creator": "deweese@apache.org", "creation_time": "2011-04-22T09:17:39Z", "is_private": false}, {"count": 5, "tags": [], "creator": "jan.krakora.cz@gmail.com", "attachment_id": null, "id": 145950, "time": "2011-04-22T09:38:26Z", "bug_id": 51105, "creation_time": "2011-04-22T09:38:26Z", "is_private": false, "text": "Are you sure? I tried to put a breakpoint there and debug and it's not called at all.\nDoes use this method the PrintTranscoder? In fact, looking at the code:\n\n...\nPdfContentByte contentByte = writer.getDirectContent();\nPdfTemplate template = contentByte.createTemplate(1000, 500);\nGraphics2D g2D = template.createGraphics(1000, 500);\n\nPrintTranscoder transcoder = new PrintTranscoder();\ntranscoder.transcode(new TranscoderInput(new ByteArrayInputStream(data)), null);\nPageFormat pg = new PageFormat();\nPaper p = new Paper();\np.setSize(1000, 500);\np.setImageableArea(0, 0, 1000, 500);\npg.setPaper(p);\ntranscoder.print(g2D, pg, 0);\ng2D.dispose();\ncontentByte.addTemplate(template, 0, 0);\n\nthe transcoder is using the graphics2D from iText's PdfTemplate object, which is theirs own \nGraphics2D implementation called PdfGraphics2D. But as I've written in my first comment, \nthis graphics is OK because the attached \"good.pdf\" is generated using it. Problem is when using\nthe PrintTascoder like above."}, {"count": 6, "tags": [], "bug_id": 51105, "is_private": false, "text": "(In reply to comment #5)\n> Are you sure? I tried to put a breakpoint there and debug and it's not called\n> at all.\n> Does use this method the PrintTranscoder? In fact, looking at the code:\n\n   Yes, the PrintTranscoder can use this code, it depends on the details\nof the SVG image if it actually does.\n\n> the transcoder is using the graphics2D from iText's PdfTemplate object, which\n> is theirs own Graphics2D implementation called PdfGraphics2D. But as I've \n> written in my first comment, this graphics is OK because the attached \n> \"good.pdf\" is generated using it. Problem is when using\n> the PrintTascoder like above.\n\n   Oh, I see you didn't draw the SVG in the 'good' example with Batik only \nthe JChart.\n\n   So my guess is that iText's PdfTemplate doesn't like the way Batik draws\ntranslucent objects.  Since I'm not familiar with iText's implementation I \ndon't know what Batik is doing that confuses it (I'll point out that the PDF \nGraphics2D that is included with Batik does handle translucent objects from Batik correctly, so it is possible).\n\n   To be clear the issue is somewhere between Batik and iText.  Obviously in some contexts Batik can properly draw translucent objects, and as your test shows for some inputs iText can generate translucent objects in PDF files.  The issue seems to be that iText doesn't like/understand the way Batik draws translucent objects, or something about the iText graphics implementation causes Batik to not try to draw translucent objects (although I think this is less likely).", "id": 145953, "time": "2011-04-22T10:00:35Z", "creator": "deweese@apache.org", "creation_time": "2011-04-22T10:00:35Z", "attachment_id": null}, {"text": "Looking closer at the content the problem appears to be that iText isn't supporting the way Batik draws elements with group opacity.\n\nSo the transparent rectangles are drawn by jChart by using an AlphaComposite instance and an opaque color (as opposed to using just a transparent color).\nBatik maps that to a rect with an opaque fill and group opacity:\n\n         <rect x=\"467\" y=\"45\" width=\"35\" style=\"clip-path:url(#clipPath2); fill:white; opacity:0.6; stroke:none;\" rx=\"3\" ry=\"3\" height=\"20\" />\n\niText must have a 'check' where it combines an object drawn with an AlphaComposite and an opaque color to an object drawn with a transparent color.\nSo when it gets the drawing commands from jChart it comes out right.\n\nHowever Batik sees a rectangle with group opacity so it creates an offscreen image draws the rectangle with opaque white into that offscreen image and the draws the image to the canvas with transparency (this sequence is more or less\ndictated by the SVG standard).  I'm guessing the issue is that the iText\nPDF Graphics doesn't know what to do with an image that needs to be drawn with transparency.\n\nIt would be better if the Batik SVGGraphics2D would optimize this case to a simple transparent fill color (fill:white; fill-opacity:0.6), but what it is\ncurrently doing isn't wrong (IMHO).\n\n   If you wanted to test this you could replace all the \"opacity:0.6\" instances in the SVG with \"fill-opacity:0.6\".\n\nGood luck.", "tags": [], "bug_id": 51105, "is_private": false, "count": 7, "id": 145955, "time": "2011-04-22T10:41:12Z", "creator": "deweese@apache.org", "creation_time": "2011-04-22T10:41:12Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 51105, "text": "(In reply to comment #7)\n> If you wanted to test this you could replace all the \"opacity:0.6\" instances\n> in the SVG with \"fill-opacity:0.6\".\n\n   Is there any way to do so programatically during generation the SVG using batik?", "id": 145956, "time": "2011-04-22T11:00:08Z", "creator": "jan.krakora.cz@gmail.com", "creation_time": "2011-04-22T11:00:08Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 51105, "attachment_id": null, "is_private": false, "id": 145971, "time": "2011-04-24T12:00:24Z", "creator": "deweese@apache.org", "creation_time": "2011-04-24T12:00:24Z", "text": "> (In reply to comment #7)\n> > If you wanted to test this you could replace all the \"opacity:0.6\" instances\n> > in the SVG with \"fill-opacity:0.6\".\n\n(In reply to comment #8)\n\n> Is there any way to do so programatically during generation the SVG using\n> batik?\n\n    Well you can use Java Regexps, or you could use DOM, or you could\nuse XSLT.  But if you are asking if Batik will do this transformation for\nyou; no (that would be the optimization I said Batik didn't do earlier)."}, {"text": "\n(In reply to comment #7)\n>    If you wanted to test this you could replace all the \"opacity:0.6\" instances\n> in the SVG with \"fill-opacity:0.6\".\n\n   I've tested it and it works fine.", "tags": [], "bug_id": 51105, "is_private": false, "count": 10, "id": 145985, "time": "2011-04-25T13:21:58Z", "creator": "jan.krakora.cz@gmail.com", "creation_time": "2011-04-25T13:21:58Z", "attachment_id": null}]
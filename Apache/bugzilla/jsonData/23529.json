[{"count": 0, "tags": [], "creator": "paulo@fuegolabs.com", "attachment_id": null, "id": 44902, "time": "2003-09-30T19:15:38Z", "bug_id": 23529, "creation_time": "2003-09-30T19:15:38Z", "is_private": false, "text": "Hi, I\u2019 m using the tomcat 4.24 and I detect a problem if install it  in a path \nthat contains blank spaces. I always receive the error detailed bellow when I \ntry to compiles a JSP.\n\nI see in the Mailing Lists some workaround like install Tomcat in a directory \nthat not contains blank spaces, etc.\n\nHowever, my situation is little different. I have an application that uses \nTomcat\u2019s API to start a Web Application inside the same Virtual Machine. In \nthis case, none of the suggested workarounds could be applied.\n\nI read in the Tomcat Mailing Lists that previous version as 4.18 supports \nblank spaces in the path. \nSome person opens the bug (http://issues.apache.org/bugzilla/show_bug.cgi?\nid=21252) that is similar. However, it was closed like invalid. \uf04c\n\nIn windows, locations like (<drive>:\\Program Files and <drive>:\\Documents and \nSettings) are very common.  I could not prohibit the user install my \napplication in paths that contains spaces.\n\nI really appreciate some solution or a workaround that help me to continue \nworking.\n\nThanks in advance for your help.\n\n------------------------------------------------------\norg.apache.jasper.JasperException: Unable to compile class for JSP\n\nAn error occurred at line: -1 in the jsp file: null\n\nGenerated servlet error:\n    [javac] Since fork is true, ignoring compiler setting.\n    [javac] Compiling 1 source file\n    [javac] Since fork is true, ignoring compiler setting.\n    [javac] javac: invalid flag: C:\\Program\n    [javac] Usage: javac  \n    [javac] where possible options include:\n    [javac]   -g                        Generate all debugging info\n    [javac]   -g:none                   Generate no debugging info\n    [javac]   -g:{lines,vars,source}    Generate only some debugging info\n    [javac]   -nowarn                   Generate no warnings\n    [javac]   -verbose                  Output messages about what the \ncompiler \nis doing\n    [javac]   -deprecation              Output source locations where \ndeprecated APIs are used\n    [javac]   -classpath          Specify where to find user class files\n    [javac]   -sourcepath         Specify where to find input source files\n    [javac]   -bootclasspath      Override location of bootstrap class files\n    [javac]   -extdirs            Override location of installed extensions\n    [javac]   -d             Specify where to place generated class files\n    [javac]   -encoding       Specify character encoding used by source files\n    [javac]   -source          Provide source compatibility with specified \nrelease\n    [javac]   -target          Generate class files for specific VM version\n    [javac]   -help                     Print a synopsis of standard options"}, {"count": 1, "tags": [], "bug_id": 23529, "text": "I have just tested this using the latest source from CVS and can not reproduce \nthis problem. If you experience this issue with the latest version, please re-\nopen this bug. If the problem persists it would be helpful if you could \nprovide a simple test application that demonstrates it.", "id": 45309, "time": "2003-10-09T18:41:35Z", "creator": "medthomas@ntlworld.com", "creation_time": "2003-10-09T18:41:35Z", "is_private": false, "attachment_id": null}]
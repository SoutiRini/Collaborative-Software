[{"count": 0, "tags": [], "text": "Hi!\n\nI use Perl5Util.match() to validate email addresses. For .co.uk addresses that \nlack an @, using the regular expression pattern, \"^(\\\\w+[-_.'&\\\\/]*)+@(\\\\w+[-\n_.])+\\\\w+$\", the call to match() takes about 20 mins to return on a quad CPU \nserver (during which time the CPUs are very busy). \n\nHere is some demonstration code. I experience this problem on version 2.0.6 and \n2.0.7\n\nMany thanks,\n\nLouis Joubert\n\n-------------------\n\nimport org.apache.oro.text.perl.Perl5Util;\n\npublic class TestPerlMatcher{\n    public static void main (String[] args){\n        Perl5Util _perlUtil = new Perl5Util();\n        String validationRE = \"^(\\\\w+[-_.'&\\\\/]*)+@(\\\\w+[-_.])+\\\\w+$\";\n        String[] addresses = \n{\"joe.bloggs@blogger.com\", \"joe.bloggsblogger.com\", \"joe.bloggs@blogger.co.uk\",\n                              \"joe.bloggsblogger.co.uk\", \"craig.rendowe@kopekope\nmopers.co.uk\", \"craig.rendowekopekopemopers.co.uk\"}; //only the latter fails\n        for (int i=0; i<addresses.length; i++){\n            System.out.println(\"PerlMatcher returns, for email \naddress \"+addresses[i]+\", \"+_perlUtil.match(\"/\" + validationRE + \"/\", addresses\n[i]));\n        }\n    }\n}", "is_private": false, "id": 44102, "creator": "louis.joubert@drkw.com", "time": "2003-09-12T09:57:44Z", "bug_id": 23132, "creation_time": "2003-09-12T09:57:44Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Although this behavior is unfortunate, it is not a bug per se.  Perl regular\nexpressions are mini-programs of sorts and can easily lead to slow matching\nor even infinite loops.  This behavior is common when you nest quantifiers\nwhich produce ambiguous interpretations for an NFA and cause every possible\ninterpretation of the expression to be attempted. In cases where one of the\nquantifiers matches the null (zero-length) string, this can lead to infinite\nmatching.  Various versions of Perl, including Perl5.003 exhibit this exact\nbehavior.  We hope to eradicate this behavior as we move to Perl 5.8\ncompatibility.  However, the problem can always be solved by writing an\nequivalent, but more precise regular expression.  For example, if you\nchange your expression to the equivalent:\n   String validationRE = \"^(\\\\w[-\\\\w_.'&\\\\/]+)@(\\\\w+[-_.])+\\\\w+$\";\nbacktracking is minimized and all matches complete rapidly.\n\nI'm marking this report as LATER and changing the Severity level to\nEnhancement so we keep in mind we would like to handle \"inefficient\"\nregular expressions more efficiently.", "is_private": false, "id": 44114, "creator": "dfs@apache.org", "time": "2003-09-12T15:00:57Z", "bug_id": 23132, "creation_time": "2003-09-12T15:00:57Z", "attachment_id": null}]
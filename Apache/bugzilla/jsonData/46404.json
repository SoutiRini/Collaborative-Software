[{"count": 0, "tags": [], "bug_id": 46404, "is_private": false, "text": "Logging an org.apache.axis.AxisFault using the SimpleSocketServer results in a NullPointerException on the client side.\n\nVersions: \nLog4J 1.2.15\nJava 1.4.2_10\naxis 1.4\n\n\nTest method:\npublic static void main(String[] args) throws Exception {\n  logger = Logger.getLogger(Test.class);\n  logger.debug(\"start\");\n  logger.debug(\"err\", new org.apache.axis.AxisFault());\n}\n\n\nOutput on Client (in System.err):\nlog4j:WARN Detected problem with connection: java.io.IOException: stream active\njava.lang.NullPointerException\n\tat org.apache.log4j.net.SocketAppender.append(SocketAppender.java:243)\n\tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251)\n\tat org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66)\n\tat org.apache.log4j.Category.callAppenders(Category.java:206)\n\tat org.apache.log4j.Category.forcedLog(Category.java:391)\n\tat org.apache.log4j.Category.debug(Category.java:279)\n\tat Test.main(SAPEquipmentQueryClientTest.java:421)\nException in thread \"main\" \n\n\n\nOutput on Server's log:\n2008-12-16 10:05:53,512 [main] INFO  net.SimpleSocketServer - Connected to client at /xxx.xxx.xxx.xxx\n2008-12-16 10:05:53,514 [main] INFO  net.SimpleSocketServer - Starting new socket node.\n2008-12-16 10:05:53,518 [main] INFO  net.SimpleSocketServer - Waiting to accept a new client.\n2008-12-16 10:05:51,496 [main] DEBUG Test - start\n2008-12-16 10:05:53,916 [Thread-98] INFO  net.SocketNode - Caught java.io.IOException: java.io.StreamCorruptedException\n2008-12-16 10:05:53,917 [Thread-98] INFO  net.SocketNode - Closing connection.\n\n\nConfiguration Client:\nlog4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n\t<appender name=\"SimpleServerSocketLogger\" class=\"org.apache.log4j.net.SocketAppender\">\n\t\t<param name=\"remoteHost\" value=\"host\"/>\n\t\t<param name=\"port\" value=\"4445\"/>\n\t\t<param name=\"LocationInfo\" value=\"true\"/>\n\t</appender>\n\t<root>\n\t\t<priority value=\"debug\"/>\n\t\t<appender-ref ref=\"SimpleServerSocketLogger\"/>\n\t</root>\n</log4j:configuration>\n\n\nConfiguration Server:\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n\t<appender name=\"Konsole\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n\t\t<param name=\"File\" value=\"Java.log\"/>\n\t\t<param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\"/>\n\t\t<layout class=\"org.apache.log4j.PatternLayout\">\n\t\t\t<param name=\"ConversionPattern\" value=\"%d [%t] %-5p %C{2} - %m%n\"/>\n\t\t</layout>\n\t</appender>\n\t<root>\n\t\t<priority value=\"debug\"/>\n\t\t<appender-ref ref=\"Konsole\"/>\n\t</root>\n</log4j:configuration>", "id": 123338, "time": "2008-12-16T01:36:33Z", "creator": "hanno.neuer@telekom.at", "creation_time": "2008-12-16T01:36:33Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "carnold@apache.org", "text": "Problem was not obvious on code review.  Marking this as a blocker for log4j 1.2.16.  Would appreciate a patch or more analysis if available.  If not, will try to revisit after walking through the bug list.", "id": 123873, "time": "2009-01-08T09:28:38Z", "bug_id": 46404, "creation_time": "2009-01-08T09:28:38Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46404, "attachment_id": 23307, "is_private": false, "id": 125146, "time": "2009-02-25T07:37:53Z", "creator": "hanno.neuer@telekom.at", "creation_time": "2009-02-25T07:37:53Z", "text": "Created attachment 23307\nNew Version of ThrowableInformation class"}, {"count": 3, "attachment_id": null, "creator": "hanno.neuer@telekom.at", "text": "After further investigations I was able to track down the problem. The AxisFault class itself tries to make logging statements when its 'printStackTrace' method is called.\nI changed the ThrowableInformation class to create the string representation of the Throwable in the constructor, so when the information is needed while logging is done no further call to 'printStackTrace' is neccessary which solves the above problem.\n\nPlease review the changes, the new version of the class is in the attachment.\n\n\nRegards,\nHanno", "id": 125147, "time": "2009-02-25T07:39:54Z", "bug_id": 46404, "creation_time": "2009-02-25T07:39:54Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 46404, "is_private": false, "text": "For more details on NPE risks and others on log4j have a look here\n\nhttp://www.qualitesys.com/wswebconsulterfichiers.php?projet=demojava_log4j\n\nThanks", "id": 125148, "time": "2009-02-25T08:03:50Z", "creator": "qualitychecker@free.fr", "creation_time": "2009-02-25T08:03:50Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "carnold@apache.org", "is_private": false, "id": 125152, "time": "2009-02-25T11:59:54Z", "bug_id": 46404, "creation_time": "2009-02-25T11:59:54Z", "tags": [], "text": "Pushing the call to printStackTrace into the constructor is not acceptable from a performance standpoint since the call could be fairly expensive and might never be needed.\n\nThis problem may be another manifestation of bug 44038 and the fix for it may have addressed the problem.  There was not sufficient information in the original report to know if it was the same or different problem.  Could you retest using the SVN HEAD and see if the fix for bug 44038 addressed the problem?"}, {"count": 6, "tags": [], "creator": "hanno.neuer@telekom.at", "text": "My further analysis:\nThe problem is not related to bug 44038 and exists not only for Exceptions but for all Objects. \n\nAssume the following lines and a SocketAppender configuration:\n\n    logger.debug(new Object() {\n      public String toString() {\n        Logger.getLogger(Object.class).debug(\"Will not go through the wire\");\n        return \"Will not go through the wire neither!\";\n      }\n    });\n\n\nThe problem is in SocketAppender#append(LoggingEvent) in combination with the LoggingEvent serialization.\n\nSocketAppender#append(LoggingEvent) will call ObjectOutputStream#writeObject with the given LoggingEvent. In ObjectOutputStream#writeObject the underlying OutputStream will be prepared and then at some point LoggingEvent#writeObject(ObjectOutputStream) will be called.\n\nIn LoggingEvent#writeObject(ObjectOutputStream) there are a few lines preparing the non-transient fields of LoggingEvent, e.g. getRenderedMessage and getThrowableStrRep. Those methods make calls to the Object and Throwable to be logged which are not restricted in anyway. And that's the crux of the matter, they can even have their own logging!\n\nIf now the Object to be logged (as in the above example) calls the Logger again, it will try to send a second LoggingEvent through the wire using the same ObjectOutputStream, allthough the ObjectOutputStream is currently used to write the first LoggingEvent.\n\nThis results in:\nlog4j:WARN Detected problem with connection: java.io.IOException: stream active\n\n\nA possible solution to handle this situation is to make sure, that the LoggingEvent will not make any calls to the logged Objects while serialization (e.g. by preparing the LoggingEvent _before_ ObjectOutputStream#writeObject is called).\n\nI hope this clarifies my problem.\n\nHanno", "id": 125176, "time": "2009-02-26T00:22:03Z", "bug_id": 46404, "creation_time": "2009-02-26T00:22:03Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 46404, "text": "Could anyone who has this problem check if the following patch resolves the issue.  Basically, it forces the evaluation of the message's toString() and the exception if any's printStackTrace() to occur before the start of writeObject().\n\n\nIndex: src/main/java/org/apache/log4j/net/SocketAppender.java\n===================================================================\n--- src/main/java/org/apache/log4j/net/SocketAppender.java\t(revision 746252)\n+++ src/main/java/org/apache/log4j/net/SocketAppender.java\t(working copy)\n@@ -244,6 +244,8 @@\n     if (application != null) {\n         event.setProperty(\"application\", application);\n     }\n+    event.getRenderedMessage();\n+    event.getThrowableStrRep();\n \toos.writeObject(event);\n \t//LogLog.debug(\"=========Flushing.\");\n \toos.flush();", "id": 126067, "time": "2009-04-07T20:54:50Z", "creator": "carnold@apache.org", "creation_time": "2009-04-07T20:54:50Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "text": "Thanks for looking into this.\n\nThis patch solves the problem for the SocketAppender but it will remain for other appenders.\n\nTwo appenders which I manually checked for the problem (allthough I didn't try to run the code):\n  - SocketHubAppender (also uses ObjectOutputStream, same as in SocketAppender)\n  - JDBCAppender (should result in a ConcurrentModificationException while flushing the buffer)\n\nI haven't looked into other appenders beside these two, but I assume there will be more places where the problem occurs.\n\nA more general solution is to make sure that the two lines\n +    event.getRenderedMessage();\n +    event.getThrowableStrRep();\nare called before the actual call to AppenderSkeleton#append is done in AppenderSkeleton#doAppend. \n\nI am not sure about the performance or other impacts of this solution so I want you Log4j guys to check it for feasibility.", "is_private": false, "id": 126068, "creator": "hanno.neuer@telekom.at", "time": "2009-04-07T23:00:42Z", "bug_id": 46404, "creation_time": "2009-04-07T23:00:42Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "carnold@apache.org", "text": "If that addresses the problem, you could like workaround the problem in previous versions by wrapping the SocketAppender in a AsyncAppender.", "id": 126084, "time": "2009-04-08T05:32:19Z", "bug_id": 46404, "creation_time": "2009-04-08T05:32:19Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 46404, "attachment_id": null, "text": "I applied the patch suggested in Comment #7 to the 1.2.15 Java source and created a new jar file log4j-1.2.15.1.  Locally, on my development system the patch seems to prevent the NullPointerException on the client side.  This new jar needs to be deployed on our test system for further validation.", "id": 126092, "time": "2009-04-08T09:07:09Z", "creator": "rabbuhl@hotmail.com", "creation_time": "2009-04-08T09:07:09Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 46404, "attachment_id": null, "text": "The jar file log4j-1.2.15.1 was deployed on our test system and it seems to be a valid solution.  When can we expect an official release from Apache which contains this fix?", "id": 126378, "time": "2009-04-20T01:35:19Z", "creator": "rabbuhl@hotmail.com", "creation_time": "2009-04-20T01:35:19Z", "is_private": false}, {"count": 12, "attachment_id": null, "creator": "carnold@apache.org", "text": "Commited fixes in rev 773779.", "id": 126950, "time": "2009-05-11T21:46:39Z", "bug_id": 46404, "creation_time": "2009-05-11T21:46:39Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "creator": "rabbuhl@hotmail.com", "text": "When will you create a log4j release which contains these commited fixes?", "id": 128594, "time": "2009-07-07T07:52:29Z", "bug_id": 46404, "creation_time": "2009-07-07T07:52:29Z", "is_private": false, "attachment_id": null}]
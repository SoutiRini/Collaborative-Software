[{"count": 0, "tags": [], "bug_id": 50194, "text": "Hello,\nThere is possibly a regression in the ELParser code on Tomcat 6.0.2.20.  The issue I see works fine on Tomcat 6.0.2.18. \nI've also tried on Tomcat 6.0.2.29 and it is still failing.\n\nA JSF application which uses Facelets (with .xhtml files) and a custom tag which contains an expression with a function call starts to fail in Tomcat 6.0.2.20.  \n\nThe code snippet from the app is:\n------------------\n<ui:composition xmlns=\"http://www.w3.org/1999/xhtml\"\n\txmlns:ui=\"http://java.sun.com/jsf/facelets\"\n\txmlns:h=\"http://java.sun.com/jsf/html\"\n\txmlns:f=\"http://java.sun.com/jsf/core\"\n\txmlns:pre-posttag=\"http://www.test.com/dash\">\n\n\t<h:outputText value=\"testing\" rendered=\"#{pre-posttag:test()}\"/>\n\n</ui:composition>\n-----------------\n\nThe exception thrown is (See caused by section):\n====================\nThrowable occurred: com.sun.facelets.tag.TagAttributeException: /test.xhtml @20,63 rendered=\"#{pre-posttag:test()}\" Function 'posttag:test' not found\nat com.sun.facelets.tag.TagAttribute.getValueExpression(TagAttribute.java:259)\nat com.sun.facelets.tag.jsf.ComponentRule$ValueExpressionMetadata.applyMetadata(ComponentRule.java:69)\nat com.sun.facelets.tag.MetadataImpl.applyMetadata(MetadataImpl.java:36)\n.....\n\nCaused by: javax.el.ELException: Function 'posttag:test' not found\nat org.apache.el.lang.ExpressionBuilder.visit(ExpressionBuilder.java:175)\nat org.apache.el.parser.SimpleNode.accept(SimpleNode.java:145)\nat org.apache.el.parser.SimpleNode.accept(SimpleNode.java:148)\nat org.apache.el.lang.ExpressionBuilder.prepare(ExpressionBuilder.java:133)\nat org.apache.el.lang.ExpressionBuilder.build(ExpressionBuilder.java:151)\nat org.apache.el.lang.ExpressionBuilder.createValueExpression(ExpressionBuilder.java:194)\nat org.apache.el.ExpressionFactoryImpl.createValueExpression(ExpressionFactoryImpl.java:68)\nat com.sun.facelets.tag.TagAttribute.getValueExpression(TagAttribute.java:256)\n... 35 more\n====================\n\nI've been narrowing the problem down but I cannot find the appropriate way to fix this as it's generated code.  The issue appears to be caused by the changes made to the code in this revision:\n\nhttp://svn.apache.org/viewvc?view=revision&revision=681737", "id": 141324, "time": "2010-11-01T18:20:06Z", "creator": "jsartoris@hotmail.com", "creation_time": "2010-11-01T18:20:06Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 50194, "attachment_id": null, "id": 141325, "time": "2010-11-01T18:25:14Z", "creator": "jsartoris@hotmail.com", "creation_time": "2010-11-01T18:25:14Z", "is_private": false, "text": "Sorry, meant to add more description.  The issue appears to be in the parsing of the expression,  the dash in the namespace for the tag is now causing a problem.  As you can see in the exception, which states:\nFunction 'posttag:test' not found\n\nthe \"pre-\" is missing.  I've been trying to debug the code, but it's been very difficult to debug since it's generated code."}, {"count": 2, "tags": [], "bug_id": 50194, "attachment_id": null, "id": 141680, "time": "2010-11-12T13:53:18Z", "creator": "markt@apache.org", "creation_time": "2010-11-12T13:53:18Z", "is_private": false, "text": "There are a handful of different specifications involved here.\n\nFirst of all there is the JSP 2.1 specification. It states in Table JSP.1-9 that:\nA prefix must follow the naming convention specified in the XML namespaces specification.\nSo far so good, '-' is permitted by the XML namespaces specification.\n\nThen we move to the EL 2.1 specification. Unfortunately, it is more restrictive. 1.15 defines the syntax as:\n[ns:]f([a1[,a2[,...[,an]]]])\nwhere ns is a namespace. Again, so far so good.\n\nHowever in the collected syntax there is the following:\nFunctionInvocation::=(Identifier \u2018:\u2019)? Identifier \u2018(\u2018 \n                     ( Expression ( \u2018,\u2019 Expression )* )? \u2018)\u2019\nand\nIdentifier ::= Java language identifier\n\nSo the namespace also has to comply with the rules for Java Language Identifiers which do not permit the use of '-'.\n\nTomcat's EL processing has been made gradually more specification compliant as bugs have been raised that highlight various issues caused by a relaxed interpretation of the specification. I suspect the change between 6.0.18 and 6.0.29 was as a result of one of these."}]
[{"attachment_id": null, "tags": [], "bug_id": 39758, "text": "At some points in my JSP I use a out.flush() to write some information back to \nthe client while processing is ongoing.\n\nIf I get a runtime exception after such a flush() call, the error page showing \nthe exception and stack trace is not displayed. \n\nThe little JSP\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n \n<HTML>\n<HEAD>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<TITLE>Tomcat test</TITLE>\n</HEAD>\n\n<BODY>\n<% \nout.flush();\nString a = null;\na.toLowerCase();\n%>\n</BODY>\n</HTML>\n\ndemonstrate the problem. The client did not get any exception information.\n\nBest regards", "count": 0, "id": 89939, "time": "2006-06-08T09:37:28Z", "creator": "frank.leja@hlcl.com", "creation_time": "2006-06-08T09:37:28Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 39758, "text": "Once the buffer is flushed - the response is sent to the client. An error page\ncan't be sent since the response was already committed.", "id": 89944, "time": "2006-06-08T10:21:53Z", "creator": "funkman@joedog.org", "creation_time": "2006-06-08T10:21:53Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 39758, "attachment_id": null, "is_private": false, "id": 89948, "time": "2006-06-08T11:15:03Z", "creator": "frank.leja@hlcl.com", "creation_time": "2006-06-08T11:15:03Z", "text": "(In reply to comment #1)\n> Once the buffer is flushed - the response is sent to the client. An error page\n> can't be sent since the response was already committed.\n\nOk, but in Websphere I got the error messages. They write only a HTML fragment \nconsisting of H1 and p tags with the error message and stack trace. This seems \nto me a pragmatic way to definitely bring the error to the user of the JSP \npage. Independently of it uses out.flush() before or not. I feel it not \nsufficient to hide the occuring error.  "}, {"count": 3, "attachment_id": null, "creator": "remm@apache.org", "text": "The error pages for errors are written in a valve which is configurable. You can\nreplace that valve with another which would output stuff even if the response is\ncommitted.", "id": 89950, "time": "2006-06-08T12:11:32Z", "bug_id": 39758, "creation_time": "2006-06-08T12:11:32Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 39758, "text": "(In reply to comment #3)\n> The error pages for errors are written in a valve which is configurable. You \ncan\n> replace that valve with another which would output stuff even if the response \nis\n> committed.\n\nDid you mean that using \n<%@ page errorPage=\"/jspError.jsp\" %>\nin my jsp's will work even after an out.flush() in the middle of the jsp \nprocessing?\n", "count": 4, "id": 89986, "time": "2006-06-09T08:21:34Z", "creator": "frank.leja@hlcl.com", "creation_time": "2006-06-09T08:21:34Z", "is_private": false}, {"count": 5, "tags": [], "creator": "funkman@joedog.org", "attachment_id": null, "id": 89991, "creation_time": "2006-06-09T10:32:41Z", "time": "2006-06-09T10:32:41Z", "bug_id": 39758, "text": "Once out.flush is called. There isn't a guarantee that flow of control will\nproperly go errorPage=\"/jspError.jsp\". The spec says once a resonse is committed\n- doing anything to the header throws an IllegalStateException. Forwarding via\nrequestdispather does stuff to the header, as well as a regular JSP in its\nnormal startup.  ", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 39758, "is_private": false, "id": 89995, "time": "2006-06-09T10:42:43Z", "creator": "frank.leja@hlcl.com", "creation_time": "2006-06-09T10:42:43Z", "tags": [], "text": "(In reply to comment #5)\n> Once out.flush is called. There isn't a guarantee that flow of control will\n> properly go errorPage=\"/jspError.jsp\". The spec says once a resonse is \ncommitted\n> - doing anything to the header throws an IllegalStateException. Forwarding via\n> requestdispather does stuff to the header, as well as a regular JSP in its\n> normal startup.  \n\nOk, I accept the spec. But I wonder why an out.flush() 'commits' the response. \nI think on a commit similar to a database. From this perspective a commit \nshould happens at the very end of the jspService method, independently of a \nflush() in between. \n"}, {"count": 7, "tags": [], "creator": "funkman@joedog.org", "is_private": false, "text": "Bad analogy, you comparing apples to beer cans (mmm ... beer) ...\n\nSee\nhttp://tomcat.apache.org/tomcat-5.0-doc/servletapi/javax/servlet/ServletResponse.html#isCommitted()\nhttp://tomcat.apache.org/tomcat-5.0-doc/servletapi/javax/servlet/ServletResponse.html#flushBuffer()\n\nAnd the servlet spec: SRV.5.1 Buffering\n", "id": 89997, "time": "2006-06-09T11:00:31Z", "bug_id": 39758, "creation_time": "2006-06-09T11:00:31Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 48203, "attachment_id": 24539, "id": 131992, "time": "2009-11-16T03:26:20Z", "creator": "mj.wilson.uk@googlemail.com", "creation_time": "2009-11-16T03:26:20Z", "is_private": false, "text": "Created attachment 24539\nTest to demonstrate issues with float and long literals\n\nBCELifier calls BCELFactory.  The BCELFactory.createConstant method does not\nhandle floats and longs correctly:\n\n    private void createConstant( Object value ) {\n        String embed = value.toString();\n        if (value instanceof String) {\n            embed = '\"' + Utility.convertString(embed) + '\"';\n        } else if (value instanceof Character) {\n            embed = \"(char)0x\" + Integer.toHexString(((Character)\nvalue).charValue());\n        }\n        _out.println(\"il.append(new PUSH(_cp, \" + embed + \"));\");\n    } \n\nNote that the types String and char are handled separately.  As for the other\ntypes, it's relying on there being an overloaded constructor of PUSH that takes\nthe constant in its correct form once it is converted to a String.\n\nLet's examine all the other types:\n\n- boolean:  Boolean.toString() produces the values \"true\" and \"false\", which\njavac picks up as booleans, e.g. \"new PUSH(_cp, false)\".\n\n- byte, short, int:  Integer.toString() produces valid values.  In the\nbytecode, there is no (significant) distinction between these types (except for\nmethod signatures, fields, etc.).\n\n- double:  Double.toString() produces valid values, e.g. \"new PUSH(_cp, 0.0)\".\n\n- float:  Float.toString() produces values that look like doubles, e.g. \"new\nPUSH(_cp, 0.0)\".  These are mishandled.\n\n- long:  Long.toString() produces values that look like ints, e.g. \"new\nPUSH(_cp, 0)\", or, even worse, \"new PUSH(_cp, 4000000000)\" (which doesn't\ncompile).\n\n\nI've attached two simple test cases that illustrate the issues.  Do the\nfollowing with BCEL-5.2.jar on your classpath:\n\n% javac TestIncorrectLiterals.java\n% java TestIncorrectLiterals\n% java org.apache.bcel.util.BCELifier TestIncorrectLiterals\n>TestIncorrectLiteralsCreator.java\n% javac TestIncorrectLiteralsCreator.java\n% java TestIncorrectLiteralsCreator\n% java TestIncorrectLiterals\nException in thread \"main\" java.lang.VerifyError: (class:\nTestIncorrectLiterals, method: main signature: ([Ljava/lang/String;)V)\nExpecting to find float on stack\n\n\n% javac TestOutOfRangeLiterals.java\n% java TestOutOfRangeLiterals\n% java org.apache.bcel.util.BCELifier TestOutOfRangeLiterals\n>TestOutOfRangeLiteralsCreator.java\n% javac TestOutOfRangeLiteralsCreator.java\nTestOutOfRangeLiteralsCreator.java:41: integer number too large: 4000000000\n    InstructionHandle ih_0 = il.append(new PUSH(_cp, 4000000000));\n                                                     ^\n1 error\n\n\nHere's my suggested fix:\n\n    private void createConstant( Object value ) {\n        String embed = value.toString();\n        if (value instanceof String) {\n            embed = '\"' + Utility.convertString(embed) + '\"';\n        } else if (value instanceof Character) {\n            embed = \"(char)0x\" + Integer.toHexString(((Character)\nvalue).charValue());\n        } else if (value instanceof Float) {\n            embed += \"f\";\n        } else if (value instanceof Long) {\n            embed += \"L\";\n        }\n        _out.println(\"il.append(new PUSH(_cp, \" + embed + \"));\");\n    } \n\nI shall test out this fix, and report back.\n\nThis issue seems to exist in the SVN trunk code too."}, {"count": 1, "tags": [], "creator": "mj.wilson.uk@googlemail.com", "attachment_id": 24540, "is_private": false, "id": 131993, "time": "2009-11-16T03:26:59Z", "bug_id": 48203, "creation_time": "2009-11-16T03:26:59Z", "text": "Created attachment 24540\nTest to demonstrate issue with big long values."}, {"count": 2, "tags": [], "bug_id": 48203, "attachment_id": null, "text": "applied patch - thanks.", "id": 132008, "time": "2009-11-16T06:18:42Z", "creator": "dbrosius@mebigfatguy.com", "creation_time": "2009-11-16T06:18:42Z", "is_private": false}]
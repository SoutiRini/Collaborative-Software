[{"count": 0, "tags": [], "bug_id": 16577, "attachment_id": null, "text": "Hope this is a false alarm, but here it is any way...\n\nThe WebappClassLoader is supposed to check WEB-INF classes and jar files before \nconsulting its parent loader.  This is the basis for overriding many a library \non a per-context basis.  The following test servlet demonstrates the problem:\n\n\nimport java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\n/**\n * \n */\npublic class ClassStats extends HttpServlet {\n\n\n    public void doGet(\n    HttpServletRequest request, HttpServletResponse response)\n    throws IOException, ServletException {\n        \n        response.setContentType(\"text/html\");\n        PrintWriter out = response.getWriter();\n\n        out.println(\"<html>\");\n        out.println(\"<head>\");\n        out.println(\"<title>\" + getClass().getName() + \"</title>\");\n        out.println(\"</head>\");\n        out.println(\"<body bgcolor=\\\"white\\\">\");\n        \n        String className = request.getQueryString();\n        \n        try {\n            Class clazz = Class.forName(className);\n            out.println(\n            \"<table cellpadding=\\\"5\\\" cellspacing=\\\"10\\\" border=\\\"2\\\">\");\n            printNameValue(\"Name\", className, out);\n            printNameValue(\"ClassLoader\", clazz.getClassLoader(), out);\n            printNameValue(\n            \"Location\",\n            clazz.getProtectionDomain().getCodeSource().getLocation(), out);\n            out.println(\"</table>\");\n        } catch (Exception x) {\n            out.println(\"Encountered exception:\");\n            out.println(\"<pre>\");\n            x.printStackTrace(out);\n            out.println(\"</pre>\");\n        }\n        \n        out.println(\"</body>\");\n        out.println(\"</html>\");\n    }\n    \n    \n    private void printNameValue(String name, Object value, PrintWriter out) {\n            out.println(\"<tr>\");\n            out.println(\"<td>\");\n            out.println(name);\n            out.println(\"</td>\");\n            out.println(\"<td>\");\n            out.println(value);\n            out.println(\"</td>\");\n            out.println(\"</tr>\");\n    }\n}\n\nThe above servlet prints the location from which a given class\n(specified in the query string) is loaded.  Including the activation.jar\nfile in the lib directory of the context in which the above servlet is defined,\nfor example, should yield something like\n\nfile:/<absolute path to context>/WEB-INF/lib/activation.jar\n\nIt doesn't.  Instead we get something like\n\nfile:/<CATALINA HOME>/commons/lib/activation.jar\n\nAs a reality-check, I *have* checked this behavior against\nTomcat 4.0.3, and the behavior there is correct.\n\n-Babak.", "id": 30321, "time": "2003-01-30T03:02:16Z", "creator": "bobbackfar@yahoo.com", "creation_time": "2003-01-30T03:02:16Z", "is_private": false}, {"count": 1, "text": "The behavior mentioned in the specification is only a recommendation.", "bug_id": 16577, "is_private": false, "id": 30325, "time": "2003-01-30T07:04:23Z", "creator": "remm@apache.org", "creation_time": "2003-01-30T07:04:23Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "creator": "bobbackfar@yahoo.com", "text": "Remy,\n\nEven if this behavior is not *required* by the specification it is still a\ngood idea to be backward compatible with previous Tomcat releases (IMHO).\n\nThe reason why this matters to us (the company I work for), is that some of\nour code is designed to work with particular versions/implementations of\nlibraries.\n\nI think I see how this can be fixed:\nNote the private field defined on line 192 of the source...\n\n    /**\n     * Set of package names which are not allowed to be loaded from a webapp\n     * class loader without delegating first.\n     */\n    private static final String[] packageTriggers = {\n        \"javax\",                                     // Java extensions\n        \"org.xml.sax\",                               // SAX 1 & 2\n        \"org.w3c.dom\",                               // DOM 1 & 2\n        \"org.apache.xerces\",                         // Xerces 1 & 2\n        \"org.apache.xalan\"                           // Xalan\n    };\n\n\nThe loading classes from packages starting with the above names is\ndelegated to the parent loader.  This behavior is not backward compatible\nwith previous class loading behavior.  In particular, this makes the use\nof another XML library not possible within a given app context. (Yes, there\nare other problems when running against the 1.4 version of the JDK with the\nXML libraries, but that is another matter.)\n\nI'm not sure why it is here in the first place, but the simple solution\nis to empty this private string array field.\n\nRegards,\n-Babak", "id": 30362, "time": "2003-01-30T18:34:08Z", "bug_id": 16577, "creation_time": "2003-01-30T18:34:08Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "remm@apache.org", "is_private": false, "count": 3, "id": 30363, "time": "2003-01-30T18:41:25Z", "bug_id": 16577, "creation_time": "2003-01-30T18:41:25Z", "text": "This is not a feature which is open for discussion, actually. javax.* will be\ntreated as delegate first, to get around the Sun policy of bundling random\nextensions in J2SE (and the spec *does* require delegation for the J2SE\nclasses). This solution is by far the lesser of many CL evils introduced in JDK 1.4."}, {"count": 4, "tags": [], "creator": "bobbackfar@yahoo.com", "text": "Okay, thanks for clearing that up (the part about not being open for\ndiscussion).\n\nIn light of your decision you might want to tell the documentation folks\nthat information in\n\nhttp://jakarta.apache.org/tomcat/tomcat-4.1-doc/class-loader-howto.html\n\nis outdated and incorrect (the part about how libraries are loaded) in\neach context. I think I've done my part.\n\nCiao,\n-b.", "id": 30368, "time": "2003-01-30T19:14:57Z", "bug_id": 16577, "creation_time": "2003-01-30T19:14:57Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 12522, "attachment_id": null, "id": 22669, "time": "2002-09-11T11:45:59Z", "creator": "mkut@umc.com.ua", "creation_time": "2002-09-11T11:45:59Z", "is_private": false, "text": "If optional task specified with <taskdef> is located in CLASSPATH enviroment\nvariable Ant fails to load class for that task (it throws DefClassNotFound\nexception). When I move that class to \"$JAVA_HOME/lib/ext\" directory Ant is able\nto load it but is unable to load \"org.apache.tools.ant.Task\" class. When I move\nant.jar to \"$JAVA_HOME/lib/ext\" directory Ant is unable to load classes from\ntools.jar, and so on. Despite all that jars are located in the CLASSPATH\nvariable Ant ignores them somehow. When I use only one core <javadoc> task all\ngoes smoothly. Here is stacktrace when running Ant with -debug option.\n\n--- Nested Exception ---\njava.lang.NoClassDefFoundError: org/apache/tools/ant/Task\n        at java.lang.ClassLoader.defineClass0(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:486)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:111)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:248)\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:297)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:290)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:286)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:253)\n        at\norg.apache.tools.ant.AntClassLoader.findBaseClass(AntClassLoader.java:1102)\n        at org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:919)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:253)\n        at org.apache.tools.ant.taskdefs.Definer.addDefinition(Definer.java:230)\n        at org.apache.tools.ant.taskdefs.Definer.execute(Definer.java:162)\n        at\norg.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler.finished(ProjectHelperImpl.java:821)\n        at\norg.apache.tools.ant.helper.ProjectHelperImpl$AbstractHandler.endElement(ProjectHelperImpl.java:300)\n        at org.apache.xerces.parsers.AbstractSAXParser.endElement(Unknown Source)\n        at\norg.apache.xerces.parsers.AbstractXMLDocumentParser.emptyElement(Unknown Source)\n        at org.apache.xerces.impl.XMLNamespaceBinder.emptyElement(Unknown Source)\n        at\norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanStartElement(Unknown\nSource)\n        at\norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown\nSource)\n        at\norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)\n        at org.apache.xerces.parsers.DTDConfiguration.parse(Unknown Source)\n        at org.apache.xerces.parsers.DTDConfiguration.parse(Unknown Source)\n        at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n        at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)\n        at\norg.apache.tools.ant.helper.ProjectHelperImpl.parse(ProjectHelperImpl.java:155)\n        at\norg.apache.tools.ant.ProjectHelper.configureProject(ProjectHelper.java:117)\n        at org.apache.tools.ant.Main.runBuild(Main.java:597)\n        at org.apache.tools.ant.Main.start(Main.java:196)\n        at org.apache.tools.ant.Main.main(Main.java:235)"}, {"count": 1, "tags": [], "text": "Firstly let me say, do NOT place ant.jar in $JAVA_HOME/lib/ext. Only JDK\nextensions should be placed into this area. Classes in this area are considered\nto be trusted and may not dynamically load classes outside the bootclasspath\n(they won't be able tosee them). \n\nSo, applications like Ant (and JUnit) which load user classes dynamically will\nnot work if they live there. \n\nThe best place to put jars for Ant is in $ANT_HOME/lib. If all the classes are\nin there you will not need a classpath on your taskdef (you don't say whether\nyou have that). If you do have a classpath on the <taskdef> You may be running\ninto problems due to delegation between the taskdef's loader and the system loader.", "attachment_id": null, "id": 22680, "creation_time": "2002-09-11T13:25:32Z", "time": "2002-09-11T13:25:32Z", "creator": "conor@apache.org", "bug_id": 12522, "is_private": false}, {"count": 2, "tags": [], "bug_id": 12522, "attachment_id": null, "id": 22682, "time": "2002-09-11T14:05:03Z", "creator": "mkut@umc.com.ua", "creation_time": "2002-09-11T14:05:03Z", "is_private": false, "text": "You're right, Con. That's my fault. I stumbled into smth and Ant stopped find my\nclasses (possibly because of typo in build.xml) and then I placed ant.jar in\n\"$JAVA_HOME/lib/ext\". It's all working now. Thanks for your response and sorry\nfor disturbation."}, {"count": 3, "tags": [], "bug_id": 12522, "attachment_id": null, "id": 22685, "time": "2002-09-11T14:13:32Z", "creator": "conor@apache.org", "creation_time": "2002-09-11T14:13:32Z", "is_private": false, "text": "Cool"}]
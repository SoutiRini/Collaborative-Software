[{"count": 0, "tags": [], "bug_id": 49492, "text": "The org.apache.tools.ant.types.FileList collection doesn't recognise the files correctly when they contain spaces (windows os) because white space is hard-coded as a delimiter in the setFiles() method:\n\n[code]\npublic void setFiles(String filenames) {\n        checkAttributesAllowed();\n        if (filenames != null && filenames.length() > 0) {\n            StringTokenizer tok = new StringTokenizer(\n                filenames, \", \\t\\n\\r\\f\", false);\n            while (tok.hasMoreTokens()) {\n               this.filenames.addElement(tok.nextToken());\n            }\n        }\n    }\n[/code]\n\nI have a comma separated list of files with spaces in the directory names and it would not work until I used the short dos name format.\n\nI thought I would try to create a custom task that subclasses the FileSet and overrides setFiles() but the filenames Vector member variable is private and has no access in subclasses.\n\nCould the FileSet be updated so that the delimiter can be specified.  I think this could be done simply by using a member variable and getter and setter for the delimiter, the default value of the variable could just be set to \", \\t\\n\\r\\f\" to ensure backward compatibility.\n\nI also wonder should the filenames Vector member variable have a protected getter method to allow sub-classing?\n\nThanks,\nStefan", "id": 137847, "time": "2010-06-23T10:18:56Z", "creator": "sgoor@hotmail.com", "creation_time": "2010-06-23T10:18:56Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "can you turn your list into a list separated by newlines?  If so,\n<resourcelist> would solve the problem.", "is_private": false, "bug_id": 49492, "id": 137850, "time": "2010-06-23T10:30:46Z", "creator": "bodewig@apache.org", "creation_time": "2010-06-23T10:30:46Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 49492, "attachment_id": null, "text": "(In reply to comment #1)\n> can you turn your list into a list separated by newlines?  If so,\n> <resourcelist> would solve the problem.\n\nI don't think that using a new line to separate the files will work because the spaces will still be used to delimit the files, so it will break up the files based on spaces and new lines.\n\nThe <resourcelist> does allow me to do what I need but I need to have new files for the values rather than just putting them in a properties file.  It is an acceptable work around for me at the moment.\n\nWould it be worthwhile making the changes I suggested above to make the filelist type more reusable?  I don't think these changes would impact the type in any negative way.", "id": 137870, "time": "2010-06-24T05:46:09Z", "creator": "sgoor@hotmail.com", "creation_time": "2010-06-24T05:46:09Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 49492, "attachment_id": null, "id": 137871, "time": "2010-06-24T05:55:54Z", "creator": "bodewig@apache.org", "creation_time": "2010-06-24T05:55:54Z", "is_private": false, "text": "<resourcelist> reads the list of resources from a different resource.  This\ndifferent resource doesn't have to be a file, it can be a property or a string\nresource for example.\n\nSo if foo is a newline separated list of file names\n\n<resourcelist>\n  <propertyresource name=\"foo\"/>\n</resourcelist>\n\nshould be the collection of those files.\n\nComing to think of it, you may even be possible to use a filterchain to replace\nthe commas with newlines and use your property as it is.\n\nOTOH, I don't think it would be too hard to provide a patch for an optional\ndelimiter attribute on filelist."}, {"count": 4, "tags": [], "bug_id": 49492, "attachment_id": null, "id": 137877, "time": "2010-06-24T08:52:08Z", "creator": "sgoor@hotmail.com", "creation_time": "2010-06-24T08:52:08Z", "is_private": false, "text": "(In reply to comment #3)\n> <resourcelist> reads the list of resources from a different resource.  This\n> different resource doesn't have to be a file, it can be a property or a string\n> resource for example.\n> \n> So if foo is a newline separated list of file names\n> \n> <resourcelist>\n>   <propertyresource name=\"foo\"/>\n> </resourcelist>\n> \n> should be the collection of those files.\n\n\nThat's great, I hadn't realised that was possible.  Thanks for the suggestion!"}, {"count": 5, "tags": [], "text": "I am having a similar issue with <FILELIST> breaking apart filenames with spaces in the \"files\" string.  In addition to breaking apart the string, I am relying on <FILELIST> to resolve relative pathnames, so I'm not sure that the <RESOURCELIST> workaround will work for me.", "is_private": false, "bug_id": 49492, "id": 144352, "time": "2011-02-16T09:57:11Z", "creator": "john.elion@comcast.net", "creation_time": "2011-02-16T09:57:11Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 49492, "text": "Created attachment 26673\nProposed patch - adds \"sep\" attribute\n\nProposed fix attached.  Fix adds \"sep\" attribute to FileList, such that the default is the original string.\n\nI was able to build Ant from source, but got errors with JUnit (it wasn't clear to me how to modify the source distribution so that the unit tests would run; but Ant built \"out of the box\" and the FileList code was crystal clear, the mod was easy to make).  Behavior without \"sep\" attribute was same, \"sep\" attribute was accepted and solved my problem.\n\nI did not see any way to write code to insure that \"sep\" is processed regardless of whether it occurs before or after \"files\", but it seemed to get it right both ways (maybe the API guarantees processing order based on order of the methods within the class?)", "id": 144377, "time": "2011-02-17T08:57:46Z", "creator": "john.elion@comcast.net", "creation_time": "2011-02-17T08:57:46Z", "is_private": false, "attachment_id": 26673}, {"count": 7, "tags": [], "bug_id": 49492, "text": "Created attachment 26674\nFileList\n\nLooks like I inadvertently attached FileSet.java to previous comment.", "id": 144378, "time": "2011-02-17T09:00:52Z", "creator": "john.elion@comcast.net", "creation_time": "2011-02-17T09:00:52Z", "is_private": false, "attachment_id": 26674}, {"count": 8, "tags": [], "bug_id": 49492, "text": "(In reply to comment #5)\n> I am having a similar issue with <FILELIST> breaking apart filenames with\n> spaces in the \"files\" string.  In addition to breaking apart the string, I am\n> relying on <FILELIST> to resolve relative pathnames, so I'm not sure that the\n> <RESOURCELIST> workaround will work for me.\n\nFirstly, you can use any resource inside resourcelist.  Now, I assume that what you are trying to pass to filelist@files is a property, else you'd just be using nested <file> elements, right?  So you have a <propertyresource>.  I assume you must be using commas for your token, so you could use a <tokens> resourcecollection to break up your propertyresource.  To add leading paths, you could add another level of indirection into the <tokens>:  a <concat> task/resourcecollection using a filterchain configured with a prefixlines filter.  Actually once you're using <concat> you can probably skip the <tokens> collection altogether and use it to tokenize your comma-delimited stuff *and* prefix the resulting lines, passing the <concat> resource directly to <resourcelist>.  I am thus 99% confident that a solution *can* be made to work using <resourcelist>.  I don't have any major antipathy towards making separators configurable in <filelist>; however it would introduce an inconsistency between filelist and fileset/files/dirset that is IMO unnecessary.  These other types are somewhat different than filelist due to the fact that they all deal with directory scanning and therefore support includesfile/excludesfile as a means of specifying patterns with embedded spaces.  Of course, knowing that <filelist> supports the nested <file> element for this purpose (as documented in the manual), an alternative could be to use antcontrib:for to iterate over your comma-delimited property, then use the <augment> task to add the nested <file> elements one at a time.\n\nPlease follow up on user@ant.apache.org if you need more information about any of the approaches I've outlined here.\n\nMatt", "id": 144380, "time": "2011-02-17T10:47:25Z", "creator": "mbenson@apache.org", "creation_time": "2011-02-17T10:47:25Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 15845, "attachment_id": null, "is_private": false, "id": 28945, "time": "2003-01-07T16:11:11Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-07T16:11:11Z", "text": "when accessing lots of uncompiled jsp pages Jasper leaks memory.\n\nI have found a temporary solution but am sure it is not good.\n\nif you always force the JspCompilationContext to use a new Compiler when \ngetCompiler() is called the leak goes away.  \n\nWhen profiling Jasper the problem was that the JspCompilationContext, \nJspServletWrapper, JspRuntimeContext, and the Compiler never got gced because \nthey where never dereferenced.  by forcing a new compiler each time it seems to \nsolve this problem but not sure what others it could cause."}, {"count": 1, "tags": [], "creator": "jakarta@trollingers.com", "is_private": false, "text": "in the JspCompilationContext class if we change the compile() method to this\n\npublic void compile() throws JasperException, FileNotFoundException {\n        createCompiler();\n        if (jspCompiler.isOutDated()) {\n            try {\n                jspCompiler.compile();\n                reload = true;\n            } catch (JasperException ex) {\n                throw ex;\n            } catch (Exception ex) {\n                throw new JasperException(\n                    Constants.getString(\"jsp.error.unable.compile\"),ex);\n            }\n        }\n        jspCompiler = null;\n    }\n\nour jsp compilation test goes from using 500 meg of memory to 50 meg of memory.", "id": 29006, "time": "2003-01-08T11:45:15Z", "bug_id": 15845, "creation_time": "2003-01-08T11:45:15Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 29031, "time": "2003-01-08T19:35:45Z", "bug_id": 15845, "creation_time": "2003-01-08T19:35:45Z", "is_private": false, "text": "To summarize, it's up to the compiler to clean up what it allocates. I'm against\nthe patch, but using the new fork option for javac will likely fix it.\nOtherwise, precompile."}, {"count": 3, "text": "I ran jprobe on it and it is never being collected because it is never \ndereferenced from jasper.  so this is a problem with jasper, I agree that the \n5.0 patch fixes it because it is forked but I thought that was not being ported \nto 4.x\n\nJohn", "creator": "jakarta@trollingers.com", "attachment_id": null, "id": 29034, "time": "2003-01-08T19:41:56Z", "bug_id": 15845, "creation_time": "2003-01-08T19:41:56Z", "tags": [], "is_private": false}, {"count": 4, "text": "I added the Jasper 2 fork init parameter to both the Tomcat 4.1 branch\nand the Tomcat 5 branch.  So it will be available in the Tomcat 4.1.19 release.\n", "creator": "glenn@apache.org", "is_private": false, "id": 29048, "time": "2003-01-09T00:06:24Z", "bug_id": 15845, "creation_time": "2003-01-09T00:06:24Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 15845, "attachment_id": null, "text": "there is still a memory leak in 4.1.19\n\nit is not the compile itself that causes the leak, but the \nJspCompilationContext being stored with is compilier indefinatly.  \n\nI have tracked to down somewhat if you read below there is a way to fix it, but \nnot sure of the side effects it might have.  the culprit seems to be the code \nthat checks all the includes to see if they have changed.  it appears to hold \non the the jspcompilationcontext in a map, and never gets rid of the map so the \nmore jsp pages you compile the bigger that map gets and the more memory that is \ntaken up.\n\nplease someone take a serious look at this.  I know some of you think the \nsolution is to precomile every thing, but that is not always posible.\n\n", "id": 29541, "time": "2003-01-16T15:24:19Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-16T15:24:19Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jmurph@automatedlogic.com", "attachment_id": null, "id": 29613, "time": "2003-01-17T16:10:28Z", "bug_id": 15845, "creation_time": "2003-01-17T16:10:28Z", "is_private": false, "text": "Is anyone looking into this bug, as we are finding the same problem.\n"}, {"count": 7, "tags": [], "bug_id": 15845, "attachment_id": null, "text": "I can not reproduce a memory leak with the information that has been provided.\n\nThere is no Map used in any of the code related to checking of JSP\ncompile time include dependencies.  In fact, in all of Jasper 2 there are\nonly a handful of places where a Map is used.\n\nIf you have found a memory leak please provide more detailed information\nof the actual code responsible and examples of how to reproduce it.", "id": 29709, "time": "2003-01-20T13:55:28Z", "creator": "glenn@apache.org", "creation_time": "2003-01-20T13:55:28Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 15845, "attachment_id": null, "text": "Glenn, \n\nA map is used in the class org.apache.jasper.compiler.JspRuntimeContext\n\nthe maps name is jsps and is declared as  \n  private Map jsps = Collections.synchronizedMap( new HashMap());\n\nthis map contains the uri off the jsp pages that are compiled as the key and \nthe JspServletWrapper as the value.\n\nin turn the JspServletWrapper contains the JspCompilationContext which contains \nthe Compiler and all the stuff that goes with it.  \n\nthis map continues to build up over time taking up huge amounts of memory if \nyou have a lot of uncompiled jsp pages.  the JspRuntimeContext.removeWrapper() \nmethod never gets called so this infomation is never garbage collected.\n\nI do not have a great understanding of what this code is trying to do so if you \ndont want to help me look into the problem if you could atleast help me \nunderstand what is suppose to be happening I will try and fix the leak myself.\n\nIf you want to reproduce this bug just delete your jsp cache, turn on \nverbose:gc and then go to all your uncompiled jsp pages.  you can watch the \nmemory climb from there.\n\nthanks, \nJohn", "id": 29864, "time": "2003-01-22T13:08:54Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-22T13:08:54Z", "is_private": false}, {"count": 9, "text": "A) No matter what, pointers to the wrappers will be kept, as the JSP servlet\nneeds them.\nB) Use precompilation if you want to avoid your so called memory problems.\nC) If running in development, I think it is ok to restart Tomcat. Stopping and\nrestarting the context once in a while will likely get rid of the \"wasted\" memory.\nC) Don't reopen the bug, there is no bug (at most, unwanted behavior which\ncannot be fixed - and that I can't reporduce anyway).", "creator": "remm@apache.org", "is_private": false, "id": 29865, "time": "2003-01-22T13:14:57Z", "bug_id": 15845, "creation_time": "2003-01-22T13:14:57Z", "tags": [], "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 15845, "attachment_id": null, "text": "\nSo what your saying Remy is that it is ok for jsp compiles to continualy build \nup memory without releasing it and this is expected behavior in tomcat.  If you \nrun jprobe on it while it compiles jsp pages it is easy to see the memory build \nup.  \n\nBelive it or not there are time where precompile is not an option (ie a hosting \nenviroment where people u/l there jsps all the time) to say restart the server \nevery once in awhile is just plain stupid.\n\nI am sorry you don't seem to see the problem with this, but as you wish I will \nleave the bug closed.", "id": 29867, "time": "2003-01-22T13:27:54Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-22T13:27:54Z", "is_private": false}, {"count": 11, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "The Jasper servlet needs the wrappers to serve the requests. The wrapper will\nobviously use memory, but this cannot be avoided. Note that when yuou recompile\nan already compiled page, the new wrapper should replace the old one in the JSP\nservlet map (so the old one get GCed).\nI am sorry, but there is no fix. (BTW, same would happen with servlets, where\nyou also need wrappers; if you have 1000s of servlets, then I assume you would\nneed a lot more memory, as the container cannot just discard the instance after\nprocessing a request; it would be way too slow)", "id": 29868, "time": "2003-01-22T13:34:18Z", "bug_id": 15845, "creation_time": "2003-01-22T13:34:18Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 15845, "attachment_id": null, "is_private": false, "id": 29869, "time": "2003-01-22T13:38:36Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-22T13:38:36Z", "text": "I understand why the wrappers are there, but if I set the compiler to null \nafter I finish the jsp compile the memory footprint is very small, where if I \nleave the compiler there the footprint is HUGE, and we have been running for a \nwhile now with the compiler set to null with no visable problems and great \ngains in mem usage.  I am just trying to find out what needs to be stored in \nthe wrapper and what does not so that mem usage is minimized.\n\n:-) thanks for the nice reply though.. I though for sure I would get flammed..\n\nJohn"}, {"count": 13, "tags": [], "bug_id": 15845, "attachment_id": null, "text": "So is everything that can be nulled out without a substantive performance\npenalty being  nulled out (or referenced via a weak reference)?  If so, then\nRemy is right, he's done all he can/should do.  If not, there is more work to be\ndone.", "id": 29886, "time": "2003-01-22T15:32:58Z", "creator": "jessh@ptc.com", "creation_time": "2003-01-22T15:32:58Z", "is_private": false}, {"count": 14, "tags": [], "creator": "jakarta@trollingers.com", "attachment_id": null, "id": 29887, "time": "2003-01-22T15:37:15Z", "bug_id": 15845, "creation_time": "2003-01-22T15:37:15Z", "is_private": false, "text": "\nto me it looks like the compiler can be nulled out each time, the only side \neffect of this appears to be that it takes a fraction of a second longer for a \nrecompile of a jsp page to happen but reduceses mem usage by a ton.\n\nif anyone sees a problem with this let me know otherwise I would suggest making \nthe change in the getCompiler method of the jspCompilationContext to return a \nnew compiler each time and not store the compiler as a class var.\n\nthanks for the help, and I do see that it is not a memory leak... (thanks remy) \nbut it does look like some better memory management could be in order.\n\nJohn"}, {"count": 15, "tags": [], "creator": "glenn@apache.org", "text": "The Compiler is needed to check for JSP pages which are out of date and\nneed to be recompiled.  But you do have a valid point that there are some\nobjects with references to them being maintained by the Compiler class\nbetween JSP page compiles that are not needed and could increase memory usage.\n\nI found the following in the Compiler class which are only used during a\ncompile and could be dereferenced once the compile is complete.  Setting\nthese to null after a compile could reduce the memory footprint on a \nproduction server where JSP recompiles happen infrequently.\n\n    private ErrorDispatcher errDispatcher\n    private PageInfo pageInfo;\n    private JasperAntLogger logger;\n    protected Project project=null;\n    protected Node.Nodes pageNodes;\n\nThanks for being persistant in pursuing this issue.  Unless there is objection,\nI will make the necessary changes to the Compiler class.\n", "id": 29888, "time": "2003-01-22T15:54:17Z", "bug_id": 15845, "creation_time": "2003-01-22T15:54:17Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 15845, "attachment_id": null, "text": "\nthanks for calling me persistant :-) I am sure other names crossed your mind..\n\nJohn", "id": 29892, "time": "2003-01-22T16:33:27Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-22T16:33:27Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 15845, "attachment_id": 4522, "text": "Created attachment 4522\npatch for o.a.j.compiler.Compiler.java", "id": 29927, "time": "2003-01-23T12:43:09Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-23T12:43:09Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 15845, "attachment_id": 4523, "is_private": false, "id": 29928, "time": "2003-01-23T12:43:50Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-23T12:43:50Z", "text": "Created attachment 4523\npatch for o.a.j.JspCompilationContext.java"}, {"count": 19, "tags": [], "creator": "glenn@apache.org", "attachment_id": null, "id": 29934, "time": "2003-01-23T14:31:30Z", "bug_id": 15845, "creation_time": "2003-01-23T14:31:30Z", "is_private": false, "text": "Thanks for the patches, but they won't work.\nThe ErrDispatcher is created in the constructor for the Compiler.\nYour patch would break all compiles after the first one.\n\nPlease be patient.  Fixing this is on my todo list."}, {"count": 20, "tags": [], "creator": "glenn@apache.org", "is_private": false, "text": "Unneded objects created for JSP page compiles are now dereferenced so that\nthey are eligible for GC.  Patch applied to both Tomcat 4.1 Jasper 2 and\nTomcat 5.0 Jasper 2.", "id": 30066, "time": "2003-01-26T19:03:44Z", "bug_id": 15845, "creation_time": "2003-01-26T19:03:44Z", "attachment_id": null}, {"count": 21, "tags": [], "creator": "colinryan@yahoo.com", "is_private": false, "text": "(In reply to comment #20)\n> Unneded objects created for JSP page compiles are now dereferenced so that\n> they are eligible for GC.  Patch applied to both Tomcat 4.1 Jasper 2 and\n> Tomcat 5.0 Jasper 2.\n\nWe have just hit on this problem in a production system (build 4.1.18). The \nproblem is particularly prevalent because we publish out new JSPs (dynamic \ncontent) on a daily basis. \n\nWhile I understand this bug is designated closed I would like to know if it \nhas been fixed in subsequent 4.x releases (cant find any evidence of this) and \nsecondly if it is still an issue in 5.x (i.e. when it was eventually fixed).\n\nWe can patch our cut of the Tomcat code with the fork() for Javac (which was \nintroduced in 4.1.19) and by referencing the compiler instance in the \nJspCompilationContext class but this is non ideal and does not fix the core \nproblem.\n\nWe would like to move to a Tomcat version that fixes this issue while \nminimising the 'jump' in releases we must take to accomplish this. \n\nGuidance much appreciated.\n\n", "id": 73184, "time": "2005-04-01T13:43:47Z", "bug_id": 15845, "creation_time": "2005-04-01T13:43:47Z", "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 15845, "attachment_id": null, "is_private": false, "id": 73195, "time": "2005-04-01T20:09:36Z", "creator": "markt@apache.org", "creation_time": "2005-04-01T20:09:36Z", "text": "Looks like it was fixed in 4.1.20 but I would urge you to update to 4.1.31 if at\nall possible. The regression testing will take the same time and there is a\nsignificant number of fixes between 4.1.20 and 4.1.31"}]
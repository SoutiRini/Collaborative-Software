[{"count": 0, "tags": [], "text": "Spotted a real oddity in apr_pollset_poll in both select.c and poll.c in the\ncurrent version 1.2.2 and in the versions used in apache2 20.54 and 2.1.9.\n\nForgive me but I haven't check the rest as I've got stuff due today into test.\n\nI'll take the SELECT based apr_pollset_poll as an example to illustrate...\n\nthe apr_int32_t *num return value is given as the result from the select, which\nshould be the number of signalled FD's.\n\n     rv = select(pollset->maxfd + 1, &readset, &writeset, &exceptset,\n                    tvptr);\n\n     (*num) = rv;\n\nThis is wrong.  The reason it's wrong is because you then itterate over all of\nthe file descriptors in the original query_set to find which exist in either\nthe returned readset, writeset, or exceptset.\n\n     if (FD_ISSET(fd, &readset) || FD_ISSET(fd, &writeset) ||\n                 FD_ISSET(fd, &exceptset)) {\n\nOnly when the fd matches one in either set is the result_set updated\naccordingly, and the integer 'j' used to track the number of results.\n\nHence, in some cases (affecting me Mandrake Linux 10.0 3.3.2-6mdk) the 'num' out\nvalue is greater than the number of items copied into the result set.\n\nNow this would escape the notice of most folks unless, like me, your writing a\nsocks proxy for Set Top Boxes which has a continually growing and shrinking\nlist of connections and hence a very dynamic pollset...\n\nRESULT: walking into an invalid entry in the array and core dumping.\n\n\nThe Fix is, at the end of the loop when running over the file descriptors, you\nshould set (*num)=j as shown below.\n\nLet me re-itterate that this pattern is uesed in most/all of the other\napr_pollset_poll implementation, goes back to APR 0.94/Apache 2.054.\n\nWill try to set aside time for further investigation.\n\nKind Regards,\nGerry Calderhead\n\n-- // SNIP // --\n\nAPR_DECLARE(apr_status_t) apr_pollset_poll(apr_pollset_t *pollset,\n                                           apr_interval_time_t timeout,\n                                           apr_int32_t *num,\n                                           const apr_pollfd_t **descriptors)\n{\n    int rv;\n    apr_uint32_t i, j;\n    struct timeval tv, *tvptr;\n    fd_set readset, writeset, exceptset;\n\n    if (timeout < 0) {\n        tvptr = NULL;\n    }\n    else {\n        tv.tv_sec = (long) apr_time_sec(timeout);\n        tv.tv_usec = (long) apr_time_usec(timeout);\n        tvptr = &tv;\n    }\n\n    memcpy(&readset, &(pollset->readset), sizeof(fd_set));\n    memcpy(&writeset, &(pollset->writeset), sizeof(fd_set));\n    memcpy(&exceptset, &(pollset->exceptset), sizeof(fd_set));\n\n#ifdef NETWARE\n    if (HAS_PIPES(pollset->set_type)) {\n        rv = pipe_select(pollset->maxfd + 1, &readset, &writeset, &exceptset,\n                         tvptr);\n    }\n    else\n#endif\n        rv = select(pollset->maxfd + 1, &readset, &writeset, &exceptset,\n                    tvptr);\n\n    (*num) = rv;\n    if (rv < 0) {\n        return apr_get_netos_error();\n    }\n    if (rv == 0) {\n        return APR_TIMEUP;\n    }\n    j = 0;\n    for (i = 0; i < pollset->nelts; i++) {\n        apr_os_sock_t fd;\n        if (pollset->query_set[i].desc_type == APR_POLL_SOCKET) {\n            fd = pollset->query_set[i].desc.s->socketdes;\n        }\n        else {\n#if !APR_FILES_AS_SOCKETS\n            return APR_EBADF;\n#else\n            fd = pollset->query_set[i].desc.f->filedes;\n#endif\n        }\n        if (FD_ISSET(fd, &readset) || FD_ISSET(fd, &writeset) ||\n            FD_ISSET(fd, &exceptset)) {\n            pollset->result_set[j] = pollset->query_set[i];\n            pollset->result_set[j].rtnevents = 0;\n            if (FD_ISSET(fd, &readset)) {\n                pollset->result_set[j].rtnevents |= APR_POLLIN;\n            }\n            if (FD_ISSET(fd, &writeset)) {\n                pollset->result_set[j].rtnevents |= APR_POLLOUT;\n            }\n            if (FD_ISSET(fd, &exceptset)) {\n                pollset->result_set[j].rtnevents |= APR_POLLERR;\n            }\n            j++;\n        }\n    }\n\n    (*num) = j;   /* <<<<<<<<< ADDED BY GERRY >>>>>>>>>>>>>>>>>>>>> */\n\n    if (descriptors)\n        *descriptors = pollset->result_set;\n    return APR_SUCCESS;\n}", "is_private": false, "bug_id": 37586, "id": 82719, "time": "2005-11-22T00:52:53Z", "creator": "gerry@everythingsucks.co.uk", "creation_time": "2005-11-22T00:52:53Z", "attachment_id": null}, {"text": "\nEmail received on the apr-dev mail list\n\nSeems this bug has known about for over a year!\n\nChanging to P1 in the hope that someone fixes it!\n\n--//--\n\nFrom \"Dror Shilo\" <Dror.Shilo@ericom.com>\nSubject RE: bug in poll.c of apr 0.9.4\nDate Mon, 23 Aug 2004 15:26:42 GMT\nI use apr-0.9.4\n\nif you don't have the poll function\nthis makes apr to implement apr_pollset_poll with a select call ( this how it is\ndone in windows)\napr_status_t  apr_pollset_poll  (apr_pollset_t  *pollset, apr_interval_time_t \ntimeout, apr_int32_t\n*num, const apr_pollfd_t **descriptors)\n\nthe num parameter have to return the length of descriptors\n\nwith the Unix poll function this done correct, but the select call returns the\ntotal number\nof socket handles that are ready and contained in the fd_set  structures\ntherefore if we have 2 socket that one have an FD_READ and the second have\nFD_READ and FD_WRITE\nit will return 3 , but the lenght of descriptors is only 2 , this is a bug\nthere for the fix for this bug is to add this  line at file poll.c line 622  \n(*num) = j;\n\nDror Shilo\nEricom software\n", "tags": [], "bug_id": 37586, "is_private": false, "count": 1, "id": 82729, "time": "2005-11-22T11:18:26Z", "creator": "gerry@everythingsucks.co.uk", "creation_time": "2005-11-22T11:18:26Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "brianp@apache.org", "is_private": false, "text": "I've committed the fix to select.c in the APR development trunk, along with a unit test to check for this \nerror in whatever pollset implementation the build system is using.", "id": 82852, "time": "2005-11-24T23:45:58Z", "bug_id": 37586, "creation_time": "2005-11-24T23:45:58Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 37586, "is_private": false, "text": "I've also made the same fix to apr_poll() (thanks to Joe Orton for pointing out that the bug applied\nthere also) and backported the apr_pollset_poll() and apr_poll() fixes to the 1.2.x branch", "id": 82884, "time": "2005-11-27T03:16:12Z", "creator": "brianp@apache.org", "creation_time": "2005-11-27T03:16:12Z", "attachment_id": null}]
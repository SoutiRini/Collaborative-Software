[{"count": 0, "tags": [], "bug_id": 53493, "attachment_id": 29018, "is_private": false, "id": 160383, "time": "2012-07-01T15:19:55Z", "creator": "submax@tiscalinet.it", "creation_time": "2012-07-01T15:19:55Z", "text": "Created attachment 29018\npatch for delete xml's temporary files when write workbook\n\nthe xml's temporary files are not deleted when call write method of SXSSFWorkbook class.\n\nExample:\n/var/tmp/poi-sxssf-sheet-xml127328075585779261.gz\nor when compress is active:\n/var/tmp/poi-sxssf-sheet127328075585779261\n\nIn the SXSSF code there is not a part for this purpose.\n\nThere is only _fd.deleteOnExit() in SheetDataWriter class, but is not enough if the program that use POI not exit from jvm and these files remain on file system.\n\nFor confirm this, in the method write in SXSSFWorkbook class, there is already tmplFile.delete() for another tmp file.\n\nIn conclusion in write method missing the delete on xml's temporary files.\n\nI believe the correct solution is to have SXSSF tidy up when it's done with files, rather than requiring users to do that via explicit temp directory controls.\n\nI attach a patch for fix this issue. This is very rudimental patch (I don't know the structure of SXSSF classes), this is an example,  but it works very well."}, {"count": 1, "tags": [], "bug_id": 53493, "attachment_id": null, "is_private": false, "id": 160418, "time": "2012-07-03T08:37:12Z", "creator": "ag@4js.com", "creation_time": "2012-07-03T08:37:12Z", "text": "Reading the patch I conclude that you can save a SXSSF workbook only once. That would not be correct. The earliest point in time that the a data file can be deleted it when it is no longer referenced. Hence I am OK with that part of the patch that deletes the files in Sheet.finalize(). I think that the part that explicitly calls Sheet.finalize() from the Workbook.write() should be removed."}, {"count": 2, "attachment_id": null, "bug_id": 53493, "text": "(In reply to comment #1)\n> Reading the patch I conclude that you can save a SXSSF workbook only once.\n> That would not be correct. The earliest point in time that the a data file\n> can be deleted it when it is no longer referenced. Hence I am OK with that\n> part of the patch that deletes the files in Sheet.finalize(). I think that\n> the part that explicitly calls Sheet.finalize() from the Workbook.write()\n> should be removed.\n\nI try to write a same workbook two time but this do not permit action and return Exception:\n\nException in thread \"main\" java.io.IOException: Stream closed\n\tat java.io.BufferedWriter.ensureOpen(BufferedWriter.java:98)\n\tat java.io.BufferedWriter.flushBuffer(BufferedWriter.java:108)\n\tat java.io.BufferedWriter.flush(BufferedWriter.java:235)\n\tat org.apache.poi.xssf.streaming.SheetDataWriter.close(SheetDataWriter.java:78)\n\tat org.apache.poi.xssf.streaming.SXSSFSheet.getWorksheetXMLInputStream(SXSSFSheet.java:71)\n\tat org.apache.poi.xssf.streaming.SXSSFWorkbook.injectData(SXSSFWorkbook.java:295)\n\tat org.apache.poi.xssf.streaming.SXSSFWorkbook.write(SXSSFWorkbook.java:767)\n\tat TestXlsx.main(TestXlsx.java:37)\n\nFor this reason I have insert the delete in write method. \nI understand that object's workbook can to be writed only one time.\nInfact finalize() of SheetDataWriter already exist and this is private.", "id": 160436, "time": "2012-07-04T06:55:37Z", "creator": "submax@tiscalinet.it", "creation_time": "2012-07-04T06:55:37Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "ag@4js.com", "is_private": false, "text": "Yes, you are right but that is another issue (bug). There is nothing in the documentation that says that you can call (S)XSSFSheet.write() only once. \nTo fix it, the statements flushRows(0) and  _writer.close() in SXSSFSheet.getWorksheetXMLInputStream() should be done only if the sheet has not already been flushed to the disk so that the function should look something like this:\npublic InputStream getWorksheetXMLInputStream() throws IOException\n{\n// flush all remaining data and close the temp file writer if not already done\n    if(isModifiable())\n    {\n        flushRows(0);\n        _writer.close();\n    }\n    return _writer.getWorksheetXMLInputStream();\n} \n/** Is this sheet modifiable. Sheets created before a workbook is saved become immutable after saving*/\npublic boolean isModifiable()\n{\n    return !_writer.isClosed();\n}\nThe method isModifiable() also documents another detail in the constraints in terms of \"order of calls\" that the streaming nature of SXSSF imposes over XSSF. Perhaps we should consider introducing an unchecked \"StreamingConstraintException\" when one violates the calling rules (e.g. if you try to add data to a closed sheet).\nHowever, I think that the general rule should be to avoid constraints when we have the choice between a constrained and a non constrained implementation of a public API method.\nIn the case of SXSSFWorkbook.write() I see no reason why the number of calls should be restricted to calling it only once. I even suspect that that saving a workbook, adding sheets and saving again will work with the suggested fix. \nOn the other hand, if you run into more difficult issues then it might not be worth it and we should document that you may call the function SXSSFWorkbook.write() only once.\nRegarding your correct observation that the current code already contains code to delete the temporary data file of a sheet, my question is, why that isn't sufficient for your problem? If you make sure that your application does not reference the SXSSFWorkbook after saving it then the temporary files should get deleted some tome after that when the garbage collector collects the sheets. If this doesn't happen than that is a bug. Apparently the general advice is not to use finalize() for temp file deletion but the arguments I have heard so far are not convincing. I will read up the relevant chapter in Effective Java and if it turns out to be an issue then I agree that we will have to remove the files explicitly.", "id": 160448, "time": "2012-07-04T10:29:11Z", "bug_id": 53493, "creation_time": "2012-07-04T10:29:11Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 53493, "attachment_id": 29032, "is_private": false, "id": 160462, "time": "2012-07-05T09:11:59Z", "creator": "ag@4js.com", "creation_time": "2012-07-05T09:11:59Z", "text": "Created attachment 29032\nCommand line application to test SXSSF temp file removal in finalize()"}, {"count": 5, "attachment_id": null, "bug_id": 53493, "text": "I hope it is OK to post this much prose for a bug but I think I am done now. The main problem with temp file removal in finalize() is that you can't predict when it is done. I thought that that wouldn't be an issue since we don't really care when they are removed as long as they are removed timely (e.g. the next few minutes). However it is possible that this is not the case. If you comment the line that runs gc explicitly from the attached test program then the workbook does not get garbage collected on my JVM (garbage collection is implementation dependent so it may not reproduce on other JVMs). However, for long running programs that allocate memory regularly one can probably assume that the scheme works.\nI suggest to leave the code as is but to introduce an additional function SXSSFWorkbook.dispose() that allows to free the resources explicitly.", "id": 160463, "time": "2012-07-05T09:12:28Z", "creator": "ag@4js.com", "creation_time": "2012-07-05T09:12:28Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "submax@tiscalinet.it", "text": "\n1) What is bug that don't permit multiple writes of the same workbook object?\n2) This bug occurs only with SXSSF ?", "id": 160472, "time": "2012-07-06T11:00:08Z", "bug_id": 53493, "creation_time": "2012-07-06T11:00:08Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "ag@4js.com", "is_private": false, "text": "(In reply to comment #6)\n> 1) What is bug that don't permit multiple writes of the same workbook object?\nI posted a new bug 53515 \"SXSSFWorkbook.write() fails when called more than once\" (https://issues.apache.org/bugzilla/show_bug.cgi?id=53515) \n> 2) This bug occurs only with SXSSF ?\nYes, the test application provided in bug 53515 shows that it works perfectly for XSSFWorkbook. Besides, if that weren't the case then it should be documented.", "id": 160475, "time": "2012-07-06T14:41:44Z", "bug_id": 53493, "creation_time": "2012-07-06T14:41:44Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 53493, "attachment_id": null, "is_private": false, "id": 162181, "time": "2012-09-14T14:04:05Z", "creator": "yegor@dinom.ru", "creation_time": "2012-09-14T14:04:05Z", "text": "As of r1384784, POI provides a method to explicitly dispose of the temp files associated with the workbook.\n\nCall SXSSFWorkbook.dispose() in the end and you will be good. \n\nYegor"}]
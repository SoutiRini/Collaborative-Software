[{"count": 0, "tags": [], "text": "Hello,\nJava 7 introduced ThreadLocalRandom which has much better performances than using Random as static instance.\nSee:\n\nhttp://docs.oracle.com/javase/tutorial/essential/concurrency/threadlocalrandom.html\nhttp://niklasschlimm.blogspot.fr/2012/01/java-7-how-to-write-really-fast-java.html\n\n\nImplementation is here for Java6 but can we use it with Apache License ?:\nhttps://github.com/codahale/metrics/blob/master/metrics-core/src/main/java/com/yammer/metrics/stats/ThreadLocalRandom.java\n\nOr should we migrate to Java 7 as Java6 will be soon EOL ?", "is_private": false, "id": 164759, "creator": "p.mouawad@ubik-ingenierie.com", "time": "2013-01-21T11:21:59Z", "bug_id": 54453, "creation_time": "2013-01-21T11:21:59Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "epikhinm@gmail.com", "is_private": false, "text": "It's very good idea, but many of people uses jdk version 1.6 and less:(", "id": 166314, "time": "2013-04-02T07:02:40Z", "bug_id": 54453, "creation_time": "2013-04-02T07:02:40Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "is_private": false, "text": "Yes, but if implemented we would backport class, so no problem for JDK6.", "id": 166335, "time": "2013-04-02T19:15:57Z", "bug_id": 54453, "creation_time": "2013-04-02T19:15:57Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 54453, "text": "Hmm. Did you have real tests with bottleneck on Random?", "count": 3, "id": 166342, "time": "2013-04-02T20:29:10Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-04-02T20:29:10Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 54453, "is_private": false, "id": 169480, "attachment_id": null, "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-08-15T21:31:43Z", "time": "2013-08-15T21:31:43Z", "text": "Tests do not show any significant improvement, so closing."}, {"count": 5, "tags": [], "bug_id": 54453, "attachment_id": 32129, "is_private": false, "id": 178610, "time": "2014-10-19T21:19:45Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2014-10-19T21:19:45Z", "text": "Created attachment 32129\nPatch that introduces ThreadLocalRandom"}, {"count": 6, "tags": [], "bug_id": 54453, "text": "Hello, Philippe!\n\nYour patch is good, but why not use \"rand = ThreadLocalRandom.current().nextLong(min, max);\" instead of \"rand = min + (ThreadLocalRandom.current().nextLong(max - min + 1));\" ?\n It's more clearly and readability.\n\nI tested this patch on GNU/Linux with 4 JDK (hs_jdk1.7.0_71, hs_jdk1.8.0_25, hs_jdk1.9.0_ea_b37, zulu_1.8.0_25-8.4.0.1-x86lx64). All works fine.\nI created some benchmarks with 1 dummy sampler (from jmeter-plugins) and 100 ${__Random} functions in him (for more powerful amplification), and tested scalability on machine with large number of cores.\n\nSome time before you removed synchronized block from ${__Random} function https://github.com/apache/jmeter/commit/f03a8bdbe5ba31d9f42adf816887c714cd8c7dce#diff-d388a962eb391a4d5b119abef27b819dL72\n And this commit improves a little bit performance. But scalability is not so good. With large number of threads we have new contention. Previous contention on synchronized block, and new on Math.random block.\n\nAt all tests with large number of threads i have many threads spending on this stacks:\n\n\"Thread Group 1-12\" #33 prio=5 os_prio=0 tid=0x00007fc2cc039800 nid=0x1677 runnable [0x00007fc3290a8000]\n   java.lang.Thread.State: RUNNABLE\n--->    at java.util.Random.next(Random.java:204)\n--->    at java.util.Random.nextDouble(Random.java:532)\n--->    at java.lang.Math.random(Math.java:773)\n        at org.apache.jmeter.functions.Random.execute(Random.java:65)\n        at org.apache.jmeter.engine.util.CompoundVariable.execute(CompoundVariable.java:142)\n        at org.apache.jmeter.engine.util.CompoundVariable.execute(CompoundVariable.java:118)\n        at org.apache.jmeter.testelement.property.FunctionProperty.getStringValue(FunctionProperty.java:101)\n        at org.apache.jmeter.testelement.AbstractTestElement.getPropertyAsString(AbstractTestElement.java:274)\n        at kg.apc.jmeter.samplers.DummySampler.getRequestData(DummySampler.java:111)\n        at kg.apc.jmeter.samplers.DummySampler.sample(DummySampler.java:38)\n        at org.apache.jmeter.threads.JMeterThread.process_sampler(JMeterThread.java:431)\n        at org.apache.jmeter.threads.JMeterThread.run(JMeterThread.java:258)\n        at java.lang.Thread.run(Thread.java:745)\n\nI looked at HotSpot JDK1.8 sources, and found that we have contention on Compare-and-Swap at \"seed\" atomic value.\n\n     198     protected int next(int bits) {\n     199         long oldseed, nextseed;\n     200         AtomicLong seed = this.seed;\n     201         do {\n     202             oldseed = seed.get();\n     203             nextseed = (oldseed * multiplier + addend) & mask;\n---> 204         } while (!seed.compareAndSet(oldseed, nextseed));\n     205         return (int)(nextseed >>> (48 - bits));\n\nWith your ThreadLocal patch we just sharded this atomic seed values. So, throughput scales good:) It's linearly scales with number of threads!\n\nWhat do your think about include this patch into Apache JMeter 2.12?", "id": 179025, "time": "2014-11-10T10:45:36Z", "creator": "epikhinm@gmail.com", "creation_time": "2014-11-10T10:45:36Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": 32201, "bug_id": 54453, "text": "Created attachment 32201\nScalability of ${__Random} function\n\nhttps://docs.google.com/spreadsheets/d/19UrjMXQ8VGzwIiFQ5gpPQe76LqMrqIoGd8_i-_fL2Ss/edit?usp=sharing", "id": 179026, "time": "2014-11-10T10:47:18Z", "creator": "epikhinm@gmail.com", "creation_time": "2014-11-10T10:47:18Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 54453, "attachment_id": 32202, "is_private": false, "id": 179027, "time": "2014-11-10T10:49:12Z", "creator": "epikhinm@gmail.com", "creation_time": "2014-11-10T10:49:12Z", "text": "Created attachment 32202\n${__Random}-benchmark testplan"}, {"count": 9, "tags": [], "bug_id": 54453, "text": "Thanks Mikhail for your tests.\nI will commit it for next 2.13 or maybe 3.0 :-)", "id": 179033, "time": "2014-11-10T13:53:36Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2014-11-10T13:53:36Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 54453, "attachment_id": null, "is_private": false, "id": 179034, "time": "2014-11-10T14:40:33Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2014-11-10T14:40:33Z", "text": "Date: Mon Nov 10 14:39:40 2014\nNew Revision: 1637877\n\nURL: http://svn.apache.org/r1637877\nLog:\nBug 54453 - Performance enhancements : Replace Random by ThreadLocalRandom\nBugzilla Id: 54453\n\nModified:\n    jmeter/trunk/src/core/org/apache/jmeter/util/JMeterVersion.java\n    jmeter/trunk/src/functions/org/apache/jmeter/functions/Random.java\n    jmeter/trunk/xdocs/changes.xml\n    jmeter/trunk/xdocs/changes_history.xml"}, {"count": 11, "tags": [], "bug_id": 54453, "text": "This fix introduced issue, on Jmeter 2.12 function __random(1,1) works, on 2.13 now works. It is because the change is:\n-        long rand = min + (long) (Math.random() * (max - min + 1));\n+        long rand = ThreadLocalRandom.current().nextLong(min, max);\n\nand new version lost \"+1\" boundary shift...", "id": 182420, "attachment_id": null, "creator": "apc4@ya.ru", "creation_time": "2015-04-16T10:51:23Z", "time": "2015-04-16T10:51:23Z", "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 54453, "is_private": false, "id": 182438, "time": "2015-04-16T19:15:47Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2015-04-16T19:15:47Z", "tags": [], "text": "Created 57825 for this."}]
[{"count": 0, "tags": [], "bug_id": 46426, "text": "Created attachment 23041\nPatch to implement the commons-logging interfaces natively in log4j\n\nWith the ongoing discussion on whether or not to implement slf4j inside log4j, it makes IMHO much more sense to integrate the \"other\" popular logging component at the ASF directly into log4j.\n\nThe most popular pattern in libraries is to use either slf + logging framework or commons-logging + logging framework. In the case of \"log4j\" as logging framework, this is slf4j-log4j + log4j or commons-logging + log4j. \n\nThe ongoing discussion tries to alleviate the first situation by integrating slf4j into log4j, thus allowing log4j as a direct replacement for all components that currently use slf4j + logging framework in the log4j case (drop log4j into the libs folder, remove all other slf4j components and logging frameworks. Done).\n\nThis patch aims at doing the same thing with commons-logging. If this patch gets applied by log4j, log4j itself is a drop-in replacement for \"commons-logging + log framework\", redirecting all log messages from components using commons-logging directly to log4j. The combo commons-logging + log4j is probably the most popular combination.\n\nThe widespread critique of commons-logging which tries to select its logging framework at runtime through a combination of reflection and configuration, which led to the design of slf4j could also be silenced as this is a non-nonsense concrete implementation of the classes. \n\nThe patch itself is minimal; the included LogFactory class is purely designed to serve the most common patterns of commons-logging usage, which is \n\nprivate static final Log log = LogFactory.getLog(classname.class);\nprivate static final Log log = LogFactory.getLog(\"mylogger\");\nprotected final Log log = LogFactory.getLog(this.getClass());\nprotected final Log log = LogFactory.getLog(\"mylogger\");\n\nthese four patterns are the vast majority of all commons-logging uses.\n\nPlease apply the attached patch. This bug report is not meant as a joke.\n\nThanks\n    Henning", "id": 123454, "time": "2008-12-20T23:33:59Z", "creator": "hps@intermeta.de", "creation_time": "2008-12-20T23:33:59Z", "is_private": false, "attachment_id": 23041}, {"attachment_id": 23042, "tags": [], "bug_id": 46426, "is_private": false, "count": 1, "id": 123455, "time": "2008-12-21T00:12:48Z", "creator": "hps@intermeta.de", "creation_time": "2008-12-21T00:12:48Z", "text": "Created attachment 23042\nPatch to implement the commons-logging interfaces natively in log4j\n\nBundle plugin must export the interfaces."}, {"count": 2, "tags": [], "bug_id": 46426, "text": "Created attachment 23043\nPatch to implement the commons-logging interfaces natively in log4j\n\nThis improves the patch by adding the org.apache.commons.logging package to the private packages section of the MANIFEST, thus keeping this version of log4j to be OSGI compatible.", "id": 123456, "time": "2008-12-21T01:44:52Z", "creator": "hps@intermeta.de", "creation_time": "2008-12-21T01:44:52Z", "is_private": false, "attachment_id": 23043}, {"count": 3, "tags": [], "bug_id": 46426, "attachment_id": null, "id": 123476, "time": "2008-12-22T06:51:46Z", "creator": "ceki@apache.org", "creation_time": "2008-12-22T06:51:46Z", "is_private": false, "text": "Hello Henning,\n\nThank you for your proposal. Given that your proposal binds commons-logging's discovery mechanism with log4j, I think in addition to log4j committers, the Apache commons project committers should also be involved in deciding whether to apply this patch or not, as it is likely to have an impact on them as well.\n\nI would also like to note several years ago, prior to the advent of SLF4J, applying your patch would have been inconceivable. "}, {"count": 4, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "text": "Sorry I missed the bug report last year.  Maybe that it was 7 days before my wedding might explain my mind being otherwise occupied.   Just ran across it doing a routine bug sweep.  Surprised that it didn't get more traction when it was reported.\n\nThe patch has a couple of different aspects,\n\n1. Adding Logger.IsErrorEnabled, Logger.IsFatalEnabled, Logger.IsWarnEnabled\n\nInnocuous additional methods on a concrete class.\n\n2. Declaring the Logger implements org.apache.commons.logging.Log and bundling o.a.c.l.Log\n\nI'm uneasy about adding the dependency on Logger without providing the class, don't want to add a new dependency if people are upgrading for unrelated reasons.  However, providing a separate class file would seem likely to result in the potential for mismatched if o.a.log4j.Logger is cast to a o.a.c.Log from a different class loader.\n\n3. Providing a concrete implementation of LogFactory.\n\nI'm uneasy to a log4j.jar that is bundled with some component, but not actually used might disrupt a generic LogFactory that is dispatching to some other logging framework.\n\nMy gut is it might be better for log4j to conditionally implement o.a.common.Log is it available, but not provide it.   Maybe:\n\no.a.l.Logger gets the three extra methods.  \nCreate another class (CLogger for the rest of the discussion) that extends o.a.l.Logger and implements Log.  \nDefault log4j factory would attempt to create the CLogger's but if they encounter a ClassNotFoundException, they'd create plain Loggers.\nThe Common Logging adapter for log4j could do an instanceof on the loggers returned from log4j and if they supported Log then pass them directly to the caller, otherwise wrap them as previously.\nA hard-coded LoggerFactory wired to log4j could be provided as an extra jar.\n\n\nI'd love for you to update the report with your current thoughts.", "id": 132787, "time": "2009-12-12T15:20:26Z", "bug_id": 46426, "creation_time": "2009-12-12T15:20:26Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 46426, "is_private": false, "count": 5, "id": 132791, "time": "2009-12-13T11:04:36Z", "creator": "hps@intermeta.de", "creation_time": "2009-12-13T11:04:36Z", "text": "Hi Curt,\n\nthe main idea of this patch is to start bridging the gap between the various \"log<xyz>\" implementations. commons-logging was the wrong thing at the right time; these days it seems that slf4j fills the gap nicely. \n\nThis patch is mainly an exercise in \"you can do it, if you really want\", not something that should go in tomorrow.\n\nThanks for considering it.\n\n-h\n\n(In reply to comment #4)\n> Sorry I missed the bug report last year.  Maybe that it was 7 days before my\n> wedding might explain my mind being otherwise occupied.   Just ran across it\n> doing a routine bug sweep.  Surprised that it didn't get more traction when it\n> was reported.\n> \n> The patch has a couple of different aspects,\n> \n> 1. Adding Logger.IsErrorEnabled, Logger.IsFatalEnabled, Logger.IsWarnEnabled\n> \n> Innocuous additional methods on a concrete class.\n> \n> 2. Declaring the Logger implements org.apache.commons.logging.Log and bundling\n> o.a.c.l.Log\n> \n> I'm uneasy about adding the dependency on Logger without providing the class,\n> don't want to add a new dependency if people are upgrading for unrelated\n> reasons.  However, providing a separate class file would seem likely to result\n> in the potential for mismatched if o.a.log4j.Logger is cast to a o.a.c.Log from\n> a different class loader.\n> \n> 3. Providing a concrete implementation of LogFactory.\n> \n> I'm uneasy to a log4j.jar that is bundled with some component, but not actually\n> used might disrupt a generic LogFactory that is dispatching to some other\n> logging framework.\n> \n> My gut is it might be better for log4j to conditionally implement\n> o.a.common.Log is it available, but not provide it.   Maybe:\n> \n> o.a.l.Logger gets the three extra methods.  \n> Create another class (CLogger for the rest of the discussion) that extends\n> o.a.l.Logger and implements Log.  \n> Default log4j factory would attempt to create the CLogger's but if they\n> encounter a ClassNotFoundException, they'd create plain Loggers.\n> The Common Logging adapter for log4j could do an instanceof on the loggers\n> returned from log4j and if they supported Log then pass them directly to the\n> caller, otherwise wrap them as previously.\n> A hard-coded LoggerFactory wired to log4j could be provided as an extra jar.\n> \n> \n> I'd love for you to update the report with your current thoughts."}]
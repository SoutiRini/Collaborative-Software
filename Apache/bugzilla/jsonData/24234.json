[{"count": 0, "tags": [], "bug_id": 24234, "is_private": false, "text": "specifically, trying to substitute \"\\$0\" for \"[.?]\" doesn't seem to work - it is\nnot possible to escape the '\\' because of the logic in subst, so it always\ntreats the $ as a literal (ie you get \"$0\" instead of eg \"\\.\").\n\nalso, is there any way to mark a substring of the regexp as literal (ie don't\ninterpret metachars)?", "id": 46484, "time": "2003-10-29T23:23:33Z", "creator": "cng@agentissoftware.com", "creation_time": "2003-10-29T23:23:33Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 24234, "attachment_id": 8813, "text": "Created attachment 8813\nPatch to allow escaping of '\\' character in substitution string", "id": 46486, "time": "2003-10-30T00:49:13Z", "creator": "cng@agentissoftware.com", "creation_time": "2003-10-30T00:49:13Z", "is_private": false}, {"count": 2, "tags": [], "creator": "cng@agentissoftware.com", "text": "the above patch also has a fix for Bug 22928 (cutting the first two characters).\n i think it is slightly neater than the current fix in RE.java 1.14.", "id": 46487, "time": "2003-10-30T00:51:48Z", "bug_id": 24234, "creation_time": "2003-10-30T00:51:48Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 24234, "attachment_id": null, "is_private": false, "id": 47545, "time": "2003-11-18T13:53:47Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-11-18T13:53:47Z", "text": "Christopher,\n\nPlease use 4 space indent instead of tabs (if you noticed, the rest of the code\ndoes this).\n\nVadim"}, {"count": 4, "tags": [], "bug_id": 24234, "attachment_id": null, "is_private": false, "id": 53207, "time": "2004-02-29T06:27:57Z", "creator": "son@sparc.spb.su", "creation_time": "2004-02-29T06:27:57Z", "text": "Previous suggested fix has some problems with handling escaped \\,\ne.g. it's impossible to write string so it produces one \\ followed by some \nbackreferenced part (i.e. \"\\\\\\$0\" wiil produce \"\\\\<some_text>\", not \"\\<some text>\"\nAlso the patch introduces imcompatibility.\nTo fix these problems I add new REPLACE_WITH_ESCAPES constant and rewrite\nsubst() so it consistently handles escaped characters."}, {"count": 5, "text": "Created attachment 10615\nnew suggested fix", "creator": "son@sparc.spb.su", "attachment_id": 10615, "id": 53208, "time": "2004-02-29T06:28:56Z", "bug_id": 24234, "creation_time": "2004-02-29T06:28:56Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 24234, "attachment_id": null, "is_private": false, "id": 54254, "time": "2004-03-19T06:24:41Z", "creator": "cng@agentissoftware.com", "creation_time": "2004-03-19T06:24:41Z", "text": "i can't reproduce the behaviour you describe with the patch that i wrote.\n\nat least when using string literals inside the code, \"\\\\\\$0\" is not even a valid\nliteral.  \"\\\\\" is a valid escape sequence, but \"\\$\" is not.  if i wanted to\ninclude a \"\\\" before whatever $0 is, u need to use \"\\\\\\\\$0\" which results in\n\"\\<some_text>\".\n\ncan you show me an actual code snippet which causes the error u describe?  also,\nwhat incompatibilities are you talking about?"}, {"count": 7, "tags": [], "creator": "o_sukhodolsky@yahoo.com", "text": "try this:\n        r = new RE(\"[.?]\");\n        actual = r.subst(\".\", \"\\\\\\\\$0\",\n                         RE.REPLACE_BACKREFERENCES);\n        System.err.println(actual);\n        assertEquals(\"Wrong subst() result\", \"\\\\.\", actual);\n\n        actual = r.subst(\".\", \"\\\\\\\\\\\\$0\",\n                         RE.REPLACE_BACKREFERENCES);\n        System.err.println(actual);\n        assertEquals(\"Wrong subst() result\", \"\\\\$0\", actual);\n\nAlso your changes introduce incompatibility.", "id": 54278, "time": "2004-03-19T17:52:07Z", "bug_id": 24234, "creation_time": "2004-03-19T17:52:07Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 24234, "attachment_id": null, "text": "ah, i see what u mean.  bummer.  by incompatabilities, do you mean trying to\nsubst in \"\\\\\" results in an empty string :)?  d'oh.\n\nnice fix, very 'solid', no fudging :).  only thing i would suggest (and perhaps\nthere was a reason taht escapes me) is using ArrayLists rather than Vectors to\navoid the overhead of synchronization (which seems unnecessary here).\n\n", "id": 54359, "time": "2004-03-22T00:36:37Z", "creator": "cng@agentissoftware.com", "creation_time": "2004-03-22T00:36:37Z", "is_private": false}, {"count": 9, "text": "Incompatibility is that now it's possible to escape '\\', but before it's not.\n\nI didn't use ArrayList because I'm not sure what is target version of jdk for\njakarta-regexp (ArrayList was introduced in 1.2)", "bug_id": 24234, "attachment_id": null, "id": 54362, "time": "2004-03-22T04:06:45Z", "creator": "o_sukhodolsky@yahoo.com", "creation_time": "2004-03-22T04:06:45Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 24234, "attachment_id": null, "is_private": false, "id": 54363, "time": "2004-03-22T04:44:59Z", "creator": "cng@agentissoftware.com", "creation_time": "2004-03-22T04:44:59Z", "text": "oic.  thanks for the clarification."}, {"count": 11, "tags": [], "bug_id": 24234, "is_private": false, "text": "I think that patch introduces more confusion than it solves. \\$ without\nREPLACE_WITH_ESCAPES is still escaped - but logic suggests otherwise.\nAdditionally, behavior of escaping $ with \\ is not documented in Javadoc and not\nreflected in the unit test.\n\nBecause this behavior is not documented, and it was introduced recently (in\nprevious release), I suggest to change it (and document in javadoc / unit test).\nI suggest following syntax:\n\nWhen REPLACE_BACKREFERENCES is on:\n  Process all $ as backreferences. No escaping performed at all.\n\nWhen REPLACE_BACKREFERENCES and REPLACE_WITH_ESCAPES both are on:\n  Process all $ as backreferences.\n  Process \\ as escape symbol.\n\nSo, what do you think?\n\nVadim\n", "id": 58199, "time": "2004-05-27T12:03:44Z", "creator": "vgritsenko@apache.org", "creation_time": "2004-05-27T12:03:44Z", "attachment_id": null}]
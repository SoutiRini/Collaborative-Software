[{"count": 0, "tags": [], "bug_id": 55074, "text": "I've tried to use Ant build with <parallel> tasks like this (see below) to imitate High Load for the system:\n\n<target name=\"load-test\">\n\t<parallel>\n\t  <antcall target=\"my-test\"/>\n\t</parallel>\t\n\t<parallel>\n\t  <antcall target=\"my-test\"/>\n\t</parallel>\t\n\t<parallel>\n\t  <antcall target=\"my-test\"/>\n\t</parallel>\t\n\t...\n\t...\n\t...\n\t<parallel>\n\t  <antcall target=\"my-test\"/>\n\t</parallel>\t\n</target>\n\nAfter running this build I sometimes caught an exception:\n\nCaused by: java.util.ConcurrentModificationException\n\tat java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:761)\n\tat java.util.LinkedList$ListItr.next(LinkedList.java:696)\n\tat org.apache.tools.ant.property.LocalPropertyStack.evaluate(LocalPropertyStack.java:96)\n\tat org.apache.tools.ant.property.LocalProperties.evaluate(LocalProperties.java:124)\n\tat org.apache.tools.ant.PropertyHelper.getProperty(PropertyHelper.java:845)\n\tat org.apache.tools.ant.Project.getProperty(Project.java:607)\n\tat org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:374)\n\tat org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\t... 32 more\n\nThe problem is that <antcall> task delegates it call to <ant> task (org.apache.tools.ant.taskdefs.Ant) which has such code in line 374 of its execute method:\n\nString thisAntFile = getProject().getProperty(MagicNames.ANT_FILE);\n\nPropertyHelper uses LocalProperties which by turn uses LocalPropertyStack resolve \"MagicNames.ANT_FILE\" property. The origin of the problem is that LocalPropertyStack uses LinkedList (which is not thread safe) to hold all the properties.\n\nThe simplest solution is to use Collections.synchronizedList(new LinkedList<Object>()) instead of LinkedList", "id": 167716, "time": "2013-06-07T14:43:35Z", "creator": "irudyak@gmail.com", "creation_time": "2013-06-07T14:43:35Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 55074, "attachment_id": null, "id": 180269, "time": "2015-01-12T12:00:04Z", "creator": "hotterd@gmail.com", "creation_time": "2015-01-12T12:00:04Z", "is_private": false, "text": "had the same issue. \n\nAny updates?"}, {"count": 2, "tags": [], "bug_id": 55074, "text": "I investigated into this problem in our user's environment, and found\nthat it was using Ant-contrib's \"forget\" task\n(http://ant-contrib.sourceforge.net/tasks/tasks/forget.html). The task\nsimply created a child thread of main ant thread, and using this new\nthread to run nested ant tasks in background. I think this might be\nthe cause. Below are my observation, can you please review and see if\nit makes sense.\n\nWhile \"parallel\" task provided by ant always makes a new copy of\nLocalPropertyStack for the child thread when it enters the run()\nmethod, the ant-contrib \"forget\" task does not do that. It simply\ncreates a new thread and perform the task using the thread.\n\n==== from Parallel.java ====\n        public void run() {\n            try {\n                LocalProperties.get(getProject()).copy();\n          ....\n\n==== from ForgetTask.java ====\n    public void execute()\n    {\n        Thread t = new Thread(this);\n        t.setDaemon(daemon);\n        t.start();\n    }\n\n    public void run()\n    {\n        super.execute();\n    }\n\nOn the other hand, LocalProperties is an InheritableThreadLocal, which\nmeans the parent thread and child threads are sharing the same\nLocalPropertyTask. In this case, the child thread that runs nested\ntasks is the child of the main Ant thread, thus it actually has the\nsame LocalThreadStack as main ant thread. So this leads to the\nconcurrent issue between main ant thread and child forget tasks\nthread, or between different child threads of \"forget\" tasks.\n\nI also wrote below reproducer to verify above thought.\n\n  <target name=\"run-forget\">\n    <forget>\n      <antcall target=\"job1\" />\n    </forget>\n    <forget>\n      <antcall target=\"job2\" >\n        <param name=\"dummy\" value=\"foo\" />\n      </antcall>\n    </forget>\n  </target>\n\n  <target name=\"job1\">\n      <property name=\"dummy\" value=\"job1\" />\n      <echo message=\"JOB1: dummy=${dummy}\" />\n      <sleep seconds=\"1\" />\n  </target>\n\n  <target name=\"job2\">\n      <property name=\"dummy\" value=\"job2\" />\n      <echo message=\"JOB2: dummy=${dummy}\" />\n  </target>\n\nWhen I call above \"run-forget\" task in a couple times, I get various\nof exceptions quite often.\n\nBut when I use <parallel> to simulate above, I don't get any problem.\nSo it seems that \"forget\" usage was the cause. I guess this task was\nwrote before LocalProperties was introduced, and hadn't been updated\nsince then.", "id": 180618, "time": "2015-01-28T14:10:03Z", "creator": "hotterd@gmail.com", "creation_time": "2015-01-28T14:10:03Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 55074, "text": "As additional context: http://marc.info/?t=142130235000003&r=1&w=2\n\nI agree with your analysis.  But it's not only <forget>, the same thing could happen with other tasks running code that may spawn threads like <java> or <junit> - it's just less likely they will access the properties.\n\nWrapping the list in synchronizedList will not be enough since the class uses the LinkedList API for convenience.  Also addLocal's implementation contains a race-condition right now.\n\nToo bad there is no Concurrent* implementation of Stack or Deque - we'd need a ConcurrentLinkedQueue with LIFO semantics.\n\nI'll add a bunch of manual synchronization.", "id": 180949, "time": "2015-02-11T11:00:50Z", "creator": "bodewig@apache.org", "creation_time": "2015-02-11T11:00:50Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "should be fixed with git commit 1388e37", "attachment_id": null, "id": 180953, "creator": "bodewig@apache.org", "time": "2015-02-11T13:27:13Z", "bug_id": 55074, "creation_time": "2015-02-11T13:27:13Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 25480, "attachment_id": null, "id": 48980, "time": "2003-12-12T15:09:59Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2003-12-12T15:09:59Z", "is_private": false, "text": "This (rather large) patch implements different performance improvements to the \nproperty handling.\n\n- Switched from string based property names to integer enums.\n  Most of the lookups then changed from get(\"font-size\") to\n  get(P_FONT_SIZE) and compound propery lookup changed to\n  get(P_SPACE_AFTER | C_OPTIMUM).\n- Cached the non-contextdep default compound properties in the makers.\n  This caching is similar to what already existed for the base\n  properties.\n- Calculated rel2abs and abs2rel in the property makers at codegen time\n  to avoid string manipulation at runtime.\n- Changed the element lookup in ProperyListBuilder.elementTable from\n  using string keys to using integer enums.\n- Copy the inherited property values from parent fo into the child\n  fo. findProperty() is then no longer recursive.\n\nThis patch is not meant to be applied, but is purely for discussion and \nexperimentation."}, {"count": 1, "tags": [], "bug_id": 25480, "attachment_id": 9538, "id": 48981, "time": "2003-12-12T15:10:57Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2003-12-12T15:10:57Z", "is_private": false, "text": "Created attachment 9538\nThe patch"}, {"count": 2, "tags": [], "bug_id": 25480, "text": "Created attachment 9539\nA new file to placed in src/codegen", "id": 48982, "time": "2003-12-12T15:11:54Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2003-12-12T15:11:54Z", "is_private": false, "attachment_id": 9539}, {"count": 3, "attachment_id": 9540, "bug_id": 25480, "text": "Created attachment 9540\nA new file to placed in src/codegen", "id": 48983, "time": "2003-12-12T15:12:24Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2003-12-12T15:12:24Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "bckfnn@worldonline.dk", "attachment_id": null, "text": "The two new files that I've attached should be called \n   src/codegen/foelements.xml\nand\n   src/codegen/mkpropset.xsl", "id": 48984, "time": "2003-12-12T15:35:51Z", "bug_id": 25480, "creation_time": "2003-12-12T15:35:51Z", "is_private": false}, {"count": 5, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "text": "Yes, switching to integer enums may be upcoming in the near future.  FOP's Alt-\nDesign already relies on them--see its PropNames.java class.\n\nGlen", "id": 48985, "time": "2003-12-12T15:54:39Z", "bug_id": 25480, "creation_time": "2003-12-12T15:54:39Z", "is_private": false}, {"count": 6, "tags": [], "creator": "john@integerservices.no-ip.com", "attachment_id": null, "is_private": false, "id": 49005, "time": "2003-12-12T20:39:24Z", "bug_id": 25480, "creation_time": "2003-12-12T20:39:24Z", "text": "I tested this in a recent copy of Fop HEAD and ran in to a couple of exceptions:\n\nMy test includes the corrections for the FNF problem I reported last week.\n\nThe test I run is from the 'root' directory of the distribution (contains\nbuild.sh) and is as follows:\n\n1) time find test -name \"*.fo\" -print -exec ./test.sh {} \\; 2>test1 1>&2\n\n2) time find test -name \"*.fo\" -print -exec ./test.sh {} \\; 2>test2 1>&2\n\nWhere 'test.sh' contains:\n\n##############################################################################\n#!/bin/sh\n \necho java -Xms100m -Xmx200m -cp\n.:build/fop.jar:lib/avalon-framework-4.1.4.jar:lib/batik.jar:lib/commons-io-dev-20030703.jar\norg.apache.fop.apps.Fop -fo ${1} -pdf /tmp/$$.pdf\njava -Xms100m -Xmx200m -cp\n.:build/fop.jar:lib/avalon-framework-4.1.4.jar:lib/batik.jar:lib/commons-io-dev-20030703.jar\norg.apache.fop.apps.Fop -fo ${1} -pdf /tmp/$$.pdf\n##############################################################################\n\nThe result is close but not perfect. I have attached 'test1' and 'test2' and\nyou may use a diff tool to find the exception. [Most differences are due to the\ndifferent PID no's assigned to the temp PDF files. This approach would be \nimproved if I were to 'ls -l /tmp/$$.pdf' to show the output file sizes.]\n\nThe following exception shows up twice in my tests. \n\n\n> Exception in thread \"main\" java.lang.RuntimeException: Insert into unknown\nslot 175\n>       at org.apache.fop.fo.PropertyList.putSpecified(PropertyList.java:162)\n>       at\norg.apache.fop.fo.PropertyListBuilder.convertAttributeToProperty(PropertyListBuilder.java:268)\n>       at\norg.apache.fop.fo.PropertyListBuilder.makeList(PropertyListBuilder.java:217)\n>       at org.apache.fop.fo.FObj.handleAttrs(FObj.java:156)\n>       at org.apache.fop.fo.flow.BlockContainer.handleAttrs(BlockContainer.java:95)\n>       at org.apache.fop.fo.FOTreeBuilder.startElement(FOTreeBuilder.java:267)\n>       at org.apache.xerces.parsers.AbstractSAXParser.startElement(Unknown Source)\n>       at\norg.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)\n>       at\norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown\nSource)\n>       at\norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)\n>       at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n>       at org.apache.xerces.parsers.DTDConfiguration.parse(Unknown Source)\n>       at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n>       at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)\n\n"}, {"count": 7, "tags": [], "bug_id": 25480, "text": "Created attachment 9550\nLog files of testing without (test1) and with (test2) proposed changes.", "id": 49006, "time": "2003-12-12T20:48:32Z", "creator": "john@integerservices.no-ip.com", "creation_time": "2003-12-12T20:48:32Z", "is_private": false, "attachment_id": 9550}, {"count": 8, "attachment_id": null, "bug_id": 25480, "text": "Attachment 9550 was named 'test.tar.gz' in case you can't grok it. \nUse Linux tar zxf or gunzip and tar to unpack it.\n\nI shall attach 'tests.zip' for those of you running tar-disadvantaged systems.", "id": 49008, "time": "2003-12-12T20:54:01Z", "creator": "john@integerservices.no-ip.com", "creation_time": "2003-12-12T20:54:01Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 25480, "attachment_id": 9551, "id": 49009, "time": "2003-12-12T20:57:29Z", "creator": "john@integerservices.no-ip.com", "creation_time": "2003-12-12T20:57:29Z", "is_private": false, "text": "Created attachment 9551\nTest logs test1 (without patch) and test2 (with patch) in a ZIP file (tests.zip)"}, {"count": 10, "tags": [], "creator": "bckfnn@worldonline.dk", "attachment_id": null, "text": "John, The foelements.xml that maps properties to elements did not include the \nshorthand properties. This is fixed now.", "id": 49048, "time": "2003-12-13T07:08:05Z", "bug_id": 25480, "creation_time": "2003-12-13T07:08:05Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 25480, "attachment_id": 9553, "id": 49049, "time": "2003-12-13T07:08:46Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2003-12-13T07:08:46Z", "is_private": false, "text": "Created attachment 9553\nNew version of src\\codegen\\foelements.xml"}, {"count": 12, "tags": [], "bug_id": 25480, "attachment_id": null, "id": 49088, "time": "2003-12-14T02:24:40Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-12-14T02:24:40Z", "is_private": false, "text": "Looking at your patch currently...\n\nGlen"}, {"count": 13, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "is_private": false, "id": 49109, "time": "2003-12-14T23:02:19Z", "bug_id": 25480, "creation_time": "2003-12-14T23:02:19Z", "text": "Finn,\n\nThe property constants file that your version will generate defines three \nconstants as follows:\n\n    // Masks\n    int COMPOUND_SHIFT = 9;\n    int PROPERTY_MASK = (1 &lt;&lt; COMPOUND_SHIFT)-1;\n    int COMPOUND_MASK = ~PROPERTY_MASK;\n\nWe see them at work later in the Constants file w.r.t. compound properties:\n\n    int C_BLOCK_PROGRESSION_DIRECTION = 1 << COMPOUND_SHIFT;\n    int C_CONDITIONALITY = 2 << COMPOUND_SHIFT;\n    int C_INLINE_PROGRESSION_DIRECTION = 3 << COMPOUND_SHIFT;\n    int C_LENGTH = 4 << COMPOUND_SHIFT;\n    int C_MAXIMUM = 5 << COMPOUND_SHIFT;\n    int C_MINIMUM = 6 << COMPOUND_SHIFT;\n\nIf I recall my C programming days correctly, I believe you're doing a bitwise \nshift 9 digits to the left for these constants--what's the benefit of shifting \nthese compound constant values--can you point me to a place in your patch where \nyou take advantage of this shifting (e.g., masking, quick calculations of \nanything, etc.)?  I will add comments accordingly.\n\nThanks,\nGlen"}, {"count": 14, "tags": [], "bug_id": 25480, "attachment_id": null, "id": 49113, "time": "2003-12-15T01:25:32Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-12-15T01:25:32Z", "is_private": false, "text": "I brought in the Constants information for a start, and will be continuing to \nanalyze the rest of your patch as well as Alt-Design until we're completely \nover to integer constants.  Thanks for the fine work!\n\nGlen\n"}, {"count": 15, "attachment_id": null, "bug_id": 25480, "text": "The compound properties are shifted so that both base and compound can be \nstored into a single int. In PropertyList there are several cases where the \nbase and the compound part are unmasked. This was just one possible way keeping \nthe HEAD design where the compound properties are stored as sub components.\n\nWithout having looked at it is detail, I like the alt.design approach better, \nwith its flat property space.\n\nfinn", "id": 49118, "time": "2003-12-15T06:58:32Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2003-12-15T06:58:32Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "bug_id": 25480, "attachment_id": null, "id": 49156, "time": "2003-12-15T21:59:49Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-12-15T21:59:49Z", "is_private": false, "text": "Finn,\n\nThanks for your explanation.\n\nMore questions--I've just generated the PropSets.java, but am not sure what \nthis is needed for.\n\n1.)  As Alt-Design does (but for different objects), you're creating many \nBitSets that define the properties that are relevant for each FO--but I can't \nsee these BitSets in use anywhere within your patch.  Am I missing those \nlocations where you are employing these for use, or are you creating these with \nthe knowledge that they will be used later?  If the latter, how are you \nanticipating their usage?\n\n2.)  What is the purpose of the makeSparseIndices() method in PropSets?\n\n3.)  What is the purpose of the mergeContent() method in PropSets?\n\nThanks,\nGlen"}, {"text": "The instances of java.util.BitSet that are created for each fo:element in \nPropSets are only used for collecting the properties of that element and the \nproperties for all its child elements. The list of child-element properties are \ncopied to the parent element by calling the mergeProperties() method repeatedly \nuntil no more properties can trickle upwards to the root element. (I really \nwanted to calculate the set of properties that can be applied to an element \nstaticly by the .xsl instead, but I couldn't quite figure out how to du that).\n\nAs an example, the BitSet for an element without any child element consist of \njust the list of properties that apply to the element, while the BitSet for \nfo:root consists of all the properties from the xsl-fo specification.\n\nAfter the completed BitSet's have been calculated, the BitSet are turned into a \narray of shorts by makeSpareIndices(). The array are always PROPERTY_COUNT long \nand only the slots with supported properties have a non-zero value.\n\nFor fo:root there is no packing, so all element \"indices[n] = n\".\nFor some other element that support 4 properties, ihe indices array might look \nlike this:\n\n   indices[0] = 5 // The number one properties that apply +1\n   indices[2] = 1\n   indices[10] = 2\n   indices[142] = 3\n   indices[202] = 4\n\nwhere the rest of the array has 0 values. (It is important that all the \nproperty identifiers in Constants.java have non-zero values).\n\nThe short[] arrays (one for each element type) are stored in the static \nPropSets.mapping and can be retrieved by getPropertySet(elementId).\nThis method is called from the ctor of PropertyList().\n\nThe sparse indices array are then used as an extra level of indirection when \naccessing the PropertyList.values array.\n\nAll of this business with sparse indices and PropSets.jacva is only a memory \noptimization. Allocating a full array \n  values = new Property[PROPERTY_COUNT]\nin PropertyList would work just as fine, but would use more memory.\n", "tags": [], "creator": "bckfnn@worldonline.dk", "is_private": false, "count": 17, "id": 49181, "time": "2003-12-16T08:15:47Z", "bug_id": 25480, "creation_time": "2003-12-16T08:15:47Z", "attachment_id": null}, {"text": "Excellent...Thanks for the explanation!  I'll look over it tonight.\n\nGlen", "tags": [], "creator": "glenmazza@yahoo.com", "is_private": false, "count": 18, "id": 49193, "time": "2003-12-16T12:14:34Z", "bug_id": 25480, "creation_time": "2003-12-16T12:14:34Z", "attachment_id": null}, {"count": 19, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "is_private": false, "id": 49571, "time": "2003-12-22T22:01:56Z", "bug_id": 25480, "creation_time": "2003-12-22T22:01:56Z", "text": "Finn, \n\nQuestion on the FOPropertyMapping.java class--from your changes, it is \ndutifully filling up the s_htGeneric (property) HashMap from its fo-property-\nmapping.xsl generation:\n\n    s_htGeneric[PR_SOURCE_DOCUMENT] =SourceDocumentMaker.maker\n(PR_SOURCE_DOCUMENT);\n    s_htGeneric[PR_ROLE] =RoleMaker.maker(PR_ROLE);\n    s_htGeneric[PR_ABSOLUTE_POSITION] =AbsolutePositionMaker.maker\n(PR_ABSOLUTE_POSITION);\n    ....\n\nI'm already using it.  But there is an s_htElementLists HashMap (which I \nhaven't converted to yet) in this class that is *not* being populated here--\nyou've created accessors for it, etc., but it doesn't seem to get populated \nanywhere.  (Actually, the same goes with its predecessor that I'm still using.) \nWhere does this HashMap get filled?\n\nThanks,\nGlen"}, {"count": 20, "tags": [], "bug_id": 25480, "attachment_id": null, "id": 49573, "time": "2003-12-22T22:18:45Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2003-12-22T22:18:45Z", "is_private": false, "text": "It does not get filled at all.\n\nIt is there to support an AFAICT unused feature in the foproperties.xml file \nwhich makes it possible to specify special property makers for each fo:element.\n\nTake a look at the comment for 'generic-property-list' in \nsrc/codegen/properties.dtd where the feature is described.\n\nI did not port the codegeneration of this feature to int indexes, so it still \nuses a HashMap in my patch.\n\nregards,\nfinn"}, {"count": 21, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "is_private": false, "id": 49577, "time": "2003-12-23T03:39:04Z", "bug_id": 25480, "creation_time": "2003-12-23T03:39:04Z", "text": "Finn,\n\nOops, sorry--My recent check-in of property-sets.xsl--I forgot to give you \ncredit for that work.  It was basically a renaming of your mkpropset.xsl, with \na few trivial cosmetic changes.\n\nGlen\n"}, {"count": 22, "tags": [], "creator": "glenmazza@yahoo.com", "is_private": false, "text": "<Q>\n\"It does not get filled at all.\n\nIt is there to support an AFAICT unused feature in the foproperties.xml file \nwhich makes it possible to specify special property makers for each fo:element.\"\n</Q>\n\nTo lesson confusion, I went ahead and removed it from FObj.java and \nPropertyList.java -- we can always bring it back should it become of use in the \nfuture.\n\nThanks,\nGlen", "id": 49651, "time": "2003-12-24T00:08:48Z", "bug_id": 25480, "creation_time": "2003-12-24T00:08:48Z", "attachment_id": null}, {"count": 23, "attachment_id": null, "bug_id": 25480, "is_private": false, "id": 50348, "time": "2004-01-10T01:07:03Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-01-10T01:07:03Z", "tags": [], "text": "Finn,\n\nI'm now looking at the changes to PropertySets.java (already applied) and \nPropertyList.java (only partly so) and have a few questions:\n\n1.) For the new PropertyList constructor (in the patch), you appear to be \nduplicating the element ID argument, once as \"el\", the other time \nas \"elementId\"--just to confirm, they are referring to the same thing (and \nhence one of them can be removed)?\n\n----------------\n\n2.) In PropertySets.java (already applied), method makeSparseIndices, you \ndefine indices[0] as: \n\nindices[0] = (short) (set.cardinality() + 1);\n\nLater, in PropertyList, you initialize the values array as follows:\n\nthis.values = new Property[indices[0]];\n\nI think we can then just use set.cardinality() in makeSparseIndices(), \ncorrect?  (i.e., leave out the +1).\n\n------------------\n\n3.) PropertySets.java defines those properties which are valid for each FO--in \nPropertyList, the proposed implementation then uses that information to limit \nthe properties that can be assigned to an FObj (i.e., only those defined as \nvalid for it.)  Am I correct here on this point?\n\nIf so, we may need to expand the \"valid\" properties to include the inheritable \nones.  As Peter notes on the Alt-Design pages [1], in 5.1.4 of the Spec [2]:  \n\ngives these two statements:\n\n\"The inheritable properties can be placed on any formatting object.\"\n\n\"Hence there is always a specified value defined for every inheritable property \nfor every formatting object.\"\n\n[1] http://xml.apache.org/fop/design/alt.design/properties/introduction.html\n[2] http://www.w3.org/TR/2001/REC-xsl-20011015/slice5.html#inheritance\n\nDo we need to expand then the property sets for each FO to include the \ninheritable properties (you may already have done so, I'm not sure if those \nwere included)--and do we also need to somehow additionally qualify *those* \nproperties as \"valid for the FO but not directly relevant for it\"?  (I \nthink \"yes\" for the first question, \"no\" for the second.)\n\n------------------------------------\n\n4.)  Finally, I'm too far removed from my C programming days to understand the \nmath here:\n\nIn the PropertyList constructor, you code this:\n\n   this.specified = new int[(indices[0] >> 5) + 1];  \n\n(where indices[0] defines the number of properties valid for the FObj)\n\nWhy the bitshifting 5 to the right?  What does this accomplish--what is this \nshorthand for?\n\n\nalso, in putSpecified(int idx, Property value), you code this:\n\n   specified[i >> 5] |= 1 << (i & 31);\n\nI'm not clear what this is doing either.  What does putSpecified() do, and \nwhat's the point of the i & 31 and the Or'ing?  \n\nSorry for the long post--feel free to move this to FOP-DEV if easier for you to \nrespond.\n\nThanks as always for your help!\nGlen"}, {"count": 24, "tags": [], "creator": "bckfnn@worldonline.dk", "is_private": false, "text": "Further comments and discussions here:\n\n  http://marc.theaimsgroup.com/?l=fop-dev&m=107369978306013&w=2\n  http://marc.theaimsgroup.com/?l=fop-dev&m=107374163230526&w=2", "id": 50356, "time": "2004-01-10T13:45:10Z", "bug_id": 25480, "creation_time": "2004-01-10T13:45:10Z", "attachment_id": null}, {"count": 25, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "is_private": false, "id": 50503, "time": "2004-01-14T00:05:21Z", "bug_id": 25480, "creation_time": "2004-01-14T00:05:21Z", "text": "OK, Finn, I just added in the inherit[] (inheritableProperties[]) array in \nPropertyList.  Also, converted what appears to be the last of the properties (I \nread through the whole patch again to confirm.)  We decided earlier for the \ntime being to leave out the FO element conversions due to lack of use, so I \nwill mark this patch as \"Fixed\".\n\nIf you see me missing anything, or would otherwise still like to keep it open, \ngo ahead and do so.\n\nThanks!\nGlen\n"}, {"count": 26, "tags": [], "bug_id": 25480, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 156099, "time": "2012-04-01T06:58:18Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:58:18Z", "is_private": false, "attachment_id": null}]
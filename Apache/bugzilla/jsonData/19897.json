[{"count": 0, "tags": [], "bug_id": 19897, "attachment_id": null, "is_private": false, "id": 37132, "time": "2003-05-13T17:07:08Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-13T17:07:08Z", "text": "This patch implements some of the changes discussed in\nthe antlib discussion, http://marc.theaimsgroup.com/?t=105138763000003&r=1&w=2\n\nThis patch adds 4 new features (the code is interrelated,\nbut may be split).\n\n  * adapter attribute added to typedef\n  * add(Type) method added to introspection rules\n  * typedef can read an xml defintion file\n  * namespace support for xml defintions (antlib:)\n\nSo one can do\n<project xmlns:acme=\"org.acme.anttasks\">\n   <acme:hello>\n      <path path=\"build.xml\"/>\n   </acme:hello>\n</project>\n\nwhere the class path contains the org/acme/anttasks/antlib.xml\nand the antlib.xml file contains:\n\n<antlib>\n   <typedef name=\"hello\" classname=\"org.acme.anttasks.Hello\"/>\n</andlib>\n\nThe patch file is a tared gzip file. and contains\na patch file, and a set of new files.\nsee the \"adaptor.make\" file in the tar file for\nthe list of changed files and the new files.\nSee the unit test \"src/etc/testcases/taskdefs/typedef2.xml\"\nfor sample usages.\n\nToDo: add in support for ant-type polyizm and addConfigured(Type).\n      also more error checking and unit tests."}, {"count": 1, "text": "Created attachment 6352\nTar.gz file containg patch and new files", "creator": "peter.reilly@corvil.com", "attachment_id": 6352, "id": 37133, "time": "2003-05-13T17:08:18Z", "bug_id": 19897, "creation_time": "2003-05-13T17:08:18Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 19897, "attachment_id": null, "id": 37157, "creation_time": "2003-05-14T07:04:56Z", "time": "2003-05-14T07:04:56Z", "creator": "levylambert@tiscali-dsl.de", "text": "I am having a look at your contribution.", "is_private": false}, {"count": 3, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": 6382, "is_private": false, "id": 37324, "time": "2003-05-16T13:41:32Z", "bug_id": 19897, "creation_time": "2003-05-16T13:41:32Z", "text": "Created attachment 6382\nUpdated patch tar.gz file - provides ant-type, addconfigured"}, {"attachment_id": null, "tags": [], "creator": "peter.reilly@corvil.com", "is_private": false, "count": 4, "id": 37325, "time": "2003-05-16T14:02:29Z", "bug_id": 19897, "creation_time": "2003-05-16T14:02:29Z", "text": "I have updated the patch. The file adaptor.make in the tar.gz file\ncontains the list of new files and changed files.\nThis patch replaces the previous patch.\n\nAdded to the patch:\n\n   * addConfigured(Type) method added to introspection rules\n   * polymorphic type handling (using ant-type magic attribute\n     or a {ant:polymorhic, type} attribute\n   * get ant to ignore namespace uri it does not handle\n   * get Condition, FilterChain and TokenFilter to use\n     the add(Type) method\n   * unit tests for above\n\nSome bugs were fixed.\n\nPH2 now handles three uri's:\n\n   ant:core        - the default namespace uri. This is where the\n                     current elements and attributes reside.\n   ant:polymorphic - this contains one attribute \"type\" used to\n                     substitute a type for add[Configured]Name(Class)\n   antlib:<package> - this is a name space for thirdparty libraries\n\nOther uris are ignored.\nExample:\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:ant=\"ant:core\"\n      xmlns:poly=\"ant:polymorhic\"\n      xmlns:antcontrib=\"antlib:net.sf.antcontrib\"\n      xmlns:acme=\"antlib:org.acme\">\n  <body>\n    <h1>Ant Project embedded</h1>\n    <project xmlns=\"ant:core\">\n       <target name=\"test\">\n          <antcontrib:if>\n            <and>\n                <available ../>\n                <acme:urlready url=\"...\"/>\n            </and>\n            <then>\n              <copy todir=\"classes\">\n                <fileset poly:type=\"acme:urlfileset\" ../>\n              </copy>\n             </then>\n          </antcontrib>\n       </target>\n     </project>\n    </body>\n<html>\n "}, {"count": 5, "tags": [], "bug_id": 19897, "attachment_id": null, "is_private": false, "id": 37365, "time": "2003-05-16T22:02:10Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-16T22:02:10Z", "text": "*** Bug 19446 has been marked as a duplicate of this bug. ***"}, {"count": 6, "tags": [], "bug_id": 19897, "attachment_id": 6391, "id": 37366, "time": "2003-05-16T22:04:39Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-16T22:04:39Z", "is_private": false, "text": "Created attachment 6391\nfix up last patch + roll in rest of 19446 - tar.gz file"}, {"count": 7, "tags": [], "bug_id": 19897, "attachment_id": null, "is_private": false, "id": 37367, "time": "2003-05-16T22:14:01Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-16T22:14:01Z", "text": "I had to make a new patch as the previous patch contained\na couple of errors.\n\nIncluded in the new patch is add() to Path and Selector.\n"}, {"count": 8, "tags": [], "bug_id": 19897, "attachment_id": 6452, "is_private": false, "id": 37580, "time": "2003-05-22T08:30:20Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-22T08:30:20Z", "text": "Created attachment 6452\ntar gz file containing add(Type) patch and unit test"}, {"count": 9, "tags": [], "bug_id": 19897, "attachment_id": null, "is_private": false, "id": 37581, "time": "2003-05-22T08:42:26Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-22T08:42:26Z", "text": "patch 6452 is the first step in decoupling the overall patch\nThe patch is in tar.gz format.\nIt adds add(Type) to the introspection rules and adds the\nmethod to condition, filterchain, path, selector and tokenfilter.\nNote that the implementation of add(Type) in IntrospectionHelper.java\nwill change as addConfigured(Type), polymorphic support and role support\nis added to IH (and UE, RC, CH).\n\nThe tar.gz contains four files:\n   * add.make - the script used to generate the patch + comments\n   * add.diff - the patch file produced as a result of cvs diff -c <filelist>\n   * addtype.xml -  unit test build script\n   * AddTypeTest.java - unit test for addtype\n\n\n* comments in  add.make *\n\nThis patch adds the add(Type) to the introspection rules and\nupdates ConditionBase, FilterChain, Path, SelectorBase and TokenFilter\nto use the new introspection rule.\n\nChanged Files: the diff is contains in the file\n\"add.diff\" using cvs diff -c <changed files>\n\n========================================= \n=   Changed Files  \n========================================= \n\nsrc/main/org/apache/tools/ant/ProjectHelper.java\n  add two methods used by introspection - getComponentClass and\n  createComponent\n\nsrc/main/org/apache/tools/ant/IntrospectionHelper.java\n  implement addTypeMethods add(Type)\n  \nsrc/main/org/apache/tools/ant/filters/TokenFilter.java\n   get TokenFilter to use add(Type) instead of dynamicconfigurator\n   make all nested classes ProjectComponents\n\nsrc/main/org/apache/tools/ant/taskdefs/Delete.java\n   implement an add(FileSelector) method\n\nsrc/main/org/apache/tools/ant/taskdefs/MatchingTask.java\n   implement an add(FileSelector) method\n\nsrc/main/org/apache/tools/ant/taskdefs/condition/ConditionBase.java\n   add an add(Condition) method to demostrate use of add(Type) method\n\nsrc/main/org/apache/tools/ant/types/AbstractFileSet.java\n   implement add(FileSelector)\n\nsrc/main/org/apache/tools/ant/types/FilterChain.java\n   use add(ChainableReader) instead of DynamicConfigurator\n\nsrc/main/org/apache/tools/ant/types/Path.java\n  add an add(Path) method\n\nsrc/main/org/apache/tools/ant/types/optional/ScriptFilter.java\n  remove set/get project as parent imlements them now\n\nsrc/main/org/apache/tools/ant/types/selectors/BaseSelectorContainer.java\n  implement the add(FileSelector) method\n\nsrc/main/org/apache/tools/ant/types/selectors/SelectorContainer.java\n  add an add(FileSelector) method\n\n\n========================================= \n=   New Files  \n========================================= \n\nsrc/etc/testcases/types/addtype.xml\n  testcases for addtype\n\nsrc/testcases/org/apache/tools/ant/types/AddTypeTest.java\n  test cases for add type\n\n\n\n"}, {"count": 10, "tags": [], "text": "Created attachment 6453\nupdated tar gz patch for add(Type) after Stefan's review", "attachment_id": 6453, "id": 37583, "creation_time": "2003-05-22T10:01:19Z", "time": "2003-05-22T10:01:19Z", "creator": "peter.reilly@corvil.com", "bug_id": 19897, "is_private": false}, {"count": 11, "tags": [], "bug_id": 19897, "attachment_id": null, "is_private": false, "id": 37914, "time": "2003-05-28T12:07:17Z", "creator": "umagesh@apache.org", "creation_time": "2003-05-28T12:07:17Z", "text": "Please also mark the add* methods that are no longer needed as deprecated -\neven if we don't end up removing them, we can at least discourage their use."}, {"count": 12, "tags": [], "bug_id": 19897, "attachment_id": null, "id": 37929, "time": "2003-05-28T17:04:32Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-28T17:04:32Z", "is_private": false, "text": "committed the add(type) patch.\nThis actually does not make any of the current add* methods deprecated as there\nis currently no datatypes for the various classes used in the add* methods,\n(except maybe for addFileSet) and there is no role support to allow tags\nlike \"and\" to be used in conditions and selectors.\n\nThe next patch will be the AntDataDefinition patch.\n"}, {"attachment_id": 6554, "tags": [], "bug_id": 19897, "is_private": false, "count": 13, "id": 37977, "time": "2003-05-29T13:53:01Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-29T13:53:01Z", "text": "Created attachment 6554\nanttypedefinion and onerror - tar.gz file"}, {"count": 14, "tags": [], "bug_id": 19897, "attachment_id": null, "is_private": false, "id": 37978, "time": "2003-05-29T13:56:39Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-29T13:56:39Z", "text": "patch 6554 is the second step in decoupling the overall patch\nThe patch is in tar.gz format.\n\nThis patch adds the AntTypeDefinition table to replace the separate\ntables for tasks and types.\n\nFrom a script point of view two new attribute are added to\ntypedef to define an adapter and an adaptto attribute.\n\nAlso included is the onerror attribute to typedef.\n\nChanged Files: the diff is contains in the file\n\"adapter.diff\" using cvs diff -c <changed files>\n\n========================================= \n=   Changed Files  \n========================================= \nables for tasks and types.\n\nFrom a script point of view two new attribute are added to\ntypedef to define an adapter and an adaptto attribute.\n\nAlso included is the onerror attribute to typedef.\n\ndocs/manual/CoreTasks/typedef.html\n  update description for the new attributes\n\ndocs/manual/CoreTasks/taskdef.html\n  update to refer to typedef for attributes\n\nsrc/main/org/apache/tools/ant/ComponentHelper.java\n  extensive mods for the new type class\n\nsrc/main/org/apache/tools/ant/Project.java\n  add #initSubProject - calls ComponentHelper#initSubProject\n\nsrc/main/org/apache/tools/ant/ProjectHelper.java\n  change TaskAdapter to TypeAdapter\n\nsrc/main/org/apache/tools/ant/RuntimeConfigurable.java\n  Change TaskAdapter to TypeAdapter\n\nsrc/main/org/apache/tools/ant/TaskAdapter.java \\\n  implement TypeAdapter\n  add #checkProjectClass\n\nsrc/main/org/apache/tools/ant/UnknownElement.java\n  use TypeAdapter instead of  TaskAdapter\n\nsrc/main/org/apache/tools/ant/helper/ProjectHelperImpl.java \n   use TypeAdapter instead of TaskAdapter\n\nsrc/main/org/apache/tools/ant/taskdefs/Ant.java\n   remove defining \"property\"\n   call getProject().initSubProject() instead of\n   coping the tasks and types directly\n   \nsrc/main/org/apache/tools/ant/taskdefs/Definer.java\n   lots of changes\n\nsrc/main/org/apache/tools/ant/taskdefs/Taskdef.java\n   remove addDefintion() method\n   set adaptor class and adaptTo class\n   derive from typedef and not from definer to show\n   that taskdef is simply a form of typedef\n\nsrc/main/org/apache/tools/ant/taskdefs/Typedef.java \n   remove addDefinition() method, Typedef is now\n   simply Definer.java\n\nsrc/testcases/org/apache/tools/ant/ProjectTest.java\n   change getTaskDefinitions() to getDataTypeDefinitions();\n   the datatype map now contains all the tasks as well as the\n   datatypes\n\n========================================= \n=   New Files  \n========================================= \n\nsrc/etc/testcases/taskdefs/typeadapter.xml\n  testcases file\n\nsrc/main/org/apache/tools/ant/AntTypeDefinition.java\n  a class that contains all the information of a type -\n  and its adapter class if present\n\nsrc/main/org/apache/tools/ant/TypeAdapter.java\n  the interface that Adapter classes should implement\n\nsrc/testcases/org/apache/tools/ant/taskdefs/TypeAdapterTest.java\n  The test cases\n\n\n\n\n"}, {"count": 15, "tags": [], "bug_id": 19897, "attachment_id": null, "id": 37979, "time": "2003-05-29T13:59:26Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-05-29T13:59:26Z", "is_private": false, "text": "regarding deprecation - from an Ant Api point of view the\nadd*() methods should be decrecated - the add(type) methods\nshould be used instead. The add*() methods will remain for\nant introspection.\nPeter."}, {"count": 16, "tags": [], "text": "It would be good to get some feedback from Conor McNeill and from Costin \nManolache concerning your latest patch.\nMy personal +1 with the following remarks :\n\nJavaDoc comments in TypeAdapter.java\n-------------------------------------\nsetProxy(Object o)\ninstead of : \n\"Sets the target object to proxy for.\"\nwould prefer\n\"Sets the proxy object, whose methods are going to be\ninvoked by ant\"\n\nSimilarly for getProxy\n\"Returns the target object being proxied.\" does not mean anything to me.\nI would suggest simply\n\"Returns the proxy object\"\n\nName of field \"assignableClass\" in AntTypeDefinition.java\nwould it not be better to call it also \"adaptToClass\", so that it matches with \nDefiner.java ?\nThis line of your code :                 def.setAssignableClass(adaptToClass);\nline 446 of Definer.java suggests that assignableClass is the same as \nadaptToClass, or did I miss something ?\n\nI also wonder whether assignableClass and adaptToClass are not both synonyms for \nroleClass ? \n\nApart from these 2 remarks, I personally would be very happy to see your code \ncommitted, because it is certainly going to add a lot of value to ant, and I am \neager to see ant 1.6 rolling.\n", "attachment_id": null, "id": 38324, "creation_time": "2003-06-04T09:24:42Z", "time": "2003-06-04T09:24:42Z", "creator": "levylambert@tiscali-dsl.de", "bug_id": 19897, "is_private": false}, {"count": 17, "tags": [], "bug_id": 19897, "attachment_id": 6762, "id": 38720, "time": "2003-06-11T10:18:26Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-06-11T10:18:26Z", "is_private": false, "text": "Created attachment 6762\nUpdated patch(tar.gz) with antoine's suggestions"}, {"count": 18, "tags": [], "text": "Created attachment 7088\ntar.gz file contains patches to implement ant-type polymorhic attribute", "attachment_id": 7088, "id": 39944, "creator": "peter.reilly@corvil.com", "time": "2003-07-03T17:15:41Z", "bug_id": 19897, "creation_time": "2003-07-03T17:15:41Z", "is_private": false}, {"count": 19, "tags": [], "text": "Patch 7088 is the third step in decoupling the overall patch\nThe patch is in tar.gz format.\n\n\nThis patch implements:\n    - addConfigured(Type) to introspection rules\n    - ant-type magic polymorhic attribute\n    - allow types that have Project as a constructor to\n      be used in addName(Type) and addConfiguredName(Type) methods\n    - allow addName and addConfiguredName methods to have higher\n      presedence that createName() methods.\n\nChanged Files: the diff is contains in the file\n\"poly.diff\" using cvs diff -u <changed files>\n\n========================================= \n=   Changed Files  \n========================================= \n\nsrc/main/org/apache/tools/ant/IntrospectionHelper.java\n  - combine setter and creater objects\n  - return a creator object to create and set the object\n  - poly type changes\nsrc/main/org/apache/tools/ant/RuntimeConfigurable.java \n  - use ant-type attribute\n  - use creator.store\nsrc/main/org/apache/tools/ant/UnknownElement.java\n  - call IntrospectionHelper#getElementCreator\n   \n========================================= \n=   New Files  \n========================================= \n\nsrc/etc/testcases/types/poly.xml\n   test cases for ant-type polymorphic\nsrc/testcases/org/apache/tools/ant/types/PolyTest.java\n   test cases for ant-type polymorphic\n\n", "attachment_id": null, "id": 39945, "creation_time": "2003-07-03T17:18:36Z", "time": "2003-07-03T17:18:36Z", "creator": "peter.reilly@corvil.com", "bug_id": 19897, "is_private": false}, {"count": 20, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": 7203, "is_private": false, "id": 40314, "time": "2003-07-10T08:35:52Z", "bug_id": 19897, "creation_time": "2003-07-10T08:35:52Z", "text": "Created attachment 7203\nrefresh of poly.tar.gz against current cvs"}, {"attachment_id": 7204, "tags": [], "bug_id": 19897, "is_private": false, "count": 21, "id": 40315, "time": "2003-07-10T08:37:36Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-07-10T08:37:36Z", "text": "Created attachment 7204\ntar.gz file containing patch for antlib support from typedef"}, {"count": 22, "tags": [], "text": "Hi I have refreshed the poly.tar.gz patch against the\ncurrent cvs as there has been a number of changes in ant cvs\non the affected files - attachment 7203.\n\nI have made another patch for the fourth step in decoupling\nthe overall patch.\nThis adds (finally) the ability to use an xml formatted file\n- antlib format to define tasks and types.\n\nIt is slightly different from the original implementation -\nthe Antlib definition task is not now available from a build.xml script\nthis will allow the antlib name to used as a build.xml task, and\nalso means the antlib definition task does not have to check\nthat it is called correctly.\n\nThe second difference is that Antlib.java implements TaskContainer\nand allows any task/type to be included in the antlib file.\nThe main reason for this is to allow other Definers to be defined\nand used in the antlib file.\n========================================= \n=   Changed Files  \n========================================= \ndocs/manual/CoreTasks/typedef.html\n   update and reorganize describe antlib here\nsrc/main/org/apache/tools/ant/taskdefs/Definer.java\n   add format attribute\n   add call to load antlib if format is xml\nsrc/main/org/apache/tools/ant/helper/ProjectHelper2.java\n   add support to read in an ant task/datatype from an URL\n\n========================================= \n=   New Files  \n========================================= \nsrc/etc/testcases/taskdefs/antlib.xml\n  simple test for antlib\nsrc/etc/testcases/taskdefs/test.antlib.xml\n  simple test for antlib\nsrc/main/org/apache/tools/ant/taskdefs/Antlib.java\n  antlib task\nsrc/testcases/org/apache/tools/ant/taskdefs/AntlibTest.java\n  simple test for antlib\n", "is_private": false, "bug_id": 19897, "id": 40316, "time": "2003-07-10T09:03:16Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-07-10T09:03:16Z", "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 19897, "attachment_id": null, "is_private": false, "id": 40737, "time": "2003-07-15T15:14:13Z", "creator": "bodewig@apache.org", "creation_time": "2003-07-15T15:14:13Z", "text": "Could you please give an example of why <antlib> needs to be a TaskContainer?\nIt's rather hot and humid in my part of the world, please forgive me if I\nlook stupid. ;-)"}, {"count": 24, "tags": [], "text": "No problem.\nI want antlib files to be able to define new definers.\nFor example:\nAssume that someone may want to have a class RunDef - like TaskDef that\nextends Typedef.java and sets the adaptto and adapter classes.\n\n<typedef name=\"rundef\" classname=\"org.acme.anttasks.RunDef\"/>\n\nand then use this definition in the same antlib file:\n\n<rundef name=\"x\" classname=\"org.acme.anttasks.X\"/>\n\n\nI actually ran into this problem when mapping ant's conditions/filters\n/mappers/selectors to an antlib using <extendtype/> and a \"role\" attribute\nto <typedef/>\n\n<antlib>\n   <extendtype name=\"conditiondef\">\n      <typedef role=\"o.a.t.a.taskdefs.condition.Condition\"/>\n   </extendtype>\n   <extendtype name=\"selectordef\">\n      <typedef role=\"o.a.t.a.types.selectors.FileSelector\"/>\n   </extendtype>\n\n   <conditiondef name=\"or\" classname=\"o.a.t.a.taskdefs.condition.Or\"/>\n   \n   <selectordef name=\"or\" classname=\"o.a.t.a.types.selectors.OrSelector\"/>\n\n</antlib>\n\nI tried playing with add(Definer d) and addConfigured(Definer d), but\nboth do not work for different reasons.\n\n", "is_private": false, "id": 40742, "creator": "peter.reilly@corvil.com", "time": "2003-07-15T15:35:26Z", "bug_id": 19897, "creation_time": "2003-07-15T15:35:26Z", "attachment_id": null}, {"count": 25, "attachment_id": null, "bug_id": 19897, "is_private": false, "id": 41207, "time": "2003-07-23T12:24:44Z", "creator": "bodewig@apache.org", "creation_time": "2003-07-23T12:24:44Z", "tags": [], "text": "IIUC <rundef> would be nothing more than a convenience layer, it saves\nsetting the adaptto and adapter attributes, right?\n\nI'm not sure that opening the task to allow arbitrary tasks nested into it just\nto save some typing is the right thing here.\n\nWhat have been the reasons that add(Definer) didn't work?\n\nI'll try to comment on the rest of the patch ASAP."}, {"count": 26, "text": "A minor nit - I'd give antlib a manual page of its own 8-)\n\nThen we still have the Antlib implements TaskContainer thing.\n\nFinally, I don't like the way Antlib couples itself to ProjectHelper2.\nProjectHelper2 is getting more equal than other \"ProjectHelper\"\nimplementations with that - OK, it already is, but this makes the point even\nstronger.  Maybe there is a way to extract the functionality that Antlib needs\nfrom ProjectHelper2 and use it from both classes?\n\nI think all those points can easily be dealt with in CVS.  No objections against\ncommitting the patch from my side.", "creator": "bodewig@apache.org", "attachment_id": null, "id": 41208, "time": "2003-07-23T12:39:42Z", "bug_id": 19897, "creation_time": "2003-07-23T12:39:42Z", "tags": [], "is_private": false}, {"count": 27, "attachment_id": null, "creator": "peter.reilly@corvil.com", "is_private": false, "id": 41248, "time": "2003-07-23T17:06:45Z", "bug_id": 19897, "creation_time": "2003-07-23T17:06:45Z", "tags": [], "text": ">IIUC <rundef> would be nothing more than a convenience layer, it saves\n>setting the adaptto and adapter attributes, right?\n\nTrue for rundef, but a definer may be more complicated than that.\nFor example it may use reflection to get classes from a jar and\nadd them to ant as types.\n\n> A minor nit - I'd give antlib a manual page of its own 8-)\n+1, later\n\n> Then we still have the Antlib implements TaskContainer thing.\nAnother reason to use taskcontainer is to allow antlib's to\nhave start-up scripts - for checking the env for example.\n\n>Finally, I don't like the way Antlib couples itself to ProjectHelper2.\n>ProjectHelper2 is getting more equal than other \"ProjectHelper\"\n>implementations with that - OK, it already is, but this makes the point even\n>stronger.  Maybe there is a way to extract the functionality that Antlib needs\n>from ProjectHelper2 and use it from both classes?\nTrue, (very true). This needs some thought. For example the current\nProjectHelperImpl is a little out of date (it is useful to have\nProjectHelper2 and ProjectHelperImpl ?)\n\n>I think all those points can easily be dealt with in CVS.  No objections >against\n>committing the patch from my side.\n\nExcellent, however I have one problem.. My use-case for\nusing a taskcontainer was to allow the definitions to\nbe used in the same antlib file. There is a problem\nwith this when namespace prefixes are implemented.\nThe new definitions will belong to the namespace uri associated\nwith the antlib file/resource. To use them in the same\nfile will involve a little messing with uri handling in the\nantlib task/ComponentHelper.\n"}, {"count": 28, "tags": [], "bug_id": 19897, "attachment_id": 7613, "is_private": false, "id": 41943, "time": "2003-08-01T11:23:16Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-08-01T11:23:16Z", "text": "Created attachment 7613\nPatch file to provide namespace support"}, {"count": 29, "tags": [], "text": "I have made a patch (7613) implementing namespace support.\nThere are a number of differences from the original:\n  * PH2 does not have the concept of unsupported namespaces\n  * typedef may use any uri except reserved uris which are\n    \"ant*\" other that \"ant:core\" and \"antlib:*\"\n  * I have removed the \"ant:polymorphic\" namespace as it only contained\n    one attribute (\"type\") and I think it was confusing. I think\n    that there should be a number of attributes supported in a\n    separate namespace (see the aspect discussion for 1.7 ?\n    url for e-mails on the subject).\n  * handling of an antlib context to resolve definitions in\n    antlibs\n\nThe changes on a file by file basis is:\ndocs/manual/CoreTasks/typedef.html\n   * describe uri attribute\nsrc/main/org/apache/tools/ant/ComponentHelper.java\n   * add handling of namespace\n   * add handling of stack of antlib contexts\n   * add mapping of antlib:<package name> to resource\n     <package name>s:.:/:g/antlib.xml\n   NOTE: some debug println's present\nsrc/main/org/apache/tools/ant/ProjectHelper.java\n   * constants for ant:core, and antlib:\n   * method to map uri,name to component name\n   * method to extrace uri from component name\nsrc/main/org/apache/tools/ant/UnknownElement.java\n   * set the qualified name of the task\n   * use ComponenetHelper#createComponent\nsrc/main/org/apache/tools/ant/helper/AntXMLContext.java\n   * maintain the namespace prefix -> namespace uri during parsing\nsrc/main/org/apache/tools/ant/helper/ProjectHelper2.java\n   * map ant:core to \"\" for namespace uri\n   * use localname instead of qname for attributes\n   * check if \"target\" and \"project\" are in the correct namespace\n   * map the ant-type prefix:name value to a uri'ed component name\n   * set the qualified name on a task\nsrc/main/org/apache/tools/ant/taskdefs/Antlib.java\n   * add a uri attribute and set it for definitions\n   * inform componenthelper of the start and end of antlib definition\n   * processing\nsrc/main/org/apache/tools/ant/taskdefs/Definer.java\n   * add the uri attribute\n   * use the uri attribute to specify the name of the component\n", "attachment_id": null, "id": 41946, "creator": "peter.reilly@corvil.com", "time": "2003-08-01T12:11:23Z", "bug_id": 19897, "creation_time": "2003-08-01T12:11:23Z", "is_private": false}, {"count": 30, "tags": [], "bug_id": 19897, "attachment_id": null, "id": 45333, "time": "2003-10-10T08:33:32Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-10-10T08:33:32Z", "is_private": false, "text": "This is in current ANT.\nWill add a separate report for role support later."}]
[{"count": 0, "tags": [], "creator": "sergeyvorobyev@google.com", "is_private": false, "id": 140103, "attachment_id": null, "bug_id": 49986, "creation_time": "2010-09-23T09:31:03Z", "time": "2010-09-23T09:31:03Z", "text": "r998053\nhttp://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/jasper/servlet/JspServletWrapper.java\n\nCommon anti-pattern: Double checked locking. I don't know is this race dangerous or no.\n\nRace on private boolean reload\n    \npublic Servlet getServlet()\n        throws ServletException, IOException, FileNotFoundException\n    {\n        if (reload) {\n            synchronized (this) {\n                // Synchronizing on jsw enables simultaneous loading\n                // of different pages, but not the same page.\n                if (reload) {\n                    // This is to maintain the original protocol.\n                   \n..........\n\n                    theServlet = servlet;\n                    reload = false;\n                }\n            }    \n        }\n        return theServlet;\n    }"}, {"count": 1, "tags": [], "bug_id": 49986, "text": "Looks like a problem to me if the class can be called from multiple threads.\nIf not, then why have any synch. blocks at all?\n\nCould perhaps be fixed by making reload volatile, but the reload variable can be set false elsewhere without synch.\n\nThe servletClassLastModifiedTime also looks to be used in a similar way; that is a long so could potentially an invalid value could be read.", "id": 140105, "time": "2010-09-23T10:18:53Z", "creator": "sebb@apache.org", "creation_time": "2010-09-23T10:18:53Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "sergeyvorobyev@google.com", "attachment_id": null, "text": "(In reply to comment #1)\n> Looks like a problem to me if the class can be called from multiple threads.\n> If not, then why have any synch. blocks at all?\n\nIt's called from multiple threads.\nStack trace:\n    Thread 28\n    #0  org/apache/jasper/servlet/JspServletWrapper.getServlet JspServletWrapper.java:166\n    #1  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:329\n    #2  org/apache/jasper/servlet/JspServlet.serviceJspFile JspServlet.java:313\n    #3  org/apache/jasper/servlet/JspServlet.service JspServlet.java:260\n    #4  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #5  org/apache/catalina/core/ApplicationFilterChain.internalDoFilter ApplicationFilterChain.java:290\n    #6  org/apache/catalina/core/ApplicationFilterChain.doFilter ApplicationFilterChain.java:206\n    #7  org/apache/catalina/core/StandardWrapperValve.invoke StandardWrapperValve.java:233\n    #8  org/apache/catalina/core/StandardContextValve.invoke StandardContextValve.java:191\n    #9  org/apache/catalina/authenticator/AuthenticatorBase.invoke AuthenticatorBase.java:470\n    #10 org/apache/catalina/core/StandardHostValve.invoke StandardHostValve.java:127\n    #11 org/apache/catalina/valves/ErrorReportValve.invoke ErrorReportValve.java:102\n \n   Thread 25\n    #0  org/apache/jasper/servlet/JspServletWrapper.getServlet JspServletWrapper.java:133\n    #1  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:329\n    #2  org/apache/jasper/servlet/JspServlet.serviceJspFile JspServlet.java:313\n    #3  org/apache/jasper/servlet/JspServlet.service JspServlet.java:260\n    #4  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #5  org/apache/catalina/core/ApplicationFilterChain.internalDoFilter ApplicationFilterChain.java:290\n    #6  org/apache/catalina/core/ApplicationFilterChain.doFilter ApplicationFilterChain.java:206\n    #7  org/apache/catalina/core/StandardWrapperValve.invoke StandardWrapperValve.java:233\n    #8  org/apache/catalina/core/StandardContextValve.invoke StandardContextValve.java:191\n    #9  org/apache/catalina/authenticator/AuthenticatorBase.invoke AuthenticatorBase.java:470\n\n> The servletClassLastModifiedTime also looks to be used in a similar way; that\n> is a long so could potentially an invalid value could be read.\n\nExactly! Thank you for point    \n\n     public void setServletClassLastModifiedTime(long lastModified) {\n        if (this.servletClassLastModifiedTime < lastModified) {\n            synchronized (this) {\n                if (this.servletClassLastModifiedTime < lastModified) {\n                    this.servletClassLastModifiedTime = lastModified;\n                    reload = true;\n                }\n            }\n        }\n    }", "id": 140106, "time": "2010-09-23T10:29:38Z", "bug_id": 49986, "creation_time": "2010-09-23T10:29:38Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 49986, "attachment_id": null, "text": "This is actually one of the rare cases that DCL is a decent solution, but the current implementation is broken.\n\nThe fix for getServlet (now Java 5 has come along) is a volatile reload flag.\nThis forces an in order write of the new servlet object and the 'theServlet' reference (as long as the write to reload is the last step in the update), as well as forcing a read barrier (and thus a consistent read of 'theServlet' and the new servlet object) for any thread entering getServlet after a reload is done.\n\nsetServletClassLastModifiedTime can be fixed by making servletClassLastModifiedTime volatile (again since Java 5).\n(This could be done with an AtomicLong and a busy loop compareAndSet, but the volatile DCL is a more minor change and the performance diff is probably negligible).\ne.g.:\n        final AtomicLong lastModifiedTime = new AtomicLong();\n\n        while (true) {\n            long current = lastModifiedTime.get();\n            if (current < lastModified) {\n                if (lastModifiedTime.compareAndSet(current, lastModified)) {\n                    reload = true;\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n\nI'll move this to Tomcat 7 and look at a fix there - depending on the confidence we have it may find it's way back to 6.x (although I've been running Tomcat in production for a decade and have never seen a practical failure from this).", "id": 140313, "time": "2010-09-30T01:27:22Z", "creator": "timw@apache.org", "creation_time": "2010-09-30T01:27:22Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 49986, "is_private": false, "id": 140314, "creation_time": "2010-09-30T01:30:16Z", "time": "2010-09-30T01:30:16Z", "creator": "timw@apache.org", "text": "Created attachment 26102\nPatch broken DCL", "attachment_id": 26102}, {"count": 5, "tags": [], "bug_id": 49986, "text": "Fixed in trunk and will be in 7.0.4 onwards.\n\nProposed for 6.0.x.", "id": 140563, "time": "2010-10-07T10:37:07Z", "creator": "markt@apache.org", "creation_time": "2010-10-07T10:37:07Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 140722, "attachment_id": null, "bug_id": 49986, "creation_time": "2010-10-13T10:59:02Z", "time": "2010-10-13T10:59:02Z", "text": "Fixed in 6.0.x and will be in 6.0.30 onwards."}]
[{"count": 0, "tags": [], "creator": "brezhnev@ags.uni-sb.de", "text": "tomcat 4 does not allow escaped character %2f ('/') (HttpProcessor.java) in the\npath. it is contradictory to HTTP specification, and it is significant, since\nsome applications use this character in the pathInfo.\n\nit is not clear how it should be interpreted -- on the one hand, URI\nspecification allows it _inside_ path elements, on the other hand, HTTP/1.1\nspecification suggest to treat it the same way as '/'.\n\nin both cases it shouldn't be disallowed.\n\nfrom \"Hypertext Transfer Protocol -- HTTP/1.1\"\n-------------------------------------------------------------------------\nFor definitive information on URL syntax and semantics,\nsee \"Uniform Resource Identifiers (URI): Generic Syntax and Semantics,\" RFC\n2396 [42] (which replaces RFCs 1738 [4] and RFC 1808 [11]).\n-------------------------------------------------------------------------\n\nfrom \"Uniform Resource Identifiers (URI): Generic Syntax and Semantics\":\n-------------------------------------------------------------------------\n2.2. Reserved Characters\n\n   Many URI include components consisting of or delimited by, certain\n   special characters.  These characters are called \"reserved\", since\n   their usage within the URI component is limited to their reserved\n   purpose.  If the data for a URI component would conflict with the\n   reserved purpose, then the conflicting data must be escaped before\n   forming the URI.\n\n      reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |\n                    \"$\" | \",\"\n\n   The \"reserved\" syntax class above refers to those characters that are\n   allowed within a URI, but which may not be allowed within a\n   particular component of the generic URI syntax; they are used as\n   delimiters of the components described in Section 3.\n\n...\n\n2.4.2. When to Escape and Unescape\n\n   A URI is always in an \"escaped\" form, since escaping or unescaping a\n   completed URI might change its semantics.  Normally, the only time\n   escape encodings can safely be made is when the URI is being created\n   from its component parts; each component may have its own set of\n   characters that are reserved, so only the mechanism responsible for\n   generating or interpreting that component can determine whether or\n   not escaping a character will change its semantics. Likewise, a URI\n   must be separated into its components before the escaped characters\n   within those components can be safely decoded.\n-------------------------------------------------------------------------\n\nhowever,\n\nfrom \"Hypertext Transfer Protocol -- HTTP/1.1\":\n-------------------------------------------------------------------------\n3.2.3 URI Comparison\n\nWhen comparing two URIs to decide if they match or not, a client SHOULD use a\ncase-sensitive octet-by-octet comparison of the entire URIs, with these\nexceptions:\n\n      - A port that is empty or not given is equivalent to the default\n        port for that URI-reference;\n\n        - Comparisons of host names MUST be case-insensitive;\n        - Comparisons of scheme names MUST be case-insensitive;\n        - An empty abs_path is equivalent to an abs_path of \"/\".\n\nCharacters other than those in the \"reserved\" and \"unsafe\" sets (see RFC 2396\n[42]) are equivalent to their \"\"%\" HEX HEX\" encoding.\n\n...\n\nIf the Request-URI is encoded using the \"% HEX HEX\" encoding [42], the origin\nserver MUST decode the Request-URI in order to properly interpret the request.\nServers SHOULD respond to invalid Request-URIs with an appropriate status code.\n---------------------------------------------------------------------------", "id": 12063, "time": "2002-03-20T11:22:55Z", "bug_id": 7277, "creation_time": "2002-03-20T11:22:55Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 7277, "attachment_id": null, "text": "Coyote will allow whatever %xx character you want (at least when it's used with \n4.0-HEAD). However, it will normalize \"//\" to \"/\" because that would allow \nbypassing security constraints, and various other nasty tricks.\n\nUse a request parameter, or it will not work.", "id": 12084, "time": "2002-03-20T15:50:26Z", "creator": "remm@apache.org", "creation_time": "2002-03-20T15:50:26Z", "is_private": false}]
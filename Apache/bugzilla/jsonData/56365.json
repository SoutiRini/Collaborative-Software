[{"count": 0, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "text": "Looking at the code that performs jar names filtering in StandardJarScanner in 8.0.5, 7.0.53.\n\nThis is in view of\na) backporting it to Tomcat 6 to get rid of ecj-xxx.jar names in the lists of ignored files there,\nb) documenting what filename patterns are supported here.\n\nEssentially, the code calls \"Matcher.matchPath(toSkip, jarName)\" (see StandardJarScanFilter#check() in 8.0.5) where jarName is just a file name.\n\nThis is an overkill. The matchPath() method is designed to work with Ant-style patterns matching against file paths. This method handles file names hierarchy (directory names and \"**\" directory name pattern).  The actual matching of the names is performed by Matcher.match(String pattern, String str, boolean caseSensitive), which is a rather more simple API.\n\nThus the proposal is to get rid of Matcher.matchPath() and call Matcher.match() directly. This allows to remove a lot of unneeded code.\n\nFor documentation, the file name patterns supported by Matcher.match() according to its javadoc are as follows:\n * The pattern may contain two special characters:<br>\n * '*' means zero or more characters<br>\n * '?' means one and only one character", "id": 174366, "time": "2014-04-08T12:19:33Z", "bug_id": 56365, "creation_time": "2014-04-08T12:19:33Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Fixed in Tomcat 8, will be in 8.0.6.", "is_private": false, "id": 174899, "creator": "knst.kolinko@gmail.com", "time": "2014-04-27T00:09:28Z", "bug_id": 56365, "creation_time": "2014-04-27T00:09:28Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Fixed in Tomcat 7, will be in 7.0.54.", "is_private": false, "id": 174905, "creator": "knst.kolinko@gmail.com", "time": "2014-04-27T12:58:34Z", "bug_id": 56365, "creation_time": "2014-04-27T12:58:34Z", "attachment_id": null}]
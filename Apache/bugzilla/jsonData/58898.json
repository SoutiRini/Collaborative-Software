[{"count": 0, "tags": [], "text": "Passing arguments containing double-quote or backslash characters results in errors in ant shell script.\n\nExamples:\n\n$ ant '-Dx=\"'\n/home/jwa/.sdkman/candidates/ant/current/bin/ant: 1: eval: Syntax error: Unterminated quoted string\n\n$ ant \"-Dx=\\\\\"\n/home/jwa/.sdkman/candidates/ant/current/bin/ant: 1: eval: Syntax error: Unterminated quoted string", "attachment_id": null, "id": 187856, "creator": "jwadamson@gmail.com", "time": "2016-01-20T21:13:48Z", "bug_id": 58898, "creation_time": "2016-01-20T21:13:48Z", "is_private": false}, {"count": 1, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "id": 188667, "time": "2016-02-22T03:46:11Z", "bug_id": 58898, "creation_time": "2016-02-22T03:46:11Z", "is_private": false, "text": "Thanks for the patch."}, {"count": 2, "tags": [], "bug_id": 58898, "attachment_id": null, "text": "As per the WHATSNEW file I see that the modifications for this issue change the interpretation/evaluation of quotes within an ant argument. I have an issue with 1.9.7.  Previously with ant 1.9.6 and earlier the line expanded to -Dbr.cmd=\"co-r \", which is correct.   Now after updating to Ant 1.9.7 the expansion is messed up.  It actually evaluates to '-Dbr.cmd=\"co'-r ' \" '  including all of the quotes shown.  It\u2019s hard to read so I added spaces around the one double quote at the end.  It actually looks like \u2018\u201d\u2019.  Then ant gives the error -r option invalid, because as you can see the -r is abandoned between the literal single quotes.\n\nNeedless to say, that I can modify the scripts we use, so the field itself does not contain the double quotes, and that the field is only surrounded by them.  But I was surprised that my build failed almost immediately as ant was kicked off.", "id": 190382, "time": "2016-04-19T12:03:33Z", "creator": "info4km@yahoo.com", "creation_time": "2016-04-19T12:03:33Z", "is_private": false}, {"count": 3, "tags": [], "text": "What is the pertinent arguments and what is the output of execdebug when you run it? e.g.\n\napache-ant-1.9.7$ ./bin/ant --execdebug -Dbr.cmd=\"co-r \" -version\nexec \"$JAVACMD\" -Xmx512m -classpath \"$LOCALCLASSPATH\" -Dant.home=\"$ANT_HOME\" -Dant.library.dir=\"$ANT_LIB\" org.apache.tools.ant.launch.Launcher -cp \"$CLASSPATH\" \"-Dbr.cmd=co-r \" \"-version\"\nApache Ant(TM) version 1.9.7 compiled on April 9 2016", "attachment_id": null, "id": 190387, "creator": "jwadamson@gmail.com", "time": "2016-04-19T16:18:31Z", "bug_id": 58898, "creation_time": "2016-04-19T16:18:31Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 58898, "attachment_id": null, "text": "(In reply to jwadamson from comment #3)\n> What is the pertinent arguments and what is the output of execdebug when you\n> run it? e.g.\n> \n> apache-ant-1.9.7$ ./bin/ant --execdebug -Dbr.cmd=\"co-r \" -version\n> exec \"$JAVACMD\" -Xmx512m -classpath \"$LOCALCLASSPATH\" -Dant.home=\"$ANT_HOME\"\n> -Dant.library.dir=\"$ANT_LIB\" org.apache.tools.ant.launch.Launcher -cp\n> \"$CLASSPATH\" \"-Dbr.cmd=co-r \" \"-version\"\n> Apache Ant(TM) version 1.9.7 compiled on April 9 2016\n\nI tried to first see how the line gets interpreted and then run the above commands as you suggested.  here is the output:\n\n# with 1.9.6 you get\n\n$ ant --execdebug '-Dbranch.command=\"co' -r '\"' -version\nexec \"/home/build/softwares/jdk/jre/bin/java\" -classpath \"/home/build/softwares/ant/lib/ant-launcher.jar\" -Dant.home=\"/home/build/softwares/ant\" -Dant.library.dir=\"/home/build/softwares/ant/lib\" org.apache.tools.ant.launch.Launcher -cp \"/home/build/softwares/ant/lib/ant.jar:/u04/tomcat/common/lib/servlet.jar\" \"-Dbranch.command=\"co\" \"-r\" \"\"\" \"-version\"\nApache Ant(TM) version 1.9.6 compiled on June 29 2015\n\n#with 1.9.7 you get\n$ ant --execdebug '-Dbranch.command=\"co' -r '\"' -version\nexec \"$JAVACMD\" -classpath \"$LOCALCLASSPATH\" -Dant.home=\"$ANT_HOME\" -Dant.library.dir=\"$ANT_LIB\" org.apache.tools.ant.launch.Launcher -cp \"$CLASSPATH\" \"-Dbranch.command=\\\"co\" \"-r\" \"\\\"\" \"-version\"\nUnknown argument: -r\n\nAs I've also said, I have no issue reworking the script so the quotes are not part of the value.  That is strange to me anyway.  there is no need to have it that way.", "id": 190457, "time": "2016-04-21T15:52:22Z", "creator": "info4km@yahoo.com", "creation_time": "2016-04-21T15:52:22Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 58898, "attachment_id": null, "id": 190475, "time": "2016-04-21T21:18:22Z", "creator": "jwadamson@gmail.com", "creation_time": "2016-04-21T21:18:22Z", "is_private": false, "text": "Thank you for the example. I think the 1.9.6 behavior in your case was objectively incorrect. It worked out to the right answer, but for the wrong reasons.\n\n'-Dbranch.command=\"co' -r '\"'\n\nIn /bin/sh, quoting does not nest. So the example command line has 3 separate arguments passed to ant:\n  `-Dbranch.commmand=\"co`\n  `-r`\n  `\"` (a literal double-quote)\n\nThe ant script in 1.9.6 was smushing these back together as (quoting the space between each original argument)\n  `\"-Dbranch.command=\"co\" \"-r\" \"\"\"`. \n/bin/sh processing then interprets this mess as a single argument in the exec command (with some spurious empty strings concatenated into the value):\n  `-Dbranch.command=co -r `\n\nThe ant script in 1.9.7 keeps those original 3 arguments separate and causes the error about the `-r` argument."}, {"count": 6, "tags": [], "text": "(In reply to jwadamson from comment #5)\n> Thank you for the example. I think the 1.9.6 behavior in your case was\n> objectively incorrect. It worked out to the right answer, but for the wrong\n> reasons.\n> \n> '-Dbranch.command=\"co' -r '\"'\n> \n> In /bin/sh, quoting does not nest. So the example command line has 3\n> separate arguments passed to ant:\n>   `-Dbranch.commmand=\"co`\n>   `-r`\n>   `\"` (a literal double-quote)\n> \n> The ant script in 1.9.6 was smushing these back together as (quoting the\n> space between each original argument)\n>   `\"-Dbranch.command=\"co\" \"-r\" \"\"\"`. \n> /bin/sh processing then interprets this mess as a single argument in the\n> exec command (with some spurious empty strings concatenated into the value):\n>   `-Dbranch.command=co -r `\n> \n> The ant script in 1.9.7 keeps those original 3 arguments separate and causes\n> the error about the `-r` argument.\n\nI agree. Once I looked at the evaluated value, I was actually surprised it worked.  I've reworked the scripts to pass it the correct way.  Only the value, and no double quotes.  works fine in both versions of ant.", "is_private": false, "id": 190487, "creator": "info4km@yahoo.com", "time": "2016-04-22T14:24:51Z", "bug_id": 58898, "creation_time": "2016-04-22T14:24:51Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "romeara@live.com", "attachment_id": null, "id": 168961, "time": "2013-07-31T03:07:32Z", "bug_id": 55330, "creation_time": "2013-07-31T03:07:32Z", "is_private": false, "text": "(Filed under POI Overall component as this applies to the user model shared by both HSSF and XSSF)\n\nThere are various API definitions in interfaces from the org.apache.poi.ss.usermodel package which could be made significantly more type-safe by replacing short/int arguments with various Java enumerations. Some of these methods have been type safe for particular implementations in a way which could be expanded to include both implementations (both meaning the xssf and hssf implementations of the interfaces)\n\nThe most prominent example(s) of this are (all from the org.apache.poi.ss.usermodel package):\n\n- Cell\n   - get/setCellType\n- CellStyle\n   - get/setAlignment\n   - get/setVerticalAlignment\n   - get/setBorderLeft\n   - get/setBorderRight\n   - get/setBorderTop\n   - get/setBorderBottom\n   - get/setFillPattern\nFont\n   - get/setTypeOffset\n   - get/setUnderline\n   - get/setCharSet\n   - get/setBoldweight\nSheet\n   - get/setMargin\n\nThe proposal for this enhancement is to create/fully utilize enumerations for the various sets of numeric constants which are meant to be used with these methods to create alternate APIs, and to deprecate the APIs which are not type safe in favor of the new ones."}, {"count": 1, "tags": [], "text": "I am willing to work on creating a patch for this enhancement if there is general agreement it is a desired enhancement", "attachment_id": null, "bug_id": 55330, "id": 168962, "time": "2013-07-31T03:11:12Z", "creator": "romeara@live.com", "creation_time": "2013-07-31T03:11:12Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "apache@gagravarr.org", "text": "Two comments and one query:\n - Before defining the Enum, there'd need to be some time spent looking over the File Format Documentation to ensure that all the different options are actually defined, and none have been missed\n - As well as this, there would need to be a check done of all the test documents we have to ensure that no extra values in common use\n\n - How would we handle a file where the value written in it when reading wasn't one of the expected ones? (Could be slightly invalid, from a different program, reserved value in use etc - real world files are often messy!)\n\n\nIt might be worth picking one of the smaller, more self contained cases from the list, and trying to work up a patch for just that. A patch will mean code to review and discuss (rather than just in the abstract), and would offer more of a chance to see the best ways to handle the comments+question above.", "count": 2, "id": 168970, "time": "2013-07-31T10:13:52Z", "bug_id": 55330, "creation_time": "2013-07-31T10:13:52Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55330, "attachment_id": null, "is_private": false, "id": 168975, "time": "2013-07-31T13:33:16Z", "creator": "romeara@live.com", "creation_time": "2013-07-31T13:33:16Z", "text": "I meant to ask if you'd want to see a patch for all or a patch for one to see if you liked how I went about it - guess that answers that question! I will work up a patch for one of the better defined cases (I'm thinking margins - there are only so many valid options for that one) and we can discuss based on that.\n\nThere are a couple of different techniques I'd suggest for the invalid value scenario - we can either include an \"unknown value\" enum (throwing an exception if its attempted as an input) to cover those cases, or we can throw an exception during parsing if we are confident that we have covered all values. \n\nIt shouldn't be too hard t nail down the values for most of these - they generally say right in the docs \"must be on of (list of constants)\", which is what made me think enumerations would be a better fit for this area. If the function is only meant to accept a certain range of values, it would be better to use Java's built-in type safety to help support it instead of accidentally letting values through or throwing exceptions at run time.\n\nSo, current plan: \n\n- Scrub the file format documentation for the possible valid margin arguments\n- Check the example/test documents for commonly used margin values\n- Create an enumeration of those values, containing the data necessary to convert them to the file format data\n- Create a patch and attach to this bug for discussion\n\nBy the way, at the moment, I have checked out the source using Git. Will a patch created via Git work, or should I check out the source via SVN and create a patch using that?"}, {"count": 4, "tags": [], "bug_id": 55330, "attachment_id": null, "text": "(In reply to Ryan O'Meara from comment #3)\n> By the way, at the moment, I have checked out the source using Git. Will a\n> patch created via Git work, or should I check out the source via SVN and\n> create a patch using that?\n\nThe canonical source tree for Apache POI is the SVN one. The git repo is a read-only copy.\n\nAny patches will need to be applied using SVN, but unless you're doing something unusual a diff generated by Git is processable by modern copies of SVN. Please send in single git patches for meaningful chunks - you may need to squash some smaller commits into bigger ones so we end up with things of a suitable size to review and apply", "id": 168977, "time": "2013-07-31T14:20:04Z", "creator": "apache@gagravarr.org", "creation_time": "2013-07-31T14:20:04Z", "is_private": false}, {"count": 5, "tags": [], "creator": "romeara@live.com", "attachment_id": null, "id": 168978, "time": "2013-07-31T14:42:04Z", "bug_id": 55330, "creation_time": "2013-07-31T14:42:04Z", "is_private": false, "text": "OK, sounds good. My planned commit size was one commit per type enumerated (for example, margins) including the added enumeration, modifications, and any unit tests."}, {"count": 6, "tags": [], "creator": "romeara@live.com", "attachment_id": null, "id": 168990, "time": "2013-08-01T05:41:14Z", "bug_id": 55330, "creation_time": "2013-08-01T05:41:14Z", "is_private": false, "text": "Here is a patch which adds type safe operations for page margins. I started with margins as the constants used there do not go directly into the generated file - they are just used to determine which function is called on internal handler routines, so there is less risk of unanticipated values which need to be handled by the APIs\n\nThe patch adds an enumeration and the new API calls, deprecates the old API calls and constants, and duplicates the tests which existed for the old API calls for the new ones"}, {"count": 7, "tags": [], "text": "Created attachment 30653\nPage Margins Enumeration", "attachment_id": 30653, "bug_id": 55330, "id": 168991, "time": "2013-08-01T05:41:51Z", "creator": "romeara@live.com", "creation_time": "2013-08-01T05:41:51Z", "is_private": false}]
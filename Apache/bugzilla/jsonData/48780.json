[{"count": 0, "tags": [], "bug_id": 48780, "attachment_id": null, "text": "Some directory implementations do not require users to bind to the LDAP server.  Client authentication is accepted upon presentation of a valid SSL certificate.\n\nThe proposed enhancement adds a configuration directive to mod_authnz_ldap to  perform the LDAP query for the user's DN without first binding as the user.", "id": 134710, "time": "2010-02-19T22:25:15Z", "creator": "peter.thomas@readi-systems.com", "creation_time": "2010-02-19T22:25:15Z", "is_private": false}, {"count": 1, "tags": [], "creator": "peter.thomas@readi-systems.com", "attachment_id": 25026, "id": 134711, "time": "2010-02-19T22:26:40Z", "bug_id": 48780, "creation_time": "2010-02-19T22:26:40Z", "is_private": false, "text": "Created attachment 25026\nProposed patch"}, {"count": 2, "tags": [], "creator": "covener@gmail.com", "is_private": false, "text": "IIUC current patch needs to deal with the case where a cert wasn't provided (SSLVerifyClient optional) or where r->user didn't come from the cert.\n\nIMO cert-based authn or authz belongs outside of LDAP.  LDAP could have a second provider that just checks to make sure current r->user can be found in LDAP w/o looking at password (which is the additional check we're getting with this patch over just clientcert == authenticated)", "id": 134751, "time": "2010-02-21T17:02:28Z", "bug_id": 48780, "creation_time": "2010-02-21T17:02:28Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "peter.thomas@readi-systems.com", "attachment_id": null, "id": 134770, "time": "2010-02-22T14:59:03Z", "bug_id": 48780, "creation_time": "2010-02-22T14:59:03Z", "is_private": false, "text": "(In reply to comment #2)\n> IIUC current patch needs to deal with the case where a cert wasn't provided\n> (SSLVerifyClient optional) or where r->user didn't come from the cert.\n\nIf SSLVerifyClient is optional or none we could have a case where the user did not provide a certificate, but instead entered a DN via a regular basic authentication dialog or other basic authn provider.  This might be useful for testing or debugging, but should raise a warning at a minimum.  I've create a similar patch to Joomla in PHP, but am new to the Apache API--I'm certainly open to augmented patches that add such checks and warnings.\n\nWe also should have a warning if SSLVerifyClient is generous and the client cert provided was not signed by a common root CA.\n\nPerhaps we should also have a warning if this directive is specified but mod_ssl is not even loaded, or if it is loaded without the +FakeBasicAuth option.\n\n> IMO cert-based authn or authz belongs outside of LDAP.  LDAP could have a\n> second provider that just checks to make sure current r->user can be found in\n> LDAP w/o looking at password (which is the additional check we're getting with\n> this patch over just clientcert == authenticated)\n\nThe goal here is to leverage the great work in the authz side of mod_auth_ldap for cases where the business rule is that users may authenticate with their client certificate, without an LDAP password.  As the module stands, one cannot pull back the group and attribute information to match the LDAP Require* directives without passing a user password.  Since mod_ldap's API already supports a \"user bind-free\" compare, branching on an optional--non-default--LDAPAuth directive seemed like the simplest approach to augment mod_auth_ldap to use that feature.  I'd like to see this implemented--perhaps after the additional \"sanity checks\" are added, or implement it with subsequent enhancement requests pending in BZ to add the checks as time permits."}, {"count": 4, "tags": [], "bug_id": 48780, "attachment_id": null, "is_private": false, "id": 134875, "time": "2010-02-25T01:10:56Z", "creator": "peter.thomas@readi-systems.com", "creation_time": "2010-02-25T01:10:56Z", "text": "(In reply to comment #2)\n> IMO cert-based authn or authz belongs outside of LDAP.  LDAP could have a\n\nI think you're right -- c.f. discussion in Bug #31418 -- we can probably fix the behavior higher up in the stack by making the behavior of +FakeBasicAuth more flexible.\n\nI actually got everything \"behaving\" by using mod_auth_anon, but the one-line version of the subject DN does not match the LDAP entryDN, so authorization by mod_authnz_ldap still failed--but at least I got that far!"}, {"count": 5, "tags": [], "bug_id": 48780, "attachment_id": 25105, "text": "Created attachment 25105\nUpdated patch that implements AuthType Certificate\n\nBased on feedback, created a new AuthType attempting to non-intrusively leverage the existing code.  Please provide feedback.  I can only verify that it builds right now.  I'm having some issues creating a test environment, but I hope to be able to do some integration testing tomorrow.", "id": 135175, "time": "2010-03-08T23:52:58Z", "creator": "peter.thomas@readi-systems.com", "creation_time": "2010-03-08T23:52:58Z", "is_private": false}, {"count": 6, "tags": [], "creator": "peter.thomas@readi-systems.com", "attachment_id": null, "id": 135176, "time": "2010-03-08T23:53:28Z", "bug_id": 48780, "creation_time": "2010-03-08T23:53:28Z", "is_private": false, "text": "I'm attaching a first draft of an implementation of AuthType Certificate that doesn't conflict with AuthType Basic--and in fact can be stacked with Basic providers, if desired."}, {"count": 7, "tags": [], "creator": "peter.thomas@readi-systems.com", "text": "The following is an e-mail sent to modules-dev on the subject.\n\nAll:\n\nI've been working on integrating mod_ssl and mod_authnz_ldap for non-password-based environments.  I contemplate \"AuthType Certificate\" in https://issues.apache.org/bugzilla/show_bug.cgi?id=48780 .  This enhancement is targeted for environments where the user is authenticated if they:\n\n1) present a valid SSL client certificate, and\n2) a single object corresponding[*1] to that user's certificate exists at the targeted LDAP server.\n\nTo take advantage of the flexibility and utility of the existing module, I'm extending mod_authnz_ldap instead of writing a separate handler. For example, once authenticated one can then leverage the \"Require ldap-*\" directives in mod_authnz_ldap.  mod_authnz_ldap also populates the environment with all requested LDAP attributes in AUTHENTICATE_* environment variables. These can be used in subsequent request processing [such as fine-grained access control or other logic within request handlers].\n\nTo implement the initial \"DN matching\" approach, I had to make a change to mod_ssl.c to pull out an RFC2253 compliant representation of the subject DN.  My debugging so far suggests this may be causing me problems--I've included the patch diff at the end of this e-mail for review and suggestions.\n\nI hope to have a comprehensive prototype patch available shortly for others that want to test this out.  A summary of the changes made to date follows:\n\n-----\nAdded:\n\nmodules/aaa/mod_auth_cert.c\n* provider module defining AuthType Certificate based\n* registers check user hook \"authenticate_certificate_user\"\n* TODO:  (from [*1], above) matching certificate subject DN to LDAP object DN is overly restrictive; someday implement a more general approach which might be based on creating a filter expression to match DN components, certificate attributes, &c.\n-----\nModified:\n\nModouls/aaa/mod_auth.h:\n* appended check_certificate member to authn_provider struct\n\nmodules/aaa/config.m4:\n* add \"APACHE_MODULE(auth_cert, X.509 certificate authentication, , , most)\"\n\nmodules/aaa/mod_authnz_ldap.c:\n* added authn_ldap_check_certificate, a wrapper for authn_ldap_check_password after testing for certificate auth pre-conditions\n* changed authn_ldap_check_password to use util_ldap_cache_getuserdn instead of ..._checkuserid if AuthType is Certificate\n* registered authn_ldap_check_certificate as the check_certificate function for \n\nModules/ssl/mod_ssl.h:\n* TODO:  Make the following item configurable, defaulting to original behavior [ I need RFC2253 format because that is how DNs are stored in our LDAP server ]\n* changed ssl_var_lookup(\u2026, \"SSL_CLIENT_S_DN\") to return RFC2253-compliant DN instead of using deprecated X509_NAME_oneline \n\nIssues/other TODO items:\n\n* TODO: enhance APR-Util & mod_ldap to support two-way SSL and ldap_sasl_bind_s for environments that support SASL EXTERNAL authentication based on the LDAP client's certificate; right now mod_ldap only supports simple binding--anonymous, or with a binddn and password.\n* ssl_var_lookup(\u2026, \"SSL_CLIENT_S_DN\") bails out unexpectedly when called from mod_auth_cert.c:authenticate_certificate_user\n  [I know it works elsewhere, because I can get the user name logged in access_log by using SSLUserName SSL_CLIENT_S_DN]\n\nHere's the diff fragment if anyone wants to take a stab at helping me puzzle out what I've done wrong:\n\n--- http-2.2.15-baseline/modules/ssl//ssl_engine_vars.c Sat Feb 27 16:00:58 2010\n--- http-2.2.15/modules/ssl//ssl_engine_vars.c  Tue Mar 23 14:22:53 2010\n@@ -367,10 +367,20 @@\n     }\n     else if (strcEQ(var, \"S_DN\")) {\n         xsname = X509_get_subject_name(xs);\n-        cp = X509_NAME_oneline(xsname, NULL, 0);\n-        result = apr_pstrdup(p, cp);\n-        modssl_free(cp);\n-        resdup = FALSO;\n+        BIO *bio;\n+        int n;\n+        \n+        if ((bio = BIO_new(BIO_s_mem())) == NULL) {\n+            result = NULL;\n+        } else {\n+            X509_NAME_print_ex(bio, xsname, 0, XN_FLAG_RFC2253);\n+            n = BIO_pending(bio);\n+            result = apr_pcalloc(p, n+1);\n+            n = BIO_read(bio, result, n);\n+            result[n] = NUL;\n+            BIO_free(bio);\n+            resdup = FALSE;\n+        }\n     }\n     else if (strlen(var) > 5 && strcEQn(var, \"S_DN_\", 5)) {\n         xsname = X509_get_subject_name(xs)", "id": 135602, "time": "2010-03-24T20:55:07Z", "bug_id": 48780, "creation_time": "2010-03-24T20:55:07Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "peter.thomas@readi-systems.com", "attachment_id": 25237, "id": 135920, "time": "2010-04-06T23:28:09Z", "bug_id": 48780, "creation_time": "2010-04-06T23:28:09Z", "is_private": false, "text": "Created attachment 25237\nImproved Certificate provider for 2.2.x\n\nAddresses the previous limitations. Tested in integration environment against all Require ldap-* directives."}, {"count": 9, "tags": [], "creator": "marsanvi@gmail.com", "text": "(In reply to comment #8)\n> Created attachment 25237 [details]\n> Improved Certificate provider for 2.2.x\n> \n> Addresses the previous limitations. Tested in integration environment against\n> all Require ldap-* directives.\n\nHi Peter.\n\nI'm testing your module, but I have any idea how to setup the  http.conf for do the right validation.\nCan you give me a example please?\n\nKind regards.\n\nMartin", "id": 148521, "time": "2011-08-10T09:59:53Z", "bug_id": 48780, "creation_time": "2011-08-10T09:59:53Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "peter.thomas@readi-systems.com", "is_private": false, "text": "(In reply to comment #9)\n> (In reply to comment #8)\n> I'm testing your module, but I have any idea how to setup the  http.conf for\n> do the right validation.\n> Can you give me a example please?\n\nMartin, I apologize for the ridiculously long latency; I changed employers, and thus didn't see this question.\n\nI left my example configurations behind, too, but keys are setting:\n\nAuthLDAPURL ...\nRequire ssl [or appropriate variation]\nSSLUsername HTTPS_CLIENT_S_DN [assumbing that your certificate subject DN matches the LDAP user object DN]\n\nLet me know where you are running into problems, and I may be able to give you more specific guidance.", "id": 158966, "time": "2012-05-10T21:25:15Z", "bug_id": 48780, "creation_time": "2012-05-10T21:25:15Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 48780, "attachment_id": null, "text": "It should be noted that much of this can be implemented with the existing implementation. See the config extract below. Provided the LDAP user object concerned (a) has a password of 'password' as per +FakeBasicAuth and (b) has an attribute which matches the SubjectDN of the client certificate, the client will be authenticated correctly.\n\nHowever the user's SubjectDN-valued attribute needs to be in the strange format returned by OpenLDAP, so it will match, so it actually can't be a proper LDAP DN-valued attribute (such as 'seeAlso'). And it also can't in general be the DN of the object itself, as the SubjectDN of the certificate is beyond the server's control and is most unlikely to agree with the LDAP tree's root.\n\nSo to weigh in on the above discussion:\n\n1. A way is needed to avoid the bind step for directories that support that. I personally don't have this requirement and I'm not aware what it actually amounts to: I'm perfectly happy with a password of 'password', and I can configure the user in LDAP via the password policy from being able to break it.\n\n2. A way is needed to acquire the SubjectDN of the certificate in proper X.500 DN format, and a configuration directive to enable it, or perhaps another env variable.\n\n3. A way is needed to search the user subtree on an arbitrary attribute using that DN as the target value. We already have this part, in AuthLDAPURL, we just don't have a way of getting (2) or feeding the result into it.\n\n4. The authenticated user is then subject to whatever require valid-user/ldap-user/ldap-group constraints may be defined, as per my example below.\n\n\t<Location /cRegister/WestNet >\n\t\tOrder Deny,Allow\n\t\tDeny from none\n\t\tAllow from all\n\t\tSatisfy All\n\t\t# Fake LDAP Basic authentication,\n\t\t# after http://httpd.apache.org/docs/2.2/ssl/ssl_howto.html#certauthenticate\n\t\tSSLOptions +OptRenegotiate +StdEnvVars +StrictRequire +FakeBasicAuth \n\t\tSSLVerifyClient require\n\t\tAuthBasicProvider\tldap\n\t\tAuthLDAPBindDN \"uid=apache-httpd,ou=Applications,ou=System,dc=example,dc=com\"\n\t\tAuthLDAPBindPassword \"xyz\"\n\t\t# Lookup the SubbjectDN of the certificate in OpenSSL format in the 'o' attribute.\n\t\t# The OpenSSL format for this is e.g. /C=US/ST=CA/L=SF/O=WestNet Inc./OU=Unknown/CN=WestNet Inc.,\n\t\t# which sadly isn't a valid LDAP DN, even though they are both ultimately X.509 DNs.\n\t\t# So we have to match on a non-DN-valued attribute, in this case 'o'.\n\t\t# So a target entry that satisfies all this must:\n\t\t# 1. Be an inetOrgPerson\n\t\t# 2. Be under ou=Users,dc=example,dc=com.\n\t\t# 3. Have a password of 'password', see the documentation for FakeBasicAuth.\n\t\t# 4. Have an 'o' attribute that matches the SubjectDN of the certificate in OpenSSL format as above.\n\t\t# 5. That subject must be a member of the Westnet role.\n\t\tAuthLDAPURL ldap://localhost/ou=Users,dc=verismartlabs,dc=com?o?sub?(objectClass=inetOrgPerson)\n\t\t# Require that such a user exists\n\t\tRequire valid-user\n\t\t# Require that such a user is a member of the Westnet role.\n\t\tAuthLDAPGroupAttribute\troleOccupant\n\t\tRequire ldap-group cn=WestNet,cn=Roles,dc=verismartlabs,dc=com\n\t</Location>", "id": 161319, "time": "2012-08-13T04:23:20Z", "creator": "esmond.pitt@bigpond.com", "creation_time": "2012-08-13T04:23:20Z", "is_private": false}]
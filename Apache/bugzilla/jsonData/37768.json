[{"count": 0, "attachment_id": null, "bug_id": 37768, "text": "See url - BasicConfigurator.configure() invoked multiple times gives each time\nmore output.\n\nSee description and code example at\nhttp://enarion.net/java/log4j/double-lines-with-same-content/", "id": 83170, "time": "2005-12-03T08:38:12Z", "creator": "tkluge@enarion.net", "creation_time": "2005-12-03T08:38:12Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 37768, "text": "Created attachment 17129\nCode that demonstrates the problem", "id": 83171, "time": "2005-12-03T08:39:44Z", "creator": "tkluge@enarion.net", "creation_time": "2005-12-03T08:39:44Z", "is_private": false, "attachment_id": 17129}, {"count": 2, "attachment_id": null, "creator": "hoju@visi.com", "text": "I haven't looked at the BasicConfigurator code yet, but it seems to me that this\nis an additivity issue.  My hunch is that BasicConfigurator adds a\nConsoleAppender to the ROOT logger at the DEBUG level.  Each time\nBasicConfigurator is called in the same logger repository, a new ConsoleAppender\nis added.  Means that the first call will produce one line of output because\nthere's only one ConsoleAppender attached.  Successive calls will produce one\nmore line of output than the previous because there will be one more\nConsoleAppender attached than the previous run.  Log4j does not blow away\nprevious configurations.  It's all additive.\n\nLog4j is working properly.  The question is, why are you calling\nBasicConfigurator?  Why not just put log4j.properties or log4j.xml in the\ndefault package and in the classapath and let Log4j configure itself once?  If\nyou do want to configure it yourself, you should do it in a way where it will\nonly happen once, such as in a static block or at the beginning of the Main\nmethod you use to kick off the whole process.  Log4j is just doing what you tell\nit to do here.\n\nMarking invalid, as the behavior is correct, even if it might be unexpected to some.\n\nJake", "id": 83177, "time": "2005-12-03T19:51:15Z", "bug_id": 37768, "creation_time": "2005-12-03T19:51:15Z", "tags": [], "is_private": false}, {"text": "Hi Jake!\n\nI understand your comments. To be honest, I used the BasicConfigurator just as a\nshortcut, and left it in the source code.\n\nBut shouldn't the execution of this static method always result in the same\nbehavior?\nThis might be only a small thing to implement in the code, right? Just check if\nthe method has been executed or not.\n\nTobias", "tags": [], "bug_id": 37768, "is_private": false, "count": 3, "id": 83205, "time": "2005-12-04T17:08:29Z", "creator": "tkluge@enarion.net", "creation_time": "2005-12-04T17:08:29Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 37768, "is_private": false, "text": "Why should each invocation result in the same behavior when each time you call\nit, you add a new ConsoleAppender (by calling BasicConfigurator.configure() once\nfor reach pass which adds a new ConsoleAppender).  Each console appender appends\nto the console.  When you have one, you get one line, two, two lines, three,\nthree lines, etc...  A Log4j configuration is stored statically in memory and,\nas I explained before, configurations are additive; new configuration calls on\nthe logger repository don't blow away the old ones, they just get added on. \nIt's as if you had a config file that stated...\n\n<root>\n    <level value=\"DEBUG\"/>\n    <appender-ref ref=\"Console\"/>\n    <appender-ref ref=\"Console\"/>\n    <appender-ref ref=\"Console\"/>\n    <!--....-->\n</root>\n\nWould you expect one line or multiple lines of output here?  If you expect one,\nyou need to modify your expectations.\n\nOr are you saying, \"ok, I understand that, but I want Log4j to be smart about\nit.\"  \"I want BasicConfigurator to detect whether there is already a\nConsoleAppender attached and, if so, use that one rather than adding a new one\nto the root logger.\"  Fair enough, but I wouldn't consider this a bug.  And I\ncan guarantee that behavior won't change in the 1.2.xx series.  It is possible\nthat it might change in the 1.3.xx series.  I suggest that you post to the user\nlist asking about whether this sort of change in behavior is desired by other\nusers and, if so, whether a majority of committers agree.  If it is found that\nusers and committers agree that behavior should be changed, then this report can\nbe reopened.  Patches for the necesssary changes will help move things along as\nwell.\n\nJake", "id": 83206, "time": "2005-12-04T17:37:34Z", "creator": "hoju@visi.com", "creation_time": "2005-12-04T17:37:34Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "tkluge@enarion.net", "attachment_id": null, "text": "You're right. I thought it would behave \"smart\". :)\nBut - no problem. I removed the multiple invocation, I'm fine now.\n\nThanks for your help and response,\nTobias", "id": 83207, "time": "2005-12-04T18:01:15Z", "bug_id": 37768, "creation_time": "2005-12-04T18:01:15Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 37768, "is_private": false, "id": 91284, "attachment_id": null, "creator": "billdotnet@yahoo.com", "creation_time": "2006-07-13T19:31:09Z", "time": "2006-07-13T19:31:09Z", "text": "Think about it ...\n\nIf BasicConfigurator.configure() is provided as a way to quickly configure\nlog4j, and you can't use it without the additivity problem, then this is a bug.\n\n-Bill\n\n(In reply to comment #4)\n> Why should each invocation result in the same behavior when each time you call\n> it, you add a new ConsoleAppender (by calling BasicConfigurator.configure() once\n> for reach pass which adds a new ConsoleAppender).  Each console appender appends\n> to the console.  When you have one, you get one line, two, two lines, three,\n> three lines, etc...  A Log4j configuration is stored statically in memory and,\n> as I explained before, configurations are additive; new configuration calls on\n> the logger repository don't blow away the old ones, they just get added on. \n> It's as if you had a config file that stated...\n> \n> <root>\n>     <level value=\"DEBUG\"/>\n>     <appender-ref ref=\"Console\"/>\n>     <appender-ref ref=\"Console\"/>\n>     <appender-ref ref=\"Console\"/>\n>     <!--....-->\n> </root>\n> \n> Would you expect one line or multiple lines of output here?  If you expect one,\n> you need to modify your expectations.\n> \n> Or are you saying, \"ok, I understand that, but I want Log4j to be smart about\n> it.\"  \"I want BasicConfigurator to detect whether there is already a\n> ConsoleAppender attached and, if so, use that one rather than adding a new one\n> to the root logger.\"  Fair enough, but I wouldn't consider this a bug.  And I\n> can guarantee that behavior won't change in the 1.2.xx series.  It is possible\n> that it might change in the 1.3.xx series.  I suggest that you post to the user\n> list asking about whether this sort of change in behavior is desired by other\n> users and, if so, whether a majority of committers agree.  If it is found that\n> users and committers agree that behavior should be changed, then this report can\n> be reopened.  Patches for the necesssary changes will help move things along as\n> well.\n> \n> Jake"}, {"count": 7, "tags": [], "bug_id": 37768, "is_private": false, "text": "At this point in the life of log4j 1.2, I don't see changing an established behavior.  It may not be as \nsmart as you would like, but any change would require careful consideration of what the \"smarter\" \nbehavior should be.\n\nFor example, if you did:\n\nBasicConfigurator.configure();\n((ConsoleAppender) LogManager.getRootLogger().getAllAppenders().nextElement()).setLayout(new \nPatternLayout(\"...\"));\nBasicConfigurator.configure();\n\nShould the second invocation leave the modified console appender from the first invocation or should it \nreplace it with the new appender?\n\nHow about if another appender had been added programatically.  Should a second invocation of \nBasicConfigurator.configure remove all appenders others than the ones that it expects to be there?\n\nAt this point in the life of log4j 1.2, those questions have been settled since any change could break \napplications that depend on the established behavior of configurators ignoring any previous \nconfiguration.  The caller is responsible for not calling the configurator multiple times if they do not \nwant multiple appenders.\n\nThe usability issue could be reviewed as part of the log4j 2.0 development, but I'd expect the \nconfigurators to be significantly different in log4j 2.0.  Likely BasicConfigurator would not exist in \nnative log4j 2.0, but would only exist in a compatibility layer and that would want to mimic the \nestablished behavior.\n\nIf there is no additional discussion, I will eventually mark this one as INVALID again.\n", "id": 91290, "time": "2006-07-13T20:25:04Z", "creator": "carnold@apache.org", "creation_time": "2006-07-13T20:25:04Z", "attachment_id": null}]
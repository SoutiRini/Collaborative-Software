[{"count": 0, "tags": [], "creator": "trejkaz@trypticon.org", "attachment_id": null, "is_private": false, "id": 130920, "time": "2009-10-06T15:48:49Z", "bug_id": 47950, "creation_time": "2009-10-06T15:48:49Z", "text": "I created some test cases to test case sensitivity in OLE2 files.\n\n    @Test\n    public void testPoiCaseInsensitivityInMemory() throws Exception\n    {\n        POIFSFileSystem fs = new POIFSFileSystem();\n        DirectoryEntry dir = fs.getRoot().createDirectory(\"A\");\n        dir.createDocument(\"B\", new ByteArrayInputStream(new byte[] { 0, 1, 2, 3, 4, 5 }));\n\n        DirectoryEntry dir2 = (DirectoryEntry) fs.getRoot().getEntry(\"a\");\n        DocumentEntry doc2 = (DocumentEntry) dir2.getEntry(\"b\");\n        assertArrayEquals(\"Wrong data read back\", new byte[] { 0, 1, 2, 3, 4, 5 },\n                          IOUtils.toByteArray(new DocumentInputStream(doc2)));\n    }\n    \n    @Test\n    public void testPoiCaseInsensitivityAfterReadingFromStorage() throws Exception\n    {\n        POIFSFileSystem fs = new POIFSFileSystem();\n        DirectoryEntry dir = fs.getRoot().createDirectory(\"A\");\n        dir.createDocument(\"B\", new ByteArrayInputStream(new byte[] { 0, 1, 2, 3, 4, 5 }));\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        fs.writeFilesystem(baos);\n\n        POIFSFileSystem fs2 = new POIFSFileSystem(new ByteArrayInputStream(baos.toByteArray()));\n        DirectoryEntry dir2 = (DirectoryEntry) fs2.getRoot().getEntry(\"a\");\n        DocumentEntry doc2 = (DocumentEntry) dir2.getEntry(\"b\");\n        assertArrayEquals(\"Wrong data read back\", new byte[] { 0, 1, 2, 3, 4, 5 },\n                          IOUtils.toByteArray(new DocumentInputStream(doc2)));\n    }\n\nBoth of these fail looking up \"a\" as it doesn't exist, but the comparison is supposed to be case insensitive according to available documentation.\n\nSpecifically, [MS-CFB] has the following to say about how entries in an OLE2 directory should be compared:\n\n(2.6.1 pg 23)\n\nWhen locating an object in the compound file except for the root storage, the directory entry name is compared using a special case-insensitive upper-case mapping, described in Red-Black Tree.\n\n(2.6.4 \"Red-Black Tree\" pg 26)\n\n  * For each UTF-16 code point, convert to upper-case with the Unicode Default Case Conversion\n    Algorithm, simple case conversion variant (simple case foldings), with the following notes.<2> \n\n  *  Unicode surrogate characters are never upper-cased, since they are represented by two UTF-16\n     code points, while the sorting relationship upper-cases a single UTF-16 code point at a time.\n\n  * Lowercase characters defined in a newer, later version of the Unicode standard can be upper-\n    cased by an implementation that conforms to that later Unicode standard.\n\nNote <2> goes into further detail on which version of Unicode is used to perform the folding:\n\n(pg 39)\n\nFor Windows XP and Windows Server 2003: The compound file implementation conforms to the Unicode 3.0.1 Default Case Conversion Algorithm, simple case folding (http://www.unicode.org/Public/3.1-Update1/CaseFolding-4.txt) with the following exceptions.\n(table omitted for now)\nFor Windows Vista and Windows Server 2008: The compound files implementation conforms to the Unicode 5.0 Default Case Conversion Algorithm, simple case folding (http://www.unicode.org/Public/5.0.0/ucd/CaseFolding.txt) with the following exceptions.\n(table omitted for now)\n\n\nReferences:\n\n[MS-CFB]: Compound File Binary File Format, Revision 0.01 (Wednesday, June 18, 2008)"}, {"count": 1, "tags": [], "text": "Created attachment 33042\nInitial work on changes for this bug, not fully done, some tests are now failing\n\nI tried to work on this a bit, but could not get it fully done yet, attached is the intermediate set of changes that i came up with.", "attachment_id": 33042, "id": 184775, "creation_time": "2015-08-27T06:25:18Z", "time": "2015-08-27T06:25:18Z", "creator": "dominik.stadler@gmx.at", "bug_id": 47950, "is_private": false}, {"count": 2, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "is_private": false, "id": 184776, "time": "2015-08-27T06:41:04Z", "bug_id": 47950, "creation_time": "2015-08-27T06:41:04Z", "text": "Hi, please use toUpperCase(Locale.ROOT) instead of just toUpperCase()!\n\nThe problem is otheriwse that it would fail in e.g. Turkish Locale, too. This applies to the whole POI base, but here it is explicit -> especially through its defined how the whole stuff needs to be uppercases. Unfortunately the unicode version used is depending on the JDK."}, {"count": 3, "text": "toUpperCase() is the devil... along with every other method in the JRE which has an overload where you can omit the locale, the file encoding, the time zone, etc. :(\n\nI also wish it were possible in Java to do Unicode operations against a specific version. This is something I encountered very early on when I wanted to make a Lucene tokeniser for grapheme clusters and realised that Java was going to screw me on backwards compatibility so I had to archive off my own copy of the table for all that data.\n\nI guess the same tactic could work here - save a copy of the uppercasing table. Microsoft even said there are special cases, so it is probably the easiest way to know it's correct. Depending on how you store it, the storage cost might not even be terribly bad. ICU uses some kind of trie encoding to store this sort of thing.", "bug_id": 47950, "attachment_id": null, "id": 184785, "time": "2015-08-27T11:38:13Z", "creator": "trejkaz@trypticon.org", "creation_time": "2015-08-27T11:38:13Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "text": "I would as a first step enable forbidden-api checks on POI, too (see https://github.com/policeman-tools/forbidden-apis). In Lucene/Solr/Elasticsearch and also TIKA this is the default since long time. This checker forbids all those methods which depend on local configuration.\n\nTrekjaz: Exactly I would wish that you could give unicode version, too. In ICU you can do this somehow (just don't remember how). We had an issue in Solr already: One test had a list of whitespace chars and that list changed in Unicode 7, as used by coming Java 9! Result was a failing test with preview builds, because we had a character which was no longer treated as whitespace in Java 9.", "attachment_id": null, "bug_id": 47950, "id": 184786, "time": "2015-08-27T13:01:46Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-08-27T13:01:46Z", "is_private": false}, {"count": 5, "tags": [], "creator": "apache@gagravarr.org", "text": "Forbidden APIs check now available on trunk, just run \"ant forbidden-apis-check\"\n\nI've also updated the dist task to run this and the rat check automatically\n\nQuite a lot of places we fail the forbidden APIs check though! Patches / fixes very much welcomed :)", "id": 184787, "time": "2015-08-27T13:24:52Z", "bug_id": 47950, "creation_time": "2015-08-27T13:24:52Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "id": 184806, "time": "2015-08-28T06:59:23Z", "bug_id": 47950, "creation_time": "2015-08-28T06:59:23Z", "is_private": false, "text": "Thanks, quite a lot of violations! Maybe to start with remove the deprecated violations (they are not so urgent). We may also turn on the \"jdk-system-out\", because a library like POI should never print anything to System.out/err (POI's own logger framework may need to be supressed). This also complains if you have e.printStackTrace() as generated by Eclipse!"}, {"count": 7, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 184807, "time": "2015-08-28T07:26:32Z", "bug_id": 47950, "creation_time": "2015-08-28T07:26:32Z", "is_private": false, "text": "(In reply to Uwe Schindler (ASF) from comment #6)\n> We may also turn on the \"jdk-system-out\", because a library like POI\n> should never print anything to System.out/err\n\nWe do ship a number of runnable debug / dev / information tools in the jars, so that's not quite universally true. They're all in specific packages though, so we could look at enabling it except for those?"}, {"count": 8, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "id": 184840, "time": "2015-08-28T22:27:20Z", "bug_id": 47950, "creation_time": "2015-08-28T22:27:20Z", "is_private": false, "text": "There are several possibilities: You can change the inner fileset of forbiddenapis to exclude some files, yes.\n\nIn Lucene we use an Annotation. An example is given in the forbiddenapis JAR file, but you dont want to depend on it in the code. So we defined our own @SuppressForbidden annotation in our own source code. The Ant config just gest the class name.\n\nhttp://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/SuppressForbidden.java\n\nAnd here it is enabled:\n\n  <!-- applies to both source and test code -->\n  <target name=\"-check-forbidden-all\" depends=\"-init-forbidden-apis,compile-core,compile-test\">\n    <forbidden-apis internalRuntimeForbidden=\"true\" suppressAnnotation=\"**.SuppressForbidden\" classpathref=\"forbidden-apis.allclasses.classpath\">\n      <bundledSignatures name=\"jdk-unsafe-${javac.target}\"/>\n      <bundledSignatures name=\"jdk-deprecated-${javac.target}\"/>\n      <signaturesFileSet dir=\"${common.dir}/tools/forbiddenApis\">\n        <include name=\"base.txt\"/>\n        <include name=\"lucene.txt\" if=\"forbidden-isLucene\"/>\n      </signaturesFileSet>\n      <fileset dir=\"${build.dir}/classes/java\" excludes=\"${forbidden-base-excludes}\"/>\n      <fileset dir=\"${build.dir}/classes/test\" excludes=\"${forbidden-tests-excludes}\" erroronmissingdir=\"false\"/>\n    </forbidden-apis>\n  </target>"}, {"count": 9, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "Note: Comment 2 - 8 are about forbidden api usage and not this bug per-se... Forbidden-API check is now fully implemented in POI as of 3.13.", "id": 185526, "time": "2015-09-29T08:54:56Z", "bug_id": 47950, "creation_time": "2015-09-29T08:54:56Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 59317, "text": "The problem appears when performing async requests to URLs that contain a space in URI path. I have an application that performs an XHR POST to http://localhost:8080/api/alarms/:id. When I set id to 'foo bar' I get an error:\n\n\njava.lang.IllegalStateException: Could not get HttpServletRequest URI: Illegal character in path at index 36: http://localhost:8080/api/alarms/foo bar\n\tat org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:99)\n\tat org.springframework.web.util.UriComponentsBuilder.fromHttpRequest(UriComponentsBuilder.java:282)\n\tat org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:814)\n\tat org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:71)\n\tat org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:503)\n\tat org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:954)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:870)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:648)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:720)\n\tat org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:639)\n\tat org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:605)\n\tat org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:229)\n\tat org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:391)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:208)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n\tat org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:392)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1715)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:652)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.net.URISyntaxException: Illegal character in path at index 36: http://localhost:8080/api/alarms/foo bar\n\tat java.net.URI$Parser.fail(URI.java:2848)\n\tat java.net.URI$Parser.checkChars(URI.java:3021)\n\tat java.net.URI$Parser.parseHierarchical(URI.java:3105)\n\tat java.net.URI$Parser.parse(URI.java:3053)\n\tat java.net.URI.<init>(URI.java:588)\n\tat org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:96)\n\t... 35 common frames omitted\n\n\nNon-async requests don't cause any problem. I use Spring Framework 4.2.5.\n\nDebugging revealed what happens:\n\nURI constructor expects an escaped URI (/api/alarms/foo%20bar). When AsyncDispatcher runs, it passes a ServletRequest implementation which getRequestURI() returns /api/alarms/foo bar. Non-async request handling passes an implementation that returns the escaped URI.\n\nAsyncContextImpl.dispatch() constructs a path from HttpServletRequest.getServletPath() and getPathInfo().\nThis path is used in ApplicationContext.getRequestDispatcher() where ApplicationDispatcher constructor is called with the path where it a request URI is expected.\n\nLater ApplicationDispatcher.wrapRequest() creates an ApplicationHttpRequest with a correct request URI but ApplicationDispatcher.doDispatch() calls wrequest.setRequestURI() passing a path not a URI.\n\nAs result the servlet handling the request receives an ApplicationHttpRequest with an incorrect requestURI field ( identical to servletPath field), despite including a RequestFacade in the request field that returns the correct (escaped) value in getRequestURI().\n\nI reproduced the bug on Tomcat 8.0.22, 8.0.30, 8.0.33 and 8.5.0 beta.", "id": 190214, "time": "2016-04-13T14:56:57Z", "creator": "derbeth@interia.pl", "creation_time": "2016-04-13T14:56:57Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 59317, "text": "See also bug 57559.\n\nI'm close to marking this bug as a duplicate of that one but I do want to review the detail of exactly what is going on first.", "id": 190494, "time": "2016-04-22T20:02:39Z", "creator": "markt@apache.org", "creation_time": "2016-04-22T20:02:39Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 190559, "time": "2016-04-26T11:52:31Z", "bug_id": 59317, "creation_time": "2016-04-26T11:52:31Z", "tags": [], "text": "A few more notes as I investigate this.\n\nAsync and non-async behaviours are currently the same.\n- Both expect the path used to obtain the dispatcher to be decoded. This behavior was confirmed with the Servlet EG.\n- Both return the unencoded URI for req.getRequestURI(). That strikes me as wrong."}, {"count": 3, "tags": [], "bug_id": 59317, "text": "The restriction the the request dispatcher (or the async dispatch) must be obtained with a decoded path has not changed. However, I have applied a fix that ensures that the result of the call to getRequestURI() after the dispatch returned an encoded URI.\n\nThis has been fixed in:\n9.0.x for 9.0.0.M5 onwards\n8.5.x for 8.5.1 onwards\n8.0.x for 8.0.34 onwards\n7.0.x for 7.0.70 onwards", "id": 190561, "time": "2016-04-26T13:41:30Z", "creator": "markt@apache.org", "creation_time": "2016-04-26T13:41:30Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "Hi,\n\nI believe this issue and the change brought with it are causing regressions in apps using Tomcat (such as XWiki).\n\nSee http://markmail.org/message/jwm5ip245empcghi\n\nDo you think you could review this issue in light of this? \n\nRight now, in XWiki land we're starting to have more and more uses reporting issues with Tomcat 7.0.69+ and 8.0.33+ (see http://jira.xwiki.org/browse/XWIKI-13556). And I cannot unencode the path passed to the RequestDispatcher since that makes it fail with other servlet containers... We're a bit stuck.\n\nThanks!", "is_private": false, "id": 192281, "creator": "vincent@massol.net", "time": "2016-07-10T21:42:57Z", "bug_id": 59317, "creation_time": "2016-07-10T21:42:57Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 59317, "is_private": false, "id": 193267, "time": "2016-08-22T16:05:26Z", "creator": "seandawson2015@gmail.com", "creation_time": "2016-08-22T16:05:26Z", "tags": [], "text": "So we ran into this too - with a customer who downloaded the latest rev of Tomcat 8.  Took us half the day yesterday and most of today to get to the bottom of it.  In troubleshooting, I tried using 7 instead but it was still failing there (and now I see that the change is in recent revs of all versions).\n\nIs there a setting we can use to revert to the previous behavior?  Or what's the best way to workaround/fix this?\n\nI'm not sure if it's in this particular set of changes, but if so, it looks like we might be able to turn it off...\n\nhttps://github.com/apache/tomcat/commit/eb195bebac8239b994fa921aeedb136a93e4ccaf"}, {"count": 6, "tags": [], "text": "The change done for this issue caused regression in the webapp and We wan into this of URL encoding. Few of the URLs that use : inside are getting encoded and the server is unable to locate the resource anymore.\n\ne.g. /data/parent:children/id is getting encoded as /data/parent%3Achildren/id. Due to this the app does not locate the resources on v7.0.70 as it was doing earlier. Is it possible to allow turning-off this URL-encoding to retain previous behavior?", "attachment_id": null, "id": 196857, "creator": "nkamate@gmail.com", "time": "2017-02-08T18:12:04Z", "bug_id": 59317, "creation_time": "2017-02-08T18:12:04Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 59317, "is_private": false, "id": 196859, "time": "2017-02-08T18:41:41Z", "creator": "markt@apache.org", "creation_time": "2017-02-08T18:41:41Z", "tags": [], "text": "Potential regressions should be followed up on the users list in the first instance and be accompanied by simple test cases (JSPs can be useful for this) that demonstrate the problem. That will enable us to identify where the problem lies."}]
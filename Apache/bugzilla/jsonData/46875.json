[{"count": 0, "tags": [], "bug_id": 46875, "attachment_id": null, "text": "When calling invalidate() on an valid HttpSession object CometConnectionManagerValve methods sessionDestroy(HttpSessionEvent se) and event(Request request, Response response, CometEvent event) are called concurrently.\n\nSo either a CometEvent with EventType.END and EventSubType.SESSION_END is never signaled via sessionDestroyed(...) or the HttpSession object has become invalid and the attribute holding comet requests can not be set or removed via event(...).\n\nI have configured CometConnectionManagerValve as a Valve element in context.xml and also as a Listener element in my applications web.xml.\n\n\n\nsee this stacktrace 'sessionDestroy() was a bit faster':\n\nAn exception or error occurred in the container during the request processing\njava.lang.IllegalStateException: removeAttribute: Session already invalidated\n\tat org.apache.catalina.session.StandardSession.removeAttribute(StandardSession.java:1206)\n\tat org.apache.catalina.session.StandardSession.removeAttribute(StandardSession.java:1181)\n\tat org.apache.catalina.session.StandardSessionFacade.removeAttribute(StandardSessionFacade.java:140)\n\tat org.apache.catalina.valves.CometConnectionManagerValve.event(CometConnectionManagerValve.java:335)\n\tat org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:179)\n\tat org.apache.catalina.valves.ValveBase.event(ValveBase.java:200)\n\tat org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:128)\n\tat org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:198)\n\tat org.apache.coyote.http11.Http11NioProcessor.event(Http11NioProcessor.java:750)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.event(Http11NioProtocol.java:653)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2081)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n\tat java.lang.Thread.run(Thread.java:637)", "id": 125623, "time": "2009-03-19T02:15:04Z", "creator": "holger.schott@tsi-mms.de", "creation_time": "2009-03-19T02:15:04Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 46875, "text": "I think you have a fair point, but not much can be done about it. These events are asynchronous, so the most likely is that it will be processed after the session is gone, and not much can be done about that.\n\nI think the calls to the session should be safer (wrapped with a try/catch).", "id": 125634, "time": "2009-03-19T11:23:19Z", "creator": "remm@apache.org", "creation_time": "2009-03-19T11:23:19Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "I've added try/catch blocks as per Remy's suggestion to trunk and proposed the fix for 6.0.x", "attachment_id": null, "bug_id": 46875, "id": 125791, "time": "2009-03-25T12:03:04Z", "creator": "markt@apache.org", "creation_time": "2009-03-25T12:03:04Z", "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "This has been fixed in 6.0.x and will be included in 6.0.20 onwards.", "id": 126577, "time": "2009-04-28T03:39:32Z", "bug_id": 46875, "creation_time": "2009-04-28T03:39:32Z", "is_private": false}, {"count": 4, "tags": [], "creator": "holger.schott@tsi-mms.de", "attachment_id": null, "text": "What about reliability? I can not rely on a CometEvent with EventSubType.SESSION_END. That's really bad.", "id": 127503, "time": "2009-05-29T14:12:48Z", "bug_id": 46875, "creation_time": "2009-05-29T14:12:48Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 46875, "text": "As Remy said, there isn't much that can be done due to the async nature of these events. If you can see a potential approach, then patches are always welcome.", "id": 128923, "time": "2009-07-16T13:45:42Z", "creator": "markt@apache.org", "creation_time": "2009-07-16T13:45:42Z", "is_private": false, "attachment_id": null}]
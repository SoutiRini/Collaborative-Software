[{"count": 0, "tags": [], "bug_id": 42044, "attachment_id": null, "is_private": false, "id": 101416, "time": "2007-04-04T06:20:32Z", "creator": "KetanPadegaonkar+apache-bugs@gmail.com", "creation_time": "2007-04-04T06:20:32Z", "text": "When doing long builds, ant build logs are generally logged using the XmlLogger.\n\nIn certain cases, say for example when the build is taking longer than usual,\nand needs to be killed/stopped, the XmlLogger does not flush contents to disk.\n\nIt would be nice if there is some sort of a composite logger than can chain any\nlogger along with the XmlLogger.\n\nThis approach would facilitate using an XmlLogger cases and say a defaultLogger\nin the special case I've mentioned above."}, {"count": 1, "tags": [], "bug_id": 42044, "attachment_id": null, "text": "This is the source code for a CompositeLogger that logs to a default logger, and\n the XmlLogger. This needs the environment variable ANT_LOG_PREFIX to be set\n(there's no better way I can think of)\n\n\n/*******************************************************************************\n * Copyright 2007 Ketan Padegaonkar http://ketan.padegaonkar.name\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\npackage name.padegaonkar.ketan.ant.logger;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\nimport org.apache.tools.ant.BuildEvent;\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.BuildLogger;\nimport org.apache.tools.ant.DefaultLogger;\nimport org.apache.tools.ant.XmlLogger;\n\n/**\n * @author Ketan Padegaonkar\n */\npublic class CompositeAntLogger implements BuildLogger {\n\n        private ArrayList       loggers;\n        private String          logPrefix;\n        private PrintStream     out;\n\n        public CompositeAntLogger() {\n                checkLogPrefix();\n                createLoggers();\n        }\n\n        public void setEmacsMode(boolean emacsMode) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.setEmacsMode(emacsMode);\n                }\n        }\n\n        public void buildFinished(BuildEvent event) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.buildFinished(event);\n                }\n        }\n\n        public void buildStarted(BuildEvent event) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.buildStarted(event);\n                }\n        }\n\n        public void messageLogged(BuildEvent event) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.messageLogged(event);\n                }\n\n        }\n\n        public void targetFinished(BuildEvent event) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.targetFinished(event);\n                }\n        }\n\n        public void targetStarted(BuildEvent event) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.targetStarted(event);\n                }\n        }\n\n        public void taskFinished(BuildEvent event) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.taskFinished(event);\n                }\n        }\n\n        public void taskStarted(BuildEvent event) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.taskStarted(event);\n                }\n        }\n\n        public void setMessageOutputLevel(int level) {\n                for (Iterator iterator = loggers.iterator(); iterator.hasNext();) {\n                        BuildLogger logger = (BuildLogger) iterator.next();\n                        logger.setMessageOutputLevel(level);\n                }\n        }\n\n        public void setOutputPrintStream(PrintStream output) {\n                // do nothing\n        }\n\n        public void setErrorPrintStream(PrintStream err) {\n                // do nothing\n        }\n\n        private void createLoggers() {\n                loggers = new ArrayList();\n                try {\n                        loggers.add(createDefaultLogger());\n                        loggers.add(createXmlLogger());\n                } catch (FileNotFoundException e) {\n                        throw new BuildException(\"The loggers could not open the\nfile\", e);\n                }\n        }\n\n        private void checkLogPrefix() {\n                logPrefix = System.getenv(\"ANT_LOG_PREFIX\");\n                if (logPrefix == null || logPrefix.trim().length() == 0)\n                        throw new BuildException(\"You need to set the\nenvironment variable ANT_LOG_PREFIX.\");\n        }\n\n        private DefaultLogger createDefaultLogger() throws FileNotFoundException {\n                DefaultLogger logger = new DefaultLogger();\n                out = new PrintStream(new FileOutputStream(logPrefix + \".txt\"));\n                logger.setOutputPrintStream(out);\n                logger.setErrorPrintStream(out);\n                return logger;\n        }\n\n        private XmlLogger createXmlLogger() throws FileNotFoundException {\n                XmlLogger logger = new XmlLogger();\n                out = new PrintStream(new FileOutputStream(logPrefix + \".xml\"));\n                logger.setOutputPrintStream(out);\n                logger.setErrorPrintStream(out);\n                return logger;\n        }\n}\n", "id": 101417, "time": "2007-04-04T06:23:11Z", "creator": "KetanPadegaonkar+apache-bugs@gmail.com", "creation_time": "2007-04-04T06:23:11Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 42044, "attachment_id": 21851, "is_private": false, "id": 115868, "time": "2008-04-25T05:30:19Z", "creator": "owen.boyle@swx.com", "creation_time": "2008-04-25T05:30:19Z", "text": "Created attachment 21851\nlsof output for various cases of logging \n\nlsof output indicating number of pipes used for each combination of: 3 apache versions (2.2.6, 2.2.8 unpatched, 2.2.8 patched) by 3 config cases (T+E logs in main config, T+E in 1 VH, t+E in 2 VHs)."}, {"count": 3, "tags": [], "creator": "owen.boyle@swx.com", "attachment_id": null, "id": 115869, "time": "2008-04-25T05:32:22Z", "bug_id": 42044, "creation_time": "2008-04-25T05:32:22Z", "is_private": false, "text": "Please ignore recent attachment - it went to the wrong bug... sorry.\n\n(why oh why does bugzilla go to a random bug after posting?)"}]
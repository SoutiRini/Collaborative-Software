[{"count": 0, "tags": [], "bug_id": 1179, "attachment_id": null, "id": 1677, "time": "2001-04-02T02:54:49Z", "creator": "Antti.Valtokari@iocore.fi", "creation_time": "2001-04-02T02:54:49Z", "is_private": false, "text": "The following code sample may be used reproduce infinite loop bug in\nJakarta-ORO v2.0.1. The bug exist with both the binary release and\nclasses compiled with Sun JDK 1.3 under Linux. The execution\nenvironment is Borland JBuilder v4.0 with the JDK 1.3 attached.\n\n  /* This regex performs the match as required. */\n  private static String EXP = \"%([a-z]*)\\\\(([a-z]*)\\\\)\";\n\n  /* Using any of the following regular expression causes infinite\nloop, if\n  the input string below contains three elements.\n\n  private static String EXP = \"%?%([a-z]*)\\\\(([a-z]*)\\\\)\";\n  private static String EXP = \"(%?)%([a-z]*)\\\\(([a-z]*)\\\\)\";\n  private static String EXP = \"(%)?%([a-z]*)\\\\(([a-z]*)\\\\)\";\n  private static String EXP = \"[%]?%([a-z]*)\\\\(([a-z]*)\\\\)\";\n  private static String EXP = \"([%]?)%([a-z]*)\\\\(([a-z]*)\\\\)\";\n  */\n\n  private void run() throws Exception {\n    PatternCompiler compiler = new Perl5Compiler();\n    PatternMatcher matcher = new Perl5Matcher();\n    Pattern pattern = compiler.compile(EXP);\n\n    /* Input with three elements that cause the infinite loop. */\n    PatternMatcherInput in = new\nPatternMatcherInput(\"%a(a):%a(b):%a(c)\");\n\n    /* Using this input does not cause any problems.\n    PatternMatcherInput in = new PatternMatcherInput(\"%a(a):%a(b)\");\n    */\n\n    while(matcher.contains(in, pattern)) {\n      MatchResult result = matcher.getMatch();\n\n      for(int group = 1; group < result.groups(); group++) {\n        System.out.println(group + \": \" + result.group(group));\n      }\n\n      System.out.println(\"----------------\");\n    }\n  }\n\nWhat I am trying to do is to match patterns in format %abc(def) from\ninput string and substitu them with other values. The bug caused the\nsubstitution fail with StringIndexBoundsException and it seems that\nthe problem is on the Perl5Matcher -class.\n\nIf the input string contains the tree matchable substrings, using any\nof the expressions having the sub-pattern for preceding precent -sign\ncauses the while -loop to never stop. If the first expression is used\nor the input contains only two matchable elements, the output is as\nexpected:\n\n1: a \n2: a \n- ---------------- \n1: a \n2: b \n- ---------------- \n1: a \n2: c \n- ---------------- \n\nThe infinite loop outputs as follows:\n\n1: a \n2: a \n- ---------------- \n1: a \n2: b \n- ---------------- \n1: a \n2: a \n- ---------------- \n1: a \n2: b \n- ---------------- \n1: a \n2: a \n- ----------------\n<and so on>"}, {"count": 1, "tags": [], "bug_id": 1179, "attachment_id": null, "id": 1686, "time": "2001-04-02T10:26:43Z", "creator": "dfs@apache.org", "creation_time": "2001-04-02T10:26:43Z", "is_private": false, "text": "This bug cannot be reproduced in the latest development release.\n"}, {"count": 2, "tags": [], "creator": "dfs@apache.org", "is_private": false, "text": "This bug is not actually an infinite loop bug.  It was introduced in the \nprocess of fixing the behavior of anchors ^ with respect to PatternMatcherInput\nand was fixed in December.  See following email:\n\nWell, technically, it's not really an infinite loop bug.  Perl5Matcher\ndoes not enter an infinite loop.  A loop that does \n  while(matcher.contains(input, pattern))\nwhere input is an instance of PatternMatcherInput will not exit because\nthe offset in input is not updated properly, not because the contains()\nmethod fails to return.  So Jon's CVS commit message of \"fixed infinite\nrecursion bug ...\" is misleading since there was no infinite recursion.\nAnyway, I'm just trying to  disambiguate, not criticize.\n\nI completely forgot to fix the problem over the weekend of Dec 16\n(on Dec 13 I promised to do so).  Sorry about that.  The problem\nis more general and is a result of the addition of the currentOffset\nparameter to the __interpret method.   beginOffset marks the beginning\nof the string whereas currentOffset marks where to start the pattern\nsearch.  When I fixed the PatternMatcherInput anchor bug, I didn't\nupdate the rest of the affected code.  That's the danger of fixing\na specific bug without taking into account the more general problem.\nIn any case, I fixed the more general problem and would appreciate it\nif people could verify the changes are correct.  We really\nneed a battery of regression tests ...\n", "id": 1687, "time": "2001-04-02T10:39:25Z", "bug_id": 1179, "creation_time": "2001-04-02T10:39:25Z", "attachment_id": null}]
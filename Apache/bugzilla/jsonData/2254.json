[{"count": 0, "tags": [], "bug_id": 2254, "attachment_id": null, "text": "I've Tomcat 3.2.1 running on Win2K and IIS as a secured (HTTPS) webserver. The \nservlet does flushBuffer() to keep sending the data to client as necessary. The \nclient is an applet. However, i have found out that the applet does not receive \nany data unless response output stream is closed i.e. calling flushBuffer has \nno effect.\n\nIt is to be noted that the problem happens only if the client is an applet. I \nuse URL and URLConnection objects in the applet to connect to the servlet.\n\nThe same piece of code works fine when servlet is hosted on a normal (HTTP) IIS \nserver with Tomcat 3.2.1. The problem is only on the secured server.\n\nTo verify that this is really a bug, i wrote a simple DateTimeServlet that \nsends a datetime string to the client every 1 second. Following is a sample \ncode for this servlet:\n\npublic class DateTimeServlet extends HttpServlet {\n    \n    public void doPost (        \n        HttpServletRequest   request,\n        HttpServletResponse  response ) throws ServletException, IOException\n    {\n        // delegate this to doGet\n        doGet (request, response);\n    }\n    \n    public void doGet (\n        HttpServletRequest   request,\n        HttpServletResponse  response ) throws ServletException, IOException\n    {\n        // set the content type for response\n        response.setContentType(\"text/plain\");\n        \n        for (int i = 0; i < 25; i++)\n        {\n            try\n            {\n                Thread.sleep(1000);\n            }\n            catch (InterruptedException ie)\n            {\n                // ignore\n            }\n            \n            String datetime = (new Date()).toString();\n            \n            response.getOutputStream().write (datetime.getBytes());\n            response.getOutputStream().write (\"\\n\".getBytes());\n            response.flushBuffer();            \n        }\n    }        \n\nAnd here is the code for init() method of applet DateTimeApplet:\n\npublic void init()\n{\n ....\n\ttry\n\t{\n\t    URL urlDocumentBase = this.getDocumentBase();\n\t    String strUrlServlet = urlDocumentBase.getProtocol() + \"://\" +  \nurlDocumentBase.getHost() + \"/examples/servlet/DateTimeServlet\";\n\n\t    URL urlServlet = new URL (strUrlServlet);\n\t    URLConnection urlcon = urlServlet.openConnection();\n\t        \n\t    urlcon.setDoInput(true);\n\t    urlcon.setDoOutput(true);\n\t    urlcon.setUseCaches(false);\n\t        \n\t    urlcon.getOutputStream().write(\"test 123\".getBytes());\n\t    urlcon.getOutputStream().close();\n\t        \n\t    System.out.println (\"sent request to servlet\");\n\t        \n\t    byte[] bta = new byte[128];\n\t    int count = -1;\n\t    while ((count = urlcon.getInputStream().read (bta)) != -1)\n\t    {\n\t        String str = new String (bta, 0, count);\n\t        System.out.println (str);\n\t    }\n\t}\n\tcatch(IOException ioe)\t    \n\t{\n\t    System.out.println (ioe.getMessage());\n\t    ioe.printStackTrace();\n\t}\n}\n\n\nAny help is very much appreciated.\nThanks,\nnagraj", "id": 3131, "time": "2001-06-20T12:53:55Z", "creator": "nagrajc@tradesoft.com", "creation_time": "2001-06-20T12:53:55Z", "is_private": false}, {"count": 1, "tags": [], "creator": "cmanolache@yahoo.com", "text": "In your configuration, tomcat should behave the same - IIS is the only piece\nthat is doing something different ( ssl or not ). I don't think it's a tomcat \nbug, it may be that IIS is cashing the data and sends only blocks ( for\nencryption efficiency ) ? Could you check the same thing with large blocks of\ndata ( say > 16 K ) ?\n\nWe could add a flush in mod_jk, but in a later version. ", "id": 4803, "time": "2001-08-24T16:42:42Z", "bug_id": 2254, "creation_time": "2001-08-24T16:42:42Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 53523, "text": "Hi,\n\nThe properties rollbackOnReturn and commitOnReturn, which are critical for cleaning up connections after they are used and returned to the pool, does not work when the defaultAutoCommit property is not set or when it is set to true. The code segment at ConnectionPool class has this,\n\n   protected boolean terminateTransaction(PooledConnection con) {\n        try {\n            if (con.getPoolProperties().getDefaultAutoCommit()==Boolean.FALSE) {\n            ....\n\nThe full logic is wrapped in that first if statement, and as I see, that is not correct. Because, the actual default auto commit value when we don't set this property can either be autoCommit true or false, which depends on the database driver. And also, even when we have a default setting provided, the user has the freedom to change the autoCommit flag to either true or false at the beginning when they get the connection from the pool. So we should not be reading the pool properties in this place, but just check the current live connection's autoCommit value and act accordingly. So I suppose the fix should be to simply remove the outer if statement. \n\nCheers,\nAnjana.", "id": 160525, "time": "2012-07-09T11:21:38Z", "creator": "lafernando@gmail.com", "creation_time": "2012-07-09T11:21:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "text": "That is intentional. It is for performance reasons. calling getAutoCommit on a connection is a round trip to the database and can be extremely slow.\n\nIf you want something like a fool proof commit, you can either use \n\ndefaultAutoCommit=\"true\" and then configure the ConnectionState interceptor. This achieves what you want, since setAutoCommit(true) will reset any transactions.\n\nalternatively, you can write your own interceptor that looks like to achieve exactly that.\n\npackage org.apache.tomcat.jdbc.pool.interceptor;\n\nimport java.lang.reflect.Method;\n\nimport org.apache.tomcat.jdbc.pool.ConnectionPool;\nimport org.apache.tomcat.jdbc.pool.JdbcInterceptor;\nimport org.apache.tomcat.jdbc.pool.PooledConnection;\n\npublic class SampleInterceptor extends JdbcInterceptor {\n\n    private volatile PooledConnection con = null;\n\n    @Override\n    public void reset(ConnectionPool parent, PooledConnection con) {\n        this.con = con;\n    }\n\n    @SuppressWarnings(\"finally\")\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        PooledConnection pc = this.con;\n        try {\n            if (compare(CLOSE_VAL,method)) {\n                this.con = null;\n                if (pc!=null) {\n                    if (!pc.getConnection().getAutoCommit()) {\n                        pc.getConnection().commit();\n                        pc.getConnection().setAutoCommit(true);\n                    }\n                }\n            }\n        } catch (Exception x) {\n            //log error of commit\n        } finally {\n            return super.invoke(proxy, method, args);\n        }\n\n    }\n}", "bug_id": 53523, "is_private": false, "id": 160545, "time": "2012-07-09T17:57:35Z", "creator": "fhanik@apache.org", "creation_time": "2012-07-09T17:57:35Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "is_private": false, "id": 160547, "time": "2012-07-09T19:34:09Z", "bug_id": 53523, "creation_time": "2012-07-09T19:34:09Z", "text": "The Javadoc for PoolConfiguration#setCommitOnReturn and PoolConfiguration#setRollbackOnReturn both say that:\n\n  * This parameter is only looked at if the {@link java.sql.Connection#getAutoCommit()} returns false\n\nThis is true, but is not the whole truth.\nPlease could the Javadoc be updated accordingly?"}, {"count": 3, "attachment_id": null, "bug_id": 53523, "is_private": false, "id": 160548, "time": "2012-07-09T19:40:12Z", "creator": "fhanik@apache.org", "creation_time": "2012-07-09T19:40:12Z", "tags": [], "text": "Docs updated in \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=53523\n\nr1359362\n\nonline docs are already correct\nhttp://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html"}, {"count": 4, "tags": [], "creator": "lafernando@gmail.com", "attachment_id": null, "id": 160550, "time": "2012-07-09T20:28:54Z", "bug_id": 53523, "creation_time": "2012-07-09T20:28:54Z", "is_private": false, "text": "Hi Filip,\n\nThank you for your detailed response. For my requirement, I'm guessing I will have to use the custom JDBC interceptor approach. Because, in the connection pool usage, the applications which use it, the user may set autoCommit to false and commit at the end, and in a finally block, he will close the connection. So if there was an error and the execution just jumps to the finally and closes the connection, the commit won't be called and the connection will just return to the pool without being committed or rollbacked. And as for having defaultAutoCommit=true and using the ConnectioState interceptor, I'm a bit uneasy in keeping dirty connections in the pool :) .. How I got this situation was with MySQL/InnoDB, where they use REPEATABLE_READ transaction isolation level by default, which causes unexpected situations like a written value cannot be read by another connection and so on, if  the connections aren't properly committed/rollbacked. \n\nCheers,\nAnjana."}, {"count": 5, "tags": [], "text": "Hi, I think this issue should be reopened.\nrollbackOnReturn seems to me useless in current state. I don't agree with performance reason argument. If you don't want use this feature because of performance, you shouldn't enable it in the first place (instead of \"tomcat will disable it for you, because we know better than you\" approach). If you enable it, you should enable ConnectionState interceptor or pay performance cost.\n\nIf you really want to protect people before themselves, you can enable this only, if ConnectionState interceptor is enabled.\n\nPavel Cibulka", "attachment_id": null, "bug_id": 53523, "id": 163485, "time": "2012-11-16T18:02:07Z", "creator": "pavelcibulka@gmail.com", "creation_time": "2012-11-16T18:02:07Z", "is_private": false}]
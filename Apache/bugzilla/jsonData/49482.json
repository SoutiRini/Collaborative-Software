[{"count": 0, "attachment_id": 25626, "creator": "jtjeferreira@gmail.com", "text": "Created attachment 25626\nJMS Queue Receiver Sampler and GUI\n\nLike there is a sampler for subscribing and publishing to topics, a receiver for queues is of interest. Although the queue sender can be accomplished using the JMS p2p sampler, the receiver cannot.\n\nThis was very inspired in the existing topic subscriber...", "id": 137783, "time": "2010-06-21T15:23:23Z", "bug_id": 49482, "creation_time": "2010-06-21T15:23:23Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 49482, "is_private": false, "text": "After generalising all the Topic and Queue interfaces, it turns out that the current JMS Subscriber will just as easily support Queue names as well as Topic names.\n\nThese changes are in nightly builds from 957067.\n\nAny chance you could test against your JMS installation?", "id": 137831, "time": "2010-06-22T18:46:05Z", "creator": "sebb@apache.org", "creation_time": "2010-06-22T18:46:05Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 49482, "text": "Hi\n\n(In reply to comment #1)\n> After generalising all the Topic and Queue interfaces, it turns out that the\n> current JMS Subscriber will just as easily support Queue names as well as Topic\n> names.\n> \n> These changes are in nightly builds from 957067.\n> \n> Any chance you could test against your JMS installation?\n\nThe refactoring you did is very nice but the current lifecycle of the ReceiveSubscriber is not suited for queues semantics altought it works with topics.\n\nConsider the case where i have a testplan with 2 users and a queue subscriber waiting for 1 message. The expected output was that each subscriber received 1 message but what happens is that one subscriber receives both messages and the other none. This happens because the subscriber isn't closed after it received the expected number of messages.\n\nThe patch i submitted considered this problem by closing the subscriber in the end of the sample instead of the end of the test as is implemented now. I used ClientPool.removeClient(this.RECEIVER) to achieve this.\n\nI think this behaviour can be used with topics due to their publish/subscribe semantics.\n\nA cosmetic note: rename some variables to abstract the transition from topics to destinations and subscriber to message consumer. Same applies to the name of the sampler and the labels of the GUI", "id": 137837, "time": "2010-06-23T07:22:20Z", "creator": "jtjeferreira@gmail.com", "creation_time": "2010-06-23T07:22:20Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 49482, "text": "(In reply to comment #2)\n> Hi\n> \n> (In reply to comment #1)\n> > After generalising all the Topic and Queue interfaces, it turns out that the\n> > current JMS Subscriber will just as easily support Queue names as well as Topic\n> > names.\n> > \n> > These changes are in nightly builds from 957067.\n> > \n> > Any chance you could test against your JMS installation?\n> \n> The refactoring you did is very nice but the current lifecycle of the\n> ReceiveSubscriber is not suited for queues semantics altought it works with\n> topics.\n> \n> Consider the case where i have a testplan with 2 users and a queue subscriber\n> waiting for 1 message. \n\nNot sure I understand the real-life use case for this.\nHow do the users each get their message, and only theirs?\n\n> The expected output was that each subscriber received 1\n> message but what happens is that one subscriber receives both messages and the\n> other none. This happens because the subscriber isn't closed after it received\n> the expected number of messages.\n> \n> The patch i submitted considered this problem by closing the subscriber in the\n> end of the sample instead of the end of the test as is implemented now. I used\n> ClientPool.removeClient(this.RECEIVER) to achieve this.\n\nThere probably does need to be different behaviour for queues, but I'm not convinced that is the way to go.\n\nWhat should happen to messages sent to a queue when no sampler is active?\n\nI think this needs to be discussed further on the JMeter user list.\n\n> I think this behaviour can be used with topics due to their publish/subscribe\n> semantics.\n\n> A cosmetic note: rename some variables to abstract the transition from topics\n> to destinations and subscriber to message consumer. Same applies to the name of\n> the sampler and the labels of the GUI\n\nAlready in progress.", "id": 137838, "time": "2010-06-23T07:58:37Z", "creator": "sebb@apache.org", "creation_time": "2010-06-23T07:58:37Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "jtjeferreira@gmail.com", "attachment_id": null, "is_private": false, "id": 137842, "time": "2010-06-23T09:15:24Z", "bug_id": 49482, "creation_time": "2010-06-23T09:15:24Z", "text": "(In reply to comment #3)\n> (In reply to comment #2)\n> > Hi\n> > \n> > (In reply to comment #1)\n> > > After generalising all the Topic and Queue interfaces, it turns out that the\n> > > current JMS Subscriber will just as easily support Queue names as well as Topic\n> > > names.\n> > > \n> > > These changes are in nightly builds from 957067.\n> > > \n> > > Any chance you could test against your JMS installation?\n> > \n> > The refactoring you did is very nice but the current lifecycle of the\n> > ReceiveSubscriber is not suited for queues semantics altought it works with\n> > topics.\n> > \n> > Consider the case where i have a testplan with 2 users and a queue subscriber\n> > waiting for 1 message. \n> \n> Not sure I understand the real-life use case for this.\n> How do the users each get their message, and only theirs?\n\nThis use case isn't the best because i cant guarantee that each user gets their message. However instead of having two parallel users, i could have two sequential tests that invoke the application and waits for the message and the queue and repeats.\n\nThe problem is that the 1st receiver sampler gets 2 messages and the 2nd receiver none.\n> \n> > The expected output was that each subscriber received 1\n> > message but what happens is that one subscriber receives both messages and the\n> > other none. This happens because the subscriber isn't closed after it received\n> > the expected number of messages.\n> > \n> > The patch i submitted considered this problem by closing the subscriber in the\n> > end of the sample instead of the end of the test as is implemented now. I used\n> > ClientPool.removeClient(this.RECEIVER) to achieve this.\n> \n> There probably does need to be different behaviour for queues, but I'm not\n> convinced that is the way to go.\n> \n> What should happen to messages sent to a queue when no sampler is active?\n\nThe message stays in the queue, no problem... The next receiver will get it...\n\n> \n> I think this needs to be discussed further on the JMeter user list.\n> \n> > I think this behaviour can be used with topics due to their publish/subscribe\n> > semantics.\n> \n> > A cosmetic note: rename some variables to abstract the transition from topics\n> > to destinations and subscriber to message consumer. Same applies to the name of\n> > the sampler and the labels of the GUI\n> \n> Already in progress."}, {"count": 5, "tags": [], "creator": "jtjeferreira@gmail.com", "attachment_id": 25630, "is_private": false, "id": 137843, "time": "2010-06-23T09:28:47Z", "bug_id": 49482, "creation_time": "2010-06-23T09:28:47Z", "text": "Created attachment 25630\nSample Testplan\n\nSample test plan that describes my use case"}, {"count": 6, "attachment_id": 25631, "bug_id": 49482, "text": "Created attachment 25631\nLog of the execution of previous test plan\n\nThis log shows that the test plan is stopped waiting for the 2nd rceiver... I then stop the test and the exception occurs when closing connection.", "id": 137844, "time": "2010-06-23T09:32:03Z", "creator": "jtjeferreira@gmail.com", "creation_time": "2010-06-23T09:32:03Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 49482, "text": "I've uploaded a new nightly, r957393.\n\nThis uses a different strategy for the receive() client option.\nInstead of running a background thread which polls for messages and stores them on a queue, the code now only fetches messages on demand.\n\nThis should improve the behaviour with multiple samplers accessing the same queue.\n\nThe onMessage() strategy is unchanged, so that is likely to cause problems when using Queues. However it should work fine for Topics.\n\nPerhaps you can try your test case with the new code?\n\nThe nightly also includes better timeout handling.", "id": 137858, "time": "2010-06-23T20:32:08Z", "creator": "sebb@apache.org", "creation_time": "2010-06-23T20:32:08Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "jtjeferreira@gmail.com", "attachment_id": null, "is_private": false, "id": 137873, "time": "2010-06-24T06:45:33Z", "bug_id": 49482, "creation_time": "2010-06-24T06:45:33Z", "text": "Hi\n\nI'm testing the new trunk. However it seems it is not working either. I cant give it much attention now, but I have set some debug messages and i think the problem is now more JMS related. It looks like when 2 consumers are connected (although not calling receive twice) the 2nd message is not received by the 2nd consumer. I will investigate this later. The weird think is I cant reproduce this problem all the time :s\n\nWhy not call org.apache.jmeter.protocol.jms.client.ReceiveSubscriber.close() in the end of the sample? For example using something like org.apache.jmeter.protocol.jms.client.ClientPool.removeClient(Closeable)?\n\n(In reply to comment #7)\n> I've uploaded a new nightly, r957393.\n> \n> This uses a different strategy for the receive() client option.\n> Instead of running a background thread which polls for messages and stores them\n> on a queue, the code now only fetches messages on demand.\n> \n> This should improve the behaviour with multiple samplers accessing the same\n> queue.\n> \n> The onMessage() strategy is unchanged, so that is likely to cause problems when\n> using Queues. However it should work fine for Topics.\n> \n> Perhaps you can try your test case with the new code?\n> \n> The nightly also includes better timeout handling."}, {"count": 9, "tags": [], "bug_id": 49482, "text": "(In reply to comment #8)\n> Hi\n> \n> I'm testing the new trunk. However it seems it is not working either. \n\nWorks OK for me with Active MQ. I can share queued messages successfully between samplers using the receive() method.\n\n> Why not call org.apache.jmeter.protocol.jms.client.ReceiveSubscriber.close() in\n> the end of the sample?\n\nBecause that will destroy the connection, which will have to be re-established. Almost certain to lose messages between samples.\n\nHowever, it might help to call stop() at the end, and start() at the beginning of each sample.", "id": 137874, "time": "2010-06-24T06:55:58Z", "creator": "sebb@apache.org", "creation_time": "2010-06-24T06:55:58Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "text": "Nightl builds from 958003 have a new option on the Subscriber GUI which can be used to stop/start the connector between samples.\n\nHopefully that will be enough.\n\nPlease report how you get on.", "is_private": false, "bug_id": 49482, "id": 137905, "time": "2010-06-25T11:37:06Z", "creator": "sebb@apache.org", "creation_time": "2010-06-25T11:37:06Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 49482, "text": "Hi sorry for taking so long but I was away.\nAs you said that alteration for stopping is enough for me. Thanks for the support.\n\n(In reply to comment #10)\n> Nightl builds from 958003 have a new option on the Subscriber GUI which can be\n> used to stop/start the connector between samples.\n> \n> Hopefully that will be enough.\n> \n> Please report how you get on.", "id": 138164, "time": "2010-07-05T07:45:35Z", "creator": "jtjeferreira@gmail.com", "creation_time": "2010-07-05T07:45:35Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "is_private": false, "id": 138166, "time": "2010-07-05T08:38:11Z", "bug_id": 49482, "creation_time": "2010-07-05T08:38:11Z", "text": "OK, let's close this for now.\n\nIf further problems arise, please re-open with details."}]
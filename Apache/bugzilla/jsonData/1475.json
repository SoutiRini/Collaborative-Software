[{"count": 0, "tags": [], "bug_id": 1475, "is_private": false, "text": "Hello,\nWe have a jsp which calls upon a static method on a java class.\nThis static method contains a call to a native method.\nWe are able to load the DLL via System.loadLibrary without error, but when we \ninvoke the native method we get UnsatisfiedLinkError (stack trace provided \nbelow)\n\nAm I missing some configuration setting?  The file \"tomcat.properties\" does not \nappear to be used as I had to have the location of the DLL in my system path \nfor the DLL load to work.  Either way, any help on this would be greatly \nappreciated.  Thanks, James.\n\n\ntrace:\n\nJNIVAULT ENVAccess begin\nLibrary JNIVAULTCPP successfully loaded\nAll done.\njava.lang.UnsatisfiedLinkError: getEnv\n        at \ncom.dassault_systemes.enovaultclientjava.vdk0vaultclient.VaultProperties.<init>\n(Compiled Code)\n        at com.dassault_systemes.enovia.servlet.ServletProperties.getProperty\n(ServletProperties.java:79)\n        at Authentication.jsp.ev5Logon_1._jspService(ev5Logon_1.java:57)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:119)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java)\n        at org.apache.tomcat.facade.ServletHandler.doService\n(ServletHandler.java:500)\n        at org.apache.tomcat.core.Handler.service(Compiled Code)\n        at org.apache.tomcat.facade.ServletHandler.service\n(ServletHandler.java:448)\n        at org.apache.tomcat.core.ContextManager.internalService(Compiled Code)\n        at org.apache.tomcat.core.ContextManager.service(Compiled Code)\n        at org.apache.tomcat.modules.server.Http10Interceptor.processConnection\n(Http10Interceptor.java:143)\n        at org.apache.tomcat.util.net.TcpWorkerThread.runIt(Compiled Code)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(Compiled Code)\n        at java.lang.Thread.run(Compiled Code)", "id": 2058, "time": "2001-04-24T07:10:03Z", "creator": "james_thomas@enovia.com", "creation_time": "2001-04-24T07:10:03Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 1475, "text": "A workaround has been found (many thanks to the solution providers):\nhttp://forum.java.sun.com/read/16779536/qA-adF1WC9o8AAYoJ#LR\n\n\nIt seems, that the class loader used to load the DLL and the class loader used \nto load the JAR for the web application are different.  Thus, the DLL loads ok, \nbut the method invocation fails.\n\nSolution: move the class defining the native method to the java CLASSPATH.  For \nme, I move the JAR file with the native call to the \"lib\" directory of tomcat.\n\nI still think this is a bug in tomcat as the solution does not support the use \nof \"war\" files for deployment.\n\n", "id": 2061, "time": "2001-04-24T07:55:22Z", "creator": "james_thomas@enovia.com", "creation_time": "2001-04-24T07:55:22Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 1475, "attachment_id": null, "text": "WARs are not required to support JNI ( which are platform-specific ). \nThere is nothing we can change in tomcat - we are required by spec to use a \nseparate loader for the WAR. \nNote - in a sandbox you are not able to load native libs, another reason to\nkeep it outside the war. ", "id": 2072, "time": "2001-04-24T15:06:52Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-04-24T15:06:52Z", "is_private": false}]
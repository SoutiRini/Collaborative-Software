[{"count": 0, "tags": [], "bug_id": 43196, "attachment_id": null, "text": "While trying to protect some files for access to certain groups of users, we\nfound that the \"Require\" statement was not honored.\n\nWe are using apache with mod_ldap and mod_authnz_ldap.\n\nIn LDAP we have some groups defined.\n\nIn the main configuration file we have\n\n  AllowOverride AuthConfig\n\nIn our .htaccess file we have:\n\nAuthType                        basic\nAuthName                        \"Restricted\"\nAuthBasicProvider               ldap\nAuthLDAPGroupAttribute          memberUid\nAuthLDAPGroupAttributeIsDN      off\nAuthLDAPURL                    \nldap://localhost:389/dc=local?uid?sub?(employeeType=active)\n\n<FilesMatch \"\\.tgz$\">\n require ldap-group cn=images,ou=1x,ou=groups,dc=local\n</FilesMatch>\n\nIf a user belongs to the given group, the user can see and download the files.\n\nHowever, if a user does NOT belong to the group, the user cannot see those .tgz\nfiles but she CAN download them if the filenames are known to her.\n\nWe believe this is not a proper behavior, as the documentation states that the\nusers belonging to the \"images\" group should not be able to access those files.", "id": 107150, "time": "2007-08-23T03:42:36Z", "creator": "jesus.climent@gmail.com", "creation_time": "2007-08-23T03:42:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 43196, "attachment_id": null, "is_private": false, "id": 107151, "time": "2007-08-23T04:21:22Z", "creator": "jesus.climent@gmail.com", "creation_time": "2007-08-23T04:21:22Z", "text": "Version is 2.2.3-4 from Debian etch."}, {"count": 2, "tags": [], "bug_id": 43196, "attachment_id": null, "text": "We found a bit of more information while testing with a non-production server:\n\nIf the authentication happens previously (on a parent directory) before\naccessing the non-accessible files, apache allows the user to get that file.\n\nIf previously there is no authentication happening, and it occurs at the moment\nof accessing the required file, the access is then denied.", "id": 107154, "time": "2007-08-23T04:36:33Z", "creator": "jesus.climent@gmail.com", "creation_time": "2007-08-23T04:36:33Z", "is_private": false}, {"count": 3, "tags": [], "creator": "nick@webthing.com", "is_private": false, "id": 107157, "creation_time": "2007-08-23T05:23:16Z", "time": "2007-08-23T05:23:16Z", "bug_id": 43196, "text": "(In reply to comment #2)\n> We found a bit of more information while testing with a non-production server:\n> \n> If the authentication happens previously (on a parent directory) before\n> accessing the non-accessible files, apache allows the user to get that file.\n\nSo the user is already authenticated with the server, and the browser sends its\ncredentials.  That's how HTTP authentication works.\n\n> If previously there is no authentication happening, and it occurs at the moment\n> of accessing the required file, the access is then denied.\n\nPresumably when you say \"denied\" you mean a 401 response.", "attachment_id": null}, {"count": 4, "tags": [], "creator": "jesus.climent@gmail.com", "text": "So adding on a subdirectory a .htaccess file which includes a\n\n<FilesMatch \"\\.tgz$\">\n Require ldap-group cn=mygroup\n</FilesMatch>\n\ndoes not add a requirement to the user for accessing those .tgz files as \"the\nuser has to belong to that group\" ?? (For that subdirectory and all the\ndirectories under that one)", "id": 107158, "time": "2007-08-23T06:36:14Z", "bug_id": 43196, "creation_time": "2007-08-23T06:36:14Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "nick@webthing.com", "is_private": false, "id": 107160, "creation_time": "2007-08-23T07:31:14Z", "time": "2007-08-23T07:31:14Z", "bug_id": 43196, "text": "Are you saying that it allows access for users who are authenticated with the\nserver but don't match the LDAP Require?\n\nOK, I don't know enough about LDAP to follow up on this.  Reassigning\n(hopefully) to those who do.", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 43196, "text": "(In reply to comment #5)\n> Are you saying that it allows access for users who are authenticated with the\n> server but don't match the LDAP Require?\n\nExactly. Users that are allowed to login within the big scope are also allowed\nto download the file eventhough they do not match the Require, that is, dont\nbelong to the LDAP group.", "id": 107162, "time": "2007-08-23T08:01:15Z", "creator": "jesus.climent@gmail.com", "creation_time": "2007-08-23T08:01:15Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 43196, "is_private": false, "id": 107163, "time": "2007-08-23T08:23:10Z", "creator": "bnicholes@apache.org", "creation_time": "2007-08-23T08:23:10Z", "tags": [], "text": "I would suggest taking a look at the ldap cache to see what it says about \ngroup membership matching \nhttp://httpd.apache.org/docs/2.2/mod/mod_ldap.html#cache\n"}, {"count": 8, "attachment_id": null, "bug_id": 43196, "is_private": false, "id": 107171, "time": "2007-08-23T10:16:25Z", "creator": "jesus.climent@gmail.com", "creation_time": "2007-08-23T10:16:25Z", "tags": [], "text": "I read what it says about groups and i believe it does not apply.\n\nAgain, the problem is that a user that exists in LDAP can retrieve a file that\nis under the scope of a regular expression on a <FilesMatch> entry with a\n\"Require ldap-group\" that is not matched because the user does not belong to\nsuch LDAP group.\n\nThe problem occurs even when the server is restarted (thus the caches are cleared)."}, {"count": 9, "tags": [], "creator": "jesus.climent@gmail.com", "text": "Created attachment 20722\nDebug output\n\nThis log shows that when a directory has been accesses using authentication,\naccessing a non-authorized file is granted because there is no authorization\nphase. The non-authorized files are not shown because there is an authorization\nphase during the view of the directory and access to view those is denied.\n\nHowever, when the file is accesses from a directory where no authorization has\nhappened, the file access is denied during the authorization phase.\n\nSo, summarizing, it seems there is an error in the process logic that allows a\nuser to access a non-authorized file when the user has been previously\nauthenticated to access the directory where the file resides.", "id": 107346, "time": "2007-08-28T08:37:28Z", "bug_id": 43196, "creation_time": "2007-08-28T08:37:28Z", "is_private": false, "attachment_id": 20722}, {"count": 10, "tags": [], "bug_id": 43196, "is_private": false, "text": "Created attachment 20723\napache config \"<location />\" block", "id": 107349, "time": "2007-08-28T09:05:09Z", "creator": "jesus.climent@gmail.com", "creation_time": "2007-08-28T09:05:09Z", "attachment_id": 20723}, {"count": 11, "attachment_id": null, "bug_id": 43196, "text": "I believe this has nothing to do with LDAP, and is a configuration error.\n\nThe configuration includes an authn/authz block in <Location /> as well as one\nin .htaccess (in a <FilesMatch> section). Since <Location> is merged after\n<FilesMatch>, the <Location /> block will be at the end of the merge.\n\nIt should be noted that the merge of \"Require\" directives simply uses the\nRequire directives of the last-merged block which contains a Require.\nConsequently, it is not possible to build up Requires by merging two\nblocks.\n\nAlthough the <Location /> block presented above has a 'Require ldap-attribute'\ndirective in it, I suspect that the configuration actually used to generate\nthe debugging output did not have that directive, and that the only require\ndirective in the <Location /> block was \"require valid-user\". That's\nconsistent with the debugging output, and demonstrates that the <Location />\nblock was merged last (in the second debugging run, with a direct url to the\nfile); the request succeeds since the userid has been authenticated.\n\nThis leaves the question of why mod_autoindex denied access to the file when\ncreating a directory listing. The answer is that mod_autoindex does a\nap_sub_req_lookup_dirent() to check the file; as far as I know, that version\nof sub_req does not do a <Location /> merge.\n\nIf there is a bug here, it's a documentation bug; the documentation for\n<Location> correctly states:\n  Use <Location> to apply directives to content that lives outside\n  the filesystem. For content that lives in the filesystem, use\n  <Directory> and <Files>.\n\nBut then goes on to say:\n  An exception is <Location />, which is an easy way to apply\n  a configuration to the entire server.\n\nAs can be seen here, attempts to use <Location /> for the purpose of\napplying a default configuration to the entire server are likely to\nfail, and the documentation possibly should be tightened up.", "id": 107355, "time": "2007-08-28T10:52:51Z", "creator": "rici@ricilake.net", "creation_time": "2007-08-28T10:52:51Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 43196, "attachment_id": null, "is_private": false, "id": 107366, "time": "2007-08-29T01:50:44Z", "creator": "stefano.mosconi@gmail.com", "creation_time": "2007-08-29T01:50:44Z", "text": "(In reply to comment #11)\nHi Rici,\n\nI'm working with Jesus at the thing.\n\n> Although the <Location /> block presented above has a 'Require ldap-attribute'\n> directive in it, I suspect that the configuration actually used to generate\n> the debugging output did not have that directive, and that the only require\n> directive in the <Location /> block was \"require valid-user\". That's\n> consistent with the debugging output, and demonstrates that the <Location />\n> block was merged last (in the second debugging run, with a direct url to the\n> file); the request succeeds since the userid has been authenticated.\n\nYou are right the config of the debug output had just \"require valid-user\" as\nrequire directive.\n\n> This leaves the question of why mod_autoindex denied access to the file when\n> creating a directory listing. The answer is that mod_autoindex does a\n> ap_sub_req_lookup_dirent() to check the file; as far as I know, that version\n> of sub_req does not do a <Location /> merge.\n> \n> If there is a bug here, it's a documentation bug; the documentation for\n> <Location> correctly states:\n>   Use <Location> to apply directives to content that lives outside\n>   the filesystem. For content that lives in the filesystem, use\n>   <Directory> and <Files>.\n> \n> But then goes on to say:\n>   An exception is <Location />, which is an easy way to apply\n>   a configuration to the entire server.\n> \n> As can be seen here, attempts to use <Location /> for the purpose of\n> applying a default configuration to the entire server are likely to\n> fail, and the documentation possibly should be tightened up.\n\nSo you are saying that the <Location /> \"wins\" over the .htaccess inside the\ndirectory because is merged last and the thing that we put inside the\n<Directory> an \"AllowOverride All\" does non count at all...\n\nThe fact that mod_autoindex is not showing the files in any case is highly\nmisleading. A non careful administrator could just stop there and conclude that\n\"yes it's working\". So either also mod_autoindex shows the files or also\nmod_authnz_ldap behaves as mod_autoindex. We cannot have to modules that work in\nso different way on a so crucial thing.\n\nMoreover this way the admin lose a lot of power on fine-grained access control\nand easiness of configuration.\n\nBut anyway those are just my opinions, on the other hand what is your advice?\nJust change the <Location /> for the root <Directory ...> and then specify other\nLocations residing outside that directory if needed?\n\nThanks\nStefano"}, {"count": 13, "tags": [], "bug_id": 43196, "attachment_id": null, "is_private": false, "id": 107394, "time": "2007-08-29T07:44:25Z", "creator": "rici@ricilake.net", "creation_time": "2007-08-29T07:44:25Z", "text": "(In reply to comment #12)\n> (In reply to comment #11)\n\n> So you are saying that the <Location /> \"wins\" over the .htaccess inside the\n> directory because is merged last and the thing that we put inside the\n> <Directory> an \"AllowOverride All\" does non count at all...\n\nThe .htaccess file is being read. It's just not being applied last, so the\n<Location /> section can still override it's settings.\n\n \n> The fact that mod_autoindex is not showing the files in any case is highly\n> misleading. A non careful administrator could just stop there and conclude that\n> \"yes it's working\". So either also mod_autoindex shows the files or also\n> mod_authnz_ldap behaves as mod_autoindex. We cannot have to modules that work in\n> so different way on a so crucial thing.\n\nYes, that is a problem, but it's not specific to mod_authnz_ldap. Any\naccess control, even mod_access, would have the same behaviour, as far as\nI know. But I believe the basic problem is trying to use a <Location>\nsection with a filesystem-mapped site. If you'd used <Directory /> to set\ndefaults, it probably would have worked as expected.\n\n> \n> Moreover this way the admin lose a lot of power on fine-grained access control\n> and easiness of configuration.\n\nI don't see why the use of a <Location> block is required to give fine-grained\naccess control.\n\n> \n> But anyway those are just my opinions, on the other hand what is your advice?\n> Just change the <Location /> for the root <Directory ...> and then specify other\n> Locations residing outside that directory if needed?\n\nWith the exception of changing Location to Directory in the last line, yes.\n> Thanks\n> Stefano\n\n"}, {"count": 14, "tags": [], "bug_id": 43196, "attachment_id": null, "text": "(In reply to comment #13)\n \n> Yes, that is a problem, but it's not specific to mod_authnz_ldap. Any\n> access control, even mod_access, would have the same behaviour, as far as\n> I know. \n\nSo it's mod_autoindex that is behaving differently and that one needs to be\nreviewed IMHO.\n\n> But I believe the basic problem is trying to use a <Location>\n> section with a filesystem-mapped site. If you'd used <Directory /> to set\n> defaults, it probably would have worked as expected.\n\nI agree.\nYou should change the docs in Chapter 2.5 - when to use what:\n[quote]There is, however, one exception to this rule. Putting configuration\nrestrictions in a <Location /> section is perfectly safe because this section\nwill apply to all requests regardless of\nthe specific URL.[/quote]\n\nExtend the Chapter 6.5 - Merging of .htaccess with the main configuration files,\npointing out this very particular case.\n\nAnd correct Chapter 10 - Location directive as you said in a previous message.\n\n> With the exception of changing Location to Directory in the last line, yes.\n\nRight thanks now it works properly.\n\nRegards\nStefano\n", "id": 107459, "time": "2007-08-30T00:44:23Z", "creator": "stefano.mosconi@gmail.com", "creation_time": "2007-08-30T00:44:23Z", "is_private": false}, {"count": 15, "tags": [], "creator": "slive@apache.org", "is_private": false, "id": 107470, "creation_time": "2007-08-30T06:40:49Z", "time": "2007-08-30T06:40:49Z", "bug_id": 43196, "text": "Although configuration section merging can be confusing, I don't see any problem\nwith the docs. It IS safe to use <Location /> to restrict access. Nowhere does\nit say that this is a \"default\" configuration that can be overridden by\n.htaccess. And, in fact, there are several examples in the .htaccess tutorial\nand in the \"Configuration Sections\" guide that show how <Location> overrides\nother sections.", "attachment_id": null}]
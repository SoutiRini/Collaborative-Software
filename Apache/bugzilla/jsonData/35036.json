[{"count": 0, "tags": [], "creator": "delbd@oma.be", "attachment_id": null, "text": "Am not very used to programmatic manipulations of JNDI, but while trying to \nuse the JNDIRealm over a NIS (yellow pages passwords/groups) i noticed the \nfollowing problems. \n \nFirst, the sun NISContextFactory use a FLAT directional model (i don't know \nexactly what it means, but i think this is related to the imposibility for a \nnode to know his parent), one of the consequences is it's impossible to build \na fully qualified name from a user entry. The following code in realm does \nfail with exception thrown at the line \"name = name.addAll(entryName)\": \n            NameParser parser = context.getNameParser(\"\"); \n            Name contextName = parser.parse(context.getNameInNamespace()); \n            Name baseName = parser.parse(userBase); \n     \n            // Bugzilla 32267 \n            Name entryName = parser.parse(new \nCompositeName(result.getName()).get(0)); \n     \n            Name name = contextName.addAll(baseName); \n            name = name.addAll(entryName); \n \nTo get around this a try catch around it and defaulting the dn to 'username' \ndid solve my problem. So easy to fix. \n \nSecond, if there is no way to have digested passwords supporting anykind of \nsalt. The method digest() from RealmBase only gets the credential, not the \nencrypted password to extract the salt. Most unis based password still rely on \nsalts. (Some even use MD5+salt or SHA+salt) \n \nThird, there is a test \"if (password.startsWith(\"{SHA}\"))\" around line 1188. \nSeems in case of NIS, there is a more generic \n{<algorithm_here>}<encrypted_password_here> form used. \nIn my case, mapping to an HP-UX NIS is in the form \n\"{crypt}<encrypted_password>\". The {crypt} part must be removed before \ncomparing to crypted password. \n \nLast but not least, the HP-UX crypt does use DES (i know this is far from the \nbest choice algorithm) but java does not provide a DES digest, so i had to do \nsome other way. \n \nI solved the crypt problem and salt problem by using code inspired from \nhttp://cvs.sourceforge.net/viewcvs.py/esup-casgeneric/esup-casgeneric/esup-casgeneric/source/org/esupportail/cas/server/util/crypt/Crypt.java?rev=1.1&view=markup \n \nAs there can be lots of possible from depending on the jndi mapping, for the \npassword, maybe a good solution would be to add a parameter to the JNDIRelam \nwhich would be digestClass=\"com.company.someDigestClass\" and have the realm do \na digestedPassword = theDigestClass.encrypt(storedPassword, crendentials). \nThis way the encryptClass could extract the salt from storedPassword and then \nencode the Credentials using it the class dedicated algorithm and return the \nencryptedPassword for comparaison.", "id": 75264, "time": "2005-05-24T09:19:43Z", "bug_id": 35036, "creation_time": "2005-05-24T09:19:43Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 35036, "text": "Changing to an enhancement request.  And a note to the original poster that if\nyou'd like this done any time soon, please feel free to submit a patch to\nJNDIRealm with your suggested digestClass modification.", "id": 77563, "time": "2005-07-22T15:51:08Z", "creator": "yoavs@computer.org", "creation_time": "2005-07-22T15:51:08Z", "is_private": false, "attachment_id": null}, {"text": "Since the original poster seems to no longer care, and no one else has voiced an\nopinion or voted for this item, I'm closing it.  If anyone is interested, please\nfeel free to reopen.", "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "count": 2, "id": 87927, "time": "2006-04-13T17:41:51Z", "bug_id": 35036, "creation_time": "2006-04-13T17:41:51Z", "is_private": false}]
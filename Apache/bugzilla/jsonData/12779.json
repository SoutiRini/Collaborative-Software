[{"count": 0, "tags": [], "creator": "erich.prchal@siemens.at", "attachment_id": null, "id": 23042, "time": "2002-09-18T15:33:27Z", "bug_id": 12779, "creation_time": "2002-09-18T15:33:27Z", "is_private": false, "text": "When I tried to build mod_fastcgi for Apache 2 I got a Link error\ncould not find symbol _ap_load_dll_func.\n\nI could solve this problem by changing the declaration\n  FARPROC ap_load_dll_func(...) \nto:\n  AP_DECLARE(FARPROC) ap_load_dll_func(...)\nin util_win32.c and os.h\n\nAs far as I could see this did not hurt the rest of Apache,\nso could you please make this change in the next release."}, {"count": 1, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 23046, "time": "2002-09-18T16:23:31Z", "bug_id": 12779, "creation_time": "2002-09-18T16:23:31Z", "is_private": false, "text": "\n  ap_load_dll_func is a ugly stub to the native api.  No, we will not be\n  exporting that function\n\n  It is actually a duplicate of the same functionality in apr \n  (misc/win32/misc.c?)  That was EXPLICITLY voted on as not-for-export,\n  and determined to be an internal Native API only.  This is why it had\n  to be duplicated in ap (util_win32.)  You are welcome to \n\n    1) ask us to revisit this decision by posting to dev@apr.apache.org\n       with a convincing case.\n    2) borrow the code for your own implementation under the Apache \n       License.\n\n  Finally, ap/apr aren't in the business of extending the Native API, but\n  providing cross-platform wrappers between many operating systems.  \n\n  Please look at srclib/apr/include/apr_dso.h for the cross-platform\n  solution that we already provided.\n"}, {"count": 2, "tags": [], "bug_id": 12779, "attachment_id": null, "is_private": false, "id": 23047, "time": "2002-09-18T16:37:46Z", "creator": "wrowe@apache.org", "creation_time": "2002-09-18T16:37:46Z", "text": "\n  Ok, I'm seeing the case; you aren't using this feature, but happen to\n  invoke some ap_load_dll_func stubbed Win32 calls, and this was 'Inflicted'\n  on your module by os.h's redeclarations!\n\n  Sorry I misread the original report.\n\n  Obviously we can't go remapping native system calls for 3rd party modules,\n  be they Win32, Unix or someone else.  That behavior has to be restricted\n  to the kernel.\n\n  I will remove the offensive re#defines of OS calls into another header\n  where we won't encounter this problem.  Expect that patch with the 2.0.42\n  release.\n\n  In the meantime, you can add the following patch to os.h to work around\n  these macros.\n\n"}, {"count": 3, "text": "Created attachment 3122\nFix to prevent Native Win32 API fn overrides, except for the server core compiliation.", "bug_id": 12779, "is_private": false, "id": 23048, "time": "2002-09-18T16:41:04Z", "creator": "wrowe@apache.org", "creation_time": "2002-09-18T16:41:04Z", "tags": [], "attachment_id": 3122}, {"count": 4, "text": "\n  I've committed this patch to the current development tree, it will be\n  correct for everyone downloading 2.0.42.\n\n  These shouldn't even be present in the common os.h, but the #ifdef\n  protection should be sufficient to avoid them for now.\n", "bug_id": 12779, "is_private": false, "id": 23049, "time": "2002-09-18T16:44:04Z", "creator": "wrowe@apache.org", "creation_time": "2002-09-18T16:44:04Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 12779, "attachment_id": null, "is_private": false, "id": 23055, "time": "2002-09-18T17:40:30Z", "creator": "erich.prchal@siemens.at", "creation_time": "2002-09-18T17:40:30Z", "text": "Yes this fix to os.h did solve my problem nicely.\nThank you."}]
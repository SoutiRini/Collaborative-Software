[{"count": 0, "tags": [], "text": "Properties values are not always expanded properly in property files like in\nfollowing example.\n\nbuild.xml (snippet)\n=========\n\n<property file=\"default.properties\" prefix=\"project\" />\n<echo>interfaces.format=${project.interfaces.format}</echo>\n<echo>factories.format=${project.factories.format}</echo>\n<echo>foo=${project.foo}</echo>\n\ndefault.properties (snippet)\n==================\n\ninterfaces.package=model\ninterfaces.prefix=\ninterfaces.suffix=BO\ninterfaces.format={1}.${project.interfaces.package}.${project.interfaces.prefix}{2}${project.interfaces.suffix}\n\nfactories.package=factory\nfactories.prefix=\nfactories.suffix=BOFactory\nfactories.format={1}.${project.factories.package}.${project.factories.prefix}{2}${project.factories.suffix}\n\nfoo={1}.${project.factories.package}.${project.factories.prefix}{2}${project.factories.suffix}\n\nOutput\n======\ninterfaces.format={1}.model.{2}BO\nfactories.format={1}.${project.factories.package}.{2}${project.factories.suffix}   \nfoo={1}.factory.{2}BOFactory\n\nBug\n====\n\n* \"interfaces.format\" value is ok (and it is similar to \"factories.format\")\n* All values are not expanded in \"factories.format\" property\n* But the same expression expand properly when assigned to \"foo\"\n\nChanging properties names can affect this behaviour.\n\nWorkaround: choose different names. Good luck...", "is_private": false, "bug_id": 40561, "id": 93940, "time": "2006-09-20T23:56:34Z", "creator": "asfBugzilla.stratic@spamgourmet.com", "creation_time": "2006-09-20T23:56:34Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "A workaround is to not use the prefixed properties in\nthe property file. I do not think that using prefixed properties\nare a good idea as it ties the property file to the\n<project file=.. prefix=..> call.\n\nAs the property expansion is inconsistent in your example\nthis is a bug - either all the prefixed properities should\nexpand or none of them should. The reason for the current\nbehaviour needs to be investigated, but it is most likely\nsomething to do with delaying setting the prefixed properties.\n\nexample property file that works with current ant:\n\ninterfaces.package=model\ninterfaces.prefix=\ninterfaces.suffix=BO\ninterfaces.format={1}.${interfaces.package}.${interfaces.prefix}{2}${interfaces.suffix}\n\nfactories.package=factory\nfactories.prefix=\nfactories.suffix=BOFactory\nfactories.format={1}.${factories.package}.${factories.prefix}{2}${factories.suffix}\n\nfoo={1}.${factories.package}.${factories.prefix}{2}${factories.suffix}\n", "attachment_id": null, "bug_id": 40561, "id": 93949, "time": "2006-09-21T08:40:19Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-21T08:40:19Z", "is_private": false}, {"count": 2, "tags": [], "text": "(In reply to comment #1)\n\nSometimes using prefixes is very useful. In this example, restricting property\nfile scope to access only a subset of properties is intentional and mandatory.\nThe build file is a generic one. It is included in many projects. Users can\nchange some behaviours using a property file but they are restricted to a given\nsubset (project properties in this case). Using prefixes is a perfect solution\nto provide this kind of isolation between levels. Reusable parts can evolve\nwithout breaking the others.", "attachment_id": null, "bug_id": 40561, "id": 93954, "time": "2006-09-21T10:27:01Z", "creator": "asfBugzilla.stratic@spamgourmet.com", "creation_time": "2006-09-21T10:27:01Z", "is_private": false}, {"count": 3, "tags": [], "creator": "efanomars@yahoo.com", "attachment_id": null, "is_private": false, "id": 93957, "time": "2006-09-21T11:50:31Z", "bug_id": 40561, "creation_time": "2006-09-21T11:50:31Z", "text": "(In reply to comment #2)\nI tested your example in verbose mode with Ant1.7Beta2 and \nI get the following:\n\n>ant -v\n\nProperty \"project.interfaces.prefix\" has not been set\nProperty \"project.interfaces.suffix\" has not been set\nProperty \"project.factories.suffix\" has not been set\nProperty \"project.factories.suffix\" has not been set\n     [echo]\ninterfaces.format={1}.model.${project.interfaces.prefix}{2}${project.interfaces.suffix}\n     [echo] factories.format={1}.factory.{2}${project.factories.suffix}\n     [echo] foo={1}.factory.{2}${project.factories.suffix}\n\nwhich is correct. \n\nWhat you get is very strange (and would be a bug IMHO).\nAs Peter mentioned properties in a property file \nare first resolved among themselves (because\nthe definitions are returned as a set and have\nno ordering) and only afterwards are resolved\nagainst the build's properties.\n\nThere are two things you could try:\n1. \nStrip the prefix from the names as Peter said.\n\n2. \nDefine the project.xxx properties separately\nin case you need these properties to be visible in\nmore than one prefixed property file."}, {"count": 4, "tags": [], "creator": "asfBugzilla.stratic@spamgourmet.com", "attachment_id": null, "id": 93960, "time": "2006-09-21T12:42:49Z", "bug_id": 40561, "creation_time": "2006-09-21T12:42:49Z", "is_private": false, "text": "(In reply to comment #3)\n\nStripping the prefix did not work because there is another bug or lack of\ndocumentation (I forgot to mention it, sorry).\n\n Peter's example works only if properties values have not been set previously.\nSo it works with given snippets. But, like in my case, if some property values\nhave been set previously (by another property file or by the build), then\nproperty values are not evaluated properly like in following example with a\nslightly modified build.\n\nbuild.xml (modified snippet)\n=========\n\n<property name=\"project.factories.package\" value=\"foo\" />\n<property file=\"default.properties\" prefix=\"project\" />\n<echo>factories.format=${project.factories.format}</echo>\n\nOutput (with peter's proposal)\n======\nfactories.format={1}.factory.{2}BOFactory\n\n The correct output should be:\n\nfactories.format={1}.foo.{2}BOFactory\n \n Property file local values take precedence and hide any previous property\nvalue. It act like if properties (project.factories.package) were mutable !\n\n In our case, users should be able to override these default values. So, Peter's\nproposal did not work for me.\n"}, {"count": 5, "tags": [], "creator": "peterreilly@apache.org", "is_private": false, "id": 93963, "attachment_id": null, "bug_id": 40561, "creation_time": "2006-09-21T13:09:32Z", "time": "2006-09-21T13:09:32Z", "text": "I not not dispute that there there is a bug,\nI am just not too sure about the solution.\n\nAnother solution to your problem using current ant would be to\nhave multiple property files:\n  project_1.properties\n  project_2.properties\netc\nand get the properties by\n\n<property file=\"${project_name}.properties\"}\n\nwhere project_1.properties would be:\n\nproject_1.interfaces.package=model\nproject_1.interfaces.prefix=\nproject_1.interfaces.suffix=BO\nproject_1.interfaces.format={1}.${project_1.interfaces.package}.${project_1.interfaces.prefix}{2}${project_1.interfaces.suffix}\n\n"}, {"count": 6, "tags": [], "creator": "asfBugzilla.stratic@spamgourmet.com", "attachment_id": null, "is_private": false, "id": 93964, "time": "2006-09-21T13:44:19Z", "bug_id": 40561, "creation_time": "2006-09-21T13:44:19Z", "text": "(In reply to comment #5)\n\nYes, I understand and I just want to mention that there is another bug (or\nundocumented behaviour).\n\nOn my side, I have found a workaround immediately:\n\n1) Never introduce dependencies inside the same property file.\n2) Express dependent values in build files or separate property files.\n\nThe resulting constraint for property files users is: Never use properties\nredefined locally. Instead, use their literal value (which is defined locally).\n\nThese rules should work for anybody without introducing huge constraints."}, {"count": 7, "tags": [], "bug_id": 40561, "attachment_id": null, "id": 138003, "creation_time": "2010-06-29T12:57:33Z", "time": "2010-06-29T12:57:33Z", "creator": "jglick@apache.org", "text": "Peter's suggestion works as of 1.8.1 (also in 1.8.2 after the fix for bug #49373), though not in 1.8.0 or 1.7.1:\n\n---%<---\n<property name=\"project.factories.package\" value=\"foo\"/>\n<property file=\"default.properties\" prefix=\"project\"/>\n<echo>factories.format=${project.factories.format}</echo>\n---%<---\nfactories.package=factory\nfactories.prefix=\nfactories.suffix=BOFactory\nfactories.format={1}.${factories.package}.${factories.prefix}{2}${factories.suffix}\n---%<---\n\n=>\n\n[echo] factories.format={1}.foo.{2}BOFactory", "is_private": false}]
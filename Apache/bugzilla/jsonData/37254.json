[{"count": 0, "tags": [], "bug_id": 37254, "attachment_id": null, "id": 81769, "time": "2005-10-26T14:06:28Z", "creator": "dho@oma.be", "creation_time": "2005-10-26T14:06:28Z", "is_private": false, "text": "When branching, slide add one or to number (depending the version) to the \nversion number. \n1.3 become 1.3.1 or 1.3.1.0\n\nIn the RDBMS stores, the method \"public NodeRevisionDescriptors \nretrieveRevisionDescriptors(Connection connection, Uri uri)\" call the method \n\"String convertRevisionNumberToComparable(String revisionNumber)\" to generate \nthe orderby part of the sql query. \n\nThis method generate an sql expression which cut the revision number in two part \n(cutted at the first '.' found) and transform them into number.\n\n\"1\" is a valid integer and \"3.1\" is a valid decimal value. but when \"1.3.1.0\" is \n split into \"1\" and \"3.1.0\", RDBMS can not convert the string \"3.1.0\" to a valid \nnumber. en then depending of the database this crach the query, or just \nevaluated as NULL (then the row is misplaced) or the row is skipped.\n\nIn all case the revision 1.3.1.0 is never found."}, {"count": 1, "tags": [], "bug_id": 37254, "attachment_id": null, "text": "We can reproduce this bug too.  Using an Oracle database, if we branch a file to\na four digit descriptor, then restart the container and request a REPORT on the\nfile, an internal server error is returned.  If the container is not restarted,\nthe database is never queried.\n\nOur solution is the same as that taken by DB2RDBMSAdapter.  We just added a method \n\nprotected String convertRevisionNumberToComparable(String revisioNumber) {\n    return revisioNumber;\n}\n\nto our RDBMSAdapter, which fixes the issue and seems to have no ill effects.", "id": 82633, "time": "2005-11-18T01:53:09Z", "creator": "rob@roblisa.com", "creation_time": "2005-11-18T01:53:09Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 37254, "attachment_id": null, "text": "I think your solution will cause some other problem with two digit minors. Oracle will \ncompare string and in string space \"1.9\" is greater than \"1.10\". Then Oracle (and any \nother common rdbms) will sort \"1.10\" before \"1.9\". And then, Slide will think that the \nversion 1.9 is the last version.\n\nThe best solution is to sort in the java side of the store with a RevisionNumber \ncomparator.", "id": 82644, "time": "2005-11-18T10:23:36Z", "creator": "dho@oma.be", "creation_time": "2005-11-18T10:23:36Z", "is_private": false}, {"count": 3, "tags": [], "creator": "rob@roblisa.com", "attachment_id": null, "id": 82700, "time": "2005-11-21T07:46:02Z", "bug_id": 37254, "creation_time": "2005-11-21T07:46:02Z", "is_private": false, "text": "You're right.  Some preliminary testing showed it worked and I assumed that if\nanother store one used it, it must be ok.  Here's my current one, although I\nagree that it should be handled in java code.  It basically sorts by the branch,\nthen major, then minor and seems to work ok.\n\nprotected String convertRevisionNumberToComparable(String revisioNumber) {\n        return \"substr(\"+revisioNumber+\",1,instr(\"+revisioNumber+\",'.',-1,2)-1),\" +\n              \n\"to_number(substr(\"+revisioNumber+\",instr(\"+revisioNumber+\",'.',-1,2)+1,\" +\n                \n\"instr(\"+revisioNumber+\",'.',-1)-instr(\"+revisioNumber+\",'.',-1,2)-1)),\" +\n             \n\"to_number(substr(\"+revisioNumber+\",instr(\"+revisioNumber+\",'.',-1)+1))\";\n    }\n\n"}, {"count": 4, "tags": [], "bug_id": 37254, "attachment_id": null, "text": "I agree, but one more time it will not work in ALL case, juste in common case .\n.. because, if you branch a branch you will get a revision number with 6 \nnumber. And then, this method will not work any more. Since there is no maximun \nnumber of number in revision number, a loop is required, and SQL simply can't do \nit.\n\nPersonaly, I work actualy on an adaptor for hsqldb, and hsqldb allow the \ndefinition of sql function which call java static method. This work well when \nperformance is not required (functionality-demo-server, debug, ...).\nI don't know if Database like Oracle permit this type of thing. but this is not \na good solution because it is to much database dependent.", "id": 82701, "time": "2005-11-21T09:26:39Z", "creator": "dho@oma.be", "creation_time": "2005-11-21T09:26:39Z", "is_private": false}, {"count": 5, "tags": [], "text": "Hi.  I agree if you want to fully sort the list you need a loop but looking at\nthe code, the revisions only have to be sorted relative to the branch they are\non, to populate the latestRevisionNumbers hashtable, (ie the last two numbers of\nthe revision).  You can remove the first line of the method and it will still\nwork correctly.  In my testing, I tried up to revision 1.5.2.10.1.11.1.12 and\neverything worked fine for me.  \n\nYou might also be interested in bug 37583, which I found while testing this one.", "attachment_id": null, "id": 82722, "creator": "rob@roblisa.com", "time": "2005-11-22T01:28:54Z", "bug_id": 37254, "creation_time": "2005-11-22T01:28:54Z", "is_private": false}]
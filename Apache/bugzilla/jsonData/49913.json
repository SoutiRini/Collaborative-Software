[{"count": 0, "tags": [], "bug_id": 49913, "attachment_id": null, "id": 139813, "time": "2010-09-10T09:37:17Z", "creator": "peter.hancock@gmail.com", "creation_time": "2010-09-10T09:37:17Z", "is_private": false, "text": "Patch implements solid rounded borders/corners for PDF,PS and AFP.\n\nI have attached a document to the fop wiki page http://wiki.apache.org/xmlgraphics-fop/RoundedBorders. The document will be merged into that page soon.  It illustrates the proposed extension attributes and some open design decisions, as implemented."}, {"count": 1, "attachment_id": 26015, "creator": "peter.hancock@gmail.com", "is_private": false, "id": 139814, "time": "2010-09-10T09:39:29Z", "bug_id": 49913, "creation_time": "2010-09-10T09:39:29Z", "tags": [], "text": "Created attachment 26015\nPatch for basic rounded borders\n\nThis patch is an svn diff against rev 995729"}, {"count": 2, "tags": [], "creator": "peter.hancock@gmail.com", "attachment_id": 26016, "id": 139816, "time": "2010-09-10T09:42:21Z", "bug_id": 49913, "creation_time": "2010-09-10T09:42:21Z", "is_private": false, "text": "Created attachment 26016\nexample rounded corners fo\n\nTo render AFP you will require patch in bugzilla#49893, although this is just for printing."}, {"count": 3, "tags": [], "text": "Development notes:\n\nTemporary System properties\nDuring development I have found it useful to switch between different execution paths (for performance testing, implementation comparisons etc) by using System properties.  I have decided to include them with the patch with the intent to remove them before any trunk integration.\nThe properties are:\n\nfop.round-corners = true|false (default true)\n\tSeting this to false turns off the rounded-corner code which I find useful for debugging and performance testing\n\nfop.round-corners.corner-join-style=css \n\tWhen adjacent borders differ in colour the joining line can be defined in a few ways (see the attached doc/wiki - when updated).  I decided not to implement the css3 recommendation by default but I have included the option for discussion.\n\nfop.round-corners.afp=seperate|all-in-one(default)\n\tI have implemented rounded corners in AFP using IOCA: the corners are generated as rasters using Java2D which is then converted to an IOCA Image Object.  These are cached at the document level in the AFP.  The seperate setting instructs FOP to create 4 images for each corner which are overlayed over the original bordered block.  Due to a printing descrepancy between the IOCA corner and the PTOCA rectangular border and ackground area, I have also implemented the functionality to create the entire rounded area as an IOCA image (all-in-one), trading file size for acceptable prining results.  Ideally the reason for the printing descrepancy can be resolved and the 'all-in-one' functionality removed.\n\n\nConsiderations\n\nCurrently the abstraction shared by the AFP border painting code and the PDF/PS border painting is high level, reflecting the marked differences between the renderers.  It may be possible to share a bit more between the two processes with a bit of refactoring.\n\nThe color mode and resolution of rounded borders in AFP is controlled with the fop.xconf.  A bug with high resolution images may be incountedred however this is not rc-specific and fixed in https://issues.apache.org/bugzilla/show_bug.cgi?id=49893\n\nCurrently some of the methods in (PDF|PS)BorderPainter have parameter lists that are currently too long.  I intend to try and encapsulate border properties in a better way that reduces parameter passing and perhaps performs some of the funcitonality in a  more OO way: currently the BorderPainters are passing around these dumb parameters ins a procedural  manner to perform the drawing logis.  A smatter representation of the borders might 'draw themselves' etc.", "is_private": false, "bug_id": 49913, "id": 139817, "time": "2010-09-10T09:43:50Z", "creator": "peter.hancock@gmail.com", "creation_time": "2010-09-10T09:43:50Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Peter, I've taken a closer look at your patch. Looks pretty good already looking at the resulting documents. I've done various local changes to fix certain issues like Java 1.5 methods, some Checkstyle issues and whitespace. Obviously, this whole functionality is not quite finished, yet (it's not working on tables). You've also mentioned that you'd like to refactor certain parts to reduce the number of method parameters in places which I support. So, my question is: Is it OK if I put your patch with my corrections on a branch from which point we can continue? Or have you made considerable improvements in the meantime?", "attachment_id": null, "bug_id": 49913, "id": 140321, "time": "2010-09-30T05:57:22Z", "creator": "jeremias@apache.org", "creation_time": "2010-09-30T05:57:22Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 49913, "attachment_id": null, "text": "Jeremias, I have made a few bug fixes since I uploaded the patch but I can provide  them as a new patch against this feature branch without any problems.\nPlease go ahead!", "id": 140322, "time": "2010-09-30T06:10:28Z", "creator": "peter.hancock@gmail.com", "creation_time": "2010-09-30T06:10:28Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 49913, "is_private": false, "text": "I've applied your patch with mentioned changes to the following branch:\nhttps://svn.apache.org/repos/asf/xmlgraphics/fop/branches/Temp_RoundedCorners\n\nSVN: http://svn.apache.org/viewvc?rev=1003020&view=rev\n\nThis can serve as base for further discussions and work towards finalizing this. Thanks for your work on this so far, Peter. But can I ask you to set up the Checkstyle profile in your IDE and use a Java 1.4 as the class library for your FOP workspace? Thanks.", "id": 140325, "time": "2010-09-30T07:55:06Z", "creator": "jeremias@apache.org", "creation_time": "2010-09-30T07:55:06Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 140326, "time": "2010-09-30T08:10:03Z", "bug_id": 49913, "creation_time": "2010-09-30T08:10:03Z", "is_private": false, "text": "A few additional thoughts and observations around this topic:\n\nI noticed you're using Java2D for the borders in AFP output. I've always tried to reuse code from the Java2D renderer in AFP or PCL. Maybe you can move some of that code over to the Java2D renderer and then reuse the code from there in AFP. That way, we'd get the implementation for Java2D-based formats, too, and for PCL relatively cheaply.\n\nBTW, I noticed that border painting in Java2D-based formats seem to have been broken by the patch: the border areas are too big. So far I haven't been able to figure out where that happened.\n\nDo you already have plans on how to handle table borders?\n\nIs the innerBackgroundColor parameter really necessary? I notice it's only used for AFP. Did you do that so it is included in the bitmap generated for the borders? In that case, the background image would also be required if you want to cover the whole functionality. But I wonder if the background really must be part of that bitmap. As long as the bitmap is painted in a transparent way, the normal background painting would not be erased.\n\nWould you mind listing the remaining issues on the Wiki so we can track progress and problems?"}, {"count": 8, "tags": [], "bug_id": 49913, "attachment_id": null, "is_private": false, "id": 140371, "time": "2010-10-01T10:48:05Z", "creator": "peter.hancock@gmail.com", "creation_time": "2010-10-01T10:48:05Z", "text": "(In reply to comment #6)\n> this. Thanks for your work on this so far, Peter. But can I ask you to set up\n> the Checkstyle profile in your IDE and use a Java 1.4 as the class library for\n> your FOP workspace? Thanks.\n\nWill do!"}, {"count": 9, "attachment_id": null, "creator": "peter.hancock@gmail.com", "is_private": false, "id": 140374, "time": "2010-10-01T11:04:48Z", "bug_id": 49913, "creation_time": "2010-10-01T11:04:48Z", "tags": [], "text": "(In reply to comment #7)\n> A few additional thoughts and observations around this topic:\n> \n> I noticed you're using Java2D for the borders in AFP output. I've always tried\n> to reuse code from the Java2D renderer in AFP or PCL. Maybe you can move some\n> of that code over to the Java2D renderer and then reuse the code from there in\n> AFP. That way, we'd get the implementation for Java2D-based formats, too, and\n> for PCL relatively cheaply.\nI will investigate this when I attempt to refactor the border/background drawing\ncode.\n> \n> BTW, I noticed that border painting in Java2D-based formats seem to have been\n> broken by the patch: the border areas are too big. So far I haven't been able\n> to figure out where that happened.\nI will check this out when too.\n\n> \n> Do you already have plans on how to handle table borders?\nNot yet.  I was hoping to investigate in some depth what xsl:fo has to say about tables but my current deadlines with this work did not permit this.  I need to develop my understanding before I appreciate how rounded borders should look.\n> \n> Is the innerBackgroundColor parameter really necessary? I notice it's only used\n> for AFP. \nI considered it a temporary measure to get the current hack working.\n>Did you do that so it is included in the bitmap generated for the\n> borders? In that case, the background image would also be required if you want\n> to cover the whole functionality. But I wonder if the background really must be\n> part of that bitmap. As long as the bitmap is painted in a transparent way, the\n> normal background painting would not be erased.\nI was under the impression that transparent images were not supported in AFP?  If I have this wrong then this would be a far better solution. \n\n> \n> Would you mind listing the remaining issues on the Wiki so we can track\n> progress and problems?\nI will do this as soon as I have a little time to revisit rounded corners\n\nThanks for all your time setting up the branch and analysing the patch!"}, {"count": 10, "tags": [], "bug_id": 49913, "is_private": false, "id": 141535, "attachment_id": 26269, "creator": "peter.hancock@gmail.com", "creation_time": "2010-11-08T04:45:45Z", "time": "2010-11-08T04:45:45Z", "text": "Created attachment 26269\nsmall bug fixes and cleanup\n\nPatch against branches/Temp_RoundedCorners r1003020 of\nsmall bug fixes and code cleanup:\n\nBlocks with rounded corners are properly split across pages\nFixed an IF deserialization bug\nFixed a bug in BorderPainter.clipBackground()\nChanged IF clip mechanism for rounded corners\nFixed some (but not all) checkstyle warnings\nAdded some TODOs"}, {"count": 11, "tags": [], "text": "Created attachment 26458\nSmall bug fixes and cleanup", "is_private": false, "bug_id": 49913, "id": 143063, "time": "2011-01-04T12:00:29Z", "creator": "peter.hancock@gmail.com", "creation_time": "2011-01-04T12:00:29Z", "attachment_id": 26458}, {"count": 12, "tags": [], "text": "resetting P2 open bugs to P3 pending further review", "is_private": false, "bug_id": 49913, "id": 157452, "time": "2012-04-07T01:43:04Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:43:04Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "peter.hancock@gmail.com", "attachment_id": null, "id": 160071, "time": "2012-06-18T08:54:29Z", "bug_id": 49913, "creation_time": "2012-06-18T08:54:29Z", "is_private": false, "text": "The patch 'Small bug fixes and cleanup' was applied in revision 1133370 to the Temp_RoundedCorners branch."}, {"count": 14, "tags": [], "text": "see bug 54041", "is_private": false, "bug_id": 49913, "id": 162916, "time": "2012-10-24T13:48:25Z", "creator": "peter.hancock@gmail.com", "creation_time": "2012-10-24T13:48:25Z", "attachment_id": null}]
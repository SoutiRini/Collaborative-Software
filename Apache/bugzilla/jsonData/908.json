[{"count": 0, "tags": [], "bug_id": 908, "attachment_id": null, "text": "I've been working through issues of charset decoding of\nURIs and get parameters, and include a proposed patch to\nto Tomcat 3.3 to improve URI decoding.\n\nBackground: according to the W3C, all URIs in HTML should be\nencoded using by first converting all characters into\nUTF-8 bytes, then converting those bytes using URI escaping\n(i.e., %HH where needed):\n\nhttp://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.1 \n\nThis recommendation is partly bogus.  The query parameter\nportion of a URI should not use UTF-8, but should instead\nuse the encoding used for the HTML content of a page.  So,\nI'm not commenting in this bug on the handling of query\nparameters.  Anyway:\n\nTomcat 3.3 handles %HH URI escaping, but does not UTF-8\ndecode it.  For example, a URI containing the substring:\n\n  %E6%9D%B1%E4%BA%AC\n\nshould have that portion decoded down to 2 Kanji characters,\nbut instead gives 6 characters.  It seems like the problem\nis just down in ByteChunk.toStringUTF8(), which doesn't\nactually do UTF-8 encoding at all - it does ISO-8859-1.\n\nPatch to follow.", "id": 1079, "time": "2001-03-08T14:39:54Z", "creator": "adam.winer@oracle.com", "creation_time": "2001-03-08T14:39:54Z", "is_private": false}, {"count": 1, "tags": [], "creator": "adam.winer@oracle.com", "attachment_id": 36, "id": 1080, "time": "2001-03-08T14:40:55Z", "bug_id": 908, "creation_time": "2001-03-08T14:40:55Z", "is_private": false, "text": "Created attachment 36\nPatch"}, {"count": 2, "tags": [], "bug_id": 908, "text": "Noting that this patch was against the 3.3m1 source\ncode, not the latest CVS source.", "id": 1081, "time": "2001-03-08T14:41:49Z", "creator": "adam.winer@oracle.com", "creation_time": "2001-03-08T14:41:49Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 908, "attachment_id": null, "text": "Adam, thanks for the patch, I am aware of the problem. The big issue is that\nnew String( byte[], enc ) is a performance killer - most VM implementations\nare creating a IOStream and few buffers to implement this method. \nI'm looking into some code from xerces ( where they have an efficient\nimplementation ) or a hack similar with the OutputBuffer ( where char->byte\nconversion is optimized by reusing an OutputStreamWriter - i.e. the buffers \nremain allocated all the time, without beeing thrown away. \n\nI do understand this is a serious issue and functionality is more important than \nperformance - if I can't find any efficient solution I'll check in your patch.", "id": 1105, "time": "2001-03-09T08:25:42Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-03-09T08:25:42Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 908, "attachment_id": null, "text": "This bug should be fixed in the current 3.3, as long as the UTF encoding is \nspecified in the request ( either explicitely or as part of a session ).\nAnother option is to set the default encoding for the context ( the default\nis required by the spec to be iso8859_1 - which is not a very good thing). \nIf no encoding is specified - well, we have to default to 8859_1.", "id": 3857, "time": "2001-07-19T15:08:35Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-07-19T15:08:35Z", "is_private": false}]
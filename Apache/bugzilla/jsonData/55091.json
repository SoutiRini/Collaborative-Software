[{"count": 0, "tags": [], "text": "Created attachment 30425\nProperly reset DBD, DBM and DSO initialisation variables when the associated pool is cleared.\n\nHi,\n\nIn apu_dso_init() (apu_dso.c:78), apr_dbd_init() (apr_dbd.c:94) and dbm_open_type() (apr_dbm.c:122) a static variable named \"initialised\" is set to 1 during the first call in order to only initialise resources once.\n\nThe respective pointers to these resources are set to NULL when the associated pool is cleaned, in apu_dso_term(), apr_dbd_term() and dbm_term(), with a comment indicating that it is done \"so init can work again\".\nUnfortunately, the \"initialised\" variable is not set to 0 in these functions, and a new call to apu_dso_init(), apr_dbd_init() or dbm_open_type() results in uninitialised resources and potential segfaults.\n\nFor example, calling apr_dbd_init(), apr_dbd_get_driver(), cleaning the associated pool then later calling apr_dbd_init() and apr_dbd_get_driver() again results in a SIGSEGV, as the \"mutex\" resource is NULL :\n\n==6025== Invalid read of size 4\n==6025==    at 0x6D42CA4: pthread_mutex_lock (in /usr/lib/libpthread-2.17.so)\n==6025==    by 0x547529F: apu_dso_mutex_lock (apu_dso.c:44)\n==6025==    by 0x5465BD9: apr_dbd_get_driver (apr_dbd.c:165)\n[...]\n==6025==  Address 0x18 is not stack'd, malloc'd or (recently) free'd\n\nThe attached patch for the APR trunk resets the \"initialised\" static variables to 0 when the relevant pool is cleared.\n\nRegards,\n\nRemi Gacogne\nAqua Ray SAS", "is_private": false, "bug_id": 55091, "id": 167778, "time": "2013-06-11T15:24:43Z", "creator": "rgacogne+asf@aquaray.com", "creation_time": "2013-06-11T15:24:43Z", "attachment_id": 30425}]
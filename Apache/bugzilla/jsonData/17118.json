[{"attachment_id": null, "tags": [], "bug_id": 17118, "is_private": false, "count": 0, "id": 31415, "time": "2003-02-17T09:21:50Z", "creator": "i.pavkovic@bmiag.de", "creation_time": "2003-02-17T09:21:50Z", "text": "I noticed while using an XSLTInputHandler, that is does not work for other \ninput sources than File:\n\nString xmlURL = \"test.xml\", xslURL = \"test.xsl\";\nXSLTInputHandler ih1 = new XSLTInputHandler(xmlURL,xmlURL);\nXSLTInputHandler ih2 = new XSLTInputHandler(new InputSource(xmlURL),new \nInputSource(xslURL));\nXSLTInputHandler ih3 = new XSLTInputHandler(new File(xmlURL),new File(xslURL));\nDriver d = new Driver();\nd.render(ih1.getParser(),ih1.getInputSource()); // fails!\nd.render(ih2.getParser(),ih2.getInputSource()); // fails!\nd.render(ih3.getParser(),ih3.getInputSource()); // works!\n\nThe failures are NullPointerExceptions. I assume, that TraxInputHandler.java \n(which is the delegation of XSLTInputHandler) is not fully compliant with other \nsources than file. Here is a version of TraxInpuHandler that should work.\n\n/*\n * $Id: TraxInputHandler.java,v 1.1 2003/02/12 15:09:03 ilja Exp $\n * Copyright (C) 2001 The Apache Software Foundation. All rights reserved.\n * For details on use and redistribution please refer to the\n * LICENSE file included with these sources.\n */\n\npackage org.apache.fop.apps;\n\n// Imported TraX classes\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.transform.sax.SAXResult;\nimport javax.xml.transform.sax.SAXSource;\nimport javax.xml.transform.sax.SAXTransformerFactory;\n\n\n// Imported SAX classes\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.XMLFilter;\n\n// Imported java.io classes\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.io.File;\n\nimport org.apache.fop.apps.*;\n\n/**\n * XSLTInputHandler basically takes an xmlfile and transforms it with an \nxsltfile\n * and the resulting xsl:fo document is input for Fop.\n */\npublic class TraxInputHandler extends InputHandler {\n    private Transformer transformer;\n    private StreamSource xmlSource;\n    private StreamSource xsltSource;\n\n    public TraxInputHandler(File xmlfile, File xsltfile)\n      throws FOPException {\n\t\txmlSource  = new StreamSource(xmlfile);\n\t\txsltSource = new StreamSource(xsltfile);\n\t\tinitTransformer();\n    }\n\n    public TraxInputHandler(String xmlURL, String xsltURL)\n      throws FOPException {\n        this.xmlSource  = new StreamSource(xmlURL);\n        this.xsltSource = new StreamSource(xsltURL);\n\t\tinitTransformer();\n    }\n\n    public TraxInputHandler(InputSource xmlSource, InputSource xsltSource) \n      throws FOPException {\n        this.xmlSource  = new StreamSource(xmlSource.getByteStream(),\n                                           xmlSource.getSystemId());\n        this.xsltSource = new StreamSource(xsltSource.getByteStream(),\n                                           xsltSource.getSystemId());\n\t\tinitTransformer();\n    }\n\n\tprivate void initTransformer() throws FOPException {\n        try {\n            transformer = TransformerFactory.newInstance().newTransformer\n(xsltSource);\n        }\n        catch( Exception ex) {\n            throw new FOPException(ex);\n        }\n\t}\n\n    /**\n     * overwrites the method of the super class to return the xmlfile\n     * @deprecated\n     */\n    public InputSource getInputSource() {\n\t\tInputSource is = new InputSource();\n\t\tis.setByteStream(xmlSource.getInputStream());\n\t\tis.setSystemId(xmlSource.getSystemId());\n\t\treturn is;\n    }\n\n    /**\n     * overwrites this method of the super class and returns an XMLFilter \ninstead of a\n     * simple XMLReader which allows chaining of transformations\n     * @deprecated\n     *\n     */\n    public XMLReader getParser() throws FOPException {\n\t\treturn this.getXMLFilter(xsltSource);\n    }\n\n    /**\n     * Creates from the transformer an instance of an XMLFilter which\n     * then can be used in a chain with the XMLReader passed to Driver. This way\n     * during the conversion of the xml file + xslt stylesheet the resulting\n     * data is fed into Fop. This should help to avoid memory problems\n     * @param xmlfile The xmlfile containing the text data\n     * @param xsltfile An xslt stylesheet\n     * @return XMLFilter an XMLFilter which can be chained together with other \nXMLReaders or XMLFilters\n     */\n    private static XMLFilter getXMLFilter(StreamSource xsltSource) throws \nFOPException {\n        try {\n            // Instantiate  a TransformerFactory.\n            TransformerFactory tFactory = TransformerFactory.newInstance();\n            // Determine whether the TransformerFactory supports The use uf \nSAXSource\n            // and SAXResult\n            if (tFactory.getFeature(SAXSource.FEATURE)\n                    && tFactory.getFeature(SAXResult.FEATURE)) {\n                // Cast the TransformerFactory to SAXTransformerFactory.\n                SAXTransformerFactory saxTFactory =\n                    ((SAXTransformerFactory)tFactory);\n                // Create an XMLFilter for each stylesheet.\n                XMLFilter xmlfilter =\n                    saxTFactory.newXMLFilter(xsltSource);\n\n                // Create an XMLReader.\n                XMLReader parser = createParser();\n                if (parser == null) {\n                    throw new FOPException(\"Unable to create SAX parser\");\n                }\n\n                // xmlFilter1 uses the XMLReader as its reader.\n                xmlfilter.setParent(parser);\n                return xmlfilter;\n            } else {\n                throw new FOPException(\"Your parser doesn't support the \nfeatures SAXSource and SAXResult.\"\n                                       + \"\\nMake sure you are using a xsl \nparser which supports TrAX\");\n            }\n        } catch (FOPException fex) {\n            throw fex;\n        } catch (Exception ex) {\n            throw new FOPException(ex);\n        }\n    }\n\n\n    /**\n     * Creates from the transformer an instance of an XMLFilter which\n     * then can be used in a chain with the XMLReader passed to Driver. This way\n     * during the conversion of the xml file + xslt stylesheet the resulting\n     * data is fed into Fop. This should help to avoid memory problems\n     * @param xmlfile The xmlfile containing the text data\n     * @param xsltfile An xslt stylesheet\n     * @return XMLFilter an XMLFilter which can be chained together with other \nXMLReaders or XMLFilters\n     */\n    public static XMLFilter getXMLFilter(File xmlfile,\n                                         File xsltfile) throws FOPException {\n\t\treturn getXMLFilter(new StreamSource(xsltfile));\n    }\n\n    public void run(Driver driver) throws FOPException {\n        try {\n            transformer.transform(xmlSource,\n                                  new SAXResult(driver.getContentHandler()));\n        } catch (Exception ex) {\n            throw new FOPException(ex);\n        }\n    }\n\n    public void setParameter(String name, Object value) {\n        transformer.setParameter(name, value);\n    }\n\n}"}, {"count": 1, "tags": [], "creator": "j3322ptm@yahoo.de", "attachment_id": null, "is_private": false, "id": 31824, "time": "2003-02-23T20:29:43Z", "bug_id": 17118, "creation_time": "2003-02-23T20:29:43Z", "text": "Committed to maintenance code.\nThank zou for zour contribution."}, {"count": 2, "tags": [], "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "is_private": false, "bug_id": 17118, "id": 155991, "time": "2012-04-01T06:51:48Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:51:48Z", "attachment_id": null}]
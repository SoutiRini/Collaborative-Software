[{"count": 0, "tags": [], "creator": "omri.spector@actimize.com", "attachment_id": null, "is_private": false, "id": 83963, "time": "2005-12-23T15:15:04Z", "bug_id": 38029, "creation_time": "2005-12-23T15:15:04Z", "text": "I perform nightly builds for a fairly large system. I use mail logger \nfor both success and notification since I want to be sure build ran and \nhandle any problems asap.\nI found that mail logger's notification, which contains the full build \nlog, is problematic - it encumbers my e-mail.\n\nIn my site I improved on this by changing \norg.apache.tools.ant.listener.MailLogger to support an additional \nattribute, MailLogger.body, which sends a fixed body.\nI then run the build with a fixed body (\"Build log can be found at....\") and a \nlogfile to a central directory (i.e.\nant build.nightly -logfile log\\build.log -logger \norg.apache.tools.ant.listener.MailLogger -\nDMailLogger.properties.file=nightlybuild.properties\n\nWith properties:\n\nMailLogger.failure.to=me@a.com\nMailLogger.success.to=me@b.com\nMailLogger.mailhost=blabla\nMailLogger.from=Nightly-Build\nMailLogger.body=Nightly build log can be found at \\\\\\\\win-build-1\n\\\\build\\\\log\\\\build.log\n)\n\nThis works nicely for me, and I think is a nice feature. \n\nI attach the code:\n<code>\n/*\n * Copyright  2002-2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.apache.tools.ant.listener;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport java.util.Properties;\nimport java.util.Enumeration;\nimport java.util.StringTokenizer;\n\nimport org.apache.tools.ant.BuildEvent;\nimport org.apache.tools.ant.DefaultLogger;\nimport org.apache.tools.ant.Project;\nimport org.apache.tools.ant.taskdefs.email.EmailAddress;\nimport org.apache.tools.ant.taskdefs.email.Message;\nimport org.apache.tools.ant.taskdefs.email.Mailer;\nimport org.apache.tools.ant.util.DateUtils;\nimport org.apache.tools.ant.util.StringUtils;\nimport org.apache.tools.mail.MailMessage;\n\n/**\n *  Buffers log messages from DefaultLogger, and sends an e-mail with the\n *  results. The following Project properties are used to send the mail.\n *  <ul>\n *    <li> MailLogger.mailhost [default: localhost] - Mail server to use</li>\n *    <li> MailLogger.port [default: 25] - Default port for SMTP </li>\n *    <li> MailLogger.from [required] - Mail \"from\" address</li>\n *    <li> MailLogger.failure.notify [default: true] - Send build failure\n *    e-mails?</li>\n *    <li> MailLogger.success.notify [default: true] - Send build success\n *    e-mails?</li>\n *    <li> MailLogger.failure.to [required if failure mail to be sent] - \nAddress\n *    to send failure messages to</li>\n *    <li> MailLogger.success.to [required if success mail to be sent] - \nAddress\n *    to send success messages to</li>\n *    <li> MailLogger.failure.subject [default: \"Build Failure\"] - Subject of\n *    failed build</li>\n *    <li> MailLogger.success.subject [default: \"Build Success\"] - Subject of\n *    successful build</li>\n *    <li> MailLogger.body [default: \"\"] - Body of sent mail. If omitted, \nbuild \n *    log will be sent. Useful in conjunction with -logfile for very long \nbuilds.</li>\n *  </ul>\n *  These properties are set using standard Ant property setting mechanisms\n *  (&lt;property&gt;, command-line -D, etc). Ant properties can be overridden\n *  by specifying the filename of a properties file in the <i>\n *  MailLogger.properties.file property</i> . Any properties defined in that\n *  file will override Ant properties.\n *\n *\n */\npublic class MailLogger extends DefaultLogger {\n    /** Buffer in which the message is constructed prior to sending */\n    private StringBuffer buffer = new StringBuffer();\n    \n    /** Properties used when configuring loader **/\n    Hashtable properties;\n\n    /**\n     *  Sends an e-mail with the log results.\n     *\n     * @param event the build finished event\n     */\n    public void buildFinished(BuildEvent event) {\n        super.buildFinished(event);\n        boolean success = (event.getException() == null);\n        String prefix = success ? \"success\" : \"failure\";\n        loadProperties(event.getProject());\n\n        try {\n        \tString fixedBody=getValue(\"body\",\"\");\n            boolean notify = Project.toBoolean(getValue(prefix \n+ \".notify\", \"on\"));\n\n            if (!notify) {\n                return;\n            }\n\n\n            String mailhost = getValue(\"mailhost\", \"localhost\");\n            int port = Integer.parseInt(getValue(\"port\",\n                                        String.valueOf\n(MailMessage.DEFAULT_PORT)));\n            String user = getValue(\"user\", \"\");\n            String password = getValue(\"password\", \"\");\n            boolean ssl = Project.toBoolean(getValue(\n                     \"ssl\", \"off\"));\n            String from = getValue(\"from\", null);\n            String replytoList = getValue(\"replyto\", \"\");\n            String toList = getValue(prefix + \".to\", null);\n            String subject = getValue(prefix + \".subject\",\n                    (success) ? \"Build Success\" : \"Build Failure\");\n            String body=(fixedBody.length()==0? buffer.substring(0) : \nfixedBody);\n            if (user.equals(\"\") && password.equals(\"\") && !ssl) {\n                sendMail(mailhost, port,  from, replytoList, toList,\n                         subject, body);\n            } else {\n                sendMimeMail(event.getProject(), mailhost, port, user,\n                             password, ssl, from, replytoList, toList,\n                             subject, body);\n            }\n        } catch (Exception e) {\n            System.out.println(\"MailLogger failed to send e-mail!\");\n            e.printStackTrace(System.err);\n        }\n    }\n\n    private void loadProperties(Project  project){\n        properties = project.getProperties();\n\n        // overlay specified properties file (if any), which overrides project\n        // settings\n        Properties fileProperties = new Properties();\n        String filename = (String) properties.get\n(\"MailLogger.properties.file\");\n        if (filename != null) {\n            InputStream is = null;\n            try {\n                is = new FileInputStream(filename);\n                fileProperties.load(is);\n            } catch (IOException ioe) {\n                // ignore because properties file is not required\n            } finally {\n                if (is != null) {\n                    try {\n                        is.close();\n                    } catch (IOException e) {\n                        // ignore\n                    }\n                }\n            }\n        }\n\n        for (Enumeration e = fileProperties.keys(); e.hasMoreElements();) {\n            String key = (String) e.nextElement();\n            String value = fileProperties.getProperty(key);\n            properties.put(key, project.replaceProperties(value));\n        }\n    }\n\n\n\n    /**\n     *  Receives and buffers log messages.\n     *\n     * @param message the message being logger\n     */\n    protected void log(String message) {\n    \t// it would have been nice to avoid this in \"fixed body\" mode, but \nsadly \n    \t// I could not get properties at buildStart event.\n\t\tbuffer.append(message).append(StringUtils.LINE_SEP);\n    }\n\n\n    /**\n     *  Gets the value of a property.\n     *\n     * @param  properties     Properties to obtain value from\n     * @param  name           suffix of property name. \"MailLogger.\" will be\n     *      prepended internally.\n     * @param  defaultValue   value returned if not present in the properties.\n     *      Set to null to make required.\n     * @return                The value of the property, or default value.\n     * @exception  Exception  thrown if no default value is specified and the\n     *      property is not present in properties.\n     */\n    private String getValue(String name,\n                            String defaultValue) throws Exception {\n        String propertyName = \"MailLogger.\" + name;\n        String value = (String) properties.get(propertyName);\n\n        if (value == null) {\n            value = defaultValue;\n        }\n\n        if (value == null) {\n            throw new Exception(\"Missing required parameter: \" + propertyName);\n        }\n\n        return value;\n    }\n\n\n    /**\n     *  Send the mail\n     * @param  mailhost         mail server\n     * @param  port             mail server port number\n     * @param  from             from address\n     * @param  replyToList      comma-separated replyto list\n     * @param  toList           comma-separated recipient list\n     * @param  subject          mail subject\n     * @param  message          mail body\n     * @exception  IOException  thrown if sending message fails\n     */\n    private void sendMail(String mailhost, int port, String from, String \nreplyToList, String toList,\n                          String subject, String message) throws IOException {\n        MailMessage mailMessage = new MailMessage(mailhost, port);\n        mailMessage.setHeader(\"Date\", DateUtils.getDateForHeader());\n\n        mailMessage.from(from);\n        if (!replyToList.equals(\"\")) {\n            StringTokenizer t = new StringTokenizer(replyToList, \", \", false);\n            while (t.hasMoreTokens()) {\n                mailMessage.replyto(t.nextToken());\n            }\n        }\n        StringTokenizer t = new StringTokenizer(toList, \", \", false);\n        while (t.hasMoreTokens()) {\n            mailMessage.to(t.nextToken());\n        }\n\n        mailMessage.setSubject(subject);\n\n        PrintStream ps = mailMessage.getPrintStream();\n        ps.println(message);\n\n        mailMessage.sendAndClose();\n    }\n    /**\n     *  Send the mail  (MimeMail)\n     * @param  project          current ant project\n     * @param  host             mail server\n     * @param  port             mail server port number\n     * @param  user             user name for SMTP auth\n     * @param  password         password for SMTP auth\n     * @param  ssl              if true send message over SSL\n     * @param  from             from address\n     * @param  replyToString    comma-separated replyto list\n     * @param  toString         comma-separated recipient list\n     * @param  subject          mail subject\n     * @param  message          mail body\n     */\n    private void sendMimeMail(Project project, String host, int port,\n                              String user, String password, boolean ssl,\n                              String from, String replyToString,\n                              String toString, String subject,\n                              String message)  {\n        // convert the replyTo string into a vector of emailaddresses\n        Mailer mailer = null;\n            try {\n                mailer =\n                    (Mailer) Class.forName\n(\"org.apache.tools.ant.taskdefs.email.MimeMailer\")\n                    .newInstance();\n            } catch (Throwable e) {\n                log(\"Failed to initialise MIME mail: \" + e.getMessage());\n                return;\n            }\n        Vector replyToList = vectorizeEmailAddresses(replyToString);\n        mailer.setHost(host);\n        mailer.setPort(port);\n        mailer.setUser(user);\n        mailer.setPassword(password);\n        mailer.setSSL(ssl);\n        Message mymessage = new Message(message);\n        mymessage.setProject(project);\n        mailer.setMessage(mymessage);\n        mailer.setFrom(new EmailAddress(from));\n        mailer.setReplyToList(replyToList);\n        Vector toList = vectorizeEmailAddresses(toString);\n        mailer.setToList(toList);\n        mailer.setCcList(new Vector());\n        mailer.setBccList(new Vector());\n        mailer.setFiles(new Vector());\n        mailer.setSubject(subject);\n        mailer.send();\n    }\n    private Vector vectorizeEmailAddresses(String listString) {\n        Vector emailList = new Vector();\n        StringTokenizer tokens = new StringTokenizer(listString, \",\");\n        while (tokens.hasMoreTokens()) {\n            emailList.addElement(new EmailAddress(tokens.nextToken()));\n        }\n        return emailList;\n    }\n}\n</code>"}, {"count": 1, "tags": [], "bug_id": 38029, "text": "code should be attached to the bugzilla report using the attachment facility. \nWhen such an attachment comprises modifications to existing Ant source it should\nbe presented as a unified diff (see\nhttp://ant.apache.org/bugs.html#Fixing%20the%20Bug).\n\nThanks,\nMatt", "id": 83965, "time": "2005-12-23T16:04:21Z", "creator": "mbenson@apache.org", "creation_time": "2005-12-23T16:04:21Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 38029, "text": "Created attachment 17274\ndiff -u of patch to mail logger\n\nI am attaching a diff for the exact patch I performed", "id": 83978, "time": "2005-12-24T17:55:46Z", "creator": "omri.spector@actimize.com", "creation_time": "2005-12-24T17:55:46Z", "is_private": false, "attachment_id": 17274}, {"count": 3, "tags": [], "bug_id": 38029, "is_private": false, "text": "implemented as two different properties for the success/failure cases with svn revision 704562.", "id": 121501, "time": "2008-10-14T08:16:35Z", "creator": "bodewig@apache.org", "creation_time": "2008-10-14T08:16:35Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 55050, "attachment_id": null, "is_private": false, "id": 167616, "time": "2013-06-03T11:16:59Z", "creator": "brown@reflexe.fr", "creation_time": "2013-06-03T11:16:59Z", "text": "Hello,\n\nI have a formula in an xlsx worksheet, opened as SUM($D$2:D2), which during processing the logic of my program \"stretches\" it to a column further to the right (depending on what data I'm adding to the worksheet).  I'm expecting it to be (for example) \"stretched\" to SUM($D$2:Q2).\n\nWhat I'm observing is different, I get SUM($D2:Q$2).  In other words, the \"absolute\" row reference has \"moved\" from the first column to the last column, when I specifically constructed the replacement AreaPtg instance to retain the absolute markers.  I've tracked this down to the constructor in:\n\norg.apache.poi.ss.formula.ptg.AreaPtg\nprotected AreaPtgBase(int firstRow, int lastRow, int firstColumn, int lastColumn, boolean firstRowRelative, boolean lastRowRelative, boolean firstColRelative, boolean lastColRelative)\n\n...which inverts the attributes of lastRow and firstRow if the lastRow isn't after the first row.  I understand that this is trying to \"sanitize\" bad parameters, however it appears to incorrectly handle the case of firstRow and lastRow being equal, and inverts the \"absolute\" attribute incorrectly.\n\nHere's my sample code:\n\n_ptgs[i] = new AreaPtg(\n aptg.getFirstRow(), aptg.getLastRow(), firstColumn, lastColumn,\n aptg.isFirstRowRelative(), aptg.isLastRowRelative(), aptg.isFirstColRelative(), aptg.isLastColRelative()\n);\n\nThanks"}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Any chance you could turn this into a failing unit test? (That'll make the process of fixing it, and ensuring it stays fixed much quicker)", "id": 167617, "time": "2013-06-03T11:28:51Z", "bug_id": 55050, "creation_time": "2013-06-03T11:28:51Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55050, "attachment_id": null, "is_private": false, "id": 167618, "time": "2013-06-03T11:58:57Z", "creator": "brown@reflexe.fr", "creation_time": "2013-06-03T11:58:57Z", "text": "I could try to create the unit test... I've never fixed anything on an Apache project, so I'm unfamiliar with the conventions.  How would I go about it: do you have an example of how to run it and a pointer to a subversion folder where it would be recommended to put this test?\n\nIt looks as if the fix could be as simple as changing the comparison operator in both \"if\" blocks in the constructor to use the \">=\" (greater than or equals) operator instead of the \">\" (greater than) operator."}, {"count": 3, "text": "http://poi.apache.org/guidelines.html has some guidance\n\nA unit test will normally live in the same package as the thing it tests, but in a different folder (eg src/testcases/org/apache/foo vs src/java/org/apache/foo)\n\nIf you're having issues, best ask for advice on the dev list", "creator": "apache@gagravarr.org", "is_private": false, "id": 167793, "time": "2013-06-12T17:30:29Z", "bug_id": 55050, "creation_time": "2013-06-12T17:30:29Z", "tags": [], "attachment_id": null}, {"count": 4, "text": "Created attachment 30529\nProposed test case for this issue\n\nHere's the test case, I think you'll need to deal with adding it to the source tree as I'm not a committer.\n\nEach of the four assertions fails, obviously with the first one failing, the next ones can't run.", "creator": "brown@reflexe.fr", "is_private": false, "id": 168253, "time": "2013-07-03T10:55:05Z", "bug_id": 55050, "creation_time": "2013-07-03T10:55:05Z", "tags": [], "attachment_id": 30529}, {"count": 5, "tags": [], "bug_id": 55050, "attachment_id": null, "is_private": false, "id": 176810, "time": "2014-07-31T16:07:01Z", "creator": "apache@gagravarr.org", "creation_time": "2014-07-31T16:07:01Z", "text": "Thanks for the test, I've used it in r1614928 to fix the problem"}]
[{"count": 0, "tags": [], "text": "The following code works for classes with ascii only characters:\n\n<javac source=\"1.5\" target=\"1.5\" sourcepath=\"\" srcdir=\"${src.dir}\" destdir=\"${classes.dir}\" deprecation=\"on\" debug=\"on\" classpathref=\"classpath\" fork=\"true\" memoryMaximumSize=\"@maxMemorySize@\" encoding=\"UTF-8\">\n        \t<include name=\"${app.directory}/**/*.java\"/>\n        </javac>\n\nHowever, it fails when compiling clsses with special characters in the class names:\n\n[iosession]   Task javac started\n[iosession]     /C24/PUB/io-stds/trunk/standards/GSIT/build/test/deployment/build-biz.c24.io.minos.xml:73: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds\n[iosession]     Compiling 131 source files to /C24/PUB/io-stds/trunk/standards/GSIT/build/test/deployment/build/classes\n[iosession]     javac: file not found: /C24/PUB/io-stds/trunk/standards/GSIT/build/test/deployment/src/java/biz/c24/io/minos/Al\u00e9aChiffr\u00e9Class.java\n[iosession]     Usage: javac <options> <source files>\n[iosession]     use -help for a list of possible options\n[iosession] Target compile finished\n\nIt's as if encoding setting is ignored.", "is_private": false, "id": 150573, "creator": "divan.mostert@c24.biz", "time": "2011-10-14T14:00:47Z", "bug_id": 52030, "creation_time": "2011-10-14T14:00:47Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "the encoding attribute applies to the encoding of the file's content not of the file's name.  I don't think we have anything in javac that would control encoding of file names.", "attachment_id": null, "id": 150576, "creator": "bodewig@apache.org", "time": "2011-10-14T15:36:39Z", "bug_id": 52030, "creation_time": "2011-10-14T15:36:39Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 52030, "attachment_id": null, "id": 150577, "time": "2011-10-14T15:39:30Z", "creator": "divan.mostert@c24.biz", "creation_time": "2011-10-14T15:39:30Z", "is_private": false, "text": "Would it be possible to add a setting for it in the next release?"}, {"count": 3, "tags": [], "text": "Not clear that Ant is doing anything wrong here; it relies on java.io.File to supply Unicode paths. The native filesystem may have difficulties with non-ASCII path names, and this might be specific to a certain kind of mount, especially for network drives. Certainly there is no problem using Ant to compile projects with non-ASCII (indeed non-ISO-Latin-1) class names on a local ext3 mount in Ubuntu.\n\nWhile I do not know of any reason it would trigger encoding bugs, your use of <include/> here is rather suspicious. There is no reason to specify includes of all **/*.java. Just make sure your source path is correct; in this case, ${src.dir} ought to be \"/C24/PUB/io-stds/trunk/standards/GSIT/build/test/deployment/src/java\".", "is_private": false, "id": 151025, "creator": "jglick@apache.org", "time": "2011-10-29T03:53:08Z", "bug_id": 52030, "creation_time": "2011-10-29T03:53:08Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "text": "Note that when you are running a forked compiler and the javac command line exceeds the POSIX maximum guaranteed size of 4Kb, org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter.executeExternalCompile will create a temp file for arguments (including source filenames) and pass it to javac using @/tmp/files syntax. This temp file uses the operating system's default character encoding, since com.sun.tools.javac.main.CommandLine.loadCmdFile expects it in that encoding. On modern Linux distributions at least, UTF-8 is the default encoding, which is safe for any characters; on Mac OS X some other limited encoding might be the default, meaning you can only deal with filenames that can be represented in that encoding, though I would expect '\u00e9' to be safe. Anyway the error message you quote seems to indicate that javac received the filename intact but was unable to open it.", "id": 151026, "time": "2011-10-29T04:07:06Z", "bug_id": 52030, "creation_time": "2011-10-29T04:07:06Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 52030, "text": "It does indeed look like the file was correctly picked up from using @/tmp/files. However, the new JVM  does seem to ignore the encoding setting when it is trying access the file at the given location.\n\nI had to force writing out the Java classes with a specific encoding like so:\nwriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), Charset.forName(\"UTF-8\")));\n\nYou'd have to be doing the same/similar when reading files in.", "count": 5, "id": 151078, "time": "2011-10-31T12:15:56Z", "creator": "divan.mostert@c24.biz", "creation_time": "2011-10-31T12:15:56Z", "is_private": false}]
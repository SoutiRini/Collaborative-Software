[{"count": 0, "tags": [], "creator": "davidduman@hotmail.com", "is_private": false, "text": "Non-ASCII JavaScript escaped chars (InternetExplorer) above 0xFF are encoded in \nthe form %uXXXX, which causes exceptions in \norg.apache.tomcat.util.RequestUtil.unUrlDecode.  To reproduce this exception, I \ntyped Japanese characters into the test page below, which I use to load a \nHelloWorld Servlet.  The HelloWorld servlet throws an IllegalArgumentException \nwhen using the Servlet API for ServletRequest::getParameter() for \"testparam\".\n\n<html>\n<head>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=Shift_JIS\">\n<script language=\"JavaScript\">\nfunction goAndGetIt() \n{\n\twindow.location.href = document.forms[0].action + \"?testparam=\"+escape\n(document.forms[0].testparam.value);\n}\n</script>\n</head>\n<body>\ntest form:\n<form action=\"http://dduman3.myserver.com/HelloWorld\" method=\"GET\" \nonsubmit=\"goAndGetIt(); return false;\">\n\t<input type=\"text\" name=\"testparam\">\n\t<input type=\"submit\">\n</form>\n</body>\n</html>\n\n\nThe problem is that InternetExplorer's escape method returns escape sequences \nin the form %uXXXX for chars above 0xFF (where Netscape returns a multibyte \nescape sequence that Tomcat can handle (%XX%XX)).\n\nThe patch I have put into my build is to not throw the IllegalArgumentException \nin unUrlDecode, but to instead recover by appending the '%' char and increment \nthe counter by one, so the rest of the request can be parsed. \n\nPasted below is the patched portion of the \"catch\" of unUrlDecode:\n\n} catch (NumberFormatException e) {\n   String msg = \"Decode error \";\n   // XXX no need to add sm just for that\n   // sm.getString(\"serverRequest.urlDecode.nfe\", data);\n\n   //dduman -- if we get an error here, instead of bailing, write out \n   //  the char and continue\n   //dduman -- add:\n   buf.append('%');\n   i++;\n\n   //dduman -- remove:\n   //throw new IllegalArgumentException(msg);\n}", "id": 1698, "time": "2001-04-02T19:38:38Z", "bug_id": 1191, "creation_time": "2001-04-02T19:38:38Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "This is a very sensitive are, with many security problems so far ( due to \ndecoding, etc). I don't think it can be done for 3.2.2.\nAlso, in 3.3 it needs more review ( there are many related bugs, and so far we \ndon't have a general solution ).", "attachment_id": null, "id": 1783, "creator": "cmanolache@yahoo.com", "time": "2001-04-07T15:15:23Z", "bug_id": 1191, "creation_time": "2001-04-07T15:15:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 1191, "attachment_id": null, "is_private": false, "id": 1823, "time": "2001-04-10T02:34:07Z", "creator": "r89052@im.ntu.edu.tw", "creation_time": "2001-04-10T02:34:07Z", "text": "Can we not just simply enhance the decoding method as follows:\n\n    public static String unUrlDecode(String data) {\n        // IE's escape() function in javascript encodes characters into\n        // Unicode in the form %uXXXX\n        boolean isUnicode = false;\n\tStringBuffer buf = new StringBuffer();\n\tfor (int i = 0; i < data.length(); i++) {\n\t    char c = data.charAt(i);\n\t    switch (c) {\n\t    case '+':\n\t\tbuf.append(' ');\n\t\tbreak;\n\t    case '%':\n\t\t// XXX XXX \n\t\ttry {\n                  if (data.charAt(i+1)=='u'){\n                    buf.append((char)Integer.parseInt(\n                                    data.substring(i+2,i+6),16));\n                    i += 5;\n                    isUnicode = true;\n                  }\n                  else {\n                    buf.append((char)Integer.parseInt(\n                                    data.substring(i+1,i+3),16));\n                    i += 2;\n                    if (isUnicode) throw new IllegalArgumentException(\"Mixing\nUnicode and UTF-8\");\n                  }\n\t\t} catch (NumberFormatException e) {\n                    String msg = \"Decode error \";\n\t\t    // XXX no need to add sm just for that\n\t\t    // sm.getString(\"serverRequest.urlDecode.nfe\", data);\n\n\t\t    throw new IllegalArgumentException(msg);\n\t\t} catch (StringIndexOutOfBoundsException e) {\n\t\t    String rest  = data.substring(i);\n\t\t    buf.append(rest);\n\t\t    if (rest.length()==2)\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tbreak;\n\t    default:\n\t\tbuf.append(c);\n\t\tbreak;\n\t    }\n\t}\n        String result = buf.toString();\n        // convert to UTF-8 for consistent representation\n        if (isUnicode) result=new String(result.getBytes(\"UTF-8\"));\n        return result;\n    }           \n\n\n\nThere shouldn't be any (security) side-effects from this enhancement\n"}, {"count": 3, "tags": [], "text": "I'm sorry, but this seems to be a bug in IE, the RFC is clear about how URI\nencoding should be done ( and %uXXXX is not defined ), ECMA 262 is clear about\nusing UTF8 encoding. There are enough problems with supporting the current\nstandards, adding support for browsers bugs is not a good idea. \n\n3.2.2 is close to release, and I don't think this is a \"major\" or \"security\" bug\nthat should stop the release. \nFor 3.3 - it would be possible, but I think we should fix the \"real\" bugs first,\nand then deal with browser workarounds. ( it's not easy - 3.3 uses the original\nbyte[] to unescape and then move to UTF8. There are few related bugs and I'll\ntry to see if this bug could fit in )", "attachment_id": null, "id": 1832, "creator": "cmanolache@yahoo.com", "time": "2001-04-10T16:55:13Z", "bug_id": 1191, "creation_time": "2001-04-10T16:55:13Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 1191, "text": "Reopen so I can change.", "count": 4, "id": 5594, "time": "2001-09-15T10:35:59Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-09-15T10:35:59Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 1191, "text": "I don't think this is a bug in tomcat, and a workaround is not likely. I believe all standards are clear - you can use a different browser or write an encode() function that respects the standards.", "count": 5, "id": 5595, "time": "2001-09-15T10:39:24Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-09-15T10:39:24Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "gbenson@redhat.com", "text": "When org.apache.catalina.startup.ClassLoaderFactory.createClassLoader() reads\nthe contents of the packed directory it lowercases the filenames.  This breaks\nif you have a case-sensitive filesystem -- if it finds a file named\n\"MySQL-JDBC.jar\" then it will attempt to add it to the classpath as\n\"mysql-jdbc.jar\", which causes the getCanonicalPath() call later in the function\nto fail.", "id": 44203, "time": "2003-09-15T12:51:07Z", "bug_id": 23175, "creation_time": "2003-09-15T12:51:07Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 44204, "time": "2003-09-15T12:57:16Z", "bug_id": 23175, "creation_time": "2003-09-15T12:57:16Z", "is_private": false, "text": "The code is:\n\n                String filenames[] = directory.list();\n                for (int j = 0; j < filenames.length; j++) {\n                    String filename = filenames[j].toLowerCase();\n                    if (!filename.endsWith(\".jar\"))\n                        continue;\n                    File file = new File(directory, filenames[j]);\n                    if (debug >= 1)\n                        log(\"  Including jar file \" + file.getAbsolutePath());\n                    URL url = new URL(\"file\", null,\n                                      file.getCanonicalPath());\n                    list.add(url.toString());\n                }\n\nNote that the original String is used to build the file object, not the filename\nlocal variable (and it is immutable). This bug is invalid."}, {"count": 2, "tags": [], "bug_id": 23175, "attachment_id": null, "id": 44205, "creation_time": "2003-09-15T13:09:08Z", "time": "2003-09-15T13:09:08Z", "creator": "gbenson@redhat.com", "text": "My apologies.", "is_private": false}]
[{"count": 0, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "is_private": false, "text": "I was profiling an application and found that there was a lot of CPU being used \nas a result of the OutSupport handling of a string.\n\nThe current handler prints each individual character to the JspWriter.\n\nwith tomcat 4.0.6 the JspWriterImpl then converts every character to a String \nand writes it.\n\nOn my test system (running a development application) the application was \nconsuming 15.6% of the CPU running OutSupport.out(..) and generating over 13000 \ntemporary object per page. Time for the Garbage collection is not included.\n\nThese figures were obtained with \nJprobe 5.0.1\nTomcat 4.0.6 (very old I know)\ntaglibs-standard 1.0.4\nWindows 2000\njdk 1.4.2_02\n\nI enclose a patch that required no objects to be generated and reduced the CPU \nload to 2.3%, and no additional GC overhead \n\nthis is achieved by writing blocks of characters between the 'special' \ncharacters, and coping with the special characters if and when they occur", "id": 48797, "time": "2003-12-10T08:34:03Z", "bug_id": 25382, "creation_time": "2003-12-10T08:34:03Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "attachment_id": 9485, "text": "Created attachment 9485\nmodified OutSUport.java file (not a patch cvs diff is broken on my machine). based on standard 1.0 branch", "id": 48798, "time": "2003-12-10T08:43:44Z", "bug_id": 25382, "creation_time": "2003-12-10T08:43:44Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 25382, "attachment_id": null, "is_private": false, "id": 49042, "time": "2003-12-13T00:19:26Z", "creator": "pierre.delisle@sun.com", "creation_time": "2003-12-13T00:19:26Z", "text": "Mike,\n\nThanks for the patch. Indeed, it looks like your fix would provide some\nsubstantial performance improvement. A few comments:\n  - To minimize risk, I'll wait to commit any performance improvement once 1.1\nfinal is released (should hopefully happen next week).\n  - I'd also like us to implement some tests along with these fixes to make sure\nany performance fix won't cause any regression. I'll look into integrating\nJUnit/Cactus.\n  - Would be nice to have some performance benchmarks we could run to document\nthese performance improvements. If you have something you could contribute\nthere, that would be great.\n\nThanks again.\n  \n    "}, {"count": 3, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "attachment_id": null, "text": "I have no more performance information than I have already given, ie 15.3% -> \n2.3% based on a custommer application this is currently going through the birth \npains.\n\nThe figures were based in JProbe, not Hotspot, but I cant think that the patch \nwould make things worse\n\nIMPORTANT\nthis patch is for JSTL 1.0 only. This file has been reworked for JSTL 1.1, and \ntherefore the delay until JSTL 1.1 final is not relivent (apart from your \nworkload!). Is there any planned releases for 1.0?\n\nI dont have a Tomcat 5 installed and therefore I was not able to produce a \npatch for JSLT1.1, although the modifications should be equally applicable for \nthe (HEAD) JSTL1.1 version of the file, but this would require some other \nchanges, as the structure of the conversion process has changed minorly, to \nsupport Readers etc.\n\nI dont believe that I will be able to contribute anything until after Xmas due \nto pressure of work. I am not sure what for this would take anyway, as it is \ndependent on JSPWriter implementation, which means that it requires to run in a \nservlet enviroment, so would it be a web page with a few <c:out> tags and a \ntimer?", "id": 49121, "time": "2003-12-15T08:41:32Z", "bug_id": 25382, "creation_time": "2003-12-15T08:41:32Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 25382, "attachment_id": null, "is_private": false, "id": 57256, "time": "2004-05-12T00:27:06Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-05-12T00:27:06Z", "text": "CC'ing the taglibs-dev address to all Standard bugs. "}, {"count": 5, "tags": [], "bug_id": 25382, "attachment_id": null, "id": 57266, "time": "2004-05-12T07:10:09Z", "creator": "mike.skells@ebizz-consulting.com", "creation_time": "2004-05-12T07:10:09Z", "is_private": false, "text": "I am moving a product to JSTL 1.1 this week. \nI will port the patch I delivered for 1.1 this week, and attach it to this issue"}, {"count": 6, "tags": [], "creator": "nagoya@felipeal.net", "attachment_id": null, "text": "Hi Mike,\n\nYes, please fill a new bug, preferably with instructions on how to reproduce it.\n\nIf we later realize the new bug is caused by the same problem , we can mark it\nthen as duplicated of this one.\n\nThanks,\n\nFelipe", "id": 57270, "time": "2004-05-12T08:57:35Z", "bug_id": 25382, "creation_time": "2004-05-12T08:57:35Z", "is_private": false}, {"count": 7, "tags": [], "text": "Oops, I put the comment on the wrong bug :-(\n\nAnyway, in order to backport the fix to 1.0, please use the following CVS tag:\n\nSTANDARD_1_0_BRANCH\n\nFelipe", "is_private": false, "id": 57272, "creator": "nagoya@felipeal.net", "time": "2004-05-12T09:00:10Z", "bug_id": 25382, "creation_time": "2004-05-12T09:00:10Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "is_private": false, "text": "the fix that I filed was against 1.0. I will produce a new one for 1.1 \n(sometime ...)\n\nI am not a committer for this project (happy to become one)", "id": 57276, "time": "2004-05-12T11:15:58Z", "bug_id": 25382, "creation_time": "2004-05-12T11:15:58Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 25382, "attachment_id": null, "is_private": false, "id": 57322, "time": "2004-05-13T03:36:53Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-05-13T03:36:53Z", "text": "Hi Mike,\n\nSorry, my previous message was posted to the wrong bug. \n\nAnyway, if you want to become a committer, you're in the right path:\ncontributing to the project as a developer, fixing bugs and submitting patches,\netc...\n\nRegards,\n\nFelipe\n\nPS: here are some links that explain the Apache/Jakarta philosophy:\n\nhttp://apache.org/foundation/how-it-works.html\nhttp://jakarta.apache.org/site/getinvolved.html\nhttp://jakarta.apache.org/taglibs/index.html#GettingInvolved"}, {"count": 10, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "attachment_id": 11530, "text": "Created attachment 11530\ncvs path file", "id": 57352, "time": "2004-05-13T13:43:43Z", "bug_id": 25382, "creation_time": "2004-05-13T13:43:43Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 25382, "attachment_id": 11531, "id": 57353, "time": "2004-05-13T13:44:28Z", "creator": "mike.skells@ebizz-consulting.com", "creation_time": "2004-05-13T13:44:28Z", "is_private": false, "text": "Created attachment 11531\nfull source of change"}, {"count": 12, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "attachment_id": 11535, "text": "Created attachment 11535\nclient app to generate performnace results", "id": 57357, "time": "2004-05-13T13:46:07Z", "bug_id": 25382, "creation_time": "2004-05-13T13:46:07Z", "is_private": false}, {"count": 13, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "is_private": false, "text": "Created attachment 11537\ntest jsp page to generate results", "id": 57359, "time": "2004-05-13T13:46:59Z", "bug_id": 25382, "creation_time": "2004-05-13T13:46:59Z", "attachment_id": 11537}, {"count": 14, "tags": [], "text": "as promised a patch for jstl 1.1.\n\nThe results of the patch are approx 5 times faster for non data containing no \nspecial characters, and 30% fastr for data containing mostly special characters\n\nthe test config for the results are \ntomcat 5.0.19\njava 1.4.1_02\nwindows XP pro\nAMD athlon 1.533Ghz\n\nI attach a path, the actual source, a JSP test page, and a simple client that \ncan run the test page.\n\nThe client app is only because IE cannot cope with volume of the output from \nthe test page!\n\nhere are the results for operations\ncol 1 - text without special chars\ncol 2 - text without special chars - escapeXML=false\ncol 3 - text with some special chars\ncol 4 - text with some special chars - escapeXML=false\ncol 5 - text mostly special chars\ncol 6 - text mostly special chars - escapeXML=false\n\nwithout patch\n\ntest results\n1204,   47,     344,    31,     250,    47,     \n296,    31,     265,    16,     250,    16,     \n282,    31,     266,    47,     235,    31,     \n422,    47,     391,    16,     375,    31,     \n265,    31,     328,    31,     234,    32,     \n281,    32,     297,    31,     250,    31,     \n375,    31,     453,    31,     328,    31,     \n282,    47,     297,    32,     313,    31,     \n265,    31,     265,    31,     250,    32,     \n375,    31,     438,    31,     234,    31,     \n282,    32,     265,    31,     375,    78,     \n265,    31,     453,    32,     234,    94,     \n266,    47,     266,    15,     250,    31,     \n390,    31,     250,    31,     235,    31,     \n266,    31,     266,    32,     359,    31,     \n266,    31,     390,    31,     235,    32,     \n390,    32,     266,    31,     250,    31,     \n282,    47,     266,    78,     359,    31,     \n328,    31,     375,    94,     250,    16,     \n406,    78,     265,    31,     234,    31,     \n======================================================\nAverages\n359,    37,     320,    35,     275,    35,     \nEnd of results\n\n\n\n\nwith patch\n\ntest results\n62,     47,     94,     31,     219,    31,     \n109,    31,     94,     31,     172,    31,     \n63,     31,     125,    31,     187,    31,     \n78,     31,     62,     32,     172,    32,     \n63,     32,     79,     15,     172,    31,     \n62,     15,     62,     31,     203,    31,     \n63,     32,     63,     32,     188,    16,     \n62,     31,     62,     31,     203,    31,     \n63,     31,     78,     31,     172,    31,     \n46,     31,     63,     31,     187,    32,     \n63,     32,     62,     32,     172,    31,     \n47,     31,     63,     31,     219,    31,     \n62,     31,     62,     31,     172,    47,     \n63,     31,     63,     16,     187,    31,     \n47,     32,     62,     31,     172,    31,     \n62,     31,     78,     31,     188,    16,     \n47,     31,     94,     32,     203,    31,     \n94,     31,     63,     31,     187,    32,     \n47,     32,     62,     31,     188,    31,     \n78,     46,     63,     31,     172,    47,     \n======================================================\nAverages\n64,     32,     72,     29,     186,    31,     \n\n\n\n\n\n", "attachment_id": null, "id": 57360, "creator": "mike.skells@ebizz-consulting.com", "time": "2004-05-13T13:51:45Z", "bug_id": 25382, "creation_time": "2004-05-13T13:51:45Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 25382, "attachment_id": null, "is_private": false, "id": 57361, "time": "2004-05-13T13:55:03Z", "creator": "mike.skells@ebizz-consulting.com", "creation_time": "2004-05-13T13:55:03Z", "text": "I notice that ../comm/core/Util has a escapeXML method. ANy ideas where that is \nused?"}, {"count": 16, "tags": [], "bug_id": 25382, "attachment_id": null, "is_private": false, "id": 57382, "time": "2004-05-13T22:58:08Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-05-13T22:58:08Z", "text": "The Util.escapeXml(String) method is used in Functions.escapeXml(String). That function simply escapes \ncharacters that could be interpreted as XML markup."}, {"count": 17, "tags": [], "creator": "mike.skells@ebizz-consulting.com", "is_private": false, "text": "So I presume that the same performance improvements could be applied there, if \nthis patch is accepted", "id": 57383, "time": "2004-05-13T23:12:37Z", "bug_id": 25382, "creation_time": "2004-05-13T23:12:37Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 25382, "attachment_id": null, "id": 59078, "time": "2004-06-11T01:44:10Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-06-11T01:44:10Z", "is_private": false, "text": "*** Bug 26826 has been marked as a duplicate of this bug. ***"}, {"count": 19, "tags": [], "bug_id": 25382, "attachment_id": null, "id": 59079, "time": "2004-06-11T01:53:41Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-06-11T01:53:41Z", "is_private": false, "text": "Using your patch, wrote a generic xml escaping method in the Util class. Found this to be about 5x \nfaster than the existing implementation.\n\nThe out tag handler customized implementation that writes to the JspWriter did have some performance \ngains over the generic implementation and so kept the customized implementation for the tag handler."}, {"count": 20, "tags": [], "text": "The changes need to be applied to the standard 1_0 branch. As far as I can see \nthey seem to be applied to the 1.1 main line only\n\nThis bug was raised on the 1.0 line, and contains fixes for the 1.0 and 1.1 line", "attachment_id": null, "id": 59088, "creator": "mike.skells@ebizz-consulting.com", "time": "2004-06-11T08:14:57Z", "bug_id": 25382, "creation_time": "2004-06-11T08:14:57Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 25382, "attachment_id": null, "id": 59134, "time": "2004-06-11T21:26:58Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-06-11T21:26:58Z", "is_private": false, "text": "Applied patch to Standard 1.0.x branch."}]
[{"count": 0, "tags": [], "creator": "jgarrison@troux.com", "attachment_id": null, "text": "This method contains the following code at the end:\n\n    // TODO - when does this occur?\n    return null;\n\nThe answer is that this occurs whenever a numeric cell is given \"Text\" format (format string '@') in Excel.  Returning null at this point results in the value being formatted with the default numeric format (a decimal place) even though the value displayed in Excel is an integer.\n\nI would contribute a patch but don't yet understand enough of the framework to know the best way to fix this.", "id": 128607, "time": "2009-07-07T13:39:13Z", "bug_id": 47490, "creation_time": "2009-07-07T13:39:13Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "jgarrison@troux.com", "text": "After more research on Excel 2003, I've discovered the following.  \n\nIf you take a numeric cell and apply the 'Text' format to it, Excel DOES NOT change the cell's internal representation to String.  So you end up with something POI reads as numeric but the user believes is a String, because it's left justified.  However if you export the spreadsheet as XML at this point you will see that the cell still has a numeric type.  \n\nWhile the cell is in the weird 'display as text but really still a number' state, Excel seems to use a left-justified version of General format, and still performs numeric display adjustments such as rounding if the column is too narrow for all the decimal places, or switching to scientific notation if the column is too narrow for the magnitude.\n\nIf you make any changes to the cell, even a null change such as clicking in the formula bar and then clicking the green checkmark (or pressing Enter), then Excel converts the stored value to text and attaches the green warning triangle to the top left corner of the cell.  At this point the cell really contains text.\n\nWhat I think needs to happen is that a numeric cell with format '@' needs to be formatted as \"General\".", "id": 128611, "time": "2009-07-07T14:34:57Z", "bug_id": 47490, "creation_time": "2009-07-07T14:34:57Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "creator": "jgarrison@troux.com", "is_private": false, "id": 128613, "time": "2009-07-07T15:21:57Z", "bug_id": 47490, "creation_time": "2009-07-07T15:21:57Z", "tags": [], "text": "Based on my analysis I've come up with a workaround.  At the point in my code where I'm calling HSSFDataFormatter.formatCellValue(cell) I know that I want the numeric cell as a string, so I force the cell style to General as follows:\n\n    HSSFCellStyle cs = cell.getCellStyle();\n    cs.setDataFormat((short)-1);\n    cell.setCellStyle(cs);\n    value = new HSSFDataFormatter().formatCellValue(cell);\n\nThis returns the value formatted as it would be displayed assuming the column width were sufficient -- I.e. it provides the entire value and not a rounded or scientific-notation abbreviation.\n\nI'm not sure how POI should handle the situation, so I'll leave that up to more knowledgeable developers."}, {"count": 3, "attachment_id": null, "creator": "apache@gagravarr.org", "text": "Any chance you could upload a very small file containing a cell with this type?\n\nThat'll be useful for testing/fixing against", "id": 131664, "time": "2009-11-03T17:30:03Z", "bug_id": 47490, "creation_time": "2009-11-03T17:30:03Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 47490, "text": "I've added a unit test for this, and it passes just fine. Both \"@\" and \"General\" will cause the text to be formatted as an integer, so this seems to have been fixed at some point since being reported", "id": 137358, "time": "2010-06-04T11:34:06Z", "creator": "apache@gagravarr.org", "creation_time": "2010-06-04T11:34:06Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 51223, "text": "Created attachment 27027\nPatch for the ubuntu package\n\nPer the RFC, HTTP Not Modified should not include entity headers \"Section 10.3.5: the response SHOULD NOT include other entity-headers\"\n\nHowever, the Cross-Origin-Resource-Sharing spec (http://www.w3.org/TR/cors/) defines a few headers that are not entity headers and should therefore be allowed in the 304 response:\n\"Access-Control-Allow-Origin\",\n\"Access-Control-Allow-Credentials\",\n\"Access-Control-Allow-Methods\",\n\"Access-Control-Allow-Headers\",\n\"Access-Control-Max-Age\"\n\nI understand that CORS is currently only a draft but it currently prevents any web application from properly adopting this new standard. Indeed, a client making a CORS request will not see the response if it is an Http Not Modified 304. The browser will block it due to the missing CORS headers.\n\nPatch attached.", "id": 146434, "time": "2011-05-18T19:40:42Z", "creator": "arthur@inkling.com", "creation_time": "2011-05-18T19:40:42Z", "is_private": false, "attachment_id": 27027}, {"count": 1, "tags": [], "bug_id": 51223, "text": "CORS doesn't require those headers on a 304, and indeed browsers work without them present on it. This is because many 304s are generated from intermediary caches that can't be updated to know about CORS.\n\nRecommend INVALID.", "id": 179180, "time": "2014-11-19T04:45:16Z", "creator": "mnot@mnot.net", "creation_time": "2014-11-19T04:45:16Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 51223, "attachment_id": null, "id": 179715, "time": "2014-12-11T17:46:36Z", "creator": "michiel@unhosted.org", "creation_time": "2014-12-11T17:46:36Z", "is_private": false, "text": "Mark Nottingham:\n> browsers work without them present on it\n\nMaybe I misunderstood your point, but I was not able to reproduce that finding.\n\nMy steps:\n\n* Run this node script on test.com:\n\n````js\nrequire('http').createServer(function(req, res) {\n  res.writeHeader(304);\n  res.end();\n}).listen(8080);\n````\n\n* Visit http://example.com/ and paste this into the console:\n\n````js\nxhr = new XMLHttpRequest();\nxhr.open('GET', 'http://test.com:8080/', true);\nxhr.send();\n````\n\nFirefox on Ubuntu reports:\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://test.com:8080/. This can be fixed by moving the resource to the same domain or enabling CORS.\n\nChromium on Ubuntu reports:\nXMLHttpRequest cannot load http://test.com:8080/. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://example.com' is therefore not allowed access."}, {"count": 3, "tags": [], "text": "Full test here:\n  https://github.com/w3c/web-platform-tests/pull/1400", "attachment_id": null, "id": 179745, "creator": "mnot@mnot.net", "time": "2014-12-13T00:10:55Z", "bug_id": 51223, "creation_time": "2014-12-13T00:10:55Z", "is_private": false}, {"count": 4, "tags": [], "creator": "joern.berkefeld@gmail.com", "attachment_id": null, "text": "just ran into this issue.\nwe were upgrading our APIs to have them send less data when we noticed that our off-site installs stopped working. I can fully confirm Michiel de Jong's findings.\n\nWhile this might present problems with static files and CDNs/proxys as stated on GitHub, it's simply very much helpful if triggered by server-side scripts to tell the browser to carry on using whatever response it received earlier.\n\nin case that wasn't clear enough:\n\nwe intentionally send both, the access-control-allow-origin:* header as well as the 304 status code, cutting the transferred data in half.\n\n\nas of now, we need to check for CORS requests and fall back to code 200.", "id": 183391, "time": "2015-06-09T14:08:16Z", "bug_id": 51223, "creation_time": "2015-06-09T14:08:16Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 51223, "text": "J\u00f6rn,\n\nCan you give a page that reproduces it?\n\nMichiel's test isn't realistic; Apache won't send a 304 if the client doesn't send a conditional request.", "id": 183409, "time": "2015-06-09T23:06:12Z", "creator": "mnot@mnot.net", "creation_time": "2015-06-09T23:06:12Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 51223, "text": "go to https://jsfiddle.net/7t84bj05/1/\nyou will see some video.\n\nin the dev toolset of your choice you will find a call to https://nlv.bittubes.com/api/a/3/\nThe first time it will return a 200, once you pressed play, more calls will be made that will get a 304 to save on traffic - and causing the error.\n\nthis works just fine from the same domain:\nhttps://nlv.bittubes.com/play/?api=dev&uid=FB4HGE\n\n\n(yes, the same-domain version uses a different api version but that's because I needed to disable our CORS workaround, which uses 200 for CORS requests instead of 304s, for this demo)", "id": 183437, "time": "2015-06-10T16:33:07Z", "creator": "joern.berkefeld@gmail.com", "creation_time": "2015-06-10T16:33:07Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "Created attachment 32804\nPOST\n\nThat's because you're using POST on it; see attached.", "attachment_id": 32804, "id": 183448, "creator": "mnot@mnot.net", "time": "2015-06-10T23:45:27Z", "bug_id": 51223, "creation_time": "2015-06-10T23:45:27Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 51223, "text": "You know how they say \"a picture is worth a thousand words\"? - not always the case. Could you please elaborate on that?", "id": 183451, "time": "2015-06-11T05:42:51Z", "creator": "joern.berkefeld@gmail.com", "creation_time": "2015-06-11T05:42:51Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "mnot@mnot.net", "attachment_id": null, "text": "(In reply to J\u00f6rn Berkefeld from comment #8)\n> You know how they say \"a picture is worth a thousand words\"? - not always\n> the case. Could you please elaborate on that?\n\n:)\n\nBrowsers don't cache POST responses. While technically responses to POST *are* cacheable, it's only so that a subsequent GET can be satisfied by them in very specific conditions (and browsers don't bother to implement that pattern).\n\nI'm not sure why the second POST is getting a 304 response - are you generating that in your code?", "id": 183452, "time": "2015-06-11T05:55:30Z", "bug_id": 51223, "creation_time": "2015-06-11T05:55:30Z", "is_private": false}, {"count": 10, "attachment_id": null, "creator": "joern.berkefeld@gmail.com", "text": "yes exactly - I am generating that manually. It's an API, not a static file. The problem is, that Apache strips the Access-Control-* headers that I also manually set from the response - even if I set that before the 304 header. It's also not about the browser which obviously is fine with being fooled into accepting the 304 even though it has nothing in it's cache to match that. works just fine on same-origin. Fails cross-origin due to the missing Access-... header.\n\nso once again: it's not about 304 being generated by Apache, but via whatever server-side script you use. Apache sends that 304 header but strips the CORS headers.\n\n\nThat's essentially the same situation described by Michiel de Jong, only that I am using Apache+PHP on the server-side and not node.js, which, now that I think about it, actually was a bit of a weird example for an Apache bugtracker. \nThough uncle Google tells me he's probably doing it via mod_proxy.\n\n\nhere is a blog-post coming to the same conclusion:\nhttp://blog.rampinteractive.co.uk/cors-html5-application-cache-manifest-dont-work-together-neither-cors-apache/", "id": 183460, "time": "2015-06-11T09:34:05Z", "bug_id": 51223, "creation_time": "2015-06-11T09:34:05Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 51223, "text": "We have the same issue. CGI Api + Javascript that's called cross origin.\nHas this been accepted as a BUG and the fix applied?", "id": 189951, "time": "2016-04-04T23:02:16Z", "creator": "adam@koalasafe.com", "creation_time": "2016-04-04T23:02:16Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": null, "creator": "covener@gmail.com", "text": "(In reply to Arthur Kopatsy from comment #0)\n> Created attachment 27027 [details]\n> Patch for the ubuntu package\n> \n> Per the RFC, HTTP Not Modified should not include entity headers \"Section\n> 10.3.5: the response SHOULD NOT include other entity-headers\"\n\nFWIW Seems to be rephrased significantly in http://tools.ietf.org/html/rfc7232#section-4.1", "id": 189952, "time": "2016-04-05T00:12:26Z", "bug_id": 51223, "creation_time": "2016-04-05T00:12:26Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 51223, "attachment_id": null, "id": 190719, "time": "2016-05-04T12:49:02Z", "creator": "rdehouss@gmail.com", "creation_time": "2016-05-04T12:49:02Z", "is_private": false, "text": "Hello,\n\nI do face the issue as well.\n\nCross domain, I fetch a resource which is cacheable and when apache respond with 304, the CORS headers are not present and so, the browser (Firefox in this case) alerts with:\nross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://test.com/test.json. (Reason: CORS header 'Access-Control-Allow-Origin' does not match 'http://test.com').\n\nIf I do a hard refresh, I get back a status 200 and with it, the CORS headers are well there.\n\nI also do send the Vary: Origin to specify that the cache should take into account the Origin header but it does not help.\n\nCan the patch provided be considered?\n\nThanks\n\nCheers,\n\nRapha\u00ebl Dehousse"}, {"count": 14, "tags": [], "bug_id": 51223, "text": "(In reply to rdehouss from comment #13)\n> Hello,\n> \n> I do face the issue as well.\n> \n> Cross domain, I fetch a resource which is cacheable and when apache respond\n> with 304, the CORS headers are not present and so, the browser (Firefox in\n> this case) alerts with:\n> ross-Origin Request Blocked: The Same Origin Policy disallows reading the\n> remote resource at http://test.com/test.json. (Reason: CORS header\n> 'Access-Control-Allow-Origin' does not match 'http://test.com').\n> \n> If I do a hard refresh, I get back a status 200 and with it, the CORS\n> headers are well there.\n> \n> I also do send the Vary: Origin to specify that the cache should take into\n> account the Origin header but it does not help.\n> \n> Can the patch provided be considered?\n\nCan you share the request and response headers both on the initial uncached request and the subsequent conditional request?  Based on @mnot's posts in this PR, it seems like there is yet to be a \"natural\" case of this being an issue documented.", "id": 190984, "time": "2016-05-16T14:29:44Z", "creator": "covener@gmail.com", "creation_time": "2016-05-16T14:29:44Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 51223, "text": "I am also experiencing this same problem on Firefox.  Ie seems to work fine, probably because it does not consider accessing a different port to be a cross domain request. Has there been any progress on this?", "id": 192291, "time": "2016-07-11T15:38:10Z", "creator": "bveilleux@tetondata.com", "creation_time": "2016-07-11T15:38:10Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "urkle@outoforder.cc", "attachment_id": null, "text": "I've reported a bug with Mozilla to get more clarification as there is some conflict between the CORS and the original WHAT WG \"fetch\" spec.\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1311566", "id": 194565, "time": "2016-10-19T23:48:24Z", "bug_id": 51223, "creation_time": "2016-10-19T23:48:24Z", "is_private": false}, {"count": 17, "tags": [], "creator": "urkle@outoforder.cc", "attachment_id": null, "text": "The latest updates on the bug I reported over at mozilla states that the WhatWG spec on this has changed and 304/307 are now required to have the cors checks.. so Apache needs to be updated to reflect these changes.\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1311566", "id": 197255, "time": "2017-02-24T13:52:56Z", "bug_id": 51223, "creation_time": "2017-02-24T13:52:56Z", "is_private": false}, {"count": 18, "tags": [], "text": "> 304/307 are now required to have the cors checks\n\nThat is not what it says.\n\nA 304 to a conditional request generated by a browser is not required to have CORS headers, because the cache will combine the 304's headers with the stored response. The Fetch spec has been updated to clarify that, and the tests at WPT as well.\n\nIf you want to generate the conditional in your JS code -- rather than having the browser create the conditional -- then the processing of the 304 moves back to your code, while CORS checks still happen before your code runs. Therefore, they'll fail CORS checks unless the 304 contains CORS headers, and there appears to be browser interop on that. \n\nThat's what Anne was talking about; it does not translate to a requirement that all 304s have CORS headers.\n\nHTTP doesn't require 304s to carry CORS headers because it's a generic protocol, and we can't update every server / intermediary every time someone adds a new header. Even if you can persuade Apache to implement this, other servers -- including intermediary caches -- won't necessarily do it, so you won't be able to rely upon the 304 always containing CORS headers.\n\nIn a situation where you control the client *and* the server *and* the path between them, of course, you can ignore this. However, that's not the Web, and it's not even really HTTP.\n\nCould the folks who are encountering this problem speak a bit more about their use case -- specifically, why it's important to use a custom handler for 304, rather than letting the browser handle it? Have you considered using a different status code?", "attachment_id": null, "id": 197289, "creator": "mnot@mnot.net", "time": "2017-02-27T01:14:26Z", "bug_id": 51223, "creation_time": "2017-02-27T01:14:26Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 51223, "attachment_id": null, "id": 197298, "time": "2017-02-27T11:01:39Z", "creator": "herr.ernst@gmail.com", "creation_time": "2017-02-27T11:01:39Z", "is_private": false, "text": "I've recently stumbled upon this issue. The problem doesn't occur when the CORS response headers are \"static\" (e.g. always a-c-a-o: *), but are dynamic.\nBasically, our setup serving static files is like this:\n\nSetEnvIf Origin \"^http(s)?://(.*\\.)?example.com(:[0-9]+)?$\" has_origin=$0\nHeader always set Access-Control-Allow-Origin %{has_origin}e env=has_origin\nHeader always set Vary Origin\n\nThere are two problems for us now:\nA request can first be a non-CORS request (i.e. no Origin request header), but then in another context of our site with CORS (e.g. image in one place used ordinarily in an <img> element, but later fetched for use in a <canvas> with CORS). For the second request, Apache would answer with 304 *without* CORS headers, although IMHO it should.\nAnd the second problematic case is when the CORS response headers would change because of a changing Origin request header: First request from foo.example.com, response has A-C-A-O: sub1.example.com, then request to same resource from bar.example.com, Apache answers with 304 but again strips our CORS headers.\n\nSo, even if CORS response headers are not *required* on 304 if they did not change from the cached response, they should still be allowed for answering with a 304. Or is there another way such a case should handled?\n\nThanks"}, {"count": 20, "tags": [], "bug_id": 51223, "attachment_id": null, "id": 202840, "time": "2017-12-19T14:05:56Z", "creator": "andy.hutson+apache@gmail.com", "creation_time": "2017-12-19T14:05:56Z", "is_private": false, "text": "#19: Isn't that problem solved by including \"vary: origin\" on the response, to indicate that the response depends on the value of the \"origin\" request header?"}]
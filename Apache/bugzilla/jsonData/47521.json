[{"count": 0, "tags": [], "bug_id": 47521, "is_private": false, "id": 128795, "attachment_id": null, "creator": "apache@szynaka.com", "creation_time": "2009-07-13T08:59:44Z", "time": "2009-07-13T08:59:44Z", "text": "Using the configuration below the mod_alias module does not fail through to the test-file section, but instead stops when mod_authnz_ldap fails to connect to the server.  This seems to be a situation in which mod_alias should still continue to the next Proivider.\n\n<AuthnProviderAlias ldap test-ldap>\n    AuthLDAPBindDN cn=youruser,o=ctx\n    AuthLDAPBindPassword yourpassword\n    AuthLDAPURL ldap://ldap.host/o=ctx\n</AuthnProviderAlias>\n\n<AuthnProviderAlias file test-file>\n    AuthUserFile /usr/local/apache/conf/htpasswd.users\n</AuthnProviderAlias>\n\n<Directory \"/usr/local/apache/htdocs\">\n    Options Indexes FollowSymLinks\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n    AuthBasicProvider test-ldap test-file\n    AuthType Basic\n    AuthName 'Auth Test'\n    AuthzLDAPAuthoritative off\n    Require valid-user\n</Directory>\n\nThe issue seems to be with the fact that mod_authnz_ldap returns AUTH_GENERAL_ERROR on a failure.  Unfortunately my C is not good enough to supply a patch to mod_alias to compensate for that response."}, {"count": 1, "tags": [], "bug_id": 47521, "attachment_id": null, "id": 128810, "time": "2009-07-13T15:20:29Z", "creator": "nick@webthing.com", "creation_time": "2009-07-13T15:20:29Z", "is_private": false, "text": "I don't know without testing whether there's a bug here.\n\nBut nothing you describe has anything to do with mod_alias!  Changing to mod_auth."}, {"count": 2, "tags": [], "bug_id": 47521, "text": "can ou confirm that you get the same unwanted behavior without the AuthAliasProvider stuff?", "id": 128816, "attachment_id": null, "creator": "covener@gmail.com", "creation_time": "2009-07-13T18:12:05Z", "time": "2009-07-13T18:12:05Z", "is_private": false}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> can ou confirm that you get the same unwanted behavior without the\n> AuthAliasProvider stuff?\n\nDuring my testing I tested both the LDAP and file auth methods individually, both with and without the AuthnProviderAlias section, and when setup correctly they all succeeded.  \n\nIn the example config I provided the LDAP authentication portion was setup to intentionally fail by being unable to connect to the LDAP server.  This way I could test whether it would then test the second method, in this case try to authenticate via a file.\n\nIt was my understanding that mod_authn_alias would try each authentication method in order until a username match was found.  It would seem to me that failing to connect to an LDAP server would imply that a username could not be found.", "attachment_id": null, "id": 128874, "creator": "apache@szynaka.com", "time": "2009-07-15T07:19:51Z", "bug_id": 47521, "creation_time": "2009-07-15T07:19:51Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 47521, "text": "(In reply to comment #3)\n> It was my understanding that mod_authn_alias would try each authentication\n> method in order until a username match was found.  It would seem to me that\n> failing to connect to an LDAP server would imply that a username could not be\n> found.\n\nIt was intended to continue looking after a failed authentication.  A service down condition wasn't ever really considered.  Basically it comes down to whether or not \"service down\" == \"failed authentication\".  I can certainly see a case for it.", "id": 128875, "time": "2009-07-15T07:58:41Z", "creator": "bnicholes@apache.org", "creation_time": "2009-07-15T07:58:41Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> (In reply to comment #3)\n> > It was my understanding that mod_authn_alias would try each authentication\n> > method in order until a username match was found.  It would seem to me that\n> > failing to connect to an LDAP server would imply that a username could not be\n> > found.\n> \n> It was intended to continue looking after a failed authentication.  A service\n> down condition wasn't ever really considered.  Basically it comes down to\n> whether or not \"service down\" == \"failed authentication\".  I can certainly see\n> a case for it.\n\nI just ran into this problem. In my case, I have two domain controllers and would like mod_authn_alias to try the second controller if it isn't able to contact the first.\n\nIn this setup, the user database on both servers is identical, so \"service down\" is really the only condition in which I would expect the next authentication method to be attempted. As it stands, if the first server is down a connection to the second isn't made.\n\nPerhaps it is worth adding some sort of on-error directive (or another parameter to AuthBasicProvider) that would specify how error conditions other than \"failed authentication\" should be handled with a choice of \"break\" and \"continue\".", "is_private": false, "id": 132168, "creator": "mkhitrov@gmail.com", "time": "2009-11-20T07:59:44Z", "bug_id": 47521, "creation_time": "2009-11-20T07:59:44Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 47521, "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > (In reply to comment #3)\n> > > It was my understanding that mod_authn_alias would try each authentication\n> > > method in order until a username match was found.  It would seem to me that\n> > > failing to connect to an LDAP server would imply that a username could not be\n> > > found.\n> > \n> > It was intended to continue looking after a failed authentication.  A service\n> > down condition wasn't ever really considered.  Basically it comes down to\n> > whether or not \"service down\" == \"failed authentication\".  I can certainly see\n> > a case for it.\n> \n> I just ran into this problem. In my case, I have two domain controllers and\n> would like mod_authn_alias to try the second controller if it isn't able to\n> contact the first.\n\nJust found out that you can specify multiple servers in the ldap://... uri, so I guess this issue no longer applies to me.", "id": 132171, "time": "2009-11-20T09:22:56Z", "creator": "mkhitrov@gmail.com", "creation_time": "2009-11-20T09:22:56Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 47521, "is_private": false, "id": 172504, "attachment_id": null, "creator": "covener@gmail.com", "creation_time": "2014-01-19T19:57:10Z", "time": "2014-01-19T19:57:10Z", "text": "AuthLDAPBindAuthoritative happens to cover this requirement, at the expense of also continuing to try if the password is just wrong.\n\nIf someone hates the idea of AuthLDAPBindAuthoritative and still needs this solved, figure out exact return codes you want to absolve from AUTH_GENERAL_ERROR and re-open."}]
[{"count": 0, "tags": [], "bug_id": 52744, "attachment_id": null, "id": 154054, "time": "2012-02-23T09:23:24Z", "creator": "forrestxm@gmail.com", "creation_time": "2012-02-23T09:23:24Z", "is_private": false, "text": "Steps to reproduce:\n1. Have a simple sample application which includes some jsp files\n2. Deploy it into tomcat and make it running successfully\n3. Stop the server and enable JspServlet development mode\n4. In this mode, try to reload the jsp page from the browser\n5. Have a debugger attached to the server jvm, set a breakpoint in the jasper Compiler isOutDated method\n6. You will see the jsp file is always be recompiled even there is nothing changed on it.\n\nReason analysis: \n\nThe code logic below in the isOutDated(boolean checkClass) method:\n\nLong jspRealLastModified = ctxt.getLastModified(ctxt.getJspFile());\n        if (jspRealLastModified.longValue() < 0) {\n            // Something went wrong - assume modification\n            return true;\n        }\n\n        long targetLastModified = 0;\n        File targetFile;\n\n        if (checkClass) {\n            targetFile = new File(ctxt.getClassFileName());\n        } else {\n            targetFile = new File(ctxt.getServletJavaFileName());\n        }\n\n        if (!targetFile.exists()) {\n            return true;\n        }\n\n        targetLastModified = targetFile.lastModified();\n        if (checkClass && jsw != null) {\n            jsw.setServletClassLastModifiedTime(targetLastModified);\n        }\n        if (targetLastModified != jspRealLastModified.longValue()) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Compiler: outdated: \" + targetFile + \" \"\n                        + targetLastModified);\n            }\n            return true;\n        }\n\nWhich relies on File.lastModified() method to do comparation, while searched the web, and got this url[1]\n\n[1] http://www.coderanch.com/t/384700/java/java/File-lastModified-windows-vs-linux\n\nWhich indicates that that method is rounding off the value on the Linux, for example if a file is modified at 1173423665215 msec, the above method is returning the value 1173423665000 on linux."}, {"count": 1, "attachment_id": 28370, "bug_id": 52744, "text": "Created attachment 28370\nRound off the difference and allow a error scope < 1000l\n\nRound off the difference and allow a error scope < 1000l", "id": 154055, "time": "2012-02-23T09:29:31Z", "creator": "forrestxm@gmail.com", "creation_time": "2012-02-23T09:29:31Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "forrestxm@gmail.com", "attachment_id": null, "text": "Anyone could help look into this report? thanks in advance!", "id": 154070, "time": "2012-02-23T15:05:22Z", "bug_id": 52744, "creation_time": "2012-02-23T15:05:22Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 52744, "text": "I have checked this on an ext3 file system and can not reproduce it.\n\nWhen JSPs are compiled the file modification times of the JSP, the .java file and the .class file are all set to the last modification time of the JSP. The resolution of the timestamps does not matter since the values will be the same regardless.\n\nIf you are sure that recompilation is occurring (rather than calls to isOutDated() which are expected) the users mailing list is the place to help you figure out why. If that discussion identifies a bug then feel free to re-open this issue and provide the necessary details.", "id": 154615, "time": "2012-03-07T10:28:00Z", "creator": "markt@apache.org", "creation_time": "2012-03-07T10:28:00Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 52744, "text": "What happens when JSP sources come from different file system?\nE.g. when unpackWARs=\"false\"?", "id": 154619, "time": "2012-03-07T11:04:03Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-03-07T11:04:03Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 52744, "text": "Much the same thing as when a remote file system is used that uses a different system clock for timestamps and the clocks are out of sync.", "id": 154623, "time": "2012-03-07T13:18:46Z", "creator": "markt@apache.org", "creation_time": "2012-03-07T13:18:46Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "(In reply to comment #4)\n> What happens when JSP sources come from different file system?\n> E.g. when unpackWARs=\"false\"?\n\nI mean that if javaFile.setLastModified() is unable to use the full precision of jspLastModified. I.e. if the original timestamp is more precise than the one that can be set by this method.\n\nRegarding WARs: It is not easy to observe this, because if war is packaged using Ant, it is likely that it has timestamps rounded up to 2 seconds, per \"roundup\" option of jar task defaulting to true. So any wars packed in this manner are unaffected.\n\n\nWikipedia mentions that Zip format per se uses 2-second precision like FAT-16, though \"extra fields can be used to store more accurate timestamps\".\n\nSo far I have not reproduced the issue.", "attachment_id": null, "bug_id": 52744, "id": 154636, "time": "2012-03-07T14:46:46Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-03-07T14:46:46Z", "is_private": false}, {"count": 7, "tags": [], "text": "I was able to reproduce this issue. The key here is that the jsp must live in a jar file that has a timestamp with a better precision then the file system. Nothing is modifying the .jsp file and therefore its timestamp does not change but each access causes it to be recompiled because of the difference in the timestamp precision.", "attachment_id": null, "bug_id": 52744, "id": 154846, "time": "2012-03-12T20:28:56Z", "creator": "jgawor@gmail.com", "creation_time": "2012-03-12T20:28:56Z", "is_private": false}, {"count": 8, "tags": [], "text": "Yes, As Jarek mentioned, on linux platform, if the jsp file in a jar is checked under development mode, it will always be compiled.", "attachment_id": null, "bug_id": 52744, "id": 155288, "time": "2012-03-26T15:52:34Z", "creator": "forrestxm@gmail.com", "creation_time": "2012-03-26T15:52:34Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 52744, "attachment_id": null, "id": 155320, "time": "2012-03-27T18:10:33Z", "creator": "markt@apache.org", "creation_time": "2012-03-27T18:10:33Z", "is_private": false, "text": "I can't reproduce this. What tool on what platform is being used to create zip files with entries with a precision of better than 1s?"}, {"count": 10, "tags": [], "bug_id": 52744, "attachment_id": null, "id": 155400, "time": "2012-03-30T14:24:24Z", "creator": "forrestxm@gmail.com", "creation_time": "2012-03-30T14:24:24Z", "is_private": false, "text": "This happens in an OSGi application EBA, the web module in deployed EBA won't be extracted into file system, instead it is still in jar file. When JASPER read a jsp file timestamp from a jar, it could get a precise time, while the compiled jsp .class file is read from the file system, the time precision is not good as the one read from jar file.\n\nIn OSGi world, the code piece will be called, the uc is an instance of JarURLConnection, so the precise time will be returned for jspRealLastModified.\n\n            uc = jspUrl.openConnection();\n            if (uc instanceof JarURLConnection) {\n                result = ((JarURLConnection) uc).getJarEntry().getTime();\n            } else {\n                result = uc.getLastModified();\n            }"}, {"count": 11, "tags": [], "bug_id": 52744, "attachment_id": null, "text": "(In reply to comment #10)\n> When JASPER read a jsp file timestamp from a jar, it could get a precise time\n\nThat is not possible. JAR uses the zip format and that uses a 2s precision for timestamps.\n\nAt this point in time I simply can't see how - based on the information provided so far - that the problem described in the original report can happen. Hence the NEEDINFO state. Unless someone steps up and provides the necessary information that explains how to reproduce this issue then this will eventually get resolved as INVALID.", "id": 155401, "time": "2012-03-30T15:20:19Z", "creator": "markt@apache.org", "creation_time": "2012-03-30T15:20:19Z", "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 52744, "text": "Hi Mark,\n\nI cannot reproduce this issue just using Tomcat release itself, but it did happen in Geronimo when we use Tomcat as the web container. Hopefully, you can accept this patch. However, thank you for your attention on this issue.", "id": 158327, "time": "2012-04-24T03:31:43Z", "creator": "forrestxm@gmail.com", "creation_time": "2012-04-24T03:31:43Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "text": "If the problem is reproducible in Geronimo but not Tomcat then it is a Geronimo problem, not a Tomcat one. I'd be happy to look at this as a Tomcat issue if a test case can be provided that demonstrates the problem on Tomcat.", "attachment_id": null, "bug_id": 52744, "id": 158392, "time": "2012-04-24T20:52:06Z", "creator": "markt@apache.org", "creation_time": "2012-04-24T20:52:06Z", "is_private": false}]
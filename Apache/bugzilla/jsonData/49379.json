[{"count": 0, "tags": [], "creator": "peter.hancock@gmail.com", "attachment_id": null, "id": 137319, "time": "2010-06-03T11:46:06Z", "bug_id": 49379, "creation_time": "2010-06-03T11:46:06Z", "is_private": false, "text": "This patch facilitates the extraction and embedding of a page segment from a resource file into the generated AFP.  The include-page-segment extension element permits the optional attribute 'resource-file' that is the URI to the resource containing the named page segment."}, {"count": 1, "tags": [], "bug_id": 49379, "attachment_id": 25519, "text": "Created attachment 25519\nPatch", "id": 137320, "time": "2010-06-03T11:47:50Z", "creator": "peter.hancock@gmail.com", "creation_time": "2010-06-03T11:47:50Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 49379, "attachment_id": null, "text": "Peter, I've taken a look at your patch. I found that I get an IOException when referencing the page segment \"s1islogo.psg\" that comes with IBM AFP Workbench:\n\njava.io.IOException: Malformed AFP resource with name 's1islogo':\tNo Begin structured field\nat org.apache.fop.afp.util.AFPResourceUtil.copyNamedResource(AFPResourceUtil.java:123)\n\nI have the impression that the method AFPResourceUtil.findStart() may not be ideal to parse an MO:DCA file. I haven't investigated more closely why the above file fails, but stepping through findStart() feels a bit weird in terms of how that method looks for the requested resource. Some time ago I started a rudimentary AFP parser I used to dump the Type 1 data from an outline font, or to simply dump the basic structure of an AFP file. I could include that in FOP and we build from there. It allows to return an object for each structured field encountered. A generic MO:DCA parser would also allow future functionality that involves parsing an AFP file. WDYT?", "id": 139278, "time": "2010-08-20T03:46:59Z", "creator": "jeremias@apache.org", "creation_time": "2010-08-20T03:46:59Z", "is_private": false}, {"count": 3, "tags": [], "creator": "jeremias@apache.org", "text": "Patch applied with modifications as discussed:\nhttp://svn.apache.org/viewvc?rev=1005350&view=rev\n\nThanks, Peter, and sorry for the long time it took to process your patch!\n\nBTW, while working on this it occurred to me that with the embedding functionality, we're actually making page segment handling overly complicated: we always need a replacement image that the layout image is actually working with. I'm not saying that this addition was a bad one, but we should think about making it easier in the future, namely by supporting AFP page segments directly through fo:external-graphic. The first step here would be native embedding support (just reading the intrinsic size of the page segment). A second step could even be decoding page segments and supporting them for other output formats. Just a thought.", "id": 140536, "time": "2010-10-07T03:48:24Z", "bug_id": 49379, "creation_time": "2010-10-07T03:48:24Z", "is_private": false, "attachment_id": null}]
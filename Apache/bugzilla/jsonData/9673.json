[{"count": 0, "tags": [], "text": "Apache2 does not pay attention to dynamic PHP scripts configured by  \nSetInputFilter/SetOutputFilter PHP, as it still checks the modification  \ndate of the plain .php file.  \n  \nThis leads to caching problems, when the user's browser sends a  \n\"If-Last-Modified\" request. Apache returns \"304 Not Modified\", as the \nPHP file itself has not changed, although the dynamic content may have \nchanged! \n \nThe problem is in modules/http/http_protocol.c, line 386+ \nHotfix: I have commented out line 393 (return HTTP_NOT_MODIFIED), so that this \nfeature is totally disabled. \n \nIs there a chance to check for an Input/OutputFilter set? That way, we could \ndeactivate the feature for PHP pages only.", "attachment_id": null, "id": 17341, "creator": "ck-bugzilla@newsclub.de", "time": "2002-06-06T19:22:08Z", "bug_id": 9673, "creation_time": "2002-06-06T19:22:08Z", "is_private": false}, {"count": 1, "tags": [], "creator": "slive@apache.org", "attachment_id": null, "text": "I'm fairly sure that it is the filter itself that should be removing the\nlast-modified.  There are many filters that do not affect caching, so\napache should not be removing last-modified for every filter.\n\nSo, the punch line is, you should file this bug report with PHP.", "id": 17342, "time": "2002-06-06T19:29:54Z", "bug_id": 9673, "creation_time": "2002-06-06T19:29:54Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 9673, "text": "The problem is that the PHP filter is not called. Here is a dump of the \nclient-server communication: \n \n---------> from Client to Server \nGET / HTTP/1.1 \nAccept: */* \nIf-Modified-Since: Thu, 06 Jun 2002 17:47:44 GMT; length=17947 \nHost: www.newsclub.de \nConnection: Keep-Alive \n \n<-------- Reply from Server to Client \n \nHTTP/1.1 304 Not Modified \nDate: Thu, 06 Jun 2002 17:50:08 GMT \nServer: Apache/2.0.36 (Unix) DAV/2 PHP/4.2.1 \nConnection: Keep-Alive \nKeep-Alive: timeout=15, max=100 \nETag: \"66ab2-4ef-63a14340\" \n \n--------- End of reply, that's it - no content! \n \nSo, there is neither PHP output nor the PHP source code at all, Apache seems \nto block further processing of the request. \n ", "id": 17346, "time": "2002-06-06T20:50:26Z", "creator": "ck-bugzilla@newsclub.de", "creation_time": "2002-06-06T20:50:26Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "slive@apache.org", "text": "Still a PHP problem.\n\nContent is never returned on a 304 response.  That is the point of the response.\nWhat is happening is that Apache is running the request, seeing the \nlast-modified information, and deciding that the client already has\nup-to-date content, so it doesn't need to send it again.\n\nIt is the responsibility of the PHP filter to\nremove the last-modified information so that apache always serves\nfresh content.\n", "id": 17348, "attachment_id": null, "bug_id": 9673, "creation_time": "2002-06-06T20:56:09Z", "time": "2002-06-06T20:56:09Z", "is_private": false}, {"count": 4, "tags": [], "text": "Oops.  I take it all back.\n\nI just tried with mod_include's INCLUDES filter, and even though it strips\nLast-Modified, Apache still serves conditional GET requests.  Ouch.\n\nHere's an example:\nab26[joshua]59% telnet httpd.apache.org 80\nTrying 63.251.56.142...\nConnected to httpd.apache.org.\nEscape character is '^]'.\nGET /docs/vhosts/index.html HTTP/1.1\nHost: httpd.apache.org\nIf-Modified-Since: Thu, 06 Jun 2002 20:58:16 GMT\n\nHTTP/1.1 304 Not Modified\nDate: Thu, 06 Jun 2002 21:01:29 GMT\nServer: Apache/2.0.37-dev (Unix)\nETag: \"ea72a-b3f-f3b22680;2434f440\"\nContent-Location: index.html.en\nVary: negotiate,accept-language,accept-charset\n\n", "attachment_id": null, "id": 17350, "creator": "slive@apache.org", "time": "2002-06-06T21:04:05Z", "bug_id": 9673, "creation_time": "2002-06-06T21:04:05Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 9673, "text": "And what the heck is that ETag doing in the 304 response?  It is not in\nthere for a normal response:\nHEAD /docs/vhosts/index.html HTTP/1.1\nHost: httpd.apache.org\n\nHTTP/1.1 200 OK\nDate: Thu, 06 Jun 2002 21:09:12 GMT\nServer: Apache/2.0.37-dev (Unix)\nContent-Location: index.html.en\nVary: negotiate,accept-language,accept-charset\nTCN: choice\nAccept-Ranges: bytes\nContent-Length: 3158\nContent-Type: text/html\nContent-Language: en\n\nAnd what the heck is the Content-Length doing in the normal response?\n\nBoth Content-Length and ETags are explicitly unset by mod_include.\n\nI'm afraid I'm out of my league here, so I'll need to leave this to others.", "id": 17351, "time": "2002-06-06T21:12:42Z", "creator": "slive@apache.org", "creation_time": "2002-06-06T21:12:42Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 9673, "text": "The If-Modified-Since and If-Unmodified-Since logic uses r->mtime as the time of the entity being served, not the Last-Modified header.  I assume this is an optimization to avoid reparsing Last-Modified.  So either stripping Last-Modified is not enough (also set r->mtime to 0), or we need to change the logic on line 316 of http_protocol.c.  Note though that this is also how Apache 1.3 deals with it, so I'm not sure I see what the problem is.  Sounds like a bug (misunderstanding?) in mod_include and mod_php4.  --Cliff ", "id": 17352, "time": "2002-06-06T21:13:58Z", "creator": "jwoolley@apache.org", "creation_time": "2002-06-06T21:13:58Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "The Content-Length is probably being generated by the content length filter \n(that's its job).  Not sure about the etag, but I do remember some discussion \nabout that recently I think... ", "attachment_id": null, "id": 17353, "creator": "jwoolley@apache.org", "time": "2002-06-06T21:18:10Z", "bug_id": 9673, "creation_time": "2002-06-06T21:18:10Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 9673, "text": "As I understand, the problem is the filter concept itself.    \nFilters are applied on data that is already processed by http_protocol.c    \n    \nWhat http_protocol.c checks is the modification time of a file, ie.    \n\"index.php\". The script has been written in 2001, for example, but it produces    \nnew content from a database every minute.    \n    \nSo, the PHP code gets only executed, if Apache decides to pass the data to the    \nfilter. Here Apache decides not to, because it thinks that the file has not    \nchanged.    \n    \nThe ETag is probably generated because Apache looks at the program code of    \nindex.php itself, not at the content the PHP script produces.    \n   \nI suggest to add an Apache directive to disable If-Modified-Since processing   \nfor Filtered files, for example:   \n   \n<FilesMatch \"\\.php$\">   \n    SetInputFilter PHP   \n    SetOutputFilter PHP   \n    CheckIfModifiedSince off   \n</FilesMatch>   \n   \nPHP itself could then automatically set this directive.   \n  ", "id": 17354, "time": "2002-06-06T21:25:15Z", "creator": "ck-bugzilla@newsclub.de", "creation_time": "2002-06-06T21:25:15Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 9673, "attachment_id": null, "id": 17355, "time": "2002-06-06T21:28:49Z", "creator": "slive@apache.org", "creation_time": "2002-06-06T21:28:49Z", "is_private": false, "text": "I disagree.  It should be the filter's responsibility to decide if it\nmodifies the data, not the administrator.  If the filter wants to\ndeligate that job to the administrator (like mod_include does with\nXBitHack full) then it can do so."}, {"count": 10, "tags": [], "creator": "ck-bugzilla@newsclub.de", "text": "But somehow, http_protocol.c must get that information. \n \nIs there a way to check for a certain filter in http_protocol.c? \nThat would enable me to write a quick hack for PHP. \n \nCurrently, I have disabled \"not modified\" replies at all, which is \nno good idea... \n ", "id": 17356, "attachment_id": null, "bug_id": 9673, "creation_time": "2002-06-06T21:35:38Z", "time": "2002-06-06T21:35:38Z", "is_private": false}, {"count": 11, "tags": [], "creator": "jerenkrantz@apache.org", "attachment_id": null, "text": "This is due to a bug in PHP and in the httpd-2.0 core.\n\ndefault_handler shouldn't be calling ap_meets_condition().  As I posted to\ndev@httpd, this decision should most likely be delayed until the\nap_http_header_filter() is called.\n\nHowever, PHP's use of filters is completely and totally broken in many ways.  =)\n First off, it doesn't unset Last-Modified which it needs to do.  There's a lot\nof bogosity in how it deals with buckets.  I've posted before to php-dev@ about\nthis.", "id": 17357, "time": "2002-06-06T21:45:21Z", "bug_id": 9673, "creation_time": "2002-06-06T21:45:21Z", "is_private": false}, {"count": 12, "tags": [], "text": "Can someone give me a hint how to write a quick fix for it? \nI would just need to check if PHP is in the filter chain. \n ", "attachment_id": null, "id": 17360, "creator": "ck-bugzilla@newsclub.de", "time": "2002-06-06T21:58:25Z", "bug_id": 9673, "creation_time": "2002-06-06T21:58:25Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 9673, "attachment_id": null, "id": 17361, "time": "2002-06-06T22:02:04Z", "creator": "jwoolley@apache.org", "creation_time": "2002-06-06T22:02:04Z", "is_private": false, "text": "That's easier said than done.  Easier is the seemingly \"right\" fix that Justin \nproposed: move the ap_meets_conditions() call from the default_handler to the \nap_http_header_filter. \n \n--Cliff  "}, {"count": 14, "tags": [], "bug_id": 9673, "attachment_id": null, "id": 19891, "time": "2002-07-20T15:14:56Z", "creator": "daniel.eckl@gmx.de", "creation_time": "2002-07-20T15:14:56Z", "is_private": false, "text": "I'd like to post a workaround without patching apache or PHP....\n\nJust edit your script(s) to send a 'header(\"Last-Modified: Mon, 26 Jul\n1997 05:00:00 GMT\");' or just some other date older than the mdate of\nyour script file. This solves the problem.\n\nReason:\nThe bug causes Apache2 to look for the mdate of the .php file to\ndetermine if it has been modified.\nIf the browser first gets a header like above, it next time asks for the\npage with an 'If-Modified-Since: Mon, 26 Jul 1997 05:00:00 GMT'. Then,\nthe httpd looks at the mdate of your script, which is always newer and\nsays: Yes, it has been modified, \"200 OK\". The script will be served and\nit will response again with the header line from above. Round and round\nthe story goes. :))\n\nGreets, and have fun!\n\nDaniel"}, {"count": 15, "attachment_id": null, "bug_id": 9673, "text": "Daniel: Your workaround solves the problem, but creates another one. \nSearching engines that spider the pages would see 'old' Last-Modified headers \nand therefore will not index them. \n \nAt NewsClub.de, the pages are updated at least every 30 minutes, so this \nfix is at least not good for me. \n \nMaybe the bug is even fixed in the current CVS versions of apache2 and php4? \n ", "id": 19921, "time": "2002-07-21T11:34:20Z", "creator": "ck-bugzilla@newsclub.de", "creation_time": "2002-07-21T11:34:20Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "bug_id": 9673, "text": "Hmm, the actual Changelog contains:\n\n  *) Add a filter_init parameter to the filter registration functions\n     so that a filter can execute arbitrary code before the handlers\n     are invoked.  This resolves a problem where mod_include requests\n     would incorrectly return a 304.  [Justin Erenkrantz]\n\nIs this the solution to our problem?\nI'm compiling httpd-2.0_20020723101312 at the moment and will try it.", "id": 20047, "time": "2002-07-23T13:14:16Z", "creator": "daniel.eckl@gmx.de", "creation_time": "2002-07-23T13:14:16Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 9673, "attachment_id": null, "id": 20100, "time": "2002-07-24T05:20:26Z", "creator": "daniel.eckl@gmx.de", "creation_time": "2002-07-24T05:20:26Z", "is_private": false, "text": "I'm sorry, problem not solved yet using the latest unstable cvs code of both \nphp4 and httpd-2.0.\n\n...but they are compiling and running fine :))))"}, {"count": 18, "tags": [], "bug_id": 9673, "text": "This should be fixed in Apache 2.0.42 and later.\n\nUnknown when exact fix was committed (probably much earlier than 2.0.42), but\nthe behavior works as expected for filtered content now.", "id": 23626, "time": "2002-09-29T16:30:34Z", "creator": "jerenkrantz@apache.org", "creation_time": "2002-09-29T16:30:34Z", "is_private": false, "attachment_id": null}, {"count": 19, "attachment_id": null, "bug_id": 9673, "text": "I'm still having this bug, even with the 'short fix' Daniel Eckl posted. :-/\n\nRunning Apache 2.0.43 for Windows with php-4.2.3-Win32.", "id": 28098, "time": "2002-12-20T10:02:54Z", "creator": "erlend_stromsvik@hotmail.com", "creation_time": "2002-12-20T10:02:54Z", "tags": [], "is_private": false}, {"count": 20, "tags": [], "bug_id": 9673, "text": "Try PHP 4.3.0 BETA, it seems to be working now.", "id": 28099, "time": "2002-12-20T10:12:09Z", "creator": "sascha@kulawik.de", "creation_time": "2002-12-20T10:12:09Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "creator": "steve@oarie.net", "attachment_id": null, "text": "This bug has been closed but appears to still persist.  I'm running Apache \n2.0.43 with PHP 4.3 and I still have this issue.  Has it been decided wether \nthis is legitimately a bug in Apache or PHP yet?  I have heard it thrown around \nas a PHP bug by Apache and an Apache bug by PHP and was wondering if either \nside has given in and said where the bug really is.\n\nThank you,\nSteve", "id": 28202, "time": "2002-12-23T13:23:08Z", "bug_id": 9673, "creation_time": "2002-12-23T13:23:08Z", "is_private": false}, {"count": 22, "tags": [], "creator": "daniel.eckl@gmx.de", "attachment_id": null, "text": "The problem can be worked around in php.\n\nSee http://bugs.php.net/bug.php?id=17098\n\nDaniel", "id": 28263, "time": "2002-12-25T23:50:05Z", "bug_id": 9673, "creation_time": "2002-12-25T23:50:05Z", "is_private": false}, {"count": 23, "tags": [], "creator": "jerenkrantz@apache.org", "text": "Yes, the filter_init hook resolved this.  See how mod_include and mod_php (in their CVS tree) do it.  It should be included in the next PHP release if it isn't already, but there isn't anything more we can do with this issue.  The API is there.\n\nThanks for using Apache HTTP Server!", "id": 31374, "attachment_id": null, "bug_id": 9673, "creation_time": "2003-02-16T23:48:59Z", "time": "2003-02-16T23:48:59Z", "is_private": false}]
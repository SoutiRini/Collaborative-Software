[{"count": 0, "tags": [], "bug_id": 40425, "attachment_id": null, "text": "<fo:external-graphic width=\"auto\" height=\"auto\" content-width=\"2cm\" \nsrc=\"url(image.png)\"/>\n\nproduces an \"Cannot read image dimensions\" message and finally results in a \njava.lang.NullPointerException\n at org.apache.fop.image.ImageIOImage.loadBitmap(ImageIOImage.java:86)\n\nI don't know whether this is due to a broken PNG image (See image in \nattachment), but it actually did work in FOP 0.92.", "id": 93094, "time": "2006-09-06T11:59:11Z", "creator": "joe-fop@7val.com", "creation_time": "2006-09-06T11:59:11Z", "is_private": false}, {"count": 1, "tags": [], "creator": "joe-fop@7val.com", "attachment_id": 18827, "id": 93095, "time": "2006-09-06T12:00:52Z", "bug_id": 40425, "creation_time": "2006-09-06T12:00:52Z", "is_private": false, "text": "Created attachment 18827\nPNG image to reproduce the bug"}, {"count": 2, "attachment_id": null, "bug_id": 40425, "text": "Works for me (assuming the image is suppose to be a black 200x200 square). This \nis with the trunk version of FOP under JDK 1.5.x. This means it should be using \nImageIO in my case.", "id": 93106, "time": "2006-09-06T14:39:48Z", "creator": "manuel@apache.org", "creation_time": "2006-09-06T14:39:48Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 40425, "is_private": false, "id": 93133, "time": "2006-09-07T08:50:25Z", "creator": "joe-fop@7val.com", "creation_time": "2006-09-07T08:50:25Z", "tags": [], "text": "Right, running FOP with JDK 1.5 works :-) \n\nBuilding and running FOP using JDK 1.4.2_11 with the latest sources form the \nSVN trunk, I get the following backtrace. The build proceeds, though, \nresulting in a PDF document missing that image (which in fact is a black \nsquare to simplify matters). \n\n07.09.2006 10:10:09 org.apache.fop.image.ImageIOImage loadBitmap\nSCHWERWIEGEND: Error while loading image: 4\njava.lang.ArrayIndexOutOfBoundsException: 4\n        at \ncom.sun.imageio.plugins.png.PNGImageReader.parse_PLTE_chunk(PNGImageReader.java:347)\n        at \ncom.sun.imageio.plugins.png.PNGImageReader.readMetadata(PNGImageReader.java:635)\n        at \ncom.sun.imageio.plugins.png.PNGImageReader.readImage(PNGImageReader.java:1309)\n        at \ncom.sun.imageio.plugins.png.PNGImageReader.read(PNGImageReader.java:1530)\n        at org.apache.fop.image.ImageIOImage.loadBitmap(ImageIOImage.java:96)\n        at \norg.apache.fop.image.ImageIOImage.loadDimensions(ImageIOImage.java:66)\n        at \norg.apache.fop.image.AbstractFopImage.load(AbstractFopImage.java:160)\n        at \norg.apache.fop.fo.flow.ExternalGraphic.bind(ExternalGraphic.java:73)\n        at org.apache.fop.fo.FObj.processNode(FObj.java:118)\n        at \norg.apache.fop.fo.FOTreeBuilder$MainFOHandler.startElement(FOTreeBuilder.java:321)\n        at \norg.apache.fop.fo.FOTreeBuilder.startElement(FOTreeBuilder.java:185)\n        at \norg.apache.xalan.transformer.TransformerIdentityImpl.startElement(TransformerIdentityImpl.java:1020)\n        at org.apache.xerces.parsers.AbstractSAXParser.startElement(Unknown \nSource)\n        at \norg.apache.xerces.parsers.AbstractXMLDocumentParser.emptyElement(Unknown \nSource)\n        at \norg.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown \nSource)\n        at \norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown \nSource)\n        at \norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown \nSource)\n        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n        at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n        at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)\n        at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown \nSource)\n        at \norg.apache.xalan.transformer.TransformerIdentityImpl.transform(TransformerIdentityImpl.java:452)\n        at org.apache.fop.cli.InputHandler.transformTo(InputHandler.java:165)\n        at org.apache.fop.cli.InputHandler.renderTo(InputHandler.java:115)\n        at org.apache.fop.cli.Main.startFOP(Main.java:160)\n        at org.apache.fop.cli.Main.main(Main.java:191)\n07.09.2006 10:10:09 org.apache.fop.fo.flow.ExternalGraphic bind\nSCHWERWIEGEND: Cannot read image dimensions: \nurl(/home/joe/docbook/images/caution.png)\n"}, {"count": 4, "tags": [], "creator": "jeremias@apache.org", "is_private": false, "id": 93295, "creation_time": "2006-09-10T11:43:52Z", "time": "2006-09-10T11:43:52Z", "bug_id": 40425, "text": "Looks like a bug in the PNG codec for JDK 1.4.2_11 then. It may be this bug\nhere: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4826548\n\nAs a work-around on JDK 1.4.2, you can change org.apache.fop.image.ImageFactory.\nFind the line:\n        imt = new ImageMimeType(\"image/png\");\n\n...and change the block there to this:\n        imt = new ImageMimeType(\"image/png\");\n        imageMimeTypes.put(imt.getMimeType(), imt);\n        imt.addProvider(pngImage);\n        imt.addProvider(imageIoImage);\n\nThis gives the internal PNG codec a higher priority over the ImageIO codec.\n\n(In reply to comment #3)\n> Right, running FOP with JDK 1.5 works :-) \n> \n> Building and running FOP using JDK 1.4.2_11 with the latest sources form the \n> SVN trunk, I get the following backtrace. The build proceeds, though, \n> resulting in a PDF document missing that image (which in fact is a black \n> square to simplify matters). \n> \n> 07.09.2006 10:10:09 org.apache.fop.image.ImageIOImage loadBitmap\n> SCHWERWIEGEND: Error while loading image: 4\n> java.lang.ArrayIndexOutOfBoundsException: 4\n>         at \n>\ncom.sun.imageio.plugins.png.PNGImageReader.parse_PLTE_chunk(PNGImageReader.java:347)", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 40425, "attachment_id": null, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "id": 156790, "time": "2012-04-01T13:52:53Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T13:52:53Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "vitus@ac-sw.com", "attachment_id": null, "id": 71716, "time": "2005-03-02T14:24:38Z", "bug_id": 33808, "creation_time": "2005-03-02T14:24:38Z", "is_private": false, "text": "I am experiencing trouble when trying to create a table with FOP.\n\nMy first table column has a number-rows-spanned that is larger than the\nnumber of rows fitting on a page. This leads to several problems:\n\n1. The cell border is drawn across the page footer (does not end with the\nlast table-row on the page, but is drawn into nowhere if you have even more\nrows).\n2. The cell border for the (continued) first cell on the next page is\nmissing completely.\n\n3. An extra page is being added at the beginning of my document. (?!)\n\nWhether there is a patch correcting this mistake ?"}, {"count": 1, "tags": [], "creator": "vitus@ac-sw.com", "attachment_id": 14566, "text": "Created attachment 14566\npath for use greater number-rows-spanned\n\nI have written a patch which allows to use greater number-rows-spanned. I think\nit's dirty hack if someone knows more elegant the decision you are welcome =).\n(sorry for english).", "id": 72885, "time": "2005-03-26T07:42:57Z", "bug_id": 33808, "creation_time": "2005-03-26T07:42:57Z", "is_private": false}, {"count": 2, "tags": [], "creator": "vitus@ac-sw.com", "attachment_id": 14566, "id": 73279, "time": "2005-04-05T06:28:09Z", "bug_id": 33808, "creation_time": "2005-04-05T06:28:09Z", "is_private": false, "text": "Comment on attachment 14566\npath for use greater number-rows-spanned\n\ndiff -Nur fop-0.20.5-dist/src/org/apache/fop/fo/flow/AbstractTableBody.java\nfop-0.20.5/src/org/apache/fop/fo/flow/AbstractTableBody.java\n--- fop-0.20.5-dist/src/org/apache/fop/fo/flow/AbstractTableBody.java  \n2005-02-07 19:44:05.000000000 +0600\n+++ fop-0.20.5/src/org/apache/fop/fo/flow/AbstractTableBody.java       \n2005-04-05 11:21:12.246807323 +0700\n@@ -106,17 +106,17 @@\n\t if (this.marker == START) {\n\n\t     // Common Accessibility Properties\n-\t     AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n+//\t       AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n\n\t     // Common Aural Properties\n-\t     AuralProps mAurProps = propMgr.getAuralProps();\n+//\t       AuralProps mAurProps = propMgr.getAuralProps();\n\n\t     // Common Border, Padding, and Background Properties\n-\t     BorderAndPadding bap = propMgr.getBorderAndPadding();\n-\t     BackgroundProps bProps = propMgr.getBackgroundProps();\n+//\t       BorderAndPadding bap = propMgr.getBorderAndPadding();\n+//\t       BackgroundProps bProps = propMgr.getBackgroundProps();\n\n\t     // Common Relative Position Properties\n-\t     RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n+//\t       RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n\n\t     // this.properties.get(\"id\");\n\ndiff -Nur fop-0.20.5-dist/src/org/apache/fop/fo/flow/Block.java\nfop-0.20.5/src/org/apache/fop/fo/flow/Block.java\n--- fop-0.20.5-dist/src/org/apache/fop/fo/flow/Block.java\t2005-02-07\n19:44:05.000000000 +0600\n+++ fop-0.20.5/src/org/apache/fop/fo/flow/Block.java\t2005-04-01\n11:50:48.000000000 +0700\n@@ -153,26 +153,26 @@\n\t     noLayoutCount=0; // Reset the \"loop counter\".\n\n\t     // Common Accessibility Properties\n-\t     AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n+//\t       AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n\n\t     // Common Aural Properties\n-\t     AuralProps mAurProps = propMgr.getAuralProps();\n+//\t       AuralProps mAurProps = propMgr.getAuralProps();\n\n\t     // Common Border, Padding, and Background Properties\n-\t     BorderAndPadding bap = propMgr.getBorderAndPadding();\n-\t     BackgroundProps bProps = propMgr.getBackgroundProps();\n+//\t       BorderAndPadding bap = propMgr.getBorderAndPadding();\n+//\t       BackgroundProps bProps = propMgr.getBackgroundProps();\n\n\t     // Common Font Properties\n\t     //this.fontState = propMgr.getFontState(area.getFontInfo());\n\n\t     // Common Hyphenation Properties\n-\t     HyphenationProps mHyphProps = propMgr.getHyphenationProps();\n+//\t       HyphenationProps mHyphProps = propMgr.getHyphenationProps();\n\n\t     // Common Margin Properties-Block\n-\t     MarginProps mProps = propMgr.getMarginProps();\n+//\t       MarginProps mProps = propMgr.getMarginProps();\n\n\t     // Common Relative Position Properties\n-\t     RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n+//\t       RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n\n\t     this.align = this.properties.get(\"text-align\").getEnum();\n\t     this.alignLast = this.properties.get(\"text-align-last\").getEnum();\ndiff -Nur fop-0.20.5-dist/src/org/apache/fop/fo/flow/RowSpanMgr.java\nfop-0.20.5/src/org/apache/fop/fo/flow/RowSpanMgr.java\n--- fop-0.20.5-dist/src/org/apache/fop/fo/flow/RowSpanMgr.java\t2005-02-07\n19:44:05.000000000 +0600\n+++ fop-0.20.5/src/org/apache/fop/fo/flow/RowSpanMgr.java\t2005-04-01\n12:48:16.000000000 +0700\n@@ -77,9 +77,9 @@\n\t     return (rowsRemaining == 1);\n\t }\n\n-\t boolean finishRow(int rowHeight) {\n+\t boolean finishRow(int rowHeight, boolean isFullRow) {\n\t     totalRowHeight += rowHeight;\n-\t     if (--rowsRemaining == 0) {\n+\t     if (isFullRow && --rowsRemaining == 0) {\n\t\t if (cell != null) {\n\t\t     cell.setRowHeight(totalRowHeight);\n\t\t }\n@@ -131,6 +131,16 @@\n\t return false;\n     }\n\n+    public void setForceFinishSpans(int rowHeight) {\n+      for (int i = 0; i < spanInfo.length; i++) {\n+\t if (spanInfo[i] != null && spanInfo[i].cell != null){\n+\t   spanInfo[i].cell.setRowHeight(spanInfo[i].totalRowHeight -\nrowHeight);\n+\t   spanInfo[i].cell.setNumRowsSpanned(spanInfo[i].rowsRemaining);\n+\t }\n+\t spanInfo[i] = null;\n+      }\n+    }\n+\n     /**\n      * Done with a row.\n      * Any spans with only one row left are done\n@@ -140,10 +150,11 @@\n      * then remove the cell from the list of spanned cells. For other\n      * spans, add the rowHeight to the spanHeight.\n      */\n-    public void finishRow(int rowHeight) {\n+    public void finishRow(int rowHeight, boolean isFullRow) {\n\t for (int i = 0; i < spanInfo.length; i++) {\n-\t     if (spanInfo[i] != null && spanInfo[i].finishRow(rowHeight))\n+\t     if (spanInfo[i] != null &&\nspanInfo[i].finishRow(rowHeight,isFullRow)) {\n\t\t spanInfo[i] = null;\n+\t     }\n\t }\n     }\n\ndiff -Nur fop-0.20.5-dist/src/org/apache/fop/fo/flow/TableCell.java\nfop-0.20.5/src/org/apache/fop/fo/flow/TableCell.java\n--- fop-0.20.5-dist/src/org/apache/fop/fo/flow/TableCell.java\t2005-02-07\n19:44:05.000000000 +0600\n+++ fop-0.20.5/src/org/apache/fop/fo/flow/TableCell.java\t2005-04-01\n11:52:09.000000000 +0700\n@@ -179,17 +179,17 @@\n     public void doSetup()    // throws FOPException\n      {\n\t // Common Accessibility Properties\n-\t AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n+//\t   AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n\n\t // Common Aural Properties\n-\t AuralProps mAurProps = propMgr.getAuralProps();\n+//\t   AuralProps mAurProps = propMgr.getAuralProps();\n\n\t // Common Border, Padding, and Background Properties\n-\t BorderAndPadding bap = propMgr.getBorderAndPadding();\n-\t BackgroundProps bProps = propMgr.getBackgroundProps();\n+//\t   BorderAndPadding bap = propMgr.getBorderAndPadding();\n+//\t   BackgroundProps bProps = propMgr.getBackgroundProps();\n\n\t // Common Relative Position Properties\n-\t RelativePositionProps mRelProps = propMgr.getRelativePositionProps();\n+//\t   RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n\n\t // this.properties.get(\"border-after-precedence\");\n\t // this.properties.get(\"border-before-precendence\");\n@@ -246,7 +246,7 @@\n\n\n     public int layout(Area area) throws FOPException {\n-\t int originalAbsoluteHeight = area.getAbsoluteHeight();\n+//\t   int originalAbsoluteHeight = area.getAbsoluteHeight();\n\t if (this.marker == BREAK_AFTER) {\n\t     return Status.OK;\n\t }\n@@ -530,6 +530,13 @@\n\t     this.borderHeight = (borderBefore + borderAfter) / 2;\n\t }\n     }\n-\n\n+    public void setNumRowsSpanned(int numRowsSpanned){\n+\t this.numRowsSpanned = Math.max(1, numRowsSpanned);\n+    }\n+\n+    public void resetMarker() {\n+\t bDone = false;\n+\t super.resetMarker();\n+    }\n }\ndiff -Nur fop-0.20.5-dist/src/org/apache/fop/fo/flow/Table.java\nfop-0.20.5/src/org/apache/fop/fo/flow/Table.java\n--- fop-0.20.5-dist/src/org/apache/fop/fo/flow/Table.java\t2005-02-07\n19:44:05.000000000 +0600\n+++ fop-0.20.5/src/org/apache/fop/fo/flow/Table.java\t2005-04-01\n11:54:19.000000000 +0700\n@@ -117,20 +117,20 @@\n\n\t if (this.marker == START) {\n\t     // Common Accessibility Properties\n-\t     AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n+//\t       AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n\n\t     // Common Aural Properties\n-\t     AuralProps mAurProps = propMgr.getAuralProps();\n+//\t       AuralProps mAurProps = propMgr.getAuralProps();\n\n\t     // Common Border, Padding, and Background Properties\n-\t     BorderAndPadding bap = propMgr.getBorderAndPadding();\n-\t     BackgroundProps bProps = propMgr.getBackgroundProps();\n+//\t       BorderAndPadding bap = propMgr.getBorderAndPadding();\n+//\t       BackgroundProps bProps = propMgr.getBackgroundProps();\n\n\t     // Common Margin Properties-Block\n-\t     MarginProps mProps = propMgr.getMarginProps();\n+//\t       MarginProps mProps = propMgr.getMarginProps();\n\n\t     // Common Relative Position Properties\n-\t     RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n+//\t       RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n\n\t     // this.properties.get(\"block-progression-dimension\");\n\t     // this.properties.get(\"border-after-precendence\");\n@@ -447,7 +447,7 @@\n\n     private int calcFixedColumnWidths(int maxAllocationWidth) {\n\t int nextColumnNumber=1;\n-\t int iEmptyCols=0;\n+//\t   int iEmptyCols=0;\n\t double dTblUnits=0.0;\n\t int iFixedWidth=0;\n\t double dWidthFactor = 0.0;\n@@ -459,7 +459,7 @@\n\t\t log.warn(\"No table-column specification for column \" +\n\t\t\t  nextColumnNumber);\n\t\t // What about sizing issues?\n-\t\t iEmptyCols++;\n+//\t\t   iEmptyCols++;\n\t     }\n\t     else {\n\t\t Length colLength = c.getColumnWidthAsLength();\n@@ -508,9 +508,9 @@\n\t     /* No proportional units. If minimum IPD is specified, check\n\t      * that sum of column widths > minIPD.\n\t      */\n-\t     int iTableWidth = iFixedWidth;\n+//\t       int iTableWidth = iFixedWidth;\n\t     if (this.minIPD > iFixedWidth) {\n-\t\t iTableWidth = this.minIPD;\n+//\t\t   iTableWidth = this.minIPD;\n\t\t // Add extra space to each column\n\t\t dWidthFactor = (double)this.minIPD/(double)iFixedWidth;\n\t     }\ndiff -Nur fop-0.20.5-dist/src/org/apache/fop/fo/flow/TableRow.java\nfop-0.20.5/src/org/apache/fop/fo/flow/TableRow.java\n--- fop-0.20.5-dist/src/org/apache/fop/fo/flow/TableRow.java\t2005-02-07\n19:44:05.000000000 +0600\n+++ fop-0.20.5/src/org/apache/fop/fo/flow/TableRow.java 2005-04-05\n11:18:44.817271870 +0700\n@@ -173,6 +173,13 @@\n\t     }\n\t     return rslt;\n\t }\n+\n+      public void setForceCellsStart() {\n+\t   for (int i=0; i<states.length; i++){\n+\t     if (cells[i] != null)\n+\t       states[i] = CELLSTART;\n+\t   }\n+      }\n     }\n\n\n@@ -202,21 +209,21 @@\n     public void doSetup(Area area) throws FOPException {\n\n\t // Common Accessibility Properties\n-\t AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n+//\t   AccessibilityProps mAccProps = propMgr.getAccessibilityProps();\n\n\t // this.properties.get(\"block-progression-dimension\");\n\n\t // Common Aural Properties\n-\t AuralProps mAurProps = propMgr.getAuralProps();\n+//\t   AuralProps mAurProps = propMgr.getAuralProps();\n\n\t // Common Border, Padding, and Background Properties\n\t // only background apply, border apply if border-collapse\n\t // is collapse.\n-\t BorderAndPadding bap = propMgr.getBorderAndPadding();\n-\t BackgroundProps bProps = propMgr.getBackgroundProps();\n+//\t   BorderAndPadding bap = propMgr.getBorderAndPadding();\n+//\t   BackgroundProps bProps = propMgr.getBackgroundProps();\n\n\t // Common Relative Position Properties\n-\t RelativePositionProps mRelProps = propMgr.getRelativePositionProps();\n+//\t   RelativePositionProps mRelProps =\npropMgr.getRelativePositionProps();\n\n\t // this.properties.get(\"break-before\");\n\t // this.properties.get(\"break-after\");\n@@ -233,7 +240,6 @@\n\t this.keepWithNext = getKeepValue(\"keep-with-next.within-column\");\n\t this.keepWithPrevious =\n\t     getKeepValue(\"keep-with-previous.within-column\");\n-\n\t this.id = this.properties.get(\"id\").getString();\n\t this.minHeight = this.properties.get(\"height\").getLength().mvalue();\n\t setup = true;\n@@ -356,10 +362,15 @@\n\n\n\t     int rowSpan = cell.getNumRowsSpanned();\n+\t     if (rowSpan > 1)\n+\t       cell.resetMarker();\n\t     int status;\n\t     if (Status.isIncomplete((status = cell.layout(areaContainer)))) {\n-\t\tif ((keepTogether.getType() == KeepValue.KEEP_WITH_ALWAYS &&\nbIgnoreKeepTogether==false)\n-\t\t\t || (status == Status.AREA_FULL_NONE)\n+\t\tif (keepTogether.getType() == KeepValue.KEEP_WITH_ALWAYS &&\nbIgnoreKeepTogether==false){\n+\t\t    this.resetMarker();\n+\t\t    this.removeID(area.getIDReferences());\n+\t\t    return Status.AREA_FULL_NONE;\n+\t\t} else if ((status == Status.AREA_FULL_NONE)\n\t\t\t || rowSpan > 1) {\n\t\t     // We will put this row into the next column/page\n\t\t     // Note: the only time this shouldn't be honored is\n@@ -367,14 +378,22 @@\n\t\t     // Remove spanning cells from RowSpanMgr?\n\t\t     this.resetMarker();\n\t\t     this.removeID(area.getIDReferences());\n-\t\t     return Status.AREA_FULL_NONE;\n+\t\t     rowSpanMgr.finishRow(largestCellHeight, false);\n+\t\t     rowSpanMgr.setForceFinishSpans(largestCellHeight);\n+\t\t     cellArray.setForceCellsStart();\n+\t\t     return Status.FORCE_PAGE_BREAK;\n\t\t } else if (status == Status.AREA_FULL_SOME) {\n\t\t     /*\n\t\t      * Row is not keep-together, cell isn't spanning\n\t\t      * and part of it fits. We can break the cell and\n\t\t      * the row.\n\t\t      */\n-\t\t     someCellDidNotLayoutCompletely = true;\n+\t\t     this.resetMarker();\n+\t\t     this.removeID(area.getIDReferences());\n+\t\t     rowSpanMgr.finishRow(largestCellHeight, false);\n+\t\t     rowSpanMgr.setForceFinishSpans(largestCellHeight);\n+\t\t     cellArray.setForceCellsStart();\n+\t\t     return Status.FORCE_PAGE_BREAK;\n\t\t }\n\t     }\t\t\t\t  // else {\n\t      // layout was complete for a particular cell\n@@ -404,7 +423,8 @@\n\n\t // Adjust spanning row information\n\t // ??? what if some cells are broken???\n-\t rowSpanMgr.finishRow(largestCellHeight);\n+\t rowSpanMgr.finishRow(largestCellHeight,\n+\t\t\t      !someCellDidNotLayoutCompletely );\n\n\t area.addChild(areaContainer);\n\t areaContainer.setHeight(largestCellHeight);\ndiff -Nur fop-0.20.5-dist/src/org/apache/fop/layout/BodyAreaContainer.java\nfop-0.20.5/src/org/apache/fop/layout/BodyAreaContainer.java\n--- fop-0.20.5-dist/src/org/apache/fop/layout/BodyAreaContainer.java   \n2005-02-07 19:44:06.000000000 +0600\n+++ fop-0.20.5/src/org/apache/fop/layout/BodyAreaContainer.java 2005-04-01\n11:57:09.000000000 +0700\n@@ -84,12 +84,12 @@\n     private int mainRefAreaHeight;\n\n     // reference area yPositions\n-    private int mainYPosition;\n-    private int beforeFloatYPosition;\n-    private int footnoteYPosition;\n+//    private int mainYPosition;\n+//    private int beforeFloatYPosition;\n+//    private int footnoteYPosition;\n\n     // the start FO in case of rollback\n-    private FObj startFO;\n+//    private FObj startFO;\n     private boolean isNewSpanArea;\n\n     // keeps track of footnote state for multiple layouts\n@@ -377,42 +377,42 @@\n\t return footnoteState;\n     }\n\n-    public boolean needsFootnoteAdjusting() {\n-\t footnoteYPosition = footnoteReferenceArea.getYPosition();\n-\t switch (footnoteState) {\n-\t case 0:\n-\t     resetHeights();\n-\t     if (footnoteReferenceArea.getHeight() > 0\n-\t\t     && mainYPosition + mainReferenceArea.getHeight()\n-\t\t\t> footnoteYPosition) {\n-\t\t return true;\n-\t     }\n-\t case 1:\n-\t     break;\n-\t }\n-\t return false;\n-    }\n-\n-    public void adjustFootnoteArea() {\n-\t footnoteState++;\n-\t if (footnoteState == 1) {\n-\t    \nmainReferenceArea.setMaxHeight(footnoteReferenceArea.getYPosition()\n-\t\t\t\t\t    - mainYPosition);\n-\t     footnoteYPosition = footnoteReferenceArea.getYPosition();\n-\t    \nfootnoteReferenceArea.setMaxHeight(footnoteReferenceArea.getHeight());\n-\n-\t     ArrayList children = footnoteReferenceArea.getChildren();\n-\t     for (int i = 0; i < children.size(); i++) {\n-\t\t Object obj = children.get(i);\n-\t\t if (obj instanceof Area) {\n-\t\t     Area childArea = (Area)obj;\n-\t\t     footnoteReferenceArea.removeChild(childArea);\n-\t\t }\n-\t     }\n-\n-\t     getPage().setPendingFootnotes(null);\n-\t }\n-    }\n+//    public boolean needsFootnoteAdjusting() {\n+//\t   footnoteYPosition = footnoteReferenceArea.getYPosition();\n+//\t   switch (footnoteState) {\n+//\t   case 0:\n+//\t       resetHeights();\n+//\t       if (footnoteReferenceArea.getHeight() > 0\n+//\t\t       && mainYPosition + mainReferenceArea.getHeight()\n+//\t\t\t  > footnoteYPosition) {\n+//\t\t   return true;\n+//\t       }\n+//\t   case 1:\n+//\t       break;\n+//\t   }\n+//\t   return false;\n+//    }\n+//\n+//    public void adjustFootnoteArea() {\n+//\t   footnoteState++;\n+//\t   if (footnoteState == 1) {\n+//\t      \nmainReferenceArea.setMaxHeight(footnoteReferenceArea.getYPosition()\n+//\t\t\t\t\t      - mainYPosition);\n+//\t       footnoteYPosition = footnoteReferenceArea.getYPosition();\n+//\t      \nfootnoteReferenceArea.setMaxHeight(footnoteReferenceArea.getHeight());\n+//\n+//\t       ArrayList children = footnoteReferenceArea.getChildren();\n+//\t       for (int i = 0; i < children.size(); i++) {\n+//\t\t   Object obj = children.get(i);\n+//\t\t   if (obj instanceof Area) {\n+//\t\t       Area childArea = (Area)obj;\n+//\t\t       footnoteReferenceArea.removeChild(childArea);\n+//\t\t   }\n+//\t       }\n+//\n+//\t       getPage().setPendingFootnotes(null);\n+//\t   }\n+//    }\n\n     protected static void resetMaxHeight(Area ar, int change) {\n\t ar.setMaxHeight(change);"}, {"count": 3, "tags": [], "bug_id": 33808, "attachment_id": null, "text": "Fixed in FOP 0.94 and probably earlier versions", "id": 110825, "time": "2007-11-20T02:12:13Z", "creator": "pascal.sancho@takoma.fr", "creation_time": "2007-11-20T02:12:13Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 33808, "attachment_id": null, "id": 110836, "time": "2007-11-20T02:48:40Z", "creator": "vitus@gw.ac-sw.com", "creation_time": "2007-11-20T02:48:40Z", "is_private": false, "text": "in 0.93 works fine.\nwith patch works on 0.20.5"}, {"count": 5, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "id": 156361, "time": "2012-04-01T07:13:59Z", "bug_id": 33808, "creation_time": "2012-04-01T07:13:59Z", "is_private": false, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed"}]
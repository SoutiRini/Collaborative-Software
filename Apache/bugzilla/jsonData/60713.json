[{"count": 0, "tags": [], "bug_id": 60713, "attachment_id": null, "is_private": false, "id": 196867, "time": "2017-02-09T06:35:34Z", "creator": "ddchzyj9@163.com", "creation_time": "2017-02-09T06:35:34Z", "text": "SXSSFWorkbook.write(OutputStream) will close OutputStream. if i want to write multi workbooks to one OutputStream, that's impossible. should the OutputStream be closed by creator rather than user?"}, {"count": 1, "tags": [], "bug_id": 60713, "attachment_id": null, "id": 196876, "time": "2017-02-09T17:02:02Z", "creator": "onealj@apache.org", "creation_time": "2017-02-09T17:02:02Z", "is_private": false, "text": "That's a good point--whatever opens a stream should be responsible for closing it.\n\nHowever, you may have problems with corrupt workbooks if you cat two workbooks together, so I don't see this as a real use case."}, {"count": 2, "tags": [], "text": "I believe that all the write methods should be closing the streams, because once POI has finished writing to the File / Stream, there's nothing more that can be done to them. All the file formats are write-once only, none of them support subsequent appending.", "is_private": false, "id": 196903, "creator": "apache@gagravarr.org", "time": "2017-02-10T11:16:22Z", "bug_id": 60713, "creation_time": "2017-02-10T11:16:22Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 60713, "attachment_id": null, "is_private": false, "id": 197095, "time": "2017-02-17T05:02:04Z", "creator": "onealj@apache.org", "creation_time": "2017-02-17T05:02:04Z", "text": "There should only be a problem if the OutputStream's close method follows the AutoCloseable interface and is not idempotent, where subsequent calls to close have visible side effects.\n\nAt the creation of these classes and prior to Java 7, OutputStream implemented the Closeable interface, which requires subsequent calls to close to have no effect.\n\nWe must balance that with users forgetting to close their own input streams and leaking resources (though that's on them). If we change POI to no longer close user-opened OutputStreams, we should document this changed behavior in both the Javadocs and changelog, making sure to update all of our POI example code and website to close the provided stream (that'd be a good idea anyways).\n\nhttps://docs.oracle.com/javase/7/docs/api/java/io/OutputStream.html#close()"}, {"count": 4, "tags": [], "bug_id": 60713, "attachment_id": null, "id": 197096, "time": "2017-02-17T05:12:04Z", "creator": "onealj@apache.org", "creation_time": "2017-02-17T05:12:04Z", "is_private": false, "text": "ddchzyj99, what kind of OutputStream are you using that has problems being closed twice?\n\nI think we may want to err on the side of no change unless someone has a nonhypothetical scenario where this impacts them."}, {"count": 5, "tags": [], "text": "I agree, it sounds like a theoretical issue and changing this very likely would have bad side-effects for existing users.", "attachment_id": null, "id": 197102, "creator": "dominik.stadler@gmx.at", "time": "2017-02-17T05:56:32Z", "bug_id": 60713, "creation_time": "2017-02-17T05:56:32Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 60713, "attachment_id": null, "id": 197114, "time": "2017-02-17T11:08:42Z", "creator": "apache@gagravarr.org", "creation_time": "2017-02-17T11:08:42Z", "is_private": false, "text": "We already have a helper method on NPOIFS for people who don't want the auto-close behaviour when opening from an InputStream - https://poi.apache.org/apidocs/org/apache/poi/poifs/filesystem/NPOIFSFileSystem.html#createNonClosingInputStream(java.io.InputStream)\n\nMaybe we could add a similar one for OutputStream, to help people wrap their problematic ones if needed?"}, {"count": 7, "tags": [], "bug_id": 60713, "attachment_id": null, "id": 197124, "time": "2017-02-17T17:34:33Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-02-17T17:34:33Z", "is_private": false, "text": "I'm also in favor of a helper method, to avoid a dramatic change to the API.  Big breaks in backward compatibility mean longer delays before downstream projects taken an update, and often I want newer functionality available to my projects that use those downstream projects sooner rather than later.  Maintaining backward compatibility speeds that up, or lets me update POI independent of other libraries."}]
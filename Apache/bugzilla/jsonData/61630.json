[{"count": 0, "tags": [], "text": "Created attachment 35433\nPatch improving Performance\n\nWhen exporting a large .xlsx with XSSExportToXML, it takes very long. \n\nFind attached Patch, which reduced the runtime on an xlsx with 42k xpaths by 80%.\n\nThe idea for the improve is taken from:  https://www.ibm.com/developerworks/library/x-perfap2/index.html", "attachment_id": 35433, "id": 201510, "creator": "misc.daniel@stucki.me", "time": "2017-10-18T13:09:02Z", "bug_id": 61630, "creation_time": "2017-10-18T13:09:02Z", "is_private": false}, {"count": 1, "tags": [], "text": "Did the private selectNode method, which is called by private getNodeByXPath, and, in turn, other methods, affect the performance?\n\nIt looks like the general idea here is to avoid creating a NodeList, since that eagerly traverses the XML nodes. A lazy traversal approach seems to be significantly faster here, based on your findings.", "attachment_id": null, "id": 201518, "creator": "onealj@apache.org", "time": "2017-10-18T15:57:18Z", "bug_id": 61630, "creation_time": "2017-10-18T15:57:18Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61630, "is_private": false, "id": 201519, "attachment_id": 35434, "creator": "onealj@apache.org", "creation_time": "2017-10-18T16:00:58Z", "time": "2017-10-18T16:00:58Z", "text": "Created attachment 35434\npatch improving performance, rebased\n\nI resolved some recent merge conflicts with your patch. Rebased patch is attach. I'll apply this once I run it against our unit test suite."}, {"count": 3, "tags": [], "text": "Committed in r1812546.", "is_private": false, "id": 201520, "creator": "onealj@apache.org", "time": "2017-10-18T16:04:18Z", "bug_id": 61630, "creation_time": "2017-10-18T16:04:18Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 61630, "text": "profiling the large .xlsx file didn't mark your mentioned private methods as hotspots. further profiling marked the private method indexOfElementInComplexType as bottleneck. This because of many calls performing the sort.\nIntroducing a Cache - just a hashmap - storing the index for an entry minimizes the operations on the DOM. See attached my proposed patch. It significantly Speeds up the Export for large .xlsx", "id": 201549, "time": "2017-10-20T09:44:21Z", "creator": "misc.daniel@stucki.me", "creation_time": "2017-10-20T09:44:21Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": 35445, "creator": "misc.daniel@stucki.me", "text": "Created attachment 35445\nProposing patch for further Performance improvements", "id": 201550, "time": "2017-10-20T09:45:11Z", "bug_id": 61630, "creation_time": "2017-10-20T09:45:11Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": 35445, "creator": "onealj@apache.org", "text": "Comment on attachment 35445\nProposing patch for further Performance improvements\n\n>\u008b\u00edY[S\u00dbF\u00ce\u00ab3\u00c3\u00d8\u00f0\u0090\u00caX\u00b6,0(\u00ce\u00a5Z\u00a6\u00dc&\u0090\u0094\u0099L\u0084\u00bc\u00c6JdI]\u00ad\u00c14\u00f1\u00ef9\u00bb+i\u00b5\u00922I\u00da>\u00f8<`i/\u00e7\u00f2\u009d\u00db\u00aeH<\u00ee\u008f:|\u00ca\u00fd8\u00ea\u00ba\u00dd\u00eeV\u00afG\u00ba\u0092\u008c_\u00b7\u00b7\u00bd\u00beE\u00dc\nw{}\u00a3\u00b7\u00be\u00b1\u00e3\u00ae\u00db\u00db\u00dc|D\u00ba?P\u00a7\u009c&)\u00f7\u00d8\u00a3\u00ee7\u00cb2\u008d\u00fb\u00aa\u00fdt\n\u00e8t\u0097\u00a4\u00ccw\u00e2x:\u009d\u00de\u00ad\u00e7\u00c4\u00ec\u00c6\u00f1\u00cfQ'\u0089g\u009a\u00a6C\u0087N9\u00f3|3\u00e7\u00ea\u00e2\u00e2\u00f0`\u009a\u00c4\u008c_\u00c6W\u00e3\u00b0\u0083[V\u00f7\u00bf\u009dV\u00b7\u00db\u00edo\u00d7\u00a5a1z\u00a4A\u0091\u009d\u00ad\u00ed\u00devs\u00e5q\u00ab\u00d5\u00fa|\u00efb\u00f61\u0088n\u0088'\u00f7\u00c0\u00f5\u00e5K\u00d2~\u00b6ao\u0093\u0096\u00f8\u00fb\u00f2\u00e5\u00cac\u0082\u0094\u00b0\u00e0\u00d6\u00e3\u0094@h\u00f1\u00c0'\u00c3 \u00f2Br~vt\u00df\u00dcPF\u008e\u00cf~%}\u00f5~(\u00c4\u00ddwn(\u0097\u00b3\u0096)\u00d9\u00bd4m\u00fe\u00ac\n\u00ee\u00b8\u00f0\u00c4K\u00c8\u00d8K`\u00b6\nF6\u00b2))\u00f17/\u00c1\u0082\u00bd\u00ce@i\u009bE\u009c\u0082\u0084\u00e7$@\u00a7\u00e3\u00d6>\u0089\u00e8\u00dd\u00dcu\u0096\u0090\u008a\u00e4\u00ac\u00ad\u00a9'\u00b2F\u00f6)\u00f1\u00c4f*T\u00ab\u00bch@R\u00caS\u00c2GuJ(\u0093kJ&)\u0090\u00bb\u008d\u00c8\n\u008d(Pp\n>\u0096]\u009d\u0093x\u00c2\u0093\t'\u0083\u00d8\u009f\u008ci\u00c4s9^\u00a8\u0088/\u00fe\u00ecg\u00c4\u00bd\u00eb\u0090\u009eHYi\u00d8X~<\u00c7\u00d1\u00d5\u00b9\u00c7G\u00b6\u009c\u00ce\u008d@\u009a\t[\u008dF\u00c0K=f\u0095\u00ed\u00c7aH}\u00f1\u0093vR0\u00ce\u009a&\u00c0.\u00b5\u00f9(\u008e\u0098\u00b3]\u00e30\u008c\u0099%\u00d1$b/\u00d9\u0095\u00bfi\u0093|+\u0085i[\u00eb\u00c2\u00b4\u00ad\u009e;&Cb\u00f94\u009f\u00f4\u00a3I\u00ca\u00fd\u00f3\u00e84P\u00e2O\u00c5sO\u00bf\u00dcH\u00a4%6`\u008dw\u00b0\u0094\u00ef\u008f\u0082p`5q\u00cczaZ\u00c6\u00cb$\u00f0\u00eb>(s!S\u00a1\u0097\u00ad\u00c9\u00c3\u00ad\u00edy[\u00b7\u008c\u0087\u00d1q|KI|R\u0096\u00c0\u008fQB\u00c7\t\u00bf\u0087\u0088%1@\u0094A@}\u00a44\u00d1\u00a3\"2\u009a\u00dcza0X\u00c0>Z\u00ab\u00ab\u00fa\u00d7,\u00b44\u008d\u0086K\u00c8\u00fa\u00fdb>\u00e2V\u00b3I\u009e>%\u00c6\u0082s/{\u00b3\u009a\u00e4\t\u00e4\u00cc\u00d1X\u00c0\u00a1#\n\u0095\u00b8\u00e0\u0089\u00b0\u00d8\u00c5\u00dd\u00d9\\a@\u008f\u00f4\u00f8\u009b\u00c5w(\u0087\u00ac])a\u0091\u00c1\u00f50\u00ab\u00f2]\u0097\u00a9\u00892G\u00a2\u0085\u0080\u00e8\u00a4\u008d\u008fqmxQ@\u00e8JT\u00d8\u00ed\u00e9 \n\u0083\u00bf):\u00e7\u0086\u00d1we\u00f8{\u0091\u00f6//\u008b\u00ed\u00c4\u00e7\u00fa[\u00bf\u00cc\u00e0\u00af\u0088\u00ff\u00a2't\u00ddK\u00dc\u0091\u00b4\u00f9r\u00ce\u0081&a\u009chl\u00b4\u00bc\u00ab\u00b6\u00ec\u00c6\u00acT\u00df.\u009bi\u00cb\u00f0\\\u00df\u00c4\u00b8l\u00adon\u00d7\u0085\u00e7\u00b4\u00d3\u00b1GR\u00f9\u00d3'C\u00d5\u00de@\u0088\u009c\u00b2\u00d2x\u00c2\u00fcj\u0091y\u0087\t\u00ec\u00c1Z\u0099\u00ca\u00e2\u00a9\u00af\u00f8\u00e0\u00ee|\u00de\u00aal\u00cd7t\u00d4\u00b5\u00d0\u00a6\u00d7g'B\u0096\u00a2Y)M\u00d5r\u00e48~CG\u00f3i\"\u00aa?\u00f6,(A\u00cc\u00a0\u0081\u00d9\u00a2\u00e6dm\u008aim\u00d1a\u0094OXD8\u009b\u00d0R\u00df!>\u00b4\u00ad\u00a3\u00b3\u0083\u008c;\u00a1\u00c2\u0083\u00d3g\u009b\u00f63\u00c0\u00f4\u00d96\u00fc\u00d4\u00a5\u00fc\u00ac<d\u00bc^CC\u00fe\u00a8\u00db\u00a7=\u00fa^J\u00c9\u00e9\u00db\u0093\u00837G\u00fb\u00bb\u00d2\u00e8V\u00ed\u009c)\u00f15`\u00f9\u0096a'H\u00b1\u00a0\u00e0\u00eba\u00cc\u00c6\u00e7t \u00ea\u00c6\u00dch&\u00aa\u00fd\u00e4;p\u00bb\u00dcUM\u0086\u00a1\u00d0z2<z]c\u00ac\u00d7\u00cdOU\u00da\u00d9W\u00df\u00ffIB:\u0084#\u00d2G\n>~\u00ea\u008b\u0097+ln\u009d4\tn\u00ad:\u00ab%1\u00f9.\u00dc\u008c\u008am\u00e2\u00adf_[\u0083I5\u00f2\u00d4S\u00ec\u00a1\u00b0\u00e9\u00bc\u00b1\u008e\u0083\u00e8\u0098F7b\u00baP\u00ac\u008a\u00b1=]\u00aa{Q]\u00a7\u0084\u00ea:\u00e3d!\u00daz\u00fb$\u00eb8\t\u00e9\u00f4\u00f2>\u00a1o\u00e28\u00eb\u00f7\u00eb2\u00d1T7\u00e9\u00b9\u00eb\u00b6\u008bX\u00ba=\u00dbukV'\u00e4\u0084C\u00fb\u00cd\u00a0\u0091\u00aa\u00bc\u00fe4\u00d4\u00c8\"m\u00d0\u00b6e\u00d6d'\u00e3\u00a4R\u00b8sH[S\u00d2\"\u00bf\u00ba\u00aa\u00b9\u00c0xl|\u00c5\u009ebe\u00aai0\u00d9s\u00f9U\u00a2\u00b4\u0088\u00d1JK\u00c3@Y+\u00c7\u00c3\u00b3\u00a1yi\u00ec+\u00ba,\u0092_+H\u0080\u00fbI\u00a6\u00beR\u0094r\u00af\u0090\u00f4\u00a4\u00dfv\u00f1dT\u00c8\u00c6\u0091f-\u00d9f\n\u0091=m\u00e3\u00fcMH\u00aa~\u00b6\u00ddy'\u0087\u0099\u00c1\u00fa\u00f9\u00d7\u00b2\u009e\u00cf\u00b9f|W\u009f\u00cc\u00eb\u00ad\u009aV<y!r\u00dbn\u00bb\u0092u\u008b\u0082QS\u00a4\u00d6:\u00c7!\u00a7g\u0097\u00bb\u00a2K\u00c9K\u00c7 \u00a6i\u00f4\u00d4&l=pg\u0085\u00a3\u00a6\u00cfCq\u0098\u00c6E\u00b2\u00b9\u00d6\u00b0\u009b\u00ad9f\u00e8\u00abb\u00b2\u00e1\u00da;PL\u00d6\u00b7\u00edM\u00a3\u0098($\u00baY\u00d6\u00c8\u009b\u00964\u00bb\u0095b\u00f0.BJ\u00d5\"\u00aa\"o4\u00c5\u009a\u00a6\u00ee\u0088\u00af\u00e4[8B\nT\u00fc1\u00a7\u00da\u00a4V\u008d\u00dct\u00b8\\hs\u00a4\u00af\u009d\u00cfJ\u00a5\u00c7v\u00abf\u00a2[:1\u00f8\t\u0085\u008d\u0090\u00f5\u0092\u0085\u00d1\u0082\u0098,\n\u00a1o$\u008b\u00a2\u00a6\u009ay\u00e9\u00c3Lh4\u00aa\u00b0\u00ff\u00f0\\\u00ae\u00f01M<_tqi\u00c9G,mu\u00a9z\u00c0\u00c5-\u0084\u00f3\u0088\u00d6.\u00ac\u00ad\\B\u00fe\u00ee\u0086g\u009a:`\u00a5Z+\u00d0\u00ab^E\u00838R1h\u00a4\u009c)O]\u00d6\u00a5\u0084\u00bf\u00a0U\u00a5\u00ab\u0099j\u0095\u00e8Kz\u00d5\u008a,\u00f1\u0093@Ze\u0096\u00e8y\u00f2\u00f9s\u00d9~\u00d7V\u00f5\u009a~-b\"\u0088\u00e0\u009a\u00f94eM\u00fd1.\u00db ?NAaBM\u00e1\u00ab\u009a\u00fc\u00aa\u008a\u0081\u00d5\u00e6\u00fc\u00ba+Q\u00adS_#\u0080\u00c7{C\u00b3TT$\u00a1L\u00b5\u00be\u00a3\u00be]\u00bc\u00c3\u00b3d!vA\u009c.PD\u00ba(\u00f3L\u00b0\u00e8^\u009a\u00a7k\u00ef\u0099\u00e5dyWs\u00eb\u00ed2l\u0098\u00c75\u00ff\u009c\u0084\u009f\u00b0\u00b2(i\u00c1\u0091\u00a8\u00a5\u00b2\u00f5\u00f5\u00a9\u008c\u0093\u0098\u00cb\u00d0\u00a9\n\u00f8\u00fa\u00d3WF\u00e5d\n>\u00e6\u00ddTg\u00e5SqI\u00fd9\u00ca\u00d4G\u00f9bm\u008c\n>\u00e6A6\u00abk\\\u00d5\u00b6U\u00d6\u00b3\u00d52\u00adSE2\u00f3S:\u00e5\u00c1u>\u00b6\u00cc\u0087y\u00c0\u0094\u009b\u00bet\u0089\u00b3t0\u00f7J\u00c64\u00c9\u00cc\u00de]bYF\u00fa\u009a\u00ab\u00ba\u00b0\u00c8\u0095\u00ae\u009e\u00d5w\u00bbJeY\u00d4\u00e2*(\u00e1o,T7\u009cR\u00d61\u00d1\u00dd\u00a2\u00e3!\u00be\u0089\u00c6\u00f7\u00a0\u00c8\u00fcN\u00ef-\u009do\u00f3E\u00b1?\u0092\u0094\u00e6veS\u00cb\u00fd\u0086!3YT\u0091\u00ba\u00cb\u00fb\\a\u00d3W\u00ee\u00c9\u009a\u00a5\u00b4\u00e1\u00b4\n\u00af8\u0080s=\u00e14\u00b5d&\u00af\u00c1\u00a7ck\u0095\u00d1a\u00f9\u0082\t\u0087\u008d\u00c7\u00dco4\n>\u00abb\u00a9l\u00d83Q\u00ff\u00ca5[-}\u00802<Jm\u00ba\u00ff\u00fa\u00bfJKZ\u00d2\u0092\u0096\u00b4\u00a4%-iIKZ\u00d2\u0092\u00fe\u008f\u00f4>?\u00a6\u00f6(", "id": 201555, "time": "2017-10-20T23:23:47Z", "bug_id": 61630, "creation_time": "2017-10-20T23:23:47Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "Can you rebase your patch to http://svn.apache.org/repos/asf/poi/trunk? r96747 looks like it might be a private repo. This patch at least predates r1812097.\n\nIf you could, please exclude whitespace changes from the patch, which makes it quicker to review the changes (fortunately this one's short), but more importantly reduces the likelihood of merge conflicts due to sweeping whitespace changes.", "is_private": false, "id": 201556, "creator": "onealj@apache.org", "time": "2017-10-20T23:43:20Z", "bug_id": 61630, "creation_time": "2017-10-20T23:43:20Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "misc.daniel@stucki.me", "text": "Find attached the patch rebased to trunk. Your assumption of a private repo was right. Sorry about that.\n\nI just used ant -f patch.xml to create the patch, don't know how to specifically exclude whitespaces.", "id": 201620, "time": "2017-10-24T09:33:27Z", "bug_id": 61630, "creation_time": "2017-10-24T09:33:27Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 61630, "attachment_id": 35450, "is_private": false, "id": 201621, "time": "2017-10-24T09:34:33Z", "creator": "misc.daniel@stucki.me", "creation_time": "2017-10-24T09:34:33Z", "text": "Created attachment 35450\nLast Patch rebased against trunk r1813152"}, {"count": 10, "tags": [], "bug_id": 61630, "is_private": false, "text": "Thanks! Applied in r1813240 without modification.", "id": 201647, "time": "2017-10-24T23:00:41Z", "creator": "onealj@apache.org", "creation_time": "2017-10-24T23:00:41Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 61630, "text": "These changes will be included in the first snapshot release of POI 4.0.0.", "id": 201648, "attachment_id": null, "creator": "onealj@apache.org", "creation_time": "2017-10-24T23:01:25Z", "time": "2017-10-24T23:01:25Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 61630, "is_private": false, "id": 201649, "attachment_id": null, "creator": "onealj@apache.org", "creation_time": "2017-10-24T23:40:42Z", "time": "2017-10-24T23:40:42Z", "text": "Looks like this broke one of our integration tests (which passes when r1813240 is reverted).\nhttps://svn.apache.org/viewvc/poi/trunk/test-data/spreadsheet/59026.xlsx\n\nTestcase: testAllFiles[1684: spreadsheet/59026.xlsx using org.apache.poi.stress.XSSFFileHandler@23223dd8] took 0.016 sec\n        Caused an ERROR\nWhile handling spreadsheet/59026.xlsx\njava.lang.Exception: While handling spreadsheet/59026.xlsx\n        at org.apache.poi.TestAllFiles.testAllFiles(TestAllFiles.java:438)\nCaused by: org.xml.sax.SAXParseException; cvc-complex-type.2.4.a: Invalid content was found starting with element 'EmployeeInfo'. One of '{ExpenseItem}' is expected.\n        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)\n        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:396)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:284)\n        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:452)\n        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3230)\n        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1790)\n        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:740)\n        at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.beginNode(DOMValidatorHelper.java:277)\n        at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(DOMValidatorHelper.java:244)\n        at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(DOMValidatorHelper.java:190)\n        at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(ValidatorImpl.java:109)\n        at javax.xml.validation.Validator.validate(Validator.java:124)\n        at org.apache.poi.xssf.extractor.XSSFExportToXml.isValid(XSSFExportToXml.java:259)\n        at org.apache.poi.xssf.extractor.XSSFExportToXml.exportToXML(XSSFExportToXml.java:219)\n        at org.apache.poi.xssf.extractor.XSSFExportToXml.exportToXML(XSSFExportToXml.java:105)\n        at org.apache.poi.stress.XSSFFileHandler.exportToXML(XSSFFileHandler.java:156)\n        at org.apache.poi.stress.XSSFFileHandler.handleFile(XSSFFileHandler.java:111)\n        at org.apache.poi.TestAllFiles.testAllFiles(TestAllFiles.java:410)"}, {"count": 13, "tags": [], "bug_id": 61630, "attachment_id": null, "text": "Looks to be due to the left and right xpaths being different lengths\n\nReading spreadsheet/59026.xlsx with class org.apache.poi.stress.XSSFFileHandler\ncompare() called with:\n    leftXpath=/Root/EmployeeInfo/DateOfBirth\n    rightXpath=/Root/EmployeeInfo/Name\nindexOfElementInComplexType() called with:\n    samePath = //Root/EmployeeInfo\n    leftElementName=DateOfBirth\n    rightElementName=Name\n    complexType=null\n\ncompare() called with:\n    leftXpath=/Root/EmployeeInfo/Code\n    rightXpath=/Root/EmployeeInfo/DateOfBirth\nindexOfElementInComplexType() called with:\n    samePath = //Root/EmployeeInfo\n    leftElementName=Code\n    rightElementName=DateOfBirth\n    complexType=null\n\ncompare() called with:\n    leftXpath=/Root/ExpenseItem\n    rightXpath=/Root/EmployeeInfo/Code\nindexOfElementInComplexType() called with:\n    samePath = //Root\n    leftElementName=ExpenseItem\n    rightElementName=EmployeeInfo\n    complexType=null\n\nCaused by: org.xml.sax.SAXParseException; cvc-complex-type.2.4.a: Invalid content was found starting with element 'EmployeeInfo'. One of '{ExpenseItem}' is expected.\nFailed: spreadsheet/59026.xlsx", "id": 201650, "time": "2017-10-25T00:02:46Z", "creator": "onealj@apache.org", "creation_time": "2017-10-25T00:02:46Z", "is_private": false}, {"count": 14, "attachment_id": null, "creator": "onealj@apache.org", "text": "I reverted r1813240. I'm waiting for a patch that passes the integration test suite.", "id": 201651, "time": "2017-10-25T00:04:04Z", "bug_id": 61630, "creation_time": "2017-10-25T00:04:04Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "bug_id": 61630, "is_private": false, "text": "Created attachment 35461\npatch improving performance by using hashmap\n\nPatch which won't break the Integration Tests. I ran 'ant test' and TestAllFiles.java in Eclipse.", "id": 201665, "time": "2017-10-25T10:55:13Z", "creator": "misc.daniel@stucki.me", "creation_time": "2017-10-25T10:55:13Z", "attachment_id": 35461}, {"count": 16, "tags": [], "bug_id": 61630, "text": "(In reply to Daniel from comment #15)\n> Created attachment 35461 [details]\nApplied in r1813332 without modification. Thank you!", "id": 201675, "attachment_id": null, "creator": "onealj@apache.org", "creation_time": "2017-10-25T18:35:06Z", "time": "2017-10-25T18:35:06Z", "is_private": false}, {"count": 17, "tags": [], "text": "Created attachment 35468\nPatch using correct index for comparing\n\nWhile further investigating the XSSFExportToXML functionality I encountered a bug that i made in the previous patch. \nThis patch corrects that bug.", "attachment_id": 35468, "id": 201689, "creator": "misc.daniel@stucki.me", "time": "2017-10-26T12:58:39Z", "bug_id": 61630, "creation_time": "2017-10-26T12:58:39Z", "is_private": false}, {"count": 18, "tags": [], "creator": "misc.daniel@stucki.me", "text": "Before applying patch 'Patch using correct index for comparing': \n\njava.lang.IllegalArgumentException: Comparison method violates its general contract!\n\tat java.util.TimSort.mergeLo(Unknown Source)\n\tat java.util.TimSort.mergeAt(Unknown Source)\n\tat java.util.TimSort.mergeCollapse(Unknown Source)\n\tat java.util.TimSort.sort(Unknown Source)\n\tat java.util.Arrays.sort(Unknown Source)\n\tat java.util.Vector.sort(Unknown Source)\n\tat org.apache.poi.xssf.extractor.XSSFExportToXml.exportToXML(XSSFExportToXml.java:150)\n\tat org.apache.poi.xssf.extractor.XSSFExportToXml.exportToXML(XSSFExportToXml.java:105)", "id": 201690, "time": "2017-10-26T13:00:51Z", "bug_id": 61630, "creation_time": "2017-10-26T13:00:51Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "text": "(In reply to Daniel from comment #17)\n> Created attachment 35468 [details]\n> Patch using correct index for comparing\nApplied in r1813443 without modification. Thanks for testing!\n\n(In reply to Daniel from comment #18)\n> java.lang.IllegalArgumentException: Comparison method violates its general\n> contract!\nIs there a simplified excel file that you can share that tests for this? This would be good to add into our unit test suite, since XSSFExportToXML has relatively poor test coverage.", "is_private": false, "id": 201697, "creator": "onealj@apache.org", "time": "2017-10-26T18:10:41Z", "bug_id": 61630, "creation_time": "2017-10-26T18:10:41Z", "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 61630, "attachment_id": null, "text": "Closing this one for now, it does not look like we will get more test-files here for now.", "id": 202946, "time": "2017-12-28T13:52:23Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-12-28T13:52:23Z", "is_private": false}]
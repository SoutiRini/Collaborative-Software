[{"count": 0, "tags": [], "creator": "jamie@white-mountain.org", "text": "I've noticed that Tomcat won't recompile a JSP file if the date stamp is changed\nto go back in time. This may seem like a strange case, but if you check an older\ncopy of a JSP page out of version control, it's different, and needs to be\nrecompiled. The assumption that all changes to a file involve a newer file\ndatestamp is an invalid one.\n\nI think I found the code that makes this decision, in\norg.apache.jasper.compiler.Compiler, in the isOutDated(boolean) method. The\ncondition is\n        if (targetLastModified < jspRealLastModified)\nbut it should be\n        if (targetLastModified != jspRealLastModified)\nin my opinion.\n\nAfter all, the logic should be that the file has changed, not that it's newer. I\ndon't think it's reasonable to expect that Jasper check the size and do an MD5\nchecksum to *really* see if the file has changed. :)\n\nObviously the workaround is to just to \"touch\" the file but this adds a lot of\noverhead (and one more thing to remember), compared to changing a > to a !=.", "id": 70653, "time": "2005-02-08T22:50:23Z", "bug_id": 33453, "creation_time": "2005-02-08T22:50:23Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "yoavs@computer.org", "is_private": false, "count": 1, "id": 70654, "time": "2005-02-08T22:55:06Z", "bug_id": 33453, "creation_time": "2005-02-08T22:55:06Z", "text": "Changes to a file that make the change timestamp older instead of newer seems \nlike a special (if not outright wrong) use-case.  I'm not sure Tomcat should \nworry about this at all."}, {"count": 2, "tags": [], "bug_id": 33453, "text": "(In reply to comment #1)\n> Changes to a file that make the change timestamp older instead of newer seems \n> like a special (if not outright wrong) use-case.\n\nI don't agree that using version control is a special or wrong use case. In\nfact, I think the opposite is true.\n\nExample:\n1) Check out a JSP file from VC and deploy it where Tomcat can see it\n2) Access the JSP file via a web browser, so it gets compiled\n3) Change it locally, deploy the changed version (newer timestamp)\n4) Access it via a web browser; Tomcat correctly shows the updated version.\n5) Revert to an older version from VC and deploy that.\n6) Access it via a web browser; Tomcat ignores the changes and shows the output\nof a nonexistent JSP page\n\n\n", "id": 70657, "time": "2005-02-08T23:03:23Z", "creator": "jamie@white-mountain.org", "creation_time": "2005-02-08T23:03:23Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "funkman@joedog.org", "is_private": false, "count": 3, "id": 70667, "time": "2005-02-09T00:04:43Z", "bug_id": 33453, "creation_time": "2005-02-09T00:04:43Z", "text": "This is an enhancement at best. (That I would be -0 to)"}, {"count": 4, "tags": [], "bug_id": 33453, "text": "Although not allowed to vote I have an opinion: The dynamic update feature for\nJSPs comes from the need to dynamically manage content without a heavy weight\nadministrative action.\n\nBut every now and then one has to roll back a change. With static content you\nwould just put back the original files. It would be very nice, if it would work\nthe same way with JSPs, especially because that's unsually the unplanned case\n(roll back) where you need to have a simple procedure.\n\nI know, you could touch the old file. Myself I always tell Sysadmins to make\nbackup copies and roll back file changes with \"cp -p\", so that the files keep\ntheir original timestamp, which is a nice low-level approximation of checksums.\nAny higher level tool (like CVS) will most liekely also roll back including file\ntimestamps.\n\nThere seems to be very little risk in the change and some not neglectable benefit.", "id": 70671, "time": "2005-02-09T00:46:40Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2005-02-09T00:46:40Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "Please test this *really* well. Also, you should test with a similar change made\nto the dependent files near the end of the isOutDated method (otherwise, touch\nwould still be required in some cases).", "id": 70673, "time": "2005-02-09T01:02:39Z", "bug_id": 33453, "creation_time": "2005-02-09T01:02:39Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "count": 6, "id": 70685, "time": "2005-02-09T02:03:12Z", "bug_id": 33453, "creation_time": "2005-02-09T02:03:12Z", "text": "Thanks for your hint.\n\nI do like the use case, but I should have thought better about the\nimplementation suggestion of Jamie. His idea to just compare for timestamps for\nnot being equal will not work!\n\nIn most cases the timestamps of the class files will of course be younger than\nthe source file (source file has some old installation date but class file is\nonly generated on first access). So this change would make the compiler compile\non every test :(\n\nIt would only work by saving the last JSP timestamp for any JSP and then\ncomparing to the saved value insted of comparing to the timestamp of the\ngenerated files. I leave it up to Jamie to suggest a working patch - I don't knw\nenough about Jasper details.\n"}, {"count": 7, "tags": [], "bug_id": 33453, "text": "Fair enough; that's not the place to make that change. The servlet .class or\n.java file will be slightly newer than the JSP file. It's the JSP file's date\nthat should be compared to the cached last-modified time, regardless of how many\nms it took to get around to generating and compiling the actual servlet.\n\n", "id": 70686, "time": "2005-02-09T04:03:03Z", "creator": "jamie@white-mountain.org", "creation_time": "2005-02-09T04:03:03Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "yoavs@computer.org", "is_private": false, "text": "Feel free to reopen this when you have a patch ready for us to evaluate -- \nlooking forward to it.", "id": 71186, "time": "2005-02-18T15:08:45Z", "bug_id": 33453, "creation_time": "2005-02-18T15:08:45Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "The .jsp file date stamp doesn't have to go back in time for the isOutDated\ncheck to fail, it can and does fail in a more normal usage pattern.\nHere is a scenario that shows the problem:\n- I deploy version 1, the .jsp has time1\n- I make version 2 of the .jsp at time2\n- Visitor visits the site, and the .jsp is compiled at time3\n- I deploy version2\n- isOutDated returns false as time3 > time2\n\nWould setting the date stamp of the .java and .class files to the date stamp of\nthe .jsp file, and changing the comparison from < to != in the isOutDated check\nfix the problem sufficiently?  Or are there negative side effects I haven't\nthought of?\n\nI am working on patching my Tomcat to do exactly as above, I would be happy to\ngive it to someone for evaluation when its ready.  \n", "id": 80293, "time": "2005-09-22T01:15:02Z", "bug_id": 33453, "creation_time": "2005-09-22T01:15:02Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "(In reply to comment #9)\n> The .jsp file date stamp doesn't have to go back in time for the isOutDated\n> check to fail, it can and does fail in a more normal usage pattern.\n> Here is a scenario that shows the problem:\n> - I deploy version 1, the .jsp has time1\n> - I make version 2 of the .jsp at time2\n> - Visitor visits the site, and the .jsp is compiled at time3\n> - I deploy version2\n> - isOutDated returns false as time3 > time2\n> \n> Would setting the date stamp of the .java and .class files to the date stamp of\n> the .jsp file, and changing the comparison from < to != in the isOutDated check\n> fix the problem sufficiently?  Or are there negative side effects I haven't\n> thought of?\n> \n> I am working on patching my Tomcat to do exactly as above, I would be happy to\n> give it to someone for evaluation when its ready.  \n\nAs looked into in comment #6, this is not doable easily, which makes the few use\ncases which could benefit from this not worth it. Please try to read the report\nnext time.\n", "id": 80307, "time": "2005-09-22T07:59:47Z", "creator": "remm@apache.org", "creation_time": "2005-09-22T07:59:47Z", "is_private": false}, {"count": 11, "tags": [], "creator": "jleech@virtela.net", "text": "Remy,\nWith all due respect I did read the report fully and I believe the\nrecommendation I made addressed comment #6.  If you feel my recommendation isn't\nsufficient, please state why.\nThe other point in my first comment was that this bug can manifest itself in\nways more common than the original report, in fact that's why my colleague and I\nfound it.  \nI have patched and tested my local Tomcat, and am attaching the two files I\nmodified for review.\n\n(In reply to comment #10)\n> (In reply to comment #9)\n> > The .jsp file date stamp doesn't have to go back in time for the isOutDated\n> > check to fail, it can and does fail in a more normal usage pattern.\n> > Here is a scenario that shows the problem:\n> > - I deploy version 1, the .jsp has time1\n> > - I make version 2 of the .jsp at time2\n> > - Visitor visits the site, and the .jsp is compiled at time3\n> > - I deploy version2\n> > - isOutDated returns false as time3 > time2\n> > \n> > Would setting the date stamp of the .java and .class files to the date stamp of\n> > the .jsp file, and changing the comparison from < to != in the isOutDated check\n> > fix the problem sufficiently?  Or are there negative side effects I haven't\n> > thought of?\n> > \n> > I am working on patching my Tomcat to do exactly as above, I would be happy to\n> > give it to someone for evaluation when its ready.  \n> \n> As looked into in comment #6, this is not doable easily, which makes the few use\n> cases which could benefit from this not worth it. Please try to read the report\n> next time.\n> \n\n", "id": 80328, "time": "2005-09-22T17:32:57Z", "bug_id": 33453, "creation_time": "2005-09-22T17:32:57Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "Created attachment 16489\nChanges to Compiler.java and JspCompilationContext.java to fix bug 33453\n\nModified Compiler.java isOutDated() method to use != instead of > for datestamp\ncomparison.\nModified JspCompilationContext.java compile() method to set the datestamp of\nthe generated .java and .class files to the datestamp of the source .jsp.", "id": 80329, "time": "2005-09-22T17:35:51Z", "bug_id": 33453, "creation_time": "2005-09-22T17:35:51Z", "attachment_id": 16489}, {"attachment_id": null, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "count": 13, "id": 80331, "time": "2005-09-22T18:23:24Z", "bug_id": 33453, "creation_time": "2005-09-22T18:23:24Z", "text": "Remy,\nI will keep re-opening this bug until you take the time to explain to me why I\nam wrong.  Which even you can't, because I'm not."}, {"count": 14, "tags": [], "bug_id": 33453, "text": "Sorry for letting you down, I was having dinner.", "id": 80336, "time": "2005-09-22T20:18:07Z", "creator": "remm@apache.org", "creation_time": "2005-09-22T20:18:07Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jamie@white-mountain.org", "is_private": false, "count": 15, "id": 80339, "time": "2005-09-22T21:05:40Z", "bug_id": 33453, "creation_time": "2005-09-22T21:05:40Z", "text": "Since when is it a good idea to *close* a bug that you can't think of how to fix\noffhand, and don't feel like fixing yourself?\n\nThis behavior is infantile and is an embarassing contradiction to the spirit of\nthe open source development model. And now you're refusing to look at a patch\njust to save face? This is really sad.\n\nI wonder how many other Tomcat bugs exist but were closed because somebody\ndidn't want to think about them or try to resolve them.\n\nMaybe you ought to use the priority and target milestone features instead of\npretending that Tomcat does the right thing because whatever it currently does\ndefines what \"the right thing\" is.\n\nI'm not going to reopen this because I'm not wasting any more time on this\nlittle power game. There are competitors to Tomcat and this is just another\nreason to use them instead."}, {"count": 16, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "Created attachment 16492\nChanges to JspCompilationContext.java\n\nSets the lastModified on the generated .java and .class files to the\nlastModified of the source .jsp", "id": 80340, "time": "2005-09-22T21:45:35Z", "bug_id": 33453, "creation_time": "2005-09-22T21:45:35Z", "attachment_id": 16492}, {"count": 17, "tags": [], "bug_id": 33453, "text": "Created attachment 16493\nChange to Compiler.java\n\nChange the < to != in the isOutDated method.", "id": 80341, "time": "2005-09-22T21:46:45Z", "creator": "jleech@virtela.net", "creation_time": "2005-09-22T21:46:45Z", "is_private": false, "attachment_id": 16493}, {"count": 18, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "As suggested by Rainer, I have submitted my recommended changes in patch form\nfor easier review.\n\nRemy, I was also at lunch so unfortunately I was delayed in re-opening the bug,\nwhich I likewise apologize for.  I accept your apology. I am considering\ncreating a script to automate my re-opening of the bug.  As a peace offering I\nam willing to automate your part, automatically changing the status to RESOLVED\nWONTFIX, just send me your bugzilla login and password.\n\nBy the way, if you bothered to take the time to think about the problem, you\nwould realize as I have that the current behavior is very broken.  As I have\nstated before, not just for the original use case in the bug report, it affects\nevery .jsp modification, without moving the timestamp backward whatsoever.  This\nbug affects everyone, period.\n ", "id": 80342, "time": "2005-09-22T22:00:30Z", "bug_id": 33453, "creation_time": "2005-09-22T22:00:30Z", "attachment_id": null}, {"count": 19, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "My instinct is that changing the true timestamp of generated files is going to\ncause other problems. I am very uneasy with a solution that means what a user\nsees (in terms of timestamps) isn't going to be what actually happened.\n\nIt is also worth having a look at bug 23406. In that case timing resolutions to\nthe nearest second were not sufficient to resolve the issue. Any patch for this\nissue should also address the issue in 23406.\n\nMy preference would be for a patch that recorded, for each JSP, somthing that is\nguaranteed to change for all of the related use cases. Timestamp + file size\nshould be OK, MD5 certainly would be.\n\nMy general unease about changing file timestamps hasn't got to the point where I\nwould -1 this patch but I haven't had time to reflect on this yet.\n\nIn summary:\n- I agree this is a problem\n- I agree the right solution isn't going to be easy\n- I think we need a more robust solution that the current patch.", "id": 80344, "time": "2005-09-22T23:27:17Z", "bug_id": 33453, "creation_time": "2005-09-22T23:27:17Z", "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 33453, "text": "(In reply to comment #19)\n> In summary:\n> - I agree this is a problem\n\nI disagree.\n\n> - I agree the right solution isn't going to be easy\n\nI do not wish to find any solution to this non issue. The only problem is that\npeople will have to use touch or similar in a few very select situations, which\napparently is too difficult.\n\n> - I think we need a more robust solution that the current patch.\n\nYes, -1 for it. Obviously, anyone is free to waste his time on this trying to\nfind an acceptable solution, but the said solution has better be trivial,\notherwise it will get a -1 from me.", "id": 80345, "attachment_id": null, "creator": "remm@apache.org", "creation_time": "2005-09-22T23:33:40Z", "time": "2005-09-22T23:33:40Z", "is_private": false}, {"count": 21, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "text": "Setting timestamp seems not a clean solution to me. API doc says, hat the time\nmight be rounded, so even if we try to set the time to the same timestamp we get\nfrom the JSP, the resulting timestamp might differ and not be equal to the\noriginal time (Consider diffrent file system types etc.).\n\nI would also prefer a solution where information about the JSP is saved and\nlater compared. Would JspServletWrapper be the right place to save the original\nJSP modification time?\n\nMD5 would be nice, but then md5 checksum would need to be recalculated on every\nJSP check with unchanged file time, so unfortunately not a rare case. I guess\nthat's too bad for performance.\n\nMaybe timestamp and size would be enough, because both can be retrieved easy and\nefficiently, and if timestamp did not change, but content did change, it is very\nlikely, that the file was in progress of being written to, so at least size\nshould have changed.\n\nIf we agree, that it's worth trying to make a patch to JspServletWrapper, I'll\ntry to submit one tomorrow (not really for 5.5.12).\n\nOne thing remains though: I'm not sure how to handle the case of included JSPs\n(dependecies). Maybe I'll find a solution by digging deeper into Jasper.\n\nOne last word: I had customers having problems with both scenarios: rolling back\nfile changes, but also distributing content with wrong timestamps (future time)\nand in consequence continuous recompilation for several minutes. Not trying to\nassume a simple time model seems to make jasper more robust.", "id": 80346, "time": "2005-09-22T23:43:57Z", "bug_id": 33453, "creation_time": "2005-09-22T23:43:57Z", "attachment_id": null}, {"count": 22, "tags": [], "creator": "remm@apache.org", "text": "(In reply to comment #21)\n> I would also prefer a solution where information about the JSP is saved and\n> later compared. Would JspServletWrapper be the right place to save the original\n> JSP modification time?\n\nNope, people can restart the container.\n\n> MD5 would be nice, but then md5 checksum would need to be recalculated on every\n> JSP check with unchanged file time, so unfortunately not a rare case. I guess\n> that's too bad for performance.\n\nArg MD5.\n\n> Maybe timestamp and size would be enough, because both can be retrieved easy and\n> efficiently, and if timestamp did not change, but content did change, it is very\n> likely, that the file was in progress of being written to, so at least size\n> should have changed.\n\nThis is simple, and maybe acceptable, but would make the cost of checking for\nrecompilation (even) more expensive than it is right now.\n\n> One last word: I had customers having problems with both scenarios: rolling back\n> file changes, but also distributing content with wrong timestamps (future time)\n> and in consequence continuous recompilation for several minutes. Not trying to\n> assume a simple time model seems to make jasper more robust.\n\nOn access compilation and its friend the development mode - which you are using\nor you would not have this \"issue\" - should not be used in production (the only\nreason why it is not as bad as it used to be is that I tweaked it do do only one\ncheck at most per page per time interval - obviously if there are 100 pages, my\ntrick will not work that well).", "id": 80348, "time": "2005-09-23T00:13:14Z", "bug_id": 33453, "creation_time": "2005-09-23T00:13:14Z", "is_private": false, "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "You disagree because you don't fully understand the problem.  If someone first\nvisits your .jsp after your modification, but before redeployment, you will be\nhit by this bug.  You will wonder why your change didn't take effect.  It is not\nnecessary for the timestamp to move backwards.  You don't control when your .jsp\nis accessed.  As your development/test servers will see different access than\nyour production, you will encounter a production bug that you didn't see in your\nother environments.  Or if you are load balanced you will encounter the bug on\none machine but not another.  Good luck debugging that when it happens to you.\n\nUsing touch is not difficult, just add it to the documentation for JBoss and\nevery other web server that to hot deploy, do the following:  hot deploy, find\nthe tmp directory where the war is unpacked, touch every .jsp file that changed.\n   And do that atomically so that noone can visit the .jsp inbetween.\n\nThe jasper code as is fails badly, my fix is trivial, is an improvement, but\nstill not 100% correct and has the side effect of changing a couple timestamps.\n The only place I'm aware of in Jasper that uses those timestamps is the broken\nisOutDated logic.  \n\nMy fix doesn't handle dependencies correctly, and there is still the possibility\nthe .jsp is visited in the same second / minute / whatever the OS granularity is\nas the modification.  Another side effect of my fix is that every .jsp will be\nrecompiled once after the fix is applied.\n\nTimestamp rounding by the filesystem is not an issue, the timestamp of the .jsp\nwill be rounded the same way as the .class and .java files.  Every OS will round\ntimestamps in an internally consistent manner.\n\nIf changing the timestamps of the .java and .class files is still deemed\nverboten, then I suggest copying the .jsp to the same temporary directory that\nthe .java and .class files are generated in, and preserving its timestamp.  Then\n timestamp, filesize, md5, even the exact contents of the file can be compared.\n\nRemy, I am using JBoss4.0.2, how should I be deploying .jsps to production to\navoid this issue?", "id": 80349, "time": "2005-09-23T00:32:10Z", "creator": "jleech@virtela.net", "creation_time": "2005-09-23T00:32:10Z", "is_private": false}, {"count": 24, "tags": [], "creator": "scottjoh@us.ibm.com", "text": "For what it's worth:\nA few years ago we implemented the timestamp approach to this issue in the\nWebSphere Application Server JSP container at the request of a small number of\ncustomers - for whom it was critical.  A generated classfiles is set to the\ntimestamp of the source JSP file.  The classfile is considered to be outdated\nwhen the two timestamps do not match.  File size is not part of the equation.\nTag files are handled the same way.\nThe timestamp disconnect :) of classfiles vs. their actual compilation time\nrarely causes confusion among customers; it's a non-issue. We write compilation\ntime/date and other information into the generated .java file, in a comment, so\nany confusion that might occur can be easily cleared up.\nThe timestamp != strategy has worked well on Versions 4 through 6, on all\nplatforms. Dependency tracking (static includes, TLDs, tag files) is easily\nmanaged. The race condition described in bug 23406 has never been reported. \nTimestamp rounding has never been an issue.\nGoogle for \"websphere jsp timestamp\" and you'll find some info about the\nimplementation.\nSome things to consider if you all decide it's an appropriate change for Tomcat\n(this stuff is all documented and easily found on the web):\nWhen serving JSP sources from JARs, we use the timestamp of the JAR for the\noutdated check.\nAny expansion of WARs or other compressed artifacts with precompiled JSP classes\nmust maintain timestamps (doh).\nThere *will* be first-time recompilation cost to Tomcat users if this is\nimplemented, as Jonathan mentioned.  Some won't like it.  \nKeeping data only in a runtime artifact like the servletwrapper won't work, as\nRemy stated.\n  \n\n", "id": 80350, "time": "2005-09-23T01:01:06Z", "bug_id": 33453, "creation_time": "2005-09-23T01:01:06Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 33453, "text": "Another thing that currently compunds this issue is the fact that the zip file\nformat used for .war files ignores timezone on datestamps.  \n\nSo for example, my file times are mountain standard and my server is in GMT.  If\nI make a change to the .jsp after it is accessed on the server, unless it is 7\nor 8 hours after, it won't take effect.  And if the time change is in the\nreverse direction, the .jsp will be recompiled continuously for the duration of\nthe difference.", "id": 80393, "time": "2005-09-23T19:26:14Z", "creator": "jleech@virtela.net", "creation_time": "2005-09-23T19:26:14Z", "is_private": false, "attachment_id": null}, {"count": 26, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "I took my Tomcat out of development mode, and verified this issue exists there\nas well.  development=false uses the same, broken isOutDated check.\n\n> On access compilation and its friend the development mode - which you are using\n> or you would not have this \"issue\" - should not be used in production ", "id": 80402, "time": "2005-09-23T22:19:25Z", "bug_id": 33453, "creation_time": "2005-09-23T22:19:25Z", "attachment_id": null}, {"count": 27, "tags": [], "creator": "tom@squeat.com", "is_private": false, "text": "> On access compilation and its friend the development mode - which you are using\n> or you would not have this \"issue\" - should not be used in production\n\nBy \"access compilation\" are you referring to the development=\"true\" mode which causes recompilation \non every access?\n\nWe rely on our JSP pages to be compiled when the date changes and the only *reliable* way to do this is \nto touch *all* JSP files whenever we change something.   I suspect it is because of the problem Jonathon \nhas pointed out.  Unfortunately, this means the webapp is very slow after each deployment.  If this \nproblem won't be fixed, what is the recommended way to avoid recompiling all pages in a production \nenvironment?", "id": 80772, "time": "2005-10-05T03:05:01Z", "bug_id": 33453, "creation_time": "2005-10-05T03:05:01Z", "attachment_id": null}, {"attachment_id": 16599, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "count": 28, "id": 80804, "time": "2005-10-05T17:16:56Z", "bug_id": 33453, "creation_time": "2005-10-05T17:16:56Z", "text": "Created attachment 16599\nrebuilt jasper-compiler.jar\n\nHere is a rebuilt jasper-compiler.jar that incorporates my proposed patch.  For\nanyone who needs a fix and doesn't want to download, patch, and rebuild."}, {"count": 29, "tags": [], "creator": "tom@squeat.com", "is_private": false, "text": "We got bit by this bug again today!   How can I impress on the developers the seriousness of this issue?\n\nWe need to touch every JSP file when we deploy a webapp because we cannot trust that Tomcat will \nrecompile the things that need to be.   This causes large delays to the end users that are unlucky enough \nto hit the website first.\n\nIf you revert your JSP files to an older branch, you also have to remember to touch them (many CM \nsystems revert the dates to the older version which still pass the < comparison).\n\nI think Jonathon's fix will address every realistic scenario.    Please use his patch!\n", "id": 81417, "time": "2005-10-19T22:59:40Z", "bug_id": 33453, "creation_time": "2005-10-19T22:59:40Z", "attachment_id": null}, {"count": 30, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "(In reply to comment #28)\n> Created an attachment (id=16599) [edit]\n> rebuilt jasper-compiler.jar\n> \n> Here is a rebuilt jasper-compiler.jar that incorporates my proposed patch.  For\n> anyone who needs a fix and doesn't want to download, patch, and rebuild.\n\nHello Jonathan,\n\ni've tried tu use your jasper-compiler.jar into TC 5.5.12, because we have a\nproblem to make Tomcat reload and compile modified JSPs on fly, but an exception\nis thrown when Jasper try to compile the JSP.\n\ni haven't try to patch an rebuilt yet.\n\nHere is the root cause of the stack trace, it seem like an import from an\nEclipse library :\n\njava.lang.NoSuchMethodError:\norg.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer.<init>(Lorg/eclipse/jdt/internal/compiler/env/IBinaryType;)V\n\torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:214)\n\torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:183)\n\torg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:119)\n\torg.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:178)\n\torg.eclipse.jdt.internal.compiler.lookup.Scope.getPackage(Scope.java:2111)\n\torg.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:62)\n\torg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:141)\n\torg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType(TypeReference.java:104)\n\torg.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype(ClassScope.java:1088)\n\torg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:755)\n\torg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:927)\n\torg.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:254)\n\torg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:195)\n\torg.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\n\torg.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\n\torg.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:387)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:288)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:267)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:255)\n\torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:557)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)", "id": 82566, "time": "2005-11-16T15:42:43Z", "creator": "fabien.toral@c-s.fr", "creation_time": "2005-11-16T15:42:43Z", "is_private": false}, {"count": 31, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "Fabien,\n\nThe jasper-compiler.jar I built was against 5.5.9, I think that's the problem. \nIt should work just fine if you patch and rebuild.\n\n-Jonathan\n\n(In reply to comment #30)\n> (In reply to comment #28)\n> > Created an attachment (id=16599) [edit] [edit]\n> > rebuilt jasper-compiler.jar\n> > \n> > Here is a rebuilt jasper-compiler.jar that incorporates my proposed patch.  For\n> > anyone who needs a fix and doesn't want to download, patch, and rebuild.\n> \n> Hello Jonathan,\n> \n> i've tried tu use your jasper-compiler.jar into TC 5.5.12, because we have a\n> problem to make Tomcat reload and compile modified JSPs on fly, but an exception\n> is thrown when Jasper try to compile the JSP.\n> \n> i haven't try to patch an rebuilt yet.\n> \n> Here is the root cause of the stack trace, it seem like an import from an\n> Eclipse library :\n> \n> java.lang.NoSuchMethodError:\n>\norg.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer.<init>(Lorg/eclipse/jdt/internal/compiler/env/IBinaryType;)V\n> \torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:214)\n> \torg.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:183)\n> \norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:119)\n> \norg.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:178)\n> \torg.eclipse.jdt.internal.compiler.lookup.Scope.getPackage(Scope.java:2111)\n> \norg.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding(QualifiedTypeReference.java:62)\n> \norg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:141)\n> \norg.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType(TypeReference.java:104)\n> \norg.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype(ClassScope.java:1088)\n> \norg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass(ClassScope.java:755)\n> \norg.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy(ClassScope.java:927)\n> \norg.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:254)\n> \norg.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:195)\n> \torg.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301)\n> \torg.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315)\n> \torg.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:387)\n> \torg.apache.jasper.compiler.Compiler.compile(Compiler.java:288)\n> \torg.apache.jasper.compiler.Compiler.compile(Compiler.java:267)\n> \torg.apache.jasper.compiler.Compiler.compile(Compiler.java:255)\n> \torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:557)\n> \torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293)\n> \torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291)\n> \torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n> \tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\n", "id": 82571, "time": "2005-11-16T17:05:10Z", "creator": "jleech@virtela.net", "creation_time": "2005-11-16T17:05:10Z", "is_private": false}, {"count": 32, "tags": [], "bug_id": 33453, "text": "I think the patch files are backwards (show how to remove the fix) but that doesn't make this bug less \nimportant.   We just got bit by this thing again... every couple of month at my company.   It's time to bite \nthe bullet and make a one-off version.   Is it ever going to be fixed?", "id": 87092, "time": "2006-03-21T23:45:34Z", "creator": "tom@squeat.com", "creation_time": "2006-03-21T23:45:34Z", "is_private": false, "attachment_id": null}, {"count": 33, "tags": [], "bug_id": 33453, "text": "(In reply to comment #32)\nSorry for getting the patch backwards.  Not that it matters, it will probably \nnever be incorporated any way, due to the co-location of a certain person's \nhead with his ass.\nDo the votes matter?  I am the only one voting for this, perhaps if a few more \npeople used their votes it would show up on a list somewhere, causing some \naction to be taken. \nOther than patching Tomcat, here's what I recommend, in order of preference:\n1) Don't use Tomcat.\n2) Don't use JSPs.\n4) Precompile your JSPs as part of your build process.\n", "id": 87093, "time": "2006-03-22T00:22:05Z", "creator": "jleech@virtela.net", "creation_time": "2006-03-22T00:22:05Z", "is_private": false, "attachment_id": null}, {"count": 34, "tags": [], "bug_id": 33453, "text": "Jonathoan, I was about to try using your patch and noticed a problem.   You are using the date of the \nJSP file to stamp the class file but the isOutDated() method is also taking into account the times of the \nincluded JSP files.   This can cause a JSP file to be re-compiled on every hit if it includes a file that has a \nlater date. \n\nFor example, if a.jsp is time-stamped 9:00 and it includes b.jsp which stamped 10:00, then isOutDated\n() will always return true because the time of the included file is greater than 9:00.   Then when you \nassign the earlier time to the class file, this check will fail again the next time around.\n\nI think a better solution is to set the time of the class file to the greatest time of the compiled file AND \nALL of it's dependants.   In the above scenario, the class file would get a time stamp of 10:00 instead of \n9:00 and subsequent checks of isOutDated would return false as expected.   The only problem I can \nforsee is if someone updates the included file, THEN rolls back the original file.   That seems like a very \nobscure case and my solution is still better than the current solution which doesn't account for \nrollbacks at all (and also wouldn't handle the obscure case).\n\nI will attempt a solution but will be on vacation soon so it may be a while before I'm able to post any \npatches. ", "id": 87096, "attachment_id": null, "creator": "tom@squeat.com", "creation_time": "2006-03-22T03:29:40Z", "time": "2006-03-22T03:29:40Z", "is_private": false}, {"count": 35, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "(In reply to comment #34)\nTom,  I see the problem with the dependants;  that is a huge problem with my patch.\n\nI think it is worth solving this problem completely, in a manner similar to the\nway Websphere does (see comment #24 and do the google search).  To do this, it\nis necessary to compare the current and last timestamps of the jsp and all its\ndependants.  Websphere persists this information in the comments of the\ngenerated .java file.\n\nI don't like the idea of putting the timestamps in the comments ala Websphere,\nit will mean making changes in more places, and also I am not a fan of parsing text.\n\nI am thinking along the lines of creating a seperate file which could be as\nsimple as a serialized hashmap containing the URLs as keys and the timestamps as\nvalues.\n\nThoughts?", "id": 87109, "time": "2006-03-22T17:57:54Z", "bug_id": 33453, "creation_time": "2006-03-22T17:57:54Z", "attachment_id": null}, {"count": 36, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "Jonathan, just to clairfy:  WebSphere doesn't store the timestamp information \nin comments - what is stored in comments is informational data that can be \nused to help debug problems.\nThe timestamps used by the outdated checks are stored in the generated \nclassfile as part of the _jspx_dependants List.  If you were to look at the \ngenerated .java source you would see, for example:\n\n  private static String[] _jspx_dependants;\n  static {\n    _jspx_dependants = new String[2];\n    _jspx_dependants[0] = \"/Banner.jsp^1082410708000^Mon Apr 19 17:38:28 EDT \n2004\";\n    _jspx_dependants[1] = \"/Footer.jsp^1077657462000^Tue Feb 24 16:17:42 EST \n2004\";\n  }\n\nThe timestamp simply follows a dependent's path information.\n\nThe data in comments the I referred to in post #24 is more this sort of thing:\n\ne:/mytempdir/x.ear/y.war/WEB-INF/classes/_ibmjsp/_jsp1.java was generated @ \nThu Mar 16 14:03:16 EST 2006\nIBM WebSphere Application Server - ND, 6.1.0.0\n    Build Number: v0611.54\n    Build Date: 3/16/06\n\n********************************************************\nThe JSP engine configuration parameters were set as follows:\n\nclassDebugInfo =              [false]\ndebugEnabled =                [false]\ndeprecation =                 [false]\ncompileWithAssert =           [false]\netc. etc. etc.\n\nHope this helps.\n", "id": 87116, "time": "2006-03-22T18:54:41Z", "creator": "scottjoh@us.ibm.com", "creation_time": "2006-03-22T18:54:41Z", "is_private": false}, {"count": 37, "tags": [], "bug_id": 33453, "text": "(In reply to comment #36)\nScott, thanks! That helps a whole lot.  I hadn't considered storing the\nlastModified times of the dependencies as member data of the servlet.  It is the\nideal place.  In fact, Tomcat already stores the dependency list there.\nI am currently testing a fix which stores the dependant lastModified times\nthere, as well as the lastModified time of the .jsp (rather than modify the\ntimestamp of the .class and .java files).  The comparisons made are all !=\ninstead of > .\nI will post a new patch once I've tested my changes more thorougly.\n\n\n", "id": 87125, "attachment_id": null, "creator": "jleech@virtela.net", "creation_time": "2006-03-23T01:02:34Z", "time": "2006-03-23T01:02:34Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "scottjoh@us.ibm.com", "is_private": false, "count": 38, "id": 87126, "time": "2006-03-23T01:44:36Z", "bug_id": 33453, "creation_time": "2006-03-23T01:44:36Z", "text": "Jonathan, I have one caveat about using the servlet member data for the \nstoring the timestamp of the JSP itself and using it for outdated check \ninstead of using the JSP source and class file timestamps.  The problem is \nthat the servlet class has to be loaded in order to retrieve this data.  \nTherefore, you wouldn't know a servlet class file was outdated until you'd \nalready loaded it once (first request). We decided that this 'lag' was ok for \ndependency checking (which by the way is turned off by default in WebSphere) \nbut did not like this lag for the top-level JSP reloading.  As I said, just a \ncaveat."}, {"count": 39, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "(In reply to comment #38)\nScott, I think I understand your point, but not fully.  Is the lag you refer to\nthe lag of loading the class twice vs. once, in the case of the .jsp being\noutdated and its class not already loaded?  \nAs I understand it, if either the .jsp is not outdated, or the class is already\nloaded, there would be no extra lag.  Is that correct?  I think I might be\nmissing something, or perhaps Tomcat works differently from Websphere.  Or are\nthere situations other than an incoming http request that trigger the outdated\ncheck?", "id": 87129, "time": "2006-03-23T02:59:44Z", "bug_id": 33453, "creation_time": "2006-03-23T02:59:44Z", "attachment_id": null}, {"count": 40, "tags": [], "creator": "scottjoh@us.ibm.com", "is_private": false, "text": "(In reply to comment #39)\nWhat you wrote is totally correct.  I don't want to confuse the issue so I'll \nshut up now.  :)", "id": 87149, "time": "2006-03-23T13:35:29Z", "bug_id": 33453, "creation_time": "2006-03-23T13:35:29Z", "attachment_id": null}, {"attachment_id": 17955, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "count": 41, "id": 87166, "time": "2006-03-23T20:10:54Z", "bug_id": 33453, "creation_time": "2006-03-23T20:10:54Z", "text": "Created attachment 17955\nCompiler.java diff"}, {"count": 42, "tags": [], "bug_id": 33453, "text": "Created attachment 17956\nGenerator.java diff", "id": 87167, "time": "2006-03-23T20:11:23Z", "creator": "jleech@virtela.net", "creation_time": "2006-03-23T20:11:23Z", "is_private": false, "attachment_id": 17956}, {"count": 43, "tags": [], "bug_id": 33453, "attachment_id": 17957, "text": "Created attachment 17957\nJspSourceDependent.java diff", "id": 87168, "time": "2006-03-23T20:11:53Z", "creator": "jleech@virtela.net", "creation_time": "2006-03-23T20:11:53Z", "is_private": false}, {"count": 44, "tags": [], "bug_id": 33453, "text": "Created attachment 17958\nJspServletWrapper.java diff", "id": 87169, "attachment_id": 17958, "creator": "jleech@virtela.net", "creation_time": "2006-03-23T20:12:19Z", "time": "2006-03-23T20:12:19Z", "is_private": false}, {"count": 45, "tags": [], "creator": "jleech@virtela.net", "text": "I uploaded the diffs for the 4 changed files.  This fixes the problem completely\nand addresses any and all concerns brought forth in the comments so far.  What\nhappens next?", "id": 87170, "time": "2006-03-23T20:15:53Z", "bug_id": 33453, "creation_time": "2006-03-23T20:15:53Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "count": 46, "id": 87633, "time": "2006-04-06T18:07:25Z", "bug_id": 33453, "creation_time": "2006-04-06T18:07:25Z", "text": "Anyone?  Bueller?\n"}, {"count": 47, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "http://jira.jboss.com/jira/browse/JBAS-3081?page=all\nJBoss was one of the last standouts, it was relying on Jasper to decide to\nrecompile or not.  No more.  Now everything gets recompiled on every redeploy. \nAt least we can count on the correctness of its behavior now.  \n\nToo bad for the performance that according to some comments here was of such\nparamount concern.  \n\nIts also too bad that even with patches charitably submitted, that bugs can't or\nwon't be fixed in Jasper.\n\n", "id": 88586, "time": "2006-04-27T21:35:34Z", "bug_id": 33453, "creation_time": "2006-04-27T21:35:34Z", "attachment_id": null}, {"count": 48, "tags": [], "bug_id": 33453, "text": "(In reply to comment #47)\n> Its also too bad that even with patches charitably submitted, that bugs can't or\n> won't be fixed in Jasper.\n\nAs I said earlier, I don't think fixing the edge cases is worth adding the\nrelated complexity. It's very simple. As for JBoss \"fixing\" it, Tomcat \"fixes\"\nit too: you simply need to undeploy/redeploy webapps, and/or add some listener\nto clean up the work directory, which is trivial to do. If that's all you want\nto achieve, why did you focus on a complex patch to Jasper ?\n\nBTW, feel free to post more useless rants, esp in conjunction with Gili, I enjoy\nthem :)\n", "id": 88606, "time": "2006-04-28T00:44:54Z", "creator": "remm@apache.org", "creation_time": "2006-04-28T00:44:54Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "count": 49, "id": 88627, "time": "2006-04-28T14:05:26Z", "bug_id": 33453, "creation_time": "2006-04-28T14:05:26Z", "text": "(In reply to comment #48)\n> As I said earlier, I don't think fixing the edge cases is worth adding the\n> related complexity. It's very simple. As for JBoss \"fixing\" it, Tomcat \"fixes\"\n> it too: you simply need to undeploy/redeploy webapps, and/or add some listener\n> to clean up the work directory, which is trivial to do. If that's all you want\n> to achieve, why did you focus on a complex patch to Jasper ?\n\nThe problem isn't isolated to an \"edge\" case, it affects the standard way apps\nare deployed.  Thus the numerous other people who have encountered it.  As for\nmy patch being \"complex\" that's just not true. I added 2 fields to the generated\nservlet class and updated the isOutDated logic to use them.  It took all of an\nhour to code and test.  I can't believe you're asking me why I wanted to fix\nsomething that is broken rather than bandaid it.\n\n"}, {"count": 50, "tags": [], "creator": "mihbor@wp.pl", "text": "> The problem isn't isolated to an \"edge\" case, it affects the standard way apps\n> are deployed.  Thus the numerous other people who have encountered it. \n\nI certainly agree. I encountered this issue multiple times. I took quite some\ntime and flustration to discover this bug. \nThe workaround I currently use is deploying exploded .war contents and setting\nscp not to preserve timestamps, effectively forcing all copied JSP files to be\nrecompiled.\nI think the bug is obviously serious and is definately not isolated to an \"edge\"\ncase. \nI'm glad someone is trying to fix it.", "id": 88785, "time": "2006-05-03T20:54:05Z", "bug_id": 33453, "creation_time": "2006-05-03T20:54:05Z", "is_private": false, "attachment_id": null}, {"count": 51, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "(In reply to comment #50)\n> > The problem isn't isolated to an \"edge\" case, it affects the standard way apps\n> > are deployed.  Thus the numerous other people who have encountered it. \n> \n> I certainly agree. I encountered this issue multiple times. I took quite some\n> time and flustration to discover this bug. \n> The workaround I currently use is deploying exploded .war contents and setting\n> scp not to preserve timestamps, effectively forcing all copied JSP files to be\n> recompiled.\n> I think the bug is obviously serious and is definately not isolated to an \"edge\"\n> case. \n> I'm glad someone is trying to fix it.\n\nI've fixed it, getting the fix incorporated into the codebase appears to be the\nimpossible part.  Feel free to use the code from my patch and give feedback if\nyou find any problems.", "id": 88786, "time": "2006-05-03T21:00:09Z", "bug_id": 33453, "creation_time": "2006-05-03T21:00:09Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "mihbor@wp.pl", "is_private": false, "count": 52, "id": 88854, "time": "2006-05-06T14:04:38Z", "bug_id": 33453, "creation_time": "2006-05-06T14:04:38Z", "text": "(In reply to comment #51)\n> I've fixed it, getting the fix incorporated into the codebase appears to be the\n> impossible part.  Feel free to use the code from my patch and give feedback if\n> you find any problems.\n\nThanks, but it seems we will be migrating to JBoss 4.0.4 when the GA version\ncomes out and it shouldn't be an issue anymore. I'm fortunate enough I don't\nhave to use Tomcat standalone."}, {"attachment_id": null, "tags": [], "creator": "larry_prikockis@natureserve.org", "is_private": false, "count": 53, "id": 89057, "time": "2006-05-11T20:38:26Z", "bug_id": 33453, "creation_time": "2006-05-11T20:38:26Z", "text": "(In reply to comment #51)\n\n> I've fixed it, getting the fix incorporated into the codebase appears to be the\n> impossible part.  Feel free to use the code from my patch and give feedback if\n> you find any problems.\n\nI just wasted a embarrasing amount of time trying to figure out why one of our\ndevelopers was having problems seeing her changes 'live' on the test machine\nafter changing a JSP file.  I'd assumed that since I had Tomcat running in\nDevelopment mode, it was going to recompile the page when it changed.... \n\nI'm glad to see that the seriousness of this bug has been recognized, and a\npatch developed... even if it doesn't seem to have the blessing of some of the\ndevelopers.  The patch certainly saved me a lot of hassle.  Thanks!!"}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 54, "id": 93073, "time": "2006-09-06T01:46:27Z", "bug_id": 33453, "creation_time": "2006-09-06T01:46:27Z", "text": "*** Bug 40420 has been marked as a duplicate of this bug. ***"}, {"count": 55, "tags": [], "creator": "rbodkin+LISTS@gmail.com", "is_private": false, "text": "I think this is a significant problem when you really have different\norganizations building and deploying, e.g., for publicly distributed\napplications. A common timeline would be:\nJanuary - release 1.0 of app\nMarch - JSP in app is updated\nApril - release 1.1 of app frozen for QA\nMay - user downloads and installs 1.0 \nJune - user downloads and installs 1.1\n\nIn this case, Jasper will view the compiled date of the 1.0 JSP as May and view\nit as newer than the change date of the 1.1 JSP. I gather that the \"best\npractice\" for building a web app for use with Tomcat would be to touch all the\nJSP's in your web app in your release process so you minimize the risk (although\nif someone downloads 1.0 after you released 1.1 they can expect a lot of 500\nerrors from NoSuchMethodError)\n\nI believe Jasper really should remove cached JSP's from the work directory when\nan app is undeployed (or redeployed). I think this is common, important, and\nquite different than the rather obscure case of rolling back an older version\nfrom version control. This would also avoid a performance hit in checking out of\ndate on JSP's and wouldn't surprise people (I wouldn't expect JSP's to be cached\nafter redeploying an app, indeed I think it's surprising behavior!)\n\nOne of the users of our Web app just hit this issue today:\nhttp://www.glassbox.com/forum/forum/addpost?parent=235 and with a little\ngoogling you can see others e.g.,\nhttp://mail-archives.apache.org/mod_mbox/tomcat-users/200512.mbox/%3C43A0096A.3060200@mkodo.com%3E\n\n", "id": 93118, "time": "2006-09-06T23:51:59Z", "bug_id": 33453, "creation_time": "2006-09-06T23:51:59Z", "attachment_id": null}, {"count": 56, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "text": "For the next release of your software, I would register an error handler that \ncatches this error, and sends an email with the contents to the tomcat-dev \nmailing list.\n\n(In reply to comment #55)\n> if someone downloads 1.0 after you released 1.1 they can expect a lot of 500\n> errors from NoSuchMethodError)\n\n", "id": 93119, "time": "2006-09-06T23:59:18Z", "bug_id": 33453, "creation_time": "2006-09-06T23:59:18Z", "attachment_id": null}, {"count": 57, "tags": [], "bug_id": 33453, "text": "Why not just distribute your app with pre-compilied JSPs and avoid all these\nproblems?", "id": 93120, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2006-09-07T00:11:13Z", "time": "2006-09-07T00:11:13Z", "is_private": false}, {"count": 58, "tags": [], "creator": "rbodkin+LISTS@gmail.com", "is_private": false, "text": "Our app needs to be portable to a variety of Servlet containers (and for\ndifferent versions), so we can't precompile for any one server.", "id": 93121, "time": "2006-09-07T00:18:52Z", "bug_id": 33453, "creation_time": "2006-09-07T00:18:52Z", "attachment_id": null}, {"count": 59, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "(In reply to comment #55)\n> I believe Jasper really should remove cached JSP's from the work directory when\n> an app is undeployed (or redeployed). I think this is common, important, and\n> quite different than the rather obscure case of rolling back an older version\n> from version control. This would also avoid a performance hit in checking out of\n> date on JSP's and wouldn't surprise people (I wouldn't expect JSP's to be cached\n> after redeploying an app, indeed I think it's surprising behavior!)\n\nThis is a very good point that I would agree with.  It is not upto any external\ntools to effectively manage the \"work/\" directory for Tomcat.  This directory\nshould be self-managing and be implemented on the side of caution, the caching\nof JSP pages is a benifit not a right.\n\nI think the following new rule would work:\n * The work/ directory is only cleaned of unused contexts when a web-app is\nundeployed (while the container is running, aka hot-undeploy) or found to no\nlonger exist after all configuration parsing has been done at container startup.\n\nAlthough it is somewhat difficult to manage web-app upgrades taking place when\nthe container is shutdown.  Which I'd say was a pretty common event.\n\nOne way around that situation would be to detect a web-app update has taken\nplace.  The simplest for TC (and the sys-admin) way I can think of, is for TC to\nremember the exact timestamp on the WEB-INF/web.xml file which the pre-compiled\npages relate to.  Make it create an empty file and touch up the timestamp to\nmatch the real web.xml as work/web.xml.timestamp.\n\nThe sys-admin must then only touch the WEB-INF/web.xml (when he upgrades his\nweb-app while the container is stopped).  When TC boots up again it detects the\ntimestamp is not equal and presumes the web-app was changed also, this causes a\nflush of the work/ for that context.\n\nThe idea being this approach would be a whole lot simpler than re-validating the\nentire work/ cache from the source JSPs during all webapp deployments.\n\n\nIt would be nice to have re-validation maybe that could be implemented using\nmagic .java file comments in the japser output \"// Jasper-JSP-Prerequisite:\nfoobar/test.jsp 72383828372000\" where both the top level source and all included\nfragments are listed with their Epoch millis for timestamp.  Then the process\nwould be to recurse the work/org/apache/ tree, reading all the .java and\nperforming a simple stat() on the source files.  This could be done in the\nbackground with live requests taking priority to be checked on first access\nafter deployment.\n\nWhen work/* file that have been sucessfully revalidated (or deleted/recreated)\nhave their timestamp updated, so that it is possible for any thread to know if a\nre-validation is required on a page, since the timestamp will be older than the\ndeployment time of the web-app context.\n\nThis would have no longterm JVM impact that loading classes might have, we can\nput what we like in the .java file and access it easily.\n", "id": 93129, "time": "2006-09-07T05:54:51Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-09-07T05:54:51Z", "is_private": false}, {"count": 60, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "Daryl,  see comments #35 - #45 and the 4 patch files I posted in the \nAttachment section.  The patch I submitted in March completely fixes this \nproblem in a manner similar to your suggestion.\n\nThe patch works by storing the timestamp of the .jsp and all its \ndependent .jsps as member data in the compiled servlet.  The isOutDated() \nmethod was modified to compare the timestamp of the .jsp against the added \ntimestamps using != instead of >.\n\n(In reply to comment #59)\n> It would be nice to have re-validation maybe that could be implemented using\n> magic .java file comments in the japser output \"// Jasper-JSP-Prerequisite:\n> foobar/test.jsp 72383828372000\" where both the top level source and all \nincluded\n> fragments are listed with their Epoch millis for timestamp.  Then the process\n> would be to recurse the work/org/apache/ tree, reading all the .java and\n> performing a simple stat() on the source files.  This could be done in the\n> background with live requests taking priority to be checked on first access\n> after deployment.\n", "id": 93158, "time": "2006-09-07T15:18:15Z", "creator": "jleech@virtela.net", "creation_time": "2006-09-07T15:18:15Z", "is_private": false}, {"count": 61, "tags": [], "bug_id": 33453, "text": "What are the side-effects of revalidating the entire tree ?  Does it cause all\nclass files to be loaded or can the revalidation occur without having any\nlasting overheads (like increased memory consumption and slower revalidation\nprocess due to parsing of more complex .class data).\n\nMy method only seeks to delete stale work/ .java and .class files during web-app\ndeployment.\n\nIt does not seek to recreate and load them, that can be left to moment of first\nuse (although it would natually lead on to facilitating an automatic recreation\n function).\n\nBy opening the .java file and looking for a magic comment and closing the file\nagain, there is no lasting overhead.  Since we never loaded the class.  Which is\njust great for a revalidation pass during deployment.\n\nI'm a believer there should be a configuration mode of TC which is watertight,\nsuch that no amount of abuse will make the things fail in a way that bites you.\n The work/ directory is a nice speedup but the implementation is more a hack\nthan an optimization, since it clearly breaks down in situations you wouldn't\nexpect.\n\nThis bug/problem hits developers a lot more than production upgrades.", "id": 93181, "time": "2006-09-08T05:29:02Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-09-08T05:29:02Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jleech@virtela.net", "is_private": false, "count": 62, "id": 93235, "time": "2006-09-08T15:43:30Z", "bug_id": 33453, "creation_time": "2006-09-08T15:43:30Z", "text": "My patch doesn't change the overall strategy for invoking the isOutDated() \ncheck, as you are suggesting. The isOutDated() check does load the class, as \nit did prior to my patch. Revalidating the entire tree would cause all the \nclass files to be loaded, which would be bad. However, with the isOutDated() \nmethod fixed, I see no reason to revalidate the entire tree. \n\n(In reply to comment #61)\n> What are the side-effects of revalidating the entire tree ?  Does it cause \nall\n> class files to be loaded or can the revalidation occur without having any\n> lasting overheads (like increased memory consumption and slower revalidation\n> process due to parsing of more complex .class data).\n> My method only seeks to delete stale work/ .java and .class files during web-\napp\n> deployment.\n> It does not seek to recreate and load them, that can be left to moment of \nfirst\n> use (although it would natually lead on to facilitating an automatic \nrecreation\n>  function).\n> By opening the .java file and looking for a magic comment and closing the \nfile\n> again, there is no lasting overhead.  Since we never loaded the class.  \nWhich is\n> just great for a revalidation pass during deployment.\n> I'm a believer there should be a configuration mode of TC which is \nwatertight,\n> such that no amount of abuse will make the things fail in a way that bites \nyou.\n>  The work/ directory is a nice speedup but the implementation is more a hack\n> than an optimization, since it clearly breaks down in situations you wouldn't\n> expect.\n> This bug/problem hits developers a lot more than production upgrades.\n\n"}, {"count": 63, "tags": [], "bug_id": 33453, "attachment_id": null, "text": "(In reply to comment #62)\nDarryl's last comments aside on changing the management of the entire work tree,\nI want to ask Jonathan and anyone who's used his patches: have they been stable\nand OK?  Have there been any modifications needed to them?  If not, i.e. if\nthey've been stable, I'm tempted to add them to the 5.5 tree.\n\n", "id": 97357, "time": "2006-12-26T17:13:24Z", "creator": "yoavs@computer.org", "creation_time": "2006-12-26T17:13:24Z", "is_private": false}, {"count": 64, "tags": [], "bug_id": 33453, "text": "I haven't had to make any additional changes to the code in the patch.  I have \nonly used the patch in conjunction with JBoss 4.0.2.  I have been using the \ncode in development and production since I posted it.\n\n(In reply to comment #63)\n> (In reply to comment #62)\n> Darryl's last comments aside on changing the management of the entire work \ntree,\n> I want to ask Jonathan and anyone who's used his patches: have they been \nstable\n> and OK?  Have there been any modifications needed to them?  If not, i.e. if\n> they've been stable, I'm tempted to add them to the 5.5 tree.\n\n", "id": 97404, "time": "2006-12-28T06:42:57Z", "creator": "jleech@virtela.net", "creation_time": "2006-12-28T06:42:57Z", "is_private": false, "attachment_id": null}, {"count": 65, "tags": [], "bug_id": 33453, "text": "I just got bit by this bug and lost a good part of my day trying to locate it.  I have tomcat on my development machine (winXP) configured to UTC and the machine itself is set for PST. \n\nHere's the procedure\n\n * make a change to my source jsp\n * war it up\n * stop tomcat\n * delete the existing war and webapps folder\n * copy the new war into the webapps dir\n * start tomcat\n\nThe problem:\nTomcat will expand the war however the last modified date on the jsp file will be adjusted (incorrectly?) to 8 hrs earlier.  As the previous change was compiled less than 8hrs ago the jsp is not recompiled and the outdated .java and .class files remain in the work\\Catalina\\localhost directory.  The result is my changes are not reflected.\n\nFor now I will delete the work directory at the same time I delete the old war file.  This way at least, as a developer, I know that what tomcat is serving is my most recent code.", "id": 119694, "time": "2008-08-11T14:00:43Z", "creator": "apachebug.naver@dfgh.net", "creation_time": "2008-08-11T14:00:43Z", "is_private": false, "attachment_id": null}, {"count": 66, "tags": [], "bug_id": 33453, "text": "*** Bug 15417 has been marked as a duplicate of this bug. ***", "id": 142813, "time": "2010-12-17T09:14:37Z", "creator": "markt@apache.org", "creation_time": "2010-12-17T09:14:37Z", "is_private": false, "attachment_id": null}, {"count": 67, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Created attachment 27040\nProposed patch for Tomcat 7\n\nHaving spent a little time on this, I am attaching a proposed patch for Tomcat 7. The patch breaks binary compatibility for compiled JSPs which I am not at all comfortable about. I have some ideas for a solution to that which I will be discussing on the dev list.\n\nIf this issue is addressed in Tomcat 7, I don't see the fix being back-ported to earlier versions.", "id": 146478, "time": "2011-05-20T16:26:13Z", "bug_id": 33453, "creation_time": "2011-05-20T16:26:13Z", "attachment_id": 27040}, {"count": 68, "tags": [], "bug_id": 33453, "text": "Feedback on proposed TC7 patch:\nhttp://tomcat.markmail.org/thread/mbjdpr4bvw6gzx62", "id": 146720, "time": "2011-05-28T18:55:51Z", "creator": "markt@apache.org", "creation_time": "2011-05-28T18:55:51Z", "is_private": false, "attachment_id": null}, {"count": 69, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "This has been fixed in 7.0.x and will be included in 7.0.17 onwards.\n\nThe fix was fairly invasive so it will not be back-ported to 6.0.x or 5.5.x.", "id": 147287, "time": "2011-06-20T18:03:09Z", "bug_id": 33453, "creation_time": "2011-06-20T18:03:09Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Created attachment 28131\nThe patch with my workaround\n\nI have a .doc file which is OK from the MSOffice POV\n\njava.nio.BufferUnderflowException\n at java.nio.HeapByteBuffer.get(HeapByteBuffer.java:127)\n at org.apache.poi.poifs.property.NPropertyTable.buildProperties(NPropertyTable.java:93)\n at org.apache.poi.poifs.property.NPropertyTable.<init>(NPropertyTable.java:62)\n at org.apache.poi.poifs.filesystem.NPOIFSFileSystem.readCoreContents(NPOIFSFileSystem.java:379)\n at org.apache.poi.poifs.filesystem.NPOIFSFileSystem.<init>(NPOIFSFileSystem.java:293)\n\n\nThe BFFValidator returns \n\n<BFFValidation \n  path=\"twenty-tips.doc\" \n  datetime=\"01/10/12 16:07:25\" \n  result=\"ERROR 0x80030109. Docfile zostal uszkodzony.  \" \n  reason=\"The Microsoft Office Binary File Format Validator encountered an error reading the file you specified.\">\n</BFFValidation>\n\nIn English it's \"Docfile has been corrupted\". \n\nI came up with a workaround. In NPropertyTable.buildProperties, instead of \n\ndata = new byte[bigBlockSize.getBigBlockSize()];\n\nI would put:\n\nint dataSize = bigBlockSize.getBigBlockSize() <= bb.remaining() ?\n                bigBlockSize.getBigBlockSize() : bb.remaining();\n             data = new byte[dataSize];\n\nSo get the big block size only if it's less than or equal to the number of remaining bytes. Otherwise, just get the remaining bytes.\n\nThe file is obviously corrupted, yet it opens up just fine in Word and I can get fulltext and metadata with the old POIFSFileSystem. This problem popped up in my regression tests, when I switched to NPOIFSFileSystem. It seems like a safe workaround to me. For correct files, it won't change anything, for other corrupted files it will probably move the error to somewhere within PropertyFactory.convertToProperties. For my file, it's the difference between life and death.\n\nUnfortunately I can't share the file.", "attachment_id": 28131, "id": 152655, "creator": "antoni.mylka@gmail.com", "time": "2012-01-10T15:18:17Z", "bug_id": 52446, "creation_time": "2012-01-10T15:18:17Z", "is_private": false}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Are you able to give us a bit more info on the property stream that's misbehaving? \n\nI'd be interested in knowing:\n * How long is it, in bytes?\n * How many blocks is the property stream split over?\n * If you look at the bytes of the problem block, is it null padded?", "id": 152657, "time": "2012-01-10T15:25:23Z", "bug_id": 52446, "creation_time": "2012-01-10T15:25:23Z", "is_private": false}, {"count": 2, "tags": [], "creator": "antoni.mylka@gmail.com", "attachment_id": null, "id": 152676, "time": "2012-01-11T10:40:17Z", "bug_id": 52446, "creation_time": "2012-01-11T10:40:17Z", "is_private": false, "text": "I took a very close look in the debugger. POIFSViewer seems to work at a higher-level, where blocks are already combined into streams. I know nothing about the POI format, yet from what I understand it goes like this:\n\nNPropertyTable is constructed with an iterator on byte buffers. Each byte buffer represents a single block. In this file the blocks are 512-bytes large. The NPropertyTable constructor goes through this stack trace twice:\n\nByteArrayBackedDataSource.read(int, long) line: 48\t\nNPOIFSFileSystem.getBlockAt(int) line: 420\t\nNPOIFSStream$StreamBlockByteBufferIterator.next() line: 213\t\nNPOIFSStream$StreamBlockByteBufferIterator.next() line: 1\t\nNPropertyTable.buildProperties(Iterator<ByteBuffer>, POIFSBigBlockSize) line: 84\t\n\nThe first time getBlockAt is called with 946. When I look at offset 947*512=484864 within the file it contains four: UTF-16 strings like \"Root Entry\", \"Data\", \"1Table\", \"WordDocument\". AFAIU these are names of top-level directory entries. This block is parsed correctly by PropertyFactory.convertToProperties(data, properties);\n\nAfterwards comes the second block, index 956. It also comes down to ByteArrayBackedDataSource.read(int, long) line: 48. Unfortunately the (957*512 + 512) exceeds the size of the file. The returned byte buffer is only 510 bytes large, hence the BufferUnderflowException. I don't know how many blocks should there be (there is BAT, but I don't understand it). What I know, is that this file has been truncated somewhere in the process.\n\nWhen the second block is parsed, with 510 bytes, the PropertyFactory.convertToProperties begins with \n\nint property_count = data.length / POIFSConstants.PROPERTY_SIZE;\n\nIn my case this evaluates to 3. The last 126 bytes are not taken into account - hence no errors. The second block, when viewed in XVI shows UTF-16 strings \"SummaryInformation\", \"DocumentSummaryInformation\", and \"\\u0001CompObj\" (the three \"correct\" properties). The fourth, truncated property contains only zeros:\n\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF \n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nTherefore no information is lost. I think that my workaround is actually correct."}, {"count": 3, "tags": [], "bug_id": 52446, "text": "Just to check - is your file size a multiple of 512? (It's supposed to be, but based on what you're saying I think it might be 2 bytes short)", "id": 152678, "time": "2012-01-11T11:12:53Z", "creator": "apache@gagravarr.org", "creation_time": "2012-01-11T11:12:53Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "It's 490\u00a0494.\n\n490494 div 512: 957\n490494 mod 512: 126\n\nIt's 2 bytes short.", "is_private": false, "id": 152679, "creator": "antoni.mylka@gmail.com", "time": "2012-01-11T11:31:03Z", "bug_id": 52446, "creation_time": "2012-01-11T11:31:03Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "I think this should be fixed in r1229963. I've taken a slightly different approach, where we log the situation and pad the byte array with zeros (rather than passing a short byte array). Can you see if that solves it for your file, and close the bug if so?", "id": 152680, "time": "2012-01-11T11:48:44Z", "bug_id": 52446, "creation_time": "2012-01-11T11:48:44Z", "is_private": false}, {"count": 6, "tags": [], "text": "Yup, works. \n\nThanks a lot.", "is_private": false, "id": 152681, "creator": "antoni.mylka@gmail.com", "time": "2012-01-11T12:01:50Z", "bug_id": 52446, "creation_time": "2012-01-11T12:01:50Z", "attachment_id": null}]
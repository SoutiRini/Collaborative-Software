[{"attachment_id": null, "tags": [], "bug_id": 50604, "text": "The version of the dependency to ecj is wrong:\n    <dependency>\n      <groupId>org.eclipse.jdt.core.compiler</groupId>\n      <artifactId>ecj</artifactId>\n      <version>3.3.1</version>\n    </dependency>\n\nThere is no version 3.3.1. This should probably be 3.5.1: http://repo2.maven.org/maven2/org/eclipse/jdt/core/compiler/ecj/\n\nThis bug has been introduced on 22/09/10 *after* release 6.0.29. In fact I'm quite surprised that deployment to the Maven central repository is allowed with such a bad reference as the rules are now stronger (what is good))\n\nTomcat 7 seems to contain wrong references as well (reference to ecj 3.6 which doesn't exist either as far as I can see). This is particularly bad here as the improved embeddable possibilities should be one feature of Tomcat 7.", "count": 0, "id": 143414, "time": "2011-01-17T10:48:43Z", "creator": "mguillemot@yahoo.fr", "creation_time": "2011-01-17T10:48:43Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 50604, "attachment_id": null, "text": "Those ECJ version numbers are correct. You can confirm the version being used by looking in build.properties.default in the root of the svn tag for any given version.\n\nThe issue is that not all of the Eclipse versions make it into the Maven repos and the organisation of the repos changes from time to time. I went and did some digging to see which versions I could turn up and I found the same ones you did.\n\nI thought I had found other versions in the past but my recollection may be wrong. You'll need to load the JARs manually into your local repo.", "id": 143418, "time": "2011-01-17T12:53:15Z", "creator": "markt@apache.org", "creation_time": "2011-01-17T12:53:15Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50604, "attachment_id": null, "text": "No matter whether these versions exist somewhere or not, if you publish to the maven central repository, then it means that you want to allow your users to use Tomcat from there. If you depend on versions that are not available there, you just put your users into trouble (in fact from the logic, the central repo should forbid such an artifact).\n\nFrom http://maven.apache.org/guides/mini/guide-central-repository-upload.html\n\"...we do strongly encourage making sure all your dependencies are included in Central. If you rely on sketchy repositories that have junk in them or disappear, it just creates havok for downstream users.\"\n\nIs there one (or a set of) Maven repository(ies) that can *safely* be used for Tomcat dependencies? The central repo was ok for 6.0.29 but it is not the case anymore for 6.0.30.", "id": 143426, "time": "2011-01-18T02:25:48Z", "creator": "mguillemot@yahoo.fr", "creation_time": "2011-01-18T02:25:48Z", "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 143430, "time": "2011-01-18T04:41:14Z", "bug_id": 50604, "creation_time": "2011-01-18T04:41:14Z", "is_private": false, "text": "Background:\n\nUp to 6.0.29 the Tomcat build process went through a convoluted process to generate what was essentially ecj.jar from jdt.jar. This meant a 40MB+ download was required to create a 1MB jar. The advantage was that the Jar was a Tomcat jar and was uploaded as part of the upload process.\n\n7.0.x and 6.0.30 onwards use ecj.jar directly to speed up the build process.\n\n\nIssue:\n\nAs far as I can tell from Googling, the Eclipse jars have been uploaded manually by various third parties. I'll add looking at this to my todo list but there is no reason stopping you doing it yourself and since this is your itch I suspect you'll get this done faster than I will. I did see from looking at the comments in one of the poms [1] that the process appeared to have been automated although since it is just ecj.jar then it shouldn't be too hard to do manually.\n\n[1] http://repo2.maven.org/maven2/org/eclipse/jdt/core/compiler/ecj/3.5.1/ecj-3.5.1.pom"}, {"count": 4, "tags": [], "bug_id": 50604, "is_private": false, "id": 164842, "creation_time": "2013-01-23T19:24:10Z", "time": "2013-01-23T19:24:10Z", "creator": "markt@apache.org", "text": "*** Bug 54464 has been marked as a duplicate of this bug. ***", "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "text": "The ecj 4.2.1 bundle has been uploaded to Maven Central by Ralph Schaer\n\nDetails:\nhttp://markmail.org/message/cb4jfopm4hbtq6dz\n\nMany thanks to him.", "id": 164964, "time": "2013-01-31T20:51:40Z", "bug_id": 50604, "creation_time": "2013-01-31T20:51:40Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 50604, "text": "*** Bug 56670 has been marked as a duplicate of this bug. ***", "id": 176024, "time": "2014-06-25T07:52:13Z", "creator": "violetagg@apache.org", "creation_time": "2014-06-25T07:52:13Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "markt@apache.org", "text": "This came up at work today.\n\nFrom this Eclipse bug:\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=283745\nit doesn't look like the necessary jar is going to be routinely published to Maven central any time soon.\n\nI also discovered that the version number of the JAR is not 4.4.RC4 but 3.10.0.v20140604-1726. I suspect that should Eclipse ever upload these JARs to central there are going to be version issues with the existing JARs that the community has uploaded.\n\nOptions considered to address this:\na) continue as is and let consumers of tomcat-jasper deal with this\nb) drop the Maven releases\nc) delay the release to Maven central until the ecj JAR is available\n   - delay likely to be 1-2 weeks after upload is requested\n   - either release manager has to arrange for upload or wait for the community to do it (longer delay)\nd) get Eclipse to upload JARs to central as part of their release process\ne) upload the JAR under the Tomcat groupId\nf) add the p2 repository to the pom\n\na) is far from ideal as this is causing pain for some users\nb) is not a serious option as Maven releases are used too widely\nc) will cause problems for projects (TomEE?) that work from the zips that are released to Maven as access to the latest releases will be delayed\nd) looks to be unlikely given how long the current bug requesting this has been open\ne) could result in class loading issues if a project has a dependency on an older ecj JAR that is in central unless we package rename\nf) this should work in theory but I couldn't get it to work and not all build tools that use Maven central can access p2 repositories\n\nGiven all of the above, the best way forward appears to be a variation of e) using jarjar to repackage the JAR (org.apache.tomact.org.eclipse.jdt.*) and then upload that to central under Tomcat's group ID. I don't really like doing this but don't see a better way forward at this point.", "id": 176034, "time": "2014-06-25T13:43:33Z", "bug_id": 50604, "creation_time": "2014-06-25T13:43:33Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "text": "I'd vote c), then e). If Eclipse delays its releases by a couple weeks, it shouldn't be the end of the world if Tomcat does the same thing, right ?", "is_private": false, "id": 176037, "creator": "remm@apache.org", "time": "2014-06-25T13:52:40Z", "bug_id": 50604, "creation_time": "2014-06-25T13:52:40Z", "attachment_id": null}, {"count": 9, "attachment_id": null, "creator": "markt@apache.org", "text": "(In reply to Remy Maucherat from comment #8)\n> I'd vote c), then e). If Eclipse delays its releases by a couple weeks, it\n> shouldn't be the end of the world if Tomcat does the same thing, right ?\n\nThe delay comes from a non-Eclipse person uploading something into the org.eclipse namespace. It has to go through some additional, manual checks. It isn't that often that we update the ECJ jar. It has happened more frequently recently because of Java 8 support.\n\nMy main concern with c) at this point is that some of the JARs already uploaded have been uploaded using a different version number to the one listed in the JAR's manifest - that creates a dependency management mess that it is going to be hard to recover from. I don't want to make that worse. There are also fewer hoops to jump through for e) than c).", "id": 176040, "time": "2014-06-25T14:12:54Z", "bug_id": 50604, "creation_time": "2014-06-25T14:12:54Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 50604, "text": "I have nothing against doing e), no problem.", "count": 10, "id": 176041, "time": "2014-06-25T14:30:03Z", "creator": "remm@apache.org", "creation_time": "2014-06-25T14:30:03Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 50604, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #7)\n\nI think e) is not possible, because Eclipse uses a different license.\n\nAn additional idea:\n\ng) Remove that dependency. (At least mark it optional).\n\nFirst, Tomcat can be used with javac compiler from JDK.\n\nSecond, if someone wants to re-bundle the ecj jar,\nI think they can depend on the \"Binary distribution\" bundle of Tomcat\n(the one that publishes zip and tar.gz) and unzip ecj.jar from within the lib/ directory there.\n\n\n> I also discovered that the version number of\n> the JAR is not 4.4.RC4 but 3.10.0.v20140604-1726.\n\nIt is no wonder. Each component in Eclipse has its own version like that.\n\n\nThe f) option sounds interesting.\nI do not know what it actually looks like. How it works?\n(Are there some examples, precedents?)\n\nIn general, is it possible to teach Maven to download some known version of a dependency from some fixed known location (like our Ant script downloads from sourceforge.net and from eclipse.org)?", "id": 176050, "time": "2014-06-25T19:21:29Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-06-25T19:21:29Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 50604, "text": "(In reply to Konstantin Kolinko from comment #11)\n> (In reply to Mark Thomas from comment #7)\n> \n> I think e) is not possible, because Eclipse uses a different license.\n\nThe license looks OK as long as we only ship the package renamed binary. I don't think we'd be able to ship the source. Keep in mind we used to do some major re-packaging of Eclipse JARs and that wasn't an issue.\n\n> An additional idea:\n> \n> g) Remove that dependency. (At least mark it optional).\n> \n> First, Tomcat can be used with javac compiler from JDK.\n> \n> Second, if someone wants to re-bundle the ecj jar,\n> I think they can depend on the \"Binary distribution\" bundle of Tomcat\n> (the one that publishes zip and tar.gz) and unzip ecj.jar from within the\n> lib/ directory there.\n\nThat is about the same level of pain that folks see at the moment (and what I'd like to avoid).\n\n> > I also discovered that the version number of\n> > the JAR is not 4.4.RC4 but 3.10.0.v20140604-1726.\n> \n> It is no wonder. Each component in Eclipse has its own version like that.\n> \n> \n> The f) option sounds interesting.\n> I do not know what it actually looks like. How it works?\n> (Are there some examples, precedents?)\n\nI experimented with the tycho plugin but couldn't get it to use the p2 repo. The issue remains with that option of buidl tools other than Maven that use maven central and can't talk to p2 repositories.\n\n> In general, is it possible to teach Maven to download some known version of\n> a dependency from some fixed known location (like our Ant script downloads\n> from sourceforge.net and from eclipse.org)?\n\nAs far as my research shows, no.", "id": 176052, "time": "2014-06-25T21:19:41Z", "creator": "markt@apache.org", "creation_time": "2014-06-25T21:19:41Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 50604, "is_private": false, "text": "Technical (bikeshed) question about e):\n1. what version number are you going to use?\n\na. 4.4 from the file name\nb. 3.something from the manifest\nc. 8.0.9 from Tomcat\n\nIf it a. or b. I think that formally we need to do a vote to release that.\n\nIf it is b. then files downloaded from Maven will have some different filename.\n\nIf it is c. then there will be some versioning mess, with files such as ecj-8.0.9.jar being downloaded and used somewhere.  I expect people to be able to upgrade their ecj.jar at any time, if there are problems.\n\nIf we go c) as the easiest and established way then the file at Maven central probably will have to be named \"tomcat-ecj-8.0.9.jar\".", "id": 176061, "time": "2014-06-26T11:48:20Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-06-26T11:48:20Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 50604, "is_private": false, "text": "Can we use the Eclipse maven repository?\n\nhttps://repo.eclipse.org/content/repositories/eclipse-releases/\n\n<dependency>\n  <groupId>org.eclipse.jdt</groupId>\n  <artifactId>org.eclipse.jdt.core</artifactId>\n  <version>3.10.0.v20140604-1726</version>\n</dependency>\n\nversion 3.10.0.v20140604-1726 from MANIFEST.MF == version 4.4 from jar name", "id": 176121, "time": "2014-06-30T19:58:46Z", "creator": "violetagg@apache.org", "creation_time": "2014-06-30T19:58:46Z", "attachment_id": null}, {"count": 15, "tags": [], "text": "The JAR in that repo is over twice the size of the JAR we currently use. Further there is only a partial overlap between the JARs so the larger file is not a superset of the smaller. I'm currently looking around the Eclipse Maven repo to see if the JAR we want is in there somewhere.", "is_private": false, "id": 176280, "creator": "markt@apache.org", "time": "2014-07-07T17:20:48Z", "bug_id": 50604, "creation_time": "2014-07-07T17:20:48Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 50604, "text": "The JAR is also available in Maven Central as:\nhttp://search.maven.org/#artifactdetails|org.eclipse.tycho|org.eclipse.jdt.core|3.10.0.v20140604-1726|jar\n\nI'm wondering if a) this JAR would work as a replacement and b) how folks would feel about if being larger. I'm only thinking of referencing it in the Jasper POM, not using it in a normal Tomcat build.", "id": 176324, "time": "2014-07-10T11:01:29Z", "creator": "markt@apache.org", "creation_time": "2014-07-10T11:01:29Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "text": "Chatting this over with some folks that actively use embedded Tomcat at $work someone suggested using the JDK compiler instead. With this in mind, I am currently thinking about the following plan:\na) switch the JDT dependency in Jasper to the 5.3MB JAR that is in Maven central\nb) make the JDT dependency optional\n\nThis should mean embedded Tomcat uses the JDK compiler by default unless JDT is available. I want to test that this works the way I think it will before I make any changes.", "is_private": false, "id": 176325, "creator": "markt@apache.org", "time": "2014-07-10T12:05:43Z", "bug_id": 50604, "creation_time": "2014-07-10T12:05:43Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 50604, "attachment_id": null, "text": "*** Bug 56759 has been marked as a duplicate of this bug. ***", "id": 176597, "time": "2014-07-22T16:49:18Z", "creator": "violetagg@apache.org", "creation_time": "2014-07-22T16:49:18Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 50604, "text": "After exploring various options the approach to be taken for this JAR going forward has been documented here:\nhttps://wiki.apache.org/tomcat/JDTCoreBatchCompiler\n\nNote that this is a wiki and the details of the policy may evolve over time. However, one part won't change and that is:\n<quote>\nThe POMs used when uploading a release to Maven Central will always include references to valid JARs that are known to already exist in Maven central.\n</quote>\n\nThere may be consequences as a result of this but the policy aims to minimize them.", "id": 177024, "time": "2014-08-08T19:29:03Z", "creator": "markt@apache.org", "creation_time": "2014-08-08T19:29:03Z", "is_private": false, "attachment_id": null}]
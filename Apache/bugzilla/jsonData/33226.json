[{"count": 0, "tags": [], "creator": "jswelden@yahoo.com", "text": "1.  From within a stand-alone jdk 1.4.2 app, (like in static void main(String[]\narg)),  do a:\n        java.security.Security.setProperty( \"networkaddress.cache.ttl\", \"0\" );\n\n    This successfully changes the ttl dns cache setting, because \n        java.security.Security.getProperty( \"networkaddress.cache.ttl\" );\n    returns \"0\".\n\n    Now, \n        System.out.println( java.net.InetAddress.getByName( \"earthlink.net\" ) ) \n    will result in a particular IP resolution like:\n        earthlink.net/207.217.121.217\n\n    However, \"earthlink.net\", for example, has multiple IP addresses that it \n    round robins through.  This can be seen from printing out InetAddress[] \n    return from:\n        java.net.InetAddress.getAllByName( \"earthlink.net\" );\n\n    Now, subsequent java.net.InetAddress.getByName ( \"earthlink.net\" ) calls  \n    will show IP addresses cycled in a round-robin manner.\n\n    This all works as expected according to:\n        http://java.sun.com/j2se/1.4.2/docs/api/java/net/InetAddress.html\n\n\n2.  Now, do essentially the same thing in a servlet deployed on Tomcat 4.1.18:\n\n    In a browser hit this url to execute the servlet code below:\nhttp://myHost/servletPath?host=earthlink.net\n    \n    public class TestDnsServlet extends HttpsServlet\n    {\n        private void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException\n        {\n            Security.setProperty( \"networkaddress.cache.ttl\", \"0\" );\n    \n            try\n            {\n                PrintWriter out = response.getWriter();\n                String hostname = request.getParameter( \"host\" );\n                \n                out.println(\"<html><body>\\n\");\n             \n                out.println(\"networkaddress.cache.ttl = \" +\nSecurity.getProperty(\"networkaddress.cache.ttl\") + \"<br>\\n\");\n                            \n                InetAddress[] IP = InetAddress.getAllByName( hostname );\n                out.println( hostname + \":<BR>\\n\" );\n                for (int j=0; j<IP.length; j++)\n                {\n                    out.println( \"  \" + IP[j] + \"<BR>\\n\");\n                }\n    \n                out.println();\n                for (int j=0; j<20; j++)\n                {\n                    out.println( \"IP lookup: \" + InetAddress.getByName( hostname\n) + \"<BR>\\n\" );\n                }\n                \n                out.println(\"</body></html>\\n\");\n            }\n            catch (UnknownHostException e)\n            {\n                System.err.println( \"  unknown host\" );\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n        }\n\n\nRESULTS of (2):\n    The multiple InetAddress.getByName() calls in the above for-loop all return\nthe first IP returned from InetAddress.getAllByName() as though it is cached,\neven though the network.cache.ttl setting is clearly changed to \"0\".\n    This makes it seem like Tomcat is somehow intercepting the call and\nproviding its own implementation??  Perhaps the pluggable DNS Provider made\navailable by JDK 1.4.2 are being used?\n\n\nEXPECTATION:\n    (2) should work the same as (1).", "id": 70048, "time": "2005-01-25T00:08:22Z", "bug_id": 33226, "creation_time": "2005-01-25T00:08:22Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "yoavs@computer.org", "is_private": false, "text": "Filing bugs against Tomcat 4.x is mostly a waste of time at the moment.  Is \nthe behavior the same for 5.5.7?", "id": 70049, "time": "2005-01-25T00:16:04Z", "bug_id": 33226, "creation_time": "2005-01-25T00:16:04Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "jswelden@yahoo.com", "is_private": false, "text": "(In reply to comment #1)\n> Filing bugs against Tomcat 4.x is mostly a waste of time at the moment.  Is \n> the behavior the same for 5.5.7?\n\n5.5.7 alpha exhibits the same behavior.\nJust curious, why are filing bugs against Tomcat 4.x a waste of time right now?\n", "id": 70052, "time": "2005-01-25T02:24:42Z", "bug_id": 33226, "creation_time": "2005-01-25T02:24:42Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "There are no replacement of any component of the Java network stack in Tomcat.\nIf you want to see this resolved, you'll have to look into it (otherwise, the\nbug will be resolved as WONTFIX).", "attachment_id": null, "id": 70059, "creator": "remm@apache.org", "time": "2005-01-25T09:03:08Z", "bug_id": 33226, "creation_time": "2005-01-25T09:03:08Z", "is_private": false}, {"count": 4, "tags": [], "text": "Try setting networkaddress.cache.ttl on startup via JAVA_OPTS. \n\nexport JAVA_OPTS=\"-Dnetworkaddress.cache.ttl=0\"\n\n", "attachment_id": null, "bug_id": 33226, "id": 70062, "time": "2005-01-25T12:45:36Z", "creator": "funkman@joedog.org", "creation_time": "2005-01-25T12:45:36Z", "is_private": false}, {"count": 5, "tags": [], "creator": "jswelden@yahoo.com", "attachment_id": null, "id": 70067, "time": "2005-01-25T18:04:48Z", "bug_id": 33226, "creation_time": "2005-01-25T18:04:48Z", "is_private": false, "text": "(In reply to comment #3)\n> There are no replacement of any component of the Java network stack in Tomcat.\n> If you want to see this resolved, you'll have to look into it (otherwise, the\n> bug will be resolved as WONTFIX).\n\nThanks for the info!  I'll look into it. =)"}, {"count": 6, "tags": [], "text": "(In reply to comment #4)\n> Try setting networkaddress.cache.ttl on startup via JAVA_OPTS. \n> \n> export JAVA_OPTS=\"-Dnetworkaddress.cache.ttl=0\"\n> \n> \n\nI tried this, but it also doesn't work.  I think it has something to do with the\ninteraction of tomcat's several Class loaders and (java.security.Security)'s\nreloading of dns provider properties cache.  Thanks!  I'm looking at jvm source\ncode and also tomcat's source.  Any input would be appreciated, since this is a\nnew code base for me.", "is_private": false, "bug_id": 33226, "id": 70068, "time": "2005-01-25T18:10:16Z", "creator": "jswelden@yahoo.com", "creation_time": "2005-01-25T18:10:16Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "funkman@joedog.org", "is_private": false, "text": "Try setting sun.net.inetaddr.ttl instead of networkaddress.cache.ttl (via JAVA_OPTS)\n\nhttp://java.sun.com/j2se/1.4.2/docs/guide/net/properties.html", "id": 70069, "time": "2005-01-25T18:22:03Z", "bug_id": 33226, "creation_time": "2005-01-25T18:22:03Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "(In reply to comment #7)\n> Try setting sun.net.inetaddr.ttl instead of networkaddress.cache.ttl (via\nJAVA_OPTS)\n> \n> http://java.sun.com/j2se/1.4.2/docs/guide/net/properties.html\n\n\nJAVA_OPTS=\"-Dsun.net.inetaddr.ttl=0\" worked both on tomcat 5.5.7 and tomcat 4.1.18.\nWeird that the new one doesn't work, but the old property does when in the\ncontext of webapps classloader; and the new one works in the context of a\nstand-alone app.\n\nLooks as though getting the right property in early (on the cmd-line) gets it\ninto the sun dns provider and that subsequent Security.setProperty() calls get\nignored by the provider in the webapps classloader context because the provider\nhas its own properties cache that doesn't get refreshed in this case.\n\nThanks very much for your help.  It looks like this is a suitable workaround.\n\n\n\n", "attachment_id": null, "bug_id": 33226, "id": 70077, "time": "2005-01-25T19:47:31Z", "creator": "jswelden@yahoo.com", "creation_time": "2005-01-25T19:47:31Z", "is_private": false}, {"count": 9, "tags": [], "text": "This seems to still be happening in Tomcat 6, or there's been a regression.", "attachment_id": null, "bug_id": 33226, "id": 107757, "time": "2007-09-05T16:07:01Z", "creator": "apache@spatula.net", "creation_time": "2007-09-05T16:07:01Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 33226, "attachment_id": null, "id": 107758, "time": "2007-09-05T16:14:13Z", "creator": "apache@spatula.net", "creation_time": "2007-09-05T16:14:13Z", "is_private": false, "text": "Also, this affects the Sun 1.5.0_12 JDK on FreeBSD, so chances are it'll happen\nthe same way on any platform."}, {"count": 11, "tags": [], "text": "FYI, -Dsun.net.inetaddr.ttl=0 doesn't work with Tomcat 6 running with jsvc, nor\ndoes forcibly setting that property at runtime.\n\nI think something else screwy is going on too, since today a request to connect\nto a hostname on the same machine threw an UnknownHostException too (and was\nalso cached  forever).", "attachment_id": null, "bug_id": 33226, "id": 109529, "time": "2007-10-21T19:33:41Z", "creator": "apache@spatula.net", "creation_time": "2007-10-21T19:33:41Z", "is_private": false}, {"count": 12, "tags": [], "text": "The property \"sun.net.inetaddr.ttl\" is not a supported property by SUN\n  http://java.sun.com/j2se/1.5.0/docs/guide/net/properties.html\n\nThe property \"networkaddress.cache.ttl\" does works as expected in the context of\nthe webapp classloader.\n", "is_private": false, "bug_id": 33226, "id": 109758, "time": "2007-10-25T19:12:41Z", "creator": "lgalfaso@gmail.com", "creation_time": "2007-10-25T19:12:41Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "Just to follow up, I have some more details on this problem.\n\nIt only happens, if the Tomcat native libraries are used and they're compiled\nwith gcc-4.2.1.\n\nDropping\n-Djava.library.path=$CATALINA_HOME/bin/tomcat-native-1.1.10-src/jni/native/.libs\nfrom CATALINA_OPTS in Tomcat6.sh (the script for running jsvc) eliminates the\nproblem.  Compiling the native libraries with a different version of gcc (and\nthe same one that was used to compile Apache httpd/APR) also eliminates the problem.\n\nI have not tested to see whether the bug manifests itself when running Tomcat\nwith the native libraries but without jsvc.\n\nThe workaround is not to use the native libraries or to make sure they're not\ncompiled with gcc 4.2 and that they're compiled with the same version of gcc as\nlibapr (or at least not gcc 4.2).\n\nThe easiest way to demonstrate the problem is to write a servlet that does\nnothing other than resolve a hostname.  I used \"gulf.net\" in my test case, both\nbecause that was my first job (so it was a hostname that came to mind) and\nbecause both of its name servers are on the same subnet, making it easy to add\nand remove from my test host's firewall.\n\nThen I stopped and started my name server on my local machine to clear its cache\nand configured it not to use forwarders and to be the only name server in use by\nmy test machine.\n\nThen I added a firewall rule to block 207.69.188.0/24 (where both name servers\nfor gulf.net live) from communicating with my test host.  I also started a\n\"tcpdump -s1500 -X -i lo0 port 53\" in another window to watch name resolution\ntraffic.\n\nThen I connected to my servlet.  Predictably, after a long timeout, it failed to\nresolve the name.  On this attempt, I saw the network traffic I expected via\ntcpdump.  Then I connected again.  The name resolution failed immediately,\naccompanied by no further attempts to resolve the name.  \n\nI deleted the firewall rule from the previous step, restarted the name server,\nand found that resolution still failed immediately.\n\nRepeating all of the above steps *without* using the native libraries behaved as\nI would expect: each subsequent attempt at resolution resulted in network\ntraffic for port 53 querying the name.  Once the firewall was opened up again,\nthe name resolved correctly.\n\nRecompiling the native libraries with a more stable gcc made the problem go away\ncompletely in my case.", "is_private": false, "bug_id": 33226, "id": 109847, "time": "2007-10-28T14:09:41Z", "creator": "apache@spatula.net", "creation_time": "2007-10-28T14:09:41Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "In my case, this finally turned out to be caused by an old FreeBSD kernel bug\n(since fixed) that was triggered by the NioConnector leaking file handles like a\nsieve.\n\nBasically once there came to be more than 1024 file handles in use, all\nsubsequent attempts at doing name resolution fail because socket writes on\nhigher numbered file handles fail.\n\nOf course, it's no good for the NioConnector to be leaking file handles like it\ndoes, but that's a different bug.\n\nFor anyone else who searches around and finds this bug, consider running a\nktrace, strace, or truss on your Tomcat process and look to see if you have a\nvery high number of file handles in use, or other resource starvation issue that\nmight be causing you grief.", "attachment_id": null, "bug_id": 33226, "id": 109933, "time": "2007-10-29T19:36:33Z", "creator": "apache@spatula.net", "creation_time": "2007-10-29T19:36:33Z", "is_private": false}]
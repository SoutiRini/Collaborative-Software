[{"count": 0, "attachment_id": null, "creator": "abhilash.koneri@bestbuy.com", "text": "I am using xerces for building a dom document from character data. The \ncharacter data contains some characters which are not legal xml characters. \nHowever, this does not cause any exception during the creation of the the DOM. \nHowever, when I serialize the dom (to a string) and the re-parse it to\nobtain the dom, I get an sax exception reporting the invalid xml character.\n\nThe code used is attached below.\n-----\n\nimport java.io.*;\nimport javax.xml.parsers.*;\nimport org.xml.sax.*;\nimport org.w3c.dom.*;\n\nimport org.apache.xml.serialize.XMLSerializer;\nimport org.apache.xml.serialize.OutputFormat;\n\n\npublic class ItemTest \n{\n    public static void main(String[] args) throws Throwable\n    {\n         String illegalUnicodeString = \"BLACK\u001e  \";\n\n         char[] chars = illegalUnicodeString.toCharArray();\n         for(int i=0;i<chars.length; i++)\n         {\n             System.out.println(\"character \"+chars[i]+\":\"+Character.isLetter\n(chars[i]));\n\n         }\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\n         factory.setValidating(false);\n         DocumentBuilder builder = factory.newDocumentBuilder();\n\n         Document dom = builder.newDocument();\n         Element rootElement= dom.createElement(\"ITEMRECORD\");\n         rootElement.appendChild(dom.createTextNode(illegalUnicodeString));\n         dom.appendChild(rootElement);\n\n         String domString = getXmlAsString(dom, false);\n\n         System.out.println(\"The serialized dom string is \\n\"+domString);\n         StringReader reader = new StringReader(domString);\n         InputSource is = new InputSource(reader);\n         dom = builder.parse(is);\n    }\n\n     public static String getXmlAsString(Document dom, boolean supressHeader) \n     {\n         String xmlString = null;\n\n         try \n         { \n             OutputFormat format = new OutputFormat(dom);\n             format.setPreserveSpace(true);\n             format.setOmitXMLDeclaration(supressHeader);  // skip boilerplate \nat top of XML document\n             StringWriter sOut = new StringWriter();\n             XMLSerializer serializer = new XMLSerializer(sOut,format);\n             serializer.asDOMSerializer();\n             serializer.serialize(dom.getDocumentElement());\n             xmlString = sOut.getBuffer().toString();\n         }\n         catch(DOMException domE) \n         {\n             domE.printStackTrace();\n         }\n         catch(IOException e) \n         {\n             e.printStackTrace();\n         }\n         return xmlString;\n\n     }\n}", "id": 15691, "time": "2002-05-07T23:10:47Z", "bug_id": 8893, "creation_time": "2002-05-07T23:10:47Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 8893, "text": "Acceptable behavior per the DOM spec. Checking every character at editing time \nwould impose computational overhead, and would usually be unnecessary since few \napplications will generate invalid characters in the first place; hence the DOM \ndoes not require imposing such a test. \n\n(The DOM REC _does_ explicitly ask that element and attribute names be checked \nto make sure they're legal. One can quibble about whether that was a good \ndecision or not, but it's in the REC. Checking character content isn't.)\n\nThe serializer, which must examine every character for possible escaping, really \nis the best place for an XML library to impose this test. Or check before \ninserting the characters into the DOM in the first place.", "id": 15716, "time": "2002-05-08T14:17:05Z", "creator": "keshlam@us.ibm.com", "creation_time": "2002-05-08T14:17:05Z", "is_private": false, "attachment_id": null}]
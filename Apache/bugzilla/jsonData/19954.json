[{"count": 0, "tags": [], "bug_id": 19954, "attachment_id": null, "id": 37256, "time": "2003-05-15T14:19:48Z", "creator": "chris.conti@xcellenet.com", "creation_time": "2003-05-15T14:19:48Z", "is_private": false, "text": "[PATCH] Enable HTTP tunneling for streaming data where data is less than the \nbuffering size\n\nSynopsis: Optionally disable buffering in mod_proxy\n\nWe ran into a situation where a command-response protocol was being tunneled\nthrough HTTP (2 sockets 1 is an HTTP GET, the other an HTTP POST) that\nfailed when passed through an Apache reverse proxy.  When the data passing from \nthe server <\nAP_MIN_BYTES_TO_WRITE (8000 decimal) then the bucket brigade buffers the\ndata instead of passing it on.\n\nThe guts of the patch are basically appending a flush bucket after every\nread(unless there is already an EOS) if the ProxyWriteThrough directive is\nset to On\n\n\n---------------------------------------------------------\nChris Conti\ncmconti@mindspring.com\nchris.conti@xcellenet.com\n\ndiff -u \\ApacheSrc\\httpd-2.0.45\\modules\\proxy\\proxy_http.c\n\\ApacheSrc-orig\\httpd-2.0.45\\modules\\proxy\\proxy_http.c\n--- \\ApacheSrc\\httpd-2.0.45\\modules\\proxy\\proxy_http.c  2003-05-02\n16:22:53.000000000 -0400\n+++ \\ApacheSrc-orig\\httpd-2.0.45\\modules\\proxy\\proxy_http.c     2003-02-03\n10:31:50.000000000 -0500\n@@ -956,18 +956,6 @@\n                         /* signal that we must leave */\n                         finish = TRUE;\n                     }\n-\n-                    /* do we need to always send the data? */\n-                    if (conf->write_through  && !finish){\n-                        apr_off_t readbytes;\n-                        apr_brigade_length(bb, 0, &readbytes);\n-\n-\n-                        if(0 != readbytes){\n-                            apr_bucket *e =\napr_bucket_flush_create(c->bucket_alloc);\n-                            APR_BRIGADE_INSERT_TAIL(bb, e);\n-                        }\n-                    }\n\n                     /* try send what we read */\n                     if (ap_pass_brigade(r->output_filters, bb) !=\nAPR_SUCCESS)\n{\n\n\ndiff -u \\ApacheSrc\\httpd-2.0.45\\modules\\proxy\\mod_proxy.h\n\\ApacheSrc-orig\\httpd-2.0.45\\modules\\proxy\\mod_proxy.h\n--- \\ApacheSrc\\httpd-2.0.45\\modules\\proxy\\mod_proxy.h   2003-04-29\n09:20:12.000000000 -0400\n+++ \\ApacheSrc-orig\\httpd-2.0.45\\modules\\proxy\\mod_proxy.h      2003-02-03\n10:31:50.000000000 -0500\n@@ -201,8 +201,6 @@\n       bad_body\n     } badopt;                   /* how to deal with bad headers */\n     char badopt_set;\n-    int  write_through;\n-    char write_through_set;\n\n } proxy_server_conf;\n\n\n\ndiff -u \\ApacheSrc\\httpd-2.0.45\\modules\\proxy\\mod_proxy.c\n\\ApacheSrc-orig\\httpd-2.0.45\\modules\\proxy\\mod_proxy.c\n--- \\ApacheSrc\\httpd-2.0.45\\modules\\proxy\\mod_proxy.c   2003-04-29\n09:20:12.000000000 -0400\n+++ \\ApacheSrc-orig\\httpd-2.0.45\\modules\\proxy\\mod_proxy.c      2003-02-22\n11:38:14.000000000 -0500\n@@ -503,8 +503,6 @@\n     ps->timeout_set = 0;\n     ps->badopt = bad_error;\n     ps->badopt_set = 0;\n-    ps->write_through = 0;\n-    ps->write_through_set = 0;\n     return ps;\n }\n\n@@ -532,7 +530,6 @@\n     ps->preserve_host = (overrides->preserve_host_set == 0) ?\nbase->preserve_host : overrides->preserve_host;\n     ps->timeout= (overrides->timeout_set == 0) ? base->timeout :\noverrides->timeout;\n     ps->badopt = (overrides->badopt_set == 0) ? base->badopt :\noverrides->badopt;\n-    ps->write_through = (overrides->write_through_set == 0) ?\nbase->write_through : overrides->write_through;\n\n     return ps;\n }\n@@ -816,16 +813,6 @@\n     psf->req_set = 1;\n     return NULL;\n }\n-static const char*\n-    set_proxy_writethrough(cmd_parms *parms, void *dummy, int flag)\n-{\n-    proxy_server_conf *psf =\n-    ap_get_module_config(parms->server->module_config, &proxy_module);\n-\n-    psf->write_through = flag;\n-    psf->write_through_set = 1;\n-    return NULL;\n-}\n static const char *\n     set_proxy_error_override(cmd_parms *parms, void *dummy, int flag)\n {\n@@ -1079,8 +1066,6 @@\n      \"This overrides the server timeout\"),\n     AP_INIT_TAKE1(\"ProxyBadHeader\", set_bad_opt, NULL, RSRC_CONF,\n      \"How to handle bad header line in response: IsError | Ignore |\nStartBody\"),\n-    AP_INIT_FLAG(\"ProxyWriteThrough\", set_proxy_writethrough, NULL,\nRSRC_CONF,\n-     \"on if the data should be not be buffered\"),\n\n     {NULL}\n };"}, {"count": 1, "tags": [], "bug_id": 19954, "is_private": false, "text": "add patchavailable keyword.", "id": 47694, "time": "2003-11-20T14:58:41Z", "creator": "chris.conti@xcellenet.com", "creation_time": "2003-11-20T14:58:41Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Your patch looks reversed.\n\nYou might also want to \"attach\" it rather than pasting it in, since the\nline-wrapping makes your patch very hard to apply.", "is_private": false, "id": 47699, "creator": "slive@apache.org", "time": "2003-11-20T15:28:44Z", "bug_id": 19954, "creation_time": "2003-11-20T15:28:44Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 19954, "attachment_id": null, "id": 48776, "time": "2003-12-10T00:08:54Z", "creator": "trawick@apache.org", "creation_time": "2003-12-10T00:08:54Z", "is_private": false, "text": "The preferred mechanism would be to AUTOMATICALLY send down a flush bucket if a\nnon-blocking read returns EAGAIN.  No configuration directive would be necessary.\n\nThe simplistic algorithm would be\n\n  done = 0;\n  while (!done) {\n    rv = ap_get_brigade(APR_NONBLOCK_READ);\n    if (APR_STATUS_IS_EAGAIN(rv)) {\n        pass flush bucket down output filter chain;\n        rv = ap_get_brigade(APR_BLOCK_READ);\n    }\n    if (rv != APR_SUCCESS) {\n        done = 1;\n        break;\n    }\n  }\n\nThe content-length filter does this, though with a slightly more complicated and\noptimized algorithm.\n"}, {"count": 4, "tags": [], "bug_id": 19954, "attachment_id": null, "id": 48788, "time": "2003-12-10T04:02:32Z", "creator": "chris.conti@xcellenet.com", "creation_time": "2003-12-10T04:02:32Z", "is_private": false, "text": "In what context do you intend the algorithm to be used?  In proxy_http.c in \nplace of the change I proposed?  \nI would think that ordinarily a reverse proxy would want the caching behavior.  \nOnly when tunneling dynamic content would you want to disable the caching.  In \nour case, the back end server withholds sending more data until a response is \nreceived on a different socket.  When I originally was researching this I came \nacross references to people having a similar issue tunneling streaming \nmultimedia."}, {"count": 5, "tags": [], "text": "The logic to hold on to output until we get 8K is not intended to be caching\nbehavior, but instead to send out full packets so that we don't abuse the\nnetwork.  But if we don't pass flush buckets down at the right time, it breaks\nsome applications that need to send output to the client a piece at a time.\n\nA flush bucket should be passed down when we've read some output but we find out\nthat another read would block.  At this point it is safe to assume that the\nCGI/origin-server/whatever is not going to generate more output for a while and\nthe output generated so far should be flushed to the client.\n", "is_private": false, "id": 48802, "creator": "trawick@apache.org", "time": "2003-12-10T11:17:27Z", "bug_id": 19954, "creation_time": "2003-12-10T11:17:27Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "This is fixed on HEAD using the method Jeff suggested:\n\nhttp://cvs.apache.org/viewcvs.cgi/httpd-2.0/modules/proxy/proxy_http.c?r1=1.201&r2=1.202\n", "is_private": false, "id": 66750, "creator": "jorton@redhat.com", "time": "2004-11-11T19:51:19Z", "bug_id": 19954, "creation_time": "2004-11-11T19:51:19Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "*** Bug 33029 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 69588, "creator": "jorton@redhat.com", "time": "2005-01-12T12:08:05Z", "bug_id": 19954, "creation_time": "2005-01-12T12:08:05Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 19954, "attachment_id": 19034, "id": 95004, "time": "2006-10-20T01:03:29Z", "creator": "jfclere@gmail.com", "creation_time": "2006-10-20T01:03:29Z", "is_private": false, "text": "Created attachment 19034\npatch for httpd-2.0.59"}, {"count": 9, "tags": [], "text": "(In reply to comment #8)\n> Created an attachment (id=19034) [edit]\n> patch for httpd-2.0.59\n> \n\nGuess you provided the reverse patch :-). Furthermore I do not think that this\nworks. The same code does not work in 2.2.x as all non blocking reads are\nconverted to blocking reads somewhere down in the call chain (currently cannot\nremember where) and thus the conditions in the if clause causing a flush bucket\nto be added never become true. This is no fault of the proxy code. Either the\nproblem somewhere down the call chain needs to be fixed what seems to be a\nlarger task or we need to use a poll approach here similar to the one currently\nused in mod_proxy_ajp on the trunk (aka autoflush property of a proxy worker).\n", "is_private": false, "id": 95010, "creator": "rpluem@apache.org", "time": "2006-10-20T08:48:09Z", "bug_id": 19954, "creation_time": "2006-10-20T08:48:09Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "After more testing... The patch does not work if Transfer-Encoding is chunked.\n(See modules/http/http_protocol.c around line 870).", "is_private": false, "bug_id": 19954, "id": 95281, "time": "2006-11-01T03:50:17Z", "creator": "jfclere@gmail.com", "creation_time": "2006-11-01T03:50:17Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "Created attachment 19075\npatch for httpd-2.0.59 (works also with TE chunked).\n\nAlso patch http-protocol to allow the correct to work with TE chunked.", "is_private": false, "bug_id": 19954, "id": 95352, "time": "2006-11-02T08:02:40Z", "creator": "jfclere@gmail.com", "creation_time": "2006-11-02T08:02:40Z", "attachment_id": 19075}, {"count": 12, "tags": [], "text": "From first glance this looks good. Mind to produce a patch against trunk, such\nthat it can be committed and follow the usual backporting process?", "attachment_id": null, "bug_id": 19954, "id": 95366, "time": "2006-11-02T13:34:46Z", "creator": "rpluem@apache.org", "creation_time": "2006-11-02T13:34:46Z", "is_private": false}, {"count": 13, "tags": [], "text": "Created attachment 19091\npatch for htttpd-trunk\n\npatch for htttpd-trunk (06/11/2006).", "is_private": false, "id": 95475, "creator": "jfclere@gmail.com", "time": "2006-11-06T06:13:30Z", "bug_id": 19954, "creation_time": "2006-11-06T06:13:30Z", "attachment_id": 19091}, {"count": 14, "tags": [], "bug_id": 19954, "is_private": false, "id": 96206, "attachment_id": null, "creator": "jim@apache.org", "creation_time": "2006-11-27T06:40:33Z", "time": "2006-11-27T06:40:33Z", "text": "+1 on the patch"}, {"count": 15, "tags": [], "text": "The issue with the chunk filter is a separate issue to the bug in the proxy\nwhich was tracked here so please open a new PR if you want that bug tracked.", "attachment_id": null, "id": 96207, "creator": "jorton@redhat.com", "time": "2006-11-27T06:49:35Z", "bug_id": 19954, "creation_time": "2006-11-27T06:49:35Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 19954, "attachment_id": null, "is_private": false, "id": 111588, "time": "2007-12-09T06:55:55Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-09T06:55:55Z", "text": "Backported to 2.2.x as r602679 (http://svn.apache.org/viewvc?rev=602679&view=rev)."}]
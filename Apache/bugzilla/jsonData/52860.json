[{"count": 0, "tags": [], "text": "Created attachment 28443\npatch against trunk r1298556\n\nIn a comment to Bug 39797, Roy Fielding calls for Apache httpd to implement transfer-encoding.\n\nI'm filing this bug to ask for that improvement. It's against mod_deflate because that seems like the best place, but Roy Fielding actually suggested a separate HTTP filter module.\n\nI want to see at least one HTTP server that can talk gzip transfer-encoding. I looked long and hard at most of the open source webservers, but only Apache httpd had enough flexibility to make adding this feature feasible.\n\n\nI'm attaching some code. This isn't the sort of patch you commit, but it illustrates the kind of behaviour I'm describing. The patch adds a new filter type GZIPTE which needs to run after the content is set but before chunked transfer-encoding is applied. I've tested this using recent cURL as a client and it behaves at the HTTP level just the way I would expect.\n\nI'd very much welcome help from more experienced developers in making this into a patch submission that belongs in trunk, with appropriate tests, documentation and error codes. This is my first C language contribution to a public project so please bear that in mind.\n\nNB: if using cURL, remember to add the \"TE: gzip\" request header manually. There's no command line shortcut for this yet.", "is_private": false, "id": 154709, "creator": "isoma@c8h10n4o2.org.uk", "time": "2012-03-08T21:13:53Z", "bug_id": 52860, "creation_time": "2012-03-08T21:13:53Z", "attachment_id": 28443}, {"count": 1, "tags": [], "creator": "isoma@c8h10n4o2.org.uk", "text": "Sorry, I meant Bug 39727\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=39727#c31", "id": 154710, "time": "2012-03-08T21:15:31Z", "bug_id": 52860, "creation_time": "2012-03-08T21:15:31Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Created attachment 29270\npatch against trunk r1376741\n\nThe only real update is to add a call to have_ssl_compression() in the right place.", "is_private": false, "id": 161652, "creator": "isoma@c8h10n4o2.org.uk", "time": "2012-08-23T22:45:44Z", "bug_id": 52860, "creation_time": "2012-08-23T22:45:44Z", "attachment_id": 29270}, {"count": 3, "tags": [], "text": "Any anecdotal info about client support? Or is it a chicken/egg problem?", "attachment_id": null, "bug_id": 52860, "id": 168421, "time": "2013-07-09T14:58:31Z", "creator": "covener@gmail.com", "creation_time": "2013-07-09T14:58:31Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 52860, "attachment_id": null, "id": 168424, "time": "2013-07-09T15:07:29Z", "creator": "isoma@c8h10n4o2.org.uk", "creation_time": "2013-07-09T15:07:29Z", "is_private": false, "text": "It's a chicken-and-egg issue. Few mainstream browsers support gzip transfer-encoding.\n\nOpera used to support gzip TE, but I'm not sure they're keeping it.\n\nlibcurl supports compressed transfer encodings since 2011: http://curl.haxx.se/changes.html#7_21_6\n\n\u2026however, there's no webserver that will serve this. Once it's available in httpd it should be safe to enable it by default (legacy clients don't request gzip TE). Famous last words?"}, {"count": 5, "tags": [], "bug_id": 52860, "attachment_id": null, "id": 169843, "time": "2013-08-31T01:12:57Z", "creator": "jcea@jcea.es", "creation_time": "2013-08-31T01:12:57Z", "is_private": false, "text": "I just hit this. I was trying to use \"Range\" with \"Content-encoding: gzip\", and that is not working as expected. Investigating what could I do, I got this in my Python code:\n\n\"\"\"\n    # Interferencia con 'range'\n    # http://forum.nginx.org/read.php?2,209738,210053\n    del s.headers[\"Accept-Encoding\"]\n    # Esto no hace nada en las versiones actuales de Apache,\n    # pero s\u00ed funcionar\u00e1 en las futuras:\n    # https://issues.apache.org/bugzilla/show_bug.cgi?id=52860\n    # Tambi\u00e9n se puede controlar a trav\u00e9s de un CGI.\n    s.headers[\"TE\"] = \"gzip\"\n\"\"\"\n\nSo, yes, when Apache supports \"TE: gzip\", there is at least a client who is going to use it :)."}, {"count": 6, "tags": [], "bug_id": 52860, "attachment_id": null, "id": 189288, "time": "2016-03-09T02:35:35Z", "creator": "wiml@omnigroup.com", "creation_time": "2016-03-09T02:35:35Z", "is_private": false, "text": "Looking at this patch, I don't understand why it is ignoring the TE: header if the TE token appears in the Connection: header. From my understanding of the Connection: header (RFC 7230 6.1), that should only prevent Apache from forwarding the TE header onwards through a proxy. It shouldn't prevent Apache from interpreting the TE header for itself."}]
[{"count": 0, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "is_private": false, "id": 134051, "time": "2010-01-30T16:53:02Z", "bug_id": 48643, "creation_time": "2010-01-30T16:53:02Z", "text": "The code for the save() method reads:\n\ntry {\n    fos = new FileOutputStream(file.getAbsolutePath());\n    oos = new ObjectOutputStream(new BufferedOutputStream(fos));\n} catch (IOException e) {\n    if (oos != null) { <== oos can only be null here\n        try {\n            oos.close();\n        } catch (IOException f) {\n            // Ignore\n        }\n    }\n    throw e;\n}\n\nPresumably the catch statement should try to close fos instead?\n\nSimilarly for the load() method; at line 280/281 there is the code:\n\n        } catch (IOException e) {\n            if (ois != null) {\n\nHowever, ois is the last object created by the try clause, so must be null.\nProbably the code should check and close bis and/or fis.\n\nAt the end of the load() method, the code says:\n\n            // Close the input stream\n            if (ois != null) {\n\nHowever, ois cannot be null at that point.\n\nNote: these bugs were detected by the Eclipse compiler."}, {"count": 1, "tags": [], "bug_id": 48643, "text": "There are similar problems in session.StandardManager.doUnload():\n\nline 502, 530, and at line 542 there's a block of code:\n\n// Flush and close the output stream\ntry {\n    oos.flush();\n    oos.close();\n    oos = null;\n} catch (IOException e) {\n    if (oos != null) {\n        try {\n            oos.close();\n        } catch (IOException f) {\n            // Ignore\n        }\n        oos = null;\n    }\n    throw e;\n}\n\nThis code looks as though it is trying to close() oos if the flush() fails, but it will also try to close() oos if the close() fails.\n\nProbably the first oos.close() should be removed. \nAFAICT, there is also no need to set the oos field to null.", "id": 134052, "time": "2010-01-30T17:10:36Z", "creator": "sebb@apache.org", "creation_time": "2010-01-30T17:10:36Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 48643, "attachment_id": null, "is_private": false, "id": 134054, "time": "2010-01-30T17:49:39Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-01-30T17:49:39Z", "text": "(In reply to comment #0)\n> Note: these bugs were detected by the Eclipse compiler.\n\nI think it is pointless to try to please Eclipse IDE here. That \"possible null access check\" is an optional feature (off by default), depends on the version of IDE that you are using, and also buggy at times, as I experiences just recently (it gave me contradictory tips regarding \"unnecessary null check\" for one line, and then \"possible null pointer access\" for the same variable few lines later). Then some other tool will start complaining that we have not closed a stream there...\n\n\nBack to the code: I'll agree that you are right that first oos.close(); is actually never called,  but I do not think we need to close fos here.\n\nI do not see what can fail in the \"new ObjectOutputStream(new BufferedOutputStream(fos))\" line, besides maybe an OutOfMemoryError.\n\nAs of now, the code is easier to read, even if it is redundant."}, {"count": 3, "text": "(In reply to comment #2)\n> (In reply to comment #0)\n> > Note: these bugs were detected by the Eclipse compiler.\n> \n> I think it is pointless to try to please Eclipse IDE here. That \"possible null\n> access check\" is an optional feature (off by default), depends on the version\n> of IDE that you are using, and also buggy at times\n\nIt's not a question of trying to 'please' Eclipse. \nIt has reported a possible error; in this case manual inspection shows that it was correct to do so.\n\n> Back to the code: I'll agree that you are right that first oos.close(); is\n> actually never called,  but I do not think we need to close fos here.\n\nIn which case I think the try catch block can be removed entirely.\n\n> I do not see what can fail in the \"new ObjectOutputStream(new\n> BufferedOutputStream(fos))\" line, besides maybe an OutOfMemoryError.\n\nAgreed. So why try to close oos?\n\n> As of now, the code is easier to read, even if it is redundant.\n\nDisagree - it's confusing to have code that cannot be executed.", "bug_id": 48643, "is_private": false, "id": 134058, "time": "2010-01-31T03:23:42Z", "creator": "sebb@apache.org", "creation_time": "2010-01-31T03:23:42Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 48643, "attachment_id": null, "is_private": false, "id": 134289, "time": "2010-02-07T14:16:50Z", "creator": "markt@apache.org", "creation_time": "2010-02-07T14:16:50Z", "text": "Fix in trunk for 7.0.x"}]
[{"count": 0, "tags": [], "creator": "lianggt08@sei.pku.edu.cn", "attachment_id": null, "id": 153969, "time": "2012-02-21T10:22:02Z", "bug_id": 52723, "creation_time": "2012-02-21T10:22:02Z", "is_private": false, "text": "The fix revision 907502 was aimed to remove an resource leak bug on the \nFileOutputStream object \"fos\" and the ObjectOutputStream \"oos\" in the method \n\"doUnload\" of the file \n\"/tomcat/tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java\" , \nbut it is incomplete. \n\nWhen the ObjectOutputStream object is created unsuccessfully but the temp \nBufferedOutputStream object is created successfully, the temp object will be \nleaked. \n\nBesides that, the \"oos\" is not closed in all the pathes.  The best way to close \nsuch resource object is putting such close operations in the finaly block of a \ntry-catch-finally structure."}, {"count": 1, "tags": [], "bug_id": 52723, "attachment_id": null, "text": "Severity set to something more realistic given the likelihood of this ever\nactually happening.\n\nFixed in trunk and 7.0.x for 7.0.27. Proposed for 6.0.x although I'd be equally\nhappy with WONTFIX for 6.0.x.", "id": 154769, "time": "2012-03-09T20:35:31Z", "creator": "markt@apache.org", "creation_time": "2012-03-09T20:35:31Z", "is_private": false}, {"count": 2, "tags": [], "text": "> When the ObjectOutputStream object is created unsuccessfully but the temp \nBufferedOutputStream object is created successfully, the temp object will be \nleaked.\n\nBufferedOutputStream does not hold any native resources. Its close() method is mostly a noop. There is no need to call it explicitly in the scenario that you are describing.", "attachment_id": null, "id": 155161, "creator": "knst.kolinko@gmail.com", "time": "2012-03-21T00:18:14Z", "bug_id": 52723, "creation_time": "2012-03-21T00:18:14Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 52723, "text": "It isn't going to add any benefit so lets not change the 6.0.x code.", "id": 159662, "time": "2012-06-03T21:22:39Z", "creator": "markt@apache.org", "creation_time": "2012-06-03T21:22:39Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 52723, "attachment_id": null, "text": "My comment 2 was wrong. I missed that the original code closes oos (which is always null there).  It should have closed the file stream instead.\n\noos constructor can throw IOException because it writes stream header (though due to buffering it is unlikely).", "id": 159663, "time": "2012-06-03T21:29:35Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-06-03T21:29:35Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 52723, "text": "Hi, Konstantin, can you explain more about your new comment (Comment 4)? \nDoes the BufferedOutputStream temp object need to be closed in this code piece?", "id": 159668, "time": "2012-06-04T10:36:48Z", "creator": "lianggt08@sei.pku.edu.cn", "creation_time": "2012-06-04T10:36:48Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 52723, "attachment_id": null, "text": "(In reply to comment #5)\n1. BufferedOutputStream does not deserve closing, because it is in memory only. No native resources are leaking.\n\n- ObjectOutputStream would never need to be closed. If an IOException happens  oos will be null as assignment never happens.\n\n- The only one that really has to be closed is FileOutputStream.\n\n- The only situation when FileOutputStream is not-null and needs to be closed is when its constructor succeeded, but constructors of other streams failed.\n\n2. The only one of other constructors that can (in theory) fail with IOException is ObjectOutputStream.\n\nIt completes with IOException iff call to ObjectOutputStream#writeStreamHeader() throws an IOException.\n\nMy Comment 4 was caused by this point \"2.\".\n\nActually, looking further, the writeStreamHeader() method writes 4 bytes. As those 4 bytes are cached in BufferedOutputStream, an IOException cannot really happen there.\n\nSo sorry for the noise. It is not worth for 6.0.", "id": 159693, "time": "2012-06-05T00:23:34Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-06-05T00:23:34Z", "is_private": false}]
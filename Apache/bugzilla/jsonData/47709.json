[{"count": 0, "tags": [], "bug_id": 47709, "attachment_id": 24148, "id": 129793, "time": "2009-08-19T11:23:08Z", "creator": "adelmelle@apache.org", "creation_time": "2009-08-19T11:23:08Z", "is_private": false, "text": "Created attachment 24148\namendment to font-shorthand-test which makes the build fail\n\nParsing of a very simple value for the font shorthand property currently fails\nin FOP Trunk.\n\nIn attach, a patch/amendment to the related FO Tree testcase which, if applied,\nshows that it does not pass..."}, {"count": 1, "tags": [], "creator": "levinson@intersystems.com", "text": "Created attachment 24277\nAllow case when no font-family is quoted and no comma-separated list of font families\n\nAllow case when no font-family is quoted and no comma-separated list of font families.\n\nThe code in FontShorthandProperty is looking for the beginning of the font-family.  If the font-family contains commas then the code works as before.  If the font-family begins with a quote the code works as before.  There was one case missing - when the code is looking for the beginning of the font family but there are no commas and no quotes.\n\nThe font-family can be quite complex containing commas, single quoted strings, double quote strings, and strings without quotes but the parsing of this complex expression is taken care of by FontFamilyProperty.  All FontShorthandProperty does is look for where the font-family begins.  It almost did this correctly (before this patch) when the font-family contained commas or consisted of a quoted string.  Now there is the case when the font-family contains no quotes and no commas.\n\nHowever, there is a fly in the ointment.  In testing this change (and in testing the previous unchanged code), I added the following test case, which fails in both cases.\n\n     <fo:block font=\"xx-large/1.4 Arial, 'Times New Roman', sans-serif\">\n        <test:assert property=\"font-family\" expected=\"[Arial, Times New Roman, sans-serif]\"/>\n        <test:assert property=\"font-size\" expected=\"20736mpt\"/>\n        <test:assert property=\"font-weight\" expected=\"400\" />\n        <test:assert property=\"font-style\" expected=\"NORMAL\" />\n        <test:assert property=\"line-height.optimum\" expected=\"29030mpt\" />\n        <test:assert property=\"font-variant\" expected=\"NORMAL\" />\n        Test font shorthand\n      </fo:block> \n\nThere seems to be a problem when the quote follows a comma.  I will add a patch to font-shorthand-test.fo which demonstrates this problem, and will continue to diagnose the code to see what further problems in the code are causing this problem.", "id": 130453, "time": "2009-09-16T10:52:07Z", "bug_id": 47709, "creation_time": "2009-09-16T10:52:07Z", "is_private": false, "attachment_id": 24277}, {"count": 2, "tags": [], "creator": "vhennebert@gmail.com", "text": "*** Bug 47859 has been marked as a duplicate of this bug. ***", "id": 130556, "time": "2009-09-21T04:13:27Z", "bug_id": 47709, "creation_time": "2009-09-21T04:13:27Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 47709, "attachment_id": null, "is_private": false, "id": 130557, "time": "2009-09-21T04:15:56Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-09-21T04:15:56Z", "text": "(In reply to comment #2)\n> *** Bug 47859 has been marked as a duplicate of this bug. ***\n\nSee augmented patch to font-shorthand-test in bug report above."}, {"count": 4, "tags": [], "bug_id": 47709, "attachment_id": null, "is_private": false, "id": 130558, "time": "2009-09-21T04:38:54Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-09-21T04:38:54Z", "text": "Hi Jonathan,\n\nThank you for your contribution to fixing this issue.\n\nI think the whole parsing of this property needs to be refactored, because it's unnecessarily complicated and doesn't work. I don't really get the purpose of the \"while (!fontFamilyParsed)\" loop but it seems to me that it's doing a job that should be left over to the FontFamilyProperty parser. Also, it doesn't seem to handle the case where there are more than one comma (i.e., at least 3 families specified). If more than one font-style/-variant/-weight is specified, it will try to parse the second value (say, font-variant) as a font family. Also, it tries to apply a special treatment when system fonts (caption, icon, menu...) are specified, whereas it is explicitly stated in the Recommendation that they don't apply to XSL-FO.\n\nI think the best way to handle that is to write a parser that follows the grammar given by the Recommendation. Hopefully a simple LL parser will do [1], but given that all of the sub-properties accept the 'inherit' keyword it will probably not be LL(1). If an LL parser can't be used, then we will have to use an LR one [2], which is slightly more problematic since it cannot be easily coded by hand, and we will have to rely on an external parsing library.\n\nI suggest you to look if an LL parser can be written to properly parse this property, and report back here if it's not the case, and if we must consider other solutions.\n\n[1] http://en.wikipedia.org/wiki/LL_parser\n[2] http://en.wikipedia.org/wiki/LR_parser\n\nThanks,\nVincent\n\n\n(In reply to comment #1)\n> Created an attachment (id=24277) [details]\n> Allow case when no font-family is quoted and no comma-separated list of font\n> families\n> \n> Allow case when no font-family is quoted and no comma-separated list of font\n> families.\n> \n> The code in FontShorthandProperty is looking for the beginning of the\n> font-family.  If the font-family contains commas then the code works as before.\n>  If the font-family begins with a quote the code works as before.  There was\n> one case missing - when the code is looking for the beginning of the font\n> family but there are no commas and no quotes.\n> \n> The font-family can be quite complex containing commas, single quoted strings,\n> double quote strings, and strings without quotes but the parsing of this\n> complex expression is taken care of by FontFamilyProperty.  All\n> FontShorthandProperty does is look for where the font-family begins.  It almost\n> did this correctly (before this patch) when the font-family contained commas or\n> consisted of a quoted string.  Now there is the case when the font-family\n> contains no quotes and no commas.\n> \n> However, there is a fly in the ointment.  In testing this change (and in\n> testing the previous unchanged code), I added the following test case, which\n> fails in both cases.\n> \n>      <fo:block font=\"xx-large/1.4 Arial, 'Times New Roman', sans-serif\">\n>         <test:assert property=\"font-family\" expected=\"[Arial, Times New Roman,\n> sans-serif]\"/>\n>         <test:assert property=\"font-size\" expected=\"20736mpt\"/>\n>         <test:assert property=\"font-weight\" expected=\"400\" />\n>         <test:assert property=\"font-style\" expected=\"NORMAL\" />\n>         <test:assert property=\"line-height.optimum\" expected=\"29030mpt\" />\n>         <test:assert property=\"font-variant\" expected=\"NORMAL\" />\n>         Test font shorthand\n>       </fo:block> \n> \n> There seems to be a problem when the quote follows a comma.  I will add a patch\n> to font-shorthand-test.fo which demonstrates this problem, and will continue to\n> diagnose the code to see what further problems in the code are causing this\n> problem."}, {"count": 5, "tags": [], "text": "Hi Vincent,\n\nIt was my pleasure to help out.  Thank you for your review of the problems you think still remain in the font shorthand code.  \n\nWhen you closed 47859, did you noticed I had attached a patch that fixes one of the issues you mention below:\n\n\"Also, it doesn't\nseem to handle the case where there are more than one comma (i.e., at least 3\nfamilies specified).\"\n\nThis patch, which (I believe) fixes the problem you mention, was attached to 47859, which you closed as a duplicate. \n\nI infer from reading and studying the code that the purpose of the complicated \"\"while (!fontFamilyParsed)\" loop is to identify the beginning of the font family token.  The FontFamilyProperty parser assumes it has been given a string which represents a font family and the font shorthand routine is trying to identify the font family token (a string) which is sent to FontFamilyProperty.  The font shorthand code is not trying to do any parsing.  I say this with all due respect for your greater experience with Apache FOP.  \n\nYou've made other comments I'll have to investigate before replying further.  I need to add more test cases to verify that my fix (the one in 47859) corrects all issues with font shorthand property.\n\nI can see your point about the desirability of a font shorthand parser.  Currently the font short hand code tries to identify the strings which should be sent to each of the font property parsers such as FontFamilyProperty.  So the font shorthand code is a tokenizer rather than a parser.  Its goal is to identify the tokens and then send the tokens to property parsers for further processing.  It could be a tokenizer is all this really needed, but I don't know at this point.\n\nBest Regards,\nJonathan S. Levinson\nSenior Software Developer\nObject Group\nInterSystems\n617-621-0600", "is_private": false, "bug_id": 47709, "id": 130562, "time": "2009-09-21T10:19:15Z", "creator": "levinson@intersystems.com", "creation_time": "2009-09-21T10:19:15Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "levinson@intersystems.com", "text": "Created attachment 24298\nGet font short hand completely working\n\nI tested a variety of cases such as:\n\n          <fo:block font=\"italic small-caps normal 12pt/150% Arial, Helvetica, sans-serif\">\n        <test:assert property=\"font-family\" expected=\"[Arial, Helvetica, sans-serif]\" />\n        <test:assert property=\"font-size\" expected=\"12000mpt\" />\n        <test:assert property=\"font-weight\" expected=\"400\" />\n        <test:assert property=\"font-style\" expected=\"ITALIC\" />\n        <test:assert property=\"line-height.optimum\" expected=\"18000mpt\" />\n        <test:assert property=\"font-variant\" expected=\"SMALL_CAPS\" />\n        Test font shorthand\n      </fo:block> \n\n     <fo:block font=\"xx-large/1.4 Arial, 'Times New Roman', sans-serif\">\n        <test:assert property=\"font-family\" expected=\"[Arial, Times New Roman, sans-serif]\"/>\n        <test:assert property=\"font-size\" expected=\"20736mpt\"/>\n        <test:assert property=\"font-weight\" expected=\"400\" />\n        <test:assert property=\"font-style\" expected=\"NORMAL\" />\n        <test:assert property=\"line-height.optimum\" expected=\"29030mpt\" />\n        <test:assert property=\"font-variant\" expected=\"NORMAL\" />\n        Test font shorthand\n      </fo:block>\n\nI think FontShortHandProperty.java now works and does not need to be an LL(k) or LR(k) parser.\n\nThe code looks complex but in each case of font property (such as font variant or font family) it is defining a token to be parsed so it is is tokenizing code.  It could probably be refactored to be easier to understand and read.  The code is not parsing but tokenizing.\n\nThere is an additional remark I made about this solution (posted before).  The solution seems to have been inadvertently ignored when the tests and patch I made were marked as a duplicate.", "id": 130564, "attachment_id": 24298, "bug_id": 47709, "creation_time": "2009-09-21T13:29:20Z", "time": "2009-09-21T13:29:20Z", "is_private": false}, {"count": 7, "tags": [], "text": "Created attachment 24343\nFix parsing of font-size and line height\n\nI use Java RegEx to parse font-size and line height.\n\nI also (in next patch) add a patch to font shorthand regression test that tests various combinations, including line-height -> space.\n\nI ran unit tests on it and no new failures.\n\nI ran check-style on it and corrected all warnings and errors.", "attachment_id": 24343, "id": 130886, "creator": "levinson@intersystems.com", "time": "2009-10-05T11:16:00Z", "bug_id": 47709, "creation_time": "2009-10-05T11:16:00Z", "is_private": false}, {"count": 8, "tags": [], "text": "Created attachment 24344\nAdd more tests to font-shorthand-test\n\nI add more tests to font-shorthand-test, testing various combinations, including testing whether font-size/line-height can have spaces around the slash and whether line-height -> space will be parsed.", "is_private": false, "bug_id": 47709, "id": 130887, "time": "2009-10-05T11:18:35Z", "creator": "levinson@intersystems.com", "creation_time": "2009-10-05T11:18:35Z", "attachment_id": 24344}, {"count": 9, "tags": [], "creator": "gadams@apache.org", "text": "resetting P2 open bugs to P3 pending further review", "id": 157595, "time": "2012-04-07T01:45:04Z", "bug_id": 47709, "creation_time": "2012-04-07T01:45:04Z", "is_private": false, "attachment_id": null}]
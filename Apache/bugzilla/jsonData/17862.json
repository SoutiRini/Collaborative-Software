[{"count": 0, "tags": [], "creator": "mhilpert@gmx.de", "attachment_id": null, "id": 32933, "creation_time": "2003-03-11T09:39:17Z", "time": "2003-03-11T09:39:17Z", "bug_id": 17862, "text": "The Apache Xerces package has a class Version with the static method getVersion\n():\n\norg.apache.xerces.impl.Version.getVersion()\n\nWOuld be nice to have the same in Log4J :-]", "is_private": false}, {"count": 1, "tags": [], "bug_id": 17862, "text": "*** Bug 22380 has been marked as a duplicate of this bug. ***", "id": 61399, "time": "2004-07-30T18:59:37Z", "creator": "mprice@atl.lmco.com", "creation_time": "2004-07-30T18:59:37Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 17862, "text": "*** Bug 19258 has been marked as a duplicate of this bug. ***", "id": 61401, "time": "2004-07-30T18:59:57Z", "creator": "mprice@atl.lmco.com", "creation_time": "2004-07-30T18:59:57Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 17862, "attachment_id": null, "id": 76889, "time": "2005-07-01T19:51:36Z", "creator": "mwomack@apache.org", "creation_time": "2005-07-01T19:51:36Z", "is_private": false, "text": "We should include this in the 1.3 release."}, {"count": 4, "tags": [], "bug_id": 17862, "text": "*** Bug 36571 has been marked as a duplicate of this bug. ***", "id": 79734, "time": "2005-09-09T17:01:18Z", "creator": "mwomack@apache.org", "creation_time": "2005-09-09T17:01:18Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 17862, "attachment_id": 17656, "id": 85699, "time": "2006-02-11T16:10:09Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-11T16:10:09Z", "is_private": false, "text": "Created attachment 17656\nPatch that adds a public getVersion() method to LogManager (on 1.2 branch)\n\nThis patch adds a public class method named \"getVersion\" to class LogManager.\nThe method takes no arguments.\n\nThe implementation of the method just returns a text string \"1.2.14\". This text\nwill need to be updated with each release.\n\nAn alternative implementation would allow the text string to be adjusted\nautomatically (with the <replace> task). However, this would require some work\nto the build.xml file. A disadvantage is, that the code under src/java is then\nno longer an exactly the code that is compiled. Since updating this single text\nstring is extremely simple, I personally prefer this approach."}, {"count": 6, "attachment_id": null, "creator": "wfe.dehaan@gmail.com", "is_private": false, "id": 85700, "time": "2006-02-11T16:22:13Z", "bug_id": 17862, "creation_time": "2006-02-11T16:22:13Z", "tags": [], "text": "(In reply to comment #5)\n> This patch adds a public class method named \"getVersion\" to class LogManager.\n> The method takes no arguments.\n\nNote that the patch is against the 1.2 branch. Adding equivalent code to the 1.3\ncodebase should be a simple exercise. If you want me to submit another patch\nagainst 1.3, let me know.\n\nI'll be happy to, since I would like to see this enhancement implemented in both\nbranches. In our open-source project XINS we aim to detect versions of libraries\nat runtime, and log these for operational and investigation purposes. Also, we\nhave a meta-function for retrieving these versions at run-time.\n\nWhat remains a question for me is whether the LogManager class is the\nappropriate class to add this method. Other classes, such as Logger, would also\nqualify IMHO. Alternatively, a new class named Library or Version could be\nintroduced for this purpose."}, {"count": 7, "tags": [], "bug_id": 17862, "attachment_id": null, "id": 85734, "time": "2006-02-13T06:14:14Z", "creator": "mwomack@apache.org", "creation_time": "2006-02-13T06:14:14Z", "is_private": false, "text": "I'll add this into version 1.3 soon, but wanted opinions as to \nimplementation.  The Xerces version hard codes the version into the Version \nclass via the ant build script.  Do we want to do it that way or maybe read it \nfrom a resource in the jar?  That way we can avoid needing to generate the \ncode for this class with each build.  Comments? Other suggestions?"}, {"count": 8, "tags": [], "bug_id": 17862, "text": "For our in-house build scripts, we have a ant-based check that verifies that the\nproject.properties (a file) project version definition is equal to the one in\nthe java source-file _on release builds_. However, if you just do ordinary test\nbuilds, this test isn't done. This test basically catches myself _every time_;\nit is so difficult to remember to synch those! (And before that, I always\nreleased code that had the wrong version altogether).\n  (Also, on non-release-builds, the string \"-POST\" is added to all deliverables'\nfilenames (jars, and tar.gz), so that it is not possible to confuse a proper\nrelease from a \"test compiled\" (\"post\" is supposed to mean that it is after the\n1.3 release: 1.3-POST. You change to 1.4 when you build the 1.4 release, then\nall test-builds after this gets 1.4-POST. Okay, enough already..).\n\nBUT in regards to the version-string, here is another detail that one might want\nto consider:\n\nA public static final String LOG4J_VERSION = \"1.3.15\", and the method public\nstatic getLog4jVersion() (return LOG4J_VERSION; } behaves slightly different in\nan interesting way: accesses to the field from a user's code will be resolved\n\"statically\" (as with e.g. an integer) _on compile time_, while the method will\nalways have to be resolved dynamically, e.g. link/run-time. This means that it\nis possible, when a system starts up, to check whether it is running against the\nversion that it was compiled against - and also display this somewhere: \"I was\ncompiled against 1.3.15, [and running on same|but is running on X]\".\n  The static field resolving of String is definately defined in the java\ncompiler specs (thus the \"compiled against\" is bound to work), but the\nmethod-access I am slightly more uncertain about (the \"I am running against\nnow\"). The difference works for me, but I am not _certain_ that it isn't allowed\nfor a compiler to -statically inline- the method body, since the method body is\nstatical itself. The hunch is that it isn't allowed, since the method might\nchange in a future version, but so could the static string, and that is however\nallowed to be inlined..\n  It is very neat to be able to go to the \"Monitor page\" of a web-system and\nhave it list all these system libraries' compiled-against and running-on-now\nversions.", "id": 85755, "time": "2006-02-14T11:31:45Z", "creator": "apache@stolsvik.com", "creation_time": "2006-02-14T11:31:45Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 17862, "attachment_id": null, "id": 85783, "time": "2006-02-14T23:07:38Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-14T23:07:38Z", "is_private": false, "text": "I see the following options for updating the version string:\n1) Manually\n2) Automatically from the build script\n\nConsidering the comment #8 from Endre St\u00f8lsvik, it indeed sounds like it's wise\nto let it be done automatically.\n\nThen I see the following options for locations for storing the version string:\na) in a static string in some class\nb) in the Manifest.mf file, inside the JAR file\nc) in a separate resource inside the JAR file\n\nThe last two options have multiple advantages over the former. As Mark Womack\nmentions in comment #7 it avoids having to recompile code which is an issue\nbecause it would normally make the system dependant on the javac dependency\nalgorithm, which is timestamp-based and may be tricky.\n\nAlso, the second and third option allows checking the version by just peeking at\nthe JAR file. That's an additional feature!\n\nOption (b) has the advantage of being a standard approach. So assuming we can\nget to this information, even on JDK 1.1, I suggest we choose this one."}, {"count": 10, "tags": [], "bug_id": 17862, "text": "Re: comment #9: We do indeed also put the version information, and build date\n(and are considering build-machine etc), in the manifest file.\n\nI didn't quite get the point about \"dependant on the javac dependency\nalgorithm\".. If you simply _check_ that the versions match against some\nproject.properties-or-whatever file, then there won't be any timestamp. And did\nyou consider the somewhat strange but cool feature where your application code\ncan have its \"compiled against version X of log4j\" embedded in one of its class\nfiles? .. the point is that if you later end up with a later version of log4j in\nclasspath, this can be caught by the application, and possibly mention it in\nsome log or similar.", "id": 85787, "time": "2006-02-15T00:10:50Z", "creator": "apache@stolsvik.com", "creation_time": "2006-02-15T00:10:50Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 17862, "text": "Re comment #10: If Log4J already puts the version information and build date in\nthe manifest file, then the static getVersion() method can perhaps just get it\nfrom there already.\n\nMy point about \"dependant on the javac dependency algorithm\" is assuming an\napproach where the version is specified in some file (version.txt or build.xml\nor whatever).\n\nThe feature of having the compiled version embedded in a class file indeed\nsounds \"cool\" but with this solution I don't really see how we could accomplish\nthis without some fancy manifest file parsing at compile-time, for example using\nsome custom Ant task. Would you have any more specific ideas on this?\n", "id": 85804, "time": "2006-02-15T09:20:16Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-15T09:20:16Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 17862, "text": "Re: comment #11: specific idea: Yes, read comment #9, section 3 (given that it\nhas three sections).", "id": 85811, "time": "2006-02-15T13:02:10Z", "creator": "apache@stolsvik.com", "creation_time": "2006-02-15T13:02:10Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "mwomack@apache.org", "attachment_id": null, "id": 86380, "creation_time": "2006-03-02T07:52:17Z", "time": "2006-03-02T07:52:17Z", "bug_id": 17862, "text": "For version 1.3 I have added org.apache.log4j.Version which reads the version,\napi version, milestone, and milestone version from a resource\norg.apache.log4j.versionInfo.  This is basically a property file that is\npopulated with the relevant information at build time and included in the\nclasses/jar.  Therefore, the Version class does not require any generation at\nbuild time.  I chose a different resource than the manifest because the manifest\nis one of those things that people can muck with.  Someone can still muck with\nversionInfo, but that is what signed jars are for I suppose.\n\nPlease take a look and see if it meets your needs.  It will be included in the\n1.3-alpha-9 build shortly.\n\nRevision 382309", "is_private": false}, {"count": 14, "attachment_id": null, "bug_id": 17862, "is_private": false, "id": 86382, "time": "2006-03-02T10:07:42Z", "creator": "apache@stolsvik.com", "creation_time": "2006-03-02T10:07:42Z", "tags": [], "text": "No one have any comments to the idea I floated in comment #9?\n\n(The solution is AFAIK correct according to specs - a \"String literal\" is\nresolved compile-time in the same fashion as an int.)"}, {"count": 15, "attachment_id": null, "bug_id": 17862, "text": "Sorry I came to this late.  Some additional references:\n\nhttp://java.sun.com/j2se/1.4.2/docs/guide/versioning/spec/versioningTOC.html\nhttp://www.javaworld.com/javaworld/jw-09-2002/jw-0920-jpvs.html\n\nThe proposed class appears to duplicate some of the functionality of the Java Product Versioning \nspecification but lacks some of its nuances.  \n\nThe implementation version of log4j has been included in the log4j.jar manifest in both the 1.2 and 1.3 \nbranches.  The following code should be able to retrieve the info:\n\nString log4jImpl = org.lang.Package.getPackage(\"org.apache.log4j\").getImplementationVersion();\n\nThe Versioning specification provides two distinct versioning identification, the implementation and the \nspecification.  log4j has only included implementation version info (which is likely a good thing).  The \nspecs cover this in more detail but the idea is that there is no specified format for implementation \nversion identifiers and no implied compatibility between implementations unless their implementation \nstrings are precisely identical.  Specifications have a specified format (1.2.3....) where compatibility \nbetween specifications is inferred in a typical manner.\n\nOnce the 1.3 API's have firmed up, it may be desirable to add a specification version to the manifest \nfile, so you could task things like:\n\nboolean isLog4J131_compatible = Package.getPackage(\"org.apache.log4j\").isCompatibleWith(\"1.3.1\");\n", "id": 86419, "time": "2006-03-02T19:33:51Z", "creator": "carnold@apache.org", "creation_time": "2006-03-02T19:33:51Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "bug_id": 17862, "attachment_id": null, "id": 86435, "time": "2006-03-03T05:12:50Z", "creator": "mwomack@apache.org", "creation_time": "2006-03-03T05:12:50Z", "is_private": false, "text": "Based on this, I removed the Version stuff I had previously added.  Try using \nthe jdk Package class to read version information.  Is it sufficient?"}, {"count": 17, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 92800, "creation_time": "2006-08-31T15:37:24Z", "time": "2006-08-31T15:37:24Z", "bug_id": 17862, "text": "Marking as fixed since manifest information is sufficient to use the Package.getImplementationVersion() \nAPI.", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 3773, "is_private": false, "id": 5903, "creation_time": "2001-09-21T16:00:37Z", "time": "2001-09-21T16:00:37Z", "creator": "mkiss@spinnakernet.com", "text": "I am trying to match the string (nothing after the final \"6d\"):\n\nUUID=3babc217.0007d4e1.74726163.006e616d\n\nwith the following expressions:\n\n1) 'UUID=\\w{8}\\.\\w{8}\\.\\w{8}\\.\\w{8}'  -> Match succeeds\n2) 'UUID=(\\w{8}\\.){3}\\w{8}'  -> Match fails\n3) 'UUID=(\\w{8}\\.){2}\\w{8}'  -> Match succeeds\n\nI think there is a parse bug, these expressions 1 & 2 seem identical. If I have\nmisinterpreted the expression syntax, sorry for the report. The test trace\noutput for expressions 1 & 2 is below:\n\n$ ./RETest -i 'UUID=\\w{8}\\.\\w{8}\\.\\w{8}\\.\\w{8}'\n\nUUID=\\w{8}\\.\\w{8}\\.\\w{8}\\.\\w{8}\n\n0. OP_BRANCH, opdata = 0, next = 119\n3. OP_ATOM, opdata = 5, next = 11, \"UUID=\"\n11. OP_ESCAPE, opdata = 119, next = 14\n14. OP_ESCAPE, opdata = 119, next = 17\n17. OP_ESCAPE, opdata = 119, next = 20\n20. OP_ESCAPE, opdata = 119, next = 23\n23. OP_ESCAPE, opdata = 119, next = 26\n26. OP_ESCAPE, opdata = 119, next = 29\n29. OP_ESCAPE, opdata = 119, next = 32\n32. OP_ESCAPE, opdata = 119, next = 35\n35. OP_ATOM, opdata = 1, next = 39, \".\"\n39. OP_ESCAPE, opdata = 119, next = 42\n42. OP_ESCAPE, opdata = 119, next = 45\n45. OP_ESCAPE, opdata = 119, next = 48\n48. OP_ESCAPE, opdata = 119, next = 51\n51. OP_ESCAPE, opdata = 119, next = 54\n54. OP_ESCAPE, opdata = 119, next = 57\n57. OP_ESCAPE, opdata = 119, next = 60\n60. OP_ESCAPE, opdata = 119, next = 63\n63. OP_ATOM, opdata = 1, next = 67, \".\"\n67. OP_ESCAPE, opdata = 119, next = 70\n70. OP_ESCAPE, opdata = 119, next = 73\n73. OP_ESCAPE, opdata = 119, next = 76\n76. OP_ESCAPE, opdata = 119, next = 79\n79. OP_ESCAPE, opdata = 119, next = 82\n82. OP_ESCAPE, opdata = 119, next = 85\n85. OP_ESCAPE, opdata = 119, next = 88\n88. OP_ESCAPE, opdata = 119, next = 91\n91. OP_ATOM, opdata = 1, next = 95, \".\"\n95. OP_ESCAPE, opdata = 119, next = 98\n98. OP_ESCAPE, opdata = 119, next = 101\n101. OP_ESCAPE, opdata = 119, next = 104\n104. OP_ESCAPE, opdata = 119, next = 107\n107. OP_ESCAPE, opdata = 119, next = 110\n110. OP_ESCAPE, opdata = 119, next = 113\n113. OP_ESCAPE, opdata = 119, next = 116\n116. OP_ESCAPE, opdata = 119, next = 119\n119. OP_END, opdata = 0, next = none\n> UUID=3babb63b.000402dc.74726163.006e616d\nMatch successful.\n$0 = UUID=3babb63b.000402dc.74726163.006e616d\n\n$ ./RETest -i 'UUID=(\\w{8}\\.){3}\\w{8}'\n\nUUID=(\\w{8}\\.){3}\\w{8}\n\n0. OP_BRANCH, opdata = 0, next = 122\n3. OP_ATOM, opdata = 5, next = 11, \"UUID=\"\n11. OP_OPEN, opdata = 1, next = 14\n14. OP_BRANCH, opdata = 0, next = 45\n17. OP_ESCAPE, opdata = 119, next = 20\n20. OP_ESCAPE, opdata = 119, next = 23\n23. OP_ESCAPE, opdata = 119, next = 26\n26. OP_ESCAPE, opdata = 119, next = 29\n29. OP_ESCAPE, opdata = 119, next = 32\n32. OP_ESCAPE, opdata = 119, next = 35\n35. OP_ESCAPE, opdata = 119, next = 38\n38. OP_ESCAPE, opdata = 119, next = 41\n41. OP_ATOM, opdata = 1, next = 45, \".\"\n45. OP_CLOSE, opdata = 1, next = 48\n48. OP_OPEN, opdata = 2, next = 51\n51. OP_BRANCH, opdata = 0, next = 79\n54. OP_ESCAPE, opdata = 119, next = 57\n57. OP_BRANCH, opdata = 0, next = 69\n60. OP_ESCAPE, opdata = 119, next = 63\n63. OP_BRANCH, opdata = 0, next = 66\n66. OP_GOTO, opdata = 0, next = 57\n69. OP_BRANCH, opdata = 0, next = 72\n72. OP_NOTHING, opdata = 0, next = 75\n75. OP_ATOM, opdata = 1, next = 79, \".\"\n79. OP_CLOSE, opdata = 2, next = 82\n82. OP_OPEN, opdata = 3, next = 85\n85. OP_BRANCH, opdata = 0, next = 95\n88. OP_ESCAPE, opdata = 119, next = 91\n91. OP_ATOM, opdata = 1, next = 95, \".\"\n95. OP_CLOSE, opdata = 3, next = 98\n98. OP_ESCAPE, opdata = 119, next = 101\n101. OP_ESCAPE, opdata = 119, next = 104\n104. OP_ESCAPE, opdata = 119, next = 107\n107. OP_ESCAPE, opdata = 119, next = 110\n110. OP_ESCAPE, opdata = 119, next = 113\n113. OP_ESCAPE, opdata = 119, next = 116\n116. OP_ESCAPE, opdata = 119, next = 119\n119. OP_ESCAPE, opdata = 119, next = 122\n122. OP_END, opdata = 0, next = none\n> UUID=3babb63b.000402dc.74726163.006e616d\nMatch failed.", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 3773, "is_private": false, "id": 45112, "time": "2003-10-06T05:38:35Z", "creator": "son@sparc.spb.su", "creation_time": "2003-10-06T05:38:35Z", "tags": [], "text": "The minimal regexp to reproduce the problem is (a{2}b){2}.\nHere is an output of RETest for this regexp:\nZ:\\src\\regexp\\jakarta-regexp\\build>v.jar org.apache.regexp.RETest -i (a{2}b){2}\n\n(a{2}b){2}\n\n0. OP_BRANCH, opdata = 0, next = 40\n3. OP_OPEN, opdata = 1, next = 6\n6. OP_BRANCH, opdata = 0, next = 21\n9. OP_ATOM, opdata = 1, next = 13, \"a\"\n13. OP_ATOM, opdata = 1, next = 17, \"a\"\n17. OP_ATOM, opdata = 1, next = 21, \"b\"\n21. OP_CLOSE, opdata = 1, next = 24\n24. OP_OPEN, opdata = 2, next = 27\n27. OP_BRANCH, opdata = 0, next = 37\n30. OP_NOTHING, opdata = 0, next = 33\n33. OP_ATOM, opdata = 1, next = 37, \"b\"\n37. OP_CLOSE, opdata = 2, next = 40\n40. OP_END, opdata = 0, next = none\n\nThe cause of the problem is in algorithm which RECompiler uses to handle\n<regexp>{n,m} construction.\nIt reduce n stored in bracketsMin array and restart parsing from begin of the \nregexp. But it doesn't clear barcketsXXX for nested constructions.\nThus when it next time finds one of nested brackets it thinks that it was {0, m}\nand replaces appropriate atom by OP_NOTHING."}, {"count": 2, "tags": [], "bug_id": 3773, "attachment_id": 8460, "id": 45113, "creation_time": "2003-10-06T05:40:09Z", "time": "2003-10-06T05:40:09Z", "creator": "son@sparc.spb.su", "text": "Created attachment 8460\nSuggested fix for the bug", "is_private": false}, {"count": 3, "tags": [], "bug_id": 3773, "attachment_id": null, "text": "Patch applied, thanks.", "id": 49473, "time": "2003-12-20T17:52:50Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-12-20T17:52:50Z", "is_private": false}]
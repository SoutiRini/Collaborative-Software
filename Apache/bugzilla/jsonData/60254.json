[{"count": 0, "tags": [], "bug_id": 60254, "attachment_id": null, "id": 194408, "time": "2016-10-14T07:55:47Z", "creator": "jens.borgland@gmail.com", "creation_time": "2016-10-14T07:55:47Z", "is_private": false, "text": "Unfortunately I don't have any actual repro steps for this issue but in our test environment we've seen NullPointerExceptions like the one shown below, and we've also from our logs concluded that calls to HttpServletRequest.getServletPath() at the same time returned null (which according to the Javadoc should never happen as far as I understand).\n\nThe issue is not easily reproducible - we've just seen it a few times in our load tests so I speculate that it may be due to some kind of race condition.\n\njava.lang.NullPointerException\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:247)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat com.REDACTED.SecurityFilter.processRequest(SecurityFilter.java:335)\n\tat com.REDACTED.SecurityFilter.doFilter(SecurityFilter.java:176)\n\tat com.REDACTED.AbstractFilter.doFilter(AbstractFilter.java:125)\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n\nWe're using Spring 4.3.3 if that's relevant (which I doubt it is). We've recently upgraded from Tomcat 8.0.33 to 8.0.37 and we didn't see the issue before (but given that the issue isn't easily reproduced that may of course just have been luck)."}, {"count": 1, "text": "All the evidence points to an application bug rather than a Tomcat bug.\n\nIt appears that the application is retaining a reference to an object (probably a request) and attempting to use it after Tomcat has completed the processing for that request.\n\nThe NPE is triggered because the FilterChain has been recycled.\n\nThe ServletPath is null because the request has been recycled.\n\nThis recycling occurs once the request has been processed.", "bug_id": 60254, "attachment_id": null, "id": 194411, "time": "2016-10-14T08:18:28Z", "creator": "markt@apache.org", "creation_time": "2016-10-14T08:18:28Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "jens.borgland@gmail.com", "attachment_id": null, "id": 194425, "time": "2016-10-14T13:35:01Z", "bug_id": 60254, "creation_time": "2016-10-14T13:35:01Z", "is_private": false, "text": "Thank you for your swift reply Mark! It makes sense I guess so I'm closing this.\n\nHowever, looking more at my logs I found that several things suggested that processing of at least parts of the request was made on a different thread (and if Tomcat finishes the processing of the request on that thread that would indeed mean that we have the situation you describe once control is returned to the original request thread) - so Spring MVC, which have support for asynchronous handling (although we don't use it) seemed like a likely culprit (we've recently updated Spring as well). But then I found the stack trace below, where my entire filter chain (which is pretty long) is missing. Doesn't this suggest some kind of Tomcat issue? Other requests for the same resource are passed through the filter chain (without Tomcat restarting in between or anything like that). The problem just went away after 40 minutes or so.\n\njava.lang.NullPointerException\n\tat com.REDACTED.ManifestController.getHeaderConfig(ManifestController.java:209)\n\tat sun.reflect.GeneratedMethodAccessor474.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:114)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:622)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1100)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:687)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)"}, {"count": 3, "tags": [], "creator": "markt@apache.org", "text": "(In reply to Jens Borgland from comment #2)\n\n<snip/>\n\n> But then I found the stack\n> trace below, where my entire filter chain (which is pretty long) is missing.\n> Doesn't this suggest some kind of Tomcat issue?\n\nUnlikely. The root cause is likely to be a reference being retained to the request object and that object being recycled after the filterchain is set up but before it is used. You might find it helpful to set this system property to true:\norg.apache.catalina.connector.RECYCLE_FACADES\n\nBugzilla is not well suited to support. The users list is the place to follow this up.", "id": 194437, "time": "2016-10-14T16:17:28Z", "bug_id": 60254, "creation_time": "2016-10-14T16:17:28Z", "is_private": false, "attachment_id": null}]
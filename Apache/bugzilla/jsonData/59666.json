[{"count": 0, "tags": [], "text": "Created attachment 33917\nCustom sorting on excel\n\nExcel is supporting sorting and custom sorting on cell range address which POI is not providing support to apply that.", "is_private": false, "id": 191417, "creator": "chennak.s@intellicus.com", "time": "2016-06-06T13:57:17Z", "bug_id": 59666, "creation_time": "2016-06-06T13:57:17Z", "attachment_id": 33917}, {"count": 1, "text": "Here is something I did to allow me to sort the rows in a sheet. It is not quite developed enough to contribute, but it works for what I needed. Maybe you can find some ideas.\n\nimport java.util.Iterator;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\n\npublic class SheetUtils {\n\t\n\tpublic static final int SORT_ASCENDING = 0;\n\tpublic static final int SORT_DESCENDING = 1;\n\t\n\tpublic static void sortSheet(Sheet sh, int start, int end, int col, int order) {\n\t\t\n\t\tfor (int ix = start; ix <= end-1; ix++) {\n\t\t\tfor (int iy = ix+1; iy <= end; iy++) {\n\t\t\t\tRow r1 = sh.getRow(ix);\n\t\t\t\tRow r2 = sh.getRow(iy);\n\t\t\t\tboolean swap = false;\n\t\t\t\tswitch (order) {\n\t\t\t\tcase SORT_ASCENDING:\n\t\t\t\t\tif (compareCell(r1, r2, col) > 0) {\n\t\t\t\t\t\tswap = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SORT_DESCENDING:\n\t\t\t\t\tif (compareCell(r1, r2, col) < 0) {\n\t\t\t\t\t\tswap = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (swap == true) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tswapRows(r1, r2);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static int compareCell(Row r1, Row r2, int col) {\n\t\t\n\t\tCell c1 = r1.getCell(col);\n\t\tCell c2 = r2.getCell(col);\n\t\tint cmp = compareType(c1, c2);\n\t\t\n\t\tswitch (cmp) {\n\t\tcase 0:\n\t\t\tswitch (c1.getCellType()) {\n\t\t\tcase Cell.CELL_TYPE_BOOLEAN:\n\t\t\t\tif (c1.getBooleanCellValue() == c2.getBooleanCellValue()) {\n\t\t\t\t\treturn 0;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse if (c1.getBooleanCellValue() == true) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\tcase Cell.CELL_TYPE_NUMERIC:\n\t\t\t\tif (c1.getNumericCellValue() < c2.getNumericCellValue()) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (c1.getNumericCellValue() == c2.getNumericCellValue()) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\tcase Cell.CELL_TYPE_STRING:\n\t\t\t\treturn c1.getStringCellValue().compareToIgnoreCase(c2.getStringCellValue());\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t\t}\n\t\tdefault:\n\t\t\treturn cmp;\n\t\t}\n\t}\n\n\tprivate static int compareType(Cell c1, Cell c2) {\n\t\t\n\t\tif (c1.getCellType() == c2.getCellType()) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (c1.getCellType() > c2.getCellType()) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic static void swapRows(Row r1, Row r2) throws Exception {\n\t\t\n\t\tSheet sh1 = r1.getSheet();\n\t\tSheet sh2 = r2.getSheet();\n\t\tif (sh1 != sh2) {\n\t\t\tThrowable e = null;\n\t\t\tthrow new Exception(\"Rows from different sheets\", e);\n\t\t}\n\t\t\n\t\tint n1 = r1.getRowNum();\n\t\tint n2 = r2.getRowNum();\n\t\t\n  \t\ttry {\n\t\t\tcopyRow(sh1, n1, n2);\n\t  \t\tsh1.removeRow(sh1.getRow(n1));\n\t\t\tcopyRow(sh1, n2+1, n1);\n\t\t\tsh1.removeRow(sh1.getRow(n2+1));\n\t\t\tif (n2+2 <= sh1.getLastRowNum()) {\n\t\t\t\tsh1.shiftRows(n2+2, sh1.getLastRowNum(), -1);\n\t\t\t}\n  \t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static void copyRow(Sheet sh, int src, int tgt) throws Exception {\n\t\t\n\t\tRow rs = sh.getRow(src);\n\t\tRow rt = sh.getRow(tgt);\n\t\t\n\t\tif (rs == null) {\n\t\t\tThrowable e = null;\n\t\t\tthrow new Exception(\"Source row missing\", e);\n\t\t}\n\t\t\n\t\tif (rt != null) {\n\t\t\tsh.shiftRows(tgt, sh.getLastRowNum(), 1);\n\t\t}\n\t\trt = sh.createRow(tgt);\n\t\t\n\t\tIterator<Cell> cells = rs.cellIterator();\n\t\twhile (cells.hasNext()) {\n\t\t\tCell cs = cells.next();\n\t\t\tint ix = cs.getColumnIndex();\n\t\t\tCell ct = rt.createCell(ix);\n\t\t\t\n\t\t\t// style\n\t\t\tct.setCellStyle(cs.getCellStyle());\n\t\t\t\n\t\t\t// type\n\t\t\tct.setCellType(cs.getCellType());\n\t\t\t\n\t\t\t// data\n\t\t\tswitch (cs.getCellType()) {\n\t\t\tcase Cell.CELL_TYPE_BLANK:\n\t\t\t\tct.setCellValue(cs.getStringCellValue());\n\t\t\t\tbreak;\n\t\t\tcase Cell.CELL_TYPE_BOOLEAN:\n\t\t\t\tct.setCellValue(cs.getBooleanCellValue());\n\t\t\t\tbreak;\n\t\t\tcase Cell.CELL_TYPE_ERROR:\n\t\t\t\tct.setCellErrorValue(cs.getErrorCellValue());\n\t\t\t\tbreak;\n\t\t\tcase Cell.CELL_TYPE_FORMULA:\n\t\t\t\tct.setCellFormula(cs.getCellFormula());\n\t\t\t\tbreak;\n\t\t\tcase Cell.CELL_TYPE_NUMERIC:\n\t\t\t\tct.setCellValue(cs.getNumericCellValue());\n\t\t\t\tbreak;\n\t\t\tcase Cell.CELL_TYPE_STRING:\n\t\t\t\tct.setCellValue(cs.getRichStringCellValue());\n\t\t\t}\n\t\t\t\n\t\t\t// hyperlink\n\t\t\tif (cs.getHyperlink() != null) {\n\t\t\t\tct.setHyperlink(cs.getHyperlink());\n\t\t\t}\n\t\t\t\n\t\t\t// comment\n\t\t\tif (cs.getCellComment() != null) {\n\t\t\t\tct.setCellComment(cs.getCellComment());\n\t\t\t}\n\t\t}\n\t}\n\n}", "creator": "jmarkmurph@yahoo.com", "is_private": false, "id": 191452, "time": "2016-06-07T17:00:08Z", "bug_id": 59666, "creation_time": "2016-06-07T17:00:08Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "text": "Thanks Mark. Though it may not help me completely, but it will help me out to some extent in fixing this issue.", "attachment_id": null, "id": 191461, "creator": "chennak.s@intellicus.com", "time": "2016-06-08T06:38:25Z", "bug_id": 59666, "creation_time": "2016-06-08T06:38:25Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "creator": "wtff@freenet.de", "is_private": false, "id": 18837, "time": "2002-07-02T12:03:18Z", "bug_id": 10401, "creation_time": "2002-07-02T12:03:18Z", "tags": [], "text": "I am very happy that the 1.5 version of ant contains network monitoring \ncapabilities (socket and http conditions).\n\nI tried to write scripts that test socket conditions using waitfor tasks with a \ncertain maywait limit, but in certain cases, the waitfor tasks does not \nterminate the socket conditions.\nIf the socket condition tests a certain port an an existing ip address then the \nnetwork interface of the destination machine can report back that this port is \nunused. But if the socket condition points to a nonexistent ip address, then \nthe socket condition waits for approx 40 seconds or whatever the standard \nsocket connect timeout is an a specific java platform, even if I specify a \nwaitfor-maxwait timeout of 3 seconds.\n\nHere is an example script:\n\n<project name=\"monitor\" basedir=\".\" default=\"all\">\n    <target name=\"socketcheck\" depends=\"\">\n        <waitfor timeoutproperty=\"socket.unavail.3302\" maxwait=\"3\" \nmaxwaitunit=\"second\">\n            <not><socket server=\"1.1.1.1\" port=\"3302\"/></not>\n        </waitfor>\n    </target>\n\t\n    <target name=\"all\" depends=\"socketcheck\">\n        <echo>\n\t    Socket unavail:3302 : ${socket.unavail.3302}\n        </echo>\n    </target>\n</project>"}, {"attachment_id": null, "tags": [], "creator": "stevel@apache.org", "text": "Is this \na) a hostname that doesnt resolve \nor \nb) a host that doesnt answer on that port.\n\n\n", "count": 1, "id": 18856, "time": "2002-07-02T16:19:01Z", "bug_id": 10401, "creation_time": "2002-07-02T16:19:01Z", "is_private": false}, {"count": 2, "tags": [], "creator": "wtff@freenet.de", "attachment_id": null, "is_private": false, "id": 18864, "time": "2002-07-02T17:46:02Z", "bug_id": 10401, "creation_time": "2002-07-02T17:46:02Z", "text": "It happens when I try to connect to a plain IP adress that does not exist, \nregardless of the port. \nIt seems as if the waitfor task is not tearing down client-socket connections \nthat are in a waiting-state.\n\nThe idea for this \"testcase\" is to create a client-socket that would wait for a \nfull socket-timeout period for some server-socket answer and then to test \nwhether the waitfor task tears this waiting client-socket down as soon as the \nwaitfor-tasks's timeout appears.\n\nWhen you connect to an *existing* host but to an unused port on it, then the \nclient socket will not run into a long lasting waitstate because the host would \nactively respond that this port is not used and then close the connection. That \nwas the only reason for why I mentioned my explicit scenario."}, {"attachment_id": null, "tags": [], "creator": "gus.heck@olin.edu", "text": "The host might not respond. If it is running a firewall set to drop packets from \nyou to that port you are out of luck. Typically, machines who \"know\" your \nmachine will reject your packets, but machines that don't have a clue who you \nare often pretend they don't exist if you aren't allowed in that port. Thus, you \nmight get a long wait even if you can resolve the DNS to a host that is up and \nrunning regardless of whether it is providing services (to others) on the given \nport.", "count": 3, "id": 18869, "time": "2002-07-02T18:37:24Z", "bug_id": 10401, "creation_time": "2002-07-02T18:37:24Z", "is_private": false}, {"count": 4, "tags": [], "creator": "wtff@freenet.de", "attachment_id": null, "is_private": false, "id": 18871, "time": "2002-07-02T19:38:56Z", "bug_id": 10401, "creation_time": "2002-07-02T19:38:56Z", "text": "There still seems to be a misunderstanding here. \n(Sorry for giving you headaches, if I do. I'm not a native english speaker and \nmaybe I'm expressing s.th wrong. So let me try once again...)\n\nI am NOT having any network problem. This is not about DNS, ports, firewalls or \nanything. My problem is NOT that I'd be trying to connect to a host that I \nassume to be up and ant would report to me that it is not, or any such kind of \nproblem.\n\nIt is simply like this: The waitfor task can be instructed to return from its \nexecution after lets say 5 seconds. This I can specify within the maxwait \nattribute. This is my understanding of this attribute. I tell the waitfor task \nto return after 5 seconds. No matter what. Please return after five seconds. \nDear waitfor task, if I gave you too hard a test to execute within your body \nand after five seconds it should still be executing, then tear it down and \nreturn. That is my undertanding of the maxwait attribute. And my point is that \nthe waitfor task is not behaving like this. The socket test is just meant to be \na testcase for this wrong behaviour.\n\nThis is the kind of bug that I want to report. An appropriately set up socket \ntest that is deliberately configured in a way so that it would probably need a \nminute or two to complete is merely the testcase that I wanted to provide to \nprove my point.\n\nIf you look at the code snippet then you will agree that the waitfor task \nshould in any case return after 5 seconds, right? Whatever condition is \nexecuting in its 'body'. My understanding is that if the body of the waitfor \ntask is executing a test that takes 60 seconds to return, but the waitfor task \nhas a 5 seconds timeout, then it has to interrupt the test after 5 seconds. \nIf you run my example, the waitfor task will NOT return after its allotted 5 \nseconds but waits for as long as the socket test takes to complete."}, {"count": 5, "tags": [], "bug_id": 10401, "text": "Actually it looks like I understood you, but you didn't understand that the \nmeaning of my comment is to broaden the aplicability of this bug. The symptoms \nyou describe could be expected from existing computers as well as ones that \ndon't exist. Therefore this bug applies in even more cases than you are \nclaiming.\n\nI agree with you :). I wasn't clear about that. I would agree that the behavior \nyou describe in waitfor is counter-intuitive and ought to be fixed. \n\nBy the way, your english is marvelous, the only thing I don't understand in your \nvarious posts is this s.th abreviation you keep using.... It almost looks like \nyou are abbreviating the word something?\n", "id": 18882, "time": "2002-07-02T20:36:17Z", "creator": "gus.heck@olin.edu", "creation_time": "2002-07-02T20:36:17Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 10401, "is_private": false, "text": "well, looks like you have found a corner case that the timeout doesnt address.\nWe do probe for things like apache.com being online in ant's build, but use\ncondition and take the time hit; you can go -Doffline=true to bypass the wait.\n\nlooking at the source, you will see that <waitfor> really reevauates the\ncondition every interval until timeout or success. if the condition takes a long\ntime to execute, waitfor is oblivious to the fact. \n\n0. fully off line system will fail dns lookups immediately. \n\n1. if DNS cant find a hostname, then it should fail <condition> immediately, so\na bad hostname is not a problem\n\n2. no route to host through firewall or simply invalid IP address is a different\nproblem as it will cause an online system to send TCP SYN packets to give up,\nthat being an artifact of the TCP specification. \n\n3. We cant give up early, as that would nominally violate TCP. Also, unless you\nknow a java property to control it, a property that propagates to the underlying\nplaftform across the board, then there is nothing that can be done.\n\nI could see an ugly hack involving threads, but I couldnt see anyone in the ant\nteam motivating themselves to implement the code *or* the test. you are free to\ndo so yourself. \n\nI know that you are going to find this unsatisfactory, especially in the absence\nof ping. Perhaps your platform's native ping returns an error code on timeout,\nif this is the case <exec> could run it and test for the response.\n\nNb, if you want to add correcting text to the docs for waitfor or <socket> or\n<http>, reopen the bug and add diffs to the files as patches. \n", "id": 18909, "time": "2002-07-03T03:14:10Z", "creator": "stevel@apache.org", "creation_time": "2002-07-03T03:14:10Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 10401, "text": "(sorry for my delayed reply)\n\n@Gus:\n\nthank you for saying that my englich is marvelous!\nMy teachers marveled less at it and found it rather marvelless. ;)\n\n---\n\nBy \"s.th.\" I indeed meant the word something. I got the abbreviation wrong.\nBy the way: if that already troubled you, then you should see my handwriting, \nhehe... ;) ;)\n\n\n@steve:\n\nUntil this very day, I have only been an ant 'user' and haven't looked at any \nsources yet, but I'm looking forward do so in the near future...\n\nTherefore, excuse me if the following might not be useful or new to you, but \nconcerning the interruption of socket connections without any nasty thread \nissues, I think the following should do:\n\n- Within the sdk javadoc for the Socket class, it says, that invoking \nsocket.close() terminates the socket thread immediately and throws an exception \nto any waiting thread.\n\n- The Socket class also has a method called setSO_Timeout() and in version 1.4 \nthere is also a constructor taking a timeout value as an argument.\n\nTherefore, if I open a socket connection, I think that I am able to destroy it \nin a clean way at will, at any time I want. If that should really NOT be the \ncase, then I am in serious trouble since the project I am working on and \ngetting paid for, heavily depends on this assumption... somehow ;) \n\n---\n\nMeanwhile I believe that the waitfor task, even if it interrupted its subtasks \nthe way I would expect it to, would still not be what I need. Thanks for \npointing this out to me. The timeout property is only set if a timeout occurs. \nTherefore, if the condition evaluates to true then this information would of \ncourse not go into any property. Hence, I really need to use the <condition> \ntask, for it has the ability to evaluate the boolean result of a condition and \nto write it into a property. However, in the light of the example I gave,\na timeout attribute would have to be added to the <condition> task. If the \ncondition cannot be evaluated within the alloted timespan, the resulting \nboolean value has to be set to false. This is what I would propose. \nIf the feature freeze for ant 1.5 forbids the incorporation of this, then I \nwould like to propose this for the next release.\n\nSince the <socket> and <http> tasks already exist and their only imagineable \npurpose, as I see it, is to check on network stati, the whole apparatus does \nnot really seem to be apt for any practical use as long as there is no such \ntimeout attribute for the <condition> task, right?\n\nI am willing to try to help coding this or to provide a prototype of an \nextended <condition> task that correctly deals with interrupting its subtasks, \nbut of course, I would first need to know if you people at apache support the \nidea.\n\nUntil now I just have a user perspective on all this and\nfrom a user perspective I would say that the condition task is pretty useless \nwithout a timeout mechanism.\nHowever I do not yet know about any technical intricities and so on...\n\nIn any case I would like to thank you for your patience with me and for taking \nmy problems seriously.", "id": 19262, "time": "2002-07-10T16:51:15Z", "creator": "wtff@freenet.de", "creation_time": "2002-07-10T16:51:15Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 10401, "text": ">- The Socket class also has a method called setSO_Timeout() and in version 1.4 \n>there is also a constructor taking a timeout value as an argument.\n\nI dont think setSO_Timeout has any effect on connect timeouts; it is there for\nblocking reads. Didnt know about the java1.4 enhancement to connect(), but it\nwould only be relevent to java1.4.\n\nIf you want to make a change to the <socket> and <http> tests to take a timeout\ninside that then uses reflection to call the java1.4 binding, and add a Junit\ntest case to verify that it works, then it can go in. An evenings work, by my\nestimate. \n\nregarding your comments on condition; I see you still dont fully know how to use\nproperties in Ant, as per other open bugs. Once you understand, it all makes\nsense. Note that if= and unless= in targets go by set/unset, not true and false,\nso an unset condition wont execute an if= guarded target.\n\n", "id": 19446, "time": "2002-07-12T19:48:33Z", "creator": "stevel@apache.org", "creation_time": "2002-07-12T19:48:33Z", "is_private": false, "attachment_id": null}]
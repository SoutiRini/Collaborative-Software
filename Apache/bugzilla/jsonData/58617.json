[{"count": 0, "tags": [], "bug_id": 58617, "text": "Currently the XmlBeans Factory methods allow parsing of raw data without safe \nlimits, i.e. with XmlOption element.\nTo prevent future usage without the XmlOption element (as I temporarily did \n...), I thought about adding a forbidden-apis check [1],\nbut this is currently not possible.\nSo instead I've modified the ooxml-schema sources to point to a custom wrapper \n[2].\nI don't think, someone uses the ooxml-schemas without POI, but in this rare \ncase they would need to copy&paste [2] into their classes.\n\nApart of the wrapper, I've added an XsdConfig for the vendor specific schema \nextension.\nThe former package name was something like schemasMicrosoftComVml or \nschemasMicrosoftComOfficeOffice, ...\nnow they are called com.microsoft.schemas.vml or \ncom.microsoft.schemas.office.office, ...\nthis goes better along the other similar named packages for Visio or \nencryption/signing.\nThere are only very few places in the code which reference VML stuff and \ntherefore user code shouldn't be affected much.\n\nIf no-one objects until 22.11.15, I'll apply that patch.\n\nAndi.\n\n[1] https://github.com/policeman-tools/forbidden-apis/issues/88\n[2] org.apache.poi.POIXMLTypeLoader", "id": 186406, "time": "2015-11-16T22:23:25Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-11-16T22:23:25Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 58617, "text": "Created attachment 33279\nUpdate XmlBeans to new poi type loader", "id": 186407, "time": "2015-11-16T22:23:41Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-11-16T22:23:41Z", "is_private": false, "attachment_id": 33279}, {"count": 2, "tags": [], "bug_id": 58617, "text": "I like this approach, because it allows to use XMLBeans with its default XMLOptions and you are still safe. The only thing you change is that you replace the factory using a regex-replace on all generated xmlbeans java files?", "id": 186416, "time": "2015-11-17T09:07:23Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-17T09:07:23Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 58617, "is_private": false, "count": 3, "id": 186417, "time": "2015-11-17T09:13:16Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-17T09:13:16Z", "text": "One question I had is: How do you handle the version numbering in Maven Central? I am not sure if the JAR file names containing the ooxml schema name are handled correctly (sorry for the question, I don't understand the maven deployment here)."}, {"count": 4, "tags": [], "bug_id": 58617, "text": "The full ooxml-schema files are released infrequently, as and when we decide there needs to be a change. The POI builds (ant, maven pom) + site are updated after one of those to reflect the new full schema jar version number\n\nThe smaller poi-ooxml-schemas jar is build from the full one, and shipped every release", "id": 186421, "time": "2015-11-17T12:25:15Z", "creator": "apache@gagravarr.org", "creation_time": "2015-11-17T12:25:15Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Although I've tried to keep everything consistent, i.e. updating the ant/maven(sonar) scripts ... I forgot about bumping the version number.\nSo yes, this is missing and on my todo list before committing.\nI'll upload it to central.\n\nI guess, I need a voting process for this, too?\n\nbtw. I haven't removed the references to the global XmlOptions, which is now mostly obsolete, so user code is still safe when using the older schema jar.\n... but the vendor specific parts (e.g. VML,...) would still fail ...", "is_private": false, "id": 186422, "creator": "kiwiwings@apache.org", "time": "2015-11-17T12:42:54Z", "bug_id": 58617, "creation_time": "2015-11-17T12:42:54Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "text": "Applied with r1715555", "id": 186472, "time": "2015-11-21T20:03:06Z", "bug_id": 58617, "creation_time": "2015-11-21T20:03:06Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 58617, "attachment_id": null, "id": 186478, "time": "2015-11-22T12:01:11Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-22T12:01:11Z", "is_private": false, "text": "Hi,\nI reviewed the whole stuff. Looks fine. But there is one problem:\n\nYou are explicitely excluding the POITypeLoader from the schema.jar file, but this causes the ooxml-schema.jar file not to be used on its own (without poi). In that case it would need a dependency (circular) to POI itsself (also in Maven Central's POM files).\n\nMaybe move the type loader to the schema jar and don't have it in POI? The problem is only that you would have the same class file in multiple JARs, which may make the Ealsticsearch \"jarhell\" checker crazy (it does not allow same class file names in multiple jars when booting up elasticsearch; to prevent \"jar hell\").\n\nSecond, do you not also need to update the ooxml-security version to 1.1?"}, {"attachment_id": null, "tags": [], "bug_id": 58617, "is_private": false, "count": 8, "id": 186479, "time": "2015-11-22T12:02:51Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-22T12:02:51Z", "text": "In addition you should use the following pattern instead of a fileset for coping the file:\n<copy todir=\"${xmlbean.sources.dir}\">\n  <file basedir=\"${ooxml.src}\" file=\"${ooxml.src}/org/apache/poi/POIXMLTypeLoader.java\"/>\n</copy>\n\nThis fails if file does not exists, whereas the fileset would just do nothing. for single files <file/> should be preferred over <fileset/>."}, {"count": 9, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "text": "Hi Uwe,\n\n@ooxml-security-1.1:\nyou are right \n\n@type loader location:\nI don't want to merge the ooxml-schemas and ooxml-security and ideally split \nooxml-schemas in the format dependent jars in the future.\nSo currently there's the use case, that someone uses ooxml-schemas and \nooxml-security together, ending in \"jar hell\".\nI don't think that someone uses ooxml-schema without POI and in that rare case, \none can copy the POIXMLTypeLoader source into the project sources.\n\n@POI dependency in the maven POM:\nI would preferably skip it, because any kind of version-circular-reference \n(e.g. \"RELEASE\") would cause problems in the user packaging.\n\nWould there be a problem for OSGI packaging? (I don't much about osgi, only \nthat's it picky in such conditions...)\n\n@fileset vs. file\nok ... I haven't thought about this. I will change it ... of course you can \nalways feel free to change something like this right away ...\n\nAndi.", "id": 186480, "time": "2015-11-22T13:50:21Z", "bug_id": 58617, "creation_time": "2015-11-22T13:50:21Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 58617, "is_private": false, "count": 10, "id": 186481, "time": "2015-11-22T14:04:21Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-22T14:04:21Z", "text": "> @fileset vs. file\n> ok ... I haven't thought about this. I will change it ... of course you can \n> always feel free to change something like this right away ...\n\nDone."}, {"count": 11, "tags": [], "bug_id": 58617, "text": "Hi,\n\n> @POI dependency in the maven POM:\n> I would preferably skip it, because any kind of version-circular-reference \n> (e.g. \"RELEASE\") would cause problems in the user packaging.\n\nThe problem would be that you depend on a outdated \"older version\" of POI indirectly.\n\nOne solution would be to have a ooxml \"parent jar\" with that class which is a dependency of every ooxml package. Not sure if it is worth the trouble.\n\nAnother solution is (I am not sure) to add it as \"provided\" dependency in Maven central (without version!?). But this would not really help users that want to use the ooxml jars alone.\n\n> Would there be a problem for OSGI packaging? (I don't much about osgi, only \n> that's it picky in such conditions...)\n\nOSGI is very picky, but I have no idea... I think it already complains if multiple JAR files use the same package name. In Lucene we refused to create OSGI packages, we dropped support for that completely (especially as OSGI does not work with Java's SPI).", "id": 186482, "time": "2015-11-22T14:10:45Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-22T14:10:45Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 58617, "text": "Hi, FYI, the Maven build in director sonar seems to fail now, see https://builds.apache.org/job/POI-Maven/161/org.apache.poi$poi-ooxml/console, not sure about some of the changes but it seems the resulting xml-schemas-jar is now empty.", "count": 12, "id": 186485, "time": "2015-11-22T18:02:49Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-11-22T18:02:49Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 58617, "attachment_id": null, "id": 186488, "time": "2015-11-22T20:52:46Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-11-22T20:52:46Z", "is_private": false, "text": "When reapplying the patch-file, I've missed the marker-files - now they are \nnon-empty and added to svn ... i.e. the build is ok now."}]
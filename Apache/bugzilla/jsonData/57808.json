[{"count": 0, "tags": [], "bug_id": 57808, "text": "Created attachment 32646\nsimple patch\n\nI analyzed several heap dumps and and for small applications it seems that Tomcat uses about twice as much memory as Jetty (roughly 20MB vs 10MB). Most of this seems to come from Charset instances. While the number of Charsets is low some of them (mostly EBCDIC and GB18030) have quite large coding tables.\n\nThe attached patch only preloads UTF-8 and ISO-8859-1, this saves about 5MB. That doesn't sound drastic but makes Tomcat to go from about 17.5MB to 12.5MB.\n\nDue to the discussion in 51400 I decided not to cache look up failures.\n\nI decided to use a ConcurrentHashMap so that readers never block. In theory a fully synchronized map could also be used as look up times should be low and therefore the lock should be uncontended most of the time.\n\nSee the attached heap dumps for applications before and after the patch.", "id": 182334, "time": "2015-04-13T16:59:51Z", "creator": "kustos@gmx.net", "creation_time": "2015-04-13T16:59:51Z", "is_private": false, "attachment_id": 32646}, {"attachment_id": null, "tags": [], "creator": "kustos@gmx.net", "text": "The heap dumps would be around 7MB compressed so I can't attach them. Where should I post them?", "count": 1, "id": 182335, "time": "2015-04-13T17:04:29Z", "bug_id": 57808, "creation_time": "2015-04-13T17:04:29Z", "is_private": false}, {"count": 2, "text": "In most cases, 5MB would be a trivial amount of memory, so how about using a flag with a system property for that (or something similar) ?", "bug_id": 57808, "is_private": false, "id": 182337, "time": "2015-04-13T17:10:49Z", "creator": "remm@apache.org", "creation_time": "2015-04-13T17:10:49Z", "tags": [], "attachment_id": null}, {"count": 3, "text": "This preloading is necessary to avoid performance bottlenecks. (See history of that code, or search Bugzilla  -> bug 51400).\n\nAs such, it cannot be removed.\n\nIf one wants, it shall be possible to provide a user-configurable list of charsets as an opt-in feature (the same as suggested in comment 2), but Tomcat will behave as all the other charsets do not exist.", "bug_id": 57808, "is_private": false, "id": 182343, "time": "2015-04-14T00:47:03Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-04-14T00:47:03Z", "tags": [], "attachment_id": null}, {"count": 4, "text": "I have read bug 51400 and my understanding is that preloading is not necessary to avoid performance bottlenecks. Preloading was discussed but I couldn't find the reasons why preloading was ultimately chosen. The reasons for other implementation decisions I could find (not caching misses, not storing permutations, \u2026).\nMy understanding is that avoiding calling (indirectly) Charset.forName() / Charset.lookup() during normal request processing is necessary to avoid performance bottlenecks. This is achieved by the caching even when avoiding the preloading.", "creator": "kustos@gmx.net", "is_private": false, "id": 182346, "time": "2015-04-14T05:44:03Z", "bug_id": 57808, "creation_time": "2015-04-14T05:44:03Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 57808, "attachment_id": 32662, "is_private": false, "id": 182488, "time": "2015-04-19T18:55:15Z", "creator": "kustos@gmx.net", "creation_time": "2015-04-19T18:55:15Z", "text": "Created attachment 32662\n2nd try at a patch\n\nUpdated patch:\n- keeps the current behavior as default\n- new behavior is available and configurable through a system property\n- document the system property"}, {"count": 6, "tags": [], "bug_id": 57808, "text": "(In reply to Philippe Marschall from comment #4)\n> I have read bug 51400 and my understanding is that preloading is not\n> necessary to avoid performance bottlenecks. Preloading was discussed but I\n> couldn't find the reasons why preloading was ultimately chosen.\n\nIt means you don't have to cache the misses since misses have their own DoS potential.\n\nI wonder if lazy-loading the cache with ISO-8859-1 and UTF-8 pre-loaded would give a sensible balance without adding another configuration option?\n\nI'd feel more comfortable in these discussions with some numbers to quantify the performance impact.", "id": 182509, "time": "2015-04-20T20:04:57Z", "creator": "markt@apache.org", "creation_time": "2015-04-20T20:04:57Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "fredrik@jonson.org", "text": "(In reply to Mark Thomas from comment #6)\n\n> It means you don't have to cache the misses since misses have their own DoS\n> potential.\n\nIs it correct that there are two possible DOS attacks with dynamic charset loading, i.e with the patch applied:\n\n 1. force permanent increased memory during runtime with requests that specify\n    all avaliable but previously unloaded charsets.\n\n 2. force expensive charset name/instance lookup misses with requests\n    that specify non-existent charset names.\n\nAny other?\n\nThe consequence of threat 1 is limited. It is self-exhausting as soon as all available charsets have been loaded once. One mitigation could be to use weak references, if it's worth it?\n\nThreat 2 could be mitigated if charset loading is performed only when the charset name is valid. Preloading all available charset names on startup will block threat 2, right? Assuming of course that prefetching all charset names doesn't nullify the memory reduction.\n\nBTW, assuming the proposal is accepted, I'd like to see dynamic loading as the new default, and if necessary an option to make tomcat fall back to the old pre-loading behaviour. Correct and lean should be the default, not an option.\n\n(N.B I'm not a tomcat committer, just a interested user.)", "count": 7, "id": 182524, "time": "2015-04-21T10:53:12Z", "bug_id": 57808, "creation_time": "2015-04-21T10:53:12Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "text": "(In reply to Fredrik Jonson from comment #7)\n> (In reply to Mark Thomas from comment #6)\n> \n> > It means you don't have to cache the misses since misses have their own DoS\n> > potential.\n> \n> Is it correct that there are two possible DOS attacks with dynamic charset\n> loading, i.e with the patch applied:\n> \n>  1. force permanent increased memory during runtime with requests that\n> specify\n>     all avaliable but previously unloaded charsets.\n> \n>  2. force expensive charset name/instance lookup misses with requests\n>     that specify non-existent charset names.\n\nJust to nit pick, the expensive lookups are (at least were when this code was written) for any Charset (valid or invalid) that are not in the cache.\n\n> Any other?\n> \n> The consequence of threat 1 is limited. It is self-exhausting as soon as all\n> available charsets have been loaded once.\n\nAgreed.\n\n> One mitigation could be to use weak references, if it's worth it?\n\nI don't think so.\n\n> Threat 2 could be mitigated if charset loading is performed only when the\n> charset name is valid. Preloading all available charset names on startup\n> will block threat 2, right?\n\nCorrect.\n\n> Assuming of course that prefetching all charset\n> names doesn't nullify the memory reduction.\n\nI think it does. At keast the way we get the names of the valid charsets currently it does,\n\n> BTW, assuming the proposal is accepted, I'd like to see dynamic loading as\n> the new default, and if necessary an option to make tomcat fall back to the\n> old pre-loading behaviour. Correct and lean should be the default, not an\n> option.\n\nNo objections there.\n\n> (N.B I'm not a tomcat committer, just a interested user.)\n\nA few good patches can soon change that ;)\n\nThe discussion in bug 51400 suggests that the performance characteristics we were trying to avoid have changed in Java 7 (i.e. Tomcat 8 onwards). That makes it more important we have some good test results on which to base any decision.", "count": 8, "id": 182526, "time": "2015-04-21T11:08:59Z", "bug_id": 57808, "creation_time": "2015-04-21T11:08:59Z", "is_private": false}, {"count": 9, "text": "I've been doing some further investigations and I suspect that the results are highly dependent on the JVM version used.\n\nWith recent Java 8 releases the memory retained by this cache is relatively low (around 100k) and while you can reduce that by not preloading, the gains you make are lost by what you have to add to account for lazy-loading while retaining the performance benefits.\n\nGiven that there is not a compelling case for changing the current behaviour, I am resolving this as WONTFIX.", "bug_id": 57808, "is_private": false, "id": 183038, "time": "2015-05-19T13:48:42Z", "creator": "markt@apache.org", "creation_time": "2015-05-19T13:48:42Z", "tags": [], "attachment_id": null}, {"count": 10, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "is_private": false, "id": 187660, "time": "2016-01-14T11:21:53Z", "bug_id": 57808, "creation_time": "2016-01-14T11:21:53Z", "text": "FYI:\nA new enhancement request - bug 58859 \"Allow to limit charsets / encodings supported by Tomcat\" - offers a similar feature, but with different requirements and background."}]
[{"count": 0, "tags": [], "creator": "dan@pritchettsolutions.com", "text": "Xerces uses a linked list structure to represent the children of a node.\nWhen a very broad tree (e.g. thousands of children under one node) is\nserialized through standard Java serialization, the list will be traversed\nby the ObjectOutputStream recursively. The result is that large stack sizes\nare required to complete the serialization. This problem was encountered\nwhen using Xerces documents as return values from EJB methods.", "id": 6867, "time": "2001-10-18T20:28:40Z", "bug_id": 4284, "creation_time": "2001-10-18T20:28:40Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 4284, "is_private": false, "count": 1, "id": 7502, "time": "2001-11-02T23:57:23Z", "creator": "rahul.srivastava@sun.com", "creation_time": "2001-11-02T23:57:23Z", "text": "Do you mean to say that small DOM trees when returned from EJBs gets serialized\n/ deserialized correctly from app server to the web server, but, is problematic\nin case of large trees. That is, they consume lot of memory. Well, huge DOM\ntrees (e.g. thousands of children under one node) definitely consume memory.\nBut, this serialization between the app server and web server over the network\nis the responsibility of the JVM. It has nothing to do with the serialization\nimplementation of xerces. It will be nice if you can be more clear about the BUG\nin xerces in this case, so that one can look into this.\n\nAlternatively, you can use xerces serialization implementation to serialize the\nDOM created and then return this serialized xml file from the EJB, which can be\ndeserialized at the other end."}, {"count": 2, "tags": [], "creator": "dan@pritchettsolutions.com", "is_private": false, "text": "The specific problem is that Java serialization uses recursion to traverse\nobject references. The xerces dom implementation uses a linked list to\nrepresent the children of a node. The result is that the Java serializer\nrecurses across the children of the node. If you have a lot, say 1k,\nchildren, this can lead to stack overflow exceptions inside the Java\nserializer.\n\nI will agree that this is not a xerces bug per se, but it can be addressed\nby providing custom write/read object methods that transform the child list\ninto a child array. This makes it possible to serialize extremely broad\ntrees using the standard Java serializer. Hopefully making xerces more\nfriendly to Java serialization would be a desirable goal.\n\nI have done this for my current client. Unfortunately they are using a heavily\nmodified version of the 1.2.2 tree so any of the fixes would need to be largely\nrepeated on the current code base.\n", "id": 7511, "time": "2001-11-03T09:57:31Z", "bug_id": 4284, "creation_time": "2001-11-03T09:57:31Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 4284, "text": "Just a few thoughts: \n\nMany believe that the proper serialized representation for DOM trees is XML. \nMaybe the serializable support in the DOM implementation should be using the XML \nserializer classes to write out, and Xerces to read in, rather than raw Java \nobject serialization?\n\n(An alternative approach would be to make the DOM Externalizable rather than \nSerializable, and explicitly code the save and restore process. Among other \nbenefits, that would allow saving only one pointer per doubly-linked \nrelationship and reconstructing the other at restore time. And it could make \nmanaging the order in which nodes get written -- and hence the recursion depth \n-- somewhat easier. But by the time you've done that much work, I suspect you \nmight as well have called your existing XML serializer and been done with it.)", "id": 7534, "time": "2001-11-05T07:31:49Z", "creator": "keshlam@us.ibm.com", "creation_time": "2001-11-05T07:31:49Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 4284, "text": "See also #5144 and #18925.", "id": 45285, "time": "2003-10-09T14:08:26Z", "creator": "flabes@livis.de", "creation_time": "2003-10-09T14:08:26Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 4284, "text": "I dont' think that \"the proper serialized representation for DOM trees is XML\".\nSuppose you have an object containing both a DOM and references to nodes within\nthat DOM for faster access (what we have in an EJB application). You would lose\nthat references when creating a textual (ie XML) representation of the DOM and\nparse it again.\n\nOf course, standard Java serialization should be able to handle arbitrary object\ntrees. But until that happens, this very problem could be solved by marking the\nsibling reference transient and walk the DOM manually for serialization. This\nwould probably improve performance that currently is a nightmare when compared\nto parsing or XML text generation.", "id": 45293, "time": "2003-10-09T14:32:46Z", "creator": "flabes@livis.de", "creation_time": "2003-10-09T14:32:46Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 4284, "attachment_id": null, "is_private": false, "id": 45300, "time": "2003-10-09T15:07:31Z", "creator": "flabes@livis.de", "creation_time": "2003-10-09T15:07:31Z", "text": "See also (and vote for)\nhttp://developer.java.sun.com/developer/bugParade/bugs/4152790.html."}, {"count": 7, "tags": [], "creator": "keshlam@us.ibm.com", "is_private": false, "text": "In most cases, the best serialization for a DOM's content is indeed XML.\n\nBut I agree that there are occasionally cases where the Java objects may worth\nserializing. It msy be massively inefficient, admittedly, but it may be better\nat least for prototyping purposes than trying to extract all the relationships\nto DOM nodes, save them as XPaths, and then re-bind them after re-parsing the XML.\n\nQuestion is whether our default DOM implementation should support Java object\nserialization or not. Especially in the case of the deferred DOM...\n\nIf we can do it easily, we should probably do it. If it's hard, we may want to\nthink long and hard about which implementations are and aren't serializable.", "id": 45304, "time": "2003-10-09T15:20:35Z", "bug_id": 4284, "creation_time": "2003-10-09T15:20:35Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 37579, "is_private": false, "text": "Footnote outside of tables works, inside table-cell not.\nThe compliance page only speaks about restrictions within multicolumn documents.", "id": 82706, "time": "2005-11-21T18:27:48Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2005-11-21T18:27:48Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "gerhard.oettl@oesoft.at", "text": "Created attachment 17010\nexample for lost footnote in table-cell", "id": 82707, "time": "2005-11-21T18:30:02Z", "bug_id": 37579, "creation_time": "2005-11-21T18:30:02Z", "is_private": false, "attachment_id": 17010}, {"count": 2, "attachment_id": null, "creator": "jeremias@apache.org", "text": "Two test cases added to our test suite:\nhttp://svn.apache.org/viewcvs?rev=348138&view=rev\n\nThe same problem exists with lists. The problem is the following:\n\nIn table and list layout Knuth element lists are combined to a single element\nlist. The footnotes contained in KnuthBlockBoxes in the original element lists\ncurrently don't get propagated to the combined element lists and that's why the\nfootnotes get ignored. It shouldn't be too hard to fix.", "id": 82726, "time": "2005-11-22T11:02:04Z", "bug_id": 37579, "creation_time": "2005-11-22T11:02:04Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "Created attachment 17432\n1/2 patch", "is_private": false, "id": 84664, "creator": "gerhard.oettl@oesoft.at", "time": "2006-01-16T14:34:33Z", "bug_id": 37579, "creation_time": "2006-01-16T14:34:33Z", "attachment_id": 17432}, {"count": 4, "tags": [], "bug_id": 37579, "attachment_id": null, "text": "The comitted patch causes footnotes in lists and tables to survive\n(longer?) than without.\n\nIt is not finished, but I am at the limit of my knowledge\nand tomorrow my usual business starts, so I want to\ncontribute what I have now - hoping it is a bit usefull\nfor others who continue or better rewrite.\n\nDescription:\nA) Propagate footnotes in ListItemLayoutManger when\n   combined knuth elements are created.\nB) Propagate footnotes in TableStepper when\n   combined knuth elements are created.\nC) Propagate footnotes in TableContentLayoutManger when\n   boxes for table-header and table-footer are created.\n\nThe shortcomings:\n1) Footnotes in list-item-label produce a\n   \"Cannot find LM to handle given FO for LengthBase.\"\n   AFAICS in the getBaseLength method of AbstractBaseLayoutManger.\n2) Footnotes from list-item-body starts at the same position\n   (from the starting edge) than the list-item-body itself and\n   not at the starting edge of the region-body.\n3) Footnotes on table-header and table-footer are not printed\n   on every page where the content of the table-header and\n   table-footer is printed but only on that page that holds\n   the end of the table.\n4) Footnotes on table-header and table-footer are ordered after\n   the footnotes of table-body.\n5) There is one situation with my example fo-file for tables that\n   produce an endless loop (see comments there).\n", "id": 84665, "time": "2006-01-16T14:36:38Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2006-01-16T14:36:38Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 37579, "is_private": false, "text": "Created attachment 17433\nexample fo for tables", "id": 84668, "time": "2006-01-16T14:43:12Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2006-01-16T14:43:12Z", "attachment_id": 17433}, {"count": 6, "attachment_id": 17434, "creator": "gerhard.oettl@oesoft.at", "text": "Created attachment 17434\nexample fo for lists", "id": 84669, "time": "2006-01-16T14:45:21Z", "bug_id": 37579, "creation_time": "2006-01-16T14:45:21Z", "tags": [], "is_private": false}, {"count": 7, "attachment_id": null, "creator": "junkmail@lordb.de", "is_private": false, "id": 89471, "time": "2006-05-25T09:14:54Z", "bug_id": 37579, "creation_time": "2006-05-25T09:14:54Z", "tags": [], "text": "*** Bug 39633 has been marked as a duplicate of this bug. ***"}, {"count": 8, "tags": [], "bug_id": 37579, "attachment_id": null, "is_private": false, "id": 99522, "time": "2007-02-17T14:24:42Z", "creator": "jeremias@apache.org", "creation_time": "2007-02-17T14:24:42Z", "text": "*** Bug 41634 has been marked as a duplicate of this bug. ***"}, {"count": 9, "tags": [], "bug_id": 37579, "text": "Any further progress or ETA?", "id": 103381, "time": "2007-05-20T00:34:12Z", "creator": "itsjdh@gmail.com", "creation_time": "2007-05-20T00:34:12Z", "is_private": false, "attachment_id": null}, {"count": 10, "attachment_id": null, "creator": "wiktor@devidens.hu", "text": "Is there any workaround to solve this problem? We work on a project, and we need\nthis feature...  :/", "id": 109450, "time": "2007-10-18T04:17:43Z", "bug_id": 37579, "creation_time": "2007-10-18T04:17:43Z", "tags": [], "is_private": false}, {"count": 11, "attachment_id": null, "creator": "jeremias@apache.org", "is_private": false, "id": 109451, "time": "2007-10-18T04:55:37Z", "bug_id": 37579, "creation_time": "2007-10-18T04:55:37Z", "tags": [], "text": "I don't think there's any work-around. It's really a non-trivial problem with\nour layout approach. As far as I know, nobody's working on this at the moment. I\nyou're fearless, you can try to do it yourself based on the work Gerhard Oettl\nstarted."}, {"count": 12, "attachment_id": null, "creator": "ono@java.pl", "is_private": false, "id": 113319, "time": "2008-01-31T09:29:38Z", "bug_id": 37579, "creation_time": "2008-01-31T09:29:38Z", "tags": [], "text": "Wouldn't be better to include at least Gerhard's patch into the code? Correct, me if I'm wrong, but it's \nbetter to have limited functionality of list & tables footnotes than none.\nHaving footnotes in lists is simply necessary thing when writing bigger projects documentation.\n\nCheers."}, {"count": 13, "tags": [], "text": "\nWorkaround as offered by Ron Van den Branden on fop-users@ :\n\nA way in which the problem can be avoided, is by generating fo:footnote areas for those footnotes *outside* the areas of their \ncontaining lists and tables. If those fo:footnote areas don't contain any text in their fo:inline footnote markers, the latter don't \nshow up in the inline text, while the fo:footnote-body does end up in the footnote region at the bottom of the page. [Note: this \nuse of footnotes is inspired by solutions to other vertical alignment issues like \n<http://www.dpawson.co.uk/xsl/sect3/fofixedposn.html#d12878e43>]\nStylesheet-wise this involves a two-way treatment of footnotes inside lists and tables: 1) generate the footnote markers inline \n(just a fo:inline containing the footnote marker suffices), 2) generate the fo:footnote areas for each of those footnotes out-of-\nline, inside a fo:block after the affected fo:list-block / fo:table.\n\nI'll illustrate with following code, in which the first footnote doesn't get rendered, while the second one does:\n\n   <fo:root xmlns:fo=\"http://www.w3.org/1999/XSL/Format\">\n     <fo:layout-master-set>\n       <fo:simple-page-master master-name=\"simple\" page-height=\"5in\" page-width=\"5in\">\n         <fo:region-body/>\n       </fo:simple-page-master>\n     </fo:layout-master-set>\n     <fo:page-sequence master-reference=\"simple\">\n       <fo:flow flow-name=\"xsl-region-body\">\n         <fo:list-block provisional-distance-between-starts=\"50pt\" provisional-label-separation=\"10pt\">\n           <fo:list-item>\n             <fo:list-item-label end-indent=\"label-end()\">\n               <fo:block>label</fo:block>\n             </fo:list-item-label>\n             <fo:list-item-body start-indent=\"body-start()\">\n               <fo:block>\n                 <!-- This fo:block contains a 'regular' fo:footnote inside a fo:list-block. Note that the fo:footnote-body\n                         doesn't get rendered in the output, due to bug 37579\n                         (http://issues.apache.org/bugzilla/show_bug.cgi?id=37579) -->\n                 List item with a footnote<fo:footnote>\n                 <fo:inline font-size=\"60%\" baseline-shift=\"super\">1)</fo:inline>\n                   <fo:footnote-body>\n                     <fo:block start-indent=\"0.5cm\" text-indent=\"-0.5cm\">\n                       <fo:inline font-size=\"60%\" baseline-shift=\"super\">1)</fo:inline> This footnote doesn't get rendered.</fo:block>\n                   </fo:footnote-body>\n                 </fo:footnote>.\n               </fo:block>\n             </fo:list-item-body>\n           </fo:list-item>\n           <fo:list-item>\n             <fo:list-item-label end-indent=\"label-end()\">\n               <fo:block>label</fo:block>\n             </fo:list-item-label>\n             <fo:list-item-body start-indent=\"body-start()\">\n               <fo:block>\n                 <!-- this footnote is only marked inline by a fo:inline marker -->\n                 List item with a footnote<fo:inline font-size=\"60%\" baseline-shift=\"super\">2)</fo:inline>.\n               </fo:block>\n             </fo:list-item-body>\n           </fo:list-item>                    </fo:list-block>\n         <!-- this block contains the fo:footnote areas for all separate footnotes in the previous fo:list-block -->\n         <fo:block>\n           <fo:footnote>\n             <!-- this fo:inline footnote marker is empty to avoid it getting output after the fo:list-block -->\n             <fo:inline/>\n             <fo:footnote-body>\n               <fo:block start-indent=\"0.5cm\" text-indent=\"-0.5cm\">\n                 <fo:inline font-size=\"60%\" baseline-shift=\"super\">2)</fo:inline> This footnote does get rendered.</fo:block>\n               </fo:footnote-body>\n             </fo:footnote>\n           </fo:block>\n         </fo:flow>\n       </fo:page-sequence>\n     </fo:root>\n\nNote that this approach will require some refinements. For example, for lists / tables that span multiple pages, the footnotes \nwill all end up before / after the affected list / table (depending on the placement of their containing block). In order to avoid \nthis, the fo:list-block / fo:table areas could be generated at the lower level of the list items, i.e. the input list / table will not \ngenerate a fo:list-block / fo:table, but each list item / table row will. Each of those fo:list-block / fo:table areas can then be \nfollowed by a fo:block containing the relevant fo:footnote area. Of course this produces a lot of one-item lists / one-row tables, \nbut it also guarantees that footnotes will show at the right page when they occur in long lists / tables. I haven't tested it in my \nproduction XSL-FO stylesheets, and of course treatment of nested lists would demand further consideration, but I think the \nprinciple works.\n\n", "is_private": false, "id": 113724, "creator": "adelmelle@apache.org", "time": "2008-02-13T12:36:27Z", "bug_id": 37579, "creation_time": "2008-02-13T12:36:27Z", "attachment_id": null}, {"count": 14, "attachment_id": null, "creator": "ron.vandenbranden@kantl.be", "is_private": false, "id": 114646, "time": "2008-03-14T13:10:27Z", "bug_id": 37579, "creation_time": "2008-03-14T13:10:27Z", "tags": [], "text": "In the mean time, I have further investigated the approach mentioned in the previous comment, and documented this research in a blog post at <http://rvdb.wordpress.com/2008/03/07/rendering-footnotes-in-tables-and-lists-with-fop/>.\nIt describes how far it got me in circumventing the bug and indicates where problems remain. It also provides a link to a downloadable zip\npackage containing sample source XML documents and an XSLT stylesheet\nimplementing the techniques discussed. I hope this can a) help others\nlooking for a solution to this problem and b) lead to a better solution."}, {"count": 15, "tags": [], "bug_id": 37579, "attachment_id": 21907, "text": "Created attachment 21907\nPartial patch, updated", "id": 116144, "time": "2008-05-02T08:06:47Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2008-05-02T08:06:47Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 37579, "is_private": false, "text": "I'm attaching an updated patch, that can be applied to the trunk as it is now.\n\nIt basically does the same thing as the old one, just in a slightly different way due to the new classes involved in the table management.\n\nThe 5 \"shortcomings\" listed by Gerhard Oettl in comment #4 are still present, although I'm not sure whether the second one (indentation of notes whose citation is in the list-item-body) is a bug or the right behaviour, because of indent inheritance ...\n\nI've tried to track down the LengthBase error message, but I could not find where the problem really is: the strange thing is that it happens only for footnotes in the list-item-label, and not for those in the list-item-body ...\n\nFootnotes on table headers / footers will probably need a special handling, as they behave quite differently from the \"normal\" ones, being repeated.", "id": 116145, "time": "2008-05-02T08:07:37Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2008-05-02T08:07:37Z", "attachment_id": null}, {"count": 17, "attachment_id": null, "creator": "adelmelle@apache.org", "is_private": false, "id": 116147, "time": "2008-05-02T09:27:37Z", "bug_id": 37579, "creation_time": "2008-05-02T09:27:37Z", "tags": [], "text": "(In reply to comment #16)\n> I'm attaching an updated patch, that can be applied to the trunk as it is now.\n\nThanks! Good to see you back in action ;-)\n\n> \n> It basically does the same thing as the old one, just in a slightly different\n> way due to the new classes involved in the table management.\n> \n> The 5 \"shortcomings\" listed by Gerhard Oettl in comment #4 are still present,\n> although I'm not sure whether the second one (indentation of notes whose\n> citation is in the list-item-body) is a bug or the right behaviour, because of\n> indent inheritance ...\n\nIt is correct behavior. No special rules are defined for property-inheritance on fo:footnotes, so default inheritance applies. Stylesheet authors should reset the indent to zero on the fo:footnote, if so desired.\n\n> \n> I've tried to track down the LengthBase error message, but I could not find\n> where the problem really is: the strange thing is that it happens only for\n> footnotes in the list-item-label, and not for those in the list-item-body ...\n\nThe reason seems to occur due to resolution of the label-end() function that is triggered from within FootnoteBodyLM.\nLooking at org.apache.fop.fo.expr.LabelEndFunction, there is a component PercentLength being created. Resolution of this percentage during normal layout is done by looking up the associated ancestor LM, but since (if I interpret correctly) the FootnoteBodyLM is not a descendant of the original ListItemLayoutManager, this resolution fails...\n\nSetting the fo:footnote's end-indent to \"0pt\" eliminates the dependency on label-end() in the footnote, and thus also the warnings.\n\n> \n> Footnotes on table headers / footers will probably need a special handling, as\n> they behave quite differently from the \"normal\" ones, being repeated.\n> \n\nRight, my first instinct would be to include footnotes for the table-header only on the first page that is spanned by the table, and for the table-footer only on the last page."}, {"count": 18, "tags": [], "creator": "adelmelle@apache.org", "text": "\nJust ran the layoutengine test-suite after having applied the patch, and it seems this causes quite a few tests to break. One of the reasons is an IndexOutOfBoundsException at TableStepper line#237...", "id": 116153, "time": "2008-05-02T10:21:09Z", "bug_id": 37579, "creation_time": "2008-05-02T10:21:09Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "creator": "adelmelle@apache.org", "text": "(In reply to comment #18)\n> Just ran the layoutengine test-suite after having applied the patch, and it\n> seems this causes quite a few tests to break. One of the reasons is an\n> IndexOutOfBoundsException at TableStepper line#237...\n> \n\nFound the cause of this: the error was that the additional code in TableStepper assumed the list of activeCells to be always equal to the number of columns. Changing the code-fragment to be based on activeCells.size() instead of columnCount did the trick.\n\nAlso, but that's maybe more of a personal preference, IMO the ElementListUtils.collectFootnodeBodyLMs() implementations should better be turned around for reasons of code-clarity.\nRight now, the implementation dealing with a single List creates one-element arrays and delegates to the implementation for an array of List. Somehow, I like the opposite where a call to the latter implementation expands into multiple calls to the 'simple' implementation.", "id": 116166, "time": "2008-05-02T12:48:50Z", "bug_id": 37579, "creation_time": "2008-05-02T12:48:50Z", "is_private": false, "attachment_id": null}, {"count": 20, "attachment_id": 21908, "creator": "adelmelle@apache.org", "text": "Created attachment 21908\nUpdated patch against FOP Trunk, which passes all layout-tests and enables two more", "id": 116167, "time": "2008-05-02T12:51:13Z", "bug_id": 37579, "creation_time": "2008-05-02T12:51:13Z", "tags": [], "is_private": false}, {"count": 21, "attachment_id": null, "creator": "adelmelle@apache.org", "text": "\nFurther investigation into the ordering of footnotes for table-header and table-footer revealed that they are added to the first/last page in case we add to the table:\n\ntable-omit-header-at-break=\"true\"\n\nThe reason, if I judge correctly, is that in this case, the header's element-list is added to the head of the combined element list. In the default case, with the header repeated at each break, that list will be the next-to-last element in the combined list. The footer will be the last, if present.\n\nThe infinite loop seems to point to a borderline-case where there is 'just (not) enough' room to fit both the table and all its footnotes on one page. Further investigation pending...\n\nThe problem with getLengthBase() seems to point to a difficulty with property-inheritance: strictly speaking, the footnote should inherit the computed value for start-indent(), but during property resolution, this value is not yet known if the specified value is \"label-end()\". Since LabelEndFunction makes use of a PercentLength that can only be evaluated during layout, the descendants of the list-item-label inherit the expression:\n\nreference-area-width - (provisional-distance-between-starts + start-indent - provisional-label-separation)\n", "id": 116172, "time": "2008-05-02T13:49:08Z", "bug_id": 37579, "creation_time": "2008-05-02T13:49:08Z", "tags": [], "is_private": false}, {"count": 22, "tags": [], "bug_id": 37579, "attachment_id": null, "text": "(In reply to comment #21)\n> The problem with getLengthBase() seems to point to a difficulty with\n> property-inheritance: strictly speaking, the footnote should inherit the\n> computed value for start-indent(), \n\nSorry, I obviously meant \"end-indent\".\n\nThat said, taking indent-inheritance into account, *not* resetting end-indent on an fo:footnote that is a descendant of an fo:list-item-label is very likely to count as 'bad practice'.", "id": 116174, "time": "2008-05-02T13:57:33Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-02T13:57:33Z", "is_private": false}, {"count": 23, "tags": [], "creator": "lfurini@cs.unibo.it", "text": "Thank you for all your comments and additions, Andreas!\nIt's good to be back after quite a long time (enough to forget the good old habit of using JUnit!)\n\n(In reply to comment #22)\n\n> (In reply to comment #21)\n> > The problem with getLengthBase() seems to point to a difficulty with\n> > property-inheritance: strictly speaking, the footnote should inherit the\n> > computed value for start-indent(), \n> \n> Sorry, I obviously meant \"end-indent\".\n\nWhat I still cannot understand is why there is no such problem with start-indent = \"body-start\", which is resolved ok ...\n\n(In reply to comment #17)\n\n> Right, my first instinct would be to include footnotes for the table-header\n> only on the first page that is spanned by the table, and for the table-footer\n> only on the last page.\n\nIt's an interesting idea, and probably the easiest to implement.\nPersonally, I would have placed them all in the first page spanned by the table, although this would be a bit more problematic in terms of relative order between the footnotes. \nWhat do other think in this regard?\n\nAnyway, I think this is a situation not perfectly covered by the specs, which forbid footnotes in static-contents but say nothing about footnotes in table headers / footers, which are not so different.\n\nThe condition defining where a block area returned by fo:footnote is permitted does not explicitly take into account the situation when a single fo:foonote generates several anchor areas in different pages, although the definition \n\n\"The term anchor-area is defined to mean the last area that is generated and returned by the fo:inline child of the fo:footnote.\"\n\ncould maybe be read as a justification for placing all the notes in the last page where the table appears ...", "id": 116234, "time": "2008-05-05T05:59:03Z", "bug_id": 37579, "creation_time": "2008-05-05T05:59:03Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "text": "(In reply to comment #23)\n> Thank you for all your comments and additions, Andreas!\n> It's good to be back after quite a long time (enough to forget the good old\n> habit of using JUnit!)\n\n:-) No problem. That's why it's A Good Thing that there's more of us.\n\n> > (In reply to comment #21)\n> > > The problem with getLengthBase() seems to point to a difficulty with\n> > > property-inheritance: strictly speaking, the footnote should inherit the\n> > > computed value for start-indent(), \n> > \n> > Sorry, I obviously meant \"end-indent\".\n> \n> What I still cannot understand is why there is no such problem with\n> start-indent = \"body-start\", which is resolved ok ...\n\nThey are implemented differently: see org.apache.fop.fo.expr.BodyStartFunction and .LabelEndFunction. label-end() makes explicit use of a percentage, body-start() does not...\n\nIt is only that percentage which causes the error. For 'normal' list-item-label descendants, the base-length is found by climbing up the LM tree until the corresponding LM is found. That's what happens in AbstractBaseLM.getBaseLength(). \nCome to think of it, maybe a way to avoid the warning would be to reimplement getBaseLength() in FootnoteBodyLM, to do something else than try out all ancestors... (long shot)\n\n> > Right, my first instinct would be to include footnotes for the table-header\n> > only on the first page that is spanned by the table, and for the table-footer\n> > only on the last page.\n> \n> It's an interesting idea, and probably the easiest to implement.\n> Personally, I would have placed them all in the first page spanned by the\n> table, although this would be a bit more problematic in terms of relative order\n> between the footnotes. \n\nYours is probably the better idea... Since the footer can appear on the first page, it would indeed be confusing to have its footnote appear maybe 10 pages after the citation first appears.", "is_private": false, "id": 116238, "creator": "adelmelle@apache.org", "time": "2008-05-05T07:15:17Z", "bug_id": 37579, "creation_time": "2008-05-05T07:15:17Z", "attachment_id": null}, {"count": 25, "tags": [], "creator": "adelmelle@apache.org", "text": "(In reply to comment #24)\n> ...\n> It is only that percentage which causes the error. For 'normal' list-item-label\n> descendants, the base-length is found by climbing up the LM tree until the\n> corresponding LM is found. That's what happens in\n> AbstractBaseLM.getBaseLength(). \n> Come to think of it, maybe a way to avoid the warning would be to reimplement\n> getBaseLength() in FootnoteBodyLM, to do something else than try out all\n> ancestors... (long shot)\n\nDid some further research, and the ancestor tree for both footnotes' LMs (label and body) looks like:\nListItemContentLayoutManager\n-> BlockLayoutManager\n  -> LineLayoutManager\n    -> FootnoteLayoutManager\n      -> FootnoteBodyLayoutManager\n\nThe default getBaseLength() in percentage resolution relies on the LM's getFObj() method to find the LM corresponding to the FO on which the percentage is based (the one that is passed as an argument to the PercentLength constructor in LabelEndFunction).\n\nFor the ListItemContentLayoutManager, this method always returns the ListItemBody (never the ListItemLabel).\n\nIt would probably work as expected if we had separate ListItemLabelLM and ListItemBodyLM. Similar issues occur with the table-related objects BTW, where we also do not have a 1-1 correspondence between FO and LM...", "id": 116252, "time": "2008-05-05T09:16:07Z", "bug_id": 37579, "creation_time": "2008-05-05T09:16:07Z", "is_private": false, "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 37579, "attachment_id": null, "is_private": false, "id": 116253, "time": "2008-05-05T09:41:40Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-05T09:41:40Z", "text": "(In reply to comment #25)\n> \n> Did some further research, and the ancestor tree for both footnotes' LMs (label\n> and body) looks like:\n> ListItemContentLayoutManager\n> -> BlockLayoutManager\n>   -> LineLayoutManager\n>     -> FootnoteLayoutManager\n>       -> FootnoteBodyLayoutManager\n\nStrike that... Stopped debugging too early. The label's LM does appear if I leave it running...\n"}, {"count": 27, "tags": [], "bug_id": 37579, "is_private": false, "text": "(In reply to comment #26)\n> \n> Strike that... Stopped debugging too early. The label's LM does appear if I\n> leave it running...\n> \n\nAt the point where getBaseLength() fails, the ancestor tree looks like:\n\nFlowLayoutManager\n-> FootnoteBodyLM\n\nSo, the LM is reparented (in PageBreaker, line 166), and somewhere after that, we get a call to PercentLength.getValue(footnoteBodyLayoutManager)", "id": 116254, "time": "2008-05-05T10:02:04Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-05T10:02:04Z", "attachment_id": null}, {"count": 28, "attachment_id": 21922, "creator": "adelmelle@apache.org", "is_private": false, "id": 116255, "time": "2008-05-05T10:42:16Z", "bug_id": 37579, "creation_time": "2008-05-05T10:42:16Z", "tags": [], "text": "Created attachment 21922\nPatch for FootnoteBodyLayoutManager\n\nNaively tried adding an override for getParent() to FootnoteBodyLM that always returns the associated FootnoteLM, and then it works without errors, but as I expected, the footnote's end-indent is then equal to that of the label. May count as a fix, though... \nI haven't checked yet if there's a situation where FootnoteBodyLM.getParent() is supposed to return the FlowLM."}, {"count": 29, "tags": [], "creator": "adelmelle@apache.org", "text": "\nIn the meantime, I managed to track down the point of origin for the infinite loop. No solution yet, but it happens in PageBreakingAlgorithm.createFootnotePages(), when it is called for the second page (which I presume to be a footnote-only page).\nThe member 'insertedFootnotesLength' never changes, and it is less than the 'totalFootnotesLength', so the loop body is never exited.\n\nAdding a third variable to check whether the first value has actually changed compared to the previous iteration, makes the loop finish, but apparently triggers creation of so many nodes, that no matter how much heap you give it, it still runs out of memory...", "id": 116493, "time": "2008-05-12T01:52:36Z", "bug_id": 37579, "creation_time": "2008-05-12T01:52:36Z", "is_private": false, "attachment_id": null}, {"count": 30, "tags": [], "text": "\nGood news: No idea why exactly, but I just tried again to reproduce the infinite loop with the latest trunk, and couldn't. Maybe has something to do with the changes Vincent has committed to the table-layout code earlier today (?)\n\nThe bad news is that the footnote in the table-footer is now skipped/swallowed...", "is_private": false, "id": 116522, "creator": "adelmelle@apache.org", "time": "2008-05-12T13:45:00Z", "bug_id": 37579, "creation_time": "2008-05-12T13:45:00Z", "attachment_id": null}, {"count": 31, "tags": [], "creator": "adelmelle@apache.org", "text": "\nJust had another look, and it seems to have been a fluke... :(\n\nThe infinite loop remains. Debugging it, I can almost 'see' what's going wrong, but any attempt to bypass it so far, have failed. If not for this case, then for the unit-tests for split footnotes.\n\nThe story goes:\n-> after the page-breaking loop completes, the first page is finished, and its footnotes added as much as possible (4 footnotes in this case)\n-> after that, we see there's still one footnote left which has its citation on that page (PBA.finish(): (node.totalFootnotes < PBA.totalFootnotesLength))\n-> so createFootnotePages() is called, which starts at the last footnote that was added to the previous page; could be a split footnote\n\n=> We hang indefinitely in:\n...\nwhile (insertedFootnotesLength < totalFootnotesLength) {\n     tmpLength = ((Integer)lengthList.get(footnoteListIndex)).intValue();\n     // try adding some more content\n     if ((tmpLength - insertedFootnotesLength) <= availableBPD) {\n        // add a whole footnote\n        availableBPD -= tmpLength - insertedFootnotesLength;\n        insertedFootnotesLength = tmpLength;\n        footnoteElementIndex\n                = ((LinkedList)footnotesList.get(footnoteListIndex)).size() - 1;\n    ...\n...\n}\n\ninsertedFootnotesLength never changes, availableBPD always remains the same (tmpLength == insertedFootnotesLength), so the condition to break the while-loop is never reached.", "id": 116572, "time": "2008-05-13T09:35:50Z", "bug_id": 37579, "creation_time": "2008-05-13T09:35:50Z", "is_private": false, "attachment_id": null}, {"count": 32, "tags": [], "bug_id": 37579, "is_private": false, "text": "\nIn the meantime, I also compared the behavior of the table-testcase with our layout-test for footnote splits.\n\nThe one notable difference between the two cases: if a footnote appears in a one line block, and none of the lines of the footnote fit on the page, then the entire block is moved. If there is a keep-with-previous.within-page=\"always\" on the block, then the preceding block is moved along. Only if at least one line of the footnote fits, a part of the block is also put on the first page.\nSeems like something similar is happening with the footnote in the table-footer. The footnote does not fit, not even one line, but the table-footer cannot be moved (either completely or partially) to the next page either.\n", "id": 116595, "time": "2008-05-14T00:27:45Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-14T00:27:45Z", "attachment_id": null}, {"count": 33, "tags": [], "bug_id": 37579, "attachment_id": null, "text": "(In reply to comment #32)\n\n> The footnote does not fit, not even one line, but the\n> table-footer cannot be moved (either completely or partially) to the next page\n> either.\n\nBrilliant investigation, Andreas!\nSo there are two main differences between \"normal\" footnotes and those in table-header / footer (when table-omit-*-at-break = false), as the latters:\n- need to be repeated in each page where their related table appears\n- cannot be \"delayed\" to the next page as this would lead to a duplication, nor they can be moved together with the header \n\nFrom the implementation point of view, this seems to suggest that, as the table-header (or footer) and its footnotes are actually indivisible (*), their overall length could be used to generate the table elements ... altough this would not be 100% accurate as the proper space resolution with the other surrounding footnotes would be lost.\n\nMmhh, I need to think about this some more time ...\n\n\n(*) Well, there is at least a case when partially deferring table-footer footnotes would not be completely ugly: when the table content is finished, so that there would not be footnote repetition in the next page\n\n\n", "id": 116609, "time": "2008-05-14T07:37:23Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2008-05-14T07:37:23Z", "is_private": false}, {"count": 34, "tags": [], "bug_id": 37579, "text": "\nUpdate:\nAdrian contacted me off-list to see if we could at least partially apply the attached patches. \nMy proposal would be to integrate the changes for footnote support in lists and the table-body, but leave headers/footers out for the moment. This restriction should obviously be reflected in the documentation.\n \nUnless any fop-devs object to this, I'll go ahead, create some additional checks in the existing jUnit tests, update the docs, and apply those changes in the weekend.", "id": 116699, "time": "2008-05-16T06:16:07Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-16T06:16:07Z", "is_private": false, "attachment_id": null}, {"count": 35, "tags": [], "bug_id": 37579, "attachment_id": null, "is_private": false, "id": 116705, "time": "2008-05-16T08:37:11Z", "creator": "dev@cumiskey.com", "creation_time": "2008-05-16T08:37:11Z", "text": "I think this patch should only be applied when it is ready, looks like there is still quite a bit of cleanup to do.  Lets try and have a model that encapsulates a complete solution to the problem in all cases otherwise supporting this feature will be more difficult and confusing for users.  I think ElementListUtils.collectFootnoteBodyLMs() could be revised somewhat.\n\n(In reply to comment #34)\n> Update:\n> Adrian contacted me off-list to see if we could at least partially apply the\n> attached patches. \n> My proposal would be to integrate the changes for footnote support in lists and\n> the table-body, but leave headers/footers out for the moment. This restriction\n> should obviously be reflected in the documentation.\n> \n> Unless any fop-devs object to this, I'll go ahead, create some additional\n> checks in the existing jUnit tests, update the docs, and apply those changes in\n> the weekend.\n> \n\n"}, {"count": 36, "tags": [], "bug_id": 37579, "attachment_id": null, "is_private": false, "id": 116707, "time": "2008-05-16T09:23:54Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-16T09:23:54Z", "text": "(In reply to comment #35)\n> I think this patch should only be applied when it is ready, looks like there is\n> still quite a bit of cleanup to do.  Lets try and have a model that\n> encapsulates a complete solution to the problem in all cases otherwise\n> supporting this feature will be more difficult and confusing for users.  I\n> think ElementListUtils.collectFootnoteBodyLMs() could be revised somewhat.\n\nI'd be happy to look into that. Can you be more specific? The method in question is a general-purpose utility method that can potentially be used by all related LayoutManagers to extract the list of footnotes from an element-list generated by one of their descendants. I don't really see what could or should be revised, so if you have any suggestions...\n\nIt works like a charm anyway, apart from the mentioned anomaly with table-footers.\n\nOf course, we could also leave it another two years... ;-P"}, {"count": 37, "tags": [], "bug_id": 37579, "is_private": false, "text": "(In reply to comment #36)\n> (In reply to comment #35)\n> > I think this patch should only be applied when it is ready, looks like there is\n> > still quite a bit of cleanup to do.  Lets try and have a model that\n> > encapsulates a complete solution to the problem in all cases otherwise\n> > supporting this feature will be more difficult and confusing for users.  I\n> > think ElementListUtils.collectFootnoteBodyLMs() could be revised somewhat.\n> \n> I'd be happy to look into that. Can you be more specific? The method in\n> question is a general-purpose utility method that can potentially be used by\n> all related LayoutManagers to extract the list of footnotes from an\n> element-list generated by one of their descendants. I don't really see what\n> could or should be revised, so if you have any suggestions...\n> \n> It works like a charm anyway, apart from the mentioned anomaly with\n> table-footers.\n\nI'm sorry to chime in so late, but so far I haven't had the time and energy to approach this topic.\n\nAnyway, I've just had a look at the patch and I'm afraid I don't think it's ready to be committed.\nI see mainly the following problems:\n- from a high-level point of view first: list- and table-related code should remain totally footnote-agnostic. The footnote-handling code should remain in a single class and not be spread over the codebase, which would make it error-prone and difficult to maintain and understand.\n- not sure the collectFootnoteBodyLMs taking array parameters is any useful. In the calling code a new array is created and populated with the element lists to parse, and in the method this array is iterated over to get back to the single element lists...\nBelow I will only speak for the table code, because it's the only one in the code impacted by the patch that I know well, but I think the changes don't fit well in it:\n- in TableStepper, ActiveCells aren't ordered by their column indices! Instead they are appended to the list once they start contributing content for the merging algorithm. This means that new cells will be found /after/ cells starting on earlier rows and spanning over the current one, even if they are in earlier columns. So basically the code added in TableStepper doesn't work...\n- in CellPart, there's no reason why the getStartIndex and getEndIndex methods should be made public, package-private would be enough. But in the first place footnotes shouldn't really be handled that way. There is a negative impact on performance since at every iteration, the cells' (linked) lists of elements will be re-skimmed through from the beginning up to the start index.\n\nAn intermediate solution could probably be implemented the following way:\n- in ActiveCell.Step, add a List field that would contain the FootnoteBodyLMs encountered during the last call to gotoNextLegalBreak;\n- in TableStepper.getCombinedKnuthElements, when iterating over the active cells to create the CellPart instances, get those FootnoteBodyLMs in the same time. A small detail to pay attention to is to not re-get them if the active cell doesn't contribute new content to the step. If there are some footnotes, create a KnuthBlockBox, otherwise create a normal Box.\nAnd that should be it basically...\nI'll see if I can submit a patch to illustrate my ideas in the next days.\n\nVincent", "id": 116710, "time": "2008-05-16T10:16:00Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-05-16T10:16:00Z", "attachment_id": null}, {"count": 38, "attachment_id": null, "creator": "adelmelle@apache.org", "text": "(In reply to comment #37)\n> \n> I'm sorry to chime in so late, but so far I haven't had the time and energy to\n> approach this topic.\n\nNo problem.\n\n> \n> Anyway, I've just had a look at the patch and I'm afraid I don't think it's\n> ready to be committed.\n> I see mainly the following problems:\n> - from a high-level point of view first: list- and table-related code should\n> remain totally footnote-agnostic. The footnote-handling code should remain in a\n> single class and not be spread over the codebase, which would make it\n> error-prone and difficult to maintain and understand.\n\nNow that you mention it... \nThe current implementation has the related code (footnote gathering) in PageBreaker.getNextKnuthElements(). The only reason so far that it didn't work for lists and tables is that they did not yet propagate the footnotes for their descendants upwards. \nI'm wondering how can this be done without making either of them footnote-aware... They are agnostic, that is precisely why it does not work now. Both generate combined element-lists for their parts, but the parts' footnotes are not picked up.\n\n> Below I will only speak for the table code, because it's the only one in the\n> code impacted by the patch that I know well, but I think the changes don't fit\n> well in it:\n\nGood! That's why I was hoping you'd chime in.\n\n> - in TableStepper, ActiveCells aren't ordered by their column indices! Instead\n> they are appended to the list once they start contributing content for the\n> merging algorithm. This means that new cells will be found /after/ cells\n> starting on earlier rows and spanning over the current one, even if they are in\n> earlier columns. So basically the code added in TableStepper doesn't work...\n\nOK, I see where this becomes a problem. Had not yet tested such cases, only simple grids.\n\n> An intermediate solution could probably be implemented the following way:\n> - in ActiveCell.Step, add a List field that would contain the FootnoteBodyLMs\n> encountered during the last call to gotoNextLegalBreak;\n> - in TableStepper.getCombinedKnuthElements, when iterating over the active\n> cells to create the CellPart instances, get those FootnoteBodyLMs in the same\n> time. A small detail to pay attention to is to not re-get them if the active\n> cell doesn't contribute new content to the step. If there are some footnotes,\n> create a KnuthBlockBox, otherwise create a normal Box.\n> And that should be it basically...\n> I'll see if I can submit a patch to illustrate my ideas in the next days.\n\nCool, we await your input.\n", "id": 116715, "time": "2008-05-16T11:29:36Z", "bug_id": 37579, "creation_time": "2008-05-16T11:29:36Z", "tags": [], "is_private": false}, {"count": 39, "tags": [], "bug_id": 37579, "is_private": false, "text": "(In reply to comment #38)\n<snip /> \n> Now that you mention it... \n> The current implementation has the related code (footnote gathering) in\n> PageBreaker.getNextKnuthElements().\n\nTo be complete: the first steps are taken in LineLayoutManager.postProcessLineBreaks().", "id": 116716, "time": "2008-05-16T11:37:29Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-16T11:37:29Z", "attachment_id": null}, {"count": 40, "attachment_id": null, "creator": "adelmelle@apache.org", "is_private": false, "id": 116727, "time": "2008-05-17T03:04:03Z", "bug_id": 37579, "creation_time": "2008-05-17T03:04:03Z", "tags": [], "text": "(In reply to comment #38)\n> \n> > An intermediate solution could probably be implemented the following way:\n> > - in ActiveCell.Step, add a List field that would contain the FootnoteBodyLMs\n> > encountered during the last call to gotoNextLegalBreak;\n> > - in TableStepper.getCombinedKnuthElements, when iterating over the active\n> > cells to create the CellPart instances, get those FootnoteBodyLMs in the same\n> > time. A small detail to pay attention to is to not re-get them if the active\n> > cell doesn't contribute new content to the step. If there are some footnotes,\n> > create a KnuthBlockBox, otherwise create a normal Box.\n> > And that should be it basically...\n> > I'll see if I can submit a patch to illustrate my ideas in the next days.\n> \n> Cool, we await your input.\n\nWell, I did not really wait... ;-) \nI've already tried this approach, and I got this working, apart from 'not re-get them if they do not contribute content'. If you could tell me what condition I need to check for, that would save me the time to go looking.\n\nRight now, I have:\n-> added a footnoteList member to ActiveCell, with accompanying accessor\n-> modified gotoNextLegalBreak(): if the element is a KnuthBlockBox and has anchors, then add the footnotes to the added member-list\n-> modified TableStepper (loop +/- line 207) to use the accessor; if the ActiveCell has footnotes, a KnuthBlockBox is generated further on, else a normal Box.\n\nThanks for the helpful feedback so far! It's giving me better insight into table-layout as well, which could come in handy at some point. ;-)"}, {"count": 41, "tags": [], "bug_id": 37579, "is_private": false, "text": "Created attachment 21976\nalternative patch for footnotes in table-cells\n\n\nIf I'm correct, this should be roughly what Vincent proposed (?)", "id": 116761, "time": "2008-05-17T13:05:46Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-17T13:05:46Z", "attachment_id": 21976}, {"count": 42, "attachment_id": null, "creator": "adelmelle@apache.org", "text": "(In reply to comment #41)\n> Created an attachment (id=21976) [details]\n> alternative patch for footnotes in table-cells\n> \n> \n> If I'm correct, this should be roughly what Vincent proposed (?)\n> \n\nJust noticed: after this patch, there does not seem to be a good reason anymore to have the ElementListUtils.collectFootnoteBodyLMs() methods. The only class accessing it, is ListItemLayoutManager, so we may as well put it there in a private method, or inline... Updated patch to follow.", "id": 116763, "time": "2008-05-17T13:25:11Z", "bug_id": 37579, "creation_time": "2008-05-17T13:25:11Z", "tags": [], "is_private": false}, {"count": 43, "tags": [], "bug_id": 37579, "attachment_id": 21977, "text": "Created attachment 21977\nupdated patch against FOP trunk\n\n\nUpdated patch, without support for footnotes in table-header or -footer, which removes ElementListUtils from the picture.\n\nFor list-items, I also took the liberty of making one more modification. Not sure if this agrees with everyone, but if the idea is to improve element access performance in getNextStep(), and we're not modifying the lists anyway, we might as well switch to plain arrays instead of copying the LinkedLists to ArrayLists.", "id": 116764, "time": "2008-05-17T14:40:35Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-17T14:40:35Z", "is_private": false}, {"count": 44, "attachment_id": null, "creator": "adelmelle@apache.org", "text": "(In reply to comment #38)\n> (In reply to comment #37)\n\n> > - from a high-level point of view first: list- and table-related code should\n> > remain totally footnote-agnostic. The footnote-handling code should remain in a\n> > single class and not be spread over the codebase, which would make it\n> > error-prone and difficult to maintain and understand.\n> \n<snip />\n> I'm wondering how can this be done without making either of them\n> footnote-aware... \n\nBeen doing some more thinking, and what if we were to introduce something like a 'FootnoteCollector'? I think something like this would also address Adrian's concern about a complete solution...\nRight now, the LineLayoutManager separates the footnotes from their citations, and attaches them as a  member-list to the KnuthBlockBoxes. The same approach is now copied to list- and table-layout: extraction of the footnotes from the boxes, and copying them to higher-level block-boxes.\n\nWhat if we pass a FootnoteCollector down from the PageBreaker, which contains a Map<KnuthBox, List<FootnoteBodyLM>>, or maybe simply Map<KnuthBox, FootnoteBodyLM[]>.\n\nThe LineLayoutManager would do something like:\n\nfootnoteCollector.collect( KnuthBox, List<KnuthBox> );\n\nwhich would use the box as a key, and put the resulting list as a value in the map.\n\nSomething similar would be done by the list- and table-related LMs.\n\nThe iterations that are now spread over LineLM, PageBreaker, ActiveCell, TableStepper and ListItemLM can then be confined to one single class.\n\nPageBreaker could do something like:\n\nfootnoteCollector.getFootnotesFor( List<KnuthBox> )\n\nto obtain a combined list of footnotes for all the boxes in the list.\n\nWDYT?\n", "id": 116765, "time": "2008-05-17T16:19:07Z", "bug_id": 37579, "creation_time": "2008-05-17T16:19:07Z", "tags": [], "is_private": false}, {"count": 45, "tags": [], "bug_id": 37579, "attachment_id": null, "is_private": false, "id": 116795, "time": "2008-05-19T02:52:15Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-05-19T02:52:15Z", "text": "(In reply to comment #43)\n> Created an attachment (id=21977) [details]\n> updated patch against FOP trunk\n> \n> \n> Updated patch, without support for footnotes in table-header or -footer, which\n> removes ElementListUtils from the picture.\n> \n> For list-items, I also took the liberty of making one more modification. Not\n> sure if this agrees with everyone, but if the idea is to improve element access\n> performance in getNextStep(), and we're not modifying the lists anyway, we\n> might as well switch to plain arrays instead of copying the LinkedLists to\n> ArrayLists.\n> \n\n(In reply to comment #40)\n> (In reply to comment #38)\n> > \n> > > An intermediate solution could probably be implemented the following way:\n> > > - in ActiveCell.Step, add a List field that would contain the FootnoteBodyLMs\n> > > encountered during the last call to gotoNextLegalBreak;\n> > > - in TableStepper.getCombinedKnuthElements, when iterating over the active\n> > > cells to create the CellPart instances, get those FootnoteBodyLMs in the same\n> > > time. A small detail to pay attention to is to not re-get them if the active\n> > > cell doesn't contribute new content to the step. If there are some footnotes,\n> > > create a KnuthBlockBox, otherwise create a normal Box.\n> > > And that should be it basically...\n> > > I'll see if I can submit a patch to illustrate my ideas in the next days.\n> > \n> > Cool, we await your input.\n> \n> Well, I did not really wait... ;-) \n> I've already tried this approach, and I got this working, apart from 'not\n> re-get them if they do not contribute content'. If you could tell me what\n> condition I need to check for, that would save me the time to go looking.\n> \n> Right now, I have:\n> -> added a footnoteList member to ActiveCell, with accompanying accessor\n> -> modified gotoNextLegalBreak(): if the element is a KnuthBlockBox and has\n> anchors, then add the footnotes to the added member-list\n> -> modified TableStepper (loop +/- line 207) to use the accessor; if the\n> ActiveCell has footnotes, a KnuthBlockBox is generated further on, else a\n> normal Box.\n\nThis is already much better, but this can still be improved IMO. TableStepper is still taking too much responsibility: instead of asking ActiveCells if they have any footnotes, and then asking them for their footnotes, it can just provide them with a list to which they can add their own footnotes, if they have any, and if they contribute content to the next step. Kind of inversion of control principle.\n\n \n> Thanks for the helpful feedback so far! It's giving me better insight into\n> table-layout as well, which could come in handy at some point. ;-)\n> \n\nVincent"}, {"count": 46, "tags": [], "bug_id": 37579, "attachment_id": 21979, "is_private": false, "id": 116797, "time": "2008-05-19T02:56:57Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-05-19T02:56:57Z", "text": "Created attachment 21979\nUpdated patch, TableStepper delegating more to ActiveCell\n\nPatch showing how TableStepper can delegate more responsibility to ActiveCell. I didn't touch the modification to list-related class. However, I reverted the modifications to FootnoteBodyLM since they were breaking the testsuite."}, {"count": 47, "attachment_id": null, "creator": "vhennebert@gmail.com", "is_private": false, "id": 116798, "time": "2008-05-19T02:58:37Z", "bug_id": 37579, "creation_time": "2008-05-19T02:58:37Z", "tags": [], "text": "(In reply to comment #43)\n> Created an attachment (id=21977) [details]\n> updated patch against FOP trunk\n> \n> \n> Updated patch, without support for footnotes in table-header or -footer, which\n> removes ElementListUtils from the picture.\n> \n> For list-items, I also took the liberty of making one more modification. Not\n> sure if this agrees with everyone, but if the idea is to improve element access\n> performance in getNextStep(), and we're not modifying the lists anyway, we\n> might as well switch to plain arrays instead of copying the LinkedLists to\n> ArrayLists.\n\nI don't really mind, but this should be done separately from the implementation of footnotes (atomicity of commits).\n\nVincent\n"}, {"count": 48, "tags": [], "text": "(In reply to comment #27)\n> (In reply to comment #26)\n> > \n> > Strike that... Stopped debugging too early. The label's LM does appear if I\n> > leave it running...\n> > \n> \n> At the point where getBaseLength() fails, the ancestor tree looks like:\n> \n> FlowLayoutManager\n> -> FootnoteBodyLM\n> \n> So, the LM is reparented (in PageBreaker, line 166), and somewhere after that,\n> we get a call to PercentLength.getValue(footnoteBodyLayoutManager)\n\nAFAIU the reason why FootnoteBodyLM is re-parented is that it put its areas at the right place (as children of the footnote-reference-area, instead of the block containing the footnote). Simply moving the setParent call after the call to getNextKnuthElements makes the warnings disappear, and doesn't break any test.\nConfirmation from specialists of this part of the code would be appreciated ;-)\n\nVincent", "is_private": false, "id": 117028, "creator": "vhennebert@gmail.com", "time": "2008-05-27T09:45:13Z", "bug_id": 37579, "creation_time": "2008-05-27T09:45:13Z", "attachment_id": null}, {"count": 49, "tags": [], "creator": "adelmelle@apache.org", "text": "(In reply to comment #48)\n> \n> AFAIU the reason why FootnoteBodyLM is re-parented is that it put its areas at\n> the right place (as children of the footnote-reference-area, instead of the\n> block containing the footnote). Simply moving the setParent call after the call\n> to getNextKnuthElements makes the warnings disappear, and doesn't break any\n> test.\n> Confirmation from specialists of this part of the code would be appreciated ;-)\n\nSeems reasonable to me. Cleaner than overriding getParent() anyway.\n\nIn the meantime, I've also been playing with adding an interface FootnoteCitationHolder. Such an interface could then be implemented by KnuthBlockBox and ActiveCell. The interface methods can be used by LineLayoutManager, PageBreaker, ListItemLayoutManager, TableStepper...\n\nThe methods would roughly be:\nhasAnchors()\ngetFootnoteBodyLMs()\naddFootnotes(List<KnuthElement>)\naddFootnotes(FootnoteCitationHolder)\naddFootnote(FootnoteCitationHolder.Citation)\nexpandFootnotes(LayoutManager, LayoutContext, int)\n\nWhile this would still leave the related portions of code distributed over those classes, the interface makes it a bit easier to locate them in an IDE, and makes those pieces of code a bit more uniform.\n\nMost of the loops we see now, would move to KnuthBlockBox, as the only complete implementation. ActiveCell would only implement what is needed to make the citations accessible to the box created by TableStepper. Slight compromise in comparison to the last patch is that, in the iteration over the active cells, we would only create a temporary list with those having citations. If the list is empty, we create a regular box. If not, then we iterate over that temporary list of cells, and instruct the created KnuthBlockBox to add the citations from those cells. The same pattern can be used by ListItemLayoutManager:\n\n- create a temporary list of FootnoteCitationHolders for which hasAnchors() returns true\n- if non-empty, iterate over that temporary list\n- for each element, ask the higher level FootnoteCitationHolder (KnuthBlockBox) to extract the citations, and add them to its own list.\n\nI'll see if I can attach a patch to demonstrate one of these days.", "id": 117049, "time": "2008-05-27T14:01:26Z", "bug_id": 37579, "creation_time": "2008-05-27T14:01:26Z", "is_private": false, "attachment_id": null}, {"count": 50, "tags": [], "bug_id": 37579, "attachment_id": null, "is_private": false, "id": 117084, "time": "2008-05-28T08:30:54Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-05-28T08:30:54Z", "text": "(In reply to comment #49)\n> (In reply to comment #48)\n> > \n> > AFAIU the reason why FootnoteBodyLM is re-parented is that it put its areas at\n> > the right place (as children of the footnote-reference-area, instead of the\n> > block containing the footnote). Simply moving the setParent call after the call\n> > to getNextKnuthElements makes the warnings disappear, and doesn't break any\n> > test.\n> > Confirmation from specialists of this part of the code would be appreciated ;-)\n> \n> Seems reasonable to me. Cleaner than overriding getParent() anyway.\n> \n> In the meantime, I've also been playing with adding an interface\n> FootnoteCitationHolder. Such an interface could then be implemented by\n> KnuthBlockBox and ActiveCell. The interface methods can be used by\n> LineLayoutManager, PageBreaker, ListItemLayoutManager, TableStepper...\n> \n> The methods would roughly be:\n> hasAnchors()\n> getFootnoteBodyLMs()\n> addFootnotes(List<KnuthElement>)\n> addFootnotes(FootnoteCitationHolder)\n> addFootnote(FootnoteCitationHolder.Citation)\n> expandFootnotes(LayoutManager, LayoutContext, int)\n> \n> While this would still leave the related portions of code distributed over\n> those classes, the interface makes it a bit easier to locate them in an IDE,\n> and makes those pieces of code a bit more uniform.\n> \n> Most of the loops we see now, would move to KnuthBlockBox, as the only complete\n> implementation. ActiveCell would only implement what is needed to make the\n> citations accessible to the box created by TableStepper. Slight compromise in\n> comparison to the last patch is that, in the iteration over the active cells,\n> we would only create a temporary list with those having citations. If the list\n> is empty, we create a regular box. If not, then we iterate over that temporary\n> list of cells, and instruct the created KnuthBlockBox to add the citations from\n> those cells. The same pattern can be used by ListItemLayoutManager:\n> \n> - create a temporary list of FootnoteCitationHolders for which hasAnchors()\n> returns true\n> - if non-empty, iterate over that temporary list\n> - for each element, ask the higher level FootnoteCitationHolder (KnuthBlockBox)\n> to extract the citations, and add them to its own list.\n> \n> I'll see if I can attach a patch to demonstrate one of these days.\n\nI've been asked to look into this issue, so I committed a partial and temporary fix based on the latest patch:\nhttp://svn.apache.org/viewvc?view=rev&revision=660979\nFootnotes in table headers and footers are not handled yet, and anyway I think it's best to wait for clarification from xsl-editors before implementing anything (which gives us a couple of months ;-) ).\n\nThat doesn't prevent you from exploring your ideas above, though. I await your patch.\n\nVincent"}, {"count": 51, "tags": [], "bug_id": 37579, "is_private": false, "text": "(In reply to comment #48)\n> (In reply to comment #27)\n> > (In reply to comment #26)\n> > At the point where getBaseLength() fails, the ancestor tree looks like:\n> > \n> > FlowLayoutManager\n> > -> FootnoteBodyLM\n> > \n> > So, the LM is reparented (in PageBreaker, line 166), and somewhere after that,\n> > we get a call to PercentLength.getValue(footnoteBodyLayoutManager)\n> \n> AFAIU the reason why FootnoteBodyLM is re-parented is that it put its areas at\n> the right place (as children of the footnote-reference-area, instead of the\n> block containing the footnote). Simply moving the setParent call after the call\n> to getNextKnuthElements makes the warnings disappear, and doesn't break any\n> test.\n\nThis is more complicated than that. For most of the properties that can take a percentage value, the percentage refers to the containing area's (or nearest ancestor reference area's) ipd or bpd. The only notable exception is font-size, which refers to the parent element.\n\nSo if we take end-indent, for instance, if it's not specified inside footnote-body, then it takes the /computed/ value of the parent element (e.g., the block containing the footnote). /But/ if it has a specified percentage value, then the percentage shall be resolved against the footnote-reference-area. In many cases this will lead to the same result, but not when footnotes are declared inside lists, tables, block-containers, or if the region-body has several columns, etc.\n\nThis issue is not related to lists and tables only, but is more general. If PageBreaker is left as is, then percentages specified inside footnotes should resolve correctly, but not inherited values. If we move the setParent call like explained above, then this is the other way around...", "id": 117087, "time": "2008-05-28T08:48:08Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-05-28T08:48:08Z", "attachment_id": null}, {"count": 52, "tags": [], "creator": "jmt4b04d4v@gmail.com", "text": "(In reply to comment #50)\n> \n> I've been asked to look into this issue, so I committed a partial and temporary\n> fix based on the latest patch:\n> http://svn.apache.org/viewvc?view=rev&revision=660979\n> Footnotes in table headers and footers are not handled yet, and anyway I think\n> it's best to wait for clarification from xsl-editors before implementing\n> anything (which gives us a couple of months ;-) ).\n\nFirst, many thanks to all for your great efforts.\n\nAs I've seen, fop-0.95beta has been released by 2008-03-25 so these temporally fixes (2008-05-28) are still not present in it.\n\nIs there any preliminar release date for beta2 or something like that?. A couple of months?. Should I use trunk?\n\nSorry for the noise.", "id": 117483, "time": "2008-06-08T14:44:42Z", "bug_id": 37579, "creation_time": "2008-06-08T14:44:42Z", "is_private": false, "attachment_id": null}, {"count": 53, "tags": [], "text": "(In reply to comment #52)\n> \n> As I've seen, fop-0.95beta has been released by 2008-03-25 so these temporally\n> fixes (2008-05-28) are still not present in it.\n\nCorrect.\n\n> \n> Is there any preliminar release date for beta2 or something like that?. A\n> couple of months?. Should I use trunk?\n\nIf you really need this feature, then you should indeed use the trunk. 0.95final is very close, but the changes have not applied to the release branch.\n", "is_private": false, "id": 117484, "creator": "adelmelle@apache.org", "time": "2008-06-08T15:25:30Z", "bug_id": 37579, "creation_time": "2008-06-08T15:25:30Z", "attachment_id": null}, {"count": 54, "tags": [], "creator": "sylvestre.ledru@inria.fr", "text": "I believe this bug is now fixed. Isn't it ?", "id": 125218, "time": "2009-02-27T07:18:47Z", "bug_id": 37579, "creation_time": "2009-02-27T07:18:47Z", "is_private": false, "attachment_id": null}, {"count": 55, "tags": [], "bug_id": 37579, "is_private": false, "text": "(In reply to comment #54)\n> I believe this bug is now fixed. Isn't it ?\n\nNo. Footnotes have not been implemented yet in table headers and footnotes, as we are waiting for clarification from the W3C whether they should appear only once or every time the header/footer is repeated. Plus there currently are issues with percentages and inherited values inside footnotes (see comment #51 above).\n\nVincent", "id": 125242, "time": "2009-03-02T02:59:40Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-03-02T02:59:40Z", "attachment_id": null}, {"count": 56, "tags": [], "bug_id": 37579, "attachment_id": 23492, "text": "Created attachment 23492\nExample of lost footnote in table against trunk 660979", "id": 126224, "time": "2009-04-14T03:30:40Z", "creator": "dvgol@yahoo.com", "creation_time": "2009-04-14T03:30:40Z", "is_private": false}, {"count": 57, "tags": [], "text": "(In reply to comment #50)\n> (In reply to comment #49)\n> > (In reply to comment #48)\n> > > \n> > > AFAIU the reason why FootnoteBodyLM is re-parented is that it put its areas at\n> > > the right place (as children of the footnote-reference-area, instead of the\n> > > block containing the footnote). Simply moving the setParent call after the call\n> > > to getNextKnuthElements makes the warnings disappear, and doesn't break any\n> > > test.\n> > > Confirmation from specialists of this part of the code would be appreciated ;-)\n> > \n> > Seems reasonable to me. Cleaner than overriding getParent() anyway.\n> > \n> > In the meantime, I've also been playing with adding an interface\n> > FootnoteCitationHolder. Such an interface could then be implemented by\n> > KnuthBlockBox and ActiveCell. The interface methods can be used by\n> > LineLayoutManager, PageBreaker, ListItemLayoutManager, TableStepper...\n> > \n> > The methods would roughly be:\n> > hasAnchors()\n> > getFootnoteBodyLMs()\n> > addFootnotes(List<KnuthElement>)\n> > addFootnotes(FootnoteCitationHolder)\n> > addFootnote(FootnoteCitationHolder.Citation)\n> > expandFootnotes(LayoutManager, LayoutContext, int)\n> > \n> > While this would still leave the related portions of code distributed over\n> > those classes, the interface makes it a bit easier to locate them in an IDE,\n> > and makes those pieces of code a bit more uniform.\n> > \n> > Most of the loops we see now, would move to KnuthBlockBox, as the only complete\n> > implementation. ActiveCell would only implement what is needed to make the\n> > citations accessible to the box created by TableStepper. Slight compromise in\n> > comparison to the last patch is that, in the iteration over the active cells,\n> > we would only create a temporary list with those having citations. If the list\n> > is empty, we create a regular box. If not, then we iterate over that temporary\n> > list of cells, and instruct the created KnuthBlockBox to add the citations from\n> > those cells. The same pattern can be used by ListItemLayoutManager:\n> > \n> > - create a temporary list of FootnoteCitationHolders for which hasAnchors()\n> > returns true\n> > - if non-empty, iterate over that temporary list\n> > - for each element, ask the higher level FootnoteCitationHolder (KnuthBlockBox)\n> > to extract the citations, and add them to its own list.\n> > \n> > I'll see if I can attach a patch to demonstrate one of these days.\n> \n> I've been asked to look into this issue, so I committed a partial and temporary\n> fix based on the latest patch:\n> http://svn.apache.org/viewvc?view=rev&revision=660979\n> Footnotes in table headers and footers are not handled yet, and anyway I think\n> it's best to wait for clarification from xsl-editors before implementing\n> anything (which gives us a couple of months ;-) ).\n> \n> That doesn't prevent you from exploring your ideas above, though. I await your\n> patch.\n> \n> Vincent\n\nI try to use the trunk 660979 and find a case, when a footnote defined in table-body disappears. An example of this is attached. I look for solution since some days, but don\u2019t get much with my very modest knowledge of fop. Do you have any ideas about that?", "is_private": false, "id": 126225, "creator": "dvgol@yahoo.com", "time": "2009-04-14T03:33:19Z", "bug_id": 37579, "creation_time": "2009-04-14T03:33:19Z", "attachment_id": null}, {"count": 58, "tags": [], "bug_id": 37579, "text": "Hi Dimitri,\n\n(In reply to comment #57)\n<snip/>> \n> I try to use the trunk 660979 and find a case, when a footnote defined in\n> table-body disappears. An example of this is attached. I look for solution\n> since some days, but don\u2019t get much with my very modest knowledge of fop. Do\n> you have any ideas about that?\n\nThis is an oversight. The special code that is executed to handle the forced height set on the table row doesn't handle footnotes. And setting the row height to 33mm is enough to include the line that contains the footnote reference. When the height is set to 32mm that line is handled by the 'normal' code, that knows about footnotes.\n\nI'll see if I can provide a fix in the next days. Thanks for the very simple test case.\n\nVincent", "id": 126267, "time": "2009-04-15T11:01:31Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-04-15T11:01:31Z", "is_private": false, "attachment_id": null}, {"count": 59, "tags": [], "bug_id": 37579, "text": "Comment on attachment 23492\nExample of lost footnote in table against trunk 660979\n\nThis bug has now been fixed.\nhttp://svn.apache.org/viewvc?view=rev&revision=768320", "id": 126482, "time": "2009-04-24T07:30:08Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-04-24T07:30:08Z", "is_private": false, "attachment_id": 23492}, {"count": 60, "tags": [], "bug_id": 37579, "attachment_id": 23561, "text": "Created attachment 23561\nExample of wrong order of footnotes against trunk 768320", "id": 126604, "time": "2009-04-29T01:11:12Z", "creator": "dvgol@yahoo.com", "creation_time": "2009-04-29T01:11:12Z", "is_private": false}, {"count": 61, "tags": [], "creator": "dvgol@yahoo.com", "text": "Hi Vincent,\n\nthank you for the patch. This time another issue with a wrong order of\nfootnotes. There is a two column table in the attached example, both columns\nhave footnotes. Sometimes the footnote from the second column precedes the\nfootnote from the first one. If you delete one block from the first column, the\norder will be right.\n\nDimitri", "id": 126605, "time": "2009-04-29T01:14:59Z", "bug_id": 37579, "creation_time": "2009-04-29T01:14:59Z", "is_private": false, "attachment_id": null}, {"count": 62, "attachment_id": null, "creator": "vhennebert@gmail.com", "is_private": false, "id": 126611, "time": "2009-04-29T03:55:03Z", "bug_id": 37579, "creation_time": "2009-04-29T03:55:03Z", "tags": [], "text": "Hi Dimitri,\n\n(In reply to comment #61)\n> Hi Vincent,\n> \n> thank you for the patch. This time another issue with a wrong order of\n> footnotes. There is a two column table in the attached example, both columns\n> have footnotes. Sometimes the footnote from the second column precedes the\n> footnote from the first one. If you delete one block from the first column, the\n> order will be right.\n\nIt all depends on what order you should be expecting. If you scan the page in its whole width starting from the top you will find the footnote labeled 2 before the footnote labeled 1. This is basically what FOP is doing.\n\nOf course, it may seem more natural to start from the leftmost column, then go to the following one, etc. But this is particular to that case. With a right-to-left language it will be more natural to start from the rightmost column. Sometimes, the content will be such that the method above will be more natural.\n\nSo this is a grey area, and the Recommendation doesn't say anything about that. Your best bet is to re-number the footnotes. Or use something else than footnotes (you may be happy with putting the notes in regular blocks just after the table, for example).\n\nHTH,\nVincent"}, {"count": 63, "attachment_id": null, "creator": "dvgol@yahoo.com", "is_private": false, "id": 126625, "time": "2009-04-29T06:55:22Z", "bug_id": 37579, "creation_time": "2009-04-29T06:55:22Z", "tags": [], "text": "(In reply to comment #62)\n> Hi Dimitri,\n> \n> (In reply to comment #61)\n> > Hi Vincent,\n> > \n> > thank you for the patch. This time another issue with a wrong order of\n> > footnotes. There is a two column table in the attached example, both columns\n> > have footnotes. Sometimes the footnote from the second column precedes the\n> > footnote from the first one. If you delete one block from the first column, the\n> > order will be right.\n> \n> It all depends on what order you should be expecting. If you scan the page in\n> its whole width starting from the top you will find the footnote labeled 2\n> before the footnote labeled 1. This is basically what FOP is doing.\n> \n> Of course, it may seem more natural to start from the leftmost column, then go\n> to the following one, etc. But this is particular to that case. With a\n> right-to-left language it will be more natural to start from the rightmost\n> column. Sometimes, the content will be such that the method above will be more\n> natural.\n> \n> So this is a grey area, and the Recommendation doesn't say anything about that.\n> Your best bet is to re-number the footnotes. Or use something else than\n> footnotes (you may be happy with putting the notes in regular blocks just after\n> the table, for example).\n> \n> HTH,\n> Vincent\n\nHi Vincent,\n\nI understand your point of view, you are probably right. Anyway, current implementation is not very reliable. If you leave only two blocks in the left column in my example, footnote labeled 1 will be output first, although, according to FOP behavior, we can expect it should be footnote labeled 2.\n\nDimitri"}, {"count": 64, "attachment_id": null, "creator": "vhennebert@gmail.com", "text": "Hi Dimitri,\n\n(In reply to comment #63)\n> (In reply to comment #62)\n> > Hi Dimitri,\n> > \n> > (In reply to comment #61)\n> > > Hi Vincent,\n> > > \n> > > thank you for the patch. This time another issue with a wrong order of\n> > > footnotes. There is a two column table in the attached example, both columns\n> > > have footnotes. Sometimes the footnote from the second column precedes the\n> > > footnote from the first one. If you delete one block from the first column, the\n> > > order will be right.\n> > \n> > It all depends on what order you should be expecting. If you scan the page in\n> > its whole width starting from the top you will find the footnote labeled 2\n> > before the footnote labeled 1. This is basically what FOP is doing.\n> > \n> > Of course, it may seem more natural to start from the leftmost column, then go\n> > to the following one, etc. But this is particular to that case. With a\n> > right-to-left language it will be more natural to start from the rightmost\n> > column. Sometimes, the content will be such that the method above will be more\n> > natural.\n> > \n> > So this is a grey area, and the Recommendation doesn't say anything about that.\n> > Your best bet is to re-number the footnotes. Or use something else than\n> > footnotes (you may be happy with putting the notes in regular blocks just after\n> > the table, for example).\n> > \n> > HTH,\n> > Vincent\n> \n> Hi Vincent,\n> \n> I understand your point of view, you are probably right. Anyway, current\n> implementation is not very reliable. If you leave only two blocks in the left\n> column in my example, footnote labeled 1 will be output first, although,\n> according to FOP behavior, we can expect it should be footnote labeled 2.\n\nThe change I made introduced another bug. It should be fixed now in revision 770635. Sorry about that.\n\nThat said, I can think of certain situations involving row-spanning cells where the basic 'rule' stated above does no longer hold. I won't enter the details because they are a bit technical, but interesting issues may arise regarding accessibility, order of reading, etc. (That was a note to self :-) )\n\nVincent", "id": 126665, "time": "2009-05-01T04:31:47Z", "bug_id": 37579, "creation_time": "2009-05-01T04:31:47Z", "tags": [], "is_private": false}, {"count": 65, "tags": [], "bug_id": 37579, "is_private": false, "text": "Footnotes are working now for tables and lists however i still experience that bug when using table-header elements. (The body part doesn't show up at all).\n\nHope this will get fixed soon :)", "id": 143231, "time": "2011-01-10T10:02:33Z", "creator": "tvtreeck@nepatec.de", "creation_time": "2011-01-10T10:02:33Z", "attachment_id": null}, {"count": 66, "tags": [], "text": "resetting P2 open bugs to P3 pending further review", "is_private": false, "id": 157315, "creator": "gadams@apache.org", "time": "2012-04-07T01:41:24Z", "bug_id": 37579, "creation_time": "2012-04-07T01:41:24Z", "attachment_id": null}, {"count": 67, "tags": [], "bug_id": 37579, "is_private": false, "text": "change status from ASSIGNED to NEW for consistency", "id": 157896, "time": "2012-04-11T06:16:41Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T06:16:41Z", "attachment_id": null}]
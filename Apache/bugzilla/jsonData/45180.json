[{"count": 0, "tags": [], "bug_id": 45180, "attachment_id": null, "is_private": false, "id": 117553, "time": "2008-06-10T14:50:40Z", "creator": "asf-bugzilla@rodneybeede.com", "creation_time": "2008-06-10T14:50:40Z", "text": "While trying to implement RFC 2231 with \"Parameter Value Continuations\" I had a header that should appear as follows:\n\nContent-Disposition: attachment; filename*0=\"Rodney.20080516.VaR_Simple.HG2008_HG2008_20080516_issueDetailLog\";\n\tfilename*1=\"_boy_this_is_a_long_header_value\";\n\tfilename*2=\"_now_is_it_not.csv\"\n\n\nThat is according to RFC 2231 which allows this.  I use HttpServletResponse.addHeader(String,String) to add the appropriate header as so:\n\naddHeader(\"Content-Disposition\", above value with \\r\\n inside the string)\n\n\nUnfortanetely Tomcat is replacing my String's \"\\r\\n\" after each \";\" with two spaces instead.\n\nThis results in the actual header returned to the browser being:\n\nContent-Disposition: attachment; filename*0=\"Rodney.20080516.VaR_Simple.HG2008_HG2008_20080516_issueDetailLog\";  \tfilename*1=\"_boy_this_is_a_long_header_value\";  \tfilename*2=\"_now_is_it_not.csv\"\n\n[Each ; is followed by <space><space><tab>filename instead of \\r\\n<tab>filename]\n\nFirefox 2.0.14 will gracefully correct this malformed, non-compliant RFC2231 header, but Internet Explorer 6 nor 7 will handle this correctly.  IE is more strict about the RFC2231 format.\n\nI believe this may have been implemented to discourage XSS mistakes in code, but now it breaks using \\r\\n inside header values.\n\nPerhaps a new method such as \"addUncheckedHeader(String,String)\" that doesn't scrub the \\r\\n would be appropriate?"}, {"count": 1, "tags": [], "text": ">Firefox 2.0.14 will gracefully correct this malformed, non-compliant RFC2231\n>header, but Internet Explorer 6 nor 7 will handle this correctly.  IE is more\n>strict about the RFC2231 format.\n\nHow is the rewritten header non-compliant with respect to HTTP? Keep in mind that HTTP uses a format similar to MIME it is not the same; for instance, there's no fixed line width limit.\n\nBesides, as far as I recall, IE does not support RFC2231 anyway (if it does I'd love to find out what it supports exactly).\n", "is_private": false, "id": 117565, "creator": "julian.reschke@gmx.de", "time": "2008-06-11T04:09:14Z", "bug_id": 45180, "creation_time": "2008-06-11T04:09:14Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 45180, "text": "From section 2.2 of the HTTP/1.1 spec (rfc2616)\n\n<quote>\n   HTTP/1.1 header field values can be folded onto multiple lines if the\n   continuation line begins with a space or horizontal tab. All linear\n   white space, including folding, has the same semantics as SP. A\n   recipient MAY replace any linear white space with a single SP before\n   interpreting the field value or forwarding the message downstream.\n</quote>\n\nIn an HTTP environment CR and LF characters may be converted to SP. Proxies are one example where this might happen. You cannot rely on this conversion never taking place.\n\nYou are correct that where Tomcat does this, it does it for security reasons. This is valid since in HTTP, LWS has the same meaning as SP (see quote above).", "id": 117581, "time": "2008-06-11T09:08:02Z", "creator": "markt@apache.org", "creation_time": "2008-06-11T09:08:02Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 45180, "is_private": false, "id": 117582, "time": "2008-06-11T09:21:12Z", "creator": "asf-bugzilla@rodneybeede.com", "creation_time": "2008-06-11T09:21:12Z", "tags": [], "text": "I concur with the previous comments.  According to the HTTP 1.1 spec (RFC 2616) there is no line length limitation with HTTP headers.  The only exception is with MHTML, but that affects the body content and not necessarily the headers.\n\n19.4.7 MHTML and Line Length Limitations\nHTTP implementations which share code with MHTML [45] implementations need to be aware of MIME line length limitations. Since HTTP does not have this limitation, HTTP does not fold long lines. MHTML messages being transported by HTTP follow all conventions of MHTML, including line length limitations and folding, canonicalization, etc., since HTTP transports all message-bodies as payload (see section 3.7.2) and does not interpret the content or any MIME header lines that might be contained therein. \n\n"}, {"count": 4, "tags": [], "text": "It is actually quite illegal to have \\r (carriage return) \\n (newline) inside of a HTTP 1.1 Header Value. If any HTTP server allows CLRF inside of a header value, it can and will lead to HTTP Response Splitting Attacks. http://en.wikipedia.org/wiki/HTTP_response_splitting\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n\ndefines a field value to be of the following form. LWS is whitespace, so we are really concerned about field-content in the spec.\n\nfield-value    = *( field-content | LWS )\nfield-content  = <the OCTETs making up the field-value\n                        and consisting of either *TEXT or combinations\n                        of token, separators, and quoted-string>\n\nThat leads us to http://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2.2 as Mark pointed out. TEXT and TOKEN explicitly disallows \\r\\n:\n\n       token          = 1*<any CHAR except CTLs or separators>\n       TEXT           = <any OCTET except CTLs,\n                        but including LWS>\n\nWhere CTL's are defined as:\n\n       CTL            = <any US-ASCII control character\n                        (octets 0 - 31) and DEL (127)>\n\nSeparators are different from CTL's. \n\nThat leads us to quoted-strings\n\n      quoted-string  = ( <\"> *(qdtext | quoted-pair ) <\"> )\n\nWhose elements are defined as:\n\n       qdtext         = <any TEXT except <\">>\n\nThe backslash character (\"\\\") MAY be used as a single-character quoting mechanism only within quoted-string and comment constructs.\n\n       quoted-pair    = \"\\\" CHAR\n\nAh, so rtf 2616 DID allow \\r\\n in header values you might say - but changeset 238 http://www3.tools.ietf.org/wg/httpbis/trac/changeset/238 amended rfc 2616 to disallow quoted-pair escaping of NUL, CR and LF. \n", "is_private": false, "id": 117589, "creator": "jim@manico.net", "time": "2008-06-11T17:36:39Z", "bug_id": 45180, "creation_time": "2008-06-11T17:36:39Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 45180, "text": ">It is actually quite illegal to have \\r (carriage return) \\n (newline) inside\n>of a HTTP 1.1 Header Value. If any HTTP server allows CLRF inside of a header\n>value, ...\n\nIn general that's incorrect. CRLF is allowed as part of LWS (linear white space).\n\n> ... it can and will lead to HTTP Response Splitting Attacks.\n\nThat may be true, but doesn't affect what's legal or not.\n\nIf you think the HTTP spec should disallow CRLFs in header values, then better join the httpbis working group and argue the case over there.\n\n", "id": 117600, "time": "2008-06-11T23:25:25Z", "creator": "julian.reschke@gmx.de", "creation_time": "2008-06-11T23:25:25Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "jim@manico.net", "attachment_id": null, "id": 117601, "time": "2008-06-11T23:34:31Z", "bug_id": 45180, "creation_time": "2008-06-11T23:34:31Z", "is_private": false, "text": "You are wrong. CLRF's in LWS is an OPTIONAL part of the HTTP 1.1 spec that anyone who cares about security ignores.\n\n [rule]\n    Square brackets enclose optional elements; \"[foo bar]\" is equivalent to \"*1(foo bar)\"."}, {"count": 7, "tags": [], "bug_id": 45180, "text": "> You are wrong. CLRF's in LWS is an OPTIONAL part of the HTTP 1.1 spec that\n> anyone who cares about security ignores.\n\nI didn't say that they are required to be sent. However it is *allowed* to send them, thus a recipient must handle them correctly.", "id": 117602, "time": "2008-06-11T23:42:48Z", "creator": "julian.reschke@gmx.de", "creation_time": "2008-06-11T23:42:48Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 45180, "attachment_id": null, "is_private": false, "id": 117603, "time": "2008-06-11T23:48:32Z", "creator": "jim@manico.net", "creation_time": "2008-06-11T23:48:32Z", "text": "Right. And as Mark earlier stated per:\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2.2\n\n\"A recipient MAY replace any linear white space with a single SP before interpreting the field value or forwarding the message downstream.\"\n\nTomcat is making the compliant and secure choice, hence the \"resolved\" status of this bug."}]
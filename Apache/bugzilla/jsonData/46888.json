[{"count": 0, "tags": [], "bug_id": 46888, "text": "Created attachment 23397\nJava Program that Reproduces the bug\n\n---Overview---\nI am receiving an XMLSecurityException (\"Cannot create a http://www.w3.org/2000/09/xmldsig#:X509IssuerSerial from a http://www.w3.org/2000/09/xmldsig#:X509IssuerSerial element\") when trying to create an XMLX509IssuerSerial - public XMLX509IssuerSerial(Element element, String baseURI)\n\n---Steps to Reproduce---\nI have attached a short java program that reproduces this issue.  This program creates a DOM that should be a valid IssuerSerial block in the correct namespace.  The IssuerSerial Element is then passed to the constructor of XMLX509IssuerSerial - public XMLX509IssuerSerial(Element element, String baseURI).\n\n---Actual Results---\nAn XMLSecurityException (\"Cannot create a http://www.w3.org/2000/09/xmldsig#:X509IssuerSerial from a http://www.w3.org/2000/09/xmldsig#:X509IssuerSerial element\") is thrown by the constructor.\n\n---Expected Results---\nThe XMLX509KIssuerSerial Constructor returns normally\n\n---Build---\nAccording to the Manifest - this is version 1.4.2_17-b06\n\n---Platform---\n-Windows XP SP3\n-Bea Weblogic 10.3\n-Sun JDK 1.6.0_05\n\n---Additional Information---\nI ran across this bug when parsing a SOAP Response from a Web Service call.  The SOAP response is encrypted.\n\nI looked through the source, and I found that ElementCheckerImpl uses != to verify the namespace instead of a !x.equals(y).\n\nI first encountered this bug when moving my code from Tomcat 6 to Weblogic 10.3.  It worked correctly on Tomcat, but not on Weblogic.  While debugging, I found that Weblogic and Tomcat use a different libraries for parsing the SOAP Response.  My guess is that when the Tomcat library builds the SOAP Response, it references org.apache.xml.security.utils.Constants.SignatureSpecNS, while Weblogic references a different String.  Therefore, when ElementCheckerImpl executes and compares the namespace to org.apache.xml.security.utils.Constants.SignatureSpecNS, it fails on Weblogic, but passes on Tomcat.\n\nI believe the fix should be to change the != to !x.equals(y) in ElementCheckerImpl.", "id": 125686, "time": "2009-03-22T11:00:03Z", "creator": "edgar.j.higgins@gmail.com", "creation_time": "2009-03-22T11:00:03Z", "is_private": false, "attachment_id": 23397}, {"attachment_id": 23685, "tags": [], "bug_id": 46888, "text": "Created attachment 23685\nProposed fix for ElementCheckerImpl.java", "count": 1, "id": 127131, "time": "2009-05-18T16:37:42Z", "creator": "edgar.j.higgins@gmail.com", "creation_time": "2009-05-18T16:37:42Z", "is_private": false}, {"count": 2, "tags": [], "creator": "coheigea@apache.org", "attachment_id": null, "id": 127496, "time": "2009-05-29T07:26:36Z", "bug_id": 46888, "creation_time": "2009-05-29T07:26:36Z", "is_private": false, "text": "\nHi Edgar,\n\nThe reason \"==\" is used rather than \"equals\" in XML-Security is for performance reasons, it's not a bug. The side-effect of this is that you need to intern the namespace when passing it through to XML-Security, e.g. the following code adapted from your test-case works fine:\n\nString newNamespace = new String(\"http://www.w3.org/2000/09/xmldsig#\");\nnew org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial(\n     generateIssuerSerial(newNamespace.intern()), \"\"); \n\nColm."}, {"attachment_id": null, "tags": [], "bug_id": 46888, "text": "Hey Colm,\n\nThanks for your comments, I do appreciate you taking the time to look into this.\n\nYou were correct, it seems that the Weblogic SAAJ SOAP Message Factory is not interning the namespace.  So, the parsed soap message fails in XML Security ElementChecker.\n\nThis means that WS-Security is not compatible with the SOAP Message Factory that is included with Weblogic 10.3.\n\nI have spent some time trying to find a work around, and the best I could come up with is to override the default message factory used by Spring-WS (which would otherwise resolve to Weblogic's MessageFactory implementation).  The configuration is as follows:\n\n\t<bean id=\"wsTemplate\" class=\"org.springframework.ws.client.core.WebServiceTemplate\">\n\t\t<property name=\"interceptors\" ref=\"wsInterceptors\"/>\n\t\t<property name=\"marshaller\" ref=\"wsMarshaller\"/>\n\t\t<property name=\"unmarshaller\" ref=\"wsMarshaller\"/>\n\t\t<property name=\"messageFactory\" ref=\"wsMessageFactory\"/>\n\t</bean>\n\t\n\t<bean id=\"wsMessageFactory\" class=\"org.springframework.ws.soap.saaj.SaajSoapMessageFactory\">\n\t\t<property name=\"messageFactory\">\n\t\t\t<bean class=\"???.MessageFactoryImpl\"/>\n\t\t</property>\n\t</bean>\n\nI'm fairly confident this will work, but I haven't found a SAAJ 1.3 implementation yet (hence the ???.MessageFactoryImpl).  I used Sun's implementation, and ran into an UnsupportedOperationException - It seems they didn't actually implement MessageFactory.createMessage(), so that won't work.  I started down the path of using the axis2 implementation, but that had dependencies, and I don't really like the idea of mixing Spring WS with Axis2 libraries (although, there is probably nothing wrong with it).\n\nI would still suggest that this bug be reconsidered.  I believe XML-Security is relying on the implementation of the parsers, rather than the specification.  I have attached a new fix for this bug that will give the same performance benefits when using a parser that interns the namespace, but that will also work with parsers that do not intern the namespace.", "count": 3, "id": 127722, "time": "2009-06-07T11:38:36Z", "creator": "edgar.j.higgins@gmail.com", "creation_time": "2009-06-07T11:38:36Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 46888, "attachment_id": 23771, "is_private": false, "id": 127723, "time": "2009-06-07T11:41:48Z", "creator": "edgar.j.higgins@gmail.com", "creation_time": "2009-06-07T11:41:48Z", "text": "Created attachment 23771\nProposed fix for ElementCheckerImpl.java"}, {"count": 5, "tags": [], "bug_id": 46888, "attachment_id": null, "is_private": false, "id": 127733, "time": "2009-06-08T03:03:11Z", "creator": "coheigea@apache.org", "creation_time": "2009-06-08T03:03:11Z", "text": "\nHi Edgar,\n\nThanks for your patch. We'll definately be addressing this problem for the next release, as a lot of people have run into it. I was thinking about the best way to tackle it last week actually....I need to do some profiling of this method. Falling back to checking .equals is no good if there are a lot of negative comparisons, as then you lose all of the performance benefits of interning. There are other areas of code as well that rely on interned Strings. I think possibly the best solution is to add a System property that configures whether to use .equals or not.\n\n> I'm fairly confident this will work, but I haven't found a SAAJ 1.3\n> implementation yet (hence the ???.MessageFactoryImpl).  I used Sun's\n> implementation, and ran into an UnsupportedOperationException - It seems they\n> didn't actually implement MessageFactory.createMessage(), so that won't work. \n\nHrm are you sure about that? It works fine for me. Using Sun's SAAJ 1.3 implementation:\n\n MessageFactory factory = MessageFactory.newInstance();\n SOAPMessage soapMessage = factory.createMessage();\n\nWhere soapMessage is then an instance of:\n\ncom.sun.xml.messaging.saaj.soap.ver1_1.Message1_1Impl\n\nColm."}, {"count": 6, "tags": [], "bug_id": 46888, "attachment_id": null, "text": "Colm,\n\nI was incorrectly using MessageFactoryImpl instead of SOAPMessageFactory1_1Impl (which does implement the createMessage() method).  I instantiated the implementation directly because MessageFactory.newInstance() will return the weblogic implementation.  Below is the new spring configuration I used:\n\n    <bean id=\"wsTemplate\"\nclass=\"org.springframework.ws.client.core.WebServiceTemplate\">\n        <property name=\"interceptors\" ref=\"wsInterceptors\"/>\n        <property name=\"marshaller\" ref=\"wsMarshaller\"/>\n        <property name=\"unmarshaller\" ref=\"wsMarshaller\"/>\n        <property name=\"messageFactory\" ref=\"wsMessageFactory\"/>\n    </bean>\n\n    <bean id=\"messageFactory\" class=\"org.springframework.ws.soap.saaj.SaajSoapMessageFactory\">\n        <property name=\"messageFactory\">\n            <bean class=\"com.sun.xml.messaging.saaj.soap.ver1_1.SOAPMessageFactory1_1Impl\"/>\n        </property>\n    </bean>\n\nAnd now everything works perfectly!  Thanks for all of your help Colm.\n\n-Edgar", "id": 127741, "time": "2009-06-08T08:01:24Z", "creator": "edgar.j.higgins@gmail.com", "creation_time": "2009-06-08T08:01:24Z", "is_private": false}]
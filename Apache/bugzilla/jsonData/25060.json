[{"count": 0, "tags": [], "bug_id": 25060, "attachment_id": null, "id": 48264, "time": "2003-11-27T21:15:10Z", "creator": "raz@chewies.net", "creation_time": "2003-11-27T21:15:10Z", "is_private": false, "text": "I fiddled around with this a while and have determined to the best of my ability\nthat this is a real bug.  I have a jndi datasource connected to a postgresql\nserver.  I have two jndi resources (a reader and writer) so that later I can\nimplement a system with replication etc and deal with writes and reads to\ndifferent connections.  To summarize, after using the system, there are two\nconnections to postgres that get reused -- one reader and writer.  Under load,\nthis number increases and will slowly go back down.  I usually end up with two\nidle connections (one reader and one writer) left under no load.  If you reload\nthe context where the datasource is at (it's a context specific datasource), the\nnumber of connections will jump by two when used.  Each reload produces 2 more\nconnections min until I restart the server.  It appears that after a reload, the\n'persisted connections' get abandoned / orphaned.  Eventually, I hit my max\nconnections and cannot aquire any more and the system fails.  I have tried the\nabandond collection parameters and have added debug logging to my code to ensure\nthat I am indeed calling close on the connections I checkout, even on exceptions\nand error cases.  Under normal useage without reloads, no connection leakage\nhappens.\n\nThis is on a solaris 8 machine with the 4.1.27-hotfix-22096.tar.gz applied.  Let\nme know if more information is required.  I have this in a development\nenvironment and can let somone attach in jdb and hammer on the thing since it's\nnot a production system -- if that will help in getting a repro.\n\nWayne"}, {"count": 1, "tags": [], "bug_id": 25060, "attachment_id": null, "id": 48609, "time": "2003-12-06T16:38:26Z", "creator": "glenn@apache.org", "creation_time": "2003-12-06T16:38:26Z", "is_private": false, "text": "I have verified your bug report.  If this is happening with a\nJNDI Named DataSource it might also be happening with other JNDI\nresources created.  And be a source of a memory leak.\n\nGreat bug report.  I don't have a solution yet, but will be\nresearching this.\n\nThanks Wayne"}, {"count": 2, "tags": [], "bug_id": 25060, "attachment_id": null, "id": 48610, "time": "2003-12-06T16:47:57Z", "creator": "remm@apache.org", "creation_time": "2003-12-06T16:47:57Z", "is_private": false, "text": "I think the only clean way to \"fix\" this is to define the data source as global,\nand use links. There's no API in JNDI for releasing resources, so ... (and I\ndon't want to introduce any proprietary APIs either).\nMaybe waiting for GC would be the solution, and maybe there's a memory leak\nassociated with the JNDI context."}, {"attachment_id": null, "tags": [], "bug_id": 25060, "is_private": false, "count": 3, "id": 48633, "time": "2003-12-07T17:34:01Z", "creator": "glenn@apache.org", "creation_time": "2003-12-07T17:34:01Z", "text": "Yes, it may be that when the JNDI resource is defined within\na Context and the context is reloaded or stopped, the previous\nJNDI objects may still consume their resources including db\nconnections until they are GC'd.\n\nAt a minimum we need to verify whether the already existing resources\nbecome eligible for GC after a reload/stop of a Context and there\nis no memory/resource leak.\n\nEven if there is no memory leak and the previous JNDI DataSource becomes\neligible for GC it might be nice to explicitly close the db connections.\n\nIf the DBCP DataSource is being used a possible solution to free up\nresources would be a Context LifeCycle Listener that does a close\non the DBCP DataSource during a Context reload/stop.\n"}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I have confirmed that with the latest code for 4.1.x that the orphaned\nconnections are eligible for garbage collection.\n\nIt is possible, but I have not confirmed it, that as a result of bug 20758 these\nconnections were not eligible for gc in 4.1.30 and earlier but this is only\nspeculation on my part.\n\nI agree with Glenn that it is possible that some explicit clean-up could be\nperformed using a Context LifeCycle Listener but this is a 'nice to have'.\nTherefore, since there is no memory leak here, I am changing this issue to an\nenhancement.", "id": 76141, "time": "2005-06-08T01:20:26Z", "bug_id": 25060, "creation_time": "2005-06-08T01:20:26Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 25060, "attachment_id": null, "is_private": false, "id": 101577, "time": "2007-04-11T07:57:55Z", "creator": "leite@mail.com", "creation_time": "2007-04-11T07:57:55Z", "text": "Hey Mark!\nI respectfully disagree with you about this being a enhancement.\nIf the datasources are left to be garbage collected, their connections with the\ndatabase remain opened (as i just experienced on Tomcat 5.0.28). Since most\ndatabase installations rely on a maximum number of connections, the new\ndatasource resulting of the context's reload might not be able to connect to the\ndatabase, right? If these affirmations are right, IMHO this issue is a bug.\nWhat do you think?\nThank you for your time! :)"}, {"attachment_id": null, "tags": [], "bug_id": 25060, "is_private": false, "count": 6, "id": 143999, "time": "2011-02-05T16:32:22Z", "creator": "cyril.bonte@free.fr", "creation_time": "2011-02-05T16:32:22Z", "text": "Hi, I wanted to open a bug report but finally found this old one.\n\n(In reply to comment #4)\n> I agree with Glenn that it is possible that some explicit clean-up could be\n> performed using a Context LifeCycle Listener but this is a 'nice to have'.\n> Therefore, since there is no memory leak here, I am changing this issue to an\n> enhancement.\n\nI don't totally agree because some pool configurations can cause a memory leak (due to a thread leak). For example, when DBCP is configured with timeBetweenEvictionRunsMillis > 0, the thread won't stop at reload. After several reloads, PermGen becomes full. This is still true with Tomcat 7."}, {"count": 7, "tags": [], "bug_id": 25060, "attachment_id": null, "id": 144839, "time": "2011-03-08T17:20:28Z", "creator": "markt@apache.org", "creation_time": "2011-03-08T17:20:28Z", "is_private": false, "text": "A LifecycleListener isn't necessarily the best place for this and it would require explicit configuration.\n\nI have added some clean-up for DataSource resources when naming resources are stopped but this is far from a generic solution for all resources (and neither is it meant to be). As Remy points out what is needed is a standard interface for releasing JNDI resources. DataSources are sufficiently widely used and the issues sufficiently problematic that I think it makes sense to address them.\n\nThe clean-up has been added to Tomcat 7 and will be included in 7.0.11 onwards.\n\nRegarding the thread leak with Commons DBCP, that is a Commons DBCP bug although one that might be hard to fix."}]
[{"count": 0, "tags": [], "bug_id": 54690, "attachment_id": null, "text": "As users already noted [1], default HTTPS BIO/NIO connector in Tomcat 7.0.37 enables only SSLv3 and TLSv1, while Tomcat 6.0.36 enables SSLv3, TLSv1, TLSv1.1 and TLSv1.2.\n\nThe reason for this change of behavior is that:\n\n1. Tomcat 6, with default HTTPS connector configuration, does not call socket.setEnabledProtocols, thus enabling SSLv3, TLSv1, TLSv1.1 and TLSv1.2, while\n\n2. Tomcat 7, with default HTTPS connector configuration, calls socket.setEnabledProtocols(enabledProtocols), where enabledProtocols is obtained with: context.getDefaultSSLParameters().getProtocols(). This, contrary to not calling setEnabledProtocols at all, results in enabling only SSLv3 and TLSv1.\n\n\nI propose that Tomcat 7 mimics Tomcat 6 behavior, and if attribute sslEnabledProtocols (in HTTPS connector in server.xml) is not set, then method socket.setEnabledProtocols is not invoked.\n\nEverything is tested with Oracle JDK 1.7.0_15.\n\nMore details on post on Tomcat dev list [2].\n\n[1] https://twitter.com/ivanristic/status/303798231920431104\n[2] http://www.mail-archive.com/dev@tomcat.apache.org/msg71522.html", "id": 165802, "time": "2013-03-13T17:07:20Z", "creator": "ognjen.d.blagojevic@gmail.com", "creation_time": "2013-03-13T17:07:20Z", "is_private": false}, {"count": 1, "tags": [], "creator": "ognjen.d.blagojevic@gmail.com", "attachment_id": null, "is_private": false, "id": 165803, "time": "2013-03-13T17:11:43Z", "bug_id": 54690, "creation_time": "2013-03-13T17:11:43Z", "text": "Here is a simple class to demonstrate Oracle JDK 7 behavior:\n\nimport java.net.ServerSocket;\nimport java.util.Arrays;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLServerSocket;\nimport javax.net.ssl.SSLServerSocketFactory;\n\npublic class SSLProtocolsTest {\n\n    public static void main(String[] args) throws Exception {\n        SSLContext context = SSLContext.getInstance(\"TLS\");\n        context.init(null, null, null);\n        \n        SSLServerSocketFactory sslProxy = context.getServerSocketFactory();\n        ServerSocket ssocket = sslProxy.createServerSocket(443);\n        \n        SSLServerSocket socket = (SSLServerSocket) ssocket;\n        // Prints: [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2]\n        System.out.println(\" Socket enabled protocols: \" + Arrays.asList(socket.getEnabledProtocols()));\n        \n        socket.setEnabledProtocols(context.getDefaultSSLParameters().getProtocols());\n        // Prints: [SSLv3, TLSv1]\n        System.out.println(\"Default enabled protocols: \" + Arrays.asList(socket.getEnabledProtocols()));\n    }\n\n}"}, {"count": 2, "attachment_id": null, "bug_id": 54690, "text": "Note hidden in the code comments is the fact that support for SSLv2Hello is also dropped.\n\nNote that the change that triggered this bug was 54406.", "id": 165816, "time": "2013-03-13T23:16:48Z", "creator": "markt@apache.org", "creation_time": "2013-03-13T23:16:48Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 54690, "text": "Some issues at $work have prompted me to look into this further.\n\nFundamentally, this is a JVM bug. I think the way forward is to use\n\nsocket.getEnabledProtocols()\n\nto determine what the default protocols really are rather than using\n \ncontext.getDefaultSSLParameters().getProtocols()\n\nThat should then be JVM neutral. We can also add a test case that will pick up if this ever gets fixed in the JVM.\n\nI'll look into patching this tomorrow.", "id": 165817, "time": "2013-03-13T23:37:31Z", "creator": "markt@apache.org", "creation_time": "2013-03-13T23:37:31Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 54690, "is_private": false, "text": "*** Bug 54619 has been marked as a duplicate of this bug. ***", "id": 165835, "time": "2013-03-14T11:59:47Z", "creator": "markt@apache.org", "creation_time": "2013-03-14T11:59:47Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 54690, "text": "Digging into the OpenJDK source code it appears that the JVM behaviour is by design.\n\nThe defaults are different for client and server connections and SSLContext.getDefaultSSLParameters() returns the defaults for client connections not server connections.\n\nWe currently use SSLContext.getDefaultSSLParameters() to get the default ciphers and the default protocols. The protocols are different for clients and servers (this bug) and so are the ciphers (an additional issue no-one has reported). Both these issues need to be fixed.", "id": 165836, "time": "2013-03-14T12:45:57Z", "creator": "markt@apache.org", "creation_time": "2013-03-14T12:45:57Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 54690, "text": "This has been fixed in trunk and 7.0.x and will be included in 7.0.39 onwards.", "id": 165839, "time": "2013-03-14T14:53:34Z", "creator": "markt@apache.org", "creation_time": "2013-03-14T14:53:34Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 54690, "text": "Thank you.\n\nWorkaround for Tomcat 7.0.37 users: add \n\n  sslEnabledProtocols=\"TLSv1.2,TLSv1.1,TLSv1,SSLv3,SSLv2Hello\"\n\nto HTTPS BIO/NIO connector configuration.", "id": 165844, "time": "2013-03-14T17:00:09Z", "creator": "ognjen.d.blagojevic@gmail.com", "creation_time": "2013-03-14T17:00:09Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 54690, "text": "For posterity, the actual situation with JSSE is a bit more complicated than client vs server.\n(The fix and workaround for this issue are correct - this is just to clarify the landscape in case it's ever come across again).\n\nTesting on Java 7 on OS X/Linux/HP-UX:\n\nThere are 3 distinct sets of cipher suites obtainable from the 23! unique locations in the JSSE API that produce a list of cipher suites.\nThere are 4 distinct sets of protocol variants obtainable from the 15! unique locations in the JSSE API that produce a list of protocols.\n\nI've attached a full report, but in summary:\n\nThe cipher suites obtained are grouped into 3 distinct sets of ciphers:\n1. Default ciphers for client objects (SSLContext and SSLSocketFactory/SSLSocket) for default and <= TLSv1.1 engines\n2. Supported ciphers for all engines (i.e. they're all the same)\n3. Enabled ciphers from server objects (SSLEngine, SSLServerSocketFactory and SSLServerSocket) for all engines, and client object defaults for TLSv1.2 engine\n\nThe protocol variants are grouped into the following 4 sets:\n1. Default for SSLContext and supported/default for SSLSocket in TLSv1.2 engine\n2. Default for SSLContext and supported/default for SSLSocket in TLSv1.1 engine\n3. Default for SSLContext and supported/default for all engines default and <= TLSv1 engines\n4. Supported for SSLContext, supported/defaults for SSLEngine/SSLServerSocket in all engines\n\n\nFor Java 6 on OS X/Linux/HP-UX, the results are a bit simpler: \n- Cipher suites are split into 2 groups: supported cipher suites, and default/enabled cipher suites (on all client + server objects).\n- For protocol variants, supported == enabled == default in all locations.\n\n\nFor Java 7 on AIX:\n- Cipher suites are in 2 groups (supported and default/enabled), with client + server defaults the same.\n- Protocol variants are in 6 groups:\n1. Defaults for client objects in Default engine (SSLv3, TLSv1)\n2. Supported/default for client objects for TLSv1.2 engine (TLSv1.2 only)\n3. Supported/default for client objects for TLSv1.1 engine (TLSv1.1 only)\n4. Supported/default for client objects for TLS and TLSv1 engines (TLSv1 only)\n5. Supported/default for client objects for SSL and SSLv3 engines (SSLV3 only)\n6. Supported protocols for SSLContext, SSLEngine and SSLServerSocket on all engines, and defaults for SSLServerSocket on default engine (SSLv3+)\n\n(As an aside, all of this points out that in Java 7 switching the engine using the HTTPS connector protocol attribute will not only change defaults, but change the supported protocol variants that can be enabled).\n\nCutting across all this:\n- Supported for SSLContext appears to be stable across the versions/platforms\n- the only way to reliably detect the 'server' defaults in a JVM appear to be via an SSLEngine or a SSLServerSocket constructed from an SSLContext. Thankfully the defaults appear to be independant of the engine (the protocol argument to SSLContext.getInstance()).", "id": 166062, "time": "2013-03-21T02:51:12Z", "creator": "timw@apache.org", "creation_time": "2013-03-21T02:51:12Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 54690, "text": "Created attachment 30088\nJSSE options on Oracle Java 7", "id": 166063, "time": "2013-03-21T02:51:56Z", "creator": "timw@apache.org", "creation_time": "2013-03-21T02:51:56Z", "is_private": false, "attachment_id": 30088}, {"count": 10, "tags": [], "bug_id": 54690, "is_private": false, "text": "Created attachment 30089\nJSSE options on Oracle Java 6", "id": 166064, "time": "2013-03-21T02:52:14Z", "creator": "timw@apache.org", "creation_time": "2013-03-21T02:52:14Z", "attachment_id": 30089}, {"count": 11, "tags": [], "bug_id": 54690, "is_private": false, "text": "Created attachment 30090\nJSSE options on AIX Java 7", "id": 166065, "time": "2013-03-21T02:53:07Z", "creator": "timw@apache.org", "creation_time": "2013-03-21T02:53:07Z", "attachment_id": 30090}]
[{"count": 0, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 11001, "time": "2002-02-21T10:09:56Z", "creator": "bodewig@apache.org", "creation_time": "2002-02-21T10:09:56Z", "is_private": false, "text": "This META-BUG is here to collect all reports of the \"<style> ignores <classpath>\"\nor \"<junit> ignores <classpath>\" type, which are symptoms of a common root\nproblem.\n\nI'll try to describe the problem here and show how to work around the problem, the\ngoal is to gather feedback on this description and add it to the FAQ and the\nmanual after that."}, {"count": 1, "tags": [], "bug_id": 6606, "attachment_id": null, "text": "*** Bug 5947 has been marked as a duplicate of this bug. ***", "id": 11003, "time": "2002-02-21T10:13:14Z", "creator": "bodewig@apache.org", "creation_time": "2002-02-21T10:13:14Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "text": "*** Bug 1118 has been marked as a duplicate of this bug. ***", "count": 2, "id": 11009, "time": "2002-02-21T10:33:04Z", "bug_id": 6606, "creation_time": "2002-02-21T10:33:04Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "text": "*** Bug 3934 has been marked as a duplicate of this bug. ***", "count": 3, "id": 11012, "time": "2002-02-21T10:36:13Z", "bug_id": 6606, "creation_time": "2002-02-21T10:36:13Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 11014, "time": "2002-02-21T11:19:24Z", "creator": "bodewig@apache.org", "creation_time": "2002-02-21T11:19:24Z", "is_private": false, "text": "OK, first of all let's state that Ant adds all .jar files from ANT_HOME/lib\nto CLASSPATH, therefore when I say \"in CLASSPATH\" in the rest, it means \"either\nin your CLASSPATH environment or ANT_HOME/lib\".\n\nThis bug collects a common type of problem: A task needs an external library and\nit has a nested classpath element so that you can point it to this external\nlibrary, but that doesn't work unless you put the external library into the\nCLASSPATH.\n\nThe root of the problem is that the class that needs the external library\nis on the CLASSPATH.\n\nWhen you specify a nested <classpath> in Ant, Ant creates a new class loader\nthat uses the path you have specified.  It then tries to load additional\nclasses from this classloader.\n\nIn most cases - for example the two cases above - Ant doesn't load the external\nlibrary directly, it is the loaded class that does so.\n\nIn the case of <junit> it is the task implementation itself and in the case\nof <style> it is the implementation of the\norg.apache.tools.ant.taskdefs.XSLTLiaison class.\n\nAnt's class loader implementation uses Java's delegation model, see\nhttp://java.sun.com/products/jdk/1.2/docs/api/java/lang/ClassLoader.html\nthe paragraph\n\n> The ClassLoader class uses a delegation model to search for classes and \n> resources. Each instance of ClassLoader has an associated parent class loader.\n> When called upon to find a class or resource, a ClassLoader instance will \n> delegate the search for the class or resource to its parent class loader\n> before attempting to find the class or resource itself. The virtual machine's\n> built-in class loader, called the bootstrap class loader, does not itself have\n> a parent but may serve as the parent of a ClassLoader instance.\n\nThis means, Ant's class loader will consult the bootstrap class loader first,\nwhich tries to load classes from CLASSPATH.  The bootstrap class loader\ndoesn't know anything about Ant's class loader or even the path you have specified.\n\nIf the bootstrap class loader can load the class Ant has asked it to load,\nthis class will try to load the external library from CLASSPATH as well - it\ndoesn't know anything else - and will not find it unless the library is in\nCLASSPATH as well.\n\nTo solve this, you have two major options:\n\n(1) put all external libaries you need in CLASSPATH as well\n\nthis is not what you want, otherwise you wouldn't have found this bug report.\n\n(2) remove the class that loads the external library from the CLASSPATH.\n\nThe easiest way to do this is to remove optional.jar from ANT_HOME.  If you do\nso, you will have to <taskdef> all optional tasks and use nested <classpath>\nelements in the <taskdef> tasks that point to the new location of optional.jar.\nAlso, don't forget to add the new location of optional.jar to the <classpath>\nof your <style> or <junit> task.\n\nIf you want to avoid to <taskdef> all optional tasks you need, the only other\noption is to remove the classes that should not be loaded via the bootstrap\nclass loader from optional.jar and put them into a separate archive. Add this\nseparate archive to the <classpath> of your <style> or <junit> task - and make\nsure the separate archive is not in CLASSPATH.\n\nIn the case of <junit> you'd have to remove all classes that are in the\norg/apache/tools/ant/taskdefs/optional/junit directory, in the <style> case\nit is one of the *Liaison classes in org/apache/tools/ant/taskdefs/optional.\n\nIf you use the option to break up optional.jar for <junit>, you still have to\nuse a <taskdef> with a nested <classpath> to define the junit task.\n\nDoes this description make any sense?  Would it help people who face the same\nproblem you have seen?  If not, how can we improve it?"}, {"count": 5, "tags": [], "bug_id": 6606, "text": "*** Bug 4065 has been marked as a duplicate of this bug. ***", "id": 11016, "time": "2002-02-21T11:54:16Z", "creator": "bodewig@apache.org", "creation_time": "2002-02-21T11:54:16Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 11017, "time": "2002-02-21T12:18:50Z", "creator": "jimes@hiwaay.net", "creation_time": "2002-02-21T12:18:50Z", "is_private": false, "text": "Bug 5947 offers what I think is a better workaround for JUnit, namely the fork=yes option.  True, it's not exactly what I want, but neither is it as complex (in my way of thinking) as disassembling and manually reassembling the ant optional framework.  I did come across an aside in the docs mentioning that the classpath wouldn't work unless we fork, but better documentation would help with the understanding so folks like me don't spend hours trying to figure out why the classpath tag isn't working in this excellent new build tool that I'm just beginning to figure out :-)  A warning from JUnit when it encounters a classpath tag in a non-fork task that wasn't taskdef'ed would also help to bring attention to the problem and help folks with the workaround without resolving it.How to resolve fully?  I'll have to cogitate more on that one."}, {"count": 7, "tags": [], "text": "Thanks Jim,\n\nyes, fork=\"true\" helps in the case of <junit>, I forgot about it.", "attachment_id": null, "id": 11018, "creator": "bodewig@apache.org", "time": "2002-02-21T12:25:26Z", "bug_id": 6606, "creation_time": "2002-02-21T12:25:26Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 11086, "time": "2002-02-22T07:12:12Z", "creator": "steve_l@iseran.com", "creation_time": "2002-02-22T07:12:12Z", "is_private": false, "text": "*** Bug 5825 has been marked as a duplicate of this bug. ***"}, {"attachment_id": null, "tags": [], "bug_id": 6606, "text": "Thanks for this very clear description of the problem from ant's point of view.\nNow let me expose some of the very concrete problems we run because of this bug.\n\nWe use ant scripts to build our product on various software platform (some\nlinux, some forte/netbeans on windows with the integrated ant). Since our\nexternal dependencies shift a lot they are downloaded on the build computer by\nant at the beginning of the build process. This is done via xslt analysis of xml\ndescriptors bundled with each of our modules. Installation documentation is also\nprocessed with xslt at build time.\n\nPutting all libraries in the classpath is therefore not possible since most of\nthe external jars used in a typical build do not exist on the build system\nbefore ant start, and if they do they might not have the correct version for the\nversion of the product we are building (moreover the maturity and behaviour of\nxslt java engines changes a lot from version to version and provider to provider\nand using the wrong xslt jar with a version of our ant scripts will cause it to\nfail)\n\nMicromanaging ant installations on all the build systems would be a nightmare :\nsome are bundled with other products (forte) and anyway there is a very high\nrisk they would have to be changed on *all* system every time the main build\nsystem changed a little or we tried to build an old version.\n\nI appreciate this is a difficult problem and I do not expect ant to be fixed at\nonce but I really think it is worth it (and the number of bugs open on this\nsubjets kind of suggests it) \n", "count": 9, "id": 11096, "time": "2002-02-22T11:04:11Z", "creator": "nicolas.mailhot@one2team.com", "creation_time": "2002-02-22T11:04:11Z", "is_private": false}, {"count": 10, "tags": [], "text": "*** Bug 7081 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 11729, "creator": "bodewig@apache.org", "time": "2002-03-13T12:10:45Z", "bug_id": 6606, "creation_time": "2002-03-13T12:10:45Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 6606, "text": "This now is http://jakarta.apache.org/ant/faq.html#delegating-classloader", "count": 11, "id": 13971, "time": "2002-04-18T14:49:19Z", "creator": "bodewig@apache.org", "creation_time": "2002-04-18T14:49:19Z", "is_private": false}, {"count": 12, "tags": [], "text": "\nStefan, your suggested solution \"remove the class that loads the external \nlibrary from the CLASSPATH\" is not sufficient. It fails, for example, in\nthe case of Mappers. The problem is quite the same: The regexp packages\nare not found, unless they are in lib. And, of course, I cannot remove\nthe Mapper classes from the classpath.\n\nThere has to be another solution for the problem. For example, TomCat\nhad quite the same thing with JAR's in WEB-INF/lib. For example, if\nI have a WEB-INF/classes/jndi.properties then it wasn't found before\nTomCat 3.2.4. I had to put it into TomCat's system class path. Nowadays\nthis works.\n\n\n", "attachment_id": null, "id": 14845, "creator": "jochen.wiedmann@softwareag.com", "time": "2002-04-26T15:22:33Z", "bug_id": 6606, "creation_time": "2002-04-26T15:22:33Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 6606, "attachment_id": null, "text": "I have a suggestion, which fixes most of the problems. More precise,\nit someone depends on the \"right\" behaviour of the software components\nin use. But the most important software component is, of course, Ant.\n\nFirst, let me explain my view of the problem: Any Java class has\nan associated ClassLoader. The ClassLoader has loaded the class,\nthus it is able to load other classes from the same JAR file (or\nfiles). If two classes A and B have different ClassLoaders and B\ntries to load a class from A's JAR file with Class.forName(...),\nthen this doesn't necessarily work.\n\nThis is exactly the problem with Ant. For example, if I load a\nclass MyTask with\n\n  <taskdef name=\"mytask\" ...><classpath>...</classpath></taskdef>\n\nthen the class MyTask has the right ClassLoader, but the Ant\nclasses don't. So, if for example the MyTask uses a class MyType\nimplementing a nested element of MyTask, then the IntrospectionHelper\nwill do a Class.forName(\"MyType\"). This fails, because Class.forName\nuses the ClassLoader of the IntrospectionHelper.\n\nThe proposed solution works as follows:\n\n  - Never use Class.forName(). Replace it with a helper method\n    like\n\n      public static Class myForName(String name)\n          throws ClassNotFoundException {\n        try {\n          return Class.forName(name);\n        } catch (ClassNotFoundException e) {\n          ClassLoader cl = Thread.currentThread().getContextClassLoader();\n          if (cl == null) {\n            throw e;\n          }\n          return cl.loadClass(name);\n        }\n\n  - Make sure, that the threads ContextClassLoader is right. For\n    example, use a helper class ThreadContextClassLoader, which\n    grabs the current ContextClassLoader and an additional\n    ClassLoader and uses Class.forName(), original thread\n    ContextClassLoader and the additional ClassLoader, in that\n    order and enclose the perform() method with\n\n      Task task;\n      ThreadClassLoader tcl =\n        new ThreadClassLoader(task.getClass().getClassLoader());\n      ClassLoader cl = Thread.currentThread().getClassLoader();\n      try {\n        Thread.currentThread.setContextClassLoader(tcl);\n        task.perform;\n      } finally {\n        Thread.currentThread.setContextClassLoader(cl);\n      }\n\nI offer to create a patch, if someone (Stefan?) discusses details\nwith me and advices me, which version to patch exactly.\n\n\nRegards,\n\nJochen\n", "id": 17639, "time": "2002-06-12T07:32:16Z", "creator": "jochen.wiedmann@softwareag.com", "creation_time": "2002-06-12T07:32:16Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 17640, "time": "2002-06-12T07:40:44Z", "creator": "bodewig@apache.org", "creation_time": "2002-06-12T07:40:44Z", "is_private": false, "text": "One problem with you approach is, that the context classloader is not available\nin JDK 1.1.\n\nWe already have at least half of the infrastructure for your proposal in place,\ni.e. AntClassLoader knows how to set and unset itself as the context classloader\n(via reflection) and the oat.ant.util.LoaderUtil class can retrieve the context\nclass loader via reflection.\n\nAll that we'd need now:\n\n(1) set the context class loader in the right places\n(2) use it consistently\n(3) ensure we don't break backwards compatibility\n\nI'll be happy to assist here, the context would be no earlier than Ant 1.6 of\ncourse."}, {"count": 15, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 17642, "time": "2002-06-12T08:25:21Z", "creator": "conor@apache.org", "creation_time": "2002-06-12T08:25:21Z", "is_private": false, "text": "The statement below is not correct.\n\n> then the class MyTask has the right ClassLoader, but the Ant\n> classes don't. So, if for example the MyTask uses a class MyType\n> implementing a nested element of MyTask, then the IntrospectionHelper\n> will do a Class.forName(\"MyType\"). This fails, because Class.forName\n> uses the ClassLoader of the IntrospectionHelper.\n\nIntrospection Helper gets the class of the nested type from the class being\nintrospected through reflection. This class will have been loaded by MyTask's\nloader when the MyTask class was resolved by the VM. Class.forName is not used\nin IntrospectionHelper unless you are trying to contruct a Class argument which\nwould be very uncommon (probably never).\n\nJust FYI..."}, {"count": 16, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 21077, "time": "2002-08-15T09:56:59Z", "creator": "sbailliez@apache.org", "creation_time": "2002-08-15T09:56:59Z", "is_private": false, "text": "*** Bug 9841 has been marked as a duplicate of this bug. ***"}, {"attachment_id": null, "tags": [], "bug_id": 6606, "text": "*** Bug 10931 has been marked as a duplicate of this bug. ***", "count": 17, "id": 21171, "time": "2002-08-16T15:26:19Z", "creator": "sbailliez@apache.org", "creation_time": "2002-08-16T15:26:19Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 6606, "text": "*** Bug 14931 has been marked as a duplicate of this bug. ***", "id": 27119, "time": "2002-11-28T14:40:35Z", "creator": "bodewig@apache.org", "creation_time": "2002-11-28T14:40:35Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "*** Bug 22170 has been marked as a duplicate of this bug. ***", "id": 42244, "time": "2003-08-06T11:13:32Z", "bug_id": 6606, "creation_time": "2003-08-06T11:13:32Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 42275, "time": "2003-08-06T17:04:54Z", "creator": "tommy@tommysvensson.net", "creation_time": "2003-08-06T17:04:54Z", "is_private": false, "text": "Since my bug report (22170) has been marked as a duplicate of this one, I guess\nits better that I put my comment in this instead.\n\nI think I might know what the problem is. Since reporting my bug I have made my\nown ClassLoader for my project, and I got exactly the same exception as Ant\ndoes! It complains that it cannot find \"Path.class\". What I didn't notice at\nfirst was that the class it complains about not finding is not having any\npackage! In my case the Path class does belong to a package. But somewhere in my\ncode there is a \n\n  if (this.interfaceClass.getPackage() != null) ...\n\ngetPackage() did actually return null when this.interfaceClass had been loaded\nby my class loader causing \"Path.class\" without a package to be looked for a bit\ndown using Class.forName(). This ofcourse failed with the ClassNotFoundException.\n\nWhat I did was to add a call to definePackage(...) with the class package before\ncalling defineClass() in findClass(). When the class is then defined the package\n the class file refers to is also defined and the defined class can reference it.\nAfter this fix my class loader works perfectly.\n\nIf I bring up AntClassLoader.java in my editor and do a find on \"definePackage\"\nnothing is found! So AntClassLoader never calls definePackage()! That is the\nsource of my problem!\n\nBest Regards, Tommy Svensson"}, {"count": 21, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 72207, "time": "2005-03-11T16:22:41Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-11T16:22:41Z", "is_private": false, "text": "*** Bug 33440 has been marked as a duplicate of this bug. ***"}, {"count": 22, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 75609, "time": "2005-05-30T21:39:55Z", "creator": "ant@tobiasen.dk", "creation_time": "2005-05-30T21:39:55Z", "is_private": false, "text": "I have a patch that makes junit work without any changes to the ant installation.\nThe only requirement is that you fork a new JVM for the junit test.\nHow did I do this? I changed the ant-junit.jar so it does not load/reference any\njunit classes before it forks a new JVM. That way the classloader problems\ndisappear since junit classes are not loaded inside ant's JVM.\n\nIf you want to give it a testspin, get the jar file here:\n1) Download ant-junit.jar from here http://tobiasen.dk/ant/ant-junit.jar\n2) Drop it in $ANT_HOME/lib\n3) Run your tests, remember to set fork=\"yes\" in your tests and have the\njunit.jar in the classpath of the test. \n<junit fork=\"yes\" printsummary=\"yes\">\n  <classpath>\n\tinclude junit.jar here...\n  </classpath>\n...\n\nI have compiled the ant-junit.jar using jdk 1.4.2_08 and against ant 1.6.4.\n\nI would like to submit the patch, but I have no experience in submitting\npatches. Please tell me how. \nThe patch is quite big, since almost all classes in\norg/apache/tools/ant/taskdefs/optional/junit are changed and I have introduced\nsome new interfaces. "}, {"count": 23, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 75613, "time": "2005-05-30T22:37:27Z", "creator": "antoine@apache.org", "creation_time": "2005-05-30T22:37:27Z", "is_private": false, "text": "http://ant.apache.org/ant_task_guidelines.html to read about how to create\npatches ...."}, {"count": 24, "tags": [], "bug_id": 6606, "attachment_id": null, "id": 75679, "time": "2005-05-31T23:37:38Z", "creator": "jglick@apache.org", "creation_time": "2005-05-31T23:37:38Z", "is_private": false, "text": "(In reply to comment #22)\n> I changed the ant-junit.jar so it does not load/reference any\n> junit classes before it forks a new JVM. That way the classloader problems\n> disappear since junit classes are not loaded inside ant's JVM.\n\nThis could be quite useful. E.g. the NetBeans IDE uses\n\nhttp://www.netbeans.org/download/dev/javadoc/org-apache-tools-ant-module/org/apache/tools/ant/module/spi/AutomaticExtraClasspathProvider.html\n\nfrom the module bundling junit.jar in order to force it to be added to Ant's\nprimary classpath. Even though the build scripts that the IDE generates will\nhave an explicit path for junit.jar - which is used e.g. when compiling unit\ntests - it cannot currently run <junit> unless this has been done. A patch such\nas is described here would make it possible to do omit junit.jar from Ant's\nprimary classpath, and would mean that a command-line build incl. unit testing\nwould succeed so long as the path was set up correctly, without requiring the\nuser to run Ant with junit.jar in $CLASSPATH (or ant/lib/ or whatever)."}, {"attachment_id": null, "tags": [], "bug_id": 6606, "text": "Why not simply remove the optional ant tasks from the classpath in the default install of ant? This \nseems pretty reasonable:\n\n* For those that don't mind modifying their ant home directory, it's not really any extra work: since you \ncan't use tasks like <junit> without manually adding junit.jar to the ant lib folder anyway, it doesn't \nseem like much more work to drag in two jars (ant-junit.jar & junit.jar) rather than one (junit.jar) into \nthe lib folder.\n\n* For this (like me) who want to create a user-friendly build process that does not require users to \nmodify their ant installs, I can redistribute the relevant jars with my project and load them within my \nbuild.xml file.\n\nI want my users to just be able to download my package and type 'ant' to have everything work. The \nonly way I see to do this right now is to copy the source for the JUnit optional task into my own \npackage, so that it is not loaded by the core classloader. This is a pretty crummy workaround.", "count": 25, "id": 76129, "time": "2005-06-07T15:32:00Z", "creator": "jbarnum@360works.com", "creation_time": "2005-06-07T15:32:00Z", "is_private": false}, {"count": 26, "tags": [], "bug_id": 6606, "attachment_id": null, "text": "*** Bug 36862 has been marked as a duplicate of this bug. ***", "id": 80608, "time": "2005-09-29T16:26:04Z", "creator": "johnny_hujol@vrtx.com", "creation_time": "2005-09-29T16:26:04Z", "is_private": false}, {"count": 27, "tags": [], "text": "(In reply to comment #25)\n> Why not simply remove the optional ant tasks from the classpath in the default\ninstall of ant? This \n> seems pretty reasonable:\n> \n> * For those that don't mind modifying their ant home directory, it's not\nreally any extra work: since you \n> can't use tasks like <junit> without manually adding junit.jar to the ant lib\nfolder anyway, it doesn't \n> seem like much more work to drag in two jars (ant-junit.jar & junit.jar)\nrather than one (junit.jar) into \n> the lib folder.\n> \n> * For this (like me) who want to create a user-friendly build process that\ndoes not require users to \n> modify their ant installs, I can redistribute the relevant jars with my\nproject and load them within my \n> build.xml file.\n> \n> I want my users to just be able to download my package and type 'ant' to have\neverything work. The \n> only way I see to do this right now is to copy the source for the JUnit\noptional task into my own \n> package, so that it is not loaded by the core classloader. This is a pretty\ncrummy workaround.\n\nI think this is the best all-around solution to the problem, with one addition:\n\nPut the optional ant tasks into a separate folder (optional/lib, opt/lib or some\nsuch) and then add a default property called ant.optional.library.dir that is\nsimilar to the ant.library.dir except that it points to this new optional\nlibrary directory.\n\nThis way, if you want to use an optional task you can simply include the\nexternal jars in your distribution and then write a taskdef whose classpath\nincludes the appropriate optional.jar file and its dependencies.\n\nWhile this does create a little more work for anyone wanting to use the optional\ntasks, the volume of help requests would be simplified by adding an sample\ntaskdef to the doc page of each optional task.\n\nAs it stands right now, the only workable solution to this problem makes ant\nmuch less useful to people trying to build code rather than people trying to\nwrite ant scripts. I would imagine that usability should focus first on people\ntrying to build code before it focuses on people trying to write ant scripts\nbecause (typically) the person writing the ant script will be somewhat more\ntechnical than the other. Besides, it makes the ant script more self documenting\nwith respect to its dependencies.", "attachment_id": null, "bug_id": 6606, "id": 82067, "time": "2005-11-02T20:52:38Z", "creator": "swilsonguard-apache@yahoo.com", "creation_time": "2005-11-02T20:52:38Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 6606, "text": "> this does create a little more work for anyone wanting to use the optional\ntasks, \n\ni.e. it would break every single build file on the planet that uses any optional\ntask.\n\nSam, we cannot do that. we cannot break every build file. We need a better\nsolution. For reference, my project's build process is documented here:\n\nhttp://cvs.sourceforge.net/viewcvs.py/*checkout*/smartfrog/core/antbuild/doc/third_generation_build_process.sxw\n\nWe have a directory of libraries under SCM, this directory contains the releases\nof add on tasks that we require for the build. You need either to declare this\nwith a -lib option in ANT_OPTS, or pull the files into ANT_HOME/lib\n${user.home}/.ant/lib\n\nLife would be simpler if we could somehow declare in a per-project basis an\nextra dir of stuff to load. All that stuff would need to be unloaded at the end\nof the build of course, or you have just contaminated a hosting JVM. I just dont\nsee an easy way of doing this. ", "id": 82092, "time": "2005-11-03T12:22:50Z", "creator": "stevel@apache.org", "creation_time": "2005-11-03T12:22:50Z", "is_private": false, "attachment_id": null}, {"count": 29, "tags": [], "bug_id": 6606, "attachment_id": null, "text": "> Sam, we cannot do that. we cannot break every build file. We need a better\n> solution. \nI want to stress that there is a _simple_ solution for this problem. No need to\nbreak any existing build files or rearrange jar files. This is true for the\njunit task anyway.\nHow? Simply fork junit tests into a separate JVM and make sure only the new JVM\nuses junit classes. There is really no need for the JUnitTask.java task to\nimport junit.framework.Test, it is just sloppy code. I have made this change and\nit can be done in less than a day! \nThe only drawback is that people that do not fork tests into a separate JVM\nstill needs the current workaround.\n\n@See http://issues.apache.org/bugzilla/show_bug.cgi?id=6606#c22", "id": 82096, "time": "2005-11-03T13:30:24Z", "creator": "ant@tobiasen.dk", "creation_time": "2005-11-03T13:30:24Z", "is_private": false}, {"count": 30, "tags": [], "text": "I have filed a separate bug #38799 to cover the specific case of junit.jar in\n<junit>, since this metabug seems too broad to close directly.", "attachment_id": null, "bug_id": 6606, "id": 86266, "time": "2006-02-27T20:42:29Z", "creator": "jglick@apache.org", "creation_time": "2006-02-27T20:42:29Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 6606, "text": "I've got two cross references, both patches available.\n\nBug #47003 makes AntClassLoader in combination with the <classloader> task much more powerful, by ensuring that the ant core class loader will always be an AntClassLoader, which in turn allows addition of class path elements. The result is that you can simply use <classloader> to extend the core ant classpath at need, and don't have to worry about a complicated classloader hierarchy.\n\nBug #47002 takes yet another shot at <junit> and the missing TraXLiaison. This time without forking, but instead through yet another nested <classpath> element.\n\nUnfortunately both patches have seen no comments or review yet. Still waiting...", "count": 31, "id": 133684, "time": "2010-01-18T09:26:28Z", "creator": "Martin.vGagern@gmx.net", "creation_time": "2010-01-18T09:26:28Z", "is_private": false}]
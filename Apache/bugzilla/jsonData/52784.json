[{"count": 0, "tags": [], "creator": "catalinalexandru.zamfir@gameloft.com", "attachment_id": 28395, "id": 154312, "time": "2012-02-28T09:52:39Z", "bug_id": 52784, "creation_time": "2012-02-28T09:52:39Z", "is_private": false, "text": "Created attachment 28395\nSXSSFWorkbook generated file\n\nExporting with SXSSFWorkbook, generates a corrupted .xlsx file. I've attached the generated XLSX file. Viewed it with an XML viewer, but could not find the problem. \n\nGenerating the same XLSX, from the same data, with XSSFWorkbook, generates a proper .xlsx file.\n\nWe're using SXSSFWorkbook, for memory issues. We've now using XSSFWorkbook as a quick-fix/workaround, but wish to identifiy the problem here."}, {"attachment_id": null, "tags": [], "bug_id": 52784, "text": "Excel reports: \"Replaced Part: /xl/worksheets/sheet1.xml part with XML error.  Illegal xml character. Line 394, column 267.\".\n\nLooking in sheet1.xml, at line: 394, column 267, around it i see this: \"If you&#226;&#25;re looking for a palm-sweating\". The \"267\" column is the \";\" in \"&#25;\". Tried to decode the entire entity, but it outputs a weird character.\n\nSXSSFWorkbook should ignore unknown or invalid characters for XML. I've tracked this issue down and seems that the original source of this message, contains the same unprintable characters. Does not show up, but can easily be spotted in the source of the original document.\n\nAs far as I know < ASCII 32, are control characters. Shouldn't these be ignored? Not encoded. As they're not printable they actually don't provide any useful value for anybody.\n\nXSSFWorkbook does a proper job ignoring this.\nSXSSFWorkbook doesn't.", "count": 1, "id": 154313, "time": "2012-02-28T10:43:28Z", "creator": "catalinalexandru.zamfir@gameloft.com", "creation_time": "2012-02-28T10:43:28Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 52784, "text": "Should be fixed in r1294657\n\nYour diagnosis is correct, writing a ISO control character ( < 32) resulted in a corrupted workbook.\n\nI could easily reproduce it with the following simple code:\n\n        Workbook wb = new SXSSFWorkbook();\n        Sheet sh = wb.createSheet();\n        Cell cell = sh.createRow(0).createCell(0);\n        \n        cell.setCellValue(\"\\u0000\");\n\nXSSF delegates writing XML to XmlBeans and this framework replaces characters below 32 with question marks. I changed SXSSF to do so too.\n\nIt appears that there are two more special cases where you can't simply write a char code in XML:\n\n case 1: low and high unicode surrogates: DC00-DFFF and D800-D8FF\n case 2: 'not a character' range: FFFE-FFFF\n\nXmlBeans replaces characters from these ranges with question marks, so I fixed SXSSF to be consistent.\n\nYegor", "count": 2, "id": 154325, "time": "2012-02-28T14:03:47Z", "creator": "yegor@dinom.ru", "creation_time": "2012-02-28T14:03:47Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 52784, "text": "Yegor,\n\nI am facing the same problem, where can I download the jar files of this release? Please advise\n\nregards,\nSheikh", "id": 158477, "time": "2012-04-27T13:33:27Z", "creator": "sabdulrazak@inautix.co.in", "creation_time": "2012-04-27T13:33:27Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "sabdulrazak@inautix.co.in", "text": "Hi,\n\nI am able to download the version 3.8.\n\nhttp://www.apache.org/dyn/closer.cgi/poi/release/bin/poi-bin-3.8-20120326.zip\n\nThanks.\n\nregards,\nSheikh", "id": 158659, "time": "2012-04-30T07:05:47Z", "bug_id": 52784, "creation_time": "2012-04-30T07:05:47Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 9715, "attachment_id": null, "is_private": false, "id": 17445, "time": "2002-06-08T18:36:03Z", "creator": "dkohn@pacbell.net", "creation_time": "2002-06-08T18:36:03Z", "text": "My site has a large number of static html pages (14000+).  When a large number \nof these pages are accessed (by a web crawler for example), I get an 'out of \nmemory error'.  I have no servlets and only 2 jsp files in the site.  I am \nusing Lucene, but the error is being caused by accesses to static html files.\n\nI have increased the memory to the JVM using the a JAVA_OPTS env. var. setting \nof '-Xms128m -Xmx128m', but this had no affect.\n\nHre is the entry in the log file: \n2002-06-08 10:55:14 jsp: init\n2002-06-08 11:03:50 StandardWrapperValve[default]: Servlet.service() for \nservlet default threw exception\njavax.servlet.ServletException: Servlet execution threw an exception\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:269)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:243)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:190)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2343)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:180)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.AccessLogValve.invoke\n(AccessLogValve.java:468)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:174)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.catalina.connector.http.HttpProcessor.process\n(HttpProcessor.java:1012)\n\tat org.apache.catalina.connector.http.HttpProcessor.run\n(HttpProcessor.java:1107)\n\tat java.lang.Thread.run(Unknown Source)\n----- Root Cause -----\njava.lang.OutOfMemoryError\n\t<<no stack trace available>>"}, {"count": 1, "tags": [], "text": "You can disable or configure caching if it uses too much memory. (Specify a\nResources element to the Context to do that, and use an attribute \"cached=false\")\n\nThat should solve the problem. Of course, the current cache is very primitive\nand should be improved. There are probably components in the commons to do that.\nConverting to enhancement (which should be taken care of very soon). BTW, if you\nhave ideas to improve the cache, don't hesitate to submit them.", "is_private": false, "bug_id": 9715, "id": 17446, "time": "2002-06-08T21:58:36Z", "creator": "remm@apache.org", "creation_time": "2002-06-08T21:58:36Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Adding Resources element w/no cache had no affect.  Here is the Context attr.:\n\n<Context path=\"\"  docBase=\"nowbooks/ROOT\" debug=\"0\">\n <Resources className=\"org.apache.naming.resources.FileDirContext\" \ncached=\"false\"/>\n</Context>\n \nNote that this did not seem to turn off caching, memory use increased as pages \nwere accessed. Did I implement the Resources element incorrectly?", "is_private": false, "bug_id": 9715, "id": 17503, "time": "2002-06-10T17:34:14Z", "creator": "dkohn@pacbell.net", "creation_time": "2002-06-10T17:34:14Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "dkohn@pacbell.net", "attachment_id": null, "text": "Modified Resources element to include docBase attribute as follows, no change:\n\n<Context path=\"\"  docBase=\"nowbooks/ROOT\" debug=\"0\">\n  <Resources className=\"org.apache.naming.resources.FileDirContext\" \ndocBase=\"nowbooks/ROOT\" cached=\"false\"/>\n</Context>\n", "id": 17516, "time": "2002-06-10T18:10:17Z", "bug_id": 9715, "creation_time": "2002-06-10T18:10:17Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 9715, "attachment_id": null, "id": 17525, "time": "2002-06-10T20:03:19Z", "creator": "remm@apache.org", "creation_time": "2002-06-10T20:03:19Z", "is_private": false, "text": "It should disable caching. I find it very odd that it didn't solve the memory\nproblem. This will require more investigation."}, {"count": 5, "tags": [], "bug_id": 9715, "attachment_id": 2054, "id": 17529, "time": "2002-06-10T21:32:11Z", "creator": "bob@jadn.com", "creation_time": "2002-06-10T21:32:11Z", "is_private": false, "text": "Created attachment 2054\nChanges unbound Hashtable to LRUMap"}, {"count": 6, "tags": [], "text": "\nThe attached patch should prevent the 'Out of Memory' by switching from\ncaching in an unbound Hashtable to using a LRUMap of size 1000.\n", "attachment_id": null, "id": 17530, "creator": "bob@jadn.com", "time": "2002-06-10T21:33:57Z", "bug_id": 9715, "creation_time": "2002-06-10T21:33:57Z", "is_private": false}, {"count": 7, "tags": [], "text": "Created attachment 2055\nChange Hashtable to thread safe version of LRUMap", "is_private": false, "bug_id": 9715, "id": 17533, "time": "2002-06-10T22:16:36Z", "creator": "bob@jadn.com", "creation_time": "2002-06-10T22:16:36Z", "attachment_id": 2055}, {"count": 8, "tags": [], "bug_id": 9715, "attachment_id": null, "id": 17534, "time": "2002-06-10T22:19:27Z", "creator": "bob@jadn.com", "creation_time": "2002-06-10T22:19:27Z", "is_private": false, "text": "\nMy first patch didnt deal with being thread safe.  The second patch wraps\nLRUMap in java.util.Collections.syncronizedMap(...) "}, {"count": 9, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 17543, "time": "2002-06-11T00:38:14Z", "bug_id": 9715, "creation_time": "2002-06-11T00:38:14Z", "is_private": false, "text": "The patch to use a LRUMap from commons-collections has been committed. I'll need\nmore details to get an idea of where the problem would come from. I suppose\nsince static pages do allocate a cache, this may be where the error occurs, but\nthis may not be the root cause of the errors.\nDo you also use a large amount of sessions ? The current implementation of the\nStandardManager doesn't deal with those situations well (this will be addressed\nusing another LRUMap), and you could try to use a JDBC or file based store instead."}, {"count": 10, "tags": [], "bug_id": 9715, "attachment_id": null, "id": 17545, "time": "2002-06-11T01:03:56Z", "creator": "dkohn@pacbell.net", "creation_time": "2002-06-11T01:03:56Z", "is_private": false, "text": "The new build seems to have solved the problem.  I am not using a large number \nof sessions, the problem was occuring when a single session was accessing a \nlarge number of files - in particular when a webcrawler (google) would hit my \nsite and download >1000 pages.   For testing I emulated the crawler by using a \nwebsite mirroring utility. "}, {"count": 11, "tags": [], "text": "This would seems to indicate that the \"cached\" flag isn't doing what it is\nsupposed to do then.\nDowngrading the severity, as the major issue has been fixed. Milestone 4.1.5\nwill have the fix.\nThanks for testing :)", "attachment_id": null, "id": 17547, "creator": "remm@apache.org", "time": "2002-06-11T01:24:45Z", "bug_id": 9715, "creation_time": "2002-06-11T01:24:45Z", "is_private": false}, {"count": 12, "tags": [], "text": "Updated/Changed the summary", "is_private": false, "bug_id": 9715, "id": 17682, "time": "2002-06-12T15:59:47Z", "creator": "bob@jadn.com", "creation_time": "2002-06-12T15:59:47Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of 12408 ***", "is_private": false, "bug_id": 9715, "id": 22500, "time": "2002-09-09T10:55:46Z", "creator": "remm@apache.org", "creation_time": "2002-09-09T10:55:46Z", "attachment_id": null}]
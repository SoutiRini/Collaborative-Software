[{"count": 0, "tags": [], "creator": "tony@absolutejava.com", "attachment_id": null, "id": 22106, "time": "2002-09-02T03:36:26Z", "bug_id": 12222, "creation_time": "2002-09-02T03:36:26Z", "is_private": false, "text": "This problem existed with the old HTTP/1.1 Connector. It's \"better\" now with \nCoyote but still seems to exist.\n\nI'm running TC 4.1.9, using the CoyoteConnector on Win 2k, SP3. The JDK is \n1.4.1.\n\nHere's the issue....\n\nThis is a very simple situation. I have a Java client program (see code below) \nthat performs the following steps:\n\n1. Writes a file to a web context directory.\n2. Uses a URLConnection to request the file in #1 from TC.\n3. Sleeps for a few milliseconds.\n4. Overwrites the file in #1 with new contents.\n5. Uses a URLConnection to request the file in #1 from TC.\n\n\nThe expected behavior is for the data returned in step 5 to *always* be what \nwas written in step 4, even if the sleep time is zero seconds.\n\nIn step 5, I find that Tomcat is returning the contents of the file that was \nwritten in step 1 -- BUT ONLY IF THE SLEEP TIME IS LESS THAN ABOUT 1 SECOND. If \nI sleep for 1 or more second, then the contents returned in step 5 is that \nwhich was written in step 4, which is what I would expect.\n\nYou can adjust the sleep time with the command line argument (number of millis).\n\nThe code below includes the small client that connects to Tomcat. Notice \nthe \"Cache-Control\" header is set to \"max-age=0\" which should eliminate any \ncaching on Tomcat. Just for grins, \"Pragma:no-cache\" is used too (although that \nshouldn't matter). Since I'm connecting directly to Tomcat (i.e., localhost) \nthere is no proxy involved. I've checked the HTTP headers using a sniffer and \nthey look fine.\n\nBTW, using Apache rather than TC does not produce this problem -- even if the \nsleep time is zero, Apache returns the contents written in step 4.\n\nHere is the client code....If you run this make sure you are writing the file \nto the same directory from which TC will serve it (obviously).\n\nThanks,\n\nTony\n====================================================\nimport java.io.*;\nimport java.net.*;\n\npublic class TestURL {\n  public static void writeToFile (String filename, String text)\n  throws IOException {\n    FileWriter fw = new FileWriter(filename);\n    PrintWriter pw = new PrintWriter(fw);\n    pw.print(text);\n    pw.close();\n    System.out.println (\"writeToFile() wrote: \" + filename);\n    System.out.println (\"writeToFile() text: \" + \"'\" + text + \"'\");\n    System.out.println (\"---\");\n  } // writeToFile()\n\n\n  public static String readURL (String url)\n  throws IOException, MalformedURLException {\n    StringBuffer sb = new StringBuffer(\"\");\n    URL srcurl = new URL(url);\n    URLConnection urlc = srcurl.openConnection();\n    urlc.setDoInput(true);\n    urlc.setUseCaches(false);\n    urlc.setDefaultUseCaches(false);\n    urlc.setRequestProperty(\"Cache-Control\", \"max-age=0\");\n    urlc.setRequestProperty(\"Cache-Control\", \"no-cache\");\n    urlc.setRequestProperty(\"Cache-Control\", \"no-store\");\n    urlc.setRequestProperty(\"Pragma\", \"no-cache\");\n\n    InputStream is = urlc.getInputStream();\n    InputStreamReader isr = new InputStreamReader(is);\n    char[] buffer = new char[100];\n    int charCount = 0;\n    while((charCount = isr.read(buffer, 0, buffer.length)) != -1)\n      sb.append(buffer, 0, charCount);\n\n    isr.close();\n\n    System.out.println (\"readURL() read: \" + url);\n    System.out.println (\"readURL() text: \" + \"'\" + sb.toString() + \"'\");\n    System.out.println (\"---\");\n\n    return sb.toString();\n  } // readURL()\n\n\n  public static void main (String[] args)\n  throws Exception {\n    int sleepTime = 1000;\n\n    if (args.length >= 1)\n      sleepTime = Integer.parseInt (args[0]);\n\n    System.out.println (\"----- TOMCAT TEST -----\");\n    String basedir = \"C:\\\\Development\\\\Projects\\\\Tester\\\\Servlets\\\\web\\\\junk\\\\\";\n    String baseurl  = \"http://localhost/t/junk/\";\n    String testfile = \"testurl.txt\";\n    String first   = \"The first text\";\n    String second  = \"The second text\";\n\n    String filepath = basedir + testfile;\n    String fileurl  = baseurl + testfile;\n\n    writeToFile(filepath, first);\n    String s1 = readURL(fileurl);\n\n    System.out.println (\"Sleeping \" + sleepTime + \" milliseconds...\");\n    Thread.sleep(sleepTime);\n\n    writeToFile(filepath, second);\n    String s2 = readURL(fileurl);\n\n    if(s2.equals(second))\n      System.out.println(\"The second file was properly served.\");\n    else\n      System.out.println(\"The second file was *NOT* properly served.\");\n  } // main()\n} // TestURL()"}, {"count": 1, "attachment_id": null, "creator": "william.barker@wilshire.com", "is_private": false, "id": 22107, "time": "2002-09-02T04:03:24Z", "bug_id": 12222, "creation_time": "2002-09-02T04:03:24Z", "tags": [], "text": "Since you have investigated this much more than most people, can you clarify \nfor me if you are getting the stale content with a \"200 OK\" or with a \"304 Not \nModified\"?\n\n\n\n"}, {"count": 2, "tags": [], "bug_id": 12222, "is_private": false, "text": "Fixing this requires making a lot of changes to Tomcat, and it will not happen\nin 4.1.x. As a workaround, you can disable caching. BTW, it is independent of\nthe connector.", "id": 22110, "time": "2002-09-02T09:32:12Z", "creator": "remm@apache.org", "creation_time": "2002-09-02T09:32:12Z", "attachment_id": null}]
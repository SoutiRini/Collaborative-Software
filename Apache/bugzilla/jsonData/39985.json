[{"count": 0, "tags": [], "text": "My httpd threads are all exiting with:\n*** glibc detected *** double free or corruption (!prev): 0xb8da2940 ***\non shutdown. And due to the MALLOC_CHECK this causes some issues.\n\nI've isolated the problem to mod_dbd, more specifically to the\napr_pool_destroy(conn->pool) called in dbd_close during the shutdown cleanup. If\nI comment out that destory, things are fine.\n\nThis didn't happen an older release of mod_dbd, but I've noticed there was some\nreworking on the pools in this version.\n\nI'll attach my gdb session were you can clearly see the problem, couldn't figure\nout why this is happening though as I'm no debugging or apr wiz.\n\nIf it matters I've tried apr/apr-util 1.2.2 and 1.2.7 with the same results.", "is_private": false, "bug_id": 39985, "id": 90968, "time": "2006-07-06T23:42:36Z", "creator": "mkent@magoazul.com", "creation_time": "2006-07-06T23:42:36Z", "attachment_id": null}, {"attachment_id": 18565, "tags": [], "creator": "mkent@magoazul.com", "is_private": false, "count": 1, "id": 90969, "time": "2006-07-06T23:44:27Z", "bug_id": 39985, "creation_time": "2006-07-06T23:44:27Z", "text": "Created attachment 18565\ngdb session\n\nattaching to a running thread and sending it a SIGTERM"}, {"count": 2, "tags": [], "creator": "nick@webthing.com", "text": "ISTR discussing this with someone recently.  Was that you?\n\nDoes this happen during server operation, or is this at server shutdown?\nAnd what backend and dbd-user modules are you using?\n\nAny change with 2.2.3?", "id": 92062, "time": "2006-08-08T21:50:47Z", "bug_id": 39985, "creation_time": "2006-08-08T21:50:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Don't think it was me, I've never discussed this outside of this ticket.\n\n- The problem happens during shutdown.\n- I'm using a current copy of the apr_dbd_mysql.c backend compiled against MySQL\n4.1.20\n- I'm using a copy of mod_vhost_dbi modified to work with dbd instead. But the\nproblem happens regardless of what modules are loaded. I can run a single thread\nwith the bare minimum (no 3rd party modules or my own) and reproduce the problem.\n- Just retested on 2.2.3 and got the same result.", "is_private": false, "bug_id": 39985, "id": 92088, "time": "2006-08-09T18:36:14Z", "creator": "mkent@magoazul.com", "creation_time": "2006-08-09T18:36:14Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 39985, "attachment_id": null, "text": "OK, there's clearly a genuine bug here, though I'm struggling to see it in the \nmod_dbd code (which leads me to wonder about either the pools or - more \nlikely - the mysql driver).  Bug me if nothing happens on this.\n\nHas anyone seen this bug with derivers other than MySQL?", "id": 92090, "time": "2006-08-09T19:38:34Z", "creator": "nick@webthing.com", "creation_time": "2006-08-09T19:38:34Z", "is_private": false}, {"count": 5, "tags": [], "text": "I tried replying by email to try and sort this, but maybe your address here is \nbogus.\n\n=====================\nDo you mind my emailing you about this?\n\n(1) You are linking to the thread-safe libmysqlclient_r, aren't you?\n\n(2) Can you get a traceback from this, and see if it's coming from within \nfunction thread_end and/or mysql_thread_end?\n\n(3) If you can't do that, please try commenting out line 790 in \napr_dbd_mysql.c, and tell me if that makes any difference.  Line 790 is\nan apr_pool_cleanup_register in function dbd_mysql_init.  You'll see my\ncomment about being uncertain there!\n\nHope we can fix this, but I don't get the problem, so I need you to test\ntheories about the likely cause.\n==========================", "is_private": false, "bug_id": 39985, "id": 92298, "time": "2006-08-17T14:30:02Z", "creator": "nick@webthing.com", "creation_time": "2006-08-17T14:30:02Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 39985, "is_private": false, "text": "I can verify this bug (httpd-2.2.3). It appears that pool that hosts apr_dbd_t \nstruct (the one passed to apr_dbd_open) gets destroyed before the apr_dbd_close \nis run. Easy to verify with \"httpd -X\" and gdb by setting watch value to look \nat apr_dbd_t. \n ", "id": 96499, "time": "2006-12-03T22:29:43Z", "creator": "oakad@yahoo.com", "creation_time": "2006-12-03T22:29:43Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "oakad@yahoo.com", "text": "I also think that this bug does not turns up more often because of the fact \nthat junk value in apr_dbd_t->conn is most often NULL, so it gets silently \neaten by the mysql_close (for example). This even happens with pool debug \nenabled (and pools are supposed to be poisoned); httpd -X is a safe way to \ntrigger a real fault. \n ", "count": 7, "id": 96500, "time": "2006-12-03T22:37:04Z", "bug_id": 39985, "creation_time": "2006-12-03T22:37:04Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "oakad@yahoo.com", "is_private": false, "count": 8, "id": 96592, "time": "2006-12-06T22:12:11Z", "bug_id": 39985, "creation_time": "2006-12-06T22:12:11Z", "text": "It appears that this problem is caused by pool destruction on line 316 in \nmod_dbd.c: \n--- \napr_pool_destroy(conn->pool); \n--- \nThe pool in question may be (as it happens on my machine) already destroyed by \nits parent (I'm using mpm_prefork - have to try yet with mpm_worker). \nCommenting this line out seems to solve the problem and database handle is \nstill closed (or at least it appears that way). \n "}, {"count": 9, "tags": [], "bug_id": 39985, "attachment_id": null, "text": "Yes, I'd spotted that as well and might have a patch tomorrow that\naddresses the issue -- ping me if I'm slow!", "id": 96593, "time": "2006-12-06T22:34:20Z", "creator": "chrisd@apache.org", "creation_time": "2006-12-06T22:34:20Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 39985, "attachment_id": 19226, "text": "Created attachment 19226\nMemory pool fixes for trunk.\n\nThese patches aim to prevent the following situation, which I suspect was\nthe cause of these bug reports.  (I myself have rarely seen the problem,\nso if someone who can replicate it reliably could try either of these patches,\nthat would be very helpful!)\n\nWhen using a reslist, the reslist internally registers a cleanup function\non the memory pool used for the reslist, specifically the reslist_cleanup()\nfunction.  This function calls the destructor on each resource.  For mod_dbd,\nthat destructor is dbd_destruct(), which just calls dbd_close().  Now\ndbd_close() calls apr_pool_destroy() on the memory sub-pool that was\ncreated in dbd_construct() for use by that particular DB connection; this\nis where the connection's prepared statements are created.\n\nNormally, we want this memory pool to be destroyed when dbd_destruct() or\ndbd_close() is called -- suppose the reslist is expiring a resource, i.e.,\na DB connection, we want it to (a) close the DB connection and (b) reclaim\nthe memory used for that connection's prepared statements.\n\nOK, but when the parent memory pool (the one used by the reslist itself)\nis destroyed, apr_pool_destroy() first destroys all the sub-pools of that\npool -- in this case, these are the per-connection sub-pools.  Then it calls\nall the cleanup functions on the pool, including the reslist cleanup\nfunction, which then calls dbd_destruct() on each connection, causes\napr_pool_destroy() to be called twice for each sub-pool and presumably\nsometimes producing the segfaults people have reported.\n\nLet me know if these patches fix the problem (and don't introduce new\nproblems!) and I'll commit the trunk version, and propose the fix for\n2.2.x.\tReview of the no-threads logic would be especially helpful.\nThanks!", "id": 96631, "time": "2006-12-07T13:56:11Z", "creator": "chrisd@apache.org", "creation_time": "2006-12-07T13:56:11Z", "is_private": false}, {"count": 11, "tags": [], "creator": "chrisd@apache.org", "attachment_id": 19227, "id": 96635, "time": "2006-12-07T14:29:26Z", "bug_id": 39985, "creation_time": "2006-12-07T14:29:26Z", "is_private": false, "text": "Created attachment 19227\nslightly changed for http_request.h include fix\n\nI should note that these patches also fix several things I discovered while\ntesting the no-threads persist and no-persist cases.  The ap_dbd_[c]acquire()\nno-threads functions used the wrong value in their apr_pool_cleanup_register()\ncalls, leading to segfaults when the cleanups ran.\n\nAlso, I noticed that in the no-threads persist case (using the worker MPM)\nthat DB connections were never closed -- not even on shutdown.\tThis turns\nout to be because apr_pool_destroy() isn't called on s->process->pool\nwhen a child process exits; the worker MPM, at least, only performs\napr_pool_destroy() on its pchild pool.\tMost other MPMs seem similar.\n(Maybe beos MPM doesn't call child_init hooks at all?  Yikes.)\tAnyway,\nif we stash the per-process lifetime pool at child_init time, that does\nget destroyed by each child process and it also clarifies the code a little."}, {"count": 12, "tags": [], "bug_id": 39985, "attachment_id": 19228, "text": "Created attachment 19228\nsame thing for 2.2.x branch", "id": 96636, "time": "2006-12-07T14:29:44Z", "creator": "chrisd@apache.org", "creation_time": "2006-12-07T14:29:44Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 39985, "attachment_id": null, "text": "I think I've got a little confused by mod_dbd - in fact I think that MPMs are  \nok. The probles, as I understand it now is strictly in mod_dbd. It has two  \ndifferent ap_dbd_open functions: one for APR_HAS_THREADS and one for the other  \ncase. The no-threads ap_dbd_open requires the particular pool to be explicitly  \ndestroyed (it doesn't uses reslist), so dbd_close has an apr_pool_destroy.  \nHowever the threads version uses reslist and calls dbd_close as a resource  \ndestructor, bombing itself (I haven't noticed this yesterday). So, probably the \nsimplistic patch for mod_dbd should do it.  ", "id": 96638, "time": "2006-12-07T17:35:56Z", "creator": "oakad@yahoo.com", "creation_time": "2006-12-07T17:35:56Z", "is_private": false}, {"count": 14, "tags": [], "creator": "oakad@yahoo.com", "attachment_id": 19229, "id": 96639, "time": "2006-12-07T17:36:55Z", "bug_id": 39985, "creation_time": "2006-12-07T17:36:55Z", "is_private": false, "text": "Created attachment 19229\nConditionally comment out the explicit pool destructor"}, {"attachment_id": null, "tags": [], "creator": "chrisd@apache.org", "is_private": false, "count": 15, "id": 96643, "time": "2006-12-07T23:02:10Z", "bug_id": 39985, "creation_time": "2006-12-07T23:02:10Z", "text": "Please take a look at the patches I attached today, and read over the comments\nI put in the patched code, where I tried to explain what I think should be\nhappening.  The reason dbd_close() had an apr_pool_destroy() is not just\nbecause of the no-threads cases, it's also because the reslist may decide\nto call dbd_destruct() on excess or invalid resources at any time, and when it\ndoes, you want that to clean up the per-connection pool (the one used for\nprepared statements for that connection).\n\nHowever, I suspect your crashes are coming about because of the particular\nsequence of events on shutdown, when the apr_pool_destory() called in the\nMPM on the top-level pool effectively calls apr_pool_destory() on the\nper-connection sub-pools first -- then asks the reslist to clean itself\nup, at which point it calls dbd_destruct(), which does the second bad\napr_pool_destroy().  But in general, dbd_destruct() does need to do that\napr_pool_destroy(), so we need some signalling around that.\n\nPlease try with the patches I provided and see if they deal with your\nparticular issue; if not, let me know and we can probe further.  Thanks!"}, {"attachment_id": null, "tags": [], "creator": "oakad@yahoo.com", "text": "Yes, I checked your patch (19228) and it appears to work. I can't check it now \nwith mpm_worker, but I'll do it some time later. ", "count": 16, "id": 96645, "time": "2006-12-07T23:28:02Z", "bug_id": 39985, "creation_time": "2006-12-07T23:28:02Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 39985, "attachment_id": null, "text": "Chris, please don't change the bug assignee field! It's the only way the bugs@\nmailing list gets CCed on changes.", "id": 96648, "time": "2006-12-08T03:29:52Z", "creator": "jorton@redhat.com", "creation_time": "2006-12-08T03:29:52Z", "is_private": false}, {"count": 18, "tags": [], "creator": "chrisd@apache.org", "attachment_id": null, "id": 96664, "time": "2006-12-08T09:12:27Z", "bug_id": 39985, "creation_time": "2006-12-08T09:12:27Z", "is_private": false, "text": "Oops, sorry, didn't know!  Thanks for catching that."}, {"count": 19, "tags": [], "creator": "chrisd@apache.org", "attachment_id": 19238, "id": 96699, "time": "2006-12-09T21:54:03Z", "bug_id": 39985, "creation_time": "2006-12-09T21:54:03Z", "is_private": false, "text": "Created attachment 19238\ncatch some error condition leaks in dbd_construct"}, {"attachment_id": null, "tags": [], "bug_id": 39985, "is_private": false, "count": 20, "id": 97425, "time": "2006-12-28T14:57:05Z", "creator": "chrisd@apache.org", "creation_time": "2006-12-28T14:57:05Z", "text": "The patches attached so far don't completely solve all the problems\nidentified in the report.  For the latest, see the first three patches\n(1tidy, 2misc, and 3pools) for httpd trunk in:\n\nhttp://people.apache.org/~chrisd/patches/mod_dbd_pools_groups/\n\nThese should be applied sequentially.  The third (3pools) patch is the one\nthat actually addresses the original issue from this report.  It makes use\nof the fact that MPMs (should) call apr_pool_destroy() on the pool they\npass to the child_init hook functions, when each child process exits.  However,\nthey don't call apr_pool_destroy() on s->process->pool in child processes.\nThis allows us to work around the interaction of APR reslists and memory\npools at pool destruction time."}, {"count": 21, "tags": [], "creator": "chrisd@apache.org", "attachment_id": null, "id": 98157, "time": "2007-01-16T11:44:11Z", "bug_id": 39985, "creation_time": "2007-01-16T11:44:11Z", "is_private": false, "text": "The issues raised in this bug report should, I hope, be fixed in this\nrevision of mod_dbd in httpd trunk:\n\nhttp://svn.apache.org/viewvc?view=rev&revision=496831\n\nNote that the APR DBD Oracle driver needs the patch attached in PR #41250\nto work with this mod_dbd fix.  No other APR DBD drivers use memory sub-pools."}, {"count": 22, "tags": [], "bug_id": 39985, "attachment_id": 19438, "text": "Created attachment 19438\nsame thing for 2.2.x branch", "id": 98311, "time": "2007-01-20T12:20:27Z", "creator": "peter@poeml.de", "creation_time": "2007-01-20T12:20:27Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "peter@poeml.de", "is_private": false, "count": 23, "id": 98312, "time": "2007-01-20T12:30:47Z", "bug_id": 39985, "creation_time": "2007-01-20T12:30:47Z", "text": "I hope I got the backport right. It works for me, so far. \n\nI didn't test other drivers than mysql, but I tried it with both prefork and worker.\n\nMy testcase is as described below.\n\nThe entire conf is:\n--------------\nUser wwwrun\nGroup www\nErrorLog /var/log/apache2/error_log\nListen 81\n\nDBDriver mysql\nDBDParams \"host=localhost, user=theuser, pass=thepass, dbname=thedbname\"\n<Directory /srv/www/htdocs/mysql-test>\n        AuthType Basic\n        AuthName \"MySQL Testing\"\n        AuthBasicProvider dbd\n        Require valid-user\n        AuthDBDUserPWQuery \"select password from user where username=%s\"\n</Directory>\n---------------\n\nThe server is built with the 2.2.4 tarball, and putting http://apache.webthing.com/svn/apache/apr/\napr_dbd_mysql.c into srclib/apr-util. In order to build the mysql driver, I used the following patch:\n\nIndex: build-outputs.mk\n===============================================================\n====\n--- build-outputs.mk.orig       2006-11-29 12:48:46.000000000 +0100\n+++ build-outputs.mk    2006-12-13 17:17:33.413014156 +0100\n@@ -45,8 +45,9 @@ dbd/apr_dbd.lo: dbd/apr_dbd.c .make.dirs\n dbd/apr_dbd_sqlite2.lo: dbd/apr_dbd_sqlite2.c .make.dirs\n dbd/apr_dbd_sqlite3.lo: dbd/apr_dbd_sqlite3.c .make.dirs\n dbd/apr_dbd_pgsql.lo: dbd/apr_dbd_pgsql.c .make.dirs\n+dbd/apr_dbd_mysql.lo: dbd/apr_dbd_mysql.c .make.dirs include/apu_version.h\n \n-OBJECTS_all = buckets/apr_buckets_pipe.lo buckets/apr_buckets_flush.lo buckets/\napr_buckets_alloc.lo buckets/apr_buckets_pool.lo buckets/apr_buckets_socket.lo buckets/\napr_buckets_heap.lo buckets/apr_buckets_simple.lo buckets/apr_buckets_file.lo buckets/\napr_buckets.lo buckets/apr_buckets_mmap.lo buckets/apr_buckets_eos.lo buckets/apr_brigade.lo \nbuckets/apr_buckets_refcount.lo crypto/apr_sha1.lo crypto/uuid.lo crypto/getuuid.lo crypto/\napr_md5.lo crypto/apr_md4.lo dbm/apr_dbm.lo dbm/apr_dbm_berkeleydb.lo dbm/apr_dbm_gdbm.lo \ndbm/apr_dbm_ndbm.lo dbm/apr_dbm_sdbm.lo dbm/sdbm/sdbm_pair.lo dbm/sdbm/sdbm.lo dbm/\nsdbm/sdbm_hash.lo dbm/sdbm/sdbm_lock.lo encoding/apr_base64.lo hooks/apr_hooks.lo ldap/\napr_ldap_url.lo ldap/apr_ldap_option.lo ldap/apr_ldap_init.lo misc/apr_reslist.lo misc/apu_version.lo \nmisc/apr_date.lo misc/apr_rmm.lo misc/apr_queue.lo uri/apr_uri.lo xml/apr_xml.lo strmatch/\napr_strmatch.lo xlate/xlate.lo dbd/apr_dbd.lo dbd/apr_dbd_sqlite2.lo dbd/apr_dbd_sqlite3.lo dbd/\napr_dbd_pgsql.lo\n+OBJECTS_all = buckets/apr_buckets_pipe.lo buckets/apr_buckets_flush.lo buckets/\napr_buckets_alloc.lo buckets/apr_buckets_pool.lo buckets/apr_buckets_socket.lo buckets/\napr_buckets_heap.lo buckets/apr_buckets_simple.lo buckets/apr_buckets_file.lo buckets/\napr_buckets.lo buckets/apr_buckets_mmap.lo buckets/apr_buckets_eos.lo buckets/apr_brigade.lo \nbuckets/apr_buckets_refcount.lo crypto/apr_sha1.lo crypto/uuid.lo crypto/getuuid.lo crypto/\napr_md5.lo crypto/apr_md4.lo dbm/apr_dbm.lo dbm/apr_dbm_berkeleydb.lo dbm/apr_dbm_gdbm.lo \ndbm/apr_dbm_ndbm.lo dbm/apr_dbm_sdbm.lo dbm/sdbm/sdbm_pair.lo dbm/sdbm/sdbm.lo dbm/\nsdbm/sdbm_hash.lo dbm/sdbm/sdbm_lock.lo encoding/apr_base64.lo hooks/apr_hooks.lo ldap/\napr_ldap_url.lo ldap/apr_ldap_option.lo ldap/apr_ldap_init.lo misc/apr_reslist.lo misc/apu_version.lo \nmisc/apr_date.lo misc/apr_rmm.lo misc/apr_queue.lo uri/apr_uri.lo xml/apr_xml.lo strmatch/\napr_strmatch.lo xlate/xlate.lo dbd/apr_dbd.lo dbd/apr_dbd_sqlite2.lo dbd/apr_dbd_sqlite3.lo dbd/\napr_dbd_pgsql.lo dbd/apr_dbd_mysql.lo\n \n OBJECTS_unix = $(OBJECTS_all)\n \n\n\nThen I did\n\n./configure --enable-dbd --enable-authn_dbd --with-included-apr && \\\nmake && make install\n\nThe database account data must be valid.\n\nIn order to reproduce the bug, I used the commands\n/usr/local/apache2/bin/httpd\nkill $(cat /usr/local/apache2/logs/httpd.pid)\n"}, {"attachment_id": null, "tags": [], "creator": "peter@poeml.de", "text": "Meanwhile, I run the trunk version of mod_dbd.c (r531611) with 2.2, which works fine for me.", "count": 24, "id": 102159, "time": "2007-04-23T14:31:00Z", "bug_id": 39985, "creation_time": "2007-04-23T14:31:00Z", "is_private": false}]
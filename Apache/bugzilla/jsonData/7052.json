[{"count": 0, "tags": [], "bug_id": 7052, "attachment_id": null, "text": "OS: Win2K\n\nJDK: 1.3.1_02\n\nStack Trace:\n\njava.lang.NullPointerException\nat \norg.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:180)\nat \norg.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:132)\nat \njava.lang.ClassLoader.loadClassInternal(Unknown Source)\nat \norg.apache.jsp.RMStartRim$jsp._jspService(RMStartRim$jsp.java:114)\nat \norg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:107)\nat \njavax.servlet.http.HttpServlet.service(HttpServlet.java:853)\nat \norg.apache.jasper.servlet.JspServlet$JspServletWrapper.service(JspServlet.java:202)\nat \norg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:382)\nat \norg.apache.jasper.servlet.JspServlet.service(JspServlet.java:474)\nat \njavax.servlet.http.HttpServlet.service(HttpServlet.java:853)\nat \norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:247)\nat \norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:193)\nat \norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:243)\nat \norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\nat \norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\nat \norg.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\nat \norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:190)\nat \norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\nat \norg.apache.catalina.valves.CertificatesValve.invoke(CertificatesValve.java:246)\nat \norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\nat \norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\nat \norg.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\nat \norg.apache.catalina.core.StandardContext.invoke(StandardContext.java:2343)\nat \norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:180)\nat \norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\nat \norg.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:170)\nat \norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\nat \norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:170)\nat \norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\nat \norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\nat \norg.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\nat \norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:174)\nat \norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\nat \norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\nat \norg.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\nat \norg.apache.catalina.connector.http.HttpProcessor.process(HttpProcessor.java:1012)\nat \norg.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.java:1107)\nat \njava.lang.Thread.run(Unknown Source)\n--------------------------------------------------------------------------------\n\nInvestigation:\n\nI have had a problem \nrunning JSPs under Tomcat 4.x embedded in JBoss 2.4.4, which I believe stems from the \ninitialisation of the \"java.security.manager\" system property.\n\nWhen running Tomcat \ninside JBoss, the security manager property does not seem to be automatically initialised, \nperhaps because JBoss uses a different security model.  If you try to initialise the system \nproperty value yourself by specifying a security manager class name in the JBoss startup file \ncommand line, you get a weird error, which I have not been able to debug since it crashes the JBoss \nVM entirely.\n\nAnyway, this would perhaps not matter to some people, who can get away without \nspecifying a security manager directly in their own code.  However, I need to set one for the RMI \ncalls in Jini, since I persist data via a JavaSpace.  Hence a part of my application \ninitialisation is to set the system security manager.\n\nNow, the Tomcat class loader object \n(an instance of org.apache.jasper.servlet.JasperLoader) is created before any web apps are \nloaded, and there seems to be a bug in this class.  The class loader object sets its security \nmanager as a private variable \"securityManager\" in the constructor from the System property.  \nThis is before I get a chance inside my app to set the property, so the securityManager variable is \nnull in the Tomcat class loader object.\n\nDuring a JSP, Tomcat then decides whether to do \nsecurity checks by checking whether or not the system property is null.  If you have set it to a \nvalue, as I do, Tomcat will try and do security checks.  But it doesn't use the system property to \nactually do the security check - it uses the private variable, which is still null!  Hence, \nwhenever I try to use Java code in a JSP, Tomcat crashes with a NullPointerException, which is not \ncaught.  See attached stack trace.\n\nTo get my JSPs running, I have patched \norg.apache.jasper.servlet.JasperLoader to set the private variable \"securityManager\" if \nit is null when about to do a security check, using the system property value.  It was necessary to \ndo this in 3 places inside the class (see listing below).  I put my version in a jar and placed it in \nthe folder %CATALINA_HOME%\\common\\lib.  Since this is earlier on the classpath than the jar \nfrom which the class is normally loaded, my version is used instead of the normal one, and the JSPs \nnow run OK.\n\nIf there is a better way to initialise the security manager in Tomcat4.x when \nembedded in JBoss I would be very interested to hear of it, since it is obviously not ideal to be \npatching Tomcat in order to get an app to run!\n\nBest wishes\nKeith Harrison-\nBroninski\nkeithhb@rolemodellers.com\n\n/*\n * \n====================================================================\n * \n * The \nApache Software License, Version 1.1\n *\n * Copyright (c) 1999 The Apache Software \nFoundation.  All rights \n * reserved.\n *\n * Redistribution and use in source and binary forms, \nwith or without\n * modification, are permitted provided that the following conditions\n * are \nmet:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this \nlist of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must \nreproduce the above copyright\n *    notice, this list of conditions and the following disclaimer \nin\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. \nThe end-user documentation included with the redistribution, if\n *    any, must include the \nfollowing acknowlegement:  \n *       \"This product includes software developed by the \n *        Apache \nSoftware Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowlegement may \nappear in the software itself,\n *    if and wherever such third-party acknowlegements normally \nappear.\n *\n * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n *    \nFoundation\" must not be used to endorse or promote products derived\n *    from this software \nwithout prior written permission. For written \n *    permission, please contact \napache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\"\n \n*    nor may \"Apache\" appear in their names without prior written\n *    permission of the Apache \nGroup.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, \nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A \nPARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * \nITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR \nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON \nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING \nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF \nTHE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n====================================================================\n *\n * This \nsoftware consists of voluntary contributions made by many\n * individuals on behalf of the \nApache Software Foundation.  For more\n * information on the Apache Software Foundation, \nplease see\n * <http://www.apache.org/>.\n *\n */ \n\npackage \norg.apache.jasper.servlet;\n\nimport java.io.ByteArrayOutputStream;\nimport \njava.io.InputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport \njava.net.URLClassLoader;\nimport java.security.AccessController;\nimport \njava.security.CodeSource;\nimport java.security.PermissionCollection;\nimport \njava.security.PrivilegedAction;\nimport java.security.ProtectionDomain;\n\nimport \norg.apache.jasper.JasperException;\nimport org.apache.jasper.Constants;\nimport \norg.apache.jasper.JspCompilationContext;\nimport \norg.apache.jasper.JspEngineContext;\nimport org.apache.jasper.Options;\nimport \norg.apache.jasper.compiler.Compiler;\n\nimport \norg.apache.jasper.logging.Logger;\nimport javax.servlet.http.*;\n/**\n * This is a \nclass loader that loads JSP files as though they were\n * Java classes. It calls the compiler to \ncompile the JSP file into a\n * servlet and then loads the generated class. \n *\n * @author Anil K. \nVijendran\n * @author Harish Prabandham\n */\npublic class JasperLoader extends \nURLClassLoader {\n\n    protected class PrivilegedLoadClass\n        implements PrivilegedAction \n{\n\n        PrivilegedLoadClass() {\n        }\n         \n        public Object run() {\n            return \nThread.currentThread().getContextClassLoader();\n        }\n\n    }\n\n    private \nPermissionCollection permissionCollection = null;\n    private CodeSource codeSource = \nnull;\n    private String className = null;\n    private ClassLoader parent = null;\n    private \nSecurityManager securityManager = null;\n    private PrivilegedLoadClass privLoadClass = \nnull;\n\n    JasperLoader(URL [] urls, String className, ClassLoader parent,\n\t\t \nPermissionCollection permissionCollection,\n\t\t CodeSource codeSource) \n{\n\tsuper(urls,parent);\n\tthis.permissionCollection = \npermissionCollection;\n\tthis.codeSource = codeSource;\n\tthis.className = \nclassName;\n\tthis.parent = parent;\n        this.privLoadClass = new \nPrivilegedLoadClass();\n\tthis.securityManager = System.getSecurityManager();\n    }\n\n    \n/**\n     * Load the class with the specified name.  This method searches for\n     * classes in the same \nmanner as <code>loadClass(String, boolean)</code>\n     * with <code>false</code> as the \nsecond argument.\n     *\n     * @param name Name of the class to be loaded\n     *\n     * @exception \nClassNotFoundException if the class was not found\n     */\n    public Class loadClass(String name) \nthrows ClassNotFoundException {\n\n        return (loadClass(name, false));\n\n    }\n\n\n    /**\n     * \nLoad the class with the specified name, searching using the following\n     * algorithm until it \nfinds and returns the class.  If the class cannot\n     * be found, returns \n<code>ClassNotFoundException</code>.\n     * <ul>\n     * <li>Call \n<code>findLoadedClass(String)</code> to check if the\n     *     class has already been loaded.  If it \nhas, the same\n     *     <code>Class</code> object is returned.</li>\n     * <li>If the \n<code>delegate</code> property is set to <code>true</code>,\n     *     call the \n<code>loadClass()</code> method of the parent class\n     *     loader, if any.</li>            \n     * <li>Call \n<code>findClass()</code> to find this class in our locally\n     *     defined repositories.</li>      \n     \n* <li>Call the <code>loadClass()</code> method of our parent\n     *     class loader, if any.</li>      \n     \n* </ul>\n     * If the class was found using the above steps, and the\n     * <code>resolve</code> flag is \n<code>true</code>, this method will then\n     * call <code>resolveClass(Class)</code> on the \nresulting Class object.\n     *                                     \n     * @param name Name of the class to be loaded\n     * @param resolve If \n<code>true</code> then resolve the class\n     *                                     \n     * @exception ClassNotFoundException if the \nclass was not found\n     */                                    \n    public Class loadClass(String name, boolean resolve)\n        throws \nClassNotFoundException {\n\n        Class clazz = null;                \n                                           \n        // (0) Check our previously loaded class \ncache\n        clazz = findLoadedClass(name);     \n        if (clazz != null) {               \n            if (resolve)                   \n                \nresolveClass(clazz);       \n            return (clazz);        \n        }                          \n                          \n        // (.5) Permission to access this class when \nusing a SecurityManager\n\tint dot = name.lastIndexOf('.');\n        if \n(System.getSecurityManager() != null) {\n\n\t\t\t// Start of patch 1/3 by Keith Harrison-\nBroninski\n   \t\t    if( securityManager == null ) {\n\t\t\t\tsecurityManager = \nSystem.getSecurityManager();\n            }\n\t\t\t// End of patch 1/3 by Keith Harrison-Broninski\n\n            if \n(dot >= 0) {\n                try {                    \n                    securityManager.checkPackageAccess(name.substring(0,dot));\n                } \ncatch (SecurityException se) {\n                    String error = \"Security Violation, attempt to use \" +\n                        \n\"Restricted Class: \" + name;\n                    System.out.println(error);\n                    throw new \nClassNotFoundException(error);\n                }                          \n            }                              \n        }\n\n\t// Class is in a package, delegate to thread \ncontext class loader\n\tif( !name.startsWith(Constants.JSP_PACKAGE_NAME) ) \n{\n\t\tClassLoader classLoader = null;\n\t    if (System.getSecurityManager() != null) \n{\n\n\t\t\t// Start of patch 2/3 by Keith Harrison-Broninski\n   \t\t    if( securityManager == null ) \n{\n\t\t\t\tsecurityManager = System.getSecurityManager();\n            }\n\t\t\t// End of patch 2/3 by Keith \nHarrison-Broninski\n\n\t\t   \tclassLoader = (ClassLoader) \nAccessController.doPrivileged(privLoadClass);\n        } else {\n\t        classLoader = \nThread.currentThread().getContextClassLoader();\n        }\n        clazz = \nclassLoader.loadClass(name);\n\t    if( resolve )\n\t\t\tresolveClass(clazz);\n\t    return \nclazz;\n\t}\n\n\t// Only load classes for this JSP page\n\tif( \nname.startsWith(Constants.JSP_PACKAGE_NAME + \".\" + className) ) {\n\t    String classFile = \nname.substring(Constants.JSP_PACKAGE_NAME.length()+1) +\n\t\t\".class\";\n\t    byte [] cdata \n= loadClassDataFromFile(classFile);\n\t    if( cdata == null )\n\t\tthrow new \nClassNotFoundException(name);\n\t    if( System.getSecurityManager() != null ) {\n\t\t\n\t\t\t// \nStart of patch 3/3 by Keith Harrison-Broninski\n\t\t    if( securityManager == null ) \n{\n\t\t\t\tsecurityManager = System.getSecurityManager();\n            }\n\t\t\t// End of patch 3/3 by Keith \nHarrison-Broninski\n\n\t\t\tProtectionDomain pd = new \nProtectionDomain(\n\t\t\t\tcodeSource,\n                permissionCollection);\n\t\t\tclazz = \ndefineClass(name,cdata,0,cdata.length,pd);\n\t    } else {\n\t\t\tclazz = \ndefineClass(name,cdata,0,cdata.length);\n\t    }\n\t    if( clazz != null ) {\n\t\tif( resolve )                \n\t\t    \nresolveClass(clazz);\n\t\treturn clazz;\n\t    }\n\t}\n\n\tthrow new \nClassNotFoundException(name);\n    }\n\n    /**\n     * Get the Permissions for a CodeSource.\n     *\n     * \nSince this ClassLoader is only used for a JSP page in\n     * a web application context, we just return \nour preset\n     * PermissionCollection for the web app context.\n     *\n     * @param CodeSource where \nthe code was loaded from\n     * @return PermissionCollection for CodeSource\n     */\n    protected \nfinal PermissionCollection getPermissions(CodeSource codeSource) {\n        return \npermissionCollection;\n    }\n\n\n    /**\n     * Load JSP class data from file.\n     */\n    protected \nbyte[] loadClassDataFromFile(String fileName) {\n        byte[] classBytes = null;\n        try {\n            \nInputStream in = getResourceAsStream(fileName);\n            if (in == null) {\n\t\treturn null;\n\t    }\n            \nByteArrayOutputStream baos = new ByteArrayOutputStream();\n            byte buf[] = new byte[1024];\n            \nfor(int i = 0; (i = in.read(buf)) != -1; )\n                baos.write(buf, 0, i);\n            in.close();     \n            \nbaos.close();    \n            classBytes = baos.toByteArray();\n        } catch(Exception ex) {\n\t    \nex.printStackTrace();\n            return null;     \n        }                    \n        return classBytes;\n    }\n\n}", "id": 11694, "time": "2002-03-12T15:10:23Z", "creator": "keithhb@rolemodellers.com", "creation_time": "2002-03-12T15:10:23Z", "is_private": false}, {"count": 1, "tags": [], "creator": "glenn@apache.org", "attachment_id": null, "id": 11696, "time": "2002-03-12T15:57:13Z", "bug_id": 7052, "creation_time": "2002-03-12T15:57:13Z", "is_private": false, "text": "I'll take a look at your changes within the overall SecurityManager design.\n\nBTW, a patch created with diff -u is much easier to work with, could you\nplease submit one?\n\nThanks,\n\nGlenn"}, {"count": 2, "tags": [], "bug_id": 7052, "attachment_id": null, "text": "Thanks Glenn - I understand that the issue should be assessed in a wider context.  I'm up and \nrunning, anyway, it's just that it seems a bit dodgy having to patch Tomcat on each client \nsite!\n\nSorry about the monster code listing.  The diff is given \nbelow.\n\nKeith\n\n177a178,180\n>             if( securityManager == null ) {\n>                 securityManager = \nSystem.getSecurityManager();\n>             }\n193a197,199\n>                  if( securityManager == null ) {\n>                      \nsecurityManager = System.getSecurityManager();\n>                  }\n211a218,220\n>                 if( \nsecurityManager == null ) {\n>                     securityManager = System.getSecurityManager();\n>                 }\n\n", "id": 11703, "time": "2002-03-12T17:04:33Z", "creator": "keithhb@rolemodellers.com", "creation_time": "2002-03-12T17:04:33Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 7052, "is_private": false, "id": 11734, "time": "2002-03-13T14:28:03Z", "creator": "keithhb@rolemodellers.com", "creation_time": "2002-03-13T14:28:03Z", "tags": [], "text": "A less clunky patch.  The private variable \"securityManager\" is unnecessary.\n\nKeith\n\n106d105\n<     private SecurityManager securityManager = null;\n118d116\n< \tthis.securityManager = System.getSecurityManager();\n180c178\n<                     securityManager.checkPackageAccess(name.substring(0,dot));\n---\n>                     System.getSecurityManager().checkPackageAccess\n(name.substring(0,dot));\n"}, {"count": 4, "tags": [], "bug_id": 7052, "attachment_id": null, "text": "After further review the situation you reported is not a bug and\nthe patch will not be applied.\n\nA SecurityManager can only be set once within a single instantiation of\nthe JVM.  What SecurityManager to use and the security policies to use are\nsomething that should be set by the container at startup, not by an\napplication running within the container.\n\nThe problem that you need to resolve is how to start JBoss with a \nSecurityManager and the security policies you need implemented for RMI.\n\n\n", "id": 12066, "time": "2002-03-20T12:48:51Z", "creator": "glenn@apache.org", "creation_time": "2002-03-20T12:48:51Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 7052, "is_private": false, "id": 15743, "time": "2002-05-08T22:02:42Z", "creator": "mmansell@PureEdge.com", "creation_time": "2002-05-08T22:02:42Z", "tags": [], "text": "The code in JasperLoader caches the SecurityManager for no reason (that I can \ntell). Removing the cache as suggested by the last diff provides the ability \nfor code to install a SecurityManager after the Jasper engine has initialized. \nThis code may be an extension to Tomcat (via an interceptor) and doesn't have \nto be a web application. I don't see what the harm is in removing the cache, \nand I've personally run into a number of scenario's where having it causes \nproblems."}, {"count": 6, "attachment_id": null, "bug_id": 7052, "text": "I am going to repeat what I said earlier.\n\nA SecurityManager can only be set once within a single instantiation of\nthe JVM.  What SecurityManager to use and the security policies to use are\nthe resposibility of the container at startup, and should not be delegated\nto an application.\n\nYou are using the wrong approach to solve the requirement of RMI for\na SecurityManager.\n\nThe problem that you need to resolve is how to start JBoss with a \nSecurityManager with the correct permissions set in the security\npolicy required for your implementation of RMI.\n\n", "id": 15757, "time": "2002-05-09T00:45:40Z", "creator": "glenn@apache.org", "creation_time": "2002-05-09T00:45:40Z", "tags": [], "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 7052, "text": "*** Bug 11086 has been marked as a duplicate of this bug. ***", "id": 20092, "time": "2002-07-24T00:47:19Z", "creator": "glenn@apache.org", "creation_time": "2002-07-24T00:47:19Z", "tags": [], "is_private": false}]
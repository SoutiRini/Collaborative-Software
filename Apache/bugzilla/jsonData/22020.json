[{"count": 0, "tags": [], "bug_id": 22020, "attachment_id": null, "is_private": false, "id": 41853, "time": "2003-07-31T14:20:30Z", "creator": "jlf27@buffalo.edu", "creation_time": "2003-07-31T14:20:30Z", "text": "hello and good day--i apologize if the feature i am requesting has already been \nconsidered, to my knowledge it is not in existence or on the list of accepted / \nrejected items for consideration.  i would like to see a new optional flag be \nadded to the <target..> task which allows it to be marked as internal use only.  \nthis would effectively keep out users from tasks which should not be invoked \nfrom the command line.  also, this would 'hide' the target, i.e. not be listed \nas a possible target task when -projecthelp is passed to ant.  thanks for such a \ngreat tool!!  :-)\n\n-jlf"}, {"count": 1, "tags": [], "bug_id": 22020, "attachment_id": null, "is_private": false, "id": 41876, "time": "2003-07-31T17:10:16Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-07-31T17:10:16Z", "text": "I implement something of the sort currently It works like this:\n\n  <target name=\"public\">\n    <property name=\"invoked.public.target\" value=\"true\"/>\n  </target>\n\n  <target name=\"init\">\n     <fail unless=\"invoked.public.target\">\n     This target is not available to the general public.\n     For a list of public targets use: ant targets\n     </fail>\n   ... rest of initialization ...\n  </target>\n\n  <target name=\"internal1\" depends=\"init\"/>\n  <target name=\"internal2\" depends=\"init\"/>\n\n  <target name=\"invokeMe\" depends=\"public, init, internal, internal2\"/>\n\n   <target name=\"targets\">\n       <echo>\nPublic Targets for this ant file:\n---------------------------------------------------------------------------\n invokeMe           Does incredibly useful stuff\n---------------------------------------------------------------------------\n       </echo>\n   </target>\n\nThe key is to make every target depend on init and only available targets, the\nmajor drawback is you have to maintain your own target to handle project help\ntype stuff. I would like to see this feature added as well, but I havn't taken\nthe time to come up with a patch because I already have the workaround in place :).\n"}, {"text": "ack bitten by my own editing errors again. \n\nThe above should say:\n\nThe key is to make every target depend on init and only available targets depend\non public, the major drawback...\n\nAlso, the depends for invokeMe should say internal1, internal2, but you probably\nguessed that.", "tags": [], "creator": "gus.heck@olin.edu", "is_private": false, "count": 2, "id": 41877, "time": "2003-07-31T17:13:53Z", "bug_id": 22020, "creation_time": "2003-07-31T17:13:53Z", "attachment_id": null}, {"count": 3, "text": "1. give the target a name beginning with a hyphen '-' and it cannot be called on\nthe command line\n\n2. give public entry points a description attribute and omit it from the others,\nand when you do -projecthelp, the others dont get listed (except in -verbose mode)", "creator": "stevel@apache.org", "is_private": false, "id": 41886, "time": "2003-07-31T18:39:07Z", "bug_id": 22020, "creation_time": "2003-07-31T18:39:07Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 22020, "attachment_id": null, "id": 42106, "time": "2003-08-04T20:36:02Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-08-04T20:36:02Z", "is_private": false, "text": "When was this targets beginning with - thing introduced? Has it been there all\nalong? if so where is it documented I know I looked at one point for some form\nof public/private target distinction and missed it (which isn't a very good test\nat all, but there you have it) \n\nAfter testing it myself, I found that anything that begins with \"-\" is parsed as\nan option, but what happens when things change? for example what if support for\n\"--\" to prevent further option recognition is added? Sounds like a perfectly\nreasonable feature if you don't know that people are using -internal1 to keep\ntargets hidden.\n\nAlso, the public/privateness is hidden in the text of the target name, rather\nthan out in an atribute of it's own where it can be easily changed or\nprogramatically considered (perhaps in resolving imports? can an imported ant\nfile's \"private\" targets be called? What about overriding them?)\n\nSteve's workaround is cool, clever and provides exactly what I want in terms of\nhiding targets, but I am reopening because I think it also looks like a\ncoincidental result of option processing quirk and a more robust system that\ndoesn't push funtionality into the target names could be subsituted. This is\nafterall only an enhancement request. (maybe after I move I'll try to write\nthis, if Verizon doesn't go on strike and deprive me of a phone line in my new\nappartment) Others are of course welcome to beat me to it :)\n\nI also noticed that this issue sort of came up in bug 3807 but the reporter\nseems to have ignored the response given. Perhaps 3807 should be marked a dup of\nthis (since this one has more info on it already)\n"}, {"count": 5, "tags": [], "bug_id": 22020, "attachment_id": null, "is_private": false, "id": 42109, "time": "2003-08-04T21:43:38Z", "creator": "stevel@apache.org", "creation_time": "2003-08-04T21:43:38Z", "text": "Gus, you are 100% correct: any -something target is only private because of the\ncommand line parsing process. It is a dirty trick, but it is also one we know\npeople use :)"}, {"count": 6, "tags": [], "bug_id": 22020, "attachment_id": null, "is_private": false, "id": 42110, "time": "2003-08-04T22:25:37Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-08-04T22:25:37Z", "text": "Does that prevent us from adding a proper private=\"true/false\" attribute to \ntarget, which would correctly enforce the target cannot be called using <ant> \nfrom the outside (not problem with leading - in the case), or cannot be called \nfrom a build file that imports the private target (in fact this private target \nwould never be visible to the importing build file, which could merrily define \na similarly named target... exactly like private methods work in Java BTW ;-).\n\nMaybe it's time to get away from the leading dash - trick, and do something \nclean and documented??? --DD"}, {"count": 7, "tags": [], "text": "no, it doesnt at all...", "is_private": false, "id": 42112, "creator": "stevel@apache.org", "time": "2003-08-04T23:53:31Z", "bug_id": 22020, "creation_time": "2003-08-04T23:53:31Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 22020, "attachment_id": null, "is_private": false, "id": 42573, "time": "2003-08-11T19:15:11Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-08-11T19:15:11Z", "text": "Ok, I coded this up. I tried to write it in a way that access modifiers could be\nused fairly generally by simply ehancing the isAccessibleFrom method that I\nadded to target. I have only implemented the from the modifiers public and\nprivate, which will mean works on the command line and doesn't work on the\ncommand line.\n\nThose who would like to consider what should be done with import/overide etc can\nsimply add another access point name to the isAccessibleFrom method and then\ncheck it in whatever code makes decisions about inclusion/invocation/precedence\nof targets to find out what the author intended.\n\nMy implementation likely needs to have some constants added instead of the magic\nwords \"command line\". I wasn't sure where the best place to put such constants\nwould be, so I just left it. Edit or not as pleases (of course). A patch for\ndocs will be forthcomming, I want to see if people like my patch before I spend\ntime documenting. I suspect that there is no good way to write a unit test for\nthe invocation on the commandline, but if someone can tell me how I am willing\nto learn :)\n\nThe following build file seems to work as expected... (which I used for testing)\n\n<?xml version=\"1.0\"?>\n<project name=\"access-test\" basedir=\".\" default=\"pubtar\">\n\n<target name=\"pubtar\" access=\"public\">\n  <echo message=\"default target called\"/>\n  <antcall target=\"privtar\"/>\n</target>\n\n<target name=\"pubtar2\" access=\"public\" depends=\"privtar\">\n  <echo message=\"default target called\"/>\n  <antcall target=\"privtar\"/>\n</target>\n\n<target name=\"privtar\" access=\"private\">\n  <echo message=\"internal target called\"/>\n</target>\n\n</project>"}, {"count": 9, "tags": [], "bug_id": 22020, "attachment_id": 7756, "id": 42574, "time": "2003-08-11T19:16:22Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-08-11T19:16:22Z", "is_private": false, "text": "Created attachment 7756\nAdds public/private access modifiers to <target>"}, {"count": 10, "tags": [], "bug_id": 22020, "attachment_id": null, "is_private": false, "id": 42927, "time": "2003-08-18T16:20:32Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-08-18T16:20:32Z", "text": "Any1 have any thoughts on my patch here?"}, {"count": 11, "tags": [], "bug_id": 22020, "attachment_id": null, "is_private": false, "id": 43748, "time": "2003-09-05T14:52:49Z", "creator": "jan@materne.de", "creation_time": "2003-09-05T14:52:49Z", "text": "*** Bug 3807 has been marked as a duplicate of this bug. ***"}, {"count": 12, "tags": [], "bug_id": 22020, "attachment_id": null, "id": 44646, "time": "2003-09-25T07:52:37Z", "creator": "jan@materne.de", "creation_time": "2003-09-25T07:52:37Z", "is_private": false, "text": "*** Bug 23397 has been marked as a duplicate of this bug. ***"}, {"count": 13, "text": "The comment in the middle of the post linked below also points to a user desire\nfor access control on targets, or in this case ways to work around needing it...\neven if it isn't going to make it into the 1.6 can it go into 1.7? That way we\ncan start finding out why what I wrote is wrong (or not)?\n\nhttp://marc.theaimsgroup.com/?l=ant-dev&m=106623431723810&w=2\n\nAlso to keep info available in one place, I would like to note that some other\nrelavant discussion of this RFE occured on the dev list here under the heading\nof one of the duplicates:\n\nhttp://marc.theaimsgroup.com/?l=ant-dev&w=2&r=1&s=Bug+23397&q=t", "creator": "gus.heck@olin.edu", "attachment_id": null, "id": 45761, "time": "2003-10-15T20:12:17Z", "bug_id": 22020, "creation_time": "2003-10-15T20:12:17Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 22020, "attachment_id": null, "id": 55955, "time": "2004-04-17T19:56:21Z", "creator": "mbenson@apache.org", "creation_time": "2004-04-17T19:56:21Z", "is_private": false, "text": "This seems to keep coming up and, like DD et al, I cannot think of a good \nreason to keep it out as long as we preserve BC regarding \"-*\" targets..."}, {"text": "*** Bug 28447 has been marked as a duplicate of this bug. ***", "tags": [], "creator": "mbenson@apache.org", "is_private": false, "count": 15, "id": 55958, "time": "2004-04-17T20:03:27Z", "bug_id": 22020, "creation_time": "2004-04-17T20:03:27Z", "attachment_id": null}, {"count": 16, "text": "Well, now that the big complexity in the access modifiers exists -<import>, what\nare we going to do with access. \n\nWhich of these three do we want:\n1. the access modifiers control access from the command line\n2. private targets cannot be called from <ant> calls from other build files than\n(self)\n3. private targets cannot be called from imported files.\n\n(3) scares me. Big time. add that and people will want protected, maybe even\npackage private. And it complicates importing no end. Would it be an error to\nredefine a target that was private in an import? It is in C++ after all. Would\nit be allowable to depend on a private target you import? \n\nI am personally biased towards (1) -we just need to make explicit that\npublic/private only applies to command line access, not to anything else. \n\nNb, assuming we say \"-*\" defaults to private, what is the semantics of \n<target name=\"-secret\" access=\"public\"> ? \n\n\n\n", "creator": "stevel@apache.org", "attachment_id": null, "id": 55960, "time": "2004-04-17T20:45:05Z", "bug_id": 22020, "creation_time": "2004-04-17T20:45:05Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "text": "I would agree that (1) is the simplest.  For clarification here and now, access \ndefaults to \"public\".  I would treat the -* targets as a different issue; i.e. \nif a user can find a way to call a public (explicitly defined as such or \notherwise) target named -* from the command line, they are welcome to do so.\n\nAs a long-overdue response to Gus's question(s) about the attached patch... I \nthink an EnumeratedAttribute should be used for the access values... also, I \ndon't know if the whole \"access point\" thing is warranted, especially if we \nchoose that access is only relevant with respect to the command line.\n\n$0.02", "attachment_id": null, "id": 55961, "creator": "mbenson@apache.org", "time": "2004-04-17T21:10:12Z", "bug_id": 22020, "creation_time": "2004-04-17T21:10:12Z", "is_private": false}, {"count": 18, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "text": "As an additional note, bug 24231 has historically been associated with this one \nand might be reexamined in terms of providing a way to implicitly allow -* \ntasks to be called from the command-line...", "id": 55962, "time": "2004-04-17T21:18:45Z", "bug_id": 22020, "creation_time": "2004-04-17T21:18:45Z", "is_private": false}, {"count": 19, "tags": [], "text": "Well, 1.5 years later, I am again in need of something along these lines, so I\nfigured I might as well ping this bug...\n\nThe current scenario is I am trying to set up a simple text based interactive\nbuild that uses input to collect various parameters (rather than having 15\ndifferent -D arguments). This will be distributed as part of a zip file and used\nby the customer to create a warfile with the tweaks needed for their environment.\n\nSince the customer gets the source code ayway, the quickest way to do this zip\nup the source and write an small build file that imports the development build,\nbut hides dangerous targets from the user. It would be a disaster if they\naccidentally ran recreate-db against their production DB since the first thing\nit does is wipe the entire database.\n\nThis need is slightly different than the intent of my patch, but closely\nrelated. I have created duplicate targets in the build file to match the one\nimported which helps (forcing the targets to be refered to as\nbuildname.sometarget instead of just sometarget), but imported targets show up\nunder project help.\n\nHas any further thought been given to controling access to targets? Have I\nmissed something in the past year? (I'm re-subscribing to the dev list so feel\nfree to answer me there)", "attachment_id": null, "id": 73835, "creator": "gus.heck@olin.edu", "time": "2005-04-19T21:25:52Z", "bug_id": 22020, "creation_time": "2005-04-19T21:25:52Z", "is_private": false}]
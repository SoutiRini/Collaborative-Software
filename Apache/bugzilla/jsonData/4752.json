[{"count": 0, "tags": [], "creator": "ian_macdonald@securecomputing.com", "attachment_id": null, "is_private": false, "id": 7704, "time": "2001-11-08T11:53:16Z", "bug_id": 4752, "creation_time": "2001-11-08T11:53:16Z", "text": "It would be nice if Ant could report an error and stop the script if it \nencounters a reference to an undefined property.  Currently, scripts that \nreference an undefined property can silently fail due to an undefined property.\n\nFor example:\n\n<mkdir dir=\"${directory.dir}\"/>\n\nwill create a directory named '${directory.dir}' if directory.dir was not \ndefined.  This is not what a script writer would have intended.\n\nI realize you could use a separate target to validate the existance of a \nproperty and fail if it is not defined.  However, this extra step should not be \nneeded and references to undefined properties should always be errors."}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "First of all, you are right - and we've decided for Ant2 that we will simply\nterminate the complete build process if something tries too access a property\nthat doesn't exist.\n\nUnfortunately there are build files out there, that rely on Ant's current\nbehavior (and people using these files would certainly get annoyed by warnings\neverytime they run there build), so we cannot change it in the 1.x series of Ant.", "id": 7719, "time": "2001-11-09T08:04:11Z", "bug_id": 4752, "creation_time": "2001-11-09T08:04:11Z", "is_private": false}, {"count": 2, "tags": [], "text": "How about adding a commandline (and systemproperty and...) option for this? For example \"strict\" or \"strickproperties\" or \"failundefinedprops\" or something.\n\nIt wouldn't break existing scripts, but would be very valuable for those that want it (see http://www.jroller.com/wipu/entry/a_file_is_a_target).\n\nI would very much appreciate the fix, even as a (binary) patch or something!\n\n(I suppose the fix would be even trivial for someone who knows where the reference resolving code is.)\n", "is_private": false, "bug_id": 4752, "id": 122023, "time": "2008-10-30T04:10:17Z", "creator": "ville@oikarinen.org", "creation_time": "2008-10-30T04:10:17Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "is_private": false, "id": 122026, "time": "2008-10-30T07:18:26Z", "bug_id": 4752, "creation_time": "2008-10-30T07:18:26Z", "text": "Wow, seven years.  Well, for some time Ant has had the ability to use a custom PropertyHelper, and in the current trunk branch it is easier than ever to install one.  I would suspect that is the closest you'll ever get."}, {"count": 4, "tags": [], "bug_id": 4752, "text": "Thanks Matt, but we are not there yet.\n\nThe apidoc at\n\nhttp://www.dpml.net/api/ant/1.6.4/org/apache/tools/ant/PropertyHelper.html#getUserProperty(java.lang.String, java.lang.String)\n\nseems to point at the method responsible for resolving a property. But the contract seems to be to return null for undefined properties.\n\nMaybe I should overrid this method like this:\npublic java.lang.Object getUserProperty(java.lang.String ns,\n                                        java.lang.String name) {\n  Object retval = super.getUserProperty(ns,name);\n  if(retval == null) throw new SomeException();\n  else return retval;\n}\n\nHow will this contract violation work (now and in the future)? What should SomeException be? Etc. Seems that it's the caller's responsibility to handle null in a different way.\n\nBesides, the apidoc starts with \"NOT FINAL. API MAY CHANGE\". Doesn't sound like fun to customize this, does it :)\n", "id": 122027, "time": "2008-10-30T07:33:01Z", "creator": "ville@oikarinen.org", "creation_time": "2008-10-30T07:33:01Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "text": "(In reply to comment #4)\n> Thanks Matt, but we are not there yet.\n> \n> The apidoc at\n> \n> http://www.dpml.net/api/ant/1.6.4/org/apache/tools/ant/PropertyHelper.html#getUserProperty(java.lang.String,\n> java.lang.String)\n> \n> seems to point at the method responsible for resolving a property. But the\n> contract seems to be to return null for undefined properties.\n> \n> Maybe I should overrid this method like this:\n> public java.lang.Object getUserProperty(java.lang.String ns,\n>                                         java.lang.String name) {\n>   Object retval = super.getUserProperty(ns,name);\n>   if(retval == null) throw new SomeException();\n>   else return retval;\n> }\n> \n\nThat's pretty much what I suggest.  Note that you don't really need the else once you've thrown the exception.  ;)\n\n> How will this contract violation work (now and in the future)? What should\n> SomeException be? Etc. Seems that it's the caller's responsibility to handle\n> null in a different way.\n\nUse a BuildException.  As for contract violation, you wanted the build to break... after that, nothing else can happen anyway... seems fine to me.\n\n> \n> Besides, the apidoc starts with \"NOT FINAL. API MAY CHANGE\". Doesn't sound like\n> fun to customize this, does it :)\n> \n\nI wondered if you'd point that out.  Those comments are really left over from the beginnings of PropertyHelper, and sure enough, we did change it.  But I like to think we put a lot of thought into it when we did so and that code has been stable now for quite some time.  We probably should remove that warning, at least before shipping 1.8.0, because I think the API we have now is good enough--minus the (many) deprecated methods, of course.\n", "id": 122029, "time": "2008-10-30T07:47:15Z", "bug_id": 4752, "creation_time": "2008-10-30T07:47:15Z", "is_private": false}, {"count": 6, "tags": [], "creator": "ville@oikarinen.org", "attachment_id": null, "is_private": false, "id": 122402, "time": "2008-11-12T00:50:39Z", "bug_id": 4752, "creation_time": "2008-11-12T00:50:39Z", "text": "Ok, fair enough.\n\nI tried extending PropertyHelper, but I don't know how to make ant use it. Or at least, it doesn't work so undefined properties don't fail the build.\n\nHere is my class:\n\npackage org.oikarinen.ant.strictpropertyhelper;\n\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.Project;\nimport org.apache.tools.ant.PropertyHelper;\n\npublic class StrictPropertyHelper extends PropertyHelper {\n\n\t@Override\n\tpublic synchronized Object getUserProperty(String ns, String name) {\n\t\tObject property = super.getUserProperty(ns, name);\n\t\tif (property == null) { throw new BuildException(\"Undefined property: ns=\" + ns + \", name=\"\n\t\t\t\t+ name); }\n\t\treturn property;\n\t}\n}\n\nI put the class in ant's own lib directory and added the following to ANT_OPTS:\n-Dant.PropertyHelper=org.oikarinen.ant.strictpropertyhelper.StrictPropertyHelper\n\nBut this didn't change anything.\n\nThe documentation for ant.PropertyHelper says the value is a ant-reference-name, but I have no idea what this means. What exactly is a reference and how can I use it to point to my class?\n\nWhy isn't the type of the property a fully qualified class name like that of the org.apache.tools.ant.ProjectHelper property's?\n\nI even tried -Dorg.apache.tools.ant.ProjectHelper=org.oikarinen.ant.strictpropertyhelper.StrictPropertyHelper\n\nwhich resulted in ant complaining that my class isn't an instance of ProjectHelper, which proved at least that my class can be loaded by ant.\n"}]
[{"count": 0, "tags": [], "bug_id": 56166, "text": "Created attachment 31337\nPatch addressing the mentioned problems.\n\nReporting a few potential bugs or improvements on some exception handling code. For what it is worth, attaching a patch to address these problems.\n\nCategory 1:\nThe exception caught is too general:\n=========================\nCase 1:\nLine: 180, File: \"org/apache/catalina/core/ApplicationFilterFactory.java\"\n\n178: try {\n179:     isCometFilter = filterConfig.getFilter() instanceof CometFilter;\n180: } catch (Exception e) {\n181:     // Note: The try catch is there because getFilter has a lot of\n182:     // declared exceptions. However, the filter is allocated much\n183:     // earlier\n184: }\n\nThis try block can throw many exceptions, including:\n1. ClassCastException\n2. ClassNotFoundException\n3. IllegalAccessException\n4. InstantiationException\n5. ServletException\n6. NamingException\n7. InvocationTargetException\n\nAll of them will be silently swallowed by the catch block. In particular, earlier in the same function, the same exception is handled in the following manner:\n\n  try {\n       isCometFilter = filterConfig.getFilter() instanceof CometFilter;\n  } catch (Exception e) {\n       // Note: The try catch is there because getFilter has a lot of\n       // declared exceptions. However, the filter is allocated much\n       // earlier\n       Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);\n       ExceptionUtils.handleThrowable(t);\n  }\n\nFixed in the patch by handling the exception in the same way as the above.\n==========================================\n=========================\nCase 2:\nLine: 234, File: \"org/apache/tomcat/util/modeler/BaseModelMBean.java\"\n\n232:  try {\n233:      response.add(new Attribute(names[i],getAttribute(names[i])));\n234:  } catch (Exception e) {\n235:      // Not having a particular attribute in the response\n236:      // is the indication of a getter problem\n237:  }\n\nThe try block could throw:\n1. AttributeNotFoundException\n2. MBeanException\n3. ReflectionException\n\nFixed by ignoring the AttributeNotFoundException and log the other exceptions.\n==========================================\n=========================\nCase 3:\nLine: 298, File: \"org/apache/catalina/manager/StatusTransformer.java\"\n\n294:   try {\n295:      Object value = mBeanServer.getAttribute(tpName, \"keepAliveCount\");\n296:      writer.print(\" Keeped alive sockets count: \");\n297:      writer.print(value);\n298:   } catch (Exception e) {\n299:      // Ignore\n300:   }\n\nThis might be problematic since the catch block is too general.\n\ngetAttribute() can throw:\n1. RuntimeOperationsException\n2. MBeanException\n3. AttributeNotFoundException\n4. InstanceNotFoundException\n5. ReflectionException\n\nAll of them will be swallowed.\nFixed by only ignoring AttributeNotFoundException.\n==========================================\n=========================\nCase 4:\nLine: 215, File: \"org/apache/catalina/storeconfig/StoreLoader.java\"\n\n206:    try {\n207:        File home = new File(getCatalinaBase());\n208:        File conf = new File(home, \"conf\");\n209:        File reg = new File(conf, \"server-registry.xml\");\n210:        is = new FileInputStream(reg);\n211:        if (log.isInfoEnabled())\n212:            log.info(\"Find registry server-registry.xml at file \"\n213:                    + reg.getCanonicalPath());\n214:        registryResource = reg.toURI().toURL();\n215:    } catch (Throwable t) {\n216:        // Ignore\n217:    }\n\nThe catch block might be too general.\n\nThe try block could throw:\n1. NullPointerException by new File\n2. FileNotFoundException by new FileInputStream\n3. SecurityException by new FileInputStream and reg.toURL\n4. IllegalArgumentException by reg.toURL().toURL\n5. MalformedURLException by reg.toURL().toURL\n\nNow with the implementation above, all of them will be ignored.\n\nFixed by ignoring FileNotFoundException while logging the others.\n==========================================\n=========================\nCase 5:\nLine: 307, File: \"org/apache/tomcat/util/modeler/ManagedBean.java\"\n\n305:     try {\n306:         clazz = Class.forName(getClassName());\n307:     } catch (Exception e) {\n308:     }\n\nShould probably just ignore ClassNotFoundException.\n\nFixed by ignoring ClassNotFoundException.\n==========================================\n=========================\nCase 6:\nLine: 202, File: \"org/apache/catalina/storeconfig/StoreLoader.java\"\n\n193: try {\n194:     String configUrl = getConfigUrl();\n195:     if (configUrl != null) {\n196:         is = (new URL(configUrl)).openStream();\n197:         if (log.isInfoEnabled())\n198:             log.info(\"Find registry server-registry.xml from system property at url \"\n199:                     + configUrl);\n200:         registryResource = new URL(configUrl);\n201:     }\n202: } catch (Throwable t) {\n203:     // Ignore\n204: }\n\nThe catch block might be too general.\nopenStream() above could throw IOException;\nnew URL() could throw MalformedURLException;\n\nBoth will be ignored.\n\nFixed by logging MalformedURLException and ignoring IOException.\n==========================================\n\nCategory 2: Exceptions that \"should never happen\" are now silently ignored. In those cases, it is better to at least put an error message there, if not shutting down the execution. Later as code evolves, or something really wrong occurs, such exception could have occurred and would be silently swallowed.\n\nCurrently I fixed them by log these exceptions.\n=========================\nCase 7:\nLine: 867, File: \"org/apache/catalina/connector/CoyoteAdapter.java\"\n\n865:        try {\n866:            Thread.sleep(1000);\n867:        } catch (InterruptedException e) {\n868:            // Should never happen\n869:        }\n==========================================\n=========================\nCase 8:\nLine: 706, File: \"org/apache/catalina/core/DefaultInstanceManager.java\"\n\n703:                    try {\n704:                        result = clazz.getDeclaredField(\n705:                                entry.getAccessibleObjectName());\n706:                    } catch (NoSuchFieldException e) {\n707:                        // Should never happen. On that basis don't log\n708:                        // it.\n709:                    }\n==========================================\n=========================\nCase 9:\nLine: 231, File: \"org/apache/catalina/core/NamingContextListener.java\"\n\n229:    try {\n230:        namingContext = new NamingContext(contextEnv, getName());\n231:    } catch (NamingException e) {\n232:        // Never happens\n233:    }\n==========================================\n=========================\nCase 10:\nLine: 465, File: \"org/apache/catalina/connector/Request.java\"\n\n463:        try {\n464:            part.delete();\n465:        } catch (IOException ignored) {\n466:            // ApplicationPart.delete() never throws an IOEx\n467:        }\n==========================================\n=========================\nCase 11:\nLine: 2333, File: \"org/apache/catalina/connector/Request.java\"\n\n2331:            try {\n2332:                logout();\n2333:            } catch (ServletException e) {\n2334:                // Should never happen (no code called by logout()\n2335:                // throws a ServletException\n2336:            }\n==========================================\n=========================\nCase 12:\nLine: 481, File: \"org/apache/catalina/valves/rewrite/RewriteValve.java\"\n\n478:            try {\n479:                request.getConnector().getProtocolHandler().getAdapter().service\n480:                (request.getCoyoteRequest(), response.getCoyoteResponse());\n481:            } catch (Exception e) {\n482:                // This doesn't actually happen in the Catalina adapter implementation\n483:            }\n==========================================\n=========================\nCase 13:\nLine: 844, File: \"org/apache/tomcat/jdbc/pool/PoolProperties.java\"\n\n816:try {\n817:    String[] fields = DataSourceFactory.ALL_PROPERTIES;\n818:    for (String field: fields) {\n818:    for (String field: fields) {\n819:        final String[] prefix = new String[] {\"get\",\"is\"};\n820:        for (int j=0; j<prefix.length; j++) {\n821:\n822:            String name = prefix[j]\n823:                    + field.substring(0, 1).toUpperCase(Locale.ENGLISH)\n824:                    + field.substring(1);\n825:            Method m = null;\n826:            try {\n827:                m = getClass().getMethod(name);\n828:            }catch (NoSuchMethodException nm) {\n829:                continue;\n830:            }\n831:            buf.append(field);\n832:            buf.append(\"=\");\n833:            if (DataSourceFactory.PROP_PASSWORD.equals(field)) {\n834:                buf.append(\"********\");\n835:            } else {\n836:                buf.append(m.invoke(this, new Object[0]));\n837:            }\n838:            buf.append(\"; \");\n839:            break;\n840:        }\n841:    }\n842:}catch (Exception x) {\n843:    //shouldn't happen\n844:    log.debug(\"toString() call failed\", x);\n845:}\n\nFixed by changing verbosity from debug to error.\n==========================================\nExceptions that probably should at least be logged:\n=========================\nCase 14:\n  Line: 480, File: \"org/apache/juli/ClassLoaderLogManager.java\"\n\n478:        try {\n479:            is = new FileInputStream(defaultFile);\n480:        } catch (IOException e) {\n481:            // Critical problem, do something ...\n482:        }\n\nFixed by logging it.\n==========================================\n=========================\nCase 15:\nLine: 276, File: \"org/apache/catalina/authenticator/SpnegoAuthenticator.java\"\n\n274:        try {\n275:            lc.logout();\n276:        } catch (LoginException e) {\n277:            // Ignore\n278:        }\n\nThis LoginException during logout should not be ignored. Fixed by logging it.\n==========================================\n=========================\nCase 16:\n  Line: 269, File: \"org/apache/catalina/authenticator/SpnegoAuthenticator.java\"\n\n267:        try {\n268:            gssContext.dispose();\n269:        } catch (GSSException e) {\n270:            // Ignore\n271:        }\n\nFixed by logging it.\n==========================================\n=========================\nCase 17:\nLine: 348, File: \"org/apache/catalina/core/StandardServer.java\"\n\n346:        try {\n347:            service.start();\n348:        } catch (LifecycleException e) {\n349:            // Ignore\n350:        }\n\nSimilar code snippets are logged (LifecycleException thrown from start()):\nSuch as:\n      try {\n          connector.start();\n      } catch (LifecycleException e) {\n          log.error(sm.getString(\n                  \"standardService.connector.startFailed\",\n                  connector), e);\n      }\n\n      try {\n          ex.start();\n      } catch (LifecycleException x) {\n          log.error(\"Executor.start\", x);\n      }\n\nFixed by logging it.\n==========================================\n=========================\nCase 18:\nLine: 150, File: \"org/apache/catalina/core/StandardService.java\"\n\n148:    try {\n149:        this.container.start();\n150:    } catch (LifecycleException e) {\n151:        // Ignore\n152:    }\n\nFixed by logging it. similar to the case above.\n==========================================\n=========================\nCase 19:\nLine 141, File \"org/apache/catalina/core/ApplicationFilterFactory.java\"\n   if (filterConfig == null) {\n       // FIXME - log configuration problem\n       continue;\n   }\n\nFixed by logging it.\nA similar case is at line 173 in the same file.\n==========================================", "id": 173387, "time": "2014-02-20T03:19:38Z", "creator": "yuan@eecg.utoronto.ca", "creation_time": "2014-02-20T03:19:38Z", "is_private": false, "attachment_id": 31337}, {"count": 1, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 173391, "creation_time": "2014-02-20T09:39:24Z", "time": "2014-02-20T09:39:24Z", "bug_id": 56166, "text": "Changing severity to enhancement.\n\nThank you, but \"Potential bugs\" in many cases are not actual bugs.\n\n1. From admin's point of view too many logs are a bad thing. They administer the server, they aren't debugging it.\n\n2. In many of these cases there will be some observable effect elsewhere\n(e.g. Tomcat not starting) and usually some logging elsewhere.\n\n3. Issues that do not break normal operation are not errors. E.g. a malformed request should not be logged as an error, as that can be used to fill up the logs.\n\nThey may be logged at debug level.\n\nSome interesting cases are logged at info level once per day through UserDataHelper class.\n\n4. Code that is not called (for cases that \"should never happen\", as documented) should not be there. It is dead weight that cannot be tested and behaves in an unknown way.\n\nIn several places that say \"an exception cannot happen\", it cannot really happen, because Tomcat implementation behind those JavaEE API classes is known, and does not throw such exceptions.\n\nA quick review, just looking at the patch\n\n\n\"Maybe\"s:\n------\n> SpnegoAuthenticator\n+0. Maybe, with s/error/debug/\nI am not very familiar with that code though.\n\n> ClassLoaderLogManager\n+0. Maybe, with different message\n\n>StoreLoader\n+0. Catching a Throwable isn't good. I'd be better to fix this.\n\n>RewriteValve\n+0. It would be better to propagate an error, not log it. Beware that if this can be triggered it would be triggered by client's request, so it should be at debug logging or behind an UserDataHelper.\n\n\n\"Won't\"s:\n------\n>CoyoteAdapter\n-1. Not an issue. Interruptions happen (e.g. at shutdown). They are not an error.\n\n>Request\n-1. Not an issue. Tomcat-specific implementations behind those APIs are known. Exceptions do not happen here (dead code).\n\n>ApplicationFilterFactory,\n>DefaultInstanceManager,\n>NamingContextListener\n>StandardServer\n>StandardService\n-0. Unlikely. I think these are likely already have an effect elsewhere (e.g. Tomcat not starting) or are logged elsewhere.\n\n>StatusTransformer\n-1. It should suppress RuntimeExceptions.\nIf something fails, it will be noted by empty output.\n\n>BaseModelMBean,\n>ManagedBean\n-1. Not an issue.\n\n>PoolProperties\n-1. You wouldn't want a random toString() call to fill up logs. You will see that a string value is truncated.", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56166, "text": "Thanks a lot for the feedbacks and sorry for those non-issues. For what it is worth, I did a bit more digging to follow-up on your comments regarding to the effects of the following cases:\n\n\">ApplicationFilterFactory,\n>DefaultInstanceManager,\n>NamingContextListener\n>StandardServer\n>StandardService\n-0... these are likely already have an effect elsewhere (e.g. Tomcat not starting) or are logged elsewhere.\"\n\n> ApplicationFilterFactory: \n   if (filterConfig == null) {\n       // FIXME - log configuration problem\n       continue;\n   }\nThe effect is that the filterConfig won't added into filterChain and the function will return. It's not obvious how the caller handles this. At least each time when filterConfig==null occurs during iterating through it would be lost.\n\n>DefaultInstanceManager\nThe effect will be a null pointer dereference. If the exception occurs, it will cause getField() to return null, which is passed into lookupFieldResource(..), which will dereference the null pointer and cause a null pointer dereference exception. I wonder if this is the desired behaviour.\n\n>NamingContextListener\nThe effect will be a null pointer dereference. If the exception occurs, namingContext will be null and there would be pointer dereference 10 lines later: namingContext.setExceptionOnFailedWrite(..);\n\n>StandardServer\n>StandardService\nSorry I am not sure about the effect. When Service.start() throws LifecycleException and it is swallowed, addservice seems will return and it is not obvious how the code will eventually interpret this error.\n\n\">+0. Catching a Throwable isn't good. I'd be better to fix this.\"\nIn case it helps, there are a few more cases where a throwable is caught and ignored:\n\n  Line: 202, File: \"org/apache/catalina/storeconfig/StoreLoader.java\"\n\n193:         try {\n194:             String configUrl = getConfigUrl();\n195:             if (configUrl != null) {\n196:                 is = (new URL(configUrl)).openStream();\n197:                 if (log.isInfoEnabled())\n198:                     log.info(\"Find registry server-registry.xml from system property at url \"\n199:                             + configUrl);\n200:                 registryResource = new URL(configUrl);\n201:             }\n202:         } catch (Throwable t) {\n203:             // Ignore\n204:         }\n=====\n Line: 46, File: \"org/apache/juli/logging/DirectJDKLog.java\"\n44:             try {\n45:                 Class.forName(SIMPLE_CFG).newInstance();\n46:             } catch( Throwable t ) {\n47:             } \n\nbut it seems this error is not important. \n====\n  Line: 60, File: \"org/apache/juli/logging/DirectJDKLog.java\"\n\n48:             try {\n49:                 Formatter fmt=(Formatter)Class.forName(System.getProperty(FORMATTER, SIMPLE_FMT)).newInstance();\n50:                 // it is also possible that the user modified jre/lib/logging.properties -\n51:                 // but that's really stupid in most cases\n52:                 Logger root=Logger.getLogger(\"\");\n53:                 Handler handlers[]=root.getHandlers();\n54:                 for( int i=0; i< handlers.length; i++ ) {\n55:                     // I only care about console - that's what's used in default config anyway\n56:                     if( handlers[i] instanceof  ConsoleHandler ) {\n57:                         handlers[i].setFormatter(fmt);\n58:                     }\n59:                 }\n60:             } catch( Throwable t ) {\n61:                 // maybe it wasn't included - the ugly default will be used.\n62:             }\n=====\n  Line: 424, File: \"org/apache/tomcat/util/modeler/Registry.java\"\n\n419:         try {\n420:             if( getMBeanServer().isRegistered(oname)) {\n421:                 getMBeanServer().unregisterMBean(oname);\n422:             }\n423:         } catch( Throwable t ) {\n424:             log.error( \"Error unregistering mbean \", t);\n425:         }\n \n\nPlease let me know if there is anything more I could help in fixing these. Thanks!", "id": 173407, "time": "2014-02-20T22:32:25Z", "creator": "yuan@eecg.utoronto.ca", "creation_time": "2014-02-20T22:32:25Z", "is_private": false, "attachment_id": null}]
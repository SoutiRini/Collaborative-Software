[{"count": 0, "tags": [], "bug_id": 39547, "is_private": false, "text": "There is a bug in StyleTextPropAtom which prevents me from fixing the issue with\nslides ordering.\n\nHow to reproduce:\n\n1. Download http://www.gersteinlab.org/lectures/ppt/A2K-at-Yale-20060422.ppt\n\n2. Try to construct the slide show:\n\n    SlideShow ppt = new SlideShow(new HSLFSlideShow(\"A2K-at-Yale-20060422.ppt\"));\n\nand get the error:\n\njava.lang.IndexOutOfBoundsException: Index: 1, Size: 1\n\tat java.util.LinkedList.entry(LinkedList.java:356)\n\tat java.util.LinkedList.get(LinkedList.java:299)\n\tat org.apache.poi.hslf.model.TextRun.<init>(TextRun.java:110)\n\tat org.apache.poi.hslf.model.TextRun.<init>(TextRun.java:67)\n\tat org.apache.poi.hslf.model.Sheet.findTextRuns(Sheet.java:126)\n\tat org.apache.poi.hslf.model.Sheet.findTextRuns(Sheet.java:88)\n\tat org.apache.poi.hslf.model.Slide.<init>(Slide.java:66)\n\tat org.apache.poi.hslf.usermodel.SlideShow.buildSlidesAndNotes(SlideShow.java:394)\n\n\nBefore stack trace I see the following warnings: \n\nNo core record found with ID 3 based on PersistPtr lookup\nNo core record found with ID 5 based on PersistPtr lookup\nNo core record found with ID 6 based on PersistPtr lookup\nNo core record found with ID 7 based on PersistPtr lookup\nNo core record found with ID 8 based on PersistPtr lookup\nNo core record found with ID 9 based on PersistPtr lookup\nNo core record found with ID 10 based on PersistPtr lookup\nNo core record found with ID 11 based on PersistPtr lookup\nNo core record found with ID 12 based on PersistPtr lookup\nNo core record found with ID 13 based on PersistPtr lookup\nNo core record found with ID 22 based on PersistPtr lookup\nNo core record found with ID 44 based on PersistPtr lookup\nNo core record found with ID 45 based on PersistPtr lookup\nParagraph style ran out before character style did! Short by 327 characters.\nCalling RichTextRun functions is likely to break things - see Bug #38544\n\nRegards, Yegor Kozlov", "id": 89008, "time": "2006-05-10T16:25:06Z", "creator": "yegor@dinom.ru", "creation_time": "2006-05-10T16:25:06Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": 18362, "text": "Created attachment 18362\nPatch with the fix", "id": 89553, "time": "2006-05-29T15:24:17Z", "bug_id": 39547, "creation_time": "2006-05-29T15:24:17Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 18364\nreturn slides in the correct order", "is_private": false, "bug_id": 39547, "id": 89556, "time": "2006-05-29T15:27:45Z", "creator": "yegor@dinom.ru", "creation_time": "2006-05-29T15:27:45Z", "attachment_id": 18364}, {"count": 3, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": 18365, "text": "Created attachment 18365\nnull-pointer fixed", "id": 89557, "time": "2006-05-29T15:29:06Z", "bug_id": 39547, "creation_time": "2006-05-29T15:29:06Z", "is_private": false}, {"count": 4, "tags": [], "text": "Nick,\n\n(1) I had to comment a line in StyleTextPropAtom.setParentTextSize:\n\n                        // Handle extra 1 char styles at the end\n                        if(pos < rawContents.length && textHandled == size) {\n                                //size++; //do we need this code? \n                        }\n\nIt results in errors as described above. Do you have examples when this code\nworks properly and we need it?\nAll test cases pass, I can add text to a slide and see it in PPT. \n\n(2)  Finally I found how to get slides in the correct order: the order of slides\nis defined by\nthe order in which slides are listed in SlideListWithText.  I'm 99% sure it is so.\nI did lots of tests and this rule seems OK. \nBTW: There are potential bugs in SlideShow.buildSlidesAndNotes.\nTo get slides and atoms we need only the second SlideListWithText, not all.\n\nThere can be several SlideListWithText containers:\n - SlideListWithText[0]:  always present. Contains MainMaster and TitleMaster\nobjects.\n Since PowerPoint 2003 there can be multiple masters and this is the place where\ntheir references are stored.\n- SlideListWithText[1]:  Always exists if a ppt contains at least one slide. \nStores slides and slide atoms\n- SlideListWithText[2] (if any): Stores other objects like notes, handouts, etc.\n\nRegards, Yegor", "is_private": false, "bug_id": 39547, "id": 89560, "time": "2006-05-29T15:42:45Z", "creator": "yegor@dinom.ru", "creation_time": "2006-05-29T15:42:45Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "apache@gagravarr.org", "text": "> BTW: There are potential bugs in SlideShow.buildSlidesAndNotes.\n> To get slides and atoms we need only the second SlideListWithText, not all.\n\nIs that always the case on files that've been saved multiple times? I have a\nnasty feeling that the SLWTs get pretty messed up in those cases, and you can\nget quite a few of them\n\n(I'm all for making it simpler, I'm just worried that it might not be quite that\nsimple!)\n\nI'm thinking we should probably do a simpler version of SLWTTextListing, to\nreport what it does find in the SlideListWithTexts. We can then run that over a\nlarge range of documents, and check our assumptions are correct?\n\nNick", "count": 5, "id": 89661, "time": "2006-06-01T17:36:35Z", "bug_id": 39547, "creation_time": "2006-06-01T17:36:35Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 39547, "text": "> Is that always the case on files that've been saved multiple times? I have a\n> nasty feeling that the SLWTs get pretty messed up in those cases, and you can\n> get quite a few of them\n\nNo, as far as I know slides are always stored in the second SLWT. If\nwe add a new slide we must add SlidePersistAtom to the second SLWT,\nnot to the last one. Ops, I wrote it and understood that the current\ncode adds new slides to the last SLWT and this is wrong :).\n\nI attached a sample ppt which demonstrates the problem. Title Masters\nare always stored as Slide records, not as MainMaster. Current\nalgorithm recognizes them as slides and this is wrong.\nCheck what SlideShow.getSlides() returns and see extra records.\n\nI also prepared a picture which describes what I know about SLWTs in\nPowerPoint.\n\n> (I'm all for making it simpler, I'm just worried that it might not be quite that\n> simple!)\nI agree, we can simplify and improve it. We know much more about PPT\nformat than a year ago, it is a chance to use this knowledge and refactor the code.\n\nRegards,\nYegor", "id": 89684, "time": "2006-06-02T08:14:15Z", "creator": "yegor@dinom.ru", "creation_time": "2006-06-02T08:14:15Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": 18395, "text": "Created attachment 18395\nA sample ppt with two masters and two title masters", "id": 89685, "time": "2006-06-02T08:15:47Z", "bug_id": 39547, "creation_time": "2006-06-02T08:15:47Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 39547, "text": "Created attachment 18396\nSlideListWithText hierarchy", "id": 89686, "time": "2006-06-02T08:18:26Z", "creator": "yegor@dinom.ru", "creation_time": "2006-06-02T08:18:26Z", "is_private": false, "attachment_id": 18396}, {"count": 9, "tags": [], "bug_id": 39547, "is_private": false, "text": "Can you cast hslf.dev.SLWTListing over a bunch of your test files?\n\nI've been finding that the 2nd SLWT does seem to hold the slide's text, as your\nresearch indicates. I've yet to find a document where that doesn't hold true.\n\nThe first one seems to hold one or more SlidePersistAtoms, but never any other\nrecords.\n\nThe third one (if present) seems to also hold one or more SlidePersistAtoms.\n\n\nIf your testing with dev.SLWTListing concurs, then I'll go ahead and make the\nappropriate changes. (I just want to be sure we've correctly understood before\ncommitting!)", "id": 90101, "time": "2006-06-12T15:26:16Z", "creator": "apache@gagravarr.org", "creation_time": "2006-06-12T15:26:16Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 39547, "text": "The recent batch of changes should've fixed the TextRun bug.\n\nI'll keep this bug open until we have the new slide ordering stuff committed though.", "id": 90141, "time": "2006-06-13T15:01:23Z", "creator": "apache@gagravarr.org", "creation_time": "2006-06-13T15:01:23Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 39547, "is_private": false, "text": "Created attachment 18477\nsample ppt which does not hold text atoms in the second SLWT", "id": 90297, "time": "2006-06-16T11:11:57Z", "creator": "yegor@dinom.ru", "creation_time": "2006-06-16T11:11:57Z", "attachment_id": 18477}, {"count": 12, "tags": [], "bug_id": 39547, "text": "Hi Nick\n\n>>Can you cast hslf.dev.SLWTListing over a bunch of your test files?\n\nI have a similar utility but it dumps the content in XML.\n For me it is easier to analyze the structure of records if I work with a tree,\nnot with plain text.\n\n>>I've been finding that the 2nd SLWT does seem to hold the slide's text, as your\n>>research indicates. I've yet to find a document where that doesn't hold true.\n\nThe 2nd SLWT MAY not contain text, for example, if the slides don't have text\nplaceholders.\nSee the attached sample. Is it what you were looking for?\n\nI ran hslf.dev.SLWTListing over a set of ppts and what I saw confirms\nmy suppositions about the order of slides.\nSo I suggest to commit this fix. \n\nTo tell the truth I don't like how current SlideSHow.buildSlidesAndNotes is\norganized. \nMany things are related to each other: getting slides in the correct order,\nadding a new slide, saving ppt\nand current code looks a bit clumsy to do all that. It works fine but\nit is hard to support. In future we are going to deal with master\nslides, reorder slides, do lots of other tricks and this code is a good\ncandidate to be refactored.\n\nBelow I will try to summarize what I know about SLWT:\n\n(1) The 1st SLWT contains one or more SlidePersistAtoms.\nI don't know if it can hold other records, so far I didn't see such ppt.\nEach SlidePersistAtom refers to either a org.apache.poi.hslf.record.MainMaster\n(not exists yet)\n or to a org.apache.poi.hslf.record.Slide. \norg.apache.poi.hslf.record.MainMaster describes slide master,\norg.apache.poi.hslf.record.Slide describes title master.\n\n SlidePersistAtom.slideId is always negative in the 1st SLWT.\n\n Example in XML notation:\n\n <SlideListWithText>\n   <SlidePersistAtom>\n     <psrReference>1193</psrReference>  // either MainMaster or Slide\n     <slideId>-2147483632</slideId>     // always negative\n   </SlidePersistAtom>\n   <SlidePersistAtom>\n     <psrReference>1194</psrReference> \n     <slideId>-2147483631</slideId> \n     <Reserved>0</Reserved> \n   </SlidePersistAtom>\n </SlideListWithText>\n\n\n(2) The 2nd SLWT contains one or more SlidePersistAtoms followed by atoms of\ntext placeholders (if a slide has any). \nIf there is not the 2nd SLWT it means that the presentation does not contain\nslides, i.e. it is empty. \n\nThe order of slides is defined by the order of SPA in the second SLWT.\n\n Example in XML notation:\n\n <SlideListWithText>\n\n   //the first slide\n   <SlidePersistAtom> //there must be one SPA per each slide\n     <psrReference>993</psrReference> // always  org.apache.poi.hslf.record.Slide\n     <slideId>477</slideId> // slideId is positive for slides\n     <numberTexts>1</numberTexts> //SPA knows about the number of subsequent texts\n    </SlidePersistAtom>\n        \n   //below follow the atoms of text placeholders\n   <TextHeaderAtom type=\"0\"/> \n   <TextBytesAtom>Text in a Title Placeholder</TextBytesAtom> \n   <StyleTextPropAtom/> //optional\n\n   //the second slide\n   <SlidePersistAtom>\n     <psrReference>1191</psrReference> \n     <slideId>533</slideId> \n   </SlidePersistAtom>\n\n\n </SlideListWithText>\n\nNote, the actual number of slides is calculated as DocumentAtom.firstSlideNum + idx\nwhere idx is the 0-based index of the SPA. You can play with this setting in the\nPageSetup dialog.\n\n(3) The 3rd SLWT contains one or more SlidePersistAtoms wich refer to\norg.apache.poi.hslf.record.Notes.\nIf the 3rd SLWT is missing it means that the ppt does not contain notes.\n\n Example in XML notation:\n\n <SlideListWithText>\n   <SlidePersistAtom>\n     <psrReference>994</psrReference>  // always  org.apache.poi.hslf.record.Notes\n     <slideId>316</slideId>\n   </SlidePersistAtom>\n   <SlidePersistAtom>\n     <psrReference>995</psrReference>\n     <slideId>317</slideId>\n   </SlidePersistAtom>\n </SlideListWithText>\n\nRegards, Yegor\n", "id": 90298, "time": "2006-06-16T11:12:36Z", "creator": "yegor@dinom.ru", "creation_time": "2006-06-16T11:12:36Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "OK, based on your discoveries, I've gone ahead and changed how we add new\nslides, and how we build the slides+notes\n\nHopefully, I've correctly implemented what you discovered :)", "id": 90657, "time": "2006-06-27T18:16:53Z", "bug_id": 39547, "creation_time": "2006-06-27T18:16:53Z", "is_private": false}, {"count": 14, "tags": [], "text": "very good. \n\nI'm going to add Slide.getTitle() with will return title for a slide. With this\nmethod it will be much easier to write test cases to control the order of slides. \n\nIf PMC doesn't create my account till weekend I will preepare the patch.\n\nYegor", "is_private": false, "bug_id": 39547, "id": 90719, "time": "2006-06-28T12:30:46Z", "creator": "yegor@dinom.ru", "creation_time": "2006-06-28T12:30:46Z", "attachment_id": null}, {"count": 15, "tags": [], "text": "(In reply to comment #14)\n> I'm going to add Slide.getTitle() with will return title for a slide. With this\n> method it will be much easier to write test cases to control the order of slides. \n\nSounds good. We should check the type from the TextHeaderAtom, so we can be sure\nwe get the right thing (even if the the first text run isn't the header, for\nsome reason)\n\nI already have a slide ordering test, but your idea sounds like a good addition :)", "is_private": false, "bug_id": 39547, "id": 90721, "time": "2006-06-28T13:07:22Z", "creator": "apache@gagravarr.org", "creation_time": "2006-06-28T13:07:22Z", "attachment_id": null}]
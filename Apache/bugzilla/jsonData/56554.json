[{"count": 0, "tags": [], "bug_id": 56554, "text": "From documentation we know that engine tries to compile script in JSR223 if compilation cache key is set. But why do we need take care about its uniqueness? Why can't JMeter automatically generate random string for this field (or, for example, hash from Script Text)?\n\nMy proposal is:\n1. Remove Compilation Cache Key field.\n2. Add Compile flag, and make it available only if choosen Scripting Engine implement Compilable interface.\n3. In case Compilable flag is set, generate cache key automatically.", "id": 175386, "time": "2014-05-22T12:20:17Z", "creator": "greatvovan@gmail.com", "creation_time": "2014-05-22T12:20:17Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 56554, "attachment_id": null, "text": "PR https://github.com/apache/jmeter/pull/67\n\nThe script cache key is now automatically generated\n\nThe md5 of the script content is used.\nThe previous cacheKey property is still there for compatibility but can\nnot be modified or viewed in the gui.\nNote that with this change, a Compilable script will always be cached,\nit was not the case with the previous version if the user set the\ncacheKey property to an empty value.\nDocumentation was not updated.", "id": 187462, "time": "2016-01-07T08:55:48Z", "creator": "benoit.wiart@gmail.com", "creation_time": "2016-01-07T08:55:48Z", "is_private": false}, {"id": 187465, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "count": 2, "text": "(In reply to benoit.wiart from comment #1)\n> PR https://github.com/apache/jmeter/pull/67\n> \n> The script cache key is now automatically generated\n\nThe code caches the hash of the script.\nHowever the script is not guaranteed constant, as there may be variable references in it. And for files, the file may change.\n \n> The md5 of the script content is used.\n> The previous cacheKey property is still there for compatibility but can\n> not be modified or viewed in the gui.\n> Note that with this change, a Compilable script will always be cached,\n> it was not the case with the previous version if the user set the\n> cacheKey property to an empty value.\n\nI don't agree with this change, better to use a compile flag as per the original bug description.\n\n> Documentation was not updated.", "time": "2016-01-07T11:13:18Z", "bug_id": 56554, "creation_time": "2016-01-07T11:13:18Z", "is_private": false}, {"count": 3, "tags": [], "creator": "benoit.wiart@gmail.com", "attachment_id": null, "is_private": false, "id": 187507, "time": "2016-01-08T17:00:26Z", "bug_id": 56554, "creation_time": "2016-01-08T17:00:26Z", "text": "Hello Sebb,\n\nI don't understand your remarks\n\n\n>>And for files, the file may change.\nHow my patch change the current behaviour ?\nthe file script does not use the cache key in gui.\nIn jmeter 2.13 for file script the cache key is the the file path + language + last modification date.\n\nNote that in jmeter 2.13 :\n- there is no variable replacement in the script file\n- the script files are always cached\n\n\n>>I don't agree with this change\nWhich one ?\nthe key automatically generated OR the Compilable script always cached"}, {"count": 4, "tags": [], "bug_id": 56554, "is_private": false, "text": "(In reply to benoit.wiart from comment #3)\n> Hello Sebb,\n> \n> I don't understand your remarks\n> \n\nWhich remarks?\n \n> >>And for files, the file may change.\n> How my patch change the current behaviour ?\n> the file script does not use the cache key in gui.\n> In jmeter 2.13 for file script the cache key is the the file path + language\n> + last modification date.\n\nOK, then it's not an issue for files.\n \n> Note that in jmeter 2.13 :\n> - there is no variable replacement in the script file\n\nHowever GUI script boxes may have variables so the hash must be calculated each time, rather than cached in an instance variable.\n\n> - the script files are always cached\n> \n> \n> >>I don't agree with this change\n> Which one ?\n> the key automatically generated OR the Compilable script always cached\n\n\"Compilable script always cached\".\n\nThis is a behavioural change.\n\nIt would be better to replace the cache key field with a checkbox.\nIf the variable was set in the test plan, then select the checkbox.\n\nRather than create a new property, the code can treat empty/missing value as false and anything else as true. This will mean JMX files won't change contents unnecessarily.", "id": 187511, "time": "2016-01-08T17:36:25Z", "creator": "sebb@apache.org", "creation_time": "2016-01-08T17:36:25Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 56554, "attachment_id": null, "text": "(In reply to Sebb from comment #4)\n> (In reply to benoit.wiart from comment #3)\n...\n> > >>I don't agree with this change\n> > Which one ?\n> > the key automatically generated OR the Compilable script always cached\n> \n> \"Compilable script always cached\".\n> \n> This is a behavioural change.\n\nPlus there might be implementations, where one does not want the script to be cached/compiled.", "id": 187519, "time": "2016-01-09T18:56:13Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-01-09T18:56:13Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 56554, "attachment_id": null, "text": "@Felix\n\nIn jmeter 2.13, if the script engine support Compilable then the script will always be compiled.\nPlus the logic is not the same for the scripts configured from file as they will be always cached (no need to set a cachekey in the gui)\n\nI agree that we should maintain a backward compatibility for script with variables, but, in a future version, variables should not be permitted in the script : you should use the bindings and / or the script parameters.\n\nThe current code (cache key) is needed for the performance but it's really error prone :\n- it does not work the same way for script and script file\n- if you copy paste a jsr element and you forgot to change the cache key it will execute the script you have copied\n- it does not give the best performance out-of-the-box as users can forgot to set the cache key", "id": 187585, "time": "2016-01-12T23:21:52Z", "creator": "benoit.wiart@gmail.com", "creation_time": "2016-01-12T23:21:52Z", "is_private": false}, {"id": 187588, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "count": 7, "text": "(In reply to benoit.wiart from comment #6)\n> @Felix\n> \n> In jmeter 2.13, if the script engine support Compilable then the script will\n> always be compiled.\n\nHowever caching is a separate issue.\n\n> Plus the logic is not the same for the scripts configured from file as they\n> will be always cached (no need to set a cachekey in the gui)\n\n> I agree that we should maintain a backward compatibility for script with\n> variables, but, in a future version, variables should not be permitted in\n> the script : you should use the bindings and / or the script parameters.\n\nDisagree - there's absolutely no reason to disallow script variables.\n\nEven though bindings/parameters are more efficient, we should not disable the behaviour, not least because it will break some test plans.\n \n> The current code (cache key) is needed for the performance but it's really\n> error prone :\n> - it does not work the same way for script and script file\n> - if you copy paste a jsr element and you forgot to change the cache key it\n> will execute the script you have copied\n> - it does not give the best performance out-of-the-box as users can forgot\n> to set the cache key\n\nHowever for the careful user it does give full control over caching.\n\nIndeed maybe we should allow the user to diable script file caching if they wish.", "time": "2016-01-13T00:46:04Z", "bug_id": 56554, "creation_time": "2016-01-13T00:46:04Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 56554, "is_private": false, "text": "(In reply to benoit.wiart from comment #6)\n> The current code (cache key) is needed for the performance but it's really\n> error prone :\n> - it does not work the same way for script and script file\n> - if you copy paste a jsr element and you forgot to change the cache key it\n> will execute the script you have copied\n> - it does not give the best performance out-of-the-box as users can forgot\n> to set the cache key\n\nCompletely agree. #2 is especially poor.\n\n> we should maintain a backward compatibility for script with\n> variables, but, in a future version, variables should not be permitted in\n> the script : you should use the bindings and / or the script parameters.\n\nThis is questonable, no obvious reason to disallow them. But also there is no need for user to manage cache keys. The only thing important for user is caching itself (thus the possible option is \"Cache\" checkbox). It should be clarified precisely in documentation that if caching is chosen (wich should be available only if scripting engine is able to do this) then once substituted variables won't ever be changed.", "id": 187600, "time": "2016-01-13T09:07:15Z", "creator": "greatvovan@gmail.com", "creation_time": "2016-01-13T09:07:15Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "greatvovan@gmail.com", "attachment_id": null, "text": "(In reply to Sebb from comment #7)\n> However for the careful user it does give full control over caching.\n\nCould you please provide a real use-case when user really gains any real profit from managing cache keys?\n\n> Indeed maybe we should allow the user to diable script file caching if they\n> wish.\n\nWhat could be reason for this \"wish\"? I can imagine only on-the-fly code generation to file but for this case Script Text field is enough.", "id": 187605, "time": "2016-01-13T09:16:36Z", "bug_id": 56554, "creation_time": "2016-01-13T09:16:36Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 56554, "attachment_id": null, "text": "(In reply to Vladimir Ryabtsev from comment #8)\n> (In reply to benoit.wiart from comment #6)\n... \n> > we should maintain a backward compatibility for script with\n> > variables, but, in a future version, variables should not be permitted in\n> > the script : you should use the bindings and / or the script parameters.\n> \n> This is questonable, no obvious reason to disallow them. But also there is\n> no need for user to manage cache keys. The only thing important for user is\n> caching itself (thus the possible option is \"Cache\" checkbox). \n\nAgreed.\n\n> It should be\n> clarified precisely in documentation that if caching is chosen (wich should\n> be available only if scripting engine is able to do this) then once\n> substituted variables won't ever be changed.\n\nThe test element code does not see the raw script at runtime; it only sees the text after any variable references have been replaced. Variable replacement is managed by core JMeter code.\n\nHowever if the variables are frequently changed, the cache may start to fill up with cache entries that may never be re-used. This is inefficient, so the user should be warned not to cache such scripts. However I don't think we should prevent the user from using variable references.", "id": 187607, "time": "2016-01-13T10:29:20Z", "creator": "sebb@apache.org", "creation_time": "2016-01-13T10:29:20Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 56554, "is_private": false, "text": "(In reply to Vladimir Ryabtsev from comment #9)\n> (In reply to Sebb from comment #7)\n> > However for the careful user it does give full control over caching.\n> \n> Could you please provide a real use-case when user really gains any real\n> profit from managing cache keys?\n\nThere is no need to allow the user to manage cache keys.\nHowever we should allow users to control whether or not the script is cached.\n\n> > Indeed maybe we should allow the user to diable script file caching if they\n> > wish.\n> \n> What could be reason for this \"wish\"? I can imagine only on-the-fly code\n> generation to file but for this case Script Text field is enough.\n\nConsistency with the GUI case.\nAlso for testing how much effect caching has on performance.\nThere may be apps where it is tricky to provide caching; this would help show whether or not adding caching would help.\nThere are possibly other usage cases.\n\nOn the fly code generation is catered for by checking the file mod time.", "id": 187608, "time": "2016-01-13T10:35:17Z", "creator": "sebb@apache.org", "creation_time": "2016-01-13T10:35:17Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 56554, "text": "(In reply to Sebb from comment #10)\n> if the variables are frequently changed, the cache may start to fill\n> up with cache entries that may never be re-used. This is inefficient, so the\n> user should be warned not to cache such scripts. However I don't think we\n> should prevent the user from using variable references.\n\n+1\n\"Cache\" checkbox and strong advice (directly in GUI) not to use caching if Script Text gets lot of unique values of variables.\n\nConcerning backward compatibility. Trivaial solution is:\n- cache key is empty -> checkbox is cleared,\n- cache key is set -> checkbox is checked.\nBut in the first case we may fall into issue mentioned by you: if variables are getting new values each time cache is growing. So, may be like this?\n- cache key is empty -> checkbox is cleared,\n- cache key is set -> checkbox is in intermediate state (in this case test element works same way as in v. 2.13),\n- when checkbox gets switched from intermediate state to any explicit state the cache key is removed from jmx.", "id": 187613, "time": "2016-01-13T13:34:36Z", "creator": "greatvovan@gmail.com", "creation_time": "2016-01-13T13:34:36Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "felix.schumacher@internetallee.de", "attachment_id": null, "is_private": false, "id": 187633, "time": "2016-01-13T21:07:00Z", "bug_id": 56554, "creation_time": "2016-01-13T21:07:00Z", "text": "(In reply to benoit.wiart from comment #6)\n> @Felix\n> \n> In jmeter 2.13, if the script engine support Compilable then the script will\n> always be compiled.\n> Plus the logic is not the same for the scripts configured from file as they\n> will be always cached (no need to set a cachekey in the gui)\n\nThis is only true, if the source of the script is a file. If it is not a file, than it will only get compiled, if a cache key is given.\n\n> \n> I agree that we should maintain a backward compatibility for script with\n> variables, but, in a future version, variables should not be permitted in\n> the script : you should use the bindings and / or the script parameters.\n> \n> The current code (cache key) is needed for the performance but it's really\n> error prone :\n> - it does not work the same way for script and script file\n> - if you copy paste a jsr element and you forgot to change the cache key it\n> will execute the script you have copied\n> - it does not give the best performance out-of-the-box as users can forgot\n> to set the cache key\n\nI think it is nice, if we could replace the manual key with something automated, but I fear, that there are use cases, where disabling caching for individual scripts is needed."}, {"count": 14, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "is_private": false, "id": 187634, "time": "2016-01-13T21:35:51Z", "bug_id": 56554, "creation_time": "2016-01-13T21:35:51Z", "text": "(In reply to Felix Schumacher from comment #13)\n> (In reply to benoit.wiart from comment #6)\n> > @Felix\n> > \n> > In jmeter 2.13, if the script engine support Compilable then the script will\n> > always be compiled.\n> > Plus the logic is not the same for the scripts configured from file as they\n> > will be always cached (no need to set a cachekey in the gui)\n> \n> This is only true, if the source of the script is a file. If it is not a\n> file, than it will only get compiled, if a cache key is given.\n> \n> > \n> > I agree that we should maintain a backward compatibility for script with\n> > variables, but, in a future version, variables should not be permitted in\n> > the script : you should use the bindings and / or the script parameters.\n> > \n> > The current code (cache key) is needed for the performance but it's really\n> > error prone :\n> > - it does not work the same way for script and script file\n> > - if you copy paste a jsr element and you forgot to change the cache key it\n> > will execute the script you have copied\n> > - it does not give the best performance out-of-the-box as users can forgot\n> > to set the cache key\n> \n> I think it is nice, if we could replace the manual key with something\n> automated, but I fear, that there are use cases, where disabling caching for\n> individual scripts is needed.\n\nIf we have the checkbox, don't we answer this use case ?\nI think  Vladimir Ryabtsev  solution looks ok no ? Modulo the fact that checkbox must be disabled if language is not compilable\n\nI rather follow Benoit on the variables not being permitted, for example with Groovy it is broken as this is a Groovy syntax (http://groovy-lang.org/syntax.html), and the good way to do this for any language, is to pass the variable in parameters, no ?\nWe can keep it but as Vladimir proposes add a warning.\n\n\nCaching IS the correct way for languages providing Compilation, in some dev discussion, I gave some numbers on throughput impact for Groovy for example with or without Compilation."}, {"count": 15, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "is_private": false, "id": 187648, "time": "2016-01-14T01:45:45Z", "bug_id": 56554, "creation_time": "2016-01-14T01:45:45Z", "text": "(In reply to Philippe Mouawad from comment #14)\n> \n> I rather follow Benoit on the variables not being permitted, for example\n> with Groovy it is broken as this is a Groovy syntax\n> (http://groovy-lang.org/syntax.html), and the good way to do this for any\n> language, is to pass the variable in parameters, no ?\n\nThe fact that Groovy uses the same syntax is a nuisance, but is no reason to ban variables for every script language.\n\n> We can keep it but as Vladimir proposes add a warning.\n\nWe MUST keep it because dropping it would break test plans that rely on it.\n\nThe simplest solution would be to ban Groovy GUI scripts and only allow Groovy files.\n\nRemember that variable processing is not under the control of the test elements; it is done before the test element sees the script."}, {"id": 187650, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "count": 16, "text": "(In reply to Sebb from comment #15)\n> (In reply to Philippe Mouawad from comment #14)\n> > \n> > I rather follow Benoit on the variables not being permitted, for example\n> > with Groovy it is broken as this is a Groovy syntax\n> > (http://groovy-lang.org/syntax.html), and the good way to do this for any\n> > language, is to pass the variable in parameters, no ?\n> \n> The fact that Groovy uses the same syntax is a nuisance, but is no reason to\n> ban variables for every script language.\nok\n> \n> > We can keep it but as Vladimir proposes add a warning.\n> \n> We MUST keep it because dropping it would break test plans that rely on it.\n> \n> The simplest solution would be to ban Groovy GUI scripts and only allow\n> Groovy files.\n> \n> Remember that variable processing is not under the control of the test\n> elements; it is done before the test element sees the script.\n\nI suggest in this case that we keep allowing it but just add a warning in the gui.\n\nWe can still work on the checkbox as per Vladimir proposal\n\nBanning groovy script from being embedded does not seem to be a good idea:\n- embedding is nice because you have the syntax highligh, can modify it in gui and don't have to handle its copy on servers when running in non gui and particularly in distributed testing. And it would surely be an backward incompatibility that in my case breaks nearly 100% of my plans.", "time": "2016-01-14T06:41:36Z", "bug_id": 56554, "creation_time": "2016-01-14T06:41:36Z", "is_private": false}, {"count": 17, "tags": [], "creator": "benoit.wiart@gmail.com", "attachment_id": null, "is_private": false, "id": 187694, "time": "2016-01-14T23:21:23Z", "bug_id": 56554, "creation_time": "2016-01-14T23:21:23Z", "text": ">Concerning backward compatibility. Trivaial solution is:\n>- cache key is empty -> checkbox is cleared,\n>- cache key is set -> checkbox is checked.\nok and keep the initial cache key (if set) when saving that will make the jmx file usable on a previous version of jmeter.\n\nif the checkbox is checked then the real cache key will be computed from the MD5 of the script (inline gui).\n\nthe use of the cache key is not the best solution if the script use variables as the cache will grow (that's an LRU cache so it won't break the world) but it will work.\n\nIn jmeter 2.13, it's possible to set a cache key for a script with variables and it will fail silently as a wrong version of the script is executed\n\nDid I mention that jmeter variables in script are bad ?"}, {"count": 18, "tags": [], "bug_id": 56554, "text": "PR https://github.com/apache/jmeter/pull/83\n\nRestore peace and justice to the universe.", "id": 187812, "time": "2016-01-18T21:17:03Z", "creator": "benoit.wiart@gmail.com", "creation_time": "2016-01-18T21:17:03Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Date: Mon Jan 25 20:44:55 2016\nNew Revision: 1726684\n\nURL: http://svn.apache.org/viewvc?rev=1726684&view=rev\nLog:\nBug 56554 : the script cache key is now automatically generated\n#resolve #83\nBugzilla Id: 56554\n\nModified:\n    jmeter/trunk/src/core/org/apache/jmeter/util/JSR223TestElement.java\n    jmeter/trunk/src/core/org/apache/jmeter/util/ScriptingBeanInfoSupport.java\n    jmeter/trunk/xdocs/changes.xml", "id": 187960, "time": "2016-01-25T20:48:14Z", "bug_id": 56554, "creation_time": "2016-01-25T20:48:14Z", "is_private": false}, {"count": 20, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Author: pmouawad\nDate: Sun Feb 28 13:20:08 2016\nNew Revision: 1732732\n\nURL: http://svn.apache.org/viewvc?rev=1732732&view=rev\nLog:\nBug 56554 - JSR223 Test Element : Generate compilation cache key automatically\nUpdate documentation\nRemove also mention of old versions\nBugzilla Id: 56554\n\nModified:\n    jmeter/trunk/xdocs/usermanual/component_reference.xml", "id": 188921, "time": "2016-02-28T13:20:40Z", "bug_id": 56554, "creation_time": "2016-02-28T13:20:40Z", "is_private": false}, {"count": 21, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "is_private": false, "id": 189754, "time": "2016-03-28T11:42:34Z", "bug_id": 56554, "creation_time": "2016-03-28T11:42:34Z", "text": "Author: pmouawad\nDate: Mon Mar 28 11:35:16 2016\nNew Revision: 1736874\n\nURL: http://svn.apache.org/viewvc?rev=1736874&view=rev\nLog:\nBug 56554 JSR223 Test Element : Generate compilation cache key automatically\nBugzilla Id: 56554\n\nModified:\n    jmeter/trunk/src/components/org/apache/jmeter/assertions/JSR223AssertionResources.properties\n    jmeter/trunk/src/components/org/apache/jmeter/assertions/JSR223AssertionResources_fr.properties\n\nAuthor: pmouawad\nDate: Mon Mar 28 11:42:17 2016\nNew Revision: 1736875\n\nURL: http://svn.apache.org/viewvc?rev=1736875&view=rev\nLog:\nBug 56554 JSR223 Test Element : Generate compilation cache key automatically\nChange labels and description\nBugzilla Id: 56554\n\nModified:\n    jmeter/trunk/src/components/org/apache/jmeter/extractor/JSR223PostProcessorResources.properties\n    jmeter/trunk/src/components/org/apache/jmeter/extractor/JSR223PostProcessorResources_fr.properties\n    jmeter/trunk/src/components/org/apache/jmeter/modifiers/JSR223PreProcessorResources.properties\n    jmeter/trunk/src/components/org/apache/jmeter/modifiers/JSR223PreProcessorResources_fr.properties\n    jmeter/trunk/src/components/org/apache/jmeter/timers/JSR223TimerResources.properties\n    jmeter/trunk/src/components/org/apache/jmeter/timers/JSR223TimerResources_fr.properties\n    jmeter/trunk/src/components/org/apache/jmeter/visualizers/JSR223ListenerResources.properties\n    jmeter/trunk/src/components/org/apache/jmeter/visualizers/JSR223ListenerResources_fr.properties\n    jmeter/trunk/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223SamplerResources.properties\n    jmeter/trunk/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223SamplerResources_fr.properties"}, {"count": 22, "tags": [], "bug_id": 56554, "text": "Author: pmouawad\nDate: Thu Apr 21 21:12:07 2016\nNew Revision: 1740412\n\nURL: http://svn.apache.org/viewvc?rev=1740412&view=rev\nLog:\nBug 56554 JSR223 Test Element : Generate compilation cache key automatically. Contributed by Benoit Wiart (benoit dot wiart at gmail.com)\nfix documentation issue\nBugzilla Id: 56554\n\nModified:\n    jmeter/trunk/xdocs/usermanual/component_reference.xml", "id": 190474, "time": "2016-04-21T21:13:10Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2016-04-21T21:13:10Z", "is_private": false, "attachment_id": null}]
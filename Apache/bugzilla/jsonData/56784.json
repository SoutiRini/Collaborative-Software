[{"count": 0, "tags": [], "bug_id": 56784, "attachment_id": null, "is_private": false, "id": 176737, "time": "2014-07-29T07:28:44Z", "creator": "diogogsousa@gmail.com", "creation_time": "2014-07-29T07:28:44Z", "text": "I'm developing a tool for atomicity violation detection and I think it have found a few atomicity violations in catalina.  These are issues are due to non-atomic compositions of calls to a certain object.\n\nIn org.apache.catalina.core.ContainerBase, method getChildren(), lines 1526-1534:\n\n>     public ObjectName[] getChildren() {\n> 1526:   ObjectName result[]=new ObjectName[children.size()];\n>         Iterator it=children.values().iterator();\n>         int i=0;\n>         while( it.hasNext() ) {\n>             Object next=it.next();\n>             if( next instanceof ContainerBase ) {\n> 1531:            result[i++]=((ContainerBase)next).getJmxName();\n>             }\n>         }\n>         return result;\n>     }\n\nHere \"result\" is alloced with size \"children.size()\".  A concurrent thread may add more objects to \"children\" possibly causing an invalid access to array \"result\" in line 1531.\n\n__\n\nIn org.apache.catalina.core.StandardEngine, method start(), lines 438-439:\n\n>     public void start() throws LifecycleException {\n>         ...\n> 438:            if( mserver.isRegistered(realmName ) ) {\n> 439:                mserver.invoke(realmName, \"init\", \n>                             new Object[] {},\n>                             new String[] {}\n>                     );            \n>                 }\n>         ...\n>     }\n\nCan the \"init\" method be unregistered between lines 438 and 439?\n\n__\n\nIn org.apache.catalina.core.StandardContext, method addParameter(), lines 2659-2672:\n\n>     public void addParameter(String name, String value) {\n>         ...\n> 2664:   if (parameters.get(name) != null)\n>             throw new IllegalArgumentException\n>                 (sm.getString(\"standardContext.parameter.duplicate\", name));\n> \n>         // Add this parameter to our defined set\n>         synchronized (parameters) {\n> 2670:       parameters.put(name, value);\n>         }\n>         fireContainerEvent(\"addParameter\", name);\n>     }\n\nA concurrent thread may add the same parameter between the execution of line 2664 and 2670.  In that case both threads will think they succeeded, when the expected behavior is for one of them to receive the exception thrown in line 2665.\n\nThank you"}, {"count": 1, "tags": [], "bug_id": 56784, "attachment_id": null, "is_private": false, "id": 176926, "time": "2014-08-05T15:04:23Z", "creator": "markt@apache.org", "creation_time": "2014-08-05T15:04:23Z", "text": "(In reply to diogogsousa from comment #0)\n> In org.apache.catalina.core.ContainerBase, method getChildren(), lines\n> 1526-1534:\n\nTechnically this is valid although no-one has ever reported an issue. It is likely that the error would only be seen by JMX clients and a refresh would fix it. I'll get this fixed in 8.0.x for 8.0.11 onwards.\n\n> In org.apache.catalina.core.StandardEngine, method start(), lines 438-439:\n\nThis only affects 6.0.x and I don't see any way for this to occur in normal (or even fairly abnormal) usage. It is probably possible to trigger this if you try really hard but I don't see a need for changes here.\n\n> In org.apache.catalina.core.StandardContext, method addParameter(), lines\n> 2659-2672:\n\nAgain this one is valid but no-one has reported an issue. I wouldn't expect to see an issue in normal usage and concurrent threads configuring a Context would be pretty unusual. A ConcurrentHashMap looks like it will be cleaner here so I'll get that fixed in 8.0.x for 8.0.11 as well.\n\nIn terms of back-ports, given that we haven't had reports of any issues, I'm leaning towards only fixing these in 8.0.x and not back-porting the changes to earlier versions."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 176927, "time": "2014-08-05T15:15:46Z", "bug_id": 56784, "creation_time": "2014-08-05T15:15:46Z", "is_private": false, "text": "Fixes applied to 8.0.x as discussed for 8.0.11 onwards.\n\nI do not plan on back-porting them."}]
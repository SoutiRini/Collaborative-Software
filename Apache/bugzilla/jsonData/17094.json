[{"count": 0, "tags": [], "creator": "yying21@hotmail.com", "attachment_id": null, "id": 31325, "time": "2003-02-15T02:53:49Z", "bug_id": 17094, "creation_time": "2003-02-15T02:53:49Z", "is_private": false, "text": "While using tomcat 3.3.1 for our company, I found a multi-threading problem in \nthe session management code.\n\nHere is HttpSessionFacade.java invalidate() method:\n\n1)  public void invalidate() {\n2)\tcheckValid();\n3) \trealSession.getTimeStamp().setValid( false );\n4)\t// remove all attributes\n5)\tif( dL > 0 ) d(\"Invalidate \" + realSession.getId());\n6)\trealSession.setState(ServerSession.STATE_EXPIRED);\n7)\trealSession.recycle();\n8)    }\n\nLine 6 invokes a list of call back functions.  One of them put the session \nobject at the end of the recycled buffer, which contains a list of old session \nobjects that can be used when the next time a new session is created.  \n\nLine 7 clears and recycles attributes inside the session object.  \n\nHere is a scenerio where tomcat will have a problem.\n\nThread1 invalidates session A\n\nThread2 starts a new session B\n\nThread3 continues using session B\n\n--\nAt t1, Thread1 runs upto Line 6, the session object gets put into the recycled \nbuffer.\n\nAt t2, Thread2 initiated a new request that is not associated with any session, \nso the session management code creates a new session object.  The first thing \ntomcat does is to retrieve a session object from the end of the recycled \nbuffer.  Now Thread2 has the same object that Thread1 is using, but with new \nsession Id.  When a session gets created, a list of call back functions get \ncalled and a new session id generated.\n\nAt t3, Thread1 continues to run, when it runs to line 7, it invalids TimeStamp \nobject and id object inside the session object.  The implementation for \nServerSession's isValid() method is the following\n\npublic boolean isValid() {\n\treturn getTimeStamp().isValid();\n    }\n\nAt t4, Thread3 starts a request, with the same session id the same as thread \n1.  This session id is passed in by the cookie.  This session should be valid.  \nBut the session management code thinks the session object is invalid since the \nTimeStamp object inside the session is invalidated by Thread1.\n\nBasically, tomcat code is recyling the session object too early, before the \ncode is completely done with the session object.\n\nI also looked at Tomcat 4.1 code, it seems Tomcat4.1 addressed this problem \nalready.\n\nYaJie"}, {"count": 1, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of 15894 ***", "attachment_id": null, "bug_id": 17094, "id": 31326, "time": "2003-02-15T03:48:34Z", "creator": "william.barker@wilshire.com", "creation_time": "2003-02-15T03:48:34Z", "is_private": false}]
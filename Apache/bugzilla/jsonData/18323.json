[{"count": 0, "tags": [], "text": "When MethodGen read LDC_W whose index is less than 256 and dumps it, the size of\nits operand becomes incorrect.\n\nLDC_W's setIndex method can change both the opcode and the length.\nBut after the invocation initFromFile method change the opcode OR the length.\nAnd its dump method determines the operand's size by the length.\nAs a result that can make a mismatch b/w an opcode and an operand.\n\nLDC_W.java 1.1.1.1 and 1.3 has this problem.\n\nA scenario(in case of LDC_W.java 1.3):\n1. Suppose a LDC_W whose index is less than 256\n2. initFromFile method sets the opcode to LDC_W and the length to 2.\n3. dump method writes a LDC_W but it writes a byte as the operand.\n\nI think that 1.2 has no problem.\nAnother solution is as follows.\n\n--- LDC_W.java.1.1.1.1  Sat Dec 15 21:40:41 2001\n+++ LDC_W.java  Wed Mar 26 00:36:01 2003\n@@ -82,6 +82,6 @@\n        throws IOException\n   {\n     setIndex(bytes.readUnsignedShort());\n-    length = 3;\n+    //length = 3;\n   }\n }", "is_private": false, "id": 33767, "creator": "nova@to.email.ne.jp", "time": "2003-03-25T15:43:24Z", "bug_id": 18323, "creation_time": "2003-03-25T15:43:24Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 6777\npatch against 1.4 to fix the length issue", "attachment_id": 6777, "id": 38762, "creation_time": "2003-06-12T11:39:07Z", "time": "2003-06-12T11:39:07Z", "creator": "xcheffo@netscape.net", "bug_id": 18323, "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 18323, "text": "One example is the JDK 1.4 compiled java.math.BigInteger.  If you run:\n  `javap -c java.math.BigInteger | grep ldc_w`\nyou will find several examples of LDC_W operands with sub-256 indices:\n   401: ldc_w   #268; //int 2147483647\n   1835:        ldc_w   #435; //String 0000000[..]\n   2691:        ldc_w   #259; //int 1162261467\n   2702:        ldc_w   #260; //int 1220703125\n   2709:        ldc_w   #247; //int 362797056\n   2716:        ldc_w   #267; //int 1977326743\n   2729:        ldc_w   #248; //int 387420489\n   2736:        ldc_w   #258; //int 1000000000\n    ...\nWithout the above patch, a BCEL lifted and regenerated BigInteger will generate\nthe following broken classfile:\n   434: ldc_w   #268; //int 2147483647\n   1868:        ldc_w   #435; //String 0000000[..]\n   2724:        ldc_w   #259; //int 1162261467\n   2735:        ldc_w   #260; //int 1220703125\n   2742:        ldc_w   #63311; //BOGUS_TAG:100 <Incorrect CP index:63311>\n   2748:        ldc_w   #267; //int 1977326743\n   2761:        ldc_w   #63567; //BOGUS_TAG:100 <Incorrect CP index:63567>\n   2767:        ldc_w   #258; //int 1000000000\n    ...\nNote that 63311 = 247*256 + 79, and the instruction following the ldc_w is an\niastore (opcode 79).", "id": 57363, "time": "2004-05-13T14:19:24Z", "creator": "twright@bbn.com", "creation_time": "2004-05-13T14:19:24Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "dbrosius@mebigfatguy.com", "attachment_id": null, "text": "Related to 29903 and 29275", "id": 70812, "time": "2005-02-11T04:54:50Z", "bug_id": 18323, "creation_time": "2005-02-11T04:54:50Z", "is_private": false}, {"count": 4, "tags": [], "creator": "dbrosius@mebigfatguy.com", "is_private": false, "text": "The patch to Bug 29275 seems to have addressed this issue, in at least one \nexample. Please repost if the problem still exists.", "id": 71059, "time": "2005-02-16T05:10:40Z", "bug_id": 18323, "creation_time": "2005-02-16T05:10:40Z", "attachment_id": null}]
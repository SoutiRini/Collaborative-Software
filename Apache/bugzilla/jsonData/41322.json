[{"count": 0, "tags": [], "bug_id": 41322, "attachment_id": null, "text": "I'm working on a large project using JBOSS 4.0.4GA (which bundles Tomcat 5.5.17)\nand we've been experiencing intermittent loss of http requests. For example,\noccasionally a click on a submit button sends off a request to the server which\ncompletes successfully but the response is never displayed in the browser. What\nhappens then depends on the browser; Firefox just remains on the original page\nwhile IE shows an error page. This really stuffs up Selenium automated tests,\nand is a user issue too - even in Firefox, as we use javascript to disable the\nsubmit button after first use to prevent double-submits :=(.\n\nThis is reproduceable with Firefox 1.5 , Firefox 2.0 and IE6 on Windows, and\nFirefox 1.5 on Linux, so I'm fairly sure it isn't a browser-side issue. It's\nalso reproduceable within the work environment and in my home system so it's not\nlikely to be a network issue. It also happens with browser and server on same\nmachine.\n\nThe problem appears to also occur for GET requests on things like icons, css,\njavascript referenced from HTML pages. Just clicking the \"search\" button on one\nof the webapp screens repeatedly eventually causes the problem. About every 100\nclicks or so, an icon will not be present, or styles will be missing, or the\njscookmenu menu will display as a table due to the javascript not being loaded.\nHowever the responses to POST requests are the ones more frequently hit.\n\nI've tried to isolate a smaller test case but haven't yet succeeded, and our\nwhole app cannot be posted for debugging, sorry.\n\nI've used Wireshark (aka Ethereal) to log network packets, and it looks to me\nlike Tomcat is occasionally failing to send a chunk-length field when returning\na chunked response, causing the browser to drop the connection and ignore the\nresponse.\n\nI *suspect* that the \"intermittent\" part is related to the maxKeepAliveRequests\nproperty, as:\n(a) the problem occurs more frequently when I set maxKeepAliveRequests to a low\nvalue (eg 5).\n(b) the wireshark logs I have always show a \"Connection: close\" header on those\nrequests that also have what I think are bad chunked encoding.\n\n\nI've checked bugzilla and can't find a report that seems related to this. I've\nalso checked the commit history for directory \nhttp://svn.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/coyote/http11\nand cannot see anything relevant since the 5.5.17 release (r394159) so presume\nit isn't fixed in any later release than the one that comes with JBoss 4.0.4GA.\n\nFiles focus-hang-1.pcap and focus-hang-3.pcap show two examples of the problem;\nthese can be loaded in Wireshark/Ethereal to view the logged packets. In these\nlogs the machine running the browser is 10.1.1.8 (Firefox 1.5 on Ubuntu Linux),\nand the machine running JBoss is 10.1.1.3 (Windows XP).\n\nNote that I'm not an expert in raw HTTP protocol, so may have misunderstood\nsomething here; any correction is very welcome.\n\nThe jboss logs on the server show no problems.\n\nHere's a brief rundown for network capture file \"focus-hang-1.pcap\".\n\nFirst, a good response example from this file:\n\npacket 39:\n* start of a \"good\" response. Note, however that header \"Transfer-Encoding:\nchunked\" is emitted twice(?). \n\n  Transfer-encoding: chunked\\r\\n\n  ...\n  Transfer-encoding: chunked\\r\\n\n  \\r\\n\n  2000\\r\\n   (chunk size)\n  (html data starts)\n\npacket 49: See end of packet for next chunk size marker (2000)\npacket 74: towards end, see \"\\r\\n0\\r\\n\", which is a zero-size chunk, ie marks\nthe end of the http response.\n\n\nNow a bad one:\n\nPacket 473: start of an HTTP Post request from the browser\npacket 474: server acks 473\npacket 475: rest of post request\npacket 476: server acks 475\npacket 477: start of (bad) response.\n* Transfer-encoding: chunked is present (but only once)\n* Connection: close is present\n* html data starts without any chunk length field.\n\nAt packet 493, the client starts sending RST packets; I presume because the\nbrowser code has closed the socket after encountering errors processing the\ninput data.\n\n\nFor file focus-hang-3.pcap, the bad response starts at packet 969.\n\nAny comments/workarounds/etc would be very welcome. Even \"yes I've seen this\ntoo\" would be nice; it's a major issue on a pretty large project.", "id": 97792, "time": "2007-01-08T16:05:25Z", "creator": "skitching@apache.org", "creation_time": "2007-01-08T16:05:25Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 41322, "text": "Created attachment 19376\nwireshark/ethereal capture file\n\nnetwork capture file as described in bug body.", "id": 97793, "time": "2007-01-08T16:07:20Z", "creator": "skitching@apache.org", "creation_time": "2007-01-08T16:07:20Z", "is_private": false, "attachment_id": 19376}, {"count": 2, "tags": [], "bug_id": 41322, "attachment_id": 19377, "text": "Created attachment 19377\nwireshark/ethereal capture file", "id": 97794, "time": "2007-01-08T16:07:57Z", "creator": "skitching@apache.org", "creation_time": "2007-01-08T16:07:57Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 41322, "attachment_id": null, "text": "Sorry, correction to SVN url. I checked\nhttp://svn.apache.org/repos/asf/tomcat/connectors/trunk/http11/src/java/org/apache/coyote/http11/\nfor relevant commits (not the tc6.x dir as pasted into original description). I\ndid also look at the tc6.x changes but couldn't see anything obviously relevant..", "id": 97795, "time": "2007-01-08T16:29:29Z", "creator": "skitching@apache.org", "creation_time": "2007-01-08T16:29:29Z", "is_private": false}, {"count": 4, "tags": [], "creator": "skitching@apache.org", "attachment_id": null, "id": 97971, "time": "2007-01-11T15:53:08Z", "bug_id": 41322, "creation_time": "2007-01-11T15:53:08Z", "is_private": false, "text": "Ok, this is our fault and not a bug in Tomcat so I'm closing as invalid.\n\nWe are using Sitemesh but the page being decorated is in another webapp, so we\nhave a custom proxy servlet that uses commons-httpclient to fetch the actual\ntarget page. Our code then copies all headers from this proxied response into\nthe response the user sees. Clearly, not all headers are safe to copy, though:\ntransfer-encoding in particular!\n\nThe nastiest part is that the consequences are intermittent and subtle; as\ndescribed the browser occasionally silently ignores a response from the server -\njust when the proxied response was returned using chunked encoding, but the\nresponse to the browser is not (because it is the last in a keep-alive\nsequence). In this case, the http header indicates chunked, but the\nHttp11Processor class has (correctly) not configured the ChunkedOutputFilter. Ecch.\n\nIt would be nice if class Http11Processor would check for the presence of a\nTransfer-Encoding header added manually by the user, and either switch to using\nthe specified encoding or just log an error. However that does have a (small)\nperformance hit, and very few people are likely to be bitten by this.."}]
[{"count": 0, "tags": [], "bug_id": 29060, "text": "Hi,\n\nin session/ManagerBase.java in method createSession it looks like the\nsynchronized(sessions) block is too small.\n\nYou synchronize in order to be sure, that you use a unique new session id. But\nthis session id is then entered into sessions directly after the synchronized\nblock (call to session.setId). I think, the call to session.setId should be\nmoved to the end of the synchronized block, since setId calls manager.add, which\nputs the session into sessions. See the diff at the end of this report.\n\nThe same holds true for the implementation inside the cluster module (method\ncreateSession in session/DeltaManager.java and in\nsession/SimpleTcpReplicationManager.java).\n\natlas1% diff -c session/ManagerBase.java session/ManagerBase.java_patch\n*** session/ManagerBase.java    Tue May  4 20:25:40 2004\n--- session/ManagerBase.java_patch      Tue May 18 12:12:46 2004\n***************\n*** 692,700 ****\n                      sessionId += '.' + jvmRoute;\n                  }\n              }\n          }\n  \n-         session.setId(sessionId);\n          sessionCounter++;\n  \n          return (session);\n--- 692,700 ----\n                      sessionId += '.' + jvmRoute;\n                  }\n              }\n+             session.setId(sessionId);\n          }\n  \n          sessionCounter++;\n  \n          return (session);", "id": 57599, "attachment_id": null, "creator": "rainer.jung@kippdata.de", "creation_time": "2004-05-18T10:26:45Z", "time": "2004-05-18T10:26:45Z", "is_private": false}, {"count": 1, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "<quote>I think, the call to session.setId should be\nmoved to the end of the synchronized block, since setId calls manager.add, which\nputs the session into sessions.</quote>\n\nDo you have any proof of bad behavior, or is this just speculation ? This sounds\nto me like pure speculation.", "id": 57607, "time": "2004-05-18T12:51:28Z", "bug_id": 29060, "creation_time": "2004-05-18T12:51:28Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "It's not speculation, I just read and understand what's in the code.\n\nThe code synchronizes on the HashMap \"sessions\" when creating a new session. One\nof the reasons is to ensure that a newly generated sessionId is not used\nalready. The code says:\n\n\"// Guarantee uniqueness\"\n\nNow assume thread A generates a new sessionId X, and a parallely running thread\nB creates the same sessionId X after A leaves the synchronized block but before\nA calls setId. Then B will not find this session in the HashMap \"sessions\" and\nuse the same sessionId X as new.\n\nIf you move the call to setId() inside the synchronized block, then the\nsessionId X is written into the HashMap before B is able to access the HashMap,\nso B will find X as already existing sessionId and generate another one.\n\nThe proof is mathematically/logically. \n\nOf course this bug will only show up, if \na) generateSessionId does not create unique sessionIDs\nb) and one thread is thrown off the CPU exactly between the end of the\nsynchronized block and the next line or threads excuting in parallel on\nmulti-CPU systems.\n\nAssumption b) is not under your control, so this might happen often, especially\nunder high load. Assumption a) seems to be true, because in the existing code\nthere is already the comment\n\n\"// Guarantee uniqueness\"\n\nand the author checks every newly generated sessionId for existence.\n\njavadoc says the author is Craig R. McClanahan. Maybe you could pass the\ninformation to him?\n\n", "is_private": false, "id": 57608, "creator": "rainer.jung@kippdata.de", "time": "2004-05-18T13:48:23Z", "bug_id": 29060, "creation_time": "2004-05-18T13:48:23Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 57609, "creation_time": "2004-05-18T14:04:13Z", "time": "2004-05-18T14:04:13Z", "bug_id": 29060, "text": "As I expected, we're talking about the possibility that a virtually perfect\nrandom number generator would generate a duplicate id, during a nanosecond long\ninterval. I'm sure you can find plenty of valid Tomcat issues, but this doesn't\nlook to me like one of them.\n\nIt is actually not necessary to check if a session id exists or not, as it is an\nimpossibility. The only reason the check is there was because of a number of\npeople who were afraid of meteors, or who could find a valid Windows XP CD key\nwithout looking at the back of the CD case. This is why there's a very explicit\ncomment and code (note: there was a bug with duplicate session ids which caused\nsome of this worrying, but it had nothing to do with the session id generator).", "attachment_id": null}]
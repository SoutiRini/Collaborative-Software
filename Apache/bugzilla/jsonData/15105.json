[{"count": 0, "tags": [], "text": "How it should work:\n\nI am using bodytag that calls a pushBody(), then the current body writer\nsould be kept and it should be createa a new one, later when I call the\npopBody() the system should get the previous body (that is, the body\nthat has been kept on the call to pushBody())\n\nWhat it does now:\n\nAll works as expected, but  after I call popBody() the new body writer\nthat has been created on the call to pushBody() writes its contents to\nthe previous body writer (that is, the body that has been kept on the\ncall to pushBody()). I think that the content should not been copied on\nthe other body writer.\n\nIt fails on Tomcat 4.1.12 and it works fine on Tomcat 4.0.X.", "attachment_id": null, "bug_id": 15105, "id": 27459, "time": "2002-12-05T10:46:58Z", "creator": "iblesa@tissat.es", "creation_time": "2002-12-05T10:46:58Z", "is_private": false}, {"count": 1, "tags": [], "creator": "kin-man.chung@sun.com", "text": "pushBody and popBody are usually invoked by the generated codes, and they have\nworked as expected.  Looking at the source in runtime/PageContextImpl.java also\ndoes not support your claim that popBody writes to the previous body.  You'll\nneed to supply an actualy test case.", "id": 27480, "time": "2002-12-05T23:44:25Z", "bug_id": 15105, "creation_time": "2002-12-05T23:44:25Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Lets verify all together the code :D\n\nOn the file PageContentImpl.java we have the two methods\n\n    public BodyContent pushBody() { \n        depth++; \n        if (depth >= outs.length) { \n            BodyContent[] newOuts = new BodyContentImpl[depth + 1]; \n            for (int i = 0; i < outs.length; i++) { \n                newOuts[i] = outs[i]; \n            } \n            newOuts[depth] = new BodyContentImpl(out); \n            outs = newOuts; \n        } \n        out = outs[depth]; \n        return outs[depth]; \n    } \n \n    public JspWriter popBody() { \n        depth--; \n        if (depth >= 0) { \n            out = outs[depth]; \n        } else { \n            out = baseOut; \n        } \n        return out; \n    } \n\nAs we can see on the code if we make two calls to pushBody(), then the array\nouts will have two body outs A and B. If we make a popBody, then depth will be\ndecremented, but the B object is not removed from the outs array, then if I make\nanother pushBody() (this should create a new out object C, this is not done),\nthe outs array will have again two objects, but the second object will not be a\nnew one, it will be the previous B object. Then what will be in the second\nelement will be the new content plus previous content from B object,that is, the\nnew content will be appended.\n\nIs not this the way it should work ? That is, create a new object when we make a\npushBody() OR clear the old object when we make a popBody().", "attachment_id": null, "bug_id": 15105, "id": 27555, "time": "2002-12-09T17:42:42Z", "creator": "iblesa@tissat.es", "creation_time": "2002-12-09T17:42:42Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 15105, "attachment_id": null, "text": "For now, what I do to bypass this bug is to use the method\n.clearBody() before I do a popBody().\n\nBut it should not be done this why, should it be ?", "id": 28041, "time": "2002-12-19T10:05:09Z", "creator": "iblesa@tissat.es", "creation_time": "2002-12-19T10:05:09Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 15105, "attachment_id": null, "id": 28042, "time": "2002-12-19T10:06:20Z", "creator": "iblesa@tissat.es", "creation_time": "2002-12-19T10:06:20Z", "is_private": false, "text": "For now, what I do to bypass this bug is to use the method\n.clearBody() before I do a popBody().\n\nBut it should not be done this WAY, should it be ?\n\nSorry( I wrote why instead of way)"}, {"count": 5, "tags": [], "bug_id": 15105, "attachment_id": null, "id": 29276, "time": "2003-01-13T16:51:00Z", "creator": "iblesa@tissat.es", "creation_time": "2003-01-13T16:51:00Z", "is_private": false, "text": "I have reviewed 4.1.18 to see if this error has been fixed, but there is no\nchange. Is there any update about this bug ?"}, {"count": 6, "tags": [], "bug_id": 15105, "attachment_id": null, "id": 29318, "time": "2003-01-14T00:32:36Z", "creator": "jan.luehe@sun.com", "creation_time": "2003-01-14T00:32:36Z", "is_private": false, "text": "Notice that the behaviour your are experiencing indeed used to be a\nbug, but it's been fixed.\n\nIn Tomcat 4.1.x, any BodyContent that is being reused is cleared in\nthe generated servlet code right after the call to pushBody(), like\nthis:\n\n javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();\n _bc.clear();\n out = _bc;\n _jspx_th_xxx.setBodyContent(_bc);\n _jspx_th_xxx.doInitBody();\n\nIn Tomcat 5, the contents of a reused BodyContent are cleared inside\nof org.apache.jasper.runtime.BodyContentImpl.setWriter(), so the\nBodyContent returned by pushBody() has already been cleared.\n\n"}, {"count": 7, "attachment_id": null, "bug_id": 15105, "is_private": false, "id": 29342, "time": "2003-01-14T09:29:39Z", "creator": "iblesa@tissat.es", "creation_time": "2003-01-14T09:29:39Z", "tags": [], "text": "The problem is that you only control on tomcat 4.1.x when pushBody and popBody\nare used on a jsp. But what happens if you use them directly as I do on my code.\nYou have to take into account that it is a method available to use directly on a\ncustom tag, then any clean operation should be done on the pushBody popBody methods."}, {"count": 8, "tags": [], "creator": "jan.luehe@sun.com", "text": "Ismael,\n\nyou've got a valid point there. :)\nI just committed a fix for Tomcat 4.1.x.\nAs I said, this is already fixed in Tomcat 5.\n\n", "id": 29379, "time": "2003-01-15T00:20:46Z", "bug_id": 15105, "creation_time": "2003-01-15T00:20:46Z", "is_private": false, "attachment_id": null}]
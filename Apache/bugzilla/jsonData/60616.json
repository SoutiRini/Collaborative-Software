[{"count": 0, "tags": [], "creator": "eolivelli@gmail.com", "attachment_id": null, "id": 196242, "time": "2017-01-20T13:16:44Z", "bug_id": 60616, "creation_time": "2017-01-20T13:16:44Z", "is_private": false, "text": "After the upgrade from 8.0.33 I have noticed in production several \"400 Bad request\" responses from Tomcat due to a new strict validation of the Request Target.\n\nThe Code which performs the validation is HttpParser#isNotRequestTarget and in Tomcat 8.5 it rejects characters like '|', '{' and '}'.\n\nI know that they are not valid, by unfortunately it is not possible for me to change third party (Java and JS) libraries which do not encode those characters.\n\nI run Embedded Tomcat as so I have a very simple fix which hacks that validation using reflection, but I would like to have at least one Java System Property to relax that validation in a \"official\" way.\n\nThis is my hack, for what is worth:\n\nField field = HttpParser.class.getDeclaredField(\"IS_NOT_REQUEST_TARGET\");\nfield.setAccessible(true);\nboolean[] IS_NOT_REQUEST_TARGET = (boolean[]) field.get(null);\nint[] whitelist = new int[]{' ', '\\\"', '#', '<', '>', '\\\\', '^', '`', '{', '}', '|'};\nfor (int i : whitelist) {\n    IS_NOT_REQUEST_TARGET[i] = false;\n}\n\nI can submit a patch, my idea is to make the initialization of the IS_NOT_REQUEST_TARGET array in a way that those characters will be considered as 'whitelisted'"}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 196243, "time": "2017-01-20T13:21:45Z", "bug_id": 60616, "creation_time": "2017-01-20T13:21:45Z", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of bug 60594 ***"}]
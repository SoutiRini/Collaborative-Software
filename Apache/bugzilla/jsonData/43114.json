[{"count": 0, "tags": [], "creator": "jglick@apache.org", "is_private": false, "text": "If you have a file package-info.java in a source tree and run <javac> on the\ntree, all the regular sources will be compiled into class files, but not\npackage-info.java - which is correct. However, if (after making no source\nchanges) you rerun the same task for an incremental build, Ant will report one\nfile being recompiled. This is confusing, and also probably slows down\nincremental builds a bit.\n\nIt is not a good idea to simply exclude **/package-info.java from the source\nfileset; Javadoc needs them, and javac might as well (when using annotation\nprocessors anyway). Better to just have the up-to-date check in <javac> know to\nexpect package-info.class to not exist.", "id": 106716, "time": "2007-08-13T15:03:07Z", "bug_id": 43114, "creation_time": "2007-08-13T15:03:07Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 43114, "attachment_id": null, "id": 106717, "time": "2007-08-13T15:45:50Z", "creator": "peterreilly@apache.org", "creation_time": "2007-08-13T15:45:50Z", "is_private": false, "text": "I have been thinking about this - it is very\nannoying!\n\nWhere would we store the time that\nthat the last compilation of the package-info.java\ntook place at?\n\nCould the up-to-date check could be based\non the directory time i.e. if we see\na package-info.java, we would check the\nlast changed time of the directory the\ncompiled class would have gone into, if\nit older than package-info.java, include the package-info.java\nin the list of java files to be compiled,\nand on successfull compilation,\ntouch the directory if the modified time is older that the package-info.java\nfile.\n\n"}, {"count": 2, "tags": [], "bug_id": 43114, "attachment_id": null, "id": 106718, "time": "2007-08-13T15:49:06Z", "creator": "jglick@apache.org", "creation_time": "2007-08-13T15:49:06Z", "is_private": false, "text": "I think it would be simpler to behave as follows: run javac only if some *.java\nother than package-info.java are missing their .class, in which case also\ninclude every package-info.java in the fileset; else do nothing."}, {"count": 3, "tags": [], "text": "A thing to note is that package level runtime annotations would\nbe compiled into .class files - this is the way JAXB works.\nIt is common (at least for me) to mess up the package-info.java\nfile and need to change it without changing other java files.\n", "is_private": false, "id": 106719, "creator": "peterreilly@apache.org", "time": "2007-08-13T15:52:06Z", "bug_id": 43114, "creation_time": "2007-08-13T15:52:06Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "text": "Ah, that does complicate things. Actually, in my tests, any annotation on the\npackage (even SOURCE retention) causes a package-info.class to be generated.\n\nPerhaps the following behavior would work, on the assumption that compiling\n_only_ a package-info.java is useless: collect two lists, outOfDate and\npiOutOfDate. For any regular *.java which is either missing its *.class or whose\n*.class is newer, add to outOfDate. For any package-info.java which is missing\npackage-info.class, add to piOutOfDate. For any package-info.java which has a\npresent but newer package-info.class, add to outOfDate. Now, if outOfDate is\nnonempty, run javac on outOfDate + piOutOfDate.", "id": 106720, "time": "2007-08-13T16:16:44Z", "bug_id": 43114, "creation_time": "2007-08-13T16:16:44Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 43114, "is_private": false, "id": 107012, "attachment_id": null, "creator": "peterreilly@apache.org", "creation_time": "2007-08-22T01:28:21Z", "time": "2007-08-22T01:28:21Z", "text": "I have gone with a combination of both approaches, please\ntest the nightly build.\nFrom the javac manual page:\n    <ol>\n      <li>\n        If a <code>package-info.class</code> file exists and is older than\n        the <code>package-info.java</code> file.\n      </li>\n      <li>\n        If the directory for the \n        <code>package-info.class</code> file does not exist.\n      </li>\n      <li>\n        If the directory for the\n        <code>package-info.class</code> file exists, and has an older\n        modification time than the\n        the <code>package-info.java</code> file. In this case\n        &lt;javac&gt; will touch the corresponding .class directory\n        on successful compilation.\n      </li>\n  "}, {"count": 6, "tags": [], "bug_id": 43114, "attachment_id": null, "id": 115698, "time": "2008-04-17T20:11:43Z", "creator": "odela01@ca.com", "creation_time": "2008-04-17T20:11:43Z", "is_private": false, "text": "(In reply to comment #5)\n> I have gone with a combination of both approaches, please\n> test the nightly build.\n\nOk, I understand why you've decided on this, but there's a potential problem if the package-info.java does contain annotations with CLASS or RUNTIME retention, and you somehow get in the state where the package-info.class file has been deleted, but the containing directory has not. In such a state, javac will refuse to recreate the package-info.class file, until the containing directory is deleted.\n\nThis is happening to me because I'm using a dependset to manually manage the dependencies of a custom annotation processor. There's currently no way to make dependset delete target directories (only files), so I end up in the state described above.\n\nI'm not sure of the best way to deal with it. If it is felt that this scenario is generally unlikely, and dependset is a special case, then adding an option to dependset to also delete target directories would do the trick. Otherwise, adding a javac option to control the behavior is a possibility.\n\nActually, I'm not sure if checking the target directory timestamp is a good idea in general. Even if your package-info.java is updated, if any previous step in the build has touched its target directory in some way, it won't be compiled. This is a potential problem for SOURCE retention as well..."}, {"count": 7, "tags": [], "bug_id": 43114, "attachment_id": null, "text": "(in reply to #8)\nYour points are correct (well perhaps\nnot about the SOURCE level annotation - according to\nJesse a .class is also generated in this case).\n\nThe fix I put in would cause a serious regression from 1.7.0 -> 1.7.1\n\nI will reopen this, it needs to be resolved for 1.7.1.\n", "id": 115704, "time": "2008-04-18T04:39:43Z", "creator": "peterreilly@apache.org", "creation_time": "2008-04-18T04:39:43Z", "is_private": false}, {"count": 8, "tags": [], "text": "Our build scenario is as follows:\n\n1. Copy the complete source tree to a temporary location.\n2. Compile everything in the temporary location.\n\nAfter upgrading from 1.7.0 to 1.7.1, our package-info.java files don't get compiled any more, and this breaks our JAXB code. The reason for this may be because the copy preserves the file timestamps but not the folder timestamps, the latter are therefore more recent. Due to this change in behavior, we cannot use 1.7.1 at this point.\n\nWith all this said, I personally don't understand how this change went into 1.7.1. Peter Reilly stated on April 18 that the change committed introduced serious regression and that this had to be resolved before releasing 1.7.1. I suspect this has not been done because the bug is still open.\n\nI strongly urge you to reconsider the changes for 1.7.2.", "attachment_id": null, "id": 119117, "creator": "spam@dubbekarl.dk", "time": "2008-07-30T04:07:55Z", "bug_id": 43114, "creation_time": "2008-07-30T04:07:55Z", "is_private": false}, {"count": 9, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "text": "As a workaround, can you at least do\n\n<touch>\n  <fileset dir=\"tmp-src\" include=\"**/package-info.java\"/>\n</>\n\nbefore <javac>?", "id": 119121, "time": "2008-07-30T06:32:57Z", "bug_id": 43114, "creation_time": "2008-07-30T06:32:57Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 43114, "attachment_id": null, "text": "(In reply to comment #9)\n> As a workaround, can you at least do\n> \n> <touch>\n>   <fileset dir=\"tmp-src\" include=\"**/package-info.java\"/>\n> </>\n> \n> before <javac>?\n\nThat doesn't work if the target package directory doesn't already exist and the package contains other classes or packages which fall alphabetically above package-info.java.  In our case, if I do a clean and build, the package-info.java file is never compiled, because the target package is created by other .java files compiled in the package before the compiler gets to package-info.java, then the rules above prevent its being built, because the directory is newer than the file.  The only workaround I have is to build package-info.java specifically and first, then the rest of the .java files in a second call to javac.\n\nIt would be very nice if we could simply configure javac so that it follows the rules above (which seem pretty good, overall), but override them explicitly if we know that package-info.java is going to have annotations. Alternately, ensure package-info sorts to the top of the javac compile list for a given package and associated sub-packages.  Such a sort would make sure the package directory was created by the package-info compile (thereby alleviating the problem with \"clean\" builds).", "id": 120285, "time": "2008-09-02T06:44:47Z", "creator": "jerry@jrandrews.org", "creation_time": "2008-09-02T06:44:47Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 43114, "attachment_id": null, "id": 120488, "time": "2008-09-09T00:29:46Z", "creator": "mnovotny@redhat.com", "creation_time": "2008-09-09T00:29:46Z", "is_private": false, "text": "(In reply to comment #8)\n> Our build scenario is as follows:\n> \n> 1. Copy the complete source tree to a temporary location.\n> 2. Compile everything in the temporary location.\n> \n> After upgrading from 1.7.0 to 1.7.1, our package-info.java files don't get\n> compiled any more, and this breaks our JAXB code. The reason for this may be\n> because the copy preserves the file timestamps but not the folder timestamps,\n> the latter are therefore more recent. Due to this change in behavior, we cannot\n> use 1.7.1 at this point.\n> \n> With all this said, I personally don't understand how this change went into\n> 1.7.1. Peter Reilly stated on April 18 that the change committed introduced\n> serious regression and that this had to be resolved before releasing 1.7.1. I\n> suspect this has not been done because the bug is still open.\n> \n> I strongly urge you to reconsider the changes for 1.7.2.\n> \n\nI have the similar issue, I tried build with ant 1.7.1 and some package-info.java files weren't compiled at all even if in debug log ant says that this file will be compiled. Concrete compiled class isn't there, I mean in output dir for compiled classes. Ant 1.7.0 works fine. I can't believe that this change is only marked as minor, because for me it is blocker for using 1.7.1 version."}, {"count": 12, "tags": [], "text": "Our work-around for this problem is to <javac... **/package-info.java ...</javac> as the first part of our compile target.  This guarantees the files will be compiled regardless of the on-disk situation given the 1.7.1 rules.", "is_private": false, "id": 120499, "creator": "jerry@jrandrews.org", "time": "2008-09-09T06:46:07Z", "bug_id": 43114, "creation_time": "2008-09-09T06:46:07Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "jglick@apache.org", "is_private": false, "text": "One possibility to consider: when running javac and passing a package-info.java source file to it, if no package-info.class is created, make one yourself. (It would no annotations and thus essentially be empty except for the package name. The format should be simple to write directly from Java code.) This would ensure that up-to-date checks always worked sanely, as if every p-i.java had at least one class- (or runtime-) retention annotation.\n\nYou could also try to do this only if you detect an annotation in the file (just tokenize it, strip out comments, and look for '@').\n\nThe empty p-i.class files should be harmless at runtime, but it would perhaps be possible to exclude them from JARs by default.", "id": 122162, "time": "2008-11-03T17:43:09Z", "bug_id": 43114, "creation_time": "2008-11-03T17:43:09Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 43114, "is_private": false, "text": "Since it seems that there is no resolution on this, can I request that for the next release, all special handling of package-info files is removed? (i.e. this change is reverted) If someone comes up with a better idea/fix that works for everyone, that can always be added at a later date.\n\nMy rationale is that Ant is currently broken for some people with this change in, and special-casing package-info.java (besides adding 30 or so extra lines of code and the extra complexity associated with conditionally excluding this single file) adds almost no benefit.\n\nWhile the original reporter said that ant reporting a single file always being recompiled was confusing, I find it FAR more confusing that my code works when compiled by hand (or Eclipse) but breaks when compiled with Ant.", "id": 123830, "time": "2009-01-07T06:05:10Z", "creator": "adam@batkin.net", "creation_time": "2009-01-07T06:05:10Z", "attachment_id": null}, {"count": 15, "attachment_id": null, "bug_id": 43114, "is_private": false, "id": 123831, "time": "2009-01-07T06:27:32Z", "creator": "jerry@jrandrews.org", "creation_time": "2009-01-07T06:27:32Z", "tags": [], "text": "(In reply to comment #14)\n> Since it seems that there is no resolution on this, can I request that for the\n> next release, all special handling of package-info files is removed? \n\nI concur with this request.\n\nThe initial requester could resolve his complaint by placing a \"touch package-info.class\" command immediately after his javac to ensure that a package-info.class file (empty, in this case) exists.\n"}, {"count": 16, "tags": [], "creator": "adam@batkin.net", "is_private": false, "text": "Seriously, any news on this? How do we get this fixed and a new release of Ant pushed?", "id": 124677, "time": "2009-02-05T05:09:42Z", "bug_id": 43114, "creation_time": "2009-02-05T05:09:42Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 43114, "text": "I have tried to do a better fix in revision 743910.\n\nThe real problem was that while javac would create a package-info.class whenever package-info.java had any annotations (even RetentionPolicy.SOURCE!), packages with no annotations at all - i.e just a replacement for package.html when creating Javadoc - did not result in package-info.class files. This confused up-to-date checks.\n\nWith the new code, if package-info.java is included in the list of source files passed to the compiler and javac generates package-info.class, then nothing further is done. But if it is missing (or out of date), a placeholder package-info.class is created that is equivalent to that which (JDK 5) javac would create for a package-info.java with only SOURCE annotations. This is effectively a no-op for the JVM but makes <javac> work predictably: *.java is compiled during an incremental build iff the corresponding *.class is missing or old, and this works the same for package-info.java as for any other *.java.", "id": 124825, "time": "2009-02-12T14:43:41Z", "creator": "jglick@apache.org", "creation_time": "2009-02-12T14:43:41Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "text": "first, thanks for fixing.\n\nsecond, I've blown an entire day due to this bug. Seems like the ant project should pull 1.7.1 from download section, recommend 1.7.0 as the stable version, or put a big fat warning on the 1.7.1 download page warning about use with JAXB.", "attachment_id": null, "id": 125133, "creator": "abram@adaptx.com", "time": "2009-02-24T10:46:31Z", "bug_id": 43114, "creation_time": "2009-02-24T10:46:31Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 43114, "attachment_id": null, "id": 125153, "time": "2009-02-25T13:13:41Z", "creator": "jerry@jrandrews.org", "creation_time": "2009-02-25T13:13:41Z", "is_private": false, "text": "sounds like the right fix.  Thanks for persevering."}, {"count": 20, "tags": [], "bug_id": 43114, "is_private": false, "text": "(In reply to comment #17)\n> I have tried to do a better fix in revision 743910.\n> \n> The real problem was that while javac would create a package-info.class\n> whenever package-info.java had any annotations (even RetentionPolicy.SOURCE!),\n> packages with no annotations at all - i.e just a replacement for package.html\n> when creating Javadoc - did not result in package-info.class files. This\n> confused up-to-date checks.\n> \n> With the new code, if package-info.java is included in the list of source files\n> passed to the compiler and javac generates package-info.class, then nothing\n> further is done. But if it is missing (or out of date), a placeholder\n> package-info.class is created that is equivalent to that which (JDK 5) javac\n> would create for a package-info.java with only SOURCE annotations. This is\n> effectively a no-op for the JVM but makes <javac> work predictably: *.java is\n> compiled during an incremental build iff the corresponding *.class is missing\n> or old, and this works the same for package-info.java as for any other *.java.\n\nWhen is 1.8.0 planned? I can't find out the date.", "id": 128451, "time": "2009-07-01T03:36:33Z", "creator": "mnovotny@redhat.com", "creation_time": "2009-07-01T03:36:33Z", "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 43114, "attachment_id": null, "text": "I am not aware of any plan for a 1.8.0 release but please ask on the dev list rather than here.", "id": 128455, "time": "2009-07-01T07:12:48Z", "creator": "jglick@apache.org", "creation_time": "2009-07-01T07:12:48Z", "is_private": false}, {"count": 22, "attachment_id": null, "bug_id": 43114, "is_private": false, "id": 128783, "time": "2009-07-13T04:52:29Z", "creator": "bodewig@apache.org", "creation_time": "2009-07-13T04:52:29Z", "tags": [], "text": "svn revision 793562 contains AntUnit tests for the original bug as well as the regression introduced with Ant 1.7.1"}, {"count": 23, "tags": [], "creator": "st99@mail.ru", "is_private": false, "text": "This \"feature\" introduced in 1.7.1 was the worst bug I ever encountered in Ant. I lost almost a week because of this extremely annoying issue with JAX-WS not working intermittently. By pure coincidence I spotted package-info.java not getting compiled. Otherwise I don't know how longer I would continue digging around SOAP messages, namespaces, XJC generated classes, etc.\nNow that 1.7.1 leaked into IDEs (at least NetBeans) it got even worse -- one has to modify IDE-generated build scripts to work around this issue.\nPlease, please, please, remove this feature and release 1.7.2 as soon as possible!", "id": 132254, "time": "2009-11-23T09:52:01Z", "bug_id": 43114, "creation_time": "2009-11-23T09:52:01Z", "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 43114, "attachment_id": null, "is_private": false, "id": 132255, "time": "2009-11-23T12:02:12Z", "creator": "jglick@apache.org", "creation_time": "2009-11-23T12:02:12Z", "text": "The new fix will be in 1.8.0 when it is released. I have no personal objection to a 1.7.2 update release but it would need to be proposed on the dev mailing list and a release manager found."}, {"count": 25, "tags": [], "bug_id": 43114, "is_private": false, "text": "work around for older versions of ant:\n\nadd any package level annotation to the package line of the package-info.java file.\n\nEx:\n@Generated(value={})\npackage x.y.z;\n\nimport javax.annotation.Generated;\n\n\nTested with\n$ ant -version\nApache Ant version 1.6.5 compiled on June 2 2005\n$ javac -version\njavac 1.6.0_20", "id": 143514, "time": "2011-01-20T13:24:09Z", "creator": "jpyeron@pdinc.us", "creation_time": "2011-01-20T13:24:09Z", "attachment_id": null}]
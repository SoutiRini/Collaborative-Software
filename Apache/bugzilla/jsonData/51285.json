[{"count": 0, "tags": [], "text": "rotatelogs: Add -p option to call arbitrary post-rotate program.\n\nPost rotation, call the optional post-rotation program in a separate\nthread. apr_proc_create() is called with cmdtype APR_PROGRAM, so it\nhas to be an executable file. Scripts are supported as long as the\nshebang line uses a working interpreter.\n\nThe post-rotation program is run with equivalent arguments and\nenvironment variables to let users choose:\n\nargv[1]: Full path to current file\nargv[2]: Full path to previous file\nEnv var ROTATELOGS_PATH_CUR: Full path to current file\nEnv var ROTATELOGS_PATH_PREV: Full path to previous file\n\nNotes:\nThe original motivation for this was to have a flexible callback\nto be able to maintain a current access.log symlink, and also\ndo event-based (vs cron-based) compression and archival/upload\nto central systems.\n\nThread support is required and assumed. It's not clear to me how\nimportant it would be to also support non-threaded systems. Adding\na fork-based solution (APR_HAS_THREADS) can be done rather quickly,\nif needed.", "attachment_id": null, "id": 146714, "creation_time": "2011-05-28T17:34:20Z", "time": "2011-05-28T17:34:20Z", "creator": "sveniu@ifi.uio.no", "bug_id": 51285, "is_private": false}, {"count": 1, "tags": [], "creator": "sveniu@ifi.uio.no", "attachment_id": 27085, "id": 146716, "time": "2011-05-28T17:38:14Z", "bug_id": 51285, "creation_time": "2011-05-28T17:38:14Z", "is_private": false, "text": "Created attachment 27085\nPatch for rotatelogs.c and its documentation"}, {"count": 2, "tags": [], "bug_id": 51285, "is_private": false, "text": "Created attachment 27090\nFull updated patch for rotatelogs.c and its documentation\n\nUpdated patch (full patch attached, applies to svn 1129082), supports\nforking and threading, depending on apr build support.\n\nTested on Debian 6, Linux 2.6.32-amd64, building APR with and without\nthread support, then building httpd/support/. Successful results with\nboth.", "id": 146744, "time": "2011-05-30T09:25:03Z", "creator": "sveniu@ifi.uio.no", "creation_time": "2011-05-30T09:25:03Z", "attachment_id": 27090}, {"count": 3, "tags": [], "creator": "sveniu@ifi.uio.no", "attachment_id": null, "id": 146745, "time": "2011-05-30T09:29:18Z", "bug_id": 51285, "creation_time": "2011-05-30T09:29:18Z", "is_private": false, "text": "Adding minfrin, poirier, rjung to CC list, as you have been most\nrecently active in the rotatelogs.c commit history. Is this patch\nsomething you could consider merging? Possibly also back-porting\nto 2.2, so it's easier to get pushed out to distros (I'm thinking\nof Debian)."}, {"count": 4, "text": "Thanks for sending in the patch!  I like the idea; I've had a requests for similar \"do X post-rotate\" functionality so there is some kind of general need here.   A few comments:\n\na) What's the purpose of the double-forking and thread support?  apr_proc_create() will fork/exec internally, so why fork (/spawn thread) then call apr_proc_create()?\n\nb) Isn't the apr_tokenize_to_argv() usage going to split up any paths with spaces in?  it should be simple enough to set up argv[] correctly without needing to flatten and reparse the string anyway.\n\nc) probably should set the cmdtype to APR_PROGRAM_ENV to pass through any env vars", "bug_id": 51285, "attachment_id": null, "id": 146792, "time": "2011-06-01T13:21:56Z", "creator": "jorton@redhat.com", "creation_time": "2011-06-01T13:21:56Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "sveniu@ifi.uio.no", "attachment_id": null, "id": 146808, "time": "2011-06-02T06:39:31Z", "bug_id": 51285, "creation_time": "2011-06-02T06:39:31Z", "is_private": false, "text": "Hi, Joe.\n\na) This started out as a separate thread (to avoid many processes in the pid list) that calls the external program so that the thread would wait for the program to finish, and catch any problems. I have no issues with changing this, though. Would it make sense to simply fork the external program without looking back, and let it handle its own errors? Its stderr is still directed to the error log, presumably, so it's easy to catch problems anyway.\n\nb) As far as I can see in the source, apr_tokenize_to_argv() does the right thing with quoting and escaping. It requires users to put escaped spaces or escaped quotes in the apache config, though. Some examples in the docs would probably do the trick.\n\nc) APR_PROGRAM was chosen since the env arg to apr_proc_create() is ignored if the type is APR_PROGRAM_ENV. If we'd rather use apr_env_set() to set the vars, then use APR_PROGRAM_ENV, that should take care of it.\n\nLet me know what you think, and I'll make the changes."}, {"count": 6, "text": "Created attachment 27172\nsimplified patch", "bug_id": 51285, "attachment_id": 27172, "id": 147249, "time": "2011-06-18T15:20:39Z", "creator": "jorton@redhat.com", "creation_time": "2011-06-18T15:20:39Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "jorton@redhat.com", "attachment_id": 27173, "id": 147250, "time": "2011-06-18T15:52:20Z", "bug_id": 51285, "creation_time": "2011-06-18T15:52:20Z", "is_private": false, "text": "Created attachment 27173\nsecond attempt at simplified patch"}, {"count": 8, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "is_private": false, "id": 147251, "time": "2011-06-18T15:59:16Z", "bug_id": 51285, "creation_time": "2011-06-18T15:59:16Z", "text": "Sorry that I never followed up before.\n\nI've attached a patch which has some simplification in:\n\n1) it is necessary to wait() for the forked children at some point, otherwise we'd collect an ever-increasing horde of zombies (defunct processes).  What I've tried here is: \n\na) not using detached processes\nb) do just \"fire and forget\"\nc) collect any zombies before each new post-rotate\n\nWe could still log the exitcode/reason when collecting the zombies I guess, for diagnostics... not sure.\n\n2) using the tokenize does seem more work than necessary, e.g. if the log filenames had spaces in we'd need to quote to get tokenize to work.  have switched to set up argv[] directly\n\n3) seems simpler to drop the env vars completely; if the spawned process wants to use env vars it can do that based on argv\n\nWhat do you think?  It seems to work from some brief testing, particularly with a post-rotate program which just does \"sleep\".  I'd be happy to commit as-is; more review/testing would be great."}, {"count": 9, "tags": [], "text": "Thanks, this looks good! I've done a bit of testing, and have some notes:\n\n1. The process management works well. I've tried:\n\n   a) postrotate program taking longer (sleep) than the specified rotation\n      interval. This of course builds up children, but works exactly as\n      expected.\n\n   b) Apache/rotatelogs exiting before postrotate program finishes: Child\n      is adopted by init, and continues to run until it completes.\n\n2. Some might be surprised by or dislike the defunct child processes in the\n   process list. I don't mind them at all. A fix could be select/poll, which\n   would also handle exit codes, etc, but I wouldn't say that's a blocker for\n   committing.\n\n3. The usage() output, the manpage and the xml program documentation should\n   not refer to the env variables any more.\n\n5. There's some stray trailing whitespace in your latest diff, lines 108 and\n   122.\n\nWould it be at all possible to also commit this to 2.2? My ultimate goal\nis to have this included in Debian, hopefully in a Squeeze update (as opposed\nto Wheezy, which could be years in the future).", "is_private": false, "bug_id": 51285, "id": 147262, "time": "2011-06-19T19:43:24Z", "creator": "sveniu@ifi.uio.no", "creation_time": "2011-06-19T19:43:24Z", "attachment_id": null}, {"count": 10, "text": "Thanks a lot!  I made the whitespace and docs changes as suggested, and also fixed the logic so that the program only gets executed after a rotation, not after the initial open() of the file or after a failed attempt to rotate; I presume that was not the intend?  (there were cases where the program would omit the second filename arg)\n\n(BTW, If you let me know your real name I can put that in CHANGES!)\n\nI can propose this for backport to 2.2.x.", "bug_id": 51285, "attachment_id": null, "id": 147270, "time": "2011-06-20T10:32:30Z", "creator": "jorton@redhat.com", "creation_time": "2011-06-20T10:32:30Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "text": "It was actually intended to have the program execute on the initial open,\nwith the goal of not necessarily only doing post-rotate work, but also\ndo stuff with the newly created file. The main idea was to make a symlink\nfrom the new file to access-current.log or similar (like the -L arg does,\nalthough with symlinks). It would be up to the program to verify that\nthe second arg (previous file) is present.\n\nReal name: Sven Ulland", "attachment_id": null, "id": 147271, "creation_time": "2011-06-20T11:52:24Z", "time": "2011-06-20T11:52:24Z", "creator": "sveniu@ifi.uio.no", "bug_id": 51285, "is_private": false}, {"count": 12, "tags": [], "text": "OK, that makes sense - the docs didn't mention this.  I've updated docs + code to work that way in r1140099.  Thanks!", "attachment_id": null, "id": 147521, "creation_time": "2011-06-27T12:07:56Z", "time": "2011-06-27T12:07:56Z", "creator": "jorton@redhat.com", "bug_id": 51285, "is_private": false}, {"count": 13, "tags": [], "creator": "svensven@gmail.com", "attachment_id": null, "is_private": false, "id": 149764, "time": "2011-09-26T12:46:29Z", "bug_id": 51285, "creation_time": "2011-09-26T12:46:29Z", "text": "Joe, how did the proposal for backporting to 2.2 go?"}, {"count": 14, "tags": [], "creator": "sveniu@ifi.uio.no", "attachment_id": null, "id": 152524, "time": "2012-01-02T12:48:59Z", "bug_id": 51285, "creation_time": "2012-01-02T12:48:59Z", "is_private": false, "text": "Any chance of still getting this backported to 2.2?"}]
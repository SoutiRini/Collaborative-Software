[{"count": 0, "text": "Core will be vomited if the Web page to which Apache2.0.48 is working is \nperused by IE or Netscape.\n\nHowever, if it is performed as follows, a Web page can be seen for the time \nbeing.\n\n$ telnet server 80\nTrying 123.456.789.012\nConnected to server.\nEscape character is '^]'.\nGET /\n<!doctype html public \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<html>\n <head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-2022-JP\">\n  <title>Apache install-ji no test page</title>\n  ^^ in japanese title\n...more\n\nThe test page of Apache also vomits core.\nIn a httpd-2.0.47, it did not this problem.\n\n[Fri Nov 07 09:34:19 2003] [notice] Apache/2.0.48 (Unix) configured -- resuming\nnormal operations\n[Fri Nov 07 09:34:19 2003] [info] Server built: Nov  7 2003 09:13:42\n[Fri Nov 07 09:34:19 2003] [debug] prefork.c(1037): AcceptMutex: flock (default:\n flock)\n[Fri Nov 07 09:34:30 2003] [notice] child pid 13178 exit signal Segmentation fau\nlt (11)\n[Fri Nov 07 09:34:30 2003] [notice] child pid 13177 exit signal Segmentation fau\nlt (11)\n\nThe environment here is as follows.\n\nThe kernel and library of FreeBSD 4.9-RELEASE are using custom-made.\n(Compile option : -O3 -mcpu=k6 -march=k6 -malign-functions=4 -malign-jumps=4 -\nmalign-loops=4)\n\nhttpd.conf is adjusted so that Japanese may be indicated by priority.\nThe virtual host of IP base and the virtual host of a NOIP base are \nintermingled.\n\nThe build script of Apache is as follows.\n\n#!/bin/sh\nOPTIM=\"-D_REENTRANT -D_THREAD_SAFE -O9 -mcpu=k6 -march=k6 -malign-loops=4 -malig\nn-jumps=4 -malign-functions=4\"\n\nCOPTFLAGS=\"$OPTIM\" \\\nCFLAGS=\"$OPTIM\" \\\nCC=\"cc $CFLAGS\" \\\n./configure  --with-port=80 \\\n--enable-mods-shared=info --enable-info \\\n--enable-mods-shared=status --enable-status \\\n--enable-mods-shared=imap --enable-imap \\\n--enable-so \\\n--enable-rewrite \\\n--enable-deflate \\\n--enable-expires \\\n--enable-headers \\\n--enable-usertrack\n\nCC=\"cc\" \\\nOPTIM=\"$OPTIM\" \\\nCFLAGS=\"$CFLAGS\" \\\nCOPTFLAGS=\"$COPTFLAGS\" \\\nmake\n#make install", "creator": "apache_bugzilla@ml.daiba.cx", "attachment_id": null, "id": 46966, "time": "2003-11-07T00:49:05Z", "bug_id": 24483, "creation_time": "2003-11-07T00:49:05Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 46971, "time": "2003-11-07T06:46:33Z", "creator": "apache_bugzilla@ml.daiba.cx", "creation_time": "2003-11-07T06:46:33Z", "is_private": false, "text": "This problem is mod_usertrack.\nEnable this option is dump core!!\n\nCookieTracking on\n"}, {"count": 2, "tags": [], "bug_id": 24483, "attachment_id": null, "is_private": false, "id": 46972, "time": "2003-11-07T07:18:19Z", "creator": "jwoolley@apache.org", "creation_time": "2003-11-07T07:18:19Z", "text": "Well, we did change mod_usertrack in this version... but in all our testing it \nworked for us.  Can you please give us a backtrace so that we can try to figure \nout what's going on?  See http://httpd.apache.org/dev/debugging.html .\n\nThanks,\nCliff"}, {"count": 3, "tags": [], "text": "backtrace report on spot_cookie(mod_usertrack.c)\n\nBreakpoint 3, spot_cookie (r=0x8188050) at mod_usertrack.c:204\n204         cookie_dir_rec *dcfg = ap_get_module_config(r->per_dir_config,\n(gdb) n\n210         if (!dcfg->enabled || r->main) {\n(gdb)\n214         if ((cookie_header = apr_table_get(r->headers_in,\n(gdb)\n218             if (!ap_regexec(dcfg->regexp, cookie_header, NUM_SUBS, regm, 0))\n {\n(gdb)\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x080a495b in regexec (preg=0x0,\n    string=0x8189040 \"Apache=hostname.or.jp.1067634189379628; sheet=%u901A%\nu5E38%u30D5%u30A9%u30F3%u30C8; abcdefgh.html=11\", nmatch=3,\n    pmatch=0xbfbff940, eflags=0) at pcreposix.c:269\n269     rc = pcre_exec(preg->re_pcre, NULL, string, (int)strlen(string), 0, \noptions,\n\n-------\nBreakpoint 3, spot_cookie (r=0x8188050) at mod_usertrack.c:204\n204         cookie_dir_rec *dcfg = ap_get_module_config(r->per_dir_config,\n(gdb) s\n210         if (!dcfg->enabled || r->main) {\n(gdb) s\n214         if ((cookie_header = apr_table_get(r->headers_in,\n(gdb) s\napr_table_get (t=0x8188218, key=0x80d051c \"Cookie\") at apr_tables.c:481\n481         if (key == NULL) {\n(gdb) s\n485         hash = TABLE_HASH(key);\n(gdb) s\n486         if (!TABLE_INDEX_IS_INITIALIZED(t, hash)) {\n(gdb) s\n489         COMPUTE_KEY_CHECKSUM(key, checksum);\n(gdb) s\n490         next_elt = ((apr_table_entry_t *) t->a.elts) + t->index_first[hash];\n;\n(gdb) s\n491         end_elt = ((apr_table_entry_t *) t->a.elts) + t->index_last[hash];\n(gdb) s\n493         for (; next_elt <= end_elt; next_elt++) {\n(gdb) s\n494             if ((checksum == next_elt->key_checksum) &&\n(gdb) s\n493         for (; next_elt <= end_elt; next_elt++) {\n(gdb) s\n494             if ((checksum == next_elt->key_checksum) &&\n(gdb) s\n496                 return next_elt->val;\n(gdb) s\n501     }\n(gdb) s\nspot_cookie (r=0x8188050) at mod_usertrack.c:218\n218             if (!ap_regexec(dcfg->regexp, cookie_header, NUM_SUBS, regm, 0))\n {\n(gdb) s\nap_regexec (preg=0x0,\n    string=0x8189040 \"Apache=hostname.or.jp.1067634189379628; sheet=%\nu901A%u5E38%u30D5%u30A9%u30F3%u30C8; abcdefgh.html=11\", nmatch=3,\n    pmatch=0xbfbff940, eflags=0) at util.c:398\n398         return regexec(preg, string, nmatch, pmatch, eflags);\n(gdb) s\nregexec (preg=0x0,\n    string=0x8189040 \"Apache=hostname.or.jp.1067634189379628; sheet=%\nu901A%u5E38%u30D5%u30A9%u30F3%u30C8; abcdefgh.html=11\", nmatch=3,\n    pmatch=0xbfbff940, eflags=0) at pcreposix.c:233\n233     int options = 0;\n(gdb) s\n242     int *ovector = NULL;\n(gdb) s\n243     int allocated_ovector = 0;\n(gdb) s\n245     if ((eflags & REG_NOTBOL) != 0) options |= PCRE_NOTBOL;\n(gdb) s\n246     if ((eflags & REG_NOTEOL) != 0) options |= PCRE_NOTEOL;\n(gdb) s\n255     if (nmatch > 0)\n(gdb) s\n257         if (nmatch <= SMALL_NMATCH)\n(gdb) s\n259           ovector = &(small_ovector[0]);\n(gdb) s\n269     rc = pcre_exec(preg->re_pcre, NULL, string, (int)strlen(string), 0, opti\nons,\n(gdb) s\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x080a495b in regexec (preg=0x0,\n    string=0x8189040 \"Apache=hostname.or.jp.1067634189379628; sheet=%\nu901A%u5E38%u30D5%u30A9%u30F3%u30C8; abcdefgh.html=11\", nmatch=3,\n    pmatch=0xbfbff940, eflags=0) at pcreposix.c:269\n269     rc = pcre_exec(preg->re_pcre, NULL, string, (int)strlen(string), 0, opti\nons,\n(gdb) s\n\nProgram terminated with signal SIGSEGV, Segmentation fault.\nThe program no longer exists.\n\n", "is_private": false, "id": 46998, "creator": "apache_bugzilla@ml.daiba.cx", "time": "2003-11-07T15:37:16Z", "bug_id": 24483, "creation_time": "2003-11-07T15:37:16Z", "attachment_id": null}, {"count": 4, "text": "value of called to pcre_exec (from spot_cookie)\n\n269     rc = pcre_exec(preg->re_pcre, NULL, string, (int)strlen(string), 0, \noptions,\n\n(gdb) printf \"%d\\n\",preg\n0\n(gdb) printf \"%d\\n\", preg->re_pcre\nError accessing memory address 0x0: Bad address.\n(gdb) printf \"%s\\n\", string\nApache=hostname.or.jp.1067634189379628; sheet=%u901A%u5E38%u30D5%u30A9%u30F3%\nu30C8; abcdefgh.html=11\n(gdb) printf \"%d\\n\", strlen(string)\n113\n(gdb) printf \"%s\\n\",options\nError accessing memory address 0x0: Bad address.\n\n", "creator": "apache_bugzilla@ml.daiba.cx", "attachment_id": null, "id": 46999, "time": "2003-11-07T15:52:33Z", "bug_id": 24483, "creation_time": "2003-11-07T15:52:33Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 24483, "attachment_id": null, "is_private": false, "id": 47000, "time": "2003-11-07T16:08:20Z", "creator": "apache_bugzilla@ml.daiba.cx", "creation_time": "2003-11-07T16:08:20Z", "text": "On httpd-2.0.47 will running...\n\nBreakpoint 1, spot_cookie (r=0x8186050) at mod_usertrack.c:198\n198         cookie_dir_rec *dcfg = ap_get_module_config(r->per_dir_config,\n(gdb) s\n204         if (!dcfg->enabled || r->main) {\n(gdb)\n208         if ((cookie = apr_table_get(r->headers_in,\n(gdb)\napr_table_get (t=0x8186218, key=0x80cf7dc \"Cookie\") at apr_tables.c:481\n481         if (key == NULL) {\n(gdb)\n485         hash = TABLE_HASH(key);\n(gdb)\n486         if (!TABLE_INDEX_IS_INITIALIZED(t, hash)) {\n(gdb)\n489         COMPUTE_KEY_CHECKSUM(key, checksum);\n(gdb)\n490         next_elt = ((apr_table_entry_t *) t->a.elts) + t->index_first[hash];\n;\n(gdb)\n491         end_elt = ((apr_table_entry_t *) t->a.elts) + t->index_last[hash];\n(gdb)\n493         for (; next_elt <= end_elt; next_elt++) {\n(gdb)\n494             if ((checksum == next_elt->key_checksum) &&\n(gdb)\n493         for (; next_elt <= end_elt; next_elt++) {\n(gdb)\n494             if ((checksum == next_elt->key_checksum) &&\n(gdb)\n496                 return next_elt->val;\n(gdb)\n501     }\n(gdb)\nspot_cookie (r=0x8186050) at mod_usertrack.c:212\n212             if ((value = ap_strstr_c(cookie, dcfg->cookie_name))) {\n(gdb)\n215                 value += strlen(dcfg->cookie_name) + 1;  /* Skip over the '=\n' */\n(gdb)\n216                 cookiebuf = apr_pstrdup(r->pool, value);\n(gdb)\napr_pstrdup (a=0x8186018,\n    s=0x81873b7 \"hostname.or.jp.1067634189379628; sheet=%u901A%u5E38%\nu30D5%u30A9%u30F3%u30C8; abcdefgh.html=11\") at apr_strings.c:111\n111         if (s == NULL) {\n(gdb)\n114         len = strlen(s) + 1;\n(gdb)\n115         res = apr_palloc(a, len);\n(gdb)\napr_palloc (pool=0x8186018, size=107) at apr_pools.c:620\n620         size = APR_ALIGN_DEFAULT(size);\n(gdb)\n621         active = pool->active;\n(gdb)\n624         if (size < (apr_size_t)(active->endp - active->first_avail)) {\n(gdb)\n625             mem = active->first_avail;\n(gdb)\n626             active->first_avail += size;\n(gdb)\n628             return mem;\n(gdb)\n679     }\n(gdb)\napr_pstrdup (a=0x8186018,\n    s=0x81873b7 \"hostname.or.jp.1067634189379628; sheet=%u901A%u5E38%\nu30D5%u30A9%u30F3%u30C8; line-index.html=11\") at apr_strings.c:116\n116         memcpy(res, s, len);\n(gdb)\n117         return res;\n(gdb)\n118     }\n(gdb)\nspot_cookie (r=0x8186050) at mod_usertrack.c:217\n217                 cookieend = strchr(cookiebuf, ';');\n(gdb)\n218                 if (cookieend)\n(gdb)\n219                     *cookieend = '\\0';      /* Ignore anything after a ; */\n(gdb)\n222                 apr_table_setn(r->notes, \"cookie\", cookiebuf);\n(gdb)\napr_table_setn (t=0x81869a8, key=0x80cf7cd \"cookie\",\n    val=0x8187980 \"hostname.or.jp.1067634189379628\")\n    at apr_tables.c:584\n584         COMPUTE_KEY_CHECKSUM(key, checksum);\n(gdb)\n585         hash = TABLE_HASH(key);\n(gdb)\n586         if (!TABLE_INDEX_IS_INITIALIZED(t, hash)) {\n(gdb)\n587             t->index_first[hash] = t->a.nelts;\n(gdb)\n588             TABLE_SET_INDEX_INITIALIZED(t, hash);\n(gdb)\n589             goto add_new_elt;\n(gdb)\n640         t->index_last[hash] = t->a.nelts;\n(gdb)\n641         next_elt = (apr_table_entry_t *) table_push(t);\n(gdb)\napr_array_push_noclear (arr=0x81869a8) at apr_tables.c:158\n158         if (arr->nelts == arr->nalloc) {\n(gdb)\n169         ++arr->nelts;\n(gdb)\n170         return arr->elts + (arr->elt_size * (arr->nelts - 1));\n(gdb)\n171     }\n(gdb)\napr_table_setn (t=0x81869a8, key=0x80cf7cd \"cookie\",\n    val=0x8187980 \"hostname.or.jp.1067634189379628\")\n    at apr_tables.c:642\n642         next_elt->key = (char *)key;\n(gdb)\n643         next_elt->val = (char *)val;\n(gdb)\n644         next_elt->key_checksum = checksum;\n(gdb)\n645     }\n(gdb)\nspot_cookie (r=0x8186050) at mod_usertrack.c:224\n224                 return DECLINED;    /* There's already a cookie, no new one\n*/\n(gdb)\n228     }\n(gdb)\n0x0809f5f5 in ap_run_fixups (r=0x8186050) at request.c:114\n114                               (request_rec *r), (r), OK, DECLINED)\n(gdb)\nfix_encoding (r=0x8186050) at mod_negotiation.c:3077\n3077        const char *enc = r->content_encoding;\n(gdb)\n3078        char *x_enc = NULL;\n(gdb)\n3083        if (!enc || !*enc) {\n(gdb)\n3084            return DECLINED;\n(gdb)\n3117    }\n\n...etc...\n"}, {"count": 6, "text": "Looks like there is a bug in the cookie finding part of mod_usertrack introduced\nby my changes to the most recent mod_usertrack: If \"CookieTracking on\" is in\nhttpd.conf, \"CookieName Apache\" also has to be in there. (Or, you can have the\nvalue of CookieName be whatever you like; but CookieName *has* to be set to\ncircumvent the bug I introduced.) I'll be working on a fix for this in the next\nfew days, but for now the workaround should work. --Manni Wood", "creator": "manniwood@planet-save.com", "attachment_id": null, "id": 47003, "time": "2003-11-07T16:55:18Z", "bug_id": 24483, "creation_time": "2003-11-07T16:55:18Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "Is it a light initialization mistake?\nDump core was avoidable. Thanks.\n\n----\nAn easy patch... (not test...It moves for the time being.)\n\nmod_usertrack.c : line 254:\n\nstatic void *make_cookie_dir(apr_pool_t *p, char *d)\n{\n    cookie_dir_rec *dcfg;\n    dcfg = (cookie_dir_rec *) apr_pcalloc(p, sizeof(cookie_dir_rec));\n    dcfg->cookie_name = COOKIE_NAME;\n    dcfg->cookie_domain = NULL;\n    dcfg->style = CT_UNSET;\n    dcfg->enabled = 0;\n+    dcfg->regexp_string = (char *)apr_palloc(p, 25 + strlen(COOKIE_NAME) * 2);\n+    apr_snprintf(dcfg->regexp_string, 25 + strlen(COOKIE_NAME) * 2\n+        , \"^%s([^;]+)|;[ \\t]+%s=([^;]+)\", COOKIE_NAME, COOKIE_NAME);\n+    dcfg->regexp=ap_pregcomp(p, dcfg->regexp_string, REG_EXTENDED);\n    return dcfg;\n}\n", "is_private": false, "id": 47017, "creator": "apache_bugzilla@ml.daiba.cx", "time": "2003-11-07T19:27:38Z", "bug_id": 24483, "creation_time": "2003-11-07T19:27:38Z", "attachment_id": null}, {"count": 8, "text": "Since it was thought that abnormalities occurred in all OS's as long as the \nsource code was seen, Plathome was changed into All.\n", "creator": "apache_bugzilla@ml.daiba.cx", "attachment_id": null, "id": 47043, "time": "2003-11-08T15:12:34Z", "bug_id": 24483, "creation_time": "2003-11-08T15:12:34Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "manniwood@planet-save.com", "is_private": false, "text": "The following is my first cut at a patch. It solves all of the problems, but it\nhas not yet been assessed by anyone on the apache developer's list.\n\nTake the patch that follows, copy it to a file called\nmod_usertrack_2.0.48.patch, copy mod_usertrack_2.0.48.patch to\nhttpd-2.0.48/modules/metadata, then run patch -p0 < mod_usertrack_2.0.48.patch\nand recompile.\n\n-Manni\n\n--- mod_usertrack-old.c 2003-11-08 01:42:11.000000000 -0500\n+++ mod_usertrack.c     2003-11-08 23:02:28.000000000 -0500\n@@ -104,7 +104,7 @@\n #include \"http_config.h\"\n #include \"http_core.h\"\n #include \"http_request.h\"\n-\n+#include \"http_log.h\"\n  \n module AP_MODULE_DECLARE_DATA usertrack_module;\n  \n@@ -211,6 +211,14 @@\n         return DECLINED;\n     }\n  \n+    /* Check to be sure there is a regexp available; it may not have\n+       compiled, leaving dcfg->regexp null. */\n+    if (dcfg->regexp == NULL) {\n+        ap_log_error(APLOG_MARK, APLOG_ERR, APR_SUCCESS, r->server, \"The\nregular expression that will be used to find the usertrack cookie in the cookie\nheader could not be compiled. Disabling mod_usertrack.\");\n+        dcfg->enabled = 0;\n+        return DECLINED;\n+    }\n+\n     if ((cookie_header = apr_table_get(r->headers_in,\n                                        (dcfg->style == CT_COOKIE2\n                                         ? \"Cookie2\"\n@@ -260,6 +268,21 @@\n     dcfg->cookie_domain = NULL;\n     dcfg->style = CT_UNSET;\n     dcfg->enabled = 0;\n+\n+    /* The goal is to end up with this regexp,\n+     * ^COOKIE_NAME=([^;]+)|;[ \\t]+COOKIE_NAME=([^;]+)\n+     * with COOKIE_NAME\n+     * obviously substituted with the real cookie name defined\n+     * by the COOKIE_NAME macro. This regexp will get replaced\n+     * by the regexp in set_cookie_name() if the CookieName is\n+     * used in httpd.conf. */\n+    dcfg->regexp_string = apr_pstrcat(p, \"^\", COOKIE_NAME,\n+                                      \"=([^;]+)|;[ \\t]+\", COOKIE_NAME,\n+                                      \"=([^;]+)\", NULL);\n+\n+    /* Remember that ap_pregcomp could return null, so\n+       we will have to deal with this later in spot_cookie(). */\n+    dcfg->regexp = ap_pregcomp(p, dcfg->regexp_string, REG_EXTENDED);\n     return dcfg;\n }\n  ", "id": 47051, "time": "2003-11-09T04:09:51Z", "bug_id": 24483, "creation_time": "2003-11-09T04:09:51Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 47080, "time": "2003-11-10T04:56:44Z", "creator": "bojan@rexursive.com", "creation_time": "2003-11-10T04:56:44Z", "is_private": false, "text": "BTW, the segfault happens for me when Netscape and RFC2109 cookies are set.\nSetting CookieName to Apache gets rid of the problem.\n\nIf RFC2965 cookies are set, the problem is not the segfault, but rather the fact\nthat cookie simply isn't found. Therefore, every new connection generates yet\nanother cookie (as visible in the log). libapreq2 also sees the cookie as a\ndifferent one every time. Therefore, the session upkeeping cannot be done at all.\n\nIn any event, setting CookieName to Apache does not work around the above\nproblem for RFC2965 cookies. Not sure if the patch does..."}, {"count": 11, "tags": [], "bug_id": 24483, "attachment_id": null, "is_private": false, "id": 47163, "time": "2003-11-11T05:27:28Z", "creator": "manniwood@planet-save.com", "creation_time": "2003-11-11T05:27:28Z", "text": "Bojan Smojver, I recommend you use CookieStyle Netscape or CookieStyle Cookie\n(or the synonymous CookieStyle 2109) in httpd.conf, not CookieStyle Cookie2 (or\nthe synonymous CookieStyle RFC2965).\n\nI watched HTTP network traffic through Ethereal, and noted that while Apache\ncorrectly sends \"Cookie2:\" headers, Mozilla does not accept them. This is why\nyou see a new cookie each time in your logs: Apache is not finding the cookie\nbecause your browser is not accepting \"Cookie2:\" headers.\n\nThe following is my second try at a patch. It's more elegant than my first\npatch. It solves all of the problems (I tested it with or without the CookieName\ndirective, and with CookieStyle set to Apache, Cookie, and Cookie2 -- though\nMozilla doesn't yet accept Cookie2 headers, so I couldn't test cookie\ndetection). Like my previous patch, this patch\nhas not yet been assessed by anyone on the Apache developer's list.\n\nTake the patch that follows, copy it to a file called\nmod_usertrack_2.0.48.patch, copy mod_usertrack_2.0.48.patch to\nhttpd-2.0.48/modules/metadata, then run patch -p0 < mod_usertrack_2.0.48.patch\nand recompile.\n\n-Manni\n\nBojan Smojver, I recommend you use CookieStyle Netscape or CookieStyle Cookie\n(or the synonymous CookieStyle 2109) in httpd.conf, not CookieStyle Cookie2 (or\nthe synonymous CookieStyle RFC2965).\n\nI watched HTTP network traffic through Ethereal, and noted that while Apache\ncorrectly sends \"Cookie2:\" headers, Mozilla does not accept them. This is why\nyou see a new cookie each time in your logs: Apache is not finding the cookie\nbecause your browser is not accepting \"Cookie2:\" headers.\n\nThe following is my second try at a patch. It's more elegant than my first\npatch. It solves all of the problems (I tested it with or without the CookieName\ndirective, and with CookieStyle set to Apache, Cookie, and Cookie2 -- though\nMozilla doesn't yet accept Cookie2 headers, so I couldn't test cookie\ndetection). Like my previous patch, this patch\nhas not yet been assessed by anyone on the Apache developer's list.\n\nTake the patch that follows, copy it to a file called\nmod_usertrack_2.0.48.patch, copy mod_usertrack_2.0.48.patch to\nhttpd-2.0.48/modules/metadata, then run patch -p0 < mod_usertrack_2.0.48.patch\nand recompile.\n\n-Manni\n\n--- mod_usertrack-old.c\t2003-11-10 23:28:19.000000000 -0500\n+++ mod_usertrack.c\t2003-11-11 00:16:15.000000000 -0500\n@@ -199,6 +199,20 @@\n  * which has three subexpressions, $0..$2 */\n #define NUM_SUBS 3\n \n+static void set_and_comp_regexp(cookie_dir_rec *dcfg, \n+                                apr_pool_t *p,\n+                                const char *cookie_name) \n+{\n+    /* The goal is to end up with this regexp, \n+     * ^cookie_name=([^;]+)|;[\\t]+cookie_name=([^;]+) \n+     * with cookie_name obviously substituted either\n+     * with the real cookie name set by the user in httpd.conf, or with the\n+     * default COOKIE_NAME. */\n+    dcfg->regexp_string = apr_pstrcat(p, \"^\", cookie_name, \"=([^;]+)|;[ \\t]+\",\ncookie_name, \"=([^;]+)\", NULL);\n+\n+    dcfg->regexp = ap_pregcomp(p, dcfg->regexp_string, REG_EXTENDED);\n+}\n+\n static int spot_cookie(request_rec *r)\n {\n     cookie_dir_rec *dcfg = ap_get_module_config(r->per_dir_config,\n@@ -260,6 +274,11 @@\n     dcfg->cookie_domain = NULL;\n     dcfg->style = CT_UNSET;\n     dcfg->enabled = 0;\n+\n+    /* In case the user does not use the CookieName directive,\n+     * we need to compile the regexp for the default cookie name. */\n+    set_and_comp_regexp(dcfg, p, COOKIE_NAME);\n+\n     return dcfg;\n }\n \n@@ -345,18 +364,10 @@\n {\n     cookie_dir_rec *dcfg = (cookie_dir_rec *) mconfig;\n \n-    /* The goal is to end up with this regexp,\n-     * ^cookie_name=([^;]+)|;[ \\t]+cookie_name=([^;]+)\n-     * with cookie_name\n-     * obviously substituted with the real cookie name set by the\n-     * user in httpd.conf. */\n-    dcfg->regexp_string = apr_pstrcat(cmd->pool, \"^\", name,\n-                                      \"=([^;]+)|;[ \\t]+\", name,\n-                                      \"=([^;]+)\", NULL);\n-\n     dcfg->cookie_name = apr_pstrdup(cmd->pool, name);\n \n-    dcfg->regexp = ap_pregcomp(cmd->pool, dcfg->regexp_string, REG_EXTENDED);\n+    set_and_comp_regexp(dcfg, cmd->pool, name);\n+\n     if (dcfg->regexp == NULL) {\n         return \"Regular expression could not be compiled.\";\n     }\n"}, {"count": 12, "tags": [], "bug_id": 24483, "attachment_id": null, "is_private": false, "id": 47216, "time": "2003-11-11T20:49:29Z", "creator": "srevilak@g88.net", "creation_time": "2003-11-11T20:49:29Z", "text": "Similar behavior exists in version 1.3.29 (Solaris 7); \"CookieTracking On\" with \nno \"CookieName\" results in a SIGSEGV.  Explicitly setting CookieName as \nsuggested in \"Additional Comments From Manni Wood 2003-11-07 16:55\" appears to \nbe a successful workaround for 1.3.29 as well.\n\n#\n# Debugger trace of mod_usertrack segfault on apache 1.3.29, Solaris 7\n# (\"CookieTracking on\", no CookieName set in httpd.conf\n#\nBreakpoint 1, spot_cookie (r=0xe7950) at mod_usertrack.c:295\n295         cookie_dir_rec *dcfg = ap_get_module_config(r->per_dir_config,\n#\n#\n# show cookie_dir_rec\n#\n#\n(gdb) print *dcfg\n$8 = {enabled = 1, style = CT_NETSCAPE, format = CF_NORMAL, \n  cookie_name = 0x1 <Address 0x1 out of bounds>, \n  cookie_domain = 0x1 <Address 0x1 out of bounds>, \n  prefix_string = 0x190 <Address 0x190 out of bounds>, regexp_string = 0x0, \nregexp = 0x0}\n#\n#\n# Step further ...\n#\n#\n(gdb) s\n301         if (!dcfg->enabled) {\n(gdb) s\n305         if ((cookie_header = ap_table_get(r->headers_in,\n(gdb) s\n309             if (!ap_regexec(dcfg->regexp, cookie_header, NUM_SUBS, regm, \n0)) {\n#\n#\n# Show parameters passed to ap_regexec.  cookie_header appears\n# to hold data; dcfg->regexp is a null pointer\n#\n#\n(gdb) print cookie_header\n$9 = 0xe7360 \"Apache=172.19.30.174.114851068582299525\"\n(gdb) print dcfg->regexp\n$11 = (regex_t *) 0x0\n#\n#\n# Stepping into ap_regexec ...\n#\n#\n(gdb) s\n\nProgram received signal SIGSEGV, Segmentation fault.\n0xff1e88e0 in __regexec_C () from /usr/lib/libc.so.1\n#\n#\n# show backtrace\n#\n#\n#\n(gdb) bt\n#0  0xff1e88e0 in __regexec_C () from /usr/lib/libc.so.1\n#1  0x4412c in ap_regexec ()\n#2  0xfe591090 in spot_cookie (r=0xe7950) at mod_usertrack.c:309\n#3  0x20130 in run_method ()\n#4  0x20290 in ap_run_fixups ()\n#5  0x409e4 in process_request_internal ()\n#6  0x40f90 in ap_internal_redirect ()\n#7  0x401e4 in ap_die ()\n#8  0x402b8 in decl_die ()\n#9  0x4069c in process_request_internal ()\n#10 0x40aa0 in ap_process_request ()\n#11 0x33380 in child_main ()\n#12 0x3363c in make_child ()\n#13 0x33858 in startup_children ()\n#14 0x3431c in standalone_main ()\n#15 0x34f90 in main ()\n\n\n$ httpd -V\n\n$ /d/apache/bin/httpd -V\nServer version: Apache/1.3.29 (Unix)\nServer built:   Nov 11 2003 10:26:38\nServer's Module Magic Number: 19990320:15\nServer compiled with....\n -D EAPI\n -D EAPI_MM\n -D EAPI_MM_CORE_PATH=\"logs/httpd.mm\"\n -D HAVE_MMAP\n -D USE_MMAP_SCOREBOARD\n -D USE_MMAP_FILES\n -D HAVE_FCNTL_SERIALIZED_ACCEPT\n -D HAVE_SYSVSEM_SERIALIZED_ACCEPT\n -D HAVE_PTHREAD_SERIALIZED_ACCEPT\n -D DYNAMIC_MODULE_LIMIT=64\n -D HARD_SERVER_LIMIT=2048\n -D HTTPD_ROOT=\"/d/apache-1.3.29-20031117\"\n -D SUEXEC_BIN=\"/d/apache-1.3.29-20031117/bin/suexec\"\n -D DEFAULT_PIDLOG=\"logs/httpd.pid\"\n -D DEFAULT_SCOREBOARD=\"logs/httpd.scoreboard\"\n -D DEFAULT_LOCKFILE=\"logs/httpd.lock\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D TYPES_CONFIG_FILE=\"conf/mime.types\"\n -D SERVER_CONFIG_FILE=\"conf/httpd.conf\"\n -D ACCESS_CONFIG_FILE=\"conf/access.conf\"\n -D RESOURCE_CONFIG_FILE=\"conf/srm.conf\" \n\n"}, {"count": 13, "tags": [], "text": "That's right, Steve. When I introduced my mod_usertrack patch (and, sadly, bug)\nto mod_usertrack for the latest 2.0.x release, I also back-ported it to the\nlatest 1.3.x release, so the bug will be the same for 1.3.x as for 2.0.x, and\nthe workaround will be the same, as you have already discovered.\n\nI'm waiting for advice on the 2.0.x patch you see below from a developer who's\ncloser to the ASF than I am. Once I get an all clear, I'll submit the fix to the\nApache developer's mailing list as a 2.0.x patch as well as a back-ported 1.3.x\npatch.\n\n-Manni ", "attachment_id": null, "id": 47232, "creator": "manniwood@planet-save.com", "time": "2003-11-11T23:04:22Z", "bug_id": 24483, "creation_time": "2003-11-11T23:04:22Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 47235, "time": "2003-11-12T02:54:52Z", "creator": "erik@codefaktor.de", "creation_time": "2003-11-12T02:54:52Z", "is_private": false, "text": "*** Bug 24384 has been marked as a duplicate of this bug. ***"}, {"count": 15, "tags": [], "text": "manni: latest patch is looking good so far.  i'll give it a closer look \ntomorrow.  sorry i couldn't get it taken care of at apachecon last week... my \nnotebook's hard drive crashed!  doh!!  =)\n\nfyi, i put a notice on http://httpd.apache.org/ about this problem since lots \nof people seem to be hitting it.", "attachment_id": null, "id": 47986, "creator": "jwoolley@apache.org", "time": "2003-11-24T06:30:04Z", "bug_id": 24483, "creation_time": "2003-11-24T06:30:04Z", "is_private": false}, {"text": "\n  Please tag such reports with the FAQ keyword as well :)\n", "tags": [], "creator": "wrowe@apache.org", "is_private": false, "count": 16, "id": 48203, "time": "2003-11-26T22:08:57Z", "bug_id": 24483, "creation_time": "2003-11-26T22:08:57Z", "attachment_id": null}, {"count": 17, "tags": [], "text": "I'm somewhat busy, and did'nt see and become precocious.\nChecked with Mr. Manni Wood's patch.\nSince the same bug was checked also by the old Sun machine, Plathome was \nchanged into All.\n", "attachment_id": null, "id": 49779, "creator": "apache_bugzilla@ml.daiba.cx", "time": "2003-12-29T03:31:26Z", "bug_id": 24483, "creation_time": "2003-12-29T03:31:26Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 24483, "attachment_id": null, "is_private": false, "id": 50404, "time": "2004-01-12T14:18:32Z", "creator": "jim@apache.org", "creation_time": "2004-01-12T14:18:32Z", "text": "Patch backported for 1.3, passes tests and posted to list."}, {"count": 19, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 50776, "time": "2004-01-19T20:38:20Z", "creator": "erik@codefaktor.de", "creation_time": "2004-01-19T20:38:20Z", "is_private": false, "text": "*** Bug 26203 has been marked as a duplicate of this bug. ***"}, {"count": 20, "tags": [], "text": "Fix committed to 2.1, 2.0 and 1.3:\n\nhttp://cvs.apache.org/viewcvs.cgi/httpd-2.0/modules/metadata/mod_usertrack.c#rev1.42\nhttp://cvs.apache.org/viewcvs.cgi/httpd-2.0/modules/metadata/mod_usertrack.c#rev1.39.2.3\nhttp://cvs.apache.org/viewcvs.cgi/apache-1.3/src/modules/standard/mod_usertrack.c#rev1.60\n", "is_private": false, "id": 50777, "creator": "erik@codefaktor.de", "time": "2004-01-19T20:39:49Z", "bug_id": 24483, "creation_time": "2004-01-19T20:39:49Z", "attachment_id": null}, {"count": 21, "text": "Um, it looks like Jim committed the fix for this bug to 1.3, but it hasn't \ngotten committed yet to 2.0 or 2.1 (for no particular reason than I never got \naround to it).  Reopening until that happens.", "creator": "jwoolley@apache.org", "attachment_id": null, "id": 50787, "time": "2004-01-19T22:47:20Z", "bug_id": 24483, "creation_time": "2004-01-19T22:47:20Z", "tags": [], "is_private": false}, {"count": 22, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 50788, "time": "2004-01-19T22:54:40Z", "creator": "erik@codefaktor.de", "creation_time": "2004-01-19T22:54:40Z", "is_private": false, "text": "Oh yeah, thanks Cliff, you're right. I was blindly looking at the places where the problem was \nintroduced :( "}, {"count": 23, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 50816, "time": "2004-01-20T14:54:57Z", "creator": "manniwood@planet-save.com", "creation_time": "2004-01-20T14:54:57Z", "is_private": false, "text": "Thanks, guys, for helping patch this. --Manni"}, {"count": 24, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 54642, "time": "2004-03-25T08:14:00Z", "creator": "nd@perlig.de", "creation_time": "2004-03-25T08:14:00Z", "is_private": false, "text": "Fixed in 2.0.49. Please upgrade."}, {"count": 25, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 54780, "time": "2004-03-28T00:48:46Z", "creator": "nd@perlig.de", "creation_time": "2004-03-28T00:48:46Z", "is_private": false, "text": "*** Bug 28000 has been marked as a duplicate of this bug. ***"}, {"count": 26, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 55865, "time": "2004-04-15T21:37:41Z", "creator": "nd@perlig.de", "creation_time": "2004-04-15T21:37:41Z", "is_private": false, "text": "Changes on a closed fixed bug are not that clever. Please give more details if\nyou want to reopen it. Thanks."}, {"count": 27, "tags": [], "text": "mod_usertrack is segfaulting for me on Apache 1.3.33 (Debian package\n1.3.33-6 on AMD64).\n\nCookieTracking on --> child processes segfault\n\nSetting CookieName makes no difference.\n\nThe same Debian package recompiled for i386 works.  It only fails on AMD64.\n\nstrace is not very informative.\n\nThe stack trace from the segfault is:\n\n#0  0x00000000004317da in regcomp ()\n#1  0x000000000043133d in regcomp ()\n#2  0x0000000000430954 in regcomp ()\n#3  0x00000000004305f1 in regcomp ()\n#4  0x00002aaaac522a70 in ?? () from /usr/lib/apache/1.3/mod_usertrack.so\n#5  0x000000000040ecc1 in ap_cleanup_method_ptrs ()\n#6  0x00000000004203ca in ap_some_auth_required ()\n#7  0x0000000000420555 in ap_process_request ()\n#8  0x00000000004196ce in ap_child_terminate ()\n#9  0x000000000041991d in ap_child_terminate ()\n#10 0x0000000000419996 in ap_child_terminate ()\n#11 0x000000000041a329 in ap_child_terminate ()\n#12 0x000000000041a805 in main ()\n\n(Sorry, no symbols in Debian packages - I will try to get those next).\n\nRich.", "attachment_id": null, "id": 87250, "creator": "rich@annexia.org", "time": "2006-03-25T12:30:08Z", "bug_id": 24483, "creation_time": "2006-03-25T12:30:08Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 24483, "attachment_id": null, "is_private": false, "id": 87251, "time": "2006-03-25T12:49:42Z", "creator": "rich@annexia.org", "creation_time": "2006-03-25T12:49:42Z", "text": "This is the full stack trace.  It's different from the one above ...  I think\nbecause I've now got the cookie and it's trying to parse it.\n\n#0  0x00000000004317da in sstep (g=0x66b9b0, start=-2039141192980765773,\n    stop=34, bef=8, ch=132, aft=8) at engine.c:909\n#1  0x000000000043133d in sslow (m=0x7fffffbc6410,\n    start=0xe3b383e38983e3b3 <Address 0xe3b383e38983e3b3 out of bounds>,\n    stop=0x83edf0 \"Apache=10.0.1.138.132001143290662991;\n__utma=170107067.1695268367.1143290799.1143290799.1143290799.1;\n__utmb=170107067; __utmc=170107067;\n__utmz=170107067.1143290799.1.1.utmccn=(direct)|utmcsr=(direct\"..., startst=35,\n    stopst=34) at engine.c:738\n#2  0x0000000000430954 in sdissect (m=0x7fffffbc6410,\n    start=0xe3b383e38983e3b3 <Address 0xe3b383e38983e3b3 out of bounds>,\n    stop=0x83edf0 \"Apache=10.0.1.138.132001143290662991;\n__utma=170107067.1695268367.1143290799.1143290799.1143290799.1;\n__utmb=170107067; __utmc=170107067;\n__utmz=170107067.1143290799.1.1.utmccn=(direct)|utmcsr=(direct\"...,\n    startst=120993912, stopst=34) at engine.c:371\n#3  0x00000000004305f1 in smatcher (g=0x66b9b0,\n    string=0x8 <Address 0x8 out of bounds>, nmatch=3, pmatch=0x7fffffbc64c0,\n    eflags=0) at engine.c:157\n#4  0x00002aaaac522a70 in spot_cookie (r=0x83a8d0) at mod_usertrack.c:310\n#5  0x000000000040ecc1 in run_method (r=0x83a8d0, offset=-1987845197,\n    run_all=1) at http_config.c:327\n#6  0x00000000004203ca in process_request_internal (r=0x83a8d0)\n    at http_request.c:1293\n#7  0x0000000000420555 in ap_process_request (r=0x83a8d0)\n    at http_request.c:1314\n#8  0x00000000004196ce in child_main (child_num_arg=8628432)\n    at http_main.c:4873\n#9  0x000000000041991d in make_child (s=0x5540b0, slot=0, now=1143290662)\n    at http_main.c:4997\n#10 0x0000000000419996 in startup_children (number_to_start=5)\n    at http_main.c:5079\n#11 0x000000000041a329 in standalone_main (argc=8552640,\n    argv=0xe3b383e38983e3b3) at http_main.c:5411\n#12 0x000000000041a805 in main (argc=2, argv=0x7fffffbc67c8)\n    at http_main.c:5768\n\nmod_usertrack.c line 310 is the second line here (the one\ncontaining ap_regexec ...)\n\n    if ((cookie_header = ap_table_get(r->headers_in, \"Cookie\"))) {\n        if (!ap_regexec(dcfg->regexp, cookie_header, NUM_SUBS, regm, 0)) {\n            char *cookieval = NULL;\n            /* Our regexp,\n             * ^cookie_name=([^;]+)|;[ \\t]+cookie_name=([^;]+)\n             * only allows for $1 or $2 to be available. ($0 is always\n             * filled with the entire matched expression, not just\n             * the part in parentheses.) So just check for either one\n             * and assign to cookieval if present. */\n            if (regm[1].rm_so != -1) {\n                cookieval = ap_pregsub(r->pool, \"$1\", cookie_header,\n                                       NUM_SUBS, regm);\n            }\n            if (regm[2].rm_so != -1) {\n                cookieval = ap_pregsub(r->pool, \"$2\", cookie_header,\n                                       NUM_SUBS, regm);\n            }\n            /* Set the cookie in a note, for logging */\n            ap_table_setn(r->notes, \"cookie\", cookieval);\n\n            return DECLINED;    /* There's already a cookie, no new one */\n        }\n    }\n    make_cookie(r);\n    return OK;                  /* We set our cookie */\n"}, {"count": 29, "tags": [], "bug_id": 24483, "attachment_id": null, "id": 87252, "time": "2006-03-25T12:52:52Z", "creator": "rich@annexia.org", "creation_time": "2006-03-25T12:52:52Z", "is_private": false, "text": "(gdb) frame 4\n#4  0x00002aaaac522a70 in spot_cookie (r=0x83a8d0) at mod_usertrack.c:310\n310             if (!ap_regexec(dcfg->regexp, cookie_header, NUM_SUBS, regm, 0)) {\n(gdb) print cookie_header\n$1 = 0x83edd8 \"Apache=10.0.1.138.132001143290662991;\n__utma=170107067.1695268367.1143290799.1143290799.1143290799.1;\n__utmb=170107067; __utmc=170107067;\n__utmz=170107067.1143290799.1.1.utmccn=(direct)|utmcsr=(direct\"...\n(gdb) print regm\n$2 = {{rm_so = -1, rm_eo = 0}, {rm_so = 0, rm_eo = 0}, {rm_so = 0, rm_eo = 0}}\n(gdb) print NUM_SUBS\n$3 = 3\n(gdb) print dcfg->regexp\n$4 = (regex_t *) 0x73bf20\n(gdb) print *dcfg->regexp\n$5 = {re_magic = 62053, re_nsub = 2, re_endp = 0x0, re_g = 0x66b9b0}\n"}, {"count": 30, "tags": [], "text": "The issue for which this bug was re-opened is AFAICT only the crash in regcomp()\net al on x86_64 - which is a different bug, bug 31858.  Marking CLOSED again.", "attachment_id": null, "id": 97817, "creator": "jorton@redhat.com", "time": "2007-01-09T05:12:03Z", "bug_id": 24483, "creation_time": "2007-01-09T05:12:03Z", "is_private": false}]
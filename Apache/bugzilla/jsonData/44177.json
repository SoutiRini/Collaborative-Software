[{"count": 0, "tags": [], "creator": "Matej.Spiller@siol.net", "attachment_id": null, "is_private": false, "id": 112582, "time": "2008-01-07T07:42:07Z", "bug_id": 44177, "creation_time": "2008-01-07T07:42:07Z", "text": "When signature has xslt transformation reference, there is a problem, because\nxalan changes new lines in transformed output to \\n on linux and \\r\\n on\nwindows, regardles of newline type in input file. Consequence is that signature\nis invalid when validating on different OS. This should be consistent everywhere\nif signature is to be valid.\n\nYou could use something like\nTransformer.setOutputProperty(\"{http://xml.apache.org/xalan}line-separator\",\"\\n\");\n\n.Net uses \\n as newline separator when using xslt transformation.\n\nBut what does w3c standard say ?"}, {"count": 1, "tags": [], "bug_id": 44177, "attachment_id": null, "text": "(In reply to comment #0)\n> When signature has xslt transformation reference, there is a problem, because\n> xalan changes new lines in transformed output to \\n on linux and \\r\\n on\n> windows, regardles of newline type in input file. Consequence is that signature\n> is invalid when validating on different OS. This should be consistent everywhere\n> if signature is to be valid.\n> \n> You could use something like\n> Transformer.setOutputProperty(\"{http://xml.apache.org/xalan}line-separator\",\"\\n\");\n> \n> .Net uses \\n as newline separator when using xslt transformation.\n> \n> But what does w3c standard say ?\n\nSection 6.6.5 [1] of the XMLDSig W3C recommendation says:\n\n\"The output of this transform is an octet stream. The processing rules for the\nXSL style sheet or transform element are stated in the XSLT specification\n[XSLT]. We RECOMMEND that XSLT transform authors use an output method of xml for\nXML and HTML. As XSLT implementations do not produce consistent serializations\nof their output, we further RECOMMEND inserting a transform after the XSLT\ntransform to canonicalize the output. These steps will help to ensure\ninteroperability of the resulting signatures among applications that support the\nXSLT transform. Note that if the output is actually HTML, then the result of\nthese steps is logically equivalent [XHTML].\"\n\nTry adding a C14N Transform after the XSLT Transform.\n\n[1] http://www.w3.org/TR/xmldsig-core/#sec-XSLT\n\n\n", "id": 112596, "time": "2008-01-07T11:11:48Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-01-07T11:11:48Z", "is_private": false}, {"count": 2, "tags": [], "creator": "Matej.Spiller@siol.net", "attachment_id": null, "is_private": false, "id": 112624, "time": "2008-01-08T04:18:08Z", "bug_id": 44177, "creation_time": "2008-01-08T04:18:08Z", "text": "> Try adding a C14N Transform after the XSLT Transform.\nIt is impossible to add C14N since output must be in plain text. We are creating\npart of the signature by hand using only SAX parsing for performance reasons.\n\nI believe that at least XML Security by itself, should produce the same output\n/digest, regardless of the OS used.\n\nWhen DOM parses xml it already normalizes new lines. Only problem is that XSLT\nat the very end of transformation replaces it with OS specific. Because XSLT\ninput as DOM is already always normalized\n(http://www.w3.org/TR/1998/REC-xml-19980210#sec-line-ends). And at least for\ndigital signature transformation it should remain normalized.\n\nFor example .NET SignedXml, when transforming xslt, leaves newlines as \\n.\n"}, {"count": 3, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "is_private": false, "id": 112710, "time": "2008-01-09T13:28:13Z", "bug_id": 44177, "creation_time": "2008-01-09T13:28:13Z", "text": "I'm ok with your suggested fix, though it is implementation-specific.\nUnfortunately, I don't think there is a standard JAXP property that does the\nsame thing."}, {"attachment_id": null, "tags": [], "creator": "sean.mullan@oracle.com", "is_private": false, "count": 4, "id": 112819, "time": "2008-01-14T08:33:20Z", "bug_id": 44177, "creation_time": "2008-01-14T08:33:20Z", "text": "By the way, as a workaround, have you tried specifying the property in the\nstylesheet itself? Something like:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\" \n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n                xmlns:xalan=\"http://xml.apache.org/xalan\">\n                \n  <xsl:output method=\"xml\" \n              encoding=\"UTF-8\"\n              indent=\"yes\" \n              xalan:line-separator=\"\\n\"/>\n\n"}, {"count": 5, "tags": [], "text": "> By the way, as a workaround, have you tried specifying \n> the property in the stylesheet itself? Something like:\nYes I have and it works for our signatures. However it is still parser specific.\nProblem is, that we receive signed xml's and transformations generated by third\nparties.\n\nOlder xalan versions didn't have OS specific endline.", "is_private": false, "bug_id": 44177, "id": 112823, "time": "2008-01-14T08:47:55Z", "creator": "Matej.Spiller@siol.net", "creation_time": "2008-01-14T08:47:55Z", "attachment_id": null}, {"count": 6, "text": "Fixed as suggested. Please build the latest sources and test my fix to ensure\nthat it fixes the problem.", "bug_id": 44177, "attachment_id": null, "id": 112995, "time": "2008-01-18T10:52:30Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-01-18T10:52:30Z", "tags": [], "is_private": false}]
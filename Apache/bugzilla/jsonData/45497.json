[{"count": 0, "tags": [], "creator": "jason@cipreporting.com", "attachment_id": 22326, "id": 119102, "time": "2008-07-29T09:55:10Z", "bug_id": 45497, "creation_time": "2008-07-29T09:55:10Z", "is_private": false, "text": "Created attachment 22326\nPatch to make win32 MaxRequestsPerChild restart processes correctly after a thread terminate timeout\n\nWhen using MaxRequestsPerChild to force Apache to cycle its process after a certain number of requests - if a child thread is serving a response which takes more than Timeout (Default of 300 seconds) to terminate, it will be killed with ThreadTerminate.\n\nHowever, the slot(s) for the threads terminated the hard way in the scoreboard are leaked (Not marked as dead).  The child which has been started to replace the terminating child will not be able to start all 'ap_threads_per_child' threads because of the leaked scoreboard slot, and therefore never leave the starting thread state.  The effect of this is that the hung child thread stops cycling thus not honoring the MaxRequestsPerChild setting.\n\nAfter review of the code I believe the intention was to use 'apr_hash_make' to setup a hash of child thread handles and scoreboard slots used on hard termination to find the slot of the aborted thread to mark it dead.  However, in practice this hash system fails to reproduce the slot, returns NULL, and finally throws an exception.\n\nI tried to debug why this was happening and was not successful.  In general, a review of the code shows a rather sloppy implementation using global variables which are lazy initialized in the child thread, never really closed, shared with worker threads by the global scope, and never really cleaned up well.  Further, the fact that the child is restarting probably indicates a lot of handle leaking since they are never closed.  I believe the problem is related to the global scope of the 'pchild' context used with 'apr_pool_create' which is definitely in contention between the child threads which exist at the same time during the shutdown of one child and the start of the new one.  All in all, I think this whole file could use rewritten but is beyond my capabilities at this time.\n\nAs a solution/work around/hack I removed the use the apr hash lookup for mapping thread handles to slots, which was only used in the main child thread.  I replaced it simpler mapping using the variable sb_assignments, identical to the child_handles array, except it is never truncated as threads die.  Then on hard termination sb_assignments is used to find the handle of the thread being killed.  The offset of the thread handle in sb_assignments is the same offset as the scoreboard location for the thread - and thus can be cleaned up reliably.\n\nThis has been tested by myself, and is working in production - properly cycling threads and not throwing exceptions, even in the case of worker threads timing out and being killed the hard way.\n\nPatch is attached - Sorry for the lengthy description."}, {"count": 1, "tags": [], "bug_id": 45497, "text": "There have been 4 new releases of Apache 2.2 in the last year, but this bug still exists. There isn't even a discussion about the patch.\n\nThis is IMHO a very grave bug since it leaves apache unusable for production deployment if eg. mod_php is used and there are lots of HTTP requests.\n\nWith the prefork MPM, memleaks are not a big issue, since the worker process will be terminated sometime, thus the memory be freed. This doesn't happen with the winnt MPM because after the request has been processed, only the thread will terminate, thus memleake accumulate over time. I have seen apache processes growing over 1.5 GB!\n\nLimiting MaxRequestsPerChild would be a workaround, but this bug prevents its use because there is a good chance that the worker process won't be restarted.\n\nOk you could blame mod_php (or any other apache module) for its memleaks, however that's not the point:\n\n1) We all know there will be memleaks here and then \n2) The Apache directive MaxRequestsPerChild does not work as documented with the winnt MPM", "id": 129646, "time": "2009-08-12T03:56:43Z", "creator": "panamajo@arcor.de", "creation_time": "2009-08-12T03:56:43Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 45497, "attachment_id": null, "id": 129651, "time": "2009-08-12T04:54:06Z", "creator": "poirier@pobox.com", "creation_time": "2009-08-12T04:54:06Z", "is_private": false, "text": "I don't follow this new comment - the original problem description said nothing about memory leaks in mod_php.  Was it supposed to go on a different bug report?"}, {"count": 3, "tags": [], "bug_id": 45497, "attachment_id": null, "text": "No, it was not supposed to go on a different bug report.\n\nMentioning mod_php was only to explain the severity of this bug, using a real-life setup.", "id": 131140, "time": "2009-10-15T09:09:26Z", "creator": "panamajo@arcor.de", "creation_time": "2009-10-15T09:09:26Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 45497, "attachment_id": null, "id": 131141, "time": "2009-10-15T09:25:40Z", "creator": "jason@cipreporting.com", "creation_time": "2009-10-15T09:25:40Z", "is_private": false, "text": "I am also surprised that this has not been considered for inclusion in the official release.  If you run Apache on Windows and use modules, some times those modules leak memory.  Sure, I would like to fix those modules but that is not always practical and that is why Apache implements MaxRequestsPerChild to provide a work around to this wide spread issue by recycling processes to free leaked memory transparently.\n\nThe current implementation in production for Win32 works as long as the threads terminate gracefully - however, if a child thread becomes locked or takes too long to shut down the thread is terminated but its thread slot is never recovered.\n\nThe lack of recovery of all thread slots means that the next process never leaves the startup state because it requires 100% of its threads to be started.  It will continue to serve requests while in the start up state but it will never recyle processes again thus allowing the memory leaks to accumulate to a point of failure.\n\nIMHO - On Win32 if you are using Apache modules and are using MaxRequestsPerChild your system is at risk of failure due to this defect.  I have attached a patch to fix this which has been running flawlessly in our environment for well over a year now.\n\nIt is possible that this is a pattern which is replicated in other processor modules - I did not check that myself."}, {"count": 5, "attachment_id": null, "bug_id": 45497, "is_private": false, "id": 132864, "time": "2009-12-16T06:37:39Z", "creator": "wonlay@gmail.com", "creation_time": "2009-12-16T06:37:39Z", "tags": [], "text": "Does this bug really show only on winnt platforms?\nI'm encountering a similar problem on a Debian Linux system with the worker mpm.\n\nsome children died properly after MaxRequestsPerChild, but there are some wont die until you give it a kill -9(kill cannot stop it). but the new children are started.\nso, after a period of time, there will be a lot of process consuming lots of memory.\n\nand someone have the same problem on AIX, and has post it on the userslist:\nhttp://mail-archives.apache.org/mod_mbox/httpd-users/200905.mbox/%3C269917.60486.qm@web94908.mail.in2.yahoo.com%3E"}, {"count": 6, "tags": [], "creator": "matty.rnld@gmail.com", "attachment_id": null, "id": 137065, "time": "2010-05-24T08:28:32Z", "bug_id": 45497, "creation_time": "2010-05-24T08:28:32Z", "is_private": false, "text": "Hi,\n\nCan any one tell me how to reroduce this problem on Unix system?\n\nIt would be helpful if someone can tell me the exacts stpes followed to reproduce the problem.\n\nThanks,\nMatty"}, {"count": 7, "attachment_id": null, "bug_id": 45497, "is_private": false, "id": 137072, "time": "2010-05-24T11:02:26Z", "creator": "trawick@apache.org", "creation_time": "2010-05-24T11:02:26Z", "tags": [], "text": ">Can any one tell me how to reroduce this problem on Unix system?\nNo; this bug report is for a specific problem in Windows-specific code.\n\nOthers may have problem symptoms related to graceful restart/MaxRequestsPerChild, but unless it is this same issue (scoreboard slot leaked) on Windows then they should look for a better match in the bug db or, failing that, open a new one."}]
[{"count": 0, "attachment_id": null, "creator": "shorea@amazon.com", "text": "Customer reported an issue with non-serializable objects when using our DynamoDB Session manager (https://github.com/aws/aws-dynamodb-session-tomcat/issues/30). After digging into the code it looks like StandardSession is attempting to do several things when giving non-serializable attributes. For top level objects that don't implement serializable it silently removes it. That code is working fine although I am a little wary that it doesn't fail as this could hide bugs in the users code and make it difficult for them to determine why a certain attribute isn't being persisted to the backing store. After that StandardSession attempts to write the remaining attributes to the ObjectOutputStream. If a serialization exception is encountered here (i.e. some object in the object graph does not implement Serializable) then the exception is caught and a special indicator NOT_SERIALIZED is written to the object stream and a warning is logged. Now internally ObjectOutputStream is handling the same exception and writing it's own special marker, TC_EXCEPTION, and the serialized exception object to the stream. This is written before StandardSession has a chance to write NOT_SERIALIZED. In StandardSession.readObject there is logic to skip deserializing any objects that have been written to the stream as NOT_SERIALIZED. This code can never actually be executed though as ObjectInputStream is checking if there are any occurences of TC_EXCEPTION and will deserialize the exception object, wrap it in a WriteAbortedException and throw it out. This causes a session with non-serializable objects in the attributes to be written \"successfully\" but causes an exception to be thrown when attempting to read that same session.\n\nI understand modifying StandardSession to now throw exceptions when non-serializable objects are encountered could be considered a breaking change so I propose adding some kind of overload or configuration to enable this behavior for users that want to opt in. Failing fast when non-serializable attributes are detected seems like the right way to go as this should be fixed in the customers code. I'm willing to submit a patch for this although I wanted to open the issue first to make sure you concur with my assessment and coding up a patch is worth my time.", "id": 184767, "time": "2015-08-26T17:02:30Z", "bug_id": 58284, "creation_time": "2015-08-26T17:02:30Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 58284, "text": "I've written some unit tests that confirm the behaviour you've reported.\n\nI'm currently leaning towards trying to implement what the current code appears to be trying to do which is to log a warning but to carry on.", "id": 184795, "time": "2015-08-27T19:57:33Z", "creator": "markt@apache.org", "creation_time": "2015-08-27T19:57:33Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 58284, "attachment_id": null, "text": "Thanks for the update! If I understand correctly the suggested change would be to do away with the NOT_SERIALIZED marker in StandardSession and rely on TC_EXCEPTION in ObjectOutputStream. In write object we would catch the NotSerializableException, log a warning, and carry on. In read object we would catch the WriteAbortedException (potentially with additional checks to make sure it's due to a NonSerializableException), log a warning, and carry on. Is my understanding correct?", "id": 184798, "time": "2015-08-27T20:41:56Z", "creator": "shorea@amazon.com", "creation_time": "2015-08-27T20:41:56Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 184799, "time": "2015-08-27T20:46:24Z", "bug_id": 58284, "creation_time": "2015-08-27T20:46:24Z", "tags": [], "text": "Exactly."}, {"text": "Sounds good to me. Would you prefer I submit a patch for this?", "tags": [], "bug_id": 58284, "is_private": false, "count": 4, "id": 184829, "time": "2015-08-28T16:03:26Z", "creator": "shorea@amazon.com", "creation_time": "2015-08-28T16:03:26Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "Patches are always welcome!", "is_private": false, "id": 184832, "creation_time": "2015-08-28T17:07:51Z", "time": "2015-08-28T17:07:51Z", "creator": "chris@christopherschultz.net", "bug_id": 58284, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 58284, "attachment_id": null, "text": "Great, I'll get started on it. Thanks for the guidance.", "id": 184833, "time": "2015-08-28T17:08:59Z", "creator": "shorea@amazon.com", "creation_time": "2015-08-28T17:08:59Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 58284, "text": "Any progress?", "id": 185017, "time": "2015-09-07T18:44:52Z", "creator": "markt@apache.org", "creation_time": "2015-09-07T18:44:52Z", "is_private": false, "attachment_id": null}, {"count": 8, "attachment_id": null, "creator": "markt@apache.org", "text": "Ping? I'm likely to be in a position to start the next 8.0.x release soon and this needs to be fixed before the tag. If no patch is forthcoming, I'll likely end up writing the patch myself.", "id": 185252, "time": "2015-09-15T12:50:16Z", "bug_id": 58284, "creation_time": "2015-09-15T12:50:16Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "shorea@amazon.com", "is_private": false, "id": 185263, "attachment_id": null, "bug_id": 58284, "creation_time": "2015-09-15T18:53:59Z", "time": "2015-09-15T18:53:59Z", "text": "Hey sorry the the delay in response. I was out of the office last week and haven't had a chance to start this. How soon is soon? I probably won't be able to get to this until later in the week."}, {"count": 10, "tags": [], "bug_id": 58284, "attachment_id": null, "text": "You probably have a day or two. I'll update the bug when I reach the point where I need the patch. If you can update it as well when you start work we should be able to avoid duplicating effort.", "id": 185266, "time": "2015-09-15T19:32:15Z", "creator": "markt@apache.org", "creation_time": "2015-09-15T19:32:15Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 58284, "text": "Will do. Thanks Mark.", "id": 185267, "time": "2015-09-15T19:32:59Z", "creator": "shorea@amazon.com", "creation_time": "2015-09-15T19:32:59Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 58284, "attachment_id": 33114, "text": "Created attachment 33114\nPatch for bug\n\nHad some test failures but I think it's my local setup. Could you run it through the test suite to make sure it's good.", "id": 185326, "time": "2015-09-18T00:58:09Z", "creator": "shorea@amazon.com", "creation_time": "2015-09-18T00:58:09Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 58284, "text": "Many thanks for the patch and the updated test case.\n\nI have applied it (with some very minor cosmetic changes) to trunk, 8.0.x (for 8.0.27 onwards) and 7.0.x (for 7.0.65 onwards).", "id": 185387, "time": "2015-09-21T15:39:40Z", "creator": "markt@apache.org", "creation_time": "2015-09-21T15:39:40Z", "is_private": false, "attachment_id": null}, {"count": 14, "attachment_id": null, "creator": "shorea@amazon.com", "text": "Fantastic. Thanks!", "id": 185389, "time": "2015-09-21T16:33:28Z", "bug_id": 58284, "creation_time": "2015-09-21T16:33:28Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "creator": "lc66223@yahoo.com", "is_private": false, "id": 88599, "attachment_id": null, "bug_id": 39438, "creation_time": "2006-04-27T23:53:11Z", "time": "2006-04-27T23:53:11Z", "text": "As definded in javax.servlet.jsp.JspContext in J2EE 1.4, getVariableResolver()\nis an abstract method and this provides an opportunity for a custom tag to use\nthe standard JSTL evaluation with a custom VariableResolver. But the standard\nJSTL (standard-110_13) is not using the VariableResolver provided by\ngetVariableResolver() in the subclass of JspContext. \n\nIn standard-110_13, when\norg.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager::evaluate()\nis called, it delegates the call to\norg.apache.taglibs.standard.lang.jstl.Evaluator::evaluate(). The\nEvaluator::evaluate() then uses ELEvaluator::evaluate() to evaluate the\nexpression. But ELEvaluator is always constructed with JSTLVariableResolver and\nignores the VariableResolver in PageContext. As the API definition of JspContext\nin J2EE 1.4, the getVariableResolver() is an abstract method and the custom tag\nis allowed to provide the custom PagaContext and then the custom\nVariableResolver. So the custom tag can still use the standard JSTL Evaluator\nbut with the custom VariableResolver. Is there any reason why the custom\nVariableResolver in PageContext is not used in the standard JSTL ELEvaluator?"}, {"count": 1, "tags": [], "bug_id": 39438, "text": "As the Standard taglib is in maintenance mode, I'm marking this enhancement as\nWONTFIX and passing it along to the Glassfish reference implementation:\n\nhttps://glassfish.dev.java.net/issues/show_bug.cgi?id=2616", "id": 100401, "time": "2007-03-14T16:40:57Z", "creator": "bayard@apache.org", "creation_time": "2007-03-14T16:40:57Z", "is_private": false, "attachment_id": null}]
[{"attachment_id": 35500, "tags": [], "bug_id": 61733, "text": "Created attachment 35500\nPatch to recalculate lb_mult after pulling from shm\n\nSteps to reproduce:\nAlter the lbfactor of one subworker through jkstatus to a value that causes the lbmult to need to be updated for other subworkers. You need multiple subworkers configured and multiple web server processes to be running at the point the status change is made.\n\nExpected result:\nAll processes pull in the new lbfactor for the changed subworker, and lbmult for all the other updated subworkers.\nRequests are balanced appropriately for the new factor configuration.\n\nActual result:\nAll processes pull in the new lbfactor for the changed subworker, however only the process processing the status change sees the lbmult values change for the other subworkers. All other processes keep the original lbmult values.\nRequests are not correctly balanced.\n\nThis happens because lbmult is expected to be calculated by the status worker when it updates the factor, and then pushed to shm. The status worker, however, only updates the sequence for the subworker being edited and not those receiving new lbmult values. As a result the other processes do not observe a change to the other subworkers, and do not pull the lbmult change.\n\nThis patch moves responsibility for calculating the local mult values to the jk_lb_pull function. Processes will now recalculate their own view of the mult values after pulling from shm, rather than obtaining it from shm. Since the values are based on the current weights all processes will reach the same conclusion.", "count": 0, "id": 201965, "time": "2017-11-07T09:56:32Z", "creator": "jonathan.oddy@transferwise.com", "creation_time": "2017-11-07T09:56:32Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 61733, "attachment_id": 35544, "is_private": false, "id": 202331, "time": "2017-11-22T10:56:53Z", "creator": "markt@apache.org", "creation_time": "2017-11-22T10:56:53Z", "text": "Created attachment 35544\nPossible alternative solution\n\nHaving reviewed the source code it appears that after the lb_factor is changed the shared memory is updated before the lb_mult is recalculated. I wonder if swapping the order of those actions would be an alternative fix? I have attached a possible patch."}, {"count": 2, "tags": [], "creator": "jonathan.oddy@transferwise.com", "is_private": false, "text": "I hadn't spotted that, but I don't think it helps. jk_lb_push() only pushes changes for subworkers where the sequence number has changed. update_worker() sets the sequence number to -1 for the subworker that had its weight explicitly changed, however update_mult() affects the other subworkers as well.\n\nI guess an alternative solution would be for update_worker() to set sequence to -1 for all subworkers if JK_STATUS_NEEDS_UPDATE_MULT?", "id": 202333, "time": "2017-11-22T11:24:10Z", "bug_id": 61733, "creation_time": "2017-11-22T11:24:10Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "That sounds reasonable. That does seem to be consistent with the general approach which looks to be calculate / update stuff once, put in in shared memory, have everything that needs to update from shared memory.", "is_private": false, "id": 202336, "creator": "markt@apache.org", "time": "2017-11-22T12:11:32Z", "bug_id": 61733, "creation_time": "2017-11-22T12:11:32Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 61733, "attachment_id": 35547, "is_private": false, "id": 202343, "time": "2017-11-22T15:57:08Z", "creator": "jonathan.oddy@transferwise.com", "creation_time": "2017-11-22T15:57:08Z", "text": "Created attachment 35547\nForce update all subworkers for multiplier change\n\nHere's an attempt at doing that.\n\nThis hasn't been as heavily tested as my original patch.\n\nHowever, I'm now wondering if it ought to be treated like lb_value, and read straight from shm rather than being copied to lb_sub_worker. That'd be simpler, and also get rid of the lag on lb_mult changes being picked up everywhere. Are there any advantages to it being synced to lb_sub_worker? I wondered if there was some performance implication, but if that's the case then access to lb_value would surely be much more of a bottleneck already."}, {"count": 5, "tags": [], "bug_id": 61733, "attachment_id": 35549, "id": 202352, "time": "2017-11-22T21:45:51Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2017-11-22T21:45:51Z", "is_private": false, "text": "Created attachment 35549\nReorder update actions and introduce flag for demanding updates for all members\n\nI think both of your analysis are right:\n\n- we only sync via shared memory lb_mult for the worker whose factor changed\n- the order of steps in case only one member is changes is wrong\n\nThe attached patch should fix both issues, correct the order - similar to what Mark suggests - plus letting jk_lb_push know, that it should not only push none or one member, but instead needs to push all members of an lb. To make this possible we change the signature of jk_lb_push and introduce a new flag.\n\nThe patch compiles, but I'm short of time to aczually test it. it would be great if one or both of you could give it a try.\n\nComments very welcome."}, {"count": 6, "tags": [], "creator": "jonathan.oddy@transferwise.com", "is_private": false, "text": "Hi,\nThe \"Force update all subworkers for multiplier change\" from my previous comment also includes the reordering. Updating the sequence numbers to -1 for all subworkers, as in my patch, is consistent with how updates are already pushed by the status worker. It does feel rather ugly though.\n\nYour change to jk_lb_push feels like it might lead to a cleaner implementation, but if so it'd be good to also get rid of the existing sequence = -1 usage for lb and wr in a similar fashion. Also you seem to have deleted a wr->sequence = -1. Without that I think explicit changes to a worker that don't trigger a multiplier change won't be pushed.", "id": 202359, "time": "2017-11-23T09:44:51Z", "bug_id": 61733, "creation_time": "2017-11-23T09:44:51Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "text": "Created attachment 35550\nLike update_shm_mult.patch, but fix missing sequence nummber setting in single member update case\n\nThanks for pointing at the missing sequence number update in the single member update case. I had removed it intentionally when I originally set push_all_members always to JK_TRUE there, but then forgot to add it back for the JK_FALSE case.\n\nCan you actually please test the (v2) patch?\n\nConcerning other places of using sequence number value \"-1\" as a side effect, I currently do not plan to work on removing this opaque feature. mod_jk is kept quite stable since a few years so I think most energy will go into fixing bugs, not improving code quality.\n\nThanks again,\n\nRainer", "id": 202366, "time": "2017-11-23T12:18:07Z", "bug_id": 61733, "creation_time": "2017-11-23T12:18:07Z", "attachment_id": 35550}, {"count": 8, "tags": [], "bug_id": 61733, "attachment_id": null, "id": 203085, "time": "2018-01-04T20:13:26Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2018-01-04T20:13:26Z", "is_private": false, "text": "I have applied version two of my patch in r1820195. It will be part of 1.2.43. Thanks for your help on this.\n\nIt would still be usefull if you could also do a test before the release."}, {"count": 9, "tags": [], "bug_id": 61733, "is_private": false, "id": 203105, "attachment_id": null, "creator": "jonathan.oddy@transferwise.com", "creation_time": "2018-01-05T12:12:33Z", "time": "2018-01-05T12:12:33Z", "text": "We've been successfully running my original 1-liner fix for some time, so testing an alternative fix wasn't that high up the priority list at the end of the year. I'll try to get a new build with your fix tested next week."}]
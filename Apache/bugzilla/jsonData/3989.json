[{"count": 0, "tags": [], "creator": "cziegeler@apache.org", "is_private": false, "id": 6411, "attachment_id": null, "bug_id": 3989, "creation_time": "2001-10-05T06:26:57Z", "time": "2001-10-05T06:26:57Z", "text": "We recently had the problem with that the\n\"available\" task always searches not only in the \ngiven classpath for a class but also in the parent\nclassloader (= jdk user classpath). \nIf I specify:\n    <available classpathref=\"classpath\" \n               property=\"naming.present\" \n               classname=\"javax.naming.Context\"/>\nI assume that the class is only used in the classpath\ndefined by classpathref. \n\nLooking at the source I saw that the AntClassLoader\ntheoretically supports the \"isolated\" feature\nwhich prevents searching in parent class loaders.\nIs it planned to add an optional attribute to\nthe available task to specify the behaviour of\nthis search? \n\n\nHowever just patching the Available class to\nsupport setting the isolated flag on the classloader\nis not enough as the isolated flag seems not to \nbe evaluated correctly. For example the loadClass()\nmethod always calls isParentFirst(), but in insolated\nmode the parent should never be queried."}, {"count": 1, "tags": [], "bug_id": 3989, "attachment_id": null, "is_private": false, "id": 6456, "time": "2001-10-08T06:39:06Z", "creator": "conor@apache.org", "creation_time": "2001-10-08T06:39:06Z", "text": "Available uses the AntClassLoader and all classloaders should delegate searches\nto their parent loaders. It is, therefore, difficult to perform the sort of\nisolated search you desire. \n\nThe parent must always be queried first, even is isolated mode, since otherwise\nclasses such as java.lang.Object would be loaded in the child loader, rather\nthan the parent loader. Isolated mode tries to isolate non-JDK classes to ensure\nconsistent behaviour between forked and non-forked java invocations. It is for\nthis reason that java and javax package namespaces are always delegated. \n\nThe classloading in Ant is somewhat of a compromise. Nevertheless, the type of\ntest you want to perform here is not really what the <available> task does. You\nmay need a custom task which actually searches the given classpath (classes and\njar files) rather than loading the class. \n\nI'm interested to know why you need to do this type of search."}]
[{"text": "When i try to check a XML signature wich was created with a RSA private key\nagainst a DSA public key, i get a exception saying \"Not an RSA key: DSA\" as i\nexpect it. But when i try to validate the same signature against the correct RSA\npublic key afterwards, i get the following exception:\n\njava.security.InvalidKeyException: No installed provider supports this key:\nsun.security.rsa.RSAPublicKeyImpl\n\tat java.security.Signature$Delegate.chooseProvider(Signature.java:1059)\n\tat java.security.Signature$Delegate.engineInitVerify(Signature.java:1091)\n\tat java.security.Signature.initVerify(Signature.java:426)\n\tat\norg.apache.xml.security.algorithms.implementations.SignatureBaseRSA.engineInitVerify(Unknown\nSource)\n\tat org.apache.xml.security.algorithms.SignatureAlgorithm.initVerify(Unknown Source)\n\tat org.apache.xml.security.signature.XMLSignature.checkSignatureValue(Unknown\nSource)\n\tat test.Test.validate(Test.java:54)\n\tat test.Test.test(Test.java:37)\n\tat test.Test.main(Test.java:22)\n\nBut when i do not try the DSA key first (just the correct RSA key), everything\nworks fine. \n\nAs a very strange fact, everything does also work fine (DSA first, then RSA) if\ni set the log priority for the \"org.apache.xml.security.signature.XMLSignature\"\nclass to DEBUG in the log4j configuration.", "tags": [], "creator": "matthias.germann@dvbern.ch", "is_private": false, "count": 0, "id": 107398, "time": "2007-08-29T08:29:52Z", "bug_id": 43239, "creation_time": "2007-08-29T08:29:52Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 43239, "text": "Created attachment 20728\neclipse project for reproducing the bug\n\nThe bug can be reproduced with this eclipse project.", "id": 107399, "time": "2007-08-29T08:35:28Z", "creator": "matthias.germann@dvbern.ch", "creation_time": "2007-08-29T08:35:28Z", "is_private": false, "attachment_id": 20728}, {"count": 2, "tags": [], "creator": "matthias.germann@dvbern.ch", "attachment_id": null, "id": 107400, "time": "2007-08-29T08:37:22Z", "bug_id": 43239, "creation_time": "2007-08-29T08:37:22Z", "is_private": false, "text": "The bug could be reproduced in the following environements:\n- JDK 1.5.0_10 (Linux / Windows XP) \n- JDK 1.5.0_12 (Windows XP)\n- JDK 1.6.0_01 (Windows XP)"}, {"count": 3, "tags": [], "bug_id": 43239, "attachment_id": null, "id": 107707, "time": "2007-09-04T08:33:40Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-09-04T08:33:40Z", "is_private": false, "text": "This exception has come up before and usually it is due to using a DSA key\nwith an RSA signature or vice-versa. Can you post the signature AND the code\nyou used to validate the signature?"}, {"count": 4, "tags": [], "creator": "matthias.germann@dvbern.ch", "text": "(In reply to comment #3)\n> This exception has come up before and usually it is due to using a DSA key\n> with an RSA signature or vice-versa. Can you post the signature AND the code\n> you used to validate the signature?\n\nThe attached sample contains a complete test for reproducing the problem. It\ncontains a signature and the public keys. \n\nThe problem occurs only if i try to validate a RSA signature against a DSA key\nbefore validating it against the correct RSA key.\n\nPlease run the attached test.Test class. If you uncomment the first call to the\nvalidate method (the one with the DSA key), the second validation succeeds.\n\n", "id": 107711, "time": "2007-09-04T09:19:51Z", "bug_id": 43239, "creation_time": "2007-09-04T09:19:51Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "sean.mullan@oracle.com", "text": "This problem is due to an open bug in the JDK: see\nhttp://bugs.sun.com/view_bug.do?bug_id=4953555\nfor more information.\n\nSince there is a workaround (use the correct key), \nI would like to close this bug.", "id": 107752, "time": "2007-09-05T11:37:18Z", "bug_id": 43239, "creation_time": "2007-09-05T11:37:18Z", "is_private": false, "attachment_id": null}, {"text": "(In reply to comment #5)\n> This problem is due to an open bug in the JDK: see\n> http://bugs.sun.com/view_bug.do?bug_id=4953555\n> for more information.\n\nIs the \"javax.crypto.Cipher\" class really used for verifying a Signature?  \n\n> Since there is a workaround (use the correct key), \n> I would like to close this bug.\n\nI don't agree. The problem occurs even if a new XMLSignature object is created\nfor each validation attempt (as you can see from the attached sample). IMHO, the\nApache XML Security library does never recover if the first validation attemt\nfor a RSA Signature is done against a DSA key. Afterwards, any validation attemt\nfor a RSA Signature against a RSA or DSA Key will fail. Therefore, the JVM has\nto be restarted for recovering.\n\nWhy does the problem not occur if the Log4j log level is set to debug?", "tags": [], "creator": "matthias.germann@dvbern.ch", "attachment_id": null, "count": 6, "id": 107763, "time": "2007-09-05T23:08:45Z", "bug_id": 43239, "creation_time": "2007-09-05T23:08:45Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 43239, "text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > This problem is due to an open bug in the JDK: see\n> > http://bugs.sun.com/view_bug.do?bug_id=4953555\n> > for more information.\n> \n> Is the \"javax.crypto.Cipher\" class really used for verifying a Signature? \n\nNo, but the bug applies to all JCE provider-based classes (Cipher, Signature,\nMac, etc).\n \n> > Since there is a workaround (use the correct key), \n> > I would like to close this bug.\n> \n> I don't agree. The problem occurs even if a new XMLSignature object is created\n> for each validation attempt (as you can see from the attached sample). IMHO, the\n> Apache XML Security library does never recover if the first validation attemt\n> for a RSA Signature is done against a DSA key. Afterwards, any validation attemt\n> for a RSA Signature against a RSA or DSA Key will fail. Therefore, the JVM has\n> to be restarted for recovering.\n\nI see. I'll look into this a little bit more. A relatively recent enhancement\nwas made to cache and reuse java.security.Signature objects per thread. I \nthink the problem is that it is caching and reusing Signature objects that are\nincorrectly initialized. Now, I still believe that this bug will go away \nonce the JDK bug is fixed, but maybe in the meantime I can fix the cache such \nthat incorrectly initialized Signature objects are not cached \n(or are flushed from the cache).\n\n> Why does the problem not occur if the Log4j log level is set to debug?\n\nBecause of this code in org.apache.xml.security.signature.XMLSignature:\n\n         SignatureAlgorithm sa =si.getSignatureAlgorithm();\n         if (log.isDebugEnabled()) {\n                log.debug(\"SignatureMethodURI = \" + sa.getAlgorithmURI());\n                log.debug(\"jceSigAlgorithm    = \" + sa.getJCEAlgorithmString());\n                log.debug(\"jceSigProvider     = \" + sa.getJCEProviderName());\n                log.debug(\"PublicKey = \" + pk);\n         }\n\ngetJCEProviderName() triggers the provider-loading code such that it doesn't\ndepend on the key and doesn't cause the JDK bug to be triggered. See \nhttp://java.sun.com/javase/6/docs/technotes/guides/security/p11guide.html#DelayedSelect\nfor more information about delayed provider selection. This logging code\nshould probably be fixed, because if enabled, it will probably cause \nproblems with unextractable token keys.\n\nAlso, can you use the standard JSR 105 API instead? That API doesn't use \nthe same underlying code and caching mechanism for Signature objects.\n\n", "id": 107778, "time": "2007-09-06T07:14:24Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-09-06T07:14:24Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 43239, "attachment_id": null, "text": "(In reply to comment #7)\n\nThanks for your explanations.\n\n> I see. I'll look into this a little bit more. A relatively recent enhancement\n> was made to cache and reuse java.security.Signature objects per thread. I \n> think the problem is that it is caching and reusing Signature objects that are\n> incorrectly initialized. Now, I still believe that this bug will go away \n> once the JDK bug is fixed, but maybe in the meantime I can fix the cache such \n> that incorrectly initialized Signature objects are not cached \n> (or are flushed from the cache).\n\nThis fix for the cache would be very helpful for us.\n\n \n> Also, can you use the standard JSR 105 API instead? That API doesn't use \n> the same underlying code and caching mechanism for Signature objects.\n\nWe can't use the JSR 105 API because we are using the OpenSAML Library wich uses\nthe Apache XML Security Library. As a workaround, we decided to use only RSA\nkeys in our environment.\n", "id": 107814, "time": "2007-09-06T22:34:11Z", "creator": "matthias.germann@dvbern.ch", "creation_time": "2007-09-06T22:34:11Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 43239, "attachment_id": null, "text": "Fixed. If an InvalidKeyException is thrown by the Signature or Mac object, the\ncached Signature or Mac object is reinstantiated before wrapping the\nInvalidKeyException in an XMLSignatureException and throwing it back to the\ncaller. So the next time a good key is specified, it works. This works around\nthe underlying bug in the JDK: http://bugs.sun.com/view_bug.do?bug_id=4953555", "id": 110192, "time": "2007-11-02T13:28:25Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-11-02T13:28:25Z", "is_private": false}]
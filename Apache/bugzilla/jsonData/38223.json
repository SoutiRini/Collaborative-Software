[{"count": 0, "tags": [], "creator": "sriramnrn@gmail.com", "attachment_id": null, "id": 84468, "time": "2006-01-11T17:04:09Z", "bug_id": 38223, "creation_time": "2006-01-11T17:04:09Z", "is_private": false, "text": "This is a convenience class, and not at all compliant with the Servlet Spec.\n\nBy using this WebAppLoader, once can add entries to the Web Application's class\npath (outside of WEB-INF/classes and WEB-INF/lib).\n\nI created this WebAppLoader in response to\nhttp://marc.theaimsgroup.com/?l=tomcat-user&m=113682917308106&w=2\n\nThe context.xml looks like this:\n<Context docBase=\"d:\\temp\\testing\" reloadable=\"true\" >\n\t<Loader \n\t\tclassName=\"com.thoughtworks.tomcat.loader.ConfigurableClasspathWebappLoader\"\n\t\tclasspathEntriesFile=\"d:\\\\temp\\\\myclasses.properties\"\n\t/>\n</Context>\n\nThe file myclasses.properties contains entries like this:\nPathCount=2\nPath.1=file:/d:/temp/bin/\nPath.2=file:/c:/temp/deleteThis/\n\nNow, classes kept in these two paths can be available to the Web Application.\nOne need not have the classes copied into the WEB-INF/classes folder.\n\nSo, one might have a JSP that contains lines like this :\n=========================================================\n<%\n\tClass clazz  = Class.forName(\"com.thoughtworks.deletable.SomeStuff\");\n\tObject anObject = clazz.newInstance();\n\tString value = anObject.toString();\n\t\t\n\tcom.thoughtworks.deletable.SomeStuff cyber = new\ncom.thoughtworks.deletable.SomeStuff();\n\t\t\n\tString anotherValue = cyber.toString();\n\t\t\n%>\n\nThe value is <%=value%>\n\n<br/>\n\nOther values can be interesting too <%=anotherValue%>\n========================================================="}, {"count": 1, "tags": [], "bug_id": 38223, "attachment_id": 17383, "is_private": false, "id": 84469, "time": "2006-01-11T17:34:14Z", "creator": "sriramnrn@gmail.com", "creation_time": "2006-01-11T17:34:14Z", "text": "Created attachment 17383\nFiles demonstrating how this convenience class might be used\n\n1. Extract testing.zip at some location.\n2. Follow the instructions gives in the readme.txt file that is kept within\nthis zip."}, {"count": 2, "tags": [], "creator": "oded@m-wise.com", "attachment_id": 17402, "text": "Created attachment 17402\nConfigurable webapp loader that can add to the web application classpath\n\nSriram: Thanks for the pointer.  \n \nI didn't much like the implementation though - (a) I don't like the need to \ncreate a properties file: though it will greatly simplify the setup if you \nhave multiple web applications with the same requirements, for me this is \nneeded for development work only and I don't want developers to get too \ncomfortable with this hack, and (b) I didn't like the fact that the attached \nfile doesn't have the source for the class loader, so I couldn't see for myself\nhow it does this and fix my first problem.\n\nSo I created a new class, based on WebappLoader (not WebappClassLoader), which\nvery simply offers a 'classpath' attribute for the loader, which when filled\nwith classpath entries (colon separated or whatever your platform likes) it\nadds them to the list of repositories in WebappLoader.\n\nSo my context looks like this:\n<Context path=\"/my/webapp\" docBase=\"/path/to/my/webapp\" debug=\"0\"\nprivileged=\"true\" reloadable=\"true\">\n    <Loader\nclassName=\"org.apache.catalina.loader.ConfigurableWebappClassLoader\"\nclasspath=\"/path/to/extra/classes:/path/to/more/classes\"/>\n</Context>\n\nI've tested it to work nicely with Tomcat 5.0.30\n\nI license this code under triple licenses: GPL, LGPL and Apache. I won't mind\nif this be added to the Tomcat distribution, though at this point I don't mind\n- I only build development servers once in quite a while and the current one is\nall done :-)", "id": 84555, "time": "2006-01-12T19:20:44Z", "bug_id": 38223, "creation_time": "2006-01-12T19:20:44Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 38223, "attachment_id": null, "is_private": false, "id": 84558, "time": "2006-01-12T19:36:13Z", "creator": "sriramnrn@gmail.com", "creation_time": "2006-01-12T19:36:13Z", "text": "(In reply to comment #2)\n> Created an attachment (id=17402) [edit]\n> Configurable webapp loader that can add to the web application classpath\n> \n> Sriram: Thanks for the pointer.  \n>  \n> I didn't much like the implementation though - (a) I don't like the need to \n> create a properties file: though it will greatly simplify the setup if you \n> have multiple web applications with the same requirements, for me this is \n> needed for development work only and I don't want developers to get too \n> comfortable with this hack, \n\nThis is indeed too much a feature for production use. I added the properties\nfile support because you'd mentioned in your email that you've a large numebr of\npaths to add to the CLASSPATH. You'd mentioned fifteen lines, and fifteen lines\nworth of CLASSPATH entries are better added individually and separately, than\nclubbed together in one large string.\n\n> and (b) I didn't like the fact that the attached \n> file doesn't have the source for the class loader, so I couldn't see for myself\n> how it does this and fix my first problem.\n> \n\nThe attachment contains a zip file which contains the Eclipse project (complete\nwith .project and .classpath files). I just checked the attachment and I see\nthat it contains this particular zip file as well.\n\nSo, you have everything in my attachment to see if how I've addressed the\nproblem. See what you think of the source.\n\n> So I created a new class, based on WebappLoader (not WebappClassLoader), which\n> very simply offers a 'classpath' attribute for the loader, which when filled\n> with classpath entries (colon separated or whatever your platform likes) it\n> adds them to the list of repositories in WebappLoader.\n> \n> So my context looks like this:\n> <Context path=\"/my/webapp\" docBase=\"/path/to/my/webapp\" debug=\"0\"\n> privileged=\"true\" reloadable=\"true\">\n>     <Loader\n> className=\"org.apache.catalina.loader.ConfigurableWebappClassLoader\"\n> classpath=\"/path/to/extra/classes:/path/to/more/classes\"/>\n> </Context>\n> \n> I've tested it to work nicely with Tomcat 5.0.30\n> \n> I license this code under triple licenses: GPL, LGPL and Apache. I won't mind\n> if this be added to the Tomcat distribution, though at this point I don't mind\n> - I only build development servers once in quite a while and the current one is\n> all done :-)\n> \n\n"}, {"count": 4, "tags": [], "creator": "oded@m-wise.com", "attachment_id": null, "text": "Sorry, I didn't see your sources at first  \n   \n> I added the properties file support because you'd mentioned in your    \n> email that you've a large numebr of paths to add to the CLASSPATH.    \n> You'd mentioned fifteen lines, and fifteen lines worth of CLASSPATH    \n> entries are better added individually and separately, than clubbed    \n> together in one large string.   \n   \nI agree. The main problem is that I want to add only a small number of   \nrequired projects for each webapp, but have many webapps with different   \nrequirements, which made the class path quite large as it had to address all   \nthe requirements in one place.   \n   \nI agree that clobbering everything in a single classpath element might be a   \nproblem. Is it possible to have child tags similar to an ant's fileset tag to   \ninclude additional paths each with its own element ? from a quick look at the   \ndigester's interaction with the loader I couldn't see such a thing.  \n \nYour code looks nice - I see you've implemented addRepository() - what is its \nuse, except for interface completion ? I saw the bean-info object relate to \nsomething called \"events\" which lists 'add' methods. ", "id": 84560, "time": "2006-01-12T20:12:16Z", "bug_id": 38223, "creation_time": "2006-01-12T20:12:16Z", "is_private": false}, {"count": 5, "tags": [], "creator": "sriramnrn@gmail.com", "attachment_id": null, "is_private": false, "id": 84562, "time": "2006-01-12T20:35:31Z", "bug_id": 38223, "creation_time": "2006-01-12T20:35:31Z", "text": "(In reply to comment #4)\n> Sorry, I didn't see your sources at first  \n\nHeh, I guess you were excited to try out the files :) No problems :)\n\n>    \n> > I added the properties file support because you'd mentioned in your    \n> > email that you've a large numebr of paths to add to the CLASSPATH.    \n> > You'd mentioned fifteen lines, and fifteen lines worth of CLASSPATH    \n> > entries are better added individually and separately, than clubbed    \n> > together in one large string.   \n>    \n> I agree. The main problem is that I want to add only a small number of   \n> required projects for each webapp, but have many webapps with different   \n> requirements, which made the class path quite large as it had to address all   \n> the requirements in one place.   \n>    \n\nOh... that'd have also caused you problems where only the first set of classes\nof two different versions of the same classes in the CLASSPATH would be loaded.\n\ne.g. CLASSPATH=jdom1.0.jar;jdom2.0.jar would cause only jdom1.0.jar to be\nsearched for the class org.jdom.Dummy which would be present in both the jars.\n\nYou've had to contend with a lot of problems all this while !\n\n> I agree that clobbering everything in a single classpath element might be a   \n> problem. Is it possible to have child tags similar to an ant's fileset tag to   \n> include additional paths each with its own element ? from a quick look at the   \n> digester's interaction with the loader I couldn't see such a thing.  \n>  \nThis is possible, but would involve you playing with the\norg.apache.catalina.startup.ContextRuleSet class. I'm working on another\napproach where the settings are loaded from an XML file. I'll upload this\nversion once I finish it.\n\n> Your code looks nice - I see you've implemented addRepository() - what is its \n> use, except for interface completion ? I saw the bean-info object relate to \n> something called \"events\" which lists 'add' methods. \n\nThis is a method that I'd added for tracing purposes. The idea is for users of\nthis class to try it, and see the debug messages in case they face any problems."}, {"count": 6, "tags": [], "bug_id": 38223, "text": "Created attachment 17439\nPicks classpath from an XML file\n\nYou can specify the classpath via an XML file that can be placed anywhere on\nthe file system.\n\nThe context.xml contains:\n<Context docBase=\"d:\\temp\\testing\" reloadable=\"true\" >\n\t<Loader \n\t       \nclassName=\"com.thoughtworks.tomcat.loader.ConfigurableClasspathWebappLoader\"\n\t\tclasspathEntriesFile=\"d:\\\\temp\\\\configurations.xml\"\n\t\t\n\t/>\n</Context>\n\nThe XML structure is as follows:\n<configuration>\n\t<classpaths>\n\t\t<path>\n\t\t\tfile:/d:/temp/bin/\n\t\t</path>\n\t\t<path>\n\t\t\tfile:/c:/temp/deleteThis/\n\t\t</path>\n\t</classpaths>\n</configuration>", "id": 84687, "time": "2006-01-16T19:58:08Z", "creator": "sriramnrn@gmail.com", "creation_time": "2006-01-16T19:58:08Z", "is_private": false, "attachment_id": 17439}, {"count": 7, "tags": [], "bug_id": 38223, "attachment_id": null, "is_private": false, "id": 84703, "time": "2006-01-17T11:36:56Z", "creator": "oded@m-wise.com", "creation_time": "2006-01-17T11:36:56Z", "text": "Hi. I've tried to get your latest code to work with my Tomcat 5.0.30. I of\ncourse recompiled the source, as I'm using JDK 1.4.2. \nI also had to change the digester from tomcat.util.digester to commons-digester\nas the former package is not available on my installation (tomcat 5.5 only ?).\n\nNow when I load my web application, everytime I try to access something which is\nhandled by the default servlet (such as images or static html), I get a 404\nerror - \"servlet default is not available\".\n\nApparently, with the configurable web app class loader loaded, tomcat can't find\nDefaultServlet from servlets-default.jar. I'm not sure why is that, but with my\nimplementation it does the same.\n\nI enabled full debug logging for tomcat, and Here are the class loader hierarchy\nfor a normal web application:\n\n DEBUG [main] org.apache.commons.modeler.BaseModelMBean - preRegister\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\nStandardClassLoader\n  delegate: true\n  repositories:\n    file:/var/lib/tomcat5/server/classes/\n    file:/var/lib/tomcat5/server/lib/catalina-i18n-es.jar\n    file:/usr/share/java/regexp-1.3.jar\n    file:/var/lib/tomcat5/server/lib/tomcat-jk2.jar\n    file:/var/lib/tomcat5/server/lib/tomcat-coyote.jar\n    file:/var/lib/tomcat5/server/lib/servlets-webdav.jar\n    file:/usr/share/java/jakarta-commons-fileupload-1.0.jar\n    file:/usr/share/java/mx4j/mx4j-jmx-3.0.1.jar\n    file:/var/lib/tomcat5/server/lib/tomcat-util.jar\n    file:/var/lib/tomcat5/server/lib/catalina.jar\n    file:/var/lib/tomcat5/server/lib/catalina-i18n-fr.jar\n    file:/var/lib/tomcat5/server/lib/tomcat-http11.jar\n    file:/usr/java/j2sdk1.4.2_09/jre/lib/rt.jar\n    file:/usr/share/java/catalina-ant-5.0.30.jar\n    file:/usr/share/java/jakarta-commons-digester-1.7.jar\n    file:/var/lib/tomcat5/server/lib/servlets-default.jar\n    file:/usr/share/java/jakarta-commons-modeler-1.1.jar\n    file:/var/lib/tomcat5/server/lib/servlets-invoker.jar\n    file:/usr/share/java/jakarta-commons-logging-1.0.4.jar\n    file:/var/lib/tomcat5/server/lib/catalina-cluster.jar\n    file:/var/lib/tomcat5/server/lib/catalina-i18n-ja.jar\n    file:/usr/share/java/jakarta-commons-beanutils-1.7.0.jar\n    file:/usr/share/java/jakarta-commons-el-1.0.jar\n    file:/var/lib/tomcat5/server/lib/catalina-optional.jar\n    file:/var/lib/tomcat5/server/lib/tomcat-jk.jar\n    file:/var/lib/tomcat5/server/lib/servlets-common.jar\n    file:/var/lib/tomcat5/server/lib/tomcat-jni.jar\n----------> Parent Classloader:\nStandardClassLoader\n  delegate: true\n  repositories:\n    file:/var/lib/tomcat5/common/classes/\n    file:/usr/share/java/xml-commons-apis-1.3.02.jar\n    file:/usr/share/java/xerces-j2-2.7.1.jar\n    file:/usr/share/java/jta-1.0.1.jar\n    file:/usr/java/j2sdk1.4.2_09/jre/lib/rt.jar\n    file:/usr/share/java/mx4j/mx4j-jmx-3.0.1.jar\n    file:/usr/share/java/jakarta-commons-pool-1.2.jar\n    file:/usr/java/j2sdk1.4.2_09/jre/lib/rt.jar\n    file:/usr/share/java/jasper5-compiler-5.0.30.jar\n    file:/usr/share/java/ant-1.6.2.jar\n    file:/usr/share/java/servletapi5-5.0.30.jar\n    file:/var/lib/tomcat5/common/lib/naming-java.jar\n    file:/var/lib/tomcat5/common/lib/naming-resources.jar\n    file:/usr/share/java/jaf-1.0.2.jar\n    file:/usr/share/java/ant-launcher-1.6.2.jar\n    file:/usr/share/java/jspapi-5.0.30.jar\n    file:/usr/share/java/javamail-1.3.3_01.jar\n    file:/usr/share/java/jakarta-commons-el-1.0.jar\n    file:/usr/share/java/jakarta-commons-collections-3.1.jar\n    file:/usr/share/java/jakarta-commons-logging-api-1.0.4.jar\n    file:/var/lib/tomcat5/common/lib/naming-factory.jar\n    file:/var/lib/tomcat5/common/lib/naming-common.jar\n    file:/usr/share/java/jasper5-runtime-5.0.30.jar\n    file:/usr/share/java/jakarta-commons-dbcp-1.2.1.jar\n----------> Parent Classloader:\nsun.misc.Launcher$AppClassLoader@7b7072\n\nAnd here is the same output for a web application loaded with your configurable\nclass loader implementation (the output looks identical to the one with my\nimplementation, I think)\n\nDEBUG [main] org.apache.commons.modeler.BaseModelMBean - preRegister\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\nStandardClassLoader\n  delegate: true\n  repositories:\n    file:/var/lib/tomcat5/shared/classes/\n----------> Parent Classloader:\nStandardClassLoader\n  delegate: true\n  repositories:\n    file:/var/lib/tomcat5/common/classes/\n    file:/usr/share/java/xml-commons-apis-1.3.02.jar\n    file:/usr/share/java/xerces-j2-2.7.1.jar\n    file:/usr/share/java/jta-1.0.1.jar\n    file:/usr/java/j2sdk1.4.2_09/jre/lib/rt.jar\n    file:/usr/share/java/mx4j/mx4j-jmx-3.0.1.jar\n    file:/usr/share/java/jakarta-commons-pool-1.2.jar\n    file:/usr/java/j2sdk1.4.2_09/jre/lib/rt.jar\n    file:/usr/share/java/jasper5-compiler-5.0.30.jar\n    file:/usr/share/java/ant-1.6.2.jar\n    file:/usr/share/java/servletapi5-5.0.30.jar\n    file:/var/lib/tomcat5/common/lib/naming-java.jar\n    file:/var/lib/tomcat5/common/lib/naming-resources.jar\n    file:/usr/share/java/jaf-1.0.2.jar\n    file:/usr/share/java/ant-launcher-1.6.2.jar\n    file:/usr/share/java/jspapi-5.0.30.jar\n    file:/usr/share/java/javamail-1.3.3_01.jar\n    file:/usr/share/java/jakarta-commons-el-1.0.jar\n    file:/usr/share/java/jakarta-commons-collections-3.1.jar\n    file:/usr/share/java/jakarta-commons-logging-api-1.0.4.jar\n    file:/var/lib/tomcat5/common/lib/naming-factory.jar\n    file:/var/lib/tomcat5/common/lib/naming-common.jar\n    file:/usr/share/java/jasper5-runtime-5.0.30.jar\n    file:/usr/share/java/jakarta-commons-dbcp-1.2.1.jar\n----------> Parent Classloader:\nsun.misc.Launcher$AppClassLoader@7b7072\n\nAs you can see, for some reason one level of StandardClassLoader, which contains\nthe servlets-default.jar is missing for some reason. \n\nCan you guess what's going on ?"}, {"count": 8, "tags": [], "bug_id": 38223, "attachment_id": null, "is_private": false, "id": 84717, "time": "2006-01-17T16:56:12Z", "creator": "sriramnrn@gmail.com", "creation_time": "2006-01-17T16:56:12Z", "text": "(In reply to comment #7)\n> Hi. I've tried to get your latest code to work with my Tomcat 5.0.30. I of\n> course recompiled the source, as I'm using JDK 1.4.2. \n\nAck. I'll chance the JDK compatibility level in my Eclipse IDE. And I'm testing\nagainst Tomcat 5.5.15 Beta.\n\n> I also had to change the digester from tomcat.util.digester to commons-digester\n> as the former package is not available on my installation (tomcat 5.5 only ?).\n> \n\nAck. This is interesting. Tomcat 5.5.15 has tomcat.util.digester instead of\ncommons-digester. I don't know why this is the reason - a search in the archives\nshould yield some answer, and I'll try to find out this answer.\n\n> Now when I load my web application, everytime I try to access something which is\n> handled by the default servlet (such as images or static html), I get a 404\n> error - \"servlet default is not available\".\n> \n\nAck. I just tested this on both Tomcat 5.5.15 as well as 5.0.30. I'm able to run\nthe \"testing\" and the documentation web apps. I'm also able to view the images\nand HTML from within these apps on both the Tomcat versions.\n\n> Apparently, with the configurable web app class loader loaded, tomcat can't find\n> DefaultServlet from servlets-default.jar. I'm not sure why is that, but with my\n> implementation it does the same.\n> \n> I enabled full debug logging for tomcat, and Here are the class loader hierarchy\n> for a normal web application:\n> \n<snip/>\n> \n> As you can see, for some reason one level of StandardClassLoader, which contains\n> the servlets-default.jar is missing for some reason. \n> \n> Can you guess what's going on ?\n\nI've to leave for the day, and will look into this tomorrow.\n\n-- Sriram"}, {"count": 9, "tags": [], "creator": "mabuffo@gva.eri.ch", "attachment_id": null, "is_private": false, "id": 86562, "time": "2006-03-07T11:02:22Z", "bug_id": 38223, "creation_time": "2006-03-07T11:02:22Z", "text": "(In reply to comment #8)\n> (In reply to comment #7)\n> > Hi. I've tried to get your latest code to work with my Tomcat 5.0.30. I of\n> > course recompiled the source, as I'm using JDK 1.4.2. \n> \n> Ack. I'll chance the JDK compatibility level in my Eclipse IDE. And I'm testing\n> against Tomcat 5.5.15 Beta.\n> \n> > I also had to change the digester from tomcat.util.digester to commons-digester\n> > as the former package is not available on my installation (tomcat 5.5 only ?).\n> > \n> \n> Ack. This is interesting. Tomcat 5.5.15 has tomcat.util.digester instead of\n> commons-digester. I don't know why this is the reason - a search in the archives\n> should yield some answer, and I'll try to find out this answer.\n> \n> > Now when I load my web application, everytime I try to access something which is\n> > handled by the default servlet (such as images or static html), I get a 404\n> > error - \"servlet default is not available\".\n> > \n> \n> Ack. I just tested this on both Tomcat 5.5.15 as well as 5.0.30. I'm able to run\n> the \"testing\" and the documentation web apps. I'm also able to view the images\n> and HTML from within these apps on both the Tomcat versions.\n> \n> > Apparently, with the configurable web app class loader loaded, tomcat can't find\n> > DefaultServlet from servlets-default.jar. I'm not sure why is that, but with my\n> > implementation it does the same.\n> > \n> > I enabled full debug logging for tomcat, and Here are the class loader hierarchy\n> > for a normal web application:\n> > \n> <snip/>\n> > \n> > As you can see, for some reason one level of StandardClassLoader, which contains\n> > the servlets-default.jar is missing for some reason. \n> > \n> > Can you guess what's going on ?\n> \n> I've to leave for the day, and will look into this tomorrow.\n> \n> -- Sriram\n\n"}, {"count": 10, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "id": 88074, "time": "2006-04-14T15:28:01Z", "bug_id": 38223, "creation_time": "2006-04-14T15:28:01Z", "is_private": false, "text": "Sriram: thanks for contributing this.  It's an interesting idea and I can see\nhow it'd be useful to some specific applications.  However, I don't see it as\ngenerally necessary and I don't like that it's not Spec-compliant.  We already\nhave some configurtability around the classloaders and their repositories (see\nthe conf/catalina.properties file that ships with Tomcat), so I think this\nfeature, while nice, doesn't have a place in the Tomcat core distribution. \nAccordingly, I'm closing this as WONTFIX.  Of course, if other Tomcat developers\nare interested in adding this, we can reopen this issue and/or discuss it on the\ndev mailing list.\n\nOded and anyone else interested: feel free to continue developing, using, and\ndiscussing this on the Tomcat user mailing lists or any other forum of your choice.\n\n"}, {"count": 11, "tags": [], "bug_id": 38223, "attachment_id": null, "is_private": false, "id": 88258, "time": "2006-04-19T09:17:05Z", "creator": "commons-dev@matthew.matera.net.au", "creation_time": "2006-04-19T09:17:05Z", "text": "FYI, something similar to this exists in the \"DevLoader\" component of the \nSysdeo Tomcat Plugin for Eclipse.\n\nhttp://www.sysdeo.com/eclipse/tomcatplugin\n"}]
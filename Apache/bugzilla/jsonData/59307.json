[{"count": 0, "tags": [], "creator": "vikram.gupta1981@gmail.com", "attachment_id": null, "id": 190169, "time": "2016-04-12T03:33:31Z", "bug_id": 59307, "creation_time": "2016-04-12T03:33:31Z", "is_private": false, "text": "I am using POI-3.10-FINAL-20140208 release. \n\nI have a agent server that picks the files from the file system and reads the files. Below is the code I am using.\n\nOPCPackage opcPackage = OPCPackage.open(filename);\nXSSFReader reader = new XSSFReader(opcPackage);\n\nFrom the reader I get the workbook xml as InputStream and use custom SAX parser to get the sheet names and the corresponding RIDs\n\nInputStream workbookData = reader.getWorkbookData();\n\nUsing the RIDs, I get individual sheet XMLs as InputStream objects and use custom SAX Parser to parse these. I set the sharedStringTable and styleTable from the reader to the custom parsers to be used during the parsing of the sheet data.\n\nDefaultSheetParser sheetParser = new DefaultSheetParser(reader.getSharedStringsTable(), reader.getStylesTable());\n\nInputStream sheet = reader.getSheet(relId);\n\n\nAll this is working fine, but all of a sudden I start to get \"IOException - Can't obtain the input stream from /xl/sharedStrings.xml\" at the reader.getSharedStringsTable().\n\nThe files open in Excel without any error. Most of the failing files are of size 400KB.\n\nOnce I re-start the agent server and reprocess the same files, there is no such error.\nI checked the memory settings of the JVM, there is enough memory allocated (about 4GB) and I do not get any Out of Memory error."}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 190170, "time": "2016-04-12T03:53:40Z", "bug_id": 59307, "creation_time": "2016-04-12T03:53:40Z", "is_private": false, "text": "Keeping too many file handles open, perhaps? This would be more likely to show up in a long-running server process.\n\nMake sure you close your resource streams when you're done with them and you don't have too many open simultaneously. Once you've read through your code, skim through the POI classes that you're using to see if they leak any file handles/resources. Eclipse or other tools might make the process of finding leaked resources easier."}, {"count": 2, "tags": [], "bug_id": 59307, "attachment_id": null, "is_private": false, "id": 190171, "time": "2016-04-12T03:57:33Z", "creator": "onealj@apache.org", "creation_time": "2016-04-12T03:57:33Z", "text": "I think Hotspot, included in JDK, can show instantaneous resource usage (CPU, heap, permgen, and file handles) on running processes. Check that before you start looking for file handle leaks."}, {"count": 3, "tags": [], "bug_id": 59307, "attachment_id": null, "is_private": false, "id": 190172, "time": "2016-04-12T04:17:24Z", "creator": "apache@gagravarr.org", "creation_time": "2016-04-12T04:17:24Z", "text": "As well as ensuring you close your resources as Javen says, 3.10 is over 2 years old (clue is the date in the filename!), you might want to try 3.14, or better wait a few more days then try 3.15 beta 1"}, {"count": 4, "tags": [], "bug_id": 59307, "attachment_id": null, "is_private": false, "id": 190202, "time": "2016-04-13T06:31:30Z", "creator": "vikram.gupta1981@gmail.com", "creation_time": "2016-04-13T06:31:30Z", "text": "I am closing the workbook using the below code: -\n\nopcPackage.close();\n\nAfter I finish reading from the workbook.\n\nIs there any other handle that needs to be closed?"}, {"count": 5, "tags": [], "creator": "vikram.gupta1981@gmail.com", "text": "I have updated the code to close all the InputStream handles once I have parsed the workbook and sheet InputStream using custom sax parsers.", "id": 190203, "time": "2016-04-13T06:38:12Z", "bug_id": 59307, "creation_time": "2016-04-13T06:38:12Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 191146, "time": "2016-05-20T18:57:58Z", "bug_id": 59307, "creation_time": "2016-05-20T18:57:58Z", "is_private": false, "text": "Also on Unix you can look at the output of \"ls /proc/<pid>/fd\" with the pid of the server-process to see which files are actually currently open. This might give an indication of which part of your application is actually leaking file handles (if this is the actual problem here).\n\nAnyway I don't see an actual problem in POI here for now. We have extensive tests which verify that file-handles are closed properly as long as the respective close() method is called. \n\nIf there is still a problem then please update to a current version and retry. If it still dose not work then, then please reopen this bug with the list of open files at the time when the application fails."}]
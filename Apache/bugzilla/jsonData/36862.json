[{"count": 0, "tags": [], "text": "Hi,\njust quickly: thank you all for that tool!\nAlso I searched the DB and did not find anything related to that.\n\n--What I want to do:\nHaving an portable custom ant repository without having to modify \nthe ANT_HOME/lib all the time with new libs. Also if we upgrade \nANT to a new version, I don't want the developers to mess around\nwith ANT.\nIt helps also the automated systems (on 3 != continents) to get the\ntasks needed to run the automated JUnit tests and the auto build\nsystems whereever I want where ANT is installed.\nEverything should be smooth for anyone or anything using ANT at work.\n\n--How I did it:\nCreate a Jar of the custom tasks I have and store this jar with\nall the needed jars (like junit<version>.jar) in a directory in CVS.\nANT update using CVS the local copy of that directory\nand use the changes recently done to our custom tasks by including the\nclasspathref to the taskdef tag.\n\n--The problem:\njava.lang.NoClassDefFoundError: junit/framework/Test\n\nSolution:\nput the junit*.jar in ANT_HOME/lib fixes the problem, but need to modify\nANT_HOME/lib on all the systems and I don't want it (cf what I want to do above)\n\n--Some details now:\n0.This is on Mac OS X (10.3.9)\njava version \"1.4.2_09\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_09-233)\nJava HotSpot(TM) Client VM (build 1.4.2-56, mixed mode)\nApache Ant version 1.6.5 compiled on June 2 2005\n\n1. I have a task called JUnitWrapperTask that inherits from JUnitTask.\nIt does not really do fancy stuff.\npublic class JUnitWrapperTask extends JUnitTask {\n    /**\n     * Controls output of debugging info *\n     */\n    protected boolean debug = false;\n\n    protected ArrayList jvmArgumentFileList = new ArrayList();\n\n    public JUnitWrapperTask() throws Exception {\n    }\n\n    public void setDebug(boolean on) {\n        debug = on;\n    }\n\n    public JVMArgumentFile createJvmArgFile() {\n        JVMArgumentFile arg = new JVMArgumentFile();\n        jvmArgumentFileList.add(arg);\n        return arg;\n    }\n\n    /**\n     * Location of the text file containing jvm args.  File should have 1 arg\n     * per line.\n     */\n    public class JVMArgumentFile {\n        protected String jvmArgsFilePath;\n\n        public void setValue(String val) {\n            jvmArgsFilePath = val;\n            ArrayList jvmArgsList = AntUtilities.getArgumentList(new\nFile(jvmArgsFilePath), \"jvm-args-file\", getProject());\n            Iterator jvmIter = jvmArgsList.iterator();\n            Commandline.Argument jvmArg;\n            String value;\n            while (jvmIter.hasNext()) {\n                value = \"-\" + (String) jvmIter.next();\n                jvmArg = createJvmarg();\n                jvmArg.setValue(value);\n\n                if (debug)\n                    System.out.println(\"adding jvm arg '\" + value + \"'\");\n            }\n        }\n    }\n}\n\n2. The taskdef definition \n<path id=\"taskdef.class.path\">\n<!--    <fileset dir=\"${ENV.ANT_HOME}/lib\">-->\n<!--        <include name=\"*.jar\"/>-->\n<!--    </fileset>-->\n    <fileset dir=\"${bs.pub.dir}\">\n        <include name=\"*.jar\"/>\n    </fileset>\n</path>\n\n<taskdef name=\"junitWrapper\" classname=\"com.vpharm.ant.JUnitWrapperTask\"\nclasspathref=\"taskdef.class.path\"/>\n\n<target name=\"echo-cp\">\n        <property name=\"titi\" refid=\"taskdef.class.path\"/>\n        <echo>${titi}</echo>\n    </target>\nen echo of the classpath\n\nHere is the classpath:\n/cvs-storage/junit_3.8.1.jar:/cvs-storage/mytasks_09-28-05-145754.jar\n\nMy guess is:\nsystem class loader (SCL) does not find JUnitWrapperTask so delegates to taskdef\nclass loader (TCL). TCL finds JUnitWrapperTask. \nTCL needs JUnitTask so SCL finds it but then SCL is stupid and does not ask TCL\nto look for Test.\n\nMy questions:\nIf u think I did not look enough in the DB point me to the bug# and sorry for that!\nDo I do something wrong?\nCould someone tell me if this is the normal behavior of the classpathref?\nOr in another way why the 2 class loaders don't work together?\n\nThx for any help.\nJ", "attachment_id": null, "id": 80606, "creator": "johnny_hujol@vrtx.com", "time": "2005-09-29T16:14:00Z", "bug_id": 36862, "creation_time": "2005-09-29T16:14:00Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 36862, "attachment_id": null, "id": 80607, "time": "2005-09-29T16:26:03Z", "creator": "johnny_hujol@vrtx.com", "creation_time": "2005-09-29T16:26:03Z", "is_private": false, "text": "All right, I really did not look far enough.\nSorry!\nIt's actually a huge issue and some people have had the same problem.\n\nAnd so far the only reasonable solution is to:\n\"* For this (like me) who want to create a user-friendly build process that does\nnot require users to \nmodify their ant installs, I can redistribute the relevant jars with my project\nand load them within my \nbuild.xml file.\"\n\nSame case here.\n\n\n*** This bug has been marked as a duplicate of 6606 ***"}, {"count": 2, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "text": "not a duplicate. The proposed solution is a duplicate, but that is not the\nsolution, because messing with classloaders after the fact is just dangerous,\nespecially when you consider embedded ant, or even embedded signed ant in a\nsecure enviroment.\n\n", "id": 80612, "time": "2005-09-29T17:50:06Z", "bug_id": 36862, "creation_time": "2005-09-29T17:50:06Z", "is_private": false}, {"count": 3, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "text": "the solution is to \n1. use the -lib command to add all JARS in  the directory under SCM to the ant\nclasspath.\n2. set your ANT_ARGS env variable to do this\nor\n3. have your developers put the JARs in ${user.home}/.ant/lib", "id": 80613, "time": "2005-09-29T17:50:48Z", "bug_id": 36862, "creation_time": "2005-09-29T17:50:48Z", "is_private": false}, {"count": 4, "tags": [], "text": "Steve thx for the attention!\nI want to have a developer and system 'ANT manipulation free' environment.\nI mean no interactions or whatsoever with file system or anything related\nto ANT installation.\nI want to have users and systems just checking out their code \nand our custom ANT tasks from CVS, then run the stuff, without \neven noticing ANT enhancements or changes.\n\nEach time I need to update our custom tasks, I don't want to update the\n${user.home}/.ant/lib directory. Your solution is more squared that just\nputting the ant-junit.jar in the taskdef classpath and probably the \ncleanest way to do it. \nBut, it does not fit my 1st mandatory requirement: \nno installation or modification from a user or system or \n'do your job with what you find and bring with you'.\n\nOur automated systems run JUnit tests, autobuild and SOAP tests among \nother things on different OSes, continents and machines, that way I \ndon't care about them missing libraries.\nI know everything they need is in CVS. The solution by putting the \nant-junit.ajr in my taskdef class path works fine for the purpose\nI have.\nI keep this in mind though in case I run into more complex issues.\n\nI appreciate your help and thank you guys for all the good work and\ntime ANT saves me on a daily basis.\nJ", "attachment_id": null, "id": 80616, "creator": "johnny_hujol@vrtx.com", "time": "2005-09-29T18:25:26Z", "bug_id": 36862, "creation_time": "2005-09-29T18:25:26Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 36862, "text": "If you want the user to have no interaction with Ant installation, why don't \nyou install Ant in one central location, drop the extra stuff in ANT_HOME/lib \nand just let your users run over the network?", "id": 80622, "time": "2005-09-29T20:43:22Z", "creator": "mbenson@apache.org", "creation_time": "2005-09-29T20:43:22Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 36862, "attachment_id": null, "id": 80627, "time": "2005-09-29T22:31:39Z", "creator": "johnny_hujol@vrtx.com", "creation_time": "2005-09-29T22:31:39Z", "is_private": false, "text": "Matt, thx for jumping in!\n\nWouldn't that be overkilling it each time one\ncompiles or jars or runs tests due to network latency?\n\nThe systems right now update anytime they run tests by pulling\neverything they from CVS.\nUsers manually have to call an ANT target, that just CVS update a \nstorage directory. \nSo everything is local and ANT installation untouched.\n\nI'm interested in your thought, please could you explain\nmore how that would be set up and work?\n\n"}, {"count": 7, "tags": [], "bug_id": 36862, "text": "This is about to leave the realm of bugzilla and more appropriately move to \nuser@ant.apache.org .  However, I wanted to clarify a point here for \ndocumentation's sake.  I think marking this as a duplicate of bug 6606 \ngenerated some confusion, esp. as that issue is still open.  I think it should \nbe perfectly legitimate, if a little unorthodox, to send your custom tasks \nalong with your projects and use classpaths within your taskdefs to make your \nbuilds more portable.  I don't think that practice is what Steve took issue \nwith above, so this comment is intended to clarify that point or give Steve an \nopportunity to contradict me if I am wrong here.\n\nAs to your questions re: running a network Ant installation, on re-reading I \nsee your comment about being spread across the globe.  Latency may well be an \nissue there, but I'm sure you can say much better than I on that point.  Of \ncourse, what would it hurt to test it?", "id": 80628, "time": "2005-09-29T22:52:27Z", "creator": "mbenson@apache.org", "creation_time": "2005-09-29T22:52:27Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "text": "I agree with matt; this is not a duplicate of #6606. \n\nJohnny: read ant-in-anger ; it comes with the docs\n\nLatency is not an issue if you keep the entire custom ant installation under SCM.", "id": 80635, "time": "2005-09-30T10:03:23Z", "bug_id": 36862, "creation_time": "2005-09-30T10:03:23Z", "is_private": false}, {"count": 9, "tags": [], "creator": "j_a_fernandez@yahoo.com", "attachment_id": null, "text": "Our practice here is very simple. ANT is in CVS. You do not run ANT directly \nbut use a script (e.g. \"build\" ) that calls ANT with the correct -lib \narguments as required for the project. Any additional libraries or antlibs \nrequired for the project are stored in CVS as part of the project.\n\nWhen time to upgrade comes, you do just use CVS and pull out new versions of \nANT or libraries or whatever. You can test new releases in braches and you can \ngo back in time if needed to fix some old version of the project with the \ncorresponding version of ANT and libraries.\n\nWe have had no problem what so ever with such an arangement.", "id": 80636, "time": "2005-09-30T11:45:37Z", "bug_id": 36862, "creation_time": "2005-09-30T11:45:37Z", "is_private": false}, {"count": 10, "tags": [], "creator": "jglick@apache.org", "text": "More precise duplicate.", "id": 86279, "attachment_id": null, "bug_id": 36862, "creation_time": "2006-02-27T20:44:39Z", "time": "2006-02-27T20:44:39Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 36862, "attachment_id": null, "id": 86280, "time": "2006-02-27T20:45:00Z", "creator": "jglick@apache.org", "creation_time": "2006-02-27T20:45:00Z", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of 38799 ***"}]
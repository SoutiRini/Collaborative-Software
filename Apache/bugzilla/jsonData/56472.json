[{"count": 0, "attachment_id": 31573, "bug_id": 56472, "text": "Created attachment 31573\nClasses that hold a reference to WebappClassLoader\n\nI have a problem with unloading casses of a web application when I stop it.\nAll threads are closed, but all 6.000 classes remain in memory. The GC cannot destroy WebappClassLoader because it is held by a static hashMap of the naming services which is hold by the VM.\n\nSee attached image.\n\nThe problem occurs only when the application uses the naming service. I identified the first method in my application that triggers the problem: \n\npublic class MyBindAuthenticator extends BindAuthenticator {\n    ...\n    @Override\n    public DirContextOperations authenticate(Authentication authentication) {\n        ...\n        List<String> userns=getUserDns(username);\n        ...\n    }\n    ...\n}\n\nWhen I replace this line by a hardcoded list of strings, then the problem gets triggered by the next call of any naming service method. When I replace the whole authenticate() method by an empty one, then the problem disappears. But I need it for security reason.\n\nUnfortunately, the problematic hashmap (with name securityTokens) is not accessible to me, so I cannot remove the references. I seems that all related classes are part of Catalina and not reachable from outside.\n\nI would appreciate a workaround, if not bugfix is available.", "id": 174931, "time": "2014-04-29T13:34:55Z", "creator": "stefan_frings@qvc.com", "creation_time": "2014-04-29T13:34:55Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 56472, "text": "1. Normally that reference should have been cleared by NamingContextListener\n\nThe sequence of events is\no.a.c.core.StandardContext.stopInternal()\n ...\n fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);\n\n-> o.a.c.core.NamingContextListener.lifecycleEvent(..)\n\n\nIs there any indication in your log files that your Context failed to start up, or failed to stop?\n\n\n2. What is 'BindAuthenticator'? There is no such class in Tomcat.\n\nSource code for getUserDns() = ?\n\n3. I think there is a bug in NamingContextListener.lifecycleEvent(..):\n\nIf its processing of startup event fails, then its 'initialized' field remains to be 'false'. This causes its processing of stop event to exit immediately without proper cleanup. Is it what happened here?", "id": 174971, "time": "2014-05-02T00:51:33Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-05-02T00:51:33Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 56472, "text": "Thanks for your quick answer.\n\n1)While analyzing this problem, I found and solved two problem causes:\n\nI disabled the pooling of the LDAP interface because the pool starts a thread that remains running. Tomcat gave a related warning on application shutdown.\n\nI implemented a thread local ring buffer for log messages (using log4j). This buffer was not cleared on shutdown, so the web app classloader remained in memory.\n\nHowever, the problem with naming services is still present and I did not find out how to solve it without modifying Tomcat's source code.\n\n2)BindAuthenticator is part of Spring Security. It is used to check the users name and password when he logs in. I had to override the authenticate method because the default method does not work for all users.\n\n3) Good hint, I will check that.", "id": 174972, "time": "2014-05-02T06:38:54Z", "creator": "stefan_frings@qvc.com", "creation_time": "2014-05-02T06:38:54Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "stefan_frings@qvc.com", "is_private": false, "text": "Created attachment 31583\nContextAccessController cleans up properly", "id": 174974, "time": "2014-05-02T08:46:41Z", "bug_id": 56472, "creation_time": "2014-05-02T08:46:41Z", "attachment_id": 31583}, {"count": 4, "attachment_id": 31584, "bug_id": 56472, "text": "Created attachment 31584\nNew heap analysis showing classes that are keep WebAppClassloader in memory", "id": 174975, "time": "2014-05-02T08:47:39Z", "creator": "stefan_frings@qvc.com", "creation_time": "2014-05-02T08:47:39Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 56472, "text": "Enabling FINEST logging for org.apache.catalina.core did not gave any helpful message. I still dont see any warning or error message in any logfile. But I have some few more debug messages now.\n\nI managed tro track the event handling and did not find any problem there. Lifecycle.CONFIGURE_START_EVENT and Lifecycle.CONFIGURE_STOP_EVENT are both completely processed by NamingContextLister without exception.\n\nAlso the ContextAccessController removes the securityToken properly from the hashmap when I stop the program.\n\nSo what I saw today does not match the heap dump that I created a few days ago. Sorry for that, I must have done something wrong without noticing it by myself.\n\nI attached a new screenshot from heap dump analysis, which looks much smaller now. And I see now totally other classes holding references to the classloader.\n\nBut these classes are again all part of Tomcat or JVM, am I right? How can I analyze that further?", "id": 174976, "time": "2014-05-02T09:03:48Z", "creator": "stefan_frings@qvc.com", "creation_time": "2014-05-02T09:03:48Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "stefan_frings@qvc.com", "is_private": false, "text": "Created attachment 31585\nNew heap analysis after lib upgrade\n\nI upgraded the cssparser.jar library from version 0.9.5 to 0.9.13. Now the picture has changed a lot again.\n\nThe WebAppClassloader of my application has not path to GC Root anymore and is now hold by a soft or weak reference.\n\nBut that did not finally solve my problem. All classes of my web application still remain in memory even when I force a garbage collection several times. I am still not able to restart the application (except by doubling the PermGenSpace size).\n\nMy previous method to analyze the problem cause is not applicable anymore. There is no class anymore that holds a strong reference to the WebAppClassloader. What else can be the problem cause?", "id": 174978, "time": "2014-05-02T09:41:46Z", "bug_id": 56472, "creation_time": "2014-05-02T09:41:46Z", "attachment_id": 31585}, {"count": 7, "attachment_id": null, "bug_id": 56472, "is_private": false, "id": 175002, "time": "2014-05-02T22:01:46Z", "creator": "markt@apache.org", "creation_time": "2014-05-02T22:01:46Z", "tags": [], "text": "All the indications are that the root cause of this issue lies in application code or third party library code rather than Tomcat code. I am therefore resolving this as invalid. The users list is the best place to get help with this issue.\n\nOne pointer that may help you move this a little further forward before you post to the users list is that I have seen cases where the JVM fails to correctly report all GC roots. Tracking down the memory leak in these cases is a complete pain. I hit a similar issue with a Spring app and had to build the relevant Spring libraries locally so I could do what was effectively a binary search to track down the line of code that triggered the issue. It turned out to be a memory leak somewhere in the JRE's XML parser but I never could track down exactly what as the JVM never reported the GC root."}, {"count": 8, "tags": [], "creator": "stefan_frings@qvc.com", "attachment_id": null, "is_private": false, "id": 175018, "time": "2014-05-05T06:26:45Z", "bug_id": 56472, "creation_time": "2014-05-05T06:26:45Z", "text": "Thanks for your helpful answer.\nAnd yes, I agree that the problem cause is obvisouly outside Tomcat."}, {"count": 9, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "is_private": false, "id": 175123, "time": "2014-05-08T20:10:38Z", "bug_id": 56472, "creation_time": "2014-05-08T20:10:38Z", "text": "(In reply to Konstantin Kolinko from comment #1)\n> 3. I think there is a bug in NamingContextListener.lifecycleEvent(..):\n> \n> If its processing of startup event fails, then its 'initialized' field\n> remains to be 'false'. This causes its processing of stop event to exit\n> immediately without proper cleanup. Is it what happened here?\n\nI fixed the 'initialized' field processing issue identified in the above comment. The fix will be in 8.0.6 and 7.0.54."}, {"count": 10, "attachment_id": 31671, "bug_id": 56472, "text": "Created attachment 31671\nScreenshot of jvisualvm showing that webappclassloader has no gc root\n\nI tested again with version 7.0.54, the problem still occurs.\n\nThe classloader of the stopped web application still remains in memory, but it has no gc root. \nThe problem occurs only when the after the application did an LDAP communication. It does not happen, when I comment out the related lines of code or when I configure Spring Security to use dummy user accounts (in xml file) instead of LDAP authentication.\nAny ideas why the class loader remains in memory?", "id": 175516, "time": "2014-05-28T09:25:24Z", "creator": "stefan_frings@qvc.com", "creation_time": "2014-05-28T09:25:24Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 55381, "attachment_id": null, "text": "Looking at the the NBReadServlet class included in TestNonBlockingAPI, the class appears to be directly calling the ReadListener.onDataAvailable() method.\n\n@WebServlet(asyncSupported = true)\npublic class NBReadServlet extends TesterServlet {\n   private static final long serialVersionUID = 1L;\n   public volatile TestReadListener listener;\n   @Override\n   protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n       // step 1 - start async\n       AsyncContext actx = req.startAsync();\n       actx.setTimeout(Long.MAX_VALUE);\n       actx.addListener(new AsyncListener() {\n           // removed for brevity \n       });\n       // step 2 - notify on read\n       ServletInputStream in = req.getInputStream();\n       listener = new TestReadListener(actx);\n       in.setReadListener(listener);\n\n       listener.onDataAvailable();\n   }\n}\n\nIn Section 3.7 of the spec it says...\n\n\"The onDataAvailable method is invoked on the ReadListener when data is available to read from the incoming request stream. The container will invoke the method the first time when data is available to read. The container will subsequently invoke the onDataAvailable method if and only if isReady method on ServletInputStream, described below, returns false.\"\n\n...which leads me to believe that the container should be calling onDataAvailable and not the servlet.\n\nIf the line \"listener.onDataAvailable()\" is removed from the test, then the test will hang and ReadListener.onDataAvailable() is never called.\n\n\nThe same is true with the NBWriteServlet in TestNonBlockingAPI and the WriteListener.onWritePossible() method.  The NBWriteServlet is calling this method directly, while the spec seems to indicate that it should be called by the container.\n\n\"void onWritePossible(). When a WriteListener is registered with the ServletOutputStream, this method will be invoked by the container the first time when it is possible to write data. The container will subsequently invoke the onWritePossible method if and only if isReady method on ServletOutputStream, described below, returns false.\"\n\nThanks", "id": 169265, "time": "2013-08-07T19:17:49Z", "creator": "dmikusa@gopivotal.com", "creation_time": "2013-08-07T19:17:49Z", "is_private": false}, {"text": "This has been fixed in trunk and will be included in 8.0.0-RC2 onwards.", "tags": [], "bug_id": 55381, "attachment_id": null, "count": 1, "id": 169458, "time": "2013-08-15T11:47:49Z", "creator": "markt@apache.org", "creation_time": "2013-08-15T11:47:49Z", "is_private": false}]
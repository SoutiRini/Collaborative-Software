[{"count": 0, "tags": [], "bug_id": 40525, "is_private": false, "id": 93655, "creation_time": "2006-09-16T14:13:18Z", "time": "2006-09-16T14:13:18Z", "creator": "Tom.Donovan@acm.org", "text": "The jni native method poll() in poll.c does not check if the socket has no\ntimeout (i.e. it does not check if max_ttl is negative) before adjusting the\ntimeout passed to apr_pollset_poll().  \n\nThe timeout passed to apr_pollset_poll() is in the variable 'ptime'.  The\ncurrent code sets ptime to zero when there is a valid timeout (usually 2000ms)\nand no socket timeout (usually -1000).\n\nThese values are common because AprEndpoint.java defaults to pollTime=2000 ms\nand soTimeout=-1 sec (which gets adjusted to -1000 ms).\n    \nWhen a zero timeout is passed to apr_pollset_poll(), it is passed along to the \nnative select() as a zero timeval which causes select() to return immediately\ninstead of blocking. A negative value should be passed to apr_pollset_poll() for\nan infinite timeout, but I don't think that's what we want here.\n\nThe observed result is 100% cpu use when Tomcat is idle because calls to poll()\nare made continuously. These calls return immediately.\n\nThe solution is to recognize when max_ttl is negative, and if so; do not use it \nto adjust the 'ptime' variable passed as an argument to poll().  Here is a patch \nfor http://svn.apache.org/repos/asf/tomcat/connectors/trunk/.\n\nIndex: jni/native/src/poll.c\n===================================================================\n--- jni/native/src/poll.c\t(revision 446772)\n+++ jni/native/src/poll.c\t(working copy)\n@@ -263,7 +263,7 @@\n         /* Find the minimum timeout */\n         for (i = 0; i < p->nelts; i++) {\n             apr_interval_time_t t = now - p->socket_ttl[i];\n-            if (t >= p->max_ttl) {\n+            if (p->max_ttl > 0 && t >= p->max_ttl) {\n                 ptime = 0;\n                 break;\n             }", "attachment_id": null}, {"count": 1, "tags": [], "creator": "Tom.Donovan@acm.org", "text": "(In reply to comment #0)\nThe patch in my original comment is incorrect.  It does not preserve the timeout\nwhen there is no socket timeout. Apologies!\nHere is a corrected patch:\n\n\nIndex: jni/native/src/poll.c\n===================================================================\n--- jni/native/src/poll.c\t(revision 446772)\n+++ jni/native/src/poll.c\t(working copy)\n@@ -263,13 +263,16 @@\n         /* Find the minimum timeout */\n         for (i = 0; i < p->nelts; i++) {\n             apr_interval_time_t t = now - p->socket_ttl[i];\n-            if (t >= p->max_ttl) {\n-                ptime = 0;\n-                break;\n-            }\n-            else {\n-                ptime = TCN_MIN(p->max_ttl - t, ptime);\n-            }\n+\t\t\tif (p->max_ttl > 0)\n+\t\t\t{\n+\t\t\t\tif (t >= p->max_ttl) {\n+\t\t\t\t\tptime = 0;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tptime = TCN_MIN(p->max_ttl - t, ptime);\n+\t\t\t\t}\n+\t\t\t}\n         }\n     }\n     for (;;) {", "id": 93762, "time": "2006-09-18T23:56:46Z", "bug_id": 40525, "creation_time": "2006-09-18T23:56:46Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "remm@apache.org", "text": "*** Bug 40606 has been marked as a duplicate of this bug. ***", "id": 94179, "time": "2006-09-27T20:31:55Z", "bug_id": 40525, "creation_time": "2006-09-27T20:31:55Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "mturk@apache.org", "attachment_id": null, "id": 94205, "time": "2006-09-28T07:38:41Z", "bug_id": 40525, "creation_time": "2006-09-28T07:38:41Z", "is_private": false, "text": "Fixed in the SVN trunk, although the patch aplied is slightly different."}, {"count": 4, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 112397, "time": "2008-01-01T16:48:33Z", "bug_id": 40525, "creation_time": "2008-01-01T16:48:33Z", "is_private": false, "text": "Removing Native:JK component, because this issue belongs to tcnative, which\nseems to not have a component value.\n\nAlso moving from resolved to closed."}]
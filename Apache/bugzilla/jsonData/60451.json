[{"count": 0, "tags": [], "creator": "l.penet@senat.fr", "is_private": false, "text": "I have a simple servlet producing files in Excel format using Apache POI.\n\nIt basically does a \n\n    wbk.write(resp.getOutputStream());\n\nwhere wbk is an instance of org.apache.poi.ss.usermodel.Workbook and resp is an instance of HttpServletResponse.\n\nWhen my SSL connector is parametered this way\n\n    <Connector port=\"8443\" SSLEnabled=\"true\"\n                protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n                sslProtocol=\"TLS\"\n                sslImplementationName=\"org.apache.tomcat.util.net.openssl.OpenSSLImplementation\"\n\t\tSSLCertificateFile=\"${catalina.home}/conf/certificate.crt\"\n                SSLCertificateKeyFile=\"${catalina.home}/conf/privateKey.key\"\n\t\tserver=\"Apache-Coyote/1.1\"\n                URIEncoding=\"UTF-8\">\n      <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n    </Connector>\n\nin server.xml, I have the following exception.\n\n07-Dec-2016 16:24:58.603 GRAVE [https-openssl-apr-8443-exec-19] org.apache.catalina.core.StandardWrapperValve.invoke \"Servlet.service()\" pour la servlet fr.senat.presences.servlets.ExcelPresencesServlet a g\u00e9n\u00e9r\u00e9 une exception\n java.lang.ArrayIndexOutOfBoundsException: -23\n\tat org.apache.coyote.http2.HPackHuffman.encode(HPackHuffman.java:441)\n\tat org.apache.coyote.http2.HpackEncoder.writeHuffmanEncodableValue(HpackEncoder.java:228)\n\tat org.apache.coyote.http2.HpackEncoder.encode(HpackEncoder.java:190)\n\tat org.apache.coyote.http2.Http2UpgradeHandler.writeHeaders(Http2UpgradeHandler.java:534)\n\tat org.apache.coyote.http2.Stream.writeHeaders(Stream.java:326)\n\tat org.apache.coyote.http2.StreamProcessor.prepareResponse(StreamProcessor.java:98)\n\tat org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:263)\n\tat org.apache.coyote.Response.action(Response.java:170)\n\tat org.apache.coyote.Response.sendHeaders(Response.java:352)\n\tat org.apache.coyote.http2.Stream$StreamOutputBuffer.doWrite(Stream.java:582)\n\tat org.apache.coyote.Response.doWrite(Response.java:517)\n\tat org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:351)\n\tat org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:808)\n\tat org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:713)\n\tat org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:391)\n\tat org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:369)\n\tat org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96)\n\tat org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:89)\n\tat org.apache.poi.poifs.storage.BigBlock.doWriteData(BigBlock.java:67)\n\tat org.apache.poi.poifs.storage.DocumentBlock.writeData(DocumentBlock.java:195)\n\tat org.apache.poi.poifs.storage.BigBlock.writeBlocks(BigBlock.java:98)\n\tat org.apache.poi.poifs.storage.DocumentBlock.writeBlocks(DocumentBlock.java:34)\n\tat org.apache.poi.poifs.filesystem.POIFSDocument$BigBlockStore.writeBlocks(POIFSDocument.java:547)\n\tat org.apache.poi.poifs.filesystem.POIFSDocument.writeBlocks(POIFSDocument.java:303)\n\tat org.apache.poi.poifs.filesystem.POIFSFileSystem.writeFilesystem(POIFSFileSystem.java:380)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.write(HSSFWorkbook.java:1308)\n\tat fr.senat.exporters.ExcelExporter.exportActivite(ExcelExporter.java:578)\n\tat fr.senat.presences.servlets.ExcelPresencesServlet.doGetActivite(ExcelPresencesServlet.java:89)\n\tat fr.senat.presences.servlets.ExcelPresencesServlet.doGet(ExcelPresencesServlet.java:39)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:622)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat fr.senat.presences.filters.PseudoRequestScopeEMFilter.doFilter(PseudoRequestScopeEMFilter.java:95)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.apache.logging.log4j.web.Log4jServletFilter.doFilter(Log4jServletFilter.java:71)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:589)\n\tat fr.senat.tomcat.valve.JwtValve.handleAuthentication(JwtValve.java:320)\n\tat fr.senat.tomcat.valve.JwtValve.invoke(JwtValve.java:235)\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:620)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:620)\n\tat org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:291)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)\n\tat org.apache.coyote.http2.StreamProcessor.service(StreamProcessor.java:219)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.http2.StreamProcessor.run(StreamProcessor.java:63)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\nWhen debugging, I noticed that POI tries to write more than 8192 bytes to the output buffer. 8192 being the output buffer size, it is not resized to be bigger than 8192 bytes. This case is properly handled when not using HTTP/2.", "id": 195391, "time": "2016-12-07T16:05:04Z", "bug_id": 60451, "creation_time": "2016-12-07T16:05:04Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 60451, "is_private": false, "id": 195394, "attachment_id": null, "creator": "l.penet@senat.fr", "creation_time": "2016-12-07T17:21:12Z", "time": "2016-12-07T17:21:12Z", "text": "Well, my first analysis of this problem was wrong.\n\nAfter further debugging, it appears that the problem is rather in the \"Content-Disposition\" header value.\n\nAs we are in France, it sometimes contains non ascii chars. In this case, char \u00e9 caused the exception in HPackHuffman.encode.\n\nSo, I changed the way I set the header from :\n\n        resp.setHeader(\"Content-Disposition\", \"attachment;filename=\\\"\" + filename + \"\\\"\");\n\nto :\n\n        URLEncoder enc = new URLEncoder();\n        resp.setHeader(\"Content-Disposition\", \"attachment; filename*=UTF-8''\" + enc.encode(filename, \"UTF-8\"));\n\nand it works."}, {"count": 2, "tags": [], "bug_id": 60451, "attachment_id": null, "id": 195400, "time": "2016-12-08T10:59:03Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-12-08T10:59:03Z", "is_private": false, "text": "This one is worth reading: http://stackoverflow.com/a/30446122/696632"}, {"text": "Agreed. I left the bug opened because the exception raised was quite unclear to me and having another error trace would be great.", "tags": [], "creator": "l.penet@senat.fr", "is_private": false, "count": 3, "id": 195401, "time": "2016-12-08T11:14:42Z", "bug_id": 60451, "creation_time": "2016-12-08T11:14:42Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Neither the HTTP/2 spec nor the HPACK spec define the encoding to be used to convert characters to bytes for header values once you step outside of ASCII so to some extent this is going to be a lottery.\n\nTomcat's implementation was meant to use the unicode code point but failed to take account of the fact the byte is signed in Java. I've fixed this and improved the error message if you try to send a header containing a character with a code point above 255. I also added some test cases.\n\nAs an aside, your original example should now work.\n\nFixed in:\n- trunk for 9.0.0.M15 onwards\n- 8.5.x for 8.5.10 onwards", "attachment_id": null, "id": 195411, "creator": "markt@apache.org", "time": "2016-12-08T22:24:50Z", "bug_id": 60451, "creation_time": "2016-12-08T22:24:50Z", "is_private": false}]
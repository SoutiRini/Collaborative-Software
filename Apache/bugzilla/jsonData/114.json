[{"count": 0, "tags": [], "creator": "dev@tomcat.apache.org", "attachment_id": null, "id": 94, "time": "2000-09-15T09:01:32Z", "bug_id": 114, "creation_time": "2000-09-15T09:01:32Z", "is_private": false, "text": "After moving some JSP code from Websphere to TomCat, I noticed a major inconsistency in behaviour. In both cases, only JSP1.0 features were used.\r\n\r\nThe problem arises when an object is created using the <jsp:useBean> tag, but the corresponding scripting variable is subsequently assigned a new Bean (of the same class).\r\n\r\nIn theory, using the <jsp:getProperty> tag should yield the current value of the given property of the named object. However, after assigning a new value to the scripting variable, the tag continues to return the value of the original object.\r\n\r\nOn the other hand, using the corresponding getProperty method of the scripting variable directly yields the expected results.\r\n\r\nThe problem seems to arise in the JSP Translator, as examination of the generated code (in a subdierctory of the work directory) shows.\r\n\r\nWhen the <jsp:useBean> tag is translated, an object is instantiated and assigned to a named variable, AND a named reference is placed in the pageContext.\r\n\r\nWhen a <jsp:getProperty> tag is translated, code is generated to obtain the reference from the pageContext and call the corresponding getProperty method:-\r\n\r\nout.print(JspRuntimeLibrary.toString((((HasBeanpageContext.findAttribute(\"person\")).getName())))\r\n\r\n\r\n\r\nWhen a \"direct\" getProperty scriptlet is encountered, this is translated as a direct call on the named variable:-\r\n\r\nout.print(person.getName())\r\n\r\n\r\n\r\nNow, initially, these turn out to be one and the same thing, so the result is the same.\r\n\r\nHowever, when a new object is assigned to the named variable, the reference in the pageContext is NOT correspondingly changed, thereby leading to different results.\r\n\r\nThe JSP1.1 spec is not compeletely unambiguous on this matter, but \"common sense\" would dictate that this behaviour is inconsistent and thereby confusing."}, {"count": 1, "attachment_id": null, "creator": "Larry.Isaacs@sas.com", "text": "The <jsp:useBean> stores two references to the single object it creates.  One\ngoes in the appropriate \"scope\" and the other in the local instance variable.\nI don't find anything in the JSP 1.1 spec that mandates any particular behavior\nshould these two reference get out of sync.  It is up to the user to\nkeep them in sync if the object is going to be changed, otherwise behavior is\nundefined.\n\nNote: I tested WebSphere Application Server 3.5.2 and verified that it does not\nkeep the objects in sync.  Adding a <jsp:include> that had the same\n<jsp:useBean> showed that it could not see the new one created by the first\nJSP. It simply uses the local instance variable for getProperty and setProperty\ninstead of the \"scoped\" reference.  \n", "id": 877, "time": "2001-02-27T07:57:35Z", "bug_id": 114, "creation_time": "2001-02-27T07:57:35Z", "tags": [], "is_private": false}]
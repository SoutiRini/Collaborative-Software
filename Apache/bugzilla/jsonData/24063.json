[{"count": 0, "tags": [], "creator": "daniel_campelo@mail.pt", "text": "Several times there is the need to process a 'debug' for an Array, or \nCollection, Iterator, etc...\nAnd that many times there is the need to repeat the same code.\nIt wouldn't be a bad idea to add a/some method(s) that would receave a \nCollection/Iterator/[] and process that same 'debug', listing all the inner \ndata.\nThe Object.toString() method could be called as default.\n\nBest regards,\nDaniel Campelo", "id": 46137, "time": "2003-10-23T15:41:58Z", "bug_id": 24063, "creation_time": "2003-10-23T15:41:58Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 24063, "text": "I can understand your feelings, but since the Collection classes .toString() \nmethods outputs all the contained objects .toString(), and since you simply do \nan Arrays.toList(myarray) to 'wrap' an array as a list, it's not too burdensome \nto the client in this regard\n\nIterator however is different, but I am not sure too many people would advocate \nthe need to output the contents of an iterator.  I have not seen too many \nplaces where an Iterator is passed between methods/classes, I believe it is \nbest practice to use the original Collection, and get each client to use it's \nown iterator from that collection.  \n\nFor this reason I would not advocate any changes here.\n\nThoughts?\n\nPaul Smith", "id": 46191, "time": "2003-10-23T23:26:15Z", "creator": "paul.smith@lawlex.com.au", "creation_time": "2003-10-23T23:26:15Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "daniel_campelo@mail.pt", "attachment_id": null, "text": "Understand...\n\nThe problem of the 'Collection'.toString() is that the info gets a little to, \nmuch confusing, on the log. Specially if there are too many Objects and/or of \ndiferent Classes, for example :\n\nimport java.util.*;\npublic class Tester {\n\tpublic Tester(){\n\t\tSystem.out.println(\"Confusing log\");\n\t\tlogArrayListStd();\n\t\tSystem.out.println(\"More understandable log\");\n\t\tlogArrayListEx();\n\t}\n\n\tpublic void logArrayListEx(){\n\t\tCollection list =  new ArrayList();\n\t\tfor(int i = 0; i < 5 ; i++){\n\t\t\tif(i==1 || i==2 || i==4){\n\t\t\t\tlist.add( new MyTest2(i+\"\", ((char)('a'+i))\n+\"\"));\n\t\t\t}else{\n\t\t\t\tlist.add( new MyTest(i+\"\", ((char)('a'+i))+\"\"));\n\t\t\t}\n\t\t}\n\t\tObject []array = list.toArray();\n\t\tSystem.out.println(\"--------- DEBUGING COLLECTION INIT ---------\n--\");\n\t\tfor(int i = 0; i < array.length ; i++){\n\t\t\tSystem.out.println(i+\" - [\"+array[i].getClass().getName\n()+\"] -> \"+array[i]);\n\t\t}\n\t\tSystem.out.println(\"--------- DEBUGING COLLECTION  END ---------\n--\");\t\t\n\t}\n\n\tpublic void logArrayListStd(){\n\t\tCollection list =  new ArrayList();\n\t\tfor(int i = 0; i < 5 ; i++){\n\t\t\tif(i==1 || i==2 || i==4){\n\t\t\t\tlist.add( new MyTest2(i+\"\", ((char)('a'+i))\n+\"\"));\n\t\t\t}else{\n\t\t\t\tlist.add( new MyTest(i+\"\", ((char)('a'+i))+\"\"));\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"ArrayList = \"+list);\n\t}\n\tpublic static void main(String[] args){\n\t\tTester tester = new Tester();\n\t}\n}\nclass MyTest{\n\tString nome;\n\tString lixo;\n\tpublic MyTest(String _nome, String _lixo){\n\t\tnome = _nome;\n\t\tlixo = _lixo;\n\t}\n\tpublic String toString(){\n\t\treturn \"nome=\"+nome+\",lixo=\"+lixo;\n\t}\n}\nclass MyTest2 extends MyTest{\n\tpublic MyTest2(String _nome, String _lixo){\n\t\tsuper(_nome, _lixo);\n\t}\n\tpublic String toString(){\n\t\treturn \"lixo=\"+lixo+\";nome=\"+nome;\n\t}\n}\n\nPlacing many times that logging code, it's not a good idea...\nIt could be created a Class with some methods to handle this logging, something \nlike this : public void logCollection(Collection col[, ...] );\n\nBut that would be running away from the 'standart' logging and importing some \nmore classes, use more memory with new instances (well it could be used some \nstatic methods, or even a singleton), and so on and so on...\n\nRegards,\nDaniel Campelo", "id": 46236, "time": "2003-10-24T11:11:44Z", "bug_id": 24063, "creation_time": "2003-10-24T11:11:44Z", "is_private": false}, {"count": 3, "tags": [], "creator": "paul.smith@lawlex.com.au", "text": "This is where the ObjectRenderer stuff would work well here, you could register \nan ObjectRenderer to output Collections of 'stuff' the way you want to, perhaps \ndelegating to the standard .toString() method if the collection doesn't contain \nanything that you're interested in.\n\nHows that?", "id": 46266, "time": "2003-10-24T23:15:36Z", "bug_id": 24063, "creation_time": "2003-10-24T23:15:36Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "daniel_campelo@mail.pt", "text": "Well, it solves the problem.\n\nDidn't know that it existed. :P\n\nThanks,\nDaniel Campelo", "id": 46309, "time": "2003-10-27T11:13:02Z", "bug_id": 24063, "creation_time": "2003-10-27T11:13:02Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Can not write (and read) large excel sheets (~65,0000 rows X ~15 columns).\nI increase the heap size to 512 MB and then it was o.k , but if I need more \nshhets it is impossible to increase heap size. \nIs it possible to use streamming to write excel rows in chunks ? .\nI need the application not to use more then about 100 Mb of heap memory.", "attachment_id": null, "id": 28740, "creator": "ranl@amdocs.com", "time": "2002-12-30T10:55:34Z", "bug_id": 15716, "creation_time": "2002-12-30T10:55:34Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 15716, "attachment_id": null, "is_private": false, "id": 28741, "time": "2002-12-30T11:05:40Z", "creator": "avik@apache.org", "creation_time": "2002-12-30T11:05:40Z", "text": "Sorry we CANNOT stream the write. The file format contains upstream pointers to\ndownstream data, making it impossible to stream. You can read using the Event\nAPI, which allows you to read without keeping the whole file in memory. For\nwriting such large files, you are unfortunately out of luck. We cannot recommend\nusing poi if your file is so large. "}, {"count": 2, "attachment_id": null, "creator": "poi-support@buni.org", "is_private": false, "id": 28745, "time": "2002-12-30T13:42:00Z", "bug_id": 15716, "creation_time": "2002-12-30T13:42:00Z", "tags": [], "text": "Ran, if you want to beta-test something for me.  I might be able to help."}, {"count": 3, "tags": [], "bug_id": 15716, "attachment_id": null, "id": 41313, "time": "2003-07-24T14:10:22Z", "creator": "poi-support@buni.org", "creation_time": "2003-07-24T14:10:22Z", "is_private": false, "text": "This is the performance merge going on for 3.0"}, {"count": 4, "text": "Hi, I have as well memory issue when saving bix excel files. I am ready to beta-\ntest, if something is available.", "bug_id": 15716, "is_private": false, "id": 43359, "time": "2003-08-27T09:17:46Z", "creator": "mchantegreil@amadeus.net", "creation_time": "2003-08-27T09:17:46Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "text": "the head has the performance code in it.  There are still some places that need to be merged and \ncell types not yet supported.", "attachment_id": null, "id": 43370, "creator": "poi-support@buni.org", "time": "2003-08-27T14:06:46Z", "bug_id": 15716, "creation_time": "2003-08-27T14:06:46Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 15716, "attachment_id": null, "is_private": false, "id": 45785, "time": "2003-10-16T13:50:35Z", "creator": "andry@keysurvey.com", "creation_time": "2003-10-16T13:50:35Z", "text": "Hi! Seems like memory consumption is only one side of a matter.\nYour files when heaving 20000 rows and 60 columns filled with simple\nnumber 1 are 21M in size (2.0-pre3), while the same file generated with\nhttp://www.andykhan.com/jexcelapi/index.html is 8M in size.\nThe same ratio (approx. 3:1) is in comsumed memory.\nSeems memory consumption goes from not compact file\nstructure being generated by your library."}, {"count": 7, "tags": [], "bug_id": 15716, "is_private": false, "text": "The 3.x series has had some performance improvements. The 3.0 performance code\nmentioned above, didnt quite workout. But POI/HSSF has improved quite a lot\nsince 2.0.\n\nWe still dont support chunked writing.\n\nAs with all performance there is always something else that can be done, but\noften requires significant effort. I am going to close this bug as invalid, we\nwill never be able to \"fix\" this issue to 100% satisfaction (& you still cant\nwrite 65000x15 with just 64MB memory)\n\nJason", "id": 91597, "time": "2006-07-26T10:43:30Z", "creator": "jheight@apache.org", "creation_time": "2006-07-26T10:43:30Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 15716, "is_private": false, "id": 99689, "attachment_id": null, "creator": "gopi.simhadri@tcs.com", "creation_time": "2007-02-22T08:03:39Z", "time": "2007-02-22T08:03:39Z", "text": "It seems HSSF works with small mb of excel , but when 10 mb of file is \nrequested to process ,the request is hung.  I am using poi version 2.5. \nIs this issue addressed in the newer versions ?\n"}, {"count": 9, "tags": [], "bug_id": 15716, "attachment_id": null, "is_private": false, "id": 122037, "time": "2008-10-30T13:41:35Z", "creator": "josh@apache.org", "creation_time": "2008-10-30T13:41:35Z", "text": "It seems (see bug 45570) that the biggest offender for hssf memory usage is all the exploded Formulas (Ptg arrays).  Depending on the content of the workbook, the Ptgs could account for up to half the JVM heap usage (of the HSSFWorkbook object graph).\n\nI made a change in svn 709235 to convert (almost) all Ptg arrays into Formula objects which only spill their Ptg tokens when asked.  Large savings were gained by converting formula un-sharing from eager to lazy.\n\nI ran some tests on a local XLS file (around 4MB in size, containing around 35,000 formula cells).  Before the change, this file took 28.1MB when loaded by POI.  After the change it took 22.6MB.\n\n\nThere is still a long way to go.  No doubt there will be additional requests to reduce POI's memory footprint.  Please supply example XLS files with any new requests (preferably in a new Bugzilla), so we can focus on the specifics, and track progress better.\n\n"}]
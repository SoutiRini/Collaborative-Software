[{"count": 0, "tags": [], "creator": "rks-ant@gmx.de", "attachment_id": 29236, "text": "Created attachment 29236\nPatch with improved local task, the new global task and antunit test\n\nRecently I had the need to better control local properties within\na macrodef.\n\n1) All properties with a given prefix should be local.\n   Needed for:\n     <xmlproperty file=\"@{src}\"  prefix=\"prefix\" />\n\n2) All properties in the current scope should be local.\n\n3) Create a way to exclude a certain property from the\n   extensive local restriction defined by the previous points.\n\n\nExamples:\n\n    <sequential>\n        <!-- all properties with the prefix \"local.\" are local -->\n        <local prefix=\"local\" />\n    </sequential>\n\n    <sequential>\n        <!-- all properties in this sequential are local -->\n        <local/>\n    </sequential>\n\n    <sequential>\n        <!-- all properties in this sequential are local ... -->\n        <local/>\n        <!-- ... except the property gFoo -->\n        <global name=\"gFoo\" />\n    </sequential>\n\n\nUpdated task \"local\": \n\n1) New attribut \"prefix\": All properties with the given prefix are handled as\n   local properties. \n   - If the prefix is empty a BuildException is thrown.\n   - If the prefix does not end with a \".\" one is appended.\n\n2) Without any attribute, all properties are local.\n\nUsage:\n\n     <!-- foo is a local property - like today -->\n     <local name=\"foo\" />\n\n     <!-- All properties with the prefix \"local.\" are local -->\n     <local prefix=\"local\" />\n\n     <!-- all properties are local -->\n     <local/>\n\n\nNew task \"global\":\n\nWell, if I can restrict scope like that, it might be that I need a way to\ndeclare all but a special property as local. So I introduced the task global.\nThe global task is only useful with a accompanied local task.  Otherwise it\nhas no effect.\n\nAttributes:\n\n   name: The name of the global property\n   prefix: All properties with the given prefix are handled as\n       global properties. \n       - If the prefix is empty a BuildException is thrown.\n       - If the prefix does not end with a \".\" one is appended.\n\nUsage:\n     <!-- all properties are local, except \"global.foo\" -->\n     <local/>\n     <global name=\"global.foo\" />\n    \n     <!-- all properties are local, except those prefixed with \"global.\" -->\n     <local/>\n     <global prefix=\"global\" />\n\n\nNote: \"global\" does not really mean global. In the following example\n\"foo\" is global for the inner sequential but is marked local in the\nouter sequential. So it is not visible outside the outer sequential.\nFrom this point of view the name \"global\" is not 100% correct.\n\n    <target ...\n    \n        <sequential>\n            <local name=\"foo\" />\n            <sequential>\n                <!-- all but foo are local -->\n                <local all=\"true\"/>\n                <global name=\"foo\" />\n                <property name=\"foo\" value=\"isset\" />\n            </sequential>\n            <!-- property foo is set -->\n        </sequential>\n        <!-- property foo is NOT set -->\n\n    </target>\n\n\nSome strange usage:\n\nThe global task always overrules a local task. Independant of the order.\nShould this be changed? How?\n\n    <target name=\"strange\">\n        <sequential>\n            <!-- Property 'strange' is local -->\n            <local name=\"strange\" />\n            <property name=\"strange\" value=\"bar\" />\n            <echo message=\"inner local strange: ${strange}\" />\n\n            <!-- Now property 'strange' is global -->\n            <global name=\"strange\" />\n            <echo message=\"1. inner global strange: ${strange}\" />\n            <property name=\"strange\" value=\"bar2\" />\n            <echo message=\"2. inner global strange: ${strange}\" />\n\n            <!-- declaring it local again has no effect -->\n            <local name=\"strange\" />\n            <echo message=\"3. inner global strange: ${strange}\" />\n        </sequential>\n        <echo message=\"global strange: ${strange}\" />\n    </target>\n\nOutput:\n\n    strange:\n    inner local strange: bar\n    1. inner global strange: ${strange}\n    2. inner global strange: bar2\n    3. inner global strange: bar2\n    global strange: bar2\n\n\n\nThe attached patch contains:\n- Updated local task, LocalProperties and LocalPropertyStack\n- New task global\n- Updated antunit tests (src/tests/antunit/taskdefs/local-test.xml)\n\n\nI would further refine this if needed and also update documentation if this is\nconsidered for inclusion in ant.", "id": 161410, "time": "2012-08-15T07:32:50Z", "bug_id": 53723, "creation_time": "2012-08-15T07:32:50Z", "is_private": false}]
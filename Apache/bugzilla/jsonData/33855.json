[{"count": 0, "tags": [], "bug_id": 33855, "is_private": false, "text": "Justifaction:\n\n\"Why is such a package needed?\"\n\nIn today's world of hyper-threaded, multi-processor application servers,\ninevitably there is a need (like any application server library) for a\nscalable logging solution.\n\n\"Okay, but it's not like you're logging 100 times a second...\"\n\nNot necessarily.  When diagnosing problems in a running server, one\noften has to turn on and turn off logging, hopefully without disrupting\nprocessing that is occurring on a live system.\n\nIt would also be a good basis for appenders that could greatly benefit\nfrom concurrency, such as SNMP, JDBC, JMS appenders.  There wouldn't be\nany need to lock these as each thread.  As each log event is relatively\nexpensive, concurrency would _greatly_ improve these classes, as one\nthread would not need to hold a lock for 10-30 milliseconds, for\nexample.\n\nOften times, a large amount of logging occurs during outage situations. \nWhen a database hiccups, or a Servlet class fails (due to bugs), the\nserver tries to log 1000 times a second, causing unrelated threads to\nblock as well.  Could log4j bring your server to its knees?\n\n\"Why not just use the Async appender?\"\n\nThis would improve matters, but it does not allow for synchronous\nlogging of events or take advantage of multi-processors.  A possible fix\nfor the latter problem would be creating a thread pool, which would have\nto be tuned for the installation.\n\n\"Why not fix the existing appender classes?\"\n\nUnfortunately, there would be a lot of compatibility problems.  Anybody\nwho extended an existing appender class in their own code expects\nlocking to behave in a particular way.  (This is the \"Inheritance breaks\nencapsulation\" anti-pattern.)\n\n\"Nobody would use it.  Nobody cares.  Why not create it yourself?\"\n\nI'm somebody, aren't I?  I care.\n\nI think the log4j project and its users would benefit with an integrated\nsolution, rather than one that comes from an unknown source such as\nmyself.  Plus, log4j could itself leverage such a library.\n\nIn addition, it'd be another simple reason log4j beats\njava.util.logging.", "id": 71844, "time": "2005-03-04T22:28:33Z", "creator": "eross@m-qube.com", "creation_time": "2005-03-04T22:28:33Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 14405\nDiffs against March 4th codebase\n\n\n* Make PatternLayout thread-safe and about 2-3 times more efficient.  (Writer\nis slower than StringBuffer.)\n* src/java/org/apache/log4j/spi/ThrowableInformation.java\n  If you want throwable information available, the Throwable class should\noutput the stack trace properly using printStackTrace.\tUnder JDK 1.4, this\nclass is very inefficient and largely unneccessary.  Perhaps make it an System\nproperty to turn on?", "attachment_id": 14405, "bug_id": 33855, "id": 71845, "time": "2005-03-04T22:37:25Z", "creator": "eross@m-qube.com", "creation_time": "2005-03-04T22:37:25Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 14406\nConcurrent classes for March 4th 2005 build\n\n\nIncludes additional appender classes", "is_private": false, "bug_id": 33855, "id": 71846, "time": "2005-03-04T22:39:33Z", "creator": "eross@m-qube.com", "creation_time": "2005-03-04T22:39:33Z", "attachment_id": 14406}, {"count": 3, "tags": [], "creator": "eross@m-qube.com", "attachment_id": 14407, "text": "Created attachment 14407\nDiffs against March 4th codebase\n\n\nThis is the corrected file.\n\n* Improve efficiency of PatternConverter classes by about 2-3 times.\n* Make PatternConverter thread-safe and re-entrant.  Recycling string buffers\nis really not a good idea.\n* Prove DeadlockTest now passes\n* src/java/org/apache/log4j/spi/ThrowableInformation.java is much slower than\n1.2, because of the use of reflection.\tThis feature should not be made\navailable by default.  I suggest a system property setting.", "id": 71847, "time": "2005-03-04T22:43:02Z", "bug_id": 33855, "creation_time": "2005-03-04T22:43:02Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 33855, "is_private": false, "text": "Thanks.  I wanted to acknowledge your contribution and I think your concerns are legitimate, sorry I \nhaven't had a chance to dive into all the details to be able to have a decent discussion on this.\n\nI was wondering about the performance difference between CharArrayWriter and StringBuffer and \nthought the writer might be slower.  log4cxx's Layout uses the STL equivalent of StringBuffer.\n\nI'd like to avoid (maybe it isn't possible) having two SMTPAppender, etc.  However, there are locking \nexpectations that would make it very hard to change the behavior of AppenderSkeleton or \nWriterAppender and other frequently extended appenders.  However, maybe keep AppenderSkeleton \naround for compatibility and create another base implementation and rehost the concrete appenders on \nthe new base.  ", "id": 71857, "time": "2005-03-05T00:17:07Z", "creator": "carnold@apache.org", "creation_time": "2005-03-05T00:17:07Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 33855, "is_private": false, "id": 90798, "time": "2006-06-30T20:43:05Z", "creator": "eross@m-qube.com", "creation_time": "2006-06-30T20:43:05Z", "tags": [], "text": "\nThe patches in bug 24159 are newer.\n\n*** This bug has been marked as a duplicate of 24159 ***"}]
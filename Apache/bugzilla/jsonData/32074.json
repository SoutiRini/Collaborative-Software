[{"count": 0, "tags": [], "text": "For Chinese developers, the log4j output often turns into chaos characters for \nChinese text, eg. in email notifications.\n\nAfter inspection, I found the problem is that \"Layout.getContentType()\" \nreturns \"text/plain\" by default but there's no standard way to change it.\n\nWe need it to be \"text/plain; charset=GBK\", but we could only write our own \nLayout classes for each of the existing Layout sub-classes.\n\nSo Layout.setContentType() is urgently expected...", "attachment_id": null, "id": 66494, "creator": "sun2bin@163.com", "time": "2004-11-05T02:40:11Z", "bug_id": 32074, "creation_time": "2004-11-05T02:40:11Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 32074, "is_private": false, "id": 66561, "time": "2004-11-05T23:49:05Z", "creator": "carnold@houston.rr.com", "creation_time": "2004-11-05T23:49:05Z", "tags": [], "text": "Character encoding and content text are different concepts and it would be wrong to try to combine \nthem.  Character encoding is appropriately handled at the appender, not the layout.  Layout's are \nalways dealing with UTF-16 characters, the appenders are responsible for converting that to a byte \nstream.\n\nWriterAppender derived appenders have an Encoding attribute that allows you to specify the encoding \nto be used.  Perhaps in your use case, that was not appropriately set or the appender in use does not \nappropriately control or report the encoding.\n\ngetContentType() is overriden in application specific layouts such as HTMLLayout (which returns text/\nhtml) and XMLLayout (which I was surprised doesn't return text/xml).\n\n\n\n\n\n"}, {"count": 2, "tags": [], "bug_id": 32074, "attachment_id": null, "id": 77969, "time": "2005-08-02T20:20:44Z", "creator": "yoavs@computer.org", "creation_time": "2005-08-02T20:20:44Z", "is_private": false, "text": "I agree with Curt's comments, so I'm closing this issue.  setEncoding methods\nare available and (in my experience with non-en_us locales) correctly implemented."}]
[{"count": 0, "tags": [], "bug_id": 6033, "is_private": false, "text": "Along with \"yes\", \"true\" and \"on\", boolean attributes should accept the value\n\"1\" as indicating the true condition.  The attached patch adds this behaviour.", "id": 9920, "time": "2002-01-25T16:12:02Z", "creator": "peterj@liberate.com", "creation_time": "2002-01-25T16:12:02Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 6033, "attachment_id": 1070, "id": 9921, "time": "2002-01-25T16:12:52Z", "creator": "peterj@liberate.com", "creation_time": "2002-01-25T16:12:52Z", "is_private": false, "text": "Created attachment 1070\nAllows \"1\" as \"true\""}, {"count": 2, "tags": [], "creator": "jakarta@ehatchersolutions.com", "text": "This would break backwards compatibility though, so I'm -1 on this change.  \nPrevious builds may have relied on \"1\" being false.", "id": 9928, "attachment_id": null, "bug_id": 6033, "creation_time": "2002-01-25T18:19:09Z", "time": "2002-01-25T18:19:09Z", "is_private": false}, {"count": 3, "tags": [], "creator": "peterj@liberate.com", "text": "Isn't \"1\" generally regarded as a true value, in C/C++, Perl, shell, etc.?  I've\nnever seen \"1\" mean \"false\".", "id": 9929, "attachment_id": null, "bug_id": 6033, "creation_time": "2002-01-25T18:30:27Z", "time": "2002-01-25T18:30:27Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jakarta@ehatchersolutions.com", "text": "Maintaining backwards compatibility in Ant 1.x is an overriding mission \nthough.  No argument that \"1\" means TRUE in many languages.  But there are \nworkarounds to retaining that meaning in Ant using <condition>.  Adding \"1\" to \nthe list of true values is not a necessity, and could potentially break builds.", "id": 9930, "attachment_id": null, "bug_id": 6033, "creation_time": "2002-01-25T18:38:46Z", "time": "2002-01-25T18:38:46Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 6033, "is_private": false, "text": "Would it be acceptable to resolve this as \"later\" and move the version to \"2.0\nspec\"?", "id": 9931, "time": "2002-01-25T19:31:24Z", "creator": "peterj@liberate.com", "creation_time": "2002-01-25T19:31:24Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 6033, "attachment_id": null, "text": "C/C++ do not actually view \"1\" as true; their rules are. (using ==> to mean \nimplies and <==> as declarative equivalence, cos I can't put the Z fontset in \na bugrep)\n\n0 <==> false\n!false <==> true\n\nso 1=>true ; but also 3=> true, -23555 => true. \n\nant's rules are\n\n\"true\" ==> true\n\"yes\" ==> true\n!true <==> false\n\nso adding \"1\" to true a) changes ant's logic, b) isnt consistent with the \nC/C++ logic either, which would need to say that anything other than \"0\" is \ntrue, which definately breaks existing builds big time.\n\nAnd that we do not want. So no, it wont go to later either, because it is a \nfundamental re-interpretation of what consitutues falsehood and truth. \n\nSorry. We'd like to thank for your submission anyway, because it not only \nshows pent up need for mapping numbers to truth and falsehood, but because it \nshows you are willing to fiddle with the source and submit changes. We like \nthat.\n\nIf you do want to map from numbers to booleans, consider adding a new \ncondition test; these are easy to do and wont break any existing builds. \n\nSomething like <numericequals arg1=\"${property}\" arg2=\"1\" /> for example. \n\n\n", "id": 9932, "time": "2002-01-25T19:35:11Z", "creator": "steve_l@iseran.com", "creation_time": "2002-01-25T19:35:11Z", "is_private": false}]
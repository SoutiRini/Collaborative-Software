[{"count": 0, "tags": [], "bug_id": 51120, "text": "The tomcat container throws an expception to the log , when the client disconnects the socket abruptly. \nThe exception is ,\nSEVERE: An exception or error occurred in the container during the request processing\njava.lang.NullPointerException\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:426)\n\tat org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:396)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:357)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1531)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:619)\n\n\nSteps, \n1. I have a desktop client written in python. It sends a HTTP request with content length of 1000. \n2. Server responds with BEGIN\n3. The desktop makes use of NIO to hold the connection for updates .\n4. When i close the python client before the timeout (declared in server) , this exception is thrown .\n\n\nI have put forth a simple testing server code, \nMy server.xml \n  <Connector port=\"9000\" \n               connectionTimeout=\"216000\" \n               protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               redirectPort=\"8443\" />\n\nMy testing server code ,\n@Override\n    public void event(CometEvent ce) throws IOException, ServletException {\n        if (ce.getEventType() == CometEvent.EventType.BEGIN) {\n            \n        } else if (ce.getEventType() == CometEvent.EventType.ERROR) {\n            ce.close();\n        } else if (ce.getEventType() == CometEvent.EventType.END) {\n            ce.close();\n        } else if (ce.getEventType() == CometEvent.EventType.READ) {\n    }\n}\n\nOther details\nJDK Used : 1.6", "id": 146000, "time": "2011-04-26T05:32:30Z", "creator": "saravananl@te-soft.com", "creation_time": "2011-04-26T05:32:30Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "saravananl@te-soft.com", "text": "I think this might help.\n\nIn the comet connection, when the client sends some data basically triggering the read event, the NPE exception is not coming. \n\nBut if the client disconnects the socket without writing data(not triggering READ) this problem happens.", "count": 1, "id": 146014, "time": "2011-04-27T03:39:20Z", "bug_id": 51120, "creation_time": "2011-04-27T03:39:20Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 51120, "is_private": false, "text": "\nPossible candidate, notice the if(ctxt != null) check in other code that does the same thing.  From the 1st hunk in the patch.\n\nLine 320 (as shown in the patch - does not check context!=null) but was also recently added, might need audit.\nLine 430 (which was line 426 in user exception, plus the recent changes below applied - does not check context!=null)\n\ngit clone https://github.com/apache/tomcat70.git\ngit diff TOMCAT_7_0_12\n\ndiff --git a/java/org/apache/catalina/connector/CoyoteAdapter.java b/java/org/apache/catalina/connector/CoyoteAdapter.java\nindex de2f7d2..10fb3c5 100644\n--- a/java/org/apache/catalina/connector/CoyoteAdapter.java\n+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java\n@@ -271,7 +271,7 @@ public class CoyoteAdapter implements Adapter {\n             if (!request.isAsync() && !comet) {\n                 // Error or timeout - need to tell listeners the request is over\n                 // Have to test this first since state may change while in this\n-                // method and this is only required if entering this methos in\n+                // method and this is only required if entering this method in\n                 // this state \n                 Context ctxt = (Context) request.getMappingData().context;\n                 if (ctxt != null) {\n@@ -317,6 +317,10 @@ public class CoyoteAdapter implements Adapter {\n                 request.finishRequest();\n                 response.finishResponse();\n                 req.action(ActionCode.POST_REQUEST , null);\n+                ((Context) request.getMappingData().context).logAccess(\n+                        request, response,\n+                        System.currentTimeMillis() - req.getStartTime(),\n+                        false);\n             }\n \n         } catch (IOException e) {", "id": 146018, "time": "2011-04-27T12:28:35Z", "creator": "darryl@darrylmiles.org", "creation_time": "2011-04-27T12:28:35Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 3, "id": 146107, "time": "2011-05-04T10:52:09Z", "bug_id": 51120, "creation_time": "2011-05-04T10:52:09Z", "text": "I can't reproduce this with the latest 7.0.x code.\n\nIf you still see this issue with the latest 7.0.x code, please provide the simplest possible test case the demonstrates the issue in source code form. In this case a servlet and a JUnit test case that accesses the servlet would be ideal."}]
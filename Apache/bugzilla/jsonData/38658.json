[{"count": 0, "tags": [], "bug_id": 38658, "text": "A need occasioanlly arisies for users to implement authentication logic inside\nof their webapp. Currently users must learm/implement the server specifc APIs\nfor Realm & Authenicator to do this, and must also in essence duplicate some of\nthe logic that already exists in existing libs (their own or third party). Some\nexmaples would be the Tomcat X.509 authenicator, or Form login libs.\n\nTomcat also currently does not have (to my knowledge) is simple API to perform\nimplicit authenctiion (regsitering an HttpSession with a Principal), though this\nexists in other web server APIs.\n\nIn response to these needs, a minimal/simple bridge into the authenication\nservices is proposed; at this point only one method is proposed, and in a\nfashion where minimal coding is required for end users.\n\nThese 3 new (proposed) methods allow webapps (with classloader access to the\nserver APIs) to implicitly register a Principal with a HttpSession (e.g to\nimplement or use-existing 3rd party Authenticator/Realm systems). However one\ncan envision a facade API (not given here) that that bridges class loaders so\nthat no change is needed to server configs. Such a facade would simply call into\nthe first method given below, and would likely entail tranlating a\nHttpServletRequest/Resp into the servers HttpRequest/Resp object - a sample is\ngiven at the below.\n\nAdd to org.apache.catalina.authenticator.AuthenticatorBase:\npublic void doLogin(HttpServletRequest request,\n  HttpServletResponse response, Principal principal)\n{\n  register(\n    (HttpRequest)((RequestFacade)request).getRequest(),\n    (HttpResponse)((ResponseFacade)response).getResponse(),\n    principal, \"FORM\", null, null);\n}\n\nAdd to org.apache.catalina.connector.ResponseFacade:\npublic Response getResponse() {\n  return resp;\n}\n\nAdd to org.apache.catalina.connector.RequestFacade:\npublic Request getRequest() {\n  return (Request)request;\n}\n\n\nI have tested these but in a limited way, and am not certain of the absence of\npotential ClassCastExceptions.\n\nExample form (clear text password) authenicator code; indirectly illustrates\npossible doLogin(HttpServletRequest, HttpServletResponse, Principal) impl.\n\n/** query an existing plain-password (custom form-based login)\nauthenticator/realm, if success login: **/\npublic static boolean tryLogin(HttpServletRequest request, HttpServletRequest\nresponse, String user, String pass)\n  throws Exception\n{\n  Server server = ServerFactory.getServer();\n  Service service = server.findService(\"Catalina\");\n  if (service==null)\n    throw new NullPointerException(\"login: Cannot load Service 'Catalina'\");\n  Engine engine = (Engine) service.getContainer();\n  if (engine==null)\n    throw new NullPointerException(\"login: Cannot load Container for Service\n'Catalina'\");\n\n  Host host = null;\n  String hostname = Strings.norm(request.getHeader(\"Host\"));\n  Object[] o = engine.findChildren();\n  for (int i=0; i<o.length; i++)\n  {\n    if (!(o[i] instanceof Host))\n      continue;\n    Host h = (Host)o[i];\n    if (hostname.equalsIgnoreCase(h.getName()))\n    {\n      host = h;\n      break;\n    }\n    String[] list = h.findAliases();\n    for (int j=0; j<list.length; j++)\n      if (hostname.equalsIgnoreCase(list[j]))\n      {\n        host = h;\n        break;\n      }\n  }\n  if (host==null)\n    throw new NullPointerException(\"login: Cannot load Host '\"+hostname+\"'\");\n  String reqbase  = Strings.norm(req.getContextPath())+\"/\";\n  Context context = (Context) host.findChild(reqbase);\n  if (context==null)\n  {\n    context = (Context) host.findChild(Strings.clip(reqbase,-1));\n  }\n  if (context==null)\n    throw new NullPointerException(\"login: Cannot load Context '\"+reqbase+\"'\");\n  Manager manager = context.getManager();\n  HttpSession hses = request.getSession(true);\n  Session session = null;\n  try {\n    session = manager.findSession(hses.getId());\n  } catch (IOException e) {}\n  if (session==null)\n    throw new NullPointerException(\"login: Cannot load Session '\"+reqbase+\"'\");\n  Realm realm = context.getRealm();\n  LoginConfig config = context.getLoginConfig();\n  FormAuthenticator auth = null;\n  Pipeline pipe = context.getPipeline();\n  Valve[] v = pipe.getValves();\n  for (int i=0; i<v.length; i++)\n  {\n    if (v[i] instanceof Authenticator)\n    {\n      auth = (FormAuthenticator)v[i];\n      break;\n    }\n  }\n  if (auth==null)\n    throw new NullPointerException(\"login: Cannot load Authenticator\n'\"+reqbase+\"'\");\n  Principal principal = realm.authenticate(user, pass);\n  if (principal==null)\n    return false;\n  session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);\n  session.setNote(Constants.SESS_USERNAME_NOTE, user);\n  session.setNote(Constants.SESS_PASSWORD_NOTE, pass);\n  auth.doLogin(request, response, principal);\n  return true;\n}\n\naddtl keywords: sso x509 logon pam", "id": 85820, "time": "2006-02-15T16:59:40Z", "creator": "ken@kensystem.com", "creation_time": "2006-02-15T16:59:40Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 38658, "attachment_id": null, "text": "This is an enhancement. Mark it as such.", "id": 85827, "time": "2006-02-15T20:23:38Z", "creator": "markt@apache.org", "creation_time": "2006-02-15T20:23:38Z", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "ken@kensystem.com", "text": "After installing tomcat 5.5 and source, some very substantial changes from 5.0\nrequired the following:\n\norg.apache.catalina.connector.ResponseFacade:\n\nimport org.apache.catalina.connector.Response;\npublic Response getResponse() {\n  return response;\n}\n\norg.apache.catalina.connector.RequestFacade:\n\nimport org.apache.catalina.connector.Request;\npublic Request getRequest() {\n  return (Request)request;\n}\n\norg.apache.catalina.connector.AuthenticatorBase:\n\nimport org.apache.catalina.connector.ResponseFacade;\nimport org.apache.catalina.connector.RequestFacade;\n\npublic void doLogin(HttpServletRequest request, HttpServletResponse response,\nPrincipal principal) \n{\n  register(((RequestFacade)request).getRequest(),\n  ((ResponseFacade)response).getResponse(),\n  principal, \"FORM\", null, null);\n}\n\nAlso, in the 'tryLogin' example below:\nsession.setNote(Constants.SESS_PASSWORD_NOTE, pass);\n\npassword now cannot be null; I presume an empty String is safe - it works okay.\n\nThe fact that HttpResponse and HttpRequest no longer exist (code cleanup) also\nexemplifies the usefulness of a simple public interface into the login state --\nif one had built modules that extended AuthenticatorBase and required\nHttpResponse/HttpRequest those (as in this case), one would have to maintain two\nversions (for 5 and 5.5).", "id": 85865, "time": "2006-02-17T05:17:02Z", "bug_id": 38658, "creation_time": "2006-02-17T05:17:02Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 38658, "attachment_id": null, "text": "Why would you want to hook into server-specific stuff instead of using JAAS?", "id": 87953, "time": "2006-04-13T19:16:50Z", "creator": "yoavs@computer.org", "creation_time": "2006-04-13T19:16:50Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 38658, "attachment_id": null, "text": "I can offer several reasons why it may be more beneficial to use the\nserver-native API:\n\na) The user can retain currently configured authentication modules and configs\nwithout and changes and testing (to configs, or adding/converting (at the\nclass/compile level) existing modules to JAAS). The simple form-based password\nlogin is a good example. With JAAS a server config change is required for\nexisting users (many of whom are laymen with working production system).\nConversely, the proposed server API works transparently with existing configs\n(except for a single config that allows accessing server API/classloaders).\n\nb) Lightweight - suitable for micro deployments where memory is limited.\n\nc) Other servers also provide simple to use API level support for registering a\nuser with a session, even at the expense of inherently not being portable -\nwhich is not an issue for many applications\n\ne) Vendor; JAAS requires an additional API extention (learn, compile, test) and\nvendors must train users to learn and re-config for JAAS. This RFE (combined\nwith sample code above) makes implicit user/session registration (by API call)\nsimpler both for vendors* and simple script writers. \n\n*(Many vendors already have plugins that interface to server specific APIs for\nthis purpose so the RFE places a smaller burden on vendor and user)\n\nSo, JAAS is powerful / more ideal in some cases, but may be too complex for\nsimple-to-use & lightweight deployments.", "id": 88081, "time": "2006-04-14T16:31:18Z", "creator": "ken@kensystem.com", "creation_time": "2006-04-14T16:31:18Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 38658, "text": "I don't by the complexity and lightweight-ness arguments.  If one were after\nthat, a simple cookie-based approach or even filesystem-based would do much\nbetter than learning server-specific APIs.\n\nI don't want to expose more server-specific APIs in general.  On the contrary,\nwe're trying to move away from server-specific stuff into generic solutions like\nJMX for managability, JAAS for authentication, Filters instead of Valves, and\nmore.  Accordingly I'm going to close this item as WONTFIX.  Since no other\ncommitter has commented, I'm guessing there's lazy consensus here, but if not\nthey're free to reopen this issue and assign it to themselves.", "id": 97325, "time": "2006-12-26T06:53:52Z", "creator": "yoavs@computer.org", "creation_time": "2006-12-26T06:53:52Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "ken@kensystem.com", "text": "Unfort. the lack of this feature only perpetuates (seems to be more common) the\ntypical hack that app writers do (for the reason listed above): creating a\nfacade layer on top the req/res and creating their own login & session binding\nlayer.", "id": 104204, "time": "2007-06-08T08:18:44Z", "bug_id": 38658, "creation_time": "2007-06-08T08:18:44Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 38658, "attachment_id": null, "text": "(In reply to comment #5)\n> \n> I don't want to expose more server-specific APIs in general.  On the contrary,\n> we're trying to move away from server-specific stuff into generic solutions like\n> JMX for managability, JAAS for authentication, Filters instead of Valves, and\n> more.\n\nI've found that in software you can just stick to the interfaces and be status\nquo -- a commodity. But the other half of the audience are the hackers, when you\noffer features in addiction to the interfaces,\n\na) people enjoy hacking/creating new software based on the powers that one\nsoftware offers over the status quo\nb) the cool features/simplicity that they come up with often wind up becoming an\ninterface down the road. This is how most software came into existence; because\nsomeone with the freedom to tinker had the chance to prove its value and it\nbecame a de facto.\n\nI'm not making these args about this RFE per so, but in response to your\ngeneralization about server-specific APIs.", "id": 104205, "time": "2007-06-08T08:33:22Z", "creator": "ken@kensystem.com", "creation_time": "2007-06-08T08:33:22Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 38658, "attachment_id": null, "text": "At the moment, there's noone which is apparently interested in trying to define\nan API which would allow the application to do the login/logout. So at this\npoint, I think it's very unlikely you'll get something in Tomcat. However, this\nis a long running RFE in the Servlet API, so it will be addressed eventually.", "id": 104289, "time": "2007-06-11T05:42:35Z", "creator": "remm@apache.org", "creation_time": "2007-06-11T05:42:35Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 44412, "text": "On the following:\n    <fo:block>Before the block</fo:block>\n    <fo:block border=\"4pt solid black\" break-before=\"page\" break-after=\"page\">A\nblock with\n      borders and break-before and break-after.</fo:block>\n    <fo:block>After the block</fo:block>\n\nThe border-after on the second block is missing, although the block is finished.\nIt looks like its conditionality is (wrongly) taken into account, as setting\nborder-after-width.conditionality=\"retain\" make it re-appear. The problem also\ndoesn't show up if break-after is removed from the second block and break-before\nadded on the third block instead.", "id": 113700, "attachment_id": null, "creator": "vhennebert@gmail.com", "creation_time": "2008-02-13T04:32:09Z", "time": "2008-02-13T04:32:09Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44412, "text": "Created attachment 21517\nSample file showing the problem", "id": 113701, "time": "2008-02-13T04:33:44Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-02-13T04:33:44Z", "is_private": false, "attachment_id": 21517}, {"count": 2, "tags": [], "bug_id": 44412, "text": "Created attachment 21531\nMissing border-before when break-before set\n\nAnother problematic situation: when break-before is set on a block, the before\nborder of the enclosing block is not rendered.", "id": 113755, "time": "2008-02-14T10:35:58Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-02-14T10:35:58Z", "is_private": false, "attachment_id": 21531}, {"count": 3, "tags": [], "bug_id": 44412, "text": "(In reply to comment #0)\n> On the following:\n>     <fo:block>Before the block</fo:block>\n>     <fo:block border=\"4pt solid black\" break-before=\"page\" break-after=\"page\">A\n> block with\n>       borders and break-before and break-after.</fo:block>\n>     <fo:block>After the block</fo:block>\n> \n> The border-after on the second block is missing, although the block is finished.\n> It looks like its conditionality is (wrongly) taken into account, as setting\n> border-after-width.conditionality=\"retain\" make it re-appear. The problem also\n> doesn't show up if break-after is removed from the second block and break-before\n> added on the third block instead.\n\nThis part should be fixed now:\nhttp://svn.apache.org/viewvc?rev=637057&view=rev\n\nThe \"pending marks\" have not been removed from the layout context which caused the border-after to be considered twice in space resolution, on time in a conditional context which reset the border to 0.", "id": 114621, "time": "2008-03-14T04:18:00Z", "creator": "jeremias@apache.org", "creation_time": "2008-03-14T04:18:00Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 44412, "text": "(In reply to comment #2)\n> Created an attachment (id=21531) [details]\n> Missing border-before when break-before set\n> \n> Another problematic situation: when break-before is set on a block, the before\n> border of the enclosing block is not rendered.\n\nI'm not sure this is really wrong. Unexpected maybe. The spec says that fo:block produces one or more areas. Now if the first child of this block causes a break-before the block should probably still create an area on the (current) page before the break (but with bpd=0), i.e. with only before borders. This doesn't happen now. I'll go through the spec again just to be sure. But at any rate, I believe the bug here is not that the border before is missing on the second page, but that it's missing on the first.", "id": 114622, "time": "2008-03-14T04:23:45Z", "creator": "jeremias@apache.org", "creation_time": "2008-03-14T04:23:45Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 44412, "is_private": false, "text": "(In reply to comment #4)\n> (In reply to comment #2)\n> > Created an attachment (id=21531) [details] [details]\n> > Missing border-before when break-before set\n> > \n> > Another problematic situation: when break-before is set on a block, the before\n> > border of the enclosing block is not rendered.\n> \n> I'm not sure this is really wrong. Unexpected maybe. The spec says that\n> fo:block produces one or more areas. Now if the first child of this block\n> causes a break-before the block should probably still create an area on the\n> (current) page before the break (but with bpd=0), i.e. with only before\n> borders. This doesn't happen now. I'll go through the spec again just to be\n> sure. But at any rate, I believe the bug here is not that the border before is\n> missing on the second page, but that it's missing on the first.\n> \n\nI've gone through the spec again and believe my initial analysis was correct. I've fixed the problem accordingly.\nhttp://svn.apache.org/viewvc?rev=637119&view=rev", "id": 114624, "time": "2008-03-14T07:41:28Z", "creator": "jeremias@apache.org", "creation_time": "2008-03-14T07:41:28Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 44412, "is_private": false, "text": "(In reply to comment #4)\n> (In reply to comment #2)\n> > Created an attachment (id=21531) [details] [details]\n> > Missing border-before when break-before set\n> > \n> > Another problematic situation: when break-before is set on a block, the before\n> > border of the enclosing block is not rendered.\n> \n> I'm not sure this is really wrong. Unexpected maybe. The spec says that\n> fo:block produces one or more areas. Now if the first child of this block\n> causes a break-before the block should probably still create an area on the\n> (current) page before the break (but with bpd=0), i.e. with only before\n> borders. This doesn't happen now. I'll go through the spec again just to be\n> sure. But at any rate, I believe the bug here is not that the border before is\n> missing on the second page, but that it's missing on the first.\n\nYou seem to be right. Reading and re-reading the spec again I can no longer find a justification for the other behaviour that I was describing.\n\nThe thing is, when I fixed breaks in tables I did implement that behaviour, thinking it was the one to be expected. Sigh.\n\nNow XSL Formatter puts the border on the second page where the child block is, and nothing on the first page. I know that doesn't mean anything, but...\n\nI'm all confused.", "id": 114635, "time": "2008-03-14T10:41:23Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-03-14T10:41:23Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 44412, "text": "(In reply to comment #6)\n<snip/>\n> Now XSL Formatter puts the border on the second page where the child block is,\n> and nothing on the first page. I know that doesn't mean anything, but...\n> \n> I'm all confused.\n\nDon't let yourself be confused by this. Commercial implementors don't always follow the spec because sometimes user expectations can be more important than spec conformance (see indent inheritance). As long as there's no useful spec test suite things will remain like this.\n\n\n", "id": 114677, "time": "2008-03-17T02:56:00Z", "creator": "jeremias@apache.org", "creation_time": "2008-03-17T02:56:00Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "vhennebert@gmail.com", "is_private": false, "count": 8, "id": 114692, "time": "2008-03-17T12:34:23Z", "bug_id": 44412, "creation_time": "2008-03-17T12:34:23Z", "text": "The fix does not work if the second attachment is slightly modified (new attachment follows).\nPlus it doesn't work with tables. See the following testcases where the failing tests are currently commented out:\ntable-cell_break-before_first-row.xml\ntable-cell_break-after_last-row.xml\ntable-row_break-before_first-row.xml\ntable-row_break-after_last-row.xml\ntable_break-before_break-after.xml\n\nBy looking at the changes made in BlockStackingLayoutManager I have no real clue of what needs to be done in TableLayoutManager."}, {"attachment_id": 21676, "tags": [], "creator": "vhennebert@gmail.com", "is_private": false, "count": 9, "id": 114693, "time": "2008-03-17T12:35:32Z", "bug_id": 44412, "creation_time": "2008-03-17T12:35:32Z", "text": "Created attachment 21676\nWhen adding the block with the red border the black one is again missing"}, {"count": 10, "tags": [], "bug_id": 44412, "text": "(In reply to comment #9)\n> Created an attachment (id=21676) [details]\n> When adding the block with the red border the black one is again missing\n> \n\nI can't reproduce that. The result looks fine to me (including the element list). No missing borders.", "id": 114695, "attachment_id": null, "creator": "jeremias@apache.org", "creation_time": "2008-03-18T00:38:21Z", "time": "2008-03-18T00:38:21Z", "is_private": false}, {"attachment_id": 21677, "tags": [], "bug_id": 44412, "is_private": false, "count": 11, "id": 114697, "time": "2008-03-18T01:07:41Z", "creator": "jeremias@apache.org", "creation_time": "2008-03-18T01:07:41Z", "text": "Created attachment 21677\nStart of a patch for properly handling break-before of a child of a table-cell"}, {"count": 12, "tags": [], "bug_id": 44412, "text": "(In reply to comment #8)\n> Plus it doesn't work with tables. See the following testcases where the failing\n> tests are currently commented out:\n> table-cell_break-before_first-row.xml\n> table-cell_break-after_last-row.xml\n> table-row_break-before_first-row.xml\n> table-row_break-after_last-row.xml\n> table_break-before_break-after.xml\n> \n> By looking at the changes made in BlockStackingLayoutManager I have no real\n> clue of what needs to be done in TableLayoutManager.\n\nThe patch I've just attached should show you how to port the child break-before behaviour from BlockStackingLM to TableCellLM. But that's not the whole thing, yet (I've only looked at the first case in table-cell_break-before_first-row.xml for now). This creates an empty box that will cause the generation of a 0-bpd area before the break. For BlockStackingLM, this is enough, but for tables the element list combination is added. This patch alone behaves correctly but shows a short-coming in the handling of our rule that every cell needs to contribute at least one part before the first break possibility in a table-row. Currently, the algorithm doesn't detect that the first cell is contributing nothing (a 0-length box is nothing). So the second cell shouldn't contribute it's first part, yet. I hope that gets you going.\n\nIdeally, of course, the table LMs would be improved so the getNextKnuthElements() can be called multiple times and can break early when a forced break is encountered (like other LMs do). I guess this will be required anyway once the inline/block-level layout interaction is addressed. I don't know if Simon has already dared looking into this not quite trivial task.\n\n", "id": 114698, "attachment_id": null, "creator": "jeremias@apache.org", "creation_time": "2008-03-18T01:15:58Z", "time": "2008-03-18T01:15:58Z", "is_private": false}, {"count": 13, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > Created an attachment (id=21676) [details] [details]\n> > When adding the block with the red border the black one is again missing\n> > \n> \n> I can't reproduce that. The result looks fine to me (including the element\n> list). No missing borders.\n\nGrmblbl. My bad, sorry, my local copy was probably not up-to-date.\n", "id": 114699, "time": "2008-03-18T02:52:51Z", "bug_id": 44412, "creation_time": "2008-03-18T02:52:51Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "vhennebert@gmail.com", "is_private": false, "count": 14, "id": 114700, "time": "2008-03-18T03:20:59Z", "bug_id": 44412, "creation_time": "2008-03-18T03:20:59Z", "text": "(In reply to comment #12)\n> (In reply to comment #8)\n> > Plus it doesn't work with tables. See the following testcases where the failing\n> > tests are currently commented out:\n> > table-cell_break-before_first-row.xml\n> > table-cell_break-after_last-row.xml\n> > table-row_break-before_first-row.xml\n> > table-row_break-after_last-row.xml\n> > table_break-before_break-after.xml\n> > \n> > By looking at the changes made in BlockStackingLayoutManager I have no real\n> > clue of what needs to be done in TableLayoutManager.\n> \n> The patch I've just attached should show you how to port the child break-before\n> behaviour from BlockStackingLM to TableCellLM. But that's not the whole thing,\n> yet (I've only looked at the first case in\n> table-cell_break-before_first-row.xml for now). This creates an empty box that\n> will cause the generation of a 0-bpd area before the break. For\n> BlockStackingLM, this is enough, but for tables the element list combination is\n> added. This patch alone behaves correctly but shows a short-coming in the\n> handling of our rule that every cell needs to contribute at least one part\n> before the first break possibility in a table-row. Currently, the algorithm\n> doesn't detect that the first cell is contributing nothing (a 0-length box is\n> nothing). So the second cell shouldn't contribute it's first part, yet. I hope\n> that gets you going.\n\nThanks for the patch. I understand the purpose of the empty box now. However I won't apply it since like you noticed it doesn't fit well with the merging algorithm, plus it introduces code duplication I'm not happy with (a similar change probably needs to be done also for lists \u2013once breaks in lists are working). Leaving the bug open for now since I don't currently have time to dive further into it.\n\n\n> Ideally, of course, the table LMs would be improved so the\n> getNextKnuthElements() can be called multiple times and can break early when a\n> forced break is encountered (like other LMs do). I guess this will be required\n> anyway once the inline/block-level layout interaction is addressed. I don't\n> know if Simon has already dared looking into this not quite trivial task.\n\nNot sure about that. I actually removed that in TableLM and TableCellLM. I'm convinced the getNextKnuthElements method can be called only once and forced breaks handled another way. But indeed things might become clearer once working on the inline/block-level interaction.\n\nVincent\n"}, {"count": 15, "tags": [], "bug_id": 44412, "text": "Created attachment 21718\nIllegal empty page inserted because of two consecutive break-before\n\nI noticed that this change introduces a regression in the handling of breaks. In the following situation:\n    <fo:block break-before=\"page\">\n      <fo:block break-before=\"page\">\n        Some text. Some text. Some text. Some text.\n      </fo:block>\n    </fo:block>\nonly one page break should occur. The empty box introduced by the change now triggers an additional page break. This used to work well with FOP 0.94.", "id": 114981, "time": "2008-03-26T05:03:50Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-03-26T05:03:50Z", "is_private": false, "attachment_id": 21718}, {"count": 16, "tags": [], "bug_id": 44412, "text": "(In reply to comment #15)\n> Created an attachment (id=21718) [details]\n> Illegal empty page inserted because of two consecutive break-before\n> \n> I noticed that this change introduces a regression in the handling of breaks.\n> In the following situation:\n>     <fo:block break-before=\"page\">\n>       <fo:block break-before=\"page\">\n>         Some text. Some text. Some text. Some text.\n>       </fo:block>\n>     </fo:block>\n> only one page break should occur. The empty box introduced by the change now\n> triggers an additional page break. This used to work well with FOP 0.94.\n> \n\nI've looked into this but I'm not so entirely sure if this is wrong. That 0.94 didn't produce an empty page was more or less a coincidence since an element list with only a penalty(p=-INF) does not trigger page production. But now that the parent fo:block of the block issuing the break-before creates a box(w=0), a new page with only a zero-height block area is produced (ID production, optional borders/padding). The constraints defined in http://www.w3.org/TR/xsl11/#keepbreak are satisfied. The key part when talking about break-before is:\n\"A break-before condition is satisfied if the first area generated and returned by the formatting object is leading within a context-area.\" The spec doesn't say anything about how the parent FO should behave in such a case.\n\nI once again tried to find hints in the spec that the two break-before properties should effectively be merged. But I didn't find anything.\n\nIn the end, if tables are implemented to merge the break-befores together but the other block-level FOs don't do that, then IMO that's merely a behaviour inconsistency inside FOP rather than a bug in one or the other parts. I believe this needs some more discussion on fop-dev before we do any more about this bug.", "id": 116006, "time": "2008-04-29T01:35:11Z", "creator": "jeremias@apache.org", "creation_time": "2008-04-29T01:35:11Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 44412, "text": "(In reply to comment #16)\n> (In reply to comment #15)\n> > Created an attachment (id=21718) [details] [details]\n> > Illegal empty page inserted because of two consecutive break-before\n> \n> I've looked into this but I'm not so entirely sure if this is wrong. That 0.94\n> didn't produce an empty page was more or less a coincidence since an element\n> list with only a penalty(p=-INF) does not trigger page production. But now that\n> the parent fo:block of the block issuing the break-before creates a box(w=0), a\n> new page with only a zero-height block area is produced (ID production,\n> optional borders/padding). The constraints defined in\n> http://www.w3.org/TR/xsl11/#keepbreak are satisfied. The key part when talking\n> about break-before is:\n> \"A break-before condition is satisfied if the first area generated and returned\n> by the formatting object is leading within a context-area.\" The spec doesn't\n> say anything about how the parent FO should behave in such a case.\n\nI lean into the direction of merging the breaks.\nRe-reading the spec, I have to agree that producing an empty page looks like equally correct behavior. I think it also demonstrates why break-before and break-after are non-inherited. If they were, specifying a forced break on the outer block would lead to a new page being generated before/after *each* descendant FO (unless when explicitly reset to \"auto\")\n\nOn the other hand, and this is what made me lean towards the merging of both breaks:\n- the outer and inner block each generate one or more normal block-areas\n- the break-condition only applies to the first/last of those\n\nThe break-conditions for the outer and inner block are satisfied in both cases. \nThe only difference is that with the current behavior, the inner block's first normal block area is a child of the outer block's second normal block area, instead of the first.\n\nIt depends more on whether we consider the outer block to have a descendant empty line area before the inner block's first normal block area.\n\nSince I do not believe this to be the case here (default white-space- and linefeed-treatment), I still think merging the breaks is the expected result. If one were to activate white-space preservation, there would be a line with some space characters before the inner block, and a new page would have to be generated, since the inner block's first area would no longer be leading in the context area.", "id": 116009, "time": "2008-04-29T02:14:45Z", "creator": "adelmelle@apache.org", "creation_time": "2008-04-29T02:14:45Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 44412, "text": "(In reply to comment #17)\n> (In reply to comment #16)\n> > (In reply to comment #15)\n> > > Created an attachment (id=21718) [details] [details] [details]\n> > > Illegal empty page inserted because of two consecutive break-before\n> > \n> > I've looked into this but I'm not so entirely sure if this is wrong. That 0.94\n> > didn't produce an empty page was more or less a coincidence since an element\n> > list with only a penalty(p=-INF) does not trigger page production. But now that\n> > the parent fo:block of the block issuing the break-before creates a box(w=0), a\n> > new page with only a zero-height block area is produced (ID production,\n> > optional borders/padding). The constraints defined in\n> > http://www.w3.org/TR/xsl11/#keepbreak are satisfied. The key part when talking\n> > about break-before is:\n> > \"A break-before condition is satisfied if the first area generated and returned\n> > by the formatting object is leading within a context-area.\" The spec doesn't\n> > say anything about how the parent FO should behave in such a case.\n> \n> I lean into the direction of merging the breaks.\n> Re-reading the spec, I have to agree that producing an empty page looks like\n> equally correct behavior. I think it also demonstrates why break-before and\n> break-after are non-inherited. If they were, specifying a forced break on the\n> outer block would lead to a new page being generated before/after *each*\n> descendant FO (unless when explicitly reset to \"auto\")\n> \n> On the other hand, and this is what made me lean towards the merging of both\n> breaks:\n> - the outer and inner block each generate one or more normal block-areas\n> - the break-condition only applies to the first/last of those\n> \n> The break-conditions for the outer and inner block are satisfied in both cases. \n> The only difference is that with the current behavior, the inner block's first\n> normal block area is a child of the outer block's second normal block area,\n> instead of the first.\n\nI agree, and for one time I\u2019d say the specification sounds clear to me. The name \u2018break-before\u2019 is given to the property because it corresponds to the common understanding. But the description doesn\u2019t talk about breaks at all, but instead about leading areas (see the section Jeremias cited). Technically speaking, an empty page wouldn\u2019t break the spec since the first areas generated by both the outer and the inner blocks are leading within the page (more precisely the \u2018normal-flow-reference-area\u2019). But a valid layout can be created /without/ generating this empty page, which makes it preferable.\n\nI think this rule should be taken with the same spirit as for space resolution, which allow stylesheet writers to specify spaces for every element without worrying about the context in which they appear (is the paragraph preceded by a section title, a list, another paragraph, etc. where the space-before would differ in each case).\n\n\n> It depends more on whether we consider the outer block to have a descendant\n> empty line area before the inner block's first normal block area.\n> \n> Since I do not believe this to be the case here (default white-space- and\n> linefeed-treatment), I still think merging the breaks is the expected result.\n> If one were to activate white-space preservation, there would be a line with\n> some space characters before the inner block, and a new page would have to be\n> generated, since the inner block's first area would no longer be leading in the\n> context area.\n\nVery good point. Although I think it would go against comment #4 and give a jusitication for putting the before border of the enclosing block on the new page, along with the inner block, in attachment #21531. I think our best bet is to ask for clarification on xsl-editors@. Will do in a couple of days if nobody else chimes in.\n\nVincent\n\n\n", "id": 116014, "time": "2008-04-29T02:47:08Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-04-29T02:47:08Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 44412, "is_private": false, "count": 19, "id": 116020, "time": "2008-04-29T03:37:01Z", "creator": "adelmelle@apache.org", "creation_time": "2008-04-29T03:37:01Z", "text": "(In reply to comment #18)\n> (In reply to comment #17)\n> > It depends more on whether we consider the outer block to have a descendant\n> > empty line area before the inner block's first normal block area.\n> > \n> > Since I do not believe this to be the case here (default white-space- and\n> > linefeed-treatment), I still think merging the breaks is the expected result.\n> > If one were to activate white-space preservation, there would be a line with\n> > some space characters before the inner block, and a new page would have to be\n> > generated, since the inner block's first area would no longer be leading in the\n> > context area.\n> \n> Very good point. Although I think it would go against comment #4 and give a\n> jusitication for putting the before border of the enclosing block on the new\n> page, along with the inner block, in attachment #21531 [details]. \n\nIf the construct is\n\n      <fo:block border=\"4pt solid black\">\n        <fo:block break-before=\"page\">...</fo:block>\n      </fo:block>\n\ncase #1: Supposing the outer block's first area is already leading in a context area, no extra page-break needed. No real issue, if I'm correct.\ncase #2: If the outer block's first area is not leading in a context area, the break-condition for the inner block would not be satisfied if its first area is a descendant of the outer block's first area. Generation of a second block area is necessary. The border-traits do apply to both generated areas for the outer block, but given a default conditionality of 'discard', the border-before should only appear on the first area.\n\nIn the example, we're dealing with case #2, due to the preceding block.\nJeremias' conclusion in comment #4 seems correct to me: the bug is that the border-before is missing on the first page. \nIf conditionality is set to 'retain', and the border is not rendered on the second page, that would also be a bug.\n\nTurning on white-space-preservation for the outer block would make no real difference in case #2, apart from the fact that the first area of the outer block is now also non-empty, as it contains a line-area with one space that survives white-space-collapse. That area should not have an after-border, since that should appear only on the last area (unless it is retained).\nIn case #1 white-space-preservation would also lead to the generation of a second block area, without before-border."}, {"count": 20, "tags": [], "bug_id": 44412, "is_private": false, "id": 116023, "creation_time": "2008-04-29T04:45:54Z", "time": "2008-04-29T04:45:54Z", "creator": "jeremias@apache.org", "text": "Ok, there seems to be a tendency towards merging the breaks. I personally lean towards not merging them. But we're a democracy. ;-)\n\nI just noticed one thing that might be speaking against merging the breaks:\n    <fo:block break-before=\"column\">\n      <fo:block break-before=\"page\">\n        Some text. Some text. Some text. Some text.\n      </fo:block>\n    </fo:block>\nThe spec definitely doesn't say anything about break conflicts, i.e. which break \"wins\" in the above situation if they are to be merged. For space resolution, for example, the spec is pretty verbose about conflict resolution. To me, this is a further indication that the breaks should not be merged. But of course, I understand the arguments that have been brought up for the merging and don't disagree with them.\n\nVincent, if you can do the clarification with xsl-editors@ that'd be fantastic.\n\nI've been asked to take the issue to me. I'll document our decision on the Wiki once we've reached one and will then work on the issue during the next few weeks (on Trunk).", "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 44412, "text": "(In reply to comment #20)\n> \n> I just noticed one thing that might be speaking against merging the breaks:\n>     <fo:block break-before=\"column\">\n>       <fo:block break-before=\"page\">\n>         Some text. Some text. Some text. Some text.\n>       </fo:block>\n>     </fo:block>\n> The spec definitely doesn't say anything about break conflicts, i.e. which\n> break \"wins\" in the above situation if they are to be merged. \n\nI'd say it depends. If the column-break for the outer block coincides a page-break, the break-condition for the inner block is satisfied by that break as well. If the column-break stays within the same page, then we would need an additional page-break for the inner block.", "id": 116024, "attachment_id": null, "creator": "adelmelle@apache.org", "creation_time": "2008-04-29T04:54:53Z", "time": "2008-04-29T04:54:53Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 44412, "text": "(In reply to comment #21)\n> (In reply to comment #20)\n> > \n> > I just noticed one thing that might be speaking against merging the breaks:\n> >     <fo:block break-before=\"column\">\n> >       <fo:block break-before=\"page\">\n> >         Some text. Some text. Some text. Some text.\n> >       </fo:block>\n> >     </fo:block>\n> > The spec definitely doesn't say anything about break conflicts, i.e. which\n> > break \"wins\" in the above situation if they are to be merged. \n> \n> I'd say it depends. If the column-break for the outer block coincides a\n> page-break, the break-condition for the inner block is satisfied by that break\n> as well. If the column-break stays within the same page, then we would need an\n> additional page-break for the inner block.\n\nJust noticed: it's actually not so much merging the breaks themselves, but rather merging the break-conditions. There would be no conflict, no winner. Both conditions should always be satisfied by the outcome.\n\nIn case you have 25 nested blocks with break-before=\"page\" with the same basic structure as the example, then the 25 break-conditions can be satisfied by one effective break. Generating 25 breaks would be equally valid, but unnecessary.", "id": 116025, "time": "2008-04-29T05:04:21Z", "creator": "adelmelle@apache.org", "creation_time": "2008-04-29T05:04:21Z", "is_private": false, "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 44412, "text": "(In reply to comment #20)\n> Ok, there seems to be a tendency towards merging the breaks. I personally lean\n> towards not merging them. But we're a democracy. ;-)\n> \n> I just noticed one thing that might be speaking against merging the breaks:\n>     <fo:block break-before=\"column\">\n>       <fo:block break-before=\"page\">\n>         Some text. Some text. Some text. Some text.\n>       </fo:block>\n>     </fo:block>\n> The spec definitely doesn't say anything about break conflicts, i.e. which\n> break \"wins\" in the above situation if they are to be merged.\n\nRight. I took on me to implement a \u2018conflict\u2019 resolution in o.a.f.util.BreakUtil#compareBreakClasses. In your example the final break would be a page break, since a page break also implies a column break. Otherwise, Andreas\u2019 comment #22 has a point. The idea is to generate as few breaks as necessary that still comply with all of the break specifications in the document.\n\nThe only unsure thing is regarding borders (comment #4 vs comment #6), and I'll send a request for clarification on this soon.\n\n<snip/>\n\nVincent", "id": 116049, "attachment_id": null, "creator": "vhennebert@gmail.com", "creation_time": "2008-04-30T02:44:08Z", "time": "2008-04-30T02:44:08Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 44412, "text": "(In reply to comment #23)\n> \n> Right. I took on me to implement a \u2018conflict\u2019 resolution in\n> o.a.f.util.BreakUtil#compareBreakClasses. In your example the final break would\n> be a page break, since a page break also implies a column break. \n\nHmm... Not sure I agree entirely. At any rate, this is one of those examples that demonstrates that it's actually not really a merge I'm thinking of.\n\nAs stated in comment #21, I think it depends... \nThe outer block's break-condition can be satisfied by a column-break. That should be the first effective break. Whether we need a second effective page-break depends on whether the column-break moves to a new column on the same page, or already coincides with a page-break. Only in the latter case, the result is identical to what is proposed above.\n\nSupposing a two-column layout:\n\n<fo:block>...</fo:block>\n<fo:block break-before=\"column\" border=\"1pt solid red\">\n  <fo:block break-before=\"page\" border=\"0.5pt solid blue\">\n  ...\n\nThe result I'd expect would be:\n- content of the first block in page#1, column#1\n- top border of the second (outer) block on page#1 (!), column#2\n- third (inner) block on page#2", "id": 116073, "attachment_id": null, "creator": "adelmelle@apache.org", "creation_time": "2008-04-30T08:33:17Z", "time": "2008-04-30T08:33:17Z", "is_private": false}, {"count": 25, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "text": "(In reply to comment #18)\n> page, along with the inner block, in attachment #21531 [details]. I think our best bet is\n> to ask for clarification on xsl-editors@. Will do in a couple of days if nobody\n> else chimes in.\n\nQuestion: up to how many days can you put in \u2018a couple of days\u2019? Candy offered to who provides the answer first.\n\nRequest for clarification sent: http://lists.w3.org/Archives/Public/xsl-editors/2008AprJun/0003.html", "id": 116629, "time": "2008-05-15T03:53:03Z", "bug_id": 44412, "creation_time": "2008-05-15T03:53:03Z", "is_private": false}, {"count": 26, "tags": [], "bug_id": 44412, "is_private": false, "id": 117783, "creation_time": "2008-06-18T02:06:51Z", "time": "2008-06-18T02:06:51Z", "creator": "jeremias@apache.org", "text": "Regression fix for empty pages caused by multiple collapsible breaks.\nNo more empty block areas if a break-before occurs on the first child of an FO to match the behaviour of tables and other FO implementations (clarification by XSL WG pending).\nAdded an accessor interface for break-before/-after to avoid long if..else lists in BlockStackingLayoutManager.\nhttp://svn.apache.org/viewvc?rev=669118&view=rev", "attachment_id": null}, {"count": 27, "tags": [], "bug_id": 44412, "is_private": false, "text": "(In reply to comment #25)\n> (In reply to comment #18)\n> > page, along with the inner block, in attachment #21531 [details]. I think our best bet is\n> > to ask for clarification on xsl-editors@. Will do in a couple of days if nobody\n> > else chimes in.\n> \n> Question: up to how many days can you put in \u2018a couple of days\u2019? Candy offered\n> to who provides the answer first.\n> \n> Request for clarification sent:\n> http://lists.w3.org/Archives/Public/xsl-editors/2008AprJun/0003.html\n\nvincent, could you move this bug to resolved (in some flavor), or does it need additional work?", "id": 156999, "time": "2012-04-01T15:13:19Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T15:13:19Z", "attachment_id": null}, {"count": 28, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "resetting P2 open bugs to P3 pending further review", "id": 157356, "time": "2012-04-07T01:41:50Z", "bug_id": 44412, "creation_time": "2012-04-07T01:41:50Z", "is_private": false}, {"count": 29, "tags": [], "bug_id": 44412, "text": "(In reply to comment #27)\n> vincent, could you move this bug to resolved (in some flavor), or does it need\n> additional work?\n\nThe bug still shows up in with tables.", "id": 158436, "time": "2012-04-25T17:30:36Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-04-25T17:30:36Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 42224, "attachment_id": null, "is_private": false, "id": 102257, "time": "2007-04-24T12:40:39Z", "creator": "archie@dellroad.org", "creation_time": "2007-04-24T12:40:39Z", "text": "The test program below demonstrates the bug, which is that when you\nchange the \"viewBox\" attribute on the top level <svg> node, the JSVGCanvas\nredraws the image the height and width specified in the SVG document\nrather than using the height and width of the Swing container.\n\nThe result is that even though the \"viewBox\" attribute is being changed\nto an equivalent value to what it was before (previous value plus space),\nthe image shifts dramatically on the screen.\n\nPerhaps a call to this.computeRenderingTransform() is missing somewhere\nfrom SVGSVGElementBridge.java ??  If you subclass JSVGCanvas, and invoke\nthis method after the DOM change, the image \"snaps back\" to where it\nshould be.\n\n--------------------------- CUT HERE --------------------------\n\nimport java.awt.Dimension;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.Point;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.File;\n\nimport javax.swing.JFrame;\nimport javax.swing.SwingUtilities;\n\nimport org.apache.batik.bridge.UpdateManager;\nimport org.apache.batik.bridge.UpdateManagerEvent;\nimport org.apache.batik.bridge.UpdateManagerListener;\nimport org.apache.batik.swing.JSVGCanvas;\nimport org.apache.batik.swing.gvt.GVTTreeRendererEvent;\nimport org.apache.batik.swing.gvt.GVTTreeRendererListener;\nimport org.apache.batik.swing.svg.GVTTreeBuilderEvent;\nimport org.apache.batik.swing.svg.GVTTreeBuilderListener;\nimport org.apache.batik.swing.svg.SVGDocumentLoaderEvent;\nimport org.apache.batik.swing.svg.SVGDocumentLoaderListener;\nimport org.apache.batik.swing.svg.SVGLoadEventDispatcherEvent;\nimport org.apache.batik.swing.svg.SVGLoadEventDispatcherListener;\nimport org.apache.batik.util.RunnableQueue;\nimport org.apache.log4j.BasicConfigurator;\nimport org.apache.log4j.ConsoleAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\nimport org.w3c.dom.svg.SVGDocument;\nimport org.w3c.dom.svg.SVGElement;\n\npublic class ViewBoxTest extends WindowAdapter implements\n  SVGDocumentLoaderListener, GVTTreeBuilderListener,\n  SVGLoadEventDispatcherListener, GVTTreeRendererListener,\n  UpdateManagerListener {\n\n    private final Logger log = Logger.getLogger(getClass());\n    private final String url;\n    private final JFrame frame;\n    private final JSVGCanvas canvas;\n\n    private SVGDocument dom;\n\n    public ViewBoxTest(String url) {\n        this.url = url;\n        frame = new JFrame(\"ViewBoxTest: \"\n          + url.substring(url.lastIndexOf('/') + 1));\n        canvas = new JSVGCanvas(null, true, true);\n        canvas.setDocumentState(JSVGCanvas.ALWAYS_DYNAMIC);\n        canvas.addSVGDocumentLoaderListener(this);\n        canvas.addGVTTreeBuilderListener(this);\n        canvas.addGVTTreeRendererListener(this);\n        canvas.addSVGLoadEventDispatcherListener(this);\n        canvas.addUpdateManagerListener(this);\n        canvas.setFocusable(true);\n        frame.addWindowListener(this);\n    }\n\n    public void go() {\n        canvas.setURI(this.url);\n    }\n\n    public void cancel() {\n        System.err.println(\"Something went wrong\");\n    }\n\n    protected void updateSVG(final Runnable rable) {\n        UpdateManager updateManager = canvas.getUpdateManager();\n        updateManager.getUpdateRunnableQueue().invokeLater(\n          new Runnable() {\n            public void run() {\n                try {\n                    rable.run();\n                } catch (Throwable t) {\n                    t.printStackTrace(System.err);\n                    System.exit(1);\n                }\n            }\n        });\n    }\n\n    protected void ready() {\n\n        // Get SVG DOM\n        this.dom = canvas.getSVGDocument();\n\n        // Create mutator\n        final Runnable mutator = new Runnable() {\n            public void run() {\n                SVGElement svg = (SVGElement)dom.getDocumentElement();\n                String oldViewBox = svg.getAttribute(\"viewBox\");\n                String newViewBox = oldViewBox + \" \";\n                System.out.println(\"CHANGING VIEWBOX from \\\"\"\n                    + oldViewBox + \"\\\" to \\\"\" + newViewBox + \"\\\"\");\n                svg.setAttribute(\"viewBox\", newViewBox);\n            }\n        };\n\n        // Start thread to pause and then mutate\n        new Thread() {\n            public void run() {\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                }\n                updateSVG(mutator);\n            }\n        }.start();\n    }\n\n    public void showFrame() {\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                frame.getContentPane().add(canvas);\n                // NOTE: change size this to see different effects\n                frame.setPreferredSize(new java.awt.Dimension(800, 800));\n                frame.pack();\n                Dimension size = frame.getSize();\n                Point center = GraphicsEnvironment\n                  .getLocalGraphicsEnvironment().getCenterPoint();\n                int x = (int)(center.getX() - size.getWidth() / 2);\n                int y = (int)(center.getY() - size.getHeight() / 2);\n                frame.setLocation(new Point(x, y));\n                frame.setVisible(true);\n                frame.toFront();\n            }\n        });\n    }\n\n    // SVGDocumentLoaderListener methods\n\n    public void documentLoadingStarted(SVGDocumentLoaderEvent e) {\n        log.debug(\"Document loading started\");\n    }\n\n    public void documentLoadingCompleted(SVGDocumentLoaderEvent e) {\n        log.debug(\"Document loading completed\");\n    }\n\n    public void documentLoadingCancelled(SVGDocumentLoaderEvent e) {\n        log.debug(\"Document loading canceled\");\n    }\n\n    public void documentLoadingFailed(SVGDocumentLoaderEvent e) {\n        log.debug(\"Document loading failed: \" + e);\n        cancel();\n    }\n\n    // GVTTreeBuilderListener methods\n\n    public void gvtBuildStarted(GVTTreeBuilderEvent e) {\n        log.debug(\"GVT build started\");\n    }\n\n    public void gvtBuildCompleted(GVTTreeBuilderEvent e) {\n        log.debug(\"GVT build completed\");\n        showFrame();\n    }\n\n    public void gvtBuildCancelled(GVTTreeBuilderEvent e) {\n        log.debug(\"GVT build canceled\");\n    }\n\n    public void gvtBuildFailed(GVTTreeBuilderEvent e) {\n        log.debug(\"GVT build failed: \" + e);\n        cancel();\n    }\n\n    // GVTTreeRendererListener methods\n\n    public void gvtRenderingPrepare(GVTTreeRendererEvent e) {\n        log.debug(\"GVT rendering preparing\");\n    }\n\n    public void gvtRenderingStarted(GVTTreeRendererEvent e) {\n        log.debug(\"GVT rendering started\");\n    }\n\n    public void gvtRenderingCompleted(GVTTreeRendererEvent e) {\n        log.debug(\"GVT rendering complete\");\n        ready();\n    }\n\n    public void gvtRenderingCancelled(GVTTreeRendererEvent e) {\n        log.debug(\"GVT rendering canceled\");\n    }\n\n    public void gvtRenderingFailed(GVTTreeRendererEvent e) {\n        log.debug(\"GVT rendering failed: \" + e);\n        cancel();\n    }\n\n    // SVGLoadEventDispatcherListener methods\n\n    public void svgLoadEventDispatchCancelled(SVGLoadEventDispatcherEvent e) {\n        log.debug(\"Load event dispatch cancelled\");\n    }\n\n    public void svgLoadEventDispatchCompleted(SVGLoadEventDispatcherEvent e) {\n        log.debug(\"Load event dispatch completed\");\n    }\n\n    public void svgLoadEventDispatchFailed(SVGLoadEventDispatcherEvent e) {\n        log.debug(\"Load event dispatch failed: \" + e);\n    }\n\n    public void svgLoadEventDispatchStarted(SVGLoadEventDispatcherEvent e) {\n        log.debug(\"Load event dispatch started\");\n    }\n\n    // UpdateManagerListener\n\n    public void managerStarted(UpdateManagerEvent e) {\n        log.debug(\"Update manager started\");\n    }\n\n    public void managerSuspended(UpdateManagerEvent e) {\n        log.debug(\"Update manager suspended\");\n    }\n\n    public void managerResumed(UpdateManagerEvent e) {\n        log.debug(\"Update manager resumed\");\n    }\n\n    public void managerStopped(UpdateManagerEvent e) {\n        log.debug(\"Update manager stopped\");\n    }\n\n    public void updateStarted(UpdateManagerEvent e) {\n        //log.debug(\"Update manager started\");\n    }\n\n    public void updateCompleted(UpdateManagerEvent e) {\n        //log.debug(\"Update manager completed\");\n    }\n\n    public void updateFailed(UpdateManagerEvent e) {\n        log.debug(\"Update manager failed: \" + e);\n    }\n\n    // WindowListener methods\n\n    public void windowClosing(WindowEvent e) {\n        System.exit(0);\n    }\n\n    public static void main(String[] args) throws Exception {\n        ConsoleAppender consoleAppender = new ConsoleAppender(\n          new PatternLayout(PatternLayout.TTCC_CONVERSION_PATTERN),\n          ConsoleAppender.SYSTEM_ERR);\n        consoleAppender.setThreshold(Level.DEBUG);\n        BasicConfigurator.configure(consoleAppender);\n        if (args.length == 0) {\n            args = new String[] {\n              \"http://svn.apache.org/repos/asf/xmlgraphics/batik/trunk\"\n              + \"/samples/tests/spec/coordinates/percentagesAndUnits.svg\"\n            };\n        } else if (args.length != 1) {\n            System.err.println(\"Usage: java ViewBoxTest [file | URL]\");\n            System.exit(1);\n        }\n        File file = new File(args[0]);\n        if (file.exists())\n            args[0] = file.toURL().toString();\n        new ViewBoxTest(args[0]).go();\n    }\n}"}]
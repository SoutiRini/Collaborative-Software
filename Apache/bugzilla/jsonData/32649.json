[{"count": 0, "tags": [], "bug_id": 32649, "text": "ant seems to produce jar files which are exactly zip files.  However, Sun's jar\nutility seems to produce jar files with a special 0xcafe tag.  The Solaris\nkernel uses this tag to help determine if a jar file should be executable.  For\nexample, a jar created using jar(1) can be run:\n\n$ chmod a+x hello.jar\n$ ./hello.jar\nHello, World!\n\nWhereas the same jar, produced by ant, cannot be.  The difference seems\nto come just after the initial MANIFEST declaration:\n\n/usr/bin/jar:\n0000000: 504b 0304 1400 0800 0800 7c23 8b31 0000  PK........|#.1..\n0000010: 0000 0000 0000 0000 0000 0900 0400 4d45  ..............ME\n0000020: 5441 2d49 4e46 2ffe ca00 0003 0050 4b07  TA-INF/......PK.\n                          ^^^^^ 0xcafe\n\nant:\n0000000: 504b 0304 0a00 0000 0000 0c25 8b31 0000  PK.........%.1..\n0000010: 0000 0000 0000 0000 0000 0900 0000 4d45  ..............ME\n0000020: 5441 2d49 4e46 2f50 4b03 0414 0008 0008  TA-INF/PK.......\n                          ^^^^^ 'PK'\n\nA frustrating part of this is that Sun's JAR file page doesn't mention\nthis behavior.  Since I work for Sun, I'll file a bug on that, and see\nif I can get the java team to better document this behavior.\n\nI also found this page, which might help (see putNextEntry()):\n\nhttp://www.javaresearch.org:88/source/jdk142/java/util/jar/JarOutputStream.java.html", "id": 68310, "time": "2004-12-11T14:20:28Z", "creator": "dp@eng.sun.com", "creation_time": "2004-12-11T14:20:28Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 32649, "text": "Just a quick note - please do not post links to confidential files into the\nApache bugzilla. The copyright at the top of this file does not make it suitable\nfor us to look at. Sorry. I had to quickly turn away before I turned to a pillar\nof salt.", "id": 68334, "time": "2004-12-13T09:55:37Z", "creator": "conor@apache.org", "creation_time": "2004-12-13T09:55:37Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "Conor's comment scared me so much that I didn't dare to follow your link 8-)\n\nFrom the local file header snippets you send, it seems as if Solaris expects\nthe entry for META-INF/ to contain an extra field with a header ID of 0xcafe and\nno additional content.  Can you get somebody to confirm this without breaching\nany NDAs?\n\nOther differences I see is jar uses DEFLATED for directories, Ant uses STORE -\ncould you ask your secret sources whether this is significant?", "id": 68337, "time": "2004-12-13T11:02:37Z", "bug_id": 32649, "creation_time": "2004-12-13T11:02:37Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "conor@apache.org", "is_private": false, "id": 68338, "time": "2004-12-13T11:43:21Z", "bug_id": 32649, "creation_time": "2004-12-13T11:43:21Z", "tags": [], "text": "Stefan, well there's no real reason to be concerned, it's just the class,\nJarOutputStream, from src.zip, I think. It does say SUN CONFIDENTIAL, but I\nguess you can look at it."}, {"count": 4, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 68339, "time": "2004-12-13T11:50:46Z", "bug_id": 32649, "creation_time": "2004-12-13T11:50:46Z", "tags": [], "text": "Unless I ever wanted to contribute to CLASSPATH or Kaffe, that is.\n"}, {"count": 5, "tags": [], "bug_id": 32649, "text": "Dan,\n\nIf your OS is relying on a non documented feature of JAR files, something that\nis only an artifact of the implementation, not the spec, then, it aint going to\nwork with Ant built products. \n\nIf it is some part of the formal JAR spec, then we are deficient in not\nsupporting it, and no doubt we should consider a fix. But we need a formal,\nproper, statement in the JAR spec, so we can point to it and say \"this was the\ncorrect action\". We field a lot of grief about manifest handling (esp on the\nclasspath) attribute, and need that specification to point to.", "id": 68679, "time": "2004-12-18T07:44:26Z", "creator": "stevel@apache.org", "creation_time": "2004-12-18T07:44:26Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "dp@eng.sun.com", "attachment_id": null, "text": "Fair enough.  I'll see if I can find someone on the Java team to provide\na clarification.\n\nWe have a pretty careful interface management process within the Solaris\nprocess; so if we're interacting with jar(1) in an undocumented way, I\nguess we need to figure that out.  Please give me a week or so to do\nsome further investigation.", "id": 68681, "time": "2004-12-18T11:29:13Z", "bug_id": 32649, "creation_time": "2004-12-18T11:29:13Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 32649, "text": "\nHi-- as an update.  The responsible parties (some from Java, some from Solaris)\nare talking about this issue, and reviewing the case materials which document\nthe interface contract between Java and Solaris.  It appears that this won't get\nresolved completely until one of the parties returns from vacation, on\n1/10/2005.  So my estimate of a week was too optimistic.  So: we'll have an\nupdate sometime in January.", "id": 68714, "time": "2004-12-20T03:43:39Z", "creator": "dp@eng.sun.com", "creation_time": "2004-12-20T03:43:39Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "stevel@apache.org", "text": "We can handle a delay, after all, we have no schedule for the next release.\n\nOne question: are you trying to look for a magic number at an offset in the\nbinary, or are you parsing the zip file?\n\nA magic number pattern is most like classic unix exe lookup, but is inordinately\nbrittle against different legitimate layouts of ZIP files. You should really be\nrecognising the PK DWORD at the beginning of the file and say 'this is a zip,\nlets look inside it *using the zip algorithm* and see if it has a manifest. \n\nPresence of a valid manifest is what should really determine if a jar is\nexecutable. If that aint there, you wont know which class to execute, etc, etc.\nSince we do produce valid manifests if asked to, that should all work. ", "count": 8, "id": 68715, "time": "2004-12-20T05:53:38Z", "bug_id": 32649, "creation_time": "2004-12-20T05:53:38Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "dp@eng.sun.com", "text": "(In reply to comment #8)\n> We can handle a delay, after all, we have no schedule for the next release.\n> One question: are you trying to look for a magic number at an offset in the\n> binary, or are you parsing the zip file?\n> \n> A magic number pattern is most like classic unix exe lookup, but is inordinately\n> brittle against different legitimate layouts of ZIP files. You should really be\n> recognising the PK DWORD at the beginning of the file and say 'this is a zip,\n> lets look inside it *using the zip algorithm* and see if it has a manifest. \n> \n> Presence of a valid manifest is what should really determine if a jar is\n> executable. If that aint there, you wont know which class to execute, etc, etc.\n> Since we do produce valid manifests if asked to, that should all work. \n\nThanks for your patience.  The algorithm as it stands is as follows:\n\nThe kernel decides to use the 'javaexec' file executor based on magic number\n(same as with ELF and interpreted files, like #!... ).  Based on the magic\nnumber (PK\\003\\004), the javaexec module is invoked.  My reading of the code is\nas follows:\n\n1. Read the 30 byte file header.\n2. Look for 'PK\\003\\004' at the beginning.  If not, fail.\n3. Let XOFF = 30 (file header size) + Size of the first file's name\n   (stored at offset 26).  So, if the first file is META-INF/, XOFF = 9.\n4. Let XOFF_END = XOFF + Size of the first file's extension.  Normally this\n   would be zero, but in this case, the jar tool seems to set it in the\n   archive to '4'.\n5. Scan the buffer starting at XOFF and ending at XOFF_END for the\n   byte pattern: 0xcafe.  If not found, fail.\n6. Find and invoke the Java runtime environment on the file.\n\nI can only assume that the answer to: \"why not scan the whole file for the\nmanifest file\" is that this would be rather expensive, although I'm not\nsure.  If you mean that we should also unzip the manifest file and parse it--\nI think the answer is that we try not to sink that level of complexity into\nthe kernel.", "count": 9, "id": 68716, "time": "2004-12-20T08:37:46Z", "bug_id": 32649, "creation_time": "2004-12-20T08:37:46Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 32649, "is_private": false, "text": "I agree that the OS doesnt need to get into parsing a zip file, but worry if it\ndoesn't, your solution will be too brittle.\n\nAre there any other zip filetypes which are executable? Why not hand off to a\nlauncher program that launches any PK exe; for java it would look for the\nmanifest and run from there. ", "id": 68745, "time": "2004-12-21T04:24:38Z", "creator": "stevel@apache.org", "creation_time": "2004-12-21T04:24:38Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 32649, "text": "Dan, from your reading of the code it should be the very first entry of the ZIP\nthat gets the magic extra field, not necessary META-INF/.\n\nWe'll be happy to adjust Ant if you can get some kind of official statement.\nThanks.", "id": 68756, "time": "2004-12-21T11:27:26Z", "creator": "bodewig@apache.org", "creation_time": "2004-12-21T11:27:26Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 32649, "text": "Any news?", "id": 69527, "time": "2005-01-11T14:51:16Z", "creator": "bodewig@apache.org", "creation_time": "2005-01-11T14:51:16Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "text": "I've found a document that mentions the magic number.  See the last paragraph in\n<http://java.sun.com/j2se/1.4.2/docs/guide/jar/jarGuide.html>.\n\nNow we only need to find a public file that says what the value of magic number is\nand where it has to go.\n\nGNU file 4.13 doesn't recognize it.  Hmm, Solaris 10 sources?", "count": 13, "id": 71158, "time": "2005-02-18T11:16:30Z", "bug_id": 32649, "creation_time": "2005-02-18T11:16:30Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 32649, "text": "I decided to no longer search around or wait for official statements.\n\nThe CVS HEAD version of Ant now adds the CAFE marker to the very first entry\nof a jar file (which will always be the META-INF/ directory in Ant's case).\n\nCould you please try a nightly build of 2005-03-12 or later and close this\nbug report as fixed if it works?", "id": 72182, "time": "2005-03-11T09:46:00Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-11T09:46:00Z", "is_private": false, "attachment_id": null}, {"count": 15, "attachment_id": null, "creator": "jkf@apache.org", "is_private": false, "id": 80663, "time": "2005-10-01T14:54:42Z", "bug_id": 32649, "creation_time": "2005-10-01T14:54:42Z", "tags": [], "text": "Assuming fixed"}]
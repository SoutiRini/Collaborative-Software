[{"count": 0, "tags": [], "creator": "iit@mail.ru", "is_private": false, "text": "This is for a case of digest=\"SHA\" set in JNDIRealm configuration during \nconnections to a Netscape LDAP Directory that stores passwords in encrypted \nform.\n\nProblem:\nThe Tomcat ( JNDIRealm.java ) uses the next code to check password, retrieved \nfrom LDAP server in JNDIRealm.java:\nvalidated = (digest(credentials).equalsIgnoreCase(valueString));\n\nThe Netscape LDAP server stores passwords and returns them to Tomcat in a {SHA}\nBase64Encoded= form - take a look at URL \nhttp://developer.netscape.com/tech/overview/index.html?\ncontent=/docs/technote/ldap/pass_sha.html\n\nSolution:\nI propose to modify code of JNDIRealm so it will use some thing like this\n\n        boolean validated = false;\n        if (hasMessageDigest()) {\n            if (valueString.startsWith(\"{SHA}\") && Base64.isBase64\n(valueString.substring(5))) {\n              String testValue =\n                HexUtils.convert(\n                  Base64.decode(valueString.substring(5).getBytes())\n                );\n              validated = (digest(credentials).equalsIgnoreCase(testValue));\n            } else {\n              validated = (digest(credentials).equalsIgnoreCase(valueString));\n            }\n        } else\n            validated = (digest(credentials).equals(valueString));\n\ninstead of old code (JNDIRealm.java version 1.5 starts from line 754)\n\n        boolean validated = false;\n        if (hasMessageDigest()) {\n            // Hex hashes should be compared case-insensitive\n            validated = (digest(credentials).equalsIgnoreCase(valueString));\n        } else\n            validated = (digest(credentials).equals(valueString));\n\nwbr, iit.", "id": 10595, "time": "2002-02-12T17:34:54Z", "bug_id": 6402, "creation_time": "2002-02-12T17:34:54Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 6402, "text": "By default JNDIRealm now authenticates a user by binding to the directory using \nthe DN of the user's directory entry and the presented password. This removes \nthe need for the realm to know about anything about password digests at all, \nlet alone encoding schemes such as {SHA}, since the directory handles all \naspects of password hashing. For that reason I've marked the bug as resolved.\n\nIt is still possible to configure the realm to apply a digest algorithm to the \npresented password, retrieve the stored password or password hash, and compare \nthe two explicitly. This of course won't currently work if an encoding prefix \nlike {SHA} is used or the digest itself is Base64 encoded. However, I believe \nauthentication by binding is always the better approach except when support for \nHTTP digest authentication is required - in which case I think the plaintext \npassword must be stored anyway - so I see little point in having JNDIRealm \ndecode{SHA} and similar schemes.\n", "id": 12248, "time": "2002-03-24T22:04:05Z", "creator": "j.g.holman@qmul.ac.uk", "creation_time": "2002-03-24T22:04:05Z", "is_private": false, "attachment_id": null}]
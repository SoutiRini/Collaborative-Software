[{"count": 0, "tags": [], "bug_id": 12610, "attachment_id": null, "text": "PDF documents allows the execution of JavaScript if the document is loaded. I used\n<fo:root...\n<fox:init xmlns:fox=\"http://xml.apache.org/fop/extensions\">this.print\\(false, 0,\nthis.numPages-1\\);</fox:init>\n...\nto automatically print the document on the default printer.\n\nTo achive this the following changes are necessary in FOP 0.20.3:\n- add a new FO extension (Init)\n- modify the ExtensionElementMapping\n- add a new PDF object (PDFInit)\n- modify the PDFDocument and PDFRoot Classes\n- modify the PDFRenderer\n\nI hope this, or a similar mechanism will be included in future FOP \nreleases.\n\nNew classes:\n-Init.java--------------------------------------------------------------\npackage org.apache.fop.extensions;\n\nimport org.apache.fop.fo.*;\nimport org.apache.fop.apps.FOPException;\nimport java.util.*;\nimport org.xml.sax.Attributes;\n\n/**\n * @author pik\n *\n */\npublic class Init extends ExtensionObj \n{\n    private String javaScript = \"\";\n    \n    public static class Maker extends org.apache.fop.fo.FObj.Maker\n    {\n        public FObj make(FObj fobj, PropertyList propertylist)\n        {\n            return new Init(fobj, propertylist);\n        }\n\n        public Maker()\n        {\n        }\n    }\n    \n    public static org.apache.fop.fo.FObj.Maker maker()\n    {\n        return new Maker();\n    }    \n    \n    public Init(FObj parent, PropertyList propertylist)\n    {\n      super(parent, propertylist);\n    }\n    \n    protected void addCharacters(char data[], int start, int end)\n    {\n      javaScript += new String(data, start, end - start);\n    }\n\n    public String getJavaScript()\n    {\n      return javaScript;\n    }    \n}\n-end of Init.java---------------------------------------------------------\n\n-PDFInit.java-------------------------------------------------------------\npackage org.apache.fop.pdf;\n\n/**\n * @author pik\n */\npublic class PDFInit extends PDFObject\n{\n    private String javaScript = \"\";\n    private String jsReference;\n    private int type;\n\n    public PDFInit(int number, int type)\n    {\n        super(number);\n        this.type = type;\n    }\n\n    public void setJSReference(String jsReference)\n    {\n      this.jsReference = jsReference;   \n    }\n\n    public String getJSReference()\n    {\n      return jsReference;    \n    }\n    \n    public void setJavaScript(String javaScript)\n    {\n      if (javaScript == null)\n        this.javaScript = \"\";\n      else    \n        this.javaScript = javaScript;   \n    }\n\n    public byte[] toPDF()\n    {\n        String p;\n         \n        if (type == 1)\n        {\n          p = super.number + \" \" + super.generation + \" obj\\n\";\n          p += \"<<\\n/JavaScript \" + (super.number+1) + \" \" + super.generation +\n\" R\\n>>\\nendobj\\n\";\n        }\n        else \n        if (type == 2)\n        {\n          p = super.number + \" \" + super.generation + \" obj\\n\";\n          p += \"<<\\n/Names [ (init)\" + (super.number+1) + \" \" + super.generation\n+ \" R ]\\n>>\\nendobj\\n\";\n        }\n        else\n        {\n          p = super.number + \" \" + super.generation + \" obj\\n\";\n          p += \"<<\\n/S /JavaScript\\n/JS (\" + javaScript + \")\\n>>\\nendobj\\n\";\n        }\n\n        return p.getBytes();\n    }\n}\n-end of PDFInit.java------------------------------------------\n\nModified classes (code from decompiled classes !):\n-ExtensionElementMapping.java---------------------------------\n    private static synchronized void setupExt()\n    {\n        if(foObjs == null)\n        {\n            foObjs = new HashMap();\n            foObjs.put(\"outline\", Outline.maker());\n            foObjs.put(\"label\", Label.maker());\n++            foObjs.put(\"init\", Init.maker());\n        }\n    }\n-end of ExtensionElementMapping.java--------------------------\n\n-PDFDocument.java---------------------------------------------\n++    protected PDFInit pdfInit;\n\n    public PDFDocument()\n    {\n        position = 0;\n        location = new Vector();\n        trailerObjects = new Vector();\n        objectcount = 0;\n        objects = new Vector();\n        outlineRoot = null;\n        colorspace = new ColorSpace(ColorSpace.DEVICE_RGB);\n        patternCount = 0;\n        shadingCount = 0;\n        xObjectCount = 0;\n        xObjects = new Vector();\n        xObjectsMap = new Hashtable();\n        pendingLinks = null;\n        pages = makePages();\n--      //   root = makeRoot(pages);\n        \n++        pdfInit = makeInit();\n++        root = makeRoot(pages, pdfInit.getJSReference());\n        \n        resources = makeResources();\n        info = makeInfo();\n    }\n\n++    public PDFInit getInit()\n++    {\n++      return pdfInit;    \n++    }\n++    protected PDFInit makeInit()\n++    {\n++        PDFInit pdfI = new PDFInit(++objectcount, 1);\n++        String reference = pdfI.referencePDF();\n++        \n++        this.objects.add(pdfI);\n++        this.objects.add(new PDFInit(++objectcount, 2));\n++        \n++        pdfI = new PDFInit(++objectcount, 3);\n++        pdfI.setJSReference(reference);    // hold reference to init obj\n++        addTrailerObject(pdfI);\n++        \n++        return pdfI;\n++    }\n\n+-    public PDFRoot makeRoot(PDFPages pdfpages, String reference)  //PIK00\n(String reference added)\n    {\n+-        PDFRoot pdfroot = new PDFRoot(++objectcount, pdfpages, reference);\n        addTrailerObject(pdfroot);\n        return pdfroot;\n    }\n-end of PDFDocument.java--------------------------------------\n-PDFRoot.java-------------------------------------------------\n++    private String reference = null;\n\n++    public PDFRoot(int i, PDFPages pdfpages, String reference) {\n++        super(i);\n++        this.reference=reference;    // hold reference to init obj\n++        setRootPages(pdfpages);\n++    }\n\n    public byte[] toPDF()\n        throws IllegalStateException\n    {\n        StringBuffer stringbuffer = new StringBuffer(super.number + \" \" +\nsuper.generation + \" obj\\n<< /Type /Catalog\\n/Pages \" + rootPages.referencePDF()\n+ \"\\n\");\n        if(_outline != null)\n        {\n            stringbuffer.append(\" /Outlines \" + _outline.referencePDF() + \"\\n\");\n            stringbuffer.append(\" /PageMode /UseOutlines\\n\");\n        }\n        \n++        if(reference != null)\n++            stringbuffer.append(\"/Names \" + reference + \"\\n\");\n        \n        stringbuffer.append(\" >>\\nendobj\\n\");\n        return stringbuffer.toString().getBytes();\n    }\n-end of PDFRoot.java------------------------------------------\n-PDFRenderer.java---------------------------------------------\n    protected void renderRootExtensions(Vector vector)\n    {\n        if(vector != null)\n        {\n            for(Enumeration enumeration = vector.elements();\nenumeration.hasMoreElements();)\n            {\n                ExtensionObj extensionobj = (ExtensionObj)enumeration.nextElement();\n                if(extensionobj instanceof Outline)\n                    renderOutline((Outline)extensionobj);\n++              if(extensionobj instanceof Init)\n++              {\n++                PDFInit pdfInit = pdfDoc.getInit();\n++                pdfInit.setJavaScript(((Init)extensionobj).getJavaScript());\n++              }    \n            }\n        }\n    }\n-end of PDFRenderer.java-----------------------------------------", "id": 22795, "time": "2002-09-13T09:34:54Z", "creator": "pik@uniquare.com", "creation_time": "2002-09-13T09:34:54Z", "is_private": false}, {"count": 1, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "id": 157190, "time": "2012-04-04T22:29:24Z", "bug_id": 12610, "creation_time": "2012-04-04T22:29:24Z", "is_private": false, "text": "closing due to lack of consensus or action to commit patch; possibly reconsider (mutatis mutandis) after converting PDF renderer to PDFBox"}, {"count": 2, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "id": 158645, "time": "2012-04-30T00:25:01Z", "bug_id": 12610, "creation_time": "2012-04-30T00:25:01Z", "is_private": false, "text": "batch transition resolved+later to closed+later; if you have new information or a patch that addresses the issue, you may reopen"}]
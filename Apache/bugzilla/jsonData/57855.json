[{"count": 0, "tags": [], "creator": "christian.strebel@ivyteam.ch", "attachment_id": null, "id": 182614, "time": "2015-04-24T14:04:23Z", "bug_id": 57855, "creation_time": "2015-04-24T14:04:23Z", "is_private": false, "text": "To reproduce add the following test code to TestMethodExpressionImpl:\n\n@Test(expected=IllegalArgumentException.class)\npublic void test() {\n    MethodExpression me = factory.createMethodExpression(context,\n            \"${beanAA.echo2}\", null , new Class[]{String.class});\n    me.invoke(context, new Object[0]);\n}\n\nThe result is an ArrayIndexOutOfBoundsException. I would expect an IllegalArgumentException or a MethodNotFoundException.\nThe same I would expect if I invoke with null:\n\n@Test(expected=IllegalArgumentException.class)\npublic void testNull() {\n    MethodExpression me = factory.createMethodExpression(context,\n            \"${beanAA.echo2}\", null , new Class[]{String.class});\n    me.invoke(context, null);\n}\n\nBut this throws a NullPointerException instead.\nI run into this because PrimeFaces handles AjaxListeners relatively bad and expect that there is a MethodNotFoundException or an IllegalArgumentException if they call a listener method with no pram.\n\ntry {\n    listener.invoke(elContext, new Object[]{});\n} \ncatch (MethodNotFoundException mnfe) {\n    processArgListener(context, elContext, event);\n} \ncatch (IllegalArgumentException iae) {\n    processArgListener(context, elContext, event);\n}"}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 182643, "time": "2015-04-27T09:23:10Z", "bug_id": 57855, "creation_time": "2015-04-27T09:23:10Z", "is_private": false, "text": "I've looked through the EL specification and I don't see the expected behaviour defined for any of these cases.\n\nI don't think MethodNotFoundException is the right exception in this case since the method has been found. IllegalArgumentException strikes me as the better fit. I'll take a look."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 182644, "time": "2015-04-27T09:53:59Z", "bug_id": 57855, "creation_time": "2015-04-27T09:53:59Z", "is_private": false, "text": "Thanks for the report.\n\nThis has been fixed in trunk (9.0.x), 8.0.x/trunk (for 8.0.22 onwards) and 7.0.x/trunk (for 7.0.62 onwards)."}, {"count": 3, "tags": [], "bug_id": 57855, "text": "Reviewing r1676234\n\nApparently \"null\" src is equivalent to \"no argument\" or a zero-length array. [1]\n\n1) When null is passed it should support both varargs and non-varargs cases.\n\nE.g. calling Foo.main().\n\nFrom the code of AstValue.hava I think that \"paramCount > 0 && src == null\" condition fails when the only argument is varargs and src is null.\n\n2) It looks that the message in AstValue.java prints \"The method [{0}] was called with [null] parameters\" when null is passed as src. Wouldn't it better to print \"0\" instead of \"null\" ?\n\n\n\n\n[1] http://docs.oracle.com/javaee/7/api/javax/el/MethodExpression.html#invoke%28javax.el.ELContext,%20java.lang.Object[]%29", "id": 182648, "time": "2015-04-27T11:40:30Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-04-27T11:40:30Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57855, "attachment_id": null, "id": 182649, "time": "2015-04-27T11:57:24Z", "creator": "markt@apache.org", "creation_time": "2015-04-27T11:57:24Z", "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #3)\n> Reviewing r1676234\n> \n> Apparently \"null\" src is equivalent to \"no argument\" or a zero-length array.\n> [1]\n> \n> 1) When null is passed it should support both varargs and non-varargs cases.\n> \n> E.g. calling Foo.main().\n\nACK. I'll add a test case for that.\n\n> From the code of AstValue.hava I think that \"paramCount > 0 && src == null\"\n> condition fails when the only argument is varargs and src is null.\n> \n> 2) It looks that the message in AstValue.java prints \"The method [{0}] was\n> called with [null] parameters\" when null is passed as src. Wouldn't it\n> better to print \"0\" instead of \"null\" ?\n\nI'll like to be able to differentiate between a zero length array and null.\n\n> [1]\n> http://docs.oracle.com/javaee/7/api/javax/el/MethodExpression.\n> html#invoke%28javax.el.ELContext,%20java.lang.Object[]%29"}, {"count": 5, "tags": [], "bug_id": 57855, "is_private": false, "id": 182650, "creation_time": "2015-04-27T12:50:44Z", "time": "2015-04-27T12:50:44Z", "creator": "knst.kolinko@gmail.com", "text": "I think MethodExpression.invoke() shall wrap IllegalArgumentException into an ELException.\n\n\nIt is documented that java.lang.reflect.Method.invoke() throws IllegalArgumentException when \"if the number of actual and formal parameters differ\" [2].\n\nI think that our code should work as if that exception were thrown by Method.invoke(). From MethodExpression.invoke() [1] I think that an exception that is received from a Method.invoke() has to be wrapped with an ELException.\n\n\nEssentially this means to move \"values = convertArgs(values, m);\" call into try/catch block that is around \"result = m.invoke(t.base, values);\" call. (lines 274 278 of AstValue.java of Tomcat 7 r1676234).\n\n\n[1] http://docs.oracle.com/javaee/7/api/javax/el/MethodExpression.html#invoke%28javax.el.ELContext,%20java.lang.Object[]%29\n\n[2] http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-", "attachment_id": null}, {"count": 6, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "(In reply to Mark Thomas from comment #4)\n> (In reply to Konstantin Kolinko from comment #3)\n> > Reviewing r1676234\n> > \n> > 2) It looks that the message in AstValue.java prints \"The method [{0}] was\n> > called with [null] parameters\" when null is passed as src. Wouldn't it\n> > better to print \"0\" instead of \"null\" ?\n> \n> I'll like to be able to differentiate between a zero length array and null.\n> \n\nE.g. end user may call the method without any arguments,  but some higher API that translates that into a call to MethodExpression is allowed to optimize that to pass \"null\" instead of allocating a zero-length array of arguments.\n\nPrinting a message that says \"null\" may be confusing for the end user.", "id": 182652, "time": "2015-04-27T13:46:01Z", "bug_id": 57855, "creation_time": "2015-04-27T13:46:01Z", "is_private": false}, {"count": 7, "tags": [], "creator": "christian.strebel@ivyteam.ch", "attachment_id": null, "id": 182656, "time": "2015-04-27T14:16:56Z", "bug_id": 57855, "creation_time": "2015-04-27T14:16:56Z", "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #5)\n> I think MethodExpression.invoke() shall wrap IllegalArgumentException into\n> an ELException.\n> \n> \n> It is documented that java.lang.reflect.Method.invoke() throws\n> IllegalArgumentException when \"if the number of actual and formal parameters\n> differ\" [2].\n> \n> I think that our code should work as if that exception were thrown by\n> Method.invoke(). From MethodExpression.invoke() [1] I think that an\n> exception that is received from a Method.invoke() has to be wrapped with an\n> ELException.\n> \n> Essentially this means to move \"values = convertArgs(values, m);\" call into\n> try/catch block that is around \"result = m.invoke(t.base, values);\" call.\n> (lines 274 278 of AstValue.java of Tomcat 7 r1676234).\n\nThe problem is, the \"bad\" PrimeFaces AjaxBehaviorListenerImpl implementation is then broken again. Also I do not like wrapping a specific RuntimeException into an unspecific RuntimeExcpetion without additional information.\nBut on the other hand you are right there is already a wrapping if an IllegalAccessException or an IllegalArgumentException is thrown by Method.invoke().\nI also do not really like this wrapping. The Sun/Glassfish implementation does not wrap the runtime exceptions thrown by Method.invoke() as well."}, {"count": 8, "tags": [], "bug_id": 57855, "text": "The spec is unclear exactly what the required behaviour here is so (ignoring Konstantin's issue one above) I'm happy that this is an improvement. IAE with a decent error message is much better than AIOOB or NPE.\n\nWhat the 'right' behaviour is is TBD. I have created https://java.net/jira/browse/EL_SPEC-24 to track this. Do add any comments you have for the EL expert group to that Jira ticket.\n\nIf you haven't already, I'd strongly recommend you raise a bug against PrimeFaces.\n\nUntil there is some clarification from the EL EG, I'm happy (once issue 1 is fixed) with throwing an IAE in this case.", "id": 182671, "time": "2015-04-27T20:44:32Z", "creator": "markt@apache.org", "creation_time": "2015-04-27T20:44:32Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 57855, "text": "Issue 1 fixed in the same set of versions as comment #2", "id": 182674, "time": "2015-04-27T21:45:38Z", "creator": "markt@apache.org", "creation_time": "2015-04-27T21:45:38Z", "is_private": false, "attachment_id": null}]
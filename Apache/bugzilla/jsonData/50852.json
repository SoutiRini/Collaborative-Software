[{"count": 0, "tags": [], "bug_id": 50852, "attachment_id": null, "id": 144643, "time": "2011-03-02T06:55:11Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T06:55:11Z", "is_private": false, "text": "The current accessibility implemenation does not scale and is slow. The following implementation is memory efficient (only structure information of pages in processing is kept in memory) and faster.\n\n [PATCH 01/20] container element for structure tree\n\nAdds object for storing the structure tree\n\n [PATCH 02/20] Add methods for storing structure tree to area tree\n [PATCH 03/20] Helper functions for StructureElement construction\n [PATCH 04/20] Parse role attributes\n [PATCH 05/20] Implement mapping functions of FO objects to structure tree\n [PATCH 06/20] Store new structure tree in area tree\n [PATCH 07/20] Handle structure tree only in new format\n [PATCH 08/20] Remove unused code\n\nThese patches switch to the new internal format for the structure tree. Only the structure tree of unfinished page sequences is kept in memory, so it the overhead for documents with not too large page sequences is limited. The content of the structure-tree tag in area-tree / intermediate XML is slightly changed:\n\nThe page-sequences shows up as tag, so that it possible to give it roles [eg. Part does not  make sense for a one page document].\n\n [PATCH 09/20] Workaround: Some test cases don't like ptr\n\nI don't recommend to add this patch, as the additional ptr attributes do no harm - but someone has to do some work on the testsuite otherwise.\n\n [PATCH 10/20] Avoid overhead of creating writers\n\nAdding structure information to a 100MB PDF can mean adding 300-400 MB of structure information =>  Multi Mio of additional dictionaries are written => So many BufferedWriter are created. Getting rid of both stream representation improves performance large document and simplifies code as there is no Writer to forget to flush anymore.\n\nThis patch is not required for the following patches.\n\n [PATCH 11/20] Add support for clearing objects at write time\n [PATCH 12/20] Add support for lazy object number assignment\n [PATCH 13/20] Improve PDFArray/Dictionary\n [PATCH 14/20] Free structure tree ID map at the end of the page sequence\n [PATCH 15/20] Don't write empty leaf structure to PDF\n\nStructure information must be written in between - freeing resources after writing reduces memory pressure. Assigning objects number latter allows to  prune empty structure elements.\n\n [PATCH 16/20] Simplify references to the text\n\nUse a more compact reference representation, if possible\n\n-----------------------------------------\nEnhancements:\n\n [PATCH 17/20] Dupplicate static content structures for each pages\n\nStatic regions, which are put on multiple pages, generate strange results. Duplicating them in the structure tree yields to more logical results.\n\n [PATCH 18/20] Generate shorter PDF documents\n\nStructure information means much larger PDFs - some bytes can be safed.\n\n [PATCH 19/20] New roles for accessibility\n\nRole \"hidden\":\nKept whole subtree out of structure tree.\nRole \"inherit\":\nHide this node in the structure tree and place content directly in the parent.\n\nBoth functions are necessary to create \"beautiful\" structure trees. The role names need to be discussed.\n\n [PATCH 20/20] Support role for Flow & PageSequence\n\nAllow changing the appearance of Flow/PageSequence in the structure tree. Especially on small documents, the Structure Doc->Part->Sect can not be appropriate.\n\nPageSequence allows only assigning a tag name, but (because of implementation/performance issues) it can not be removed.\nFlow/static-content can be changed in every way."}, {"count": 1, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26701, "text": "Created attachment 26701\nPatch 01/20", "id": 144644, "time": "2011-03-02T06:56:43Z", "bug_id": 50852, "creation_time": "2011-03-02T06:56:43Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50852, "attachment_id": 26702, "id": 144645, "time": "2011-03-02T06:57:28Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T06:57:28Z", "is_private": false, "text": "Created attachment 26702\nPatch 02/20"}, {"count": 3, "tags": [], "bug_id": 50852, "attachment_id": 26703, "id": 144646, "time": "2011-03-02T06:58:14Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T06:58:14Z", "is_private": false, "text": "Created attachment 26703\nPatch 03/20"}, {"count": 4, "tags": [], "bug_id": 50852, "attachment_id": 26704, "text": "Created attachment 26704\nPatch 04/20", "id": 144647, "time": "2011-03-02T06:59:03Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T06:59:03Z", "is_private": false}, {"count": 5, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26705, "text": "Created attachment 26705\nPatch 05/20", "id": 144648, "time": "2011-03-02T06:59:46Z", "bug_id": 50852, "creation_time": "2011-03-02T06:59:46Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 50852, "attachment_id": 26706, "id": 144649, "time": "2011-03-02T07:00:38Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:00:38Z", "is_private": false, "text": "Created attachment 26706\nPatch 06/20"}, {"count": 7, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26707, "text": "Created attachment 26707\nPatch 07/20", "id": 144650, "time": "2011-03-02T07:01:14Z", "bug_id": 50852, "creation_time": "2011-03-02T07:01:14Z", "is_private": false}, {"count": 8, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26708, "text": "Created attachment 26708\nPatch 08/20", "id": 144651, "time": "2011-03-02T07:01:59Z", "bug_id": 50852, "creation_time": "2011-03-02T07:01:59Z", "is_private": false}, {"count": 9, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26709, "text": "Created attachment 26709\nPatch 09/20", "id": 144652, "time": "2011-03-02T07:02:29Z", "bug_id": 50852, "creation_time": "2011-03-02T07:02:29Z", "is_private": false}, {"count": 10, "text": "Created attachment 26710\nPatch 10/20", "bug_id": 50852, "is_private": false, "id": 144653, "time": "2011-03-02T07:03:35Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:03:35Z", "tags": [], "attachment_id": 26710}, {"count": 11, "tags": [], "bug_id": 50852, "attachment_id": 26711, "id": 144654, "time": "2011-03-02T07:04:19Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:04:19Z", "is_private": false, "text": "Created attachment 26711\nPatch 11/20"}, {"count": 12, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26712, "text": "Created attachment 26712\nPatch 12/20", "id": 144655, "time": "2011-03-02T07:04:43Z", "bug_id": 50852, "creation_time": "2011-03-02T07:04:43Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 50852, "attachment_id": 26713, "text": "Created attachment 26713\nPatch 13/20", "id": 144656, "time": "2011-03-02T07:05:34Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:05:34Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 50852, "attachment_id": 26714, "text": "Created attachment 26714\nPatch 14/20", "id": 144657, "time": "2011-03-02T07:06:11Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:06:11Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 50852, "attachment_id": 26715, "id": 144658, "time": "2011-03-02T07:06:52Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:06:52Z", "is_private": false, "text": "Created attachment 26715\nPatch 15/20"}, {"count": 16, "tags": [], "bug_id": 50852, "attachment_id": 26716, "is_private": false, "id": 144659, "time": "2011-03-02T07:07:29Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:07:29Z", "text": "Created attachment 26716\nPatch 16/20"}, {"count": 17, "tags": [], "bug_id": 50852, "attachment_id": 26717, "is_private": false, "id": 144660, "time": "2011-03-02T07:08:25Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:08:25Z", "text": "Created attachment 26717\nPatch 17/20"}, {"count": 18, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26718, "text": "Created attachment 26718\nPatch 18/20", "id": 144661, "time": "2011-03-02T07:09:11Z", "bug_id": 50852, "creation_time": "2011-03-02T07:09:11Z", "is_private": false}, {"count": 19, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": 26719, "text": "Created attachment 26719\nPatch 19/20", "id": 144662, "time": "2011-03-02T07:09:37Z", "bug_id": 50852, "creation_time": "2011-03-02T07:09:37Z", "is_private": false}, {"count": 20, "text": "Created attachment 26720\nPatch 20/20", "bug_id": 50852, "is_private": false, "id": 144663, "time": "2011-03-02T07:10:00Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-03-02T07:10:00Z", "tags": [], "attachment_id": 26720}, {"count": 21, "tags": [], "bug_id": 50852, "attachment_id": null, "text": "Hi Martin,\n\nI finally got round to having a look at your patch. First, I\u2019d like to \nthank you for having taken the time to create 20 smaller self-contained \npatches. This made the review much easier. So thanks for that!\n\nThe new data structure is indeed much more efficient than the DOM that \nFOP manipulates at the moment. Unfortunately, this doesn\u2019t solve (AFAIU) \nthe fundamental problem that we recently discovered: empty content may \nbe the cause for a wrong final structure tree. Take the following table:\n\n  <fo:table width=\"100%\" table-layout=\"fixed\">\n    <fo:table-body>\n      <fo:table-row>\n        <fo:table-cell>\n          <fo:block>Cell 1.1</fo:block>\n        </fo:table-cell>\n        <fo:table-cell>\n          <fo:block>Cell 1.2</fo:block>\n        </fo:table-cell>\n      </fo:table-row>\n      <fo:table-row>\n        <fo:table-cell>\n          <fo:block/>\n        </fo:table-cell>\n        <fo:table-cell>\n          <fo:block>Cell 2.2</fo:block>\n        </fo:table-cell>\n      </fo:table-row>\n    </fo:table-body>\n  </fo:table>\n\nThe content of the first cell in the second row is empty, which will \nresult into a TR structure element having only one TD kid for the second \ncell; that TD element will be mistakenly interpreted by a screen reader \nas belonging to the first column.\n\nSee also discussion here:\nhttp://markmail.org/message/mn7jdbxmjdq7ey52\n\nTo solve this we need to integrate the handling of the structure tree \ninto the normal processing chain (FO tree -> Layout Engine -> Area tree) \ninstead of bypassing it.\n\n\nThat said, I have a few comments and questions relating to some of your \nspecific patches:\n[PATCH 10/20] Avoid overhead of creating writers\nI can imagine that if there are a lot of PDF objects to stream, creating \nan instance of BufferedWriter and OutputStreamWriter for each of them \nmay have quite some performance impact. However replacing them with \ncalls to PDFObject.encode everywhere it is necessary is not really an \noption. This makes the code difficult to read and maintain, and is \nerror-prone as it\u2019s very easy to miss one call somewhere.\n\nI think the problem of encoding text into the output should be solved by \ndefining a specialized PDFOutputStream that would be able to stream both \nString and bytes. That PDFOutputStream would be passed around to objects \nthat then wouldn\u2019t have to handle their own wrapper or make calls to \nencode. Does that make sense?\n\n[PATCH 11/20] Add support for clearing objects at write time\nI\u2019m wondering why this is necessary? Isn\u2019t it just possible to null out \nreferences to the objects and let the garbage collector do the work?\n\n[PATCH 12/20] Add support for lazy object number assignment\nSame here, what\u2019s exactly the purpose of lazy object number assignment?\n\n\nThanks,\nVincent", "id": 147209, "time": "2011-06-16T17:58:06Z", "creator": "vhennebert@gmail.com", "creation_time": "2011-06-16T17:58:06Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 50852, "attachment_id": null, "is_private": false, "id": 147212, "time": "2011-06-16T21:36:22Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-06-16T21:36:22Z", "text": "I'll split my answers.\n\nAdd \"Add support for lazy object number assignment\":\n\nThe codes creates an PDF structure tree containing objects, which will be trimmed away (eg. because they are empty leaf objects).\n\nWithout lazy object number assignment such objects will get an object number too, as they are assigned while creating these objects. It will increase the xref size and the xref entries for such numbers will be incorrect (as there is no support for free object numbers).\n\nLazy assignment is the simplest solution for this problem without rewriting larger parts of the code. For such objects, the assignment will happen, when the first reference to such objects (or the object itself) is written into the PDF."}, {"count": 23, "tags": [], "creator": "martin.koegler@brz.gv.at", "attachment_id": null, "text": "Add \"empty table cell problem\":\n\nThis should be easy to solve:\nIn PDFStructElement.prepare() \nchange \n        if (kids.length() == 0) {\n\nIf the test is extended to only trigger, if the current structure element is not a table cell [getStructureType() not in (TD, TH, ..) && kids.length() == 0], an empty table cell will be put in the structure tree.\n\nMaybe PDFStructElement should get a trim empty leaf flag and the decision moved to the FOToPDFRoleMap.", "id": 147213, "time": "2011-06-16T21:51:39Z", "bug_id": 50852, "creation_time": "2011-06-16T21:51:39Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 50852, "attachment_id": null, "id": 147215, "time": "2011-06-16T22:32:37Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-06-16T22:32:37Z", "is_private": false, "text": "Add \"Avoid overhead of creating writers\":\n\nBy default, nearly each FO tag results in an PDF structure element [= object], so there are lots of OutputStreamWriters created.\n\nThe trunk implementation with two objects (Writer+Stream) has the weak point, that forgetting to flush the writer before using the stream can lead to incorrect PDFs.\n\nAs OutputStream.write only supports bytes, any forgotten encode will result in an syntax error => My solution will catch errors at compile time.\n\n> I think the problem of encoding text into the output should be solved by \n> defining a specialized PDFOutputStream that would be able to stream both \n> String and bytes. That PDFOutputStream would be passed around to objects \n> that then wouldn\u2019t have to handle their own wrapper or make calls to \n> encode. Does that make sense?\n\nIf the PDFOutputStream is persistent (eg, not recreated for each batch of objects), it is an interesting idea.\n\nThe current code creates lots of CountingOutputStreams too, which would be needed to be wrapped in a PDFOutputStream. To overcome this, the new PDFOutputStream could count the total number of written bytes. Instead of using a CountingOutputStream, the code can store the start number of written bytes and use the difference to the end number of written bytes.\n\nThis is an optional enhancement, therefore I would currently like to concentrate on the other patches."}, {"count": 25, "tags": [], "bug_id": 50852, "is_private": false, "text": "\"Add support for clearing objects at write time\":\n\nThe structure tree is one big document wide tree. The root is written after the last page. \n\nThe structure tree has circular links (parent=>child, child=>parent) and external links to tree nodes (eg. from the per page element list). \n\nIf we don't want to keep the whole thing into memory, we need to write parts of the tree and then purge all references to them.\n\nWithout this patch, a write of structure elements would be:\n* add the object to the PDF document\n* callback to the caller do the actual write or get the OutputStream somehow to do the write (The whole logic is in PDFLogicalStructureHandler, which currently only has access to the PDF document, not the output stream).\n* Traverse the written structure elements again and break the loops\n\nWith this patch, a write of structure elements is only adding the objects to the document.\nThe next write operation will store the streams and call clean the objects afterwards. For a structure element, the clean operation is mostly removing it's links to child elements, which also results in breaking the loops.\n\nThe same logic could eg. be used for writing pages: The clean function of a pages would be deleting the page content.", "id": 147217, "time": "2011-06-16T23:11:44Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-06-16T23:11:44Z", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 50852, "attachment_id": null, "id": 147228, "time": "2011-06-17T11:15:57Z", "creator": "vhennebert@gmail.com", "creation_time": "2011-06-17T11:15:57Z", "is_private": false, "text": "(In reply to comment #23)\n> Add \"empty table cell problem\":\n> \n> This should be easy to solve:\n> In PDFStructElement.prepare() \n> change \n>         if (kids.length() == 0) {\n> \n> If the test is extended to only trigger, if the current structure element is\n> not a table cell [getStructureType() not in (TD, TH, ..) && kids.length() ==\n> 0], an empty table cell will be put in the structure tree.\n\nI tried commenting out all the code in that method that removes elements and it does not work.\n\nAnyway, as described in the mailing list discussion that I linked to in comment #21, I think the structure tree should not be trimmed, as there is structural information there that would be necessary for a round-trip process. But in the current design there is no way to create the right order of text and other structure elements.\n\n\n> Maybe PDFStructElement should get a trim empty leaf flag and the decision moved\n> to the FOToPDFRoleMap."}, {"count": 27, "tags": [], "bug_id": 50852, "attachment_id": 27171, "id": 147238, "time": "2011-06-18T07:51:42Z", "creator": "martin.koegler@brz.gv.at", "creation_time": "2011-06-18T07:51:42Z", "is_private": false, "text": "Created attachment 27171\nHandle empty nodes\n\nThe attached patch should be able to handle both corner cases for empty blocks/table-cells (at least my testcase).\n\nEmpty blocks can have a meaning in the structure tree. Or they are created for technical reasons without any meaning. I created an interface for this policy decision in FOToPDFRoleMap. The patch includes a simple test policy - the final policy will require further discussion."}, {"count": 28, "tags": [], "bug_id": 50852, "attachment_id": null, "id": 157487, "time": "2012-04-07T01:43:46Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:43:46Z", "is_private": false, "text": "resetting P2 open bugs to P3 pending further review"}, {"count": 29, "tags": [], "bug_id": 50852, "attachment_id": null, "text": "increase priority due to presence of a patch", "id": 157694, "time": "2012-04-08T09:11:08Z", "creator": "gadams@apache.org", "creation_time": "2012-04-08T09:11:08Z", "is_private": false}, {"count": 30, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "vincent/peter, what is the status of this patch with your recent accessibility improvements? have these patches been applied? if not, then do expect to apply them? (when?)", "id": 157704, "time": "2012-04-08T19:15:53Z", "bug_id": 50852, "creation_time": "2012-04-08T19:15:53Z", "is_private": false}, {"count": 31, "tags": [], "bug_id": 50852, "attachment_id": null, "id": 158357, "time": "2012-04-24T05:53:04Z", "creator": "gadams@apache.org", "creation_time": "2012-04-24T05:53:04Z", "is_private": false, "text": "(In reply to comment #30)\n> vincent/peter, what is the status of this patch with your recent accessibility\n> improvements? have these patches been applied? if not, then do expect to apply\n> them? (when?)\n\nvincent/peter?"}, {"count": 32, "tags": [], "bug_id": 50852, "attachment_id": null, "id": 158380, "time": "2012-04-24T14:53:44Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-04-24T14:53:44Z", "is_private": false, "text": "(In reply to comment #31)\n> (In reply to comment #30)\n> > vincent/peter, what is the status of this patch with your recent accessibility\n> > improvements? have these patches been applied? if not, then do expect to apply\n> > them? (when?)\n> \n> vincent/peter?\n\nSome of those patches may still be worth applying as they may bring improvements in areas that were not touched by the work on accessibility. I'll need to have another look."}, {"count": 33, "text": "Created attachment 28824\nMark no longer relevant patches as obsolete\n\nThe accessibility code has been refactored to fix the fundamental limitation that empty content was not properly handled. It also suppresses the need for an intermediate representation of the structure tree and directly generates the appropriate PDF structure elements from the FO tree.\n\nMarking as obsolete the patches that are no longer relevant in the context of the new implementation. (Adding an empty patch is the quickest way I found to avoid editing each attachment individually.)", "bug_id": 50852, "is_private": false, "id": 159259, "time": "2012-05-23T18:54:42Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-05-23T18:54:42Z", "tags": [], "attachment_id": 28824}, {"count": 34, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": 28825, "text": "Created attachment 28825\nTreat some content as artifact\n\nThis is an adaptation of patch #19 to the new accessibility code. I chose the value 'artifact' instead of 'hidden' to follow the naming convention of the PDF Reference.\n\nI also chose to implement this special property value on fo:wrapper only, for simplicity. It should be easy to wrap any content that must be treated as artifact into an appropriate fo:wrapper element.\n\nI didn't implement the 'inherit' value, as I believe the PDF Reference already provides a standard structure type ('NonStruct') that allows to achieve a similar result. The node is not removed from the structure tree but the end result should be the same.\n\nAny feedback is welcome. If I don't hear anything within 3 working days, I'll assume lazy consensus and apply the patch.\n\nThanks,\nVincent", "id": 159260, "time": "2012-05-23T19:02:56Z", "bug_id": 50852, "creation_time": "2012-05-23T19:02:56Z", "is_private": false}, {"count": 35, "text": "Created attachment 28826\nTreat some content as artifact \u2013 Documentation\n\nThis patch is against the staging CMS website, that sooner or later will become the official website.", "bug_id": 50852, "is_private": false, "id": 159261, "time": "2012-05-23T19:04:47Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-05-23T19:04:47Z", "tags": [], "attachment_id": 28826}, {"count": 36, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": 26718, "text": "Comment on attachment 26718\nPatch 18/20\n\nApplied patch #18 in rev. 1341992:\nhttp://svn.apache.org/viewvc?rev=1341992&view=rev\n\nI left the criteria for compact output in PDFDictionary to 2, as we have to decide on a size and I don't think the savings are significant anyway (2 bytes per entry).\n\nThanks for the suggestion,\nVincent", "id": 159262, "time": "2012-05-23T19:27:44Z", "bug_id": 50852, "creation_time": "2012-05-23T19:27:44Z", "is_private": false}, {"count": 37, "tags": [], "bug_id": 50852, "attachment_id": 26717, "id": 159284, "time": "2012-05-24T10:50:30Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-05-24T10:50:30Z", "is_private": false, "text": "Comment on attachment 26717\nPatch 17/20\n\nI must mark this patch as invalid. The structure tree corresponds to the logical structure of the document and is not meant to reflect the way it is laid out on pages. So the static-content cannot be duplicated in the structure tree as many times as there are pages in the final output.\n\nAs hinted by the PDF Reference, the proper way to deal with content that is repeated over pages is to treat it as artifact. This will become possible once patches #20 and artifact have been handled.\n\nVincent"}, {"count": 38, "tags": [], "bug_id": 50852, "attachment_id": 26716, "id": 159313, "time": "2012-05-25T10:11:35Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-05-25T10:11:35Z", "is_private": false, "text": "Comment on attachment 26716\nPatch 16/20\n\nThis patch does no longer apply after the modifications brought to the accessibility code. Feel free to submit an updated patch, although the matter has been made slightly more complicated by the presence of placeholder structure elements. Also, it would be good to improve encapsulation, immutability and robustness by avoiding some of the tests (instanceof PDFDictionary, type equal to \"/MCR\"). Maybe a method like addMarkedContentKid on PDFStructElem would do. That would also avoid creating an instance of PDFDictionary, only to discard it later on because the reference to the kid can be simplified.\n\nThis simplification has been made less critical by the implementation of object streams, that allow to achieve a much more significant reduction of the file size. It may be of interest in cases where for some reason the user has to stick to PDF 1.4. But I'm not sure how common such a use case is.\n\nThanks,\nVincent"}, {"count": 39, "tags": [], "bug_id": 50852, "attachment_id": 26720, "text": "Comment on attachment 26720\nPatch 20/20\n\nI applied the changes suggested by this patch in rev. 1342680:\nhttp://svn.apache.org/viewvc?rev=1342680&view=rev\n\nI adapted the changes to the new accessibility code and I also implemented support for the intermediate format.\n\nThanks,\nVincent", "id": 159323, "time": "2012-05-25T15:18:57Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-05-25T15:18:57Z", "is_private": false}, {"count": 40, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "text": "I applied the artifact patch in rev. 1343632:\nhttp://svn.apache.org/viewvc?rev=1343632&view=rev\n\nThis fixes the last remaining issue for this bug.", "id": 159438, "time": "2012-05-29T09:53:33Z", "bug_id": 50852, "creation_time": "2012-05-29T09:53:33Z", "is_private": false}]
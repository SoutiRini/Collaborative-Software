[{"count": 0, "tags": [], "creator": "andreas.sahlbach@gmail.com", "attachment_id": null, "text": "Exception occurs if there is a directory in WEB-INF/lib having a .jar ending (e.g. foo.jar). Don't know if it makes sense to create such a dir in WEB-INF/lib, in my case a bug in another tool created such a dir. \n\nBut in any case: Tomcat should not crash because of such a directory, IMHO.\n\njava.lang.ClassCastException: org.apache.naming.resources.FileDirContext cannot be cast to org.apache.naming.resources.Resource\n\tat org.apache.catalina.util.ExtensionValidator.validateApplication(ExtensionValidator.java:182)\n\tat org.apache.catalina.core.StandardContext.start(StandardContext.java:4167)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)\n\tat org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:627)\n\tat org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553)\n\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488)\n\tat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1149)\n\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)\n\tat org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)\n\tat org.apache.catalina.core.StandardHost.start(StandardHost.java:719)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)\n\tat org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)\n\tat org.apache.catalina.core.StandardService.start(StandardService.java:516)\n\tat org.apache.catalina.core.StandardServer.start(StandardServer.java:710)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:578)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)", "id": 120546, "time": "2008-09-11T12:22:35Z", "bug_id": 45785, "creation_time": "2008-09-11T12:22:35Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45785, "attachment_id": null, "id": 120594, "time": "2008-09-14T13:03:54Z", "creator": "markt@apache.org", "creation_time": "2008-09-14T13:03:54Z", "is_private": false, "text": "This has been fixed in trunk and proposed for 6.0.x"}, {"count": 2, "tags": [], "bug_id": 45785, "text": "This has been fixed in 6.0.x and will be included in 6.0.19 onwards.", "id": 120783, "time": "2008-09-19T03:59:54Z", "creator": "markt@apache.org", "creation_time": "2008-09-19T03:59:54Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 45785, "text": "Created attachment 23934\nAdd support for directories with name ending on .jar\n\nWhile the specific case (directory called .jar in WEB-INF/lib) has been fixed, two other cases remain in ExtensionValidator.\n\nTherefore I reopened this bug:\n\nWe're using an exploded deployment mechanism which uses extracted jar files in folders called jarname.jar. The eclipse projects build directly into those folders.\nHowever when adding these projects to a jboss launch configuration, which results in a jarname.jar folder (not file) to be part of the classpath, JBoss will fail because ExtensionValidator tries to treat the jarname.jar folder as a file.\nExtensionValidator only checks if a java.io.File endsWith(\".jar\") but it fails to check if it is an actual file, not a directory.\n\nI attached a proposed fix (I only added the !item.isDirectory() and !files[i].isDirectory() )\n\nI ran into other JBoss problems after fixing this which means that this does not really affect me. It may not be popular to name directories something.jar but in the cases of exploded deployment this seems normal. In any case my patch does not affect the normal usage of actual .jar files so I see no reason not to include it.", "id": 128575, "time": "2009-07-07T00:35:40Z", "creator": "rolf@wojtech.de", "creation_time": "2009-07-07T00:35:40Z", "is_private": false, "attachment_id": 23934}, {"count": 4, "attachment_id": null, "bug_id": 45785, "text": "Reopened due to additional problems with directories called somename.jar", "id": 128576, "time": "2009-07-07T00:36:28Z", "creator": "rolf@wojtech.de", "creation_time": "2009-07-07T00:36:28Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I have fixed trunk and proposed the same fix for 6.0.x based on your patch.\n\nMany thanks.", "id": 130253, "time": "2009-09-09T09:21:46Z", "bug_id": 45785, "creation_time": "2009-09-09T09:21:46Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 45785, "attachment_id": null, "id": 130849, "time": "2009-10-03T10:35:29Z", "creator": "markt@apache.org", "creation_time": "2009-10-03T10:35:29Z", "is_private": false, "text": "This has been fixed in 6.0.21 and will be included in 6.0.21 onwards.\n\nThanks again for the patch."}]
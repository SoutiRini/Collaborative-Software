[{"count": 0, "tags": [], "bug_id": 59125, "attachment_id": 33626, "text": "Created attachment 33626\nServlet using WriteListener and CompletionStage\n\nPutting a servlet into request.startAsync() state and using a CompletionStage.whenComplete to call asyncContext.complete() once data has been written using a Servlet 3.1 non-blocking WriteListener causes\n\njava.lang.IllegalStateException: Calling [asyncError()] is not valid for a request with Async state [MUST_COMPLETE]\n\nif the client disconnects during write.\n\n\nTo reproduce, run the attached source as a servlet in Tomcat, hit the servlet address, and close the browser window before the response it written.\nThis causes a\n\n05-Mar-2016 19:06:13.823 SEVERE [http-apr-8080-exec-6] org.apache.catalina.connector.CoyoteAdapter.asyncDispatch Exception while processing an asynchronous request\n java.lang.IllegalStateException: Calling [asyncError()] is not valid for a request with Async state [MUST_COMPLETE]\n\tat org.apache.coyote.AsyncStateMachine.asyncError(AsyncStateMachine.java:351)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:820)\n\tat org.apache.coyote.Request.action(Request.java:378)\n\tat org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:419)\n\tat org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:334)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1716)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:650)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2500)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2489)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\nI suspect this is caused by the fact that the CompletionStage is completed (exceptionally) by the Tomcat thread handling the NIO write, and in turn, the asyncContext.complete() is called by the same thread.\n\nThis feels like a sensible structure from a Java 8 perspective, chaining asynchronous operations through CompletionStages, and it works when successfully delivering data.\n\nIf I use a .whenCompleteAsync, forcing the asyncContext.complete() to another thread, no error is triggered, but it seems overkill to switch thread just to call complete(), and it is in any case inconsistent with the structure working when successfully delivering data.", "id": 189150, "time": "2016-03-05T18:55:30Z", "creator": "jes@northtech.dk", "creation_time": "2016-03-05T18:55:30Z", "is_private": false}, {"count": 1, "attachment_id": 33626, "bug_id": 59125, "is_private": false, "id": 189215, "time": "2016-03-07T16:55:48Z", "creator": "markt@apache.org", "creation_time": "2016-03-07T16:55:48Z", "tags": [], "text": "Comment on attachment 33626\nServlet using WriteListener and CompletionStage\n\nMake the patch accessible in the BZ UI"}, {"count": 2, "tags": [], "creator": "markt@apache.org", "text": "Comment on attachment 33626\nServlet using WriteListener and CompletionStage\n\nWhoops. Test case, not patch.", "id": 189216, "time": "2016-03-07T16:56:17Z", "bug_id": 59125, "creation_time": "2016-03-07T16:56:17Z", "is_private": false, "attachment_id": 33626}, {"count": 3, "attachment_id": null, "bug_id": 59125, "text": "The Servlet spec requires Tomcat (or the application) to call AsyncContext.complete() during the error handling.\n\nIn the provided sample code, AsyncContext.complete() is always called even after an error. For correct operation it needs to only call complete when called via complete() but not when called via completeExceptionally()", "id": 189219, "time": "2016-03-07T17:09:02Z", "creator": "markt@apache.org", "creation_time": "2016-03-07T17:09:02Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 59125, "is_private": false, "id": 189231, "time": "2016-03-07T20:46:48Z", "creator": "jes@northtech.dk", "creation_time": "2016-03-07T20:46:48Z", "tags": [], "text": "As in, \"complete\" is not a \"release resources\", and you don't need to do it in case of errors?\nThat runs counter to all examples I've seen of async servlets, where the \"complete\" is specifically outside any try-catch around the read/write."}, {"count": 5, "tags": [], "bug_id": 59125, "attachment_id": null, "text": "As in complete() is required (by the spec) to be called as part of the error handling and if it isn't the container has to do it. See 2.3.3.3 of the servlet spec and search for onError.\n\nIf you have further questions, the users@ mailing list is the place to ask.", "id": 189232, "time": "2016-03-07T20:56:41Z", "creator": "markt@apache.org", "creation_time": "2016-03-07T20:56:41Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 59125, "is_private": false, "id": 189233, "time": "2016-03-07T21:01:55Z", "creator": "jes@northtech.dk", "creation_time": "2016-03-07T21:01:55Z", "tags": [], "text": "Thanks for the clarifications; re-reading the fine print I see the point on \"complete\" being called from an AsyncContext listener.\n\nShouldn't it then be a similar state error to call it using .whenCompleteAsync? (Is Tomcat doing something lenient here?)"}]
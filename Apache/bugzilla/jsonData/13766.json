[{"attachment_id": null, "tags": [], "bug_id": 13766, "is_private": false, "count": 0, "id": 24866, "time": "2002-10-18T16:09:58Z", "creator": "benson@basistech.com", "creation_time": "2002-10-18T16:09:58Z", "text": "In theory, java.library.path is all you should need to set to find libraries \nfor JNI classes in Java.\n\nHowever: using JDK 1.4.1_01 on Windows XP, I find the following: If a Java \nprogram calls System.loadLibrary(\"foo\"), and foo.dll depends on bar.dll, and \nbar.dll is in one of the dirs in java.library.path but is NOT in PATH, the JRE \nfails to load it and a dialog pops up.\n\nIt seems as if, to get around this, there needs to be support for the <env> \ntag in <java>, so that one can force a setting of PATH. Or that <java> needs \nto notice a sysproperty setting of java.library.path and goof around with PATH \nwhen creating the process.\n\nThis also applies to <junit>."}, {"count": 1, "tags": [], "creator": "ddevienne@lgc.com", "text": "What you describe has always been the case on Windows (depends on Path to find \ndependents of JNI DLLs), and *nix (uses LD_LIBRARY_PATH).\n\nFurthermore, both <java> and <junit> already support the nested <env> element.\n\nCheck out the documentation for Ant 1.5+. --DD", "id": 24872, "time": "2002-10-18T18:08:40Z", "bug_id": 13766, "creation_time": "2002-10-18T18:08:40Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 13766, "is_private": false, "count": 2, "id": 24878, "time": "2002-10-18T19:12:13Z", "creator": "stevel@apache.org", "creation_time": "2002-10-18T19:12:13Z", "text": "This sounds like a defect in Java1.4.1 and its classloader stuff. Why not file\nit as sun.\n\nMarking as closed because DD's fix, use the <env> setting with fork=true should\nact as a workaround"}, {"attachment_id": null, "tags": [], "bug_id": 13766, "is_private": false, "count": 3, "id": 24880, "time": "2002-10-18T19:31:50Z", "creator": "ddevienne@lgc.com", "creation_time": "2002-10-18T19:31:50Z", "text": "There's no bug... It's standard behavior. java.library.path is used by the VM \nto locate a DLL (same on Unix), and then the DLLs this JNI DLLs depends on is \nlocated thru the native OS... i.e. using the Path env. var on Windows, and the \nLD_LIBRARY_PATH env. var on *nix. Completely kosher, and has nothing to do with \nXP or Ant. --DD"}, {"count": 4, "attachment_id": null, "creator": "benson@basistech.com", "text": "Well, I was recently surprised to see that this wasn't true on Unix. Other \nlibraries ARE found via j.l.p.\n\nHowever, assume that you are correct. That strikes me as a strong argument in \nfavor of <env> as a tag inside <java>, to allow programs that need PATH \nsettings to be set up.\n", "id": 24881, "time": "2002-10-18T19:35:43Z", "bug_id": 13766, "creation_time": "2002-10-18T19:35:43Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "text": "Hmmm, I'd like to see that myself...\n\nIn any case, that's why, as said earlier, both <java> and <junit> support \nnested <env>. Did you miss that part? ;-) --DD", "attachment_id": null, "id": 24882, "creator": "ddevienne@lgc.com", "time": "2002-10-18T19:38:22Z", "bug_id": 13766, "creation_time": "2002-10-18T19:38:22Z", "is_private": false}, {"count": 6, "tags": [], "text": "The real problem is that write once, run anywhere falls down when you go through\nan OS feature, knowing how the stuff works underneath is the key to\nunderstanding behaviour.\n\nHere what you are seeing is the behaviour of ::LoadLibrary(), which is the\nstandard way to load stuff. Sun should be using ::LoadLibraryEx() with the\nLOAD_WITH_ALTERED_SEARCH_PATH option to get the directory containing the current\nDLL used at the base of the search. Classic LoadLibrary() uses the local app\ndir, but that is whereever java.exe ran, not where your libs live.\n\n\nmarking bug as invalid because you can set PATH in <java>; go talk to sun about\nthe diff between ::LoadLibrary and ::LoadLibraryEx. You have to remember they\ndont fully understand win32, nor do they really want to. ", "is_private": false, "id": 24883, "creation_time": "2002-10-18T19:58:14Z", "time": "2002-10-18T19:58:14Z", "creator": "stevel@apache.org", "bug_id": 13766, "attachment_id": null}]
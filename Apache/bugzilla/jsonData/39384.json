[{"count": 0, "tags": [], "bug_id": 39384, "text": "I've been implementing a webapp with webDAV functionality for a client, and \nhave been hitting webDAV timeout problems when using Dreamweaver 8 as the \nclient. I've searched google and bugzilla, and most of the articles are circa \nTomcat 4, so I suspect there is something in the way the latest version of \nDreamweaver is communicating that Tomcat doesn't know how to handle.\n\nA quick summary of my testing:\n\n- With my custom webapp, my own container (Winstone) works fine, Resin works \nfine and Tomcat locks up. \n- Even with tomcat's bundled webDAV application, Dreamweaver gets some \nintermittent errors to do with HTTP timeouts. Creating new folders brings up a \ndialog saying something like (rough translation from Japanese) \"Can't GET \nremote folder information\", but does it anyway.\n- This timeout problem occurs on 5.0.30 and 5.5.17.\n- The server believes that the response has been finished, but client hangs \nwaiting. It seems to be just after a PROPFIND that is asking for lockdiscovery \nand resourcetype.\n- Other clients are fine (MS WebFolders, MS Office, Gnome DAV client)\n- My custom app is DAV level 2.\n\nFrom looking at the headers passed back and forth, the main difference appears \nto be use of the Connection:close header (resin and winstone both use it in \nplaces that Tomcat doesn't). That leads me to believe that dreamweaver is \nconfused when trying to keep-alive a tomcat connection that is closed by \nwinstone and resin.\n\nI'm happy to continue trying to debug this, because I expect there's probably \nsome webapp workaround that won't require any container changes, but I'd like \nto ask 2 questions:\n\n1. Is there a tomcat debug setting that dumps headers and responses to the \nlogs (so I can watch keep-alive behaviour while it's failing) ? I've looked \nand I couldn't see one.\n2. Has anyone else had successful use of Dreamweaver 8 with Tomcat using \nwebdav ?\n\nThanks, \n\nRick\n\n----\n\nVersions: \n\nClient - Dreamweaver 8.0.1 (Japanese version)\nServer - Tomcat, naked (ie no apache/IIS connector), v5.0.30, 5.5.9, 5.5.11 \nand 5.5.17", "id": 88393, "time": "2006-04-23T06:59:18Z", "creator": "rick@knowleses.org", "creation_time": "2006-04-23T06:59:18Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 39384, "attachment_id": null, "text": "The best thing for this in my view is TcpMon from the Axis project.\n(http://ws.apache.org/axis/java/user-guide.html#AppendixUsingTheAxisTCPMonitorTcpmon)\nI have used this very successfully in the past to debug WEBDAV problems.\n\nFor background:\n- the WEBDAV implementation in TC4 and TC5 is pretty much the same\n- it isn't a complete implementation\n\nWhat is really needed to take this forward is either:\n- a test case that can be used to reprodce the issue\n- a patch that fixes the probem", "id": 88399, "time": "2006-04-23T09:45:38Z", "creator": "markt@apache.org", "creation_time": "2006-04-23T09:45:38Z", "is_private": false}, {"count": 2, "tags": [], "creator": "rick@knowleses.org", "attachment_id": null, "is_private": false, "id": 88404, "time": "2006-04-23T15:41:53Z", "bug_id": 39384, "creation_time": "2006-04-23T15:41:53Z", "text": "Thanks ... that was a big help, and it revealed what I think is the bug.\n\nSeems to be an RFC2616 interpretation thing.\n\nThe timeout occurs after the response to this request:\n\nDELETE /intranet/staff/dav/MM_CASETEST4291/ HTTP/1.1\nAuthorization: Basic ***omitted***\nUser-Agent: Contribute/3.0\nHost: localhost:8081\nPragma: no-cache\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*\n\nNote that this is an HTTP/1.1 request, with no Connection header, which I \nthink the spec says (can't find it right now) can be assumed to be a keep-\nalive request.\n\nThe response comes back as:\n\nHTTP/1.1 204 No Content\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=02CBA58694E0F790389720E129151DF4; Path=/intranet\nDate: Sun, 23 Apr 2006 14:40:56 GMT\n\nWhich then causes the server to hang. I think what happens is the client \nintreprets this as a keep-alive response, since there's no \"connection:close\" \nheader, but because there's also no Content-length header it sits there \nwaiting until the socket closes. \n\nI haven't checked resin yet, but Winstone sends connection headers every time \n(implicitly determining the right value if not set using the presence of \nresponse content-length header and req connection header) and therefore seems \nto avoid this situation.\n\nWould I be right in assuming that Tomcat only has content-lengths on the >=400 \nerror codes, and so I have to set content-lengths manually on anything <400 ?\n\nI set the content length to zero explicitly and the timeouts stopped - that \nseems to do nicely as a workaround.\n\nNot sure if this is really a bug or not ... I'll leave it set as invalid, but \nmaybe someone might want to add something in Tomcat similar to the auto-\ncorrection thing I mentioned above. Or not - matter of opinion, just thought \nI'd document the reason for the problem I saw since it wasn't obvious and \nlooked like a tomcat bug.\n\nThanks Mark for pointing out the tcpmon tool. Helped a lot.\n\nRick"}]
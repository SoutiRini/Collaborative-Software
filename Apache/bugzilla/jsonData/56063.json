[{"count": 0, "tags": [], "bug_id": 56063, "attachment_id": 31254, "text": "Created attachment 31254\nsame test based directly on pthreads\n\nAPR was built with:\n\n-bash-3.2$ CFLAGS='-w2 -c99 -g' ./configure --enable-threads --disable-ipv6 --with-egd=/var/run/egd-pool\n\n\nAttaching the debugger shows the following:\n\n-bash-3.2$ ladebug -pid 26335 testall\nWelcome to the Ladebug Debugger Version 4.0-49\n------------------ \nobject file name: testall \nReading symbolic information ...done\nAttached to process id 26335  ....\n\n\nInterrupt (for process)\n\nStopping process localhost:26335 (testall).\nThread received signal INT\nstopped at [<opaque> __nxm_thread_block(...) 0x3ff805b1028]\t\n(ladebug) show thread  \n  Thread Name                      State           Substate    Policy       Pri\n  ------ ------------------------- --------------- ----------- ------------ ---\n>*    -1 manager thread            blk SCS                     SCHED_RR     19\n       1 default thread            blocked         join 122    SCHED_OTHER  19\n      -2 null thread for VP 1      running VP 1                null thread  -1\n     122 <anonymous>               blocked         mut 108     SCHED_OTHER  19\n\nInformation:  An <opaque> type was presented during execution of the previous command.  For complete type information on this symbol, recompilation of the program will be necessary.  Consult the compiler man pages for details on producing full symbol table information using the -g (and -gall for cxx) flags.\n\n(ladebug) where thread 1  \nStack trace for thread 1\n#0  0x3ff805b0e1c in __hstTransferRegisters(0x3ffc01b1470, 0x3ff8058d248, 0x3ffc01b1470, 0x3ff80598f04, 0x3ffc01b1470, 0x100000000) in /usr/shlib/libpthread.so\n#1  0x3ff80590514 in __hstTransferContext(0x3ffc01b1470, 0x3ff8058d248, 0x3ffc01b1470, 0x3ff80598f04, 0x3ffc01b1470, 0x100000000) in /usr/shlib/libpthread.so\n#2  0x3ff8058d3d8 in __dspDispatch(0x3ffc01b1470, 0x3ff8058d248, 0x3ffc01b1470, 0x3ff80598f04, 0x3ffc01b1470, 0x100000000) in /usr/shlib/libpthread.so\n#3  0x3ff805a4780 in __pthread_join(0x3ffc01b1470, 0x3ff8058d248, 0x3ffc01b1470, 0x3ff80598f04, 0x3ffc01b1470, 0x100000000) in /usr/shlib/libpthread.so\n#4  0x3ffbfff2a88 in apr_thread_join(retval=0x11ffffb50, thd=0x140594e38) \"threadproc/unix/thread.c\":217\n#5  0x12002bef0 in nested_wait(tc=0x11ffffba0, data=0x11ffffbe0) \"testcond.c\":340\n#6  0x120008960 in abts_run_test(ts=0x14006e6c0, f=0x12002bcb8, value=0x11ffffbe0) \"abts.c\":171\n#7  0x12002d0f0 in testcond(suite=0x14006e6c0) \"testcond.c\":662\n#8  0x120009620 in main(argc=2, argv=0x11ffffc48) \"abts.c\":429\n#9  0x120008368 in __start(0x3ffc01b1470, 0x3ff8058d248, 0x3ffc01b1470, 0x3ff80598f04, 0x3ffc01b1470, 0x100000000) in testall\n\n(ladebug) where thread 122  \nStack trace for thread 122\n#0  0x3ff805b0e1c in __hstTransferRegisters(0x3ff80597744, 0x3ff8058d248, 0x140103880, 0x3ff80599200, 0x140103880, 0x0) in /usr/shlib/libpthread.so\n#1  0x3ff80590514 in __hstTransferContext(0x3ff80597744, 0x3ff8058d248, 0x140103880, 0x3ff80599200, 0x140103880, 0x0) in /usr/shlib/libpthread.so\n#2  0x3ff8058d3d8 in __dspDispatch(0x3ff80597744, 0x3ff8058d248, 0x140103880, 0x3ff80599200, 0x140103880, 0x0) in /usr/shlib/libpthread.so\n#3  0x3ff8058c780 in __cvWaitPrim(0x3ff80597744, 0x3ff8058d248, 0x140103880, 0x3ff80599200, 0x140103880, 0x0) in /usr/shlib/libpthread.so\n#4  0x3ff8058a368 in __pthread_cond_wait(0x3ff80597744, 0x3ff8058d248, 0x140103880, 0x3ff80599200, 0x140103880, 0x0) in /usr/shlib/libpthread.so\n#5  0x3ffbffe3334 in apr_thread_cond_wait(cond=0x140594e08, mutex=0x140594dd0) \"locks/unix/thread_cond.c\":68\n#6  0x12002bac8 in nested_lock_and_wait(box=0x11ffffb58) \"testcond.c\":275\n#7  0x12002afb0 in thread_routine(thd=0x140594e38, data=0x11ffffb58) \"testcond.c\":97\n#8  0x3ffbfff2804 in dummy_worker(opaque=0x140594e38) \"threadproc/unix/thread.c\":142\n#9  0x3ff805a5eac in __thdBase(0x3ff80597744, 0x3ff8058d248, 0x140103880, 0x3ff80599200, 0x140103880, 0x0) in /usr/shlib/libpthread.so\n\n(ladebug) show mutex 108  \nMutex  Name                      State Owner  Pri Type     Waiters (+Count)\n------ ------------------------- ----- ------ --- -------- --------------------\n   108 <anonymous>               Lock     122     Recurs   122\n(ladebug) show condition with state == wait  \nCond   Name                      Mutex  Type  Waiters (+Count)\n------ ------------------------- ------ ----- ---------------------------------\n(ladebug) show condition  \nCond   Name                      Mutex  Type  Waiters (+Count)\n------ ------------------------- ------ ----- ---------------------------------\n     1 _exc_read_mutex+72(0x3ffc\n     2 _exc_read_mutex+112(0x3ff\n     3 .bss+72(0x3ffc0512f98)\n     4 mq_server_data+72(0x3ffc0\n    10 <anonymous>\n(ladebug) show condition 10  \nCond   Name                      Mutex  Type  Waiters (+Count)\n------ ------------------------- ------ ----- ---------------------------------\n    10 <anonymous>\n(ladebug) \n\n\nFrom the stack traces you can see that thread 1 is blocked in \"nested_wait\" while joining thread 122. Thread 122 is blocked on mutex 108. Nobody is waiting for any condition variable.\n\nThe reason for this behaviour is the pthread implementation on Tru64 V4.0F and probably other 4.0x versions. (The test runs fine on V5.1B (PK7) without recompilation). I've adapted and attached a little C program based on pthreads only that does pretty much the same as the \"nested_wait\" test in testcond.c. It shows the same behaviour on a V4.0F and runs on V5.1B.\n\nAny ideas to disable recursive mutex on Tru64 V4.0x? I found APR_CHECK_PTHREAD_RECURSIVE_MUTEX.", "id": 172692, "time": "2014-01-25T16:22:33Z", "creator": "urs.traber@gmail.com", "creation_time": "2014-01-25T16:22:33Z", "is_private": false}, {"count": 1, "text": "Created attachment 31621\n--disable-mutex-recursive ; fixes issues on Tru64\n\n- provide --disable-mutex-recursive to remove APR_THREAD_MUTEX_RECURSIVE\n  from APRs interface where they are not supported (e.g. Tru64 V4.0x)\n- sockaddr.c: fixes Bug 14589: parse_ip() causes an \"unaligned access\"\n              warning on Tru64 when configued with --enable-ipv6\n- shm.c: added error checks where missing after mmap calls\n- socket_util.c: fix compiler error/warning (has been fixed in APR 1.5.1)\n- fix multiple Compaq cc compiler warnings when building with -w2\n- fix some autotool warnings \n- apr.h.in: enable building DEC C++ code against APR\n- testrand.c: added a test for apr_generate_random_bytes, apr_random_add_entropy\n              apr_random_insecure_ready to detect an endless loop in httpd under\n              Tru64 when configured with --with-egd=/dev/random", "creator": "urs.traber@gmail.com", "is_private": false, "id": 175220, "time": "2014-05-14T19:31:26Z", "bug_id": 56063, "creation_time": "2014-05-14T19:31:26Z", "tags": [], "attachment_id": 31621}, {"count": 2, "tags": [], "bug_id": 56063, "attachment_id": 31622, "text": "Created attachment 31622\nusing APR_THREAD_MUTEX_DEFAULT in apr_thread_pool\n\n- apr_thread_pool.c: replace APR_THREAD_MUTEX_NESTED\n                     with APR_THREAD_MUTEX_DEFAULT\n- provide testthreadpool.c to make sure that the apr_thread_pool works with the\n  replaced mutex attribute.\n- fix multiple Compaq cc compiler warnings when building with -w2", "id": 175221, "time": "2014-05-14T19:33:39Z", "creator": "urs.traber@gmail.com", "creation_time": "2014-05-14T19:33:39Z", "is_private": false}, {"count": 3, "text": "I have worked on a --disable-mutex-recursive switch to configure APR without recursive mutexes. They remain enabled by default on platforms that support them.\n\nOf course when APR is configured with --disable-mutex-recursive we need to look\nand take care of all existing usages of APR_THREAD_MUTEX_NESTED. APR-util e.g. uses it in thread_pool_construct(). I have replaced this mutex attribute and provided a test. Test coverage of the apr_thread_pool could be better though.\n\nThe two patched have been tested on:\n\no Tru64 UNIX V5.1B (Rev. 2650) PK7 (Alpha EV67)\n - Compaq C V6.5-303\n - APR :--recursive-mutex-enabled [ok]\n -   APR-util: [ok]\n - APR: --recursive-mutex-disabled [ok] \n -   APR-util: [ok] \n\no Digital UNIX V4.0F (Rev. 1229) PK8 (Alpha EV6)\n - Compaq C V6.5-303\n - APR: --recursive-mutex-disabled [ok] \n -   APR-util: [ok] \n   \no Debian /Linux Wheezy (amd64)\n - gcc 4.7.2\n - APR: --recursive-mutex-enabled [ok]\n -   APR-util: [ok] \n - APR: --recursive-mutex-disabled [ok] \n -   APR-util: [ok] \n             \no Debian/Linux Sarge (Alpha EV56)\n - kernel 2.6.21\n - gcc 3.3.5\n - APR: --recursive-mutex-enabled [ok]\n -   APR-util: [testxml segfaults because of a broken libexpat 1.95.8-3] \n - APR: --recursive-mutex-disabled [ok]\n -   APR-util: [testxml segfaults because of a broken libexpat 1.95.8-3]  \n \nHttpd runs also with these modifications on Tru64 V4.0F and V5.1B\n\nRegards\nUrs", "bug_id": 56063, "is_private": false, "id": 175222, "time": "2014-05-14T19:37:22Z", "creator": "urs.traber@gmail.com", "creation_time": "2014-05-14T19:37:22Z", "tags": [], "attachment_id": null}]
[{"attachment_id": null, "tags": [], "creator": "michajlo_matijkiw@comcast.com", "is_private": false, "count": 0, "id": 145792, "time": "2011-04-14T16:08:21Z", "bug_id": 51065, "creation_time": "2011-04-14T16:08:21Z", "text": "Presently connection timeout and socket timeout are hardcoded in conn_connect.  These should be exposed to the user, otherwise a non-responsive memcache server can hang the application.\n\nThe attached patch fixes this at the expense of breaking backward compatibility, so it should be targeted for a future release."}, {"count": 1, "tags": [], "creator": "michajlo_matijkiw@comcast.com", "attachment_id": 26887, "id": 145793, "time": "2011-04-14T16:09:22Z", "bug_id": 51065, "creation_time": "2011-04-14T16:09:22Z", "is_private": false, "text": "Created attachment 26887\npatch exposing timeouts through apr_memcache_server_create"}, {"count": 2, "tags": [], "creator": "jmarantz@google.com", "text": "I patched this change into my development environment and attempted to set the socket timeout to 10 seconds.  After I did this, the system behaved very poorly under load, timing out.  Ultimately in my system-load tests, with the socket timeout set at -1 I was getting >8k queries per second.  But when I set the socket timeout to 10 seconds I got less than 300 queries per second, with lots of timeouts.  This load-test was encompassing much more than memcached so the absolute numbers are not that important, but the dramatic drop is.\n\nMy load-test was not expected to induce large numbers of memcached timeouts.   But the system was much more stable & predictable with the default timeeout of -1.\n\nJeff Trawick (trawick@gmail.com) suggested on a thread in dev@apr.apache.org that this patch \"is apparently missing a call to adjust the\nsocket timeout and to discard the connection if the timeout is\nreached\", and that seems consistent with my experiments.\n\nSo I think some iteration is required before this patch is applied.", "id": 162825, "time": "2012-10-19T13:34:06Z", "bug_id": 51065, "creation_time": "2012-10-19T13:34:06Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "jmarantz@google.com", "text": "Created attachment 29538\nAlternative patch to use the 50ms timeout for all operations without changing API\n\nI have an alternative solution to the problem identified in this bug.  However I have a different take on the problem.\n\nThe problem is that memcached freezing can freeze Apache using the current implementation of apr_memcache.c.  The only API that doesn't freeze is apr_memcache_multgetp because that uses a 50ms poll and will return APR_TIMEUP if the server exceeds that.\n\nMy alternative patch is a drop-in update for the existing apr_memcache.c.  It differs from the first patch in that it doesn't require an API change; it but it enforces the 50ms timeout that already exists for apr_multgetp for all operations.\n\nIt works under my load test (which I found is not true of the first patch).\nFor my own purposes, I will be shipping my module with a copy of apr_memcache.c with this patch applied, and with all entry-points renamed to 'apr_memcache2*' so I get the behavior I want regardless of what version of Apache is installed.  But I'd like to propose my patch for apr_memcache.c.", "id": 163110, "time": "2012-11-01T12:01:21Z", "bug_id": 51065, "creation_time": "2012-11-01T12:01:21Z", "is_private": false, "attachment_id": 29538}]
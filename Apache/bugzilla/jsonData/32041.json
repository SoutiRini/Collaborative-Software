[{"attachment_id": null, "tags": [], "bug_id": 32041, "text": "We have a highly distributed project encompassing many jars containing many\ncomponents all of which run on many machines across the network.  Remote deploys\nare problematic given this architecture.  We currently have a base\n\"remote-deploy\" task which prompts the user via \"input\" for a remote machine and\ndirectory and uses the \"scp\" task to deploy there.\n\nI'd really love to be able to remember the value the user enters here so that\nthe next time the \"remote-deploy\" task is called it can display the last value\nthe user gave as a default, and use that value if they just hit \"return\".  This\nway they can tailor their builds to ask them for their first remote-deploy host,\nuse that until the needed files are deployed there, then give the next\nremote-deploy host, then use that until the needed files are there, etc.  None\nof these hosts are known until deploy-time, so it cannot be done via properties\nin the build file.\n\nRight now my only option is to pass in a default value every time I call the\n\"remote-deploy\" task, and then prompt the user for a value if they want to use a\ndifferent value than the default.  It would be fantastic to remember the value\nthey enter in and use THAT as the default next time I call the task.  \n\nIn general, a \"property\" like entity/task which is truly mutable across the span\nof the project (and not just within a target, as in the ant-contrib \"variable\"\ntask) so that it can be dynamically altered to suit the conditions of the\nprogression of the build based on the changing requirements as given by the user\nwould be phenomenal.  Right now, if a property is only referred to within a\nparticular Task, its scope is that Task (and any Task it antcalls), and no more\n- one you're done with that Task, the property is removed, and any state-ful\ninformation it might contain is gone with it.  \n\nI've been studying the Ant codebase, and I don't think it's enormously difficult\n(unless I'm missing something crucial about Ant's architecture (and yes, I know\n\"properties are non-mutable\" is law, but I can't find a clear explanation of the\nnecessity of this fact on the site)) : a few tweaks to PropertyHelper to add a\nnew Hashtable to contain the mutable variables, a small tweak to add Hooks for\nthem, and a tweak to the replaceProperties function so that these variables are\ntreated as properties are for ${} substitution, and a new class to describe them.  \n\nThat, or allow us to subclass PropertyHelper to add these enhancements ourselves\n(if we can subclass ProjectHelper, why not PropertyHelper?), looks like it would\ndo the trick...\n\nAnother possibility would be to have static properties in Tasks, so that they\nare treated as static variables in a java method would be.  I'll have to\ninvestigate that as well - might be easier than making changes to PropertyHelper...", "count": 0, "id": 66355, "time": "2004-11-03T15:45:50Z", "creator": "benjamin@yangtemko.com", "creation_time": "2004-11-03T15:45:50Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 32041, "text": "It is very easy to write a new task using <scriptdef> to store a property into a file. There is also <loadfile> and <property file=\"\"> tasks for loading properties.", "id": 66362, "time": "2004-11-03T16:51:16Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-11-03T16:51:16Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 32041, "attachment_id": null, "text": "We dont do mutability because it turns out to work very well for overriding\nthings in bigger and more complex build process. I'd be leery about adding any\nkind of mutability, especially as you probably want persistence of the\ninformation. Save the input to a file, instead.", "id": 66370, "time": "2004-11-03T17:26:53Z", "creator": "stevel@apache.org", "creation_time": "2004-11-03T17:26:53Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 32041, "attachment_id": null, "is_private": false, "id": 66375, "time": "2004-11-03T18:55:05Z", "creator": "benjamin@yangtemko.com", "creation_time": "2004-11-03T18:55:05Z", "text": "I must admit to a very deep dissatisfaction to touching the filesystem outside\nof the actual compilation process.  I thought of this solution early on but\ndiscarded it as impractical for various reasons (also, it doesn't \"feel\" right).  \n\nOne of those reasons is that we have a common build base file which defines many\ntasks.  If multiple users are building various projects (especially if multiple\nusers are working on several branches of the same project) it can be a pain to\nmanage the files to which I am trying to maintain user session data.  Sure, you\ncan always write to the user's home directory, but if I have builds going in\nparallel this gets messy as well.  It makes much more sense to me to have a\nthread-safe session like object where I can store data generated throughout the\nbuild process, and refer to this data as needed during my large, anastomotic\nbuilds.  Ant does everything else so well, and is so enormously useful, this\nseems like a next-logical-step, especially under the context of\nuser-input-driven builds with the \"input\" task - that's a pandora's box you\ncan't close back.\n\n"}, {"count": 4, "text": "Why not use build.xml.properties file for storing persistent data - it is \nlocal  \nfor the build. There is also an API to store user settings in registry (or \nuser home on Unix), you can use it. \n ", "bug_id": 32041, "is_private": false, "id": 66377, "time": "2004-11-03T19:27:52Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-11-03T19:27:52Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 32041, "is_private": false, "count": 5, "id": 66378, "time": "2004-11-03T19:32:30Z", "creator": "mbenson@apache.org", "creation_time": "2004-11-03T19:32:30Z", "text": "Are you talking about within the life of a single (capital-P) Project?  If so \nyou could simply use ant-contrib's <var> task for that.  If you mean within a \nJVM that could reference multiple Project instances, you could still write a \ncustom task to set a system property (I think), which should then be copied \ninto later-instantiated Project properties collections.  Otherwise I am at a \nloss to understand what you expect of Ant."}, {"count": 6, "text": "Let me try to show you what I mean.  Here's a simplified example:\n\n\n======================\n[basebuild.xml]\n...\n<property name=\"default_rhost\" value=\"192.168.1.1\"/>\n...\n  <target name=\"remote_deploy\">\n    <input message=\"Enter remote server [${default_rhost}]: \"\n           addproperty=\"rd_rhost\"\n           defaultvalue=\"${default_rhost}\"/>\n    <property name=\"default_rhost\" value=\"${rd_rhost}\">\n    <scp task here using user-supplied hostname in \"rd_host\">\n  </target>\n======================\n\n\n======================\n[projectbuild.xml]\n\n  <import file=\"basebuild.xml\"/>\n\n  <target name=\"remote_deploy\" description=\"scp files\">\n    <antcall target=\"basebuild.remote_deploy\">\n        <params to specify first set of files fo here>\n    </antcall>\n    <antcall target=\"basebuild.remote_deploy\">\n        <params to specify next set of files go here>\n    </antcall>\n    <ant call and so on>\n  </target>\n======================\n\nOK, from the top : \n\nI have basebuild, which is included in projectbuild.  The basebuild file defines\nthe remote_deploy task which projectbuild uses to deploy several different sets\nof files remotely, possible to one or more servers, possibly not, it is not\nknown until I'm ready for deployment.\n\n1) default_rhost gets set to 192.168.1.1\n2) antcall to basebuild.remote_deploy occurs, the user is asked for input\n3) user gives 192.168.23.24\n4) I set the \"default_rhost\" variable to the user supplied value, which works\n    as long as this Target is active.\n5) first set of files is deployed to 192.168.23.24\n6) basebuild.remote_deploy Target ends, *** \"default_rhost\" resets to\n   \"192.168.1.1\" *** \n7) second antcall to remote_deploy occurs, the user is asked for input, but the\n   \"default_rhost\" variable doesn't remember what the user put in last time, \n   even though I attempted to set its value within the Target.\n\n\nI've tried this in several different ways and its always the same.\n\nChanging the value of a property in the scope of a single Target execution works\nfine with ant-contrib's Variable, but once the Target has completed, it ** does\nnot remember ** the last value it had.  If I call that Target again and attempt\nto access either an ant-contrib Variable or a Property which only has scope\nwithin that Target (i.e. it has no <property> task outside of the Target to\nwhich it is assigned a value), it is empty.  There is no memory of its last value.\n\nWhy is this useful?  In our case, because we want to be able to have the user\nre-use a given value several times in a row, rather then potentially mis-typing\nan ip address and having files get deployed to the wrong place.  The user gives\na value once (or, in our case, picks a value from a list), and then can re-use\nit until he needs to give a different value.  In the interim, *** between Target\ncalls*, and remembers the last thing the user gave as input.\n\nI hope this is clearer?\n\n", "bug_id": 32041, "is_private": false, "id": 66379, "time": "2004-11-03T20:52:36Z", "creator": "benjamin@yangtemko.com", "creation_time": "2004-11-03T20:52:36Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "creator": "alexeys@inventigo.com", "is_private": false, "text": "Please avoid using <antcall>&Co tasks. Please use <macrodef> to define \n<remote_deploy> task and specify different parameters to it. ", "id": 66380, "time": "2004-11-03T21:32:26Z", "bug_id": 32041, "creation_time": "2004-11-03T21:32:26Z", "attachment_id": null}, {"count": 8, "text": "To elaborate on Alexey's response, the reason your <var> is \"scoped\" is due to \nthe fact that you are using <antcall>.  If you use <macrodef> (which is a \nreally great task) you may really be glad you did.", "bug_id": 32041, "is_private": false, "id": 66384, "time": "2004-11-03T21:59:21Z", "creator": "mbenson@apache.org", "creation_time": "2004-11-03T21:59:21Z", "tags": [], "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 32041, "text": "It looks like when using <macrodef> I lose the ability to inherit \"depends\"\nTargets, since <macrodef> is only defining Tasks, not Targets?  I want my\nproject's Target to have its own list of dependancies in it which are checked\nbefore my project's Target is run, and then to have the <rdeploy> Target I'm\nexecuting via <antcall> have ITS own set of dependancies, which are project\nindependant, checked before it runs.  \n\nI suppose I could simply add the dependancy Targets, in the proper order, to the\nlist in <sequential> to happen before my actual desired action takes place to\nsimulate it, but that's mixing my modes - I would have to convert every\ndependancy to a <macrodef>'d Task in this case?\n\nOut of curiosity, why not use <antcall>?  Is it being phased out?\n", "id": 66385, "time": "2004-11-03T22:04:17Z", "creator": "benjamin@yangtemko.com", "creation_time": "2004-11-03T22:04:17Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "text": "<ant>, <subant> and <antcall> are to be used when you do NOT want to keep the \nresults of the target invocations.  This is because they clone the Project \ninstance instead of acting upon the current Project.  If you need an <antcall> \nthat will return properties your simplest option is to look at some of the \nalternatives ant-contrib has to offer such as <antfetch> and <antcallback>.", "id": 66386, "time": "2004-11-03T22:09:20Z", "bug_id": 32041, "creation_time": "2004-11-03T22:09:20Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 32041, "text": "I also now remember why I had to use <antcall> - if I want to call the Target\n(or even the Task, <macrodef>'d or otherwise defined) multiple times, and still\nget user input, I have to use <antcall>, otherwise, once the property is set,\nit's set, and that's the end of it, no more user input, as the \"addproperty\"\nportion of the Task sort of kills the fun.  I'm tinkering with using various\ncombinations of antcontrib's <var> and the <macrodef> Task to do what I need,\nbut I'm not optimistic yet... I hope I'm wrong!", "count": 11, "id": 66389, "time": "2004-11-03T22:40:07Z", "creator": "benjamin@yangtemko.com", "creation_time": "2004-11-03T22:40:07Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 32041, "is_private": false, "text": "You can use <var unset=\"true\" /> while you're using ant-contrib stuff... \nanyway...", "id": 66390, "time": "2004-11-03T22:50:00Z", "creator": "mbenson@apache.org", "creation_time": "2004-11-03T22:50:00Z", "attachment_id": null}]
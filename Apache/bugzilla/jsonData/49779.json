[{"count": 0, "tags": [], "text": "Created attachment 25911\nclient wire/context log, client code, webapp code\n\nAn unexpected HTTP 501 occurs if using HttpComponents with successive POST requests against a simple Tomcat 7 servlet (Form-based POST Authentication is enabled). After a sucessfull authentication, the client requests the same protected resource a few times in a row, but the second request always returns a \"501 Method not implemented\" status. All other requests succeed.\n\nThe following communication takes place:\n1. Client requests a protected resource; Tomcat returns the login page (HTTP200)\n2. Client provides the user credentials and calls the login resource; Tomcat returns a redirect (HTTP302)\n3. Client sets the location from the redirect for the next request(identical to URI from #1) and requests it; Tomcat returns the page (HTTP200)\n4. Client requests the same resource again; Tomcat returns a HTTP501 - Method not implemented\n5. Client requests the same resource again; Tomcat returns the page (HTTP200)\n6. Client requests the same resource again; Tomcat returns the page (HTTP200)\n7. Client requests the same resource again; Tomcat returns the page (HTTP200)\n\nThe access log message regarding the 501 says:\n'\"testName=testValuePOST /test/secure/ HTTP/1.1\" 501 1278', which may indicate that the entity data and the HTTP-method name somehow got mixed up!? Strangely the HTTP501 does not appear in case of a JSP for the requested resource, only if facing a form-based POST authentication Servlet. The servlet does only implement post and get(which calls the doPost) and returns just a string. The client code should be fine since I already posted this issue on the HTTPComponents mailing list and the data sent over the wire seems to be right. \n\nI attached the source/bin of the testclient and webapp and also the wire/context log of the client.\n\nHow can I provide further helpfull information?", "attachment_id": 25911, "id": 139233, "creator": "hanswaehne@gmail.com", "time": "2010-08-19T05:47:51Z", "bug_id": 49779, "creation_time": "2010-08-19T05:47:51Z", "is_private": false}, {"count": 1, "tags": [], "creator": "hanswaehne@gmail.com", "attachment_id": null, "id": 139234, "time": "2010-08-19T05:53:00Z", "bug_id": 49779, "creation_time": "2010-08-19T05:53:00Z", "is_private": false, "text": "also tested against Tomcat v6.0.29 with the same result and against Tomcat v5.5 (I think) which returns the correct return code HTTP 200, but threw internal exceptions."}, {"count": 2, "tags": [], "text": "Thanks for the test case. As always, a simple ready to run test case makes diagnosis a lot easier.\n\nThe root cause is a difference between what the HTTP specs say and what user agents actually implemented with respect to handling 302 responses to POST requests. RFC2616 tried to deal with this by adding the 303 response. Your test case responds to the 302 with a POST (arguably in breach of the HTTP spec but it does depend how you read it) which Tomcat isn't expecting so due to request pipe-lining the POST data gets handled as part of the next request.\n\nTomcat's FORM authentication currently uses a 302 response for the redirect stage. A 303 would make the expected client behaviour clearer but that would only work for HTTP 1.1 clients. HTTP 1.0 clients would still be broken.\n\nI therefore took the approach for Tomcat 7 of swallowing any request body sent in response to the redirect since Tomcat will restore the original request (the one made prior to the login form being received) including any request body provided at that time.\n\nI am leaning towards not back-porting this change to Tomcat 5/6 since the implementation is consistent with the user agent behaviour.", "attachment_id": null, "id": 139350, "creator": "markt@apache.org", "time": "2010-08-22T18:56:27Z", "bug_id": 49779, "creation_time": "2010-08-22T18:56:27Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "eduardosaltelli@gmail.com", "text": "One side-effect of consuming the Request's body is that consumers of the restored request are forced into using request.getInputStream() i.e. you cannot attempt to obtain a reader via request.getReader().", "count": 3, "id": 148048, "time": "2011-07-20T21:25:01Z", "bug_id": 49779, "creation_time": "2011-07-20T21:25:01Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 49779, "is_private": false, "text": "(In reply to comment #3)\n> One side-effect of consuming the Request's body is that consumers of the\n> restored request are forced into using request.getInputStream() i.e. you cannot\n> attempt to obtain a reader via request.getReader().\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=51940#c9\n\nShould be fixed in 7.0.23 with r1186383 , but please check it.\n\nComments in FIXED bugs are usually lost. It is always better to REOPEN it if there are problems and the fix was done recently, or file a NEW bug if time has passed. As usual you'd better provide a scenario / sample webapp to reproduce it.", "id": 150798, "time": "2011-10-20T12:13:52Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-20T12:13:52Z", "attachment_id": null}]
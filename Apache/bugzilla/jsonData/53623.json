[{"count": 0, "tags": [], "creator": "rstoyanchev@yahoo.com", "attachment_id": null, "id": 161012, "time": "2012-07-30T18:51:54Z", "bug_id": 53623, "creation_time": "2012-07-30T18:51:54Z", "is_private": false, "text": "In a scenario that involves a forward, a call to startAsync, and then dispatch(path), the properties of the request after the dispatch do not match the path and query params used to send the dispatch.\n\nA project demonstrating the issue:\nhttps://github.com/rstoyanchev/dispatch-test\n\nBuild and deploy the sources in the 'tomcat-issue-repro' branch. From the home page of the deployed application, select the \"Dispatch via AsyncContext\" scenario. \n\nThe scenario involves a couple of forwards from ServletA to Servlet B and then ServletC, which in turn starts a thread and dispatches to Servlet D that forwards to a JSP. See WebAppInitializer.setupDispatchScenario(ServletContext) for details on the setup.\n\nThe log output shows the content of the request as each Servlet is entered. It all looks as expected until after the dispatch to ServletD where the requestUri, servletPath, and pathInfo are for ServletC.\n\n---\n\nThe second scenario on the home page, \"Dispatch via AsyncContext and wrap request\", wraps the request and that yields slightly different (but also incorrect) results. The requestUri/servletPath/pathInfo and also the parameterMap, in the application thread and after dispatch, both match the state of the request in ServletA.\n\n---\n\nFWIW there are also a couple of similar scenarios that use forwarding instead of dispatching. The \"Forward via RequestDispatcher\" scenario appears to work all the way through while the \"Forward via RequestDispatcher and wrap request\" almost works except the state of the request in the async thread only matches that of ServletA."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 161278, "time": "2012-08-11T22:20:46Z", "bug_id": 53623, "creation_time": "2012-08-11T22:20:46Z", "text": "Thanks for the excellent test case. Very easy to work with.\n\nI have the bug in the first scenario fixed. I'll look at the second scenario next. It looks like the bug in the second and fourth scenario are related. I'll commit the fixes once all the scenarios are working."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 161397, "time": "2012-08-14T20:43:39Z", "bug_id": 53623, "creation_time": "2012-08-14T20:43:39Z", "text": "*** Bug 53632 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "bug_id": 53623, "is_private": false, "id": 161398, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2012-08-14T21:09:45Z", "time": "2012-08-14T21:09:45Z", "text": "This has been fixed in trunk and 7.0.x and will be included in 7.0.30 onwards.\n\nThe root cause was that Tomcat used the RequestDispatcher.include() to perform async dispatches with some trickery to differentiate an include and a dispatch. Wrapping the request (which also happens on a forward) was enough to break the mechanism. A new, hopefulyl more robust, approach has been implemented and all the provided tests (including those in the duplicate) now pass."}, {"count": 4, "tags": [], "bug_id": 53623, "text": "Thanks for the quick turnaround!", "id": 161500, "attachment_id": null, "creator": "rstoyanchev@yahoo.com", "creation_time": "2012-08-17T15:29:01Z", "time": "2012-08-17T15:29:01Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 30370, "text": "On a reverse proxy, centuri, we have both disk cache and mem cache activated. \nThe memory cache is activated first and is only supposed to cache elements of \nsize smaller than 10,000 bytes. The disk cache takes care of anything not \ncached by the memory cache.\n\nSomehow, at one point a file of size smaller than 10,000 bytes ends up being \ncached by the disk cache. Don't ask me why (maybe the mem cache was filled up \nand the element ended up on disk?) - it's beyond the point. Eventually, the \nfile in disk cache ends up stale. At that point, when the element (style.css) \nis requested, the disk cache responds that it is stale and a proxy request is \nissued to the backend server. The fresh element ends up being cached in memory \nsince it is smaller than 10 KB, and the stale entry remains in the disk cache...\n\nWhen the caches are queried, it seems like the disk cache is always queried \nfirst.\n\nThe logs below should clearly show what happens. mod_disk_cache does not appear \nto log the element as stale, but I know that the disk cache contains a stale \ncopy of styles.css because I looked it up in the file system. Removing the \nelement from the disk cache also removes the symptoms.\n\nPlease find below the log trace of two requests for the same element style.css \non the reverse proxy centuri:3080. The backend server is backend:7010. The two \nrequests are separated by some CRs.\n\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(66): proxy: HTTP: \ncanonicalising URL //centuri:3080/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] mod_proxy.c(416): Trying to run \nscheme_handler\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(1042): proxy: HTTP: serving URL \nhttp://centuri:3080/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(178): proxy: HTTP connecting \nhttp://centuri:3080/html/styles.css to centuri:3080\n[Mon Jun 07 08:48:57 2004] [debug] proxy_util.c(1160): proxy: HTTP: fam 2 \nsocket created to connect to centuri\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(327): proxy: socket is connected\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(361): proxy: connection \ncomplete to 150.175.10.189:3080 (centuri)\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(344): cache: stale cache - test \nconditional\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(391): cache: nonconditional - no \ncached etag/lastmods - add cache_in and DECLINE\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(66): proxy: HTTP: \ncanonicalising URL //backend:7010/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] mod_proxy.c(416): Trying to run \nscheme_handler\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(1042): proxy: HTTP: serving URL \nhttp://backend:7010/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(178): proxy: HTTP connecting \nhttp://backend:7010/html/styles.css to backend:7010\n[Mon Jun 07 08:48:57 2004] [debug] proxy_util.c(1160): proxy: HTTP: fam 2 \nsocket created to connect to backend\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(327): proxy: socket is connected\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(361): proxy: connection \ncomplete to backend:7010 (backend)\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(877): proxy: start body send\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(532): cache: running CACHE_IN \nfilter\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(790): cache: Caching \nurl: /html/styles.css\n[Mon Jun 07 08:48:57 2004] [info] mem_cache: Cached url: \ncenturi/html/styles.css?\n[Mon Jun 07 08:48:57 2004] [debug] mod_headers.c(521): headers: \nap_headers_output_filter()\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(936): proxy: end body send\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(877): proxy: start body send\n[Mon Jun 07 08:48:57 2004] [debug] mod_headers.c(521): headers: \nap_headers_output_filter()\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(936): proxy: end body send\n\n\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(66): proxy: HTTP: \ncanonicalising URL //centuri:3080/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] mod_proxy.c(416): Trying to run \nscheme_handler\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(1042): proxy: HTTP: serving URL \nhttp://centuri:3080/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(178): proxy: HTTP connecting \nhttp://centuri:3080/html/styles.css to centuri:3080\n[Mon Jun 07 08:48:57 2004] [debug] proxy_util.c(1160): proxy: HTTP: fam 2 \nsocket created to connect to centuri\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(327): proxy: socket is connected\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(361): proxy: connection \ncomplete to 150.175.10.189:3080 (centuri)\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(344): cache: stale cache - test \nconditional\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(391): cache: nonconditional - no \ncached etag/lastmods - add cache_in and DECLINE\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(66): proxy: HTTP: \ncanonicalising URL //backend:7010/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] mod_proxy.c(416): Trying to run \nscheme_handler\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(1042): proxy: HTTP: serving URL \nhttp://backend:7010/html/styles.css\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(178): proxy: HTTP connecting \nhttp://backend:7010/html/styles.css to backend:7010\n[Mon Jun 07 08:48:57 2004] [debug] proxy_util.c(1160): proxy: HTTP: fam 2 \nsocket created to connect to backend\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(327): proxy: socket is connected\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(361): proxy: connection \ncomplete to backend:7010 (backend)\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(877): proxy: start body send\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(532): cache: running CACHE_IN \nfilter\n[Mon Jun 07 08:48:57 2004] [debug] mod_cache.c(790): cache: Caching \nurl: /html/styles.css\n[Mon Jun 07 08:48:57 2004] [info] mem_cache: Cached url: \ncenturi/html/styles.css?\n[Mon Jun 07 08:48:57 2004] [debug] mod_headers.c(521): headers: \nap_headers_output_filter()\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(936): proxy: end body send\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(877): proxy: start body send\n[Mon Jun 07 08:48:57 2004] [debug] mod_headers.c(521): headers: \nap_headers_output_filter()\n[Mon Jun 07 08:48:57 2004] [debug] proxy_http.c(936): proxy: end body send\n\nAnd the cache configuration:\n\n            MCacheMaxObjectSize 10000\n            MCacheSize          70000\n            CacheEnable         mem /\n\n            CacheRoot           /apache/cache\n            CacheSize           150000\n            CacheEnable         disk /\n\nSo, during the first request for style.css, the disk cache is stale. A new copy \nof the file is retrieved from the backend and stored in memory cache. Then we \nissue a second request, and it turns out the cached copy is still stale...\n\nThis behaviour was observed on Sun Solaris 8, but from what I saw in the code, \nthere is no reason to think it would behave differently on other platforms.", "id": 61245, "time": "2004-07-28T15:22:48Z", "creator": "asmorgrav@yahoo.no", "creation_time": "2004-07-28T15:22:48Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 30370, "attachment_id": null, "text": "Can you please try the mod_disk_cache that is part of 2.0.52 or CVS HEAD?\n\nThere have been many fixes for it recently.", "id": 65272, "time": "2004-10-18T06:09:35Z", "creator": "chip@force-elite.com", "creation_time": "2004-10-18T06:09:35Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 30370, "is_private": false, "text": "Though not sure if it is the same cause, I'm having exactly the same issue and \nI think I have tracked down the bug. I've reviewed the code in latest snapshot \nand believe this bug still exists both in 2.0 and 2.2 (I have verified it with \n2.0 tree). Also, this could also be a bug in mod_mem_cache.c.\n\nThe cause of this bug is that cached entry never gets removed from cache \nrepository maintained by mod_*_cache. There's a issue in \ncache_storage.c:cache_select_url method that incorrectly(?) handles cache-\n>stale_handle. Here's the code:\n\n  fresh = ap_cache_check_freshness(h, r);\n  if (!fresh) {\n    if (info && info->etag) {\n       ...\n       cache->stale_handle = h;\n    }\n    else if (info && info->lastmods) {\n      ...\n      cache->stale_handle = h;\n    }\n    return DECLINED;\n  }\n  ...\n  cache->handle = h;\n\nAs you can see, even when cache has expired, there's a case when cache-\n>stale_handle does not get set. Because of this, following part of the code in \nmod_cache.c:cache_save_filter is never executed:\n\n  if (cache->stale_handle) {\n    if (r->status == HTTP_NOT_MODIFIED) {\n      ...\n    }\n    else {\n      /* Oh, well.  Toss it. */\n      cache->provider->remove_entity(cache->stale_handle);\n      /* Treat the request as if it wasn't conditional. */\n      cache->stale_handle = NULL;\n    }\n  }\n\nSo when cache->stale_handle is not set, above remove_entity is never called, \nmeaning (expired) cache remains in cache repository.\n\nNow, because obsolete cache remains, following code in \nmod_cache.c:cache_save_filter fails with mod_mem_cache:\n\n  /* no cache handle, create a new entity */\n  if (!cache->handle) {\n    rv = cache_create_entity(r, url, size);\n    ...\n  }\n\n  if (rv != OK) {\n    /* Caching layer declined the opportunity to cache the response */\n    ...\n\nLooking into mod_mem_cache.c:create_entity, there's a following code:\n\n  tmp_obj = (cache_object_t *) cache_find(sconf->cache_cache, key);\n  ...\n  if (tmp_obj) {\n    /* This thread collided with another thread loading the same object\n     * into the cache at the same time. Defer to the other thread which\n     * is further along.\n     */\n    cleanup_cache_object(obj);\n    return DECLINED;\n  }\n\nSo mod_mem_cache.c:create_entity (incorrectly) returns a \"thread conflict\" \nerror when obsolete cache remains in cache repository. And due to this return \ncode, mod_cache.c:cache_save_filter skips caching.\n\nTo fix (or workaround) this issue, cache_storage.c:cache_select_url can be \nfixed as follows:\n\n  fresh = ap_cache_check_freshness(h, r);\n  if (!fresh) {\n    cache->stale_headers = apr_table_copy(r->pool, r->headers_in);\n    cache->stale_handle = h;\n\n    /* Make response into a conditional */\n    /* FIXME: What if the request is already conditional? */\n    if (info && info->etag) {\n      /* if we have a cached etag */\n      apr_table_set(r->headers_in, \"If-None-Match\", info->etag);\n    }\n    else if (info && info->lastmods) {\n      /* if we have a cached Last-Modified header */\n      apr_table_set(r->headers_in, \"If-Modified-Since\", info->lastmods);\n    }\n    return DECLINED;\n  }\n\nSimilar fix can be done with Apache 2.2 as well.\n\nI'm now looking into caching behavior of mod_disk_cache.c, as unlike \nmod_mem_cache.c, it seems it does not check for thread-level conflict.\nAfter all review is done, I'll send in a patch.\n", "id": 89756, "time": "2006-06-05T02:11:46Z", "creator": "tyamadajp@list.rakugaki.org", "creation_time": "2006-06-05T02:11:46Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "tyamadajp@list.rakugaki.org", "attachment_id": null, "text": "> Though not sure if it is the same cause, I'm having exactly the same issue ...\n\nAfter reading first poster's message again, I guess my issue isn't exactly the \nsame issue. My issue is that mod_cache never refreshes cached entry once \ninitial cache expired. So access_log goes on like below:\n\n  \"GET /real/hello.php HTTP/1.0\" 200 <-- query to backend\n  \"GET /hello.php HTTP/1.0\" 200      <-- caches and returns cached response\n  \"GET /hello.php HTTP/1.0\" 200      <-- cached response\n  \"GET /hello.php HTTP/1.0\" 200      <-- cached response\n  \"GET /hello.php HTTP/1.0\" 200      <-- cached response\n  ...                                <-- time passes and expires\n  \"GET /real/hello.php HTTP/1.0\" 200 <-- query to backend\n  \"GET /hello.php HTTP/1.0\" 200      <-- don't cache and pass-thru response\n  \"GET /real/hello.php HTTP/1.0\" 200 <-- query to backend\n  \"GET /hello.php HTTP/1.0\" 200      <-- don't cache and pass-thru response\n  \"GET /real/hello.php HTTP/1.0\" 200 <-- query to backend\n  \"GET /hello.php HTTP/1.0\" 200      <-- don't cache and pass-thru response\n  ...\n\nI'm doing a reverse proxied configuration, and here's an excerpt from \nhttpd.conf:\n\n  <VirtualHost *:8080>\n   CacheEnable mem /\n   CacheIgnoreHeaders Set-Cookie\n   MCacheSize 65535\n   MCacheMaxObjectCount 8192\n   MCacheMaxObjectSize 65535\n\n   ProxyPass        / http://127.0.0.1/real/\n   ProxyPassReverse / http://127.0.0.1/real/\n   ProxyPreserveHost On\n   ProxyTimeout 5\n  </VirtualHost>\n\nAnd the content of hello.fphp is:\n\n  <?php\n  header(\"Expires: \" . date(DATE_RFC822, time() + 10));\n  print_r($_SERVER);\n  ?>\n\nAs you can see, this should expire in 10 seconds after cache is\nmade, and it does work as expected. But it never gets cached\nafter its first expiration, probably due to apache issue I posted above.\n", "id": 89757, "time": "2006-06-05T02:27:38Z", "bug_id": 30370, "creation_time": "2006-06-05T02:27:38Z", "is_private": false}, {"count": 4, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "Thanks for the report. Please use httpd 2.2.x for caching since it contains many\nfixes and improvements since the days of the experimental cache module of 2.0.x.\nNevertheless I think that the problem you describe is also present in 2.2.x.\nCould you please give the attached patch a try? It is against trunk, but it\nshould also work against 2.2.x.", "id": 89766, "time": "2006-06-05T11:25:11Z", "bug_id": 30370, "creation_time": "2006-06-05T11:25:11Z", "is_private": false}, {"count": 5, "text": "Created attachment 18401\nPatch against trunk", "bug_id": 30370, "attachment_id": 18401, "id": 89767, "time": "2006-06-05T11:25:53Z", "creator": "rpluem@apache.org", "creation_time": "2006-06-05T11:25:53Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 30370, "text": "Thanks for the patch!\n\nYour patch worked perfectly though I had to make following\nchange to adapt it to 2.0:\n\n- irv = cache->provider->remove_url(h, r->pool);\n+ irv = cache->provider->remove_url(url);\n\nYes, I know 2.2 is now the recommended version (especially\nwhen using caching feature), but for now, I need to go with\n2.0 due to support issue.\n", "id": 89783, "time": "2006-06-05T15:27:11Z", "creator": "tyamadajp@list.rakugaki.org", "creation_time": "2006-06-05T15:27:11Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 30370, "attachment_id": null, "text": "Committed to trunk as r481886 (http://svn.apache.org/viewvc?view=rev&rev=481886).", "id": 96485, "time": "2006-12-03T12:52:39Z", "creator": "rpluem@apache.org", "creation_time": "2006-12-03T12:52:39Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 30370, "attachment_id": null, "text": "Proposed for backport as r571936 (http://svn.apache.org/viewvc?rev=571936&view=rev).", "id": 107604, "time": "2007-09-02T03:00:45Z", "creator": "rpluem@apache.org", "creation_time": "2007-09-02T03:00:45Z", "is_private": false}, {"count": 9, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "is_private": false, "id": 107701, "time": "2007-09-04T07:40:51Z", "bug_id": 30370, "creation_time": "2007-09-04T07:40:51Z", "text": "Backported to 2.2.x as r572626 (http://svn.apache.org/viewvc?rev=572626&view=rev)."}]
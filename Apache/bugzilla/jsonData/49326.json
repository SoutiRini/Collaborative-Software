[{"count": 0, "tags": [], "creator": "mbm@ptc.com", "text": "Revision 922179 of ResourceUtils.java, to resolve https://issues.apache.org/bugzilla/show_bug.cgi?id=48894, is causing copies of large files to fail when max heap is set to a \u201chigh\u201d value.  I got the error below with \u2013Xmx800M.  I lowered it to 750 and it worked.  The file being copied is 840M.  A file of 670M failed with \u2013Xmx900M, but succeeded with 800.\n\nIt runs for 2 seconds and fails as soon as this task is called.  Java VisualVM shows the process uses less than 20M.  It\u2019s using Java 1.6 on 32-bit Windows XP.\n\n   <copy file=\"my.zip\u201d tofile=\"my.01.zip\" />\n\nBUILD FAILED\nFailed to copy my.zip to my.01.zip due to Map failed\n        at org.apache.tools.ant.taskdefs.Copy.doFileOperations(Copy.java:853)\n        at org.apache.tools.ant.taskdefs.Copy.execute(Copy.java:523)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n        at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:390)\n        at org.apache.tools.ant.Target.performTasks(Target.java:411)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1397)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1366)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1249)\n        at org.apache.tools.ant.Main.runBuild(Main.java:801)\n        at org.apache.tools.ant.Main.startAnt(Main.java:218)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\nCaused by: java.io.IOException: Map failed\n        at sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:761)\n        at sun.nio.ch.FileChannelImpl.transferToTrustedChannel(FileChannelImpl.java:450)\n        at sun.nio.ch.FileChannelImpl.transferTo(FileChannelImpl.java:523)\n        at org.apache.tools.ant.util.ResourceUtils.copyResource(ResourceUtils.java:475)\n        at org.apache.tools.ant.util.FileUtils.copyFile(FileUtils.java:519)\n        at org.apache.tools.ant.util.FileUtils.copyFile(FileUtils.java:481)\n        at org.apache.tools.ant.util.FileUtils.copyFile(FileUtils.java:310)\n        at org.apache.tools.ant.taskdefs.Copy.doFileOperations(Copy.java:841)\n        ... 17 more\nCaused by: java.lang.OutOfMemoryError: Map failed\n        at sun.nio.ch.FileChannelImpl.map0(Native Method)\n        at sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:758)\n        ... 24 more", "id": 137017, "time": "2010-05-21T08:42:47Z", "bug_id": 49326, "creation_time": "2010-05-21T08:42:47Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 49326, "attachment_id": null, "text": "Seems we are now hitting a bug in sun's version of the jre.\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6417205\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5092131\n\ncould you please indicate what exact version of java you are using?", "id": 137033, "time": "2010-05-22T15:50:15Z", "creator": "jkf@apache.org", "creation_time": "2010-05-22T15:50:15Z", "is_private": false}, {"text": "I think that we should be conservative here, and do something\nlike:\n\n srcChannel.transferTo(position,\n   Math.min(FileUtils.BUF_SIZE, count - position),\n   destChannel);\n\nPeter", "tags": [], "creator": "peterreilly@apache.org", "is_private": false, "count": 2, "id": 137034, "time": "2010-05-22T15:57:26Z", "bug_id": 49326, "creation_time": "2010-05-22T15:57:26Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "jkf@apache.org", "is_private": false, "id": 137035, "time": "2010-05-22T16:02:19Z", "bug_id": 49326, "creation_time": "2010-05-22T16:02:19Z", "tags": [], "text": "Well when reading the bug reports, it seems this would not be enough.\n\nCurrently I wrote down this:\nwith MAX_IO_CHUNCK_SIZE = 10MiB\n\n                long count = srcChannel.size();\n                while (position < count) {\n                    long chunck = Math.min(MAX_IO_CHUNCK_SIZE, count - position);\n                    position +=\n                        srcChannel.transferTo(position, chunck,\n                                              destChannel);\n                    System.gc();\n                    System.runFinalization();\n                }"}, {"count": 4, "tags": [], "bug_id": 49326, "text": "{{{shudder}}}\nI do not think that we need to do the gc stuff.\nThe code worked (using BUF_SIZE) in ant 1.8 - except for gcj.\nwhich had a problem with the last block.\n\nThe problem with using the full file size is that\nwe are basically asking the OS to map in memory that corresponds\nto the file size and that\ncan be very taxing and one cannot expect Windows to\ndo that.\n\n\nIf we have to use gc, then we may as well stop using\nNIO, and go back using Classic IO.\n\nPeter", "id": 137036, "time": "2010-05-22T16:12:56Z", "creator": "peterreilly@apache.org", "creation_time": "2010-05-22T16:12:56Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "jkf@apache.org", "text": "Not entirely, we are asking the standard java libraries to copy at most count characters from one channel to the other. The amount of memory mapped memory in that operation is entirely up to the implementation.\n\nIf we must conclude that the implementation of nio in most jvm's is not according the specs provided, maybe we should revert. The gc kludge is just the one provided by Sun engineering in both http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5092131 and http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6417205", "id": 137037, "time": "2010-05-22T16:38:16Z", "bug_id": 49326, "creation_time": "2010-05-22T16:38:16Z", "is_private": false, "attachment_id": null}, {"text": "(In reply to comment #3)\n> Currently I wrote down this:\n> with MAX_IO_CHUNCK_SIZE = 10MiB\n> \n>                 long count = srcChannel.size();\n>                 while (position < count) {\n>                     long chunck = Math.min(MAX_IO_CHUNCK_SIZE, count -\n> position);\n>                     position +=\n>                         srcChannel.transferTo(position, chunck,\n>                                               destChannel);\n>                     System.gc();\n>                     System.runFinalization();\n>                 }\n\nWhy not use the recommended workaround from Bug# 6417205, something like:\n\n    // MAX_IO_CHUNK_SIZE = 10MiB\n    long count = srcChannel.size();\n    while (position < count) {\n        long chunk = Math.min(MAX_IO_CHUNK_SIZE, count - position);\n        try {\n            long readBytes = srcChannel.transferTo(position, \n                    chunk, destChannel);\n        } catch (java.io.IOException e) {\n            System.gc();\n            System.runFinalization();\n            long readBytes = srcChannel.transferTo(position, \n                    chunk, destChannel);\n        }\n        position += readBytes;\n    }\n\nThat way, the garbage collection only happens when it is needed, and will never effect a JVM that has this bug fixed.", "tags": [], "bug_id": 49326, "is_private": false, "count": 6, "id": 137038, "time": "2010-05-22T17:28:44Z", "creator": "bruce@callenish.com", "creation_time": "2010-05-22T17:28:44Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "bruce@callenish.com", "text": "Sorry, I should have had the long declared outside the try. But you get the idea.", "id": 137039, "time": "2010-05-22T17:31:31Z", "bug_id": 49326, "creation_time": "2010-05-22T17:31:31Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 49326, "text": "Hmm giving this another thought.\nIf the leakage problem is solved in the JVM, still the memory-mapped size allocated together with the VM size could go over the limit, and this problem may still be present in the standard SUN libraries.\nI have performed some tests with java 1.6.0_20, and it seems that if the transfer size requested, combined with the JVM size remains below a certain limit, no problems occur.\n\nIn order to allow more efficient transfer, while avoiding to hit the limit I propose 16 MB chunk sizes instead of 8192 byte chunck sizes. The optimal chunk size varies with machines, and seems to be dependent on the amount of data the IO controller / disk cache can process at once.\n\nThis after testing the effect of different chunk sizes on my machine. Too small a size apparently causes too many operations to allow efficient copying a \nTime to copy a single file of 1.8 gig from one drive to the other with a limiting size of:\n64 MiB -> 1:08\n32 MiB -> 1:08\n16 MiB -> 1:18\n8 Mib -> 1:12\n4 Mib -> 1:55\n1 MiB -> 3:31\n8 KiB -> 3:31\n\nCommitting a version limiting the maximal request size to 16 MiB, trying to strike balance between the needed memory space and limiting the number of operations needed.\n\nFix applied in\nhttp://svn.apache.org/viewvc?rev=947339&view=rev", "id": 137040, "time": "2010-05-22T18:03:13Z", "creator": "jkf@apache.org", "creation_time": "2010-05-22T18:03:13Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 137140, "time": "2010-05-26T08:45:20Z", "bug_id": 49326, "creation_time": "2010-05-26T08:45:20Z", "tags": [], "text": "*** Bug 49341 has been marked as a duplicate of this bug. ***"}, {"count": 10, "tags": [], "creator": "bodewig@apache.org", "text": "*** Bug 49341 has been marked as a duplicate of this bug. ***", "id": 144520, "time": "2011-02-24T05:00:53Z", "bug_id": 49326, "creation_time": "2011-02-24T05:00:53Z", "is_private": false, "attachment_id": null}, {"count": 11, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 144608, "time": "2011-02-28T06:04:55Z", "bug_id": 49326, "creation_time": "2011-02-28T06:04:55Z", "tags": [], "text": "*** Bug 49341 has been marked as a duplicate of this bug. ***"}, {"count": 12, "tags": [], "bug_id": 49326, "attachment_id": null, "text": "We are still able to reproduce this issue in our app deployed on JBoss server (5.1.0). We are using ANT 1.8.2 version which from what i understand contains this fix. \n\nInterestingly as mentioned in one of the comments, we are getting this error only on 32 bit m/c with Xmx setting as 1024M. We then lowered it to 800M and this error did not occur. \n\nFrom our analysis, its seems that whatever be the block size (16M in the patch applied), there is always a chance that this error might occur as there might be stray cases where the native map0 call in the FileChannel class might fail.\n\nHence, the code should fallback on using the read/write methods on FileChannel or use the classic IO to accomplish this copy instead of throwing an IOException. \n\nWe would like to go ahead, make changes and submit the patch but wanted to know if there are any other suggestions that we can try out.\n\n-\nKrishnan", "id": 161554, "time": "2012-08-21T06:32:59Z", "creator": "krishnan.ganapathy@gmail.com", "creation_time": "2012-08-21T06:32:59Z", "is_private": false}]
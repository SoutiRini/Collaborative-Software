[{"count": 0, "tags": [], "bug_id": 59288, "attachment_id": null, "id": 190064, "time": "2016-04-08T03:45:04Z", "creator": "anita314159@gmail.com", "creation_time": "2016-04-08T03:45:04Z", "is_private": false, "text": "Problem statement: HTTP sucks for file uploads.\nYou know it. I know it. The problems?\n\n1. No resuming\n2. POST multipart/form-data bloats the size of the file due to encoding\n3. Slow connections typically time out on large files\n4. Any server resets or any other network \"burps\" on the path from client to server effectively kills the upload\n5. People have had moderate success by tuning their webserver and JSP/Servlet to accept large POSTs, and in general, it works - but not for everyone and it suffers from everything previously noted.\n\nhttp://tus.io/\n\ntus is a new open protocol for resumable uploads built on HTTP. It offers simple, cheap and reusable stacks for clients and servers to solve the problem of unreliable file uploads once and for all. \n\nCurrently, there are only two implementations of server side --- Go and Node.js. I wish the popular server --- Tomcat which is also my favorite can also implement this new file transfer protocol in the new release version, too.\n\n---\nAnita"}, {"count": 1, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 190111, "time": "2016-04-10T18:43:35Z", "bug_id": 59288, "creation_time": "2016-04-10T18:43:35Z", "is_private": false, "text": "(In reply to Anita from comment #0)\n> Problem statement: HTTP sucks for file uploads.\n> You know it. I know it.\n\n??\n\n> The problems?\n> \n> 1. No resuming\n\nThis isn't a protocol problem; it's a tool problem. HTTP POST theoretically supports the \"Range\" header.\n\nThere is a discussion on SO about this: http://stackoverflow.com/questions/1830130/resume-uploads-using-http\n\n> 2. POST multipart/form-data bloats the size of the file due to encoding\n\nVery little bloat. It's not like it uses base64 encoding or anything like that.\n\n> 3. Slow connections typically time out on large files\n\nNothing can fix this. Resumability is the only real cure, and you've listed that one already.\n\n> 4. Any server resets or any other network \"burps\" on the path from client to\n> server effectively kills the upload\n\nResumability.\n\n> 5. People have had moderate success by tuning their webserver and\n> JSP/Servlet to accept large POSTs, and in general, it works - but not for\n> everyone and it suffers from everything previously noted.\n\nResumability.\n\n> http://tus.io/\n> \n> tus is a new open protocol for resumable uploads built on HTTP. It offers\n> simple, cheap and reusable stacks for clients and servers to solve the\n> problem of unreliable file uploads once and for all. \n\nOkay, so it trades Content-Length and Range for Upload-Offset and Upload-Length. I suppose this might be better when using old proxies that like to veto odd-looking \"standard\" requests, but will happily pass-through unrecognized headers.\n\n> Currently, there are only two implementations of server side --- Go and\n> Node.js. I wish the popular server --- Tomcat which is also my favorite can\n> also implement this new file transfer protocol in the new release version,\n> too.\n\nSo... what client is going to bother to implement this? Is the expectation that mostly this will be used by custom mobile clients instead of your run-of-the-mill web browser?"}, {"count": 2, "tags": [], "bug_id": 59288, "attachment_id": null, "id": 190115, "time": "2016-04-10T21:09:05Z", "creator": "markt@apache.org", "creation_time": "2016-04-10T21:09:05Z", "is_private": false, "text": "This looks like something you'd want to implement in a Commons FileUpload type library that you could re-use across any Servlet container rather than something to implement directly in Tomcat."}, {"count": 3, "tags": [], "bug_id": 59288, "text": "(In reply to Christopher Schultz from comment #1)\n\nThanks for Christopher Schultz's reply comments.\n \n> So... what client is going to bother to implement this? Is the expectation\n> that mostly this will be used by custom mobile clients instead of your\n> run-of-the-mill web browser?\n\nIt already has several implementations (samples and components) on client side of Javascript, Java, Android and iOS.\nhttp://tus.io/implementations.html\n\nThe implementation of client side for web browser may use the Javascript version.", "id": 190122, "time": "2016-04-11T05:35:53Z", "creator": "anita314159@gmail.com", "creation_time": "2016-04-11T05:35:53Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 59288, "text": "(In reply to Mark Thomas from comment #2)\n> This looks like something you'd want to implement in a Commons FileUpload\n> type library that you could re-use across any Servlet container rather than\n> something to implement directly in Tomcat.\nThanks for Mark Thomas comments. It's a good idea for implementing it on the library level instead of web server level if there is no other consideration issues exist.\n\nI use Mark Thomas's suggestion to create an issue on Commons FileUpload library\nhttps://issues.apache.org/jira/browse/FILEUPLOAD-271", "id": 190123, "attachment_id": null, "creator": "anita314159@gmail.com", "creation_time": "2016-04-11T05:43:21Z", "time": "2016-04-11T05:43:21Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 59288, "text": "This will not be supported (directly) in Tomcat.", "id": 191184, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2016-05-23T15:02:59Z", "time": "2016-05-23T15:02:59Z", "is_private": false}]
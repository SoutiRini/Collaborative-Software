[{"count": 0, "tags": [], "text": "Can filesets and patternsets be enhanced as follows?\n\n1. Lazy evaluation of fileset's dir attribute. Don't check for directory \nexistence until the fileset is referenced within a task. This allows tasks to \ncreate directories, then use filesets that refer to those directories without \nant errors on loading the buildfile.\n\n2. Evaluation of a fileset's content eaqh time the fileset is referenced: so \n<include name=\"*.jar\"/> could evaluate to a different set of files each time \n(and hit the filesystem).\n\n3. Allow nested patternsets, including references to other patternsets. The \nresult should be a the union of every filename - no filename would appear twice\n(and the list would only be evaluated when the referring fileset was evaluated).\n\n4. Allow nested filesets, each with their own directory - the root fileset \nelement would either have a dir attribute that would act as the root directory \nfor enclosed filesets if their dir element was relative, of if the root fileset \nhad no dir element, each nested fileset would have to have a dir element:\n\n<fileset>\n   <fileset dir=\"bin\"> <!-- dir is relative to current directory -->\n   ...\n   </fileset>\n   <fileset>          <!-- error! no dir, and root fileset has no dir -->\n   ...\n   </fileset>\n   <fileset dir=\"/usr/bin\"> <!-- dir is absolute: /usr/bin -->\n   ...\n   </fileset>\n</fileset>\n\n... but...\n\n<fileset dir=\"/usr\">\n   <fileset dir=\"bin\"> <!-- dir is relative to /usr, i.e. /usr/bin -->\n   ...\n   </fileset>          \n\n   <fileset>          <!-- Ok. dir is \"/usr\" -->\n   ...\n   </fileset>   \n   <fileset dir=\"/usr/bin\"> <!-- dir is absolute: /usr/bin -->\n   ...\n   </fileset>\n</fileset>", "attachment_id": null, "id": 8193, "creator": "simon.spruzen@rbos.com", "time": "2001-11-22T05:38:02Z", "bug_id": 5035, "creation_time": "2001-11-22T05:38:02Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 5035, "attachment_id": null, "id": 12366, "time": "2002-03-26T22:51:40Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-03-26T22:51:40Z", "is_private": false, "text": "Nested patternsets implemented!"}, {"attachment_id": null, "tags": [], "creator": "arnold@moonhill.org", "text": "Logically a set can be composed of other sets.  I have two filesets that I want to compose into one.  The \nmeaning is quite clear.  Why can't I do it?\n\n(Yes, I could (I think) take my two file sets, create independent patternsets for each of them, and then create a \nnew fileset with the two patternsets.  I think.  Can I put more than one patternset in a fileset?  Ah, no, but I \ncould create a nested patternset (thanks to Erik) and then create a fileset from that.  Which doubles the \nnumber of XML artifacts I have and adds to the complexity, not to mention that I must name each patternset \nand fileset, making my namespace bigger.  But it would work, I think.)", "count": 2, "id": 69287, "time": "2005-01-06T20:15:45Z", "bug_id": 5035, "creation_time": "2005-01-06T20:15:45Z", "is_private": false}, {"count": 3, "attachment_id": 13916, "bug_id": 5035, "text": "Created attachment 13916\nsample build file\n\nshows that Ant CVS HEAD satisfies the first two requirements of this request", "id": 69301, "time": "2005-01-06T23:31:45Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-06T23:31:45Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 5035, "text": "As for #4, I would say this could be basically satisfied by allowing absolute\npaths in filesets.  I would now call this a duplicate of bug 18128.", "id": 69302, "time": "2005-01-06T23:40:32Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-06T23:40:32Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "ddevienne@lgc.com", "text": "Matt, I don't think one can implement #4. A <fileset> is not just a collection \nof files, it's a collection of files that share of single common directory, and \nthe relative path from that common dir to the file is significant and is used \nto locate dependent files in other directory usually (in <javac> or <copy> for \nthe 2 main examples).\n\nAllowing nested filesets would require changing all tasks where this relative \nfilename matters, and those are not just in Ant. This would be an incompatible \nchange, and thus cannot be done.\n\nThe only way to implement the equivalent would be to define a new datatype that \nnew tasks could deal with correctly.\n\nAt least that's my view of this, unless I've misunderstood something. --DD", "id": 69303, "time": "2005-01-06T23:47:14Z", "bug_id": 5035, "creation_time": "2005-01-06T23:47:14Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "arnold@moonhill.org", "text": "You could require that all the nested filesets share the same top-level dir.  That would be helpful.  Or you could \ninvent the root for the top-level as the lowest common dir of the various contained filesets, or so I would think.", "id": 69304, "time": "2005-01-06T23:59:19Z", "bug_id": 5035, "creation_time": "2005-01-06T23:59:19Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "ddevienne@lgc.com", "attachment_id": null, "id": 69306, "time": "2005-01-07T00:12:29Z", "bug_id": 5035, "creation_time": "2005-01-07T00:12:29Z", "is_private": false, "text": "No, you can't for these tasks that care about the relative paths of files \nlisted by the fileset, like Javac. A fileset can have only a single dir. If you \nnest other filesets with different dirs, you must choose one of these dirs to \nbe the unique 'main' fileset dir, and doing so you change the relative filename \nof any files from nested fileset with a different dir. With <javac>, that would \nresult in *inventing* new package names for Java sources. <javac> assumes the \nrelative filename matches the package name to do timestamp checking, and \nchanging the relative filename of a .java file is equivalent for <javac> to re-\npackaging the .java file, and <javac> will not look in the correct place for \nthe generated .class file, that SUN's Javac outputs in a directory \ncorresponding to the real package name.\n\nNo, really, it's difficult to explain, as my confusing explanation above \ndemonstrates (!), but you can't have nested filesets because many tasks need \nthe correct relative filename, and we can't change all tasks out there that do."}, {"count": 8, "tags": [], "bug_id": 5035, "text": "It looks like Javac does not care about directory names (or ANT makes it not to care). I have had situations when JBuilder refused to compile some classes because they were in a wrong directory, but ANT build worked fine.", "id": 69307, "time": "2005-01-07T00:18:25Z", "creator": "alexeys@inventigo.com", "creation_time": "2005-01-07T00:18:25Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "DD, isn't it true that the expected use of fileset (henceforth AFS for\nAbstractFileSet) is to get a DirectoryScanner (DS) on it to scan for files, find\nincluded files/dirs and resolve those against the AFS's basedir, either using\nFileUtils or new File(File, String)?  My recommendation on absolute paths (if we\ncan make them work) would have to be that AFS.dir == null, in which case as long\nas the string filenames returned for the AFS in question contain absolute paths\nwe should be BC according to java.io.File's javadoc.  Two things about the\nimplementation in DS:  1, a lot of stuff may have to be scanned, and 2, some\nextra pattern interpretation code would have to implemented for stuff like\nWindows UNCs.  All in all, it sounds fairly painful but not impossible.  Again,\nrealize that I am pushing away from nested filesets on the grounds that allowing\nabsolute paths in a single fileset should ultimately achieve the spirit of the\nrequest in a less confusing (IMO) manner than would be brought about by nested\nfilesets (of all things).  ;)", "attachment_id": null, "id": 69308, "creator": "mbenson@apache.org", "time": "2005-01-07T00:20:52Z", "bug_id": 5035, "creation_time": "2005-01-07T00:20:52Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 5035, "text": "I'm not sure I'm following you ;-)\n\nIf you allow creating such filesets, people will use them in <javac> and <copy> \nand custom tasks and get NPEs from those tasks, no?\n\nThe fact is that in Ant a FileSet is not just a set of files, although many \ntasks treat it as such, but it's more a set of relative filenames, from a given \ndirectory.\n\nBy allowing to have a null directory, you're fundamentally changing the fileset \ncontract. Sure you could change Ant's classes like Javac to refuse such special \nnull dir filesets, but what about tasks outside Ant?\n\nThis is why I keep on saying this can't be done in a BC friendly way. But I've \nbeen wrong many times before ;-) --DD", "id": 69311, "time": "2005-01-07T00:31:44Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-01-07T00:31:44Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 5035, "text": "I'm not seeing the problem.  Let's take something concrete: two filesets, one rooted in /a/b/c (id is \"C\"), and \nanother rooted in /a/b/x (id is \"X\").  Now let's create a new fileset \"U\" that contains \"C\" and \"X\".\n\nWhen a task (say, replace) asks \"U\" for its dir, it will get \"/a/b\".  When it asks for files from that set, it will \nget \"c/foo.java\" and \"x/bar.java\" or whatever.  This can be done on the fly -- when the method that returns \nfiles from the fileset returns them, it can know what to prepend to the files returned by its nested sets, \ndepending one whether it's reading from \"C\" (where it prepends \"c/\") or X (\"x/\").\n\nTo me this seems to be make each fileset behave as expected, and fulfill the contract.  Maybe I'm missing \nsomething.", "count": 11, "id": 69312, "time": "2005-01-07T00:36:35Z", "creator": "arnold@moonhill.org", "creation_time": "2005-01-07T00:36:35Z", "is_private": false}, {"count": 12, "tags": [], "text": "Yes and no Alexey. Yes, it will build them fine, but no, because it will always \nbuild them, even if the .class files are up-to-date, because Ant won't be \nlooking for the .class file in the correct location. So you end up doing a full \ncompile everytime. --DD", "is_private": false, "id": 69313, "creation_time": "2005-01-07T00:38:05Z", "time": "2005-01-07T00:38:05Z", "creator": "ddevienne@lgc.com", "bug_id": 5035, "attachment_id": null}, {"count": 13, "attachment_id": null, "bug_id": 5035, "text": "Ken, you may not see the pb since <replace> does not make use of the relative \nfilenames, just the files. Try to reflect on an example with <copy>, and were \nshould the files be copied to... --DD", "id": 69314, "time": "2005-01-07T00:39:53Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-01-07T00:39:53Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 5035, "text": "But <copy> should see only \"foo.java\" and \"bar.java\", otherwise it will create\nextra subdirectories during copy. A virtual file system could solve this problem,\nbut it was met with resistance.", "id": 69315, "time": "2005-01-07T00:40:30Z", "creator": "alexeys@inventigo.com", "creation_time": "2005-01-07T00:40:30Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 5035, "text": "IIRC the resistance against which a virtual filesystem was met was much like\nwhat we are discussing here--a symptom of the shackles in which we often find\nourselves with regard to BC and how to make things work intelligently in Ant...", "id": 69316, "time": "2005-01-07T01:01:46Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-07T01:01:46Z", "is_private": false, "attachment_id": null}, {"count": 16, "text": "As for the \"argument\" over the implications of what we are talking about for\njavac in particular, I see none, to be honest.  Javac doesn't actually deal in\nfilesets.  It composes an implicit fileset but you couldn't actually pass it a\nfileset.  You could pass javac a dirset embedded in a src element, and the task\nwould scan each of the directories returned from listing the Path represented by\nthe src element.    Path appears to handle file|dirsets as I stated before, so\nagain, there should be no issue from a null directory.  There may be other cases\nwhere a null directory will cause a problem, but from what I can tell so far\njavac isn't one of them.", "bug_id": 5035, "attachment_id": null, "id": 69317, "time": "2005-01-07T01:18:39Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-07T01:18:39Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "bug_id": 5035, "attachment_id": null, "id": 69318, "time": "2005-01-07T01:21:44Z", "creator": "arnold@moonhill.org", "creation_time": "2005-01-07T01:21:44Z", "is_private": false, "text": "(In reply to comment #13)\n> Ken, you may not see the pb since <replace> does not make use of the relative \n> filenames, just the files. Try to reflect on an example with <copy>, and were \n> should the files be copied to... --DD\n\nI just plucked <replace> randomly.  The point is that what I described seems to provide a sane, describable \nsemantic for a composite fileset.  I can't see where it fails to meet the expectations for a fileset.  If I was using \nit for javac, I would still get c/foo.java and x/bar.java and that should work, right?  And for <copy> it would \ncopy things to c/foo.java and x/bar.java, right?\n\nI'm not trying to sound overconfident here, but it all seems to hang together to me."}, {"count": 18, "tags": [], "bug_id": 5035, "attachment_id": null, "id": 69373, "time": "2005-01-07T18:22:24Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-01-07T18:22:24Z", "is_private": false, "text": "I guess I'm failing to explain the issue here, and to get my point across... \nSince I don't want to debate this forever, I'll just tell you guys to go ahead \nand implement what you say is possible, and we'll see if that passes the Ant \ntest suite and Gump test. And if it does by some miracle, I'll specifically \nwrite a task that relies on the current style fileset, which I think would fail \nwith the proposed modifications. --DD"}, {"count": 19, "attachment_id": null, "bug_id": 5035, "text": "You can always break it ;-). The whole point of a composite fileset that it should \nnot have getDir() method. It should only have \"Iterator<FSInfo> list()\" method.\nSome task that require a single fileset root directory, they should use another class derived from that file set. Those tasks will not accept composite filesets.\nSo introducing a base class (interface) for filesets and porting some of the tasks\nto use it will solve the problem and preserve backward compatibility.", "id": 69376, "time": "2005-01-07T18:30:26Z", "creator": "alexeys@inventigo.com", "creation_time": "2005-01-07T18:30:26Z", "tags": [], "is_private": false}, {"count": 20, "tags": [], "creator": "peterreilly@apache.org", "text": "I agree with DD.\nthe FileSet.getDir() is the api used when a fileset is\nused in java code (see any task that uses fileset).\n\nOne can have a differnet file container (my fav is a path),\nbut each and every task that uses it has to be modified\nto do so.\n", "id": 69377, "time": "2005-01-07T18:39:39Z", "bug_id": 5035, "creation_time": "2005-01-07T18:39:39Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "text": "Yes, but not necessary at one time - tasks can be ported incrementally.\nMany people ask for this feature. Maybe it is worth a shot.", "attachment_id": null, "id": 69378, "creator": "alexeys@inventigo.com", "time": "2005-01-07T18:42:44Z", "bug_id": 5035, "creation_time": "2005-01-07T18:42:44Z", "is_private": false}, {"count": 22, "tags": [], "creator": "arnold@moonhill.org", "attachment_id": null, "id": 69379, "time": "2005-01-07T18:47:46Z", "bug_id": 5035, "creation_time": "2005-01-07T18:47:46Z", "is_private": false, "text": "Hold on.  DD is cleary right, I think -- there are a lot of tasks that are currently working just fine with a top-\nlevel dir in the fileset.  Anything you do to remove that will break those tasks.\n\nWhich is why I suggest that you can provide a dir, derived from the top-level dirs of all the containing sub-\nfilesets.  Just take the longest common root.\n\nIf that's too complex, at the very *least* you can let me compose filesets that all have the same dir.  In my \ncurrent case that would work.  But I still think you can match current expectations without such a restriction.  \nIn the worse case, the root dir will be \"/\".  Although typically I suspect it will never be outside the project root.\n\nI know I'm not an insider, but I'd appreciate an indication as to why my suggestion would fail.  Thanks"}, {"text": "My argument is that outside the context of providing filesets composed of\nabsolute paths, Ant contains all the support needed for the idea of a composite\nfileset, just not in such a confusing way.  I never want to see one fileset\nelement inside another, ever.  If you are guaranteed a single parent directory,\npost the problem to the list of what you want a \"composite fileset\" for, and\nthere will be a solution...\n\nAs for the dir of a fileset, I do not find a guarantee in the API that\nAFS.getDir() will not return null.", "tags": [], "bug_id": 5035, "attachment_id": null, "count": 23, "id": 69380, "time": "2005-01-07T18:52:45Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-07T18:52:45Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 5035, "attachment_id": null, "id": 69381, "time": "2005-01-07T18:53:02Z", "creator": "alexeys@inventigo.com", "creation_time": "2005-01-07T18:53:02Z", "is_private": false, "text": "proposal:\n\n  class GenericFileset {\n    List<FSInfo> list();\n  }\n\n  // real file system fileset\n  class FileSet extends GenericFileset {\n    File getDir();\n    // ....\n    static GenericFileset applyMapper(Mapper m);\n    static GenericFileset join(GenericFileset fs1, GenericFileset fs2);\n  }\n\n  class ModernTask {\n    void addFileset(GenericFileset fs);\n  }\n\n  class OldFileset {\n    void addFileset(Fileset fs);\n  }\n\n... and backward compatibility is preserved allowing incremental port of tasks\nthat can support new feature (<copy>, <sync>, <replace>, even <javac>)."}, {"count": 25, "tags": [], "creator": "alexeys@inventigo.com", "attachment_id": null, "id": 69382, "time": "2005-01-07T18:54:34Z", "bug_id": 5035, "creation_time": "2005-01-07T18:54:34Z", "is_private": false, "text": "It supposed to be:\n  class GenericFileset {\n    List<FSInfo> list();\n    static GenericFileset applyMapper(Mapper m);\n    static GenericFileset join(GenericFileset fs1, GenericFileset fs2);\n  }\n\n  // real file system fileset\n  class FileSet extends GenericFileset {\n    File getDir();\n    // ....\n  }\n\n"}, {"count": 26, "tags": [], "text": "Plus filelist will be a special kind of generic fileset, so all those tasks will support filelists out of the box.", "attachment_id": null, "id": 69383, "creator": "alexeys@inventigo.com", "time": "2005-01-07T19:22:22Z", "bug_id": 5035, "creation_time": "2005-01-07T19:22:22Z", "is_private": false}, {"count": 27, "text": "What you propose makes sense to me Alexey. We can't change inheritance of \nexisting classes though, so it would have to be interface-based, but the \nspirit's the same. Now all that's needed are volunteers ;-) --DD", "bug_id": 5035, "attachment_id": null, "id": 69389, "time": "2005-01-07T20:22:46Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-01-07T20:22:46Z", "tags": [], "is_private": false}, {"count": 28, "tags": [], "creator": "alexeys@inventigo.com", "attachment_id": null, "id": 69391, "time": "2005-01-07T20:56:30Z", "bug_id": 5035, "creation_time": "2005-01-07T20:56:30Z", "is_private": false, "text": "I am not committer, but I volunteer to do some work. I am running a custom ANT anyway."}, {"count": 29, "tags": [], "bug_id": 5035, "text": "I would have to know more about what the Generic FS would do.  This is going\nback to all the virtual filesystem discussions we had had in the past which led\nto all sorts of conflicts regarding FileUtils, etc.", "id": 69398, "time": "2005-01-07T22:31:13Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-07T22:31:13Z", "is_private": false, "attachment_id": null}, {"count": 30, "tags": [], "text": "Matt, I don't think what Alexey proposes has anything to do with a Virtual FS. \nWe're still talking only about files here, and just creating a new datatype \nthat only means a collection of arbitrary files, which FileSet is of course, \nbut without the common dir requirement (and the associated relative path). \nFileList would also fit the bill of this new interface too. --DD", "attachment_id": null, "id": 69400, "creator": "ddevienne@lgc.com", "time": "2005-01-07T22:52:18Z", "bug_id": 5035, "creation_time": "2005-01-07T22:52:18Z", "is_private": false}, {"count": 31, "tags": [], "bug_id": 5035, "text": "Matt, I could use a reason for rejecting nested filesets.  Ever since I learned about sets I learned that you can \ncreate sets from the union and intersection of other sets.  So when you call something a \"set\" you create such \nan expectation.  And the semantics I've described seem to meet all the semantics of the *existing* fileset.  No \nneed to create a new type.  So I also don't see why we have to get back to the Virtual FS debates.  My suggested \nsemantics are nothing new, just a new way to express the union that's direct and simple.", "id": 69401, "time": "2005-01-07T22:53:24Z", "creator": "arnold@moonhill.org", "creation_time": "2005-01-07T22:53:24Z", "is_private": false, "attachment_id": null}, {"count": 32, "tags": [], "bug_id": 5035, "attachment_id": null, "id": 69404, "time": "2005-01-07T23:11:11Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-07T23:11:11Z", "is_private": false, "text": "The argument about the semantics of sets is persuasive, but I don't think it\nmakes much sense without having filesets that can be composed of arbitrary\nmembers.  To allow nested filesets, but only if their base directories match,\nseems like half a solution and inelegant. -$0.02"}, {"count": 33, "tags": [], "bug_id": 5035, "attachment_id": null, "id": 69405, "time": "2005-01-07T23:16:35Z", "creator": "arnold@moonhill.org", "creation_time": "2005-01-07T23:16:35Z", "is_private": false, "text": "Yes, I agree with you Matt.  That's why I only suggested that as a fallback -- better than nothing.  But if you \ncan put arbitrary things into a fileset, you still can get a common root for that fileset, derived from the \nmember sets.  So I don't think that's necessary.  [And thanks for answering me, Matt]"}, {"count": 34, "attachment_id": null, "bug_id": 5035, "text": "(In reply to comment #33)\n>  you still can get a common root for that fileset, derived from the \n> member sets. \n\nHow you would get the common root for files from different file systems on\ndos/netware-like systems? (e.g. what would be the common root for C:\\ and D:\\?)\n", "id": 69424, "time": "2005-01-08T10:52:08Z", "creator": "jkf@apache.org", "creation_time": "2005-01-08T10:52:08Z", "tags": [], "is_private": false}, {"count": 35, "attachment_id": null, "bug_id": 5035, "text": "Martijn is correct, on dos there is no common root.\n(This has caused a lot of grief.)\n ", "id": 69474, "time": "2005-01-10T10:17:42Z", "creator": "peterreilly@apache.org", "creation_time": "2005-01-10T10:17:42Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "creator": "mbenson@apache.org", "text": "Which leads back to my assertion that nested filesets don't do that much good\nwhile filesets with no basedir are more \"correct\" and, IMO, don't represent much\nof a BC risk because:\n1) ordinarily a user will use \"new File(afs.getDir(Project), s) where s is a\nfilename relative to the File returned from getDir() and the File parameter can\nbe null\n2) it is not documented in afs.setDir() or afs.getDir() that the directory will\nnot be null.", "count": 36, "id": 69481, "time": "2005-01-10T16:24:24Z", "bug_id": 5035, "creation_time": "2005-01-10T16:24:24Z", "is_private": false}, {"count": 37, "tags": [], "text": "*** Bug 17008 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 72599, "creator": "bodewig@apache.org", "time": "2005-03-17T15:39:54Z", "bug_id": 5035, "creation_time": "2005-03-17T15:39:54Z", "is_private": false}, {"count": 38, "tags": [], "creator": "mbenson@apache.org", "text": "The spirit of all outstanding aspects of this bug should be satisfied by the\nResourceCollection concept which has just been added to CVS HEAD for Ant 1.7 . \nInitially only a few tasks--concat, pathconvert, length and\nresourcecount--support these directly; however tasks that accept paths should\nautomagically work with filesystem-based resource collections wrapped in paths.\n Feel welcome to submit patches to add ResourceCollection support to your\nfavorite task!\n\nThanks,\nMatt", "id": 75242, "time": "2005-05-23T22:11:39Z", "bug_id": 5035, "creation_time": "2005-05-23T22:11:39Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 2530, "text": "Suppose you have a derived class of org.apache.xml.serialize.HTMLSerializer \nthat overrides the processingInstruction method of BaseMarkupSerializer to do \nsome magic with processing instructions when writing an HTML file.\n\nWhen upgrading to Xerces 1.4.1 (from 1.3, supposedly) that method in the \nderived class is no longer called.\n\nReason: There is a new method processingInstructionIO, and \nBaseMarkupSerializer.serializeNode no longer calls processingInstruction, but \nthe new method.\n\nFix: Implement processingInstructionIO in the derived class \n\nAs an API change that breaks existing code, this should be noted in the class \ndocumentation.", "id": 3538, "time": "2001-07-10T02:16:01Z", "creator": "Jochen.Schwarze@cit.de", "creation_time": "2001-07-10T02:16:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "elena@apache.org", "text": "Looks like it was broken in 1.4.0 and nobody noticed.\nYou mentioned that you could provide fix in your application by implementing \nprocessingInstructionIO. Or do you prefer it being fixed in Xerces? As you know \nit is an internal API, so in general you can't really depend on it..", "id": 3545, "attachment_id": null, "bug_id": 2530, "creation_time": "2001-07-10T06:42:34Z", "time": "2001-07-10T06:42:34Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 2530, "attachment_id": null, "id": 3554, "time": "2001-07-10T10:32:30Z", "creator": "Jochen.Schwarze@cit.de", "creation_time": "2001-07-10T10:32:30Z", "is_private": false, "text": "Hm, is there a more \"offical\" way to modify an HTMLSerializer? At least, both \nthe class and the method in question are public.\n\nI'm not sure how you could fix this in the Xerces code, because I see no good \nway to know whether a derived class implements one method or the other, so \nthere's no way to know  which one to call in a class that uses only a generic \nBaseMarkupSerializer. You could make the old method (processingInstruction) \nprivate or remove it entirely -- that way, there will at least be a compile-\ntime error for applications that use the old interface. (That's probably better \nthan breaking existing code silently.)\n"}, {"count": 3, "tags": [], "bug_id": 2530, "text": ".. better still, make the old method \"public final\". This will continue to \nallow calls to that method in existing applications but will give a compile-\ntime error to applications that override the old method in a derived class \n(wondering why it's no longer called ;-)\n\n", "id": 3556, "time": "2001-07-10T10:37:05Z", "creator": "Jochen.Schwarze@cit.de", "creation_time": "2001-07-10T10:37:05Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 2530, "text": "Sounds good to me. I will mark processingInstruction as well as startDTD final.\nLet me know if any other code was broken.\nThanks!", "id": 3641, "time": "2001-07-11T08:40:19Z", "creator": "elena@apache.org", "creation_time": "2001-07-11T08:40:19Z", "is_private": false, "attachment_id": null}]
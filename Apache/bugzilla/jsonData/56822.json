[{"count": 0, "tags": [], "text": "Hello!\n\nUnfortunately has to rewrite Countifs function from scratch due to utterly incorrect algorithm logic in existing implementation.\nIn contrast, sumifs function looks good.\nSo I adapted sumifs implementation to provide correct countifs implementation.\n\nThe source code goes below.\n\n----------------\n\n/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n==================================================================== */\n\npackage org.apache.poi.ss.formula.functions;\n\nimport org.apache.poi.ss.formula.OperationEvaluationContext;\nimport org.apache.poi.ss.formula.eval.AreaEval;\nimport org.apache.poi.ss.formula.eval.ErrorEval;\nimport org.apache.poi.ss.formula.eval.EvaluationException;\nimport org.apache.poi.ss.formula.eval.NumberEval;\nimport org.apache.poi.ss.formula.eval.RefEval;\nimport org.apache.poi.ss.formula.eval.ValueEval;\nimport org.apache.poi.ss.formula.functions.CountUtils.I_MatchPredicate;\n\n/**\n * Implementation for the function COUNTIFS\n * <p>\n * Syntax: COUNTIFS(criteria_range1, criteria1, [criteria_range2, criteria2])\n * </p>\n */\n\npublic class Countifs implements FreeRefFunction {\n\tpublic static final FreeRefFunction instance = new Countifs();\n\n\t@Override\n\tpublic ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n\t\tif (args.length == 0 || args.length % 2 != 0) {\n\t\t\treturn ErrorEval.VALUE_INVALID;\n\t\t}\n\t\ttry {\n\t\t\t// collect pairs of ranges and criteria\n\t\t\tint len = args.length / 2;\n\t\t\tAreaEval[] ae = new AreaEval[len];\n\t\t\tI_MatchPredicate[] mp = new I_MatchPredicate[len];\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tae[i] = convertRangeArg(args[2 * i]);\n\t\t\t\tmp[i] = Countif.createCriteriaPredicate(args[2 * i + 1],\n\t\t\t\t\t\tec.getRowIndex(), ec.getColumnIndex());\n\t\t\t}\n\n\t\t\tvalidateCriteriaRanges(ae);\n\n\t\t\tint result = countMatchingCells(ae, mp);\n\t\t\treturn new NumberEval(result);\n\t\t} catch (EvaluationException e) {\n\t\t\treturn e.getErrorEval();\n\t\t}\n\t}\n\n\t/**\n\t * Verify that each <code>criteriaRanges</code> argument contains the same\n\t * number of rows and columns as the <code>sumRange</code> argument\n\t *\n\t * @throws EvaluationException\n\t *             if\n\t */\n\tprivate static void validateCriteriaRanges(AreaEval[] criteriaRanges) throws EvaluationException {\n\t\tfor (AreaEval r : criteriaRanges) {\n\t\t\tif (r.getHeight() != criteriaRanges[0].getHeight()\n\t\t\t\t\t|| r.getWidth() != criteriaRanges[0].getWidth()) {\n\t\t\t\tthrow EvaluationException.invalidValue();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static AreaEval convertRangeArg(ValueEval eval)\n\t\t\tthrows EvaluationException {\n\t\tif (eval instanceof AreaEval) {\n\t\t\treturn (AreaEval) eval;\n\t\t}\n\t\tif (eval instanceof RefEval) {\n\t\t\treturn ((RefEval) eval).offset(0, 0, 0, 0);\n\t\t}\n\t\tthrow new EvaluationException(ErrorEval.VALUE_INVALID);\n\t}\n\n\t/**\n\t *\n\t * @param ranges\n\t *            criteria ranges, each range must be of the same dimensions as\n\t *            <code>aeSum</code>\n\t * @param predicates\n\t *            array of predicates, a predicate for each value in\n\t *            <code>ranges</code>\n\t * @param aeSum\n\t *            the range to sum\n\t *\n\t * @return the computed value\n\t */\n\tprivate static int countMatchingCells(AreaEval[] ranges,\n\t\t\tI_MatchPredicate[] predicates) {\n\t\tint height = ranges[0].getHeight();\n\t\tint width = ranges[0].getWidth();\n\n\t\tint result = 0;\n\t\tfor (int r = 0; r < height; r++) {\n\t\t\tfor (int c = 0; c < width; c++) {\n\n\t\t\t\tboolean matches = true;\n\t\t\t\tfor (int i = 0; i < ranges.length; i++) {\n\t\t\t\t\tAreaEval aeRange = ranges[i];\n\t\t\t\t\tI_MatchPredicate mp = predicates[i];\n\n\t\t\t\t\tValueEval relativeValue = aeRange.getRelativeValue(r, c);\n\t\t\t\t\tif (!mp.matches(relativeValue)) {\n\t\t\t\t\t\tmatches = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (matches) { // count only if all of the corresponding\n\t\t\t\t\t\t\t\t// criteria specified are true for that cell.\n\t\t\t\t\tresult += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}", "attachment_id": null, "bug_id": 56822, "id": 176962, "time": "2014-08-06T18:32:41Z", "creator": "kirill.frolov77@gmail.com", "creation_time": "2014-08-06T18:32:41Z", "is_private": false}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 176966, "time": "2014-08-07T07:33:38Z", "bug_id": 56822, "creation_time": "2014-08-07T07:33:38Z", "is_private": false, "text": "Given how much of the logic you've had to copy, is it possible for you to either re-write it so that one class does both functions (eg similar to AggregateFunction), or so they have a common parent class with the core bits in?\n\nAlso, if you could write a small unit test that shows the incorrect logic, that'd be a big help too!"}, {"count": 2, "tags": [], "bug_id": 56822, "attachment_id": null, "text": "This test fails formula produces 3 instead of 2\n\n\t@Test\n\tpublic void test2() {\n\t        HSSFWorkbook workbook = new HSSFWorkbook();\n\t        Sheet sheet = workbook.createSheet(\"test\");\n\t        Row row3 = sheet.createRow(2);\n\t        Row row4 = sheet.createRow(3);\n\t        Row row5 = sheet.createRow(4);\n\t        Row row6 = sheet.createRow(5);\n\t        Row row7 = sheet.createRow(6);\n\t        Row row8 = sheet.createRow(7);\n\t        \n\t        Cell cellA3 = row3.createCell(0, CellType.STRING);\n\t        Cell cellA4 = row4.createCell(0, CellType.STRING);\n\t        Cell cellA5 = row5.createCell(0, CellType.STRING);\n\t        Cell cellA6 = row6.createCell(0, CellType.STRING);\n\t        Cell cellA7 = row7.createCell(0, CellType.STRING);\n\t        Cell cellA8 = row8.createCell(0, CellType.STRING);\n\n\t        Cell cellB3 = row3.createCell(1, CellType.NUMERIC);\n\t        Cell cellB4 = row4.createCell(1, CellType.NUMERIC);\n\t        Cell cellB5 = row5.createCell(1, CellType.NUMERIC);\n\t        Cell cellB6 = row6.createCell(1, CellType.NUMERIC);\n\t        Cell cellB7 = row7.createCell(1, CellType.NUMERIC);\n\t        Cell cellB8 = row8.createCell(1, CellType.NUMERIC);\n\t        \n\t        cellA3.setCellValue(\"a\");\n\t        cellA4.setCellValue(\"a\");\n\t        cellA5.setCellValue(\"a\");\n\t        cellA6.setCellValue(\"b\");\n\t        cellA7.setCellValue(\"b\");\n\t        cellA8.setCellValue(\"b\");\n\t        \n\t        cellB3.setCellValue(1);\n\t        cellB4.setCellValue(1);\n\t        cellB5.setCellValue(2);\n\t        cellB6.setCellValue(2);\n\t        cellB7.setCellValue(1);\n\t        cellB8.setCellValue(2);\n\n\t        Cell cellD3 = row3.createCell(2, CellType.FORMULA);\n\t        cellD3.setCellFormula(\"COUNTIFS(A3:A8,\\\"a\\\",B3:B8,1)\");\n\t        FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();\n\t        CellValue evaluate = evaluator.evaluate(cellD3);\n\t        Assert.assertEquals(2.0d, evaluate.getNumberValue());\n\t}\n\nAbove code of countifs fixes at least this unit test", "id": 195065, "time": "2016-11-17T19:36:10Z", "creator": "blommers80@gmail.com", "creation_time": "2016-11-17T19:36:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 56822, "attachment_id": 34458, "text": "Created attachment 34458\nCountifs test file (same as unit test)", "id": 195066, "time": "2016-11-17T19:37:03Z", "creator": "blommers80@gmail.com", "creation_time": "2016-11-17T19:37:03Z", "is_private": false}, {"count": 4, "tags": [], "creator": "gwoolsey@apache.org", "attachment_id": null, "id": 197008, "time": "2017-02-14T18:38:39Z", "bug_id": 56822, "creation_time": "2017-02-14T18:38:39Z", "is_private": false, "text": "I have a user that needs this, so I'll work on it.  The code here shows what needs to happen, but it should be abstracted as Nick says in his comment, and reused between COUNTIFS() and SUMIFS().\n\nWith the unit test, which I've verified, it shouldn't be hard."}, {"count": 5, "tags": [], "bug_id": 56822, "attachment_id": null, "text": "Fixed with commit r1783037.  Created a base class for COUNTIFS() and SUMIFS() to reuse the common code (almost everything).", "id": 197017, "time": "2017-02-14T22:07:12Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-02-14T22:07:12Z", "is_private": false}, {"count": 6, "tags": [], "creator": "blommers80@gmail.com", "attachment_id": null, "id": 197525, "time": "2017-03-08T08:46:26Z", "bug_id": 56822, "creation_time": "2017-03-08T08:46:26Z", "is_private": false, "text": "(In reply to Greg Woolsey from comment #5)\n> Fixed with commit r1783037.  Created a base class for COUNTIFS() and\n> SUMIFS() to reuse the common code (almost everything).\n\nI am very very happy with this commit :-)"}]
[{"count": 0, "tags": [], "text": "Created attachment 29444\nSVG file showing the incorrect text decoration positioning with different font sizes\n\nWhile testing a custom text editing component for the application I'm working on using Batik, I found that underline, overline and line-through text decorations aren't positioned correctly when different font sizes are used.\n\nI observed this behaviour when using a text tag embedded with tspan tags. \n\nSteps to reproduce:\n1. Do a fresh checkout of the trunk sources (at time of writing: 1378739)\n2. Download this bug report's SVG attachment.\n3. Start the Squiqqle browser from the checked out sources.\n4. Load the attachment in the Squiqqle browser.\n\nActual results:\nAs the attachment shows, both text tags contain two words displayed in a different font size. Both have underline, overline and line-through decorations. For the first word the y-position and thickness of the lines is calculated correctly. However, for the second word (which is in a different font size) the lines are positioned on the same y value and have the same thickness.\n\nExpected results:\nThe 'line' text decorations should have been positioned on different y values, each corresponding to their font size. Dito for the line thickness.", "is_private": false, "id": 162551, "creator": "m.s.ganzeboom@rug.nl", "time": "2012-10-04T11:04:12Z", "bug_id": 53962, "creation_time": "2012-10-04T11:04:12Z", "attachment_id": 29444}, {"attachment_id": null, "tags": [], "creator": "m.s.ganzeboom@rug.nl", "is_private": false, "count": 1, "id": 162558, "time": "2012-10-04T12:16:30Z", "bug_id": 53962, "creation_time": "2012-10-04T12:16:30Z", "text": "I reported this bug and also found the cause and a fix for it.\n\nThe cause lies in StrokingTextPainter.java in the methods paintDecorations(List runs, Graphics2D, int) and getDecorationStrokeOutline(List runs, int). In these methods the bounds of text decorations are calculated for each determined 'text run'. Based on the surrounding code I assume that text runs in this context basically mean groups of consecutive characters that share the same text attributes (i.e. styling).\n\nThat calculation of text decoration bounds is done in a for loop in which the last calculated y position and height are stored for later reference. Having calculated the decoration bounds for the first text run, the y position and height are stored for later and the text decoration is painted with those values. When calculating the decoration for a second text run (or a third, fourth, fifth... for that matter), the y position and height variables storing the values for later are not updated and the values of the first run decoration are used to paint it.\n\nThese same steps are used in both mentioned methods. Questions is why is this so? Why are only the text decoration y position and height of the first run stored for later? There is probably a reason, or isn't there?\n\nMy solution for this bug is to not use the variables storing the y position and height for later, but to use the values straight out of the text run's layout decoration bounds calculation (i.e. straight from the source and calculated a new for every text run).\n\nI've attached a patch which incorporates this solution.\n\nAs I made the patch, I came accross StrokingTextPainter.getDecorationOutline(List, int) which is of similar nature as the before mentioned methods. Maybe the solution needs to be applied there as well, although I haven't run in any problems with that one yet."}, {"count": 2, "tags": [], "text": "Created attachment 29446\nPatch to fix the incorrect text decorations when using different font sizes\n\nThe patch to apply to revision 1378739.", "is_private": false, "id": 162559, "creator": "m.s.ganzeboom@rug.nl", "time": "2012-10-04T12:18:33Z", "bug_id": 53962, "creation_time": "2012-10-04T12:18:33Z", "attachment_id": 29446}]
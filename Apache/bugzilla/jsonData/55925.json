[{"count": 0, "tags": [], "bug_id": 55925, "attachment_id": 31146, "id": 171899, "time": "2013-12-23T14:42:01Z", "creator": "john.elion@verizon.net", "creation_time": "2013-12-23T14:42:01Z", "is_private": false, "text": "Created attachment 31146\nZip file with patch, 5 modified source files to implement junit with parallel test execution threads\n\nAnt's JUnit task should natively support a \"threads\" or \"parallel\" option, which executes unit tests in parallel in a specified number of threads.  The default if not specified should be 1, which is the current behavior.  Given the set of test to be executed, each of the \"n\" threads should continue picking off and executing the 'next' test element until all elements have been executed.  I have made an attempt to implement the feature.\n\nWhile a possible workaround is to specify a parallel block with multiple JUnit entries, this forces the burden of breaking the tests down into groups of roughly equal execution time on the programmer; such blocks may not be convenient and as the tests evolve and the set grows, the groups are likely to become uneven unless carefully maintained.  This burden should not be necessary.  While 'picking off the next test' doesn't guarantee minimal execution (the longest test could be the last one) it will generally make a pretty good improvement. \n\nI have seen one third-party add-on entry into this arena (http://lmax-exchange.github.io/parallel-junit/), which was a very nice effort.  We got it working but the output was not good - output line ran together, sometimes were embedded within other lines.  I hoped a native implementation wouldn't have that.\n\nI have attached a patch as well as the 5 modified files in my implementation attempt, which seems to work well in \"per test\" execution.  I had to add the test name to the results line, since that line didn't necessarily immediately follow the \"Executing <classname>...\".  I don't claim to have understood all of the Ant coding conventions."}, {"count": 1, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "id": 171907, "time": "2013-12-23T17:45:30Z", "bug_id": 55925, "creation_time": "2013-12-23T17:45:30Z", "is_private": false, "text": "This is a very useful contribution, I will test that and see if we can get this in the codebase."}, {"count": 2, "attachment_id": 31163, "creator": "john.elion@verizon.net", "is_private": false, "id": 171948, "time": "2013-12-27T16:05:26Z", "bug_id": 55925, "creation_time": "2013-12-27T16:05:26Z", "tags": [], "text": "Created attachment 31163\nZip file with patch, 5 modified source files to Ant 1.9.2 release\n\nI wish to update the patch.  In my own further testing:\n\n1) I have still been seeing run-on lines in the Ant output; that is, I still am seeing lines that look like this:\n\n[junit] {1:com.test.classname4] Tests run: 2 Failed: 0 Errors: 0 Elapsed time: 0.952s   [junit] {3:com.test.classname9] Tests run: 5 Failed: 0 Errors: 0 Elapsed time: 1.483s\n\nIt appears that the OutputStream class in Java is not thread-safe, and that two unit test threads are occasionally writing Ant output at the same time.  This happens more frequently with shorter tests.  So far, in the cases I have seen, the lines aren't broken except immediately before the line terminator; there is generally a blank line after the run-on line.  This make it harder to process the log afterwards.\n\nSo I have replaced the calls to out.write/out.flush with a synchronized subroutine.  I'm thinking that since each unit test only makes two calls on this subroutine - once at test start and once at test finish, this isn't a severe penalty.\n\n2) I have moved the class name printed in the results line (since the result line for test X may not appear immediately after the line that says \"Starting test X\") to the end of the line.  This makes the resulting 'results line' looks mostly like it did before, which should be easer on post-processing scripts.\n\nThe patch is against the 1.9.2 release source.  Only SummaryJUnitResultFormatter.java has changed from the previous patch."}, {"count": 3, "tags": [], "bug_id": 55925, "attachment_id": null, "text": "Thanks again for reporting this issue and proposing a fix for it.\n\nThe changes that you prepare contain at some places the addition of a new argument threadid to existing protected or public methods. \n\nCan you make a fresh checkout from HEAD out of svn (svn checkout http://svn.apache.org/repos/asf/ant/core/trunk ant-core) and reapply your changes, and rework your solution keeping for each method where the threadid has been added to the argument list a duplicate method with the old signature, which would call the new method passing a 0 in the threadid argument.\n\nOnce this is done please create a new patch file\n- then attach the output of \"svn diff \"\n\nthe command to create a sandbox is :\nsvn checkout http://svn.apache.org/repos/asf/ant/core/trunk ant-core", "id": 173754, "time": "2014-03-12T02:24:59Z", "creator": "antoine@apache.org", "creation_time": "2014-03-12T02:24:59Z", "is_private": false}, {"count": 4, "text": "Will do.  (If there is a target date let me know - I've seen this request but won't get to this right away.)", "creator": "john.elion@verizon.net", "is_private": false, "id": 173759, "time": "2014-03-12T11:00:32Z", "bug_id": 55925, "creation_time": "2014-03-12T11:00:32Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "creator": "john.elion@verizon.net", "attachment_id": 31404, "text": "Created attachment 31404\nPatch from core as of 3/15/2014\n\nUpdated patch includes requested change (restore original subroutine signatures).\n\nI also played with haltOnFailure/haltOnError, which had been completely ignored as the exception simply unwound the thread stack, abandoning a single test thread but leaving the others to continue running tests.  When a test fails and throws a halt exception (BuildException) the other threads will finish running whatever (test or batch) they are running but will not start new tests or batches.  I saw the code in the \"parallel\" task that will immediately abort other threads but was not prepared to try to merge that in.\n\nAlso, I had not realized that some of the options can be overridden by individual tests or batches.  Mixed HaltOnFailure/HaltOnError appears to work fine, but mixing fork on and off options with threads will not produce nice results.", "id": 173928, "time": "2014-03-19T09:45:54Z", "bug_id": 55925, "creation_time": "2014-03-19T09:45:54Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 55925, "is_private": false, "text": "Patch committed, thanks.", "id": 174033, "time": "2014-03-23T16:19:55Z", "creator": "antoine@apache.org", "creation_time": "2014-03-23T16:19:55Z", "attachment_id": null}]
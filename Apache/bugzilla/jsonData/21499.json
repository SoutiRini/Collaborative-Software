[{"count": 0, "tags": [], "bug_id": 21499, "attachment_id": null, "text": "This is related to Rug Report #18965.\n\nWe are using log4j in a J2EE environment, and are having problems with\nthe DailyRollingFileAppender, especialy (but not exclusively) with the \nHTML Layout.\n\nWhen we redeploy an application to the running J2EE server (We are using \nBEA WebLogic.), the application reinitializes and with the first message, \nlog4j attempts the rollOver().\n\nWhen the application didn't have a ServletContextListener, the renameTo() in\nrollOver() would fail.  I presume this is just a BillWare problem, I don't\nthink its a problem on Unix.  (I don't know what Posix says, if anything.)\n\nSo we implemented a ServletContextListener to call LogManager.shutdown(),\nand the errors \"Failed to rename ...\" went away.  And so did rolling for\nour HTML layout appender.\n\nI don't know why our HTML layout was hit the hardest, but the Pattern and\nXML layout appenders often rolled when the HTML wouldn't.  Somehow \nactivateOptions() received different values from file.lastModified() for\nthe different appenders.  (For testing, I hung these three appenders onto\nthe rootLogger.)\n\nI turned on log4j debug logging, but got nothing useful, beyond the \nobservation, that it wasn't even trying to roll the appender, so I sprinkled \na few more LogLogs in there, and this is what I discovered:\n\nWhen log4j initializes for a DailyRollingFileAppender, activateOptions() \nresets:\n  scheduledFilename = fileName+sdf.format(new Date(file.lastModified()));\n\nThe file is modified (closed) when the ServletContextListener.contextDestroyed()\ncalls LogManager.shutdown(), the current time is used to set the \nscheduledFilename (on the restart), and when the scheduled rollOver() occurs, \nit senses that the new file is the same as the previous, and silently returns.\n\nWe have a nightly build that runs 5 minutes after midnight, and after all the\ntests pass, it deploy's the new EAR to the server.  Since no one is in pressing\nbuttons that early in the morning, the redeployment causes the first logging to \noccur within the scheduled roll interval.  The rollOver() detects that the \nscheduledFilename has not changed, and so no roll occurs.\n\nMy current workaround is to log a fatal message to the root logger in the \nServletContextListener.contextDestroyed() method before calling \nLogManager.shutdown(), but that probably won't work for folks that are using \nnon appending loggers.  I'm also concerned with the fact that I may be \nperforming lots of I/O on an application that is trying to shut down.\n\nI believe the LogManager.shutdown() should roll each DailyRollingFileAppender\nbefore it is closed; at least optionally.  I experimented by adding a \nsetNow() method to DailyRollingFileAppender, and calling setNow() and \nrollOver() on any DailyRollingFileAppender found in \nCategory.closeNestedAppenders().  It seemed to work, but there may be other \nimplications. (e.g:  Should an empty file roll?)", "id": 40447, "time": "2003-07-11T12:05:05Z", "creator": "John.Bize@ExceptionalSoftware.com", "creation_time": "2003-07-11T12:05:05Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 21499, "attachment_id": null, "text": "In short, the model used for determining the \"rollability\" of the appender's\nfile during startup assumes that the file was rolled, if necessary, prior to\nshutdown.  It isn't.", "id": 40931, "time": "2003-07-18T11:18:43Z", "creator": "John.Bize@ExceptionalSoftware.com", "creation_time": "2003-07-18T11:18:43Z", "is_private": false}, {"count": 2, "tags": [], "creator": "ceki@apache.org", "text": "\nRollover for period 'n' occurs at the arrival of the first message during any \nsubsequent period (n+1 or n+2, ...). \n\nIf one calls LogManger.shutdown() during period 'n' that is not a reason for \nrollover. \n\n1) Unless I am mistaken, the type of layout being used should have no influence \non rollover. \n\n2) The rollOver algorithm is known to be correct. \n\nThus, I have trouble understanding the following paragraphs:\n\n<quote>\nWhen log4j initializes for a DailyRollingFileAppender, activateOptions() \nresets:\n  scheduledFilename = fileName+sdf.format(new Date(file.lastModified()));\n\nThe file is modified (closed) when the ServletContextListener.contextDestroyed()\ncalls LogManager.shutdown(), the current time is used to set the \nscheduledFilename (on the restart), and when the scheduled rollOver() occurs, \nit senses that the new file is the same as the previous, and silently returns.\n</quote>\n\nIs it possible that the log file is modified between periods n and n+1 without\nbeing logged to?\n\n", "id": 42913, "time": "2003-08-18T13:48:29Z", "bug_id": 21499, "creation_time": "2003-08-18T13:48:29Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 21499, "attachment_id": null, "id": 68289, "time": "2004-12-10T19:59:34Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-10T19:59:34Z", "is_private": false, "text": "log4j 1.3 solves this problem via its new RollingPolicy and related classes.  \nNo further changes will be made in this area for log4j 1.2."}]
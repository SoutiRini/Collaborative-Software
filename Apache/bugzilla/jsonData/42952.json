[{"count": 0, "tags": [], "creator": "nettings@apache.org", "attachment_id": null, "id": 105828, "time": "2007-07-22T11:17:54Z", "bug_id": 42952, "creation_time": "2007-07-22T11:17:54Z", "is_private": false, "text": "the document authorizer grants access to a page if a user holds *any* role. this\nis wrong. the bug surfaced when a \"session\" role was added to allow all users\naccess to login/logout usecases regardless of their other privileges.\n\nthe access controller that is invoked for documents needs to check for an\nexplicit \"visit\" role. the question is whether other roles such as \"admin\",\n\"edit\", \"review\" should imply \"visit\" rights. i think for clarity it is best not\nto have implicit rights but to spell out \"visit role for everybody\" in the\ntop-level policy file."}, {"count": 1, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #0)\n\n> to have implicit rights but to spell out \"visit role for everybody\" in the\n> top-level policy file.\n\nWhat would \"everybody\" mean? You can't grant it to the world, so you'd have to\ngrant it to every single group ...", "id": 105838, "time": "2007-07-23T02:18:39Z", "creator": "andreas@apache.org", "creation_time": "2007-07-23T02:18:39Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #0)\n> the document authorizer grants access to a page if a user holds *any* role. this\n> is wrong. the bug surfaced when a \"session\" role was added to allow all users\n> access to login/logout usecases regardless of their other privileges.\n\nI don't think it is wrong. If I want to allow someone to edit the pages, I don't\nwant to be forced to explicitely allow them to view the pages. IMO all roles\nshould \"inherit\" from the visit role (which is basically the case now).", "id": 105839, "time": "2007-07-23T02:21:09Z", "creator": "andreas@apache.org", "creation_time": "2007-07-23T02:21:09Z", "is_private": false}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> I don't think it is wrong. If I want to allow someone to edit the pages, I don't\n> want to be forced to explicitely allow them to view the pages. IMO all roles\n> should \"inherit\" from the visit role (which is basically the case now).\n\ni don't care too much if users who hold the roles \"admin\", \"edit\", or \"review\"\ninherit visit rights automatically. but then the code should spell that out.\nseriously, roles.length > 0 is not something i'd want to read in\nsecurity-related code. it's conceptually wrong, and it just worked by accident.\nit makes a totally unwarranted assumption, and wrecks the flexibility of the ac\ncode, since it effectively prevents the creation of other meaningful roles.", "attachment_id": null, "bug_id": 42952, "id": 105840, "time": "2007-07-23T03:04:47Z", "creator": "nettings@apache.org", "creation_time": "2007-07-23T03:04:47Z", "is_private": false}, {"count": 4, "tags": [], "creator": "nettings@apache.org", "attachment_id": null, "id": 105841, "time": "2007-07-23T03:06:54Z", "bug_id": 42952, "creation_time": "2007-07-23T03:06:54Z", "is_private": false, "text": "(In reply to comment #1)\n> (In reply to comment #0)\n> \n> > to have implicit rights but to spell out \"visit role for everybody\" in the\n> > top-level policy file.\n> \n> What would \"everybody\" mean? You can't grant it to the world, so you'd have to\n> grant it to every single group ...\n\nno. all users would have to be members of one group \"users\", and this group is\nthen granted the role of \"visit\" to the authoring subtree.\n"}, {"count": 5, "tags": [], "bug_id": 42952, "text": "(In reply to comment #4)\n> (In reply to comment #1)\n> > (In reply to comment #0)\n> > \n> > > to have implicit rights but to spell out \"visit role for everybody\" in the\n> > > top-level policy file.\n> > \n> > What would \"everybody\" mean? You can't grant it to the world, so you'd have to\n> > grant it to every single group ...\n> \n> no. all users would have to be members of one group \"users\", and this group is\n> then granted the role of \"visit\" to the authoring subtree.\n\nOK, I agree. We should change the code so that this intention becomes more obvious.\n", "id": 105842, "time": "2007-07-23T03:39:05Z", "creator": "andreas@apache.org", "creation_time": "2007-07-23T03:39:05Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #0)\n> the document authorizer grants access to a page if a user holds *any* role. this\n> is wrong. the bug surfaced when a \"session\" role was added to allow all users\n> access to login/logout usecases regardless of their other privileges.\n> \n\nWas there an issue with logging in or logging out? I've never had an issue\nlogging in. I thought we took care of the logging out issue in an earlier fix.\n\n", "id": 105844, "time": "2007-07-23T08:01:57Z", "creator": "rfrovarp@apache.org", "creation_time": "2007-07-23T08:01:57Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #4)\n> (In reply to comment #1)\n> > (In reply to comment #0)\n> > \n> > > to have implicit rights but to spell out \"visit role for everybody\" in the\n> > > top-level policy file.\n> > \n> > What would \"everybody\" mean? You can't grant it to the world, so you'd have to\n> > grant it to every single group ...\n> \n> no. all users would have to be members of one group \"users\", and this group is\n> then granted the role of \"visit\" to the authoring subtree.\n> \n\nThis is what I do. When a new user is created it is put into my custom visit\ngroup automatically (I have my own auth module). That group is given visit\npermission on the authoring node from the site tree when I set the publication up.", "id": 105845, "time": "2007-07-23T08:04:16Z", "creator": "rfrovarp@apache.org", "creation_time": "2007-07-23T08:04:16Z", "is_private": false}, {"count": 8, "tags": [], "creator": "nettings@apache.org", "attachment_id": null, "id": 105846, "time": "2007-07-23T08:32:08Z", "bug_id": 42952, "creation_time": "2007-07-23T08:32:08Z", "is_private": false, "text": "(In reply to comment #6)\n\n> Was there an issue with logging in or logging out? I've never had an issue\n> logging in. I thought we took care of the logging out issue in an earlier fix.\n\nac.login bypasses the usecase authenticator entirely (it's matched in the global\nsitemap).\nbut jann remarked that it is awkward that you have to grant rights to ac.logout\nto all roles, lest somebody find themselves unable to log out. but logging out\nshould be orthogonal to \"edit\", \"admin\" and friends.\n\nwe discussed a few approaches around that, dismissed any implicit rules we had\nthought about and finally i created a \"session\" role that gets granted to\n<world/> in the authoring root node (which unveiled the authorizer bug). \n\"session\" can be used to grant access to usecases that everybody needs,\nregardless of other privileges. (although it may be slightly misleading - to be\nmore intuitive, session should be granted to logged-on users only, but that can\nonly happen once we introduce an \"everybody\" group by default.\n\n"}, {"count": 9, "tags": [], "creator": "nettings@apache.org", "attachment_id": null, "id": 106025, "time": "2007-07-29T08:54:11Z", "bug_id": 42952, "creation_time": "2007-07-29T08:54:11Z", "is_private": false, "text": "(In reply to comment #7)\n\n> > no. all users would have to be members of one group \"users\", and this group is\n> > then granted the role of \"visit\" to the authoring subtree.\n> > \n> \n> This is what I do. When a new user is created it is put into my custom visit\n> group automatically (I have my own auth module). That group is given visit\n> permission on the authoring node from the site tree when I set the publication up.\n\nrichard, can you share your code? i'd like to tackle this issue, and iiuc the\nmost user-friendly way is to introduce such a default group right away...\nbut i'd be more relaxed about it if i had your proven code to peek at. maybe we\ncan even use it as is? wdyt?"}, {"count": 10, "tags": [], "bug_id": 42952, "attachment_id": 20561, "text": "Created attachment 20561\nmakes PolicyAuthorizer check for \"visit\" role explicitly\n\nhere's a quick fix. it changes the PolicyAuthorizer to check for the \"visit\"\nrole explicitly, not just any old role. to keep the authoring area operational,\nit grants visit to world. the admin needs to change that in order to restore\nsecurity.\n\nthere's a downside to this patch though: until now, all ac policy was kept in\npubs/PUB/config/ac/, and the java code was totally agnostic to the meaning of a\nrole. now \"visit\" has become something special. this should either be improved\n(though i don't see how) or documented really well...\n\ntwo issues i'm not sure about:\n\n1. is the policy authorizer only used to authorize access to URLs, or may i\nhave introduced unwanted side effects? (anyway, those would be deny by default,\nso we don't open up holes.)\n\n2. is it ok to test against Role.getId()? there's also Role.getName(), but it\nseems to be unused - is it needed for some interface, or can it be removed?\nplus i found that PolicyAuthorizer seems to rely on the Role.toString() method\na lot, which is bad style imho in security-critical code. toString() is\ngetId(), we shold spell that out - wdyt?\n\nbefore it can go into the trunk, the world visit policy must be removed, of\ncourse, and appropriate rights granted. i suggest introducing a users group,\nadding lenya and alice to it and give it visit to authoring, and then add a\ncheckbox to the addUser usecase saying \"add to users group\" which is selected\nby default.\n\nwhich introduces the next \"magic\": the users group is now special as well...\nbut i don't see a way around it - some implicit semantics are unavoidable\nafaics.", "id": 106026, "time": "2007-07-29T10:41:13Z", "creator": "nettings@apache.org", "creation_time": "2007-07-29T10:41:13Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #9)\n> (In reply to comment #7)\n> \n> > > no. all users would have to be members of one group \"users\", and this group is\n> > > then granted the role of \"visit\" to the authoring subtree.\n> > > \n> > \n> > This is what I do. When a new user is created it is put into my custom visit\n> > group automatically (I have my own auth module). That group is given visit\n> > permission on the authoring node from the site tree when I set the\npublication up.\n> \n> richard, can you share your code? i'd like to tackle this issue, and iiuc the\n> most user-friendly way is to introduce such a default group right away...\n> but i'd be more relaxed about it if i had your proven code to peek at. maybe we\n> can even use it as is? wdyt?\n\nUnder doExecute() of AddUser this is what I have:\n\nUser user = new KerberosUser(getUserManager(),ldapId, getLogger());\nContainerUtil.enableLogging(user,getLogger());\nuser.setDescription(description);\n//user.save();\ngetUserManager().add(user);\nGroup group = getGroupManager().getGroup(\"visitor\");\ngroup.add(user);\nuser.save();\nsetExitParameter(USER_ID, ldapId);\n\nThe publication which all of my other publications extend from has the group of\nvisitor which has the visit role on the authoring tree. The problem I ran into\nis that if a user had only edit, admin, or review roles on a subset of the tree,\nthey ran into major permission issues. This does assume that anyone with a login\nis allowed to see all of the authoring content. In my deployments, this is just\nfine.\n\nAnd yes, I know I should be using a constant for my group name. I need to go\nthrough and clean this code up yet.", "id": 106055, "time": "2007-07-30T07:38:56Z", "creator": "rfrovarp@apache.org", "creation_time": "2007-07-30T07:38:56Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #11)\n> This does assume that anyone with a login\n> is allowed to see all of the authoring content. In my deployments, this is just\n> fine.\n\nwell, if it isn't, you could easily remove the visit role for \"visitors\" from\nsome parts and assign it to \"editors\" and \"reviewers\" only...\n\nthanks for sharing this code. i'll try and cook something up.\n", "id": 106056, "time": "2007-07-30T08:27:51Z", "creator": "nettings@apache.org", "creation_time": "2007-07-30T08:27:51Z", "is_private": false}, {"count": 13, "tags": [], "creator": "nettings@apache.org", "attachment_id": 20566, "id": 106066, "time": "2007-07-30T12:16:43Z", "bug_id": 42952, "creation_time": "2007-07-30T12:16:43Z", "is_private": false, "text": "Created attachment 20566\nmakes PolicyAuthorizer check for \"visit\" role explicitly, adds default group to admin.addUser\n\nfollowing richard's approach, this patch adds a \"add to default group\" checkbox\nto the addUser usecase. for some reason, adding the user to the group does not\nyet work - there are some debug messages left in the code, grep for \"####\" in\nthe logs. perhaps someone can help here?\n\nandreas has convinced me that coding special group and role semantics into\nusecases is not such a swell idea. overly generic GUIs with confusing error\nmessages aren't, either...\nthis patch introduces two special cases:\n* the \"visit\" role is used by the PolicyAuthorizer to grant access to pages\n* the \"users\" group is given visit rights and is presented as \"default group\"\nin the addUser usecase.\n\nthis is ugly. but it could be remedied with a new \"pseudo-usecase\": ac.visit.\nit doesn't do anything, but it has roles attached to it via\nusecase-policies.xml, and the policyAuthorizer could maybe delegate the role\nchecking to the usecaseAuthorizer. gets rid of the hardcoded visit semantics.\nthat leaves the default group. it could be made configurable in the gui (thus\nputting the semantics into the publication, where they belong), or we could\nintroduce a new accreditable <anyUser/> that includes all authenticated users.\nprobably easier to maintain than an extra group...\n\nwdyt?"}, {"count": 14, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "any comments on this issue? it's one of the show stoppers, and the current fix\nattempt really needs some review...", "id": 106217, "time": "2007-08-02T14:04:22Z", "creator": "nettings@apache.org", "creation_time": "2007-08-02T14:04:22Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 42952, "text": "(In reply to comment #13)\n\n> this patch introduces two special cases:\n> * the \"visit\" role is used by the PolicyAuthorizer to grant access to pages\n> * the \"users\" group is given visit rights and is presented as \"default group\"\n> in the addUser usecase.\n\nDo these have to be added to each publication manually?\n\n\n> this is ugly. but it could be remedied with a new \"pseudo-usecase\": ac.visit.\n> it doesn't do anything, but it has roles attached to it via\n> usecase-policies.xml, and the policyAuthorizer could maybe delegate the role\n> checking to the usecaseAuthorizer. gets rid of the hardcoded visit semantics.\n> that leaves the default group. it could be made configurable in the gui (thus\n> putting the semantics into the publication, where they belong), or we could\n> introduce a new accreditable <anyUser/> that includes all authenticated users.\n> probably easier to maintain than an extra group...\n\nWell, I have to admit that the ac.visit pseudo-usecase doesn't sound more\nappealing than the current implementation ... I guess I'd even prefer the visit\nrole + default group approach. But maybe it needs a bit more of discussion. Is\nit really necessary to tackle this before 2.0?\n", "id": 106235, "time": "2007-08-03T01:15:34Z", "creator": "andreas@apache.org", "creation_time": "2007-08-03T01:15:34Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 42952, "text": "(In reply to comment #15)\n> (In reply to comment #13)\n> \n> > this patch introduces two special cases:\n> > * the \"visit\" role is used by the PolicyAuthorizer to grant access to pages\n> > * the \"users\" group is given visit rights and is presented as \"default group\"\n> > in the addUser usecase.\n> \n> Do these have to be added to each publication manually?\n\nthe visit role yes. but currently, all roles have to be added manually, as well\nas a workflow, so that does not count against the approach imho.\n\nthe users group is a convenience thing that users could do without if they want.\ni'd like to add a default=\"yes\" attribute to the gml file grammar, and new users\nwill be in that group unless the admin explicitly untags a checkbox in\naddUser.jx. gets rid of the hardcoded stuff. wdyt?\n \n> > this is ugly. but it could be remedied with a new \"pseudo-usecase\": ac.visit.\n> > it doesn't do anything, but it has roles attached to it via\n> > usecase-policies.xml, and the policyAuthorizer could maybe delegate the role\n> > checking to the usecaseAuthorizer. gets rid of the hardcoded visit semantics.\n> > that leaves the default group. it could be made configurable in the gui (thus\n> > putting the semantics into the publication, where they belong), or we could\n> > introduce a new accreditable <anyUser/> that includes all authenticated users.\n> > probably easier to maintain than an extra group...\n> \n> Well, I have to admit that the ac.visit pseudo-usecase doesn't sound more\n> appealing than the current implementation ... I guess I'd even prefer the visit\n> role + default group approach. But maybe it needs a bit more of discussion. Is\n> it really necessary to tackle this before 2.0?\n\nactually, i find the usecase idea quite appealing - basically it means that\nusers can define a \"visit\" policy for ac.visit using an existing mechanism, and\nthe policy authorizer uses that policy. not too quirky imho. we can even\nimplement a real ac.visit as a document usecase...\n\nright now, the policy authorizer does not implement a policy for viewing pages,\nand i consider that a blocker bug - it opens up security holes whenever somebody\ntries to do something clever with our otherwise nice role and permission model.\n\n\n\n", "id": 106241, "time": "2007-08-03T01:49:51Z", "creator": "nettings@apache.org", "creation_time": "2007-08-03T01:49:51Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 42952, "text": "another attempt:\n\nsvn co https://svn.apache.org/repos/asf/lenya/sandbox/newPolicyAuth \\\nlenya-newPolicyAuth\n\nsome classes had to be shuffled around, which does not translate well into a\npatch, hence the branch. andreas, i've tried the pseudo-usecase approach, please\ntake a look. the new PolicyAuthorizer code is quite ugly - i had to drag it\nkicking and screaming, but i wanted a minimal, proof-of-concept approach.\n\nthe more i play with it, the more i like the \"everything is authorized as a\nusecase\" idea. the two authorizers and the DefaultAccessController are not so\nnice, but it's never been a very beautiful piece of code imho...\n\nif we adopt this approach, policyauthorizer should go for good and the\nusecaseauthorizer modified to not grant by default if no ?lenya.usecase is\ngiven, but to check ?lenya.usecase=ac.visit instead.\n\nbtw, you can actually call ?lenya.usecase=ac.visit, and it will do what you\nexpect :) not that anyone needs it, though.\n\ncomments and reviews appreciated.", "id": 106367, "time": "2007-08-05T15:19:55Z", "creator": "nettings@apache.org", "creation_time": "2007-08-05T15:19:55Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 42952, "attachment_id": 20609, "text": "Created attachment 20609\nextends the UsecaseAuthorizerImpl to check page access as well\n\nok, here is a vastly less intrusive approach:\nPolicyAuthorizer is left as-is, apart from some comments that document its\nshortcomings.\nUsecaseAuthorizer will now substitute \"ac.visit\" if no usecase parameter is\nset, hence it can handle page access control as well.\ndefault publication gets some additional usecase permissions: ac.visit is\ngranted to roles edit, review, admin and visit (which basically mimics the\ncurrent implicit behaviour, but now it's obvious).\n\neventually, PolicyAuthorizer should be refactored (see bug\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=43049), but that is\northogonal to this issue...\n\nplease review and comment.", "id": 106432, "time": "2007-08-07T03:03:30Z", "creator": "nettings@apache.org", "creation_time": "2007-08-07T03:03:30Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 42952, "text": "I'm +1 for applying the patch.\n\nBut we could rename the PolicyAuthorizer to PolicyRoleResolver, which would make\nit obvious that it doesn't make an authorization decision, but only resolves the\nroles. It would then be removed from the authorization chain and called directly\nby the AccessController, which would probably sufficient to resolve bug 43049. WDYT?", "id": 106473, "time": "2007-08-08T03:05:58Z", "creator": "andreas@apache.org", "creation_time": "2007-08-08T03:05:58Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #19)\n> I'm +1 for applying the patch.\n\nthanks for your feedback. i'm waiting another day for comments and will apply\nthe patch tomorrow if nobody objects. \n \n> But we could rename the PolicyAuthorizer to PolicyRoleResolver, which would make\n> it obvious that it doesn't make an authorization decision, but only resolves the\n> roles. It would then be removed from the authorization chain and called directly\n> by the AccessController, which would probably sufficient to resolve bug 43049.\nWDYT?\n\nsound like a good idea to me, and yes, i agree this would resolve 43049. plus it\nhas the added bonus of simplifying the configuration. could you take on this\njob? i'm still not feeling too comfortable with the ac code, and refactoring\nprobably requires more insight than fixing small bugs...\n", "id": 106476, "time": "2007-08-08T03:39:08Z", "creator": "nettings@apache.org", "creation_time": "2007-08-08T03:39:08Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "*** Bug 43049 has been marked as a duplicate of this bug. ***", "id": 106478, "time": "2007-08-08T03:43:30Z", "creator": "nettings@apache.org", "creation_time": "2007-08-08T03:43:30Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "(In reply to comment #18)\n> Created an attachment (id=20609) [edit]\n> extends the UsecaseAuthorizerImpl to check page access as well\n\nI applied the patch. Thanks a lot!\nWould you mind giving it a try and see if the bug is resolved?", "id": 106582, "time": "2007-08-10T04:11:59Z", "creator": "andreas@apache.org", "creation_time": "2007-08-10T04:11:59Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 42952, "attachment_id": null, "text": "works for me, but could certainly use some more testing. i'll post a CFH to the\nusers list...", "id": 106660, "time": "2007-08-12T14:08:07Z", "creator": "nettings@apache.org", "creation_time": "2007-08-12T14:08:07Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 42952, "text": "It works for me. Can we close this bug?", "id": 107018, "time": "2007-08-22T02:12:26Z", "creator": "andreas@apache.org", "creation_time": "2007-08-22T02:12:26Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 42952, "text": "Seems to be fixed.", "id": 107152, "time": "2007-08-23T04:32:46Z", "creator": "andreas@apache.org", "creation_time": "2007-08-23T04:32:46Z", "is_private": false, "attachment_id": null}]
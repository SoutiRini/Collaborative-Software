[{"count": 0, "tags": [], "bug_id": 24846, "attachment_id": null, "id": 47667, "time": "2003-11-20T04:25:13Z", "creator": "jessh@ptc.com", "creation_time": "2003-11-20T04:25:13Z", "is_private": false, "text": "In Tomcat 5.0.14, for large JSP files with many includes, etc (producing a \n94K .java file in this case), so many \norg.apache.jasper.runtime.JspRuntimeLibrary usages are generated that javac \nfails and reports an error stating \"cannot resolve symbol\".\n\nThe symbol is \"apache\" and the location is \"class java.lang.String\" in a use of \norg.apache.jasper.runtime.JspRuntimeLibrary.include(request \nresponse \"/some/path/someJsp.jsp\", out true).  Identical lines preceding this \none did not produce compile complaints.\n\nThis error is reproducible with javac from the command line with Java 2 \nv1.4.2_02 and 1.3.1_09 (the only 2 SDKs I have on the given system).\n\nThe error goes away if one alters the source to import \norg.apache.jasper.runtime.JspRuntimeLibrary and use \"JspRuntimeLibrary...\" \nrather than the fully qualified package name!\n\nI understand the importance of avoiding namespace pollution, but being able to \nrely on JSP pages compiling is of higher importance than possible collision \nwith \"JspRuntimeLibrary\"!  I also understand this is Sun's bug, but a \nworkaround in Jasper is a lot faster/easier than getting a javac bug fixed and \navailable on all platforms.\n\nI would like to suggest adding org.apache.jasper.runtime.JspRuntimeLibrary to \nthe list of imports in PageInfo's constructor (i.e. not as a standard import -- \nas it certainly is not but as an omni-present one all the same) and changing \nGenerator to use \"JspRuntimeLibrary\" without package name qualifiers.  If this \nchange cannot be made in Tomcat 5.0.15 I'll be patching it into our packaging \nthereof but I believe it would be a very good idea to make this patch to 5.0.15 \nfor everyone's sake!  [The alternative is for Tomcat 5.0.x to get a reputation \nas not being robust in the face of large JSP files -- even if javac is actually \nat fault.]"}, {"attachment_id": null, "tags": [], "bug_id": 24846, "is_private": false, "count": 1, "id": 47670, "time": "2003-11-20T09:47:27Z", "creator": "remm@apache.org", "creation_time": "2003-11-20T09:47:27Z", "text": "This will not be fixed (as you said, it is not a Jasper issue, and I'm almost\ncertain the spec mandates no imports outside of a small list). Besides, there is\na significant amount of other compilers which can be used by Ant, so this\nshouldn't be a real issue.\nYou should precompile your application, BTW.\n\nAbout the last sentence, Tomcat is not completely reliable for large JSP files\nanyway (no compliant JSP compiler can be, AFAIK), because of Java limitations to\nmethod code size.\nThere may also be an easy workaround: disable tag pooling.\n\nWe'll refer to your big report for further comments if needed, and to mark\nothers as duplicates."}, {"count": 2, "tags": [], "bug_id": 24846, "attachment_id": null, "id": 47700, "time": "2003-11-20T15:31:13Z", "creator": "jessh@ptc.com", "creation_time": "2003-11-20T15:31:13Z", "is_private": false, "text": "Thanks for the ernest reply Remmy.\n\nI can understand your position -- and it makes sense from a spec compliance and\n\"let's not do further hacks to workaround javac\" perspective.\n\nI guess I'll just be patching my own Tomcat with every upgrade (as I do with\nevery Apache upgrade anyway)."}, {"count": 3, "tags": [], "bug_id": 24846, "attachment_id": null, "is_private": false, "id": 47703, "time": "2003-11-20T15:37:08Z", "creator": "remm@apache.org", "creation_time": "2003-11-20T15:37:08Z", "text": "There are, IMO, much better solutions: you could for example use Eclipse Java\ncompiler (called EDT, I think) instead (Ant supports it, so Jasper does too). It\nseems way faster than javac, without any disadvantages."}, {"count": 4, "tags": [], "creator": "jessh@ptc.com", "attachment_id": null, "text": "Are there any non-native (i.e. Java-based) compilers that I can distribute\nfreely, will work on Windows, Solaris, HPUX, AIX, and Linux and are as\n1.4.x-compatible as javac, yet have fewer compiler bugs?  Is the Eclipse\ncompiler such a beast?\n\nExcuse me for my ignorance.  If javac is so bad in general, is the Tomcat group\ndistributing an alternative \"out-of-the-box\"?", "id": 47705, "time": "2003-11-20T15:44:49Z", "bug_id": 24846, "creation_time": "2003-11-20T15:44:49Z", "is_private": false}]
[{"attachment_id": null, "tags": [], "bug_id": 10690, "is_private": false, "count": 0, "id": 19322, "time": "2002-07-11T14:17:09Z", "creator": "erik.visser@chess.nl", "creation_time": "2002-07-11T14:17:09Z", "text": "The ServletOutputStream blocks on write (actually on its internal flush) in a\nspecial case: when download with IE from a jsp and cancelling during save.\nThe ServletOutputStream blocks, and so does the thread serving it. In the\nsingle-thread servlet model, this also locks the servlet.\n\n---\nRelated problems have been posted at the user and dev mailing lists, see:\n\nhttp://www.mail-archive.com/tomcat-user@jakarta.apache.org/msg19692.html\nhttp://www.mail-archive.com/tomcat-dev@jakarta.apache.org/msg16648.html\n\n---\ndetails of configuration:\n\nserver: standalone Apache Tomcat 4.1-dev for JavaTM Web Services Developer Pack\n1.0 EA2\njsp:\n\n<%@ page import=\"java.io.*\" %>\n<%\n\n// let the filename point to a large text file\nString filename = \"D:\\\\log.csv\";\n\nSystem.out.println( \"Before download\" );\n\ntry {\n  FileReader file_reader = new FileReader( filename );\n  BufferedReader reader = new BufferedReader( file_reader );\n  File log_file = new File( filename );\n  long length = log_file.length();\n  log_file = null;\n\n  response.setContentType (\"application/excell\");\n  response.setHeader (\"Content-Disposition\", \"attachment; filename=\\\"\" +\nfilename + \"\\\"\");\n\n  response.setContentLength( (int)length );\n\t\n  ServletOutputStream outs = response.getOutputStream();\n\t\t\n  String line = reader.readLine();\n  // debug code to print something for every line that is being pushed.\n  int l = 1;\n  while ( line != null ) {\n    outs.println( line );\n    System.out.println(\"line\" + l++ );\n    line = reader.readLine();\n  }\n  reader.close();\n  file_reader.close();\n  outs.flush();\n  outs.close();\n}\ncatch ( Exception e ) {\n  e.printStackTrace();\n}\n\nSystem.out.println( \"After download. If you see this, the thread has been freed.\" );\n\n%>"}, {"count": 1, "text": "I strongly doubt that. If the client disconnects, an exception will be raised\nand the request processing will stop.", "creator": "remm@apache.org", "attachment_id": null, "id": 19324, "time": "2002-07-11T14:26:34Z", "bug_id": 10690, "creation_time": "2002-07-11T14:26:34Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "I have found this problem as well using the filter below to download a file. If \nthe IE download is cancelled it locks the file that is being downloaded. The \nonly way to unlock it is to restart Tomcat or get the user to kill their IE. It \nseems that IE doesn't actually disconnect when the download is cancelled, only \nwhen IE is shutdown. Is there any way to perhaps timeout the connection?\n\npublic class DownloadFilter implements Filter {\n...\npublic void doFilter(ServletRequest req, ServletResponse res, FilterChain \nchain) throws IOException, ServletException {\n    HttpServletResponse res2 = (HttpServletResponse)res;\n    res2.setHeader(\"Content-Disposition\",\"attachment; filename=myfile.zip\");\n    chain.doFilter(req, res2);\n}\n...\n}", "attachment_id": null, "id": 22967, "creator": "philipr@weborganic.com", "time": "2002-09-17T01:22:38Z", "bug_id": 10690, "creation_time": "2002-09-17T01:22:38Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 10690, "attachment_id": null, "is_private": false, "id": 22980, "time": "2002-09-17T08:55:33Z", "creator": "remm@apache.org", "creation_time": "2002-09-17T08:55:33Z", "text": "The socket has a TCP timeout set by default, so an exception should be raised on\nthe server side, and the thread shouldn't hang forever. Otherwise, this looks\nlike a deficiency in the implementation of the VM.\nSorry, but I have no idea how to improve this behavior if there is indeed a\nproblem (I don't think there is, although I could associate the locaking problem\nto a bad cleanup of resources in case there's an unexpected exception; in any\ncase, it is a different issue)."}]
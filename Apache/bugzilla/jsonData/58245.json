[{"text": "Created attachment 33001\npatch to make Workbook interface implement Iterable<Sheet>\n\nIn one of my own projects, I would like to write code without specifying any one particular implementation (HSSFWorkbook, XSSFWorkbook).\n\n> Workbook wb = WorkbookFactory.create(file);\n> for(Sheet worksheet : workbook) {\n>   // do something with worksheet\n> }\n\nBoth HSSFWorkbook and XSSFWorkbook implement an iterator over the sheets, but the Workbook interface is missing this, thus I can't write the above code without defining the workbook as HSSF or XSSF.", "tags": [], "bug_id": 58245, "attachment_id": 33001, "count": 0, "id": 184570, "time": "2015-08-15T07:15:19Z", "creator": "onealj@apache.org", "creation_time": "2015-08-15T07:15:19Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58245, "text": "It looks like neither HSSFWorkbook nor XSSFWorkbook have sheet iterators defined for them.\n\nI'm not sure what's preferred in this case, upcasting all iterators to Iterator<Sheet> or leaving the iterators in their more specific sheet type. The former is how XSSFWorkbook.iterator is currently implemented. The latter is similar to how XSSFSheet.rowIterator is currently implemented.\n\nPOI devs, what's preferred here?\n\n\n============\n\nss.usermodel.Workbook:\npublic interface Workbook extends Closeable, Iterable {\n    Iterator<? extends Sheet> iterator();\n}\n\nxssf.usermodel.XSSFWorkbook:\npublic class XSSFWorkbook extends POIXMLDocument implements Workbook {\n    @Override\n    public Iterator<XSSFSheet> iterator() {\n        return sheets.iterator();\n    }\n\nhssf.usermodel.HSSFWorkbook:\npublic final class HSSFWorkbook extends POIDocument implements Workbook {\n    @Override\n    public Iterator<HSSFSheet> iterator() {\n        return _sheets.iterator();\n    }\n\nxssf.streaming.SXSSFWorkbook:\npublic class SXSSFWorkbook implements Workbook {\n    @Override\n    public Iterator<SXSSFSheet> iterator() {\n        return new SXSSFSheetIterator(_wb.iterator());\n    }\n}\n\n=================\n\nss.usermodel.Workbook:\npublic interface Workbook extends Closeable, Iterable {\n    Iterator<Sheet> iterator();\n}\n\nxssf.usermodel.XSSFWorkbook:\npublic class XSSFWorkbook extends POIXMLDocument implements Workbook {\n    @Override\n    public Iterator<Sheet> iterator() {\n        return (Iterator<Sheet>)(Iterator<? extends Sheet>) sheets.iterator();\n    }\n\nhssf.usermodel.HSSFWorkbook:\npublic final class HSSFWorkbook extends POIDocument implements Workbook {\n    @Override\n    public Iterator<Sheet> iterator() {\n        return (Iterator<Sheet>)(Iterator<? extends Sheet>) _sheets.iterator();\n    }\n\nxssf.streaming.SXSSFWorkbook:\npublic class SXSSFWorkbook implements Workbook {\n    @Override\n    public Iterator<Sheet> iterator() {\n        Iterator<SXSSFSheet> it = new SXSSFSheetIterator(_wb.iterator());\n        return (Iterator<Sheet>)(Iterator<? extends Sheet>) it;\n    }\n}", "id": 184571, "attachment_id": null, "creator": "onealj@apache.org", "creation_time": "2015-08-15T10:42:03Z", "time": "2015-08-15T10:42:03Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58245, "attachment_id": null, "id": 184572, "time": "2015-08-15T11:08:01Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-08-15T11:08:01Z", "is_private": false, "text": "I had the same intention with X/HSLF [1], but this ends in some interesting generics definitions ... it works now, but I still think that some declarations could be simpler ..\n\nso I guess, I would do it as in org.apache.poi.sl.usermodel.ShapeContainer with a parameterized interface\n\n[1] http://stackoverflow.com/questions/29440337/java-generics-parameterized-class-vs-typed-method"}, {"count": 3, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 184574, "time": "2015-08-16T04:08:25Z", "bug_id": 58245, "creation_time": "2015-08-16T04:08:25Z", "is_private": false, "text": "Mimicking what you wrote in r1692593:\norg.apache.poi.sl.usermodel.ShapeContainer:  https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/sl/usermodel/ShapeContainer.java?limit_changes=0&r1=1692593&r2=1692592&pathrev=1692593\norg.apache.poi.xslf.usermodel.XSLFShapeContainer: https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xslf/usermodel/XSLFShapeContainer.java?r1=1410315&r2=1692593&pathrev=1692593\n\nIs this what you were referring to?\n\n\nss.usermodel.Workbook:\npublic interface Workbook<T extends Sheet> extends Closeable, Iterable<T> {\n    Iterator<T> iterator();\n}\n\nxssf.usermodel.XSSFWorkbook:\npublic class XSSFWorkbook extends POIXMLDocument implements Workbook<XSSFSheet> {\n    @Override\n    public Iterator<XSSFSheet> iterator() {\n        return sheets.iterator();\n    }\n\nhssf.usermodel.HSSFWorkbook:\npublic final class HSSFWorkbook extends POIDocument implements Workbook<HSSFSheet> {\n    @Override\n    public Iterator<HSSFSheet> iterator() {\n        return _sheets.iterator();\n    }\n\nxssf.streaming.SXSSFWorkbook:\npublic class SXSSFWorkbook implements Workbook<SXSSFSheet> {\n    @Override\n    public Iterator<SXSSFSheet> iterator() {\n        return new SXSSFSheetIterator(_wb.iterator());\n    }\n}\n\nI suppose I could go as far as writing a new interface:\npublic interface SheetContainer<T extends Sheet> extends Iterable<T>, but I currently don't have any additional methods that a SheetContainer would need to implement beyond what an Iterable requires.\n\nThis might be getting a bit out of my Java comfort zone here--I'm used to Python where generics/templates aren't needed because everything is duck typed.\n\nSuggestions?"}, {"count": 4, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 184575, "time": "2015-08-16T04:13:23Z", "bug_id": 58245, "creation_time": "2015-08-16T04:13:23Z", "is_private": false, "text": "I don't think we can do the Workbook<T> trick. I had a play with that quite recently. The killer is that Eclipse (+friends) all start complaining when you write something like \"Workbook wb = WorkbookFactory.create(file)\", claiming that you should be giving it a generics type. We don't want to do that, as it defeats the whole point of telling everyone to use the SS interfaces!\n\nWe certainly could do \nWorkbook:  Iterator<? extends Sheet> getSheetIterator();\nHSSFWorkbook:  Iterator<HSSFSheet> getSheetIterator();\n\nThat works fine, and mirrors what we have for rows and cells. It's the iterable version that I think will have to remain \"Workbook implements Iterable<Sheet>\" and \"HSSFWorkbook implements Workbook, Iterable<Sheet>\", unless someone can come up with a cunning workaround!"}, {"count": 5, "tags": [], "bug_id": 58245, "attachment_id": 33066, "id": 184986, "creation_time": "2015-09-06T09:19:53Z", "time": "2015-09-06T09:19:53Z", "creator": "onealj@apache.org", "text": "Created attachment 33066\npatch to make all workbooks implement Iterable<Sheet>\n\nThe XSSFWorkbook.iterator breaks that pattern used by Sheet.iterator and Row.iterator\n\nUnfortunately, XSSFWorkbook has had this method for nearly 7 years (r700472 https://svn.apache.org/viewvc?view=revision&revision=700472).\nNonetheless, I think deprecating the old iterator is a step in the right direction, allowing developers to write for loops like\n\nfor (Sheet sh : workbook) {\n    for (Row row : sh) {\n        for (Cell cell : row) {\n            System.out.println(cell);\n        }\n    }\n}\n\nI've provided test cases and documentation to help users transition their code to the new Iterator<Sheet> iterator() interface (previously Iterator<XSSFSheet> iterator().\n\nNote: this patch will break backwards compatibility with existing code.", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58245, "attachment_id": 33067, "text": "Created attachment 33067\nsite documentation updates\n\nUpdated quick-guide to include for-each sheet iteration in the attached patch.\n\nThese are the changes that developers would need to make with attachment 33066\n\n\nfinal XSSFWorkbook wb = new XSSFWorkbook();\nwb.createSheet();\n\n// =====================================================================\n// Case 1: Existing code uses XSSFSheet for-each loop\n// =====================================================================\n// Original code (no longer valid)\nfor (XSSFSheet sh : wb) {\n    sh.createRow(0);\n}\n\n// Option A:\nfor (XSSFSheet sh : (Iterable<XSSFSheet>) (Iterable<? extends Sheet>) wb) {\n    sh.createRow(0);\n}\n\n// Option B (preferred for new code):\nfor (Sheet sh : wb) {\n    sh.createRow(0);\n}\n\n// =====================================================================\n// Case 2: Existing code creates an iterator variable\n// =====================================================================\n// Original code (no longer valid)\nIterator<XSSFSheet> it = wb.iterator();\nXSSFSheet sh = it.next();\nsh.createRow(0);\n\n// Option A:\nIterator<XSSFSheet> it = (Iterator<XSSFSheet>) (Iterator<? extends Sheet>) wb.iterator();\nXSSFSheet sh = it.next();\nsh.createRow(0);\n\n// Option B (deprecated, but a quick-fix)\n@SuppressWarnings(\"deprecation\")\nIterator<XSSFSheet> it = wb.xssfSheetIterator();\nXSSFSheet sh = it.next();\nsh.createRow(0);\n\n// Option C (preferred for new code):\nIterator<Sheet> it = wb.iterator();\nSheet sh = it.next();\nsh.createRow(0);", "id": 184987, "time": "2015-09-06T09:24:21Z", "creator": "onealj@apache.org", "creation_time": "2015-09-06T09:24:21Z", "is_private": false}, {"count": 7, "tags": [], "creator": "onealj@apache.org", "text": "Created attachment 33068\nsite documentation updates\n\nfix quick-guide whitespace", "id": 184988, "time": "2015-09-06T09:31:44Z", "bug_id": 58245, "creation_time": "2015-09-06T09:31:44Z", "is_private": false, "attachment_id": 33068}, {"count": 8, "tags": [], "bug_id": 58245, "attachment_id": null, "id": 185012, "creation_time": "2015-09-07T15:47:26Z", "time": "2015-09-07T15:47:26Z", "creator": "apache@gagravarr.org", "text": "Looks good to me, thanks for this\n\nI think that once we've got the build green again from the forbidden APIs check changes, we should be fine to apply this as-is. Please remind us in 1-2 weeks if we forget!", "is_private": false}, {"count": 9, "tags": [], "bug_id": 58245, "attachment_id": null, "text": "As of r1702321, build 841 <https://builds.apache.org/job/POI/841/>, the build server is green again.", "id": 185095, "time": "2015-09-11T00:37:26Z", "creator": "onealj@apache.org", "creation_time": "2015-09-11T00:37:26Z", "is_private": false}, {"text": "Thanks for this, and for your patience!\n\nCode change applied in r1703573, site in r1703574.", "tags": [], "bug_id": 58245, "attachment_id": null, "count": 10, "id": 185311, "time": "2015-09-17T11:18:55Z", "creator": "apache@gagravarr.org", "creation_time": "2015-09-17T11:18:55Z", "is_private": false}]
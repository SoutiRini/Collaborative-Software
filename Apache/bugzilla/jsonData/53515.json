[{"count": 0, "tags": [], "creator": "ag@4js.com", "text": "Created attachment 29036\nCommand line application to reproduce the issue\n\nThe function SXSSFWorkbook.write() throws an IOException \"stream closed\" if called more than once (for an unclosed stream. The exception originates from an internal stream).\nThe attached test application creates, populates and saves a workbook two times. It does this for both a SXSSFWorkbook and a XSSFWorkbook. The SXSSFWorkbook throws an IOException \"stream closed\" on the second try.\nSee also the discussion in bug 53493 (https://issues.apache.org/bugzilla/show_bug.cgi?id=53493) which contains a suggested fix.", "id": 160474, "time": "2012-07-06T14:39:05Z", "bug_id": 53515, "creation_time": "2012-07-06T14:39:05Z", "is_private": false, "attachment_id": 29036}, {"count": 1, "attachment_id": 30275, "bug_id": 53515, "is_private": false, "id": 167170, "time": "2013-05-13T14:43:18Z", "creator": "dranon@gmail.com", "creation_time": "2013-05-13T14:43:18Z", "tags": [], "text": "Created attachment 30275\nCommand line application to reproduce a JVM crash writing twice\n\nI ran into a very similar problem with XSSFWorkbook and my research on the problem brought me here. I have added a test case to show that trying to write twice the same workbook but closing it before the second time, produce a JVM crash.\n\nI used the first application and did some simple modifications to reproduce the crash. It happens with a XSSFWorkbook or a SXSSFWorkbook. The added dispose method to the SXSSFWorkbook doesn't help sadly.\n\nThe case is with a SXSSFWorkbook using poi 3.9. I added the log from Java 6 (update 33) and 7 of the occuring crash.\n\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGBUS (0x7) at pc=0x00007f45b940da82, pid=11737, tid=139937491703552\n#\n# JRE version: 7.0_21-b11\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (23.21-b01 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  [libzip.so+0x4a82]  newEntry+0x62\n#\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before sta\nrting Java again\n#\n# An error report file with more information is saved as:\n# /home/jonathan/workspace/client/detl/hs_err_pid11737.log\n\nI tried using -Dsun.zip.disableMemoryMapping=true which avoid the JVM crash but causes this error instead, with either XSSF or SXSSF workbooks :\n\"ERROR: failed on calling org.apache.poi.xssf.streaming.SXSSFWorkbook.write() with exception java.io.IOException: Can't obtain the input stream from /docProps/app.xml\""}, {"count": 2, "tags": [], "bug_id": 53515, "is_private": false, "text": "Created attachment 30276\nJava 7 log", "id": 167171, "time": "2013-05-13T14:43:46Z", "creator": "dranon@gmail.com", "creation_time": "2013-05-13T14:43:46Z", "attachment_id": 30276}, {"count": 3, "tags": [], "creator": "dranon@gmail.com", "text": "Created attachment 30277\nJava 6 log", "id": 167172, "attachment_id": 30277, "bug_id": 53515, "creation_time": "2013-05-13T14:44:11Z", "time": "2013-05-13T14:44:11Z", "is_private": false}, {"text": "A Java application should never be able to crash the JVM, no matter how silly it might be being. If you can produce a JVM crash, then you'll need to report that to whoever maintains your chosen JVM, and ask them to investigate fixing the JVM bug", "tags": [], "bug_id": 53515, "is_private": false, "count": 4, "id": 167173, "time": "2013-05-13T15:07:43Z", "creator": "apache@gagravarr.org", "creation_time": "2013-05-13T15:07:43Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 53515, "text": "And for the usage of the property that disable the memory mapping that avoid the crash but cause another error?", "id": 167174, "time": "2013-05-13T15:20:23Z", "creator": "dranon@gmail.com", "creation_time": "2013-05-13T15:20:23Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "dranon@gmail.com", "text": "I've come up with a workaround for my problem of writing more than once in a XssfWorkbook.\n\nUsing a FileInputStream on the second pass to open the Workbook will make it work. If that points to a problem in the JVM itself (Oracle's v7), I'm puzzled to see that using a different constructor will avoir a JVM crash.\n\nChange my attached case opening code this :\n\n      FileInputStream input = null;\n      try {\n        File out = new File(\"Test.xlsx\");\n        \n        if (out.exists()) {\n          try {\n            input = new FileInputStream(out);\n            wb = new SXSSFWorkbook((XSSFWorkbook) WorkbookFactory.create(input));\n          } catch (Exception e) {\n            System.err.println(\"ERROR: didn't create workbook : \" + e.getMessage());\n          }\n\n        } else {\n          wb = new SXSSFWorkbook(10);\n        }", "id": 168080, "time": "2013-06-26T20:15:33Z", "bug_id": 53515, "creation_time": "2013-06-26T20:15:33Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 53515, "text": "I think we are talking about two different issues here, \n\na) \nfor the originally reported one, I think SXSSFSheet is currently simply not built for multiple usage, as soon as getWorksheetXMLInputStream() is called once, the underlying streams are closed. Not sure if we can or want to support using it multiple times at all.\n\nb)\nThe JVM crash is likely caused by writing a zip-file and at the same time reading it, see e.g. http://www.oracle.com/technetwork/java/javase/documentation/overview-156328.html, \"Solaris or Linux applications that use java.util.zip.ZipFile may experience a SIGBUS VM crash if the application accidentally overwrites any zip or jar files that are still being used by the same Java runtime. \".", "id": 170852, "time": "2013-10-26T09:11:28Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-10-26T09:11:28Z", "is_private": false, "attachment_id": null}, {"text": "I have now analyzed both cases:\n\na) We currently do not support re-using the Workbook like this and I don't see an easy way to do it. Patches welcome if you can think of a way!\n\nb) It happens because you try to write the workbook to the same file that is still open for the Workbook itself, unfortunately this triggers this crash which we cannot do much about as it is kind of \"documented behavior\" of the JVM in this case and can only be prevented by setting the system property mentioned in the link. Also in general writing to the same file is not a good idea, but cannot be checked in poi itself as we are working on streams and thus do not know which file is actually handled here.\n\nSo in both cases I do not see a \"fix\" which we can put in, therefore resolving this as WONTFIX for now. I have added both test-cases as \"DISABLED\" to TestSXSSFWorkbook under r1535959.", "tags": [], "bug_id": 53515, "is_private": false, "count": 8, "id": 170853, "time": "2013-10-26T10:07:20Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-10-26T10:07:20Z", "attachment_id": null}]
[{"count": 0, "attachment_id": null, "creator": "jkb@stian.freeserve.co.uk", "text": "Unlike the Avalon logkit, it appears that log4j does not have the facility to \nprint the stack trace from a Throwable passed in the call - log4j only seems to \nprint the text of the Throwable.\n\nMay I suggest that stack traces are enabled?\nI realise that this is perhaps difficult to support in all versions of Java, \nbut perhaps it could be supported if the JVM supports it, and ignored otherwise?\n\nIf this can be done, may I further suggest:\n\nAdding a dummy throwable to the paraneter list - e.g. log.debug(String,new \nThrowable(\"dummy\")) - would be useful for tracing where functions are called \nfrom, but it is relatively expensive to create the throwable. One can get round \nthis by checking isDebugEnabled() first, but that quickly becomes tedious.\n\nSo I suggest new convenience functions debug_e(String), info_e(String) etc \nwhich autmatically add an internally generated Throwable.\n\nA further enhancement would be to add a set of configuration items to Log4j \nwhich when set would automatically added an internally generated throwable to \nthe relevant calls. e.g. if log4j.debug.trace=true then add a \nthrowable/stacktrace to all debug() calls.", "id": 37594, "time": "2003-05-22T14:37:42Z", "bug_id": 20150, "creation_time": "2003-05-22T14:37:42Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 20150, "text": "\nYou are of course aware of the printing methods which take two parameters, a \nstring and a throwable. Those print stack traces. This is amply documented in \nthe javadocs. For example:\n\nhttp://jakarta.apache.org/log4j/docs/api/org/apache/log4j/Category.html#debug\n(java.lang.Object,%20java.lang.Throwable)\n\nLog4j can also automatically print the caller's file, line number, method and \nclass, if configured to do so.\n\nI am closing and marking this requests as WORKSFORME. If you think that there \nis more to your bug report, please feel free to open it or to contact log4j-\nuser mailing list.\n\n\nAs I understand your\n", "id": 37595, "time": "2003-05-22T14:47:14Z", "creator": "ceki@apache.org", "creation_time": "2003-05-22T14:47:14Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "jkb@stian.freeserve.co.uk", "text": "Indeed, very sorry - I have found that it does work.\n\n[[Not sure now why I thought it hadn't been generated ... but it appeared to \nbe confirmed by the statement \"ignoresThrowable ... The PatternLayout does not \nhandle the throwable contained within LoggingEvents. Thus, it returns true.\" - \nwhat does this mean?]]\n\n===\n\nIMO it would be useful to be able to generate a stack print by the addition of \na new formatting option. \n\nFor example, if there is already a debug() or warn() call in the code, but no \nThrowable is currently passed in. Rather than edit the code to add a dummy \nThrowable to find out how the code was reached, one would add a suitable %\noption to the relevant format, and voila! Or instead of an option in the \nformat, it could be controlled by a new property.\n\n==\n\nRather than having to code:\n  if (log.isDebugEnabled()) {\n    log.debug(\"xxxx\",new Throwable(\"dummy\"));\n  }\nit would be convenient to be able to code:\n  log.debug_stack(\"xxxx\");\nand have the throwable generated automatically.\n\n==\n\nNot essential functions by any means, but hopefully useful to some (apart from \nme!) - and probably not difficult to add, I might even be able to contribute a \npatch or two if it is thought worthwhile...", "id": 37649, "time": "2003-05-22T23:37:25Z", "bug_id": 20150, "creation_time": "2003-05-22T23:37:25Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "text": "org.apache.tools.ant.util.FileUtils is a great tool to create platform\nindependent paths:\n\n        FileUtils fu = FileUtils.getFileUtils();\n        return new Location(Locator.fromURI(fu.toURI(fileName)))\n                .getFileName();\n\nUnfortunately, when a path is using cygwin symlinks, it still won't work.\n\nThere is a resolveFile() that already does more than just new File(file,\nfilename), but unfortunately, it wouldn't notice if a file doesn't exist (due to\nbeing a cygwin symbolic link).\n\nOnce this exists, I guess this very useful tool \"FileUtils\" might find many more\ntakers and thus could move to jakarta-commons?", "attachment_id": null, "id": 77377, "creation_time": "2005-07-18T13:35:36Z", "time": "2005-07-18T13:35:36Z", "creator": "hauser@acm.org", "bug_id": 35776, "is_private": false}, {"count": 1, "tags": [], "text": "(In reply to comment #0)\n> Unfortunately, when a path is using cygwin symlinks, it still won't work.\n> There is a resolveFile() that already does more than just new File(file,\n> filename), but unfortunately, it wouldn't notice if a file doesn't exist (due \nto\n> being a cygwin symbolic link).\n\nCygwin symbolic links are a pecularity unto themselves. Further, I don't know \nthat there is any guarantee that their implementation has never changed, and \nwill never change.  This means that any code we wrote, making assumptions about \nthe implementation of cygwin symlinks might not work against older or future \nversions of cygwin.  Beyond that, cygwin not being a true OS it would be a \njudgement call whether supporting its symlinks would be proper.  More likely \nthe \"right\" way to get this would be to build cygwin awareness into a JVM, \nsince it is at this level that, e.g. Unix symlinks are handled.\n\n> Once this exists, I guess this very useful tool \"FileUtils\" might find many \nmore\n> takers and thus could move to jakarta-commons?\n\nIIRC there is at least one jakarta-commons project [io] with a FileUtils class.", "is_private": false, "bug_id": 35776, "id": 77493, "time": "2005-07-21T17:19:28Z", "creator": "mbenson@apache.org", "creation_time": "2005-07-21T17:19:28Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "thx to Matt for the pointer to the existing commons-io FileUtils (see Bug 35818).\n\nAgreed, having symlinks handled by the JVM might be the best solution. But since\nwe all stumble daily over those and JVMs haven't delivered on this so far, why\nnot aiming for the second best and giving it a (temporary) home in the jakarta\nfamily of projects? (instead of everybody making his own\nhalf-hearted-quick-fixes all the time)\n\nAlso, \"This means that any code we wrote ... might not work against older or\nfuture versions of ...\" - isn't that true for almost any interface/third-party\ncomponent one programs against/with?", "is_private": false, "bug_id": 35776, "id": 77496, "time": "2005-07-21T18:04:06Z", "creator": "hauser@acm.org", "creation_time": "2005-07-21T18:04:06Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> thx to Matt for the pointer to the existing commons-io FileUtils (see Bug \n35818).\n> Agreed, having symlinks handled by the JVM might be the best solution. But \nsince\n> we all stumble daily over those and JVMs haven't delivered on this so far, why\n> not aiming for the second best and giving it a (temporary) home in the jakarta\n> family of projects? (instead of everybody making his own\n> half-hearted-quick-fixes all the time)\n\nOne idea: extend oata.types.FileSet -> CygwinFileSet (e.g.), which returns an \nextended oata.DirectoryScanner that knows how to resolve cygwin symlinks.  The \nresult is a drop-in replacement for fileset (using typedef though I know Steve \nL. will complain ;) and any compatibility risks are undertaken voluntarily by \nthe user.\n\n> Also, \"This means that any code we wrote ... might not work against older or\n> future versions of ...\" - isn't that true for almost any interface/third-party\n> component one programs against/with?\n\nIndeed; however most third-party components do not masquerade as the filesystem.\n\nBy the way, don't get me wrong here.  I have been a loyal cygwin user for quite \nsome years now.\n", "is_private": false, "bug_id": 35776, "id": 77499, "time": "2005-07-21T20:19:17Z", "creator": "mbenson@apache.org", "creation_time": "2005-07-21T20:19:17Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "pechtcha@cs.nyu.edu", "text": "(In reply to comment #3)\n> > Agreed, having symlinks handled by the JVM might be the best solution.\n> \n> One idea: extend oata.types.FileSet -> CygwinFileSet (e.g.), which returns an \n> extended oata.DirectoryScanner that knows how to resolve cygwin symlinks.  The \n> result is a drop-in replacement for fileset (using typedef though I know Steve \n> L. will complain ;) and any compatibility risks are undertaken voluntarily by \n> the user.\n> \n> > Also, \"This means that any code we wrote ... might not work against older or\n> > future versions of ...\" - isn't that true for almost any\n> > interface/third-party component one programs against/with?\n> \n> Indeed; however most third-party components do not masquerade as the\n> filesystem.\n> \n> By the way, don't get me wrong here.  I have been a loyal cygwin user for\n> quite some years now.\n\nFWIW, one solution that would not involve modifying the JVM is a native method\nshipped with a DLL that's linked with Cygwin.  That way you can guarantee that\nany path conversion will invoke the genuine Cygwin functionality, so\ncompatibility will not be an issue.", "id": 92602, "time": "2006-08-28T04:48:22Z", "bug_id": 35776, "creation_time": "2006-08-28T04:48:22Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 35776, "text": "(In reply to comment #4)\n\n> FWIW, one solution that would not involve modifying the JVM is a native method\n> shipped with a DLL that's linked with Cygwin.  That way you can guarantee that\n> any path conversion will invoke the genuine Cygwin functionality, so\n> compatibility will not be an issue.\n\nThis sounds like an interesting project, but I personally don't have time to\nattempt it given my laughable C-Fu and complete lack of knowledge of the cygwin\nAPIs.  I'm sure that when a patch implementing this solution is submitted it\nwill be given due consideration.", "id": 92626, "time": "2006-08-28T14:28:10Z", "creator": "mbenson@apache.org", "creation_time": "2006-08-28T14:28:10Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 35776, "attachment_id": null, "id": 92636, "time": "2006-08-28T16:57:10Z", "creator": "antoine@apache.org", "creation_time": "2006-08-28T16:57:10Z", "is_private": false, "text": "I would not personally support adding cygwin support in ant at this level.\nMaybe the people who are interested by specific cygwin functionality should\nstart their own Java project ?"}]
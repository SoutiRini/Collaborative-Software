[{"count": 0, "tags": [], "creator": "nebhale@nebhale.com", "attachment_id": null, "text": "When using <subant/> more than one level deep, properties are not overridden properly after the first level.\n\nThe test case works as follows:\n\nLevel 1:\n  * A property is defined\n  * <subant/> is called redefining the value of the property\n\nLevel 2:\n * The property is expected to be the redefined value (and is for 1.7.x and 1.8.x)\n * <subant/> is called redefining the value of the property again.\n\nLevel 3:\n * The property is expected to be the redefined value (and is for 1.7.x but is *not* for 1.8.x)\n\nUsing the attached build.xml file you'll see an output of the following with 1.7.1\n\nBuildfile: build.xml\n\nlevel-1:\n\nlevel-2:\n     [echo] Expecting 'bravo', actual 'bravo'\n\nlevel-3:\n     [echo] Expecting 'charlie', actual 'charlie'\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nYou'll see the following with 1.8.1.\nBuildfile: /Users/benhale/Desktop/build.xml\n\nlevel-1:\n\nlevel-2:\n     [echo] Expecting 'bravo', actual 'bravo'\n\nlevel-3:\n     [echo] Expecting 'charlie', actual 'bravo'\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds", "id": 139733, "time": "2010-09-07T09:22:06Z", "bug_id": 49891, "creation_time": "2010-09-07T09:22:06Z", "is_private": false}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "is_private": false, "id": 140024, "attachment_id": null, "bug_id": 49891, "creation_time": "2010-09-21T11:02:05Z", "time": "2010-09-21T11:02:05Z", "text": "I assume the build file looks similar to this\n\n<project default=\"level-1\">\n  <target name=\"level-1\">\n    <property name=\"p\" value=\"alpha\"/>\n    <subant target=\"level-2\">\n      <file file=\"subant.xml\"/>\n      <property name=\"p\" value=\"bravo\"/>\n    </subant>\n  </target>\n\n  <target name=\"level-2\">\n    <echo>Expecting 'bravo', actual '${p}'</echo>\n    <subant target=\"level-3\">\n      <file file=\"subant.xml\"/>\n      <property name=\"p\" value=\"charlie\"/>\n    </subant>\n  </target>\n\n  <target name=\"level-3\">\n    <echo>Expecting 'charlie', actual '${p}'</echo>\n  </target>\n</project>"}, {"count": 2, "tags": [], "text": "In the twisted way Ant properties are supposed to work Ant 1.8.x's behavior is correct.\n\nIf you take the <ant> task manual page it says \n\n> Properties defined on the command line cannot be overridden\n> by nested <property> elements.\n\nin the \"Description\" section and\n\n> These properties become equivalent to properties you define on\n> the command line.\n\nin the section describing the nested property element of <ant>.\n\nWhat happens is that starting with the project executing level-2 the property\np (in my build file) looks as if it had been set on the command line and\nso the next subant call is unable to override its value.", "is_private": false, "bug_id": 49891, "id": 140025, "time": "2010-09-21T11:15:49Z", "creator": "bodewig@apache.org", "creation_time": "2010-09-21T11:15:49Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 49891, "text": "Sorry about the attachment being missing, not sure what happened there.  In addition, I don't dispute that it's working per those instructions it's just that it's a undocumented change from the 1.7 line behavior.", "id": 140026, "time": "2010-09-21T11:33:49Z", "creator": "nebhale@nebhale.com", "creation_time": "2010-09-21T11:33:49Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 140041, "time": "2010-09-22T03:46:35Z", "bug_id": 49891, "creation_time": "2010-09-22T03:46:35Z", "text": "so what we need is better documentation, I'll look into it.\n\nIt is a bit too late to note this as a breaking change, maybe we can do that as part of the FAQ.  My guess is we've \"fixed\" subant by accident and didn't realize the change at all."}, {"count": 5, "tags": [], "bug_id": 49891, "is_private": false, "text": "svn revision 999791", "id": 140042, "time": "2010-09-22T03:57:44Z", "creator": "bodewig@apache.org", "creation_time": "2010-09-22T03:57:44Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 49891, "text": "Created attachment 31280\nAdding checks in addAlmostAll\n\nI came across the same problem and think I found the behaviour-changing cause between 1.7.1 and 1.8 (till 1.9.3).\n\nIn 1.8.0 a new method addAlmostAll() for copying properties was introduced in Ant.java. In the past that task was delegated to PropertyHelper.java and its copyXYProperties() methods. These methods check whether the target project already contains the property and don't override existing values. AFAIK these checks are missing in addAlmostAll().\n\nHere's the implementation in copyUserProperties() with it's containsKey-check:\n\n    public void copyUserProperties(Project other) {\n        //avoid concurrent modification:\n        synchronized (userProperties) {\n            Enumeration<String> e = userProperties.keys();\n            while (e.hasMoreElements()) {\n                Object arg = e.nextElement();\n                if (inheritedProperties.containsKey(arg)) {\n                    continue;\n                }\n                Object value = userProperties.get(arg);\n                other.setUserProperty(arg.toString(), value.toString());\n            }\n        }\n    }\n\nAnd here's the snippet from addAlmostAll()\n\n    ...\n    } else if (type == PropertyType.USER) {\n        newProject.setUserProperty(key, value);\n    }\n    ...\n\nBTW, you can produce the same effect in 1.7.1, if you remove \"continue\".\n\nThe attached patch adds the same checks in addAlmostAll():\n\n    } else if (type == PropertyType.USER) {\n        if (!PropertyHelper.getPropertyHelper(this.getProject()).getInheritedProperties().containsKey(key)) {\n            newProject.setUserProperty(key, value);\n        }\n    }\n\n\nI am using this patch for several months without any (other) problem, but perhaps there are effects I don't see.\n\nHere's the output of your example with the patched version:\n\nlevel-1:\n\nlevel-2:\n     [echo] Expecting 'bravo', actual 'bravo'\n\nlevel-3:\n     [echo] Expecting 'charlie', actual 'charlie'", "id": 172866, "time": "2014-02-02T18:46:42Z", "creator": "mail@christian-hartmann.name", "creation_time": "2014-02-02T18:46:42Z", "is_private": false, "attachment_id": 31280}, {"count": 7, "tags": [], "text": "Recently, at our office (Realworld Systems) we experienced issues with the same underlying problem. We usually use a build.properties file to override or introduce properties. However, on our CI (Jenkins) we encode these properties into the Jenkins environment.\n\nThis time, we had a certain property, which was altered with subant. On the command-line, on the developer's box, this was alright. However, the behavior of Ant inside the CI was quite different.\n\nAfter experimenting a bit, we found out that these properies are set through the command-line, creating the same problem as already described.\n\nAside from the change to addAlmostAll, we would like to be able to have a tertiary property, indicating whether command-line properties should take precedence, or at least a way to indicate which command-line properties should be excluded from precedence.\n\nTo our understanding, the behavior, although documented, is illogical and contradicts with the normal expectation of the properties to be reset.", "is_private": false, "bug_id": 49891, "id": 176028, "time": "2014-06-25T09:19:13Z", "creator": "svanleent@gmail.com", "creation_time": "2014-06-25T09:19:13Z", "attachment_id": null}]
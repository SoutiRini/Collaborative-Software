[{"count": 0, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "is_private": false, "text": "This feature has been asked for many times on user mailing list and seems important one to implement.\nI open a enhancement request so we can discuss what's the best way to implement it:\n- ParallelController\n- Special sampler with child requests (close to concurrent download feature)\n- ...", "id": 158498, "time": "2012-04-28T14:52:46Z", "bug_id": 53159, "creation_time": "2012-04-28T14:52:46Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "milamber@apache.org", "attachment_id": null, "id": 158714, "creation_time": "2012-05-01T14:18:31Z", "time": "2012-05-01T14:18:31Z", "bug_id": 53159, "text": "This is an issue on which I have given it some thinking:\nController \"parallel\" seems a good option. If we follow the model of the Transaction Controller, which created a new SamplerResult to calculate the total time of the children elements.\n\nWe can do the same thing:\n1 / Start the Parallel Controller\n2 / Create a SamplerResult\n3 / Create a thread pool (following Download Embedded resource model) with a configurable size\n4 / Send HTTP requests (child) through the thread pool\n5 / As and when of requests, concatenate the responses in the response data of SampleResult\n6 / End of the execution of all applications of children Parallel Controller\n7 / Calculate the total time of execution of the controller, update SamplerResult, back to the normal JMeter execution (post-processor, assertion, listeners for the controller parallel)\n\n\nConstraints:\n* The JMeter variables must be replaced before or during the course of Parallel Controller?\n* What to do for the passage of elements pre-processor, post processors and Assertion of the children? Do not execute this kind of element for children, just for SamplerResult (post and assertion)\nIs it necessary to prohibit anything other than HTTP requests in controller Parallel son. Do not put another controller (Simple, If, Loop, etc.) as child of PC?\nWithin the parameters of Parallel Controller, add the ability to schedule requests children (choice of sequencing, selection of the thread executing unit, etc..)", "is_private": false}, {"count": 2, "tags": [], "bug_id": 53159, "attachment_id": null, "id": 158719, "time": "2012-05-01T17:02:03Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-05-01T17:02:03Z", "is_private": false, "text": "Hi Milamber,\n\n(In reply to comment #1)\n> This is an issue on which I have given it some thinking:\n> Controller \"parallel\" seems a good option. If we follow the model of the\n> Transaction Controller, which created a new SamplerResult to calculate the\n> total time of the children elements.\n> \n> We can do the same thing:\n> 1 / Start the Parallel Controller\n> 2 / Create a SamplerResult\n> 3 / Create a thread pool (following Download Embedded resource model) with a\n> configurable size\n> 4 / Send HTTP requests (child) through the thread pool\n> 5 / As and when of requests, concatenate the responses in the response data\n> of SampleResult\n> 6 / End of the execution of all applications of children Parallel Controller\n> 7 / Calculate the total time of execution of the controller, update\n> SamplerResult, back to the normal JMeter execution (post-processor,\n> assertion, listeners for the controller parallel)\n> \nI rather agree until step 4.\nMy analysis lead me to the same idea of using ransactionController approach.\nBut then I think we will have to modify JMeterThread#process_sampler to handle a kind of ParallelRequestsSampler (like TransactionSampler) that will deliver the children Samplers.\n\n> \n> Constraints:\n> * The JMeter variables must be replaced before or during the course of\n> Parallel Controller?\nWe will have to make JMeterContext thread-safe or have each child have a copy and merge at end of all children \n\n> * What to do for the passage of elements pre-processor, post processors and\n> Assertion of the children? Do not execute this kind of element for children,\n> just for SamplerResult (post and assertion)\nI think Pre/Post processor should be executed on each of parallelController children but users should not make them dependant on each others as order is not guaranteed\nThis will make implementation more complex but I think it's required for correlation. \nIn my experience of GWT Load Testing, I had to put Post Processor to correlate data for next set of requests. If PostProcessor were not executed then scripting would be far more complex.\n\n> Is it necessary to prohibit anything other than HTTP requests in controller\n> Parallel son. Do not put another controller (Simple, If, Loop, etc.) as\n> child of PC?\nI agree with limitation, only accept HttpSamplerBase\n> Within the parameters of Parallel Controller, add the ability to schedule\n> requests children (choice of sequencing, selection of the thread executing\n> unit, etc..)\nIf they are parallel why control sequencing ?"}, {"count": 3, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 158727, "creation_time": "2012-05-02T01:12:49Z", "time": "2012-05-02T01:12:49Z", "bug_id": 53159, "text": "I think we need to be very careful that any implementation does not grow in scope unnecessarily.\n\nSo I think we need to decide in advance what we are trying to model here.\nThis should help decide how best to implement post-processors etc, how to handle cookies etc.\n\nWe don't want to end up implementing a full browser.", "is_private": false}, {"count": 4, "tags": [], "bug_id": 53159, "is_private": false, "text": "Hello,\nOn my side this feature should allow:\nParallel ex\u00e9cution of http sampler (or any sampler)\nEx\u00e9cution of assertions, pr\u00e9-post processors\n\nThe main goal being to simulate today browser behaviour with Ajax.\nBut not simulate full browser ( no Javascript, CSS )\n\nRegards \nPhilippe", "id": 158729, "time": "2012-05-02T06:21:58Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-05-02T06:21:58Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "milamber@apache.org", "is_private": false, "id": 158730, "time": "2012-05-02T06:34:13Z", "bug_id": 53159, "creation_time": "2012-05-02T06:34:13Z", "tags": [], "text": "(In reply to comment #2)\n> Hi Milamber,\n> \n> (In reply to comment #1)\n> > This is an issue on which I have given it some thinking:\n> > Controller \"parallel\" seems a good option. If we follow the model of the\n> > Transaction Controller, which created a new SamplerResult to calculate the\n> > total time of the children elements.\n> > \n> > We can do the same thing:\n> > 1 / Start the Parallel Controller\n> > 2 / Create a SamplerResult\n> > 3 / Create a thread pool (following Download Embedded resource model) with a\n> > configurable size\n> > 4 / Send HTTP requests (child) through the thread pool\n> > 5 / As and when of requests, concatenate the responses in the response data\n> > of SampleResult\n> > 6 / End of the execution of all applications of children Parallel Controller\n> > 7 / Calculate the total time of execution of the controller, update\n> > SamplerResult, back to the normal JMeter execution (post-processor,\n> > assertion, listeners for the controller parallel)\n> > \n> I rather agree until step 4.\n> My analysis lead me to the same idea of using ransactionController approach.\n> But then I think we will have to modify JMeterThread#process_sampler to\n> handle a kind of ParallelRequestsSampler (like TransactionSampler) that will\n> deliver the children Samplers.\n\nThis will complicate the task. Process_sampler method is critical for JMeter.\nI think we should remain independent of the traditional engine of JMeter.\n\nIt may very well have a small motor to handle these parallel requests. This little motor starts with the entry of PC and stops at the end of PC.\nThis little engine will not do all things than process_sampler.\n\n> \n> > \n> > Constraints:\n> > * The JMeter variables must be replaced before or during the course of\n> > Parallel Controller?\n> We will have to make JMeterContext thread-safe or have each child have a\n> copy and merge at end of all children \n> \n> > * What to do for the passage of elements pre-processor, post processors and\n> > Assertion of the children? Do not execute this kind of element for children,\n> > just for SamplerResult (post and assertion)\n> I think Pre/Post processor should be executed on each of parallelController\n> children but users should not make them dependant on each others as order is\n> not guaranteed\n> This will make implementation more complex but I think it's required for\n> correlation. \n> In my experience of GWT Load Testing, I had to put Post Processor to\n> correlate data for next set of requests. If PostProcessor were not executed\n> then scripting would be far more complex.\n\nIf a set of requests waiting some inputs for PostProcessor, then this is a new PC after the first PC.\n|--TG\n|  |--PC1\n|  |    |-- Child11\n|  |    |-- Child12\n|  |    |-- Child13\n|  |    |-- PostProcessor (only on PC1 response data)\n|  |--PC2\n|  |    |-- Child21\n|  |    |-- Child22\n|  |    |-- Child23\n|  |    |-- PostProcessor (only on PC2 response data)\n|  |--Listener (show 2 results)\n\nIn my opinion, the PC just help to simulate (automatically or not) the parallel launch of xmlhttprequest resquests. \n\n> \n> > Is it necessary to prohibit anything other than HTTP requests in controller\n> > Parallel son. Do not put another controller (Simple, If, Loop, etc.) as\n> > child of PC?\n> I agree with limitation, only accept HttpSamplerBase\n> > Within the parameters of Parallel Controller, add the ability to schedule\n> > requests children (choice of sequencing, selection of the thread executing\n> > unit, etc..)\n> If they are parallel why control sequencing ?\n\nBecause, sometimes I suppose we need to control the sequencing, for example, to make sure that a long request start first on the first Thread (of pool).\nOr if there are some differences in browsers's behaviors for execute xmlhttpresquest"}, {"attachment_id": null, "tags": [], "creator": "milamber@apache.org", "text": "(In reply to comment #4)\n\n> \n> The main goal being to simulate today browser behaviour with Ajax.\n\nIn my head, the parallel requests launch by a browser (at the same time) are *independent*.\n\nNot wait for input form another parallel request (in child of same PC), cookies are the clone of the state of cookies from the PC, update cookie are possible at the end of PC.\n\nWe can execute preprocessor on all children of a PC before the start of parallel execution (if this possible)\n\nPostprocessor run on the PC response data which are a concatenate of all response data from their child.\nExample of PC response data:\n=== Start of Child1 ===\n###Headers###\nDate: fdsqfdsfdsfdsq\nContent-type: etc...\n###Body###\nffdsqfdsqfdsfdsfdsqfd\nsqfdsqfdsfdsfds\n=== End of Child1===\n=== Start of Child2 ===\n###Headers###\nDate: fdsqfdsfdsfdsq\nContent-type: etc...\n###Body###\nffdsqfdsqfdsfdsfdsqfd\nsqfdsqfdsfdsfds\n=== End of Child2===\netc", "count": 6, "id": 158731, "time": "2012-05-02T06:49:30Z", "bug_id": 53159, "creation_time": "2012-05-02T06:49:30Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 53159, "attachment_id": null, "id": 158751, "creation_time": "2012-05-02T17:06:56Z", "time": "2012-05-02T17:06:56Z", "creator": "sebb@apache.org", "text": "(In reply to comment #4)\n> Hello,\n> On my side this feature should allow:\n> Parallel ex\u00e9cution of http sampler (or any sampler)\n\nJMeter already provides parallel sampler execution in different threads.\n\nI don't see any use case for any further parallelism except for Ajax.\n\n> Ex\u00e9cution of assertions, pr\u00e9-post processors\n\nSeems to me the pre-processors should only apply to the main request.\n\nAs to assertions and post-processors, what are the use cases for these?\nI'm not saying that there aren't any, but we should be wary of proceeding with the changes - which are likely to be very disruptive - with a very clear understanding of how they are designed to be used.\n\nAgain, without a clear purpose for the changes, it's going to be very difficult to design suitabl tests.\n\n> The main goal being to simulate today browser behaviour with Ajax.\n> But not simulate full browser ( no Javascript, CSS )\n> \n> Regards \n> Philippe", "is_private": false}, {"count": 8, "attachment_id": null, "bug_id": 53159, "is_private": false, "id": 158757, "time": "2012-05-02T20:07:39Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-05-02T20:07:39Z", "tags": [], "text": "(In reply to comment #7)\n> (In reply to comment #4)\n> > Hello,\n> > On my side this feature should allow:\n> > Parallel ex\u00e9cution of http sampler (or any sampler)\n> \n> JMeter already provides parallel sampler execution in different threads.\n> \nI thought about JMS, but I agree it's not high priority\n> I don't see any use case for any further parallelism except for Ajax.\n> \n> > Ex\u00e9cution of assertions, pr\u00e9-post processors\n> \n> Seems to me the pre-processors should only apply to the main request.\n> \nIn a recent campaign I made using GWT RPC (I didn't have parallel feature yet), I faced the following case:\n- Parent page has 8 Ajax Requests\n- To sampler next main (what would be parent) request I had to extract from 1st and 6th information to inject in next sampler. GWT RPC has a format that need to be decoded.\n\nIf we make only parent execute Post Processor, then to implement this, I would have to split parent sampler and try to find the 2 samplers that I need to extract information. As I have no guarantee on execution order it will be very hard to do no ?\nWhile if Post Processor applies to each child, it will be much easier to extract data.\nThe same applies I think for assertions, it would be much easier to find the failing sample.\n\n\n\n> As to assertions and post-processors, what are the use cases for these?\n> I'm not saying that there aren't any, but we should be wary of proceeding\n> with the changes - which are likely to be very disruptive - with a very\n> clear understanding of how they are designed to be used.\n> \n> Again, without a clear purpose for the changes, it's going to be very\n> difficult to design suitabl tests.\n> \n> > The main goal being to simulate today browser behaviour with Ajax.\n> > But not simulate full browser ( no Javascript, CSS )\n> > \n> > Regards \n> > Philippe"}, {"count": 9, "tags": [], "text": "*** Bug 41293 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 164390, "creator": "p.mouawad@ubik-ingenierie.com", "time": "2013-01-04T21:40:52Z", "bug_id": 53159, "creation_time": "2013-01-04T21:40:52Z", "attachment_id": null}, {"count": 10, "attachment_id": null, "bug_id": 53159, "is_private": false, "id": 179646, "time": "2014-12-08T23:54:01Z", "creator": "manjax75@yahoo.com", "creation_time": "2014-12-08T23:54:01Z", "tags": [], "text": "There are methods in HP loadrunner to do this, for example methods like \"web_concurrent_Start\" and \"web_concurrent_end.\"\n\nSo whatever http requests you place within the web_concurrent_start/end methods, all those http requests will be executed at the same exact time even to the millisecond and the completion/end time  to complete the requests is based on the application responsiveness.\nSo the timing to be calculated for this is by taking the request which took the longest time in the set of requests, if you sum up the numbers it would be wrong, because this fails the idea of concurrency. \n\nIf there are 3 requests executed concurrently and the server responds to the first two requests within the same time and third one took a second longer, then the time to be taken is the third requests time and not the sum of all three requests.\n\n\nIt would be great to see this feature come in soon.\n\nwith regards,\nManjunath"}, {"attachment_id": null, "tags": [], "bug_id": 53159, "text": "Any news about this features ? \nNowaday, so many website use AJAX request executed in parallel, this controler is an awesome solution to test this page.", "count": 11, "id": 186374, "time": "2015-11-13T10:29:11Z", "creator": "mchassagneux@apache.org", "creation_time": "2015-11-13T10:29:11Z", "is_private": false}, {"count": 12, "tags": [], "creator": "akshayru@gmail.com", "is_private": false, "text": "Hello JMeter Team,\nAny idea on this feature, this will really avoid lot of redundancy in script, currently we are doing it with workaround but if we get controller it will be easy.", "id": 189727, "time": "2016-03-25T19:47:18Z", "bug_id": 53159, "creation_time": "2016-03-25T19:47:18Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 53159, "is_private": false, "text": "*** Bug 59352 has been marked as a duplicate of this bug. ***", "id": 190392, "time": "2016-04-19T20:44:20Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2016-04-19T20:44:20Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 53159, "attachment_id": null, "id": 190694, "time": "2016-05-02T15:19:47Z", "creator": "patric@rufflar.com", "creation_time": "2016-05-02T15:19:47Z", "is_private": false, "text": "Will JMeter 3.0 finally contain this feature?"}, {"attachment_id": null, "tags": [], "bug_id": 53159, "text": "Please indicate the approximate date od 'Parallel controler'. Please.", "count": 15, "id": 197256, "time": "2017-02-24T14:47:37Z", "creator": "rafal.zdankiewicz@testility.com", "creation_time": "2017-02-24T14:47:37Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "support@ubikloadpack.com", "text": "(In reply to Rafal from comment #15)\n> Please indicate the approximate date od 'Parallel controler'. Please.\n\nHello Rafal,\nThere is no such concept on Apache OSS project.\nOur project is mainly driven by volunteers work and external contributions.\nYou're welcome to contribute such piece of work.\n\nFor now, it's not a priority in our roadmap.\n\nRegards", "count": 16, "id": 197260, "time": "2017-02-24T21:15:42Z", "bug_id": 53159, "creation_time": "2017-02-24T21:15:42Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "apache@leocap.com", "text": "Based on a derived class that I created and tested successfully with Tomcat 8, I suggest the following lines be added to MemoryRealm in order to give it this capability:\n\n\n    private Date _lastUpdate = null;\n    private File _usersFile = null;\n\n\n    public MemoryRealm()\n    {\n        _lastUpdate = new Date();\n        _usersFile = new File( getPathname() );\n    }\n\n\n    /**\n     * The default 10 second value for the Engine's backgroundProcessorDelay XML attribute\n     * will cause this method to be called that often.\n     */\n    @Override\n    public void backgroundProcess()\n    {\n        try {\n            // only reload if file has changed since we last loaded it\n            if( _lastUpdate.getTime() < _usersFile.lastModified() ) {\n                _lastUpdate = new Date();\n\n                log.info( \"reloading \" + getPathname() );\n\n                stop();\n                principals.clear();\n                start(); // trigger a repopulation (from tomcat-users.xml)\n            }\n        }\n        catch( Exception ex ) {\n            log.error( \"Failed to re-initialise realm: \", ex );\n        }\n    }", "id": 186273, "attachment_id": null, "bug_id": 58590, "creation_time": "2015-11-05T17:30:13Z", "time": "2015-11-05T17:30:13Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58590, "attachment_id": null, "id": 186277, "time": "2015-11-05T22:55:29Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-11-05T22:55:29Z", "is_private": false, "text": "1. Code conventions:\nhttp://tomcat.apache.org/getinvolved.html\n\nActually Sun's conventions but with spaces instead of tabs.\n\n2. backgroundProcess() runs frequently. I see no need to perform this work on each run.\n\n3. It shall work without stopping and starting the realm. Users should not be locked from the system while it reloads.\n\n4. MemoryRealm is rarely used.  The usual configuration uses UserDatabaseRealm + MemoryUserDatabase (created by MemoryUserDatabaseFactory).\n\n5. It should be possible to turn this feature on or off.\n\nI do not know what the default should be.\nOn one hand we already have <Host autoDeploy=\"true\"> so we are already checking hard drive by default.\n\nOn other hand, on production systems such setting is likely to be off by default (as there is an expectation that nobody will ever update that file).\n\n6. There shall be an explicit method to reload and an explicit method to perform an up-to-date check - so that it were possible to call them via JMX."}, {"count": 2, "tags": [], "text": "(In reply to Konstantin Kolinko from comment #1)\n\nHi Konstantin,\n\n> 1. Code conventions:\n> http://tomcat.apache.org/getinvolved.html\n> \n> Actually Sun's conventions but with spaces instead of tabs.\n\nOk, I can edit to conform with that.\n\n> 2. backgroundProcess() runs frequently. I see no need to perform this work\n> on each run.\n\nEvery 10 seconds for this container, by default, I believe - that doesn't seem too often to merely check the modified date of a file.\n\n> 3. It shall work without stopping and starting the realm. Users should not\n> be locked from the system while it reloads.\n\nOK, fair point, I can try to address that.\n\n> 4. MemoryRealm is rarely used.  The usual configuration uses\n> UserDatabaseRealm + MemoryUserDatabase (created by\n> MemoryUserDatabaseFactory).\n\nTrue, but it wasn't clear to me how to effect the same change in UserDatabaseRealm and I was a bit pushed for time.\n\n> 5. It should be possible to turn this feature on or off.\n\nAs I wasn't proposing this change for the default Realm I didn't think that was necessary.\n\n> I do not know what the default should be.\n> On one hand we already have <Host autoDeploy=\"true\"> so we are already\n> checking hard drive by default.\n> \n> On other hand, on production systems such setting is likely to be off by\n> default (as there is an expectation that nobody will ever update that file).\n\nI think that setting only relates to .war files ?? AFAIK there is currently no mechanism to force re-reading of tomcat-users.xml without a restart. But I accept that if a user requires runtime user/role loading then they should probably use a JNDI or JDBC-based realm instead. However, I think it's nice to have an out-of-the-box alternative that has this capability. \nI wrote this patch at the bank where I work where we use Tomcat (with the APR) to serve several hundred internal users 24x5. We rarely update tomcat-users.xml but when we do we have to perform a disruptive restart. The patch fixes that, at least.\n \n> 6. There shall be an explicit method to reload and an explicit method to\n> perform an up-to-date check - so that it were possible to call them via JMX.\n\nI hadn't thought of that. But as cool and useful as JMX is, it's beyond a lot of the casual users whom this patch is aimed at, I suspect.\n\nHaving said all that, I'm happy to rework it as best I can in order to address all your points or for you to simply reject it.\n\nKind Regards,\nAidan", "attachment_id": null, "bug_id": 58590, "id": 186278, "time": "2015-11-05T23:34:51Z", "creator": "apache@leocap.com", "creation_time": "2015-11-05T23:34:51Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58590, "attachment_id": null, "id": 186289, "time": "2015-11-06T11:59:07Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-11-06T11:59:07Z", "is_private": false, "text": "Two things:\n\n1. If possible, look at the UserDatabase class to see if you can get that to reload instead of the Realm. If you think about e.g. DatsSourceRealm, it makes more sense to \"reload\" the data source and not the realm itself.\n\n2. Instead of calling _lastUpdate.getTime() each time, why not just store the native long value returned by it? (Also, you can then simply store the value of _usersFile.lastModified instead of creating a new Date object).\n\nAs for Konstantin being picky about your implementation... we get to be as picky about patch submissions as the submitters are willing to tolerate. Since you are motivated to get your patch accepted, we just want to make sure it's as high-quality as possible.\n\nThanks for your contributions!"}]
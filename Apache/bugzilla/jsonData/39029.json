[{"count": 0, "attachment_id": null, "bug_id": 39029, "is_private": false, "id": 86999, "time": "2006-03-19T12:14:53Z", "creator": "raul-info@r-bg.com", "creation_time": "2006-03-19T12:14:53Z", "tags": [], "text": "Hi, \nI have just finished a first implementation of Stax verifier, it only works with\nenveloping signatures(well any signature that appears before the signed data),\nand exclusive c14n, and no transformations.\n\nThe TODO:\n[ ] Do inclusive C14n\n[ ] Design the API for signed data before signature describing it.\n[ ] Do Transformations\n\nFor see how to use it untar the tar in a SVN head, and see the examples in\nsrc_unitTest/com/r_bg/stax/*\n\nCan people wanting to use stax verification(WS guys) see if the API fits its needs."}, {"count": 1, "tags": [], "bug_id": 39029, "text": "Created attachment 17918\nFirst version", "id": 87000, "time": "2006-03-19T12:16:31Z", "creator": "raul-info@r-bg.com", "creation_time": "2006-03-19T12:16:31Z", "is_private": false, "attachment_id": 17918}, {"count": 2, "tags": [], "bug_id": 39029, "attachment_id": null, "id": 87120, "time": "2006-03-22T19:56:49Z", "creator": "chris@lotuscat.com", "creation_time": "2006-03-22T19:56:49Z", "is_private": false, "text": "I have started to review the Stax architecture for xml security submitted in the\nattachment and have a few comments:\n1. Change StaxSignatureVerifcator to StaxSignatureVerifier\n2. I don't see how the current structure would work with an XMLStreamReader\ncontaining more than one signature, the code seems to start from the current\nposition and seek until end. I think a better \"contract\" might be that the\nfactory or filtered reader just read until a matching pair of start sig / end\nsig tags are found. That way the caller could get another sig verified by moving\nthe XMLStreamReader forward themselves.\n3. I see plenty of 1.5-isms, this may be ok, but then we need to make sure the\ndocumentation is clear that Java 1.5+ is needed to use this part of the library.\n4. Unit tests use RSA, which I believe requires a 3rd-party JCE. Perhaps having\nthe unit tests use DSA so they work w/o an external JCE would be better. I also\nplan to use DSA in my code for this reason (don't want to require a 3rd-party JCE)."}, {"count": 3, "tags": [], "bug_id": 39029, "attachment_id": null, "id": 87163, "time": "2006-03-23T19:05:49Z", "creator": "raul-info@r-bg.com", "creation_time": "2006-03-23T19:05:49Z", "is_private": false, "text": "(In reply to comment #2)\nFirst of all thanks for your time and your comments. They are really appreciated.\n\n\n> 1. Change StaxSignatureVerifcator to StaxSignatureVerifier\nDone, Thanks\n\n> 2. I don't see how the current structure would work with an XMLStreamReader\n> containing more than one signature, the code seems to start from the current\n> position and seek until end. I think a better \"contract\" might be that the\n> factory or filtered reader just read until a matching pair of start sig / end\n> sig tags are found. That way the caller could get another sig verified by moving\n> the XMLStreamReader forward themselves.\nYou can ask the Filter wich signature you want using\nStaxValidateContext.setSignatureNumber(int number) method, but right now is just\nhardcode to the first one.\nRegarding the sugestion for the \"contract\", I was thinking in two different Uses\ncases:\n  1.- Aspect oriented: A part of the code sets the expectations to the verifier\nfilter, and handles the stream reader to the rest of the program that are not\n\"Signature\" aware. When the program finish reading the stream it asks the filter\nfor the correctness of the Signature expectations. This the current api, but\nthere's still a lot of things to do.\n  2.- In the another use case the application is aware of the \"Signature\" and\nnotifies the Filter when the element referenced begins, and to what signature it\nbelongs. This API is still undone, and I want to wait to finish the \"aspect\" one\nbefore begining with this.\n> 3. I see plenty of 1.5-isms, this may be ok, but then we need to make sure the\n> documentation is clear that Java 1.5+ is needed to use this part of the library.\nMy intention is that the library requires java 1.3 like the rest of the xml-sec\nlibrary. Using 1.5-ism was just for fun...\n\n> 4. Unit tests use RSA, which I believe requires a 3rd-party JCE. Perhaps having\n> the unit tests use DSA so they work w/o an external JCE would be better. I also\n> plan to use DSA in my code for this reason (don't want to require a 3rd-party\nJCE).\nThe RSA comes with sun java 1.4 and 1.5 it does not need any 3rd party JCE.\nPerhaps IBM or BEA jce don't contain this cypher.\n\n\nAgain thanks for your sugestions. If you have more don't hesitate..."}, {"count": 4, "tags": [], "bug_id": 39029, "text": "New PATCH\nHi, a new version of the patch that happens to decode and verify and SAML\nassertion(a enveloped signature). So enveloped and detached-before-the-signature\nsignatures are supported right now. \nThe API used is the signature/reference aware. \nI'm going to concetrate in:\n  *Inclusive C14n support: it's going to be a parameter passed when obtaining\nthe filter as it slows the parsing, as it must store the xml:* attributes.\n  *Refactor & Documentation: I'm going to do some refactor and create some\ndiagrams of the internal workings, I plan to publish all these things in my blog.\n\nThe TODO:\n[ ] Do inclusive C14n\n[X] Design the API for signed data before signature describing it.\n[ ] Do Transformations\n[ ] Refactor\n[ ] And documentation\n[ ] Optimize for speed not for easy debugging. :(\n[ ] Keys/Cert decoding...", "id": 89540, "time": "2006-05-27T17:08:24Z", "creator": "raul-info@r-bg.com", "creation_time": "2006-05-27T17:08:24Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 39029, "is_private": false, "id": 89541, "attachment_id": 18360, "creator": "raul-info@r-bg.com", "creation_time": "2006-05-27T17:09:27Z", "time": "2006-05-27T17:09:27Z", "text": "Created attachment 18360\nA new version of the stax signature validator"}, {"count": 6, "tags": [], "bug_id": 39029, "attachment_id": 19265, "id": 96948, "time": "2006-12-15T08:20:07Z", "creator": "raul-info@r-bg.com", "creation_time": "2006-12-15T08:20:07Z", "is_private": false, "text": "Created attachment 19265\nA new patch with signature verification\n\nHi,\nAs work related to my master thesis, I have been working on this patch a\nlittle. Now it can check if the signature was tampered, and it is much faster\nand can handler any length documents (that is the main point of my master\nthesis). I will publish the doc, and the powerpoint of it in my webpage. But\nsadly it is written in Spanish. But anyway I think is useful as it contains\nsome graphics showing the memory consumption of the DOM library versus the STAX\nlibrary. \n\nIf anybody wants to play with it have fun.\n\nChangelog:\n* Siganture & reference validation (the patch before only does reference\nvalidation) \n* Size & Performance improvement: the patch can handle now arbitrary big\ndocuments, and the performance is better. \n\nTODO:\n* Inclusive C14n\n* Enveloped signature verification.\n* UTF16->UTF8 optimizations"}]
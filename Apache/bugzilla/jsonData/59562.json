[{"count": 0, "attachment_id": null, "bug_id": 59562, "is_private": false, "id": 191027, "time": "2016-05-17T14:45:04Z", "creator": "g.querret@riverside-software.fr", "creation_time": "2016-05-17T14:45:04Z", "tags": [], "text": "Using this test case, I see a different behavior on Windows and Linux ; I'm\ncreating two files, then generating a ZIP file (with regexpmapper to rename\nfiles), wait a few seconds (just in case there's  FS timestamp problem) and\nre-execute the same Zip task.\nOn Linux, the second Zip task doesn't do anything (as expected) as the\nfiles are not modified.\nOn Windows, the Zip file is always updated. With -v, I'm getting :\n      [zip] us/xx/xxtest.r added as us/xx/xxtest.r is outdated.\n      [zip] us/zz/zztest.r added as us/zz/zztest.r is outdated.\nUsing Ant 1.9.7, JDK 1.8 on both systems.\n\nAm I doing something wrong, or is there a bug ?\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project name=\"test\">\n <mkdir dir=\"src\" />\n <touch file=\"src/xxtest.r\" />\n <touch file=\"src/zztest.r\" />\n <zip destFile=\"foo.zip\">\n   <mappedresources>\n    <fileset dir=\"src\" includes=\"*.r\" />\n    <regexpmapper from=\"^(([a-z][a-z]).*)\\.r\" to=\"us/\\2/\\1.r\" />\n   </mappedresources>\n </zip>\n <sleep seconds=\"5\" />\n <zip destFile=\"foo.zip\">\n   <mappedresources>\n    <fileset dir=\"src\" includes=\"*.r\" />\n    <regexpmapper from=\"^(([a-z][a-z]).*)\\.r\" to=\"us/\\2/\\1.r\" />\n   </mappedresources>\n </zip>\n</project>"}, {"count": 1, "tags": [], "creator": "g.querret@riverside-software.fr", "text": "Created attachment 33846\nJUnit test case", "id": 191028, "time": "2016-05-17T14:45:31Z", "bug_id": 59562, "creation_time": "2016-05-17T14:45:31Z", "is_private": false, "attachment_id": 33846}, {"count": 2, "tags": [], "bug_id": 59562, "attachment_id": 33847, "id": 191029, "creation_time": "2016-05-17T14:45:55Z", "time": "2016-05-17T14:45:55Z", "creator": "g.querret@riverside-software.fr", "text": "Created attachment 33847\nJUnit test case (xml file)", "is_private": false}, {"count": 3, "tags": [], "bug_id": 59562, "attachment_id": null, "id": 191043, "creation_time": "2016-05-17T20:25:06Z", "time": "2016-05-17T20:25:06Z", "creator": "g.querret@riverside-software.fr", "text": "I think I've found the issue, but would like to get confirmation : the granularity of file timestamps is different on NTFS and Linux filesystems (1 and 2000 respectively), however it seems that file entries in ZIP files have a different granularity. From my tests, I'm always gettings timestamps from ZIP file which are 1.5 seconds more recent than file timestamps, so the ZIP file is not updated on Unix (less than 2 seconds), but not on Windows (only 1ms granularity).\nDoes anybody have enough knowledge of ZIP files to confirm that ?\nA fix could be to have a different granularity based on the resource type we're trying to update, but I don't know how easy it would be to do that.", "is_private": false}, {"count": 4, "tags": [], "bug_id": 59562, "attachment_id": null, "id": 191046, "creation_time": "2016-05-18T03:59:32Z", "time": "2016-05-18T03:59:32Z", "creator": "bodewig@apache.org", "text": "Yes, there are different granularities in this scenario. First of all, ZIPs store file times with a granularity of two seconds - and I think this is true for FAT and NTFS as well. Most file-system types on Unix use a granularity of seconds or even lower than that.\n\nThe default behavior if the zip task is to round the file time up to the next even number of seconds in order to avoid the situation you describe - see the task's roundup attribute. What you see implies it didn't work correctly.", "is_private": false}, {"count": 5, "tags": [], "bug_id": 59562, "attachment_id": null, "id": 191048, "creation_time": "2016-05-18T06:47:26Z", "time": "2016-05-18T06:47:26Z", "creator": "g.querret@riverside-software.fr", "text": "I'd say the roundup method is working correctly and as expected. To my mind, the problem lies in org.apache.tools.ant.types.selectors.SelectorUtils#isOutOfDate(Resource src, Resource target, long granularity) method which is called when we determine if a file has to be updated. This works correctly for filesystem resources on Windows, as the parameter granularity is set to 1 which is the right value on NTFS. This granularity is found in org.apache.tools.ant.util.FileUtils#getFileTimestampGranularity(). When working with ZIP file, this method should return 2000 in order to counterbalance the roundup.\n\nAn easy fix (but I don't know the impact yet) would be to replace at line 1545 of org.apache.tools.ant.taskdefs.Zip the call to ResourceUtils.selectOutOfDateSources(this, rs, mapper, getZipScanner()) with ResourceUtils.selectOutOfDateSources(this, rs, mapper, getZipScanner(), 2000L) so that granularity would be set at the ZIP file level instead of inheriting from the OS specific value.", "is_private": false}, {"count": 6, "tags": [], "creator": "g.querret@riverside-software.fr", "text": "Unit tests are OK with this change, including the one I've added to test this behavior.\nWhat does it take to have the change included in the master branch ?", "id": 191054, "time": "2016-05-18T15:04:21Z", "bug_id": 59562, "creation_time": "2016-05-18T15:04:21Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 59562, "text": "Your idea of a fix looks correct, I'm working on integrating your changes.", "id": 191066, "time": "2016-05-19T04:27:45Z", "creator": "bodewig@apache.org", "creation_time": "2016-05-19T04:27:45Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 59562, "attachment_id": null, "id": 191067, "creation_time": "2016-05-19T04:40:51Z", "time": "2016-05-19T04:40:51Z", "creator": "bodewig@apache.org", "text": "Applied your patch and suggestion with commit 0edf3ca - will be fixed in 1.9.8 and 1.10.0.", "is_private": false}]
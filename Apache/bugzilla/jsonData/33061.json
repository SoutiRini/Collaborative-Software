[{"count": 0, "tags": [], "bug_id": 33061, "attachment_id": null, "id": 69592, "creation_time": "2005-01-12T12:45:27Z", "time": "2005-01-12T12:45:27Z", "creator": "preuss@disy.net", "text": "Our situation:\n\nWe do have a product build from 80+ modules. Each module has its own \nbuildscript, which is called from a master buildscript. The module build \nscripts define custom tasks, which make use of thirdparty libraries, for \nexample Dom4J. Now, since we introduced those custom tasks, we get \nOutOfMemoryErrors somewhere in the build process, even if we give it incredible \namounts of memory (1 GB, for example).\n\nWe don't get this error when putting dom4j.jar into the Ant classpath, so this \nis a workaround for now. It isn't acceptable for the long term though, as we \nplan to use even more custom tasks which might use other thirdparty libraries \nand have to maintain several Ant installations, so this would represent too big \na maintenance burden.\n----\nReproducing the problem:\n\nThe attached zipfile contains four files to reproduce the problem:\n- a minimal custom task using Dom4J\n- a minimal test.xml that is loaded by the custom task using Dom4J\n- a subbuild.xml which defines the task and calls it\n- a build.xml which simply calls subbuild.xml a huge amount of times\n\n* compile DummyTask.java\n* update the classpath definition in subbuild.xml to your local environment\n* run build.xml using Ant 1.6.2, JDK 1.4.2, without having dom4j.jar in the \nclasspath, giving it 2MB of heap (-mx2m). After some time, you get an \nOutOfMemoryError\n* try the same with dom4j.jar in the Ant classpath. You don't get the error.\n----\nAnalysis:\n\nAdding some debug statements to AntClassLoader and running Ant in JProfiler, it \nbecomes obvious that neither the AntClassLoader, nor the Dom4J classes used for \nloading and executing the custom task ever get garbage collected. Those classes \nbuild up in memory until it comes to the OutOfMemoryError.", "is_private": false}, {"count": 1, "tags": [], "bug_id": 33061, "attachment_id": 13979, "text": "Created attachment 13979\nfiles needed to reproduce the problem\n\nFiles needed for following the instructions in the initial bug report to\nreproduce the problems.", "id": 69593, "time": "2005-01-12T12:49:24Z", "creator": "preuss@disy.net", "creation_time": "2005-01-12T12:49:24Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 33061, "is_private": false, "text": "Hmm, we had a memory leak which was fixed before Ant 1.6.2\n<http://cvs.apache.org/viewcvs.cgi/ant/src/main/org/apache/tools/ant/AntClassLoader.java?r1=1.76.2.6&r2=1.76.2.7>\n\nTesting with CVS HEAD I can see the memory usage grow as you describe.", "id": 71188, "time": "2005-02-18T15:11:40Z", "creator": "bodewig@apache.org", "creation_time": "2005-02-18T15:11:40Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 33061, "is_private": false, "text": "I hit the same problem, as the unit tests I run involve repeated calls to a\ntarget in another build file.  The workaround I implemented was to set \n\nANT_OPTS=-XX:+AggressiveHeap\n\nAccording to Sun, this should only be helpful on multiprocessor machines, as it\nuses multiple GC threads, but the single CPU hyperthreaded machine on which I\nbuild seems able to take advantage of it.\n\nNot really a fix, but hopefully someone will find this useful.", "id": 76656, "time": "2005-06-23T17:10:37Z", "creator": "sjwadsw@pacbell.net", "creation_time": "2005-06-23T17:10:37Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 82114, "time": "2005-11-04T06:16:17Z", "bug_id": 33061, "creation_time": "2005-11-04T06:16:17Z", "is_private": false, "text": "Ilja, can you confirm that setting -XX,+AggressiveHeap works for you as well?"}, {"attachment_id": null, "tags": [], "bug_id": 33061, "text": "Using task/type def in child projects is always problematic.\nYou could try to rearrange the build file to get the taskdef\ndone in the master build file.", "count": 5, "id": 82127, "time": "2005-11-04T12:58:32Z", "creator": "peterreilly@apache.org", "creation_time": "2005-11-04T12:58:32Z", "is_private": false}, {"count": 6, "tags": [], "creator": "Fredrik.Z.Persson@ericsson.com", "attachment_id": null, "id": 86261, "time": "2006-02-27T20:07:39Z", "bug_id": 33061, "creation_time": "2006-02-27T20:07:39Z", "is_private": false, "text": "I also get OutOfMemoryError, but with a empty execute method.\nThe memory footprint for the ant java process increases 3 times.\n"}, {"count": 7, "tags": [], "creator": "peterreilly@apache.org", "text": "Thanks for the build file, it was a *big* help\nin tracking down this bug.\n\nWith the fix, I can now call <ant antfile=\"subbuild.xml\"/>\n10,000 times without oome.\n\n  <target name=\"loop\">\n    <ac:for param=\"ignore\" end=\"10000\">\n      <sequential>\n        <ant antfile=\"subbuild.xml\" />\n      </sequential>\n    </ac:for>\n  </target>\n\n\n*** This bug has been marked as a duplicate of 28283 ***", "id": 94909, "time": "2006-10-17T14:59:25Z", "bug_id": 33061, "creation_time": "2006-10-17T14:59:25Z", "is_private": false, "attachment_id": null}]
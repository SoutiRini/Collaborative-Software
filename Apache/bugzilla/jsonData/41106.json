[{"count": 0, "tags": [], "bug_id": 41106, "attachment_id": null, "id": 96527, "time": "2006-12-04T13:57:47Z", "creator": "stan@jboss.com", "creation_time": "2006-12-04T13:57:47Z", "is_private": false, "text": "Some JSF taglibs such as Ajax4JSF mark the jsp-version tag in the TLD like this:\n<jsp-version>1.2</jsp-version>\n\nThen if a developer says something like action=\"#{foo}\" in an Ajax4JSF tag, he\nwill get this:\n\nThis causes Ajax4JSF to fail with this error:\norg.apache.jasper.JasperException: /index.jsp(26,4) According to TLD or\nattribute directive in tag file, attribute action does not accept any expressions\n\torg.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:40)\n\torg.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:406)\n\torg.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:147)\n\nJasper tries to check the <jsp-version> in the TLD to see if the version is 2.1\nand the attribute is not allowing deferred expressions.  However, pre-2.1, \"#{\"\nhad no meaning and was always allowed.\n\nIn Validator.java, Jasper has this line:\nboolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n\nThe problem is that while the logic will work if the TLD says\n<jsp-version>2.0</jsp-version>, it won't work for any jsp-version below that.\n\nA better way would be to say something like:\nfloat taglibRequiredVersion =\nFloat.parseFloat(tagInfo.getTagLibrary().getRequiredVersion());\nboolean checkDeferred = taglibRequiredVersion > 2.0f;\n\nI tried this and it works.  However, this is not a complete fix because it\ndoesn't catch NumberFormatException.\n\nAlso, some refactoring might be in order because this same logic is found\nelsewhere in Validator.java and also in TagFileDirectiveVisitor.  I'm not sure\nif the logic in those two places is correct or not.\n\nI'm attaching a war with a simple tag that demonstrates the problem.\n\nStan"}, {"count": 1, "attachment_id": 19215, "bug_id": 41106, "is_private": false, "id": 96528, "time": "2006-12-04T14:00:30Z", "creator": "stan@jboss.com", "creation_time": "2006-12-04T14:00:30Z", "tags": [], "text": "Created attachment 19215\nwar for testing"}, {"count": 2, "tags": [], "bug_id": 41106, "attachment_id": null, "is_private": false, "id": 96530, "time": "2006-12-04T15:27:28Z", "creator": "remm@apache.org", "creation_time": "2006-12-04T15:27:28Z", "text": "I am not totally convinced this is really a bug. Maybe. Elsewhere in the class,\nthere's a check for 1.2 and 2.0, which seems more accurate (and easier)."}, {"count": 3, "tags": [], "text": "You could also say:\n\nboolean checkDeferred = (!version.equals(\"1.2\") && !version.equals(\"2.0\"))\n\nThat takes advantage of the fact that 1.2,2.0, and 2.1 are the only versions\nwhere the <jsp-version> tag was defined.  However, doing it that way doesn't\nallow someone to say <jsp-version>1.1</jsp-version>.  Maybe it shouldn't be\nallowed so you throw an error in that case?\n\nAs for it being a bug, I'm quite certain.  An application written for JSP 1.2\nshould run the same in JSP 2.1.  As of now, that is not true for taglibs with\n<jsp-version>1.2</jsp-version>.  Backward compatibility is broken if an\nattribute value starts with \"#{\".  Just try the WAR in Tomcat 5.5 and you will\nsee that it works.", "attachment_id": null, "id": 96531, "creator": "stan@jboss.com", "time": "2006-12-04T16:16:28Z", "bug_id": 41106, "creation_time": "2006-12-04T16:16:28Z", "is_private": false}, {"count": 4, "tags": [], "text": "BTW, I suspect that this code in Validator.java is wrong as well (and I don't\nmean just the JSP 2.2 comment (-: )\n\n            // JSP.2.2 - '#{' not allowed in template text\n            if (n.getType() == '#') {\n                if (!pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                        && (tagInfo == null \n                                || ((tagInfo != null) &&\n!tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")))) {\n                    err.jspError(n, \"jsp.error.el.template.deferred\");\n                } else {\n                    return;\n                }\n            }", "is_private": false, "id": 96533, "creator": "stan@jboss.com", "time": "2006-12-04T16:42:22Z", "bug_id": 41106, "creation_time": "2006-12-04T16:42:22Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 41106, "is_private": false, "text": "I don't really see what these old tags should do with new pages and EL. Maybe\nit's supposed to remain compatible, but it does not make that much sense to me.\nIt's fixed now.", "id": 96540, "time": "2006-12-05T05:10:42Z", "creator": "remm@apache.org", "creation_time": "2006-12-05T05:10:42Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 41106, "text": "FYI\n\nThe old JSF tags processed the EL themselves.  That's the root of the problem. \nSo for an Ajax4JSF tag might look like this:\n\n<a4j:commandButton actionListener=\"#{mybean.action}\"/>\n\nThe tag would delegate to JSF 1.1 for processing the EL.  This component still\nworks in JSF 1.2 but now JSF 1.2 delegates back to the EL impl included in JSP\n2.1.  So, the old JSF tags need #{mybean.action} to be passed in as a simple\nString instead of a MethodExpression or ValueExpression object.", "id": 96542, "attachment_id": null, "creator": "stan@jboss.com", "creation_time": "2006-12-05T06:27:17Z", "time": "2006-12-05T06:27:17Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Created attachment 21930\njava source prog. used to demonstrate the problem\n\nHello All, \n\n\nProblem\n-------\n\nUsing poi-3.1-beta2-20080506.jar ...\n\nIf a worksheet cell contains a VLOOKUP formula ( signature = VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup]) ), then evaulation of the formula fails if the \"table_array\" value contains a reference to another worksheet.\n\ni.e.\n=VLOOKUP(Sheet1!A1, Sheet2!A1:B2, 2, 0)\n\nUsing the HSSFFormulaEvaluator.evaluateInCell() method, when it comes across a cell with a VLOOKUP such as the one above, the following Java exception is displayed:\n\njava.lang.NumberFormatException: You cannot get an error value from a non-error cell\n        at org.apache.poi.hssf.usermodel.HSSFCell.getErrorCellValue(HSSFCell.java:889)\n        at org.apache.poi.hssf.usermodel.HSSFCell.setCellType(HSSFCell.java:476)\n        at org.apache.poi.hssf.usermodel.HSSFCell.setCellType(HSSFCell.java:316)\n        at org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.evaluateInCell(HSSFFormulaEvaluator.java:235)\n        at VLookupBug.evaluateAllFormulasInCell(VLookupBug.java:55)\n        at VLookupBug.main(VLookupBug.java:98)\n\nUsing HSSFFormulaEvaluator.evaluate() also does not work, with the cell type coming back as CELL_TYPE_ERROR and \"#N/A\" as the actual value.\n\n\nIf the VLOOKUP function does NOT contain a reference to another sheet in its \"table_array\" field, all works fine with POI.\n\ni.e.\n=VLOOKUP(Sheet1!A1, A1:B2, 2, 0)\n\nworks okay.\n\n\nExpected Behaviour\n------------------\n\nWell, this signature of VLOOKUP works in Excel, so was hoping it would work in POI as well.\n\n\nTo Replicate\n------------\n\nSee attached Excel spreadsheet, and Java source prog (compiled with JDK 1.5, but don't think the version is relevant).\n\nOnce compiled, \n\nprompt% java VLookupBug vlookup_bug.xls \n\nshows the problem.\n\n\n\nAny ideas first before I start digging about in Formula Evaluator code?\n\n\nCheers and muchas thanks as always!\n\nDave", "is_private": false, "bug_id": 44950, "id": 116342, "time": "2008-05-07T08:28:06Z", "creator": "dave.webster@virginmedia.co.uk", "creation_time": "2008-05-07T08:28:06Z", "attachment_id": 21930}, {"count": 1, "tags": [], "text": "Created attachment 21931\nExcel file showing failing VLOOKUP function", "is_private": false, "bug_id": 44950, "id": 116343, "time": "2008-05-07T08:28:52Z", "creator": "dave.webster@virginmedia.co.uk", "creation_time": "2008-05-07T08:28:52Z", "attachment_id": 21931}, {"attachment_id": null, "tags": [], "creator": "josh@apache.org", "is_private": false, "count": 2, "id": 116365, "time": "2008-05-07T18:03:53Z", "bug_id": 44950, "creation_time": "2008-05-07T18:03:53Z", "text": "Fixed in svn r654356.\n\nThe Vlookup impl was working OK, but there were 2 bugs elsewhere, so I changed the summary of this bugzilla.\n\nThe problem only surfaced if you use a 3D area reference.  This first problem resulted in Vlookup returning '#N/A'.  A secondary problem was in HSSFFormulaEvaluator.evaluateInCell(), that prevented the '#N/A' error code from being set in the cell. The following code shows that error by itself:\n\nHSSFWorkbook wb = new HSSFWorkbook();\nHSSFSheet sheet = wb.createSheet(\"Sheet1\");\nHSSFRow row = sheet.createRow(1);\nHSSFCell cell = row.createCell((short) 0);\ncell.setCellFormula(\"na()\");'#N/A'\nHSSFFormulaEvaluator fe = new HSSFFormulaEvaluator(sheet, wb);\nfe.setCurrentRow(row);\nfe.evaluateInCell(cell);\n\n\n2 new junit test cases were added for these bugs.\n\nThe common code of Area2DEval and Area3DEval was abstracted into a new superclass.  An additional check was added to make sure that the number of elements in the values array agrees with the row/col size of the area ref Ptg.  Some junits needed updating."}]
[{"count": 0, "tags": [], "creator": "jchampion@apache.org", "attachment_id": null, "id": 194190, "time": "2016-10-06T18:11:24Z", "bug_id": 60212, "creation_time": "2016-10-06T18:11:24Z", "is_private": false, "text": "RFC 7234 requires the following:\n\n   A cache MUST invalidate the effective Request URI (Section 5.5 of\n   [RFC7230]) as well as the URI(s) in the Location and Content-Location\n   response header fields (if present) when a non-error status code is\n   received in response to an unsafe request method.\n\n   However, a cache MUST NOT invalidate a URI from a Location or\n   Content-Location response header field if the host part of that URI\n   differs from the host part in the effective request URI (Section 5.5\n   of [RFC7230]).  This helps prevent denial-of-service attacks.\n\nThe code put in place to do the Location/Content-Location invalidation doesn't appear to work properly, though. It has two problems that I can see:\n\n1) The Location/Content-Location header value is passed directly to cache_canonicalise_key, but that function expects a URI path, not an absolute URI (which Location is required to be, and Content-Location *may* be). This results in a useless cache key (e.g. \"http://example.com:80http://example.com/path/to/resource\").\n\n2) The check for identical host parts always seems to fail, since r->parsed_uri.hostname is always NULL in my testing. This ensures that no invalidation is ever run. Perhaps we should be using the server hostname instead (possibly as defined by the CacheKeyBaseURL, or else ap_get_server_name())?"}]
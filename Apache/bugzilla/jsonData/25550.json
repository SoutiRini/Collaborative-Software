[{"count": 0, "tags": [], "bug_id": 25550, "is_private": false, "text": "when calling apr_rmm_malloc, I've experienced severe mm corruption when asking for \nmore than there is available from rmm.\n\nTypically, it will induce segfaults all over.", "id": 49167, "time": "2003-12-16T00:18:57Z", "creator": "gozer@apache.org", "creation_time": "2003-12-16T00:18:57Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "gozer@apache.org", "attachment_id": 9592, "id": 49168, "time": "2003-12-16T00:19:33Z", "bug_id": 25550, "creation_time": "2003-12-16T00:19:33Z", "is_private": false, "text": "Created attachment 9592\npatch to rmmtest.c to trigger the bug"}, {"count": 2, "tags": [], "bug_id": 25550, "attachment_id": 9593, "text": "Created attachment 9593\nStack trace in apr_rmm_free", "id": 49169, "time": "2003-12-16T00:20:27Z", "creator": "gozer@apache.org", "creation_time": "2003-12-16T00:20:27Z", "is_private": false}, {"count": 3, "tags": [], "creator": "eabouzou@yahoo.com", "attachment_id": null, "is_private": false, "id": 53819, "time": "2004-03-10T17:04:45Z", "bug_id": 25550, "creation_time": "2004-03-10T17:04:45Z", "text": "I have just ran into this problem and I traced through the code and I know\nwhere the problem is comming from. First, what I've seen is exactly what\nPhilippe M. Chiasson has described, if you try to allocate memory by calling \napr_rmm_malloc and there is not enough memory left in RMM, it will simply \noverwrite over previously allocated memory causing a segmentaiton fault when\none tries to access the overwritten memory. I traced through the code and I\nmanaged to find the source of the problem:\nin apr_rmm.c line 129 (inside the function find_block_of_size), there is a line\nthat reads:\nif (bestsize - size > sizeof(struct rmm_block_t*)) {\n\nthis line has unsigned arithmetic error, when there is no enough memory left to\nsatisfy the requested size, bestsize value is 0. Say requested size is 28, So\n0 - 28 = -28 but because bestsize and size are (unsigned it) that minus number\nbecomes a huge positive number, 4294967268, which is ofcourse > sizeof(struct \nrmm_block_t*) causing the if statement to evaluate to true instead of false.\nNow things get messed up really bad, since best is 0 so this causes an \n(rmm_block_t) blk to get writtin overtop of rmm->base messing up memory that's \nalready in use and eventually a crash when that memory is referenced. \n\nI suggest that line changes to the following:\nif (bestsize > sizeof(struct rmm_block_t*) + size ) {\n"}, {"count": 4, "text": "\n  Philippe any chance of testing & commenting on Ahab's report?  Would be nice\n  to commit this fix - but it would help if you would verify the solution first.\n\n", "bug_id": 25550, "is_private": false, "id": 54021, "time": "2004-03-15T17:46:29Z", "creator": "wrowe@apache.org", "creation_time": "2004-03-15T17:46:29Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "creator": "gozer@apache.org", "attachment_id": 10792, "is_private": false, "id": 54028, "time": "2004-03-15T18:41:33Z", "bug_id": 25550, "creation_time": "2004-03-15T18:41:33Z", "text": "Created attachment 10792\nBetter patch to the rmm test to expose this problem"}, {"count": 6, "tags": [], "creator": "gozer@apache.org", "attachment_id": null, "id": 54029, "time": "2004-03-15T18:42:33Z", "bug_id": 25550, "creation_time": "2004-03-15T18:42:33Z", "is_private": false, "text": "I've applied the suggested patch and it does seem to fix the problem.\n\nSince people reported problems reproducing this with my orignal patch to the\ntest suite, I've made a new test that is probably more likely to expose this\nproblem.\n\n"}, {"count": 7, "tags": [], "bug_id": 25550, "attachment_id": null, "id": 54092, "time": "2004-03-16T18:19:57Z", "creator": "wrowe@apache.org", "creation_time": "2004-03-16T18:19:57Z", "is_private": false, "text": "  I will presume the extra * was a typo, attached is the patch committed\n  already to head.\n\n  Reassure me you were adding the struct size, and not a pointer size, \n  and I'll backport.  That or explain my misunderstanding."}, {"count": 8, "text": "Created attachment 10817\nPastch applied to 1.0 apr-util awaiting backport to 0.9", "bug_id": 25550, "is_private": false, "id": 54094, "time": "2004-03-16T18:28:52Z", "creator": "wrowe@apache.org", "creation_time": "2004-03-16T18:28:52Z", "tags": [], "attachment_id": 10817}, {"count": 9, "tags": [], "bug_id": 25550, "attachment_id": null, "id": 54095, "time": "2004-03-16T18:31:49Z", "creator": "wrowe@apache.org", "creation_time": "2004-03-16T18:31:49Z", "is_private": false, "text": "\n  Ahab can you verify if the * in your sizeof(apr_rmm_block_t*) comments\n  was a typo?  Thats a pointer size allocation, not the block struct size.\n"}, {"count": 10, "tags": [], "bug_id": 25550, "attachment_id": null, "text": "I copied that line as is from the source code I have. This is the tar file I \ndownloaded for the source: httpd-2.0.40-i686-pc-linux-gnu-rh73.tar.gz\nThis was the latest source for Linux i686 rh 7.3 I could find.\nHaving said that though, you are correct, Will, that there should NOT be a * in \nthe sizeof statement as I think about it now. So the correct line should read:\n\nif (bestsize > sizeof(struct rmm_block_t) + size ) {\n\nWe are basically saying, if we found a block of 'bestsize' that is at least \nenough to hold both the requested memory size 'size' PLUS the 12 bytes, say, \nfor rmm_block_t structure, the \"housekeeping\" information structure, then go \nahead and allocate the memory.\nThat is how I understand it.\n\n", "id": 54100, "time": "2004-03-16T19:46:18Z", "creator": "eabouzou@yahoo.com", "creation_time": "2004-03-16T19:46:18Z", "is_private": false}, {"count": 11, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 54128, "time": "2004-03-17T04:55:26Z", "bug_id": 25550, "creation_time": "2004-03-17T04:55:26Z", "is_private": false, "text": "  Verified by gozer, thanks for the feedback Ahab - backported to the 0.9 branch.\n\n  Closing"}]
[{"text": "This bug has been seen on two different servers, with two different\nversions of apache 2 using the worker MPM.\n\nSun Netra (1 CPU), Solaris 8, apache 2.0.47, occurred 5 times over last 3 months.\nSun E450 (4 CPU), Solaris 7, apache 2.0.48, occurred 3 times over last week.\n\nOn both of the above systems we have seen an apache httpd process rapidly\n(in a few minutes) grow to > 1 GB in size until the system swap is exhausted\nand processes start failing due to low memory.\n\nThis is a fairly standard install of Apache 2.0 using the worker MPM.\nSSI gets used a great deal on these systems.  There are two non standard\napache modules installed, mod_jk 1.2.5 and a thread safe version of\nmod_auth_mysql for apache 2.  The problem has been seen in instances of\napache which is not using mod_jk.\n\nWhen this has occurred I have truss'd the process.  Trussing the process\nresults in no output so when the httpd process runs away like this it is\nnot using sytem io calls.\n\nWe have generated core files for the runaway processes using gcore but\nSun's dbx could not analyze the core file, it says they are corrupt.\n\nWe are trying to catch this problem when it occurs early enough so we\ncan get a good core file to analyze but have not been able to yet.\n\nAny tips on how to debug this problem would be appreciated.\n\nThanks,\n\nGlenn", "tags": [], "bug_id": 26799, "is_private": false, "count": 0, "id": 52004, "time": "2004-02-09T18:45:34Z", "creator": "glenn@apache.org", "creation_time": "2004-02-09T18:45:34Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 26799, "attachment_id": null, "is_private": false, "id": 52090, "time": "2004-02-11T03:26:52Z", "creator": "glenn@apache.org", "creation_time": "2004-02-11T03:26:52Z", "text": "I have added the following to our apache start scripts to try\nand limit the damage from these runaway httpd processes.\n\nulimit -d 262144\nulimit -v 262144\n\nThis should limit the data and swap memory used to 256MB and force\na core dump when the limit his reached.  Perhaps this will help\nprovide some useful backtraces to track down this problem.\n\nI suspect the problem is in mod_include somewhere because the frequency\nof the problem increased when a new site was deployed which uses a great\ndeal of SSI.\n"}, {"count": 2, "tags": [], "creator": "glenn@apache.org", "text": "The ulimit commands are working.  When an httpd process tries to\nrapidly increase its memory usage it generates a SEGV and core dumps\nbefore it starves the server of both physical and virtual memory.\n\nI now have six 230MB httpd process core files.\n\nAnalyzing the core file shows which thread failed during an\nallocation and caused the SEGV but that thread necessarily isn't\nthe one causing the problem, it is just the thread which had the\nmemory allocation failure.\n\nWhat I need to find is the request and the thread which was allocating\nall the memory.  Is there any easy way to get this data from each\nthread/request?  Perhaps in the apr_pool data somewhere?", "id": 52680, "time": "2004-02-20T19:56:44Z", "bug_id": 26799, "creation_time": "2004-02-20T19:56:44Z", "is_private": false, "attachment_id": null}, {"text": "A log written by mod_log_forensic could be used to find all requests currently\nbeing processed by that child up to the point of the core.  mod_log_forensic is\nin Apache 2.1-dev.  You'll need the test_char.h file from 2.1-dev in order to\ncompile it with Apache 2.0.x.  I have stuck a copy at\nhttp://www.apache.org/~trawick/test_char.h in case you want to try that.\nmod_log_forensic is in 1.3.30-dev and 2.1-dev but not 2.0.50-dev yet.\n(Disclaimer: I've never tried to compile mod_log_forensic with 2.0.x, but I\nsuspect it wouldn't be a big deal.)\n\nAlternately, mod_whatkilledus could be modified to dump information about all\nactive connections/requests when a crash occurs, not just the connection/request\non the thread that segfaulted.  (See\nhttp://www.apache.org/~trawick/exception_hook.html.)  I wouldn't mind at all\nmaking that enhancement (there would a config directive to tell it to dump info\non each thread, not just the thread that crashed), but you need the exception\nhook capability in Apache 2.0.49 or Apache 2.1-dev to make that work.\n\nI don't know how to definitively determine each active request in a core dump\nwithout something like mod_whatkilledus, which keeps a table with a data\nstructure per thread.  But if a bit of guessing is fine, run strings on the core\nfile and pick out all the request lines.  Some subset of that would be the\nrequest lines of the requests currently being processed ;)\n", "tags": [], "bug_id": 26799, "is_private": false, "count": 3, "id": 54330, "time": "2004-03-21T11:55:53Z", "creator": "trawick@apache.org", "creation_time": "2004-03-21T11:55:53Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 26799, "text": "Thanks for all the great information on how to approach debugging\nthis problem.\n\nI am going to wait on this until I found out whether the bug still\nexists after I have a chance to upgrade to 2.0.49.", "id": 54612, "time": "2004-03-24T23:04:20Z", "creator": "glenn@apache.org", "creation_time": "2004-03-24T23:04:20Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "slive@apache.org", "is_private": false, "text": "Well, what was the result after the upgrade?", "id": 60500, "time": "2004-07-12T18:04:41Z", "bug_id": 26799, "creation_time": "2004-07-12T18:04:41Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 26799, "attachment_id": null, "is_private": false, "id": 60544, "time": "2004-07-13T14:22:26Z", "creator": "glenn@apache.org", "creation_time": "2004-07-13T14:22:26Z", "text": "I upgraded one of the servers exhibiting this problem to httpd 2.0.50\nSunday 7/11/2004.  The bug has occurred once since the upgrade."}, {"count": 7, "attachment_id": null, "creator": "glenn@apache.org", "text": "I dont' think mod_log_forensic or mod_whatkilledus will be of much\nuse debugging this problem. I might try configuring each worker so that\nit only uses one thread for request handling.  That way when I do get\na core file I can easily determine the request which caused it.\nIf I run this way for a week I might be able to get 5-10 core files.\n\nThat may be enough to identify a pattern from review of the core files\nin a debugger.", "id": 60647, "time": "2004-07-15T16:49:14Z", "bug_id": 26799, "creation_time": "2004-07-15T16:49:14Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 26799, "text": "I happen the same problem. But when all download threads ware finished, httpd \nthreads are still keeping lots of memory & swap space for a long time.If it \ncould release those automtically quickly, I think it could be batter. ", "id": 72907, "time": "2005-03-27T07:54:28Z", "creator": "a2ioddoy@yahoo.com.cn", "creation_time": "2005-03-27T07:54:28Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "attachment_id": null, "creator": "mersberg@hotmail.com", "is_private": false, "id": 7580, "time": "2001-11-06T02:23:40Z", "bug_id": 4671, "creation_time": "2001-11-06T02:23:40Z", "tags": [], "text": "I recently upgraded from version 1.0.2 to 1.4.3 because I had to use the latest \nXalan package and this package requires 1.4.3 xerces parser. I use the xerces \nparser for DOM parsing and I noticed that 1.4.3 seems to ignore the encoding. \nHigh asii values such #137 are not read in correctly. Result is that special \ncharacter are not displayed correctly.\n\nHere an example xml file:\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<test>\n\t<text>Op een effici\u00ebnte wijze de agenda van een manager beheren</text>\n</test>\n\nThe special character \u00eb is not printed correctly. I tried using UTF-8 and US-\nASCII with the same result"}, {"count": 1, "tags": [], "bug_id": 4671, "is_private": false, "text": "Well, your document encoding certainly isn't UTF-8 or US-ASCII if it has a \nsingle byte code point of #137.  Did you try ISO-8859-1 ?\n", "id": 7582, "time": "2001-11-06T03:29:20Z", "creator": "gmarcy@us.ibm.com", "creation_time": "2001-11-06T03:29:20Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 4671, "is_private": false, "text": "I've tried various encodings all with the same result. Replacing \u00eb with &#137; \nhas the same effect. Please use the previous version against the xml document \nand notice the difference. What am I doing wrong here?", "id": 7584, "time": "2001-11-06T05:15:29Z", "creator": "mersberg@hotmail.com", "creation_time": "2001-11-06T05:15:29Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 4671, "attachment_id": null, "is_private": false, "id": 7603, "time": "2001-11-06T08:07:16Z", "creator": "gthb@dimon.is", "creation_time": "2001-11-06T08:07:16Z", "text": "If you use &#137; instead of the offending character, then your XML file is\ncomposed of pure ASCII, so the encoding spec in the XML declaration doesn't\nmatter (unless it were something exotic of which ASCII is not a subset, such\nas UTF-16). If you still encounter your problem, then that problem almost\ncertainly involves your output, not your input. You said \"result is that\nspecial character are not displayed correctly\" but Xerces has nothing to do\nwith displaying characters. Narrow down your problem. Is Xerces supplying the\ncorrect characters to Xalan? Is Xalan serializing the characters correctly?\nIs Xalan declaring the correct encoding in the output XML declaration? Is your\n\"displaying\" program handling Xalan's output correctly?\n\nIn any case, I would pretty swiftly rule out the possibility of a Xerces\nbug -- if Xerces 1.4.3 had been failing on these fundamentals, then a lot\nmore people would be complaining about it! :)\n"}, {"count": 4, "attachment_id": null, "creator": "mersberg@hotmail.com", "text": "Here's what I found:\n\nWhen I let the parser handle the reading of my physical xml file the result is \nas described in the orignal bug. \n\nWhen I read the xml file myself using a FileReader, the error does not occur.\n\nSo when I use parse(InputSource mysource) then it works fine; if I use parse\n(String filename) the problem occurrs.\n\n", "id": 7638, "time": "2001-11-07T01:36:12Z", "bug_id": 4671, "creation_time": "2001-11-07T01:36:12Z", "tags": [], "is_private": false}]
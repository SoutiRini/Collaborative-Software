[{"text": "JSP-File has byte order marks. If the attribute is set to \"UTF-8\" (upper case) or the file has no byte order marks, the compilation workes fine. \n\n{code} \n12:32:16,946 ERROR [[jsp]] Servlet.service() for servlet jsp threw exception \norg.apache.jasper.JasperException: /dialog.jsp(2,0) Page-encoding specified in XML prolog (UTF-8) is different from that specified in page directive (utf-8) \nat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:40) \nat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:407) \nat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:236) \nat org.apache.jasper.compiler.Validator$DirectiveVisitor.comparePageEncodings(Validator.java:362) \nat org.apache.jasper.compiler.Validator$DirectiveVisitor.visit(Validator.java:197) \nat org.apache.jasper.compiler.Node$PageDirective.accept(Node.java:590) \nat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2338) \nat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2388) \nat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2394) \nat org.apache.jasper.compiler.Node$Root.accept(Node.java:489) \nat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2338) \nat org.apache.jasper.compiler.Validator.validate(Validator.java:1700) \nat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:178) \nat org.apache.jasper.compiler.Compiler.compile(Compiler.java:306) \nat org.apache.jasper.compiler.Compiler.compile(Compiler.java:286) \nat org.apache.jasper.compiler.Compiler.compile(Compiler.java:273) \nat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:566) \nat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:316) \nat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:336) \nat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265) \nat javax.servlet.http.HttpServlet.service(HttpServlet.java:803) \nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) \nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) \nat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) \nat org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:445) \nat org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:379) \nat org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:292) \nat de.cit.jsp.control.DispatchServlet.forward(DispatchServlet.java:286) \nat de.cit.jsp.control.DispatchServlet.doGet(DispatchServlet.java:272) \nat javax.servlet.http.HttpServlet.service(HttpServlet.java:690) \nat javax.servlet.http.HttpServlet.service(HttpServlet.java:803) \nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) \nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) \nat de.cit.util.javax.servlet.ValidationFilter.doFilter(ValidationFilter.java:108) \nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) \nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) \nat de.cit.util.javax.servlet.jsp.XHtmlContentTypeFilter.doFilter(XHtmlContentTypeFilter.java:36) \nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) \nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) \nat org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) \nat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) \nat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) \nat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230) \nat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) \nat org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:179) \nat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:432) \nat org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84) \nat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) \nat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) \nat org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157) \nat org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:420) \nat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) \nat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262) \nat org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:437) \nat org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler.process(AjpProtocol.java:366) \nat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446) \nat java.lang.Thread.run(Thread.java:619) \n{code} \n\nCase insensitive camparison in org.apache.jasper.compiler.Validator.comparePageEncodings(...) seems to fix the problem: \n{code} \n        /* \n         * Compares page encodings specified in various places, and throws \n         * exception in case of page encoding mismatch. \n         * \n         * @param pageDirEnc The value of the pageEncoding attribute of the page \n         * directive @param pageDir The page directive node \n         * \n         * @throws JasperException in case of page encoding mismatch \n         */ \n        private String comparePageEncodings(String pageDirEnc, \n                Node.PageDirective pageDir) throws JasperException { \n\n            Node.Root root = pageDir.getRoot(); \n            String configEnc = root.getJspConfigPageEncoding(); \n\n            /* \n             * Compare the 'pageEncoding' attribute of the page directive with \n             * the encoding specified in the JSP config element whose URL \n             * pattern matches this page. Treat \"UTF-16\", \"UTF-16BE\", and \n             * \"UTF-16LE\" as identical. \n             */ \n            if (configEnc != null) { \n                if (!pageDirEnc.equalsIgnoreCase(configEnc) \n                        && (!pageDirEnc.toUpperCase().startsWith(\"UTF-16\") || !configEnc \n                                .toUpperCase().startsWith(\"UTF-16\"))) { \n                    err.jspError(pageDir, \n                            \"jsp.error.config_pagedir_encoding_mismatch\", \n                            configEnc, pageDirEnc); \n                } else { \n                    return configEnc; \n                } \n            } \n\n            /* \n             * Compare the 'pageEncoding' attribute of the page directive with \n             * the encoding specified in the XML prolog (only for XML syntax, \n             * and only if JSP document contains XML prolog with encoding \n             * declaration). Treat \"UTF-16\", \"UTF-16BE\", and \"UTF-16LE\" as \n             * identical. \n             */ \n            if ((root.isXmlSyntax() && root.isEncodingSpecifiedInProlog()) || root.isBomPresent()) { \n                String pageEnc = root.getPageEncoding(); \n                if (!pageDirEnc.equalsIgnoreCase(pageEnc) \n                        && (!pageDirEnc.toUpperCase().startsWith(\"UTF-16\") || !pageEnc \n                                .toUpperCase().startsWith(\"UTF-16\"))) { \n                    err.jspError(pageDir, \n                            \"jsp.error.prolog_pagedir_encoding_mismatch\", \n                            pageEnc, pageDirEnc); \n                } else { \n                    return pageEnc; \n                } \n            } \n             \n            return pageDirEnc; \n        } \n{code}", "tags": [], "bug_id": 44986, "attachment_id": null, "count": 0, "id": 116556, "time": "2008-05-13T04:42:11Z", "creator": "ralf.zimmermann@cit.de", "creation_time": "2008-05-13T04:42:11Z", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 116580, "time": "2008-05-13T14:44:12Z", "bug_id": 44986, "creation_time": "2008-05-13T14:44:12Z", "is_private": false, "text": "Thanks for the report. This has been fixed in trunk with an alternative patch that converts the encodings to upper case before comparison. The patch has been proposed for 6.0.x"}, {"count": 2, "tags": [], "bug_id": 44986, "attachment_id": null, "text": "The patch has been applied to 6.0.x and will be included in 6.0.17 onwards.", "id": 116687, "time": "2008-05-15T14:11:04Z", "creator": "markt@apache.org", "creation_time": "2008-05-15T14:11:04Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "mahler@pondus.de", "text": "We currently get an error with some of our JSPs with the following message:\nAn error occurred at line: [20.607] in the generated java file: [/home/xxx/.IntelliJIdea2016.1/system/tomcat/xxx/work/Catalina/localhost/xxx/org/apache/jsp/pages/gwf/form_005flayout_jsp.java]\nThe code of method invoke0(JspWriter) is exceeding the 65535 bytes limit\n\n\nThe jsp form_layout.jsp uses a lot of dynamic including of other jsps but other tomcat versions before did the job (including 8.0.36). The last time I saw this error message was with tomcat 6 I think (weird regression? ;-)). \n\nTIA\nBj\u00f6rn", "id": 193677, "time": "2016-09-13T13:51:01Z", "bug_id": 60126, "creation_time": "2016-09-13T13:51:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 193679, "time": "2016-09-13T14:15:17Z", "bug_id": 60126, "creation_time": "2016-09-13T14:15:17Z", "is_private": false, "text": "I'm pretty sure this is invalid. Feel free to re-open if my explanation below proves not to be correct.\n\nThe changelog for 8.0.37 mentions a number of changes in Jasper around error handling that will have increased the volume of the auto-generated code Jasper creates. If the JSPs were close to the limit in 8.0.36 it is possible this extra error handling code will have tipped them over in 8.0.37.\n\nThe way to check this is to look at the generated .java code for 8.0.36 and compare it to the .java code generated for 8.0.37. If you see something other than error handling (e.g. additional try/finally blocks) then please re-open and attach the JSP source, the .java for 8.0.36 and the .java for 8.0.37"}, {"count": 2, "tags": [], "creator": "mahler@pondus.de", "attachment_id": null, "id": 193680, "time": "2016-09-13T15:12:24Z", "bug_id": 60126, "creation_time": "2016-09-13T15:12:24Z", "is_private": false, "text": "Okay - so how do we know that we are close to the limit - what kind of limits in our JSP do we have to consider and how can we avoid that?\n\nBut I'll check what you suggested... thanks for the quick answer."}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 193681, "time": "2016-09-13T15:33:25Z", "bug_id": 60126, "creation_time": "2016-09-13T15:33:25Z", "is_private": false, "text": "What actaully matters is the size of the .class file. That has to conform to the JVM specification. There are various limits there although the method size one is the one folks tend to hit first.\n\nIt should be possible to analyse you generated clss files to see how big they are. There is probably a utility for that somewhere. If not, it should be trivial to write with BCEL or similar."}, {"count": 4, "text": "(In reply to Mark Thomas from comment #3)\n> It should be possible to analyse you generated clss files to see how big\n> they are.\n\nIn this case, the compiler is failing, so no .class file is generated. Only the auto-generated Java source can be reviewed.\n\nThe only way to prevent this from happening is to somewhat arbitrarily divide the generated code for a JSP into sections that are unlikely to result in a method-size overflow.\n\nThat path is fraught with difficulty. An automated approach may not be practical.\n\nBj\u00f6rn, I recommend that you look into using Tomcat's precompiler to either actually precompile your JSPs, or just as a sanity-check during your development process to determine if you are going to have any issues with JSP sizes.", "bug_id": 60126, "attachment_id": null, "id": 193732, "time": "2016-09-14T22:19:42Z", "creator": "chris@christopherschultz.net", "creation_time": "2016-09-14T22:19:42Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 60126, "attachment_id": null, "text": "see also bug 60578#c3", "id": 196088, "time": "2017-01-16T10:20:27Z", "creator": "hauser@acm.org", "creation_time": "2017-01-16T10:20:27Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 60126, "attachment_id": null, "text": "we got that problem when upgrading from tc8.0.14 to 8.5.9 for several jsp pages that before didn't have it (and not change to the jsp).\n\n1) the jsp generation got less efficient!\n\nbefore 8.0.14: wc outboxmessage_005fen_jsp.java\n  20511   97184 1708876 outboxmessage_005fen_jsp.java\n\nnow 8.5.9: wc outboxmessage_005fen_jsp.java\n  20874   98766 1651642 outboxmessage_005fen_jsp.java\n\n(although interestingly bytes do not behave the same as words)\n\n2) rights and date have changed, before it was the correct date, now we see sometimes \n\n  $ sudo ls -lart \n  -rw-r----- 1 root root 1651642 Jan  1  1970 /var/cache/tomcat8...", "id": 196115, "time": "2017-01-17T15:46:43Z", "creator": "hauser@acm.org", "creation_time": "2017-01-17T15:46:43Z", "is_private": false}, {"count": 7, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 196121, "time": "2017-01-17T18:16:37Z", "bug_id": 60126, "creation_time": "2017-01-17T18:16:37Z", "is_private": false, "text": "(In reply to Ralf Hauser from comment #5)\n> see also bug 60578#c3\n\nI'm not sure these bugs are related in any way.\n\nI'm surprised to see a file owned by root. That should not be possible unless your process permissions are for admin (which is a terrible idea). I don't believe Tomcat attempts to adjust permissions or file timestamps.\n\nI you are having the \"bytes exceeded\" problem, your only recourse is to re-work the JSP to be shorter or more modular."}, {"count": 8, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "id": 196130, "time": "2017-01-18T08:33:45Z", "bug_id": 60126, "creation_time": "2017-01-18T08:33:45Z", "is_private": false, "text": "Finally got it to compile again.\n\nJust for the record (in my case the exact error message was \"The code of method _jspService(HttpServletRequest, HttpServletResponse) is exceeding the 65535 bytes limit\"):\n\n1) tc8.0.14 no error: wc jspService.txt \n 10284  44600 856690 jspService8.0.14.txt\n\n2a) tc8.5.9. minor optimization, WITH error: wc jspService8.5.9.minorOpt.txt \n 10026  44545 826378 jspService8.5.9.minorOpt.txt\n\n2b) tc8.5.9. optimized no more error: wc jspService8.5.9.optimized.txt \n  7731  32414 588382 jspService.txt\n\nI still don't get it why 2a) caused the \"exceeding the 65535 bytes limit\" while 1) and 2b) don't.\n\n---------\nHow jspService*.txt was created:\ni) open the _jsp.java in an IDE like eclipse\nii) go to the method\niii) hilite and copy anything between its outer \"{\n... }\" into clipboard\niv) past the clipboard into an editor with the empty jspService*.txt"}, {"count": 9, "tags": [], "bug_id": 60126, "attachment_id": null, "text": "Please take this conversation to the users list. If you do so, please provide examples of the .java files that will not compile successfully.", "id": 196167, "time": "2017-01-18T22:23:59Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-01-18T22:23:59Z", "is_private": false}, {"count": 10, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "id": 196399, "time": "2017-01-25T13:43:10Z", "bug_id": 60126, "creation_time": "2017-01-25T13:43:10Z", "is_private": false, "text": "(In reply to Christopher Schultz from comment #9)\n> Please take this conversation to the users list. If you do so, please\n> provide examples of the .java files that will not compile successfully.\ncannot upload it to a public repository but the .java should be in your mail as of\n19.01.2017 08:10 GMT"}, {"count": 11, "tags": [], "creator": "gpaul@klaes.com", "attachment_id": null, "id": 203162, "time": "2018-01-09T09:40:29Z", "bug_id": 60126, "creation_time": "2018-01-09T09:40:29Z", "is_private": false, "text": "Have the same problem, tomcat 8.5 and tomcat 9 too.\nWe have hundred of older jsp-files with struts 1.1 and no easy solution for the problem. \nWe are using tomcat 8.0.3 without problems. Can't find the difference."}]
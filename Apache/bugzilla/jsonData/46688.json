[{"count": 0, "tags": [], "bug_id": 46688, "attachment_id": 23246, "text": "Created attachment 23246\nA test module to force file truncation before a request is handled\n\nI'm seeing a child process segfault when:\n\n1) mmap enabled\n2) an output filter is looking at the response body (e.g. mod_deflate)\n3) the file being served is truncated between the initial stat() and the handler running\n\nApache does an mmap for the original file length and when the output filter tries to read the mapped memory past where the current file ends, the child seg faults.\n\nThe enableMMap documentation warns about possible seg faults when a mapped NFS file is truncated, but I'm seeing this on a local file system.\n\nI've reproduced this on Linux and z/OS, not sure about other platforms but it seems likely to affect them too.\n\nIf nothing is actually looking at the response body before we send it, then there's not a seg fault.  The memory is passed to writev() and it seems to catch the problem and return an error.  Maybe this is the part that only fails on NFS?\n\nA file getting truncated in the middle of a request is unlikely to happen often by chance, I suppose.  I'll attach a test module from Jeff Trawick that forces the truncation and makes this easy to reproduce.\n\nI've thought about this some but haven't come up with a good approach to avoid this problem.  We could stat() the file again to see if it has shrunk, but there will always be a window where it could be truncated between when we stat() it and when we actually look at the data.  \n\nThe consequences of not fixing it aren't too bad anyway -- Apache just logs the child process failure and starts a new one.  \n\nMaybe the best we can do is add to the warning in the enableMMap documentation.", "id": 124761, "time": "2009-02-10T07:53:01Z", "creator": "poirier@pobox.com", "creation_time": "2009-02-10T07:53:01Z", "is_private": false}, {"count": 1, "tags": [], "text": "I've no idea where the comment about NFS filesystems came from in the docs.  Yes, this is expected behaviour for any filesystem.\n\nRegardless of whether EnableMMAP is enabled, you generally don't want to be modifying files in-place, since that may result in broken responses to active clients.", "attachment_id": null, "bug_id": 46688, "id": 124795, "time": "2009-02-12T00:56:28Z", "creator": "jorton@redhat.com", "creation_time": "2009-02-12T00:56:28Z", "is_private": false}, {"count": 2, "tags": [], "creator": "nick@webthing.com", "text": "Of course if you modify files in place you should expect undefined behaviour.  But that's not the same as segfaulting, which is what the OP describes!", "id": 124799, "time": "2009-02-12T02:02:17Z", "bug_id": 46688, "creation_time": "2009-02-12T02:02:17Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 46688, "text": "Well, shall we play component ping-pong?  Here is my shocking thesis:\n\nIf you mmap a file, truncate it, then try to read from a portion of the mapped memory beyond the offset to which the file was truncated, then the kernel will SIGBUS or SIGSEGV the process.\n\nThis is:\n\na) documented behaviour, see mmap(2) on any Unix, the mmap definition in POSIX, or any book on Unix e.g. Stevens, and\nb) observable behaviour, see comment 1.\n\nand therefore, it is expected behaviour, and should be documented.\n", "id": 124806, "time": "2009-02-12T04:46:45Z", "creator": "jorton@redhat.com", "creation_time": "2009-02-12T04:46:45Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "Created attachment 23252\nPatch for documentation to clarify that the crash problem isn't dependent on NFS file systems\n\nI agree, if the file is modified while we're trying to serve it, there's not much we can do for the current client.\n\nHere's a patch to remove the mention of NFS from the doc, so the warning applies regardless of file system type.", "attachment_id": 23252, "bug_id": 46688, "id": 124807, "time": "2009-02-12T05:38:54Z", "creator": "poirier@pobox.com", "creation_time": "2009-02-12T05:38:54Z", "is_private": false}, {"count": 5, "tags": [], "creator": "poirier@pobox.com", "attachment_id": null, "id": 124891, "time": "2009-02-17T06:49:53Z", "bug_id": 46688, "creation_time": "2009-02-17T06:49:53Z", "is_private": false, "text": "Does the proposed doc change seem reasonable?  I wish we could avoid the seg fault, but it doesn't appear that we have that option.  At least we can make the warning more comprehensive.\n"}, {"count": 6, "tags": [], "bug_id": 46688, "text": "I believe this and other bugs we've seen with truncated files could be solved by switching from stat() followed by open() to open() followed by fstat().  That lets us work with the same version of the file throughout a request, and makes it easy to detect a zero length file and abort before any harm is done.  It also saves the kernel from having to do a path walk for the stat(), a potential performance/scalability improvement.\n\nUnfortunately it's not clear how to implement this change in httpd because we use the finfo early and depend on the handlers to open the file.", "id": 125910, "time": "2009-03-31T08:00:04Z", "creator": "gregames@apache.org", "creation_time": "2009-03-31T08:00:04Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 125913, "time": "2009-03-31T09:22:00Z", "bug_id": 46688, "creation_time": "2009-03-31T09:22:00Z", "is_private": false, "text": "I think it is helpful to chop this issue in two, by the mechanism used to update files under document root.\n\n1) truncate old file, then write new contents (fopen() and Java equivalent do this, so many programs act this way)\n\nthis will segfault whether we stat() then open() or open() then fstat(), because there is always a race condition between files truncated and us touching the pages we've previously mapped\n\nso short of passing control back to mainline from a signal handler, this simply isn't a valid way to update served files; and while mmap is (hopefully) the only write mechanism that segfaults, the others still fail (e.g., httpd will hit EOF on sendfile before it expects)\n\n2) put new contents into new/temporary file then rename/unlink\n\nthere is a timing window that would be fixed by using open()+fstat(), as Greg suggests; this timing window is very narrow compared to the truncate issue, so we don't hear about it much\n\n--/--\n\nSo:\n\nUsers simply can't update served files using a mechanism that truncates, or bogosity will occur (hopefully the mmap segfault is by far the worst remaining bogosity).\n\n(I hope your mileage doesn't vary; corrections most appreciated.)"}, {"count": 8, "tags": [], "text": "Updated warning in trunk doc.\n\nRevision: 807609", "attachment_id": null, "bug_id": 46688, "id": 129924, "time": "2009-08-25T06:24:22Z", "creator": "poirier@pobox.com", "creation_time": "2009-08-25T06:24:22Z", "is_private": false}, {"count": 9, "tags": [], "creator": "poirier@pobox.com", "text": "Backported doc change to 2.2.x in r814629.", "id": 130371, "time": "2009-09-14T06:18:56Z", "bug_id": 46688, "creation_time": "2009-09-14T06:18:56Z", "is_private": false, "attachment_id": null}]
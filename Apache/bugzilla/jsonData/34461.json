[{"count": 0, "tags": [], "creator": "ggimler@gmail.com", "attachment_id": null, "id": 73667, "time": "2005-04-14T23:11:16Z", "bug_id": 34461, "creation_time": "2005-04-14T23:11:16Z", "is_private": false, "text": "I've noticed a subtle bug in the way ant 1.6.3 now forks off java processes. \nI've compared the behavior between 1.6.2 and 1.6.3.\n\nMy environment is red hat enterprise linux 3 with java 1.4.2. (see example code\nat the bottom).  I run with the following command...\n\n1) ant &\n\nThis executes an application that performs a sleep, then prints out\nsome text, followed by a wait call that should hang indefinitely.\n\nIn the background it will run and you will see the print statement in\n1.6.2 but not 1.6.3.  If you hit enter you'll see that the job goes\ninto the \"Stopped\" state in 1.6.3.  If you put it back into the\nforeground it will finish executing, it's only when you have it as a\nbackground process that it misbehaves.\n\n\n--- CODE STARTS HERE ----\n\n// Test.java\n\npublic class Test {\n \n        public static void main(String args[] ){\n                try {\n                        Thread.sleep(5000);\n                } catch(InterruptedException ie) {}\n                System.out.println(\"Running...\");\n                try {\n                synchronized(Test.class) {\n                        Test.class.wait();\n                }\n                } catch (InterruptedException ie) {}\n \n        }\n}\n\n----------------build.xml-------------------------------------------\n\n<project name=\"java-problem\" default=\"java-problem\" basedir=\".\">\n        <target name=\"java-problem\">\n                <java classname=\"Test\" fork=\"true\">\n                        <classpath>\n                                <pathelement path=\"${basedir}\"/>\n                        </classpath>\n                </java>\n        </target> \n</project>"}, {"count": 1, "tags": [], "creator": "WBaer@gmx.de", "text": "Hi,\n\nI can confirm this behaviour with ant 1.6.5. We got a bug report for\nthe debian ant package and my tests show that the java task with\nfork=\"true\" does not work in 1.6.5 anymore in the background.\n\nFor the debian bug report and possible followups and testcases\nsee: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=330292\n\nThanks,\n\nWolfgang", "id": 80523, "time": "2005-09-27T22:30:57Z", "bug_id": 34461, "creation_time": "2005-09-27T22:30:57Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "stevel@apache.org", "text": "Wolfgang, as a unix person, what do think is causing this?\n\nHow do programs really change when they are run in the background?", "id": 80538, "time": "2005-09-28T10:24:51Z", "bug_id": 34461, "creation_time": "2005-09-28T10:24:51Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "id": 80551, "time": "2005-09-28T14:21:04Z", "bug_id": 34461, "creation_time": "2005-09-28T14:21:04Z", "is_private": false, "text": "Maybe this has been caused by the (excellent) work to hook up ant's input to\nthat of tasks. Does setting an empty input string in the java task make this go\naway?\n\ninputstring=\"\""}, {"count": 4, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "I would think it a side effect of Jesse's (relatively) recent work... not \nfinger-pointing, but hoping to attract his attention.  ;)", "id": 80562, "time": "2005-09-28T19:43:20Z", "creator": "mbenson@apache.org", "creation_time": "2005-09-28T19:43:20Z", "is_private": false}, {"count": 5, "tags": [], "creator": "jglick@apache.org", "text": "Yes, it could be related to input handling stuff... haven't had a chance to look\nat it just yet.", "id": 80563, "time": "2005-09-28T20:31:25Z", "bug_id": 34461, "creation_time": "2005-09-28T20:31:25Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "carsten.pfeiffer@first.fraunhofer.de", "text": "(In reply to comment #3)  \n> Does setting an empty input string in the java task make this go away?  \n>   \n> inputstring=\"\"  \n  \nYes, indeed, it does go away, then!  ", "id": 80596, "time": "2005-09-29T11:45:34Z", "bug_id": 34461, "creation_time": "2005-09-29T11:45:34Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "Ok, so it is an input hooking up thing. I guess when you run ant in the\nbackground, the moment anything tries to listen to stdin it hangs until brought\nto the fg.\n\nquestion, is, what is doing the read? The sample app isnt, \n\nNow prior to 1.6.3, we werent routing stdin to forked java code; bug #24918 was\na patch to route stuff:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=24918", "id": 80600, "time": "2005-09-29T12:55:55Z", "creator": "stevel@apache.org", "creation_time": "2005-09-29T12:55:55Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "(In reply to comment #7) \n> Ok, so it is an input hooking up thing. I guess when you run ant in the \n> background, the moment anything tries to listen to stdin it hangs until \nbrought \n> to the fg. \n \nYes. From bash's manpage: \n \n\"Background processes which attempt to read from (write to) the terminal are \nsent a SIGTTIN (SIGTTOU) signal by the terminal driver, which, unless caught, \nsuspends the process.\" \n \nNow I'm wondering how to detect this situation in java-land. When you try to \nread, you get an IOException: \n \n     [java] java.io.IOException: Unknown error 512 \n     [java]     at java.io.FileInputStream.readBytes(Native Method) \n     [java]     at java.io.FileInputStream.read(FileInputStream.java:194) \n     [java]     at \njava.io.BufferedInputStream.fill(BufferedInputStream.java:183) \n     [java]     at java.io.BufferedInputStream.read1\n(BufferedInputStream.java:222) \n     [java]     at \njava.io.BufferedInputStream.read(BufferedInputStream.java:277) \n     [java]     at java.io.FilterInputStream.read(FilterInputStream.java:90) \n     [java]     at \norg.apache.tools.ant.taskdefs.StreamPumper.run(StreamPumper.java:90) \n     [java]     at java.lang.Thread.run(Thread.java:534) \n \nbut how would know if you can read or not? As soon as you attempt to read, \nyou're being stopped SIGTTIN. \n \n> question, is, what is doing the read? The sample app isnt,  \n[...] \n> http://issues.apache.org/bugzilla/show_bug.cgi?id=24918 \n \nSee the above stacktrace. \n \nJava.setupRedirector() sets the inputStream for redirection, where it ends up \nin a StreamPumper (somewhere in Redirector.createStreams()). The StreamPumper \nimmediately starts reading from the input stream, causing the SIGTTIN. ", "id": 80617, "time": "2005-09-29T18:39:51Z", "creator": "carsten.pfeiffer@first.fraunhofer.de", "creation_time": "2005-09-29T18:39:51Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "what if you start the process with </dev/null ?", "id": 80624, "time": "2005-09-29T20:58:51Z", "creator": "mbenson@apache.org", "creation_time": "2005-09-29T20:58:51Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "(In reply to comment #9) \n> what if you start the process with </dev/null ? \n \nThen it works of course, as it won't read from the terminal in any case. ", "id": 80625, "time": "2005-09-29T21:31:35Z", "creator": "carsten.pfeiffer@first.fraunhofer.de", "creation_time": "2005-09-29T21:31:35Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 34461, "attachment_id": 16616, "text": "Created attachment 16616\nexample program, describing the problem\n\nThis is a tiny sample program, showing the source of this bug.\nCompile and start it as \n\njava Problem &\n\nYou can observe with `ps', that the programm will be suspended immediately:\ngis\t 14963\t5.7  0.7 213220  7984 pts/3    Tl   10:45   0:00 java Problem\n\nSo what is needed is the information when System.in.read() is possible and when\nit isn't.", "id": 80891, "time": "2005-10-07T10:52:44Z", "creator": "carsten.pfeiffer@first.fraunhofer.de", "creation_time": "2005-10-07T10:52:44Z", "is_private": false}, {"count": 12, "tags": [], "creator": "bodewig@apache.org", "text": "I've turned that into a documentation bug and will document the inputstring=\"\" workaround in several places.", "id": 118732, "time": "2008-07-16T09:10:08Z", "bug_id": 34461, "creation_time": "2008-07-16T09:10:08Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "bodewig@apache.org", "text": "well, not really fixed, but at least documented.\n\nsubversion revision 677899", "id": 118813, "time": "2008-07-18T06:10:06Z", "bug_id": 34461, "creation_time": "2008-07-18T06:10:06Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "*** Bug 45638 has been marked as a duplicate of this bug. ***", "id": 119885, "time": "2008-08-18T05:48:57Z", "creator": "mbenson@apache.org", "creation_time": "2008-08-18T05:48:57Z", "is_private": false}, {"count": 15, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 119941, "time": "2008-08-20T08:04:39Z", "bug_id": 34461, "creation_time": "2008-08-20T08:04:39Z", "is_private": false, "text": "*** Bug 37887 has been marked as a duplicate of this bug. ***"}, {"count": 16, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 119943, "time": "2008-08-20T08:04:49Z", "bug_id": 34461, "creation_time": "2008-08-20T08:04:49Z", "is_private": false, "text": "*** Bug 38893 has been marked as a duplicate of this bug. ***"}, {"count": 17, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 119977, "time": "2008-08-21T05:20:40Z", "bug_id": 34461, "creation_time": "2008-08-21T05:20:40Z", "is_private": false, "text": "given the amount of other bug reports that can all be tracked down to the very same problem, I've add an FAQ for it.  svn revision 687724."}, {"count": 18, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "*** Bug 40014 has been marked as a duplicate of this bug. ***", "id": 119979, "time": "2008-08-21T05:25:58Z", "creator": "bodewig@apache.org", "creation_time": "2008-08-21T05:25:58Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "*** Bug 41024 has been marked as a duplicate of this bug. ***", "id": 119981, "time": "2008-08-21T05:29:15Z", "creator": "bodewig@apache.org", "creation_time": "2008-08-21T05:29:15Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "*** Bug 36903 has been marked as a duplicate of this bug. ***", "id": 120020, "time": "2008-08-22T04:42:37Z", "creator": "bodewig@apache.org", "creation_time": "2008-08-22T04:42:37Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 34461, "attachment_id": null, "text": "The FAQ entry states that this can be a problem with <exec> tasks as well.  I am looking at the source for ant 1.7.0 and I can see the change that was made for Bug #24918 in the source for the <java> task.  It appears that I just need to comment out the following code in Java.java to remove the change:\n\n/*\nif (!spawn && input == null && inputString == null) {\n     // #24918: send standard input to the process by default.\n     redirector.setInputStream(\n     new KeepAliveInputStream(getProject().getDefaultInputStream()));\n}\n*/\n\nIs the only change required to remove the functionality provided by Bug #24918?\n\nI don't see any such code in ExecTask.java, but the FAQ entry for the hang on StandradInput says this:\n\n\"When Ant forks a new process for example by using the <exec>, <apply> or <java> tasks, it will also start a new thread reading from standard input and sending everything that it has read to that process.\"\n\nWhat else is required to build 1.7.0 without the fixes to hookup standard in on these tasks?", "id": 137195, "time": "2010-05-28T14:49:33Z", "creator": "troy.harris@sas.com", "creation_time": "2010-05-28T14:49:33Z", "is_private": false}]
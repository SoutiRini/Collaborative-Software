[{"count": 0, "tags": [], "text": "Here's the problem:\n\nA servlet uses Jini to locate a jini service (which is an RMI server). When found, downloading that services stub starts. When this occures, a NoClassDefFound is generated. The RMI server has a codebase server which delivers jar files from a codebase server (web server). \n\nTHE BUG: If the codebase is set to file:/home/per/dev/ior/lib/service-dl.jar everything works fine and the servlet finds the classes in the service-dl.jar. On the otherhand, which is the correct way, the codebase is set to http://192.168.x.x:8585/service-dl.jar the class is not found.\n\nThere is no doubt that the codebase is up and delivers this jar, since it is used from other clients as well. This is the reason I beleve that this is a bug in tomcat.\n\nPlease give me a hint quickly on this matter, since I'm depending on this\n\n/P", "is_private": false, "id": 12173, "creator": "per.edlund@bozoka.com", "time": "2002-03-22T10:08:44Z", "bug_id": 7359, "creation_time": "2002-03-22T10:08:44Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 12182, "creation_time": "2002-03-22T16:35:30Z", "time": "2002-03-22T16:35:30Z", "bug_id": 7359, "text": "People are apparently able to use RMI with Tomcat, with a few minor problems \n(like bug 7082). I have no idea how to reproduce this; if you want to have this \nbug looked at, you'll have to provide a relatively easy to run test case.\nYou could also try to debug it a bit, to at least find where the problem is \ncoming from.\nSince there is a workaround, I'm downgrading the severity.", "attachment_id": null}, {"count": 2, "tags": [], "text": "I'm seeing the same problem on W2K with 4.0.3 final. The following happens in\nan internal Jini thread when trying to establish a link to a newly discovered\nregistrar:\n\njava.lang.ClassNotFoundException: com.sun.jini.reggie.RegistrarProxy\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:297)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:253)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:313)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:195)\n        at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:354)\n        at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:132)\n        at sun.rmi.server.MarshalInputStream.resolveClass\n(MarshalInputStream.java:143)\n        at java.io.ObjectInputStream.inputClassDescriptor\n(ObjectInputStream.java:918)\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:366)\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:236)\n        at java.io.ObjectInputStream.inputObject(ObjectInputStream.java:1186)\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:386)\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:236)\n        at java.rmi.MarshalledObject.get(MarshalledObject.java:138)\n        at net.jini.discovery.IncomingUnicastResponse.<init>\n(IncomingUnicastResponse.java:78)\n        at net.jini.discovery.LookupDiscovery$UnicastDiscoverer.run\n(LookupDiscovery.java:322)\n\nThe RegistrarProxy object is served by a RMI server with a valid HTTP codebase\npointing to Sun's out-of-the-box reggie-dl.jar. This setup works fine with my\nother standalone apps.\n\nThe same code for my servlet used to work just fine in v4.0... Just for the\nheck of it, I tried granting AllPermission to everybody with no results. I too\nwould suspect a problem with the class loaders...\n\nSo far, my only good workaround is to revert to 4.0. I tried also deploying the\ndownloaded jars locally, but this kind of defeats the purpose...\n", "is_private": false, "id": 12456, "creator": "ranger@noonetics.com", "time": "2002-03-28T13:48:08Z", "bug_id": 7359, "creation_time": "2002-03-28T13:48:08Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 7359, "is_private": false, "id": 21965, "time": "2002-08-29T13:57:14Z", "creator": "robert.georen@siemens.se", "creation_time": "2002-08-29T13:57:14Z", "tags": [], "text": "Hi,\n\nYes, I have also met this problem. The RMI server works fine with other Java \napplications but not with Tomcat as client to the RMI server.\n\nThere is a workaround for this that work fine until 'apache.org' fix this bug.\nYou add two codebases, one with 'file:/xx' and one with 'http://'. So when\nthe bug is fixed, you just remove the 'file:/xx' stuff from the \n'-Djava.rmi.server.codebase='.\n\nregards,\n\n\n// Robert\n\n"}, {"count": 4, "tags": [], "bug_id": 7359, "attachment_id": null, "text": "The classloader is now more robust in 4.1.x, which could fix the issue. That\nkind of problems will reauire a comprehensive test case to investigate further.", "id": 35765, "time": "2003-04-22T10:42:39Z", "creator": "remm@apache.org", "creation_time": "2003-04-22T10:42:39Z", "is_private": false}]
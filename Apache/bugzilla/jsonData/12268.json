[{"count": 0, "tags": [], "bug_id": 12268, "text": "We just upgrade FOP 0.20.4 recently. We encounter pdf file size acumulating \nissue. We use FOP object from EJB. code is as folling \n\n---------------------------------------------------------------------------\npackage com.fmr.etad.ejb;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.StringReader;\n\nimport javax.ejb.CreateException;\nimport javax.ejb.SessionBean;\nimport javax.ejb.SessionContext;\nimport org.apache.avalon.framework.logger.Log4JLogger;\nimport org.apache.fop.apps.Driver;\nimport org.apache.fop.apps.FOPException;\nimport org.apache.fop.messaging.MessageHandler;\nimport org.apache.log4j.Logger;\nimport org.xml.sax.InputSource;\n\n/**\n * Bean implementation class for Enterprise Bean: PDFGenerator\n */\npublic class PDFGeneratorBean implements javax.ejb.SessionBean\n{\n\tstatic\n\t{\n\t\tMessageHandler.setQuiet(true); // makes FOP quiet\n\t}\n\t\n\tprivate Driver driver;\n\tprivate InputSource inputSource;\n\t\n\tprivate javax.ejb.SessionContext mySessionCtx;\n\t\t\n\t/**\n\t * getSessionContext\n\t */\n\tpublic javax.ejb.SessionContext getSessionContext()\n\t{\n\t\treturn mySessionCtx;\n\t}\n\t/**\n\t * setSessionContext\n\t */\n\tpublic void setSessionContext(javax.ejb.SessionContext ctx)\n\t{\n\t\tmySessionCtx = ctx;\n\t}\n\t/**\n\t * ejbActivate\n\t */\n\tpublic void ejbActivate()\n\t{\n\t\t//Logger.getLogger(\"Logger\").debug(\"PDFGeneratorBean: \nejbActivate() called\");\n\t}\n\t/**\n\t * ejbCreate\n\t */\n\tpublic void ejbCreate() throws javax.ejb.CreateException\n\t{\n\t\t//Logger.getLogger(\"Logger\").debug(\"PDFGeneratorBean: ejbCreate\n() called\");\n\t\t \n\t\tdriver = new Driver();\n\t\t\n\t\tdriver.setLogger(new Log4JLogger(Logger.getLogger\n(\"Logger.FOP\")));\n\t\t\n\t\tdriver.setRenderer(Driver.RENDER_PDF);\n\t\t\n\t\tinputSource = new InputSource();\n\t}\n\t\n\t/**\n\t * ejbPassivate\n\t */\n\tpublic void ejbPassivate()\n\t{\n\t\t//Logger.getLogger(\"Logger\").debug(\"PDFGeneratorBean: \nejbPassivate() called\");\n\t}\n\t/**\n\t * ejbRemove\n\t */\n\tpublic void ejbRemove()\n\t{\n\t\t//Logger.getLogger(\"Logger\").debug(\"PDFGeneratorBean: ejbRemove\n() called\");\n\t}\n\n\t/**\n\t* renders an FO inputsource into a PDF file \n\t* \n\t*/\n\tpublic byte[] renderFO(String foString)\n\t\tthrows IOException, FOPException\n\t{  \t            \n\t\tsaveInput(foString);         \n\t\tSystem.out.println(\"FO file length: \" + foString.length());\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\tinputSource.setCharacterStream(new StringReader(foString));\n\t\t\n\t\tdriver.reset();\n\t\tdriver.setInputSource(inputSource);\n\t\tdriver.setOutputStream(out);\n\t\t\t\n\t\tdriver.run();\n\t\tSystem.out.println(\"PDF file length: \" + out.toByteArray\n().length);\n\n//\t\tsaveOutput(out.toByteArray());\n\t\treturn out.toByteArray();\t\t\n\t\t\n\t}\n\t\n\tprivate void saveInput(String string)\n\t{\n\t\ttry\n\t\t{\n\t\t\tFileWriter out = new FileWriter(new File\n(\"logs/input.fo\"));\n\t\t\tout.write(string);\n\t\t\tout.close();\n\t\t}\n\t\tcatch (java.io.IOException ioe)\n\t\t{\n\t\t\tioe.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate void saveOutput(byte[] binary)\n\t{\n\t\ttry\n\t\t{\n\t\t\tFileOutputStream out = new FileOutputStream(new File\n(\"logs/FOoutput.pdf\"));\n\t\t\tout.write(binary);\n\t\t\tout.close();\n\t\t}\n\t\tcatch (java.io.IOException ioe)\n\t\t{\n\t\t\tioe.printStackTrace();\n\t\t}\n\t}\n}\n---------------------------------------------------------------------------\n\nWe developed the application in WSAD (websphere studio application developer) \nthere is no issue in WSAD env, but when we deplyed to linux, AIX server, we got \npdf file size increased, everytime you access it. Somehow somewhere in the \nbuffer is not clean, but the PDF result is correct although the size enlarged. \nAnd the size is exactly the total request PDF file summation.\n\nWe use 4.03 Websphere. We know it is certain Environment issue trigger this \nbug. we don't have this issue with 0.20.3.\n\nIf you need to have further information, please let me know. I will gather it \nfor you.\n\nThanks.", "id": 22197, "time": "2002-09-03T17:03:12Z", "creator": "Francis.Li@fmr.com", "creation_time": "2002-09-03T17:03:12Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 12268, "attachment_id": null, "id": 26552, "time": "2002-11-19T12:14:39Z", "creator": "oleg@tkachenko.com", "creation_time": "2002-11-19T12:14:39Z", "is_private": false, "text": "Sounds too bizarre. How come 'out' buffer accumulates results?\n\nByteArrayOutputStream out = new ByteArrayOutputStream();\ndriver.reset();\ndriver.setInputSource(inputSource);\n\n//Make sure here out buffer is empty.\n\ndriver.setOutputStream(out);\t\ndriver.run();\n"}, {"attachment_id": null, "tags": [], "creator": "oleg@tkachenko.com", "text": "Excuse me, but it's not enough information to resolve the bug without your\nassistance. Feel free to reopen the bug.", "count": 2, "id": 27419, "time": "2002-12-04T17:40:36Z", "bug_id": 12268, "creation_time": "2002-12-04T17:40:36Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "gadams@apache.org", "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "count": 3, "id": 156764, "time": "2012-04-01T13:52:28Z", "bug_id": 12268, "creation_time": "2012-04-01T13:52:28Z", "is_private": false}]
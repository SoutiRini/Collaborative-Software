[{"count": 0, "tags": [], "bug_id": 50841, "text": "Created attachment 26697\nModified versions of files with my changes in them and description of changes\n\nI sent in item 48872 last year and did not get a chance to look into it until recently. Nick Burch worked on my previous comments and did a great job integrating changes into the libraries. I have a new round of bug fixes and improvements I'd like to \"share\". \n\n1. Added an option to support text extraction similar to Excel's CSV with regards to spacing, invalid dates, scientific notation + sign.\n2. Corrected bug with getting format for values = 0 and format expression in 4 parts.\n3. Better elapsed time processing, now handling [h], [m], and [s] and more correct rounding.\n4. Milliseconds support: s.0, s.00, and s.000.\n\nI have attached 4 files,\n\ta: modified version of org.apache.poi.ss.usermodel.DataFormatter called NcoDataFormatter.java\n\tb: modified version of org.apache.poi.ss.usermodel.ExcelStyleDateFormatter called NcoExcelStyleDateFormatter.java\n\tc: modified version of org.apache.poi.ss.usermodel.TestDataFormatter.java called NcoTestDataFormatter.java\n\td: Details of what I changed in Differences.txt\nThis was done in this way as it's an easy way for me to have access to the original POI code and access to my \"fixed\" version of the code, so I can use both at the same time, if needed. Please use a diff tool to compare the code between the 3.7 version and mine to see the exact details of code changes.", "id": 144615, "time": "2011-02-28T16:06:56Z", "creator": "robert_kish@yahoo.com", "creation_time": "2011-02-28T16:06:56Z", "is_private": false, "attachment_id": 26697}, {"count": 1, "tags": [], "bug_id": 50841, "text": "Created attachment 26698\nModified versions of files with my changes in them and description of changes", "id": 144616, "time": "2011-02-28T17:27:13Z", "creator": "robert_kish@yahoo.com", "creation_time": "2011-02-28T17:27:13Z", "is_private": false, "attachment_id": 26698}, {"count": 2, "tags": [], "bug_id": 50841, "text": "I'm reviewing your patch. My plan is to create a subclass of DataFormatter and encapsulate CSV-specific logic in it. NcoDataFormatter should share common stuff, not duplicate it. \n\nFixes in date detection and formatting (items 8 - 11 from differences.txt) seem to be generic and I'm going to apply them directly to DateUtil and ExcelStyleDateFormatter. \n\nTo support elapsed time you proposed to change \n\n\tPattern date_ptrn2 = Pattern.compile(\"^\\\\[[a-zA-Z]+\\\\]\");\n\tto\n\tPattern date_ptrn2 = Pattern.compile(\"^\\\\[[A-Z]+\\\\]\");\n\n(item 8 from differences.txt).\n\nThis \"loosened\" regex will skip formats with a prefixed color, e.g. [yellow]yyyy-mm-dd or [red][hh] \n\nI'm going to define a fourth regexp for the elapsed time patterns:\n\n    //  elapsed time patterns: [h],[m] and [s]\n    private static final Pattern date_ptrn4 = Pattern.compile(\"^\\\\[([hH]+|[mM]+|[sS]+)\\\\]\");\n\nand use it in combination with date_ptrn2. \n\nOther than that, very cool! Thank you for the patch.\n\nYegor", "id": 144992, "time": "2011-03-14T09:04:18Z", "creator": "yegor@dinom.ru", "creation_time": "2011-03-14T09:04:18Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "yegor@dinom.ru", "text": "Applied in r1083173\n\nI changed my mind about subclassing DataFormatter, this class was not designed for extension and it is much easier to add a new constructor to pass the emulateCsv parameter. You should be able to run your code by replacing  NcoDataFormatter with DataFormatter.\n\n Changes that apply to DataFormatter by default:\n\n - Support for elapsed time and [h], [m], and [s].\n - Rounding style for elapsed time is DOWN and uses float for calculations instead of double.\n - support for scientific notation\n\n\n Changes that apply only when emulateCsv=true:\n\n - returned values are not trimmed and format spacers and respected\n - Invalid dates are formatted as 255 pound signs (\"#\")\n - simulate Excel's handling of a format string of all # when the value is 0.\n\nNote that I changed the way how you propagate invalid formats using the NDFNoNumbers exception and return a special subclass of Format instead.\nExceptions should be used only for exceptional conditions and not for normal control flow.\n\nRegards,\nYegor", "id": 145108, "time": "2011-03-19T08:44:11Z", "bug_id": 50841, "creation_time": "2011-03-19T08:44:11Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "robert_kish@yahoo.com", "attachment_id": null, "id": 145187, "time": "2011-03-22T10:26:21Z", "bug_id": 50841, "creation_time": "2011-03-22T10:26:21Z", "is_private": false, "text": "Yegor,\nI just spent some time performing a diff of my submission to your work. I am quite impressed with your implementation of my rough points. You implemented them much cleaner than I did, especially with regards to the exception as flow control and the elapsed time formatters.\n\nThanks again."}]
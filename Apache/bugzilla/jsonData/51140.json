[{"count": 0, "tags": [], "text": "A possibility should be provided that allows a user to define a specific error/failure message in a response assertion, which is then shown with the Assertion Result. By adding a specific message it is much easier to reproduce why an assertion resulted in an error/failure (e.g. by adding the state of particular variables that lead to that error/failure).", "is_private": false, "bug_id": 51140, "id": 146061, "time": "2011-05-02T13:19:01Z", "creator": "etudenhoefner@googlemail.com", "creation_time": "2011-05-02T13:19:01Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 51140, "is_private": false, "text": "A suggestion for the realization would be as following:\n\nEntry in message.properties:\nview_results_assertion_specific_failure_message=Specific failure message: \n\npublic class AssertionResult implements Serializable {\n     /** The failure message which can be provided by the user. */   \n    private String specificFailureMessage;\n\t\n    public String getSpecificFailureMessage() {\n\t\treturn specificFailureMessage;\n\t}\n\n\tpublic void setSpecificFailureMessage(String specificErrorMessage) {\n\t\tthis.specificFailureMessage = specificErrorMessage;\n\t}\n}\n\npublic class AssertionLogGui extends AssertionGui {\n    \n    private JTextField specificErrorMessage;\n    \n    /**\n     * Create a new AssertionGui panel.\n     */\n    public AssertionLogGui() {\n    \tsuper();\n    \tJPanel panel = new JPanel();\n        panel.setBorder(BorderFactory.createTitledBorder(\"Save variable context into file (if activated in test scenario)\"));\n        panel.setLayout(new GridLayout(0,2)); \n        panel.add(new JLabel(\"File for success:\"));\n        successFile = new JTextField(30);\n        panel.add(successFile);\n        \n        panel.add(new JLabel(\"File for failure:\"));\n        failFile = new JTextField(30);\n        panel.add(failFile);\n        \n        panel.add(new JLabel(\"Variable pattern to write in file:\"));\n        patternFile = new JTextField(30);\n        panel.add(patternFile);\n        \n        JPanel errorMessagePanel = new JPanel();\n        errorMessagePanel.setBorder(BorderFactory.createTitledBorder(\"Specific Failure Message\"));\n        errorMessagePanel.setLayout(new GridLayout(0,1)); \n        specificErrorMessage = new JTextField(\"\",100);\n        errorMessagePanel.add(specificErrorMessage);\n    \t\n        Box box = (Box)getComponent(0);\n        box.add(oep, 1);\n        box.add(panel, 2);\n        box.add(errorMessagePanel, 3);        \n    }\n\t\n\t /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */\n    public void modifyTestElement(TestElement el) {\n        super.modifyTestElement(el);\n        \n        if (el instanceof ResponseLogAssertion) {\n        \tResponseLogAssertion ra = (ResponseLogAssertion) el;\n        \tra.setFailVarFile(failFile.getText());\n        \tra.setSuccessVarFile(successFile.getText());\n        \tra.setVarFileString(patternFile.getText());\n        \tra.setErrorAction(oep.getOnErrorSetting());\n        \tra.setSpecificFailureMessage(specificErrorMessage.getText());\n        }\n    }\n\t\n\t@Override\n    public void configure(TestElement el) {\n        super.configure(el);\n        ResponseLogAssertion model = (ResponseLogAssertion) el;\n\n        failFile.setText(model.getFailVarFile());\n        successFile.setText(model.getSuccessVarFile());\n        patternFile.setText(model.getVarFileString());\n        specificErrorMessage.setText(model.getSpecificFailureMessage());\n        oep.configure(model.getErrorAction());\n    }\n}\n\npublic class ResponseAssertion extends AbstractScopedAssertion implements Serializable, Assertion {\n   \n    private static final String SPECIFIC_FAILURE_MESSAGE = \"Assertion.specific_failure_message\"; // $NON-NLS-1$\n       \n    public String getSpecificFailureMessage() {\n    \treturn getPropertyAsString(SPECIFIC_FAILURE_MESSAGE);\n    }\n    public void setSpecificFailureMessage(String message) {\n    \tsetProperty(SPECIFIC_FAILURE_MESSAGE, message);\n    }\n        \n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public AssertionResult getResult(SampleResult response) {\n\t\tAssertionResult result;\n\n        // None of the other Assertions check the response status, so remove\n        // this check\n        // for the time being, at least...\n        // if (!response.isSuccessful())\n        // {\n        // result = new AssertionResult();\n        // result.setError(true);\n        // byte [] ba = response.getResponseData();\n        // result.setFailureMessage(\n        // ba == null ? \"Unknown Error (responseData is empty)\" : new String(ba)\n        // );\n        // return result;\n        // }\n\n        result = evaluateResponse(response);\n\t\tresult.setSpecificFailureMessage(getSpecificFailureMessage());       \n        return result;\n    }\n}\n\npublic abstract class SamplerResultTab implements ResultRenderer {\n\n    @SuppressWarnings(\"boxing\")\n    public void setupTabPane() {\n        StyledDocument statsDoc = stats.getStyledDocument();\n        try {\n            statsDoc.remove(0, statsDoc.getLength());\n            sampleDataField.setText(\"\"); // $NON-NLS-1$\n            results.setText(\"\"); // $NON-NLS-1$\n            if (userObject instanceof SampleResult) {\n                // ...           \n            } else if (userObject instanceof AssertionResult) {\n                assertionResult = (AssertionResult) userObject;\n\n                // We are displaying an AssertionResult\n                setupTabPaneForAssertionResult();\n\n                StringBuilder statsBuff = new StringBuilder(100);\n                statsBuff.append(JMeterUtils.getResString(\"view_results_assertion_error\")).append(assertionResult.isError()).append(NL); //$NON-NLS-1$\n                statsBuff.append(JMeterUtils.getResString(\"view_results_assertion_failure\")).append(assertionResult.isFailure()).append(NL); //$NON-NLS-1$\n                statsBuff.append(JMeterUtils.getResString(\"view_results_assertion_failure_message\")).append(assertionResult.getFailureMessage()).append(NL); //$NON-NLS-1$\n                if (null != assertionResult.getSpecificFailureMessage() && !\"\".equals(assertionResult.getSpecificFailureMessage())) {\n                \tstatsBuff.append(JMeterUtils.getResString(\"view_results_assertion_specific_failure_message\")).append(assertionResult.getSpecificFailureMessage()).append(NL); //$NON-NLS-1$\n                }\n                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);\n            }\n            \n        } catch (BadLocationException exc) {\n            stats.setText(exc.getLocalizedMessage());\n        }\n    }\n}", "id": 148026, "time": "2011-07-20T08:11:54Z", "creator": "etudenhoefner@googlemail.com", "creation_time": "2011-07-20T08:11:54Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "etudenhoefner@googlemail.com", "attachment_id": 27301, "id": 148027, "time": "2011-07-20T08:13:47Z", "bug_id": 51140, "creation_time": "2011-07-20T08:13:47Z", "is_private": false, "text": "Created attachment 27301\nSuggestion for the realization"}, {"count": 3, "tags": [], "bug_id": 51140, "is_private": false, "text": "This is a really useful feature.\nAnybody knows why it wasn't merged ?", "id": 187905, "time": "2016-01-22T14:48:59Z", "creator": "benoit.wiart@gmail.com", "creation_time": "2016-01-22T14:48:59Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "benoit.wiart@gmail.com", "attachment_id": null, "id": 187907, "time": "2016-01-22T15:00:25Z", "bug_id": 51140, "creation_time": "2016-01-22T15:00:25Z", "is_private": false, "text": "I think a text area where you can add a message (with variable replacement) should be enough."}, {"count": 5, "text": "Author: pmouawad\nDate: Wed Jan 10 12:50:48 2018\nNew Revision: 1820745\n\nURL: http://svn.apache.org/viewvc?rev=1820745&view=rev\nLog:\nBug 51140 - Response Assertion: add ability to set a specific error/failure message that is later shown in the Assertion Result\nContributed by UbikLoadPack\nBugzilla Id: 51140\n\nModified:\n    jmeter/trunk/src/components/org/apache/jmeter/assertions/ResponseAssertion.java\n    jmeter/trunk/src/components/org/apache/jmeter/assertions/gui/AssertionGui.java\n    jmeter/trunk/src/core/org/apache/jmeter/resources/messages.properties\n    jmeter/trunk/src/core/org/apache/jmeter/resources/messages_fr.properties\n    jmeter/trunk/test/src/org/apache/jmeter/assertions/ResponseAssertionTest.java\n    jmeter/trunk/xdocs/changes.xml", "bug_id": 51140, "is_private": false, "id": 203192, "time": "2018-01-10T12:51:21Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2018-01-10T12:51:21Z", "tags": [], "attachment_id": null}]
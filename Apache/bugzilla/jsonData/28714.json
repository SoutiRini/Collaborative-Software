[{"count": 0, "tags": [], "bug_id": 28714, "text": "When we call apr_file_lock() without APR_FLOCK_NONBLOCK, it doesn't block even\nif it can't acquire the lock.\n\nHere is a workaround patch for apr/file_io/win32/flock.c,\n \n@@ -74,8 +74,13 @@\n             return apr_get_os_error();\n     }\n     else {\n-        if (!LockFile(thefile->filehand, 0, 0, len, 0))\n-            return apr_get_os_error();\n+       /* On Win98/Me, LockFile() never block. So, take care of it. */\n+        while (!LockFile(thefile->filehand, 0, 0, len, 0)) {\n+           if ((type & APR_FLOCK_NONBLOCK) || GetLastError() != 33) {\n+               return apr_get_os_error();\n+           }\n+           apr_sleep(1000);\n+       }\n     }\n \n     return APR_SUCCESS;", "id": 56700, "attachment_id": null, "creator": "inoue@ariel-networks.com", "creation_time": "2004-04-30T14:41:52Z", "time": "2004-04-30T14:41:52Z", "is_private": false}, {"count": 1, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 85715, "time": "2006-02-11T22:05:52Z", "bug_id": 28714, "creation_time": "2006-02-11T22:05:52Z", "is_private": false, "text": "I've committed a variant of this patch, it has a 500ms poll rather than\npausing for a full second to increase the chances of the last thread to\nbe able to catch a high-utilization file lock, and avoids apr_sleep as\nwell as double-conversion of the error result code.  See commit 377054.\n\nAlthough your suggestion creates huge starvation issues, it's better than\ndoing nothing about the problem.\n\nNext time you author a patch, please, NEVER use hardcoded error constants :)"}]
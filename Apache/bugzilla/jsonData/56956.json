[{"count": 0, "tags": [], "text": "Created attachment 31998\nProposed patch\n\nThis patch simply adds a public NPOIFSFileSystem(FileChannel channel, boolean readOnly) constructor, since NPOIFSFileSystem(FileChannel) only allows to create a read-write one. This is especially important because of this change:\n\nhttp://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/poifs/nio/FileBackedDataSource.java?r1=1590319&r2=1590556&diff_format=h\n\nSince that change, using NPOIFileSystem with a non-writable FileChannel went from working to failing with:\n\njava.nio.channels.NonWritableChannelException\n\tat sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:838)\n\tat org.apache.poi.poifs.nio.FileBackedDataSource.read(FileBackedDataSource.java:77)\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.getBlockAt(NPOIFSFileSystem.java:439)\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.readBAT(NPOIFSFileSystem.java:413)\n\nThis new constructor will allow to avoid such regression in client code. I'm using the regression severity because of this (hopefully that's appropriate).\n\nOn a related note, NPOIFSFileSystem(File) is implying read-only mode, while NPOIFSFileSystem(FileChannel) is implying read-write. Is this intended?", "is_private": false, "id": 177727, "creator": "bonniot@gmail.com", "time": "2014-09-11T07:13:37Z", "bug_id": 56956, "creation_time": "2014-09-11T07:13:37Z", "attachment_id": 31998}, {"count": 1, "attachment_id": null, "bug_id": 56956, "text": "The File constructor is read only, as it mirrors the InputStream one. The InputStream one is read only to match that of POIFS, which is always read only when opened for reading as it doesn't support in-place updates. NPOIFS can do in-place updates if you want it to, which is why it needs to offer read+write options\n\nI've applied your patch in r1624226, along with a few related javadoc tweaks to hopefully make read or write clear, thanks!", "id": 177731, "time": "2014-09-11T08:48:47Z", "creator": "apache@gagravarr.org", "creation_time": "2014-09-11T08:48:47Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 56956, "is_private": false, "id": 177740, "time": "2014-09-11T11:07:31Z", "creator": "bonniot@gmail.com", "creation_time": "2014-09-11T11:07:31Z", "tags": [], "text": "Nick, thanks for applying the patch so quickly and for the added comments.\n\nIf I understand your argument for the File constructor being read-only to match InputStream, shouldn't that apply to the FileChannel as well? I.e. consistently use the read-only mode in all constructors.\n\nThis change would have the added benefit that applications that pass a read-only FileChannel would not break when upgrading from 3.10 to 3.11.\n\nOn the other hand, that could potentially break existing code, but only code using trunk or a 3.11 beta, which sounds like a lesser evil than breaking code using a released version.\n\nAttaching the proposed further patch."}, {"count": 3, "tags": [], "creator": "bonniot@gmail.com", "is_private": false, "text": "Created attachment 32002\nChange read-only mode to true by default for FileChannels", "id": 177741, "time": "2014-09-11T11:08:27Z", "bug_id": 56956, "creation_time": "2014-09-11T11:08:27Z", "attachment_id": 32002}, {"count": 4, "tags": [], "text": "That makes sense to me. Second patch applied in r1624266, thanks!", "is_private": false, "id": 177745, "creator": "apache@gagravarr.org", "time": "2014-09-11T12:07:47Z", "bug_id": 56956, "creation_time": "2014-09-11T12:07:47Z", "attachment_id": null}]
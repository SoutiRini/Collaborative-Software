[{"count": 0, "tags": [], "bug_id": 56893, "attachment_id": null, "id": 177403, "time": "2014-08-27T13:15:57Z", "creator": "mmerruko@gmail.com", "creation_time": "2014-08-27T13:15:57Z", "is_private": false, "text": "Hi,\n\nIn the following snippet from org.apache.poi.hssf.record.common.UnicodeString there is a cast from int to a short. In my case I had a string with a length of 65571 which when cast to short would be 35.\n\npublic void setString(String string)\n    {\n        field_3_string = string;\n        setCharCount((short)field_3_string.length());\n        // scan for characters greater than 255 ... if any are\n        // present, we have to use 16-bit encoding. Otherwise, we\n        // can use 8-bit encoding\n        boolean useUTF16 = false;\n        int strlen = string.length();\n\n        for ( int j = 0; j < strlen; j++ )\n        {\n            if ( string.charAt( j ) > 255 )\n        {\n                useUTF16 = true;\n                break;\n            }\n        }\n        if (useUTF16)\n          //Set the uncompressed bit\n          field_2_optionflags = highByte.setByte(field_2_optionflags);\n        else field_2_optionflags = highByte.clearByte(field_2_optionflags);\n    }\n\nNow as setCellValue(String value) in HSSFCell first creates an HSSFRichTextString then calls setCellValue(RichTextString value) this makes the check below valid while in fact it's not.\n\nif(hvalue.length() > SpreadsheetVersion.EXCEL97.getMaxTextLength()){\n  throw new IllegalArgumentException(\"The maximum length of cell contents (text) is 32,767 characters\");\n}\n\nAs I'm not very familiar with the concepts here, excuse me if I'm wrong, but it would seem that the cast could be removed from the setCharCount call. A UnicodeString wouldn't need to enforce the limit set by the Excel standard. That should be just enough to avoid this overflow problem, otherwise checking the size of the original string in setCellValue(String value) might be enough."}, {"count": 1, "tags": [], "bug_id": 56893, "attachment_id": null, "id": 177415, "time": "2014-08-28T05:59:14Z", "creator": "apache@gagravarr.org", "creation_time": "2014-08-28T05:59:14Z", "is_private": false, "text": "Are you able to create a short junit unit test which shows how to get round the check in HSSFRichTextString?\n\n(We need to decide if we should remove the cast, or add an additional check, the unit test showing how to trigger it should help with that)"}, {"count": 2, "tags": [], "bug_id": 56893, "attachment_id": 31951, "text": "Created attachment 31951\nSmall JUnit test which demonstrates the problem with setCellValue(String)", "id": 177446, "time": "2014-08-29T18:50:41Z", "creator": "mmerruko@gmail.com", "creation_time": "2014-08-29T18:50:41Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "dominik.stadler@gmx.at", "text": "The call to HSSFRichTextString(value) and UnicodeString(value) is done before setCellValue(), so we potentially cut off via the case in there before we do the actual check currently.", "id": 179934, "time": "2014-12-22T09:41:43Z", "bug_id": 56893, "creation_time": "2014-12-22T09:41:43Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 56893, "attachment_id": null, "is_private": false, "id": 181428, "time": "2015-03-01T21:58:55Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-03-01T21:58:55Z", "text": "It seems UnicodeString is used for multiple items listed in the spec. \n\nAccording to the spec under \"2.5.294 XLUnicodeString\" the length is specified as 2 bytes.\n\nAnother usage is XLUnicodeRichExtendedString under \"2.5.293 XLUnicodeRichExtendedString\", this one allows continuation records, however the lenght-information still only allows 2 bytes.\n\nSo it seems there is a limit of 65535 characters in the record-definitions.\n\nSpreadsheetVersion.EXCEL97, which we use to verify text-length in other places has 32767, not sure if this is somewhere in the spec or imposed because of other issues. At least formula-text seems to be limited to this value by the spec."}]
[{"count": 0, "tags": [], "bug_id": 47834, "is_private": false, "id": 130367, "creation_time": "2009-09-14T04:55:39Z", "time": "2009-09-14T04:55:39Z", "creator": "guillaume.sauthier@objectweb.org", "text": "Created attachment 24255\nPatch for TldConfig.java (Toncat-6.0.x trunk)\n\nCurrently TldConfig expects all *.jar files to be real files, so in the case of\na completely unpacked webapp (webapp itself + libraries in WEB-INF/lib) it's\nthrowing Exception.\n\nThe attached patch correct this behavior by adding a new method that knows how\nto handle the \"jar as directory\" case.", "attachment_id": 24255}, {"count": 1, "tags": [], "bug_id": 47834, "is_private": false, "text": "The patch as currently written is broken since it only addresses TldConfig and ignores org.apache.jasper.compiler.TldLocationsCache\n\nI have changed the status of this to enhancement since supporting JAR as a directory layout is outside the servlet spec and would be a Tomcat specific extension.\n\nAs it happens, I have support for this already written and currently undergoing testing at work. I'll commit those changes to Tomcat trunk (ie Tomcat 7) so you can also test the code.\n\nNote that to get into Tomcat 6, there are a series of TLD related patches that first need to be approved to make TLD handling correct and consistent for Catalina and Jasper. Only when those changes have been approved can extensions like the one described here be applied.\n\nI'll update this issue once I apply the patches to trunk.", "id": 130368, "time": "2009-09-14T05:15:14Z", "creator": "markt@apache.org", "creation_time": "2009-09-14T05:15:14Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 47834, "text": "The patch for trunk was http://svn.apache.org/viewvc?rev=814617&view=rev\n\nLet us know how you get on. If testing is successful, and once the preparatory TLD changes have been made, I'll propose the patch for back port to 6.0.x", "count": 2, "id": 130370, "time": "2009-09-14T05:41:53Z", "creator": "markt@apache.org", "creation_time": "2009-09-14T05:41:53Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 47834, "text": "Thanks for the review Mark.\n\nI cannot use the TC7 trunk from JOnAS (bound to TC 6.0.20 for now), so I gave it a try using a pure tomcat.\n\nI took a simple web app with a jar unpacked in the WEB-INF/lib directory.\nIt doesn't work as expected :'(\n\nIn tldScanWebInfLib(), when you get the resource paths from WEB-INF/lib, my jar file is there, but the String is of the form: \"<something>.jar/\". The trailing '/' is a problem because you test for \".jar\" only.\n\nAnyway, even if something was found, I think the current code is wrong in handling directories: in tldScanJar() the first thing we do is opening the URL to get the URLConnection. If the URL is referring to a directory, we will very quickly get an IOException.\n\nI'll work on a refined patch tomorrow.", "id": 130382, "time": "2009-09-14T09:43:50Z", "creator": "guillaume.sauthier@objectweb.org", "creation_time": "2009-09-14T09:43:50Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47834, "is_private": false, "text": "(In reply to comment #3)\nThanks for the testing.\n\n> In tldScanWebInfLib(), when you get the resource paths from WEB-INF/lib, my jar\n> file is there, but the String is of the form: \"<something>.jar/\". The trailing\n> '/' is a problem because you test for \".jar\" only.\nThat is expected. Exploded jar files should be dealt with tldScanClassloaders(). You'll need to set the org.apache.jasper.compiler.TldLocationsCache.SCAN_CLASSPATH system property as well as ...SCAN_ALL_FILES and ...SCAN_ALL_DIRS\n\n> Anyway, even if something was found, I think the current code is wrong in\n> handling directories: in tldScanJar() the first thing we do is opening the URL\n> to get the URLConnection. If the URL is referring to a directory, we will very\n> quickly get an IOException.\nHmm. I didn't see that in my testing. I doubt I tested all possible code paths though.\n\n> I'll work on a refined patch tomorrow.\nGreat.", "id": 130384, "time": "2009-09-14T09:53:44Z", "creator": "markt@apache.org", "creation_time": "2009-09-14T09:53:44Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 47834, "text": "(In reply to comment #4)\n> Thanks for the testing.\n> \n> > In tldScanWebInfLib(), when you get the resource paths from WEB-INF/lib, my jar\n> > file is there, but the String is of the form: \"<something>.jar/\". The trailing\n> > '/' is a problem because you test for \".jar\" only.\n> That is expected. Exploded jar files should be dealt with\n> tldScanClassloaders(). You'll need to set the\n> org.apache.jasper.compiler.TldLocationsCache.SCAN_CLASSPATH system property as\n> well as ...SCAN_ALL_FILES and ...SCAN_ALL_DIRS\n\nI'm sorry, I didn't get the reason why there is a method to deal with WEB-INF/lib/*.jar content (excluding unpacked directories) and another one that scan the webapp classloader. Isn't it doing the job twice ? I mean the URLs we get from the ClassLoader are WEB-INF/classes and all the jars from WEB-INF/lib.\n\nI agree there are also the URLs from the parent's URLClassLoader, but in that case, it's not necessary to rescan the webapp's libraries, it should be sufficent to scan only the parent ClassLoaders.\nIn that way of thinking, it appears that tldScanClassloaders() is not appropriate when dealing with unpacked jar libraries, they should be processed in tldScanWebInfLib().\n\nMaybe you wanted to separate (using the SCAN_CLASSPATH flag) standard processing from tomcat specific \"extension\" ?\n\nWDYT ?", "id": 130395, "time": "2009-09-15T00:23:17Z", "creator": "guillaume.sauthier@objectweb.org", "creation_time": "2009-09-15T00:23:17Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 47834, "text": "Oh, I forgot to say something important: unpacked jar libraries are not part of the scanned ClassLoader. It seems that when Tomcat creates the WebAppClassLoader, it only looks at *.jar as regular files.", "id": 130396, "time": "2009-09-15T00:25:31Z", "creator": "guillaume.sauthier@objectweb.org", "creation_time": "2009-09-15T00:25:31Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 47834, "is_private": false, "text": "Yes, the handling of the per spec requirements and the handling of extensions should be kept separate.\n\nI tend to prefer clarity over efficiency for code that is only going to be run at webapp start.\n\nIt isn't clear if you have found something that is broken or something that you would have implemented differently.", "id": 130397, "time": "2009-09-15T01:15:08Z", "creator": "markt@apache.org", "creation_time": "2009-09-15T01:15:08Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 47834, "text": "(In reply to comment #7)\n> Yes, the handling of the per spec requirements and the handling of extensions\n> should be kept separate.\n> \n> I tend to prefer clarity over efficiency for code that is only going to be run\n> at webapp start.\n\nI'll keep that in mind for my undergoing patch :)\n\n> \n> It isn't clear if you have found something that is broken or something that you\n> would have implemented differently.\n\nI think the unpacked jar handling is broken, and I think I will provide a patch that is implemented differently.", "id": 130399, "time": "2009-09-15T01:45:31Z", "creator": "guillaume.sauthier@objectweb.org", "creation_time": "2009-09-15T01:45:31Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 47834, "text": "Just a note to remember how we discovered the problem. That may help to find the right solution, as my first bug explanation was not right.\n\nIt's with TC6.0.20.\nIn JOnAS we're deploying a development EAR, meaning an EAR unpacked (EjbJar unpacked and webapp unpacked, but lids in WEB-INF/lib still packed).\nThere is a ClassLoader hierarchy:\nEjbJarsLoader (created by JOnAS and containing a \"file://.../ejbjar.jar/\" URL: unpacked form) parent of WebappClassLoader (created by Tomcat, untouched).\n\nIn TC6, the TLDs where discovered only using the ClassLoader scan. So, when it was analyzing the unpacked EjbJar URL, it was failing because the code was expecting an regular jar file.\n\nIn TC7, things are different:\n1. TLDs declared in web.xml\n2. TLDs found in WEB-INF/ and subdirectories (excluding WEB-INF/lib/ and WEB-INF/classes/)\n3. TLDs from regular jar files discovered in WEB-INF/lib/\n4. ClassLoader scanning\n\nBTW, additionnal question, I see that the WEB-INF/classes directory will never be scanned for *.tld if the SCAN_CLASSPATH is not set. Is this a spec requirement (that TLD cannot be in WEB-INF/classes ) ? I say that because WEB-INF/classes can only be searched during the ClassLoader scanning, and then, it's failing because the code is expecting a regular file, not a directory....", "id": 130411, "time": "2009-09-15T04:38:01Z", "creator": "guillaume.sauthier@objectweb.org", "creation_time": "2009-09-15T04:38:01Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 47834, "attachment_id": null, "text": "(In reply to comment #8)\n> > It isn't clear if you have found something that is broken or something that you\n> > would have implemented differently.\n> \n> I think the unpacked jar handling is broken, and I think I will provide a patch\n> that is implemented differently.\n\nI had some times to re-think and debug the current behavior of TldConfig when dealing with unpacked jar directory during the classloader scan.\nI was thinking that url.openConnection() would throw an IOException when the URL refers to a File, but it works and returns a FileUrlConnection. So the execution can continue and it handles directory nicely.\n\nAFAICT, the current code seems to work well with unpacked directory.\n\nThanks for your time Mark.", "id": 130415, "time": "2009-09-15T08:30:09Z", "creator": "guillaume.sauthier@objectweb.org", "creation_time": "2009-09-15T08:30:09Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 47834, "attachment_id": null, "text": "Thanks for the additional testing.", "id": 130416, "time": "2009-09-15T08:33:10Z", "creator": "markt@apache.org", "creation_time": "2009-09-15T08:33:10Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 47834, "text": "Tomcat 6.0.x has now reached End Of Life.", "id": 195781, "time": "2017-01-01T11:32:20Z", "creator": "markt@apache.org", "creation_time": "2017-01-01T11:32:20Z", "is_private": false, "attachment_id": null}]
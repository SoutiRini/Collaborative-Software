[{"count": 0, "tags": [], "bug_id": 21095, "text": "We're experiencing a problem with SSIs in both Apache 2.0.44 and 2.0.46.  I \nhave posted this issue to the apache users group twice to see if anyone else \nhas run into this same problem but I never heard any response.  I also \nsearched through bugzilla for any bugs that might be similar.\n\nInitially, we noticed that, on certain pages on our site, SSI directives would \nstop being processed about halfway through the page.  I began looking into the \nproblem by checking our syntax, looking for any wierd characters in a hex \neditor and then finally by making small changes to the file to see if it \naffected the service of the page.  The first oddity that I came across was \nthat if I opened up the problematic file and inserted a single space at the \nbeginning, the SSI directives would all be correctly processed.  If I again \nremoved the space, the problem came back..about halfway down the page, after a \nblock of SSI conditionals, the rest of the SSIs were not processed and the SSI \ntags were sent to the browser.  After a little more investigation, I noticed \nthat the problem seemed to always manifest itself when the last character of \nan SSI conditional block (e.g.  the final > in <!--#endif-->) occurred at the \n8000th byte in the file .  To test this out, I created a completely new test \nfile, ensuring that the final character in a conditional SSI block was the \n8000th byte and I placed another include immediately after the conditional \nblock.  Sure enough, the directives in the conditional block were processed \nsuccessfully but the include after the conditionals was sent to the browser.  \nI then tested this same issue out using a virtual include directive instead of \na conditional block and the result was the same.\n\nI tried my hand with the mod_include source and added some debug statements \nbut, honestly, I'm not much of a C coder and I'm not terribly familliar with \nthe internals of Apache.\n\nI have attached two versions of my test file, one that works \n(test_working.html) and one that doesnt (test_broken.html).  The only \ndifference between these two files is a space at the very beginning.\n\nAdditional platform and version information is listed at the bottom of this \ndescription.  Please let me know if you need any additional information.  \nThanks.\n\nKevin\n\nOS: Debian Linux 3.0, 2.4.18 kernel\nPlatform: Intel x86\nApache version: 2.0.44, 2.0.46", "id": 39437, "time": "2003-06-25T20:34:53Z", "creator": "kevinmvarley@yahoo.com", "creation_time": "2003-06-25T20:34:53Z", "is_private": false, "attachment_id": null}, {"attachment_id": 6976, "tags": [], "creator": "kevinmvarley@yahoo.com", "text": "Created attachment 6976\nworking SSI file", "count": 1, "id": 39438, "time": "2003-06-25T20:35:55Z", "bug_id": 21095, "creation_time": "2003-06-25T20:35:55Z", "is_private": false}, {"count": 2, "text": "Created attachment 6977\nproblematic SSI file", "creator": "kevinmvarley@yahoo.com", "attachment_id": 6977, "id": 39439, "time": "2003-06-25T20:36:29Z", "bug_id": 21095, "creation_time": "2003-06-25T20:36:29Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "creator": "nd@perlig.de", "text": "Thanks for your detailed description! Will dig into the code.", "id": 39596, "time": "2003-06-29T16:54:03Z", "bug_id": 21095, "creation_time": "2003-06-29T16:54:03Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 21095, "attachment_id": null, "id": 39896, "time": "2003-07-02T22:52:38Z", "creator": "nd@perlig.de", "creation_time": "2003-07-02T22:52:38Z", "is_private": false, "text": "Hmm. That is really strange. I cannot reproduce the situation. I'm sure I saw\nsuch a situation earlier (but never found enough common issues). I've tested now\n2.1.0-dev and 2.0.47-dev.\n\nDo you have the possibility to compile directly from CVS and check it with your\ndata?\nDoes debian use any specific patches? (Thom?)"}, {"count": 5, "tags": [], "creator": "kevinmvarley@yahoo.com", "attachment_id": null, "text": "I'll rebuild from cvs today.", "id": 39921, "time": "2003-07-03T12:54:41Z", "bug_id": 21095, "creation_time": "2003-07-03T12:54:41Z", "is_private": false}, {"count": 6, "tags": [], "creator": "kevinmvarley@yahoo.com", "attachment_id": null, "text": "I just grabbed 2.0.47-dev and built it.  Still seeing the same problem.", "id": 39925, "time": "2003-07-03T13:30:33Z", "bug_id": 21095, "creation_time": "2003-07-03T13:30:33Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 21095, "text": "hmm. what says `httpd -l`?\n\nCan you post your complete config (or mail me privately if you don't want to\npublish it)?", "id": 39932, "time": "2003-07-03T14:45:04Z", "creator": "nd@perlig.de", "creation_time": "2003-07-03T14:45:04Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "thom@planetarytramp.net", "attachment_id": null, "text": "Nope, no additional patches for SSI for the Debian packages.\nI'll see if I can replicate with the current packages and also with the .47 tag\nnext week.\n", "id": 39939, "time": "2003-07-03T16:27:17Z", "bug_id": 21095, "creation_time": "2003-07-03T16:27:17Z", "is_private": false}, {"count": 9, "tags": [], "creator": "kevinmvarley@yahoo.com", "attachment_id": null, "text": "In order to spare you the pain of wading through our rewrite-and-redirect-\nladen config file, I worked on replicating the bug from a vanilla apache \ninstall.  \n\nI did a default install and made changes to the config file only to enable \nSSI.  The bug did not manifest itself in this situation.  So I began looking \nat the settings in our custom config and experimenting by making similar \nchanges to the vanilla install.\n\nOne thing that I failed to mention when I posted this bug is that our document \nroot is an NFS volume.  Thus in our config, as recommended, we turned off \nsendfile and mmap support.\n\nSo I tried turning memory mapping off (EnableMMap off) but left sendfile \nsupport on and was then able to successfully replicate the erroneous SSI \nbehavior.  To further narrow the scope of this error, I tried the same config \nbut switched the document root to a non-NFS volume and I still encountered the \nsame problem. So it would appear that this error occurs only when memory \nmapping is turned off.\n\nAndre: I will be mailing you the config I have been working with in a few \nminutes.\n\n", "id": 40195, "time": "2003-07-08T17:57:28Z", "bug_id": 21095, "creation_time": "2003-07-08T17:57:28Z", "is_private": false}, {"count": 10, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "text": "Well, thanks again for your deep investigation. Received your config and will\nre-try to reproduce now ;-)", "id": 40207, "time": "2003-07-08T18:54:04Z", "bug_id": 21095, "creation_time": "2003-07-08T18:54:04Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 21095, "text": "While debugging a similar problem, the following patch solved that problem for me:\n\nIndex: modules/filters/mod_include.c\n===================================================================\nRCS file: /home/cvs/httpd-2.0/modules/filters/mod_include.c,v\nretrieving revision 1.233\ndiff -u -r1.233 mod_include.c\n--- modules/filters/mod_include.c\n+++ modules/filters/mod_include.c\n@@ -477,7 +477,7 @@\n\n         if (len)\n         {\n-            pos = bndm(str, slen, c, len, ctx->start_seq_pat);\n+            pos = bndm(str, slen, buf, len, ctx->start_seq_pat);\n             if (pos != len)\n             {\n                 ctx->head_start_bucket = dptr;\n\nCan you apply it and see if it changes something for you?\n\nThanks.", "id": 40325, "time": "2003-07-10T11:23:22Z", "creator": "nd@perlig.de", "creation_time": "2003-07-10T11:23:22Z", "is_private": false, "attachment_id": null}, {"count": 12, "text": "I applied that patch but I'm still getting the same error.", "creator": "kevinmvarley@yahoo.com", "attachment_id": null, "id": 40362, "time": "2003-07-10T17:33:50Z", "bug_id": 21095, "creation_time": "2003-07-10T17:33:50Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 21095, "attachment_id": null, "id": 40373, "time": "2003-07-10T22:39:34Z", "creator": "nd@perlig.de", "creation_time": "2003-07-10T22:39:34Z", "is_private": false, "text": "Well. It seems, we've got it now. The following patch should solve the\nproblem for you. Yet another test with your data would be appreciated :-)\n\nIndex: modules/filters/mod_include.c\n===================================================================\nRCS file: /home/cvs/httpd-2.0/modules/filters/mod_include.c,v\nretrieving revision 1.233\ndiff -u -r1.233 mod_include.c\n--- modules/filters/mod_include.c\n+++ modules/filters/mod_include.c\n@@ -429,7 +429,7 @@\n         }\n\n         if (len == 0) { /* end of pipe? */\n-            break;\n+            continue;\n         }\n\n         /* Set our buffer to use. */\n@@ -600,7 +600,7 @@\n         }\n\n         if (len == 0) { /* end of pipe? */\n-            break;\n+            continue;\n         }\n         if (dptr == ctx->tag_start_bucket) {\n             c = buf + ctx->tag_start_index;"}, {"attachment_id": null, "tags": [], "creator": "nd@perlig.de", "text": "argh! DO NOT USE the previous code. It produces a loop. Sorry. Here comes the\nright patch:\n\nIndex: modules/filters/mod_include.c\n===================================================================\nRCS file: /home/cvs/httpd-2.0/modules/filters/mod_include.c,v\nretrieving revision 1.233\ndiff -u -r1.233 mod_include.c\n--- modules/filters/mod_include.c\n+++ modules/filters/mod_include.c\n@@ -429,7 +429,8 @@\n         }\n\n         if (len == 0) { /* end of pipe? */\n-            break;\n+            dptr = APR_BUCKET_NEXT(dptr);\n+            continue;\n         }\n\n         /* Set our buffer to use. */\n@@ -600,7 +601,8 @@\n         }\n\n         if (len == 0) { /* end of pipe? */\n-            break;\n+            dptr = APR_BUCKET_NEXT(dptr);\n+            continue;\n         }\n         if (dptr == ctx->tag_start_bucket) {\n             c = buf + ctx->tag_start_index;\n", "count": 14, "id": 40376, "time": "2003-07-10T23:03:47Z", "bug_id": 21095, "creation_time": "2003-07-10T23:03:47Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 21095, "attachment_id": null, "id": 40414, "time": "2003-07-11T02:04:27Z", "creator": "kevinmvarley@yahoo.com", "creation_time": "2003-07-11T02:04:27Z", "is_private": false, "text": "Just applied that patch and the problem appears to be solved!  Thank you so \nmuch for your help.\n\nDo you think that this patch would be safe to apply to the 2.0.46 source (our \nproduction setup)?\n\nAnd if it's possible, could you give me a short description of the solution?  \nIt would be much appreciated.\n\nThanks again!"}, {"attachment_id": null, "tags": [], "creator": "jwoolley@apache.org", "text": "Andre: you read my mind about the bucket_next() thing.  I was just about to point that \nout.  :)  An alternative would be to do: \n         if (len == 0) { /* end of pipe? */ \n-            break; \n+            apr_bucket *next_dptr = APR_BUCKET_NEXT(dptr); \n+            apr_bucket_delete(dptr); \n+            dptr = next_dptr; \n+            continue; \n         } \n \nOH!  But hang on.  There's a bug in both cases: if (dptr) becomes the sentinel we \nmust not continue; we have to break.  Otherwise we'll segfault the next time through \nthe loop when we try to call apr_bucket_read() on the sentinel.  That is, no doubt, why \nit was break; before -- a pipe bucket was probably always the last bucket in the \nbrigade when we hit that case during the testing.  The code was wrong, but it would \nhave worked in that instance. \n \nTry this patch instead: \n \nIndex: mod_include.c \n=================================================================== \nRCS file: /home/cvs/httpd-2.0/modules/filters/mod_include.c,v \nretrieving revision 1.233 \ndiff -u -d -r1.233 mod_include.c \n--- mod_include.c       3 Feb 2003 17:53:01 -0000       1.233 \n+++ mod_include.c       11 Jul 2003 03:03:25 -0000 \n@@ -429,7 +429,13 @@ \n         } \n \n         if (len == 0) { /* end of pipe? */ \n-            break; \n+            apr_bucket *next_dptr = APR_BUCKET_NEXT(dptr); \n+            apr_bucket_delete(dptr); \n+            dptr = next_dptr; \n+            if (dptr == APR_BRIGADE_SENTINEL(bb)) { \n+                break; \n+            } \n+            continue; \n         } \n \n         /* Set our buffer to use. */ \n@@ -600,7 +606,13 @@ \n         } \n \n         if (len == 0) { /* end of pipe? */ \n-            break; \n+            apr_bucket *next_dptr = APR_BUCKET_NEXT(dptr); \n+            apr_bucket_delete(dptr); \n+            dptr = next_dptr; \n+            if (dptr == APR_BRIGADE_SENTINEL(bb)) { \n+                break; \n+            } \n+            continue; \n         } \n         if (dptr == ctx->tag_start_bucket) { \n             c = buf + ctx->tag_start_index; \n ", "count": 16, "id": 40415, "time": "2003-07-11T03:07:14Z", "bug_id": 21095, "creation_time": "2003-07-11T03:07:14Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 21095, "attachment_id": null, "id": 40432, "time": "2003-07-11T09:23:18Z", "creator": "jwoolley@apache.org", "creation_time": "2003-07-11T09:23:18Z", "is_private": false, "text": "Sigh.  It's always something.  After hours of debugging, I figured out that deleting the \nbucket at this point turns out to be a bad idea because it gets deleted again later (or \nat least will once another mod_include patch we're working on gets committed).  So, \nwe compromise.  The following version of the patch does what I'd expect it to do given \nthe most rigorous and torturous test case I could contrive for mod_include.  So \nassuming it still fixes your bug (which I can't tell from the attachments you gave \nwhether it does or not for some reason), which it should, then I feel this patch is safe \nfor production use.  As soon as I get the confirmation from you, I'll commit it to \nhttpd-2.1-dev and propose it for inclusion in 2.0.48. \n \nIndex: mod_include.c \n=================================================================== \nRCS file: /home/cvs/httpd-2.0/modules/filters/mod_include.c,v \nretrieving revision 1.233 \ndiff -u -d -r1.233 mod_include.c \n--- mod_include.c       3 Feb 2003 17:53:01 -0000       1.233 \n+++ mod_include.c       11 Jul 2003 09:15:58 -0000 \n@@ -429,7 +429,11 @@ \n         } \n \n         if (len == 0) { /* end of pipe? */ \n-            break; \n+            dptr = APR_BUCKET_NEXT(dptr); \n+            if (dptr == APR_BRIGADE_SENTINEL(bb)) { \n+                break; \n+            } \n+            continue; \n         } \n \n         /* Set our buffer to use. */ \n@@ -600,7 +604,11 @@ \n         } \n \n         if (len == 0) { /* end of pipe? */ \n-            break; \n+            dptr = APR_BUCKET_NEXT(dptr); \n+            if (dptr == APR_BRIGADE_SENTINEL(bb)) { \n+                break; \n+            } \n+            continue; \n         } \n         if (dptr == ctx->tag_start_bucket) { \n             c = buf + ctx->tag_start_index; \n "}, {"count": 18, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "text": "Kevin: the actual error is that a bucket is splitted at the end (i.e. the '>'\nchar at the 8000th byte), leaving a zero byte bucket around that made the len ==\n0 test success (and thus the matching fail) in the next loop.\n\nCliff: The continue is just a goto to the while condition which breaks the loop\nalready if the next bucket is the sentinel, isn't it?", "id": 40462, "time": "2003-07-11T13:14:17Z", "bug_id": 21095, "creation_time": "2003-07-11T13:14:17Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 21095, "attachment_id": null, "id": 40488, "time": "2003-07-11T16:11:41Z", "creator": "kevinmvarley@yahoo.com", "creation_time": "2003-07-11T16:11:41Z", "is_private": false, "text": "So my last question would be: why does this bug only show itself if memory \nmapping is disabled?"}, {"count": 20, "text": "Andre: you win.  I guess I thought continue; went back to the top of the loop and thus \nwould not catch the condition on a do{}while rather than a while(){}.  But K&R tells \nme it will work your way.  Good call.  :) \n \nKevin: the reason is that with mmaping enabled, the entire file is slurped in as one big \nmmap bucket.  with mmap disabled, it actually calls apr_file_read() on the file and \npulls the data into memory 8000 bytes at a time, one buffer per heap bucket. \n \n+1 to the version of the patch that said: \n \n         if (len == 0) { /* end of pipe? */ \n-            break; \n+            dptr = APR_BUCKET_NEXT(dptr); \n+            continue; \n         } \n \nI believe it safe for production. ", "creator": "jwoolley@apache.org", "attachment_id": null, "id": 40506, "time": "2003-07-11T19:31:31Z", "bug_id": 21095, "creation_time": "2003-07-11T19:31:31Z", "tags": [], "is_private": false}, {"count": 21, "tags": [], "bug_id": 21095, "text": "Thanks for the explanation.\n\nSo just to be sure: I should be using the initial working patch from Andre for \nthis bug?\n\n", "id": 40516, "time": "2003-07-11T21:13:27Z", "creator": "kevinmvarley@yahoo.com", "creation_time": "2003-07-11T21:13:27Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "creator": "jwoolley@apache.org", "attachment_id": null, "text": "Yep!  That's the one we'll use. ", "id": 40518, "time": "2003-07-11T22:20:01Z", "bug_id": 21095, "creation_time": "2003-07-11T22:20:01Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 33198, "attachment_id": null, "id": 69923, "time": "2005-01-21T14:53:08Z", "creator": "speeves@erikin.com", "creation_time": "2005-01-21T14:53:08Z", "is_private": false, "text": "When:\n\n1. using mod_auth and mod_auth_ldap in conjunction with each other\n2. AuthAuthoritative is set to Off \n3. a user is prompted to enter their credentials\n4. the user is successfully authenticated using mod_auth\n5. the user is not a member of a group with authorization to access a document\n6. mod_auth DECLINES to mod_auth_ldap for authorization\n\nthe following occurs:\n\nin mod_auth_ldap_auth_checker, (authorisation phase), *req is reset to 0x0, and\nany attempt to test req->dn causes Apache to segfault.\n\nThis happens because req is only set in mod_auth_ldap_check_user_id,\n(authentication phase), with the following lines (279-281):\n\n    mod_auth_ldap_request_t *req =\n        (mod_auth_ldap_request_t *)apr_pcalloc(r->pool,\nsizeof(mod_auth_ldap_request_t));\n    ap_set_module_config(r->request_config, &auth_ldap_module, req);\n\nWhen the authentication phase is bypassed, as it was in our example above, req\nis uninitialized, causing the segfaults in mod_auth_ldap_auth_checker.\n\nI don't know if this would happen with any other authen/authz modules used in\nthis same configuration, but assume that it would.\n\nThe following patch for modules/experimental/mod_auth_ldap.c is our current\nwork-around for this issue.  It simply tests for the existence of req, and\nreturns HTTP_UNAUTHORIZED if req does not exist.  I don't know if this is the\noptimal solution, but hopefully it will be a jumping off point for you.  \n\n--- mod_auth_ldap.c.orig        2005-01-13 11:40:30.000000000 -0600\n+++ mod_auth_ldap.c     2005-01-21 07:12:57.000000000 -0600\n@@ -423,6 +423,17 @@\n     char *w;\n     int method_restricted = 0;\n\n+    if (!req) {\n+      ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n+                   \"[%d] auth_ldap authorise: \"\n+                   \"user authenticated successfully but not authorized \"\n+                   \"by another authentication module.  This causes a segfault \"\n+                   \"when trying to access req->dn throughout\nmod_auth_ldap_auth_checker; \"\n+                   \"failing authorisation for %s\",\n+                   getpid(), r->user);\n+      return HTTP_UNAUTHORIZED;\n+    }\n+\n     if (!sec->enabled) {\n         return DECLINED;\n     }"}, {"count": 1, "tags": [], "bug_id": 33198, "attachment_id": 14063, "id": 69924, "time": "2005-01-21T14:55:49Z", "creator": "speeves@erikin.com", "creation_time": "2005-01-21T14:55:49Z", "is_private": false, "text": "Created attachment 14063\nApache 2.0.52 mod_auth_ldap authorization fix"}, {"count": 2, "tags": [], "text": "Could you check for me whether this bug still exists in the latest trunk version\nof httpd v2.1 and apr v1.1?\n\nLDAP development is now focused on the httpd v2.1 and apr v1.1 branches, as the\ncode in httpd v2.0 needed to be largely overhauled to work correctly.\n", "is_private": false, "id": 69950, "creator": "minfrin@apache.org", "time": "2005-01-21T22:54:13Z", "bug_id": 33198, "creation_time": "2005-01-21T22:54:13Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 33198, "attachment_id": null, "is_private": false, "id": 70172, "time": "2005-01-27T14:54:55Z", "creator": "speeves@erikin.com", "creation_time": "2005-01-27T14:54:55Z", "text": "(In reply to comment #2)\n> Could you check for me whether this bug still exists in the latest trunk version\n> of httpd v2.1 and apr v1.1?\n> \n> LDAP development is now focused on the httpd v2.1 and apr v1.1 branches, as the\n> code in httpd v2.0 needed to be largely overhauled to work correctly.\n> \nThe SEGFAULT does not occur in httpd v2.1 and apr v1.1, (Jan. 21, 2005 trunk),\nbut another issue(?) does show itself:\n\n<snip>\ndebian unstable:\nlibldap2 2.1.30-3\nlibldap2-dev 2.1.30-3\nhttpd-2.1 trunk (Jan 21, 2005)\napr* trunk (Jan 21, 2005)\n\nLDAP Server:\nNovell eDirectory 8.7.3\n\n1. if user authenticates with mod_auth_basic\n2. doesn't belong to group in htgroup file which has authorization for accessing\nfiles, etc.\n3. mod_auth_basic declines to mod_authnz_ldap\n4. at mod_authnz_ldap.c->authz_ldap_check_user_access line 543\n5. if req doesn't exist (!req), then call:\n5. util_ldap.c function util_ldap_cache_getuserdn with ldc->bound = 1 (this\nwould be the second time that the user tries to login).\n a. (?) line 1109 -- tries to connect to the ldap server with the dn built from\nusername sent by end-user. \n b. (?) fails to bind\n c. line 1114 -- tries to use the cached connection to ldap server to search,\nwhich causes:\n\n/************ begin backtrace  ******************/\n\nProgram received signal SIGPIPE, Broken pipe.\n0xb7d9b5ae in __write_nocancel () from /lib/tls/libpthread.so.0\n\n(gdb) backtrace\n#0  0xb7d9b5ae in __write_nocancel () from /lib/tls/libpthread.so.0\n#1  0xb7e2606d in ber_int_sb_write () from /usr/lib/liblber.so.2\n#2  0xb7e26b57 in ber_int_sb_write () from /usr/lib/liblber.so.2\n#3  0xb7e25ec4 in ber_int_sb_write () from /usr/lib/liblber.so.2\n#4  0xb7e22be9 in ber_flush () from /usr/lib/liblber.so.2\n#5  0xb7e45117 in ldap_int_flush_request () from /usr/lib/libldap.so.2\n#6  0xb7e45308 in ldap_send_server_request () from /usr/lib/libldap.so.2\n#7  0xb7e4502a in ldap_send_initial_request () from /usr/lib/libldap.so.2\n#8  0xb7e3662e in ldap_search_ext () from /usr/lib/libldap.so.2\n#9  0xb7e3675b in ldap_search_ext_s () from /usr/lib/libldap.so.2\n#10 0x080a2e75 in util_ldap_cache_getuserdn (r=0x82830e8, ldc=0x8216498, \n    url=0x8209250 \"ldap://ldap.example.com:389/ou=users,o=example?uid\", \n    basedn=0x8209290 \"ou=users,o=example\", scope=2, attrs=0x82092a0, \n    filter=0xbfffd4d0 \"(&(objectclass=*)(uid=username))\", binddn=0xbfffd4cc, \n    retvals=0xbfffd4c8) at util_ldap.c:1114\n#11 <function called from gdb>\n#12 authz_ldap_check_user_access (r=0x82830e8) at mod_authnz_ldap.c:551\n#13 0x0807a229 in ap_run_auth_checker (r=0x82830e8) at request.c:76\n#14 0x0807a87d in ap_process_request_internal (r=0x82830e8) at request.c:200\n#15 0x080dc629 in ap_process_request (r=0x82830e8) at http_request.c:253\n#16 0x080d9715 in ap_process_http_connection (c=0x826f230) at http_core.c:171\n#17 0x08087644 in ap_run_process_connection (c=0x826f230) at connection.c:42\n#18 0x08087a3e in ap_process_connection (c=0x826f230, csd=0x826f098)\n    at connection.c:175\n#19 0x08114eb7 in child_main (child_num_arg=0) at prefork.c:625\n#20 0x08114f9a in make_child (s=0x8169970, slot=0) at prefork.c:665\n#21 0x08115565 in ap_mpm_run (_pconf=0x81620a8, plog=0x81b21e8, s=0x8169970)\n    at prefork.c:941\n#22 0x0806a338 in main (argc=4, argv=0xbffff844) at main.c:703\n(gdb) \n/******** end backtrace *****************/\n\nerror_log:\n[Thu Jan 27 06:56:45 2005] [debug] mod_authnz_ldap.c(544): [client 192.168.1.9]\nldap authorize: Creating LDAP req structure\n\n/*** But, if the process is allowed to finish, it will print this to the\nerror_log: ***/\n[Thu Jan 27 07:02:06 2005] [debug] mod_authnz_ldap.c(556): [client 192.168.1.9]\nauth_ldap authorise: User DN not found, ldap_search_ext_s() for user failed with\nserver down\n\n/*** util_ldap.c (1109-1121) ***/ \n\n/* If the connection is already bound, return\n    */\n    if (ldc->bound)\n    {\n        ldc->reason = \"LDAP: connection open successful (already bound)\";\n        return LDAP_SUCCESS;\n    }\n    /* try do the search */\n    if ((result = ldap_search_ext_s(ldc->ldap,\n\t\t\t\t    (char *)basedn, scope,\n                                    (char *)filter, attrs, 0, \n\t\t\t\t    NULL, NULL,\n                                    NULL, -1, &res)) == LDAP_SERVER_DOWN) {\n        ldc->reason = \"ldap_search_ext_s() for user failed with server down\";\n        goto start_over;\n    }\n\nIf ldc->bound, then return LDAP_SUCCESS, but the connection is not returned...??\n</snip>\n\nI tried to track the problem down to its source, ( ;) ), but it is beyond me at\nthis time.  I figured you would probably be better equipped to see/fix the\nissue, (if it really is one).\n\nBTW, should apache2.1 bugs be sent to the dev@httpd.apache.org mailing list?\n\nthanks :)"}, {"count": 4, "tags": [], "text": "Here is the <Location> container that is used with the SIGPIPE issue in comment #3:\n\n<Location /publish>\n        ###### begin of mod_auth\n          AuthType Basic\n          AuthName \"Stinky monkey!!\"\n          AuthBasicProvider file ldap\n\n          AuthBasicAuthoritative Off\n          AuthzGroupFileAuthoritative Off\n          AuthUserFile /etc/httpd/conf/htpasswd\n          AuthGroupFile /etc/httpd/conf/htgroup\n        ###### end of mod_auth\n\n        ##### Beginning mod_auth_ldap ##########################\n         ######  These lines work for ldap authn and authz\n          AuthLDAPURL ldap://www.example.com/ou=users,o=example?uid\n          AuthLDAPBindDN \"binddn\"\n          AuthLDAPBindPassword \"bindpw\"\n         ######  the lines above work for ldap authn and authz\n\n          require ldap-group cn=web,ou=webcontainer,o=example\n          require group admin\n        ##### End mod_auth_ldap ##########################\n\n        Dav On\n        Options None\n        ForceType text/plain\n</Location>\n", "attachment_id": null, "id": 70174, "creator": "speeves@erikin.com", "time": "2005-01-27T15:46:38Z", "bug_id": 33198, "creation_time": "2005-01-27T15:46:38Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 33198, "attachment_id": null, "is_private": false, "id": 71650, "time": "2005-03-01T01:05:44Z", "creator": "bnicholes@apache.org", "creation_time": "2005-03-01T01:05:44Z", "text": "The ldap_search_ext_s() failure case did not include a call to \nutil_ldap_connection_unbind() to force the bad connection status to unbound.  "}]
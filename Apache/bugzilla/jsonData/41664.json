[{"count": 0, "tags": [], "creator": "hlship@gmail.com", "attachment_id": null, "text": "It is extremely useful to be able to query the class path for the existence of\nfiles.  ClassLoader includes a method, getResources(), for this purpose. It\nreturns an enumeration (it's an old API) of the URLs of all the matching resources.\n\nIn terms of Sun's ClassLoaders, including URLClassLoader, if you request a path,\nand not a file, you get the contents of folder if it exists.  A typical path\nmight be \"org/example/myapp/pages/\", in order to search for resources, including\nclass files, within the org.example.myapp.pages package.\n\nFor a file URL, this is a sequence lines that identify the immediate contents of\nthe folder.\n\nFor a jar URL, you can access the java.util.jar.JarFile via the URL's connection\n(it will be a JarURLConnection).\n\nUnfortunately, the Catalina ClassLoader does not follow this example, and\nrequesting the contents of a directory resource returns an empty enumeration.\n\nIn addition, because of how Catalina partially unpacks WARs for deployment, the\nclasses are not visible via ServletContext.getResourcesPaths() either, since the\nexploded WAR doesn't include a WEB-INF/classes folder.\n\nThe end result is that there's no way to scan the classpath in the way that\ncertain frameworks (in my case, Tapestry 5, but I've seen indications that\nFacelets has the same issue) need to.\n\nBy comparison, Jetty (4, 5, 6) does provide the necessary access.", "id": 99587, "time": "2007-02-20T15:54:11Z", "bug_id": 41664, "creation_time": "2007-02-20T15:54:11Z", "is_private": false}, {"count": 1, "tags": [], "creator": "hlship@gmail.com", "attachment_id": 19616, "is_private": false, "id": 99588, "time": "2007-02-20T15:55:55Z", "bug_id": 41664, "creation_time": "2007-02-20T15:55:55Z", "text": "Created attachment 19616\nSample code that relies on the missing functionality"}, {"count": 2, "tags": [], "creator": "hlship@gmail.com", "text": "As a stop-gap, making sure that packaged classes are visible via\nServletContext.getResourcePaths() would be sufficient for my needs.", "id": 99590, "time": "2007-02-20T16:53:05Z", "bug_id": 41664, "creation_time": "2007-02-20T16:53:05Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 41664, "text": "This (the getResources returning a complete enumeration) seems like a reasonable\nrequest.  I don't have the bandwidth right now to delve into it and create a\npatch, but if you care to provide one I'll try to evaluate and commit it\nquickly.  You'll probably want to look at\norg.apache.catalina.loader.WebappClassloader#findResources,\nhttp://svn.apache.org/repos/asf/tomcat/container/tc5.5.x/catalina/src/share/org/apache/catalina/loader/WebappClassLoader.java,\nto start with.\n\nThe getResources method itself in that class is not overridden, using the\njava.net.URLClassloader default.\n\nOne other thing to consider is behavior when running inside a security manager.\n WebappClassloader already has a privileged findResource section, which is good.\nfindResources should also probably check for the same permissions / run in a\nsimilar privileged action.\n\nI'm not sure what you mean with respect to \"partially\" unpacking WAR files.  If\nyou specify that the WAR should be unpacked, it's fully unpacked.\n\nFinally, if it's really urgent for you and you don't want to wait for one of us\nto review a patch and/or a Tomcat release that includes the patch, you can\neasily provide a Tapestry 5-suitable classloader by specifying the Loader\nelement of the Context to be your own class name, as documented at\nhttp://tomcat.apache.org/tomcat-5.5-doc/config/loader.html", "id": 99592, "time": "2007-02-20T19:24:52Z", "creator": "yoavs@computer.org", "creation_time": "2007-02-20T19:24:52Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "For the short term, I'll be focussing on a work around, as a build time\nenhancement (a Maven plugin). That's necessary either way, to address the\ninstalled base (including earlier versions of Tomcat, and likely other servlet\ncontainers as well). I would still like to see this fixed, as it would then not\nbe necessary to have this extra step.  As it is, I'm going to piss off some\npeople who'll want an Ant task as well as a Maven plugin.", "bug_id": 41664, "attachment_id": null, "id": 99595, "time": "2007-02-20T21:23:50Z", "creator": "hlship@gmail.com", "creation_time": "2007-02-20T21:23:50Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "Personally, I don't find the use case convincing at this point, and I don't\nunderstand the explanation of the problem.\n\nThe only documentation about the getResources method is the javadocs:\n     Finds all the resources with the given name. A resource is some data\n     (images, audio, text, etc) that can be accessed by class code in a way\n     that is independent of the location of the code.\nAnd in URLClassLoader:\n     Returns an Enumeration of URLs representing all of the resources\n     on the URL search path having the specified name.\n\nAs I stated earlier, I do not understand how it is assumed that this is supposed\nto do a wildcard match (it would be written cleanly as\ngetResources(\"org/example/myapp/pages/*\")). The wording seems to imply the\nopposite, actually, and I wonder if the behavior was as intended or not.\n\nIf you have a reasonably simple patch which implements this, I would consider\nit, otherwise it is not going to be addressed (and I think the bug should be\nmarked as WONTFIX).\n", "id": 99616, "time": "2007-02-21T05:17:38Z", "bug_id": 41664, "creation_time": "2007-02-21T05:17:38Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 41664, "text": "Comments below:\n\n(In reply to comment #5)\n> Personally, I don't find the use case convincing at this point, and I don't\n> understand the explanation of the problem.\n> \n> The only documentation about the getResources method is the javadocs:\n>      Finds all the resources with the given name. A resource is some data\n>      (images, audio, text, etc) that can be accessed by class code in a way\n>      that is independent of the location of the code.\n\nA Directory isa File, and you find those don't you?\n\n> \n> As I stated earlier, I do not understand how it is assumed that this is supposed\n> to do a wildcard match (it would be written cleanly as\n> getResources(\"org/example/myapp/pages/*\")). The wording seems to imply the\n> opposite, actually, and I wonder if the behavior was as intended or not.\n\n\nThere's no wildcarding going on-- it's just:\n\nClassLoader.findResources(\"/META-INF\");\n\nWith the expectation that it will return an Enumeration of URLs to all META-INF\ndirectories on the classpath.\n\nI really need to take a look and see what Seam did to get around this with their\ncomponent loading by classpath searching.\n\n> \n> If you have a reasonably simple patch which implements this, I would consider\n> it, otherwise it is not going to be addressed (and I think the bug should be\n> marked as WONTFIX).\n> \n\nEven with the realization that there's no wildcarding going on?  just the\nexpectation that a directory is a valid Unified Resource *Location*?  Oracle's\nAS has the same issue, but has since made the fix.\n", "id": 99626, "time": "2007-02-21T08:01:40Z", "creator": "jacob@hookom.net", "creation_time": "2007-02-21T08:01:40Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 41664, "text": "(In reply to comment #6)\n> ClassLoader.findResources(\"/META-INF\");\n> \n> With the expectation that it will return an Enumeration of URLs to all META-INF\n> directories on the classpath.\n\nThe current implementation does that, feel free to look at the code, it's very\nexplicit (WebappClassLoader.findResources).\n\nThis is not what this case requests: \"if you request a path, and not a file, you\nget the contents of folder if it exists\" (the contents of a folder, AFAIK, is\nthe enumeration of the files which are in the folder).", "id": 99643, "time": "2007-02-21T14:08:01Z", "creator": "remm@apache.org", "creation_time": "2007-02-21T14:08:01Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "jacob@hookom.net", "attachment_id": null, "is_private": false, "id": 99649, "time": "2007-02-21T14:48:50Z", "bug_id": 41664, "creation_time": "2007-02-21T14:48:50Z", "text": "talked more with Remy-- things work as expected-- it should just return pointers\n(URL) to the directory, then it's up to the client code to walk the directories\nbased on if the connections returned are JarUrlConnections or should be treated\nas physical file locations.\n\nExample here:\n\nhttps://facelets.dev.java.net/source/browse/facelets/src/java/com/sun/facelets/util/Classpath.java?rev=1.5&view=markup"}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 125669, "time": "2009-03-21T08:44:58Z", "bug_id": 41664, "creation_time": "2009-03-21T08:44:58Z", "text": "Closing based on comment 8."}]
[{"count": 0, "tags": [], "bug_id": 51723, "text": "", "id": 148831, "time": "2011-08-25T19:22:01Z", "creator": "jlawson-apache@bovine.net", "creation_time": "2011-08-25T19:22:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "http://tcl.apache.org/rivet/manual/makeurl.html\n\nputs [makeurl \"oink.gif\"]\n\nresults in:\n\nhttp://guernsey.bovine.netoink.gif", "is_private": false, "id": 148832, "creator": "jlawson-apache@bovine.net", "time": "2011-08-25T19:23:14Z", "bug_id": 51723, "creation_time": "2011-08-25T19:23:14Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 51723, "attachment_id": null, "text": "(In reply to comment #1)\n> http://tcl.apache.org/rivet/manual/makeurl.html\n> \n> puts [makeurl \"oink.gif\"]\n> \n> results in:\n> \n> http://guernsey.bovine.netoink.gif\n\n\nI think that we must clarify what is the intended purpose for the command. If makeurl worked in the way you meant to use it the output in the html would be\n\nhttp://guernsey.bovine.net/oink.gif\n\nwhich is an absolute path anyway. A simple\n\nputs \"oink.gif\"\n\nwould output a relative path, leaving to the browser the task to resolve it with respect the referer's URI. Therefore since an argument to makeurl must be an absolute URI we may agree the command should prepend the initial slash, when omitted in the argument. \n\nYour bug spurred some thoughts about possible improvements of the command. For instance makeurl may accept a variable number of arguments and\nthen concatenate them to form a URI. \n\nputs [makeurl a b c d]\n\nwould output\n\nhttp://myhost[:port]/a/b/c/d\n\nthe command could check out the arguments for a '?' in the list and treat elements past this character as a even length sublist from which pairs of <parameters>-<values> can be built\n\nputs [makeurl a b c ? arg1 val1 arg2 val2 ...]\n\n--> http://myhost[:port]/a/b/c?arg1=val1&arg2=val2....", "id": 148868, "time": "2011-08-29T02:21:34Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-29T02:21:34Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 51723, "attachment_id": null, "id": 148869, "time": "2011-08-29T03:14:54Z", "creator": "jlawson-apache@bovine.net", "creation_time": "2011-08-29T03:14:54Z", "is_private": false, "text": "What about just allowing relative URLs to be automatically combined with the leading path from SCRIPT_NAME so that a fully qualified URL can be more easily generated?"}, {"count": 4, "tags": [], "bug_id": 51723, "text": "(In reply to comment #3)\n> What about just allowing relative URLs to be automatically combined with the\n> leading path from SCRIPT_NAME so that a fully qualified URL can be more easily\n> generated?\n\nso you mean you need to generate URL for usage outside the context of the referer? Otherwise I don't see the plus and it sounds like overdetermining a problem browsers can solve quite well on their own and saving some bytes to be sent across the network", "id": 148880, "time": "2011-08-29T10:37:54Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-29T10:37:54Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 51723, "attachment_id": null, "id": 148896, "time": "2011-08-29T15:06:36Z", "creator": "jlawson-apache@bovine.net", "creation_time": "2011-08-29T15:06:36Z", "is_private": false, "text": "There are legitimate reasons that a person would want to generate a fully qualified URL.\n\nFor example, sending a redirect using \"headers set Location\" is the most common reason for needing to construct a fully-qualified URL--using a relative URL causes Apache to do the redirect internally without informing the browser.\n\nOther less common reasons are interacting with external services, such as CDN-like services, generating RSS feeds, multi-step third-party handshake sequences like OAuth/OpenID, or generating published XML Schemas (XSD/WSDL/etc) that require an embedded canonical URI.\n\nJust because they are uncommon that doesn't mean you shouldn't make it easy to do if that's what the user really wants.\n\n\nAlthough your suggestion of allowing multiple paths components and CGI-style parameters to be included in the result is interesting and might be useful addition, you might want to address that independently from this bug. (Be sure to handle escapement of unsafe characters when combining the parameters together.)"}, {"count": 6, "tags": [], "bug_id": 51723, "attachment_id": null, "text": "wow, this time you have elaborated it very well, thanks for pointing out so many contexts where getting a fully qualified URI out of a relative reference can be useful or even necessary. The buggy implementation of makeurl, requiring an initial '/', after all allows us to easily extend the functionality by handling these sort of paths in the way you have proposed. I want to check what's the difference between SCRIPT_NAME and DOCUMENT_URI. In the cases I checked they carry the same piece of information. \n\nIt wasn't my intention to merge the bug and the extended functionality of the command, I was just thinking aloud and I wanted to get you and the other guys in the discussion. That's why I reported on rivet-dev about this bug.\n\n(In reply to comment #5)\n> There are legitimate reasons that a person would want to generate a fully\n> qualified URL.\n> \n> For example, sending a redirect using \"headers set Location\" is the most common\n> reason for needing to construct a fully-qualified URL--using a relative URL\n> causes Apache to do the redirect internally without informing the browser.\n> \n> Other less common reasons are interacting with external services, such as\n> CDN-like services, generating RSS feeds, multi-step third-party handshake\n> sequences like OAuth/OpenID, or generating published XML Schemas (XSD/WSDL/etc)\n> that require an embedded canonical URI.\n> \n> Just because they are uncommon that doesn't mean you shouldn't make it easy to\n> do if that's what the user really wants.\n> \n> \n> Although your suggestion of allowing multiple paths components and CGI-style\n> parameters to be included in the result is interesting and might be useful\n> addition, you might want to address that independently from this bug. (Be sure\n> to handle escapement of unsafe characters when combining the parameters\n> together.)", "id": 148906, "time": "2011-08-29T20:12:23Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-29T20:12:23Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 51723, "attachment_id": null, "id": 148907, "time": "2011-08-29T20:21:58Z", "creator": "jlawson-apache@bovine.net", "creation_time": "2011-08-29T20:21:58Z", "is_private": false, "text": "DOCUMENT_URI will potentially contain trailing text that follows the filename but before the question mark (ie: what is in PATH_INFO).  For example requesting http://example.com/one/two/env.rvt/three will have:\n\nmyenv(DOCUMENT_NAME)        = env.rvt\nmyenv(DOCUMENT_PATH_INFO)   = /three\nmyenv(DOCUMENT_ROOT)        = /vhosts/jlawson/fa_web/webroot\nmyenv(DOCUMENT_URI)         = /one/two/env.rvt/three\nmyenv(PATH_INFO)            = /three\nmyenv(PATH_TRANSLATED)      = /vhosts/jlawson/fa_web/webroot/three\nmyenv(REQUEST_URI)          = /one/two/env.rvt/three\nmyenv(SCRIPT_FILENAME)      = /vhosts/jlawson/fa_web/webroot/one/two/env.rvt\nmyenv(SCRIPT_NAME)          = /playpen/env.rvt\nmyenv(SCRIPT_URI)           = https://example.com/one/two/testing.rvt/three\nmyenv(SCRIPT_URL)           = /one/two/env.rvt/sdfasd\n\nI suggested SCRIPT_NAME because that looked to be the easiest to extract just the leading directory out of.  It's entirely possible there is an ap_* function that can provide the equivalent without having to parse the environment strings."}, {"count": 8, "tags": [], "text": "How does /playpen/ be interpreted? Is it a local fs path or a path relative to Apache's DocumentRoot? The latter should be true for makeurl to work out a meaningful URL \n\n(In reply to comment #7)\n> DOCUMENT_URI will potentially contain trailing text that follows the filename\n> but before the question mark (ie: what is in PATH_INFO).  For example\n> requesting http://example.com/one/two/env.rvt/three will have:\n> \n> myenv(DOCUMENT_NAME)        = env.rvt\n> myenv(DOCUMENT_PATH_INFO)   = /three\n> myenv(DOCUMENT_ROOT)        = /vhosts/jlawson/fa_web/webroot\n> myenv(DOCUMENT_URI)         = /one/two/env.rvt/three\n> myenv(PATH_INFO)            = /three\n> myenv(PATH_TRANSLATED)      = /vhosts/jlawson/fa_web/webroot/three\n> myenv(REQUEST_URI)          = /one/two/env.rvt/three\n> myenv(SCRIPT_FILENAME)      = /vhosts/jlawson/fa_web/webroot/one/two/env.rvt\n> myenv(SCRIPT_NAME)          = /playpen/env.rvt\n> myenv(SCRIPT_URI)           = https://example.com/one/two/testing.rvt/three\n> myenv(SCRIPT_URL)           = /one/two/env.rvt/sdfasd\n> \n> I suggested SCRIPT_NAME because that looked to be the easiest to extract just\n> the leading directory out of.  It's entirely possible there is an ap_* function\n> that can provide the equivalent without having to parse the environment\n> strings.", "is_private": false, "id": 148908, "creator": "mxmanghi@apache.org", "time": "2011-08-29T20:37:41Z", "bug_id": 51723, "creation_time": "2011-08-29T20:37:41Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 51723, "attachment_id": null, "text": "You can have Apache rewrite/alias rules that map a URL to a physical directory.  In such an example \"/one/two\" might not be physical directories that actually exist on disk.\n\nRegardless, that output was just an example that I edited from real script output and is not necessarily completely accurate.", "id": 148909, "time": "2011-08-29T20:41:52Z", "creator": "jlawson-apache@bovine.net", "creation_time": "2011-08-29T20:41:52Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 51723, "attachment_id": null, "id": 148910, "time": "2011-08-29T20:55:32Z", "creator": "jlawson-apache@bovine.net", "creation_time": "2011-08-29T20:55:32Z", "is_private": false, "text": "I think my example output would be correct if my previous post had been:\n\nmyenv(SCRIPT_NAME)          = /one/two/env.rvt\n\nJust create your own env.rvt script that contains nothing but:\n\n<?\n\nload_env myenv\nparray myenv\n\n?>"}, {"count": 11, "tags": [], "creator": "mxmanghi@apache.org", "attachment_id": null, "text": "I know rewriting rules. Alias based rewriting rules already existed back in 1993 on the NCSA web server from which Apache was originally derived. I compiled it on an IBM AIX workstation and wrote the very first static web site of my University in December the same year.\n\nMy question wasn't about \"/one/two\" that appears in DOCUMENT_URI, it was rather about the \"playpen\" path shown in the SCRIPT_NAME. I agree your example needed some tweaking. I think I can start to work on this, expect patches to be send soon, but I can't guarantee I can do it overnight. Please send feedback when patches are ready.\n\n\n(In reply to comment #10)\n> I think my example output would be correct if my previous post had been:\n> \n> myenv(SCRIPT_NAME)          = /one/two/env.rvt\n> \n> Just create your own env.rvt script that contains nothing but:\n> \n> <?\n> \n> load_env myenv\n> parray myenv\n> \n> ?>", "id": 148911, "time": "2011-08-29T21:17:34Z", "bug_id": 51723, "creation_time": "2011-08-29T21:17:34Z", "is_private": false}, {"count": 12, "tags": [], "text": "Created attachment 27446\npatched makeurl command now supports relative style arguments\n\nmakeurl has been patched and now can go in three forms: relative path, absolute path and no arguments at all. The last case returns the SCRIPT_NAME variable\n\nin a page located at http://localhost:8080/~manghi/index.rvt the following three commands\n\nputs [makeurl clif/index.rvt]\nputs [makeurl /clif/index.rvt]\nputs [makeurl]\n\noutput\n\nhttp://localhost:8080/~manghi/index.rvt/clif/index.rvt\nhttp://localhost:8080/clif/index.rvt\nhttp://localhost:8080/~manghi/index.rvt\n\nI wonder if a could be useful a -dirname switch that strips off the last\nelement (the script filename) from SCRIPT_NAME. Something like\n\nmakeurl -dirname clif/index.rvt\n\n==> http://localhost:8080/~manghi/clif/index.rvt\n\nPlease check the patch and send feedback", "is_private": false, "id": 148919, "creator": "mxmanghi@apache.org", "time": "2011-08-30T16:57:49Z", "bug_id": 51723, "creation_time": "2011-08-30T16:57:49Z", "attachment_id": 27446}, {"count": 13, "tags": [], "bug_id": 51723, "attachment_id": null, "id": 148920, "time": "2011-08-30T17:00:58Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-30T17:00:58Z", "is_private": false, "text": "Bug has been address with a patch. Waiting for feedback"}, {"count": 14, "tags": [], "text": "closing this bug as it was fixed in 2.0.4", "is_private": false, "id": 162202, "creator": "mxmanghi@apache.org", "time": "2012-09-16T10:00:45Z", "bug_id": 51723, "creation_time": "2012-09-16T10:00:45Z", "attachment_id": null}]
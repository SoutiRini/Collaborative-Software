[{"count": 0, "tags": [], "creator": "kowalewski.bartosz@gmail.com", "text": "As mentioned in https://issues.apache.org/bugzilla/show_bug.cgi?id=41214#c36 and \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=50213#c6,  org.apache.log4j.Category uses a suboptimal synchronization mechanism. All methods are synchronized and treated the same way no matter if they modify the list of appenders or not.\n\nThis might cause performance degradation in a really multithreaded env.\n\nIt should not be hard to improve this synchronization mechanism without the\nneed to change API. Introduce a read-write lock to be used on all _non-static_ methods - instead of the synchronized keyword? \n\nLog4j 1.2.x is compliant with JDK 1.2, right? If so, using\njava.util.concurrent.locks classes is not an option. Maybe a simple custom impl\nof read-write lock would be enough? It might not be optimal to use a custom class. Maybe backport util concurrent? If adding external dependencies to the 1.2 branch of log4j is not an option, maybe we could inline the the reentrant read-write lock class into log4j?\n\nWDYT?\n\nI could create a patch once you decide which option is the best one.", "id": 145692, "time": "2011-04-11T05:46:30Z", "bug_id": 51047, "creation_time": "2011-04-11T05:46:30Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "kowalewski.bartosz@gmail.com", "text": "Created attachment 26871\nSample (refactored) Category class - JDK 5.0, log4j 1.2.16\n\nAttaching a sample implementation of the Category class with read write locks. Please note - this is only a sample - it's based on JDK5 while the final impl should be able to run under JDK 1.2.", "id": 145693, "time": "2011-04-11T05:50:00Z", "bug_id": 51047, "creation_time": "2011-04-11T05:50:00Z", "is_private": false, "attachment_id": 26871}, {"count": 2, "tags": [], "bug_id": 51047, "attachment_id": null, "text": "First rule of optimization - Don't.\nSecond rule of optimization - Don't... yet.\nThird rule of optimizing - profile it first\n\nI don't see any signs that the Category code actually showed up in a performance profile.", "id": 145703, "time": "2011-04-11T09:44:21Z", "creator": "noelgrandin@gmail.com", "creation_time": "2011-04-11T09:44:21Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 51047, "text": "Ah sorry, I see that this discussion happened on bug #50213.\n\nBut you realise that with your read/write lock, you're going to end up calling your appenders in parallel.\nAre appenders expected to handle that situation?", "id": 145704, "time": "2011-04-11T09:48:45Z", "creator": "noelgrandin@gmail.com", "creation_time": "2011-04-11T09:48:45Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 51047, "is_private": false, "text": "We observed this issue when doing performance tests with 80-160 tps (and plenty of threads running in parallel). The app was later profiled and lots of threads were waiting on this synchronization. Changing these mechanism helped as the only synchronization that is now on the path is in the appender. As we have more than one appender, log4j now handles the number of threads that we use better - improved thread parallelism is observed :-).\n\nAppenderSkeleton doAppend() is synchronized. Removing the old synchronization mechanism from Category will not cause appenders to malfunction no matter how concrete appenders are implemented. That's what source code suggests and that's also what we observed in our tests :).\n\nI also logged an improvement related to synchronization in AsyncAppender: https://issues.apache.org/bugzilla/show_bug.cgi?id=51048", "id": 145705, "time": "2011-04-11T10:18:16Z", "creator": "kowalewski.bartosz@gmail.com", "creation_time": "2011-04-11T10:18:16Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "erik@brakkee.org", "text": "Is something still happening on this issue? We ran into this issue today (sunday) and it caused complete server freezes of more than 30 seconds just because rendering of one exception in one thread took 30-60 seconds. We were quite surprised to find this, especially with the claim that log4j was designed for concurrency.\n\nWhen can we expect a new version of log4j in the 1.2 series that solves these issues?", "id": 151453, "time": "2011-11-13T20:25:07Z", "bug_id": 51047, "creation_time": "2011-11-13T20:25:07Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 51047, "is_private": false, "text": "I'm not optimistic this will be addressed in Log4j 1.2.  However, I've been working on Log4j 2.0 for quite a while and it is getting fairly close to an alpha release. It should not have this problem.  Although the API will change, it has an adapter for the Log4j 1.2 API so you should be able to use it without having to change most of your code.", "id": 151455, "time": "2011-11-13T21:13:29Z", "creator": "Ralph.Goers@dslextreme.com", "creation_time": "2011-11-13T21:13:29Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 51047, "text": "Hello,\n\nWe are currently on log4j version 1.2.14 and are also noticing long sync waits (10-20-30 seconds) on this operation. Is this behavior still included in the latest (1.2.17) version?\nOr should we also opt to move to the 2.x release to allow the use of async appenders?\n\nthanks for your thoughts", "id": 177418, "time": "2014-08-28T09:48:23Z", "creator": "jan.swaelens@gmail.com", "creation_time": "2014-08-28T09:48:23Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 51047, "is_private": false, "text": "At this point, you best bet is to test this yourself or migrate to version 2.\n\nThe version 1.x line is not actively maintained.", "id": 177422, "time": "2014-08-28T12:41:56Z", "creator": "garydgregory@gmail.com", "creation_time": "2014-08-28T12:41:56Z", "attachment_id": null}, {"count": 9, "attachment_id": 32857, "bug_id": 51047, "text": "Created attachment 32857\nminimal-intrusive patch\n\nHi,\n\nbecause your new file also reindents the code and, worse, the comments, I provide a minimal-intrusive change against log4j 1.2.16 so it can actually be reviewed.\n\nWe may or may not test that tomorrow. This is just ahead of time preparation work.", "id": 183756, "time": "2015-06-25T20:31:16Z", "creator": "t.glaser@tarent.de", "creation_time": "2015-06-25T20:31:16Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 51047, "attachment_id": null, "text": "Hi,\n\nAt this point I would not put too much hope in seeing a new 1.2.x release. We are not actively maintaining it. I would migrate to v2 and use the 1.2 compatibility layer to get started.", "id": 183757, "time": "2015-06-25T22:51:14Z", "creator": "garydgregory@gmail.com", "creation_time": "2015-06-25T22:51:14Z", "is_private": false}, {"count": 11, "tags": [], "creator": "t.glaser@tarent.de", "is_private": false, "text": "Hm, that doesn\u2019t work for us \u2013 we don\u2019t even use it explicitly, but things like WildFly and Liferay do.\n\nBut we can just exchange the one .class file in their JARs locally, and we can have the patch here for reference. Or maybe you could commit it, even if you don\u2019t add a new formal release.", "id": 183765, "time": "2015-06-26T12:19:02Z", "bug_id": 51047, "creation_time": "2015-06-26T12:19:02Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "garydgregory@gmail.com", "text": "You patch uses Java 5 and Log4j 1 is on Java 1.4, so that's a no go anyway :-(", "id": 183769, "time": "2015-06-26T16:01:36Z", "bug_id": 51047, "creation_time": "2015-06-26T16:01:36Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "jessh@ptc.com", "attachment_id": null, "id": 183770, "time": "2015-06-26T16:12:36Z", "bug_id": 51047, "creation_time": "2015-06-26T16:12:36Z", "is_private": false, "text": "(In reply to Gary Gregory from comment #12)\n> You patch uses Java 5 and Log4j 1 is on Java 1.4, so that's a no go anyway\n> :-(\n\nI've long since given up and been building and relying upon my own patched log4j 1.2.17 that addresses many such issues by requiring Java 6 and eschewing absolute compatibility with log4j extensions.\n\nThere's lot of simple tricks, e.g. using a CopyOnWriteArrayList for the appenders, hoisting layout formatting out of the sync block on an opt-in basis, etc.\n\nYes, log4j 2.x is now out and I should probably look at it more.  That said, when you have a lot of custom log4j 1.x appenders and layouts and loads of code log4j 1.2 and a sizeable portion of it using API's beyond the \"simple\" set, this is a non-trivial undertaking.  Getting better performance out of 1.2.x until one has time for that undertaking only makes sense."}, {"count": 14, "tags": [], "bug_id": 51047, "attachment_id": null, "is_private": false, "id": 183771, "time": "2015-06-26T16:17:38Z", "creator": "t.glaser@tarent.de", "creation_time": "2015-06-26T16:17:38Z", "text": "We\u2019re on Java 7, and Operations will move everything to Java 8 Really Soon Now\u2122 because of the security support situation (using Debian\u2019s OpenJDK exclusively helps, but better is better)."}, {"count": 15, "attachment_id": null, "bug_id": 51047, "text": "(In reply to mirabilos from comment #14)\n> We\u2019re on Java 7, and Operations will move everything to Java 8 Really Soon\n> Now\u2122 because of the security support situation (using Debian\u2019s OpenJDK\n> exclusively helps, but better is better).\n\nThere are some key places I'd like to patch to use Collections.forEach() -- as many of its implementations should be faster than the Iterator usage -- but I'm holding off for now.  I'm not sure why -- since I'm really using Java 8 for everything now.", "id": 183772, "time": "2015-06-26T16:30:29Z", "creator": "jessh@ptc.com", "creation_time": "2015-06-26T16:30:29Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "bug_id": 51047, "attachment_id": null, "text": "(In reply to Jess Holle from comment #13)\n> (In reply to Gary Gregory from comment #12)\n> > You patch uses Java 5 and Log4j 1 is on Java 1.4, so that's a no go anyway\n> > :-(\n> \n> I've long since given up and been building and relying upon my own patched\n> log4j 1.2.17 that addresses many such issues by requiring Java 6 and\n> eschewing absolute compatibility with log4j extensions.\n> \n> There's lot of simple tricks, e.g. using a CopyOnWriteArrayList for the\n> appenders, hoisting layout formatting out of the sync block on an opt-in\n> basis, etc.\n> \n> Yes, log4j 2.x is now out and I should probably look at it more.  That said,\n> when you have a lot of custom log4j 1.x appenders and layouts and loads of\n> code log4j 1.2 and a sizeable portion of it using API's beyond the \"simple\"\n> set, this is a non-trivial undertaking.  Getting better performance out of\n> 1.2.x until one has time for that undertaking only makes sense.\n\nI hear you. I have a big work project that is deeply intertwined in log4jj 1.2 and it's quite likely to stay there... For new projects we use v2.", "id": 183773, "time": "2015-06-26T18:07:28Z", "creator": "garydgregory@gmail.com", "creation_time": "2015-06-26T18:07:28Z", "is_private": false}]
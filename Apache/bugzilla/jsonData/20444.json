[{"count": 0, "tags": [], "bug_id": 20444, "attachment_id": null, "text": "In org.apache.crimson.parser.Parser2.java, crimson closes off the prefix\ndeclaration for the \"xml\" namespace.\n\n            Enumeration prefixes = nsSupport.getDeclaredPrefixes();\n            while (prefixes.hasMoreElements()) {\n                String prefix = (String)prefixes.nextElement();\n                contentHandler.endPrefixMapping(prefix);\n            }\n\nSAX NamespaceSupport 'predeclares' the xml namespace, and in the code above,\nbecause crimson iterates over all declared namespaces it manages to end the xml\nnamespace declaration as well.\n\nNormally this isn't a problem, since \"xml\" is declared in every context, but it\nseems that some programs are 'repairing' this mismatched start/end by adding the\ndeclaration of the prefix mapping, which causes crimson to complain if the xml\nis reprocessed. Here's an example in Axis:\n\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=axis-user@xml.apache.org&msgNo=10962\n\nA search on google will show that it has come up in other programs too.\n\nThere are two obvious solutions: do not throw an exception for 'xmlns:xml' if\nthe namespace declared matches the namespaces specification\n(Parser2.SPEC_XML_NS), and/or change the code above to read:\n\n            Enumeration prefixes = nsSupport.getDeclaredPrefixes();\n            while (prefixes.hasMoreElements()) {\n                String prefix = (String)prefixes.nextElement();\n                if (!\"xml\".equals(prefix)) {\n                   contentHandler.endPrefixMapping(prefix);\n                }\n            }", "id": 38245, "time": "2003-06-03T11:18:02Z", "creator": "Brian.Ewins@btinternet.com", "creation_time": "2003-06-03T11:18:02Z", "is_private": false}]
[{"count": 0, "text": "The start method in JDBCRealm.java opens a connection to make sure that\neveryting is ok, but it never closes that connection. This method should call\nclose(connection).\n\nThis is the offending code:\n\n    public void start() throws LifecycleException {\n\n        // Validate that we can open our connection\n        try {\n            open();\n        } catch (SQLException e) {\n            throw new LifecycleException(sm.getString(\"jdbcRealm.open\"), e);\n        }\n\n        // Perform normal superclass initialization\n        super.start();\n\n    }", "bug_id": 17504, "attachment_id": null, "id": 32108, "time": "2003-02-27T18:38:13Z", "creator": "matt@clickability.com", "creation_time": "2003-02-27T18:38:13Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "glenn@apache.org", "attachment_id": null, "id": 32156, "time": "2003-02-28T14:33:50Z", "bug_id": 17504, "creation_time": "2003-02-28T14:33:50Z", "is_private": false, "text": "JDBCRealm synchronizes use of one db connection for all realm\nauthentications. There is no need to close the connection since\nit is reused."}, {"count": 2, "tags": [], "text": "Yes, I understand why it is not a problem in the default implementation, but it\nis a problem if you are extending this class, in my case, to use a connection pool. \nTo prevent the connection from never being closed or returned to the pool, I\nhave to do some ugly workarounds in the extended class. It seems to me like just\nclosing the connection opened by start() would be an extremely simple change and\nwould have little risk of destabilizing anything.", "is_private": false, "bug_id": 17504, "id": 32197, "time": "2003-02-28T23:04:18Z", "creator": "matt@clickability.com", "creation_time": "2003-02-28T23:04:18Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "matt@clickability.com", "attachment_id": null, "is_private": false, "id": 32203, "time": "2003-03-01T00:47:19Z", "bug_id": 17504, "creation_time": "2003-03-01T00:47:19Z", "text": "Ooops. I meant to say call JDBCRealm.release(con) not close. In the standard\nJDBCRealm implementation this will not do anything and is harmless, but for\nsub-classes this allows us to return the connection to a pool.\n\nSo the change is just:\n\n        try {\n            release(open());\n        } catch (SQLException e) {\n            throw new LifecycleException(sm.getString(\"jdbcRealm.open\"), e);\n        }\n\nI would be happy to do this change, but it is so trivial that it just seems\neasier for a committer to do it."}, {"count": 4, "tags": [], "creator": "glenn@apache.org", "attachment_id": null, "is_private": false, "id": 32218, "time": "2003-03-01T13:54:48Z", "bug_id": 17504, "creation_time": "2003-03-01T13:54:48Z", "text": "Starting at about version 4.1.18 of Tomcat there is a Realm which can\nuse db connection pooling.  The DataSourceRealm can use a JNDI named\nJDBC DataSource such as a DBCP.  Since the DataSourceRealm meets your\nneeds for db connection pooling of a Realm I am marking this as invalid."}]
[{"count": 0, "attachment_id": null, "creator": "apache-bugzilla@distributopia.com", "text": "GTest.replaceMarkers() is using InetAddress.getLocalHost() in an\nattempt to discover the local address of the socket used to connect\nto the server. That doesn't work. It should use Socket.getLocalAddress()\ninstead. \n\n Example: Running watchdog on the same host as Tomcat, I get a request\nline to GetRemoteAddrTestServlet like this:\n\n GET /servlet-tests/GetRemoteAddrTest?Address=192.168.1.10 HTTP/1.0\n\n while a debug println added to GTest.dispatch() of socket.getLocalAddress()\nreveals:\n\n  GTest.dispatch():addr=localhost/127.0.0.1\n\n ServletRequest.getRemoteAddr() correctly returns 127.0.0.1, but watchdog\nincorrectly flags it as an error because GTest was confused by the client\nhaving multiple addresses.\n\n I'm not sure that hacking watchdog to check for a harcoded loopback\naddress is appropriate, since the \"localhost\" name and \"127.0.0.1\" addr\nare just conventions and can (in theory) change. Plus, of course, the\nclient can have many different addresses, and I'm not sure\nit's safe to assume that Inet.getLocalHost() always returns the same\naddress that a client Socket defaults to.", "id": 12235, "time": "2002-03-24T08:08:05Z", "bug_id": 7406, "creation_time": "2002-03-24T08:08:05Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "creator": "Ryan.Lubke@Sun.COM", "text": "Fixed.  ", "id": 12804, "time": "2002-04-04T17:24:33Z", "bug_id": 7406, "creation_time": "2002-04-04T17:24:33Z", "tags": [], "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 10413, "text": "Currently, running the JUnit task with a forked VM and a batchtest causes a new \nVM to be spawned for EACH file in the fileset.  For large projects, this causes \na severe slowdown as expensive \"setup\" opertions are performed repeatedly.\nAt the above URL, can be found a GroupedJUnitTask and a DynamicTestSuite \n(inside the antcustom-src.zip) which extends JUnitTask and uses only one VM per \nbatch rather than one VM per item in the batch.", "id": 18852, "time": "2002-07-02T15:30:03Z", "creator": "rwan@thoughtworks.com", "creation_time": "2002-07-02T15:30:03Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 10413, "attachment_id": null, "id": 33518, "time": "2003-03-20T07:05:34Z", "creator": "bodewig@apache.org", "creation_time": "2003-03-20T07:05:34Z", "is_private": false, "text": "*** Bug 14354 has been marked as a duplicate of this bug. ***"}, {"count": 2, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "is_private": false, "id": 40610, "time": "2003-07-14T07:21:28Z", "bug_id": 10413, "creation_time": "2003-07-14T07:21:28Z", "text": "I think this would be a good enhancement to have. Are you intending to\ncontribute the code? The URL above was not responding."}, {"count": 3, "tags": [], "bug_id": 10413, "text": "I've obtained a copy of Richard's code via email and discussed it with him.  As \nit works via a DynamicTestSuite it actually works the same as if you have \na 'TestAll' TestSuite which recursively composes all your TestCases.  So the \nresultant output is a single TEST-xx file.  This means you don't get the nice \npackage tree structure to your test results from the junitreport task.\n\nI'd prefer any final solution to this request to produce output in the same way \nas the current batchtest task does.", "id": 40746, "time": "2003-07-15T16:20:52Z", "creator": "james.olsen@synergy.co.nz", "creation_time": "2003-07-15T16:20:52Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 10413, "attachment_id": null, "id": 40751, "time": "2003-07-15T16:52:06Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-07-15T16:52:06Z", "is_private": false, "text": "Are we talking about my DynamicTestSuite which would do introspection on the \ntest cases to look for public static final Strings, and decide which tests to \nrun based on the values? It did indeed bunch up all test method, although It's \nmostly an Ant reporting artifact, since using normal JUnit test composition.\n\nTo get the nice hierarchical reporting, we've since switched to a file selector \nthat performs similar checks on public static final Strings used a dedicated \nlittle class parser (BCEL would work fine as well of course).\n\nUsing fork=true is really expensive when tests depend on services to be started \nso they can run, which adds up to the VM startup time. What a colleage \nsuggested to me was to have the ability to define several groups of tests to \nrun each (the group) in a separate VM. Sounds like it could be achieved with an \nadditional attribute (like groupFork=\"true\"), and make each different fileset \nof the <batchtest> be a separate group. Using our custom selector to kind these \nfileset groups thanks to new String would be trivial.\n\nI'm just muttering. "}, {"count": 5, "attachment_id": null, "creator": "rwan@thoughtworks.com", "text": "Main problem with my GroupedJunitTask and DynamicTestSuite is that it does not \nplay well with jUnitReport.  You lose the nice hierarchical structure of \nmethods, classes, packages.  Perhaps a \"hierarchicalXML\" formatter could be \nbuilt that produced XML like junitreport is used to seeing.  While we're at \nit, maybe an option to only report on failed tests would be nice.", "id": 40773, "time": "2003-07-15T22:21:31Z", "bug_id": 10413, "creation_time": "2003-07-15T22:21:31Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 10413, "text": "Haven't looked at the code but I would have expected that the XML formatter \nshould be able to determine what hierarchy to produce from the test class \npackage names, irrespective of whether they're in one suite or multiple \nsuites.  Taking this approach would also allow other TestSuite builder \nutilities to use the XML formatter effectively.", "id": 40790, "attachment_id": null, "creator": "j.c.yip@computer.org", "creation_time": "2003-07-16T09:15:19Z", "time": "2003-07-16T09:15:19Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 10413, "text": "This may not be helpful in terms of getting to a good solution, but I am\nattaching a \"quick and dirty hack\" I have been using for a while.  It basically\nmodifies the test runner so that when the JUnit tests are forked, they get\nexecuted together.  Each test still generates its own TEST-*.xml as if it had\nexecuted in separate VMs.", "id": 41266, "time": "2003-07-24T00:32:35Z", "creator": "garrick.olson@aceva.com", "creation_time": "2003-07-24T00:32:35Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "garrick.olson@aceva.com", "is_private": false, "text": "Created attachment 7480\nQuick hack", "id": 41267, "time": "2003-07-24T00:34:14Z", "bug_id": 10413, "creation_time": "2003-07-24T00:34:14Z", "attachment_id": 7480}, {"count": 9, "tags": [], "creator": "garrick.olson@aceva.com", "text": "Created attachment 7481\nQuick hack", "id": 41268, "time": "2003-07-24T00:34:41Z", "bug_id": 10413, "creation_time": "2003-07-24T00:34:41Z", "is_private": false, "attachment_id": 7481}, {"count": 10, "tags": [], "bug_id": 10413, "text": "Created attachment 7482\nQuick hack", "id": 41269, "time": "2003-07-24T00:34:59Z", "creator": "garrick.olson@aceva.com", "creation_time": "2003-07-24T00:34:59Z", "is_private": false, "attachment_id": 7482}, {"count": 11, "tags": [], "text": "Solving this \"bug\" will pose a new problem. Having tests run in the same VM \nseems less powerful than running the test in a clean one: suppose, for \nexample, that your project heavily relies on static object caches (as does \nmine). When running a long batch of tests, later tests may use a previously-\ncreated object from the cache, instead of using the clean object that will be \ncreated on a separate VM.", "is_private": false, "bug_id": 10413, "id": 50087, "time": "2004-01-05T16:42:59Z", "creator": "oded@schema.com", "creation_time": "2004-01-05T16:42:59Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 10413, "attachment_id": null, "id": 50128, "time": "2004-01-06T13:46:04Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-01-06T13:46:04Z", "is_private": false, "text": "True, but you're free not to use this new feature.\n\nForking all tests, one of my test target takes 7+ minutes, instead of around 1 \nminute forking only once (using the proposed change). This is a HUGE difference \nto me, and it's also one that is a deal breaker for developers. 7+ minutes is \njust too long. That's the difference between willingly running all the tests \nall the time, and not running them!\n\nI *very strongly* support adding this feature to <junit>. I'm not attached in \nany way to the proposed patch, but I really NEED this feature.\n\n--DD"}, {"count": 13, "attachment_id": null, "bug_id": 10413, "text": "Cleaning up is what teardown() methods are meant to be for, and like DD says,\nthis is optional. Also I've found java to be less contaminated by bad test than\nsay, Cpp unit, where a pointer defect or failure to release a reference in one\ntest case destroys all that follow it.\n\nTherefore I think a single VM for all forked tests could be a good addition\n-those projects with many tests will appreciate it; we just need to do it in a\nway that integrates with everything. DD: try applying these patches and tell me\nwhat you think?", "id": 50172, "time": "2004-01-07T10:50:34Z", "creator": "stevel@apache.org", "creation_time": "2004-01-07T10:50:34Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 10413, "text": "You may also want to look at Bug 24697, which contains a backwards compatible patch.", "id": 54785, "time": "2004-03-28T03:25:04Z", "creator": "scott@atlassian.com", "creation_time": "2004-03-28T03:25:04Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "ddevienne@lgc.com", "text": "Thanks for the pointer. I've tested that patch, and it worked fine for me, \nexcept for the fact that it's 1.5.3 based, when I was running 1.6 beta at the \ntime (didn't have if/unless on formatters for example). I can also only use \nreleased Ant versions, and even need compelling arguments to upgrade, since \nthat implies tedious manipulations to upgrade the Ant within IntelliJ (which \ndoesn't support using an external Ant!!!)\n\nSo I'm just waiting for an equivalent feature out of Ant proper. Thanks, --DD\n\n", "id": 54814, "time": "2004-03-29T14:57:52Z", "bug_id": 10413, "creation_time": "2004-03-29T14:57:52Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "text": "I worked on bug 24697 and finally implemented the enhancement without realizing\nthat this bug here exists.\n\nSo the functionality is supposed to be there now.\n\n*** This bug has been marked as a duplicate of 24697 ***", "is_private": false, "bug_id": 10413, "id": 56148, "time": "2004-04-21T06:33:58Z", "creator": "bodewig@apache.org", "creation_time": "2004-04-21T06:33:58Z", "attachment_id": null}]
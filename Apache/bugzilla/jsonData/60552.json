[{"count": 0, "tags": [], "text": "I am using a pptx as a reference to create another pptx file. Its used more like a template. When I generate the ppt and open it in MS PowerPoint 2016 (same is seen on a Mac version too) it gives typical \"PowerPoint found a problem with the content ...\". I have tried all the usual PowerPoint tricks to see if it's a security issue. Does not seem so.\nI was having issue with POI 3.9. So I downloaded 3.15 from http://www-eu.apache.org/dist/poi/release/bin/poi-bin-3.15-20160924.zip but continue to have the same issue.\n\nFollowing are the relevant code snippets: In the process of removing the proprietary code, I may have made some small mistakes but the PPT generation part is intact. \n\n\tprivate byte[] resizeImage(byte[] inPic, double img_width, double img_height) {\n\t\ttry {\n\t\t\tByteArrayInputStream in = new ByteArrayInputStream(inPic);\n\t\t\tBufferedImage originalImage = ImageIO.read(in);\n\t\t\tint type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();\n\n\t\t\tif (img_height == 0) {\n\t\t\t\timg_height = originalImage.getHeight();\n\t\t\t}\n\n\t\t\tBufferedImage resizedImage = new BufferedImage((int) img_width, (int) img_height, type);\n\t\t\tGraphics2D g = resizedImage.createGraphics();\n\t\t\tg.drawImage(originalImage, 0, 0, (int) img_width, (int) img_height, null);\n\t\t\tg.dispose();\n\n\t\t\tByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\t\t\tImageIO.write(resizedImage, \"jpeg\", buffer);\n\t\t\treturn buffer.toByteArray();\n\t\t} catch (Exception ex) {\n\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate XSLFShape getShape(BLogger logger, XSLFSlide slide, String shapeName) {\n\t\tXSLFShape shape = null;\n\t\tIterator<XSLFShape> sit = slide.getSlideLayout().getShapes().iterator();\n\t\twhile(sit.hasNext()) {\n\t\t\tXSLFShape lshape = sit.next();\n\t\t\tif (lshape != null && lshape.getShapeName().equalsIgnoreCase(shapeName)) {\n\t\t\t\tshape = lshape;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn shape;\n\t}\n\n\tprivate static void setPic(XMLSlideShow ppt, XSLFSlide slide, byte[] pic, String shapeName) throws BException {\n\t\tXSLFShape shape = getShape(logger, slide, shapeName);\n\n\t\tRectangle2D anchor = shape.getAnchor();\n\t\tbyte[] ri = resizeImage(pic, anchor.getWidth(), anchor.getHeight());\n\t\tXSLFPictureData pd = ppt.addPicture(pic, PictureType.JPEG);\n\t\tXSLFPictureShape pic = slide.createPicture(pd);\n\t\tslide.removeShape(shape);\n\t\tpic.setAnchor(anchor);\n\t}\n\n\tpublic static XSLFSlide createSlide(XMLSlideShow ppt, XSLFSlide slide,\n\t\t\tMap<XSLFSlide, XSLFSlide> srcDstrcSlideMap, \n\t\t\tSet<XSLFSlideLayout> visitedLOs) {\n\t\tslide = ppt.createSlide();\n\n\t\tXSLFSlideLayout srcLayout = cachedSlide.getSlideLayout(); //this is coming from a cached slide\n\t\tif (!visitedLOs.contains(srcLayout)) {\n\t\t\tvisitedLOs.add(srcLayout);\n\t\t\tXSLFSlideLayout dstLayout = slide.getSlideLayout();\n\t\t\tdstLayout.importContent(srcLayout);\n\t\t}\n\t\tslide.importContent(pptlo.slide);\n\t\treturn slide;\n\t}", "is_private": false, "bug_id": 60552, "id": 195846, "time": "2017-01-04T17:57:27Z", "creator": "anand.manvi@burandotech.com", "creation_time": "2017-01-04T17:57:27Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 60552, "text": "Could you include your pptx template and the code that opens the template and copies slides to another pptx file (include this file too if you're not starting with a blank workbook)?\n\nWithout these, I can't reproduce your problem or have insight into code that may be the source of the problem (for example, using a slideshow after it has been closed).", "id": 195851, "time": "2017-01-04T18:34:08Z", "creator": "onealj@apache.org", "creation_time": "2017-01-04T18:34:08Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 60552, "is_private": false, "id": 195854, "creation_time": "2017-01-05T03:46:13Z", "time": "2017-01-05T03:46:13Z", "creator": "anand.manvi@burandotech.com", "text": "Created attachment 34590\nZip containing all required files\n\nPFA zip file contains all the required data files and java file.\nPlease note that you need to place all data files in to one folder and point the environment variable PPT_TEST to this folder.\nPlease revert ASAP, my customer demo is blocked on this :(", "attachment_id": 34590}, {"count": 3, "attachment_id": null, "creator": "onealj@apache.org", "text": "(In reply to Javen O'Neal from comment #1)\n> Could you include ... the code that opens the template\n> and copies slides to another pptx file\n\nI didn't see any java code in your attachment from comment 2. Did you forget to add it to the zip file?\n\n(In reply to Anand from comment #2)\n> Please revert ASAP, my customer demo is blocked on this :(\n\nApache POI is an unpaid, volunteer-run project. We cannot commit to prioritizing one bug over another or fixing any bug by a certain date. Generally bugs get closed quickest when the contributor finds the source of the problem and submits a patch with relevant unit tests to prevent the problem from recurring.\n\nIf you need an immediate fix, I'd recommend forking the last stable release (3.15 or 3.16 beta 1, depending on your stability needs) and troubleshooting the bug yourself. If you come up with a fix that is not a hack, feel free to attach it and we'll review and commit your fix.\n\nIf you have no idea where to start, try:\n1. repairing dest.pptx in PowerPoint and saving to dest-repaired.pptx\n2. unzip dest.pptx and dest-repaired.pptx\n3. do a file-wise comparison on the XML files in each directory. This will help you figure out what PowerPoint deemed corrupt and how it repaired it. You could also insert the images into source.pptx with PowerPoint and compare that to the POI-generated or repaired versions to see what POI is doing differently.", "id": 195855, "time": "2017-01-05T04:22:49Z", "bug_id": 60552, "creation_time": "2017-01-05T04:22:49Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": 34591, "creator": "anand.manvi@burandotech.com", "text": "Created attachment 34591\nPFA java code\n\nSorry for missing the java code. PFA. Thanks for quick response.", "id": 195856, "time": "2017-01-05T04:31:03Z", "bug_id": 60552, "creation_time": "2017-01-05T04:31:03Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 60552, "text": "BTW I am using jdk1.7.0_79, if it matters.", "id": 195857, "time": "2017-01-05T04:48:04Z", "creator": "anand.manvi@burandotech.com", "creation_time": "2017-01-05T04:48:04Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "Created attachment 34592\nDiff file\n\nI did a diff and I see that there are about 38 files that are different!", "is_private": false, "id": 195858, "creation_time": "2017-01-05T05:23:21Z", "time": "2017-01-05T05:23:21Z", "creator": "anand.manvi@burandotech.com", "bug_id": 60552, "attachment_id": 34592}, {"count": 7, "tags": [], "bug_id": 60552, "text": "What are the differences in the XML files?\n\nEither use an XML-specific diff tool or convert each XML file to some canonical representation and use a regular line-based text diff tool. On Windows, I have used Notepad++ with XML Tools plugin and then Pretty Print all open files. Microsoft has an XML-aware diff tool [1], though I haven't used it. A crude way would be to find-replace \">\" with \">\\n\" in all XML files, and a slow way would be to copy-paste the XML into a website-based XML pretty printer.\n \nI expect the changes will be:\n* corrupted content that is removed from the repaired version\n* implied attributes that PowerPoint explicitly adds or removes\n* metadata such as last modified user, last modified date\n* reordered relation ID's\n\n[1] https://www.microsoft.com/en-us/download/details.aspx?id=24313", "id": 195859, "time": "2017-01-05T06:11:59Z", "creator": "onealj@apache.org", "creation_time": "2017-01-05T06:11:59Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 60552, "text": "BTW is there any issue in the way I have used PIO? or is it a bug in PIO? Is it possible to confirm? I thought what I am doing was a pretty basic stuf. Am I right?", "id": 195860, "time": "2017-01-05T06:37:27Z", "creator": "anand.manvi@burandotech.com", "creation_time": "2017-01-05T06:37:27Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "(In reply to Anand from comment #8)\n> BTW is there any issue in the way I have used PIO? or is it a bug in PIO? Is\n> it possible to confirm? I thought what I am doing was a pretty basic stuf.\n> Am I right?\n\nYour code looks fairly straightforward, though importing content into a slide and embedding pictures are more advanced features.\n\nThere are a couple spots that look suspicious to me:\n1) You never close srcPPT, destPPT, or spptIS\n2) You import slide layout and slide. This might cause a problem if importing a slide implicitly imports a layout. If the same layout is imported twice, this would be reason for PowerPoint to complain.\n3) your second call to setText writes the text to slide1. Should it have written it to slide2?\n\n(modified for clarity)\n> XSLFSlide destSlide = destPPT.createSlide();\n> destSlide.getSlideLayout().importContent( srcSlide.getSlideLayout() );\n> destSlide.importContent( srcSlide );\n\nYour test code currently does several things:\n* create a blank slide and import slide layout and content from the source slide\n* add two jpeg pictures to the slide\n* add a textbox to the slide\n* repeat these 3 things to a second slide.\n\nDo you still get a corrupt workbook if you comment out some of these lines?\nWithout understanding where the workbook becomes corrupted, we have no chance at determining if it's a bug in POI or a bug in your code. Only then could we figure out if POI can raise an exception just before the workbook becomes corrupt.\n\n> XSLFSlide slide1 = createSlide(destPPT, srcSlide, visitedLOs);\n> setPic(destPPT, slide1, cvPic, CV_PH_NAME);\n> setPic(destPPT, slide1, lvPic, LV_PH_NAME);\n> setText(slide1, LOC_PH_NAME, locTxt);\t\t\t\n> \n> XSLFSlide slide2 = createSlide(destPPT, srcSlide, visitedLOs);\n> setPic(destPPT, slide2, cvPic, CV_PH_NAME);\n> setPic(destPPT, slide2, lvPic, LV_PH_NAME);\n> setText(slide1, LOC_PH_NAME, locTxt);\t//slide2???", "is_private": false, "bug_id": 60552, "id": 195864, "time": "2017-01-05T09:18:01Z", "creator": "onealj@apache.org", "creation_time": "2017-01-05T09:18:01Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "I have come this far through trial and error :) If I recollect correctly, if I did not import the source slide (i.e. only importing the source layout) I was not able to see the source slide content like the logo in the top right corner and content in the footer ...\nBTW if layout is imported twice it gives org.apache.xmlbeans.impl.values.XmlValueDisconnectedException, I have got in to and passed out of that phase :)\n\nAnyway I will try again and see what combo works.", "is_private": false, "bug_id": 60552, "id": 195867, "time": "2017-01-05T09:46:44Z", "creator": "anand.manvi@burandotech.com", "creation_time": "2017-01-05T09:46:44Z", "attachment_id": null}, {"count": 11, "attachment_id": null, "creator": "anand.manvi@burandotech.com", "is_private": false, "id": 195878, "time": "2017-01-05T14:33:26Z", "bug_id": 60552, "creation_time": "2017-01-05T14:33:26Z", "tags": [], "text": "I have tried different combinations of importing layout, slide master, and slide.\nIf I create the slide using the layout or import only the layout PowerPoint opens the resultant file without any errors but header and footer are missing from the destination slide.\nPlease let me know if there's any workaround you can suggest."}]
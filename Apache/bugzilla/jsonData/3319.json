[{"count": 0, "tags": [], "bug_id": 3319, "attachment_id": null, "id": 4968, "creation_time": "2001-08-28T14:03:29Z", "time": "2001-08-28T14:03:29Z", "creator": "Rolf.Sponsel@kstr.lth.se", "text": "Windows/NT + ZoneAlarm + Apache Jakarta Tomcat - start/stop - 2nd time\n\n  =>java.net.ConnectException: Connection refused: connect\n        at java.net.PlainSocketImpl.socketConnect(Native method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:320)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:133)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:120)\n\tat java.net.Socket.<init>(Socket.java:273)\n\tat java.net.Socket.<init>(Socket.java:100)\n\tat org.apache.tomcat.task.StopTomcat.execute(StopTomcat.java:104)\n\tat org.apache.tomcat.startup.Tomcat.stopTomcat(Tomcat.java:267)\n\tat org.apache.tomcat.startup.Tomcat.execute(Tomcat.java:174)\n\tat org.apache.tomcat.startup.Tomcat.main(Tomcat.java:235)\n\n  This exception is thrown, under the conditions described below, when\n  trying to stop the Jakarta Tomcat Servlet Container, when running in\n  standalone mode on Windows/NT 4.0 (build 1381, sp3) with ZoneAlarm 2.6\n  (build 2.6.231) Software Firewall installed.\n\n  Conditions:\n\n\t*). (without quotes, at DOS command level in a Command Prompt window)\n\n\t1). Install or make sure Java SDK v3.1 from Sun is installed.\n\n\t2). Install or make sure ZoneAlarm Firewall Software is installed.\n\t3). Make sure ZoneAlarm gives all right to JVM, under 'Programs' tab.\n\t    i.e. java.exe [Local:    Allow connect {true}, Allow Server {true}]\n\t\t\t  [Internet: Allow connect {true}, Allow Server {true}]\n\n\t4). Make a default vanilla installation of Jakarta Tomcat v3.2.3,\n\t    by default running ajpv12 connection handler on port 8007,\n\t    and http connection handler on port 8080 (see logs).\n\n\t5). Edit the 'Tomcat.bat' file in '<TOMCAT_HOME>\\bin'\n\t    (let's not use the 'startup' and 'shutdown' scripts,\n\t     as they only forward their resposibilities to the\n\t     'tomcat.bat' script anyway). \n\n\t    After the header rows append:\n\n\t\trem --- Explicitly Define Environment Variables ---\n\n\t\tset CLASSPATH=\n\t\tset JAVA_HOME=yourPathToJavaVirtualMachineGoesHere\n\t\tset TOMCAT_HOME=yourPathToTomcatHomeGoesHere\n\n\t    ... to clear the default system classpath, and\n\t        specifying the directory of where you have\n\t\tinstalled your Java Virtual Machine and Tomcat.\n\n\t    Optionally, after the header rows append:\n\n\t\trem define all variables local to script only\n\t\tsetlocal\n\n\t    Optionally, after row ':finish' at the end of the file append:\n\n\t\trem end of locally defined variables\n\t\tendlocal\n\n\t    Done.\n\n\t6). Reboot (to ensure all ports and connections are closed, etc)\n\n\t7). Change directory to <TOMCAT_HOME>, i.e. Tomcat install directory.\n\t8). Look at status of ports by entering(*): 'netstat -an | find \":80\"'\n\t    This will show an empty line as result (at least after a reboot,\n\t    and unless another process opens anything on a port 80### )\n\t9). Start Tomcat by entering(*): 'bin\\tomcat start'\n\t    This will start up the Tomcat Server in another Command Window.\n\t10) Now look at status of ports by entering: 'netstat -an | find \":80\"'\n\t    =>\tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\t    # ok - Tomcat started and ready! - see log files.\t\n\t11) Now, without even attempting to make any http access to Tomcat,\n\t    shut it down by entering(*): 'bin\\tomcat stop'\n\t    This will stop the Tomcat Server and closing the Tomcat Window\n\t    and everyting seems to be okey. - Doesn't it? But.\n\t12) Once again check the status of the ports, which will show\n\t    something like this:\n\t    =>  TCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t127.0.0.1:1030\t\t127.0.0.1:8007\tTIME_WAIT\n\t    # Does this look okey? - No I don't think so. The connection\n\t    # handler seems still be listening for connections. Doesn't it?\n\t13) If we re-check the status of the ports after a while, i.e. after\n\t    about 5 minutes, the TIME_WAIT tagged line will have gone away:\n\t    =>  TCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t    # But the connection handler is still there. It never gets closed.\n\n\t14) Now, restart Tomcat once again, i.e.: 'bin\\tomcat start'\n\t    This will once again start up the Tomcat Server in another Window.\n\t    Checking the status of the ports now displays:\n\t    =>  TCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t    \tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\t    # Suddenly we have TWO connection handlers!?\n\t15) Stopping Tomcat now, i.e.: 'bin\\tomcat stop'\n\t    will render the exception above, in the Command Window where\n\t    the stop command was typed. This time though without stopping\n\t    Tomcat and thus leaving the Tomcat Command Window up and running.\n\t    Checking the status of the ports, now shows no change:\n\t    =>  TCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t    \tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\t    # This comes as no surprise as the Tomcat connection handler,\n              which handles the shutdown request, refuesed the connection\n\t      from the stop-process under control of the ZoneAlarm Firewall.\n\t16) The only way to stop the Tomcat Server now is by typing a ctrl-c\n\t    into the Command Window of the Tomcat Server.\n\t    This effectively kills the Tomcat Server and closes it's 2 ports.\n\t    Checking the status of the ports, now shows:\n\t    =>  TCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t    # Thus the connection handler of the first started Tomcat Server,\n\t      which was stopped whithout throwing an exception, still lingers\n\t      around.\n\n\tNote! The Tomcat logfiles don't indicate any problems.\n\n  Validation:\n\n\tNow, don't start ZoneAlarm True Vector Services at startup\n\tby unchecking 'Load ZoneAlarm at startup' on ZoneAlarm's\n\t'Configure' panel, before stopping ZoneAlarm and rebooting.\n\n\tRepeating the steps described under \"Conditions\" above,\n\tthis time without the ZoneAlarm Firewall (with it's\n\tTrue Vector Services running), will make Tomcat run\n\tas originally intended (my guess). I.e:\n\n\t- Status of ports after first start up:\n\t    =>\tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\t- Status of ports after first shut down:\n\t\tTCP\t127.0.0.1:1030\t\t127.0.0.1:8007\tTIME_WAIT\n\t- Status of ports a while thereafter:\n\t\t -\t      -\t\t\t      -\t\t    -\n\t- ... and so on for every start and stop.\n\n  Why this is a problem:\n\n\tOkey, if the Tomcat Server's ports close when stopping\n\tby giving ctrl-c, then why not use that instead of the\n\t'bin\\tomcat stop' command?\n\n\t- first of all - I'm not sure Tomcat catches the ctrl-c\n\t  correctly and thus is allowed to do any cleanup required.\n\n\t- secondly - How do you specify the ctrl-c when you run\n\t  the Tomcat Server as a Windows service? ;-)\n\n\t- third - After having made a http reference on port 8080\n\t  that port will linger around, even after a ctrl-c, in the\n\t  same way as port 8007 did after the first shut down, and\n\t  thus it will be impossible to reconnect to the Tomcat Server\n\t  via http on port 8080 (even if you start up another Tomcat).\n\n\t  Status of ports after startup, http access, and ctrl-c:\n\t    =>\tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\n\t  Status of ports after startup, http access, and ctrl-c\n\t  and startup of a second Tomcat Server process:\n\t    =>\tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t    \tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\n\t  Status of ports after stopping (ctrl-c) the second Tomcat Server:\n\t    =>\tTCP\t0.0.0.0:8007\t\t0.0.0.0:0\tLISTENING\n\t\tTCP\t0.0.0.0:8080\t\t0.0.0.0:0\tLISTENING\n\n\t  So, now a REBOOT IS REQUIRED (unless you know another way\n\t  of releasing the ports) before you can go on, e.g. testing\n\t  modifications to the Tomcat config files, etc. Sick!\n\n  Why this is important:\n\t\t\n\tZoneAlarm is considered being one of the most decent and secure\n\tSoftware Firewalls around today. It's free for non-commercial use.\n\tSee: http://www.zonealarm.com/\n\n\tTomcat being the reference implementation for Java Servlets and\n\tJava Server Pages is also free, as well as being Open Source.\n\tSee: http://jakarta.apache.org/\n\n\tSoftware development and testing is very expensive, thus the vast\n\tmajority of independent software developers, home users, and start-\n\tups are very dependant on reliable low-/no-cost software for their\n\tfuture success. Software like the ones mentioned above thus make a\n\timportant and natural platform for many many developers around the\n\tworld.\n\n\tTherefore it is very important that we find and solve fundamental\n\tbugs like this one. Solving them at the root once, for all, saves \n\tdevelopers valuable time so they can focus on their development(\n\tinstead of wasting time by seeking for the same\tproblem as have\n\tothers), thus hopfully in the future giving us the _best_ solutions\n\tinstead of the solutions those the big money provides us with.\n\n\tIt's unacceptable to require a reboot of a system after every\n\tmodification to the configuration of an application before one\n\tcan test it again. At least if we want it to succeed and survive.\n\n\tAnd this might also be the source of other annoying problems\n\treported with Tomcat.\n\n  Conclusions:\n\n\tThe problem arises when running Jakarta Tomcat under\n\tthe control of the ZoneAlarm Software Firewall.\n\n\tA port will stay in state LISTEN after a connection has been\n        made to it. This applies to the connection handler, e.g. via\n\t'bin\\tomcat stop', as well as to the http connection handler,\n\tvia 'http://localhost:8080/' by means of some web browser.\n\n\tIt's not possible to run Tomcat as a Windows Service whilst\n\tmaintaining reliable cleanup procedures during shut down,\n\tand at the same time be protected by a software firewall\n\tlike ZoneAlarm (what about others?).\n\n  Solving the bug:\n\n\tHint for solving this bug (by ZoneAlarm and/or Tomcat/Sun developer):\n\n\t- first step\t- make sure Tomcat can be started and stopped\n\t\t\t  via 'bin\\tomcat start' and 'bin\\tomcat stop'\n\t\t\t  unlimited times under control of ZoneAlarm,\n\t\t\t  thereby opening and closing ports correctly,\n\t\t\t  given full access to JVM, i.e. java.exe,\n\t\t\t  for 'Allow connect' and 'Allow server'.\n\t- second step\t- make sure Tomcat works equally when making\n\t\t\t  when making http requests before stopping.\n\t- third  step   - make sure Tomcat can handle the situation\n\t\t\t  when either the 'Internet zone' (most likely)\n\t\t\t  or the 'Local zone' (less likely) does not\n\t\t\t  have server rights by ZoneAlarm, i.e.\n\t\t\t  'Allow Server' for java.exe is blocked for\n\t\t\t  either 'Local' or 'Internet'.\n\n\tI would start with investigating how the ports are opened,\n\ti.e. if they are specified as '127.0.0.1', 'localhost', or\n\texplicitly by the host's ip-address, and make sure the same\n\tmethod is used everywhere. Then experimenting wether using\n\tanother method, i.e. (most likely) '127.0.0.1', would solve\n\tthe problem. (I haven't checked the source myself due to\n\tlack of time, and experience I guess :-( )\n\n  Final note:\n\n\tThis bug will also be reported to:\n\n\tThe Java Developer Connection's Bug Database,\n\tas a Java 2 SDK, Standard Edition bug (I guess?).\n\n\tAs well as to Zone Labs, http://www.zonealarm.com/, i.e. at\n\thttp://www3.zonelabs.com:8080/cgi-bin/support/support_req.pl\t\n./.", "is_private": false}, {"count": 1, "tags": [], "creator": "cmanolache@yahoo.com", "attachment_id": null, "id": 4977, "time": "2001-08-28T22:21:59Z", "bug_id": 3319, "creation_time": "2001-08-28T22:21:59Z", "is_private": false, "text": "I don't know what the firewall is doing, but it shouldn't affect tomcat's \noperation. The second shutdown has no 'normal' reasons to fail, unless something \nstrange is done by the firewall. \n\nRegarding TIME_WAIT, it's a normal state for sockets - and tomcat should be able\nto restart, since java creates sockets with REUSEADDR ( AFAIK ). Most people\nseem to be able to start/stop/start/stop on NT without problems.\n\nWe'll try to look into this later, doesn't seem something we can reproduce\neasily."}]
[{"count": 0, "tags": [], "text": "Round-tripping a long path name (in GNU format) with ant's tar and untar tasks\nappends a trailing 0 char (i.e., null char) to the TarEntry's name. \nTarOutputStream adds the extra 0 char, but TarInputStream and TarEntry do not\nremove it.  I don't know which side is wrong, but they are definitely not\nconsistent.\n\nSomeone mentioned this on the developer's list in the first half of this year,\nspecifically questioning the write(0) call in TarOutputStream.\n\nImpact:\nI don't see the trailing 0 char in the filesystem.  But, it is getting into\nant's XML log (via the Untar task), which breaks subsequent XML parsers.\n\nSample code:\nThis JUnit test fails on the last assertEquals(), showing the round-tripped name\nwith the (unprintable) char 0 appended.\n\nimport java.io.*;\nimport junit.framework.TestCase;\nimport org.apache.tools.tar.*;\n\npublic class TarRoundTripTest extends TestCase {\n\n\tprivate static final String LONG_NAME\n\t\t= \"this/path/name/contains/more/than/one/hundred/characters/in/order/\"\n\t\t\t+ \"to/test/the/GNU/long/file/name/capability/round/tripped\";\n\n\tpublic TarRoundTripTest(String name) {\n\t\tsuper(name);\n\t}\n\n\t/**\n\t * test round-tripping long (GNU) entries\n\t */\n\tpublic void testLongRoundTripping() throws IOException {\n\t\tTarEntry original = new TarEntry( LONG_NAME );\n\t\tassertEquals( \"over 100 chars\", true, LONG_NAME.length() > 100 );\n\t\tassertEquals( \"original name\", LONG_NAME, original.getName() );\n\n\t\t\n\t\tByteArrayOutputStream buff = new ByteArrayOutputStream();\n\t\tTarOutputStream tos = new TarOutputStream( buff );\n\t\ttos.setLongFileMode( TarOutputStream.LONGFILE_GNU );\n\t\ttos.putNextEntry( original );\n\t\ttos.closeEntry();\n\t\ttos.close();\n\t\t\n\t\tTarInputStream tis = new TarInputStream( new ByteArrayInputStream(\nbuff.toByteArray() ) );\n\t\tTarEntry tripped = tis.getNextEntry();\n\t\tassertEquals( \"round-tripped name\", LONG_NAME, tripped.getName() );\n\t\tassertNull( \"no more entries\", tis.getNextEntry() );\n\t\ttis.close();\n\t}\n}\n\nTested environments:\nSun JDK 1.4.1 & 1.3.1\nAnt 1.5.1 & 1.4.1\nLinux 2.4.7 (RedHat 7.2)", "attachment_id": null, "bug_id": 15230, "id": 27589, "time": "2002-12-10T12:52:48Z", "creator": "jdb@getsu.com", "creation_time": "2002-12-10T12:52:48Z", "is_private": false}, {"count": 1, "tags": [], "text": "I've compared the output of ant's tar and GNU tar 1.13.19.  The write(0) and\nlength+1 in TarOutputStream are correct; the entry length includes a terminating\n0 char.  So, the solution is to not include that 0 char in the name during input.\n\nI suggest adding the following lines to the end of getNextEntry().  With this\npatch, TarRoundTripTest passes.\n\n--- src/main/org/apache/tools/tar/TarInputStream.orig\tWed Dec 11 04:45:39 2002\n+++ src/main/org/apache/tools/tar/TarInputStream.java\tWed Dec 11 05:20:19 2002\n@@ -275,6 +275,11 @@\n                 longName.append(new String(buffer, 0, length));\n             }\n             getNextEntry();\n+\n+            // remove trailing null terminator\n+            if( longName.length() > 0 && longName.charAt( longName.length() - 1\n) == 0 ) {\n+                longName.deleteCharAt( longName.length() - 1 );\n+            }\n             this.currEntry.setName(longName.toString());\n         }\n", "attachment_id": null, "id": 27638, "creator": "jdb@getsu.com", "time": "2002-12-11T02:38:22Z", "bug_id": 15230, "creation_time": "2002-12-11T02:38:22Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 15230, "attachment_id": null, "id": 27639, "time": "2002-12-11T03:03:53Z", "creator": "jdb@getsu.com", "creation_time": "2002-12-11T03:03:53Z", "is_private": false, "text": "By the way, I noticed a few discrepencies between the output of ant's tar and\nGNU tar.  Most involve whitespace or leading zeros, but the one I'm a little\nworried about is the 0 char terminators on header fields.  The header fields are\nfixed length.  Ant's tar will use the whole field width; altho it will pad any\nremaining bytes with 0, it will not include a terminating 0 byte if the data\nfills the field.  On the other hand, GNU tar includes a terminating 0 byte (and\none less byte of data in that field).\n\nOf course, the risk is for some tar program to assume that the header fields are\nterminated with a 0 byte.  C programs often make such assumptions about strings.\n It might even be in the tar spec, altho I don't know where \"the\" tar spec is.\n\nHowever, this is not the problem at hand.  \"If it ain't broke, don't fix it.\" "}, {"count": 3, "tags": [], "text": "This fix didn't get into 1.5.2?  Is there something else I need to do?\n\nThanks,\n11011011", "attachment_id": null, "id": 33394, "creator": "jdb@getsu.com", "time": "2003-03-19T02:30:27Z", "bug_id": 15230, "creation_time": "2003-03-19T02:30:27Z", "is_private": false}, {"count": 4, "tags": [], "text": "This fix isn't in 1.5.3 either.  What's the matter?\n\nImpact:\nWhen ant untars a path over 100 chars long, it writes the path with a\nterminating 0 char into its XML log.  This 0 char should not be part of the\npath, and it breaks tools that parse ant's log (like CruiseControl).\n\nRoot cause:\nA long path in a tar file includes a terminating 0 char.  TarInputStream\nincludes that char in the path name.  This looks like a bug in porting tar\nsource from C to Java.  Strings require a terminating 0 in C but not Java.\n\nReproduction:\nSee the JUnit test previously posted.\n\nSuggested fix:\nSee the patch previously posted.\n\nThanks,\n11011011", "attachment_id": null, "id": 35486, "creator": "jdb@getsu.com", "time": "2003-04-18T08:41:09Z", "bug_id": 15230, "creation_time": "2003-04-18T08:41:09Z", "is_private": false}, {"count": 5, "tags": [], "text": "Fixed in CVS - thanks for the wait.", "attachment_id": null, "id": 42265, "creator": "conor@apache.org", "time": "2003-08-06T15:18:48Z", "bug_id": 15230, "creation_time": "2003-08-06T15:18:48Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 15230, "text": "Thanks!\n11011011", "id": 42304, "time": "2003-08-07T00:48:47Z", "creator": "jdb@getsu.com", "creation_time": "2003-08-07T00:48:47Z", "is_private": false, "attachment_id": null}]
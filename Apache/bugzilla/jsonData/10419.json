[{"count": 0, "attachment_id": null, "creator": "H.Zeller@acm.org", "text": "[ Applies to current 4.1 CVS as well ] \nThere is a bug in the way, the session id is grabbed \nfrom the request. If there is more than one session id in the request \n-- in the URL and a Cookie, for instance -- the session id found in the \ncookie _always_ wins. This is a problem, if the browsers sends an \ninvalidated cookie and you choose to use URL-encoding in a later session: \neven if the session id from the URL (via encodeURL(), that works only \nafter fixing Bug #1) is valid, the application always gets the old \nand invalid session from the cookie instead of the valid session from the \nURL. \n \nThe expected behaviour of course is: give preference to valid session \nid's if we get more than one session id. \n \nThe current session id grabbing-from-http-request algorithm is as follows \n(from HttpProcessor.java) \n-------- \n1. get the session ID from the URL, if any. \n     [HttpProcessor.parseRequest()] \n \n2. go through the cookies. If there is _any_ \n   jsessionid - grab the _first one_ and \n   override the jsession-id found in the \n   URL unconditionally. And set \n      request.setRequestedSessionCookie(true); \n      request.setRequestedSessionURL(false); \n   even if the jsession id found in the \n   cookie is the _same_ as found in the URL, \n   in that case it should be \n   setRequestedSessionURL(true). \n     [HttpProcessor.parseHeaders()] \n--------- \n \nHowever, it should be something like: \n--------- \n1. get the jsessionid from the URL, if any. \n   if found there, setRequestedSessionURL(true) \n   else setRequestedSessionURL(false) \n2. go through the cookies. \n   FOREACH jsessionid found in the cookies: \n     IF the sessionid found is valid in that context \n            IF   found session id equals id already in request \n               setRequestedSessionCookie(true) \n            ELSE  (* see below) \n               override the session id in request with the cookie-value \n               setRequestedSessionCookie(true) \n               setRequestedSessionURL(false) \n            ENDIF \n            BREAK FOREACH \n      ELSE IF we have not found any session id before \n               (either from URL or a previous cookie) \n               // set at least some session id \n               set the session id from the cookie \n               setRequestedSessionCookie(true) \n   END FOREACH \n--------- \nThis makes sure, that we find the valid session id, if there is more than \none session. \n \n<discussion> \n   I'd even suggest to give a higher priority to the \n   URL encoded session: if the session id found in the URL is _valid_, \n   then ignore any valid session id in the cookies unless it is the same. \n   This enables to have two independant web-application instances in the \n   same browser: one with cookie, and one with URL-encoding (otherwise this \n   mode only works with two applications both with URL-encoding). \n   This behaviour can be implemented by adding \n   -- \n     IF not request.isRequestedSessionIdValid() \n   -- \n   at the point denoted with (*) above. \n</discussion> \n \nIn an attempt to fix this bug myself, I found, that at that stage it is \nnot yet possible to check whether isRequestedSessionIdValid() \n[ implementation in HttpRequestBase ], since the context is not yet set \nin the HttpProcessor.process() stage -- so we don't have \nthe manager and cannot check the session ID in that context for validity. \nThe context is set much later in the processing in \nStandardHostMapper.map() after having gone through several \nvalves/Pipelines. \nSince I don't know the internals of the tomcat (yet) I have no quick fix \nat hand, but for you guys its probably no big deal. Or give me an hint - \nthen I'll fix it myself. \n \nTo demonstrate this and the previously posted bug, I've written a small \nservlet, that goes \nthrough several steps to create two sessions; one as cookie, one with URL \nrewriting - just follow the instructions the servlet gives. \nNote, that Bug #2 can only be checked thoroughly if Bug #1 has been fixed; \notherwise Bug #1 does not do URL-encoding in the first place.", "id": 18862, "time": "2002-07-02T17:08:51Z", "bug_id": 10419, "creation_time": "2002-07-02T17:08:51Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 10419, "attachment_id": null, "is_private": false, "id": 18920, "time": "2002-07-03T07:57:11Z", "creator": "remm@apache.org", "creation_time": "2002-07-03T07:57:11Z", "text": "As I've said, I am not convinced by the use case."}, {"count": 2, "attachment_id": null, "creator": "H.Zeller@acm.org", "text": "No. Just consider the simple case where you have multple application contexts. \nAll of these contexts have their own cookie, since they are separated. If you \ngrab always the first cookie, then you get a session ID that is not valid in \nthe second context. The problem is, that from this (wrong) \nrequestedSessionId() the HttpSession is looked up, thus not found. Bottomline: \nyou can have only one application context running with cookies. I do not \nagree, that this is not a serious bug! \nAnd the second session can not even decide to use URL encoding instead, \nbecause cookies (even with invlalid session ids) decide there, that the sessio \nn needs not to be encoded. \nPlease reconsider this - or we have to write in the documentation that the \ntomcat session handling can only handle sessions correctly if \n  1) there is only one context involved \n  2) we _only_ use cookies, since URL encoding is broken since it will only \n     work in certain cirumstances. \nI can't see, why we should neglect this part of the spec! ", "id": 18926, "time": "2002-07-03T08:25:16Z", "bug_id": 10419, "creation_time": "2002-07-03T08:25:16Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "creator": "remm@apache.org", "is_private": false, "id": 18927, "time": "2002-07-03T08:46:39Z", "bug_id": 10419, "creation_time": "2002-07-03T08:46:39Z", "tags": [], "text": "Your statement is incorrect. URL encoding does work, but it is a all-or-nothing\nsituation (ie, either you allow session cookies or you don't).\nAs I said, I don't see a use case where the user-agent would submit the session\nid in the URL for a context, and then would submit it as a cookie for another one.\nThe spec also doesn't specify what is the priority order for the session ids,\nnot that it is really needed anyway IMO.\n\nIn any case, I don't consider this a major bug, if people think it is a bug."}, {"count": 4, "tags": [], "text": "Here's an FYI regarding disambiguating session id cookies.\n\nTomcat always sets the \"path\" attribute of the cookie to correspond to the\ncontext path of the web application for which that cookie applies.  A client is\nsupposed to send back cookies only when the request URI matches the path prefix.\n Thus, you will only get >1 session id cookie under the following circumstances:\n\n(1) You have context paths nested inside each other (app1 uses \"/foo\" and\n    app2 uses \"/foo/bar\")\n\n(2) You have a broken client that doesn't respect the \"path\" attribute or the\n    cookie value ordering rules (see below for more).\n\nCase (1) highlights another interesting issue -- the cookies that are included\nin the request don't have any identifiers with them, so it is not obvious how\nyou are supposed to tell them apart.  Fortunately, the specs define a rule to\ndeal with this -- the client is supposed to send the cookie for the longest\nmatching path first.  Thus, in the overlapping case defined above, a request to\n\"/foo/bar/baz\" will include two values for the session id cookie -- first the\none for the \"/foo/bar\" context and then the one for the \"/foo\" context.  A\nrequest to \"/foo/xyz\" will only send the cookie for the \"/foo\" context.  This is\nwhy Tomcat takes the first session id cookie in the list; a properly programmed\nclient will ensure that this is the right one for the most deeply nested context\npath that matches the request URI.\n\nTomcat cannot do anything to help you on case (2) however.  :-)\n", "attachment_id": null, "id": 18955, "creator": "craig.mcclanahan@sun.com", "time": "2002-07-03T17:40:35Z", "bug_id": 10419, "creation_time": "2002-07-03T17:40:35Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "bodewig@apache.org", "text": "*** Bug 14354 has been marked as a duplicate of this bug. ***", "id": 33515, "time": "2003-03-20T07:04:18Z", "bug_id": 10419, "creation_time": "2003-03-20T07:04:18Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "Yes, this is a BUG, and it seems that it is a serious bug, because probably at \n1% of sessions are lost with IE, when the session for some circumstances is \ninvalidated but cookie is left non-expired, and after that the new session is \ngenerated and IE(6 and 5 for me) _ALWAYS_ sends two cookies JSESSIONID; but the \nfirst cookie is for invalid session, so tomcat treats that the session is new, \nalthough the second cookie contains the actual session id.\n\nAlso, I have read in Netscape Standard for Cookies \n(http://wp.netscape.com/newsref/std/cookie_spec.html for your reference):\n----------\nInstances of the same path and name will overwrite each other, with the latest \ninstance taking precedence. Instances of the same path but different names will \nadd additional mappings. \n----------\nWell, I suppose this document is pretty old, but nor later RFCs (2109,2965) nor \nServlet 2.3 Specification  does not contain any information about cookie \npriority, so it is a good thing to think about.\n\nAnd I am very frustrated that this bug remains NEW for about a year - isn't it \na buglist?? Yes, I know that Mr.Maucherat in a similar bug 10419 \n(http://nagoya.apache.org/bugzilla/show_bug.cgi?id=10419) resolved this as \nWONTFIX, saying that he doesn't see any real use cases. Please, reconsider \nabout this or at least say something.\n\nCinecerly,\n  Peter.", "attachment_id": null, "id": 33620, "creator": "peter@sigent.com", "time": "2003-03-21T20:15:42Z", "bug_id": 10419, "creation_time": "2003-03-21T20:15:42Z", "is_private": false}, {"count": 7, "tags": [], "text": "Bug #15555 is related to this. I actually have a use case:\n\n- Admin installs $WEBAPPLICATION\n- forgets to disable cookies in Context; $WEBAPPLICATION always encodes\n  sessions in URL\n- users start using $WEBAPPLICATION\n- Admin remembers after a week\n- lots of users have cookies hanging around in their browsers and cannot log in\n  any more because there is always a stale JSESSIONID cookie being sent by\n  the browser and examined by Tomcat\n\nWe have been bitten by this bug several times.\n\nBye, Tino.\n\nPS: Tested with Tomcat 4.1.24", "attachment_id": null, "id": 41642, "creator": "tino.schwarze@informatik.tu-chemnitz.de", "time": "2003-07-28T11:26:25Z", "bug_id": 10419, "creation_time": "2003-07-28T11:26:25Z", "is_private": false}, {"count": 8, "attachment_id": null, "creator": "funkman@joedog.org", "text": "*** Bug 7588 has been marked as a duplicate of this bug. ***", "id": 51868, "time": "2004-02-07T14:43:55Z", "bug_id": 10419, "creation_time": "2004-02-07T14:43:55Z", "tags": [], "is_private": false}, {"count": 9, "attachment_id": null, "creator": "H.Zeller@acm.org", "is_private": false, "id": 51894, "time": "2004-02-07T20:16:07Z", "bug_id": 10419, "creation_time": "2004-02-07T20:16:07Z", "tags": [], "text": "Since the URL to the original demonstration servlet of this issue wasn't \nreachable anymore (this bug is now open for 1.5 years..), I've moved it to a \nnew location. You can find it at \n  http://vicdor.org/~hzeller/SessionBugDemonstration.java \nnow. \n \nWhile re-reading the comments after a while I noticed that referencing the \nbugs 1 and 2 in my first comment is a bit misleading since bugzilla tries to \nlink to the literal number. They actually stand for the two bugs I've \ncommitted regarding two related aspects of faulty session handling in tomcat, \nnamely Bug #10418 and this Bug #10419. "}, {"attachment_id": null, "tags": [], "bug_id": 10419, "text": "Cookies will override URL session Ids. This is done on purpose and will ot be\nfixed. Now, there was an issue where Tomcat would only consider the first\nsession id cookie. Now, if there are multiple ones, Tomcat will look until one\nof them is valid (the first one should be, as per Craig comments, but I've added\nmore lenient code in the TC 5 CVS, since it doesn't hurt much). Please do not\nreopen this report, it will not be fixed.", "count": 10, "id": 51902, "time": "2004-02-08T10:43:01Z", "creator": "remm@apache.org", "creation_time": "2004-02-08T10:43:01Z", "is_private": false}, {"count": 11, "tags": [], "creator": "H.Zeller@acm.org", "attachment_id": null, "id": 51916, "time": "2004-02-08T14:15:29Z", "bug_id": 10419, "creation_time": "2004-02-08T14:15:29Z", "is_private": false, "text": "Quote: \"Now, if there are multiple ones, Tomcat will look until one \nof them is valid\" \n \nCool, thats all I suggested. "}, {"count": 12, "attachment_id": null, "creator": "remm@apache.org", "text": "Actually, no. If there's a cookie and the URL is encoded, whatever is read from\nthe URL will be overridden (having multiple cookies was another possibility).\nBut this is a case which shouldn't happen (as long as 10418 is also a \"won't\nfix\", there is a consistent effort to favor cookies, which is better for end\nusers anyway).", "id": 51917, "time": "2004-02-08T14:35:00Z", "bug_id": 10419, "creation_time": "2004-02-08T14:35:00Z", "tags": [], "is_private": false}, {"count": 13, "attachment_id": null, "creator": "H.Zeller@acm.org", "text": "I agree, that when we can use cookies, session IDs from cookies should be \npreferred. Preferring URL rewritten session IDs over cookies has only be a \npotential point of discussion (see first comment). \n \nBut IMHO if all session IDs read from cookies are bogus and the session ID \nfrom the URL is a valid one, then tomcat should go for the valid one. \n \nSo its not a matter of 'use cookies' or 'use URL-rewriting' but 'use a valid \nsession id gotten from the client while valid session cookies override session \nIDs from the URL'. If you do the check as pointed out in your message from  \n2004-02-08 10:43, this is almost it as I understand it.. \n..If you do not override a valid session ID with an invalid one from a cookie. \n  \n\"Be lenient with what you consume, be pedantic and accurate with what you \ncreate.\"  -- Jon Postel \n ", "id": 51919, "time": "2004-02-08T15:38:32Z", "bug_id": 10419, "creation_time": "2004-02-08T15:38:32Z", "tags": [], "is_private": false}]
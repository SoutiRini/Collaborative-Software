[{"count": 0, "tags": [], "bug_id": 27333, "is_private": false, "text": "HSSFCellStyle does not implement Cloneable and has no 'clone()' method.\n\nI think it is important to make HSSFCellStyle clonable as I think it will be\nquite common that users will want to be able to take an existing style and\nmodify a copy of it rather than trying to create a similar style from scratch\nwhich is a pain in the butt.\n\nAlso it is very little work to implement this! :)", "id": 53270, "time": "2004-03-01T13:18:21Z", "creator": "timw@mediatel.co.uk", "creation_time": "2004-03-01T13:18:21Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 27333, "text": "HSSFCellStyle is a reference to something in the Workbook.  HSSFCellStyle should\nnot be cloned, instead you should get instances from the workbook (which should\nbe cloneable).  Think of HSSFCellStyle as a \"reference\" and what is the point of\n\"cloning\" a reference.", "id": 53289, "time": "2004-03-01T20:08:20Z", "creator": "poi-support@buni.org", "creation_time": "2004-03-01T20:08:20Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 27333, "text": "Sorry Andy, I made a mistake with my original request. You are right that there\nis no point in cloning a reference. What I needed to achieve is a deep copy of\nthe HSSFCellStyle which I mistakenly thought implementing the clone method would\ndo (sorry my mistake).\n\nI have successfully implemented a deep copy via serialisation of the\nHSSFCellStyle object. However to do this I have had to make the following\nclasses implement the \"java.io.Serializable\" class:\n\norg.apache.poi.hssf.usermodel.HSSFCell\norg.apache.poi.hssf.usermodel.HSSFCellStyle\norg.apache.poi.hssf.record.Record\n\nThe last class \"org.apache.poi.hssf.record.Record\" I altered so that all Record\nsub-classes would also be serialisable as a result although the only class in\nthe \"org.apache.poi.hssf.record\" package I actually needed to be serialisable\nfor my purposes is \"org.apache.poi.hssf.record.ExtendedFormatRecord\".\n\nWould it be acceptable to add these changes to the next release, again it is\nvery little work and would be a great help to me.\n\nCheers,\n\nTim\n\n\n", "id": 53313, "time": "2004-03-02T09:43:58Z", "creator": "timw@mediatel.co.uk", "creation_time": "2004-03-02T09:43:58Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 27333, "attachment_id": null, "id": 69925, "time": "2005-01-21T15:43:39Z", "creator": "amolweb@yahoo.com", "creation_time": "2005-01-21T15:43:39Z", "is_private": false, "text": "(In reply to comment #2)\n> Sorry Andy, I made a mistake with my original request. You are right that there\n> is no point in cloning a reference. What I needed to achieve is a deep copy of\n> the HSSFCellStyle which I mistakenly thought implementing the clone method would\n> do (sorry my mistake).\n> \n> I have successfully implemented a deep copy via serialisation of the\n> HSSFCellStyle object. However to do this I have had to make the following\n> classes implement the \"java.io.Serializable\" class:\n> \n> org.apache.poi.hssf.usermodel.HSSFCell\n> org.apache.poi.hssf.usermodel.HSSFCellStyle\n> org.apache.poi.hssf.record.Record\n> \n> The last class \"org.apache.poi.hssf.record.Record\" I altered so that all Record\n> sub-classes would also be serialisable as a result although the only class in\n> the \"org.apache.poi.hssf.record\" package I actually needed to be serialisable\n> for my purposes is \"org.apache.poi.hssf.record.ExtendedFormatRecord\".\n> \n> Would it be acceptable to add these changes to the next release, again it is\n> very little work and would be a great help to me.\n> \n> Cheers,\n> \n> Tim\n> \n> \n> \n\n\n\nAnother way to tackle it outside of POI source is to create javabean classes for\nHSSFCellStyle, HSSFFont and HSSFCellFormat. Make these javabean classes have the\nsame set/get methods as the corresponding hssf classes but make them Cloneable,\nSerializable etc. And provide a method on each of these that takes in a\nHSSFWorkbook and returns a new javabean object. (I have avoided Cloneable since\nit is considered to be a flawed method, I use explicity method named makeCopy()\nthat returns a new copy). Make a factory that returns preconfigured instances of\nstyle/font/format javabeans.\n\nFinally, extend HSSFWorkbook class (create a decorator) to cache the actual\nstyles created in a Map, and provide a method geetOrCreateCellStyle(String name)\netc. which first checks in the cache for styles by this name previously created\nin this workbook and returns the same or creates one using javabean instances\nfrom the factory if map lookup fails.\n\nFoll is the outline of this code:\n\n//-- Wrapper for hssfcellstyle\npublic class CellStyleBean implements Serializable {\n    protected short borderBottom;\n    // all other similar fields\n    protected short preferredCellWidth;\n    public HSSFCellStyle toCellStyle(HSSFWorkbook workbook) {\n        HSSFCellStyle retval = workbook.createCellStyle();\n        retval.setAlignment(alignment);\n        // other setters\n        retval.setWrapText(wrapText);\n        return retval;\n    }\n    public CellStyleProps makeCopy() {\n        CellStyleProps retval = new CellStyleProps();\n        retval.setAlignment(alignment);\n        // other setters here\n        retval.setPreferredCellWidth(preferredCellWidth);\n        return retval;\n    }\n    public short getAlignment() {\n        return alignment;\n    }\n    public void setAlignment(short alignment) {\n        this.alignment = alignment;\n    }\n    // other get/set\n} // end of CellStyleBean\n\n\n\n// --\n// -- HSSFWorkbookDecorator class\n// --\npublic class HSSFWorkbookDecorator extends HSSFWorkbook {\n    protected Map cellStylesMap = new HashMap();\n    protected Map fontsMap = new HashMap();\n    protected Map dataFormatsMap = new HashMap();\n    // provide all required constructors \n    //    and delegate all to super class\n    public HSSFCellStyle getOrCreateCellStyle(String name) {\n        HSSFCellStyle retval = (HSSFCellStyle) cellStylesMap.get(name);\n        if (retval == null) {\n            CellStyleProps cellStyleProps =\nFormatFactory.getInstance().getCellStyleProps(name);\n            if (cellStyleProps==null) {\n                cellStyleProps = new CellStyleProps();   \n            }\n            retval = cellStyleProps.toCellStyle(this);\n            cellStylesMap.put(name, retval);\n        }\n        return retval;\n    }\n    // simlar to above provide getOrCreateXYZ for font and dataformat\n}\n"}, {"count": 4, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "is_private": false, "id": 123779, "time": "2009-01-05T13:59:46Z", "bug_id": 27333, "creation_time": "2009-01-05T13:59:46Z", "text": "It looks like HSSFCellStyle.cloneStyleFrom(CellStyle) has the desired functionality.  This was added in svn r676205 (prior to release 3.1.1-alpha1).\n\nImplementing Cloneable was probably decided against because cloning styles involves some updates to the workbook and other objects, and that might be considered beyond the expected complexity of Object.clone().\n\nPlease re-open this bug if the new method does not work as expected."}]
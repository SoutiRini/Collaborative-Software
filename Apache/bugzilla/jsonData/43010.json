[{"count": 0, "tags": [], "bug_id": 43010, "text": "FileAppender.setFile() calls reset() to close existing file, which also clobbers\nthe fileName parameter. Its ok - because setFile() have received it as an\nargument, and it sets this.fileName back when it exists cleanly. \n\nThe problem is that if setFile() fails to open the file then it throws an\nexception - w/o setting the fileName back, so that if someone then tries to look\nat the appender and understand what the problem is, then getFile() returns null.\n\nIn my use case, I have a framework which allows its users to define arbitrary\nlog4j configurations, and after the configuration is setup (in a specific stage\nof the framework initialization) the framework examines the log4j setup and\n\"fixes\" relative file paths to an absolute path where the user is allowed to\ncreate files (a directory which is installation dependent). Currently this works\nonly if the application can start by opening a file in a certain location and\nthen after the framework fiddles with the file name, it will be closed and\nreopened (which is of course not optimal).\n\nRegardless to the above use case, I think it would be a good idea not to lose\nthe fileName even if an exception occurs during activateOptions() - and I will\nattach a patch with a simple fix in a minute.", "id": 106153, "time": "2007-08-01T09:24:53Z", "creator": "oded@taboola.com", "creation_time": "2007-08-01T09:24:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "oded@taboola.com", "attachment_id": 20580, "is_private": false, "id": 106154, "time": "2007-08-01T09:26:21Z", "bug_id": 43010, "creation_time": "2007-08-01T09:26:21Z", "text": "Created attachment 20580\nPatch to attempt to solve the above problem\n\nThis patch tries to solve the problem described above by simply moving the\nsetting of this.fileName to immediately after calling reset() so that at all\ntimes fileName is set to a valid value."}, {"count": 2, "tags": [], "bug_id": 43010, "is_private": false, "text": "Seems a bit too risky to change at this point in log4j 1.2.", "id": 107124, "time": "2007-08-22T20:24:03Z", "creator": "carnold@apache.org", "creation_time": "2007-08-22T20:24:03Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 43010, "text": "Why too risky ? Do you think there are some applications that depend on this\nbehavior ? \n\nDo you think that the current behavior of FileAppender is correct or not correct\n?  If its the latter, will this behavior change in the next minor release (1.3?)", "id": 107356, "time": "2007-08-28T12:08:55Z", "creator": "oded@taboola.com", "creation_time": "2007-08-28T12:08:55Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 43010, "text": "As such a frequently extended class in the framework, any change in behavior has a potential to have \nunexpected consequences.\n\nlog4j 1.3 has been abandoned.  The next maintenance release will be 1.2.16, the next major release is \n2.0, there is no anticipated minor release.\n\nThere was an effort to create a MultiFileAppender which could handle multiple open files for use cases \nsuch as different file for each thread, etc, but also could be more robust for rolling files, etc since it did \nnot need to close the existing file before attempting to create the new file.  It may be that your use case \nwould fit that model better.  MFA is still in the sandbox and has been dormant for a while, but it really \nshould be revisited and likely integrated into the extras companion.", "id": 107761, "time": "2007-09-05T20:20:32Z", "creator": "carnold@apache.org", "creation_time": "2007-09-05T20:20:32Z", "is_private": false, "attachment_id": null}]
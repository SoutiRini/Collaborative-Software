[{"count": 0, "tags": [], "text": "I created a zip file through Ant 1.5.3 and then I tried to calculate the \nChecksum values of the files inside the zip file using ZipInputStream. It \ndisplays -1 for all the files. varies if i expand the zip file to a temporary \ndirectory and zip it again it displays the checksum values properly.", "attachment_id": null, "bug_id": 19195, "id": 35711, "time": "2003-04-21T17:44:04Z", "creator": "nijeesh_b_h@yahoo.com", "creation_time": "2003-04-21T17:44:04Z", "is_private": false}, {"count": 1, "tags": [], "text": "somebody has inputs on this? I had opened this defect quite long back..but no \nresponse!!!!!!!!\n\n", "attachment_id": null, "bug_id": 19195, "id": 38450, "time": "2003-06-05T19:07:44Z", "creator": "nijeesh_b_h@yahoo.com", "creation_time": "2003-06-05T19:07:44Z", "is_private": false}, {"count": 2, "tags": [], "creator": "ddevienne@lgc.com", "text": "Sorry, I don't know much about ZIPs in general, but I know for sure Ant uses \nit's own implementation of the ZIP/JAR format, not the JDK classes, and it's \nvery possible that this implementation doesn't update the Checksum header field \nfor the files added.\n\nLook up in the Ant code base src/java/org/apache/tools/zip/**. --DD", "id": 38463, "time": "2003-06-05T22:03:19Z", "bug_id": 19195, "creation_time": "2003-06-05T22:03:19Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 19195, "text": "The problem is that the compressed size, uncompressed size and checksum are \nwritten to the ZIP output _after_ the data.  So when you are reading the zip\nusing a ZipInputStream, the size and crc are not available until the data has been\nread.\n\nThe classic command line 'zip' tool can write the size info before the data.\n\nCan I request that the Ant zip task is fixed to work that way?  It could deflate\nthe data into an in-store buffer before writing the entry header.  It could then\nknow the entry sizes and CRC.  The buffer size could be limited so that any really\nlarge entries would behave as in the current version.\n\nI need zip files written like that so my build file has to use exec with the\nzip command which is really messy!", "id": 40709, "time": "2003-07-15T12:17:46Z", "creator": "rde@webtrak.co.uk", "creation_time": "2003-07-15T12:17:46Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 19195, "attachment_id": null, "id": 40721, "time": "2003-07-15T13:56:56Z", "creator": "bodewig@apache.org", "creation_time": "2003-07-15T13:56:56Z", "is_private": false, "text": "What you see is the same behavior that java.util.zip.ZipOutputStream generates.\n\njava.util.zip.ZipInputStream is conceptually broken, you shouldn't use it.  If you\nencounter an archive with holes in it (i.e. areas that are not assigned to any\nzip entry according to the central directory) it is going to fail badly.  Better\nto use ZipFile instead of ZipInputStream.\n\nYou are correct, the situation could be improved, but the improvement comes with\na cost - we'd have to either compress the data twice or store the compressed data\nin memory, which will become a big problem when we are including big files.\n\nThe command line unzip tool has no problems with the current format, and a\nworkaround - even if ugly - exists.  Another option is to not compress the\narchive.  I'm lowering the severity of this report because of this."}, {"count": 5, "tags": [], "creator": "bodewig@apache.org", "text": "Many thanks for your patch Richard!\n\nFixed in nightly build 2003-07-23.", "id": 41148, "time": "2003-07-22T11:40:01Z", "bug_id": 19195, "creation_time": "2003-07-22T11:40:01Z", "is_private": false, "attachment_id": null}]
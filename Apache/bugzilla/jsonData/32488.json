[{"count": 0, "tags": [], "bug_id": 32488, "is_private": false, "id": 67758, "creation_time": "2004-12-02T09:41:36Z", "time": "2004-12-02T09:41:36Z", "creator": "web@delusions.de", "text": "If this is the right place to ask this, I will, if not please ignore me. If this\nis already in place I'd be grateful for a hint. \n\nI would like to be able to store the pid of a spawned process in an ant property\nto be able to easily kill the spawned process after a build. If this is\nimpossible to do please ignore this request, I really have no idea how\ncomplicated this might be.\n\nExample: my test target starts an rmi server, I spawn this because I want to\ncontinue with my build after starting the server. Then I run a test client,\nafterwards I want to stop the server and the rmiregistry. This may not be the\nbest example because this specific problem might possibly be solved\nprogrammatically within my code but I would need to modifiy my code for testing\nwhich is not quite my favorite option.\n\nOtherwise: thanks for an absolutely cool tool which makes every day as a\ndeveloper more enjoyable, keep up the great work.", "attachment_id": null}, {"count": 1, "tags": [], "text": "How do we kill processes in a cross platform manner? What process ID were you\nthinking of for Windows Apps?\n\nAll we have in the runtime is the Process object, and I think the way spawning\nworks is we forget about that after starting the program. There is no process ID. \n\nFor your problem, deploy the server and tests in <parallel>. \n\nAlternatively, and this is RMI here, have some RMI object that shuts down the\nserver, that you can talk to to tell it to terminate itself. This is what I do.\n\n ", "attachment_id": null, "bug_id": 32488, "id": 67765, "time": "2004-12-02T12:40:44Z", "creator": "stevel@apache.org", "creation_time": "2004-12-02T12:40:44Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 32488, "attachment_id": null, "id": 67789, "creation_time": "2004-12-02T17:22:52Z", "time": "2004-12-02T17:22:52Z", "creator": "peterreilly@apache.org", "text": "This cannot be done in java - see 30631\n\n*** This bug has been marked as a duplicate of 30631 ***", "is_private": false}, {"count": 3, "tags": [], "text": "Thx for the hint with the <parallel>, I didn't know about that. That would of\ncourse solve the problem. Which wasn't actually a big one because I managed to\nfind the pid anyway. \n\nI had not thought about cross platform compatiblity :-( ", "is_private": false, "bug_id": 32488, "id": 67871, "time": "2004-12-03T13:28:56Z", "creator": "web@delusions.de", "creation_time": "2004-12-03T13:28:56Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "I quess that I was wrong, this can be done using reflection.\nSee 30631!.\n\nOne can use reflection on the Process object and get the\nfields of the implementation object. \"pid\" for unix, and \"handle\"\nfor windows.  (Assuming that one has the correct prilivage to\nsee private fields and that the jdk implemention uses the same\nas the sun implemention for the process objects). \n\nWould it be a usefull feature to add ?\n", "is_private": false, "bug_id": 32488, "id": 68190, "time": "2004-12-09T16:56:04Z", "creator": "peterreilly@apache.org", "creation_time": "2004-12-09T16:56:04Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 32488, "attachment_id": null, "text": "Possibly, with a processid attribute on <exec> to indicate a property name to\nset with a warning if we could not discover it via reflection?  Behavior on\n<apply> would be a little strange... the first PID would be set.  I would\nhesitate to attempt to provide a <kill> task as other than an antlib that might\nrequire external packages to be installed.  Peter, not to digress too far, but\ndo you have any ideas on how to achieve conditional taskdefs within an antlib? \nI think it would be handy to be able to assign a particular taskname to one of\nmultiple [task|macro|preset|script]defs depending on various conditions\nincluding but not limited to os and availability of external executables and/or\nlibraries.", "id": 68193, "time": "2004-12-09T17:30:43Z", "creator": "mbenson@apache.org", "creation_time": "2004-12-09T17:30:43Z", "is_private": false}, {"count": 6, "tags": [], "text": "I forgot about <apply>, I was only thinking about <exec>, but of cource there\nare others..\n\nAs regards the antlib question, this should be on dev@ant.apache.org.\nThis sort of stuff would be possible with the follows small additions\nto ant ;-)\n\n1) allow any task to be run in the antlib\n   (easy mod - initial implementation of antlib)\n2) local properties - one would be set properties in an antlib\n   without affecting the users of the antlib\n3) have if and unless attributes for each task\n\n<antlib>\n   <local-property name=\"is.unix\"/>\n   <condition property=\"is.unix\">\n      <os family=\"unix\"/>\n   </condition>\n   <typedef name=\"kill\" classname=\"..UnixKiller\" if=\"is.unix\"/>\n   <typedef name=\"kill\" classname=\"..WindowKiller\" unless=\"is.unix\"/>\n</antlib>\n", "attachment_id": null, "bug_id": 32488, "id": 68241, "time": "2004-12-10T16:36:55Z", "creator": "peterreilly@apache.org", "creation_time": "2004-12-10T16:36:55Z", "is_private": false}]
[{"count": 0, "attachment_id": 28616, "creator": "Martin.Kocicak.Koci@gmail.com", "text": "Created attachment 28616\nScreenshot : Thread states during test\n\nThis is a small Concurrency problem also find during myfaces performance testing [1]\n\norg.apache.catalina.core.DefaultInstanceManager.annotationCache uses WeakHashMap for cache, but this approach needs sychronized get() access. This can lead to complete thread stuck at this lock - see attached screenshots from yourkit profiler. \n\nI think this problem is classical concurrent cache problem = many read but only few put()s, reads vastly outnumber writes. It this case is should be read without locking otherwise it is a concurrency bottleneck.\n\nI didn't check the code of DefaultInstanceManager deeply, following are suggestions only:\n1) Normally is this concurrent-cache solvable with ConcurrentHashMap or with maps based on this type like [2] or [3]\n2) the 'weakness' can achieved with String (classname) if it is acceptable to maintain annotations for class that can be already unloaded or with WeakReference\n\n[1] http://tomcat.markmail.org/thread/7bbvzmkvyvryvn44\n[2] http://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache.java\n[3] http://code.google.com/p/guava-libraries/wiki/CachesExplained", "id": 158111, "time": "2012-04-16T18:42:12Z", "bug_id": 53085, "creation_time": "2012-04-16T18:42:12Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 53085, "text": "Created attachment 28617\nScreenshot: Monitor Usage during test", "id": 158112, "time": "2012-04-16T18:43:44Z", "creator": "Martin.Kocicak.Koci@gmail.com", "creation_time": "2012-04-16T18:43:44Z", "is_private": false, "attachment_id": 28617}, {"count": 2, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 158179, "time": "2012-04-18T20:37:31Z", "bug_id": 53085, "creation_time": "2012-04-18T20:37:31Z", "is_private": false, "text": "(In reply to comment #0)\n> 2) the 'weakness' can achieved with String (classname) if it is acceptable to\n> maintain annotations for class that can be already unloaded or with\n> WeakReference\n\nIt cannot be String alone. You need {ClassLoader + String} to identify a class."}, {"count": 3, "tags": [], "text": "Created attachment 28641\n2012-04-19_tc8_53085_DefaultInstanceManager.patch\n\nI added ManagedConcurrentWeakHashMap class to trunk in r1327915\n\nHere is a patch for trunk that uses that new class to fix this issue. I have not committed it yet.\n\nThings that I am not sure:\n\n1. Should DefaultInstanceManager implement LifecycleListener just to catch periodic events?\n\nThere is PeriodicEventListener interface that seems more suitable.\n\nThe only \"problem\" though is ugliness in TestDefaultInstanceManager part of the patch where I need to call this maintenance processing. Simulating a LifecycleEvent is more than it is worth.\n\nThe good thing though is that I do not need to override StandardContext#backgroundProcessing() to fire the event, nor invent a LifecycleListener -> PeriodicEventListener adapter.\n\n2. Looking for calls of DefaultInstanceManager constructor, there are 3 such places. Only the instanceManager instance owned by StandardContext is handled by this patch.  I wonder whether 2 other places are actually needed.\n\nMaybe amend the Context interface by adding #getInstanceManager() method, at least in Tomcat 8?\n\nThe 3 places:\n - StandardContext#startInternal()\n - ApplicationFilterConfig#getInstanceManager()\n - AsyncContextImpl#getInstanceManager()", "is_private": false, "id": 158200, "creator": "knst.kolinko@gmail.com", "time": "2012-04-19T12:19:47Z", "bug_id": 53085, "creation_time": "2012-04-19T12:19:47Z", "attachment_id": 28641}, {"count": 4, "tags": [], "text": "Am also facing similar issue. This issue stalls the application throughput after a certain load. When can we expect a patch for annotationCache concurrency?", "is_private": false, "id": 176972, "creator": "manoj.ks@fisglobal.com", "time": "2014-08-07T11:33:31Z", "bug_id": 53085, "creation_time": "2014-08-07T11:33:31Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 53085, "text": "Which tomcat build have this patch?", "id": 177355, "time": "2014-08-25T14:10:52Z", "creator": "manoj.ks@fisglobal.com", "creation_time": "2014-08-25T14:10:52Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 53085, "attachment_id": null, "text": "(In reply to Manoj from comment #5)\n> Which tomcat build have this patch?\n\nRead the comments: the support class was added to the trunk back in 2012 and presumably appears in all releases following that date.\n\nThat support class, however, is not actually being used in any released version. If you want to enable it, you'll have to manually apply Konstantin's patch to the Tomcat sources and build it yourself. (Fortunately, building Tomcat has become staggeringly easy since Tomcat 7.0.x).", "id": 177356, "time": "2014-08-25T14:30:08Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-08-25T14:30:08Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 53085, "attachment_id": null, "text": "Looks like the support class is only available in tomcat 8. Can we have the fix added in tomcat 7?", "id": 179817, "time": "2014-12-17T07:45:31Z", "creator": "manoj.ks@fisglobal.com", "creation_time": "2014-12-17T07:45:31Z", "is_private": false}]
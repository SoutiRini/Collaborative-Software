[{"count": 0, "tags": [], "creator": "x00000000@freenet.de", "text": "Setting baseVal.value of an element that has been created with DOM methods\ngives SVG Error \"null\":\n\norg.apache.batik.dom.svg.LiveAttributeException\n\tat\norg.apache.batik.dom.svg.AbstractSVGAnimatedLength$BaseSVGLength.revalidate(Unknown\nSource)\n\tat org.apache.batik.dom.svg.AbstractSVGLength.setValue(Unknown Source)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.mozilla.javascript.MemberBox.invoke(Unknown Source)\n\tat org.mozilla.javascript.JavaMembers.put(Unknown Source)\n\tat org.mozilla.javascript.NativeJavaObject.put(Unknown Source)\n\tat org.mozilla.javascript.ScriptableObject.putProperty(Unknown Source)\n\tat org.mozilla.javascript.ScriptRuntime.setObjectProp(Unknown Source)\n\tat org.mozilla.javascript.ScriptRuntime.setObjectProp(Unknown Source)\n\tat org.mozilla.javascript.gen.c2782._c0(Event attribute\nfile:/home/batik/tests/baseval.svg:8 onload:1)\n\tat org.mozilla.javascript.gen.c2782.call(Event attribute\nfile:/home/batik/tests/baseval.svg:8 onload)\n\tat org.mozilla.javascript.ContextFactory.doTopCall(Unknown Source)\n\tat org.mozilla.javascript.ScriptRuntime.doTopCall(Unknown Source)\n\tat org.mozilla.javascript.gen.c2782.call(Event attribute\nfile:/home/batik/tests/baseval.svg:8 onload)\n\tat org.mozilla.javascript.gen.c2782.exec(Event attribute\nfile:/home/batik/tests/baseval.svg:8 onload)\n\tat org.mozilla.javascript.Context.evaluateReader(Unknown Source)\n\tat org.apache.batik.script.rhino.RhinoInterpreter$2.run(Unknown Source)\n\tat org.mozilla.javascript.Context.call(Unknown Source)\n\tat org.mozilla.javascript.ContextFactory.call(Unknown Source)\n\tat org.apache.batik.script.rhino.RhinoInterpreter.evaluate(Unknown Source)\n\tat org.apache.batik.bridge.BaseScriptingEnvironment$1.handleEvent(Unknown Source)\n\tat org.apache.batik.dom.events.EventSupport.fireEventListeners(Unknown Source)\n\tat org.apache.batik.dom.events.EventSupport.fireEventListeners(Unknown Source)\n\tat org.apache.batik.dom.events.EventSupport.dispatchEvent(Unknown Source)\n\tat org.apache.batik.dom.AbstractNode.dispatchEvent(Unknown Source)\n\tat org.apache.batik.bridge.BaseScriptingEnvironment.dispatchSVGLoad(Unknown Source)\n\tat\norg.apache.batik.bridge.BaseScriptingEnvironment.dispatchSVGLoadEvent(Unknown\nSource)\n\tat org.apache.batik.bridge.UpdateManager.dispatchSVGLoadEvent(Unknown Source)\n\tat org.apache.batik.bridge.UpdateManager.dispatchSVGLoadEvent(Unknown Source)\n\tat org.apache.batik.swing.svg.SVGLoadEventDispatcher.run(Unknown Source)\n\nfor this document:\n\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-1 -1 3 3\"\n onload='\n  var root= document.rootElement;\n  var elt= document.createElementNS( root.namespaceURI, \"rect\" );\n  elt.width.baseVal.value= 1;\n  elt.height.baseVal.value= 1;\n  root.appendChild( elt );\n '/>\n\nNote that it isn't possible to use createSVGLength() first because baseVal\nis readonly (however, the actual error in Batik is\n'Java class \"org.apache.batik.dom.svg.SVGOMAnimatedLength\" has no public\ninstance field or method named \"baseVal\"'), nor is it possible to attach\nthe element to the document first (gives an exception on missing required\nwidth/height for a <rect/>).\n\nSetting the value with setAttribute() works as expected.", "id": 101305, "attachment_id": null, "bug_id": 42014, "creation_time": "2007-04-01T11:13:05Z", "time": "2007-04-01T11:13:05Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 42014, "is_private": false, "text": "Created attachment 19862\ntestcase", "id": 101306, "time": "2007-04-01T11:13:53Z", "creator": "x00000000@freenet.de", "creation_time": "2007-04-01T11:13:53Z", "attachment_id": 19862}, {"count": 2, "tags": [], "creator": "cam@apache.org", "text": "Yes, perhaps the checking for required attributes should be done only when the\nelement is about to be actually used, so that if the element is not in the\ndocument the exception isn't thrown.", "id": 101348, "attachment_id": null, "bug_id": 42014, "creation_time": "2007-04-02T17:23:09Z", "time": "2007-04-02T17:23:09Z", "is_private": false}, {"count": 3, "tags": [], "creator": "x00000000@freenet.de", "text": "Looked at the source. The whole process of setting a value doesn't make\nsense to me. It is as follows:\n\n- AbstractSVGLength.setValue() calls\n  AbstractSVGAnimatedLength$BaseSVGLength.revalidate() to validate the *old*\n  value of the corresponding attribute\n\n- If I remove the revalidate(), AbstractSVGLength.setValue() sets the value\n\n- Then it calls AbstractSVGAnimatedLength$BaseSVGLength.reset(), which calls\n  AbstractSVGLength.getValueAsString()\n\n- AbstractSVGLength.getValueAsString() calls\n  AbstractSVGAnimatedLength$BaseSVGLength.revalidate() to validate the *old*\n  value of the corresponding attribute\n\n- If I remove the revalidate(),\n  AbstractSVGAnimatedLength$BaseSVGLength.reset() finally sets the\n  corresponding attribute to the new value (without validation)\n\n- The bridge is notified about the new element when it is put into the\n  document\n\n- SVGRectElementBridge.buildShape() calls AbstractSVGLength.getValue()\n\n- AbstractSVGLength.getValue() calls\n  AbstractSVGAnimatedLength$BaseSVGLength.revalidate() to validate the value\n  of the corresponding attribute (i.e. parses it and calculates the value)\n\nNote that the final validation will be bypassed if the *old* value was valid\n(reset() inhibits the call of invalidate() in attrChanged()), i.e. this does\nnot throw an exception:\n\n  var root= document.rootElement;\n  var elt= document.createElementNS( root.namespaceURI, \"rect\" );\n  elt.setAttribute( \"width\", 1 );\n  elt.setAttribute( \"height\", 1 );\n  elt.width.baseVal.value= -1;\n  root.appendChild( elt );\n\nIMHO, validation should happen explicitly in SVG*ElementBridge.buildShape()\nand nowhere else. Synching of XML attribute and SVG DOM values should be\nseparate from this. Also consider code like this, which should work if the\nelement isn't attached to the document yet:\n\n  myWidth.value= someFunctionThatMayReturnNegativeValues();\n  if ( myWidth.value < minimumWidth ) myWidth.value= minimumWidth;\n\nThe SVG 1.1 spec says in B.7:\n\n  If a script sets a DOM attribute to an invalid value (e.g., a negative\n  number for an attribute that requires a non-negative number or an\n  out-of-range value for an enumeration), unless this specification\n  indicates otherwise, no exception shall be raised on setting, but the\n  given document fragment shall become technically in error as described in\n  Error processing.\n\nAnd in F.2:\n\n  Because of situations where a block of scripting changes might cause a\n  given SVG document fragment to go into and out of error, error processing\n  shall occur only at times when document presentation (e.g., rendering to\n  the display device) is updated. In particular, error processing shall be\n  disabled whenever redraw has been suspended via DOM calls to\n  suspendRedraw().\n\nBTW, AbstractSVGLength.parse() catches ParseException and sets the length to\n0 unknown units. AbstractSVGLength.getValue() then returns 0 with this\ncomment:\n\n            // XXX Should we throw an exception here when the length\n            //     type is unknown?\n\nThe answer is \"no\", but validation at rendering time should check for\ninvalid units.\n", "id": 101383, "attachment_id": null, "bug_id": 42014, "creation_time": "2007-04-03T13:20:56Z", "time": "2007-04-03T13:20:56Z", "is_private": false}, {"count": 4, "tags": [], "text": "The behavior of newValueSpecifiedUnits() is even worse:\n\n  elt.setAttribute( \"width\", 1 );\n  elt.width.baseVal.newValueSpecifiedUnits(\n    elt.width.baseVal.SVG_LENGTHTYPE_NUMBER, 2 );\n\nThis results in width still being 1 because newValueSpecifiedUnits() does\nnot call revalidate(), so the other call to revalidate() in reset() resp.\ngetValueAsString() actually validates the value that has been set before\nin setAttribute() and replaces the new value with the old value.\n", "is_private": false, "bug_id": 42014, "id": 101388, "time": "2007-04-03T13:55:51Z", "creator": "x00000000@freenet.de", "creation_time": "2007-04-03T13:55:51Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "Thanks for the detailed analysis.\n\n> - AbstractSVGLength.setValue() calls\n>   AbstractSVGAnimatedLength$BaseSVGLength.revalidate() to validate the *old*\n>   value of the corresponding attribute\n\nHmm, yes it seems that calling revalidate() before any set method serves no\nuseful purpose.\n\n> Note that the final validation will be bypassed if the *old* value was valid\n> (reset() inhibits the call of invalidate() in attrChanged()), i.e. this does\n> not throw an exception:\n\nYou're right.  I wonder why.\n\n> IMHO, validation should happen explicitly in SVG*ElementBridge.buildShape()\n> and nowhere else. Synching of XML attribute and SVG DOM values should be\n> separate from this.\n\nAgreed.  I'll probably put an explicit, public validate method on the value\nobjects that the bridge calls just before it uses those values to build the\ngraphics objects.  This will allow different error-handling behaviour for the\nbridge and script.\n\n> Also consider code like this, which should work if the\n> element isn't attached to the document yet:\n> \n>   myWidth.value= someFunctionThatMayReturnNegativeValues();\n>   if ( myWidth.value < minimumWidth ) myWidth.value= minimumWidth;\n\nYes, according to the bits of the spec you quoted this should be allowed.\n\n> BTW, AbstractSVGLength.parse() catches ParseException and sets the length to\n> 0 unknown units. AbstractSVGLength.getValue() then returns 0 with this\n> comment:\n> \n>             // XXX Should we throw an exception here when the length\n>             //     type is unknown?\n> \n> The answer is \"no\", but validation at rendering time should check for\n> invalid units.\n\nI think there is a case for throwing an exception here.  getValue() is meant to\nreturn the length value in user units.  If the unit type is invalid, because of\na weird DOM attribute value (or doing a .newValueSpecifiedUnits() with an\ninvalid unit type), there's no way to convert it to user units.  It's not clear\nwhether some value should be returned or an exception should be thrown. \n(Actually, the spec is clear that getValue() doesn't throw an exception, but I\nthink it should either be changed to throw or clarified to say what value is\nreturned.)\n\n> The behavior of newValueSpecifiedUnits() is even worse:\n> \n>   elt.setAttribute( \"width\", 1 );\n>   elt.width.baseVal.newValueSpecifiedUnits(\n>     elt.width.baseVal.SVG_LENGTHTYPE_NUMBER, 2 );\n> \n> This results in width still being 1 because newValueSpecifiedUnits() does\n> not call revalidate(), so the other call to revalidate() in reset() resp.\n> getValueAsString() actually validates the value that has been set before\n> in setAttribute() and replaces the new value with the old value.\n\nYes, that seems to be broken, too, but only for elements not in the document.\n\nI'll take a look at all of this over the easter break.", "is_private": false, "bug_id": 42014, "id": 101399, "time": "2007-04-03T17:26:14Z", "creator": "cam@apache.org", "creation_time": "2007-04-03T17:26:14Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "x00000000@freenet.de", "is_private": false, "id": 101479, "time": "2007-04-05T17:58:42Z", "bug_id": 42014, "creation_time": "2007-04-05T17:58:42Z", "tags": [], "text": "(In reply to comment #5)\n> > Note that the final validation will be bypassed if the *old* value was valid\n> > (reset() inhibits the call of invalidate() in attrChanged()), i.e. this does\n> > not throw an exception:\n> \n> You're right.  I wonder why.\n\nProbably this has been copied from simpler cases like\nSVGOMAnimatedNumber.setBaseVal() without enough thinking. It assumes that\nthe value has just been validated resp. synced with the attribute, but that\nisn't true here because revalidate() validates the *old* value.\n\n> I think there is a case for throwing an exception here.  getValue() is meant to\n> return the length value in user units.  If the unit type is invalid, because of\n> a weird DOM attribute value (or doing a .newValueSpecifiedUnits() with an\n> invalid unit type), there's no way to convert it to user units.  It's not clear\n> whether some value should be returned or an exception should be thrown. \n> (Actually, the spec is clear that getValue() doesn't throw an exception, but I\n> think it should either be changed to throw or clarified to say what value is\n> returned.)\n\nOk, the spec also says: \"It is invalid to attempt to define a new value of\nthis type\". This might mean that anything could happen. And \"attempt\" may\nimply that it won't succeed.\n"}, {"count": 7, "attachment_id": null, "creator": "cam@apache.org", "is_private": false, "id": 101567, "time": "2007-04-10T21:33:45Z", "bug_id": 42014, "creation_time": "2007-04-10T21:33:45Z", "tags": [], "text": "I've just committed some changes to the LiveAttributeValue stuff.  Please try it\nand let me know if it behaves as you expect it should."}]
[{"count": 0, "tags": [], "creator": "aanisimov@inbox.ru", "text": "Created attachment 26146\nExample app\n\nIt seems that after URL-decoding a parameter value that value is treated as a string in some 1-byte charset, but not as a string encoded with a charset specified by http's request character encoding.\n\n  To reproduce, run an attached application. The start page has a link to a test servlet and passes it a parameter that has non-latin1 characters. The test servlet, in turn, creates two files in the current working directory into which it prints the following two values:\n\n 1. req.getParameter(\"parameter\")\n 2. new String(req.getParameter(\"parameter\").getBytes(\"latin1\"),\"utf-8\")\n\n  The second file contains the actual value of the parameter, while the first one contains some junk which looks like a result of utf-8 encoding a string that was created by treating the original utf-8 value as a string in some 1-byte charset.\n\n  The full source code for the test servlet is in WEB-INF/classes/TestServlet.java.", "id": 140615, "time": "2010-10-09T06:30:07Z", "bug_id": 50065, "creation_time": "2010-10-09T06:30:07Z", "is_private": false, "attachment_id": 26146}, {"attachment_id": null, "tags": [], "bug_id": 50065, "text": "(In reply to comment #0)\n> It seems that after URL-decoding a parameter value that value is treated as a\n> string in some 1-byte charset, but not as a string encoded with a charset\n> specified by http's request character encoding.\n\nSo where in the RFCs or EE specs can you find justification for the behavior you wish to see versus the behavior Tomcat exhibits?\n\nTo quote from section 14.17 of RFC 2616:\n\n\"The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient\"\n\nNote the reference to the entity-body; it says nothing about the parameters on the URI - which are interpreted as ISO-8859-1, since there is no standard to allow URIs in other character sets.  You can specify the <Connector> attributes URIEncoding or useBodyEncodingForURI in the Tomcat config if you want to change the default behavior.", "count": 1, "id": 140629, "time": "2010-10-09T22:38:38Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2010-10-09T22:38:38Z", "is_private": false}, {"count": 2, "tags": [], "creator": "aanisimov@inbox.ru", "is_private": false, "id": 140630, "creation_time": "2010-10-10T03:03:46Z", "time": "2010-10-10T03:03:46Z", "bug_id": 50065, "text": "(In reply to comment #1)\n> So where in the RFCs or EE specs can you find justification for the behavior\n> you wish to see versus the behavior Tomcat exhibits?\n> \n> To quote from section 14.17 of RFC 2616:\n> \n> \"The Content-Type entity-header field indicates the media type of the\n> entity-body sent to the recipient\"\n> \n> Note the reference to the entity-body; it says nothing about the parameters on\n> the URI - which are interpreted as ISO-8859-1, since there is no standard to\n> allow URIs in other character sets.\n\n  Javadoc for java.net.URLEncoder makes reference to http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars and says that its preferable to utf-8 instead of iso-8859-1. I believe that utf-8 is a more reasonable default choice than iso-8859-1 is.\n\n  Secondly, javadoc for HttpServletRequest::setRequestEncoding() seems ambiguous to me. It indeed mentions only the request body, but it also says \"prior to reading request parameters or reading input\". This \"prior to reading request parameters\" can, of course, be an implementation detail, but to me it seems reasonable to think that parameter decoding is influenced by choice of the request encoding.", "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 140631, "creation_time": "2010-10-10T05:50:55Z", "time": "2010-10-10T05:50:55Z", "bug_id": 50065, "text": "(In reply to comment #2)\n>   Javadoc for java.net.URLEncoder makes reference to\n> http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars and says that\n> its preferable to utf-8 instead of iso-8859-1. I believe that utf-8 is a more\n> reasonable default choice than iso-8859-1 is.\n\nThat is a suggestion, not a mandatory requirement. Tomcat provides an option for you to change the default to UTF-8 if you wish.\n\n>   Secondly, javadoc for HttpServletRequest::setRequestEncoding() seems\n> ambiguous to me. It indeed mentions only the request body, but it also says\n> \"prior to reading request parameters or reading input\". This \"prior to reading\n> request parameters\" can, of course, be an implementation detail, but to me it\n> seems reasonable to think that parameter decoding is influenced by choice of\n> the request encoding.\n\nRequest parameters can appear in the request body.\n\nAll the options necessary to implement the behaviour you are looking for are already available. There is certainly no bug (as in a breach of the spec requirements) here.\n\nThere is an argument for changing the default encoding but that would be an enhancement request which, if memory serves correctly, already exists. Feel free to add comments there.", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 116688, "time": "2008-05-15T15:01:17Z", "creator": "chris@christopherschultz.net", "creation_time": "2008-05-15T15:01:17Z", "text": "HttpServletRequest and HttpServletResponse have wrapper classes defined in the servlet API for the purposes of wrapping the request and response objects when using filters.\n\nAs Valves are analogous to filters, it seems natural that org.apache.catalina.connector.Request and org.apache.catalina.connector.Response should have similar wrapper classes available."}, {"count": 1, "tags": [], "bug_id": 45014, "attachment_id": 21974, "is_private": false, "id": 116689, "time": "2008-05-15T15:02:59Z", "creator": "chris@christopherschultz.net", "creation_time": "2008-05-15T15:02:59Z", "text": "Created attachment 21974\nRequest and response wrapper class implementations\n\nAttached RequestWrapper and ResponseWrapper class implementations."}, {"count": 2, "text": "I 100% agree that this should be added.\n\nI'm running into the use case where I need to read a request's input stream, and per the javadoc for Valve, I must wrap the request before passing it on.\n\nIt would be really convenient to either provide a wrapper in the API, or re-design the API to the standard servlet interfaces and have invoke() accept a reference to HttpServletRequest instead of the concrete class Request.", "bug_id": 45014, "is_private": false, "id": 180807, "time": "2015-02-05T19:13:49Z", "creator": "mr.oliver.hernandez@gmail.com", "creation_time": "2015-02-05T19:13:49Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "creator": "chris@christopherschultz.net", "text": "Wow, a blast from the past. I had entirely forgotten about this.\n\nI'll re-work the patch for trunk and see how far everything is interested in back-porting. mr.oliver, what version of Tomcat are you using?", "id": 180812, "time": "2015-02-05T19:55:31Z", "bug_id": 45014, "creation_time": "2015-02-05T19:55:31Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 180813, "time": "2015-02-05T20:10:09Z", "creator": "remm@apache.org", "creation_time": "2015-02-05T20:10:09Z", "text": "That is clearly not the point. Up until the filter chain, the core classes should be used."}, {"count": 5, "tags": [], "bug_id": 45014, "attachment_id": null, "text": "We're actually using JBoss 7.4, which my understanding is that internally it's using a branched version of Tomcat 7.\n\nRemy, can you please clarify?  What exactly is not the point?  Are you referring to the org.apache.catalina.* core classes?  If so, what class(es) will provide a convenient way to wrap a org.apache.catalina.connector.Request instance that can then be passed on to getNext().invoke()?\n\nIf it helps, we need a valve to troubleshoot why we're getting IOExceptions on incoming requests.  We're using proprietary, 3rd party routers in our environment, and we're pretty sure they're somehow mangling packets.  So we need to confirm this by outputting the full request, header and body, to then pass on to the provider of the routers for them to correct.", "id": 180823, "time": "2015-02-06T13:08:34Z", "creator": "mr.oliver.hernandez@gmail.com", "creation_time": "2015-02-06T13:08:34Z", "is_private": false}, {"count": 6, "tags": [], "creator": "mr.oliver.hernandez@gmail.com", "is_private": false, "text": "Oh, forgot to mention, our servers are SSL enabled, and the issue only occurs when the requests are encrypted.  So, tools like tcpdump/tcpmon won't help, we need to see the entire request after it's decrypted.", "id": 180824, "time": "2015-02-06T13:10:20Z", "bug_id": 45014, "creation_time": "2015-02-06T13:10:20Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 45014, "attachment_id": null, "text": "(In reply to mr.oliver.hernandez from comment #5)\n> We're actually using JBoss 7.4, which my understanding is that internally\n> it's using a branched version of Tomcat 7.\n\nYou will have to wait probably a long time to get a patch from Red Hat. I'm happy to just give you the files even if they don't make it into Tomcat.\n\n> If it helps, we need a valve to troubleshoot why we're getting IOExceptions\n> on incoming requests.  We're using proprietary, 3rd party routers in our\n> environment, and we're pretty sure they're somehow mangling packets.  So we\n> need to confirm this by outputting the full request, header and body, to\n> then pass on to the provider of the routers for them to correct.\n\nYou could start with this: http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#Request_Dumper_Filter", "id": 180872, "time": "2015-02-09T15:21:35Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-09T15:21:35Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 180873, "time": "2015-02-09T15:42:16Z", "creator": "remm@apache.org", "creation_time": "2015-02-09T15:42:16Z", "text": "Wrapping is not possible until the filter chain is reached, it's really quite simple. If you want to change that, it is a big design change that you could advocate for the servlet container, but I would be against it."}, {"count": 9, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 180874, "time": "2015-02-09T15:49:27Z", "creator": "mr.oliver.hernandez@gmail.com", "creation_time": "2015-02-09T15:49:27Z", "text": "Thanks Christopher.  Your classes were a very good starting point for our use case.  I have a custom valve implemented now that logs the request body like we need.  I'll share it soon after I'm done tweaking it a bit, and of course modifying it in a form suitable for sharing outside my closed source project.\n\nYes Remy, it took quite an effort to wrap the request in my valve, and after looking at the internals of the API, I see your point about supporting this being a big design change.  I guess in hindsight I could have implemented a filter, but when I started this I liked the idea of a valve that intercepts the request outside of the application."}, {"count": 10, "tags": [], "creator": "remm@apache.org", "text": "Good thing it it works for you, but I'll have to veto its actual inclusion in Tomcat: it would mean wrapping is possible and supported before the filter chain, and it is not the case at the moment so user shouldn't be mislead.\n\nIndeed, as you mention, wrapping in filters is supported and seems sufficient.", "id": 180875, "time": "2015-02-09T15:57:38Z", "bug_id": 45014, "creation_time": "2015-02-09T15:57:38Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "chris@christopherschultz.net", "text": "Remy, please help me understand why one cannot wrap a Coyote request/response?\n\nI don't see a reason why a Valve in the chain would not wrap the request or response in a way similar to a Filter in the (later) chain.\n\nWhy would you be -1 for adding RequestWrapper/ResponseWrapper classes to Tomcat? It seems quite natural to do so and I can't see anything in the documentation that suggests it would break anything.", "id": 180876, "time": "2015-02-09T16:57:26Z", "bug_id": 45014, "creation_time": "2015-02-09T16:57:26Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 180877, "time": "2015-02-09T17:12:23Z", "creator": "remm@apache.org", "creation_time": "2015-02-09T17:12:23Z", "text": "Please read again my previous comment for the veto justification.\n\nI don't believe the classes can be wrapped without issues, usually wrapping occurs to deal with the streams and that will likely not work well.\n\nIndeed, the documentation doesn't say that wrapping is forbidden, but the opposite is also true and is an obvious case where it would be mentioned if it was allowed. I volunteer to add a note in the documentation to clarify."}, {"count": 13, "tags": [], "bug_id": 45014, "attachment_id": 32444, "text": "Created attachment 32444\nUpdated patch for Tomcat trunk/9.0.", "id": 180878, "time": "2015-02-09T17:35:39Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-09T17:35:39Z", "is_private": false}, {"count": 14, "text": "Remy, whether these classes are included or not, Valve authors can write their own wrapper classes and wrap the Coyote request and response objects in them. The only thing that is happening here is that Tomcat is providing the wrapper classes instead of the Valve author having to write them manually.\n\nPlease note that these classes do nothing -- just like HttpServletWrapper. They are expected to be a base class for extension so that the Valve author can override whatever capabilities are appropriate for their use case. This could be something simple like suppressing the transmission of a header value, hooking-into the setStatus method, etc.\n\n(I honestly don't understand your objections, having read them several times. The main objection seems to be \"they haven't been available before... why bother making them available now?\" i.e. placing the burden of proof on someone else to settle the dispute. Your offer to change the documentation to support your position is a bit underhanded.)", "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 180879, "time": "2015-02-09T17:43:23Z", "bug_id": 45014, "creation_time": "2015-02-09T17:43:23Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "text": "(In reply to Christopher Schultz from comment #14)\n> Please note that these classes do nothing -- just like HttpServletWrapper.\n\nThat should have read \"HttpServletRequestWrapper/HttpServletResponseWrapper\".", "id": 180880, "time": "2015-02-09T18:08:22Z", "bug_id": 45014, "creation_time": "2015-02-09T18:08:22Z", "attachment_id": null}, {"count": 16, "tags": [], "creator": "mr.oliver.hernandez@gmail.com", "text": "Created attachment 32446\nMaven project for a valve that dumps the full request with the body\n\nNOTE: For our use case, we needed a valve in JBoss, so this was coded against the forked version of Tomcat within JBoss.  It should be simple to refactor for use with the main trunk of Tomcat.", "id": 180893, "time": "2015-02-10T12:46:33Z", "bug_id": 45014, "creation_time": "2015-02-10T12:46:33Z", "is_private": false, "attachment_id": 32446}, {"count": 17, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 180894, "time": "2015-02-10T13:03:51Z", "creator": "mr.oliver.hernandez@gmail.com", "creation_time": "2015-02-10T13:03:51Z", "text": "I tend to agree more with Christopher, mainly because of this section of the javadoc for the Valve interface that is misleading:\n\n\"Consume bytes from the input stream associated with the Request, unless it is completely generating the response, **OR WRAPPING THE REQUEST** before passing it on.\"\n\nWhen I read that, I had high hopes of implementing a custom valve easily.  Then it was surprising that I could only find one example, Christopher's, of how to wrap the request when a valve needs to consume data from the input stream, and that Tomcat did not provide any wrapper class.  So I refactored an example servlet filter from http://architects.dzone.com/articles/debugging-soap-logging, and got it to work as a valve.  The tricky part was figuring out that the HttpServletRequest is \"doubly\" wrapped inside the org.apache.catalina.connector.Request class.\n\nIf the convenience of a built-in wrapper class will not be added, hopefully the attached project will suffice for any others needing to do the same thing we did."}, {"count": 18, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 180895, "time": "2015-02-10T13:31:53Z", "creator": "remm@apache.org", "creation_time": "2015-02-10T13:31:53Z", "text": "Adding your dummy classes means wrapping is supported and, probably, that there is more API stability that what is actually the case. I continue to believe that this is not a good idea. If people, like you, want to hack, feel free, but it would be better to be able to disregard side effects and problems that could be introduced. Especially if it is only hacking to be able to do useless debugging.\n\nUnless my veto is found invalid, I think this should be resolved as wontfix."}, {"count": 19, "tags": [], "bug_id": 45014, "attachment_id": null, "is_private": false, "id": 180896, "time": "2015-02-10T13:40:28Z", "creator": "mr.oliver.hernandez@gmail.com", "creation_time": "2015-02-10T13:40:28Z", "text": "Remy, please re-read my previous comments (https://issues.apache.org/bugzilla/show_bug.cgi?id=45014#c5 & https://issues.apache.org/bugzilla/show_bug.cgi?id=45014#c6).\n\nThis need is far from useless.  We're seeing these errors,\n\nCaused by: java.io.IOException: Strange I/O stream, returned 0 bytes on read\n        at com.ctc.wstx.io.BaseReader.reportStrangeStream(BaseReader.java:216)\n        at com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:375)\n        at com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)\n        at com.ctc.wstx.io.ReaderBootstrapper.initialLoad(ReaderBootstrapper.java:250)\n        at com.ctc.wstx.io.ReaderBootstrapper.bootstrapInput(ReaderBootstrapper.java:133)\n        at com.ctc.wstx.stax.WstxInputFactory.doCreateSR(WstxInputFactory.java:546)\n        ... 36 more\n\nand the valve I put together has been a tremendous help in troubleshooting it.\n\nInstead of this issue being categorized as a bug, maybe this should be considered a feature request."}, {"count": 20, "attachment_id": null, "creator": "remm@apache.org", "text": "Yes, I did note that \"I guess in hindsight I could have implemented a filter\". This is a feature for hackers, my vote is to let people deal with it to avoid having any additional support burden.", "id": 180899, "time": "2015-02-10T14:02:49Z", "bug_id": 45014, "creation_time": "2015-02-10T14:02:49Z", "tags": [], "is_private": false}, {"count": 21, "tags": [], "creator": "chris@christopherschultz.net", "text": "(In reply to Remy Maucherat from comment #20)\n> Yes, I did note that \"I guess in hindsight I could have implemented a\n> filter\". This is a feature for hackers, my vote is to let people deal with\n> it to avoid having any additional support burden.\n\nI'm happy to simply leave the classes as attachments to this enhancement request and not commit anything. I don't personally have a use for them at this moment. A few years ago it occurred to me that they would be something useful for Valve authors. Since Valve is an internal API, Valve authors should already be comfortable with an unstable API.\n\nWe'll see if this gets any votes. It's remained untouched for 6 years until this week. It's clear there is not much demand that the examples here will not fill.", "id": 180912, "time": "2015-02-10T19:00:44Z", "bug_id": 45014, "creation_time": "2015-02-10T19:00:44Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "text": "(In reply to Remy Maucherat from comment #18)\n> Adding your dummy classes means wrapping is supported and, probably, that\n> there is more API stability that what is actually the case.\n\nThis is the first time you've mentioned API stability which, honestly, is a real concern.\n\nHere are the stats for changes to o.a.coyote.Request:\n\n- Tomcat 9, root to tip: no changes\n- Tomcat 8, root (r1636341) to tip: no changes\n- Tomcat 7, root (r1155369) to tip: 5 commits: r1446110, r1446138, r1446138, *r1500006*, r1561675, r1518197. The single *starred* commit changed the API.\n\nThis API is pretty stable, even if it is not officially so.", "id": 180913, "time": "2015-02-10T19:01:10Z", "bug_id": 45014, "creation_time": "2015-02-10T19:01:10Z", "attachment_id": null}, {"count": 23, "tags": [], "creator": "chris@christopherschultz.net", "text": "(In reply to Christopher Schultz from comment #22)\n> - Tomcat 7, root (r1155369) to tip: 5 commits: r1446110, r1446138, r1446138,\n> *r1500006*, r1561675, r1518197. The single *starred* commit changed the API.\n\nThis incorrectly identifies the commit which included the API change. The correct commit is r1518197 for the API change.", "id": 180914, "time": "2015-02-10T19:03:11Z", "bug_id": 45014, "creation_time": "2015-02-10T19:03:11Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 45014, "attachment_id": 32456, "is_private": false, "id": 180969, "time": "2015-02-11T19:31:54Z", "creator": "mr.oliver.hernandez@gmail.com", "creation_time": "2015-02-11T19:31:54Z", "text": "Created attachment 32456\nMaven project for a valve that dumps the full request with the body\n\nNOTE: For our use case, we needed a valve in JBoss, so this was coded against the forked version of Tomcat within JBoss.  It should be simple to refactor for use with the main trunk of Tomcat.\n\n02/11/15 - fixed bug that was displaying post body incorrectly."}, {"count": 25, "tags": [], "bug_id": 45014, "attachment_id": null, "text": "As per Remy's, closing as WONTFIX.\n\nNote: There have been several changes to the Request API in 9.0.x in the 2+ years since comment #23.", "id": 198164, "time": "2017-04-04T19:48:22Z", "creator": "markt@apache.org", "creation_time": "2017-04-04T19:48:22Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 31105, "attachment_id": null, "id": 63171, "time": "2004-09-07T18:49:22Z", "creator": "snmvaughan92@yahoo.com", "creation_time": "2004-09-07T18:49:22Z", "is_private": false, "text": "The field \"locks\" holds a HashSet instance for each active thread, containing \nthe transient locks (GenericLock instances).  When a transaction is suspended, \nthe set is moved from \"locks\" to \"suspendedLocks\", under a key based upon the \nXid for the transaction branch.\n\nWhen a transaction calls end(Xid,int) with SUCCESS or FAILURE, if the \ntransaction is currently suspended, then the field \"activeTransactionBranch\" \nis cleared, leaving the locks within \"suspendedLocks\".\n\nAlthough commit(Xid,boolean), rollback(Xid), and forget(Xid) all call \nreleaseTransientLocks(), the release method depends upon \nthe \"activeTransactionBranch\" field.  Since the activeTransactionBranch is \nnull, the locks are not actually released."}, {"count": 1, "tags": [], "bug_id": 31105, "attachment_id": 12666, "id": 63172, "time": "2004-09-07T19:10:23Z", "creator": "snmvaughan92@yahoo.com", "creation_time": "2004-09-07T19:10:23Z", "is_private": false, "text": "Created attachment 12666\nDiff for ExtendedStore.java"}, {"count": 2, "tags": [], "text": "I've attached a patch which ensures that the locks are released, but I don't \nthink that the patch is quite correct.  It seems to me that the locks should \nbe held until the transaction is completed (commit(), rollback(), or forget\n()).  The existing code just nulled out the set within end().  In addition, \nthe existing code doesn't seem to handling JOIN correctly.  I've left in the \ncomments I wrote as I was trying to debug this, to try to explain my thinking, \nbut someone should definitely take a look at the lock related code.", "is_private": false, "id": 63173, "creator": "snmvaughan92@yahoo.com", "time": "2004-09-07T19:15:11Z", "bug_id": 31105, "creation_time": "2004-09-07T19:15:11Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Could you describe the scenario in which the error occurs? I could not reproduce\nit, everything seems to run fine...\n\nAs a sidenote, the transient locks may be of some use, but not of as much use as\nI hoped. They might be more useful in future versions where other stuff changes\nas well. It might be an option to inactivate them in order to lower complexity.\nWhat do you think?", "is_private": false, "bug_id": 31105, "id": 63181, "time": "2004-09-07T21:20:44Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-09-07T21:20:44Z", "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 31105, "is_private": false, "id": 73229, "time": "2005-04-04T09:56:52Z", "creator": "j.stuyts@hippo.nl", "creation_time": "2005-04-04T09:56:52Z", "tags": [], "text": "This bug is also a memory leak, that's why I changed the severity to critical.\n\nTo prevent the memory leak from occuring I changed ExtendedStore in almost the \nsame way as Steve did. The difference is that I don't release the transient \nlocks in end(...), but only do this in forget(...), rollback(...) and commit(...\n). Looking at the logs I saw that after a suspend one of forget(...), rollback(.\n..) and commit(...) will be called. I don't know if this happens when an end or \na fail is passed to end(...). If it does the releasing of the locks in end(...) \nis not necessary.\n\nI am interested to know what the answer to the question in Steve's patch, 'Do we \nwant to throw away the locks when joining?', is."}]
[{"count": 0, "tags": [], "creator": "miroslaw.rusin@mensa.org.pl", "is_private": false, "id": 41162, "attachment_id": null, "bug_id": 21796, "creation_time": "2003-07-22T13:32:34Z", "time": "2003-07-22T13:32:34Z", "text": "...i was playing with FallbackErrorHandler and came up\nagainst problem with SocketAppender:\n\ni set up logger\n with primary appender (SocketAppender)\n  with errorHandler (FallbackErrorHandler)\n   with backup appender\n\nSocketAppender has ReconnectionDelay = 0 (no reconnecting)\n\nproblem occurs when SocketAppender meets connection-error:\n\n1. when connection establishment fails\n2. when connection is interrupted\n\n...and ReconnectionDelay equals 0, SocketAppender is down forever.\nin both cases errorHandler's error method invokation is missing\n(in SocketAppender.java) when reconnectionDelay is 0.\n\nhere's org/apache/log4j/net/SocketAppender.java fix-diff\n\n####### diff #######\n56a57\n> import org.apache.log4j.spi.ErrorCode;\n259a261,264\n>       else {\n>         msg += \" We are not retrying.\";\n>         errorHandler.error(msg, e, ErrorCode.GENERIC_FAILURE);\n>       }\n311a317,320\n>         else {\n>           errorHandler.error(\"Detected problem with connection, not \nreconnecting.\", e,\n>           ErrorCode.GENERIC_FAILURE);\n>         } \n####### diff #######\n\n\n\ntest case:\n\nnote1: exception is ok, it just says that connection failed, that's\nwhat we want. error handler should fallback and replace primary\nappender with backup appender\n\nnote2: it's just test for '1. when connection establishment fails' case\n\n\n####### SocketAppenderTest.java #######\n\nimport java.net.*;\nimport java.io.*;\n\nimport junit.framework.*;\n\nimport org.apache.log4j.*;\nimport org.apache.log4j.net.*;\nimport org.apache.log4j.spi.*;\nimport org.apache.log4j.xml.*;\nimport org.apache.log4j.helpers.*;\n\n\npublic class SocketAppenderTest extends TestCase\n{\n        \n        public static void main(String args[])\n        {\n                junit.textui.TestRunner.run(SocketAppenderTest.class);\n        }\n        \n\n        /* JUnit's setUp and tearDown */\n        \n        protected void setUp()\n        {\n                DOMConfigurator.configure(\"SocketAppenderTestLog4j.xml\");\n\n                logger = Logger.getLogger(SocketAppenderTest.class);\n                primary = logger.getAppender(\"remote\");\n                secondary = (LastOnlyAppender)Logger.getLogger\n(\"SocketAppenderTestDummy\").getAppender(\"lastOnly\");\n        }\n\n        protected void tearDown()\n        {\n                // null-save interrupt\n                if (serverThread != null && !serverThread.interrupted())\n                        serverThread.interrupt();\n        }\n\n        \n        /* Tests */\n        \n        public void testFallbackErrorHandlerWhenStarting()\n        {\n                String msg = \"testFallbackErrorHandlerWhenStarting\";\n                logger.debug(msg);\n\n                // above debug log will fail and shoul be redirected to \nsecondary appender\n                assertEquals(\"SocketAppender with FallbackErrorHandler\", msg, \nsecondary.getLastMessage());\n        }\n        \n        \n        /* Helper methods */\n        /* INFO: it's unused\n        private void startServerThread()\n        {\n                // null-save interrupt\n                if (serverThread != null && !serverThread.interrupted())\n                        serverThread.interrupt();\n                \n                serverThread = new Thread()\n                        {\n                                public void run()\n                                {\n                                        try\n                                        {\n                                                int port = \n8189; //primary.getPort();\n                                                ServerSocket serverSocket = new \nServerSocket(port);\n                                                Socket socket = \nserverSocket.accept();\n                                                Hierarchy h = new\nHierarchy(Logger.getLogger(\"SocketAppenderTestServerThread\"));\n                                                new SocketNode(socket,h).run();\n                                        }\n                                        catch (IOException e)\n                                        {\n                                                System.err.println(\"server \nthread io exception\");\n                                        }\n                                }\n                        };\n                serverThread.start();\n        }*/\n        \n\n        /* Fields */\n        \n        private static Logger logger;\n        private static Appender primary;\n        private static LastOnlyAppender secondary;\n        private static Thread serverThread;\n        /* Inner classes */\n        \n        /** Inner-class\n         *  For debugging purposes only\n         *  Saves last LoggerEvent\n         */\n        static public class LastOnlyAppender extends AppenderSkeleton\n        {\n                protected void append(LoggingEvent event)\n                {\n                        this.lastEvent = event;\n                }\n\n                public boolean requiresLayout()\n                {\n                        return false;\n                }\n\n                public void close()\n                {\n                        this.closed = true;\n                }\n                \n                /** @return last appended LoggingEvent's message\n                 */\n                public String getLastMessage()\n                {\n                        if (this.lastEvent != null)\n                                return this.lastEvent.getMessage().toString();\n                        else\n                                return \"\";\n                }\n\n                private LoggingEvent lastEvent;\n        };\n        \n}\n####### /SocketAppenderTest.java #######\n\n\n####### SocketAppenderTestLog4j.xml #######\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n\n<log4j:configuration debug=\"true\" \nxmlns:log4j='http://jakarta.apache.org/log4j/'>\n\n\n        <!-- primary appender -->\n        <appender name=\"remote\" class=\"org.apache.log4j.net.SocketAppender\">\n\n                <!-- fallback on error -->\n                <errorHandler \nclass=\"org.apache.log4j.varia.FallbackErrorHandler\">\n                        <logger-ref ref=\"SocketAppenderTest\"/>\n                        <appender-ref ref=\"lastOnly\"/>\n                </errorHandler>\n                \n                <param name=\"RemoteHost\" value=\"localhost\"/>\n                <param name=\"Port\" value=\"8189\"/>\n                <param name=\"ReconnectionDelay\" value=\"0\"/>\n        </appender>\n\n        \n        <!-- secondary appender -->\n        <appender name=\"lastOnly\" \nclass=\"SocketAppenderTest$LastOnlyAppender\"></appender>\n\n        \n        <!-- logger -->\n        <logger name=\"SocketAppenderTest\">\n                <appender-ref ref=\"remote\"/>\n        </logger>\n\n        \n        <!-- logger\n             dummy, so i can have early access to lastOnly appender instance\n        -->\n        <logger name=\"SocketAppenderTestDummy\">\n                <appender-ref ref=\"lastOnly\"/>\n        </logger>\n\n        \n</log4j:configuration>\n\n####### /SocketAppenderTestLog4j.xml #######"}, {"count": 1, "tags": [], "bug_id": 21796, "attachment_id": null, "text": "Can you please attached your patch (in diff -u format) to this Bugzilla issue, \ninstead of embedding it here?  Thank you.", "id": 68399, "time": "2004-12-13T17:57:48Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-13T17:57:48Z", "is_private": false}, {"count": 2, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "id": 68574, "time": "2004-12-15T16:33:23Z", "bug_id": 21796, "creation_time": "2004-12-15T16:33:23Z", "is_private": false, "text": "*** Bug 25475 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "bug_id": 21796, "text": "Created attachment 20034\nCleaned up patch file of the pasted text in this issue\n\nI took the text of the patch pasted into this issue, cleaned it up, and applied\nit to a local logj 1.2 working copy.  the test does fail, and after working out\nwhere the actual code change patch was supposed to go, it does pass.\n\nShould I apply this patch to the 1.2 branch?", "id": 102275, "time": "2007-04-24T22:46:31Z", "creator": "psmith@apache.org", "creation_time": "2007-04-24T22:46:31Z", "is_private": false, "attachment_id": 20034}, {"count": 4, "tags": [], "creator": "carnold@apache.org", "is_private": false, "id": 102521, "attachment_id": null, "bug_id": 21796, "creation_time": "2007-04-26T12:47:32Z", "time": "2007-04-26T12:47:32Z", "text": "Committed in rev 532842."}]
[{"attachment_id": null, "tags": [], "bug_id": 41034, "text": "It seems that a classloader leak is caused by the re-use of a request object\nwhen connecting to tomcat. Just after a connection attempt to my servlet and a\nundeploy/redeploy procedure, my classloader won't go because of the reference\ndisplayed below (collected with hat):\n\n--> org.apache.catalina.connector.Request@0x500993fa (field filterChain:)\n --> org.apache.catalina.core.ApplicationFilterChain@0x500998b0 (field filters:)\n  --> org.apache.catalina.core.ApplicationFilterConfig[]@0x500998c8\n   --> org.apache.catalina.core.ApplicationFilterConfig@0x50090aaa (field context:)\n    --> org.apache.catalina.core.StandardContext@0x5008104d (field loader:)\n     --> org.jboss.web.tomcat.tc5.WebAppLoader@0x5007df2f (field parentClassLoader:)\n      --> java.net.FactoryURLClassLoader@0x5007cd0f (field parent:)\n       --> org.jboss.mx.loading.UnifiedClassLoader3@0x5003f4d0\n\n\nThen I modified the recycle method of org.apache.catalina.connector.Request\nwhile adding filterChain=null (which was missing) and my classloader was\ncorrectly garbaged. I guess the filterChain variable must be nullified.", "count": 0, "id": 96144, "time": "2006-11-24T01:50:21Z", "creator": "arnaud.brochard@kuehne-nagel.com", "creation_time": "2006-11-24T01:50:21Z", "is_private": false}, {"count": 1, "tags": [], "creator": "remm@apache.org", "text": "Cool workaround (-1 for it). The field will go away sooner or later, so it does\nnot really matter.", "id": 96147, "time": "2006-11-24T03:33:30Z", "bug_id": 41034, "creation_time": "2006-11-24T03:33:30Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 41034, "attachment_id": null, "is_private": false, "id": 96316, "time": "2006-11-28T18:20:25Z", "creator": "remm@apache.org", "creation_time": "2006-11-28T18:20:25Z", "text": "BTW, if you would like to clear those references on every request (to ensure\neverything gets garbage collected as quickly as possible), you should be able to\nclear the mapped filters like this:\n\nIndex: ApplicationFilterChain.java\n===================================================================\n--- ApplicationFilterChain.java\t(revision 480297)\n+++ ApplicationFilterChain.java\t(working copy)\n@@ -529,6 +529,9 @@\n      */\n     void release() {\n \n+        for (int i = 0; i < n; i++) {\n+            filters[i] = null;\n+        }\n         n = 0;\n         pos = 0;\n         servlet = null;\n"}, {"count": 3, "tags": [], "creator": "arnaud.brochard@kuehne-nagel.com", "text": "Thanks for the tip.\nThe thing is I don't see the field nor the request object garbaged, like you\nsaid earlier (even after days), but I can't reproduce this behavior with a\nsimple example. I guess something else is interfering in the application. \n\n", "id": 96330, "time": "2006-11-29T01:37:23Z", "bug_id": 41034, "creation_time": "2006-11-29T01:37:23Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 41034, "attachment_id": null, "is_private": false, "id": 96339, "time": "2006-11-29T04:01:59Z", "creator": "remm@apache.org", "creation_time": "2006-11-29T04:01:59Z", "text": "The filters array holds mapped filters. The request objects are reused, so if on\na subsequent request you map as many filters as you did on the previous\ninvocation, the references in the filters array will be overwritten (the diff I\nsent does the same)."}, {"count": 5, "tags": [], "creator": "bstansberry@jboss.com", "is_private": false, "text": "*** Bug 41324 has been marked as a duplicate of this bug. ***", "id": 97966, "time": "2007-01-11T12:46:42Z", "bug_id": 41034, "creation_time": "2007-01-11T12:46:42Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "bstansberry@jboss.com", "text": "(In reply to comment #4)\n\nIf on any subsequent request you don't map as many filters (i.e. the undeployed\napp  used a lot of filters), the leak is permanent. An edge case, and not a huge\nproblem since if you redeploy the app most likely the new filters will replace\nthe old.\n\nThe biggest hassle about it is it makes it a pain to test for classloader leaks.\n But it's fixed in 6.x, so no big deal.\n\n", "id": 97967, "time": "2007-01-11T12:56:23Z", "bug_id": 41034, "creation_time": "2007-01-11T12:56:23Z", "is_private": false, "attachment_id": null}]
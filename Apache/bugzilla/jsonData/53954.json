[{"text": "I'm using evaluator.evaluateFormulaCell(c) to reevaluate an xlsx workbook. \n\nUpon evaluating a cell with cross-sheet, fixed index reference, the evaluation breaks in getDynamicReference although all functions used should be supported by POI:\n\n=SUM(INDIRECT(\"'Test H0'!$H:$H\"))\n\nThis is the stack trace:\n\nException in thread \"main\" java.lang.NumberFormatException: For input string: \"$H\"\n\tat java.lang.NumberFormatException.forInputString(Unknown Source)\n\tat java.lang.Integer.parseInt(Unknown Source)\n\tat java.lang.Integer.parseInt(Unknown Source)\n\tat org.apache.poi.ss.formula.OperationEvaluationContext.parseColRef(OperationEvaluationContext.java:229)\n\tat org.apache.poi.ss.formula.OperationEvaluationContext.getDynamicReference(OperationEvaluationContext.java:200)\n\tat org.apache.poi.ss.formula.functions.Indirect.evaluateIndirect(Indirect.java:124)\n\tat org.apache.poi.ss.formula.functions.Indirect.evaluate(Indirect.java:76)\n\tat org.apache.poi.ss.formula.OperationEvaluatorFactory.evaluate(OperationEvaluatorFactory.java:127)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:491)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateReference(WorkbookEvaluator.java:653)\n\tat org.apache.poi.ss.formula.SheetRefEvaluator.getEvalForCell(SheetRefEvaluator.java:51)\n\tat org.apache.poi.ss.formula.LazyRefEval.getInnerValueEval(LazyRefEval.java:44)\n\tat org.apache.poi.ss.formula.eval.OperandResolver.getSingleValue(OperandResolver.java:62)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.singleOperandEvaluate(TwoOperandNumericOperation.java:29)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.evaluate(TwoOperandNumericOperation.java:35)\n\tat org.apache.poi.ss.formula.functions.Fixed2ArgFunction.evaluate(Fixed2ArgFunction.java:33)\n\tat org.apache.poi.ss.formula.OperationEvaluatorFactory.evaluate(OperationEvaluatorFactory.java:119)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:491)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateReference(WorkbookEvaluator.java:653)\n\tat org.apache.poi.ss.formula.SheetRefEvaluator.getEvalForCell(SheetRefEvaluator.java:51)\n\tat org.apache.poi.ss.formula.LazyRefEval.getInnerValueEval(LazyRefEval.java:44)\n\tat org.apache.poi.ss.formula.eval.OperandResolver.getSingleValue(OperandResolver.java:62)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.singleOperandEvaluate(TwoOperandNumericOperation.java:29)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.evaluate(TwoOperandNumericOperation.java:36)\n\tat org.apache.poi.ss.formula.functions.Fixed2ArgFunction.evaluate(Fixed2ArgFunction.java:33)\n\tat org.apache.poi.ss.formula.OperationEvaluatorFactory.evaluate(OperationEvaluatorFactory.java:119)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:491)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateReference(WorkbookEvaluator.java:653)\n\tat org.apache.poi.ss.formula.SheetRefEvaluator.getEvalForCell(SheetRefEvaluator.java:51)\n\tat org.apache.poi.ss.formula.LazyRefEval.getInnerValueEval(LazyRefEval.java:44)\n\tat org.apache.poi.ss.formula.eval.OperandResolver.getSingleValue(OperandResolver.java:62)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.singleOperandEvaluate(TwoOperandNumericOperation.java:29)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.evaluate(TwoOperandNumericOperation.java:35)\n\tat org.apache.poi.ss.formula.functions.Fixed2ArgFunction.evaluate(Fixed2ArgFunction.java:33)\n\tat org.apache.poi.ss.formula.OperationEvaluatorFactory.evaluate(OperationEvaluatorFactory.java:119)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:491)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateReference(WorkbookEvaluator.java:653)\n\tat org.apache.poi.ss.formula.SheetRefEvaluator.getEvalForCell(SheetRefEvaluator.java:51)\n\tat org.apache.poi.ss.formula.LazyRefEval.getInnerValueEval(LazyRefEval.java:44)\n\tat org.apache.poi.ss.formula.eval.OperandResolver.getSingleValue(OperandResolver.java:62)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.dereferenceResult(WorkbookEvaluator.java:543)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:506)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateReference(WorkbookEvaluator.java:653)\n\tat org.apache.poi.ss.formula.SheetRefEvaluator.getEvalForCell(SheetRefEvaluator.java:51)\n\tat org.apache.poi.ss.formula.LazyRefEval.getInnerValueEval(LazyRefEval.java:44)\n\tat org.apache.poi.ss.formula.eval.OperandResolver.getSingleValue(OperandResolver.java:62)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.singleOperandEvaluate(TwoOperandNumericOperation.java:29)\n\tat org.apache.poi.ss.formula.eval.TwoOperandNumericOperation.evaluate(TwoOperandNumericOperation.java:35)\n\tat org.apache.poi.ss.formula.functions.Fixed2ArgFunction.evaluate(Fixed2ArgFunction.java:33)\n\tat org.apache.poi.ss.formula.OperationEvaluatorFactory.evaluate(OperationEvaluatorFactory.java:119)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:491)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateReference(WorkbookEvaluator.java:653)\n\tat org.apache.poi.ss.formula.SheetRefEvaluator.getEvalForCell(SheetRefEvaluator.java:51)\n\tat org.apache.poi.ss.formula.LazyAreaEval.getRelativeValue(LazyAreaEval.java:51)\n\tat org.apache.poi.ss.formula.functions.Sumif.accumulate(Sumif.java:95)\n\tat org.apache.poi.ss.formula.functions.Sumif.sumMatchingCells(Sumif.java:83)\n\tat org.apache.poi.ss.formula.functions.Sumif.eval(Sumif.java:72)\n\tat org.apache.poi.ss.formula.functions.Sumif.evaluate(Sumif.java:65)\n\tat org.apache.poi.ss.formula.functions.Var2or3ArgFunction.evaluate(Var2or3ArgFunction.java:36)\n\tat org.apache.poi.ss.formula.OperationEvaluatorFactory.evaluate(OperationEvaluatorFactory.java:132)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:491)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluate(WorkbookEvaluator.java:229)\n\tat org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator.evaluateFormulaCellValue(XSSFFormulaEvaluator.java:264)\n\tat org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator.evaluateFormulaCell(XSSFFormulaEvaluator.java:151)\n\tat POITest.main(POITest.java:40)", "tags": [], "bug_id": 53954, "attachment_id": null, "count": 0, "id": 162507, "time": "2012-10-02T14:58:22Z", "creator": "cpuidle@gmx.de", "creation_time": "2012-10-02T14:58:22Z", "is_private": false}, {"text": "I'm sorry- the stack trace was unnecessarily complicated:\n\nException in thread \"main\" java.lang.NumberFormatException: For input string: \"$H\"\n\tat java.lang.NumberFormatException.forInputString(Unknown Source)\n\tat java.lang.Integer.parseInt(Unknown Source)\n\tat java.lang.Integer.parseInt(Unknown Source)\n\tat org.apache.poi.ss.formula.OperationEvaluationContext.parseColRef(OperationEvaluationContext.java:229)\n\tat org.apache.poi.ss.formula.OperationEvaluationContext.getDynamicReference(OperationEvaluationContext.java:200)\n\tat org.apache.poi.ss.formula.functions.Indirect.evaluateIndirect(Indirect.java:124)\n\tat org.apache.poi.ss.formula.functions.Indirect.evaluate(Indirect.java:76)\n\tat org.apache.poi.ss.formula.OperationEvaluatorFactory.evaluate(OperationEvaluatorFactory.java:127)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateFormula(WorkbookEvaluator.java:491)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluateAny(WorkbookEvaluator.java:287)\n\tat org.apache.poi.ss.formula.WorkbookEvaluator.evaluate(WorkbookEvaluator.java:229)\n\tat org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator.evaluateFormulaCellValue(XSSFFormulaEvaluator.java:264)\n\tat org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator.evaluateFormulaCell(XSSFFormulaEvaluator.java:151)\n\tat POITest.main(POITest.java:40)", "tags": [], "bug_id": 53954, "is_private": false, "count": 1, "id": 162508, "time": "2012-10-02T15:10:58Z", "creator": "cpuidle@gmx.de", "creation_time": "2012-10-02T15:10:58Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 53954, "attachment_id": null, "id": 162513, "creation_time": "2012-10-02T15:58:45Z", "time": "2012-10-02T15:58:45Z", "creator": "cpuidle@gmx.de", "text": "Seems that OperationEvaluationContext.getDynamicReference identifies NameType=COLUMN and then calls OperationEvaluationContext.parseColRef which treats the passed column as integer- which it isn't.\n\nI believe parseColRef needs more logic in this place (or is the wrong function to call- not being a POI expert).", "is_private": false}, {"count": 3, "tags": [], "bug_id": 53954, "is_private": false, "text": "The proposed fix would be to enhance parseColRef like this:\n\n\tprivate static int parseColRef(String refStrPart) {\n\t\ttry {\n\t\t\treturn Integer.parseInt(refStrPart) - 1;\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn CellReference.convertColStringToIndex(refStrPart);\n\t\t}\n\t}", "id": 162514, "time": "2012-10-02T16:05:31Z", "creator": "cpuidle@gmx.de", "creation_time": "2012-10-02T16:05:31Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 53954, "attachment_id": null, "id": 162542, "creation_time": "2012-10-03T13:33:55Z", "time": "2012-10-03T13:33:55Z", "creator": "yegor@dinom.ru", "text": "Any chance you upload a unit test for the proposed fix?", "is_private": false}, {"count": 5, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 191585, "time": "2016-06-12T17:39:21Z", "bug_id": 53954, "creation_time": "2016-06-12T17:39:21Z", "is_private": false, "text": "There was a change done for Bug 54720: Support for Row/Col Area Range like 8:8 or H:H, r1514812, which seems to have fixed this by not calling parseColRef() any more in this case. \n\nTherefore I am closing this as FIXED for now, please report any other issues that you might encounter."}]
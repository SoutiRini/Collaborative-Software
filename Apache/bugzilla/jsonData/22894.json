[{"count": 0, "tags": [], "bug_id": 22894, "attachment_id": null, "text": "If you enter a filepath with single backslashes, the backslashes will be \nignored ( or converted to special characters such as newline or tab, depending \non the character after the backslash ).  So, for example, a filepath of:\n\nC:\\MyDirectory\\MyLog.txt\n\nwill end up as the file:\n\nMyDirectoryMyLog.txt\n\nin the current folder.  I looked at the log4j code and discovered that *all* \nparameter values are processed via the method \norg.apache.log4j.helpers.OptionConverter.convertSpecialChars().  This method \ntreats backslashes as an escape character, to support such things as \\t for tab \nand \\n for newline.  A single backslash without an appropriate following \ncharacter is quietly consumed.\n\nSince tabs, newlines, and other special characters are not valid in filepaths, \nit would be nice if parameter values of type \"File\" were not processed via the \nconvertSpecialChars() method.  Since double backslashes should be supported, \ntoo, for backward compatibility, I would suggest replacing the invocation of \nconvertSpecialChars() with an invocation of a new method that simply replaces \ndouble backslashes with single backslashes, in the case where the param is of \ntype \"File\".  In this way, both double backslashes and single backslashes would \nbe supported in filenames.\n\nThanks,\nTom Caulkins\nSr. Systems Developer\nSAS Institute Inc.\nCary, NC 27513", "id": 43623, "time": "2003-09-02T17:43:31Z", "creator": "tom.caulkins@sas.com", "creation_time": "2003-09-02T17:43:31Z", "is_private": false}, {"count": 1, "tags": [], "text": "Tom,\n\nMany thanks for this precise report. Interestingly enough, the problem you \nmention is fairly well known. See for example http://marc.theaimsgroup.com/?\nt=103228919500003&r=1&w=2\n\nWhile what you suggest makes some sense, another solution is to use forward \nslashes instead of back slash or two backslahes instead of a single one when \nspecifying the file name.\n\nPlease do not hesitate to reopen this report if the above suggestion does not \nwork for you.\n\nI hope this helps,\n", "attachment_id": null, "id": 43631, "creator": "ceki@apache.org", "time": "2003-09-02T19:18:10Z", "bug_id": 22894, "creation_time": "2003-09-02T19:18:10Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 22894, "attachment_id": null, "is_private": false, "id": 43635, "time": "2003-09-02T19:52:41Z", "creator": "tom.caulkins@sas.com", "creation_time": "2003-09-02T19:52:41Z", "text": "I am disappointed that you do not feel fixing this bug is worthwhile.\n\nI will not re-open this bug, but I'll add these additional comments:\n\nYes, I was aware of the ability to use forward slashes or doubling up the \nbackslashes to make this work.  In my case, I am supporting a GUI which accepts \nuser input for a file path which eventually becomes a log4j log file.  So the \nuser of my application becomes confused when they enter a valid Windows \nfilepath and then do not see the results they expected.  In order to work \naround this deficiency in log4j, I now have to search file path strings, \nlooking for single backslashes, and then convert them to double \nbackslashes...so that log4j can convert them back into single backslashes!  All \nthis, when it's not really necessary or useful to be utilizing the \nconvertSpecialChars() method on file path strings.\n\nSincerely,\nTom Caulkins\nSr. Systems Developer\nSAS Institute Inc.\nCary, NC 27513"}, {"count": 3, "tags": [], "bug_id": 22894, "attachment_id": null, "text": "This has also been reported in log4cxx as\nhttp://issues.apache.org/jira/browse/LOGCXX-22.  In properties files, a\nbackslash is a special character and using double backslashes to represent a\nliteral backslash is appropriate and expected.  However, backslashes have no\nspecial significane in XML files where you would use an ampersand to create an\n\"escape\" sequence.  It should also not affect setFile() where you should be not\nbe required to escape a valid filename.  ", "id": 70799, "time": "2005-02-11T00:00:54Z", "creator": "carnold@apache.org", "creation_time": "2005-02-11T00:00:54Z", "is_private": false}, {"count": 4, "attachment_id": 14248, "bug_id": 22894, "is_private": false, "id": 70807, "time": "2005-02-11T03:55:31Z", "creator": "carnold@apache.org", "creation_time": "2005-02-11T03:55:31Z", "tags": [], "text": "Created attachment 14248\nPatch and supporting test files\n\nI've committed the equivalent changes to log4cxx, but we have a much less\nsusceptibility to compatability issues.\n\nWith the patch, JoranDocument no longer calls\nOptionConverter.convertSpecialChars.  FileAppender.setFile will replace double\nbackslashes with single and PatternLayout will process the pattern through\nOptionConverter.convertSpecialChars.\n\nI think this is a very desirable change and the incremental compatibility risk\nis slight.  I can commit the changes if so desired."}, {"count": 5, "tags": [], "creator": "ceki@apache.org", "is_private": false, "text": "  \nPlease do, by all means! ", "id": 70831, "time": "2005-02-11T11:48:54Z", "bug_id": 22894, "creation_time": "2005-02-11T11:48:54Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 70851, "time": "2005-02-11T19:19:18Z", "bug_id": 22894, "creation_time": "2005-02-11T19:19:18Z", "is_private": false, "text": "Changes committed 11 Feb 2005"}, {"count": 7, "attachment_id": null, "bug_id": 22894, "text": "Curt,\n\nThanks for fixing this bug in log4j.\n\nI followed the link to the log4cxx bug you also fixed, and noted that you \nreport \"to preserve compatibility with existing configurations, \nFileAppender::setOption will eliminate double backslashes from any specified \nfile name\".\n\nThis seems reasonable.  I see that you applied this compensation to log4j, too.\n\nOne special case will be impacted negatively by this: when a UNC-type file name \nis used, i.e. \\\\mymachine.apache.org\\mydir\\myfile.log.  My work-around for the \nexiting log4j bug includes replacing 2 leading backslashes with four ( so log4j \ncan turn them back into two ).\n\nPerhaps you could consider handling this special case, too, by not turning 2 \nleading backslashes into one.  Note that a file name that begins with a single \nbackslash is not a valid file name, so backward compatibility would not be \ncompromised by adding this additional fix ( i.e. no one was using double \nbackslashes in that position as a workaround to the bug ).  Without the \nadditional fix, the above valid UNC file name will be rendered invalid.\n\nI am marking this bug re-opened while you consider my request.\n\nThanks,\nTom\n\n", "id": 70855, "time": "2005-02-11T20:21:09Z", "creator": "tom.caulkins@sas.com", "creation_time": "2005-02-11T20:21:09Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 22894, "attachment_id": null, "is_private": false, "id": 70856, "time": "2005-02-11T20:37:22Z", "creator": "tom.caulkins@sas.com", "creation_time": "2005-02-11T20:37:22Z", "text": "I should add:\n\nIf you do decide to incorporate my suggestion, for compatibility you would need \nto handle the ( special-special? ) case of four leading backslashes, too, since \nthey would be present when someone or some code ( like mine! ) was employing a \nworkaround in trying to construct a UNC file name that log4j wouldn't corrupt.\n\nThanks again,\nTom"}, {"count": 9, "tags": [], "bug_id": 22894, "text": "Good catch, I hadn't thought about UNC's.\n\nI've refined the implementation of OptionConverter.stripDuplicateBackslashes so that it should properly \ndistinguish handle quad-backslashes and distinguish between double backslashes intended to be \ndoubles and those intended to be single.  If the path contains any single slashes (actually any odd \nnumber of slashes), it is returned unchanged, otherwise all double slashes are reduced to single slashes \n(quads are reduced to doubles).  Reopen it if I still missed something.  Check the \nOptionSubstitutionTest.testStripDuplicateBackslashes for the scenarios I tried to cover.\n", "id": 70865, "time": "2005-02-11T22:27:16Z", "creator": "carnold@apache.org", "creation_time": "2005-02-11T22:27:16Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "carnold@apache.org", "text": "*** Bug 30838 has been marked as a duplicate of this bug. ***", "id": 77481, "time": "2005-07-21T05:09:30Z", "bug_id": 22894, "creation_time": "2005-07-21T05:09:30Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 22894, "attachment_id": null, "is_private": false, "id": 77482, "time": "2005-07-21T05:10:14Z", "creator": "carnold@apache.org", "creation_time": "2005-07-21T05:10:14Z", "text": "Candidate for porting back to log4j 1.2 branch."}, {"count": 12, "tags": [], "creator": "carnold@apache.org", "text": "After reviewing the 1.3 fix, I've concluded that I don't particularly like the way that I approached it and \nwill likely redo it and any fix is not going to be perfect enough for the 1.2 branch.  I expect that the \nultimate solution will be to preserve the existing backslash behavior for XML files with a \"http://\njakarta.apache.org/log4j/\" namespace and perform no backslash expansion when using an \"http://\nlogging.apache.org/\" namespace.\n\nThe problem is that the undesired backslash expansion occurs in the generic XML processing.  By the \ntime the value gets to the FileAppender, it has lost too much information to be able to recreate the \nexpected file name.  However, if the backslash expansion is removed from the generic processing, then \nany configuration parameter that expected or compensated for the backslash expansion would have a \ndifferent value.  This most likely parameter that would be tripped up is the PatternLayout.pattern where \nthe tests (and possibly other external users) used patterns like value=\"%m\\n\".  However, since the \nprocessing affects all parameters, including those in custom appenders and layouts, there is no way of \nalways doing the \"right\" thing.", "id": 77512, "time": "2005-07-21T22:37:48Z", "bug_id": 22894, "creation_time": "2005-07-21T22:37:48Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": null, "bug_id": 22894, "text": "If this behaviour will not be backported to log4j 1.2, would it be reasonable to close this issue?", "id": 119249, "time": "2008-08-02T09:38:55Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T09:38:55Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "text": "Include ZeroConf support for additional receivers (UDPReceiver, MulticastReceiver, XMLSocketReceiver).\n\nCurrently, _log4j._tcp.local. is the service name associated with a ZeroConfSocketHubAppender (a SocketHubReceiver initiates a TCP connection to the appender using port and host address information).  This should probably be left as-is to support existing deployments.\n\nTwo possible implementation choices: \n1. use _log4j._tcp.local, _log4j._udp.local. and _log4j._multicast.local. service names and require specific properties which will be used to construct the appropriate receiver\n\nExample: a _log4j.udp.local. service name with an optional \"decoder\" property could be advertised or received to automatically construct a UDPReceiver\n \n2. define new service names which provide all needed information\n\nExamples: a UDPReceiver could advertise that it can receive events by defining a service name of _log4j_xml_accept_receive._udp.local., or a UDPReceiver could automatically be created if an external system advertised _log4j_xml_connect_send._udp.local.\n\nOne reason for using names would be if the external system's zeroconf implementation couldn't provide properties.", "attachment_id": null, "bug_id": 48907, "id": 135328, "time": "2010-03-14T08:33:51Z", "creator": "sdeboy@iname.com", "creation_time": "2010-03-14T08:33:51Z", "is_private": false}, {"count": 1, "tags": [], "text": "What is needed to implement this feature?\n - Define supported service names (and optionally supported name/value keys)\n - Implement ZeroConf support for all appropriate receivers and appenders\n - Implement auto-creation of a receiver configuration in Chainsaw based on a discovered service\n\nProof of concept implementation\nI've implemented a proof of concept which adds support for ZeroConf to the MulticastAppender & receiver, SocketAppender & receiver, SocketHubAppender & receiver (sockethubappender already has support via a subclass, but that won't be needed going forward), UDPAppender and receiver, and XMLSocketReceiver.\n\nEach of these appenders and receivers now contains a new member: advertiseViaMulticastDNS\n\nWhen activateOptions is called, if the value of this property is 'true', a new class in the core log4j tree (ZeroConfSupport) is instantiated and the appender or receiver 'service' is registered via JmDNS.  The service is unregistered when the appender or receiver is closed/shut down.\n\nService names need to be defined and documented in order to support advertisement of appenders as well as auto-configuration of receivers in Chainsaw based on these service names.  \n\nThis will allow other logging frameworks to register appender configurations and have Chainsaw automatically construct an appropriate receiver configuration.  \n\nIt will also allow those applications to discover receivers (possibly defined in Chainsaw) which they can send their events to.\n\nThoughts?", "is_private": false, "id": 135348, "creator": "sdeboy@iname.com", "time": "2010-03-15T07:09:37Z", "bug_id": 48907, "creation_time": "2010-03-15T07:09:37Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 48907, "is_private": false, "text": "One additional comment: this new ZeroConfSupport class in the core log4j tree uses reflection to register & unregister appender & receiver configurations in JmDNS, so no compile or runtime dependency changes are needed if the advertiseViaMulticastDNS member is set to 'false'.  \n\nIf the member is set to true but JmDNS is not in the classpath at runtime, the exceptions are caught & logged, and the appender or receiver will continue to run.", "id": 135349, "time": "2010-03-15T07:13:07Z", "creator": "sdeboy@iname.com", "creation_time": "2010-03-15T07:13:07Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48907, "text": "After thinking about this a bit, here's a proposal for a service name convention supporting most of the network-based appenders and receivers we provide.\n\nOther logging frameworks can conform to this convention in order to have log4j discover their services, and they can use this convention to discover log4j-advertised services).  \n\nIf, in the future, we want to advertise other appenders (like FileAppenders or FileReceivers), we will need to expand on this convention.\n\nSupport for existing ZeroConfSocketHubAppender deployments:\nlog4j._tcp.local.\n\nProposed service name convention:\nlog4j_[xml/obj]_[mcast/udp/tcpaccept/tcpconnect]_[appender/receiver].local.\n\nWe could also support service-defined encoders for xml-based appenders via an 'encoder' key, with the value being the fully qualified decoder class name.\n\nxml: events are sent as xml fragments\nobj: events are sent as serialized java objects\n\nmcast: multicast UDP\nudp: unicast UDP\ntcpaccept: tcp serversocket (accepting incoming connections)\ntcpconnect: tcp socket (connect to a remote server socket)\n\nappender: advertised service sends events to receivers\nreceiver: advertised service receives events from appenders\n\nmulticastappender:\n_log4j_xml_mcast_appender.local.\n\nmulticastreceiver:\n_log4j_xml_mcast_receiver.local.\n\nudpappender:\n_log4j_xml_udp_appender.local.\n\nudpreceiver:\n_log4j_xml_udp_receiver.local.\n\nnon-log4j xml socketappender:\n_log4j_xml_tcpconnect_appender.local.\n\nxmlsocketreceiver:\n_log4j_xml_tcpaccept_receiver.local.\n\nsocketappender:\n_log4j_obj_tcpconnect_appender.local.\n\nsocketreceiver:\n_log4j_obj_tcpaccept_receiver.local.\n\nsockethubappender:\n_log4j_obj_tcpaccept_appender.local.\n\nsockethubreceiver:\n_log4j_obj_tcpconnect_receiver.local.", "id": 135374, "time": "2010-03-16T04:10:35Z", "creator": "sdeboy@iname.com", "creation_time": "2010-03-16T04:10:35Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 48907, "is_private": false, "text": "While implementing support for the service names in Chainsaw, I realized the MulticastAppender must advertise the multicast address.  To do that, I've added a \"multicastAddress\" key to the advertised service information.\n\nAlso, all xml-based appenders can advertise the fully-qualified class name of the XML encoder that can be used to parse the entries by defining an \"encoder\" key to the advertised service information.  By default, this isn't needed and the receiver will assume the events are held in an xml fragment conforming to log4j's dtd.", "id": 135375, "time": "2010-03-16T07:05:24Z", "creator": "sdeboy@iname.com", "creation_time": "2010-03-16T07:05:24Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "sdeboy@iname.com", "text": "Correction - the key needed to advertise a specific xml decoder is called 'decoder', not 'encoder'", "id": 135376, "time": "2010-03-16T07:45:53Z", "bug_id": 48907, "creation_time": "2010-03-16T07:45:53Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 48907, "attachment_id": null, "id": 135394, "time": "2010-03-17T07:18:07Z", "creator": "sdeboy@iname.com", "creation_time": "2010-03-17T07:18:07Z", "is_private": false, "text": "Committed to trunk in svn 924176\n\nCommit msg:\nAdded ZeroConf support to most of the network-based appenders and receivers.\n\nTo enable ZeroConf advertising of an appender or receiver, a user can now:\n - add jmdns jar to their classpath\n - set the 'advertiseViaMulticastDNS' param to 'true'\n\nAlso added support for discovery of appenders in Chainsaw (Chainsaw will automatically configure a matching receiver when connected).\nSupported appenders:\n   SocketAppender\n   SocketHubAppender (ZeroConfSocketHubAppender is still functional)\n   UDPAppender\n   MulticastAppender\nSupported receivers:\n   SocketReceiver\n   SocketHubReceiver (also receives events from ZeroConfSocketHubAppender)\n   XMLSocketReceiver (can receive events sent over TCP by other logging frameworks)\n   UDPReceiver\n   MulticastReceiver\n\nImplementation details:\n - removed Zeroconf4log4j class, jmdns access is now through the ZeroConfSupport class (class provides support of JmDNS and ServiceInfo creation via reflection, and supports both jmdns 1.0 and jmdns 3.1 apis)\n - ZeroConfSupport class is now used by ZeroConfSocketHubAppender, Chainsaw and all appenders & receivers that can advertise their configuration via ZeroConf\n - added new 'advertiseViaMulticastDNS' param to the appenders and receivers that support ZeroConf\n - updated the ZeroConf site documentation\n - updated release notes\n - updated the ZeroConfPlugin html file\n - tested appenders with 1.0 and 3.1 jmdns jars\n - updated log4j references in poms to log4j 1.2.16-snapshot where necessary\n\nFor those wanting to add ZeroConf support to third-party appenders and have Chainsaw discover the appenders, the service info naming convention is described here: https://issues.apache.org/bugzilla/show_bug.cgi?id=48907"}]
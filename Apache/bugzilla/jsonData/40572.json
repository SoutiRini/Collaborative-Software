[{"count": 0, "tags": [], "text": "The toString() methods on org.apache.catalina.loader package classes\nWebappLoader, WebappClassLoader, StandardClassLoader and Extension all produce\nextensive strings.  In addition, some of these classes invoke each other and\nproduce additional StringBuffer copies. \n\nI recommend inhibiting this debug construction unless a flag is set.  \nThe reasoning follows:\n\nIn doing performance tests with JSP and XML, I have found that Sun's\nimplementation of JAXP uses a factory locator pattern that eventually makes\nmultiple calls classLoader.toString(), as a result of doing a string\nconcatenation in a call to a debug function, and this calculation is expensive\nand is done repeatedly.  \n\nThe JAXP code in Sun's Java implementation of JAXP discards this string unless\n-Djaxp.debug is set, although it calculates the value anyway.  (In a separate\naction, I have filed a bug with Sun over the JAXP implementation and asked them\nto follow good practice and not invoke classLoader.toString() unless the debug\nflag is set.)\n\nTypically, the classLoader.toString() method is invoked once per factory\ncreation and again once each time the factory is used.  While the JAXP interface\nrecommends that factories be located once per application, seldom does anyone do\nthis, with the result that this expense is paid twice each time an XML operation\n(parsing, XSLT transofmration, etc.) is used.  \n\nThe result is that calls to factories in javax.xml.parsers, javax.xml.transform,\njavax.xml.xpath, and java.xml.validation are slower and allocate more memory\nthan expected.\n\nAs an example, see org.apache.jasper.xmlparser.ParserUtils.parseXMLDocument and\nnote that it does\nDocumentBuilderFactory().newInstance().newDocumentBuilder().parse, and that\nresults in two calls to classloader.toString for each JSP page parsed.  While\nthis may not be the proper technique suggested by Sun, it is indeed what\ndevelopers do, even inside Tomcat.\n\nEven if Sun fixes the JAXP implementation not to invoke classLoader.toString\nneedlessly, it may also be valuable to provide control in Catalina over the\nextent (and expense) of debugging information provided by these classloaders,\nbecause it is not clear to many developers that the simple calculation\n(\"classloader is \" + cl) is expensive.\n\nTo see how often this is called, use a Java debugger and place a breakpoint in\norg.apache.catalina.loader.WebappClassLoader.toString(), and examine the number\nof calls, the context, and the size of the calculated value.", "is_private": false, "bug_id": 40572, "id": 93971, "time": "2006-09-21T16:46:01Z", "creator": "leigh.klotz@xerox.com", "creation_time": "2006-09-21T16:46:01Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 40572, "is_private": false, "text": "As you state, this isn't a Tomcat bug but a JAXP bug.\n\nI am extremely reluctant to work-around bugs in third party code (it adds\ncomplexity, work-arounds often get forgotten and never removed) unless there is\na very strong case. I do not believe there is a strong case here. Peformance\nfigures for realistic production use cases showing significant differences may\nchange my mind.\n\nFigures obtained using YourKit (which will be much higher than normal since\nmeasuring this really hammers performance) show each invocation of toString()\ntakes less than 10ms.\n\n", "id": 94454, "time": "2006-10-03T17:24:56Z", "creator": "markt@apache.org", "creation_time": "2006-10-03T17:24:56Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "leigh.klotz@xerox.com", "attachment_id": null, "id": 94486, "time": "2006-10-04T11:58:55Z", "bug_id": 40572, "creation_time": "2006-10-04T11:58:55Z", "is_private": false, "text": "Mostly I agree but I believe you could consider a less extensive .toString()\nmethod and a more extensive debugString() method, since programmers in other\nsystems may not see merely mentioning the classloader as an expensive operation\n(the perils of operator overloading).  On a secondary note, invocation\nbenchmarks will not take into account distributed GC time."}]
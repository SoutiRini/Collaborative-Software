[{"count": 0, "tags": [], "text": "Created attachment 22295\nSupport for remote MOVE on resources (not collections)\n\nHello. The WebDav RFC does not restrict MOVE/COPY to one server/dav provider, but the httpd implementation does.\n\nMy boss thinks that it should support remote MOVE/COPY operations.\nI'am now working on it, and I'am sending a working path for remote COPY resources (not collections yet).\n\nI would like to get some feedback and patch review, so I can continue this work and add functionality and remove some non-apache-way constructions from code (I just started to work on httpd code, so maybe I'am not aware on how thinks should be handled in code...).\n\nBest regards\n  Rafal Malinowski", "attachment_id": 22295, "bug_id": 45449, "id": 118886, "time": "2008-07-21T21:02:29Z", "creator": "malinowskirafal@wp.pl", "creation_time": "2008-07-21T21:02:29Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 22304\nVersion with MOVE and collections support.\n\nThis version adds support for MOVE operations and also supports collections.\nIn next version I'll add use of LOCK on remote server when COPYing/MOVEing collections.\n\nAfter that I'll try to add support for copying properties (as RFC says).", "attachment_id": 22304, "id": 118942, "creator": "malinowskirafal@wp.pl", "time": "2008-07-23T10:30:58Z", "bug_id": 45449, "creation_time": "2008-07-23T10:30:58Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 22320\nVersion with LOCK support\n\nThis version LOCK remote NULL resource to prevent any conflicts. It releases the LOCK after the operation is finished (successfully or not).", "is_private": false, "id": 119029, "creator": "malinowskirafal@wp.pl", "time": "2008-07-25T11:39:22Z", "bug_id": 45449, "creation_time": "2008-07-25T11:39:22Z", "attachment_id": 22320}, {"count": 3, "tags": [], "bug_id": 45449, "attachment_id": 22321, "is_private": false, "id": 119038, "time": "2008-07-26T14:06:39Z", "creator": "malinowskirafal@wp.pl", "creation_time": "2008-07-26T14:06:39Z", "text": "Created attachment 22321\nVersion with copy-properties support\n\nThis version copies also properties.\nIt needs some polish and some small fixes with other apache code (like the port problem with rev-proxy). And it needs a lot of testing..."}, {"count": 4, "tags": [], "text": "Created attachment 22345\nVersion with MULTI-STATUS responses.\n\nThis version is able to return MULTI STATUS response to client (if there is need to do it).", "is_private": false, "id": 119242, "creator": "malinowskirafal@wp.pl", "time": "2008-08-02T06:24:18Z", "bug_id": 45449, "creation_time": "2008-08-02T06:24:18Z", "attachment_id": 22345}, {"count": 5, "tags": [], "bug_id": 45449, "is_private": false, "text": "Reset assignee so mails go to list.", "id": 127840, "time": "2009-06-10T13:29:25Z", "creator": "markt@apache.org", "creation_time": "2009-06-10T13:29:25Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 45449, "attachment_id": null, "text": "(In reply to comment #5)\n> Reset assignee so mails go to list.\n\nProvided that proper usage of Apache Reverse Proxying is made, then NO PATCH is needed to make MOVE/COPY work as expected.\n\nI Highly recommend that this patch SHOULD NOT be included in the apache source tree, although this is a good programming effort.\n\nHere is a detailed memo I wrote on the subject, with 3 different solutions to this problem:\n\n====================================================\n\nI/ The problem: \nBriefly: one cannot rename, move or copy (from remote to remote) files on a https webdav location accessed via stunnel, from dav client such as Windows Webdav Mini-Redir (ie \"net use\" mapped drive).\n\nHowever rename or copy work with \"Add Network Place\" wizard, but is very long for big files.\nAlso, via stunnel, accessing a classic www location works fine (provided that all url in html files are relative!)\n\n\n\nII/ CAUSE:\n\nQuick comments :\nthere is no bug in Apache,\nno bug in stunnel,\nand no bug (related to this pb)  in Windows webdav miniredir client\n\nso what?...\n\nThe method MOVE and COPY of the dav protocol are most often implemented in dav clients by using an absolute destination url such as \"http://myserver.mydomain/folder1\" or \"https://sslserver.otherdomain/folder2\", WHILE the \"source\" document url is just expressed as a relative path to the \"Host\" designated in the http header of the request.\nAll other http and dav methods, which are essentially some kind of \"get something methods\" are most often implemented by using relative path such \"/folderX/adoc\" to designate a document of interest, \"relative\" means relative to the \"host\" field defined in the header of the http request. Note:  The PUT method is built the same way as the GET methods: ie with a relative path to the implicit \"document root\" of the server designated in the \"Host:\" http header field of the request (see RFC 2616 for http, RFC4918 for dav).\nWell, from a vocabulary point of view, rfc2626 call my \"relative path\" as \"abs-path\" because they start with a \"/\", and not a dot (see chapter 3.2.1 of rfc2616).\n\nThat said, to secure a dav communication between a XP client and a DAV server, some people need to set up an ssl (s)tunnel between a WXP/Dav MiniRedir client and a HTTPS/dav server: this because WXP client are not able to manage \"https connection\" directly through \"net use\". So they usually use a setup like this on their client machine  stunnel.conf file:\naccept: localhost:80\nconnect: remotehost:443\n+ some other stuff for cert management.\nThe XP webdav miniredir client is only able to connect to 80 location. On XP \"net use\" does not support https locations nor forcing port number to any desired value.\n\nSo, with such setup, clients are about to build url like this \"http://localhost/remotefolder/remotedoc\" in their dav client, then put this request in an ssl tunnel (stunnel) which will transport this request to the 443 port of a remote server. \nLet's say that the remote server is an Apache one (for example).\n\nA classic configuration of Apache is to setup two ip-based vhosts to access the same locations (it is very simple and even recommended because apache does not support ssl access on name-based vhost):\n- one ip-based on 80 port (0.0.0.0:80 is the good way to write this, _default_  and * are not appropriate in that case)\n- the other ip-based on 443 port\nSome may restrict the 80 vhost to \"apache server local network\", and forbid access from the whole internet, and keep 443 access with client cert validation for external access.\n\nSo what happens when MOVE/RENAME is rejected :\nthe http client will build a MOVE request specifying :\n  - a source document as a relative \"file path\", relative to \"localhost\", which is an \"happily\" AMBIGUOUS name (or address if used as 127.0.0.1)  that will allow BOTH the client to send its resquest in its local tunnel-end AND the server to interpret url as relative to ITSELF (ie the server, not the client) at the other end of the (s)tunnel, so that requested document can be reaaly reached.\nI will explain this further but you have to understand that it is really a chance that the name \"localhost\" can serve two different purposes on two different machines, when it is used an an url exchanged between the two machines, because an url should express a unic \"place\" -not two! \nI call that the ubiquity of localhost based url, such as \"/localhost/src_doc\", relative to the \"localhost machine\" but in fact relevant on the SERVER machine\n  - a destination location as an ABSOLUTE url, such as \"http://localhost/newpath/newdoc_name\", also relevant in fact only on the server machine\n\nThen there are at least two potential sources of pb:\n1/ nothing assures the client that the server will be able/allowed to reach/write to such a location \"http://someserver\" (even if someserver is the \"itself\" remote server contacted by the client, because http urls are not \"the same\" as https urls)\n2/ even if that location is reachable, the server receives this request on its 443 port and may expect that url be specified as https, and may consider receiving an http url as a bug\n(because Apache does not want to proxy by default between two of its vhosts: you have to ask it ...and I think this in NORMAL).\nThis is where the bug mainly is !\n\nIII/ Various comments and questions\n\n1/ the \"localhost\" ubiquity good bug \n-----------------------------------------\nThere should be a 3rd problem, but this will fortunately not be the case because of the \"ubiquity/ambivalence\" of the \"locahost\" hostname both in the client network space, and on the server network space:\nnormally, when the client builds an url beginning with \"http://localhost\", it really wants to address and truly adresses a http request to ITS own host machine: \nby the stunnel magic that request comes to the REMOTE server which, except on particular requests, usually accepts this and serves it : \nthat means that the server, when seeing such request,  interprets \"localhost\" as \"ITSELF\", and as \"itself\" is in general allowed to access all its web locations, then the server accepts to serve the request and send back a document in the tunnel back to the client.\nYou have to understand that this is NOT (so) normal because the \"locahost\" requested by the client is TRULY not the same host machine as that \"understood\" by the server.\nThis is what I call the \"localhost\" ubiquity good-bug : without this bug no ssl access through stunnel would work (no www, no dav, no http, no https, nothing!).\nThis property is not at all related to a kind of \"proxying\" role of stunnel: this is something totally different.\nRemember also that stunnel is NOT an http proxy so it transports http requests \"as is\".\n\n2/ HTTP + SSL is NOT HTTPS\n------------------------------------\nBecause absolute http url requested by the client are directed to an https server: as the client does not know that it is talking to an httpS server, it does not build correct urls.\nSo it is even a chance that most request works (due to localhost ambivalence and usage of relative path)...\n\n3/ role of stunnel in HTTP over SSL \n-----------------------------------------\n\nIn that matter stunnel is not acting as a transparent proxy (this is not related to the \"transparent proxy option\" of stunnel) : if it were perfectly transparent it would not redirect a request to port 80 to a 443 port, and will not \"route\" requests for THE localhost to a machine on the internet.\nIt is also not used as a proxy because the client does not deal with the remote adress but needs to know the adress of the stunnel client machine (localhost in the present case).\n\nIn fact stunnel, when used only on one side of a end-to-end communication, is acting as a GATEWAY between two networks : one talking ssl, the other not.\nAs such it can translate protocols by removing the payload from an ordinary tcp/ip packet on one side and putting it in a new ssl tcp/ip packet on the other side.\nWe can also say that stunnel acts as a \"reverse proxy\" hiding a remote machine behind itself...\n\nWell do not think that tricking your stunnel conf file with \"accept 443\" and \"connect 443\" will solve your problem: because absolute urls in your requests still begin with http ! and Apache will still not appreciate it (no implicit proxying).\nMoreover MS XP clients will not allow you to mix http / 443 in a net use command  (it is possible on Vista but useless for other reasons: on vista you can directly connect to https locations with net use)\n\nStunnel is not either acting as a ...tunnel ! No it does not, because a pure tunnel will encapsulate requests at one end and remove encapsulation at the other end.\n\n4/ Some workarounds (but the true solution is later)\n-----------------------------------------------------------\nWORKAROUND 1 : \nif you are impatient  to solve your problem, a good solution is to put stunnel at both ends AND remove SSL support from Apache: \nso put stunnel both on the client and on the server to REALLY build a TRANSPARENT tunnel: I mean transparent to the fact that both ends believes to talk directly \"http on 80 port\", as they are in fact tunneled through an ssl session.\nAlso note that this true ssl tunnel will work thanks to the \"localhost ambivalence\": without that ambivalence, not even a simple get request would work. \nNOTE: please check your apache conf with various directives such as \"usecanonicalname\" : I put if off in my conf, \n\nWORKAROUND 2: \nof course something else which works is \"true https-able client connecting directly to true https server\": this is possible by using the Windows Vista webdav mini-redir directly talking to apache server on 443. Well in that case you will still have ANOTHER MS BUG : \"net use\" DOES not support BOTH \"client cert auth\" AND \"basic auth by username/password\" to access directly a folder on the server (whereas \"add network place\" does!). If you want the Vista client to work you will be obliged to remove \"basic auth restriction\" at least at the (dav-)root / location on the server: this is not a good new.\nAnyway this will work perfectly if you only use SSL to authenticate the server, not the client, and keep your basic auth settings unchanged.\nWell this solution does not involve stunnel so let us continue...\n\n\n5/ BUT why other requests such as put/get are working?\n--------------------------------------------------------------------\nThanks to the localhost ambivalence AND to relative path in http requests other than MOVE and COPY (which are dav requests, and which are the SOLE requests having a destination field, and where this field is implemented as an absolute URL).\n\n6/ NOTE about absolute url in MOVE/COPY destination field\n----------------------------------------------------------------------\nSome people think that the RFC4918 does not allow \"relative url\" in the destination field : this is WRONG.\nBut it is a fact that most clients implement \"destination\" just as \"absolute urls\": this is like it is.\n\nSome people may think  \"absolute url, well ok, so it implies that moving a doc between two servers or two \"services\" on the same server should be possible!\" :\nyes BUT:\n1/ the RFC does not say that it is mandatory ! and \n2/ Moreover \"miracles\" are just not possible if various restrictions disallow this.\n3/ Moreover requesting a \"write access\" on a location that is not in the \"name space\" of the server currently servicing the request is just not logical, here is why : \nif it were the case, it would mean that any server should act as a proxy to any other : although proxy server exist and are described in the rfc, a http server is not automatically a proxy server; proxy servers are a special family of servers that require EXPLICIT configuration, NOT implicit configuration. So \"implicit proxying\", although not explicitely forbidden by the RFC, is  a NON SENSE vs the RFC. \nFurther it must be noted that the proxying mechanisms described in the RFC2616 are NOT involved when performing HTTP-DAV over SSL ! because this is a particular case of \"proxying at tcp/ip level\", not http level, no the RFC is not relevant to solve this case: ie a server is not supposed to serve a request in a situation not described in the RFC.\n\n\n7/ BUT Why \"rename is working with \"add network place wizard\", or some other dav client:\n--------------------------------------------------------------------------------------------------------\nBecause your dav client implements some tricks :\nSome clients (such as Windows \"Add Network Place\" wizard) first try a true MOVE or COPY method,\nthen they receive a 502 error (\"Bad gateway\") that I really think is a logical reason for rejecting the request:\nthe reached host (127.0.0.1:443)  is NOT implicitely a PROXY to 127.0.0.1:80 (as implied by the destination url in the MOVE/COPY request, forged as such by a client believing to act in a http/80 world), so it just CANNOT serve your request.\nSo when copy/move fail, those clients (as \"Add Network Place\") try a GET (to local hard drive) and PUT (to remote machine) :  well ok, it seems a good idea but it is NOT because of network speed (often  low in upload) and delays in case of big files.\n\n\nIV/ SO what is the solution ?\n\nRemember I already stated two workarounds :\n1/ true SSL tunneling by using stunnel BOTH on the client AND the server, to join a http client/80 and a http/80 server, and removing of SSL support in Apache: \nto secure your server just use apache or firewall restrictions such as \"port 80 only reachable from lan or loopback or localhost!\"). \nIf 80 is restricted to localhost, the stunnel server must be installed on the http server, of course...\n\n2/ On Vista, by directly using \"net use https://\", forgetting stunnel, but provided that you disable \"basic auth\" at least at the root of the mounted remote location.\n\nBut these are just workarounds.\n\n**********\n\nA solution based on stunnel client and apache classic conf directives exists:\n\nWell you have understood that the problem comes from the fact that Apache DOES NOT want to act AS A PROXY from \"127.0.0.1:443 service\" to \"127.0.0.1:80\" service.\nAnd I really think it is normal.\n\nSo you may have 2 solutions :\n1/ by doing some \"rewrite\" magic in your 443 vhost:\n1.1/ either rewrite the destination field as A RELATIVE url\n1.2/ either rewrite the destination field as beginning with https://localhost\nBUT ALL THIS WILL NOT be possible using standard apache directives because apache rewrite engine does not give the ability to rewrite this field. Should it be able to do that : not sure...and I do not request the apache team to do that.\n\n2/ the TRUE solution is here :\nSo you cannot rewrite the request, hmm, BUT you COULD REDIRECT IT to a service that COULD understand it as it is (because in fact the request can be considered as well-formed when received by an http server, although not by an httpS server), by using one of the apache redirection and/or proxying features.\nWell, in that particular case, redirect is NOT the good solution.\nThe solution is in \"PROXYING\" !\n\n\nThe PROXYING solution :\nWhen you have finished this paper you will say \"all this blah blah\" for a few lines of config...yes but it is necessary to really master apache conf, in general and because this conf is also able to open big security holes.\n\n\"Forward proxy\" is not the solution (you are lucky, I will NOT explain why).\nThe solution is in \"reverse proxying\".\nSee the apache doc about ProxyPass directive, as this is the basis for setting up reverse proxy...\n\nAnyway, If you roughly configure \"ProxyPass\" directives, it will work for MOVE/COPY with stunnel and \"net use\" but will make FAIL MANY OTHER things, and in particular for \"true https clients talking directly to the 443 server\": because  if you have a WELL formed destination url beginning with HTTPS, a raw proxying will send this to the \"80 service\" which  will REJECT IT !\n\nSO the solution is to only (reverse) proxy requests that really need to be rev-proxied !\nFor that the only solution is to use the \" rewritecond...rewriterule ...[P] flag\" magics,\nto ONLY rev-proxy <<MOVE and COPY methods arriving on 443 vhost AND having a destination field beginning with \"http://\">>, which defines perfectly http requests sent via a client SSL stunnel gateway.\n\nThen here is the code to add this slective reverse proxying in the apache configuration : \n\n# ================================================================\n#                       IP BASED VIRTUAL HOSTS \n# ================================================================\n\n<VirtualHost 0.0.0.0:80>\n# ServerName (not used, this is a reminder related to usecanonicalname-on; we prefer to use usecanonicalname Off!)\nServerName http://LAN-DNS-NAME:80\nDocumentRoot \"/var/www/html\"\n</VirtualHost>\n\n\n<VirtualHost 0.0.0.0:443>\n\n# ServerName useless but it is a reminder (see recommendation in ServerName apache doc however fort https vhost)\nServerName https://WAN-DNS-NAME:443\nDocumentRoot \"/var/www/html\"\n\n# SSL configuration: PUT WHAT YOU WANT HERE provided that you know what you are doing !\n# -----------------\n\nSSLEngine on\nSSLOptions +StrictRequire\n\n#   SSL Cipher Suite:\nSSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\n\n#   SSL Protocol support:\nSSLProtocol all -SSLv2\n\n# I only accept users from my CA \nSSLCACertificateFile /etc/pki/tls/cacert.pem\n\n# CRL check\nSSLCARevocationFile /etc/pki/tls/cacrl.pem\n\n# Server Certificate Chain File\nSSLCertificateChainFile /etc/pki/tls/certs/localhost-chain.crt\n\n#   Server Certificate:\nSSLCertificateFile /etc/pki/tls/certs/localhost.crt\n\n#   Server Private Key:\nSSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n\n# VERY IMPORTANT \n\nSSLVerifyClient require\n\nSSLVerifyDepth 1\n\n<Location />\nSSLRequireSSL\n</Location>\n\n# REVERSE PROXYING : solution to \"WEBDAV over STUNNEL and RENAME issue\", the solution starts here\n# ----------------------------------------------------------------------------------------------------------------------------\n\nRewriteEngine On\n\n# Some env vars useful later\n\nRewriteRule \"(.*)\" - [env=V443_URL:$1]\n\nRewriteCond %{SSL:SSL_CLIENT_S_DN} \"^(.*)$\" [NC]\nRewriteRule \"(.*)\" - [env=MY_SSL_CLIENT:%1]\n\n# REVERSE PROXYING : solution to \"WEBDAV over STUNNEL and RENAME issue\"\n# -----------------------------------------------------------------------------------------\n# This is also the solution to problem in renaming files on a subversion server accessed through dav.\n\nRewriteCond %{REQUEST_METHOD} (MOVE|COPY) [NC]\nRewriteCond %{HTTP:Destination} \"^(http://.*)$\" [NC]\nRewriteRule ^/(.*)$ http://127.0.0.1:80/$1 [proxy]\n# Note : [proxy] can be abreviated as [P]\n# RAF : b flag not supported ? (cf unescape)\n\n# SOME security on the proxy: DO NOT HESITATE TO HARDEN THIS more  than I did\n<Proxy http://127.0.0.1:80/>\nOrder allow,deny\nAllow from env=MY_SSL_CLIENT\n</Proxy>\n\n</VirtualHost>\n\n# Some useful logs\nCustomLog logs/mylogs.log \"SSL_DN is  %{MY_SSL_CLIENT}e\"\nCustomLog logs/mylogs.log \"V443URL is  %{V443_URL}e\"\n\nV/ Miscellaneous comments\n--------------------------------------\n\n1/ Some people have the same kind of problem:\n- when using dav access to subversion location,\n- with various dav clients (cadaver, goliath)\n- when dealing with error 502 and MOVE/COPY methods\nAll this problems have the same cause and solution described above : reverse proxying config on your https server.\n\n2/ a little note about www access (not dav):\nBe careful to only have relative url in your various \"href\" properties in your links, and \"usecanonicalname off\" on apache, in order to have both http and https access working on the same directories.\n\n3/ General note\nThink also to have SSLRequireSSL directive in apache conf: do not think to solve the \"move/rename/copy\" problem with dav over stunnel by removing this important directive:\n you will only open security holes.\n\n4/ Some people have proposed some similar solutions either by rewriting or by proxying, but these solutions usually propose to write some kind of Apache module or filters, and in fact circumvent apache security by activating a kind of \"implicit proxying\" which is really a bad idea.\n\n5/ use apache logs (and particularly logs of envvars) and wireshark (ex-ethereal) to diagnose your dav-client behavior: but remember that you can only sniff clear traffic SO it in only possible on the client BUT unfortunately it is NOT possible to sniff the loopback interface on a XP/Vista machine : the trick is to sniff dav traffic on a clear local lan without SSL support, to understand how your client manage various http methods, then to extrapolate when this traffic is transferred through ssl.\nIn pure ssl traffic, apache logs can be enriched to track the \"Destination field\", with  an envvar extracted by the headers through some rewriterule.\n\n\nVI/ Some useful links\n------------------------.\nGood discussion about dav+https (follow the 2 links at the bottom of the page: one to simple-groupware CMS, the other to \"smallvoid\" nett use guide)\nhttp://devwfb.blogspot.com/2008/07/how-to-map-https-only-web-folder-to.html\nhttp://www.simple-groupware.de/cms/WebDAV\nhttp://smallvoid.com/article/winnt-webdav-network-drive.html\n\n\nDAV and SUBVERSION:\nhttp://www.phwinfo.com/forum/alt-apache-configuration/351885-webdav-over-ssl-move-copy.html\nhttp://sethd.org/Site/SubversionProxyFix.html\n\nGood info about webdav implementation by MS:\nhttp://greenbytes.de/tech/webdav/webdav-redirector-list.html\n\nan howto to setup dav+stunnel\nhttp://www.autohotkey.com/forum/topic44471.html\n\nsome other howto:\nhttp://librenix.com/?page=SSL\nhttp://www.howtoforge.com/webdav_with_ssl_and_two_factor_authentication\n\nApache \"bug\" that I recommend NOT to fix :\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=45449\n\n==============\n\nYours sincerely,\nPierre Delaage", "id": 130948, "time": "2009-10-07T10:39:50Z", "creator": "delaage.pierre@free.fr", "creation_time": "2009-10-07T10:39:50Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 45449, "attachment_id": null, "id": 166019, "time": "2013-03-19T22:41:44Z", "creator": "wiml@omnigroup.com", "creation_time": "2013-03-19T22:41:44Z", "is_private": false, "text": "(FWIW, this bug looks related to Bug 38182 )"}]
[{"count": 0, "text": "After upgrading from httpd 2.2.11 to 2.2.12, the server was blocked at least once per day for up to six hours. In this state, neither any answer packets were generated (tested with network sniffer) nor any log lines written. In one such state, I restarted the server gracefully, then it worked again. The log files do not show any errors. Tracing the running master httpd process with Solaris \"truss\" showed a loop of pollsys(...) and waitid(P_ALL,...) calls, but this is normal. Only downgrading to 2.2.11 helped.\n\nReplacing the log-pipe syntax \"|exec cronolog ...\" with the new one, \"||cronolog ...\" had no effect. Systematic testing will be difficult since I cannot do this on our \"production\" web server and the bug cannot be triggered at will.\n\nSystem: Solaris 10 u7 (SPARC), httpd self-compiled with Sun Studio Forte 7 compiler, configure options: CFLAGS='-xO3 -xarch=v8 -xstrconst' --disable-threads --enable-suexec --with-ssl=/usr/sfw (plus module options; mpm=prefork [default]). Additionally, mod_fastcgi was compiled separately. All this and the runtime configuration were identical to previous versions, which always worked reliably.\n\nProcess hierarchy (log output is piped through cronolog):\nhttpd        (master)\n  cronolog\n  cronolog\n  cronolog\n  httpd      (fastcgi controller)\n    php-fcgi (master, PHP_FCGI_CHILDREN=2)\n      php-fcgi\n      php-fcgi\n  httpd\n  httpd\n  ...\n  httpd", "bug_id": 47645, "attachment_id": null, "id": 129474, "time": "2009-08-05T03:12:31Z", "creator": "strube@physik3.gwdg.de", "creation_time": "2009-08-05T03:12:31Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 47645, "text": "Please use pstack to see what the httpd child processes are doing and post unique backtraces here.", "id": 129482, "time": "2009-08-05T06:24:25Z", "creator": "trawick@apache.org", "creation_time": "2009-08-05T06:24:25Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 47645, "attachment_id": null, "text": "I used a duplicate installation on another machine (same OS) for testing and a script executing wget queries to six web-pages (with subqueries to css, images etc.) at a high rate (about 100 times the average load of our web server). The bug did not occur within 16 hours! However, the machines (both SPARC) had different type and number of CPUs. Thus I will have to reinstall 2.2.12 on our web server and wait till it hangs (although I don't like this).\nPlease grant me some time (up to a week) for my next information.", "id": 129513, "time": "2009-08-06T00:37:31Z", "creator": "strube@physik3.gwdg.de", "creation_time": "2009-08-06T00:37:31Z", "is_private": false}, {"count": 3, "tags": [], "creator": "strube@physik3.gwdg.de", "text": "Faster than expected, the bug occurred again, and I could collect some hopefully informative output while the server was hanging:\n\n*** master httpd process:\n* pstack PID :\n fefcc1d0 pollsys  (ffbffb30, 0, ffbffb98, 0)\n fef67b68 pselect  (ffbffb30, ff034630, ff034630, 0, ffbffb98, 0) + 1c8\n fef67ee0 select   (0, 0, 0, 0, ffbffc00, 4ab82600) + a0\n ff21faf0 apr_sleep (0, f4240, f4240, 33c, 9c180, f4000) + 4c\n 0004398c ap_wait_or_timeout (11175, 11000, ffbffcd0, ffffffff, 3, f4000) + 7c\n 0006ab00 ap_mpm_run (a, ff220c9c, 0, 0, 9ad84, 9c030) + 2f0\n 0002787c main     (1, 9957c, 99400, 9a400, 99510, cb188) + 994\n 00026688 _start   (0, 0, 0, 0, 0, 0) + 108\n\n* truss -p PID :\npollsys(0xFFBFFB30, 0, 0xFFBFFB98, 0x00000000)  = 0\nwaitid(P_ALL, 0, 0xFFBFFAB8, WEXITED|WTRAPPED|WSTOPPED|WNOHANG) = 0\npollsys(0xFFBFFB30, 0, 0xFFBFFB98, 0x00000000) (sleeping...)\npollsys(0xFFBFFB30, 0, 0xFFBFFB98, 0x00000000)  = 0\nwaitid(P_ALL, 0, 0xFFBFFAB8, WEXITED|WTRAPPED|WSTOPPED|WNOHANG) = 0\npollsys(0xFFBFFB30, 0, 0xFFBFFB98, 0x00000000)  = 0\nwaitid(P_ALL, 0, 0xFFBFFAB8, WEXITED|WTRAPPED|WSTOPPED|WNOHANG) = 0\n... etc.\n\n* truss -t !all -u a.out: -p PID :\n  (No other process showed any output on this!)\n/1@1:       -> perform_idle_server_maintenance(0xa6e18, 0x11000, 0xffbffcd0, 0xffffffff)\n/1@1:       <- ap_wait_or_timeout() = 0xffbffce4\n/1@1:       -> ap_wait_or_timeout(0xffbffce4, 0xffbffce0, 0xffbffcd0, 0xa6e18)\n/1@1:       <- ap_wait_or_timeout() = 0x11175\n/1@1:       -> perform_idle_server_maintenance(0xa6e18, 0x11000, 0xffbffcd0, 0xffffffff)\n/1@1:       <- perform_idle_server_maintenance() = 1\n/1@1:       -> ap_wait_or_timeout(0xffbffce4, 0xffbffce0, 0xffbffcd0, 0xa6e18)\n/1@1:         -> ap_run_monitor(0xa6e18, 0x0, 0x0, 0x0)\n/1@1:         <- ap_run_monitor() = 0\n/1@1:       <- ap_wait_or_timeout() = 0x11175\n/1@1:       -> perform_idle_server_maintenance(0xa6e18, 0x11000, 0xffbffcd0, 0xffffffff)\n/1@1:       <- perform_idle_server_maintenance() = 1\n/1@1:       -> ap_wait_or_timeout(0xffbffce4, 0xffbffce0, 0xffbffcd0, 0xa6e18)\n/1@1:       <- ap_wait_or_timeout() = 0x11175\n/1@1:       -> perform_idle_server_maintenance(0xa6e18, 0x11000, 0xffbffcd0, 0xffffffff)\n... etc.\n\n*** fcgi-controlling httpd process:\n* pstack PID :\n fefcc1d0 pollsys  (ffbff9b0, 1, 0, 0)\n fef67b68 pselect  (ffbff9b0, ff034630, ff034630, 40, 0, 0) + 1c8\n fef67ee0 select   (10, ffbffba0, 0, 0, 0, ffbffc29) + a0\n feb99a9c fcgi_pm_main (180, 0, febb6b80, feba005c, feba00e8, 3) + 9a4\n feb943d4 init_module (a6e18, 18f6a8, aae28, ada58, 9782c, 0) + 264\n 0003abd4 ap_run_post_config (a6e18, e4f10, aae28, ada58, 9, 1c6908) + 48\n 00027820 main     (1, 9957c, 99400, 9a400, 99510, cb188) + 938\n 00026688 _start   (0, 0, 0, 0, 0, 0) + 108\n\n* truss -p PID :\npollsys(0xFFBFF9B0, 1, 0x00000000, 0x00000000) (sleeping...)\n\n*** one worker httpd process:\n* pstack PID :\n fefcb904 portfs   (6, 8, 1ed548, 2, 1, ffbffa80)\n ff21a994 apr_pollset_poll (1ed508, 0, 989680, ffbffaf8, ffbffaf4, 11177) + 12c\n 0006a218 child_main (18, 989400, 9a400, 1f34d0, 1, 9c400) + 378\n 0006a4d8 make_child (9a400, d, 9ac00, 0, 9ac00, e) + 128\n 0006a6f0 perform_idle_server_maintenance (2, ffbffbec, 9ad7c, 1, 2, 9c400) + 164\n 0006ac18 ap_mpm_run (a, ff220c9c, 0, 0, 9ad84, 9c030) + 408\n 0002787c main     (1, 9957c, 99400, 9a400, 99510, cb188) + 994\n 00026688 _start   (0, 0, 0, 0, 0, 0) + 108\n\n* truss -p PID :\nport_getn(8, 0x001ED548, 2, 1, 0xFFBFFA80) (sleeping...)\nport_getn(8, 0x001ED548, 2, 1, 0xFFBFFA80)      = 0 [62]\nport_getn(8, 0x001ED548, 2, 1, 0xFFBFFA80) (sleeping...)\n\n*** all other worker httpd processes (adresses varying):\n* pstack PID :\n fefcb804 fcntl    (f, 7, ff232d2c)\n fefbb4cc fcntl    (f, 1, ff332a00, ff213f24, ffffedf6, 49db8400) + 84\n ff212610 proc_mutex_fcntl_acquire (33c, 0, 1f3f8, fffb7d40, ff2319d4, 18f7f0) + 44\n 000698cc accept_mutex_on (8, 0, 0, 0, 8, 9c000) + 8\n 0006a168 child_main (18, 3e8, 9a400, 1f34d0, 1, 9c400) + 2c8\n 0006a4d8 make_child (9a400, c, 9ac00, 0, 9ac00, d) + 128\n 0006a6f0 perform_idle_server_maintenance (2, ffbffbe8, 9ad7c, 0, 2, 9c400) + 164\n 0006ac18 ap_mpm_run (a, ff220c9c, 0, 0, 9ad84, 9c030) + 408\n 0002787c main     (1, 9957c, 99400, 9a400, 99510, cb188) + 994\n 00026688 _start   (0, 0, 0, 0, 0, 0) + 108\n\n* truss -p PID :\nfcntl(15, F_SETLKW, 0xFF232D2C) (sleeping...)\n\n*** all cronolog processes (adresses varying):\n* pstack PID :\n ff2cc2e4 read     (0, ffbdfd5c, 10000)\n 00011c74 main     (26c00, 4a7aac78, 25dd0, 3, 25800, ffbffe8e) + 790\n 000113dc _start   (0, 0, 0, 0, 0, 0) + 108\n\n* truss -p PID :\nread(0, 0xFFBDFD5C, 65536)\t(sleeping...)\n\n*** master php process:\n* pstack PID :\n feb4c91c waitid   (7, 0, ffbfdbd0, 3)\n feb3c120 wait     (ffbffe38, 1, ff2c2a00, 2, 570cf4, 0) + 58\n 0047182c main     (7fa0, 580f20, 0, 1, 58103c, 1) + 9cc\n 00042fa8 _start   (0, 0, 0, 0, 0, 0) + 108\n\n* truss -p PID :\nwaitid(P_ALL, 0, 0xFFBFDBD0, WEXITED|WTRAPPED) (sleeping...)\n\n*** child php processes:\n* pstack PID :\n feb4b97c accept   (0, ffbfdc3c, ffbfdcac, 1)\n 00472794 main     (8014, 0, 1f4, 1, 0, 1) + 1934\n 00042fa8 _start   (0, 0, 0, 0, 0, 0) + 108\n\n* truss -p PID :\naccept(0, 0xFFBFDC3C, 0xFFBFDCAC, SOV_DEFAULT) (sleeping...)", "id": 129528, "time": "2009-08-06T05:07:05Z", "bug_id": 47645, "creation_time": "2009-08-06T05:07:05Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47645, "is_private": false, "id": 129529, "attachment_id": null, "creator": "trawick@apache.org", "creation_time": "2009-08-06T05:17:54Z", "time": "2009-08-06T05:17:54Z", "text": ">Please grant me some time (up to a week) for my next information.\n\nNo problem.  This is best effort/as-time-allows support on both sides ;)  I'll just mark the status as NEEDINFO, which you can change when you're able to duplicate the problem and post the backtraces."}, {"count": 5, "tags": [], "bug_id": 47645, "attachment_id": null, "id": 129530, "time": "2009-08-06T05:39:11Z", "creator": "trawick@apache.org", "creation_time": "2009-08-06T05:39:11Z", "is_private": false, "text": "This pid is supposed to wake up for the next client connection:\n\n* pstack PID :\n fefcb904 portfs   (6, 8, 1ed548, 2, 1, ffbffa80)\n ff21a994 apr_pollset_poll (1ed508, 0, 989680, ffbffaf8, ffbffaf4, 11177) + 12c\n 0006a218 child_main (18, 989400, 9a400, 1f34d0, 1, 9c400) + 378\n\nFrom the truss I guess it is waking up every 10 seconds or so (whatever the prefork timeout is), but never finding a new connection.\n\nI don't know exactly what is causing the problem.  I had a similar situation with the event MPM once and this same implementation of apr_pollset_poll(), but I didn't have time to debug or to narrow it down to one of {Event MPM, APR, Solaris kernel}.\n\nYou will likely be able to work around the problem by selecting a different poll implementation.  It should be as easy as \n\n$ make distclean\n$ export ac_cv_func_port_create=no\n$ ./configure [normal configure options]\n\n(Does that look right to others following the bug list?)\n\nFrom another standpoint:\n\n>In this state, neither any answer packets were generated (tested with network sniffer) nor any log lines written.\n\nThe TCP layer should answer a SYN packet.  Did that happen?\n\nWhat does netstat show at the time of the hang?  If connections are able to reach the ESTABLISHED state but not responded to, then TCP is doing the right thing and httpd isn't finding the connection.  If none reach the ESTABLISHED state, then it is a TCP layer issue.\n\nWhat changed in 2.2.12?\n\nThe Solaris port code changed in APR, but it doesn't look dangerous:\n\n+    {\n+        int flags;\n+\n+        if ((flags = fcntl((*pollset)->port_fd, F_GETFD)) == -1)\n+            return errno;\n+\n+        flags |= FD_CLOEXEC;\n+        if (fcntl((*pollset)->port_fd, F_SETFD, flags) == -1)\n+            return errno;\n+    }"}, {"count": 6, "tags": [], "creator": "trawick@apache.org", "text": "BTW, what exactly did you do to clear up the hang?", "id": 129531, "time": "2009-08-06T05:44:18Z", "bug_id": 47645, "creation_time": "2009-08-06T05:44:18Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 47645, "text": "Before recompiling and doing new tests (which I have to delay till after the next hang), here some remarks:\n\n> I had a similar situation\n>with the event MPM once and this same implementation of apr_pollset_poll(),\n>but I didn't have time to debug or to narrow it down to one of {Event MPM,\n>APR, Solaris kernel}.\n>You will likely be able to work around the problem by selecting a different\n>poll implementation.\n\nAs far as I can see, 2.2.11 used exactly the same implementation, without any difficulties. The only change now is setting FD_CLOEXEC.\n\n>The TCP layer should answer a SYN packet.  Did that happen?\n>What does netstat show at the time of the hang?  If connections are able to\n>reach the ESTABLISHED state but not responded to, then TCP is doing the right\n>thing and httpd isn't finding the connection.  If none reach the ESTABLISHED\n>state, then it is a TCP layer issue.\n\nI have to wait for the next hang, but as far as I remember, snoop did not show any 'A' packets as reply to 'S' packets. If I remember the netstat output correctly, old connections were visible, but no new ones.\n\n>BTW, what exactly did you do to clear up the hang?\n\nOften nothing, but then it took hours to recover. Graceful restart always cleared the hang.", "id": 129533, "time": "2009-08-06T06:43:46Z", "creator": "strube@physik3.gwdg.de", "creation_time": "2009-08-06T06:43:46Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 47645, "attachment_id": null, "text": ">I have to wait for the next hang, but as far as I remember, snoop did not show\n>any 'A' packets as reply to 'S' packets. If I remember the netstat output\n>correctly, old connections were visible, but no new ones.\n\nNo, my memory seems to be bad! Now a new hang occurred, but new connection attempts do some handshake, becoming ESTABLISHED. Also netstat shows a lot of connections in CLOSE_WAIT state, which vanished after graceful restart (done in order to revive the server).", "id": 129540, "time": "2009-08-06T08:16:24Z", "creator": "strube@physik3.gwdg.de", "creation_time": "2009-08-06T08:16:24Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 47645, "attachment_id": null, "text": ">You will likely be able to work around the problem by selecting a different\n>poll implementation.\n\nFor testing, I compiled two new variants of libapr-1.so.0.3.7. First, I removed the line \"#define HAVE_PORT_CREATE 1\" from srclib/apr/include/arch/unix/apr_private.h, causing poll() instead of port_create() to be used (I verified that no reference to port_create() existed any more in the library). With this library, no hangs happened in 3,5 days.\nSecond, I used port_create() but removed the two occurences of fcntl(fd, F_SETFD, flags) from srclib/apr/poll/unix/port.c, making it act as in httpd-2.2.11. But in spite of this, there soon were hangs again.\n\nThus, NOT using port_create() seems to be a workaround. But still, I am not content with this, because 2.2.11 also used port_create() without ANY difficulties! (This is why I also tested the effect of F_SETFD in poll.c, which was new since 2.2.11. But there is F_SETFD in many other places, too.) The actual reason of the hanging is, IMHO, still unknown (some subtle, machine-dependent timing problem?).", "id": 129596, "time": "2009-08-10T07:44:54Z", "creator": "strube@physik3.gwdg.de", "creation_time": "2009-08-10T07:44:54Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 47645, "attachment_id": null, "text": "Thanks so much for the valuable research.\n\nI agree that disabling port_create() is not a satisfying work-around; there's no question that something needs to be fixed, but I don't know where (kernel, APR, httpd, or even compiler).  It's more than a little astonishing that you're encountering this with the simplest MPM, with APR/httpd threading support disabled.\n\nI guess that the problem has been there all along but is triggered by some seemingly unrelated change in 2.2.12.", "id": 129626, "time": "2009-08-11T12:29:11Z", "creator": "trawick@apache.org", "creation_time": "2009-08-11T12:29:11Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 47645, "text": "I was able to reproduce the event port problem then run successfully with this patch, which applies cleanly to the APR in httpd 2.2.12 or 2.2.13.  (It isn't expected to be needed for httpd older than 2.2.12, unless a certain prefork MPM fix has been applied on top of 2.2.11).\n\n----------cut here-----------\n--- poll/unix/port.c.orig\t2009-08-19 13:48:22.876217458 -0400\n+++ poll/unix/port.c\t2009-08-19 13:49:49.908294412 -0400\n@@ -320,6 +320,17 @@\n     ret = port_getn(pollset->port_fd, pollset->port_set, pollset->nalloc,\n                     &nget, tvptr);\n \n+    if (ret == -1 && nget > 0) {\n+        /* On at least some levels of Solaris, -1/ETIME can be\n+         * reported at the same time an event is returned.\n+         * Since the kernel forgets the event condition as soon as\n+         * it is returned, we have to ignore the -1/ETIME and\n+         * process the event to prevent a deadlock.\n+         */\n+\n+        ret = 0;\n+    }\n+\n     /* decrease the waiting ASAP to reduce the window for calling \n        port_associate within apr_pollset_add() */\n     apr_atomic_dec32(&pollset->waiting);\n------------cut here-----------\n\nIf anyone tries this patch, please report back.", "id": 129795, "attachment_id": null, "creator": "trawick@apache.org", "creation_time": "2009-08-19T11:33:44Z", "time": "2009-08-19T11:33:44Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 47645, "attachment_id": null, "id": 129804, "time": "2009-08-20T00:45:15Z", "creator": "strube@physik3.gwdg.de", "creation_time": "2009-08-20T00:45:15Z", "is_private": false, "text": "> If anyone tries this patch, please report back.\n\nBefore I try: There is another occurrence of port_getn() in port.c on line 501 (after your patch; 490 original). Shouldn't the same patch be applied there, too?\n(BTW, unfortunately I can hardly carry out tests now because I'll be absent for three weeks after tomorrow.)"}, {"count": 13, "tags": [], "creator": "trawick@apache.org", "attachment_id": 24161, "id": 129901, "time": "2009-08-24T09:48:44Z", "bug_id": 47645, "creation_time": "2009-08-24T09:48:44Z", "is_private": false, "text": "Created attachment 24161\nFix for PR 47645 to use with apr 1.3.3-1.3.8 (and possibly earlier)\n\nhttpd users: This works with httpd 2.2.11-2.2.13 (and possibly earlier levels).\ncd to the srclib/apr directory before applying patch."}, {"count": 14, "tags": [], "bug_id": 47645, "text": "(In reply to comment #12)\n> > If anyone tries this patch, please report back.\n> \n> Before I try: There is another occurrence of port_getn() in port.c on line 501\n> (after your patch; 490 original). Shouldn't the same patch be applied there,\n> too?\n> (BTW, unfortunately I can hardly carry out tests now because I'll be absent for\n> three weeks after tomorrow.)\n\nThat unhandled path is for an API isn't used in httpd 2.2.x, but the patch I just attached does fix the problem for that API.\n\nA fix has been committed to APR trunk, 1.4.x, and 1.3.x branches for the next 1.3.x release.", "id": 129902, "attachment_id": null, "creator": "trawick@apache.org", "creation_time": "2009-08-24T09:50:32Z", "time": "2009-08-24T09:50:32Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 47645, "attachment_id": null, "id": 130701, "time": "2009-09-26T19:32:47Z", "creator": "jsl@apache.org", "creation_time": "2009-09-26T19:32:47Z", "is_private": false, "text": "I would like to chime in here and add that this issue doesn't only affect Solaris, but Linux (specifically RH9, 2.4 kernel) as well.\n\nI upgraded to 2.2.13 this weekend and experienced the exact same issues.\n\nUpgraded firstly to apr-1.3.8, no change.  Then applied the patch attached here and things are working fine again.\n\n(Point of note to readers: I also then saw MySQL connections fill with queries in a locked state when running Gallery -- you may need to kill some queries if you hit this issue)."}, {"count": 16, "tags": [], "bug_id": 47645, "attachment_id": null, "id": 130704, "time": "2009-09-27T03:25:17Z", "creator": "rpluem@apache.org", "creation_time": "2009-09-27T03:25:17Z", "is_private": false, "text": "(In reply to comment #15)\n> I would like to chime in here and add that this issue doesn't only affect\n> Solaris, but Linux (specifically RH9, 2.4 kernel) as well.\n\nYou must be affected by something else. Linux does not have event ports but epoll.\n\n> I upgraded to 2.2.13 this weekend and experienced the exact same issues.\n> \n> Upgraded firstly to apr-1.3.8, no change.  Then applied the patch attached here\n> and things are working fine again.\n\nAs said this is not possible. The patch attached in #13 changes code that is never executed on Linux."}, {"count": 17, "tags": [], "bug_id": 47645, "attachment_id": null, "text": "(In reply to comment #16)\n> You must be affected by something else. Linux does not have event ports but\n> epoll.\n\nWell, that's strange, because either this patch, or me clearing my MySQL connections (which was caused by this, I'm sure of it) fixed the issue.\n\n> As said this is not possible. The patch attached in #13 changes code that is\n> never executed on Linux.\n\nVery strange.  I guess I'l revert my patch and rebuild and try again.", "id": 130714, "time": "2009-09-27T15:25:35Z", "creator": "jsl@apache.org", "creation_time": "2009-09-27T15:25:35Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 47645, "text": "My apologies... a clean rebuild and everything is working fine.", "id": 130715, "attachment_id": null, "creator": "jsl@apache.org", "creation_time": "2009-09-27T16:08:49Z", "time": "2009-09-27T16:08:49Z", "is_private": false}, {"count": 19, "text": "Comment on attachment 24161\nFix for PR 47645 to use with apr 1.3.3-1.3.8 (and possibly earlier)\n\n>--- poll/unix/port.c.orig\t2009-08-21 08:16:52.140947520 -0400\n>+++ poll/unix/port.c\t2009-08-21 08:18:58.662675195 -0400\n>@@ -325,6 +325,11 @@\n>     apr_atomic_dec32(&pollset->waiting);\n>     (*num) = nget;\n> \n>+    if (ret == -1 && nget &&\n>+        (errno == ETIME || errno == EINTR)) {\n>+        ret = 0;\n>+    }\n>+\n>     if (ret == -1) {\n>         (*num) = 0;\n>         if (errno == EINTR) {\n>@@ -490,6 +495,11 @@\n>     ret = port_getn(pollcb->port_fd, pollcb->port_set, pollcb->nalloc,\n>                     &nget, tvptr);\n> \n>+    if (ret == -1 && nget &&\n>+        (errno == ETIME || errno == EINTR)) {\n>+        ret = 0;\n>+    }\n>+\n>     if (ret == -1) {\n>         if (errno == ETIME || errno == EINTR) {\n>             rv = APR_TIMEUP;", "bug_id": 47645, "is_private": false, "id": 174183, "time": "2014-03-31T06:07:36Z", "creator": "464054330@qq.com", "creation_time": "2014-03-31T06:07:36Z", "tags": [], "attachment_id": 24161}]
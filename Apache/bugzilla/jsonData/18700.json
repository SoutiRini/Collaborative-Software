[{"count": 0, "attachment_id": null, "creator": "nicolas.mailhot@laposte.net", "is_private": false, "id": 34499, "time": "2003-04-04T09:08:00Z", "bug_id": 18700, "creation_time": "2003-04-04T09:08:00Z", "tags": [], "text": "Hi,\n\nWe use xsls to generate a fairly big final static build.xml. It includes\nnumerous build targets, and therefore classpaths are pretty involved.\n\nA typical classpath is declared at the top of the file like this :\n\n   <path id=\"webkit.classpath\">\n      <!--Direct dependencies-->\n      <!-- Jars generated during another build stage -->\n      <fileset dir=\"${lib}\">\n\t <include name=\"api_common-3.5.137.jar\"/>\n\t <include name=\"api_search-3.5.137.jar\"/>\n\t <include name=\"api_database-3.5.137.jar\"/>\n      </fileset>\n      <!-- external binary jars -->\n      <pathelement path=\"${servlet-2.2b.servlet.jar}\"/>\n      <pathelement path=\"${xml-tr2.xml.jar}\"/>\n      <pathelement path=\"${foo-1.1.9.bar.jar}\"/>\n      <!--Indirect dependencies : inherited paths-->\n      <path refid=\"api_common.classpath\"/>\n      <path refid=\"api_search.classpath\"/>\n      <path refid=\"api_database.classpath\"/>\n   </path>\n\nThe external pathelements (servlet-2.2b.servlet.jar) are read from a property\nfile if it is found :\n<loadproperties srcFile=\"extlib.properties\"/>) \n\nand autodetected otherwise \n<exec executable=\"build-classpath\" failonerror=\"true\"\noutputproperty=\"servlet-2.2b.servlet.jar\">\n    <arg value=\"servlet\"/>\n</exec>\n\nAn echo check shows the properties are correctly set\n[echo] servlet-2.2b.servlet.jar = extlib/servlet-2.2b/servlet-2.2b.jar\n\nHowever a later javac task in another target \n\n <javac verbose=\"off\" deprecation=\"off\" optimize=\"off\" encoding=\"iso-8859-15\"\nincludeAntRuntime=\"no\" fork=\"yes\" debug=\"off\" destdir=\"${webkit.class}\">\n         <src path=\"${webkit.java}\"/>\n         <classpath refid=\"webkit.classpath\"/>\n      </javac>\n\nfails with :\n\n    [javac]\n/tmp/test/kitu-3.5.137/src/java/webkit/com/foo/common/ClientPlatform.java:13:\ncannot resolve symbol\n    [javac] symbol  : class ServletRequest\n    [javac] location: package servlet\n    [javac] import javax.servlet.ServletRequest;\n\nso somehow the pathelements are not resolved, as shown by an echo check :\n\n<property name=\"mytest\" refid=\"webkit.classpath\"/>\n<echo> test : ${mytest}</echo>\n\ngives :\n\n[echo]  test :\n/tmp/test/kitu-3.5.137/lib/api_database-3.5.137.jar:/tmp/test/kitu-3.5.137/lib/api_search-3.5.137.jar:/tmp/test/kitu-3.5.137/lib/api_common-3.5.137.jar:/tmp/test/kitu-3.5.137/${servlet-2.2b.servlet.jar}:/tmp/test/kitu-3.5.137/${xml-tr2.xml.jar}:/tmp/test/kitu-3.5.137/${foo-1.1.9.bar.jar}\n\nI'm really at a loss here, my (admitedly shallow) reading of ant manual is that\nthis should work, but it doesn't.\n\nDid I make a stupid mistake somewhere ? Is there any workaround here ?"}, {"count": 1, "tags": [], "bug_id": 18700, "text": "It may be due to the ordering in the build file. If the loadproperties task is\nexecuted after the path definition, the servlet-2.2b.servlet.jar property will\nnot have been set when the path is constructed. Later attempts to echo the\nproperty will be OK as it will be defined by then. \n\nIf this is the case, you will need to move the path definition into a target to\ncontrol the order of property setting operations. \n\nI'm going to mark this as invalid based on this assumption. If it isn't the\ncase, or you want to follow up, please reopen.", "id": 34606, "time": "2003-04-07T04:22:50Z", "creator": "conor@apache.org", "creation_time": "2003-04-07T04:22:50Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "nicolas.mailhot@laposte.net", "is_private": false, "id": 34609, "creation_time": "2003-04-07T06:46:47Z", "time": "2003-04-07T06:46:47Z", "bug_id": 18700, "text": "Well, I had more or less figured it for myself.\nMoving the property part in a refided classpath that is defined in a target\nexecuted after the loadproperties works.\n\nHowever there is a big consistency problem.\n\nThe rest of the classpath references files that do not exist yet (since they\nwill be generated later), but ant has no problem defering resolution till the\nclasspath is actually used. Not doing the same for properties is confusing, and\nyou end up with bits of classpath scattered all over the build file wich makes\ndebuging a lot harder than it should be.\n\nThese classpathes are top-level, not defined into a target. Resolving them out\nof targets where they can not be used anyway seems like an implementation problem.\n\nAnyway it works now and I'll try not to forget this ant quirk, so you can close\nthis if you disagree.", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 18700, "attachment_id": null, "id": 34614, "time": "2003-04-07T10:03:09Z", "creator": "conor@apache.org", "creation_time": "2003-04-07T10:03:09Z", "is_private": false, "text": "I understand your comments but I don't see that it is a 'big consistency\nproblem'. There is a difference between not checking for the existence of a file\nand not knowing the file's name. \n\nIf we were to defer the resolution of a property to the point of use, the path\nobject could not be configured at all until use. Since the path elements take\nFile arguments  the File objects could not be constructed until the path is to\nbe used whereupon it would have to be configured. \n\nWe also would need to understand what is the point of use. You can argue that\nthe <path> instance is a \"use\" of the properties and they therefore they should\nbe resolved. If we decide to resolve on use of the path, we just shift the\nproblem. Say there was another type that took a path as an argument. Should we\ndefer the resolution of the path until the use of this new type. That might be\npossible.\n\nThe rules of Ant configuration are currently that property resolution takes\nplace at the point an object is configured, not where it is used. This is only\nan issue for datatypes (since they are likely to defined and then used - which\ndoesn't happen for tasks)\n\nI can think of how to do it - it would involve leaving types as UnknownElements\nuntil a reference was fetched from the Project. That sort of change is pretty\nmajor - it would need some discussion on ant's dev list. \n\nI'm marking this as WONTFIX for now. If you want to discuss further, lets do it\non ant dev."}]
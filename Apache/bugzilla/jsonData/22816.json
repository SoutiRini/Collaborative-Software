[{"count": 0, "tags": [], "bug_id": 22816, "text": "Overview Description: \n\nIf a manifest file has multiple Class-Path: attributes and the second (or \nsubsequent) are continued, then the continuted lines are not parsed correctly.\n\nSteps to Reproduce: \n\n1) Use a MANIFEST.MF file like this\n\n  Manifest-Version: 1.0\n  Created-By: 1.3.1 (IBM Corporation)\n  Main-Class: com.ebay.kernel.batch.driver.BatchMain\n  Class-Path: ../../../config/classes12.zip\n  Class-Path: ../syslib/AFBusinessAPI.jar ../syslib/AFCommonAPI.jar ../s\n   yslib/AFPresentationAPI.jar ../syslib/AFRT.jar \n\n[note: last line is continuation of line above it]\n\n2) Use Ant to build a .jar using this manifest.  For example, refer to the \nabove file with ${manifest} in the task below\n\n <jar jarfile=\"${app.build.dir}/bin/BatchMain.jar\" \n      basedir=\"${global.build.temp.dir}/BatchMain\" \n      manifest=\"${manifest}\"/>\n\n\nActual Results: \n\nYou would expect that the supplied manifest would be used.  However, the \ncontinued second Class-Path: attribute is not correctly parsed.  The \ngenerated .jar file has the following manifest file\n\n  Manifest-Version: 1.0\n  Ant-Version: Apache Ant @VERSION@ \n  Created-By: 1.3.1 (IBM Corporation)\n  Main-Class: com.ebay.kernel.batch.driver.BatchMain\n  Class-Path: ../../../config/classes12.zip\n  Class-Path: ../syslib/AFBusinessAPI.jar ../syslib/AFCommonAPI.jar ../s\n\nBuild Date & Platform: \n\n  Ant 1.5.2\n\n\nAdditional Builds and Platforms: \n\n  Verified that the bug still exists by code inspection of latest nightly build \navailable, ant_20030829101220.tar.gz\n\n\nAdditional Information: \n\nThe bug occurs in the parsing of the manifest section, in the method \nManifest.Section.read(BufferedReader reader) which begins around line 415 of \nManifest.java.  The main loop of the method uses a local variable, attribute, \nto hold the attribute parsed in the previous iteration.  When a continuation \nline is detected, the continued value is added to this attribute.  Attributes \nare added to the section under construction by calling the method \naddAttributeAndCheck.  This method explicitly checks for additional Class-Path: \nAttribute objects.  If any are found, the additional values are added to the \nClass-Path: Attribute already stored in the section rather than adding a whole \nnew Attribute object to the section.  The secondary Class-Path: Attribute \nobject passed to addAttributeAndCheck is discarded and not added to the \nsection.  Unfortunately, the code that adds the continuation lines in the read\n() method is unaware of this, so it adds the continuation lines to the \ndiscarded object instead of the one stored in the attributes table of the \nsection.\n\nOne way to fix the problem would be to add two lines to the read() method as \nshown below to ensure that the local variable, attribute, always holds the \nright Class-Path: attribute\n\npublic String read(BufferedReader reader)\n     throws ManifestException, IOException {\n    Attribute attribute = null;\n    while (true) {\n        String line = reader.readLine();\n        if (line == null || line.length() == 0) {\n            return null;\n        }\n        if (line.charAt(0) == ' ') {\n            // continuation line\n            if (attribute == null) {\n                if (name != null) {\n                    // a continuation on the first line is a\n                    // continuation of the name - concatenate this\n                    // line and the name\n                    name += line.substring(1);\n                } else {\n                    throw new ManifestException(\"Can't start an \"\n                        + \"attribute with a continuation line \" + line);\n                }\n            } else {\n                attribute.addContinuation(line);\n            }\n        } else {\n            attribute = new Attribute(line);\n            String nameReadAhead = addAttributeAndCheck(attribute);\n            if (nameReadAhead != null) {\n                return nameReadAhead;\n            }\n            // In the rare case where a second Class-Path: attribute is\n            // continued, we need to set the attribute loop variable\n            // to the stored attribute, not the temporary one created\n            // when the first line of the attribute value is read.\n            if (attribute.getKey().equals(ATTRIBUTE_CLASSPATH)) {\n            \tattribute = (Attribute) attributes.get(ATTRIBUTE_CLASSPATH); \n            }\n        }\n    }\n}\n\n\n[The additional lines are the two that follow the comment, // In the rare \ncase... at the end of the loop]\n\nI gave this a severity of Major, even though the use of multiple Class-Path: \nattributes is somewhat obscure because I need them and this bug is preventing \nme from using the <jar> task in a portion of our build.   There doesn't seem to \nbe a workaround available using this type of manifest file with Ant.", "id": 43474, "time": "2003-08-29T16:07:20Z", "creator": "ddouglas@ebay.com", "creation_time": "2003-08-29T16:07:20Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "text": "Great bug report - thanks. Fixed in CVS", "id": 43714, "time": "2003-09-04T12:00:59Z", "bug_id": 22816, "creation_time": "2003-09-04T12:00:59Z", "is_private": false}]
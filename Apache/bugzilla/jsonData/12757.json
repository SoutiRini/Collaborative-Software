[{"count": 0, "tags": [], "creator": "skelly@mynrma.com.au", "attachment_id": null, "id": 23008, "time": "2002-09-18T03:09:16Z", "bug_id": 12757, "creation_time": "2002-09-18T03:09:16Z", "is_private": false, "text": "File: /modules/experimental/util_ldap_cach.c\n\napr_status_t util_ldap_cache_init(apr_pool_t *pool, apr_size_t reqsize)\n{\n#if APR_HAS_SHARED_MEMORY\n    apr_status_t result;\n\n    - result = apr_shm_create(&util_ldap_shm, reqsize, \"/tmp/ldap_cache\", pool);\n    + result = apr_shm_create(&util_ldap_shm, reqsize, NULL, pool);\n    if (result != APR_SUCCESS) {\n        return result;\n    }\n\npool);\n#endif\n....\n}\nThe ldap cache used by mod_ldap and mod_auth_ldap tries to create a shared \nmemory file for each process forked. The problem is that only the first process \nis able to create the file, all the other processes fail to create the file \nbecause it already exists. This disables caching on all processes other than \nthe initial process. Caching LDAP authentication is essential as this is a slow \ntask, especially with Microsoft Active Directory. One solution on linux is to \nuse an anonymous shared memory file (fileName is NULL) but apparently anonymous \nshared memory is not supported on other platforms. I assume all processes \nshould share a single cache. Would anonymous shared memory create a new file \nfor each process? If this is not desired, only the first process should create \nthe file and all the other processes should attach to in."}, {"count": 1, "attachment_id": null, "creator": "Michael.Dean@detir.qld.gov.au", "is_private": false, "id": 27587, "time": "2002-12-10T11:45:26Z", "bug_id": 12757, "creation_time": "2002-12-10T11:45:26Z", "tags": [], "text": "This also happens on a solaris 8 platform with the error\n\n[debug] util_ldap.c(1066): (17)File exists: [4449] ldap cache init: File exists\n\n\ni tried disabling the code in the #if APR_HAS_SHARED_MEMORY statements to at\nleast get the per server cache to work although it has the error\n\n[debug] util_ldap.c(1066): [8329] ldap cache init: Error 0\n"}, {"count": 2, "attachment_id": null, "creator": "scooter@gene.com", "text": "Actually, wouldn't it be better to just attach to the named file?  I implemented\nsomething like this:\n\ncvs diff -c util_ldap_cache.c \nIndex: util_ldap_cache.c\n===================================================================\nRCS file:\n/usr/src/cvs/cvsroot/contrib/Apache/modules/experimental/util_ldap_cache.c,v\nretrieving revision 1.1.1.1\ndiff -c -r1.1.1.1 util_ldap_cache.c\n*** util_ldap_cache.c   8 Oct 2002 20:49:28 -0000       1.1.1.1\n--- util_ldap_cache.c   10 Jan 2003 22:55:51 -0000\n***************\n*** 296,304 ****\n      apr_status_t result;\n  \n      result = apr_shm_create(&util_ldap_shm, reqsize, \"/tmp/ldap_cache\", pool);\n!     if (result != APR_SUCCESS) {\n          return result;\n-     }\n  \n      /* This will create a rmm \"handler\" to get into the shared memory area */\n      apr_rmm_init(&util_ldap_rmm, NULL,\n--- 296,310 ----\n      apr_status_t result;\n  \n      result = apr_shm_create(&util_ldap_shm, reqsize, \"/tmp/ldap_cache\", pool);\n!     if (result == EEXIST) {\n!       /*\n!        * The cache could have already been created (i.e. we may be a child\nprocess).  See\n!        * if we can attach to the existing shared memory\n!        */\n!       result = apr_shm_attach(&util_ldap_shm, \"/tmp/ldap_cache\", pool);\n!     } \n!     if (result != APR_SUCCESS)\n          return result;\n  \n      /* This will create a rmm \"handler\" to get into the shared memory area */\n      apr_rmm_init(&util_ldap_rmm, NULL,\n\nand it seems to work for me.\n", "id": 29166, "time": "2003-01-10T22:58:21Z", "bug_id": 12757, "creation_time": "2003-01-10T22:58:21Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "creator": "minfrin@sharp.fm", "text": "Patch applied to v2.0.45-dev and v2.1.0-dev", "id": 29774, "time": "2003-01-21T10:57:58Z", "bug_id": 12757, "creation_time": "2003-01-21T10:57:58Z", "tags": [], "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 31603, "text": "When dynamically modifying a SVG document from Java, the update\nmanager uses the \"org.apache.batik.min_repaint_time\" property to\ndetermine how long to wait after finishing an update before starting\na new update. This is a good feature.\n\nHowever, this overall feature is only 1/2 complete, here's why:\nright now, my application does a bunch of consecutive updates.\nThe first update immediately causes the update manager to re-render.\nSo the first update appears immediately. Then the update manager\ngoes back to find all the N-1 other updates in the queue. It does\nthese and then re-renders again.\n\nThe visual effect is that you see the first update (only), then you\nsee all the rest. This is visually ugly.\n\nOf course, what's desired is to see all the updates at once, i.e.,\nhave the update manager wait just a little bit longer after seeing\nthe first update in the queue before starting the re-rendering, so\nthat all the other updates in the queue can complete as well.\n\nA way to allow this would be to have a second parameter called,\ne.g., \"org.apache.batik.max_repaint_latency\", which would control\nhow long the update manager waits before rendering after receiving\nthe *first* update, in anticipation of more immediate updates about\nto be added to the queue. If this value existed, then virtually any\nsetting > 0 would fix my problem, because all my updates get added to the\nqueue at the same time (i.e., in rapid succession).\n\nOf course, this property could default to zero to preserve the existing\nbehavior, so this change could be backward compatible. However, I think\nthe default value might better off be non-zero but small, e,g, 25ms.", "id": 64842, "time": "2004-10-08T16:48:27Z", "creator": "archie@dellroad.org", "creation_time": "2004-10-08T16:48:27Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 31603, "text": "I've done something slightly different which should give\nsimilar results.  Basically it tracks when the rendering\ngoes 'out of date' with the document (by tracking when\na runnable starts) if the document is out of date\nless than MIN_REPAINT_TIME and there are runnables pending\nthen it will hold off updating the document and check\nagain after the next runnable runs.\n\nAlso you might consider 'batching' your updates into\none runnable, this would also solve the problem (although\nI can understand that architecturally it might not\nbe as nice from your point of view).", "id": 66063, "time": "2004-10-29T12:17:14Z", "creator": "deweese@apache.org", "creation_time": "2004-10-29T12:17:14Z", "is_private": false, "attachment_id": null}]
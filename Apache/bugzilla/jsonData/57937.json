[{"count": 0, "tags": [], "bug_id": 57937, "text": "Created attachment 32744\nResult of a diff -u operated on the original code and the pseudo-code containing a 2fa workaround\n\nHi there,\n\nfor an application to be deployed on a TomEE we need the support for two \nfactor authentication.\nAre there planned development efforts going into that direction?\n\n\nAs temporary workaround we patched the class FormAuthenticator, so that a second factor (a 2fa token) is additionlly evaluated. This patch is in the style of AuthenticRoast, an solution available for Tomcat 1.6.\n\nHere the code patch in pseudo code:\n\n\n\npackage org.apache.catalina.authenticator;\n\n[original code omitted with imports]\n\n/**\n * An <b>Authenticator</b> and <b>Valve</b> implementation of FORM BASED Authentication, as\n * described in the Servlet API Specification, Version 2.2.\n */\npublic class FormAuthenticator extends AuthenticatorBase {\n\n  [original code omitted]\n\n\n  // --------------------------------------------------------- Public Methods\n\n  /**\n   * Authenticate the user making this request, based on the specified login configuration. Return\n   * <code>true</code> if any specified constraint has been satisfied, or \n<code>false</code> if we\n   * have created a response challenge already.\n   *\n   * @param request Request we are processing\n   * @param response Response we are creating\n   * @param config Login configuration describing how authentication should be performed\n   *\n   * @exception IOException if an input/output error occurs\n   */\n  @Override\n  public boolean authenticate(Request request, HttpServletResponse response, LoginConfig config) throws IOException {\n\n    // References to objects we will need later \n    Session session = null;\n    // Have we already authenticated someone?\n    Principal principal = request.getUserPrincipal();\n    String ssoId = (String) request.getNote(Constants.REQ_SSOID_NOTE);\n \n    [original code omitted]\n\n    // Yes -- Acknowledge the request, validate the specified credentials\n    // and redirect to the error page if they are not correct\n    request.getResponse().sendAcknowledgement();\n    Realm realm = context.getRealm();\n    if (characterEncoding != null) {\n      request.setCharacterEncoding(characterEncoding);\n    }\n\n    String username = request.getParameter(Constants.FORM_USERNAME);\n    String password = request.getParameter(Constants.FORM_PASSWORD);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Authenticating username '\" + username + \"'\");\n    }\n\n\n    // BEGIN --- Customized code for two factor authentication Part I --- BEGIN\n    String password2factor = request.getParameter(\"j_2fa\");\n    // A customized Realm Class which implements a second factor authentication\n    final TwoFactorRealm twoFactorRealm = new TwoFactorRealm(...);\n    boolean twoFactorSuccessful = twoFactorRealm.authenticate(username, password2factor);\n    if (log.isWarnEnabled() && !twoFactorSuccessful) {\n      log.warn(\"Authentication 2FA failed for user \" + username);\n    }\n    // END --- Customized code for two factor authentication Part I --- END\n \n\n    principal = realm.authenticate(username, password);\n\n    // BEGIN --- Customized code for two factor authentication Part II --- BEGIN\n    if (principal == null || !twoFactorSuccessful) {\n      log.warn(\"Authentication of '\" + username + \"' failed: [principal=\" + principal + \"], [twoFactorSuccessful=\" + twoFactorSuccessful + \"]\");\n      forwardToErrorPage(request, response, config);\n      return (false);\n    }\n    // END --- Customized code for two factor authentication Part II --- END\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Authentication of '\" + username + \"' was successful\");\n    }\n\n    if (session == null) {\n      session = request.getSessionInternal(false);\n    }\n    if (session == null) {\n      if (containerLog.isDebugEnabled()) {\n        containerLog.debug(\"User took so long to log on the session expired\");\n      }\n      if (landingPage == null) {\n        response.sendError(HttpServletResponse.SC_REQUEST_TIMEOUT, sm.getString(\"authenticator.sessionExpired\"));\n      } else {\n        // Make the authenticator think the user originally requested\n        // the landing page\n        String uri = request.getContextPath() + landingPage;\n        SavedRequest saved = new SavedRequest();\n        saved.setMethod(\"GET\");\n        saved.setRequestURI(uri);\n        saved.setDecodedRequestURI(uri);\n        request.getSessionInternal(true).setNote(Constants.FORM_REQUEST_NOTE, saved);\n        response.sendRedirect(response.encodeRedirectURL(uri));\n      }\n      return (false);\n    }\n\n    // Save the authenticated Principal in our session\n    session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);\n\n    // Save the username and password as well\n    session.setNote(Constants.SESS_USERNAME_NOTE, username);\n    session.setNote(Constants.SESS_PASSWORD_NOTE, password);\n\n    // Redirect the user to the original request URI (which will cause\n    // the original request to be restored)\n    requestURI = savedRequestURL(session);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Redirecting to original '\" + requestURI + \"'\");\n    }\n    if (requestURI == null) {\n      if (landingPage == null) {\n        response.sendError(HttpServletResponse.SC_BAD_REQUEST,sm.getString(\"authenticator.formlogin\"));\n      } else {\n        // Make the authenticator think the user originally requested\n        // the landing page\n        String uri = request.getContextPath() + landingPage;\n        SavedRequest saved = new SavedRequest();\n        saved.setMethod(\"GET\");\n        saved.setRequestURI(uri);\n        saved.setDecodedRequestURI(uri);\n        session.setNote(Constants.FORM_REQUEST_NOTE, saved);\n        response.sendRedirect(response.encodeRedirectURL(uri));\n      }\n    } else {\n      response.sendRedirect(response.encodeRedirectURL(requestURI));\n    }\n    return (false);\n\n  }\n\n  [original code omitted] \n \n}\n\nBest regards,\n\nMarco\n--\nDipl.-Inf. Marco Bellavia \nSoftware Engineering\n\nDENIC eG\nKaiserstra\u00dfe 75-77\n60329 Frankfurt am Main\nGERMANY\n\nAngaben nach \u00a7 25a Absatz 1 GenG:\nDENIC eG (Sitz: Frankfurt am Main)\nVorstand: Helga Kr\u00fcger, Andreas Musielak, Carsten Schiefner, Dr. J\u00f6rg \nSchweiger \nVorsitzender des Aufsichtsrats: Thomas Keller\nEingetragen unter Nr. 770 im Genossenschaftsregister, Amtsgericht \nFrankfurt am Main", "id": 183041, "time": "2015-05-19T14:39:27Z", "creator": "bellavia@denic.de", "creation_time": "2015-05-19T14:39:27Z", "is_private": false, "attachment_id": 32744}, {"count": 1, "tags": [], "bug_id": 57937, "attachment_id": null, "id": 183044, "time": "2015-05-19T19:09:31Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-05-19T19:09:31Z", "is_private": false, "text": "I'm not s big fan of the current implementation as a patch to FormAuthenticator. Why not do this as a subclass?"}, {"count": 2, "tags": [], "bug_id": 57937, "attachment_id": null, "id": 191397, "time": "2016-06-05T17:06:31Z", "creator": "markt@apache.org", "creation_time": "2016-06-05T17:06:31Z", "is_private": false, "text": "The patch is incomplete - it does not include the Realm changes necessary.\n\nThis patch implements one view of how this could be done. It is not implementing a standard.\n\nThis could be implemented as a JASPIC module (or even with JAAS).\n\nGiven all of the above, I don't think this should be included in the standard Tomcat distribution. If a plug-in module was developed to implement this, we could add a pointer to it on the wiki."}]
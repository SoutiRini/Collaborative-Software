[{"count": 0, "tags": [], "creator": "dmikusa@gopivotal.com", "attachment_id": null, "is_private": false, "id": 139500, "time": "2010-08-26T11:08:08Z", "bug_id": 49831, "creation_time": "2010-08-26T11:08:08Z", "text": "When using XAConnections with MSSQL it has been noticed that the physical connections are not being closed when DataSourceProxy.close(boolean all) is called. This method invokes org.apache.tomcat.jdbc.pool.PooledConnection.disconnent() which calls connection.close(). However, when used with SQLServer, the connection attribute is a proxy object (type com.microsoft.sqlserver.jdbc.SQLServerConnectionPoolProxy) which wraps the physical connection (of type com.microsoft.sqlserver.jdbc.SQLServerConnection). Calling close() on the proxy object only notifies the pool manager that the Connection is released back to the pool; it does not close the underlying physical connection.\n\nThis is what the PooledConnection.disconnent() implementation currently reads:\n\nprivate void disconnect(boolean finalize) {\n    if (isDiscarded()) {\n        return;\n    }\n    setDiscarded(true);\n    if (connection != null) {\n        try {\n            connection.close();\n        }catch (Exception ignore) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Unable to close underlying SQL connection\",ignore);\n            }\n        }\n    }\n    connection = null;\n    xaConnection = null;\n    lastConnected = -1;\n    if (finalize) parent.finalize(this);\n}\n\nIf the logic was changed to the following, it would properly closed the XAConnection with the MSSQL.\n\nprivate void disconnect(boolean finalize) {\n    if (isDiscarded()) {\n        return;\n    }\n    setDiscarded(true);\n    if (connection != null) {\n        try {\n            if (xaConnection != null) {\n                xaConnection.close(); \n            } else {\n                connection.close();\n            }\n        }catch (Exception ignore) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Unable to close underlying SQL connection\",ignore);\n            }\n        }\n    }\n    connection = null;\n    xaConnection = null;\n    lastConnected = -1;\n    if (finalize) parent.finalize(this);\n}"}, {"count": 1, "tags": [], "bug_id": 49831, "attachment_id": null, "text": "Thinking that the logic should be modified slightly...\n\n    private void disconnect(boolean finalize) {\n        if (isDiscarded()) {\n            return;\n        }\n        setDiscarded(true);\n        if (connection != null) {\n            try {\n                parent.disconnectEvent(this, finalize);\n                connection.close();\n                if (xaConnection != null) {\n                    xaConnection.close();\n                }\n            }catch (Exception ignore) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Unable to close underlying SQL connection\",ignore);\n                }\n            }\n        }\n        connection = null;\n        xaConnection = null;\n        lastConnected = -1;\n        if (finalize) parent.finalize(this);\n    }\n\nSince \"connection\" is always set it seems like it should always be closed.  Then if \"xaConnection\" is set, it should be closed as well.", "id": 139504, "time": "2010-08-26T14:21:41Z", "creator": "dmikusa@gopivotal.com", "creation_time": "2010-08-26T14:21:41Z", "is_private": false}, {"count": 2, "attachment_id": 25951, "creator": "dmikusa@gopivotal.com", "text": "Created attachment 25951\nPatch that implements alternate disconnect logic", "id": 139505, "time": "2010-08-26T14:25:04Z", "bug_id": 49831, "creation_time": "2010-08-26T14:25:04Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I applied your original patch. The relationship between connection and xaConnection is such that it was sufficient.\n\nThe fix will be included in jdbc-pool 1.0.9.0 onwards.", "id": 139763, "time": "2010-09-08T11:27:53Z", "bug_id": 49831, "creation_time": "2010-09-08T11:27:53Z", "is_private": false}]
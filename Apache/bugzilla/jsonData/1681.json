[{"attachment_id": null, "tags": [], "creator": "Daniel.Barclay@digitalfocus.com", "text": "The FileSet mechanism may need a way to specify files that accepts full file\npathnames (not just file pathname patterns that must be relative to a root\ndirectory).\n\nThe problem seems to be that an absolute filename does not work as a file \nname pattern in an \"includes\" attribute.\n\n(I say \"may\" above because maybe there's another solution to my problem.)\n\nI encountered the problem trying to refer to a file by absolute pathname \nfor an \"uptodate\" task:\n\n    <uptodate property=\"isUpToDate\" targetfile=\"build/.flag_file\" >\n      <srcfiles dir=\".\">\n        <include name=\"${xxx.fileLocation}\" />\n      </srcfiles>\n    </uptodate>\n\nThe value of property xxx.fileLocation is an absolute pathname (a\nWindows filename starting with \"C:/...\").\n\nThe above snippet does not work.  It acts as if it can't find the file, \nthat is, as if the given absolute pathname does not identify the file.\n\nIf I change the include element's name attribute value to a relative \npathname, it works.\n\nHowever, that does not seem to be an acceptable solution.  Either you'd\nhave to maintain separate properties to hold relative vs. absolute names,\nor you couldn't use absolute pathnames.  (Note that I'm not talking about\nhard-coded absolute pathnames, but absolute pathnames in properties built\nup relatively, based on the project's base directory.)\n\nIt should be possible to use absolute pathnames.\n\nSome possible solutions are:\n\n- have pattern matching compare a given pattern to the whole absolute \n  pathname of a candidate file (not just to the relative pathname after \n  the base directory)\n- (if pattern matching is intended to work that way but just doesn't on\n  Windows, try to fix handling of Windows pathnames)\n- add additional attibutes to take file names that are not patterns \n\n(Note that the last option also provides an escape mechanism for\nfiles whose names contains characters normally interpreted as wildcards.\nI don't recall whether Ant provides an escape mechanism for referring\nto such files, but it should, and if it doesn't, that last option is one \nway to do it.)", "count": 0, "id": 2356, "time": "2001-05-09T09:57:10Z", "bug_id": 1681, "creation_time": "2001-05-09T09:57:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 1681, "text": "Created attachment 341\nwindows absolute filenames starting with drive letters fix", "id": 3842, "time": "2001-07-19T08:59:40Z", "creator": "phil_walker@hp.com", "creation_time": "2001-07-19T08:59:40Z", "is_private": false, "attachment_id": 341}, {"count": 2, "tags": [], "bug_id": 1681, "text": "I stumbled on this bug on Linux as well.  I wanted to have an Uptodate task\ndepend on changes to the build file itself.  The way I tried to do this was\n\n <uptodate property=\"javadoc.notrequired\"\ntargetfile=\"${build.javadoc.dir}/packages.html\">\n  <srcfiles dir=\"${src.dir}\" includes=\"**/*.java\"/>\n  <srcfiles dir=\"/\" includes=\"${ant.file}\"/>\n </uptodate>\n\nSadly, this failed due to this bug and I had to hardcode the name of my build\nfile in a property.", "id": 11307, "time": "2002-02-28T16:14:28Z", "creator": "Stefan.Kuehnel@frontis.com", "creation_time": "2002-02-28T16:14:28Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 1681, "attachment_id": null, "id": 12582, "time": "2002-03-31T21:22:54Z", "creator": "holtdl@yahoo.com", "creation_time": "2002-03-31T21:22:54Z", "is_private": false, "text": "Implemented in CVS (UpToDate.java, rev 1.14)."}, {"count": 4, "tags": [], "creator": "holtdl@yahoo.com", "attachment_id": null, "text": "*** Bug 5454 has been marked as a duplicate of this bug. ***", "id": 12610, "time": "2002-04-01T05:58:25Z", "bug_id": 1681, "creation_time": "2002-04-01T05:58:25Z", "is_private": false}]
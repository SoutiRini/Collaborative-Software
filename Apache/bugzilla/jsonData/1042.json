[{"count": 0, "tags": [], "bug_id": 1042, "text": "I am experiencing a bug when using EntityResolvers with Xerces.\n\n\nIn DefaultEntityHandler.startReadingFromExternalEntity, fResolver\nis given the chance to resolve an InputSource.  Fair enough.\n\n\nBut for some reason in the call to fReaderFactory.createReader, the\noriginal (unresolved) SystemID is passed in.  If the InputSource\ncreated by the resolver has a null getByteStream, the original\nunresolved SystemID is used to open the byte stream.\n\n\nThis is the only place in createReader where the systemID is used.\nDoesn't it make more sense to use InputSource.getSystemID here instead?\n\n\nI am trying to use my EntityResolver to redirect http:// references\nto file:// references when I know that a local copy of a resource\nexists.  It makes sense that I should just be able to resolve\nthe SystemID.  Currently, I am forced to open a ByteStream inside\nthe EntityResolver as a workaround.\n\n\n-------------------------------------------------------\nSuggested Bug Fix: \n\n\nin DefaultReaderFactory.createReader:\n\n\nchange this:\n        if (is == null) {\n\n\n            // create url and open the stream\n            URL url = new URL(systemId);\n            is = url.openStream();\n        }\n\n\nto this:\n\n\n        if (is == null) {\n\n\n            // create url and open the stream\n            String urlSystemID = source.getSystemID();\n            if (urlSystemID == null) urlSystemID = systemID;\n            URL url = new URL(urlSystemId);\n            is = url.openStream();\n        }", "id": 1427, "time": "2001-03-20T05:59:01Z", "creator": "kcritz@mathworks.com", "creation_time": "2001-03-20T05:59:01Z", "is_private": false, "attachment_id": null}]
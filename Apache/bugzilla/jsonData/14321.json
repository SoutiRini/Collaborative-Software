[{"count": 0, "tags": [], "bug_id": 14321, "is_private": false, "id": 25835, "creation_time": "2002-11-06T23:54:57Z", "time": "2002-11-06T23:54:57Z", "creator": "kfranken@decisionmark.com", "text": "mod_deflate shows substantial memory leakage when used with dynamic content, at\nleast on WindowsXP. Below is a test module to generate some dynamic content and\na section of the httpd.conf file I used.\n\nThe URL http://localhost/compressed-dynamic leaks about 8k per request over the\ncourse of 20,000 requests using ab.exe; http://localhost/compressed-static and\nhttp://localhost/uncompressed-* did not show any leaks. The leak_test.html file\nused for the -static tests is just a saved version of one of the dynamic files.\n\n\nhttpd.conf\n### Leak testing\nAlias /leak_test \"E:/Apache2/leak_test\"\nAlias /uncompressed-static \"E:/Apache2/leak_test/leak_test.html\"\nAlias /compressed-static \"E:/Apache2/leak_test/leak_test.html\"\n\n<Directory \"E:/Apache2/leak_test\">\n\tOrder deny,allow\n\tAllow from all\n</Directory>\n\n<LocationMatch \"^/compressed-\">\n\tSetOutputFilter DEFLATE\n\tOrder deny,allow\n\tAllow from all\n</LocationMatch>\n<LocationMatch \"^/[a-z]+-dynamic\">\n\tSetHandler leak-test\n\tOrder deny,allow\n\tAllow from all\n</LocationMatch>\n\nmod_leak_test.c\n/* mod_leak_test */\n/* An example Apache 2.0 module that generates dynamic content that can be used\nto */\n/* test/demonstrate mod_deflate memory leakage */\n/* 11/6/02 Ken Franken */\n\n#include \"ap_config.h\"\n#include \"http_protocol.h\"\n#include \"http_config.h\"\n\n#include <math.h>\n\nmodule AP_MODULE_DECLARE_DATA leak_test_module;\n\nstatic int leak_test_handler(request_rec *r)\n{\n\tlong i;\n\n\t/* if we aren't registered as a handler for the document, punt */\n    if(strcmp(r->handler, \"leak-test\") != 0)\n        return DECLINED;\n\n    ap_set_content_type(r, \"text/html\");\n\tr->status = HTTP_OK;\n\n    if (r->header_only) {\n\t\treturn OK;\n\t}\n\t/* write some random data to the client */\n\tap_rputs(DOCTYPE_HTML_4_0S, r); \n\tap_rputs(\"<html><body>\", r); \n\tfor(i=0; i<1000; i++) \n\t\tap_rprintf(r, \"%d%d%d<br>\\n\", rand(), rand(), rand());\n\tap_rputs(\"</body></html>\", r);\n\n\treturn OK;\n}\n\nstatic void register_hooks(apr_pool_t *p)\n{\n    ap_hook_handler(leak_test_handler, NULL, NULL, APR_HOOK_MIDDLE);\n}\n\nmodule AP_MODULE_DECLARE_DATA leak_test_module =\n{\n    STANDARD20_MODULE_STUFF,\n    NULL,                        /* dir config creater */\n    NULL,                        /* dir merger --- default is to override */\n    NULL,                        /* server config */\n    NULL,                        /* merge server config */\n    NULL,                        /* command apr_table_t */\n    register_hooks               /* register hooks */\n};", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 14321, "text": "some comments in case somebody else has started looking at this:\n\nI was able to duplicate this on Linux easily :(\n\nThe problem does not seem to be thread-related because I duplicated it\nusing the prefork MPM.\n\nThe problem does not seem to be a misuse of zlib.  To test that theory I\nused the following patch to replace the memory allocation/deallocation\nroutines used by zlib with something that allocates from the request pool.\nI still observed the storage leak with that patch in place.  (I assume\nthat zlib always calls that hook to allocate storage.)\n\nIndex: modules/filters/mod_deflate.c\n===================================================================\nRCS file: /home/cvs/httpd-2.0/modules/filters/mod_deflate.c,v\nretrieving revision 1.24\ndiff -u -r1.24 mod_deflate.c\n--- modules/filters/mod_deflate.c\t30 Aug 2002 16:31:17 -0000\t1.24\n+++ modules/filters/mod_deflate.c\t7 Nov 2002 12:04:11 -0000\n@@ -228,6 +228,27 @@\n     return NULL;\n }\n \n+static voidpf mdalloc(voidpf opaque, uInt items, uInt size)\n+{\n+    request_rec *r = opaque;\n+    voidpf buffer = apr_pcalloc(r->pool, items * size);\n+\n+    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,\n+                  \"alloced buffer %pp\", buffer);\n+\n+    return buffer;\n+}\n+\n+static void mdfree(voidpf opaque, voidpf buffer)\n+{\n+    request_rec *r = opaque;\n+\n+    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,\n+                  \"freed buffer %pp\", buffer);\n+\n+    /* no work to do */\n+}\n+\n /* magic header */\n static char deflate_magic[2] = { '\\037', '\\213' };\n \n@@ -330,7 +351,9 @@\n         ctx = f->ctx = apr_pcalloc(r->pool, sizeof(*ctx));\n         ctx->bb = apr_brigade_create(r->pool, f->c->bucket_alloc);\n         ctx->buffer = apr_palloc(r->pool, c->bufferSize);\n-\n+        ctx->stream.zalloc = mdalloc;\n+        ctx->stream.zfree  = mdfree;\n+        ctx->stream.opaque = r;\n         zRC = deflateInit2(&ctx->stream, Z_BEST_SPEED, Z_DEFLATED,\n                            c->windowSize, c->memlevel,\n                            Z_DEFAULT_STRATEGY);\n@@ -341,8 +364,11 @@\n                           \"unable to init Zlib: \"\n                           \"deflateInit2 returned %d: URL %s\",\n                           zRC, r->uri);\n+            ap_remove_output_filter(f);\n             return ap_pass_brigade(f->next, bb);\n         }\n+        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,\n+                      \"alloced stream %pp\", &ctx->stream);\n \n         /* RFC 1952 Section 2.3 dictates the gzip header:\n          *\n@@ -443,7 +469,8 @@\n             }\n \n             deflateEnd(&ctx->stream);\n-\n+            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,\n+                          \"freeing stream %pp\", &ctx->stream);\n             /* Remove EOS from the old list, and insert into the new. */\n             APR_BUCKET_REMOVE(e);\n             APR_BRIGADE_INSERT_TAIL(ctx->bb, e);", "id": 25854, "time": "2002-11-07T12:08:04Z", "creator": "trawick@apache.org", "creation_time": "2002-11-07T12:08:04Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "creator": "trawick@apache.org", "is_private": false, "id": 25855, "time": "2002-11-07T12:13:23Z", "bug_id": 14321, "creation_time": "2002-11-07T12:13:23Z", "tags": [], "text": "problem isn't specific to windows... change some fields as appropriate..."}, {"count": 3, "attachment_id": null, "bug_id": 14321, "text": "The problem seems to be the apr_brigade_destroy(bb) call on the next to last\nline of deflate_out_filter(). If I remove this call, the leak stops. \n\nSomeone with more familiarity with the code might be able to confirm this, but I\nthink the apr_brigade_destroy() call unregisters the brigade from the pool\ncleanup. This would be OK (since we are cleaning it up manually), but the last\ntime the filter is called (with an EOS bucket), the function exits w/o a last\napr_brigade_destroy() call, so the last bucket brigade leaks.\n", "id": 25896, "time": "2002-11-07T22:12:47Z", "creator": "kfranken@decisionmark.com", "creation_time": "2002-11-07T22:12:47Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 14321, "attachment_id": null, "id": 26268, "time": "2002-11-14T13:56:30Z", "creator": "trawick@apache.org", "creation_time": "2002-11-14T13:56:30Z", "is_private": false, "text": "I got a brigade guru to look at your PR and your debugging.  He suggested\nthis patch:\n\nIndex: modules/filters/mod_deflate.c\n===================================================================\nRCS file: /home/cvs/httpd-2.0/modules/filters/mod_deflate.c,v\nretrieving revision 1.25\ndiff -u -r1.25 mod_deflate.c\n--- modules/filters/mod_deflate.c       10 Nov 2002 06:09:20 -0000      1.25\n+++ modules/filters/mod_deflate.c       14 Nov 2002 13:52:36 -0000\n@@ -510,7 +510,7 @@\n         }\n     }\n\n-    apr_brigade_destroy(bb);\n+    apr_brigade_cleanup(bb);\n     return APR_SUCCESS;\n }\n\n\nI have tested this with your sample module and I don't see a storage leak\nor any other bad behavior.\n"}, {"count": 5, "attachment_id": null, "bug_id": 14321, "text": "Upon further review, I do believe that to be the correct patch.  We can't destroy the brigade because it is only created when the ctx is first initialized at the beginning of the request.  All we really want is to make sure it has no buckets in it.  That's what apr_brigade_cleanup() is for.  Ken, I'll wait for confirmation from you that the patch works as expected before committing, but it seems quite logical to me.  Note: I found a few other bucket-related buglets in that function -- I'll bring them up on dev@httpd. ", "id": 26272, "time": "2002-11-14T14:31:12Z", "creator": "jwoolley@apache.org", "creation_time": "2002-11-14T14:31:12Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 14321, "text": "I tested the patch and it works fine for me. Thanks.", "id": 26292, "time": "2002-11-14T18:30:53Z", "creator": "kfranken@decisionmark.com", "creation_time": "2002-11-14T18:30:53Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 14321, "attachment_id": null, "text": "Committed.  Thanks!", "id": 26296, "time": "2002-11-14T19:23:01Z", "creator": "jwoolley@apache.org", "creation_time": "2002-11-14T19:23:01Z", "is_private": false}]
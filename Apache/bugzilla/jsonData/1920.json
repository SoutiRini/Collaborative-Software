[{"count": 0, "tags": [], "text": "It is bad enough that the existing Servlet API defines \nHttpServletResponse::setContentLength to take an integer parameter for the \nlength (thus, unnecessarily limiting the value to the maximum length of (2^31)-\n1 bytes.  The HTTP spec does not mention any length restrictions on \nthe \"Content-Length\" HTTP header.\n\nA way to bypass the setContentLength method should be to use the setHeader \nmethod and override the \"Content-Length\" header name by passing in a large \nString value.  The existing implementation of setHeader( String strHeaderName, \nString strHeaderValue ) attempts to check strHeaderName for special strings and \nin the case of a matching \"Content-Length\" name it secretly (and apparently \nunnecessarily) attempts to parse the strHeaderValue down to an int.  The \nbiggest problem with this is that it conceals any potential downcasting \nerrors/exceptions from the caller method.  The setHeader method should be able \nto successfully take in two strings and set them to the HTTP response without \ndoing any downcasting behind the caller's back.  Thus, the following statement \nshould work without problems (but doesn't with the current implementation):  \nsetHeader( \"Content-Length\", Long.toString( lFileLength ) ).\n\nFeel free to contact me if you have any questions/comments.\n\nThanks!", "attachment_id": null, "id": 2671, "creator": "ruvinsky@yahoo.com", "time": "2001-05-27T18:22:32Z", "bug_id": 1920, "creation_time": "2001-05-27T18:22:32Z", "is_private": false}, {"count": 1, "tags": [], "text": "Fixed in 3.3, thanks for finding this ( but are you serious about sending \nbodies larger than 2^31 ?? )\n\n", "attachment_id": null, "id": 4850, "creator": "cmanolache@yahoo.com", "time": "2001-08-25T16:42:07Z", "bug_id": 1920, "creation_time": "2001-08-25T16:42:07Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 1920, "text": ":)  I'm not serious about sending data > 2^31 bytes long right at the moment, \nbut who knows in the future?  The biggest reason to have the size indicator be \na 64-bit representation is to be consistent with the file system size \nindicator.  If a file can be greater than 2^31 bytes, then a servlet that can \nstream it back should support it without the user having to downcast \nunnecessarily (especially if this is a constraint that is not indicated in the \nactual HTTP spec).", "id": 4934, "time": "2001-08-27T20:30:35Z", "creator": "ruvinsky@yahoo.com", "creation_time": "2001-08-27T20:30:35Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "attachment_id": 23892, "creator": "nrc@cs.berkeley.edu", "is_private": false, "id": 128353, "time": "2009-06-27T13:19:03Z", "bug_id": 47441, "creation_time": "2009-06-27T13:19:03Z", "tags": [], "text": "Created attachment 23892\nCandidate patch, v1\n\nCurrently, apr_hash considers two keys to be equal iff memcmp(k1, k2, len) == 0. When hashing on a complex key type (e.g. a struct with a pointer field), that might not be sufficient; that is, the user might want structural equality, not the shallow equality provided by memcmp().\n\nAttached is a straightforward patch against APR trunk that allows the user to supply a custom key comparison function when creating the hash table. I added a new constructor apr_hash_make_custom2() -- if breaking the API is acceptable, it might be cleaner to add another argument to apr_hash_make_custom() instead. The patch includes a test for the new functionality.\n\nBTW, I notice that apr_hashfunc_t takes a key of type \"const char *\", whereas all the other hash API functions define the type of the key as \"const void *\". I've used the latter, which is more sensible anyway. This inconsistency might be worth fixing for APR2.\n\nComments welcome -- please consider this for inclusion in a future release of APR."}, {"count": 1, "tags": [], "bug_id": 47441, "attachment_id": null, "is_private": false, "id": 129259, "time": "2009-07-29T16:24:45Z", "creator": "nrc@cs.berkeley.edu", "creation_time": "2009-07-29T16:24:45Z", "text": "Any feedback on this patch? I think this is clearly useful functionality, provided there is any interest in allowing hash table keys to be non-trivial objects."}]
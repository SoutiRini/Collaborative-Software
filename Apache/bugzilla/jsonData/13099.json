[{"count": 0, "tags": [], "creator": "douglasscottjackson@yahoo.com", "attachment_id": null, "text": "When using the default heirarchy i.e. DOMConfigurator.configure(Element)\nthe <categoryFactory> tag has no effect.  The parseCategory method calls\ngetLogger(String) which will use the default LoggerFactory and not the\ncategory factory specified in the <categoryFactory> tag.\nThe <categoryFactory> tag appears to have no effect whatsoever.\n\nIt would be nice if the defaultFactory in the Heirarchy class could be\nmodified via a setter or make it protected so an extending class can set\nit.", "id": 23581, "time": "2002-09-27T20:50:03Z", "bug_id": 13099, "creation_time": "2002-09-27T20:50:03Z", "is_private": false}, {"count": 1, "tags": [], "creator": "asisser@lehman.com", "attachment_id": null, "text": "I've noticed it too and this causes serious problems for me because I've \nsubclassed the Logger class.  When the DOMConfigurator runs and tries to set \nthe log level for specific categories, it ignores the categoryFactory and \ncreates default log4j.Logger objects.  These choke my code when I go to load \nthe appropriate Logger and cast it to my own Logger sub-class.  Not only is not \nsetting the defaultFactory, it's not even using the LoggerFactory to create the \nLogger objects it needs during configuration.", "id": 23711, "time": "2002-10-01T19:13:15Z", "bug_id": 13099, "creation_time": "2002-10-01T19:13:15Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "mrfloppy_vid@gmx.de", "text": "I made some minor changes that helped at least in my case:\n1. Make the org.apache.log4j.DefaultCategoryFactory and its\n   constructor public (alternatively, implement your own CategoryFactory\n   in the xml package).\n2. Make the following changes to org.apache.log4j.xml.DOMConfigurator\nnew:\n   // WK (26.08.2003): Replacement for the deprecated CATEGORY_FACTORY_TAG\n  static final String LOGGER_FACTORY_TAG  = \"loggerFactory\";\nnew:\n   /**\n   * WK (26.08.2003): Method parameter list for retrieving a Logger using\n   * a specific LoggerFactory as specified in the XML configuration\n   */\n  static final Class[] STRING_LOGFACTORY_PARAM = new Class[] {String.class,\nLoggerFactory.class};\nnew:\n   /**\n   * WK (26.08.2003): LoggerFactory which is used when retrieving a Logger.\n   * The LoggerFactory may be set using the CategoryFactory XML \n   */\n  protected LoggerFactory loggerFactory = new DefaultCategoryFactory();\n[changed in parseErrorHandler()]\n \t    String loggerName = currentElement.getAttribute(REF_ATTR);\n\t    // WK (26.08.2003): get the logger with the help of the loggerFactory\n\t    Logger logger = repository.getLogger(loggerName, loggerFactory);\n[changed]:\n  protected\n  void parseCategory (Element loggerElement) {\n    // Create a new org.apache.log4j.Category object from the <category> element.\n    String catName = subst(loggerElement.getAttribute(NAME_ATTR));\n\n    Logger cat;    \n\n    String className = subst(loggerElement.getAttribute(CLASS_ATTR));\n\n\n    if(EMPTY_STR.equals(className)) {\n      LogLog.debug(\"Retreiving an instance of org.apache.log4j.Logger.\");\n      // WK (26.08.2003): get the logger with the help of the loggerFactory\n      cat = repository.getLogger(catName, loggerFactory);\n    }\n    else {\n      LogLog.debug(\"Desired logger sub-class: [\"+className+']');\n       try {\t \n         // WK (26.08.2003): get the logger method by reflection which takes\n         // a LoggerFactory as an argument\n\t Class clazz = Loader.loadClass(className);\n\t Method getInstanceMethod = clazz.getMethod(\"getLogger\", \n\t\t\t\t\t\t    STRING_LOGFACTORY_PARAM);\n\t cat = (Logger) getInstanceMethod.invoke(null, new Object[] {catName,\nloggerFactory});\n       } catch (Exception oops) {\n\t LogLog.error(\"Could not retrieve category [\"+catName+\n\t\t      \"]. Reported error follows.\", oops);\n\t return;\n       }\n    }\n[changed in parseCategoryFactory()]:\n      // WK (26.08.2003): set the LoggerFactory to a user-defined one\n      loggerFactory =\n(LoggerFactory)OptionConverter.instantiateByClassName(className, \n                                                                \nLoggerFactory.class, \n                                                                 null);\n      PropertySetter propSetter = new PropertySetter(loggerFactory);\n[changed in parse(Element)]:\n\tif (tagName.equals(CATEGORY_FACTORY_TAG) || tagName.equals(LOGGER_FACTORY_TAG)) {\n\n3. Change the log4j.dtd\n<!ELEMENT log4j:configuration (renderer*, appender*,(category|logger)*,root?,\n                               (categoryFactory|loggerFactory)?)>\n<!ELEMENT logger (param*,(priority|level)?,appender-ref*)>\n<!ATTLIST logger\n  class         CDATA   #IMPLIED\n  name\t\tID\t#REQUIRED\n  additivity\t(true|false) \"true\"  \n>\n4. New in log4j.dtd\n<!-- WK (26.08.2003): as categories are deprecated a loggerFactory element -->\n<!-- should be available as a replacement for the categoryFactory element -->\n<!ELEMENT loggerFactory (param*)>\n<!ATTLIST loggerFactory \n   class        CDATA #REQUIRED>\n\nHope this helps and might find its way in the next log4j release (following 1.2.8)", "count": 2, "id": 44021, "time": "2003-09-11T08:23:12Z", "bug_id": 13099, "creation_time": "2003-09-11T08:23:12Z", "is_private": false}, {"text": "*** Bug 21707 has been marked as a duplicate of this bug. ***", "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "count": 3, "id": 68390, "time": "2004-12-13T17:42:14Z", "bug_id": 13099, "creation_time": "2004-12-13T17:42:14Z", "is_private": false}, {"count": 4, "tags": [], "creator": "magnus@filur.org", "text": "Will this one ever get fixed? Is there a know workaround?", "id": 85382, "attachment_id": null, "bug_id": 13099, "creation_time": "2006-02-03T08:34:48Z", "time": "2006-02-03T08:34:48Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 13099, "attachment_id": null, "id": 98545, "time": "2007-01-25T22:59:08Z", "creator": "genman@noderunner.net", "creation_time": "2007-01-25T22:59:08Z", "is_private": false, "text": "Checked in for 1.3 (trunk SVN)"}, {"text": "rev 500155 addressed the problem in the trunk, however made some unnecessary name changes and did \nnot include tests.  See log4j-dev discussion on 2007-01-30.  After those are resolved, backporting the \nchanges to log4j 1.2 should be considered.", "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "count": 6, "id": 98764, "time": "2007-01-30T09:31:32Z", "bug_id": 13099, "creation_time": "2007-01-30T09:31:32Z", "is_private": false}, {"text": "tests/src/java/org/apache/log4j/xml/LoggerFactoryTest added rev 500161.", "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "count": 7, "id": 98765, "time": "2007-01-30T09:34:40Z", "bug_id": 13099, "creation_time": "2007-01-30T09:34:40Z", "is_private": false}, {"text": "Created attachment 19685\nPatch to fix this problem on the v1_2-branch\n\nI don't know if this is similar to the fix in 1.3 since I'm only using 1.2, but\nthis change fixes a similar problem I had like this bug, except when using the\nPropertyConfigurator.\nI don't use XMLConfigurator, so I didn't look into using this change for that,\nbut I'd imagine it'd be similar.", "tags": [], "creator": "erh+apache@nimenees.com", "attachment_id": 19685, "count": 8, "id": 100172, "time": "2007-03-07T17:21:11Z", "bug_id": 13099, "creation_time": "2007-03-07T17:21:11Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 13099, "text": "Can't add a new method to the LoggingRepository interface (as suggested in the 2007-03-07 patch) as it \nwould break any existing implementation that did not implement the newly introduced setDefaultFactory \nmethod.  Looking at the existing code and trying to keep the change minimal, it seems like the \nloggerFactory setting should likely only affect the current configuration() call and not affect the current \nLoggerRepository, otherwise you'd need to add a new LoggerRepositoryEx interface and methods on \nHierarchy and still could not guarantee that a call from getLogger(\"foo\") would return the expected class \n(since it might have been created prior to the configure() call).", "id": 100807, "time": "2007-03-22T15:23:41Z", "creator": "carnold@apache.org", "creation_time": "2007-03-22T15:23:41Z", "is_private": false, "attachment_id": null}]
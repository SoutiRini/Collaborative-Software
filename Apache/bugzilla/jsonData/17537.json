[{"count": 0, "tags": [], "bug_id": 17537, "attachment_id": null, "is_private": false, "id": 32166, "time": "2003-02-28T17:32:32Z", "creator": "apache.org@fsckit.net", "creation_time": "2003-02-28T17:32:32Z", "text": "In short, a RedHat 7.3 system I have with 2.0.44 installed refuses to serve .jpg\nfiles but will serve other types without problems (.gif, .html, etc). I've also\nseen this behavior occur with 2.0.39 as well under RH 7.3. Nothing is logged\nabout the request in the access or error logs although /server-status does show\nthe request being processed.\n\nI have several other systems running RH 7.1 and RH 8.0 that do not exhibit this\nproblem with httpd 2 built the same way (built with:  ./configure\n--prefix=/usr/local/image-server --disable-autoindex --disable-cgid\n--disable-cgi --disable-userdir). Also 1.3.27 on the same RH7.3 system serves\nthe image just fine.\n\nA HEAD of the image results in:\n\n200 OK\nConnection: close\nDate: Fri, 28 Feb 2003 16:52:23 GMT\nAccept-Ranges: bytes\nETag: \"19319b-29ad-1f466980\"\nServer: Apache/2.0.44 (Unix)\nContent-Length: 10669\nContent-Type: image/jpeg\nLast-Modified: Thu, 27 Feb 2003 23:15:02 GMT\nClient-Date: Fri, 28 Feb 2003 16:51:29 GMT\nClient-Response-Num: 1\n\nBut if I use wget I see:\n\nResolving host.example.com... done.\nConnecting to host.example.com[ip.ad.dr.ess]:8000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 10,669 [image/jpeg]\n\n 0% [                                     ] 0             --.--K/s    ETA --:--\n\n11:52:01 (0.00 B/s) - Connection closed at byte 0. Retrying.\n\nand then repeats the above until I Ctrl-C\n\nMozilla reports that it couldn't be displayed due to errors in the file and IE\ngives a broken image tag.\n\nAgain there is nothing logged in the access or error logs and various other file\ntypes work without problems. It's just the jpegs that fail.\n\nMy httpd.conf is an almost verbatim copy of the bundled highperformance.conf\n(only the paths for docroot and logging have been changed, and the port set to 8000)\n\nA strace of the process during one such request shows:\n\naccept(3, {sin_family=AF_INET, sin_port=htons(49247),\nsin_addr=inet_addr(\"client.ip.addr.ess\")}}, [16]) = 8\ngettimeofday({1046453150, 164649}, NULL) = 0\ngetsockname(8, {sin_family=AF_INET, sin_port=htons(8000),\nsin_addr=inet_addr(\"10.33.1.12\")}}, [16]) = 0\ngettimeofday({1046453150, 165039}, NULL) = 0\nbrk(0x812d000)                          = 0x812d000\nfcntl64(8, F_GETFL)                     = 0x2 (flags O_RDWR)\nfcntl64(8, F_SETFL, O_RDWR|O_NONBLOCK)  = 0\nbrk(0x8130000)                          = 0x8130000\nread(8, 0x812bf80, 8000)                = -1 EAGAIN (Resource temporarily\nunavailable)\npoll([{fd=8, events=POLLIN, revents=POLLIN}], 1, 300000) = 1\nread(8, \"GET /path/to/image.jpg\"..., 8000) = 670\ngettimeofday({1046453150, 178005}, NULL) = 0\ngettimeofday({1046453150, 178229}, NULL) = 0\nstat64(\"/path/to/image.jpg\", {st_mode=S_IFREG|0644, st_size=10669, ...}) = 0\nopen(\"/path/to/image.jpg\", O_RDONLY) = 9\nopen(\"/etc/localtime\", O_RDONLY)        = 10\nfstat64(10, {st_mode=S_IFREG|0644, st_size=1267, ...}) = 0\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) =\n0x40028000\nread(10, \"TZif\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\4\\0\\0\\0\\4\\0\"..., 4096) = 1267\nclose(10)                               = 0\nmunmap(0x40028000, 4096)                = 0\nbrk(0x8133000)                          = 0x8133000\nsetsockopt(8, SOL_TCP, TCP_NODELAY, [0], 4) = 0\nsetsockopt(8, SOL_TCP, TCP_CORK, [1], 4) = 0\nwritev(8, [{\"HTTP/1.1 200 OK\\r\\nDate: Fri, 28 F\"..., 290}], 1) = 290\nsendfile(8, 9, [0], 10669)              = -1 EINVAL (Invalid argument)\nsetsockopt(8, SOL_TCP, TCP_CORK, [0], 4) = 0\nsetsockopt(8, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(8, 0x812bf80, 8000)                = -1 EAGAIN (Resource temporarily\nunavailable)\nbrk(0x8136000)                          = 0x8136000\nwrite(4, \"client.ip.addr.ess - - [28/Feb/2003:1\"..., 187) = 187\n^^^\n  Note that this doesn't appear in the logs despite this write()\n\n\ntimes({tms_utime=0, tms_stime=0, tms_cutime=0, tms_cstime=0}) = 33404006\ngettimeofday({1046453150, 181153}, NULL) = 0\nclose(8)                                = 0\nread(5, 0xbfffe0a3, 1)                  = -1 EAGAIN (Resource temporarily\nunavailable)\nclose(9)                                = 0\ngettimeofday({1046453150, 183951}, NULL) = 0\naccept(3,  <unfinished ...>\n\nIf there's any additional information I can provide you with to help track this\ndown, please let me know.\n\nThanks,\n\nTabor"}, {"attachment_id": null, "tags": [], "bug_id": 17537, "is_private": false, "count": 1, "id": 32170, "time": "2003-02-28T18:00:27Z", "creator": "trawick@apache.org", "creation_time": "2003-02-28T18:00:27Z", "text": "a couple of comments:\n\nsendfile() is failing, which is why the response body doesn't get there\nit looks like mod_mime_magic or something else is actually reading the jpg\nfile?  does it work if you disable mod_mime_magic?\n\nwhoops, maybe you've built in large file mode on Linux?\n\nfstat64(10, {st_mode=S_IFREG|0644, st_size=1267, ...}) = 0\n\nsendfile is broken in that environment, at least for some kernel+glibc\ncombinations...  add --disable-sendfile to configure (or \"EnableSendfile Off\" in\nhttpd.conf) and see if that resolves the problem\n"}, {"attachment_id": null, "tags": [], "bug_id": 17537, "is_private": false, "count": 2, "id": 32171, "time": "2003-02-28T18:14:19Z", "creator": "apache.org@fsckit.net", "creation_time": "2003-02-28T18:14:19Z", "text": "You nailed it in one. EnableSendfile Off does the trick, thanks.\n\nFWIW my specific kernel/glibc combination are the current stock RH 7.3 up2date\nkernel/glibc which are: kernel-smp-2.4.18-24.7.x & glibc-2.2.5-42. I believe\nlargefile mode is standard on 7.3 and up but not 100% sure of that.\n\nAre you aware of a RH bugid that tracks this issue before I start wading through\nbugzilla over there? If not, is there any additional info besides this ticket\nhistory that I should provide to them to address this?\n\nThanks much for the quick response and workaround.\n\nTabor"}, {"count": 3, "tags": [], "creator": "apache.org@fsckit.net", "is_private": false, "text": "Oh one other comment... I still think the lack of graceful failure with logging\nan error in this case (or actually managing to write the log entry that exists\nin the strace at least) still constitues a bug of some sort.", "id": 32172, "time": "2003-02-28T18:20:42Z", "bug_id": 17537, "creation_time": "2003-02-28T18:20:42Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 17537, "text": "Oops. Last comment on this I promise. :) I just realized that it did in fact log\na successful entry in the access log all those times I said it hadn't. Someone\nhere changed the log file destination and I was looking in the wrong place. *sigh*\n\nStill think something should have gotten logged to the error log when sendfile\nfailed though.", "count": 4, "id": 32174, "time": "2003-02-28T18:28:44Z", "creator": "apache.org@fsckit.net", "creation_time": "2003-02-28T18:28:44Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 17537, "text": "What is LogLevel?  Here is the code to log that problem to error log:\n\n        if (rv != APR_SUCCESS) {\n            ap_log_error(APLOG_MARK, APLOG_INFO, rv, c->base_server,\n                         \"core_output_filter: writing data to the network\");\n\n\n(LogLevel info)\n\nBecause network write errors are so frequent (e.g., user clicks on STOP button)\nthe severity of the message isn't very high, so you likely didn't see it\nfor that reason.\n", "id": 32176, "time": "2003-02-28T18:33:57Z", "creator": "trawick@apache.org", "creation_time": "2003-02-28T18:33:57Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 17537, "is_private": false, "count": 6, "id": 32217, "time": "2003-03-01T13:06:06Z", "creator": "trawick@apache.org", "creation_time": "2003-03-01T13:06:06Z", "text": "level set: I withdraw my previous comment about large file support being enabled.\nI suspect that is not the case, because the symptom of enabling large file\nsupport on problematic Linux boxes is a build failure, not a run-time failure.\n\nSo: no idea on cause here, just glad that \"EnableSendfile Off\" did the trick\n\nYou might want to turn sendfile back on temporarily and get an strace of\nsuccessfully sending a gif file so we can try to see what might be different.\n\nAlso, the jpg failures aren't just with a certain jpg that is being rewritten\nfrequently are they?  I see stat say the file is 10669 bytes and not much\nfurther we tell sendfile to send that many bytes...  Only if the jpg file has\nchanged during that timeframe would our parameters to sendfile be wrong.\nThe other parms to sendfile are obviously correct.\n\nAlso, what sort of filesystem does the failing jpg file live on?  Is that a\ndifferent filesystem than gif files that work?  Some filesystems don't work with\nsendfile.\n"}, {"count": 7, "tags": [], "bug_id": 17537, "text": "I don't see a specific outstanding bug here.  If there is, please open\na new bug report so we can be clear.", "id": 37752, "time": "2003-05-24T18:08:55Z", "creator": "slive@apache.org", "creation_time": "2003-05-24T18:08:55Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Currently, a copy operation is performed as follows:\n    \n<copy todir=\"${dist.dir}\">\n    <fileset dir=\".\">\n        <include name=\"${copyfilename.file}\"/>\n    </fileset>\n</copy>\n\nThis means multiple copy-tags are needed to copy a source-fileset to a destination\nconsisting of multiple locations.\n\nThis is an unneeded and unconistent (in relation to the idea behind Ant)\nconstraint, and takes no great effort to solve.\n\nThe benefit of this enhancement is a smaller (and thus: more readable)\nbuild.xml, especially for copy-intensive Ant build scripts.", "is_private": false, "id": 57482, "creation_time": "2004-05-15T15:47:24Z", "time": "2004-05-15T15:47:24Z", "creator": "tfa.x@inter.nl.net", "bug_id": 29011, "attachment_id": null}, {"count": 1, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "id": 57529, "time": "2004-05-17T07:03:27Z", "bug_id": 29011, "creation_time": "2004-05-17T07:03:27Z", "is_private": false, "text": "I don\u00b4t see the need of specifying multiple dest-dirs, except you only want \nmultiple copies.\n\nCan you provide an example what you want to have?"}, {"count": 2, "tags": [], "bug_id": 29011, "attachment_id": null, "is_private": false, "id": 57543, "time": "2004-05-17T12:44:08Z", "creator": "tfa.x@inter.nl.net", "creation_time": "2004-05-17T12:44:08Z", "text": "I could easily avoid the need, as I can write multiple copy statements.\n\nWhat I would like to see:\n<copy someparam=\"somevalue\">\n  <src>\n    <fileset dir=\".\">\n        <include name=\"${copyfilename.file}\"/>\n    </fileset>\n  </src>\n  <dest>\n     <dirset dir=\".\">\n        <include name=\"*\"/>\n     <dirset>\n  </dest>\n</copy>\n\nThe question is; why not?\nMaybe not many people need it, but still it's handy and last but not least: it's\nconsistent. Why am I able to define a nested fileset for the source then? That's\nalso not really needed, I could also write multiple copy statements for that.\n\nYou don't see the need, *except* ....\nThe latter is just the need. Practical example: you want to keep 2 or more build\noutput dirs, for some reason.\n\nIt just opens up possibilities which will greatly reduce the footprint of the\nbuild.xml file in some cases."}, {"count": 3, "attachment_id": null, "creator": "peter.reilly@corvil.com", "is_private": false, "id": 57544, "time": "2004-05-17T12:51:28Z", "bug_id": 29011, "creation_time": "2004-05-17T12:51:28Z", "tags": [], "text": "As a work-around, you could try <for> from ant-contrib:\n<project xmnls:ac=\"antlib:net.sf.antcontrib\">\n  <ac:for param=\"dir\">\n     <ac:path>\n        <ac:dirset dir=\".\" includes=\"*\"/>\n     </ac:path>\n     <ac:sequential>\n        <copy todir=\"@{dir}\">\n           <fileset .../>\n         </copy>\n     </ac:sequential>\n   </ac:for>\n</project>\n\nor using a cvs head version of <for>\n<project xmnls:ac=\"antlib:net.sf.antcontrib\">\n  <ac:for param=\"dir\">\n     <dirset dir=\".\" includes=\"*\"/>\n     <ac:sequential>\n        <copy todir=\"@{dir}\">\n           <fileset .../>\n         </copy>\n     </ac:sequential>\n   </ac:for>\n</project>\n"}, {"count": 4, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "id": 57545, "time": "2004-05-17T12:52:25Z", "bug_id": 29011, "creation_time": "2004-05-17T12:52:25Z", "is_private": false, "text": "I had written a template for my own:\n\n<project name=\"common-define-treecopy\">\n    <scriptdef name=\"treecopy\" language=\"javascript\">\n        <element name=\"src\"  type=\"fileset\"/>\n        <element name=\"dest\" type=\"dirset\"/>\n        <![CDATA[\n            // use 'copy' task for doing the real work\n            copy = project.createTask(\"copy\");\n\n            // for logging purposes ...\n            copy.setTaskName(\"treecopy\");\n\n            // add all source filesets\n            srcFilesets = elements.get(\"src\");\n            for (i=0; i<srcFilesets.size(); i++) {\n                copy.addFileset(srcFilesets.get(i));\n            }\n\n            // now do the work for each destination directory\n            for (i=0; i<elements.get(\"dest\").size(); i++) {\n                dirset = elements.get(\"dest\").get(i);\n                dirscanner = dirset.getDirectoryScanner(project);\n                dirs = dirscanner.getIncludedDirectories();\n                for (j=0; j<dirs.length; j++) {\n                    todir = new java.io.File(dirscanner.getBasedir(), dirs[j]);\n                    copy.setTodir(todir);\n                    copy.perform();\n                }\n            }\n        ]]>\n    </scriptdef>\n</project>\n\n\nJust <import> it and use it nearly as your example:\n\n<treecopy>\n  <src dir=\".\">\n    <include name=\"${copyfilename.file}\"/>\n  </src>\n  <dest dir=\".\">\n    <include name=\"*\"/>\n  </dest>\n</copy>\n"}, {"count": 5, "tags": [], "text": "Thank you, I also saw the <foreach/>-tag in ant-contrib, but of course I dislike\nthe idea of having to install custom enhancements for such a fundamental feature.\n\nNevertheless, I already said it posed no problem for me - in fact, it only came\ninto my mind while \"antin'\" ;).\n\nI'm sure this has been discussed already while developing Ant, but i'm pointing\nout an alternative way of thinking with the keyword: \"consistency,\nfunctionality, simplicity\". As this could be quite useful for the Ant team at\nsome points... ;)", "is_private": false, "id": 57546, "creation_time": "2004-05-17T12:58:25Z", "time": "2004-05-17T12:58:25Z", "creator": "tfa.x@inter.nl.net", "bug_id": 29011, "attachment_id": null}, {"count": 6, "tags": [], "text": "Tell ya what you do... use Ant CVS HEAD with nested <mapper>s along with <copy \nenablemultiplemappings=\"true\" ...> and you should be all set.  The multi-result \n<mapper> will be in the next release (probably 1.6.2).", "is_private": false, "bug_id": 29011, "id": 57554, "time": "2004-05-17T14:44:45Z", "creator": "mbenson@apache.org", "creation_time": "2004-05-17T14:44:45Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "lm@fluent.com", "is_private": false, "text": "I have 2 apache servers. And On both servers different URLs\nare password\nprotected using mod_auth_dbm. But both URLs use same\nAuthDBMFile. So,\nuser logs in on first URL and when he goes into 2 URL (on\n2nd server) ,\nhe is asked to login again with same userid and password.\nSo, in the URL\n( through a hyperlink on server 1) which leads him to 2nd\nserver I am\npassing userid and password. Like\nhttp://userid:password@abccomp.com/url2.htm\n\nEverything worked fine , but when userid or password have\n@, :, / it\ndid not. So, I passed encoded data , for example %40 for\n@.But apache\nDID NOT decode them. It started to search user%40id in\nAuthDBMFile.\n\nSo, I modified  get_dbm_pw in mod_auth_dbm.c  as shown below.\n\n-------------------------------------------------------------------\nstatic char *get_dbm_pw(request_rec *r, char *user, char\n*auth_dbmpwfile)\n{\n    DBM *f;\n    datum d, q;\n    char *pw = NULL;\n#############my code starts here #############################\n        char *enc;\n        char part1[100];\n        int ulen,elen,part2lens,part2lene,part1len,i;\n\n        enc = strstr(user,\"%40\");\n        if(enc)\n        {\n                ulen = strlen(user);\n                elen = strlen(enc);\n                if(elen > 0)\n                {\n                        part1len = ulen - elen;\n                        part2lens = part1len + 3;\n                        part2lene = elen - 3;\n        \n                        for(i=0;i<part1len;i++)\n                        {\n                                part1[i] = *user++;\n                        }\n                        part1[i]='@';\n                        *user++;\n                        *user++;\n                        *user++;\n                        \n                        for(i=i+1;i<ulen;i++)\n                        {\n                                part1[i]=*user++;\n                        }\n                        part1[i] = '\\0';\n                                                \n                        strcpy(user,part1);\n                        part1[0]='\\0';\n                        enc = NULL;\n                        \n                }\n        } \n#################my code ends here ################################\n\n    q.dptr = user;\n#ifndef NETSCAPE_DBM_COMPAT\n    q.dsize = strlen(q.dptr);\n#else\n    q.dsize = strlen(q.dptr) + 1;\n#endif\n\n\n    if (!(f = dbm_open(auth_dbmpwfile, O_RDONLY, 0664))) {\n        ap_log_rerror(APLOG_MARK, APLOG_ERR, r,\n                    \"could not open dbm auth file: %s\",\nauth_dbmpwfile);\n        return NULL;\n    }\n\n    d = dbm_fetch(f, q);\n\n    if (d.dptr) {\n        pw = ap_palloc(r->pool, d.dsize + 1);\n        strncpy(pw, d.dptr, d.dsize);\n        pw[d.dsize] = '\\0';     /* Terminate the string */\n    }\n\n    dbm_close(f);\n    return pw;\n}\n---------------------------------------------------------------------\n\nIf it is a bug in apache module, or if there is any other\nway of doing ,\nplease let me know.\n\nThanks,\nLakshmi", "id": 23094, "time": "2002-09-19T13:22:35Z", "bug_id": 12814, "creation_time": "2002-09-19T13:22:35Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "slive@apache.org", "is_private": false, "text": "Apache never sees stuff before the @ in the URL.  Rather, the browser\ntakes this stuff, BASE64 encodes it, and sends it in the Authorization\nHTTP request header.\n\nTherefore, the problem you are having is entirely with the browser,\nnot the server.  The server is only responsible for removing the BASE64\nencoding, not for URL-decoding or any such thing.  See RFC2617.\n\nIn general, I wouldn't expect sending the userid/password in the URL\nto be a very reliable technique across browsers.", "id": 23101, "time": "2002-09-19T14:41:21Z", "bug_id": 12814, "creation_time": "2002-09-19T14:41:21Z", "attachment_id": null}]
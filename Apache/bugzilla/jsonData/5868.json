[{"count": 0, "tags": [], "creator": "puckman@taglab.com", "attachment_id": null, "id": 9669, "time": "2002-01-15T08:43:30Z", "bug_id": 5868, "creation_time": "2002-01-15T08:43:30Z", "is_private": false, "text": "I have three files main.jsp, first.jsp and second.jsp. main.jsp includes first.jsp and second.jsp in two different ways (silly example for demonstration purposes):\n\n----- main.jsp -----\nFIRST:<br>\n  <jsp:include page=\"first.jsp\" flush=\"true\"/><br>\nSECOND:<br>\n<%\n    ServletContext rootContext = config.getServletContext().getContext( \"/\" );\n    RequestDispatcher rd = rootContext.getRequestDispatcher( \"/second.jsp\" );\n    rd.include( request, response );\n%>\n\n--- first.jsp ---\noutput from first\n\n--- second.jsp ---\noutput from second\n\nRunning the above example gives me:\n\nFIRST:\noutput from first output from second\nSECOND:\n\nI can't even make it right by calling out.flush() explicitly in between. This might be related to #631"}, {"count": 1, "tags": [], "creator": "Larry.Isaacs@sas.com", "attachment_id": null, "id": 9676, "time": "2002-01-15T14:40:18Z", "bug_id": 5868, "creation_time": "2002-01-15T14:40:18Z", "is_private": false, "text": "Calling out.flush() works for me, i.e.:\n\n----- main.jsp -----\nFIRST:<br>\n  <jsp:include page=\"first.jsp\" flush=\"true\"/><br>\nSECOND:<br>\n<%\n    out.flush();\n    ServletContext rootContext = config.getServletContext().getContext( \"/\" );\n    RequestDispatcher rd = rootContext.getRequestDispatcher( \"/second.jsp\" );\n    rd.include( request, response );\n%>\n-----\n\nJSP's use a local buffer.  JSP 1.1 requires flush=\"true\" so that this buffer\nis flushed prior to including first.jsp.  You must use out.flush() prior to\ncalling the RequestDispatcher to accomplish the same thing for second.jsp.\n\nI assume you put the out.flush() in the same location I did. I don't know why\nit didn't work for you.\n\nI'm resolving as INVALID since the indicated behavior for the supplied test case\nis the expected behavior."}, {"count": 2, "tags": [], "bug_id": 5868, "attachment_id": null, "id": 9727, "time": "2002-01-18T03:53:26Z", "creator": "puckman@taglab.com", "creation_time": "2002-01-18T03:53:26Z", "is_private": false, "text": "I'm feeling confused... I tried your place of having out.flush()... and got the \nright result. Why would the way i tried (as below) be wrong?\n\nFIRST:<br>\n  <jsp:include page=\"first.jsp\" flush=\"true\"/><br>\n<%\n  out.flush();\n%>\nSECOND:<br>\n<%\n    ServletContext rootContext = config.getServletContext().getContext( \"/\" );\n    RequestDispatcher rd = rootContext.getRequestDispatcher( \"/\nsecond.jsp\" );\n    rd.include( request, response );\n%>\n"}, {"count": 3, "tags": [], "creator": "puckman@taglab.com", "text": "Ohh the output I get btw is:\n\nFIRST:\noutput from first\noutput from second SECOND:", "id": 9728, "time": "2002-01-18T03:55:00Z", "bug_id": 5868, "creation_time": "2002-01-18T03:55:00Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 5868, "attachment_id": null, "text": "Here is what is happening with buffering in your case:\n\n1. \"FIRST:<br>\" goes into local JSP buffer.\n2. Local JSP buffer is flushed by <jsp:include ... flush=\"true\"/>\n3. first.jsp output is included and flushed before returning to main.jsp\n4. \"<br>\" goes into local JSP buffer.\n5. Local JSP buffer is flushed by explicit out.flush().\n6. \"SECOND:<br>\" goes into local JSP buffer.\n7. RequestDispatcher includes second.jsp and is flushed before returning to\n   main.jsp. This slips second.jsp's output ahead of \"SECOND:<br>\" which\n   is still sitting in the local JSP buffer.\n8. Local JSP buffer is flushed at end of main.jsp. This is when \"SECOND:<br>\"\n   is sent.\n\nThe added out.flush() has to appear just before the RequestDispatcher if it\nis to flush all locally buffered JSP text.\n", "id": 9731, "time": "2002-01-18T06:13:37Z", "creator": "Larry.Isaacs@sas.com", "creation_time": "2002-01-18T06:13:37Z", "is_private": false}]
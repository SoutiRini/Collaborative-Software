[{"count": 0, "tags": [], "creator": "paul.okeeffe@suncorp.com.au", "attachment_id": null, "text": "User A locks a file.\nUser B attempts to unlock the file.\nUnlock attempt fails with a 423 Locked error, rather than succeeding with a 204 \nNo Content response.\n\nUser B does have the necessary security permissions to unlock the file locked \nby user A.\n\nThe functional test killLock.xml directly tests this case and fails using the \nmem configuration.\n\nLooking at the code, it appears that the lock cache used by LockImpl#checkLock\n() is not updated/invalidated after the unlock operation modifies the \nunderlying information. In fact, it appears that entries in this cache are \nnever updated/invalidated after they are first entered, so there may be other \nproblems.\n\nCommenting out use of the cache as follows works around the problem:\n\n373,384c373,381\n<             // Removed all use of lock cache, since it is not invalidated \ncorrectly. Results in the inability\n<             // to release another user's lock, even when you have the \nappropriate permission.\n<             \n< //            Boolean locked = token.checkLockCache(object, action);\n< //            if (locked != null) {\n< //                if (locked.booleanValue()) {\n< //                    throw new ObjectLockedException(object.getUri());\n< //                }\n< //                else {\n< //                    return;\n< //                }\n< //            }\n---\n>             Boolean locked = token.checkLockCache(object, action);\n>             if (locked != null) {\n>                 if (locked.booleanValue()) {\n>                     throw new ObjectLockedException(object.getUri());\n>                 }\n>                 else {\n>                     return;\n>                 }\n>             }\n389c386\n< //            try {\n---\n>             try {\n391,396c388,393\n< //                token.cacheLock(object, action, false);\n< //            }\n< //            catch (ObjectLockedException e) {\n< //                token.cacheLock(object, action, true);\n< //                throw e;\n< //            }\n---\n>                 token.cacheLock(object, action, false);\n>             }\n>             catch (ObjectLockedException e) {\n>                 token.cacheLock(object, action, true);\n>                 throw e;\n>             }\n\nNote that the line numbers here are not accurate.", "id": 80936, "time": "2005-10-10T04:45:39Z", "bug_id": 36981, "creation_time": "2005-10-10T04:45:39Z", "is_private": false}, {"count": 1, "tags": [], "creator": "paul.okeeffe@suncorp.com.au", "attachment_id": null, "text": "This problem was found in the nightly build from 20051005042448.", "id": 80937, "time": "2005-10-10T04:49:00Z", "bug_id": 36981, "creation_time": "2005-10-10T04:49:00Z", "is_private": false}, {"count": 2, "tags": [], "creator": "mfigueiredo@maisis.pt", "attachment_id": null, "text": " In fact, I would expect that this problem you described was instead a wanted \nfeature. If a principal does a lock on a file, he means to maintain it, not \nloosing it to the first 'pirate' or accidental user that tries to write into \nit.\n\n Anyway, if you would like to have that behavior you could always make every \nuser of the default role 'root' or adding them the acl 'unlock' permission.\n\nps: i'm no developer", "id": 80941, "time": "2005-10-10T11:19:57Z", "bug_id": 36981, "creation_time": "2005-10-10T11:19:57Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 36981, "attachment_id": null, "text": "My understanding of the submitter's explanation of the problem is that the user \nB does have the \"kill lock\" permission that would normally allow them to unlock \nthe lock owned by A and the bug is that they are not permitted to do this \nbecause of a caching issue. The kill lock permission would be used by admin \nusers to remove a lock owned by a person who has left the company for example.", "id": 80959, "time": "2005-10-10T18:05:32Z", "creator": "wburrows@e2open.com", "creation_time": "2005-10-10T18:05:32Z", "is_private": false}, {"count": 4, "tags": [], "creator": "mfigueiredo@maisis.pt", "attachment_id": null, "text": "\nYou're right ^^\nI've failed to notice that the user B had the necessary security permissions.", "id": 80965, "time": "2005-10-10T19:27:49Z", "bug_id": 36981, "creation_time": "2005-10-10T19:27:49Z", "is_private": false}]
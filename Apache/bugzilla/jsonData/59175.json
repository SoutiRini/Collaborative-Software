[{"count": 0, "tags": [], "bug_id": 59175, "text": "Many people want to use SSL/TLS, and should, but getting and managing certificates is a pain. Server software can relieve much of the pain by supporting the ACME protocol and automatically retrieving and managing certificates for configured domains.\n\nThe ACME protocol can be supported by any certificate authority (CA) and an IETF WG is working on standardizing it.\n\nHere is an example of an HTTP server getting a certificate for a domain automatically using ACME and Let's Encrypt:\n\nhttps://www.youtube.com/watch?v=nk4EWHvvZtI\n\nWe should try to make it this easy in apache as well.", "id": 189436, "time": "2016-03-13T13:53:00Z", "creator": "jaas@kflag.net", "creation_time": "2016-03-13T13:53:00Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "h.reindl@thelounge.net", "attachment_id": null, "text": "disclaimer: i am not a httpd-developer\n\nthe httpd process handling incoming requests MUST NOT have write permissions to the certificates and even not read permissions after drop privileges - so how do you imagine this working in a secure manner?", "id": 189604, "time": "2016-03-20T10:41:36Z", "bug_id": 59175, "creation_time": "2016-03-20T10:41:36Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 59175, "text": "I agree with Harald here, managing certificates either in the parent process which is problematic because \"root\" shouldn't issue outgoing connections (to letsencrypt or whatever), or using an unpriviledged/dedicated process which is a concern with regard to the final owner/rights on the certificates.\n\nIMHO, this is a tool's job (probably from the distro) to provide this feature and configure httpd accordingly.", "id": 189792, "time": "2016-03-29T16:12:40Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2016-03-29T16:12:40Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "pde-lists@eff.org", "attachment_id": null, "text": "If that's the approach that the Apache team considers most correct, the EFF client (currently called \"letsencrypt\" but we're going to rename it shortly) has already started on it to some degree.\n\nThe plugin code here is designed to try to configure httpd to speak TLS correctly:\n\nhttps://github.com/letsencrypt/letsencrypt/tree/master/letsencrypt-apache/letsencrypt_apache\n\nAt the moment, that code works for about 95% of Apache configurations, but there are definitely cases it doesn't handle yet, such as:\n\n* WSGI (https://github.com/letsencrypt/letsencrypt/issues/1820)\n* Multiple vhosts per file (https://github.com/letsencrypt/letsencrypt/issues/1042)\n\nIt would be great to have some attention and energy from the Apache team to help ensure that this code is robust, architecturally sensible, and on path that will work for 99.x or 100% of users in the future.\n\nThere are definitely some pieces that feel hackish at the moment, such as all of the vhost juggling logic and the fact that we rely on Augeas's imperfect grammar for Apache config files:\n\nhttps://github.com/hercules-team/augeas/blob/master/lenses/httpd.aug", "id": 189811, "time": "2016-03-30T00:31:58Z", "bug_id": 59175, "creation_time": "2016-03-30T00:31:58Z", "is_private": false}, {"count": 4, "tags": [], "text": "An external tool is going to have some hard user experience limitations no matter how good it is. In a world where HTTPS is what most people want, or even required by browsers (it's where we're headed), Apache is going to want to do better than that.\n\nI'm confident that if the Apache team wants to provide first-class integrated support for HTTPS and certificate management via ACME they can find a way to do it securely.\n\nIn the mean time external tools will have to suffice, and as Peter said it would be nice to have help with them, but I think we should focus on discussing full integration here.", "attachment_id": null, "bug_id": 59175, "id": 189812, "time": "2016-03-30T01:13:43Z", "creator": "jaas@kflag.net", "creation_time": "2016-03-30T01:13:43Z", "is_private": false}]
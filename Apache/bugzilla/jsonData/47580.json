[{"count": 0, "tags": [], "bug_id": 47580, "text": "Created attachment 24037\nPHP script to demonstrate the problem\n\nIf you make a conditional request for a cached document, but the document is expired in the cache, mod_cache correctly passes on the conditional request to the backend. If the backend responds with a \"304 Not Modified\" response that indicates that the cached copy is still up to date, mod_cache serves the contents of the cache to the client with a 200 code. This is a standards-conforming valid way of responding.\n\nBut couldn't it just send a \"304 Not Modified\" code instead? RFC2616 14.26 says \"instead, if the request method was GET or HEAD, the server SHOULD respond with a 304 (Not Modified) response, including the cache- related header fields (particularly ETag) of one of the entities that matched.\" The current behaviour unnecessarily sends a response body to the client. This ends up wasting bandwidth in the case where you press refresh on an unmodified object (at least in Firefox,) which sends these request headers:\n\nIf-None-Match=\"My ETag\"\nCache-Control=max-age=0\n\nI do not want the behaviour given by the \"CacheIgnoreCacheControl yes\" directive. I still want mod_cache to validate the request against the backend, but I don't want it to waste bandwidth by sending a 200 response code.\n\nTo test it, I have these cache-related lines in my virtual host definition:\n\nCacheRoot C:/temp\nCacheEnable disk /\n\nMy index.php is the attached file.\n\nMy web browser with an empty cache requests index.php, the (trimmed) response is:\n\nStatus=OK - 200\nDate=Mon, 20 Jul 2009 07:16:05 GMT\nExpires=Wed, 19 Aug 2009 07:16:05 GMT\nEtag=\"ComputedETag\"\n\nThe log performed by index.php indicates:\n\nMon, 20 Jul 2009 19:16:05 +1200 - Response: 200. Generated document.\n\nSo far so good. But now I press refresh in my web browser. This makes a conditional request for the document:\n\nIf-None-Match=\"ComputedETag\"\nCache-Control=max-age=0\n\nWith the max-age of 0, the cache will be bypassed, which is the desired behaviour. The cache passes this conditional request onto the backend, and the backend logs it:\n\nMon, 20 Jul 2009 19:16:12 +1200 - Response: 304 Not Modified\n\nSo the backend is trying to tell the client that it already has an up-to-date body. But the response sent to the client by mod_cache is:\n\nStatus=OK - 200\nDate=Mon, 20 Jul 2009 07:16:12 GMT\nEtag=\"ComputedETag\"\nExpires=Wed, 19 Aug 2009 07:16:12 GMT\n\nMy Apache configuratiion is:\n\nApache/2.2.11 (Win32) DAV/2 mod_ssl/2.2.11 OpenSSL/0.9.8i SVN/1.6.3 PHP/5.3.0", "id": 129146, "time": "2009-07-25T05:18:51Z", "creator": "n.sherlock@gmail.com", "creation_time": "2009-07-25T05:18:51Z", "is_private": false, "attachment_id": 24037}, {"count": 1, "text": "This is a bug in php or more specific in the httpd module version of php. In sapi_apache2.c::php_apache_request_ctor (line 463 for php 5.3.0) it sets r->no_local_copy to 1 for an unknown reason which causes to return a 200 instead of a 304. If you comment this line everything works as expected by you.\nhttpd itself only set this struct member to 1 for\n\nsubrequests\nerror pages\n\nin both cases it is not desired that even conditional requests return a 304.\nFor subrequests as they only deliver fragments of a page that is processed internally and for error pages this is obvious.\nIn order to fix your problem do one of the following things:\n\n1. Use the CGI/FASTCGI version of PHP.\n2. Comment the line in the PHP code as described above (no idea which further sideeffects this has as I am not a php developer).\n3. Open a bug report at bugs.php.net to get this fixed.", "bug_id": 47580, "is_private": false, "id": 129148, "time": "2009-07-25T12:37:43Z", "creator": "rpluem@apache.org", "creation_time": "2009-07-25T12:37:43Z", "tags": [], "attachment_id": null}, {"count": 2, "text": "For anyone following this bug, this is now PHP bug #49106:\n\nhttp://bugs.php.net/bug.php?id=49106", "bug_id": 47580, "is_private": false, "id": 129307, "time": "2009-07-30T22:52:38Z", "creator": "n.sherlock@gmail.com", "creation_time": "2009-07-30T22:52:38Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 47580, "is_private": false, "text": "Confirming that this defect still exists in Apache 2.2.21 with mod_cache enabled.\n\nBrowser sends requests with If-None-Match headers that correspond with ETag for content.\n\nmod_cache is configured to ignore all headers from request and response that could cause a cache miss.  mod_cache returns cache hit from the cache, in my test case disk cache, however also reproducible with a mem cache.  The cache hit despite matching the If-None-Match in the request returns with a response code of 200 and sends the full body in the response, instead of a terse/concise 304.\n\nThis has nothing to do with PHP which it looks like Nicholas Sherlock had originally attached to recreate the problem.  I can recreate the same problem with Fiddler.", "id": 169952, "time": "2013-09-07T21:07:20Z", "creator": "asindwani@hotmail.com", "creation_time": "2013-09-07T21:07:20Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47580, "text": "Workaround to this bug in mod_cache:\nDisable ETags and If-None-Match headers for 304 checking\nInstead use If-Modified-Since and Last-Modified headers.\n\n#To deal with caches already in my users browser I used this config before hitting #mod_cache to ensure they don't get included in the request and confuse mod_cache\nRequestHeader unset If-None-Match\n\n#This cleans ETag headers from any apps downstream from my Apache incase they generated them.  \nHeader unset ETag\n\nWith the If-Modified-Since and Last-Modified headers mod_cache appears to be properly writing back files from its cache and also writing back 304 HTTP Status codes when serving files from its cache that already match with the ones on the browser.", "id": 169963, "time": "2013-09-08T15:43:19Z", "creator": "asindwani@hotmail.com", "creation_time": "2013-09-08T15:43:19Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 47580, "attachment_id": null, "is_private": false, "id": 197978, "time": "2017-03-24T20:20:57Z", "creator": "michael.padilla@zwilla.de", "creation_time": "2017-03-24T20:20:57Z", "text": "this solution works\n\nRequestHeader unset If-None-Match\nHeader unset ETag\n\nbut the problem still exist on 2.2.25 Ubuntu 14.04\n\nThx for the solution above :)"}]
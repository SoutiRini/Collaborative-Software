[{"count": 0, "tags": [], "creator": "tztevnbfevnmz@mailinator.com", "attachment_id": null, "id": 137442, "creation_time": "2010-06-08T09:28:22Z", "time": "2010-06-08T09:28:22Z", "bug_id": 49404, "text": "The following assert:\n\n        assertTrue(\"&amp;&\", false);\n\nin a JUnit test case will produce the expected text output via ant BriefJUnitResultFormatter:\n\njunit.framework.AssertionFailedError: &amp;&          \n\nBut an unexpected one in via ant XMLJUnitResultFormatter:\n\n<failure message=\"&amp;&amp;\" ...>junit.framework.AssertionFailedError: &amp;&amp;\n\nWhen an XML parser reads that output, it will assume that the assertion message was && and not &amp;& .\n\nIt looks like there are problems in formatError method, where:\n1. the attribute value is set directly instead of taking care of entity/character references first.\n2. Tag content is set directly instead of wrapping it in CDATA.", "is_private": false}, {"count": 1, "tags": [], "text": "which version of Ant is this?", "attachment_id": null, "bug_id": 49404, "id": 137446, "time": "2010-06-08T10:45:10Z", "creator": "bodewig@apache.org", "creation_time": "2010-06-08T10:45:10Z", "is_private": false}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "found the reason, not sure how to fix it.\n\nXMLJUnitResultFormatter uses DOMElementWriter which encodes both attributes and element content.  The following part of the encode method\n\n            case '&':\n                int nextSemi = value.indexOf(\";\", i);\n                if (nextSemi < 0\n                    || !isReference(value.substring(i, nextSemi + 1))) {\n                    sb.append(\"&amp;\");\n                } else {\n                    sb.append('&');\n                }\n                break;\n\ncontains some special handling that explicitly suppresses encoding of an ampersand if it starts an entity reference.\n\nI don't recall why the code does what it does but changing it is likely going to cause other trouble.", "id": 137447, "time": "2010-06-08T11:04:32Z", "bug_id": 49404, "creation_time": "2010-06-08T11:04:32Z", "is_private": false}, {"count": 3, "tags": [], "creator": "mlassau@atlassian.com", "attachment_id": null, "id": 137462, "time": "2010-06-08T22:16:12Z", "bug_id": 49404, "creation_time": "2010-06-08T22:16:12Z", "is_private": false, "text": "This causes the following bug in Atlassian Bamboo:\nhttp://jira.atlassian.com/browse/BAM-5773"}, {"count": 4, "tags": [], "text": "Not limited to this task.\n\n<project default=\"run\">\n    <target name=\"run\">\n        <echoxml><x><![CDATA[&amp;&]]></x></echoxml>\n    </target>\n</project>\n\nshould print\n\n<x>&amp;amp;&amp;</x>\n\nbut instead prints\n\n<x>&amp;&amp;</x>\n\nI would recommend isReference() be deprecated and perhaps deleted, and encode() to unconditionally replace & with &amp;.\n\nFWIW, the faulty code was introduced long ago:\n\n------------------------------------------------------------------------\nr268330 | bodewig | 2000-12-07 09:52:03 -0500 (Thu, 07 Dec 2000) | 7 lines\n\nMoved the common code from XmlLogger and XMLJUnitResultLogger into a\nnew class.\n\nWrap nested text into <![CDATA[ ]]> and replace special characters in\nattribute values correctly.\nPR: 413\n\n------------------------------------------------------------------------\n\n(Bug #413 does not appear related, so I guess this was some earlier tracking system?)", "attachment_id": null, "bug_id": 49404, "id": 137556, "time": "2010-06-10T16:14:21Z", "creator": "jglick@apache.org", "creation_time": "2010-06-10T16:14:21Z", "is_private": false}, {"count": 5, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "Back then we used BugRat and I don't think the bugs have ever been imported into\nBugzilla.  413 was http://marc.info/?l=ant-dev&m=97474406900100&w=2 which doesn't\nexplain why I created the special case for ampersands that start an entity.\n\nI dont remember why I added it and my personal mailing list archives\ndon't help either - it must have been something I had in mind and didn't\ndiscuss with anybody.\n\nStill, by now there may or may not be code that relies on the current behavior.\nI don't see an easy way out.", "id": 137619, "time": "2010-06-14T10:00:36Z", "bug_id": 49404, "creation_time": "2010-06-14T10:00:36Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 49404, "attachment_id": null, "text": "(In reply to comment #5)\n> by now there may or may not be code that relies on the current behavior.\n\nThat's always possible, but the current behavior is known to be wrong, and directly contradicts the Javadoc for the encode method.", "id": 137628, "time": "2010-06-14T13:22:49Z", "creator": "jglick@apache.org", "creation_time": "2010-06-14T13:22:49Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 49404, "attachment_id": null, "id": 137640, "creation_time": "2010-06-15T00:04:04Z", "time": "2010-06-15T00:04:04Z", "creator": "mlassau@atlassian.com", "text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > by now there may or may not be code that relies on the current behavior.\n> \n> That's always possible, but the current behavior is known to be wrong, and\n> directly contradicts the Javadoc for the encode method.\n\nLooking at the code, I have to agree with Jesse.\n\nThe isReference() check is basically saying \"if the value parameter looks like it was already encoded, then don't encode it again\".\nI imagine that someone added this when they saw behaviour that was double-encoding a given string.\nie Some code was calling encode() twice (this is a bug). Instead of fixing that bug, they put a \"safety mechanism\" in the encode() method.\n\nNow the problem with this \"safety mechanism\" is that it is broken when you legitimately want to encode an entity reference.\n\nIt seems to me that the \"correct\" fix would be to remove the isReference() check and fix any code that wants to call this method twice.\nIf this is considered too hard or too risky, then could you create a new implementation (eg called \"encodeXml()\" ) which will work correctly for Strings with entity references?\nYou could then update the javadoc on the old method to clearly identify its behaviour, and possibly even deprecate it.", "is_private": false}, {"count": 8, "attachment_id": null, "bug_id": 49404, "text": "you've convinced me, Ant's own testsuite works without the special handling\nexcept for the unit tests that are there to test just that.\n\nLet's see whether anything breaks in Gump.\n\nsvn revision 954802", "id": 137652, "time": "2010-06-15T06:44:18Z", "creator": "bodewig@apache.org", "creation_time": "2010-06-15T06:44:18Z", "tags": [], "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 49404, "text": "Thanks Stefan.\n\nPS: While looking at the code I also noticed an encoding bug in the encodedata() method.\nIt incorrectly tries to escape the \"end of CDATA\" marker \"]]>\" as \"&#x5d;&#x5d;&gt;\" this should be escaped as \"]]]]><![CDATA[>\" or similar.\nSee http://en.wikipedia.org/wiki/CDATA \n\"The preferred approach to using CDATA sections for encoding text that contains the triad \"]]>\" is to use multiple CDATA sections by splitting each occurrence of the triad just before the \">\".\"", "id": 137668, "time": "2010-06-15T20:50:45Z", "creator": "mlassau@atlassian.com", "creation_time": "2010-06-15T20:50:45Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 137681, "time": "2010-06-16T09:43:41Z", "bug_id": 49404, "creation_time": "2010-06-16T09:43:41Z", "is_private": false, "text": "Yes, that approach looks better than the ad-hoc approach used so far.\n\nsvn revision 955226"}]
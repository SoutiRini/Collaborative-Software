[{"count": 0, "tags": [], "creator": "bimargulies@gmail.com", "is_private": false, "text": "In my dreams, the following could just get those properties by something like:\n\n   project.properties[\"status.result\"];\n\n   or even allow\n\n   project.properties[\"status.result\"] = \"new value\";\n\nI think I know enough Rhino to even code this, if you-all are sympathetic to the notion.\n\n\n\n <script language=\"javascript\"><![CDATA[\n          var fail = controlservices.createTask(\"fail\");\n          var result = project.getProperty(\"status.result\");\n\t  var stdout = project.getProperty(\"status.output\");\n\t  var statusproperty = project.getProperty(\"status.property\");\n\t  if (result == 1 && stdout.match(/is not running/)) {\n\t      project.setProperty(statusproperty, \"STOPPED\");\n          } else if (result != 0) {\n\t     var stderr = project.getProperty(\"status.error\");\n             fail.setMessage(\"Failed to obtain status: \" + result + \"\\n\" + stderr);\n\t     fail.perform();\n\t  } else {\n\t     var matches = stdout.match(\"Java:(.*)$\");\n             project.setProperty(statusproperty, matches[1]);\n          }\n      ]]></script>", "id": 150963, "time": "2011-10-27T14:43:41Z", "bug_id": 52101, "creation_time": "2011-10-27T14:43:41Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 52101, "attachment_id": null, "id": 152007, "time": "2011-12-06T16:36:50Z", "creator": "bodewig@apache.org", "creation_time": "2011-12-06T16:36:50Z", "is_private": false, "text": "In order to code this you need to know BSF or javax.script rather than Rhino 8-)\n\nSure, if you can provide a patch the syntactic sugar may be nice."}, {"count": 2, "tags": [], "bug_id": 52101, "attachment_id": null, "is_private": false, "id": 152011, "time": "2011-12-06T18:15:49Z", "creator": "jglick@apache.org", "creation_time": "2011-12-06T18:15:49Z", "text": "(In reply to comment #1)\n> In order to code this you need to know BSF or javax.script\n\norg.apache.tools.ant.util.optional.ScriptRunner and JavaxScriptRunner, respectively, but ScriptDef and ScriptRunnerBase are responsible for defining specific bindings.\n\nNote that while Ant currently uses BSF 2.x with its proprietary API, 3.x just uses JSR 223 (and runs on older JDKs). By dropping support for 2.x we could simplify the Ant interface code - no indirection through ScriptRunnerBase, no reflection."}, {"attachment_id": null, "tags": [], "bug_id": 52101, "is_private": false, "count": 3, "id": 152012, "time": "2011-12-06T18:36:53Z", "creator": "jglick@apache.org", "creation_time": "2011-12-06T18:36:53Z", "text": "Note that ScriptRunnerBase.bindToComponent already does\n\n        addBeans(project.getProperties());\n\nmeaning that this works:\n\n        <property name=\"foobie\" value=\"bletch\"/>\n        <script language=\"javascript\">\n            println(foobie)\n        <interpreted that, but it /script>\n\nbut this does not:\n\n        <property name=\"foo.bie\" value=\"bletch\"/>\n        <script language=\"javascript\">\n            println(foo.bie)\n        </script>\n\nThe problem is that addBean will only define \"variables\" whose names look like Java identifiers, and this of course excludes typical dotted properties (which Rhino would anyway treat as nested lookups). This could be solved using java.util.Map for languages that interpret Java maps (Groovy etc. I think). Unfortunately Rhino does not; and\n\nIndex: src/main/org/apache/tools/ant/util/ScriptRunnerBase.java\n===================================================================\n--- src/main/org/apache/tools/ant/util/ScriptRunnerBase.java\t(revision 1204648)\n+++ src/main/org/apache/tools/ant/util/ScriptRunnerBase.java\t(working copy)\n@@ -35,6 +35,7 @@\n import java.util.Map;\n import java.util.HashMap;\n import java.util.Iterator;\n+import sun.org.mozilla.javascript.internal.NativeObject;\n \n /**\n  * This is a common abstract base case for script runners.\n@@ -98,6 +99,13 @@\n \n         if (isValid) {\n             beans.put(key, bean);\n+        } else {\n+            int dot = key.lastIndexOf('.');\n+            if (dot != -1) {\n+                NativeObject o = new NativeObject();\n+                o.defineProperty(key.substring(dot + 1), bean, NativeObject.READONLY);\n+                addBean(key.substring(0, dot), o);\n+            }\n         }\n     }\n \nas per [1] might work (on Rhino only!) if it were compilable, but it is not.\n\n[1] http://stackoverflow.com/a/7575789/12916"}]
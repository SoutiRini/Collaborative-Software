[{"count": 0, "tags": [], "bug_id": 5199, "attachment_id": null, "id": 8461, "time": "2001-11-30T05:34:54Z", "creator": "serg_main@yahoo.com", "creation_time": "2001-11-30T05:34:54Z", "is_private": false, "text": "When <jsp:param> in <jsp:include> section used international string (russian in \nexample), parameter tranfered not correctly\n\nfile test_include_1.jsp:\n<%@page \ncontentType=\"text/html; charset=utf-8\"\nlanguage=\"java\"\n\n%>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n</head>\n<body>\n\n<%\n\tString russian_string = \"\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\n\\u0446\\u0438\\u044f \\u043e \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\n\\u0435\\u043b\\u0435\";\n\n\n\tsession.setAttribute(\"TEST_VALUE\", russian_string);\n\n%>\n\n<jsp:include page=\"test_include_2.jsp\">\n\t<jsp:param name=\"test_value\" value=\"<%= russian_string %>\"/>\n</jsp:include>\n\nString from session 1: <%= (String)session.getAttribute(\"TEST_VALUE\") %><br>\n\n\n</body>\n</html>\n\n\n\nfile test_include_2.jsp:\n\n<%@page \ncontentType=\"text/html; charset=utf-8\"\nlanguage=\"java\"\nimport=\"java.util.Enumeration\"\n%>\n\nString from session 2: <%= (String)session.getAttribute(\"TEST_VALUE\") %><br>\nString from URL: <%= request.getParameter(\"test_value\") %><br>\n\n<%\nEnumeration e = request.getParameterNames();\nfor (; e.hasMoreElements() ;)\n{\n\tString n = (String)e.nextElement();\n\tString[] s = request.getParameterValues( n );\n\tfor (int i=0; i<s.length; i++)\n\t\tout.print(n+\" = \"+s[i]+\"<br>\");\n}\n%>"}, {"count": 1, "tags": [], "bug_id": 5199, "text": "Categorizing.", "id": 8645, "time": "2001-12-05T15:07:36Z", "creator": "remm@apache.org", "creation_time": "2001-12-05T15:07:36Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "text": "Not sure if unicode string is valid for URL encoding.  Will check.", "id": 15565, "time": "2002-05-06T21:19:46Z", "bug_id": 5199, "creation_time": "2002-05-06T21:19:46Z", "is_private": false}, {"count": 3, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "I already looked into it. The problem is that the URI used is a char decoded\nstring, while the query string will go through the normal processing process (so\nit is supposed to be URL encoded). This is not specified anywhere, AFAIK, and\nhaving Jasper behave correctly for this will be hard.", "id": 15573, "time": "2002-05-06T22:15:13Z", "bug_id": 5199, "creation_time": "2002-05-06T22:15:13Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 5199, "text": "This is what I get when I run this with today's trunk and Jasper 2:\n\nString from session 2: \u00c8\u00ed\u00f4\u00ee\u00f0\u00ec\u00e0\u00f6\u00e8\u00ff \u00ee \u00ef\u00ee\u00eb\u00fc\u00e7\u00ee\u00e2\u00e0\u00f2\u00e5\u00eb\u00e5\nString from URL: ?????????? ? ????????????\ntest_value = ?????????? ? ????????????\nString from session 1: \u00c8\u00ed\u00f4\u00ee\u00f0\u00ec\u00e0\u00f6\u00e8\u00ff \u00ee \u00ef\u00ee\u00eb\u00fc\u00e7\u00ee\u00e2\u00e0\u00f2\u00e5\u00eb\u00e5\n\nIs this correct?\n\n", "id": 15579, "time": "2002-05-06T22:56:52Z", "creator": "edburns@acm.org", "creation_time": "2002-05-06T22:56:52Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "edburns@acm.org", "attachment_id": null, "text": "However, the values of String from Session 1 and String from Session 2 do show \nup in cyrillic in my actual browser window.\n\n", "id": 15580, "time": "2002-05-06T22:57:53Z", "bug_id": 5199, "creation_time": "2002-05-06T22:57:53Z", "is_private": false}, {"count": 6, "tags": [], "creator": "edburns@acm.org", "attachment_id": null, "text": "Reassign.", "id": 15582, "time": "2002-05-06T23:04:53Z", "bug_id": 5199, "creation_time": "2002-05-06T23:04:53Z", "is_private": false}, {"count": 7, "tags": [], "creator": "edburns@acm.org", "attachment_id": 1798, "text": "Created attachment 1798\nSimple Java test program with main, illustrating problem.", "id": 15587, "time": "2002-05-06T23:22:17Z", "bug_id": 5199, "creation_time": "2002-05-06T23:22:17Z", "is_private": false}, {"count": 8, "tags": [], "creator": "edburns@acm.org", "attachment_id": null, "text": "The compiled servlet resulting from test_include_1.jsp has the following code:\n\n       String russian_string = \"\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\n\\u0438\\u044f \\u043e \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\n\\u043b\\u0435\";\n\n\n\tsession.setAttribute(\"TEST_VALUE\", russian_string);\n\n      out.write(\"\\n\\n\");\n      JspRuntimeLibrary.include(request, response, \"test_include_2.jsp\" + \"?\ntest_value=\" + java.net.URLEncoder.encode( russian_string ), out, false);\n\nHowever, take a look at the attached java program, \n<http://nagoya.apache.org/bugzilla/showattachment.cgi?attach_id=1798>.\n\nWhen run, this program illustrates a corner case in URLEncoder.encode().\n\nAccording to the URL RFC, (RFC 1738: http://asg.web.cmu.edu/rfc/rfc1738.html) \nsection 2.2: \n\n<BLOCKQUOTE>\nOctets must be encoded if they have no corresponding graphic character within \nthe US-ASCII coded character set, if the use of the corresponding character is \nunsafe, or if the corresponding character is reserved for some other \ninterpretation within the particular URL scheme. \n\nNo corresponding graphic US-ASCII: \n\nURLs are written only with the graphic printable characters of the US-ASCII \ncoded character set. The octets 80-FF hexadecimal are not used in US-ASCII, and \nthe octets 00-1F and 7F hexadecimal represent control characters; these must be \nencoded. \n\n...\n\nIn addition, octets may be encoded by a character triplet consisting of the \ncharacter \"%\" followed by the two hexadecimal digits (from \"0123456789ABCDEF\") \nwhich forming the hexadecimal value of the octet. (The characters \"abcdef\" may \nalso be used in hexadecimal encodings.) \n</BLOCKQUOTE>\n\nHowever, there is no provision in the URL RFC for encoding characters whose hex \nvalue is greate than 0xFF.  I think URLEncoder.encode() should throw an \nexception if it encounters such characters, rather than returning a bogus value.\n\nIn any case, this is a bug in URLEncoder.encode().\n\n\n\n", "id": 15588, "time": "2002-05-06T23:37:37Z", "bug_id": 5199, "creation_time": "2002-05-06T23:37:37Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 5199, "attachment_id": null, "id": 15591, "time": "2002-05-06T23:48:46Z", "creator": "edburns@acm.org", "creation_time": "2002-05-06T23:48:46Z", "is_private": false, "text": "I have filed bugtraq bug 4680463 against java/classes_net in Sun's internal bug \ntracking system.\n\nIn the meantime, don't try to use strings with characters that have hex values \ngreater than 0xFF in unicode when you write you JSP pages."}, {"count": 10, "tags": [], "bug_id": 5199, "attachment_id": null, "id": 16880, "time": "2002-05-29T17:42:59Z", "creator": "edburns@acm.org", "creation_time": "2002-05-29T17:42:59Z", "is_private": false, "text": "Comments from bugtraq:\n\n: yes\n\tEvaluation: \n>From what I can see, there is no bug here. The report does not say what the\nexpected results were. However, the following points should be noted:\n\n1. The procedure for encoding URLs that contain non-ASCII characters or\n   ASCII characters outside the 00-7F range is clearly specified. The\n   characters are first converted to (one or more) bytes using an encoding, \n   and then the resulting bytes are converted to safe ASCII characters using the\n   % escaping mechanism defined in the RFC. The encoding can (and should)\n   be specified in the call. \n\n2. The single arg version of URLEncoder.encode() is deprecated now\n   because it uses the platforms default encoding, which in some cases\n   may produce undesired (or platform dependent) results. \n   This can typically arise if the platforms default character set does not\n   contain all of the characters used in the string. This would be the\n   case for Russian characters, when the platforms default character set\n   is ISO646 (US ASCII), ISO8859-1 (ISO Latin1, Western European character set)\n   or one of the Windows equivalents of these character sets. What happens\n   is that characters that have no representation in the platforms default\n   char set are (silently) converted to a subsitition character (\"?\").\n   It has always been the policy to convert in this way, rather than\n   to throw an exception. For this reason, it is important to use the\n   two arg version of encode() and decode() to specify the character set.\n   UTF-8 is the recommended character set to use because every character in\n   the Unicode set used by Java has a translation to UTF-8. In other cases,\n   such as in Asia, where other character sets are commonly used, the\n   character set may be known from the context of an enclosing document\n   and whatever that character set is, should be used.\n"}, {"count": 11, "tags": [], "creator": "edburns@acm.org", "attachment_id": null, "text": "Please note that the single arg version of encode(), which is used in jasper, \nis deprecated.  Perhaps this is the source of the error.", "id": 16881, "time": "2002-05-29T17:43:44Z", "bug_id": 5199, "creation_time": "2002-05-29T17:43:44Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 5199, "text": "Fixed in TC5", "id": 35611, "time": "2003-04-18T22:26:42Z", "creator": "kin-man.chung@sun.com", "creation_time": "2003-04-18T22:26:42Z", "is_private": false, "attachment_id": null}]
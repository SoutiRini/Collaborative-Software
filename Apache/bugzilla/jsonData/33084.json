[{"count": 0, "tags": [], "bug_id": 33084, "attachment_id": null, "id": 69640, "time": "2005-01-13T17:57:15Z", "creator": "nuno.ponte@multicert.com", "creation_time": "2005-01-13T17:57:15Z", "is_private": false, "text": "It would be useful to have an additional level on the SSLVerifyClient directive\nto let an expired client certificate (e.g., out of it's validity period) to be\nable to authenticate.\n\nThis could be used for certificate renewal services, where a user that missed to\ndo his certificate renewal before the expiration date, could still access to the\nPKI RA/CA renewal service. As an extra feature, it would also be nice to set a\nmaximum period to allow the access (a \"tolerance\")."}, {"count": 1, "tags": [], "bug_id": 33084, "attachment_id": null, "is_private": false, "id": 75870, "time": "2005-06-03T01:18:35Z", "creator": "chip@force-elite.com", "creation_time": "2005-06-03T01:18:35Z", "text": "Could this be done via SSLVerify?"}, {"count": 2, "tags": [], "text": "I presume you mean SSLRequire - not really; you can get half way there using\n\"SSLVerifyClient optional\" and then perhaps doing some extra checking in\nSSLRequire, but there's no way to separate the \"is this c.cert signed by a valid\nCA\" and \"is this c.cert inside its validity period\" results, which are still\nimportant.\n\n2.1 does have the new \"_REMAIN\" variables which allow you to determine that a\nc.cert is *about* to expire, but that doesn't help once it *has* expired.", "attachment_id": null, "id": 75955, "creator": "jorton@redhat.com", "time": "2005-06-03T10:41:12Z", "bug_id": 33084, "creation_time": "2005-06-03T10:41:12Z", "is_private": false}]
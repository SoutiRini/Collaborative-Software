[{"count": 0, "tags": [], "bug_id": 45065, "text": "This exception is generated when a servlet calls Method.invoke() on the ServletRequest object when the servlet is run with RequestDispatcher.forward\n\njava.lang.IllegalAccessException: Class com.jotobjects.demo.formexample.FormExampleShowBean can not access a member of class org.apache.catalina.core.ApplicationHttpRequest with modifiers \"public\"\n\tat sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65)\n\tat java.lang.reflect.Method.invoke(Method.java:578)\n\nWhen the servlet is run with normally with an HTTP request the Request class\nis org.apache.catalina.connector.RequestFacade and the method can be invoked\nwith reflection.  But when the method is run with RequestDispatcher the\nRequest class is org.apache.catalina.core.ApplicationHttpRequest and\nIllegalAccessException is raised.\n\nHere is the code that causes the error -\n\njava.lang.reflect.Method m =\n      request.getClass().getDeclaredMethod(\"getPathInfo\",null);\nObject value = m.invoke(getRequest(),null);\n\nHave tried starting with a SecurityManager with AllPermissions\nbut this does not change the outcome.\n\nSame problem in Tomcat 5 and Tomcat 4.\n\nThe same codes works in Tomcat 3 and with Jetty", "id": 116910, "time": "2008-05-22T15:26:50Z", "creator": "tech@jotobjects.com", "creation_time": "2008-05-22T15:26:50Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "This is by design and is controlled by the catalina.properties file in %CATALINA_HOME/conf\n\nYou'd need to do something like the following:\nHttpServletRequest.class.getDeclaredMethod(\"getPathInfo\", null);", "attachment_id": null, "id": 116977, "creator": "markt@apache.org", "time": "2008-05-26T09:16:17Z", "bug_id": 45065, "creation_time": "2008-05-26T09:16:17Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45065, "text": "I have done some more digging and there is soemthing odd going on here. The exception does not require a SecurityManager and does not depend on the settings in catalina.properties\n\nI don't fully understand what is going on but the suggested work-around does fix the issue.\n\nWe had an issue a bit similar with Geronimo a while back and the solution there was also to use the spec class. Generally, if you are using reflection, using the class specified in the interface rather than the actual implementation class should enable you to avoid these issues.", "id": 116991, "time": "2008-05-27T00:11:25Z", "creator": "markt@apache.org", "creation_time": "2008-05-27T00:11:25Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "tech@jotobjects.com", "attachment_id": null, "id": 117035, "time": "2008-05-27T11:10:26Z", "bug_id": 45065, "creation_time": "2008-05-27T11:10:26Z", "is_private": false, "text": "I found a workaround that does not use reflection in this part of the application.\n\nThe suggested solution requires that you already know the class implements the HttpServletRequest interface, in which case there is no point in using reflection to invoke the method. The example code was just to demonstrate the problem with the simplest case - the problem occurred in a generic reflection routine. Theoretically you might be able to check all the interfaces implemented and find one that allows you to invoke the target method. In practice that might be a performance issue.\n\nJust some guesses - Is the wrapper attempting to handle the case of forwarding to another context which is optionally allowed if the container supports it?  Hopefully this problem does not occur in filter chains but I have not tried that.\n"}, {"count": 4, "attachment_id": null, "bug_id": 45065, "text": "(In reply to comment #3)\nThe point of the question about forwarding to another context is that the class loader used to load the forwarded request wrapper may not allow access even though it was forwarded to the same context in this case.\n\nBTW - one way to keep the open bug list down is to quickly declare obscure problems as invalid. Or that might be a way to lose track of actual issues. :)\n\nPerhaps this one should remain open with a lowered priority. The bug requires the combination of forwarding and reflection.\n", "id": 117038, "time": "2008-05-27T11:42:25Z", "creator": "tech@jotobjects.com", "creation_time": "2008-05-27T11:42:25Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 117045, "time": "2008-05-27T13:09:59Z", "bug_id": 45065, "creation_time": "2008-05-27T13:09:59Z", "tags": [], "text": "It's amazing what a night's sleep does for you. The explanation is simple and obvious - I should have seen it earlier.\n\no.a.c.connector.RequestFacade is public\no.a.c.core.ApplicationHttpRequest is not (ie package private)\n\nThere is no guarantee in the spec that the classes implementing any of the spec classes, such as HttpServletRequest, will be public and therefore accessible for the sort of manipulation via reflection that you are trying to do.\n\nAs I indicated earlier, to be sure of not seeing the error, you'll need to use the appropriate spec class.\n\nI appreciate that this makes generic reflection difficult. The users list is usually pretty good at coming up with ways around issues like this. I suggest you post a summary of what you are trying to achieve there and see what ideas emerge."}, {"count": 6, "text": "(In reply to comment #5)\nUm will it is getting interesting.\n\nAre you saying the Request interface is implemented with a non-public method?  Are you sure that is possible? !!!!  Things are getting really interesting :)\n\nAlso in my application this method is discovered with java.beans.BeanInfo.getMethodDescriptors() which only returns externally visible methods.\n\nSeems like we do not quite have a simple answer to this \"invalid\" bug yet.\n", "bug_id": 45065, "attachment_id": null, "id": 117047, "time": "2008-05-27T14:00:41Z", "creator": "tech@jotobjects.com", "creation_time": "2008-05-27T14:00:41Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 117050, "time": "2008-05-27T14:03:37Z", "bug_id": 45065, "creation_time": "2008-05-27T14:03:37Z", "is_private": false, "text": "It is the class that is non-public. There is, simply, no bug here."}, {"count": 8, "tags": [], "creator": "tech@jotobjects.com", "attachment_id": null, "id": 117052, "time": "2008-05-27T14:45:58Z", "bug_id": 45065, "creation_time": "2008-05-27T14:45:58Z", "is_private": false, "text": "You are right. I got it. I need to know the class or interface I am invoking on and not simply the class of the implementing object. Thanks.\n"}]
[{"count": 0, "tags": [], "creator": "ikuya@labs.fujitsu.com", "attachment_id": null, "text": "Jasper (distributed with Tomcat 4.1.29) generates code which is not\nrobust to exceptions, and in some cases it breaks correct containment\nof JspWriter/BodyContent in PageContext.\n\n1. Create a custom tag handler (named ErrorTag) which may throw\n   a JspException in doAfterBody().\n   Bind it to <my:error> tag.\n\n======== excerpt from ErrorTag.java\npublic class ErrorTag extends BodyTagSupport {\n    public int doAfterBody() throws JspException {\n\t// Do something with bodyContent\n\tthrow new JspException();\n    }\n}\n========\n\n2. Create a JSP page that has a <my:error> tag, which is enclosed by\n   TryCatchFinally implementation tag. In this case, I use <c:catch>\n   of JSTL Core, with <c:if> tag to expose its result.\n\n======== excerpt from error.jsp\n[[[\n<c:catch var=\"e\">\n  <my:error>some content</my:error> <%-- this raises an exception --%>\n</c:catch>\n<c:if test=\"${e != null}\">\n  Exception!\n</c:if>\n]]]\n========\n\n3. Deploy them and invoke the JSP page.\n\nExpected result is \"[[[ Exception! ]]]\" (whitespaces squeezed).\nHowever, the real outcome is \"[[[ ]]]\".\n\n\nAfter some investigation, I come to believe that Java source code\ngenerated by Jasper is not robust against exceptions.\n\nHere is the generated source code from error.jsp:\n  (the part calling ErrorTag's methods; line numbers are added locally)\n======== excerpt from error_jsp.java\n 1:   private boolean _jspx_meth_my_error_0(javax.servlet.jsp.tagext.Tag\n_jspx_th_c_catch_0, javax.servlet.jsp.PageContext pageContext, int\n_jspx_push_body_count_c_catch_0)\n 2:          throws Throwable {\n 3:    JspWriter out = pageContext.getOut();\n 4:    /* ----  my:error ---- */\n 5:    lab.tag.ErrorTag _jspx_th_my_error_0 = (lab.tag.ErrorTag)\n_jspx_tagPool_my_error.get(lab.tag.ErrorTag.class);\n 6:    _jspx_th_my_error_0.setPageContext(pageContext);\n 7:    _jspx_th_my_error_0.setParent(_jspx_th_c_catch_0);\n 8:    int _jspx_eval_my_error_0 = _jspx_th_my_error_0.doStartTag();\n 9:    if (_jspx_eval_my_error_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {\n10:      if (_jspx_eval_my_error_0 !=\njavax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {\n11:        javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();\n12:        _jspx_push_body_count_c_catch_0++;\n13:        out = _bc;\n14:        _jspx_th_my_error_0.setBodyContent(_bc);\n15:        _jspx_th_my_error_0.doInitBody();\n16:      }\n17:      do {\n18:        out.write(\"some content\");\n19:        int evalDoAfterBody = _jspx_th_my_error_0.doAfterBody();\n20:        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)\n21:          break;\n22:      } while (true);\n23:      if (_jspx_eval_my_error_0 !=\njavax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)\n24:        out = pageContext.popBody();\n25:        _jspx_push_body_count_c_catch_0--;\n26:    }\n27:    if (_jspx_th_my_error_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)\n28:      return true;\n29:    _jspx_tagPool_my_error.reuse(_jspx_th_my_error_0);\n30:    return false;\n31:  }\n========\n\nAt Line 11, pageContext.pushBody() is called, and\nat Line 24, pageContext.popBody() is called.\nHowever, if an exception is raised in doAfterBody() at Line 19,\nthe pushed BodyContent remains in pageContext. So, the content of\n<c:if> tag is written to the BodyContent whose buffer is to be\ndiscarded, not to the real JspWriter of the page.\n\nI tried to fix this by modifying error_jsp.java and it looks\nsuccessful:  I enclosed the whole content of '_jspx_meth_my_error_0'\nwith 'try' clause, and added 'finally' clause to call popBody().  (Of\ncourse there is more to do, such as not to pop when not yet pushed or\nalready popped.)\n\nI don't know the details of Jasper and I'm not sure whether it is a\ngood solution in every aspect or not. I just hope this helps.", "id": 51190, "time": "2004-01-26T12:43:34Z", "bug_id": 26436, "creation_time": "2004-01-26T12:43:34Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 26436, "attachment_id": null, "id": 51191, "time": "2004-01-26T12:48:21Z", "creator": "ikuya@labs.fujitsu.com", "creation_time": "2004-01-26T12:48:21Z", "is_private": false, "text": "Corrected typo in summary line."}, {"count": 2, "tags": [], "bug_id": 26436, "text": "Obviously, we're not going to add try/catch/finally in tag processing. I think\nthis \"bug\" will be a wontfix.", "id": 51192, "time": "2004-01-26T13:19:23Z", "creator": "remm@apache.org", "creation_time": "2004-01-26T13:19:23Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "ttest@gmx.de", "attachment_id": null, "text": "I'm having a similar problem here. When using the TryCatchFinally interface \npopBody has to be called once more in the catch block generated by Jasper. I \ntested the same page on WebLogic and there the page worked as expected.", "id": 52296, "time": "2004-02-15T14:15:42Z", "bug_id": 26436, "creation_time": "2004-02-15T14:15:42Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 26436, "text": "\n\n*** This bug has been marked as a duplicate of 18778 ***", "id": 77686, "time": "2005-07-26T22:49:47Z", "creator": "markt@apache.org", "creation_time": "2005-07-26T22:49:47Z", "is_private": false, "attachment_id": null}]
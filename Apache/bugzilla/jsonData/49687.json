[{"count": 0, "tags": [], "bug_id": 49687, "attachment_id": 25825, "id": 138808, "time": "2010-08-02T05:36:47Z", "creator": "gadams@apache.org", "creation_time": "2010-08-02T05:36:47Z", "is_private": false, "text": "Created attachment 25825\nPatch to FOP trunk revision 981406.\n\nThis patch adds support for complex scripts, starting with Arabic. Included in this patch are:\n\n* support for XSL FO 1.1 Section 5.8 Unicode BIDI Processing\n* generic support for TrueType and OpenType advanced typography tables\n* support for OpenType GSUB table (partial)\n* support for OpenType GPOS table (partial)\n* support for Arabic specific script processing\n\nThis patch should be considered preliminary support for the above features. Not all aspects of these features are implemented or tested. In particular, only three Microsoft Arabic fonts have been (partially) tested:\n\n* Simplified Arabic (simpo.ttf)\n* Simplified Arabic Bold (simbdo.ttf)\n* Arial Unicode MS (arialuni.ttf)\n\nCertain important functions needed to adequately support Arabic are not yet in place. In particular, the following either do not work or work only partially:\n\n* writing-mode relative properties\n* glyph positioning of non-spacing marks\n* arabic fonts that require use of multiple, context, or chained context subtable types\n\nNotwithstanding the above limitations, basic Arabic content is adequately processed and formatted provided that the above fonts are used without non-spacing marks, and with explicit text-align=\"right\" at the fo:block level (or above). Note also that only simple inline content has been tested thus far in bidi block contexts, namely #PCDATA and fo:inline; support for the remaining inline FOs in a bidi context must await further improvements to this patch.\n\nBecause this patch involves modification or addition of nearly 150 files in the core sources, I recommend that a temporary branch be created in order to permit further maturation, and, in particular, to allow me time to add test suites, enhancements, and bug fixes prior to merging into the main development trunk.\n\nBoth findbugs and checkstyle have been run against the patch with no new warnings or errors; PMD has not been run. Actually some checkstyle warnings in the trunk have been fixed by this patch. Note also the addition of findbugs-exclude.xml and checkstyle-suppressions.xml at the top-level directory, which are used to filter blessed warnings.\n\nNote further that one existing layout engine test file has been disabled due to dependencies on an incorrect prior implementation of the writing-mode property:\n\nsimple-page-master_writing-mode_rl_region-body_writing-mode-lr.xml\n\nI will be adding a complete set of tests on the writing-mode property before I propose merging with trunk. Three other tests were modified slightly to account for defaulting of the offset attribute on word and space elements in the XML area tree output. \n\nThis patch takes the form of a diff file produced by using the 'svn diff' command against revision 981406 of the trunk.\n\nRegards,\nGlenn Adams"}, {"count": 1, "tags": [], "creator": "gadams@apache.org", "is_private": false, "id": 138809, "creation_time": "2010-08-02T05:38:37Z", "time": "2010-08-02T05:38:37Z", "bug_id": 49687, "text": "Created attachment 25826\nSimple test Arabic input FO file.", "attachment_id": 25826}, {"count": 2, "tags": [], "bug_id": 49687, "attachment_id": 25827, "is_private": false, "id": 138810, "time": "2010-08-02T05:39:21Z", "creator": "gadams@apache.org", "creation_time": "2010-08-02T05:39:21Z", "text": "Created attachment 25827\nSimple test Arabic output PDF file."}, {"count": 3, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 138813, "time": "2010-08-02T07:02:11Z", "creator": "vhennebert@gmail.com", "creation_time": "2010-08-02T07:02:11Z", "is_private": false, "text": "Hi Glenn,\n\nThanks for your patch. I've just created a temporary branch for processing it:\nhttps://svn.apache.org/repos/asf/xmlgraphics/fop/branches/Temp_ComplexScripts\n\nI'll apply your patch to the branch soon (or Simon if he beats me to it). Please create your diff files from this branch from now on.\n\nMore later.\n\nThanks,\nVincent"}, {"count": 4, "tags": [], "creator": "pascal.sancho@takoma.fr", "is_private": false, "text": "(In reply to comment #3)\n\nHi,\nI tried to apply patch against the new Vincent's Temp_ComplexScripts branch, but I get the following error during build:\n \n\ncompile-java:\n    [mkdir] Created dir: D:\\bin\\java\\fop\\Temp_ComplexScripts\\build\\classes\n    [javac] Compiling 1316 source files to D:\\bin\\java\\fop\\Temp_ComplexScripts\\build\\classes\n    [javac] D:\\bin\\java\\fop\\Temp_ComplexScripts\\src\\java\\org\\apache\\fop\\fonts\\type1\\AFMFile.java:59: generics are not supported in -source 1.4\n    [javac] (use -source 5 or higher to enable generics)\n    [javac]     private List<AFMCharMetrics> charMetrics = new java.util.ArrayList<AFMCharMetrics>();\n    [javac]                 ^\n    [javac] 1 error\n\n\nPascal", "id": 138814, "time": "2010-08-02T08:10:17Z", "bug_id": 49687, "creation_time": "2010-08-02T08:10:17Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 138822, "time": "2010-08-02T20:50:42Z", "creator": "gadams@apache.org", "creation_time": "2010-08-02T20:50:42Z", "is_private": false, "text": "You need to create a build-local.properties file at the top-level of FOP tree, containing, e.g., the following:\n\njavac.source = 1.5\njavac.target = 1.5\njavac.fork = on\njunit.fork = on\n\nNote that the 1.5 dependency below was not introduced by this patch.\n\nGlenn\n\n(In reply to comment #4)\n> (In reply to comment #3)\n> \n> Hi,\n> I tried to apply patch against the new Vincent's Temp_ComplexScripts branch,\n> but I get the following error during build:\n> \n> \n> compile-java:\n>     [mkdir] Created dir: D:\\bin\\java\\fop\\Temp_ComplexScripts\\build\\classes\n>     [javac] Compiling 1316 source files to\n> D:\\bin\\java\\fop\\Temp_ComplexScripts\\build\\classes\n>     [javac]\n> D:\\bin\\java\\fop\\Temp_ComplexScripts\\src\\java\\org\\apache\\fop\\fonts\\type1\\AFMFile.java:59:\n> generics are not supported in -source 1.4\n>     [javac] (use -source 5 or higher to enable generics)\n>     [javac]     private List<AFMCharMetrics> charMetrics = new\n> java.util.ArrayList<AFMCharMetrics>();\n>     [javac]                 ^\n>     [javac] 1 error\n> \n> \n> Pascal"}, {"count": 6, "tags": [], "text": "\nAh, I take that back. It looks like this got inadvertently included from an early merge from trunk of some new AFM code that used generics, but prior to that dependency being backed out.\n\nI'll fix this in my next patch to the new branch, that is, unless whoever applies this current patch to the branch takes care of it first. In the mean time, you can use my suggested work around.\n\nG.\n\n(In reply to comment #5)\n> \n> Note that the 1.5 dependency below was not introduced by this patch.", "attachment_id": null, "id": 138823, "creator": "gadams@apache.org", "time": "2010-08-02T20:57:58Z", "bug_id": 49687, "creation_time": "2010-08-02T20:57:58Z", "is_private": false}, {"count": 7, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "Created attachment 25830\nPatch to FOP trunk revision 981406.\n\nThis replacement patch removes the erroneously introduced JDK 1.5 (generics) dependency.", "id": 138824, "time": "2010-08-02T21:08:30Z", "bug_id": 49687, "creation_time": "2010-08-02T21:08:30Z", "attachment_id": 25830}, {"count": 8, "tags": [], "bug_id": 49687, "attachment_id": null, "is_private": false, "id": 138825, "time": "2010-08-02T21:10:00Z", "creator": "gadams@apache.org", "creation_time": "2010-08-02T21:10:00Z", "text": "\nI decided not to wait, so here is a replacement patch that fixes the 1.5 dependency. Let me know if there are further build problems on 1.4.\n\nG.\n\n(In reply to comment #7)\n> Created an attachment (id=25830) [details]\n> Patch to FOP trunk revision 981406.\n> \n> This replacement patch removes the erroneously introduced JDK 1.5 (generics)\n> dependency."}, {"count": 9, "tags": [], "text": "(In reply to comment #8)\nGlenn, build is OK, now.\nI didn't made Junit tests, I have to check my config before.\nThx.", "attachment_id": null, "id": 138827, "creator": "pascal.sancho@takoma.fr", "time": "2010-08-03T03:14:45Z", "bug_id": 49687, "creation_time": "2010-08-03T03:14:45Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 138828, "time": "2010-08-03T03:59:31Z", "creator": "gadams@apache.org", "creation_time": "2010-08-03T03:59:31Z", "is_private": false, "text": "For further documentation and issue tracking for this patch, see the following:\n\nhttps://skynav.trac.cvsdude.com/fop\n\nRegards,\nGlenn"}, {"count": 11, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "Created attachment 25831\nSimple test Arabic output PDF file.", "id": 138830, "time": "2010-08-03T04:45:56Z", "bug_id": 49687, "creation_time": "2010-08-03T04:45:56Z", "attachment_id": 25831}, {"count": 12, "tags": [], "text": "(In reply to comment #8)\n\nGlenn, I do not get Character shaping when applying patch (against either trunk r981406 or Temp_ComplexScripts). The output is the same as FOP 1.0 without patch.\n\nI've tested it with Arial UNI (I didn't get Simplified Arabic).\n--\nPascal", "attachment_id": null, "id": 138831, "creator": "pascal.sancho@takoma.fr", "time": "2010-08-03T04:49:43Z", "bug_id": 49687, "creation_time": "2010-08-03T04:49:43Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 138868, "time": "2010-08-04T03:32:34Z", "creator": "pascal.sancho@takoma.fr", "creation_time": "2010-08-04T03:32:34Z", "is_private": false, "text": "(In reply to comment #12)\nWorks fine now (with Glenn help)\nThx"}, {"count": 14, "tags": [], "bug_id": 49687, "attachment_id": null, "is_private": false, "id": 139019, "time": "2010-08-10T01:38:43Z", "creator": "dharmesh_rana@yahoo.com", "creation_time": "2010-08-10T01:38:43Z", "text": "(In reply to comment #11)\n> Created an attachment (id=25831) [details]\n> Simple test Arabic output PDF file.\n\nHi Glenn,\n\nCan you please let me know in detail, how this Arabic patch that you have created to be applied and run?\n\nThanks,\nDharmesh Rana"}, {"count": 15, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 139020, "time": "2010-08-10T01:49:34Z", "creator": "gadams@apache.org", "creation_time": "2010-08-10T01:49:34Z", "is_private": false, "text": "It would be best to wait until the patch is committed to the Temp_ComplexScripts branch that has been created for it, then you will need to build it prior to running it. You will also need one or more of the (presently) supported fonts, about which see https://skynav.trac.cvsdude.com/fop/wiki/SupportedFonts.\n\nI have no control over the schedule for the committing of the patch, as it will have to be performed by an FOP committer. But you can express your interest in having them do that on the following mail list: <fop-user@xmlgraphics.apache.org>. If you are impatient, you can apply the patch yourself, but you will need the appropriate skills to do that.\n\nRegards,\nGlenn\n\n(In reply to comment #14)\n> (In reply to comment #11)\n> > Created an attachment (id=25831) [details] [details]\n> > Simple test Arabic output PDF file.\n> \n> Hi Glenn,\n> \n> Can you please let me know in detail, how this Arabic patch that you have\n> created to be applied and run?\n> \n> Thanks,\n> Dharmesh Rana"}, {"count": 16, "tags": [], "bug_id": 49687, "attachment_id": 25912, "id": 139237, "time": "2010-08-19T06:14:14Z", "creator": "gadams@apache.org", "creation_time": "2010-08-19T06:14:14Z", "is_private": false, "text": "Created attachment 25912\nPatch to revision 987110 of branch Temp_ComplexScripts.\n\nThis patch file replaces the prior patch against trunk. It is intended to be applied to revision 987110 of branch Temp_ComplexScripts as follows:\n\n$ cd .../xmlgraphics/fop/branches/Temp_ComplexScripts\n$ svn update -r 987110 .\n$ gzcat .../fop-i18n.arabic-patch-1-update-1.diff.tgz | patch -p1\n$ svn add `svn status . | grep '?' | awk '{print $2;}'`\n\nThis patch has been verified to build and run junit tests without regression, with 4 compiler warnings (none new), 0 checkstyle warnings, and 971 findbugs bugs (none new).\n\nThe intent of this patch update is to merge recent changes to the trunk, as well as fix three problems recently reported with the Arabic shape selection and bidi logic.\n\nNote well that this patch update does NOT address the following outstanding issues:\n\n* support for correct treatment and placement of non-spacing marks\n* support for certain advanced GSUB table types\n* support for GPOS table types\n* support for inline FOs in bidi conexts other than fo:inline, fo:bidi-override, and fo:character\n* correct treatment of corresponding properties in right-to-left contexts\n* incorrect justification of arabic text with text-align=\"justify\"\n\nThese latter issues will be addressed in subsequent patches to the Temp_ComplexScripts branch.\n\nRegards,\nGlenn"}, {"count": 17, "tags": [], "text": "Committed revision 987282", "attachment_id": null, "id": 139256, "creator": "spepping@apache.org", "time": "2010-08-19T15:48:11Z", "bug_id": 49687, "creation_time": "2010-08-19T15:48:11Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 140052, "time": "2010-09-22T06:36:43Z", "creator": "akarmoun@hotmail.com", "creation_time": "2010-09-22T06:36:43Z", "is_private": false, "text": "Hello,\n\nwe want to test the fix for arabic characters. What is the svn checkout URL for this fop revision in trunk? We've tested with current trunk of 22.09.2010. How can I install the patch? what#s the svn checkout base?\n\nThanks!\n\nJens and Abde"}, {"count": 19, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 140059, "time": "2010-09-22T08:02:12Z", "creator": "spepping@apache.org", "creation_time": "2010-09-22T08:02:12Z", "is_private": false, "text": "Summary of web links\n====================\n\nThis work is available in a git repository, see http://github.com/skynavga/fop. The repository URLs are: http://github.com/skynavga/fop.git and git://github.com/skynavga/fop.git\n\nThis work is available on the subversion branch Temp_ComplexScripts. The repository URL is: http://svn.apache.org/repos/asf/xmlgraphics/fop/branches/Temp_ComplexScripts\n\nBinary snapshots of this work are available at http://people.apache.org/~spepping/. Updated snapshots will be provided whenever there is a new patch.\n\nThe git repository is most up to date; the subversion repository waits for the submission of patches."}, {"count": 20, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "Created attachment 26104\nPatch to revision 1002949 of branch Temp_ComplexScripts.\n\nThis patch is to be applied to revision 1002949 of branch Temp_ComplexScripts as follows:\n\ncd ${FOP}/branches/Temp_ComplexScripts\nsvn update -r 1002949 --force\ngzcat ${DOWNLOADS}/fop-i18n.arabic-patch-2.diff.gz | patch -p0\nsvn rm src/java/org/apache/fop/fonts/GlyphUtils.java\nsvn add src/java/org/apache/fop/fonts/GlyphSubstitutionState.java\nsvn add src/java/org/apache/fop/fonts/GlyphClassMapping.java\nsvn add src/java/org/apache/fop/fonts/GlyphPositioningState.java\nsvn add src/java/org/apache/fop/fonts/GlyphCoverageMapping.java\nsvn add src/java/org/apache/fop/fonts/GlyphProcessingState.java\nsvn add src/java/org/apache/fop/fonts/GlyphClassTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphDefinitionTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphMappingTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphDefinitionSubtable.java\nsvn add src/java/org/apache/fop/fonts/GlyphDefinition.java\nsvn add src/java/org/apache/fop/fonts/ScriptContextTester.java\nsvn add src/java/org/apache/fop/fonts/GlyphTester.java\nsvn commit ...\n\nThis patch completes the first round of functional support for OpenType GDEF/GSUB/GPOS advanced typographic tables as employed by selected Arabic fonts.\n\nRegards,\nGlenn", "id": 140316, "time": "2010-09-30T02:02:28Z", "bug_id": 49687, "creation_time": "2010-09-30T02:02:28Z", "attachment_id": 26104}, {"count": 21, "tags": [], "text": "Hi! \n\nIt is work great for whole document.\nCould you implement similar for \n\n<fo:block-container writing-mode=\"rl-tb\">\n\n</fo:block-container>\n\nI my project a lot of text contain mixed text (arabic, cyrilic, latin), therefore I have a big problem with FOP.", "attachment_id": null, "id": 140516, "creator": "d.e.golubev@gmail.com", "time": "2010-10-06T12:55:34Z", "bug_id": 49687, "creation_time": "2010-10-06T12:55:34Z", "is_private": false}, {"count": 22, "tags": [], "creator": "d.e.golubev@gmail.com", "is_private": false, "text": "find problem: \n1. Background color for inline element does not drawed\n<fo:inline background-color=\"#f3b53f\" >\n\n2. Possible not in right place \nif in fop.xconf add <auto-detect/> in section <fonts>\n\nSEVERE: SVG graphic could not be rendered. Reason: java.lang.UnsupportedOperationException: unsupported device table del\nta format: 0\njava.lang.UnsupportedOperationException: unsupported device table delta format: 0\n        at org.apache.fop.fonts.truetype.TTFFile.readPosDeviceTable(TTFFile.java:3239)\n        at org.apache.fop.fonts.truetype.TTFFile.readPosAnchor(TTFFile.java:3588)\n        at org.apache.fop.fonts.truetype.TTFFile.readMarkToBasePosTableFormat1(TTFFile.java:3711)\n        at org.apache.fop.fonts.truetype.TTFFile.readMarkToBasePosTable(TTFFile.java:3766)\n        at org.apache.fop.fonts.truetype.TTFFile.readGPOSSubtable(TTFFile.java:4649)\n        at org.apache.fop.fonts.truetype.TTFFile.readLookupTable(TTFFile.java:4721)", "id": 140519, "time": "2010-10-06T14:32:01Z", "bug_id": 49687, "creation_time": "2010-10-06T14:32:01Z", "attachment_id": null}, {"count": 23, "tags": [], "text": "Dear all,\n\nI was using FOP for more than 1 year and it's a great tool for printing and creating PDF files and now I have problem printing ARABIC Text.\n\nI downloaded and tested the FO-PDF converted and it rendered the text correctly, but this does not fix my problem since I was using the PrintRenderer to directly print an FO file.\n\nMy question is, when can I expect a new patch or release of FOP with Arabic print-rendering support.\n\nBest regards,\nImad Daou", "attachment_id": null, "id": 141436, "creator": "imad_daou@hotmail.com", "time": "2010-11-04T18:17:31Z", "bug_id": 49687, "creation_time": "2010-11-04T18:17:31Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 49687, "attachment_id": null, "is_private": false, "id": 141487, "time": "2010-11-05T11:13:34Z", "creator": "gadams@apache.org", "creation_time": "2010-11-05T11:13:34Z", "text": "I cannot determine from your email whether you are using this new patch or not. In any case, only the IF, AT, and PDF renderers are presently supported by this patch, and I do not have a schedule for when the remaining renderers will be supported.\n\nRegards,\nGlenn\n\n(In reply to comment #23)\n> Dear all,\n> \n> I was using FOP for more than 1 year and it's a great tool for printing and\n> creating PDF files and now I have problem printing ARABIC Text.\n> \n> I downloaded and tested the FO-PDF converted and it rendered the text\n> correctly, but this does not fix my problem since I was using the PrintRenderer\n> to directly print an FO file.\n> \n> My question is, when can I expect a new patch or release of FOP with Arabic\n> print-rendering support.\n> \n> Best regards,\n> Imad Daou"}, {"count": 25, "tags": [], "creator": "gadams@apache.org", "is_private": false, "id": 141488, "creation_time": "2010-11-05T11:16:24Z", "time": "2010-11-05T11:16:24Z", "bug_id": 49687, "text": "I cannot determine from your email whether you are using this new patch or not. In any case, only the IF, AT, and PDF renderers are presently supported by this patch, and I do not have a schedule for when the remaining renderers will be supported.\n\nRegards,\nGlenn\n\n(In reply to comment #23)\n> Dear all,\n> \n> I was using FOP for more than 1 year and it's a great tool for printing and\n> creating PDF files and now I have problem printing ARABIC Text.\n> \n> I downloaded and tested the FO-PDF converted and it rendered the text\n> correctly, but this does not fix my problem since I was using the PrintRenderer\n> to directly print an FO file.\n> \n> My question is, when can I expect a new patch or release of FOP with Arabic\n> print-rendering support.\n> \n> Best regards,\n> Imad Daou", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 143988, "time": "2011-02-04T11:53:07Z", "creator": "vkandrotas1@yahoo.com", "creation_time": "2011-02-04T11:53:07Z", "is_private": false, "text": "Dear Glenn,\n\nthank you for this patch. \n\nI am testing it and have following problem: Arabic letter in the words looks not connected together (separated), can you please explain this behavior ?\n\nBest regards,\n\nVirginijus"}, {"count": 27, "tags": [], "text": "(In reply to comment #26)\n> Dear Glenn,\n> \n> thank you for this patch. \n> \n> I am testing it and have following problem: Arabic letter in the words looks\n> not connected together (separated), can you please explain this behavior ?\n> \n> Best regards,\n> \n> Virginijus\n\nplease use the i18n.arabic branch at git://github.com/skynavga/fop.git for the latest code; also, please restrict your fonts to those specified described under \"Supported Fonts\" at https://skynav.trac.cvsdude.com/fop/wiki/ComplexScripts\n\nregards, glenn", "attachment_id": null, "id": 143992, "creator": "gadams@apache.org", "time": "2011-02-04T13:47:24Z", "bug_id": 49687, "creation_time": "2011-02-04T13:47:24Z", "is_private": false}, {"count": 28, "tags": [], "text": "Created attachment 26721\nPatch to revision 1076316 of branch Temp_ComplexScripts.\n\n\nThis patch is to be applied to revision 1076316 of branch Temp_ComplexScripts\nas follows:\n\ncd ${FOP}/branches/Temp_ComplexScripts\nsvn update -r 1076316 --force\nsvn revert -R .\nsvn status # check and remove any unexpected changes prior to patching\ngzcat ${DOWNLOADS}/fop-i18n.arabic-patch-3.diff.gz | patch -p0\nant codegen-unicode-bidi # needed to generate test data to be committed\nsvn add test/java/org/apache/fop/complexscripts\nsvn add src/java/org/apache/fop/fonts/AdvancedTypographicTableFormatException.java\nsvn add src/codegen/complexscripts\nsvn add src/codegen/unicode/java/org/apache/fop/text/bidi/GenerateBidiTestData.java\nsvn commit ...\n\nThis patch completes the next update of support for OpenType\nGDEF/GSUB/GPOS advanced typographic tables as employed by selected Arabic\nfonts. This patch includes the following:\n\n* bug fixes\n* new codegen-unicode-bidi target (used to generate bidi test data above)\n* new junit-complexscripts target\n\nN.B. the use of \"ant codegen-unicode-bidi\" above, which is needed to generate test data to be committed.\n\nRegards,\nGlenn", "attachment_id": 26721, "id": 144681, "creator": "gadams@apache.org", "time": "2011-03-02T13:31:48Z", "bug_id": 49687, "creation_time": "2011-03-02T13:31:48Z", "is_private": false}, {"count": 29, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 144758, "time": "2011-03-05T03:44:43Z", "creator": "spepping@apache.org", "creation_time": "2011-03-05T03:44:43Z", "is_private": false, "text": "(In reply to comment #28)\n> Created an attachment (id=26721) [details]\n> Patch to revision 1076316 of branch Temp_ComplexScripts.\n\nThanks. Committed. I note the following problem: In the build target junit-compile-java, the attribute value memoryMaximumSize=\"1024m\" was added, but the ant build reports: [javac] Since fork is false, ignoring memoryMaximumSize setting.\n\nSimon"}, {"count": 30, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 145185, "time": "2011-03-22T10:15:54Z", "creator": "vhennebert@gmail.com", "creation_time": "2011-03-22T10:15:54Z", "is_private": false, "text": "Glenn,\n\nI had a brief look at your branch and have the following questions and comments:\n\nYou implemented the BIDI algorithm in a separate BidiUtil class. Why didn't you integrate it into the layout engine? It seems that what is done there is a layout task, therefore should be put in the layout engine classes. FO tree objects are now manipulated by both the layout engine and that class, and I'm seriously concerned about the maintenance issues that that may create. \n\nAlso, AFAIU a whole data structure is created there that will exist in parallel with the Knuth elements created by the layout engine. In addition to the memory issues, isn't there a risk of discrepancy between the two? That may cause hard-to-find bugs.\n\nHow feasible is it to run the BIDI algorithm on a subset of the FO tree? If I'm right, ATM it is launched on a whole page-sequence. When we refactor the code so that layout can be started before a whole page-sequence has been parsed, in order to avoid the infamous memory issue that a lot of users are running into, will that code allow to do it?\n\nI have a concern with some metrics. That BidiUtil class is more than 1700 lines. There are a few other new classes that are more than 1000 lines long, and TTFFile now is more than 5500 lines (!). What's your plan to break them down into more manageable chunks? Also, there are now 72 classes in the o.a.f.fonts package.\n\nAlso, many variables have a two- or three-letter name, which makes it difficult to understand what their purpose is, especially if a lot of them are involved at the same time. I realise there usually is a comment explaining what the variable does when it's defined, but it would be easier if the variable were carrying the comment with itself by having a longer name.\n\nThanks,\nVincent"}, {"count": 31, "tags": [], "bug_id": 49687, "attachment_id": null, "is_private": false, "id": 145188, "time": "2011-03-22T10:59:03Z", "creator": "gadams@apache.org", "creation_time": "2011-03-22T10:59:03Z", "text": "inline\n\n(In reply to comment #30)\n> Glenn,\n> \n> I had a brief look at your branch and have the following questions and\n> comments:\n> \n> You implemented the BIDI algorithm in a separate BidiUtil class. Why didn't you\n> integrate it into the layout engine? It seems that what is done there is a\n> layout task, therefore should be put in the layout engine classes. FO tree\n> objects are now manipulated by both the layout engine and that class, and I'm\n> seriously concerned about the maintenance issues that that may create. \n\nBidiUtil is defined in o.a.f.layoutmgr, therefore it is \"integrated into the layout engine\". I considered placing it in o.a.f.util or in o.a.f.text.bidi; however, since it is only referenced by o.a.f.layoutmgr code, I decided that was the best home for it at this time.\n\nHowever, having said that, it is not performing layout and knows nothing about areas or geometries whatsoever. It's functionality is invoked in two places:\n\n(1) in PageSequenceLayoutManager.activateLayout(), in order to resolve bidi levels of each delimited text range, and\n(2) in LineLayoutManager.add{Inline,Block}Area, after completing line area construction;\n\nSee XSL-FO Section 5.8 for more information. I'm open to any concrete suggestions about a better point of integration, but I don't see any at present that is consistent with 5.8.\n \n> Also, AFAIU a whole data structure is created there that will exist in parallel\n> with the Knuth elements created by the layout engine. In addition to the memory\n> issues, isn't there a risk of discrepancy between the two? That may cause\n> hard-to-find bugs.\n\nThere is no relationship between the bidi levels created by BidiUtil and Knuth elements used for line breaking.\n\n> \n> How feasible is it to run the BIDI algorithm on a subset of the FO tree? If I'm\n> right, ATM it is launched on a whole page-sequence. When we refactor the code\n> so that layout can be started before a whole page-sequence has been parsed, in\n> order to avoid the infamous memory issue that a lot of users are running into,\n> will that code allow to do it?\n\nI'm not sure what you mean by \"ATM\". The semantics of XSL-FO 5.8 as embodied by the present implementation will have to be taken into account by such a refactoring, as I'm sure will many other aspects of the current FOP implementation.\n \n> I have a concern with some metrics. That BidiUtil class is more than 1700\n> lines. There are a few other new classes that are more than 1000 lines long,\n> and TTFFile now is more than 5500 lines (!). What's your plan to break them\n> down into more manageable chunks? Also, there are now 72 classes in the\n> o.a.f.fonts package.\n\nI have no such plan in the near to medium term. There is no technical reason to refactor TTFFile, though I agree it is on the long side, and could probably use a general refactoring in the long term. \n\n> Also, many variables have a two- or three-letter name, which makes it difficult\n> to understand what their purpose is, especially if a lot of them are involved\n> at the same time. I realise there usually is a comment explaining what the\n> variable does when it's defined, but it would be easier if the variable were\n> carrying the comment with itself by having a longer name.\n\nSymbol length is a trade off between readability and other factors, such as line length and typing time. I prefer short symbols. Perhaps it is my training in mathematics, electrical engineering, and having started programming with APL that leads me in that direction. The meaning of short symbols should be readily inferable given sufficient knowledge of the problem domain.\n\nBest,\nGlenn"}, {"count": 32, "attachment_id": null, "bug_id": 49687, "is_private": false, "id": 147023, "time": "2011-06-10T19:11:54Z", "creator": "adelmelle@apache.org", "creation_time": "2011-06-10T19:11:54Z", "tags": [], "text": "\nI just tried checking it out, and got two types of compile error when trying to build:\n\n    [javac] ... org/apache/fop/layoutmgr/BidiUtil.java:42: cannot find symbol\n    [javac] symbol  : class Viewport\n    [javac] location: package org.apache.fop.area.inline\n    [javac] import org.apache.fop.area.inline.Viewport;\n    [javac]                                  ^\n\n    [javac] ... org/apache/fop/layoutmgr/BidiUtil.java:107: reference to collectRuns is ambiguous, both method collectRuns(java.util.List,java.util.List) in org.apache.fop.layoutmgr.BidiUtil and method collectRuns(Viewport,java.util.List) in org.apache.fop.layoutmgr.BidiUtil match\n    [javac]         List runs = collectRuns ( la.getInlineAreas(), new Vector() );\n    [javac]                     ^\n    ...\n    [javac] 13 errors\n\nReplacing all references with InlineViewport fixes the problem (committed in rev 1134414)\n\nFirst look: hope the CS suppressions aren't there to stay... ;-P\n\n(more detailed review to follow)"}, {"count": 33, "tags": [], "creator": "gadams@apache.org", "is_private": false, "id": 147025, "creation_time": "2011-06-10T20:44:11Z", "time": "2011-06-10T20:44:11Z", "bug_id": 49687, "text": "I believe this is a side-effect of Simon's incremental merges from trunk into the Temp_ComplexScripts branch. I'm doing my work in my dev repo at git://github.com/skynavga/fop.git, from which I irregularly post a new patch for merger into Temp_ComplexScripts. I've got a couple of bugs I'm working on, after which I expect to submit a new patch before the end of June.\n\nRegarding CS suppressions, I expect they will remain in the source I authored since I use somewhat different style conventions than were used by the pre-existing code. For example, I use:\n\n* longer lines\n* a few methods with greater than 7 parameters\n* slightly different spacing conventions\n\nWhen I've modified pre-existing files, then I kept to the existing checkstyle conventions; however, with some new files, I have varied a bit. I don't have any plans to change those new files at this time. This does not affect functionality.\n\nG.\n\n(In reply to comment #32)\n> I just tried checking it out, and got two types of compile error when trying to\n> build:\n> \n>     [javac] ... org/apache/fop/layoutmgr/BidiUtil.java:42: cannot find symbol\n>     [javac] symbol  : class Viewport\n>     [javac] location: package org.apache.fop.area.inline\n>     [javac] import org.apache.fop.area.inline.Viewport;\n>     [javac]                                  ^\n> \n>     [javac] ... org/apache/fop/layoutmgr/BidiUtil.java:107: reference to\n> collectRuns is ambiguous, both method\n> collectRuns(java.util.List,java.util.List) in org.apache.fop.layoutmgr.BidiUtil\n> and method collectRuns(Viewport,java.util.List) in\n> org.apache.fop.layoutmgr.BidiUtil match\n>     [javac]         List runs = collectRuns ( la.getInlineAreas(), new Vector()\n> );\n>     [javac]                     ^\n>     ...\n>     [javac] 13 errors\n> \n> Replacing all references with InlineViewport fixes the problem (committed in\n> rev 1134414)\n> \n> First look: hope the CS suppressions aren't there to stay... ;-P\n> \n> (more detailed review to follow)", "attachment_id": null}, {"count": 34, "tags": [], "creator": "adelmelle@apache.org", "is_private": false, "text": "(In reply to comment #31)\n> (In reply to comment #30)\n> > I had a brief look at your branch and have the following questions and\n> > comments:\n> > \n> > You implemented the BIDI algorithm in a separate BidiUtil class. Why didn't you\n> > integrate it into the layout engine? It seems that what is done there is a\n> > layout task, therefore should be put in the layout engine classes. FO tree\n> > objects are now manipulated by both the layout engine and that class, and I'm\n> > seriously concerned about the maintenance issues that that may create. \n> \n> BidiUtil is defined in o.a.f.layoutmgr, therefore it is \"integrated into the\n> layout engine\". I considered placing it in o.a.f.util or in o.a.f.text.bidi;\n> however, since it is only referenced by o.a.f.layoutmgr code, I decided that\n> was the best home for it at this time.\n\nJust to weigh in here: \nOn the one hand, I believe that the layout *managers* should actually remain quite BIDI-agnostic. Ultimately, to a layout manager, it should only matter how wide/heigh a given text-fragment will be and how its own child areas should be stacked. In what direction text should be rendered, is hardly its concern. The TextLM, maybe... but that is already quite large.\n\nThat said, Vincent's point is a valid one. The observation certainly does not mean that more LMs shouldn't *use* the BIDI functionality. Almost on the contrary...\n\nThinking out loud, maybe a singleton that is made available in the top level LM would be more appropriate. That would allow potential optimizations, in that BIDI is then not applied to a page-sequence as a whole, but gradually, as layout progresses.\n\n> However, having said that, it is not performing layout and knows nothing about\n> areas or geometries whatsoever. It's functionality is invoked in two places:\n> \n> (1) in PageSequenceLayoutManager.activateLayout(), in order to resolve bidi\n> levels of each delimited text range, and\n> (2) in LineLayoutManager.add{Inline,Block}Area, after completing line area\n> construction;\n> \n> See XSL-FO Section 5.8 for more information. I'm open to any concrete\n> suggestions about a better point of integration, but I don't see any at present\n> that is consistent with 5.8.\n\nI am even thinking that the first part (resolving embedding levels) can be handled entirely in the FO tree. Places like finalizeNode() come to mind. That way, RTF output (or more generally:  formats not using the AreaTreeHandler and the layout engine) would also be able to benefit from it.\nAlso, I notice 'blind' traversal of the ancestry of a node. 'Blind' means that I am wondering what happens with BIDI processing in retrieved fo:markers. The spec is not entirely clear about it, but given that writing-mode is involved, I would expect the behavior to be similar to property-resolution, where the base context comes from the parent of the fo:retrieve-marker, not the actual parent node in the source document.\nIntegrating the step in the FO tree would make this relatively straightforward to solve. The first step would be skipped during initial parsing, and instead executed as part of the resolveRetrieveMarker() logic that is invoked during layout of static content.\n\n<snip />\n\n> > How feasible is it to run the BIDI algorithm on a subset of the FO tree? If I'm\n> > right, ATM it is launched on a whole page-sequence. When we refactor the code\n> > so that layout can be started before a whole page-sequence has been parsed, in\n> > order to avoid the infamous memory issue that a lot of users are running into,\n> > will that code allow to do it?\n> \n> I'm not sure what you mean by \"ATM\". The semantics of XSL-FO 5.8 as embodied by\n> the present implementation will have to be taken into account by such a\n> refactoring, as I'm sure will many other aspects of the current FOP\n> implementation.\n\nXSL-FO doesn't go so far as specifying that this all has to be applied to the page-sequence as a whole. That would be an implementation detail. As long as the result is compliant, it shouldn't matter whether, architecturally, we process complete page-sequences or separate blocks. I still firmly believe there is a possibility to switch from endPageSequence() to endBlock(). Only blocks that are direct children of a fo:flow should be used as logical boundaries to trigger layout (and, if possible, rendering) of all content up to that point. The proposed approach should work too, preferably without too much refactoring, as it would be the idea of purging all finished blocks.", "id": 147039, "time": "2011-06-12T11:54:08Z", "bug_id": 49687, "creation_time": "2011-06-12T11:54:08Z", "attachment_id": null}, {"count": 35, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "\n(In reply to comment #34)\n> (In reply to comment #31)\n> > (In reply to comment #30)\n> > > I had a brief look at your branch and have the following questions and\n> > > comments:\n> > > \n> > > You implemented the BIDI algorithm in a separate BidiUtil class. Why didn't you\n> > > integrate it into the layout engine? It seems that what is done there is a\n> > > layout task, therefore should be put in the layout engine classes. FO tree\n> > > objects are now manipulated by both the layout engine and that class, and I'm\n> > > seriously concerned about the maintenance issues that that may create. \n> > \n> > BidiUtil is defined in o.a.f.layoutmgr, therefore it is \"integrated into the\n> > layout engine\". I considered placing it in o.a.f.util or in o.a.f.text.bidi;\n> > however, since it is only referenced by o.a.f.layoutmgr code, I decided that\n> > was the best home for it at this time.\n> \n> Just to weigh in here: \n> On the one hand, I believe that the layout *managers* should actually remain\n> quite BIDI-agnostic. Ultimately, to a layout manager, it should only matter how\n> wide/heigh a given text-fragment will be and how its own child areas should be\n> stacked. In what direction text should be rendered, is hardly its concern. The\n> TextLM, maybe... but that is already quite large.\n\nOne point where LMs are exposed to bidi is that the rendering system assumes a left to right rendering direction of areas irrespective of bidi, while start/end edges vary according to bidi context.\n\nFor example, the start/end indent traits on generated areas varies with bidi levels. Also, certain progression directions, such as table column progression, list label versus list body, region start versus region end, etc., all vary by bidi level. In some cases this variation must be accounted for in an LM.\n\n> That said, Vincent's point is a valid one. The observation certainly does not\n> mean that more LMs shouldn't *use* the BIDI functionality. Almost on the\n> contrary...\n> \n> Thinking out loud, maybe a singleton that is made available in the top level LM\n> would be more appropriate. That would allow potential optimizations, in that\n> BIDI is then not applied to a page-sequence as a whole, but gradually, as\n> layout progresses.\n> \n> > However, having said that, it is not performing layout and knows nothing about\n> > areas or geometries whatsoever. It's functionality is invoked in two places:\n> > \n> > (1) in PageSequenceLayoutManager.activateLayout(), in order to resolve bidi\n> > levels of each delimited text range, and\n> > (2) in LineLayoutManager.add{Inline,Block}Area, after completing line area\n> > construction;\n> > \n> > See XSL-FO Section 5.8 for more information. I'm open to any concrete\n> > suggestions about a better point of integration, but I don't see any at present\n> > that is consistent with 5.8.\n> \n> I am even thinking that the first part (resolving embedding levels) can be\n> handled entirely in the FO tree. Places like finalizeNode() come to mind. That\n> way, RTF output (or more generally:  formats not using the AreaTreeHandler and\n> the layout engine) would also be able to benefit from it.\n> Also, I notice 'blind' traversal of the ancestry of a node. 'Blind' means that\n> I am wondering what happens with BIDI processing in retrieved fo:markers. The\n> spec is not entirely clear about it, but given that writing-mode is involved, I\n> would expect the behavior to be similar to property-resolution, where the base\n> context comes from the parent of the fo:retrieve-marker, not the actual parent\n> node in the source document.\n> Integrating the step in the FO tree would make this relatively straightforward\n> to solve. The first step would be skipped during initial parsing, and instead\n> executed as part of the resolveRetrieveMarker() logic that is invoked during\n> layout of static content.\n> \n> <snip />\n> \n> > > How feasible is it to run the BIDI algorithm on a subset of the FO tree? If I'm\n> > > right, ATM it is launched on a whole page-sequence. When we refactor the code\n> > > so that layout can be started before a whole page-sequence has been parsed, in\n> > > order to avoid the infamous memory issue that a lot of users are running into,\n> > > will that code allow to do it?\n> > \n> > I'm not sure what you mean by \"ATM\". The semantics of XSL-FO 5.8 as embodied by\n> > the present implementation will have to be taken into account by such a\n> > refactoring, as I'm sure will many other aspects of the current FOP\n> > implementation.\n> \n> XSL-FO doesn't go so far as specifying that this all has to be applied to the\n> page-sequence as a whole. That would be an implementation detail. As long as\n> the result is compliant, it shouldn't matter whether, architecturally, we\n> process complete page-sequences or separate blocks. I still firmly believe\n> there is a possibility to switch from endPageSequence() to endBlock(). Only\n> blocks that are direct children of a fo:flow should be used as logical\n> boundaries to trigger layout (and, if possible, rendering) of all content up to\n> that point. The proposed approach should work too, preferably without too much\n> refactoring, as it would be the idea of purging all finished blocks.\n\nIt may be readily feasible to change the bidi level resolution process from end of page sequence to end of block. I'll give that a try to see what it breaks, and if it doesn't break anything that can't be readily fixed, i'll move the point of resolution invocation to end block processing.\n\nG.", "id": 147040, "time": "2011-06-12T13:28:35Z", "bug_id": 49687, "creation_time": "2011-06-12T13:28:35Z", "attachment_id": null}, {"count": 36, "tags": [], "bug_id": 49687, "attachment_id": 27161, "id": 147148, "time": "2011-06-15T16:32:07Z", "creator": "gadams@apache.org", "creation_time": "2011-06-15T16:32:07Z", "is_private": false, "text": "Created attachment 27161\nPatch to revision 1136002 of branch Temp_ComplexScripts.\n\nThis patch is to be applied to revision 1136002 of branch Temp_ComplexScripts\nas follows:\n\ncd ${FOP}/branches/Temp_ComplexScripts\nsvn update -r 1136002 --force\nsvn revert -R .\nsvn status # check and remove any unexpected changes prior to patching\ngzcat ${DOWNLOADS}/fop-i18n.arabic-patch-4.diff.gz | patch -p0\nsvn add test/java/org/apache/fop/complexscripts/arabic\nsvn add test/java/org/apache/fop/complexscripts/scripts\nsvn add test/java/org/apache/fop/complexscripts/fonts\nsvn add test/java/org/apache/fop/complexscripts/util\nsvn add test/layoutengine/standard-testcases/page-number-citation_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/inline_background-color_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/table-column_column-progression-lr.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-next-page.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_multi-child_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_display-align_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_for_toc_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_multi-line_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_baseline-shift_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-after_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/table-column_column-progression-rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_inline-child_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_basic_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/character_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_external-destination_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_border_padding_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/list-block_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-after.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-next-page_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-before.xml\nsvn add test/layoutengine/standard-testcases/basic-link_external-destination_writing-mode_rl_2.xml\nsvn add test/layoutengine/standard-testcases/block_text-align_4.xml\nsvn add test/layoutengine/standard-testcases/basic-link_background-image_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-before_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/block_text-align_5.xml\nsvn add test/resources/complexscripts\nsvn add src/java/org/apache/fop/fonts/IndicScriptProcessor.java\nsvn add src/java/org/apache/fop/fonts/DevanagariScriptProcessor.java\nsvn rm --force src/codegen/complexscripts\nsvn commit ...\n\nThis patch includes the following:\n\n* bug fixes\n* new layout engine tests for right-to-left writing mode\n* new generic indic script processing support\n* new devanagari script processing support\n\nSee milestone \"Patch 4\" at http://skynav.trac.cvsdude.com/fop/report/6 for further details.\n\nRegards,\nGlenn"}, {"count": 37, "tags": [], "text": "Committed in revisions 1136144 and 1136146. In rev. 1136144 I forgot the additions and deletions, so that the code of that revision does not compile.", "attachment_id": null, "id": 147155, "creator": "spepping@apache.org", "time": "2011-06-15T18:55:43Z", "bug_id": 49687, "creation_time": "2011-06-15T18:55:43Z", "is_private": false}, {"count": 38, "attachment_id": null, "bug_id": 49687, "is_private": false, "id": 147371, "time": "2011-06-22T18:31:13Z", "creator": "spepping@apache.org", "creation_time": "2011-06-22T18:31:13Z", "tags": [], "text": "The code contains a number of Unicode properties, e.g. in util.CharUtilities and DevanagariScriptProcessor. It would be better if all Unicode properties would be collected in one class. Perhaps it is even possible to generate that class from the Unicode Database files. You already do that with class BidiClassUtils. This would make it much easier to update FOP to newer versions of Unicode.\n\nSome of the info in util.CharUtilities is also provided by Character.UnicodeBlock.of(int codePoint). Why do you not use Java's Unicode support or ICU?"}, {"count": 39, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 147378, "time": "2011-06-22T19:29:51Z", "creator": "gadams@apache.org", "creation_time": "2011-06-22T19:29:51Z", "is_private": false, "text": "\n(In reply to comment #38)\n> The code contains a number of Unicode properties, e.g. in util.CharUtilities\n> and DevanagariScriptProcessor. It would be better if all Unicode properties\n> would be collected in one class. Perhaps it is even possible to generate that\n> class from the Unicode Database files. You already do that with class\n> BidiClassUtils. This would make it much easier to update FOP to newer versions\n> of Unicode.\n\nThe Unicode Database files do not have the specialized properties needed to perform script the script processing found in DevanagariScriptProcessor, etc. Furthermore, there are context sensitive properties that are not simple table lookup.\n\n> Some of the info in util.CharUtilities is also provided by\n> Character.UnicodeBlock.of(int codePoint). Why do you not use Java's Unicode\n> support or ICU?\n\nNeither Java's Unicode support or ICU are sufficient to provide the necessary logic, e.g., determination of script membership for the purpose of performing complex script rendering. To give an example, script membership is not the same as unicode block membership.\n\nG."}, {"count": 40, "tags": [], "bug_id": 49687, "attachment_id": 27784, "is_private": false, "id": 150602, "time": "2011-10-15T09:58:00Z", "creator": "gadams@apache.org", "creation_time": "2011-10-15T09:58:00Z", "text": "Created attachment 27784\nPatch to revision 1183594 of branch Temp_ComplexScripts"}, {"count": 41, "tags": [], "bug_id": 49687, "attachment_id": null, "id": 150603, "time": "2011-10-15T10:00:16Z", "creator": "gadams@apache.org", "creation_time": "2011-10-15T10:00:16Z", "is_private": false, "text": "This patch is to be applied to revision 1183594 of branch Temp_ComplexScripts\nas follows:\n\ncd ${FOP}/branches/Temp_ComplexScripts\nsvn update -r 1183594 --force\nsvn revert -R .\nsvn status # check and remove any unexpected changes prior to patching\ngzcat ${DOWNLOADS}/fop-i18n.arabic-patch-5.diff.gz | patch -p0\nant resgen-complexscripts clean\nsvn add test/java/org/apache/fop/complexscripts/gsub\nsvn add test/java/org/apache/fop/complexscripts/gdef\nsvn add test/java/org/apache/fop/complexscripts/gpos\nsvn add test/java/org/apache/fop/complexscripts/arabic/GenerateArabicTestData.java\nsvn add test/java/org/apache/fop/complexscripts/arabic/ArabicTestCase.java\nsvn add test/java/org/apache/fop/complexscripts/arabic/ArabicTestConstants.java\nsvn add test/java/org/apache/fop/layoutengine/LayoutEngineTestUtils.java\nsvn add test/java/org/apache/fop/util/NumberConverterTestCase.java\nsvn add test/layoutengine/standard-testcases/region-body_column-count_1_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/page-sequence-force-page-count-odd.xml\nsvn add test/layoutengine/standard-testcases/region-body_column-count_2_writing-mode_rl.xml\nsvn add test/resources/complexscripts/arab/data\nsvn propdel svn:mime-type test/resources/complexscripts/arab/data/arab-001.txt\nsvn add src/java/org/apache/fop/util/NumberConverter.java\nsvn rm --force test/java/org/apache/fop/complexscripts/arabic/ArabicScriptTestSuite.java\nsvn commit ...\n\nThis patch includes the following:\n\n* bug fixes\n* new layout engine tests for right-to-left writing mode\n* new test utility for using TTX files in testing advanced typographic tables\n* new test cases for GDEF/GSUB/GPOS advanced typographic tables\n* new test cases for ~85000 arabic word forms against four fonts\n* new implementation of number formatter for number to string conversion, which\n  adds support for arabic, hebrew, thai, and kana scripts\n\nSee milestone \"Patch 5\" at http://skynav.trac.cvsdude.com/fop/report/6 for\nfurther details.\n\nRegards,\nGlenn"}, {"count": 42, "tags": [], "creator": "spepping@apache.org", "is_private": false, "text": "Applied. I had problems with test/resources/complexscripts/arab/data/. Please, check the result.", "id": 150702, "time": "2011-10-18T08:29:31Z", "bug_id": 49687, "creation_time": "2011-10-18T08:29:31Z", "attachment_id": null}, {"count": 43, "tags": [], "text": "Created attachment 27822\nlist of Gujarati words and sentences\n\nAs per my exchange with Glenn, I've attached a UTF-8 encoded file that contains Gujarati words and sentences. Actually, it's an output of a multiple choice quiz from my application. If the data is expected in some other form, let me know. Also, let me know if you need more of such data.", "attachment_id": 27822, "id": 150779, "creator": "dilipvshah@hotmail.com", "time": "2011-10-20T03:55:40Z", "bug_id": 49687, "creation_time": "2011-10-20T03:55:40Z", "is_private": false}, {"count": 44, "tags": [], "bug_id": 49687, "attachment_id": null, "is_private": false, "id": 150801, "time": "2011-10-20T13:03:06Z", "creator": "gadams@apache.org", "creation_time": "2011-10-20T13:03:06Z", "text": "(In reply to comment #43)\n> Created attachment 27822 [details]\n> list of Gujarati words and sentences\n> \n> As per my exchange with Glenn, I've attached a UTF-8 encoded file that contains\n> Gujarati words and sentences. Actually, it's an output of a multiple choice\n> quiz from my application. If the data is expected in some other form, let me\n> know. Also, let me know if you need more of such data.\n\nThanks. I'll let you know when I've got the Gujarati support working and have tried out these word forms. By the way, for Arabic script, i have approximately 85,000 word forms which represents a significant cross section of a number of corpuses. I would hope to have similar number of word forms for other scripts.\n\nI prefer word forms only for Indic scripts rather than phrases or sentences, since the latter do not typically use any whitespace between words. So I might ask you to manually segment your data into word forms only.\n\nG."}, {"count": 45, "tags": [], "bug_id": 49687, "attachment_id": 27906, "id": 151251, "time": "2011-11-07T03:46:58Z", "creator": "gadams@apache.org", "creation_time": "2011-11-07T03:46:58Z", "is_private": false, "text": "Created attachment 27906\nPatch to revision 1198396 of trunk."}, {"count": 46, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "Re: Created attachment 27906 [details]\nPatch to revision 1198396 of trunk.\n\nThis patch is to be applied to revision 1198396 of trunk\nas follows:\n\ncd ${FOP}/trunk\nsvn update -r 1198396 --force\nsvn revert -R .\nsvn status # check and remove any unexpected changes prior to patching\ngzcat ${DOWNLOADS}/fop-complexscripts-trunk-patch-1.diff.gz | patch -p1\nant clean\nant codegen-unicode-bidi\nant resgen-complexscripts\nant clean\nsvn add src/codegen/unicode/java/org/apache/fop/text/bidi\nsvn add src/java/org/apache/fop/fonts/AdvancedTypographicTableFormatException.java\nsvn add src/java/org/apache/fop/fonts/ArabicScriptProcessor.java\nsvn add src/java/org/apache/fop/fonts/DefaultScriptProcessor.java\nsvn add src/java/org/apache/fop/fonts/DevanagariScriptProcessor.java\nsvn add src/java/org/apache/fop/fonts/DiscontinuousAssociationException.java\nsvn add src/java/org/apache/fop/fonts/GlyphClassMapping.java\nsvn add src/java/org/apache/fop/fonts/GlyphClassTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphContextTester.java\nsvn add src/java/org/apache/fop/fonts/GlyphCoverageMapping.java\nsvn add src/java/org/apache/fop/fonts/GlyphCoverageTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphDefinition.java\nsvn add src/java/org/apache/fop/fonts/GlyphDefinitionSubtable.java\nsvn add src/java/org/apache/fop/fonts/GlyphDefinitionTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphMappingTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphPositioning.java\nsvn add src/java/org/apache/fop/fonts/GlyphPositioningState.java\nsvn add src/java/org/apache/fop/fonts/GlyphPositioningSubtable.java\nsvn add src/java/org/apache/fop/fonts/GlyphPositioningTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphProcessingState.java\nsvn add src/java/org/apache/fop/fonts/GlyphSequence.java\nsvn add src/java/org/apache/fop/fonts/GlyphSubstitution.java\nsvn add src/java/org/apache/fop/fonts/GlyphSubstitutionState.java\nsvn add src/java/org/apache/fop/fonts/GlyphSubstitutionSubtable.java\nsvn add src/java/org/apache/fop/fonts/GlyphSubstitutionTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphSubtable.java\nsvn add src/java/org/apache/fop/fonts/GlyphTable.java\nsvn add src/java/org/apache/fop/fonts/GlyphTester.java\nsvn add src/java/org/apache/fop/fonts/IncompatibleSubtableException.java\nsvn add src/java/org/apache/fop/fonts/IndicScriptProcessor.java\nsvn add src/java/org/apache/fop/fonts/Positionable.java\nsvn add src/java/org/apache/fop/fonts/ScriptContextTester.java\nsvn add src/java/org/apache/fop/fonts/ScriptProcessor.java\nsvn add src/java/org/apache/fop/fonts/Substitutable.java\nsvn add src/java/org/apache/fop/layoutmgr/BidiUtil.java\nsvn add src/java/org/apache/fop/text/bidi\nsvn add src/java/org/apache/fop/traits/Direction.java\nsvn add src/java/org/apache/fop/traits/WritingMode.java\nsvn add src/java/org/apache/fop/traits/WritingModeTraits.java\nsvn add src/java/org/apache/fop/traits/WritingModeTraitsGetter.java\nsvn add src/java/org/apache/fop/traits/WritingModeTraitsSetter.java\nsvn add src/java/org/apache/fop/util/BidiConstants.java\nsvn add src/java/org/apache/fop/util/NumberConverter.java\nsvn add test/java/org/apache/fop/complexscripts\nsvn add test/java/org/apache/fop/util/NumberConverterTestCase.java\nsvn add test/layoutengine/standard-testcases/basic-link_background-image_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_external-destination_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_external-destination_writing-mode_rl_2.xml\nsvn add test/layoutengine/standard-testcases/basic-link_for_toc_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_baseline-shift_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_inline-child_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_multi-child_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_multi-line_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-next-page.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-next-page_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-after.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-after_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-before.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-before_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/block_text-align_4.xml\nsvn add test/layoutengine/standard-testcases/block_text-align_5.xml\nsvn add test/layoutengine/standard-testcases/character_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/inline_background-color_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_basic_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_border_padding_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_display-align_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/list-block_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/page-number-citation_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/region-body_column-count_1_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/region-body_column-count_2_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/table-column_column-progression-lr.xml\nsvn add test/layoutengine/standard-testcases/table-column_column-progression-rl.xml\nsvn add test/resources/complexscripts\nsvn commit ...\n\nThis patch includes the following:\n\n* merge from Temp_ComplexScripts branch as updated to current trunk changes\n* bug fix for bidi content inside fo:static-content\n\nRegards,\nGlenn", "id": 151252, "time": "2011-11-07T03:56:53Z", "bug_id": 49687, "creation_time": "2011-11-07T03:56:53Z", "attachment_id": null}, {"count": 47, "tags": [], "text": "Comment on attachment 27906\nPatch to revision 1198396 of trunk.\n\nThis patch should no longer be used. Most all complex script code has been extensively reorganized into a distinct package, org.apache.fop.complexscripts, now available at http://github.com/skynavga/fop (see the i18n branch)\n\nIt is uncertain as to if or when this work will be merged into the FOP for future release by Apache. In the mean time, I expect to continue development of new features and bug fixes of complex scripts and other I18N related features in the repository listed above.\n\nI will also be regularly merging from the Apache FOP trunk into this repository in order to keep it closely aligned to the main Apache FOP development branch.", "attachment_id": 27906, "id": 151456, "creator": "gadams@apache.org", "time": "2011-11-13T22:57:35Z", "bug_id": 49687, "creation_time": "2011-11-13T22:57:35Z", "is_private": false}, {"count": 48, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "Created attachment 28220\nPatch to revision 1236835 of trunk.\n\nThis patch is to be applied to revision 1236835 of trunk as follows:\n\ncd ${FOP}/trunk\nsvn status # check and remove any unexpected changes prior to patchingsvn update -r 1236835 --force\nsvn revert -R .\nsvn status # check and remove any unexpected changes prior to patching\ngzcat ${DOWNLOADS}/fop-complexscripts-patch-2.diff.gz | patch -p1\nant clean\nant codegen-unicode-bidi\nant resgen-complexscripts\nant clean\nsvn add src/codegen/unicode/java/org/apache/fop/complexscripts\nsvn add src/java/org/apache/fop/complexscripts\nsvn add src/java/org/apache/fop/traits/Direction.java\nsvn add src/java/org/apache/fop/traits/WritingMode.java\nsvn add src/java/org/apache/fop/traits/WritingModeTraits.java\nsvn add src/java/org/apache/fop/traits/WritingModeTraitsGetter.java\nsvn add src/java/org/apache/fop/traits/WritingModeTraitsSetter.java\nsvn add test/java/org/apache/fop/complexscripts\nsvn add test/layoutengine/standard-testcases/basic-link_background-image_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_external-destination_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_external-destination_writing-mode_rl_2.xml\nsvn add test/layoutengine/standard-testcases/basic-link_for_toc_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_baseline-shift_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_inline-child_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_multi-child_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_multi-line_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_height_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-next-page.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-next-page_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-after.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-after_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-before.xml\nsvn add test/layoutengine/standard-testcases/basic-link_internal-desination-same-page-before_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/block-container_start-indent_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/block_text-align_4.xml\nsvn add test/layoutengine/standard-testcases/block_text-align_5.xml\nsvn add test/layoutengine/standard-testcases/character_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/inline_background-color_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_basic_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_border_padding_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/instream-foreign-object_display-align_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/leader-alignment_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/leader_leader-pattern_dots_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/leader_leader-pattern_rule_writing-system_rl.xml\nsvn add test/layoutengine/standard-testcases/leader_leader-pattern_space_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/leader_leader-pattern_use-content_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/list-block_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/page-number-citation_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/region-body_column-count_1_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/region-body_column-count_2_writing-mode_rl.xml\nsvn add test/layoutengine/standard-testcases/table-column_column-progression-lr.xml\nsvn add test/layoutengine/standard-testcases/table-column_column-progression-rl.xml\nsvn add test/resources/complexscripts\nsvn propdel svn:mime-type test/resources/complexscripts/arab/data/arab-001.txt\nsvn commit ...\n\nThis patch replaces (obsoletes) all previous patches on this bug and includes the following:\n\nBug Fixes\n\n* fo:block-container start-indent in bidi context (http://skynav.trac.cvsdude.com/fop/ticket/64)\n* fo:static-content fails to process bidirectional levels (http://skynav.trac.cvsdude.com/fop/ticket/70)\n* ignores standard kerning when font has GSUB but not GPOS (http://skynav.trac.cvsdude.com/fop/ticket/71)\n* fo:leader not fully supported in bidi context (http://skynav.trac.cvsdude.com/fop/ticket/74)\n\nNew Features\n\n* preliminary support for gujarati script (http://skynav.trac.cvsdude.com/fop/ticket/48)\n* preliminary support for gurmukhi script (http://skynav.trac.cvsdude.com/fop/ticket/49)\n\nRefactoring and Cleanup\n\n* move new complex script related code into separate package hierarchy at o.a.f.complexscripts\n  - the only exception is the retention of the four classes o.a.f.traits.WritingMode*.java\n* refactor large complex script related classes into smaller classes, e.g., BidiUtil.java has been divided into 6 classes\n* migrate advanced typography table parsing from TTFFile to o.a.f.complexscripts.fonts.OTFAdvancedTypographicTableReader\n* migrate FO node specific functionality into FO class hierarchy, e.g., see FONode.collectDelimitedTextRanges\n* migrate area tree node specific functionality into area class hierarchy, e.g., see InlineArea.collectInlineRuns\n\nRegards,\nGlenn", "id": 153225, "time": "2012-01-27T20:27:02Z", "bug_id": 49687, "creation_time": "2012-01-27T20:27:02Z", "attachment_id": 28220}, {"count": 49, "tags": [], "text": "Added complex script support (bidi, shaping, etc) at revision 1293736.", "attachment_id": null, "id": 154291, "creator": "gadams@apache.org", "time": "2012-02-27T18:13:50Z", "bug_id": 49687, "creation_time": "2012-02-27T18:13:50Z", "is_private": false}]
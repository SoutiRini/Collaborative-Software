[{"count": 0, "tags": [], "bug_id": 2476, "attachment_id": null, "text": "here is a patch to support kjc Java compiler and GCJ (Java compiler from GNU)\nragards.\n\ndiff -uNr jakarta-ant.orig/docs/manual/CoreTasks/javac.html jakarta-\nant/docs/manual/CoreTasks/javac.html\n--- jakarta-ant.orig/docs/manual/CoreTasks/javac.html\tFri Jul  6 21:07:09 2001\n+++ jakarta-ant/docs/manual/CoreTasks/javac.html\tFri Jul  6 21:13:09 2001\n@@ -38,6 +38,10 @@\n     compiler)</li>\n   <li>jvc (the Command-Line Compiler from Microsoft's SDK for Java /\n     Visual J++)</li>\n+  <li>kjc (the <a\n+    href=\"http://www.dms.at/kopi/\" target=\"_top\">kopi</a>\n+    compiler)</li>\n+  <li>gcj (the gcj compiler from gcc)\n </ul>\n <p>For JDK 1.1/1.2, classic is the default. For JDK 1.3, modern is the default.\n If you wish to use a different compiler interface than one of the four\n@@ -123,7 +127,7 @@\n   </tr>\n   <tr>\n     <td valign=\"top\">encoding</td>\n-    <td valign=\"top\">encoding of source files.</td>\n+    <td valign=\"top\">encoding of source files.(gcj doesn't support this option \nyet)</td>\n     <td align=\"center\" valign=\"top\">No</td>\n   </tr>\n   <tr>\ndiff -uNr jakarta-\nant.orig/src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory\n.java jakarta-\nant/src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java\n--- jakarta-\nant.orig/src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory\n.java\tFri Jul  6 21:07:09 2001\n+++ jakarta-\nant/src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java\n\tFri Jul  6 21:12:41 2001\n@@ -75,6 +75,7 @@\n      *\n      * The current mapping for compiler names are as follows:\n      * <ul><li>jikes = jikes compiler\n+     * <li>kjc = kjc compiler\n      * <li>classic, javac1.1, javac1.2 = the standard compiler from JDK\n      * 1.1/1.2\n      * <li>modern, javac1.3 = the new compiler of JDK 1.3\n@@ -97,6 +98,12 @@\n              */\n             if ( compilerType.equalsIgnoreCase(\"jikes\") ) {\n                 return new Jikes();\n+            }\n+            if ( compilerType.equalsIgnoreCase(\"kjc\") ) {\n+                return new Kjc();\n+            }\n+            if ( compilerType.equalsIgnoreCase(\"gcj\") ) {\n+                return new GCJ();\n             }\n             if ( compilerType.equalsIgnoreCase(\"classic\") ||\n                     compilerType.equalsIgnoreCase(\"javac1.1\") ||\ndiff -uNr jakarta-\nant.orig/src/main/org/apache/tools/ant/taskdefs/compilers/GCJ.java jakarta-\nant/src/main/org/apache/tools/ant/taskdefs/compilers/GCJ.java\n--- jakarta-ant.orig/src/main/org/apache/tools/ant/taskdefs/compilers/GCJ.java\n\tThu Jan  1 09:00:00 1970\n+++ jakarta-ant/src/main/org/apache/tools/ant/taskdefs/compilers/GCJ.java\tFri \nJul  6 21:12:26 2001\n@@ -0,0 +1,148 @@\n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.tools.ant.taskdefs.compilers;\n+\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Project;\n+import org.apache.tools.ant.types.*;\n+import java.io.File;\n+\n+/**\n+ * The implementation of the gcj compiler.\n+ * This is primarily a cut-and-paste from the jikes.\n+ *\n+ * @author <a href=\"mailto:tora@debian.org\">Takashi Okamoto</a>\n+ */\n+public class GCJ extends DefaultCompilerAdapter {\n+\n+    /**\n+     * Performs a compile using the gcj compiler.\n+     *  \n+     * @author tora@debian.org\n+     */\n+    public boolean execute() throws BuildException {\n+\tCommandline cmd;\n+        attributes.log(\"Using gcj compiler\", Project.MSG_VERBOSE);\n+\tcmd = setupGCJCommand();\n+\n+        int firstFileName = cmd.size();\n+        logAndAddFilesToCompile(cmd);\n+\n+        return executeExternalCompile(cmd.getCommandline(), firstFileName) == \n0;\n+    }\n+\n+    protected Commandline setupGCJCommand() {\n+        Commandline cmd = new Commandline();\n+        Path classpath = new Path(project);\n+\n+        // gcj doesn't support bootclasspath dir (-bootclasspath)\n+        // so we'll emulate it for compatibility and convenience.\n+        if (bootclasspath != null) {\n+            classpath.append(bootclasspath);\n+        }\n+\n+        // gcj doesn't support an extension dir (-extdir)\n+        // so we'll emulate it for compatibility and convenience.\n+        addExtdirsToClasspath(classpath);\n+\n+        if ( (bootclasspath == null) || (bootclasspath.size() == 0) ) {\n+            // no bootclasspath, therefore, get one from the java runtime\n+            includeJavaRuntime = true;\n+        }\n+        classpath.append(getCompileClasspath());\n+\n+        // Gcj has no option for source-path so we\n+        // will add it to classpath.\n+        classpath.append(src);\n+\n+        cmd.setExecutable(\"gcj\");\n+\n+        if (destDir != null) {\n+            cmd.createArgument().setValue(\"-d\");\n+            cmd.createArgument().setFile(destDir);\n+\t    \n+\t    if(destDir.mkdirs()){\n+\t       throw new BuildException(\"Can't make output directories. Maybe \npermission is wrong. \");\n+\t    };\n+        }\n+        \n+        cmd.createArgument().setValue(\"-classpath\");\n+        cmd.createArgument().setPath(classpath);\n+\n+        if (encoding != null) {\n+\t   System.err.println(\"Warning: gcj doesn't support -encoding \noption.\");\n+        }\n+        if (debug) {\n+            cmd.createArgument().setValue(\"-g1\");\n+        }\n+        if (optimize) {\n+            cmd.createArgument().setValue(\"-O\");\n+        }\n+\n+\t/**\n+\t *  gcj should be set for generate class.\n+         */\n+        cmd.createArgument().setValue(\"-C\");\n+\treturn cmd;\n+    }\n+}\n+\n+\n+\n+\n+\n+\n+\n+\ndiff -uNr jakarta-\nant.orig/src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java jakarta-\nant/src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java\n--- jakarta-ant.orig/src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java\n\tThu Jan  1 09:00:00 1970\n+++ jakarta-ant/src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java\tFri \nJul  6 21:12:19 2001\n@@ -0,0 +1,162 @@\n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.tools.ant.taskdefs.compilers;\n+\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Project;\n+import org.apache.tools.ant.taskdefs.LogOutputStream;\n+import org.apache.tools.ant.types.Commandline;\n+import org.apache.tools.ant.types.Path;\n+\n+import java.io.*;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * The implementation of the Java compiler for KJC.\n+ * This is primarily a cut-and-paste from Jikes.java and\n+ * DefaultCompilerAdapter.\n+ *\n+ * @author <a href=\"mailto:tora@debian.org\">Takashi Okamoto</a> \n+ */\n+public class Kjc extends DefaultCompilerAdapter {\n+\n+    public boolean execute() throws BuildException {\n+        attributes.log(\"Using kjc compiler\", Project.MSG_VERBOSE);\n+        Commandline cmd = setupKjcCommand();\n+\n+        try {\n+            OutputStream logstr = new LogOutputStream(attributes, \nProject.MSG_WARN);\n+            Class c = Class.forName(\"at.dms.kjc.Main\");\n+\n+            // Call the compile() method\n+            Method compile = c.getMethod(\"compile\", new Class [] { String\n[].class });\n+            Boolean ok = (Boolean)compile.invoke(null, new Object[] \n{cmd.getArguments()});\n+            return ok.booleanValue();\n+        }\n+        catch (ClassNotFoundException ex) {\n+            throw new BuildException(\"Cannot use kjc compiler, as it is not \navailable\"+\n+                                                         \" A common solution \nis to set the environment variable\"+\n+                                     \" CLASSPATH to your kjc archive\n(kjc.jar).\", location);\n+        }\n+        catch (Exception ex) {\n+            if (ex instanceof BuildException) {\n+                throw (BuildException) ex;\n+            } else {\n+                throw new BuildException(\"Error starting kjc compiler: \", ex, \nlocation);\n+            }\n+        }\n+    }\n+    /**\n+     * setup kjc command arguments.\n+     */\n+    protected Commandline setupKjcCommand() {\n+        Commandline cmd = new Commandline();\n+\t\n+\t// generate classpath, because kjc does't support sourcepath.\n+        Path classpath = getCompileClasspath();\n+\n+        if (deprecation == true) {\n+            cmd.createArgument().setValue(\"-deprecation\");\n+        }\n+\n+        if (destDir != null) {\n+            cmd.createArgument().setValue(\"-d\");\n+            cmd.createArgument().setFile(destDir);\n+        }\n+\n+        // generate the clsspath \n+        cmd.createArgument().setValue(\"-classpath\");\n+\n+\tPath cp = new Path(project);\n+\n+\t// kjc don't have bootclasspath option.\n+\tif (bootclasspath != null) {\n+\t  cp.append(bootclasspath);\n+\t}\n+\n+\tif (extdirs != null) {\n+\t  addExtdirsToClasspath(cp);\n+\t}\n+\n+\tcp.append(classpath);\n+\tcp.append(src);\n+\n+\tcmd.createArgument().setPath(cp);\n+\n+\t// kjc-1.5A doesn't support -encoding option now.\n+        // but it will be supported near the feature.\n+        if (encoding != null) {\n+            cmd.createArgument().setValue(\"-encoding\");\n+            cmd.createArgument().setValue(encoding);\n+        }\n+\n+        if (debug) {\n+            cmd.createArgument().setValue(\"-g\");\n+        }\n+\n+        if (optimize) {\n+            cmd.createArgument().setValue(\"-O2\");\n+        }\n+\n+        if (verbose) {\n+            cmd.createArgument().setValue(\"-verbose\");\n+        }\n+\n+        logAndAddFilesToCompile(cmd);\n+        return cmd;\n+    }\n+}\n+", "id": 3442, "time": "2001-07-06T05:14:43Z", "creator": "toraneko@kun.ne.jp", "creation_time": "2001-07-06T05:14:43Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 4216, "time": "2001-08-01T08:54:41Z", "bug_id": 2476, "creation_time": "2001-08-01T08:54:41Z", "tags": [], "text": "committed your patches for nightly build 2001-08-02"}]
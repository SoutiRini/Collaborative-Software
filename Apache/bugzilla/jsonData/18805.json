[{"count": 0, "tags": [], "bug_id": 18805, "is_private": false, "text": "In compliance with XHTML 1.1 Standard, I updated my HTML to use url encoding \nand HTML entities for special characters.  However, when providing a link to a \nfile that contains special characters such as the accented vowels in extended \nASCII, Apache fails to obtain the file even though the URL decode appears to \nhave worked (by the 403 message).  The following example illustrates:\n\n<a href=\"http://www.mattrogersweb.com/example/Mozart%20-%20Die%20Zauberfl%F6te%\n20-%20Bei%20M%E4nnern%2C%20Welche%20Liebe%20F%FChlen.mp3\">Mozart - Die \nZauberfl&ouml;te - Bei M&auml;nnern, Welche Liebe F&uuml;hlen.mp3</a>\n\nThe %F6 %E4 %FC decode to \u00f6 \u00e4 \u00fc (&ouml; &auml; &uuml;) as they should, but \nresult in the \"403 Forbidden\" message without obtaining the file.  I would \nlike to see this fixed in a future release.", "id": 34703, "time": "2003-04-08T09:35:40Z", "creator": "mattrogers@mattrogersweb.com", "creation_time": "2003-04-08T09:35:40Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 18805, "text": "If the server is win32 (other systems may also be affected, not sure at the\nmoment), you have to use UTF-8 plus URL encoding. (and not iso-8859-1 or whatever)\n\nThis has btw nothing to do with XHTML, it's RFC 1738/2396.\n\nHowever, we may consider a directive which defines the charset of incoming URLs\nand converts them to the system's filesystem charset. I'm leaving this report\nassigend for now.\n\nThanks for using Apache.", "id": 34738, "time": "2003-04-08T15:27:43Z", "creator": "nd@perlig.de", "creation_time": "2003-04-08T15:27:43Z", "is_private": false, "attachment_id": null}, {"count": 2, "text": "(In reply to comment #1)\n> \n> This has btw nothing to do with XHTML, it's RFC 1738/2396.\n> \nWith respect, that is incorrect.  RFC 2396 states explicitly :\n\nThis document\n   does not discuss the issues and recommendation for dealing with\n   characters outside of the US-ASCII character set [ASCII]; those\n   recommendations are discussed in a separate document.\n\nI would like to confirm the issue stated by the original poster, and add an additional similar problem :\n1) on a Windows Apache server, create a file in the document root named, for example, \"joaqu\u00edn.jpg\" (notice the accented \u00ed). (You do this with the disk Explorer or any local means).\n2) Now, with any browser anywhere, request http://hostname/joaqu\u00edn.jpg.\nThe browser will \"do the right thing\" as per the spec : any character in that URL that is not a member of the US-ASCII character set (nor forbidden, reserved, etc) will be escaped as %xy, before the request is sent to the httpd server.\n3) you will get a 403 Forbidden answer from Apache (2.2.9, Win32).\n\nSurely that is an incorrect response code, since the requested document is not by any means forbidden nor subject to authorization.\nFurthermore, if you request a directory index of the document root (assuming this is permitted), you will see this file listed, with a name visually identical to what you entered in the browser's URL box.\n\nSurely also, when requesting the content of a URL from a server on the WWW, neither the user nor the browser are supposed to know the underlying platform of the server, not the charset or encoding it uses on its filesystem.\nSo it *must* belong to the httpd server to make the appropriate conversion from the URL to the file name.\nAnd if it gets it wrong, it should at least return a 404 Not found, not a 403 Forbidden.\n ", "bug_id": 18805, "is_private": false, "id": 120952, "time": "2008-09-25T01:35:40Z", "creator": "aw@ice-sa.com", "creation_time": "2008-09-25T01:35:40Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 18805, "text": "Works fine for me on *X platform.\n\nThat leads me to three hypotheses:\n  (1) There was an issue, but it's now fixed.\n  (2) There is an issue, but it's platform-specific.\n  (3) The issue is a misunderstanding of character encoding issues: Apache translated the filename correctly, but the filesystem entry isn't what the reporter thinks.\n\nI expect everyone has dismissed it as (3) in the past.  That's my inclination too, unless someone has evidence to the contrary.\n\nCan someone confirm if it's fixed, or if it \"works\" for you on some platforms but not others?", "id": 131593, "time": "2009-11-02T13:49:17Z", "creator": "nick@webthing.com", "creation_time": "2009-11-02T13:49:17Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 18805, "text": "Following up to this 'cos I got email after my recent update, and the reply might be of interest to others reading this report.\n\n> 2) Now, with any browser anywhere, request http://hostname/joaqu\u00edn.jpg.\n\nThat would need to be http://localhost/joaqu%C3%ADn.html\n\nOther encodings would fail on a utf-8 platform.\n\n> The browser will \"do the right thing\" as per the spec : any character in that\n> URL that is not a member of the US-ASCII character set (nor forbidden,\n> reserved, etc) will be escaped as %xy, before the request is sent to the httpd\n> server.\n> 3) you will get a 403 Forbidden answer from Apache (2.2.9, Win32).\n\nHaven't confirmed, but I expect that's what happens when you send something in an encoding that can't legitimately map to your filesystem, and it looks like a cracking attempt.\n\nCome to think of it, that looks like the problem with the OP too.  I'll close this, and suggest that anyone who wants to re-open provide detail that there is an issue other than inconsistent encoding on some platform.  I guess \"worksforme\" covers both the cases of Invalid and Fixed.", "id": 131601, "time": "2009-11-02T15:55:37Z", "creator": "nick@webthing.com", "creation_time": "2009-11-02T15:55:37Z", "is_private": false, "attachment_id": null}]
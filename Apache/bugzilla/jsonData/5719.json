[{"count": 0, "tags": [], "creator": "dsl@ts.com", "text": "If a context reload is tried using the Manager webapp, whilst also processing a\nrequest for the context deadlock occurs.\n\nthe request serving thread is in StandardWrapper.getServletContext awaiting the\nlock on the Context, whilst holding the StandardWrapper's lock (synchronized\nStandardWrapper.load() method)\n\nmeanwhile, the manager's thread is in the StandardContext.reload() method,\nholding the lock of the Context, and attempting to call the StandardWrapper's\nsynchronized  unload() method..", "id": 9404, "time": "2002-01-07T07:47:51Z", "bug_id": 5719, "creation_time": "2002-01-07T07:47:51Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 5719, "attachment_id": null, "is_private": false, "id": 9406, "time": "2002-01-07T08:28:23Z", "creator": "dsl@ts.com", "creation_time": "2002-01-07T08:28:23Z", "text": "doh,  found this has been fixed (hopefully) since Oct 12th.."}, {"count": 2, "tags": [], "creator": "dsl@ts.com", "is_private": false, "text": "sorry chaps, having installed 4.0.2 it's still everywhere (I was misreading CVS\nmessage about a different fix)\n\nBasically, there are synchronization problems in many many places during a\nreload.  If you hit a jsp page just before reloading its context, the problem\nlisted above can happen..  in particular the reloading thread holds many locks\nthat the current request needs access to in order to complete, and the reloading\nneeds the request to finish before it relinquishes these needed locks.. \n\nOne particular example is (4.0.2b) when this lock up has happened is\n\nHttpProcessor:  getServletContext : 1169:StandardWrapper \n                getServletContext : 125:StandardWrapper \n                _initialize: 128:jasper.runtime.PageContextImpl\n                initialize: 114:jasper.runtime.PageContextImpl\n                internalGetPageContext: 175:jasper.runtime.JspFactoryImpl\n                getPageContext:154:jasper.runtime.JspFactoryImpl \n                _jspServiet:45:org.apache.jsp.base1$jsp\n                service:HttpJspBase\n                [..skip..] \n                doForward:431:catalina.core.ApplicationDispatcher\n                forward:355:catalina.core.ApplicationDispatcher\n                etc.\nand the manager's thread:\n                sleep:Thread\n                unload:1063:StandardWrapper \n                stop:1287:StandardWrapper\n                reload:2380:StandardContext\n                reload:448:ManagerServlet\n                doGet:281:ManagerServlet\n\n", "id": 9407, "time": "2002-01-07T09:24:16Z", "bug_id": 5719, "creation_time": "2002-01-07T09:24:16Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "dsl@ts.com", "text": "changed priority", "id": 9408, "time": "2002-01-07T09:27:58Z", "bug_id": 5719, "creation_time": "2002-01-07T09:27:58Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 5719, "attachment_id": null, "is_private": false, "id": 9409, "time": "2002-01-07T09:32:25Z", "creator": "remm@apache.org", "creation_time": "2002-01-07T09:32:25Z", "text": "If I actually use ab, and then at the same time use the manager to reload the \ncontext (multiple times), nothing bad seems to happen."}, {"count": 5, "tags": [], "bug_id": 5719, "attachment_id": null, "is_private": false, "id": 9410, "time": "2002-01-07T09:37:53Z", "creator": "dsl@ts.com", "creation_time": "2002-01-07T09:37:53Z", "text": "Sorry but I don't agree with the resolution: if you look at the code you can see\nthat it doesn't work!"}, {"count": 6, "tags": [], "creator": "dsl@ts.com", "is_private": false, "text": "I've managed to reproduce this by modifying the examples/forward/forward.jsp\nwith 4.0.2\nchange the first jsp block to:\n\n<% \n\tthis.getServletContext();\n\ttry {Thread.sleep(10000);\n\t}\n\tcatch (Exception e) {};\n\tthis.getServletContext();\n   double freeMem = Runtime.getRuntime().freeMemory();\n   double totlMem = Runtime.getRuntime().totalMemory();\n   double percent = freeMem/totlMem;\n   if (percent < 0.5) { \n\n%>\n\nnow, access this jsp, and a couple of seconds after hitting it, make a reload\nrequest.  The system deadlocks: because getServletContext is synchronized,\nand the reloading thread has hold of the locks it needs to complete....\n\nd.", "id": 9411, "time": "2002-01-07T10:04:30Z", "bug_id": 5719, "creation_time": "2002-01-07T10:04:30Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 5719, "attachment_id": null, "is_private": false, "id": 9414, "time": "2002-01-07T10:30:59Z", "creator": "remm@apache.org", "creation_time": "2002-01-07T10:30:59Z", "text": "Ok, now that I undestand the problem, we can probably fix it. I think just \nremoving the synchronized in the getServletContext (since it's always called \nduring the synchronized start, there are no race problems on that method call) \nshould fix the problem.\n(hey, submitting that as a patch would have taken you 5s; it's a lot better \nthan filing a report with missing details)"}, {"count": 8, "attachment_id": null, "bug_id": 5719, "text": "That looks like it'll work - thanks - over to you..", "id": 9417, "time": "2002-01-07T10:53:00Z", "creator": "dsl@ts.com", "creation_time": "2002-01-07T10:53:00Z", "tags": [], "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 5719, "text": "Ok, I've committed the fix.\nI think it would do the same with stop(), so it could also fix the problems with\nTomcat hanging on shutdown which I couldn't reproduce.", "id": 9423, "time": "2002-01-07T11:55:29Z", "creator": "remm@apache.org", "creation_time": "2002-01-07T11:55:29Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "remm@apache.org", "text": "*** Bug 5742 has been marked as a duplicate of this bug. ***", "id": 9460, "time": "2002-01-08T08:17:27Z", "bug_id": 5719, "creation_time": "2002-01-08T08:17:27Z", "is_private": false, "attachment_id": null}]
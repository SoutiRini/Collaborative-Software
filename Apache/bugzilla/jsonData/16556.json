[{"count": 0, "tags": [], "bug_id": 16556, "text": "I found what I believe to be a couple of problems with mod_proxy and ftp:// URLs:\n\n(1)  When mod_proxy attempts to retrieve a file by FTP it fails to explicitly\nset an ASCII/binary transfer type when it sends an FTP SIZE command.  Some FTP\nservers (such as the FreeBSD ftpd) report back different file sizes depending on\nthe current transfer mode.  mod_proxy DOES explicitly set an ASCII/binary\ntransfer type before issuing the FTP RETR command, but if this explicit transfer\nmode differs from the assumed one that FTP SIZE used then there is a mismatch\nbetween expected file size and actual file size.  I'd recommend explicitly\nsetting the file transfer type before issuing the FTP SIZE, the same way the FTP\nRETR does.\n\n(2)  In the ftp_set_TYPE() function there appears to be some undesirable\n\"memory\" across FTP file retrievals.  The ftp_set_TYPE() function attempts an\noptimization using the static local variable \"old_type\" to remember the current\ntransfer mode.  If the newly requested mode doesn't differ from the current mode\nthen ftp_set_TYPE() doesn't bother to send an FTP TYPE command because it would\nbe unnecessary.  I think this causes a problem.  It appears that this static\nlocal variable is not being reset when it needs to be.  I have done some tests\nwhere I repeatedly requested an ftp:// file through mod_proxy (both with the\ndefault binary transfer mode and an explicit \";type=i\" URL) and for some unknown\nreason the file sometimes comes across in binary and sometimes comes across in\nASCII, even if I explicitly use a \";type=i\" URL!  I narrowed the problem down to\nthis static old_type variable.  If I remove its function and always send an FTP\nTYPE command in ftp_set_TYPE() then files are predictably retrieved the way they\nshould be.  Perhaps the static nature of old_type causes it to be remembered\nacross retrievals done by a particular httpd child process?  Maybe the first\ntime an FTP retrieval comes in to an Apache child the file will be correctly\ntransferred in binary mode, but when that same child handles another retrieval\nit will mistakenly think it's still in binary mode (and thus never resend the\n\"TYPE I\" command) and accidentally retrieve the file in ASCII mode?  From\nwatching the FTP session in tcpdump where a file is mistransferred I noticed\nthat httpd never once sends an FTP TYPE command, which leads me to believe that\nftp_set_TYPE() mistakenly optimized it away based on false memory of the\ntransfer mode.\n\nI have prepared patches to Apache 1.3.27 that fix these issues and placed them here:\n\n    http://www.uniserver.com/apache.proxy.ftp.problem.diff\n\nFeel free to review them an integrate them (or your own versions) into the\nsource tree.", "id": 30291, "time": "2003-01-29T20:00:28Z", "creator": "apache@uniserver.com", "creation_time": "2003-01-29T20:00:28Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "Martin.vGagern@gmx.net", "attachment_id": null, "id": 126120, "time": "2009-04-08T14:25:06Z", "bug_id": 47002, "creation_time": "2009-04-08T14:25:06Z", "is_private": false, "text": "junitreport does create an internal xslt task to format its report. It doesn't expose most of the configuration options of that task, though. In particular, it does not allow the classpath to be specified.\n\nI've been writing a build.xml relying only on ant core, and fetching optional tasks along with their dependency libs through ivy. I <taskdef>ed junitreport to its implementing class with a suitable classpath, but still got a ClassNotFoundException because XSLTProcess couldn't find its TraXLiaison.\n\nAs XSLTProcess itself is core, it was loaded using the main ant classloader, not the one used to load the junit classes like XMLResultAggregator. That class loader didn't know about my additional libs, so adding ant-trax to the classpath used when redefining the jnitreport task didn't help at all.\n\nWhile some cleaner solution to load tasks on the fly would be desirable, and I'll write a separate bug report about this, the quick solition would be to provide some nested classpath element, maybe as a child of the report element."}, {"count": 1, "tags": [], "creator": "Martin.vGagern@gmx.net", "attachment_id": 23470, "id": 126141, "time": "2009-04-09T02:27:52Z", "bug_id": 47002, "creation_time": "2009-04-09T02:27:52Z", "is_private": false, "text": "Created attachment 23470\nExpose classpath and factory\n\nThis patch creates the nested XSLTProcess at creation of the AggregateTransformer, not upon execution of the transformation. This way it is much easier to simply wrap parts of the interface I'd like to expose, like the new <classpath> and <factory> nested elements, but also the existing <param> elements.\n\nI haven't called XSLTProcess.init(), as the previous code didn't do that either. I don't fully understand the difference between init() and a constructor, but it might be a good thing to init the task somewhere.\n\nThe approach I chose is something like a whitelist delegation: the XSLTProcess is a private member, and only selected methods of its interface are wrapped and thus exposed to be configured. As an alternative, one could do something like a blacklist delegation by deriving a class from XSLTProcess and forbidding access to certain settings by ovverriding the corresponding methods and throwing exceptions therein. In that case, one might even turn the class derived from XSLTProcess into a nested <xslt> element, which would be probably much clearer, as it would be configured in the same way that a top-level <xslt> task is. I didn't choose this approach in my patch for now, but if you prefer it, I can implement that as well."}, {"count": 2, "tags": [], "bug_id": 47002, "text": "Created attachment 25506\nExpose classpath and factory\n\nUpdated patch to apply to trunk after r948574. Also tweaked \"since\" lines to refer to 1.9, as this patch most obviously won't make it for 1.8. :-(", "id": 137256, "time": "2010-06-01T14:44:56Z", "creator": "Martin.vGagern@gmx.net", "creation_time": "2010-06-01T14:44:56Z", "is_private": false, "attachment_id": 25506}, {"count": 3, "tags": [], "bug_id": 47002, "text": "Thank you for your patience.  I don't really know why this slipped through the cracks more than four years ago.", "id": 179306, "time": "2014-11-26T19:58:06Z", "creator": "bodewig@apache.org", "creation_time": "2014-11-26T19:58:06Z", "is_private": false, "attachment_id": null}]
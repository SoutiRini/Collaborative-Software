[{"count": 0, "tags": [], "bug_id": 60905, "attachment_id": 34870, "text": "Created attachment 34870\nWhile comparing these two files\n\norg.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: Rule M2.4 exception : this error should NEVER happen! Please raise a bug at https://bz.apache.org/bugzilla/enter_bug.cgi?product=POI and attach a file that triggers it, thanks!\n   [testng] \tat org.apache.poi.openxml4j.opc.internal.ContentTypeManager.getContentType(ContentTypeManager.java:343)\n   [testng] \tat org.apache.poi.openxml4j.opc.internal.ContentTypeManager.removeContentType(ContentTypeManager.java:256)\n   [testng] \tat org.apache.poi.openxml4j.opc.OPCPackage.removePart(OPCPackage.java:958)\n   [testng] \tat org.apache.poi.openxml4j.opc.PackagePart.getOutputStream(PackagePart.java:522)\n   [testng] \tat org.apache.poi.xssf.usermodel.XSSFWorkbook.commit(XSSFWorkbook.java:1687)\n   [testng] \tat org.apache.poi.POIXMLDocumentPart.onSave(POIXMLDocumentPart.java:464)\n   [testng] \tat org.apache.poi.POIXMLDocument.write(POIXMLDocument.java:211)\n   [testng] \tat com.autobot.lmsbetaexcelcomparison.LMSTestpage.compareExcels(LMSTestpage.java:311)\n   [testng] \tat com.autobot.lmsbetaexcelcomparison.LMSTestCases.downloadFile(LMSTestCases.java:36)\n   [testng] \tat com.autobot.lmsbetaexcelcomparison.LMSTestCases.testDownloadExcel(LMSTestCases.java:41)\n   [testng] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [testng] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [testng] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [testng] \tat java.lang.reflect.Method.invoke(Method.java:498)\n   [testng] \tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)\n   [testng] \tat org.testng.internal.Invoker.invokeMethod(Invoker.java:639)\n   [testng] \tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)\n   [testng] \tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)\n   [testng] \tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)\n   [testng] \tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)\n   [testng] \tat org.testng.TestRunner.privateRun(TestRunner.java:774)\n   [testng] \tat org.testng.TestRunner.run(TestRunner.java:624)\n   [testng] \tat org.testng.SuiteRunner.runTest(SuiteRunner.java:359)\n   [testng] \tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)\n   [testng] \tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)\n   [testng] \tat org.testng.SuiteRunner.run(SuiteRunner.java:261)\n   [testng] \tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n   [testng] \tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n   [testng] \tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)\n   [testng] \tat org.testng.TestNG.runSuitesLocally(TestNG.java:1140)\n   [testng] \tat org.testng.TestNG.run(TestNG.java:1048)\n   [testng] \tat org.testng.TestNG.privateMain(TestNG.java:1355)\n   [testng] \tat org.testng.TestNG.main(TestNG.java:1324)", "id": 197928, "time": "2017-03-23T10:32:07Z", "creator": "aman13garg@gmail.com", "creation_time": "2017-03-23T10:32:07Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60905, "attachment_id": null, "id": 197929, "time": "2017-03-23T10:35:33Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-03-23T10:35:33Z", "is_private": false, "text": "Can you include the minimal amount of code that makes it possible to reproduce this?"}, {"count": 2, "tags": [], "creator": "aman13garg@gmail.com", "text": " public  void compareExcels() {\n        try {\n            File currentDirectory = new File(new File(\"exceldownloads\").getAbsolutePath());\n            // get input excel files\n            FileInputStream excellFile1 = new FileInputStream(\n                    new File(currentDirectory.getAbsoluteFile() + \"/\"+ \"Production.xlsx\"));\n            FileInputStream excellFile2 = new FileInputStream(\n                    new File(currentDirectory.getAbsoluteFile() +\"/\" + \"Testing.xlsx\"));\n\n            // Create Workbook instance holding reference to .xlsx file\n            XSSFWorkbook workbook1 = new XSSFWorkbook(excellFile1);\n            XSSFWorkbook workbook2 = new XSSFWorkbook(excellFile2);\n\n            XSSFFont font1 = workbook1.createFont();\n            font1.setColor(XSSFFont.COLOR_RED);\n            font1.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);\n\n            XSSFFont font2 = workbook2.createFont();\n            font2.setColor(XSSFFont.COLOR_RED);\n            font2.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);\n\n            XSSFCellStyle style1 = workbook1.createCellStyle();\n            style1.setFillBackgroundColor(IndexedColors.YELLOW.getIndex());\n            style1.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);\n            style1.setFont(font1);\n\n            XSSFCellStyle style2 = workbook2.createCellStyle();\n            style2.setFillBackgroundColor(IndexedColors.YELLOW.getIndex());\n            style2.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);\n            style2.setFont(font2);\n\n            // Get first/desired sheet from the workbook\n            XSSFSheet sheet1 = workbook1.getSheetAt(0);\n            XSSFSheet sheet2 = workbook2.getSheetAt(0);\n\n            // Compare sheets\n            if (compareTwoSheets(sheet1, sheet2, style1, style2)) {\n                Reporter.log(\"<li><font size='3' color='blueviolet' face='arial'>\"\n                        + \"\\n\\nBoth Excels are equal\" + \"</li></font size>\");\n            } else {\n                Reporter.log(\"<li><font size='3' color='red' face='arial'>\"\n                        + \"\\n\\n Both excels are not equal\" + \"</li></font size>\");\n            }\n\n            // close files\n            excellFile1.close();\n            excellFile2.close();\n            workbook1.close();\n            workbook2.close();\n\n            FileOutputStream fileOut = new FileOutputStream(\n                    new File(currentDirectory.getAbsoluteFile() + \"/\" + \"Production.xlsx\"));\n            workbook1.write(fileOut);\n            fileOut.close();\n            FileOutputStream fileOut1 = new FileOutputStream(\n                    new File(currentDirectory.getAbsoluteFile() + \"/\" + \"Testing.xlsx\"));\n            workbook2.write(fileOut1);\n            fileOut1.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Compare Two Sheets\n    public static boolean compareTwoSheets(XSSFSheet sheet1, XSSFSheet sheet2, XSSFCellStyle s1,\n            XSSFCellStyle s2) {\n        int firstRow1 = sheet1.getFirstRowNum();\n        int lastRow1 = sheet1.getLastRowNum();\n        boolean equalSheets = true;\n        for (int i = firstRow1; i <= lastRow1; i++) {\n\n            Reporter.log(\"\\n\\nComparing Row \" + i);\n\n            XSSFRow row1 = sheet1.getRow(i);\n            XSSFRow row2 = sheet2.getRow(i);\n            if (!compareTwoRows(row1, row2, s1, s2)) {\n                equalSheets = false;\n                Reporter.log(\"<li><font size='1' color='red' face='arial'>\"\n                        + \"\\nRow \" + i + \" - Not Equal\" + \"</li></font size>\");\n\n            } else {\n                Reporter.log(\"<li><font size='1' color='bluevoilet' face='arial'>\"\n                        + \"\\nRow \" + i + \" -  Equal\" + \"</li></font size>\");\n            }\n        }\n        return equalSheets;\n    }\n\n    // Compare Two Rows\n    public static boolean compareTwoRows(XSSFRow row1, XSSFRow row2, XSSFCellStyle s1,\n            XSSFCellStyle s2) {\n        if ((row1 == null) && (row2 == null)) {\n            return true;\n        } else if ((row1 == null) || (row2 == null)) {\n            return false;\n        }\n\n        int firstCell1 = row1.getFirstCellNum();\n        int lastCell1 = row1.getLastCellNum();\n        boolean equalRows = true;\n\n        // Compare all cells in a row\n        for (int i = firstCell1; i <= lastCell1; i++) {\n            XSSFCell cell1 = row1.getCell(i);\n            XSSFCell cell2 = row2.getCell(i);\n            if (!compareTwoCells(cell1, cell2)) {\n                equalRows = false;\n                cell1.setCellStyle(s1);\n                cell2.setCellStyle(s2);\n                Reporter.log(\"<li><font size='1' color='red' face='arial'>\"\n                        + \"\\nCell \" + i + \" - Not Equal\" + \"</li></font size>\");\n\n            } else {\n\n                Reporter.log(\"<li><font size='1' color='bluevoilet' face='arial'>\"\n                        + \"\\nCell \" + i + \" - Equal\" + \"</li></font size>\");\n            }\n        }\n        return equalRows;\n    }\n\n    // Compare Two Cells\n    public static boolean compareTwoCells(XSSFCell cell1, XSSFCell cell2) {\n        if ((cell1 == null) && (cell2 == null)) {\n            return true;\n        } else if ((cell1 == null) || (cell2 == null)) {\n            return false;\n        }\n\n        boolean equalCells = false;\n        int type1 = cell1.getCellType();\n        int type2 = cell2.getCellType();\n        if (type1 == type2) {\n            if (cell1.getCellStyle().equals(cell2.getCellStyle())) {\n                // Compare cells based on its type\n                switch (cell1.getCellType()) {\n                case HSSFCell.CELL_TYPE_FORMULA:\n                    if (cell1.getCellFormula().equals(cell2.getCellFormula())) {\n                        equalCells = true;\n\n                    }\n                    break;\n                case HSSFCell.CELL_TYPE_NUMERIC:\n                    if (cell1.getNumericCellValue() == cell2.getNumericCellValue()) {\n                        equalCells = true;\n                    }\n                    break;\n                case HSSFCell.CELL_TYPE_STRING:\n                    if (cell1.getStringCellValue().equals(cell2.getStringCellValue())) {\n                        equalCells = true;\n                    }\n                    break;\n                case HSSFCell.CELL_TYPE_BLANK:\n                    if (cell2.getCellType() == HSSFCell.CELL_TYPE_BLANK) {\n                        equalCells = true;\n                    }\n                    break;\n                case HSSFCell.CELL_TYPE_BOOLEAN:\n                    if (cell1.getBooleanCellValue() == cell2.getBooleanCellValue()) {\n                        equalCells = true;\n                    }\n                    break;\n                case HSSFCell.CELL_TYPE_ERROR:\n                    if (cell1.getErrorCellValue() == cell2.getErrorCellValue()) {\n                        equalCells = true;\n                    }\n                    break;\n                default:\n                    if (cell1.getStringCellValue().equals(cell2.getStringCellValue())) {\n                        equalCells = true;\n                    }\n                    break;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n        return equalCells;\n    }", "id": 197930, "time": "2017-03-23T10:43:47Z", "bug_id": 60905, "creation_time": "2017-03-23T10:43:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "aman13garg@gmail.com", "attachment_id": null, "is_private": false, "id": 197931, "time": "2017-03-23T10:44:42Z", "bug_id": 60905, "creation_time": "2017-03-23T10:44:42Z", "text": "Error is coming due to fileout.close. After close when we try to save the xlsx file."}, {"count": 4, "tags": [], "bug_id": 60905, "attachment_id": null, "text": "The workflow needs to be first write() then close(), we recently updated the javadoc accordingly, please try to exchange this and see if it works then.", "id": 197940, "time": "2017-03-23T16:16:03Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-03-23T16:16:03Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 60905, "is_private": false, "text": "No response for some time so I expect the suggestion did work here.", "id": 198932, "time": "2017-05-28T12:37:14Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-05-28T12:37:14Z", "attachment_id": null}]
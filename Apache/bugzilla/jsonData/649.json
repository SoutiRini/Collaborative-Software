[{"count": 0, "tags": [], "creator": "petermeyer99@hotmail.com", "attachment_id": null, "text": "Problem:\n========\n\nI want to create a DOM using the DOM Parser where node classes a subclasses of \nthe default implementation.\nAndy Clark suggested on the xerces user list to subclass DocumentImpl and to \nuse parser.setProperty to register the new factory class with the parser.\n\nI tried this by modifying the DOMCount sample.\n\n\nHere's what I did\n=================\n\nDOMCOunt.java:\nAdded one line before parser.parse\n...\nparser.setProperty(\"http://apache.org/xml/properties/dom/document-class-\nname\", \"dom.csDocImpl\");\n\nDocument document = parser.parse(uri);\n...\n\n\nIn order for this to work, I added the setProperty function to DOMParserWrapper \nInterface and to the DOMParser implementation of the samples directory (see \nattachment).\n\nThen I wrote the following custom DocumentImpl subclass:\npackage dom;\n\nimport org.apache.xerces.dom.*;\nimport org.w3c.dom.*;\n\nclass csDocImpl extends DocumentImpl \n{\n\n\tpublic csDocImpl()\n\t{\n\t\tsuper();\n\t\tSystem.out.println(\"Here I am\");\n\t\tSystem.out.flush();\n\t}\n\n    public Element createElement(String name) \n\t{\n\t\tSystem.out.println(\"Test\");\n\t\treturn new ElementImpl(this, name);\n    }\n\n}\n\n\n\n\nResult:\n=======\n\nC:\\Java\\xerces-1_3_0\\samples-123>java dom.DOMCount ..\\data\\personal.xml\njava.lang.NullPointerException\n        at org.apache.xerces.parsers.DOMParser.startElement(DOMParser.java:1043)\n\n        at org.apache.xerces.validators.common.XMLValidator.callStartElement(XML\nValidator.java:965)\n        at org.apache.xerces.framework.XMLDocumentScanner$ContentDispatcher.disp\natch(XMLDocumentScanner.java:990)\n        at org.apache.xerces.framework.XMLDocumentScanner.parseSome(XMLDocumentS\ncanner.java:381)\n        at org.apache.xerces.framework.XMLParser.parse(XMLParser.java:952)\n        at org.apache.xerces.framework.XMLParser.parse(XMLParser.java:991)\n        at dom.wrappers.DOMParser.parse(wrappers/DOMParser.java:111)\n        at dom.DOMCount.count(DOMCount.java:138)\n        at dom.DOMCount.main(DOMCount.java:333)\n\n\nAnalysis:\n=========\nUsing the debugger, it can be seen that the fDocument variable of the DOMParser \ninstance is indeed null. And the constructor of the new DocumentImpl class \nactually is never called. I walked through the code, and it seems that \nstartDocument() does not get called, and that seems to be the only place where \nthe DocumentImpl custom class is actually instanced.\nThe comments in the code seem to indicate that any error should have been \ncaught before the factory method is actually called on fDocument.\n\nTried this in 1_3_0 and 1_2_3. \n\nAm I doing something wrong?\n\n\nAttachments:\n============\nAll modified files used in the test case in a zip file, plus the new java \nsource file with the custom DocumentImpl subclass\nTo find changes in the original Apache sample files, search for \"MOD:\"", "id": 776, "time": "2001-02-19T22:59:06Z", "bug_id": 649, "creation_time": "2001-02-19T22:59:06Z", "is_private": false}, {"count": 1, "tags": [], "creator": "petermeyer99@hotmail.com", "attachment_id": 17, "text": "Created attachment 17\nZip'ed source files for example that shows the problem", "id": 777, "time": "2001-02-19T23:00:32Z", "bug_id": 649, "creation_time": "2001-02-19T23:00:32Z", "is_private": false}, {"count": 2, "tags": [], "creator": "lehors@apache.org", "attachment_id": null, "text": "The reported bug isn't truly in Xerces actually. The problem comes from the \nfact that the user's class csDocImpl is not public.\nThis said, the DOMParser silently swallowed the exception and kept going. I \nchanged that to raise a RuntimeException, so that we stop there and at least \nthe user knows something went wrong.", "id": 790, "time": "2001-02-20T16:45:39Z", "bug_id": 649, "creation_time": "2001-02-20T16:45:39Z", "is_private": false}]
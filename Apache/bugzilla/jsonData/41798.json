[{"count": 0, "tags": [], "bug_id": 41798, "is_private": false, "text": "This is related to bugs 39746 and 38448.\n\nAfter turning on AllowEncodedSlashes,\nApache lets us use percent encoded forward slashes in the path. Eg:\n\n\"http://foo/hello%2Fworld\"\n\nWhen using \"ProxyPass / http://bar/\"\n\nmod_proxy makes a request for:\n\n\"http://bar/hello/world\"\n\nThat is wrong as I understand it. The forward slash at the end should\nbe encoded still.\n\nRFC-1738, section 3.3 regarding HTTP URLs:\n\n\"Within the <path> and <searchpart> components, \"/\", \";\", \"?\" are\nreserved. The \"/\" character may be used within HTTP to designate a\nhierarchical structure.\"\n\nSo... The forward slash is a reserved character. Section 2.2 says the\nfollowing about reserved characters:\n\n\"If the character corresponding to an octet is reserved in a scheme, the\noctet must be encoded.\"\n\nSo as far as I can see http://foo/hello%2Fworld and\nhttp://foo/hello/world are distinctly different HTTP URLs that should be\nallowed to behave differently. Just because Apache treats them the same\nwhen serving local content, doesn't mean that other servers do when you're\nproxying the request to them, so I don't think the path should be rewritten\nin the way mod_proxy is doing it...\n\nPerhaps there should be an option called something like\n\"ProxyPreservePathEncoding\" which when turned on, means that *no*\nencoding/decoding of the path in the url is performed before it is proxied...\n\nIf my browser makes a request for \"http://foo/hello%2Fworld\" and I have\n\"ProxyPass / http://bar/\" I *expect* it to call \"http://bar/hello%2Fworld\" not\n\"http://bar/hello/world\" as it does currently. It *should* be the default\nbehaviour, but that would probably not be backwards compatible.\n\nMike", "id": 100206, "time": "2007-03-09T02:20:45Z", "creator": "apache-dev@lists.grepular.com", "creation_time": "2007-03-09T02:20:45Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "is_private": false, "id": 107918, "time": "2007-09-09T15:38:08Z", "bug_id": 41798, "creation_time": "2007-09-09T15:38:08Z", "text": "*** Bug 35100 has been marked as a duplicate of this bug. ***"}, {"text": "*** Bug 42592 has been marked as a duplicate of this bug. ***", "tags": [], "bug_id": 41798, "attachment_id": null, "count": 2, "id": 107923, "time": "2007-09-09T16:25:02Z", "creator": "nick@webthing.com", "creation_time": "2007-09-09T16:25:02Z", "is_private": false}, {"count": 3, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "id": 107950, "time": "2007-09-10T03:10:46Z", "bug_id": 41798, "creation_time": "2007-09-10T03:10:46Z", "is_private": false, "text": "*** Bug 39455 has been marked as a duplicate of this bug. ***"}, {"count": 4, "tags": [], "text": "Fixed in Trunk in r588791.", "attachment_id": null, "bug_id": 41798, "id": 109827, "time": "2007-10-26T16:08:47Z", "creator": "nick@webthing.com", "creation_time": "2007-10-26T16:08:47Z", "is_private": false}, {"text": "Fixed in r596712.", "tags": [], "bug_id": 41798, "is_private": false, "count": 5, "id": 110851, "time": "2007-11-20T07:29:51Z", "creator": "nick@webthing.com", "creation_time": "2007-11-20T07:29:51Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "wil@dready.org", "attachment_id": null, "id": 115163, "time": "2008-03-31T15:24:47Z", "bug_id": 41798, "creation_time": "2008-03-31T15:24:47Z", "is_private": false, "text": "I have an instance of mod_proxy doing reverse proxying using the \"nocanon\" parameter in the ProxyPass directive. The reason I needed this was that I'm dealing with IRIs on the path, and mod_proxy was decoding the characters for me.\n\nIn any case, I find that when \"nocanon\" is turned on, mod_proxy appends the query twice and sent it to the target host, e.g.:\n\nOriginal request:\n\nhttp://mod-proxy-host.com/path?query\n\nThe target was sent:\n\nhttp://localhost:8003/target?query?query\n\n\nThis seems to be due to r->unparsed_uri containing the original query, whereas r->uri doesn't (and other parts of the code appends it to the target.)"}, {"text": "Created attachment 21743\nProof-of-concept that fixes the issue\n\nThis is meant to demonstrate that it fixes the issue. However, I have not checked for security issues or whether it breaks other configurations.", "tags": [], "bug_id": 41798, "attachment_id": 21743, "count": 7, "id": 115164, "time": "2008-03-31T15:26:23Z", "creator": "wil@dready.org", "creation_time": "2008-03-31T15:26:23Z", "is_private": false}, {"count": 8, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "is_private": false, "id": 115168, "time": "2008-03-31T15:43:00Z", "bug_id": 41798, "creation_time": "2008-03-31T15:43:00Z", "text": "Comments 6 and 7 appear to be opening a new report.  Please don't hijack an old report for that.  And if we're to take your NEW report seriously, we'll need more information, such as a configuration and request that trigger the problem with 2.2.8."}, {"count": 9, "tags": [], "creator": "wil@dready.org", "attachment_id": null, "id": 115195, "time": "2008-04-01T11:03:34Z", "bug_id": 41798, "creation_time": "2008-04-01T11:03:34Z", "is_private": false, "text": "Sorry for hijacking this report. I've created bug 44730 to track the issue."}]
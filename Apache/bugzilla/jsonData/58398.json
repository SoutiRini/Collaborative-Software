[{"count": 0, "tags": [], "creator": "yilong.li@runtimeverification.com", "attachment_id": null, "is_private": false, "id": 185165, "time": "2015-09-12T17:21:26Z", "bug_id": 58398, "creation_time": "2015-09-12T17:21:26Z", "text": "Reported by RV-Predict (a dynamic race detector) when running the test suite:\nData race on field org.apache.catalina.util.LifecycleSupport.listeners: {{{\n    Concurrent write in thread T19 (locks held: {Monitor@49fb3aa9, Monitor@5b24cbd})\n ---->  at org.apache.catalina.util.LifecycleSupport.addLifecycleListener(LifecycleSupport.java:87)\n        - locked Monitor@5b24cbd at org.apache.catalina.util.LifecycleSupport.addLifecycleListener(LifecycleSupport.java:81)\n        at org.apache.catalina.util.LifecycleBase.addLifecycleListener(LifecycleBase.java:61)\n        at org.apache.catalina.core.StandardEngine$AccessLogListener.install(StandardEngine.java:449)\n        at org.apache.catalina.core.StandardEngine.logAccess(StandardEngine.java:337)\n        at org.apache.catalina.connector.CoyoteAdapter.log(CoyoteAdapter.java:675)\n        at org.apache.coyote.http11.Http11Nio2Processor.handleIncompleteRequestLineRead(Http11Nio2Processor.java:242)\n        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1006)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:663)\n        at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.doRun(Nio2Endpoint.java:1074)\n        at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.run(Nio2Endpoint.java:1033)\n        - locked Monitor@49fb3aa9 at org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.run(Nio2Endpoint.java:1032)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    T19 is created by T18\n        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)\n\n    Concurrent read in thread T13 (locks held: {Monitor@632e842a})\n ---->  at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:115)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)\n        at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:347)\n        at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:954)\n        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)\n        - locked Monitor@632e842a at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:n/a)\n        at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1424)\n    T13 is created by T1\n        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:1010)\n}}}"}, {"count": 1, "tags": [], "text": "This bug is detected by Coverity Scan as well. I dig into the history and it appears that this class was originally written with proper synchronization. Anyway, listeners + listenersLock looks like a home-made CopyOnWriteArrayList. Any reason not to use a concurrent data structure such as ConcurrentLinkedQueue or concurrent HashSet?", "is_private": false, "bug_id": 58398, "id": 185215, "time": "2015-09-13T21:59:46Z", "creator": "yilong.li@runtimeverification.com", "creation_time": "2015-09-13T21:59:46Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 185331, "time": "2015-09-18T08:56:32Z", "bug_id": 58398, "creation_time": "2015-09-18T08:56:32Z", "is_private": false, "text": "Fixed in trunk and 8.0.x for 8.0.27 onwards."}]
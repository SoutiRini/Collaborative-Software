[{"count": 0, "tags": [], "text": "I have found that after deploying and removing my application using tomcat \nmanager a few times, the JVM throws an out of memory exception.\n\nI found the following posts on tomcat-dev/tomcat-user mail archives but did \nnot see any bugzilla entries for it.\n\nPOST 1\nhttp://www.mail-archive.com/tomcat-dev@jakarta.apache.org/msg42351.html\n--------------------------------------------------------------------------\nI believe I am seeing a memory leak that occurs when deploying or\nmore precisely undeploying a web application through the Tomcat manager.\nI've done some analysis using a stripped down web application, JProbe,\nand code inspection.  I would not presume to know the Tomcat source nor\nhave done a complete and thorough analysis, but I would like to share\nmy observations and more importantly, solicit feedback from the Tomcat\nuser/development community.\n\nEnvironment:\n\n  RedHat 8.0, JDK 1.4.1, Tomcat 4.1.21 Beta\n\nSynopsis of problem:\n\n  We are deploying and undeploying our web applications through\n  the Tomcat Manager.  In the case of one of our web applications,\n  redeploying 3-4 times resulted in an OutOfMemoryError in\n  Tomcat's JVM.  Initially, we thought this was due to several daemon\n  Threads that were not Servlet lifecycle aware.  But even after\n  fixing these, we were still running out of memory.\n\n  Suspecting that our classes were not being garbage collected\n  (note the distinction between object garbage collection and\n  class garbage collection) and might be pinned by classes that\n  exist higher in the ClassLoader hierarchy (in common, shared,\n  or possibly even server), I decided to try profiling using JProbe\n  (http://java.quest.com/jprobe/jprobe.shtml) and a VERY simple\n  web application.  This web application is composed of a single\n  Servlet that does nothing but allocate a 1,000,000 element\n  byte array in its init() method and nulls it in its destroy() method.\n  I deployed and undeployed several times running under JProbe's\n  memory debugger and did observe a small memory leak of org.apache.*\n  classes/instances.\n\nAnalysis:\n\n  These are the org.apache instances that do not appear to be garbage\n  collected after a deploy/undeploy cycle:\n\n\n  Class                                                         Count\n  ---------------------------------------------------------------------\n  org.apache.catalina.LifecycleListener[]                       4\n  org.apache.catalina.Valve[]                                   1\n  org.apache.catalina.core.ApplicationContext                   1\n  org.apache.catalina.core.ApplicationContextFacade             1\n  org.apache.catalina.core.NamingContextListener                1\n  org.apache.catalina.core.StandardContext                      1\n  org.apache.catalina.core.StandardContextMapper                1\n  org.apache.catalina.core.StandardContextValve                 1\n  org.apache.catalina.core.StandardPipeline                     1\n  org.apache.catalina.deploy.ApplicationParameter[]             1\n  org.apache.catalina.deploy.NamingResources                    1\n  org.apache.catalina.deploy.SecurityConstraint[]               1\n  org.apache.catalina.deploy.FilterMap[]                        1\n  org.apache.catalina.loader.WebappClassLoader                  1\n  org.apache.catalina.loader.WebappLoader                       1\n  org.apache.catalina.session.StandardManager                   1\n  org.apache.catalina.startup.ContextConfig                     1\n  org.apache.catalina.util.LifecycleSupport                     4\n  org.apache.commons.collections.LRUMap                         1\n  org.apache.commons.collections.SequencedHashMap$Entry         6\n  org.apache.naming.NameParserImpl                              2\n  org.apache.naming.NamingContext                               3\n  org.apache.naming.NamingEntry                                 4\n  org.apache.naming.TransactionRef                              1\n  org.apache.naming.resources.ImmutableNameNotFoundException    1\n  org.apache.naming.resources.ProxyDirContext                   1\n  org.apache.naming.resources.ProxyDirContext$CacheEntry        5\n  org.apache.naming.resources.ResourceAttributes                3\n  org.apache.naming.resources.WARDirContext                     2\n  org.apache.naming.resources.WARDirContext$WARResource         2\n  org.apache.naming.resources.WARDirContext$Entry               2\n  org.apache.naming.resources.WARDirContext$Entry[]             2\n\n  Initially, I focused on the org.apache.catalina.core.StandardContext\n  class.  It seemed like a nice entry point that scopes the Catalina\n  classes supporting a web application deployment.\n\n  It appears that an instance is pinned in several locations:\n\n\n  1.  org.apache.naming.ContextBindings.bindContext() is called (in \n      org.apache.catalina.core.NamingContextListener.lifecycleEvent()\n      given a org.apache.catalina.LifeCycleEvent whose getType() is\n      org.apache.catalina.Lifecycle.START_EVENT).  This puts\n      StandardContext into a static Hashtable within ContextBindings.\n      This Hashtable entry is removed by a call to\n      ContextBindings.unbindContext().  unbindContext() appears to never\n      be called.\n\n  2.  An org.apache.jasper.logging.DefaultLogger instance (which\n      implements org.apache.jasper.logging.Logger) is created in\n      org.apache.jasper.servlet.JspServlet.init().  DefaultLogger's\n      setName() method is called resulting in the Logger being placed\n      into a static Hashtable.  Entries in this Hashtable are removed\n      via the Logger.close() and Logger.removeLogger(...) methods,\n      neither of which appear to be called.\n\n      DefaultLogger refers to a StandardContext via the following chain\n      of references:\n\n      DefaultLogger -> org.apache.catalina.core.ApplicationContextFacade\n      -> org.apache.catalina.core.ApplicationContext -> StandardContext\n\n  3.  The DefaultLogger created in JspServlet is also referenced\n      by a static field in org.apache.jasper.Constants.  This field\n      does not appear to be cleared.\n\n  4.  org.apache.catalina.core.StandardHostDeployer has a\n      static org.apache.catalina.Context field that is set to the\n      suspect StandardContext after a call to its addChild() method\n      (called reflectively by org.apache.commons.digester.Digester).\n      This field is not unset unless the install(URL, URL) method\n      is called (but not if the other install(String, URL) or either\n      of the remove() methods is called).\n\n      This context can be replaced if addChild() is called again,\n      but would this happen only if another deployment occured?\n      If so, StandardContext is still \"pinned\" if the web application\n      is left undeployed and a subsequent deployment does not occur.\n\n  5.  One of the Digester instances can also periodically hold onto\n      a StandardContext (as its root), but this reference can and \n      appears to be replaced (via Digester.push() when its stack\n      is empty). I have not analyzed when this may be the case,\n      so similar to (4), it seems possible that StandardContext\n      will be pinned if the Digester instance is not \"reset.\"\n\n\n  At this point in time, I have not analyzed memory leaks beyond\n  references to StandardContext.  Many other \"leaky\" instances\n  can be traced back to StandardContext (ApplicationContext,\n  ApplicationContextFacade, StandardManager, etc...).\n\n  The number of instances that appear to be leaking and the size\n  of these instances is fairly small.  I would guess less than 2K.\n  However, I suspect that these instances are pinnning classes.\n\n  By instrumenting our code, I have been able to determine that\n  instances are indeed being garbage collected.  On the other hand,\n  I have been able to instrument WebappClassLoader and have not seen\n  it finalize.  In our production environment, we are deploying a \n  Jetspeed portal which contains hundreds of classes which I believe\n  can explain the limited number of times we are able to re-deploy\n  before running out of memory.\n\n  If you've managed to read through to here, any ideas or pointers\n  would be greatly appreciated.\n\n  Thanks,\n  Ted Chen\n\n\n\n\nPOST 2:\nhttp://www.mail-archive.com/tomcat-user@jakarta.apache.org/msg90811.html\n----------------------------------------------------------------------\nI believe I'm seeing a memory leak as a result of a Manager\ndeploy/undeploy.  I have a very simple test case:  a Servlet that has a\nstatic field that refers to an object (Foo) that allocates a large chunk\nof memory.  I've instrumented both the Servlet (init(), destroy(), and\nfinalize()) and Foo (ctor and finalize()).  The Servlet has been\nconfigured to load on startup.\n\nOn a deploy, I see:\n\n    Foo.ctor (during class initialization of the Servlet)\n    Servlet.init():\n\nOn an undeploy, I see:\n\n    Servlet.destroy()\n    Servlet.finalize()\n\nI never see Foo.finalize().  If I continue to deploy/undeploy\nrepeatedly, eventually the VM reports an OutOfMemoryError when I try to\ndeploy.  Running the VM with -verbose:gc and \"encouraging\" GC whenever\npossible, I see that after each undeploy, memory usage goes up roughly\nby what I've allocated in Foo.\n\nAny ideas?", "attachment_id": null, "id": 38807, "creator": "sys@yahoo.com", "time": "2003-06-13T18:34:09Z", "bug_id": 20758, "creation_time": "2003-06-13T18:34:09Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 38810, "time": "2003-06-13T18:36:42Z", "creator": "sys@yahoo.com", "creation_time": "2003-06-13T18:36:42Z", "is_private": false, "text": "bug #11128 could be related (or the same)"}, {"count": 2, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 38855, "time": "2003-06-14T07:50:59Z", "creator": "remm@apache.org", "creation_time": "2003-06-14T07:50:59Z", "is_private": false, "text": "*** Bug 11128 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 38856, "time": "2003-06-14T08:02:33Z", "creator": "remm@apache.org", "creation_time": "2003-06-14T08:02:33Z", "is_private": false, "text": "Thanks for summarizing the issue, that I will try to address. That's typically\nis needed for TC 5."}, {"count": 4, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 38920, "time": "2003-06-16T12:20:48Z", "creator": "glenn@apache.org", "creation_time": "2003-06-16T12:20:48Z", "is_private": false, "text": "Thanks for the summary on this memory leak Tony.\n\nI think this should be added to the list of changes/bug fixes for the\nnext Tomcat 4.1.XX release."}, {"count": 5, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 41592, "time": "2003-07-27T17:07:55Z", "creator": "tagunov@motor.ru", "creation_time": "2003-07-27T17:07:55Z", "is_private": false, "text": "http://nagoya.apache.org/eyebrowse/ReadMsg?listName=tomcat-\ndev@jakarta.apache.org&msgId=776903\n\nseems to be adding to the topic:\n\nUsing \nOptimizeIt, I tried to understand the problem and I found that my application ClassLoader was \nnever totally released\nwhen I stop my application. There are always some strange references on \nit and especially the \"classLoader of\njava.security.ProtectionDomain\", which comes from \nthe org.apache.catalina.core.StandardContext.start() method."}, {"count": 6, "tags": [], "creator": "tmg@cnicorp.com", "attachment_id": null, "text": "We too are getting out of memory erros in Tomcat 4.1.24 JDK 1.4.x\n\nHas this been fixed in a new 4.1 verion of tomcat?", "id": 54473, "time": "2004-03-23T14:07:45Z", "bug_id": 20758, "creation_time": "2004-03-23T14:07:45Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 62979, "time": "2004-09-02T18:54:14Z", "creator": "steve@bodymedia.com", "creation_time": "2004-09-02T18:54:14Z", "is_private": false, "text": "The same problem still exists for 5.0.27. Can the version be changed to \nreflect this.\n\nI have some rather large singletons that do not get garbage collect on \nundeploy. This renders the undeploy/deploy features utterly useless.\n\nBug 11128 has a suggested fix. Why have they not been commented on or \nimplemented?"}, {"count": 8, "tags": [], "bug_id": 20758, "text": "In summary it looks like there are three issues here:\n1. StandardContext\n2. Static references in servlets\n3. ClassLoader\n\nThe issues may or may be not be inter-related.\n\nI have just downloaded a profiler and started to have a look at these. I'll \npost results as I get them.\n\nOn the subject of changing version, lets leave it as TC4 for now. If I make \nany changes I'll make them to TC5 as well.", "id": 62990, "time": "2004-09-02T21:47:12Z", "creator": "markt@apache.org", "creation_time": "2004-09-02T21:47:12Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 20758, "text": "The profiler shows that the static references in servlets are being cleaned \nup. Therefore 2 is not an issue.\n\nOn re-reading this report it looks like there might be a fourth issue. Steve - \ncan you provide me with a simple test case for your singleton issue?\n\nIn summary:\n1. Still to investigate\n2. No issue\n3. Still to investigate\n4. Need more info", "id": 62993, "time": "2004-09-02T22:36:28Z", "creator": "markt@apache.org", "creation_time": "2004-09-02T22:36:28Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 62997, "creation_time": "2004-09-03T01:57:02Z", "time": "2004-09-03T01:57:02Z", "creator": "dball@rhoworld.com", "text": "Is it possible that a static reference to the webapp's classloader could keep\nthe servlet context components from being garbage collected? I've seen hints\nthat this might be the case, particularly w.r.t. webapps that use cglib and/or\nhibernate.", "is_private": false}, {"count": 11, "tags": [], "creator": "steve@bodymedia.com", "attachment_id": 12622, "text": "Created attachment 12622\nSingleton Test Servlet", "id": 62998, "time": "2004-09-03T02:11:48Z", "bug_id": 20758, "creation_time": "2004-09-03T02:11:48Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 20758, "attachment_id": 12623, "id": 62999, "time": "2004-09-03T02:12:25Z", "creator": "steve@bodymedia.com", "creation_time": "2004-09-03T02:12:25Z", "is_private": false, "text": "Created attachment 12623\nSingleton Test Class"}, {"count": 13, "tags": [], "bug_id": 20758, "attachment_id": 12624, "id": 63000, "time": "2004-09-03T02:13:30Z", "creator": "steve@bodymedia.com", "creation_time": "2004-09-03T02:13:30Z", "is_private": false, "text": "Created attachment 12624\nLarge object to load via reflection"}, {"count": 14, "tags": [], "creator": "steve@bodymedia.com", "attachment_id": null, "text": "I applogize. My previous posting was incorrect and does not reproduce the \nproblem. It grows until the garbage collector hits its first limit. However, I \nhave a new one that definately reproduces the problem. It is related to using \nObjectOutputStreams. There are many posting related to using reset() with \nObjectOutputStreams which I do. I also have a simple test code that repeatidly \nwrites Object to a file with no problem. However, if put it in a servlet and \ncontinualy reload, it leaks. Could it be related to the ClassLoader?", "id": 63048, "time": "2004-09-03T16:25:53Z", "bug_id": 20758, "creation_time": "2004-09-03T16:25:53Z", "is_private": false}, {"count": 15, "tags": [], "text": "Created attachment 12638\nRevised BigSingleton, which writes objects to disk.", "attachment_id": 12638, "id": 63049, "creator": "steve@bodymedia.com", "time": "2004-09-03T16:27:21Z", "bug_id": 20758, "creation_time": "2004-09-03T16:27:21Z", "is_private": false}, {"count": 16, "tags": [], "text": "Created attachment 12639\nRevised Singleton Servlet.", "attachment_id": 12639, "bug_id": 20758, "id": 63050, "time": "2004-09-03T16:28:21Z", "creator": "steve@bodymedia.com", "creation_time": "2004-09-03T16:28:21Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 20758, "text": "Quick update:\n1. Worst offenders patched in TC4 (already pacthed in TC5). Need to work out \nif the remaining potential offenders are really an issue.\n2. No issue.\n3. Directly related to 1.\n4. Still to investigate.", "id": 63104, "time": "2004-09-05T23:26:34Z", "creator": "markt@apache.org", "creation_time": "2004-09-05T23:26:34Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 20758, "attachment_id": null, "id": 63139, "time": "2004-09-06T21:17:09Z", "creator": "markt@apache.org", "creation_time": "2004-09-06T21:17:09Z", "is_private": false, "text": "All should now be fixed. For the record:\n1. Problem exactly as described in original report. All StandardContext issues \nfixed in TC4. Nearlly all had already been applied to TC5. The remaining one \nhas been applied.\n2. Could not reproduce.\n3. Same problem as 1.\n4. Unable to reproduce after fixing 1."}, {"count": 19, "tags": [], "bug_id": 20758, "attachment_id": null, "text": "*** Bug 3888 has been marked as a duplicate of this bug. ***", "id": 72812, "time": "2005-03-24T23:57:23Z", "creator": "markt@apache.org", "creation_time": "2005-03-24T23:57:23Z", "is_private": false}]
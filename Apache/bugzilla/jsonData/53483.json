[{"count": 0, "tags": [], "text": "Hi.\n\nThis is:\n\na) something that should definitely go to the release notes and announcement mailing list\n\n\nb) complicated to the complex handling and differences of whether request URIs and especially directories have trailing / or not\n\nc) I tried this so far only with Apache 2.2 and don't have an 2.4 right now available.\nI'm well aware of the avialability of $ in DirectoryMatch now, and the documentation on it.\n\nd) The documentation of the respective directives should be changed.\n\ne) marked as major, as it easily grants access to things, that are not expected to be accessible by the average users.\n\n\n\n\nNow to the issue:\n\n\nFor all places where PCRE patterns are used, people will most usually want them:\n\na) to start with \"^\"\n=> otherwise the patterns match at any place\n\nb) and end them with depending on the case (typically whether regular files or directories should be matched) with \"$\" or \"(?:$|/)\"\n=> other wise the pattern dont't end\n=> my proposal, \"(?:$|/)\", works only (probably) well with Apache 2.4 ... more on that later.\n\n\nBefore I go on all the directives:\nThe \"?:\" in \"(?:$|/)\" above means, that the subpattern (the \"(...)\" thingy) is non capturing, i.e. you cannot use the match via e.g. \\1 . This makes things faster and one usually doesn't want to use $|/ later on.\n\n\nThe directives I cover below are likely not all affected; basically everything which may have PCRE regexps as parameter might be.\nFurther I do not list the e.g. <Directory ~ \"regexp\"> forms, which are of course affected, too.\nI focus mainly on the directives which may have some file/dir access controlling effect.\n\n\nI) With respect to the \"to start with '^'\" thingy\nAliasMatch:\nHere you already clearly show the difference between patterns starting with ^ and those not.\n\n<DirectoryMatch>:\nThe \"^/www\" example is safe, but please add another warning box, that notifies about the differences between patterns starting with ^ and those not.\n\n<FilesMatch>:\nThe \"\\.(gif|jpe?g|png)$\" example is safe (or better said: what one expects), though I'd suggest to change it to \".+\\.(gif|jpe?g|png)$\" as one usually don't want to match the files \".gif\", \".png\", \".jpeg\" or \".jpg\" themselves.\nBut anyway please add another warning box, that notifies about the differences between patterns starting with ^ and those not.\n\n<LocationMatch>:\nThe example is \"wrong\" in a sense that it's not what people usually want (matching the absolute server path). The text below says that already, but perhaps mark the \"contains\" bold.\nBut anyway please add another warning box, that notifies about the differences between patterns starting with ^ and those not.\n\nRedirectMatch:\nThe \"(.*)\\.gif$\" example is safe (or better said: what one expects), though I'd suggest to change it to \"/(.+)\\.gif$\" as one usually don't want to match the file \".gif\" themselves (the leading \"/\" is required, otherwise it would still match \".gif\" itself.\nBut anyway please add another warning box, that notifies about the differences between patterns starting with ^ and those not.\n\nScriptAliasMatch:\nThe examples are safe (or better said: what one expects).\nBut anyway please add another warning box, that notifies about the differences between patterns starting with ^ and those not.\n\n\n\nNow so far things are not too bad, but now it gets problematic:\nI) With respect to the \"to end with '$' or '(?:$|/)'\" thingy\nAliasMatch:\nThe text says: \"For example, to activate the /icons directory\".\nBut actually the patterns also match any directories like /iconsFOOBAR.\nSo the first example is dangerous and tricky, it should be changed to:\n\"^/icons(/.*)(?:$|/)\"\nwhich matches:\n/icons\n/icons/\n/icons/foobar\n/icons/foobar/\nbut not:\n/iconsFOOBAR\nAnalogously the case-insensitive example below.\nThe other examples are safe, as far as I can say:\nBut anyway please add another warning box, that notifies about the differences between patterns ending with (?:$|/) and those not.\n\n<DirectoryMatch>:\nHere things are really dangerous:\nThe example \"^/www/(.+/)?[0-9]{3}\" is explained as \"would match directories in /www/ that consisted of three numbers\".\nDue to the (.+/)? this os wrong anyway as it must read \"would match directories in __OR SOMEWHERE BELOW__ /www/ that consisted of three numbers\".\nBut it's even worse: as there is no ending of the pattern, it also matches directories like:\n\"^/www/foobar/123BAZ\"\nOr try even a more simple example, e.g.\n<DirectoryMatch \"^/s\">\nOrder Allow,Deny\nAllow From All\n</DirectoryMatch>\nThe directory \"/secret\" is matched too, and not just the directory \"/s/.\nThe example must be changed to: \"^/www/(.+/)?[0-9]{3}(?:$|/)\"\n\nWhy is my \"safe\" end pattern (?:$|/) and not just /. Because we also want to match directories that have no trailing / set.\nAs mentioned above, this should AFAIU work with apache 2.4, and needs the \"$\" part.\n\nPlease add a red box, where you note people that this is different from how <Directory> worked,... when the want to match full directory names (e.g. /123 and not also /123*) they need to close the pattern somehow, and take examples like\n/foo(?:$|/) means:\n/foo\n/foo/\n/foo/bar\nbut not:\n/fooBAZ\nand\n/foo(?:$|/$) or /foo/?$ means:\n/foo\n/foo/\nbut not:\n/foo/bar\n/fooBAZ\n\n<FilesMatch>:\nThe example are safe, as far as I can say:\nBut anyway please add another warning box, that notifies about the differences between patterns ending with $ and those not.\n\n<LocationMatch>:\nAnalogous to <DirectoryMatch>...the example is dangerous, as not only substrings /special/data but also /special/dataFOO would be matched,.. which is correct from the wording, but people probably think that the later wouldn't be matched.\nSo please add analogous info as above with <DirectoryMatch>.\n\nRedirectMatch:\nThe exampl is safe, but anyway please add analogous info as above with <DirectoryMatch>.\n\nScriptAliasMatch:\nAnalogous to <DirectoryMatch>...the example is dangerous, as not only substrings /cgi-bin but also /cgi-binFOO would be matched,.. which is correct from the wording, but people probably think that the later wouldn't be matched.\nSo please add analogous info as above with <DirectoryMatch>.\n\n\n\nYou see there is a lot of trickery in it. I don't doubt that you developers know all these, but I guess for the average user, it's difficult to see from the current documentation.\n\n\nActually there is even more trickery:\nMy \"solutions\" above, did not recongise that many slashes, are typically collapsed to one, i.e. /foo////bar// is the same as /foo/bar/.\nI'm not sure whether we should cover this or not, the above patterns would need to be adapted with some quantifiers.\n\n\nIf you make changes, please post the commit IDs, so I can follow and verify :-)\n\n\nHope that helps and loads of thanks in advance,\nChris.", "attachment_id": null, "id": 160329, "creation_time": "2012-06-29T01:31:52Z", "time": "2012-06-29T01:31:52Z", "creator": "calestyo@scientia.net", "bug_id": 53483, "is_private": false}, {"count": 1, "tags": [], "creator": "calestyo@scientia.net", "attachment_id": null, "id": 160330, "time": "2012-06-29T01:54:50Z", "bug_id": 53483, "creation_time": "2012-06-29T01:54:50Z", "is_private": false, "text": "Just noted, for DirectoryMatch (but not for the others, e.g. LocationMatch, or AliasMatch).... it makes obviously no sense to handle the case of multiple trailing \"/\" e.g. /var////www/public///\n\nThese are likely anyway collapsed by either Apache internally or the OS.\n\nOr no?"}, {"count": 2, "attachment_id": null, "bug_id": 53483, "is_private": false, "id": 160331, "time": "2012-06-29T02:13:56Z", "creator": "calestyo@scientia.net", "creation_time": "2012-06-29T02:13:56Z", "tags": [], "text": "I just noted that for the same reasons as in comment #1, and again also just for Directories, but not for locations/aliases etc.\n\n\"(?:$|/)\"\nshould be replaceable by:\n\"/\"\n(also matching subdirectories\n\nand\n\"(?:$|/$)\"\nby:\n\"(/$)\"\n(not matching subdirs).\n\n\n\nHowever, even the first one doesn't work with apache2.2\nWhen I give e.g. the pattern\n\"^/foo/\"\n\ni can open the URI\n/foo/\n/foo/x\nbut not:\n/foo\n\nwhy??"}, {"count": 3, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "Can't follow.  How about providing an update in patch form?", "id": 160332, "time": "2012-06-29T02:32:26Z", "bug_id": 53483, "creation_time": "2012-06-29T02:32:26Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 53483, "text": "Reclassifying as 2.2 based on comments.", "id": 160333, "time": "2012-06-29T02:33:09Z", "creator": "covener@gmail.com", "creation_time": "2012-06-29T02:33:09Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "calestyo@scientia.net", "text": "Hi Eric.\n\nWhere exactly do you get stuck?\n\nGenerally, I see two \"problems\":\na) Documentation should be improved, to better educate users what they're doing there. I could write patches for this. \nb) I don't understand why e.g.\n<DirectoryMatch ^/some/path/a/>  #note the trailing slash\nOrder Allow,Deny\nAllow From All\nOptions +indexes\n</DirectoryMatch>\n\nlet's me access via the URL:\nhttp://somehost.org/a/\nbut NOT\nhttp://somehost.org/a\n\nhttp://somehost.org/a/foo => works, as expected\nhttp://somehost.org/aFOO => doesn't work, as expected\n\n\n\nRegarding the rebasing:\n(a) applies to 2.4, too (I was working on that's documentation)\n(b) I'll set up some 2.4 installation to check whether that happens there, too", "id": 160342, "time": "2012-06-29T10:23:24Z", "bug_id": 53483, "creation_time": "2012-06-29T10:23:24Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "I agree with Christoph about the documentation problems for these directives. They're not wrong, but some additional warning must be made to avoid \"over-matching\".\n\nThe problem is that regex is *always* a partial match, but the non-regex counterparts do a full match. This makes a huge difference.\n\n    <Files \"image.png\">\n    Matches image.png, but not myimage.png nor image.png.zip.\n\n    <FilesMatch \"image\\.png\">\n    Matches image.png, myimage.png, image.png.zip, image.png/foo, ...\n\nThis partial match is not expected by the user, since the non-regex directive does not work that way. It's important to make this distinction very clear in the docs, in all the path-related directives.\n\nAnd also encourage the use of anchors and slashes to avoid the undesired partial matches.\n\n    <FilesMatch \"/image\\.png$\">\n    Matches image.png only, in any folder.\n\n    <FilesMatch \"^/image\\.png$\">\n    Matches image.png only, in root folder.\n\nSlashes and $ are tricky in folder-related directives, such as in <DirectoryMatch>.\n\n    <Directory \"foo\">\n    Matches folder foo, in any folder\n\n    <DirectoryMatch \"foo\">\n    Matches folders foo, foobar, myfoo, \u2026 in any folder\n\n    <DirectoryMatch \"/foo\">\n    Matches folders foo, foobar, \u2026 in any folder\n\n    <DirectoryMatch \"/foo/\">\n    Matches folder foo, in any folder\n\n    <DirectoryMatch \"^/foo/\">\n    Matches root folder foo, *and all its subfolders*, because of the partial match.\n\n    <DirectoryMatch \"^/foo/$\">\n    Matches root folder foo\n    (only works in v2.4, see Bug 49809)\n\n    <DirectoryMatch \"/foo/$\">\n    Matches folder foo, as the last path component, in any folder\n    (only works in v2.4, see Bug 49809)\n\nFor the user, it's difficult to understand all these subtle differences without examples and proper explanation.\n\nMY SUGGESTION\n\nSince the partial match is the great culprit for the confusion, my suggestion for the docs is to update all the examples to use full anchored regexes, with ^ and $, and encourage the user to *always* do it this way, to avoid unexpected results. Even if all she wants is a partial match:\n\n    <FilesMatch \"^.+\\.(gif|png|jpg)$\">\n    <DirectoryMatch \"^.*/secret/.*$\">\n\nThen all the mentioned problems are reduced to only one problem: make your full regex right. No Apache inner workings knowledge necessary. And if you don't know regex, don't mess with it :)", "attachment_id": null, "bug_id": 53483, "id": 161681, "time": "2012-08-24T17:33:36Z", "creator": "verde@aurelio.net", "creation_time": "2012-08-24T17:33:36Z", "is_private": false}, {"count": 7, "tags": [], "text": "Aurelio, that's basically what I mean :)\n\nIt's correct that the current examples are not strictly wrong, they are just not that what the end-user probably wants.\n\n\nAnd we should really teach them how to do it proper and safe.\n\n\nMy original contained already many suggestions and places on what and where I'd change.\nIt's just that right now, my time is highly limited.\n\n\nCheers,\nChris.", "attachment_id": null, "id": 161682, "creation_time": "2012-08-24T17:54:24Z", "time": "2012-08-24T17:54:24Z", "creator": "calestyo@scientia.net", "bug_id": 53483, "is_private": false}, {"count": 8, "tags": [], "text": "Hi Christoph, my intention was to explain the problem in a different way, hopefully easier to understand by those who are not fully aware of it. And maybe my simpler suggestion is easier to implement. I hope that it helps the doc maintainers to get this issue fixed.", "is_private": false, "id": 161683, "creation_time": "2012-08-24T18:29:31Z", "time": "2012-08-24T18:29:31Z", "creator": "verde@aurelio.net", "bug_id": 53483, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 53483, "attachment_id": null, "text": "r1673487 clarifies a DirectoryMatch example.", "id": 182364, "time": "2015-04-14T18:21:25Z", "creator": "rbowen@apache.org", "creation_time": "2015-04-14T18:21:25Z", "is_private": false}, {"count": 10, "tags": [], "creator": "rbowen@apache.org", "attachment_id": null, "text": "FWIW, I disagree with using the ?: syntax in the regular expressions. This isn't a regex tutorial, and using advanced regex techniques clouds the issue for people that are trying to learn httpd syntax. I certainly wouldn't -1 a patch, but I think that it makes the document more about regex syntax than about *Match syntax, which feels out of scope.", "id": 182365, "time": "2015-04-14T18:30:59Z", "bug_id": 53483, "creation_time": "2015-04-14T18:30:59Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 53483, "is_private": false, "id": 182366, "time": "2015-04-14T18:41:28Z", "creator": "calestyo@scientia.net", "creation_time": "2015-04-14T18:41:28Z", "tags": [], "text": "Well I think one could add a one liner, describing what this is about, but apart from that I'd use the better version.\n\nThe reason is simply, that people will take these example patterns from the official documentation and extend them to their own needs.\n\nSo why teaching millions of users something worse, when they could easily use something better?"}, {"count": 12, "tags": [], "bug_id": 53483, "attachment_id": null, "text": "Yeah, it's a good point.\n\nI'm torn between \"simplest possible example that works\" and \"best practice\", when best practice requires significant additional explanation of regular expressions.\n\nI'll see if I can find a way to phrase it so that it doesn't simply confuse. Thanks for your remarks.", "id": 182368, "time": "2015-04-14T18:57:42Z", "creator": "rbowen@apache.org", "creation_time": "2015-04-14T18:57:42Z", "is_private": false}, {"count": 13, "tags": [], "creator": "rbowen@apache.org", "text": "I've patched a bunch of different places, but I haven't yet done the (?:$|/) stuff.\n\nSo, I'm going to leave this ticket open for now, because I lack time to complete it thoroughly.\n\nTo summarize:\n\nThere are some regexes in *Match directive examples where the trailing slash is left off, so that it could match unintended extra characters. In these cases, we (might) want to put either (?:$|/) - a non-capturing \"/ or end of string\" pattern - or simply a [/$] on the end of it, to ensure that it matches *only* what we intend.", "id": 182369, "time": "2015-04-14T19:11:08Z", "bug_id": 53483, "creation_time": "2015-04-14T19:11:08Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "calestyo@scientia.net", "attachment_id": null, "text": "(In reply to Rich Bowen from comment #12)\n> I'll see if I can find a way to phrase it so that it doesn't simply confuse.\n> Thanks for your remarks.\n\nMaybe one should provide at each directive only the most minimal version of a regexp example and then link to a more detailed part of the documentation.\n\nThis documentation could perhaps still work with the \"simple version\", but have a section called \"In production use\" or so,.. where it's explained that every usage of (...) is typically better with the complex form.", "id": 182373, "time": "2015-04-14T21:00:54Z", "bug_id": 53483, "creation_time": "2015-04-14T21:00:54Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 53483, "attachment_id": null, "id": 182387, "time": "2015-04-15T13:15:56Z", "creator": "rbowen@apache.org", "creation_time": "2015-04-15T13:15:56Z", "is_private": false, "text": "Yes, I think I'd like to do that."}]
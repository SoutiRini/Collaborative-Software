[{"count": 0, "tags": [], "creator": "maor@feex.com", "is_private": false, "text": "Created attachment 35437\nROOT.war and context2.war\n\n\u200bAttached are two war files that demonstrate the issue - ROOT.war and context2.war.\nThere are two contexts - ROOT, that uses a url rewrite filter (tuckey)\u200b to forward all requests to the second context - context2 (which also uses a rewrite filter).\nUsing 8.0.44 and the url http://localhost:8080/index//index.html everything works ok (note the double slash).\nUsing 8.0.45 with the same url returns 404.\nAlso getting a 404 in the latest 8.0.x release which is currently 8.0.47.", "id": 201531, "time": "2017-10-18T21:20:25Z", "bug_id": 61634, "creation_time": "2017-10-18T21:20:25Z", "attachment_id": 35437}, {"attachment_id": null, "tags": [], "bug_id": 61634, "text": "Thanks for the test case. It is much easier to figure out what is going on with a working example in front of you.\n\nThe short version is that I do not believe there is a Tomcat bug here.\n\nThe difference between 8.0.44 and 8.0.45 that causes this is indeed the fix for bug 61185. It wasn't obvious that fix and this issue were related until the use of the Tuckey rewrite filter was mentioned.\n\nThe rewrite filter uses RequestDispatchers to forward requests to the rewritten URL. The filter correctly uses HttpServletRequest.getRequestURI() to obtain the URL provided by the user to perform the rewrite.\n\nThe fix corrected an edge case behaviour in Tomcat's RequestDispatcher implementation that was not compliant with the Servlet specification. From section 9.4 of the Servlet specifcation:\n\n<quote>\nThe path elements of the request object exposed to the target servlet must reflect the path used to obtain the RequestDispatcher.\n</quote>\n\nIn this case the rewrite in the ROOT context obtains a RequestDispatcher for /context2 using the path \"/index//index.html\". Tomcat normalises (and decodes) this path to enable the request to be mapped to the correct Servlet. Prior to 8.0.45 Tomcat incorrectly then used the normalized path to construct the RequestDispatcher. This meant that the target servlet saw a path of \"/index/index.html\" for HttpServletRequest.getRequestURI() which was NOT the path used to obtain the RequestDispatcher and was therefore NOT compliant with section 9.4 of the Servlet Specification.\n\nAs of 8.0.45 Tomcat correctly uses the originally provided path \"/index//index.html\" to construct the RequestDispatcher.\n\nThe rewrite filter decodes URLs before processing but does not appear normalize them. That is surprising. In matching incoming URIs to rewrite rules, the filter is doing something very similar to what Tomcat (or any Servlet container) does to map a request to a Servlet. The process Tomcat uses for this is (in short form) normalize, decode, check normalization, map. I'd expect the filter to do something similar.\n\nI tried Googling for information on configuring the rewrite filter to normalize but all I could find was this:\nhttps://jira.atlassian.com/browse/CONFSERVER-26888\n\nI also searched the rewrite filter source at GitHub but could find no references to normalization.\n\nAt this point I recommend opening an issue with the rewrite filter. My own view is that it should always \"normalize, decode, check normalize, rewrite\" rather than just \"decode, rewrite\".\n\nFinally, it is worth mentioning the http://localhost:8080/index/foo/../index.html fails as well. Note if you make that request with a browser it is likely to normalize it for you before sending it and then it will work.", "count": 1, "id": 201539, "time": "2017-10-19T10:08:27Z", "creator": "markt@apache.org", "creation_time": "2017-10-19T10:08:27Z", "is_private": false}, {"count": 2, "tags": [], "text": "Thanks for the analysis!\nI've opened an issue with the tuckey filter: https://github.com/paultuckey/urlrewritefilter/issues/222", "attachment_id": null, "bug_id": 61634, "id": 201584, "time": "2017-10-23T06:29:13Z", "creator": "maor@feex.com", "creation_time": "2017-10-23T06:29:13Z", "is_private": false}]
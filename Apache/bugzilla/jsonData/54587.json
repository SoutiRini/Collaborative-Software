[{"count": 0, "tags": [], "bug_id": 54587, "attachment_id": null, "text": "I got a report from a user that LDAPConnectionPoolTimeout does not work. It seems removing this check for l->bound fixes his problem:\n\n--- a/modules/ldap/util_ldap.c\n+++ b/modules/ldap/util_ldap.c\n@@ -715,7 +715,7 @@ static util_ldap_connection_t *\n             && !compare_client_certs(dc->client_certs, l->client_certs))\n         {\n             if (st->connection_pool_ttl > 0) {\n-                if (l->bound && (now - l->freed) > st->connection_pool_ttl) {\n+                if ((now - l->freed) > st->connection_pool_ttl) {\n                     ap_log_rerror(APLOG_MARK, APLOG_TRACE1, 0, r,\n                                   \"Removing LDAP connection last used %\" APR_TIME_T_FMT \" seconds ago\",\n                                   (now - l->freed) / APR_USEC_PER_SEC);\n\n\n\nBriefly looking through the code, I think this resetting of l->bound may be the cause of the problem:\n\n       /*\n         * We have just bound the connection to a different user and password\n         * combination, which might be reused unintentionally next time this\n         * connection is used from the connection pool. To ensure no confusion,\n         * we mark the connection as unbound.\n         */\n        ldc->bound = 0;\n\n\nI haven't looked deeply enough to tell what would be the correct fix.", "id": 165390, "time": "2013-02-19T22:31:13Z", "creator": "sf@sfritsch.de", "creation_time": "2013-02-19T22:31:13Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 54587, "is_private": false, "count": 1, "id": 165392, "time": "2013-02-19T23:07:17Z", "creator": "covener@gmail.com", "creation_time": "2013-02-19T23:07:17Z", "text": "maybe uldap_connection_unbind() instead of the assignment would help? Any details on original symptom?"}, {"count": 2, "tags": [], "bug_id": 54587, "is_private": false, "text": "(In reply to comment #1)\n> maybe uldap_connection_unbind() instead of the assignment would help? Any\n> details on original symptom?\n\nThis does seem to help. When LDAP authn is used, we don't let the bound connection be re-used nor setaside a bound connection for each basic auth user.  Really unbinding means we lose the connection right away.\n\nNote: we do have to defer the unbind until the end of uldap_cache_checkuserid.\n\nI must have tested with authz where the conns are more easily re-used since they are not tainted with the basic auth user creds.", "id": 165393, "time": "2013-02-19T23:56:19Z", "creator": "covener@gmail.com", "creation_time": "2013-02-19T23:56:19Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 54587, "text": "e.g. http://people.apache.org/~covener/patches/trunk-ldap_unbind_vs_connttl.diff\n\nthis also removes the misleading trace and adds some other trace.\n\nAfter the unbind during authn, the underlying conn is away. We can reuse an old \"ldc\" but not an old underlying conn.", "id": 165394, "time": "2013-02-20T00:25:31Z", "creator": "covener@gmail.com", "creation_time": "2013-02-20T00:25:31Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 54587, "text": "Hi!\n\nwe set LDAPConnectionTimeout   60 in the configuration and tested your patch. With this patch, it looks like there is no connection pooling. All connections to ldap seem to be closed immediately after the ldap authentication process.\n\nldap_free_request (origid 3, msgid 3)\nldap_parse_result\nldap_msgfree\nldap_get_values\nldap_msgfree\nldap_free_connection 1 1\nldap_send_unbind\nTLS trace: SSL3 alert write:warning:close notify\nldap_free_connection: actually freed", "id": 165396, "time": "2013-02-20T08:22:14Z", "creator": "christian.knierim@gmail.com", "creation_time": "2013-02-20T08:22:14Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 54587, "attachment_id": null, "text": "(In reply to comment #4)\n> Hi!\n> \n> we set LDAPConnectionTimeout   60 in the configuration and tested your\n> patch. With this patch, it looks like there is no connection pooling. All\n> connections to ldap seem to be closed immediately after the ldap\n> authentication process.\n> \n> ldap_free_request (origid 3, msgid 3)\n> ldap_parse_result\n> ldap_msgfree\n> ldap_get_values\n> ldap_msgfree\n> ldap_free_connection 1 1\n> ldap_send_unbind\n> TLS trace: SSL3 alert write:warning:close notify\n> ldap_free_connection: actually freed\n\nThat is true for connections used for authentication, because they have been bound as the web users DN/password and should not be re-used.   Connections used for authz should not behave like this though.\n\nThe old code marked it as unbound but did not unbind it. This would cause it to do e.g.:\n\nldap_open\nldap_simple_bind\n(reused)\nldap_simple_bind\n\nI do not know if this is valid.  If it were, then I think we just need a third state instead of bound/unbound and the check for the TTL needs to be aware of it.", "id": 165403, "time": "2013-02-20T12:28:58Z", "creator": "covener@gmail.com", "creation_time": "2013-02-20T12:28:58Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 54587, "text": "spoke to someone formerly on the IBM LDAP SDK and they say that pattern is perfectly normal -- so Christian, I will prepare an alternate that monitors the connection status separate from the bound DN/pass.", "id": 165404, "time": "2013-02-20T12:46:58Z", "creator": "covener@gmail.com", "creation_time": "2013-02-20T12:46:58Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 54587, "is_private": false, "id": 165559, "creation_time": "2013-03-01T02:25:22Z", "time": "2013-03-01T02:25:22Z", "creator": "covener@gmail.com", "text": "maybe this helps?  Includes new trace.\n\nhttp://people.apache.org/~covener/patches/reuse.diff", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 54587, "is_private": false, "count": 8, "id": 165563, "time": "2013-03-01T09:47:15Z", "creator": "christian.knierim@gmail.com", "creation_time": "2013-03-01T09:47:15Z", "text": "Hi Eric,\n\nthanks for the patch. We applied it and tested it on our Linux and Solaris enviroment. It looks really great!\n\nMy colleague is now arraning a load and performance test. - I'll give you a feedback afterwards.\n\nRegards,\nChristian"}, {"count": 9, "tags": [], "bug_id": 54587, "text": "With the patch applied, the behaviour of timeout looks really good. It is working as expected. Thanks!", "id": 165626, "time": "2013-03-04T09:52:46Z", "creator": "christian.knierim@gmail.com", "creation_time": "2013-03-04T09:52:46Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "covener@gmail.com", "is_private": false, "id": 165627, "attachment_id": null, "bug_id": 54587, "creation_time": "2013-03-04T12:30:02Z", "time": "2013-03-04T12:30:02Z", "text": "(In reply to comment #9)\n> With the patch applied, the behaviour of timeout looks really good. It is\n> working as expected. Thanks!\n\nthanks for reporting & verifying"}, {"count": 11, "tags": [], "creator": "covener@gmail.com", "is_private": false, "id": 165634, "attachment_id": null, "bug_id": 54587, "creation_time": "2013-03-04T21:55:06Z", "time": "2013-03-04T21:55:06Z", "text": "r1452551 in trunk"}, {"count": 12, "text": "Hi Eric,\n\nmy colleague and me did some further testing. - We observed, that we still get admistrative limit exceeded in certain circumstances. - Not that often as before, but rarely it occurs. \n\nWe analyized and found out, that the LDAPConnectionPoolTTL seems to resetted even if the ldap server is not connected and the information is taken from the local caching file.\n\nI think, our big issue is solved, but if you have any suggestions how to solve this issue, we would be happy to hear about it.\n\nThanks and regards,\nChristian", "creator": "christian.knierim@gmail.com", "is_private": false, "id": 165655, "time": "2013-03-05T14:44:23Z", "bug_id": 54587, "creation_time": "2013-03-05T14:44:23Z", "tags": [], "attachment_id": null}, {"count": 13, "text": "(In reply to comment #12)\n> Hi Eric,\n> \n> my colleague and me did some further testing. - We observed, that we still\n> get admistrative limit exceeded in certain circumstances. - Not that often\n> as before, but rarely it occurs. \n> \n> We analyized and found out, that the LDAPConnectionPoolTTL seems to resetted\n> even if the ldap server is not connected and the information is taken from\n> the local caching file.\n> \n> I think, our big issue is solved, but if you have any suggestions how to\n> solve this issue, we would be happy to hear about it.\n> \n> Thanks and regards,\n> Christian\n\nThanks for the detail here, that makes sense -- should not be tough with that hint", "creator": "covener@gmail.com", "is_private": false, "id": 165656, "time": "2013-03-05T15:47:05Z", "bug_id": 54587, "creation_time": "2013-03-05T15:47:05Z", "tags": [], "attachment_id": null}, {"count": 14, "text": "Actually it's a bit tricky :(", "creator": "covener@gmail.com", "is_private": false, "id": 165657, "time": "2013-03-05T15:49:52Z", "bug_id": 54587, "creation_time": "2013-03-05T15:49:52Z", "tags": [], "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 54587, "is_private": false, "text": "\n> > We analyized and found out, that the LDAPConnectionPoolTTL seems to resetted\n> > even if the ldap server is not connected and the information is taken from\n> > the local caching file.\n> > \n\nIs this just a nuisance that causes a reconnect?", "id": 165658, "time": "2013-03-05T15:57:10Z", "creator": "covener@gmail.com", "creation_time": "2013-03-05T15:57:10Z", "attachment_id": null}, {"count": 16, "text": "The bug still might cause some errors. The occurrence is more seldom.\n\nLet me explain with an example from one of our tests yesterday:\n\nConnection to LDAP is established\n[Mon Mar 04 14:46:33.147055 2013] [authnz_ldap:debug] [pid 10701] mod_authnz_ldap.c(593): [client 10.54.1.199:59811] AH01697: auth_ldap authenticate: accepting m051021\n\nClient-Connect uses LDAP-authenticate, but this time user (m052246) is already in cache\n[Mon Mar 04 15:06:17.950988 2013] [authnz_ldap:debug] [pid 10701] mod_authnz_ldap.c(593): [client 10.54.1.199:59884] AH01697: auth_ldap authenticate: accepting m052246\n\nNow the new patch \u201creuse.diff\u201d will take place, with \u201cRemoving connection\u201d. Please note that the \u201c2000 seconds ago\u201d is calculated from 15:06 to 15:39.\nBut at 15:06, the LDAP server was not really asked. So the connection was in fact idle from 14:46 to 15:39. The server will close after one hour. Good luck this time.\n[Mon Mar 04 15:39:38.356157 2013] [ldap:trace1] [pid 10701] util_ldap.c(732): [client 10.58.230.5:45009] Removing LDAP connection last used 2000 seconds ago\n[Mon Mar 04 15:39:38.356591 2013] [authnz_ldap:debug] [pid 10701] mod_authnz_ldap.c(501): [client 10.58.230.5:45009] AH01691: auth_ldap authenticate: using URL ldaps://ldapqsu.xxx.xxx.de:636/ou=people,dc=hvb,dc=de?uid?one?(objectclass=hvb-userextension)\n[Mon Mar 04 15:39:38.356637 2013] [authnz_ldap:trace1] [pid 10701] mod_authnz_ldap.c(522): [client 10.58.230.5:45009] auth_ldap authenticate: final authn filter is (&(objectclass=hvb-userextension)(uid=m052237))\n[Mon Mar 04 15:39:38.356659 2013] [authnz_ldap:debug] [pid 10701] mod_authnz_ldap.c(593): [client 10.58.230.5:45009] AH01697: auth_ldap authenticate: accepting m052237", "bug_id": 54587, "is_private": false, "id": 165659, "time": "2013-03-05T16:14:21Z", "creator": "christian.knierim@gmail.com", "creation_time": "2013-03-05T16:14:21Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "lachmannrobert@web.de", "text": "Is the provided information from our logfiles enough? \nOr should we provide more details?", "count": 17, "id": 166075, "time": "2013-03-21T11:22:41Z", "bug_id": 54587, "creation_time": "2013-03-21T11:22:41Z", "is_private": false}, {"count": 18, "tags": [], "creator": "covener@gmail.com", "text": "(In reply to comment #17)\n> Is the provided information from our logfiles enough? \n> Or should we provide more details?\n\nIt's enough, to suit your needs we'd need to track the time we last did a successful call on an LDAP handle, this is more work.  Since the current field is part of the API, we need a new field, but maybe LDAPConnectionTTL could just apply to the new tracking w/o making more options.", "id": 166077, "time": "2013-03-21T11:50:02Z", "bug_id": 54587, "creation_time": "2013-03-21T11:50:02Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 54587, "is_private": false, "id": 176217, "creation_time": "2014-07-04T23:47:06Z", "time": "2014-07-04T23:47:06Z", "creator": "covener@gmail.com", "text": "This came up in another context and I've found an easy way to improve this that doesn't run up a bunch of apr_time_now's.    We should use the request arrival time as a conservative baseline, which we can afford to do right after each successful I/O.", "attachment_id": null}, {"count": 20, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 184971, "time": "2015-09-04T19:53:49Z", "bug_id": 54587, "creation_time": "2015-09-04T19:53:49Z", "text": "This was further improved in 2.4.10, if there's still a problem we'll need to see it from scratch."}]
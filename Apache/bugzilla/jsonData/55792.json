[{"count": 0, "tags": [], "bug_id": 55792, "is_private": false, "text": "I have the following EL expression in a JSP. The expression evaluates and executes correctly without error:\n\n    ${users.stream()\n        .filter(u -> fn:contains(u.username, '1'))\n        .sorted((u1, u2) -> (x = u1.lastName.compareTo(u2.lastName);\n            x == 0 ? u1.firstName.compareTo(u2.firstName) : x))\n        .toList()}\n\nI want to apply the map operation to this as well. Section 2.3.6.4 of the JUEL 3.0 specification uses the following example, where a list-literal is used as the right-hand side of the mapping lambda expression:\n\n    products.stream().filter(p->p.unitPrice >= 10)\n        .map(p->[p.name, p.unitPrice])\n        .toList()\n\nSo I tried applying the exact same pattern to my map operation (the new map operation is the only change to the expression):\n\n    ${users.stream()\n        .filter(u -> fn:contains(u.username, '1'))\n        .sorted((u1, u2) -> (x = u1.lastName.compareTo(u2.lastName);\n            x == 0 ? u1.firstName.compareTo(u2.firstName) : x))\n        .map(u -> [u.username, u.firstName, u.lastName])\n        .toList()}\n\nI also tried using a map-literal:\n\n    ${users.stream()\n        .filter(u -> fn:contains(u.username, '1'))\n        .sorted((u1, u2) -> (x = u1.lastName.compareTo(u2.lastName);\n            x == 0 ? u1.firstName.compareTo(u2.firstName) : x))\n        .map(u -> {'username':u.username, 'first':u.firstName,\n            'last':u.lastName})\n        .toList()}\n\nHowever, using the list-literal in my map lambda expression results in this error, indicating that it doesn't recognize the list-literal as a list-literal:\n\njavax.el.ELException: java.lang.NumberFormatException: For input string: \"lastName\"\n      javax.el.BeanELResolver.invoke(BeanELResolver.java:185)\n      org.apache.jasper.el.JasperELResolver.invoke(JasperELResolver.java:147)\n      org.apache.el.parser.AstValue.getValue(AstValue.java:158)\n      ...\n\nAnd using the map-literal results in this error, indicating that it doesn't recognize the map-literal as a map-literal (instead, it thinks the closing brace of the map-literal is the end of the EL expression:\n\njavax.el.ELException: Failed to parse the expression [${users.stream()\n        .filter(u -> fn:contains(u.username, '1'))\n        .sorted((u1, u2) -> (x = u1.lastName.compareTo(u2.lastName);\n            x == 0 ? u1.firstName.compareTo(u2.firstName) : x))\n        .map(u -> {'username':u.username, 'first':u.firstName,\n            'last':u.lastName}]\n   ...\n<root cause>\norg.apache.el.parser.ParseException: Encountered \"<EOF>\" at line 6, column 38. Was expecting one of:\n   \".\" ...\n   \")\" ...\n   etc...\n\nPutting parentheses around the list- and map-literals does not work, but the Section 2.3.6.4 example doesn't use parentheses. Section 1.20 also indicates that collection literals as bodies of lambda expressions are legal:\n\n    customers.select(c->[c.name, c.orders.sum(o->o.total)])\n\nCollection literals are described in more detail in Section 2.2.", "id": 171285, "time": "2013-11-18T13:42:42Z", "creator": "nicholas@nicholaswilliams.net", "creation_time": "2013-11-18T13:42:42Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 55792, "text": "Please note the following revision to this bug:\n\nIt's only the map-literal that isn't working. The list-literal is working fine. When I used the list-literal originally, I mapped before sorting, like so:\n\n    ${users.stream()\n        .filter(u -> fn:contains(u.username, '1'))\n        .map(u -> [u.username, u.firstName, u.lastName])\n        .sorted((u1, u2) -> (x = u1.lastName.compareTo(u2.lastName);\n            x == 0 ? u1.firstName.compareTo(u2.firstName) : x))\n        .toList()}\n\nThis caused the NumberFormatException, which makes sense. When mapping happens after sorting:\n\n    ${users.stream()\n        .filter(u -> fn:contains(u.username, '1'))\n        .sorted((u1, u2) -> (x = u1.lastName.compareTo(u2.lastName);\n            x == 0 ? u1.firstName.compareTo(u2.firstName) : x))\n        .map(u -> [u.username, u.firstName, u.lastName])\n        .toList()}\n\nThe expression works correctly. So the ONLY expression that isn't working uses the map-literal for the mapping:\n\n    ${users.stream()\n        .filter(u -> fn:contains(u.username, '1'))\n        .sorted((u1, u2) -> (x = u1.lastName.compareTo(u2.lastName);\n            x == 0 ? u1.firstName.compareTo(u2.firstName) : x))\n        .map(u -> {'username':u.username, 'first':u.firstName,\n            'last':u.lastName})\n        .toList()}\n\nThis is definitely broken, as the } ending the map-literal makes the EL engine think the expression has ended prematurely.", "id": 171290, "time": "2013-11-18T18:37:26Z", "creator": "nicholas@nicholaswilliams.net", "creation_time": "2013-11-18T18:37:26Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 55792, "attachment_id": null, "text": "(For reference - discussion on users@ before filing this issue\nhttp://tomcat.markmail.org/thread/mohw6qhaauez27h5\n\nThe only issue here is that '}' in declaration of a map is interpreted as closing brace of EL expression.  I am changing TITLE accordingly.\n\n\nSearching through Tomcat 8 sources, we have a similar test:\n/test/webapp/el-misc.jsp\n\nThe code there is\n<tags:echo echo='19-${{1,2,3,4}.stream().max().orElse(-1)}' />\n\nThe above works when EL is used in an attribute of a tag.\nBut when I move the EL expression into the body of the document, it starts to fail. The following simple JSP fails\n[[[\n<%@page contentType=\"text/plain; charset=UTF-8\"%>\n${{1,2,3,4}.stream().max().orElse(-1)}\n]]]\n\njavax.el.ELException: Failed to parse the expression [${{1,2,3,4}]\n\t\n\nFor completeness, '}' in string literals is parsed correctly.\nThe following JSP does work\n[[[\n<%@page contentType=\"text/plain; charset=UTF-8\"%>\n${'}A'}B\n${\"}C\"}D\n]]]\n\nIt prints\n}AB\n}CD", "id": 171297, "time": "2013-11-18T22:18:20Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2013-11-18T22:18:20Z", "is_private": false}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 31053, "text": "Created attachment 31053\ntest_55792.jsp - Sample JSP page", "id": 171298, "time": "2013-11-18T22:22:07Z", "bug_id": 55792, "creation_time": "2013-11-18T22:22:07Z", "is_private": false}, {"count": 4, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "text": "Created attachment 31054\n2013-11-19_55792_tc8_tests.patch\n\nAmendment to the tests. This is currently failing.\n\nNotes:\n1. This issue affects not only maps, but sets as well. In my reproducer \"{1,2,3,4}\" is a set, not a map.\n\n2. I am using sorted() so that the result of evaluation were not affected by the order of items in a HashSet.", "id": 171301, "time": "2013-11-18T22:45:49Z", "bug_id": 55792, "creation_time": "2013-11-18T22:45:49Z", "attachment_id": 31054}, {"count": 5, "tags": [], "bug_id": 55792, "attachment_id": null, "text": "Nick, thanks for the report.\n\nKonstantin, thanks for the test case.\n\nThsi has been fixed in trunk and will be in 8.0.0-RC6 onwards.", "id": 171309, "time": "2013-11-19T09:42:35Z", "creator": "markt@apache.org", "creation_time": "2013-11-19T09:42:35Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 55792, "attachment_id": null, "text": "I can confirm that this is fixed. Thanks!", "id": 171378, "time": "2013-11-21T15:21:54Z", "creator": "nicholas@nicholaswilliams.net", "creation_time": "2013-11-21T15:21:54Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Currently, mod_proxy_ajp attempts to buffer the entire response data in \nmemory.  Of course this causes problems with very large responses, where httpd \nmay run out of memory and SEGV.", "is_private": false, "bug_id": 37100, "id": 81180, "time": "2005-10-16T01:59:07Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-10-16T01:59:07Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 37100, "text": "Created attachment 16703\nExample Servlet to reproduce the problem", "id": 81181, "time": "2005-10-16T02:00:48Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-10-16T02:00:48Z", "is_private": false, "attachment_id": 16703}, {"count": 2, "attachment_id": 16704, "creator": "william.barker@wilshire.com", "text": "Created attachment 16704\nSuggested Patch to fix this problem\n\nThis patch is probably sub-optimal, since I'm not that familiar with httpd and\napr-util internals.  Feel free to hack it into peices.\tHowever, the basic idea\nof periodically flushing the buffer seems right.  Since AJP/1.3 packets are\nrelatively small, creating a custom Bucket (like mod_cgi) doesn't seem best,\nbut it could be done.", "id": 81182, "time": "2005-10-16T02:06:39Z", "bug_id": 37100, "creation_time": "2005-10-16T02:06:39Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 37100, "text": "Created attachment 16709\nWhile I'm at it, cleanup some more stuff\n\nWhile I'm looking at it, fix up some of the s*cky error handling here.\tWith\nany luck, this should fix Bug #36495 as well.", "id": 81223, "time": "2005-10-17T01:16:29Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-10-17T01:16:29Z", "is_private": false, "attachment_id": 16709}, {"count": 4, "attachment_id": 16722, "creator": "rpluem@apache.org", "text": "Created attachment 16722\nPatch against trunk\n\nThanks for the report, the patches and especially the testcase. The problem\nturned out to be more complicated, so your patch does not resolve it\ncompletely. Because the initial idea had been to capture all data sent by\nTomcat in the output_brigade first and sent it up the filter stack in one blow\nafterwards, for every new AJP message that arrives a new ajp_msg_t structure\n(including an 8k buffer) will be created on the heap. Thus the apache process\ncontinues to consume memory even if we call ap_pass_brigade and\napr_brigade_cleanup in the meantime as this data will only be freed at the end\nof the client connection. I adjusted the code such that the ajp_msg_t structure\nwill be reused to fix this. Furthermore I pass the brigade to the filter stack\nafter *each* CMD_AJP13_SEND_BODY_CHUNK without any buffering. Even more I add a\nflush bucket to the brigade each time to ensure that the data gets written to\nthe network. Reasons:\nBuffering should be done inside Tomcat and usually it is done within. There may\nbe situations where the developer of a jsp / servlet intentionally flushes the\noutputstream (e.g. tunneling another protocol over http, doing streaming). As I\nhave no information about this in the AJP message I assume that every AJP\nmessage should be written immediately to the client. Of course this degrades\nperformance. There is also a bad sideeffect on standard jsps. As the default\nbuffer for jsps is 8k, but AJP13_MAX_SEND_BODY_SZ is 8 bytes smaller, a buffer\nflushing of a jsp typically arrives in two AJP messages with data sizes of 8184\nand 8 byte. So the 8 bytes of the second message get sent separately over the\nwire. Thoughts should be done later how to optimize this.\n\nPlease check and test the attached patch. You may face difficulties applying\nthe patch as I did some style cleanup operations on mod_proxy_ajp.c before. So\nit may be wise if you apply the following patch before this one:\nhttp://svn.apache.org/viewcvs.cgi/httpd/httpd/trunk/modules/proxy/mod_proxy_ajp.c?rev=325879&r1=232247&r2=325879", "id": 81257, "time": "2005-10-17T17:26:58Z", "bug_id": 37100, "creation_time": "2005-10-17T17:26:58Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 37100, "attachment_id": null, "text": "Passing the brigade for each block is fine; sending an explicit FLUSH bucket\nafter each block is not generally a good idea; letting the core output filter\nflush as necessary is better.\n\nChecking for conn->aborted somewhere in this loop is a good idea also; that will\nbe set when the client aborts the connection.  (otherwise the proxy will\ncontinue passing brigades pointlessly)", "id": 81260, "time": "2005-10-17T17:59:33Z", "creator": "jorton@redhat.com", "creation_time": "2005-10-17T17:59:33Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 37100, "attachment_id": null, "text": "(In reply to comment #5)\n> Passing the brigade for each block is fine; sending an explicit FLUSH bucket\n> after each block is not generally a good idea; letting the core output filter\n> flush as necessary is better.\n\nYes, I know that this is not optimal. The idea of adding the flush bucket is\nborn from the following reason:\n\nIf someone on Tomcat flushes the outputstream of the application intentionally,\nhe wants to sent the data to the client immediately (for whatever reason). If I\ndo not sent a flush bucket then it can happen that this flushing on Tomcat side\ndoes not work as expected as httpd queues up the data that should be sent to the\nclient immediately. The current AJP protocol has no field to indicate the\nflushing (maybe an idea for AJP/1.4). But that flushing thing here is a critical\ntradeoff. So maybe we should keep it configurable. What about adding a field\nnamed flush to the proxy_worker struct and add the flush bucket only if it is\nset? I am also fine with setting flush to false as default value, as this may be\nthe more useful default setting.\n\n> \n> Checking for conn->aborted somewhere in this loop is a good idea also; that will\n> be set when the client aborts the connection.  (otherwise the proxy will\n> continue passing brigades pointlessly)\n\nSorry for being confused. Do you mean my check for conn->aborted is a good thing\nor that it should be done?\n\n", "id": 81270, "time": "2005-10-17T20:45:06Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-17T20:45:06Z", "is_private": false}, {"count": 7, "tags": [], "text": "Another idea to solve the flushing issue would be to implement a logic similar\nto mod_proxy_http: Read the AJP socket in non blocking mode. On EAGAIN sent a\nflushing bucket up the filter chain and switch to blocking read. After the next\nread switch back to non blocking. But this requires several changes to the ajp\ncode. If this is regarded a good solution I will have a look into this once I\nhave time for this.", "is_private": false, "bug_id": 37100, "id": 81281, "time": "2005-10-17T23:19:02Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-17T23:19:02Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Created attachment 16756\nPatch against trunk doing poll before flushing\n\nAttached is an improved patch. It does a poll on the backend socket with 10ms\ntimeout to find out if more data is present or not. If no more data is present\nit adds a flush bucket to the brigade before passing it up the filter chain.\nThis should reduce unnecessary flushes to the client a lot. On the other side\nintentional flushes on Tomcat side should have a fair chance of getting noticed\nand flushed to the client with only minor delay. Please test. Feedback is much\nappreciated.", "attachment_id": 16756, "bug_id": 37100, "id": 81397, "time": "2005-10-19T17:40:54Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-19T17:40:54Z", "is_private": false}, {"count": 9, "tags": [], "creator": "chip@force-elite.com", "attachment_id": null, "is_private": false, "id": 81407, "time": "2005-10-19T19:13:32Z", "bug_id": 37100, "creation_time": "2005-10-19T19:13:32Z", "text": "I disagree with sending a flush just because a poll() timeout of 10ms is hit.  I\nbelieve this would be too easy to hit with generating streaming content.\n\nThe real solution is that AJP should have a FLUSH packet/command, IMO."}, {"text": "(In reply to comment #9)\n> \n> The real solution is that AJP should have a FLUSH packet/command, IMO.\n\nPaul - you are facing a existing specification, ajp13, where we do not have that\nflexibility.  It sounds like an excellent suggestion for the ajp15 spec which\nwas far from final, IIRC.  Toss that proposal at the tomcat dev list ;-)  \n", "tags": [], "bug_id": 37100, "is_private": false, "count": 10, "id": 81410, "time": "2005-10-19T20:04:08Z", "creator": "wrowe@apache.org", "creation_time": "2005-10-19T20:04:08Z", "attachment_id": null}, {"text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > \n> > The real solution is that AJP should have a FLUSH packet/command, IMO.\n> \n> Paul - you are facing a existing specification, ajp13, where we do not have that\n\nThat was also my complaint in comment #6. But we cannot adjust AJP/1.3, so we\nmust find a bandaid that fixes that protocol shortcoming. I think the question\nis more if the bandaid I found is good or bad.\n\n> flexibility.  It sounds like an excellent suggestion for the ajp15 spec which\n\nMaybe AJP/1.4. Does someone know where to find an AJP/1.4 specfication?\n\n", "tags": [], "bug_id": 37100, "is_private": false, "count": 11, "id": 81413, "time": "2005-10-19T22:05:32Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-19T22:05:32Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 37100, "text": "My understanding was that AJP/1.4 was created, then universally dismissed\nin favor of a 'better solution' in the next bump.\n\nSuch questions are best posed to the dev@tomcat list.", "id": 81415, "time": "2005-10-19T22:22:14Z", "creator": "wrowe@apache.org", "creation_time": "2005-10-19T22:22:14Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "text": "\n(In reply to comment #4)\n> Created an attachment (id=16722) [edit]\n> Patch against trunk\n\nI tried this one, and it's buggy.  You need to have a line like:\n   conn->data = NULL;\nsomewhere around the brigade cleanups, or after a couple of requests you'll \nSEGV because conn->data->buffer isn't valid anymore.\n\nI haven't tried the poll-timeout, but would tend to agree with Paul on it's \nusefulness.  Currently mod_jk doesn't flush on output (of course, it thinks \nit's still httpd-1.3 and calls ap_rwrite, so maybe not the best example :).\n\nThe closest thing to the AJP/1.4 proposal would be:\n  http://tomcat.apache.org/connectors-doc/common/ajpv13ext.html\nOf course, no Tomcat version currently supports it.  It wouldn't be that hard \nto add a CMD_AJP13_FLUSH to Tomcat (with a Tomcat configuration option to turn \nit off so it doesn't freak-out mod_jk :).  But as Will says, that discussion \nbelongs on dev@tomcat.\n", "attachment_id": null, "bug_id": 37100, "id": 81416, "time": "2005-10-19T22:59:23Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-10-19T22:59:23Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 37100, "attachment_id": null, "text": "(In reply to comment #13)\n> (In reply to comment #4)\n> > Created an attachment (id=16722) [edit] [edit]\n> > Patch against trunk\n> \n> I tried this one, and it's buggy.  You need to have a line like:\n>    conn->data = NULL;\n> somewhere around the brigade cleanups, or after a couple of requests you'll \n> SEGV because conn->data->buffer isn't valid anymore.\n\nSorry, but you are confusing me. I guess you mean ((ajp_msg_t *)conn->data)->buf\ninstead of conn->data->buffer. ((ajp_msg_t *)conn->data)->buf gets allocated out\nof the request pool. This pool and thus the buffer remain valid for the livetime\nof the request. In line 212 conn->data is set to NULL. As we only use\n((ajp_msg_t *)conn->data)->buf during the lifetime of the request it does not\nget invalid. If we would set conn->data to NULL after the brigade cleanup in\nline 326 we would reintroduce the memory leak as we would allocate more memory\nout of the request pool which gets only cleared after the request has been\nfinished. So if you still see core dumps could you please provide a gdb\nbacktrace for further investigation?\n\n> \n> I haven't tried the poll-timeout, but would tend to agree with Paul on it's \n> usefulness.  Currently mod_jk doesn't flush on output (of course, it thinks \n> it's still httpd-1.3 and calls ap_rwrite, so maybe not the best example :).\n\nI admit it is a bandaid until we have an improved protocol. The questions are\n\n- Can we live with this bandaid\n- When do we get the protocol update\n\n> \n> The closest thing to the AJP/1.4 proposal would be:\n>   http://tomcat.apache.org/connectors-doc/common/ajpv13ext.html\n\nThanks for the link.\n\n> Of course, no Tomcat version currently supports it.  It wouldn't be that hard \n> to add a CMD_AJP13_FLUSH to Tomcat (with a Tomcat configuration option to turn \n> it off so it doesn't freak-out mod_jk :).  But as Will says, that discussion \n> belongs on dev@tomcat.\n> \n\nYes, this belongs to dev@tomcat. Are you willing to introduce this discussion to \ndev@tomcat? That would be very nice. On the other hand from my personal point of\nview I do not think that it is a good idea to extend the Tomcat connectors in\nthis way without having this in a spec of an AJP protocol whatever version it\nhas. This would subvert the AJP spec.", "id": 81422, "time": "2005-10-19T23:34:55Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-19T23:34:55Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 37100, "attachment_id": null, "text": "\n> Sorry, but you are confusing me. I guess you mean ((ajp_msg_t *)conn->data)-\n>buf\n> instead of conn->data->buffer. ((ajp_msg_t *)conn->data)->buf gets allocated \nout\n> of the request pool. This pool and thus the buffer remain valid for the \nlivetime\n> of the request. In line 212 conn->data is set to NULL. As we only use\n\nMy bad.  I didn't read the warning about the style-cleanup until too late, \ntried to fix the patch by hand, and didn't do a good job :(.  Getting a nice, \npretty, new copy of httpd and applying the patch works very well.\n\n> I admit it is a bandaid until we have an improved protocol. The questions are\n> - Can we live with this bandaid\n> - When do we get the protocol update\n\nWell, Mladen wants to get started on mod_jk-1.3, so it seems like a good time.\n> > It wouldn't be that hard \n> > to add a CMD_AJP13_FLUSH to Tomcat (with a Tomcat configuration option to \nturn \n> > it off so it doesn't freak-out mod_jk :).  But as Will says, that \ndiscussion \n> > belongs on dev@tomcat.\n> > \n> Yes, this belongs to dev@tomcat. Are you willing to introduce this \ndiscussion to \n> dev@tomcat? That would be very nice. On the other hand from my personal \npoint of\n> view I do not think that it is a good idea to extend the Tomcat connectors in\n> this way without having this in a spec of an AJP protocol whatever version it\n> has. This would subvert the AJP spec.\n\nAdding dev@tomcat to the CC list to start a discussion :).", "id": 81484, "time": "2005-10-20T22:21:52Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-10-20T22:21:52Z", "is_private": false}, {"count": 16, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 81487, "time": "2005-10-20T23:12:25Z", "bug_id": 37100, "creation_time": "2005-10-20T23:12:25Z", "is_private": false, "text": "(In reply to comment #15)\n\n[..cut..]\n\n> My bad.  I didn't read the warning about the style-cleanup until too late, \n> tried to fix the patch by hand, and didn't do a good job :(.  Getting a nice, \n> pretty, new copy of httpd and applying the patch works very well.\n\nOk. Sounds good.\n\n> \n> > I admit it is a bandaid until we have an improved protocol. The questions are\n> > - Can we live with this bandaid\n> > - When do we get the protocol update\n> \n> Well, Mladen wants to get started on mod_jk-1.3, so it seems like a good time.\n\nThis is good to hear and makes hope that the protocol shortcoming will be\nresolved in the near future. I will attach an improved patch in a couple of\nminutes. It does not contain functional changes, but\n\n- All code used for the bandaid is now conditional code\n- I made a comment about the whole bandaid, why we are doing it and that it\n  should be removed once the protocol shortcoming is fixed.\n- I referenced this report in the comment\n\nSo if you would give the patch a final test, this would be great.\nIf I hear no problems from you about the patch and no objections from others\nI will commit it tomorrow afternoon to the trunk.\n\n[..cut..]\n \n> Adding dev@tomcat to the CC list to start a discussion :).\n\nThanks for doing that.\n"}, {"count": 17, "tags": [], "bug_id": 37100, "text": "Created attachment 16768\nPatch against trunk with poll bandaid as conditional code", "id": 81488, "time": "2005-10-20T23:14:05Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-20T23:14:05Z", "is_private": false, "attachment_id": 16768}, {"count": 18, "attachment_id": null, "creator": "rpluem@apache.org", "text": "Committed patch to trunk (r327185):\nhttp://svn.apache.org/viewcvs.cgi?rev=327185&view=rev", "id": 81519, "time": "2005-10-21T15:59:05Z", "bug_id": 37100, "creation_time": "2005-10-21T15:59:05Z", "tags": [], "is_private": false}, {"count": 19, "tags": [], "bug_id": 37100, "attachment_id": null, "text": "(In reply to comment #13)\n\n[..cut..] \n\n> usefulness.  Currently mod_jk doesn't flush on output (of course, it thinks \n> it's still httpd-1.3 and calls ap_rwrite, so maybe not the best example :).\n \n[..cut..]\n\nAt least for mod_jk 1.2.15 (I don't know when this changes was introduced) this\nis not completely true. You can force mod_jk to flush to the client after every\nAJP13_SEND_BODY_CHUNK received via\n\nJkOptions     +FlushPackets\n \nSo mod_jk lets you have a choice here.\n", "id": 82436, "time": "2005-11-13T23:29:24Z", "creator": "rpluem@apache.org", "creation_time": "2005-11-13T23:29:24Z", "is_private": false}]
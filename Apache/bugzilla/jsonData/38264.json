[{"count": 0, "tags": [], "bug_id": 38264, "is_private": false, "text": "When combining the attributes linefeed-treatment=\"preserve\" and \nhyphenate=\"true\", I get some really strange result.\n\nIn fact, it seems that both attribute are applied to the text in turn, which \nDUPLICATES the text in the output. And both outputs are wrong...\n\n\nI attach an example FO and the resulting PDF.", "id": 84612, "time": "2006-01-13T19:30:57Z", "creator": "franck.schmidlin@anite.com", "creation_time": "2006-01-13T19:30:57Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "franck.schmidlin@anite.com", "text": "Created attachment 17419\nan FO file that demonstrates the problem.", "id": 84613, "time": "2006-01-13T19:32:58Z", "bug_id": 38264, "creation_time": "2006-01-13T19:32:58Z", "is_private": false, "attachment_id": 17419}, {"count": 2, "tags": [], "text": "Created attachment 17420\nthe PDF output of the hyphen2.fo", "attachment_id": 17420, "id": 84614, "creator": "franck.schmidlin@anite.com", "time": "2006-01-13T19:34:58Z", "bug_id": 38264, "creation_time": "2006-01-13T19:34:58Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "spepping@apache.org", "text": "This problem is also present in subversion HEAD, rev. 367760", "id": 84620, "time": "2006-01-13T21:21:31Z", "bug_id": 38264, "creation_time": "2006-01-13T21:21:31Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 38264, "text": "Also interesting to note: if one encloses the content of the second block in testcase \n'block_hyphenation_linefeed-preserve.xml' with an fo:inline, then \nLineLayoutManager.findHyphenationPoints() throws a NullPointerException (line 1486), due to an \nUpdate being added earlier which has null for an inlineLM...\n\nLooking closer, I'm wondering whether the strange effect of duplication may have something to with:\na) a block containing preserved linefeeds generates a Paragraph of Paragraphs\nb) findOptimalBreakingPoints() is called in a loop that iterates /backwards/ over the sub-paragraphs, \nwhile \nc) findHyphenationPoints() iterates /forwards/ over each sub-paragraph individually\n\nThis opens up the possibility that findHyphenationPoints() adds Updates to the updateList with indices \nthat refer to the last sub-paragraph, and those indices are later, in the outer loop, interpreted as \npositions in the first sub-paragraph --or worse, in the super-paragraph?", "id": 99557, "time": "2007-02-19T08:09:59Z", "creator": "adelmelle@apache.org", "creation_time": "2007-02-19T08:09:59Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "vhennebert@gmail.com", "is_private": false, "id": 111773, "time": "2007-12-13T08:41:16Z", "bug_id": 38264, "creation_time": "2007-12-13T08:41:16Z", "tags": [], "text": "Another problem related to hyphenation and preserved white-space: when\nwhite-space-treatment is set to \"preserve\", words are hyphenated correctly but\nthe hyphen does not show up."}, {"count": 6, "tags": [], "bug_id": 38264, "text": "Created attachment 21274\nHyphens do not show up when white-space-treatment=\"preserve\"", "id": 111775, "time": "2007-12-13T08:43:29Z", "creator": "vhennebert@gmail.com", "creation_time": "2007-12-13T08:43:29Z", "is_private": false, "attachment_id": 21274}, {"count": 7, "tags": [], "text": "*** Bug 44124 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 112158, "creator": "adelmelle@apache.org", "time": "2007-12-24T01:30:33Z", "bug_id": 38264, "creation_time": "2007-12-24T01:30:33Z", "is_private": false}, {"count": 8, "tags": [], "text": "In the meantime, managed to track down the source of the problem with linefeed-treatment=\"preserve\".\nNothing inherently wrong with the hyphenation loop itself. After the hyphenation-points have been determined, and the updates are processed is where it goes wrong.\n\nSee LineLayoutManager.findHyphenationPoints(), second main loop. For each Paragraph, the corresponding TextLayoutManager.applyChanges() and .getChangedKnuthElements() are used.\nChecking the implementations for those latter two methods reveals that they do not take into account that they can be called multiple times for the same instance. The former always sets the 'returnedIndex' member to 0, which leads to the duplication if the latter is called twice. Each subparagraph in the main paragraph is replaced by a copy of the main paragraph...\n\nNow still looking for a solution :/", "is_private": false, "id": 116221, "creator": "adelmelle@apache.org", "time": "2008-05-04T10:54:00Z", "bug_id": 38264, "creation_time": "2008-05-04T10:54:00Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 38264, "text": "\nTrying to gain more understanding of this issue, and as I see it, the full story wrt linefeed-treatment='preserve' and hyphenate='true' is:\n\n1) for blocks of text containing preserved linefeeds, the TextLayoutManager actually generates multiple Paragraphs (see TextLM.getNextKnuthElements() -> in case of an explicit break, the 'current' sequence is ended, and a new one is added to the returnList)\n2) the optimal line-breaks are determined by the LineLayoutManager per Paragraph ( see LineLM.createLineBreaks() )\n3) the hyphenation-points are determined for each Paragraph in the same loop ( see LineLM.findOptimalBreakingPoints() )\n4) BUT: the integration of hyphenation-points (applyChanges() and getChangedKnuthElements()) operate on the TextLayoutManager instance as a whole.\n\n=> the entire content generated by the TextLM in question is copied as many times as there are paragraphs/preserved linefeeds in the source\n\nMainly TextLM.getChangedKnuthElements() is a bit problematic in this regard: every time this is called, it generates an element-list based on the complete set of AreaInfos for the LM. In LineLM.findHyphenationPoints(), each of the original paragraphs is replaced by that list.\n\nI already tried to change that method to take into account the position-indices of the first and last element in the parameter oldList. This already gets me somewhat further, but still far from committable...", "id": 116240, "time": "2008-05-05T07:27:25Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-05T07:27:25Z", "is_private": false, "attachment_id": null}, {"count": 10, "attachment_id": null, "creator": "adelmelle@apache.org", "text": "Status update:\n\nThe main difficulty seems to be that the principal iteration in LineLM.createLineBreaks() iterates in reverse order. As a result, applyChanges() is called first for the last Paragraph if the TextLM generates multiple paragraphs.\nNow, while we can keep track of the changed position indices and limit both applyChanges() and getChangedKnuthElements() to operate only on the portion corresponding to oldList, by the time the next-to-last paragraph is processed, the changed positions for the last one should again be modified to take into account added/removed areas for the changes to the preceding one.\n\nI made such changes locally, and this does avoid the duplication, however, keeping track of the bounding indices is turning out to be quite a pain. As soon as the first paragraph has hyphenation points, the positions pointing into the later paragraphs will be wrong...", "id": 116298, "time": "2008-05-06T08:06:37Z", "bug_id": 38264, "creation_time": "2008-05-06T08:06:37Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 38264, "text": "*** Bug 10374 has been marked as a duplicate of this bug. ***", "id": 124500, "time": "2009-01-29T13:28:15Z", "creator": "adelmelle@apache.org", "creation_time": "2009-01-29T13:28:15Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "adelmelle@apache.org", "text": "*** Bug 49411 has been marked as a duplicate of this bug. ***", "id": 137687, "time": "2010-06-16T14:20:08Z", "bug_id": 38264, "creation_time": "2010-06-16T14:20:08Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": null, "creator": "adelmelle@apache.org", "text": "Both issues fixed in r1039188:\n- combination of linefeed-preserve and hyphenation failed for the reasons described in earlier comments. After having inverted the main loop in LineLM.createLineBreaks() (see r956271), the fix was to modify TextLM.applyChanges() and TextLM.getChangedKnuthElements() to account for the fact that they can be called multiple times for the same instance.\nAdditionally, needed to make sure LineLM.hyphenationPerformed is only set if the last paragraph has been hyphenated. Otherwise, hyphenation would be bypassed for all paragraphs following the first preserved linefeed in a block. After modification, hyphenation is only bypassed in case of a re-entry due to changing page-ipd.\n- combination of white-space-treatment=\"preserve\" and hyphenation failed due to an oversight that has probably been present for a while. See LineLM.addInlineArea(), around line 1515: lastLM was only set in case white-space-treatment is not \"preserve\". If white-space was preserved, this caused the call to LayoutContext.setFlags() some 70-75 lines further down to set LAST_AREA to false (childLM == lastLM), which in turn caused TextLM to ignore the hyphenation character when building the area.\nFix was to make sure that lastLM always points to the LM of the last KnuthElement in the sequence to be processed.", "id": 142023, "time": "2010-11-25T16:31:26Z", "bug_id": 38264, "creation_time": "2010-11-25T16:31:26Z", "tags": [], "is_private": false}, {"count": 14, "attachment_id": null, "creator": "gadams@apache.org", "is_private": false, "id": 155488, "time": "2012-04-01T06:18:48Z", "bug_id": 38264, "creation_time": "2012-04-01T06:18:48Z", "tags": [], "text": "batch transition to closed; if someone wishes to restore one of these to resolved in order to perform a verification step, then feel free to do so"}]
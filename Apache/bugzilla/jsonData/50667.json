[{"count": 0, "tags": [], "creator": "ocostet@zenprise.com", "attachment_id": null, "id": 143698, "time": "2011-01-27T06:55:29Z", "bug_id": 50667, "creation_time": "2011-01-27T06:55:29Z", "is_private": false, "text": "The RpcChannel API user registers an RpcCallback to be notified of\ncommunication events. However, there is no callback method for the case where\nthe sending of a response message fails. This entry proposes the addition of a callback method for such cases.\n\nCAVEAT: this proposal modifies the RpcCallback interface. RpcCallback is currently implemented by at least four tomcat classes, EchoRpcTest in org.apache.catalina.tribes.demos, and AbstractReplicatedMap, ReplicatedMap ad LazyReplicatedMap in org.apache.catalina.tribes.tipis. The attached patch does not include the implementation of the additional interface method for those classes, as this coder did not feel qualified to tell how it should be implemented. They could probably simply be NOOPs, however."}, {"count": 1, "text": "Reproducing comments from https://issues.apache.org/bugzilla/show_bug.cgi?id=50648:\n\nFilip Hanik wrote:\n> 2. \n> What type of exceptions have you seen here?\n> Reply failed callback, is a strange callback, since the receiver, not the\n> sender would receive that callback. That would make for some confusing\n> programming logic. The sender will simply timeout, and not get the reply, and\n> has to act accordingly. But I'm not sure the receiver needs to be notified.\n\nI haven't /seen/ any exceptions, but I would assume any exception that can be\nthrown by a normal Channel#send could come up here, since a Channel#send is\nwhat happens.\nThe RpcCallback interface contains both callbacks that are invoked on the\nsender (leftOver) and receiver (replyRequest) side. If that isn't confusing, I\ndon't see why adding one would be. \nThe specific case where I felt the need for such a callback was one where I was\nshuttling instances across nodes -- by \"shuttling\" I mean removing them from\none and putting them on the other. I would receive a request through the\nRpcChannel for an instance, look it up, unregister it locally, pack it in the\nreply, send it. If the sending failed, I would want to re-register it locally,\nso as not to lose data.\nWhatever you may think of that usage, the fact remains that there's a\ndiscrepancy between requests on an RpcChannel, where the sender is notified of\ncommunication errors, and replies on the RpcChannel, where he (the sender of\nthe reply) isn't. Even though in both cases it's the same Channel#send that is\nperformed.", "creator": "ocostet@zenprise.com", "attachment_id": null, "id": 143699, "time": "2011-01-27T06:57:27Z", "bug_id": 50667, "creation_time": "2011-01-27T06:57:27Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "ocostet@zenprise.com", "text": "Created attachment 26561\nsvn diff\n\nCAVEAT: this proposal modifies the RpcCallback interface. RpcCallback is\ncurrently implemented by at least four tomcat classes, EchoRpcTest in\norg.apache.catalina.tribes.demos, and AbstractReplicatedMap, ReplicatedMap ad\nLazyReplicatedMap in org.apache.catalina.tribes.tipis. The attached patch does\nnot include the implementation of the additional interface method for those\nclasses, as this coder did not feel qualified to tell how it should be\nimplemented. They could probably simply be NOOPs, however.", "id": 143708, "time": "2011-01-27T08:49:08Z", "bug_id": 50667, "creation_time": "2011-01-27T08:49:08Z", "is_private": false, "attachment_id": 26561}, {"count": 3, "tags": [], "bug_id": 50667, "text": "(In reply to comment #2)\n> Created an attachment (id=26561) [details]\n> svn diff\n> \n> CAVEAT: this proposal modifies the RpcCallback interface. RpcCallback is\n> currently implemented by at least four tomcat classes, EchoRpcTest in\n> org.apache.catalina.tribes.demos, and AbstractReplicatedMap, ReplicatedMap ad\n> LazyReplicatedMap in org.apache.catalina.tribes.tipis. The attached patch does\n> not include the implementation of the additional interface method for those\n> classes, as this coder did not feel qualified to tell how it should be\n> implemented. They could probably simply be NOOPs, however.\n\nI still don't understand this enhancement. What is the possibly use case for implementing replyFailed.\nThe callback method replyFailed would get called to the receiver. And this is backwards. There is nothing the receiver can do if reply fails. There are no actions to be taken. It wont allow the receiver to retry the attempt. So the method is at best a no-op, but really just a method one has to implement with zero benefit. The sender still has to make a decision on what to do without a reply. \n\nbest\nFilip", "id": 143719, "time": "2011-01-27T11:33:32Z", "creator": "fhanik@apache.org", "creation_time": "2011-01-27T11:33:32Z", "is_private": false, "attachment_id": null}, {"text": "(In reply to comment #3)\n> I still don't understand this enhancement. What is the possibly use case for\n> implementing replyFailed.\n> The callback method replyFailed would get called to the receiver. And this is\n> backwards. There is nothing the receiver can do if reply fails. There are no\n> actions to be taken. It wont allow the receiver to retry the attempt. So the\n> method is at best a no-op, but really just a method one has to implement with\n> zero benefit. The sender still has to make a decision on what to do without a\n> reply. \n\nTo reiterate: \nThe specific case where I felt the need for such a callback was one where I was\nshuttling objects across nodes -- by \"shuttling\" I mean removing them from\none and putting them on the other. I would receive a request for a specific object through the RpcChannel, look the object up, unregister it locally, pack it in the reply, send the reply. If the sending failed, I would want to re-register the object locally, so as not to lose data.\n\nWhat is it that makes you consider this use-case invalid?", "tags": [], "bug_id": 50667, "attachment_id": null, "count": 4, "id": 143726, "time": "2011-01-27T12:55:27Z", "creator": "ocostet@zenprise.com", "creation_time": "2011-01-27T12:55:27Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 50667, "text": "Hi Olivier, yes, I see the use case. I do have a different suggestion for the solution, as there is a significant change. \nI'm attaching  a patch with the summary of\n\n1. Not breaking the existing interfaces\n2. Adding better feedback on a failure, and let the replying code decide course of action\n3. feedback on success/completion of a reply\n\nAbility to handle async message sending.", "id": 143736, "time": "2011-01-27T16:49:01Z", "creator": "fhanik@apache.org", "creation_time": "2011-01-27T16:49:01Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": 26567, "bug_id": 50667, "text": "Created attachment 26567\nPatch to include replyFailed functionality", "id": 143737, "time": "2011-01-27T16:50:07Z", "creator": "fhanik@apache.org", "creation_time": "2011-01-27T16:50:07Z", "tags": [], "is_private": false}, {"text": "(In reply to comment #5)\n> Hi Olivier, yes, I see the use case. I do have a different suggestion for the\n> solution, as there is a significant change. \n> I'm attaching  a patch with the summary of\n> \n> 1. Not breaking the existing interfaces\n> 2. Adding better feedback on a failure, and let the replying code decide course\n> of action\n> 3. feedback on success/completion of a reply\n> \n> Ability to handle async message sending.\n\nExcellent! And yes, I also think it's better not to modify the existing interface.\n\nThanks a lot, Filip, for this and for your work in general.", "tags": [], "creator": "ocostet@zenprise.com", "attachment_id": null, "count": 7, "id": 143747, "time": "2011-01-28T04:40:39Z", "bug_id": 50667, "creation_time": "2011-01-28T04:40:39Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 50667, "attachment_id": null, "id": 143761, "time": "2011-01-28T13:31:15Z", "creator": "fhanik@apache.org", "creation_time": "2011-01-28T13:31:15Z", "is_private": false, "text": "hi Olivier, I'm still noodling (thinking) about this. I am not thrilled about the \nif (async) else \ncase here. But rest assured, a solution will come.\n\nbest\nFilip"}, {"count": 9, "text": "(In reply to comment #8)\n> hi Olivier, I'm still noodling (thinking) about this. I am not thrilled about\n> the \n> if (async) else \n> case here. \n\nI think I see what you mean. I would say the problem is the \"retry\" capability: since there can't be any retrying in async mode, it's what causing the discrepancy between the sync and async case.\nI'm attaching a diff with a suggestion of how it might look like without the option to retry. Perhaps it can be of help. But by all means, do noodle! :)", "bug_id": 50667, "attachment_id": null, "id": 143819, "time": "2011-01-31T04:46:21Z", "creator": "ocostet@zenprise.com", "creation_time": "2011-01-31T04:46:21Z", "tags": [], "is_private": false}, {"count": 10, "attachment_id": 26579, "bug_id": 50667, "text": "Created attachment 26579\nDifferent suggestion for replyFailed", "id": 143820, "time": "2011-01-31T04:48:03Z", "creator": "ocostet@zenprise.com", "creation_time": "2011-01-31T04:48:03Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 50667, "attachment_id": null, "text": "hi Olivier, thanks for your patch.\nHaving two callback objects seems a bit overkill. It's the route I went down originally, but decided against it.\nI've checked in a fix, sparked by looking at your code in r1068549\nThis should satisfy the requirements in terms getting the confirmation in both async and non async mode.\n\nLet me know if this does it!\n\nbest\nFilip", "id": 144061, "time": "2011-02-08T15:29:22Z", "creator": "fhanik@apache.org", "creation_time": "2011-02-08T15:29:22Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 50667, "text": "Hi Filip,\n\nI would have thought the second callback could be implemented in the same class is the (Extended)RpcCallback, but at any rate it's your call. I got what I wanted out of this, so it's fine by me.\n\nA few remarks on the code:\n1. Unless I'm very much mistaken, the retry functionality won't work in async mode. This should be documented in ExtendedRpcCallback#replyFailed.\n2. As far as I can see, GroupChannel#send does handle the case where the ErrorHandler is null, so you probably don't need an if/else to call the appropriate Channel#send in RpcChannel#messageReceived. Actually, this would depend on the contract of Channel#send, which I'm not aware of, so I don't know for sure.\n3. The call to ExtendedRpcCallback#replySucceeded in the synchronous case should be move outside the try/catch block. Perhaps put it in a try/catch of its own. The way it is now, it would cause spurious behaviour if it were to throw a RuntimeException.\n\nI think that's about it.\n\nCheers, \n Olivier.", "id": 144091, "attachment_id": null, "creator": "ocostet@zenprise.com", "creation_time": "2011-02-09T04:59:37Z", "time": "2011-02-09T04:59:37Z", "is_private": false}, {"count": 13, "text": "(In reply to comment #12)\n> Hi Filip,\n> \n> I would have thought the second callback could be implemented in the same class\n> is the (Extended)RpcCallback, but at any rate it's your call.\n\nIt is, the other patch introduced a third class for callbacks that was wrapped in an error handler. \n\n I got what I\n> wanted out of this, so it's fine by me.\n\ncool\n\nalso, the retry functionality has been removed, as it can be configured as an interceptor, or configured further down in the stack.\n\n> \n> A few remarks on the code:\n> 1. Unless I'm very much mistaken, the retry functionality won't work in async\n> mode. This should be documented in ExtendedRpcCallback#replyFailed.\n\nIt should work in async mode, since it passes the EXRPC object into the channel as a feedback object wrapped in an error handler.\n\n\n> 3. The call to ExtendedRpcCallback#replySucceeded in the synchronous case\n> should be move outside the try/catch block. Perhaps put it in a try/catch of\n> its own. The way it is now, it would cause spurious behaviour if it were to\n> throw a RuntimeException.\n\nyes, for sure, fixed in r1068989\n\n\nthanks for your feedback\nFilip", "bug_id": 50667, "attachment_id": null, "id": 144098, "time": "2011-02-09T12:40:16Z", "creator": "fhanik@apache.org", "creation_time": "2011-02-09T12:40:16Z", "tags": [], "is_private": false}]
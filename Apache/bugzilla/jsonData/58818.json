[{"count": 0, "tags": [], "text": "Created attachment 33418\ntemplate for process\n\nFile created by MS Excel 2007.\nI can't to read comment at A1.\n\nSystem.out.println(wb.getSheetAt(0).getCellComment(0, 0)); => null\nSystem.out.println(wb.getSheetAt(0).getRow(0).getCell(0).getCellComment()); =>null\n\nSometimes, after edit and resave the file - cell comment read correctly.", "is_private": false, "id": 187459, "creation_time": "2016-01-07T06:35:28Z", "time": "2016-01-07T06:35:28Z", "creator": "64svv@rambler.ru", "bug_id": 58818, "attachment_id": 33418}, {"attachment_id": null, "tags": [], "creator": "onealj@apache.org", "is_private": false, "count": 1, "id": 188077, "time": "2016-01-31T11:12:49Z", "bug_id": 58818, "creation_time": "2016-01-31T11:12:49Z", "text": "I tried the following using POI 3.14 beta 1\n\nInputStream fis = FileInputStream(\"bug58818.xls\");\nWorkbook wb = HSSFWorkbook(fis);\nfis.close();\nSheet sh = wb.getSheetAt(0);\nsh.getCellComments() -> returns empty Map\nsh.getRow(0).getCell(0).getCellComment(); -> returns null\nsh.getCellComment(0, 0); -> returns null\n\nOpening the file in Excel 2013, I found a comment in cell A1 with the text `jx:area(lastCell = \"C25\")\\n`. I was able to reproduce your problem and this is a valid bug.\n\nThe problem is that the comment doesn't have a position (HSSFComment.hasPosition returns false).\n\nI modified HSSFSheet.findCellCommentLocations to print comment.getString().getString() on each HSSFComment it finds in the drawing patriarch, and then POI found the cell comment. Disabling the check for hasPosition() will throw a NPE at comment.getRow() or comment.getColumn().\n\nprivate void findCellCommentLocations(HSSFShapeContainer container, Map<CellAddress, HSSFComment> locations) {\n     for (Object object : container.getChildren()) {\n         HSSFShape shape = (HSSFShape) object;\n         if (shape instanceof HSSFComment) {\n             // recursively search down the drawing patriarch tree\n             findCellCommentLocations((HSSFShapeGroup) shape, locations);\n             continue;\n         }\n         if (shape instanceof HSSFComment) {\n             HSSFComment comment = (HSSFComment) shape;\n+            System.out.println(comment.getString().getString());\n             if (comment.hasPosition()) {\n                 locations.put(new CellAddress(comment.getRow(), comment.getColumn()), comment);\n             }\n+            else {\n+                // found unanchored comment. How should this be handled?\n+                // does comment contain any information that might be relevant here?\n+                locations.put(CellAddress.A1, comment);\n+            }\n\nHSSFComment.hasPosition() is false here because the HSSFComment object (created with the constructor HSSFComment(EscherContainerRecord, ObjectRecord, TextObjectRecord, NoteRecord)) sets NoteRecord as null. hasPosition and getRow/getColumn rely on this NoteRecord to identify the location.\n\nThere are two likely explanations here:\n* data for creating a NoteRecord exists, but the NoteRecord object is not passed to the constructor of HSSFComment\n* the Excel file does not have a NoteRecord for some cell comments. When this is the case, Excel uses A1 as the default, implied location of the comment. For behavior parity, POI would need to default cell comments to A1 if no position is specified.\n\nHSSFComment(EscherContainerRecord spContainer, ObjRecord objRecord, TextObjectRecord textObjectRecord, NoteRecord _note) \n\nEscherContainerRecord spContainer\norg.apache.poi.ddf.EscherContainerRecord (SpContainer):\n  isContainer: true\n  version: 0x000F\n  instance: 0x0000\n  recordId: 0xF004\n  numchildren: 5\n  children: \n   Child 0:\n    org.apache.poi.ddf.EscherSpRecord:\n      RecordId: 0xF00A\n      Version: 0x0002\n      ShapeType: 0x00CA\n      ShapeId: 1027\n      Flags: HAVEANCHOR|HASSHAPETYPE (0x00000A00)\n    \n   Child 1:\n    org.apache.poi.ddf.EscherOptRecord:\n      isContainer: false\n      version: 0x0003\n      instance: 0x000E\n      recordId: 0xF00B\n      numchildren: 0\n      properties:\n        propNum: 128, RAW: 0x0080, propName: text.textid, complex: false, blipId: false, value: 62207824 (0x03B53750)\n        propNum: 133, RAW: 0x0085, propName: text.wraptext, complex: false, blipId: false, value: 1 (0x00000001)\n        propNum: 139, RAW: 0x008B, propName: text.bidir, complex: false, blipId: false, value: 2 (0x00000002)\n        propNum: 191, RAW: 0x00BF, propName: text.sizetexttofitshape, complex: false, blipId: false, value: 655368 (0x000A0008)\n        propNum: 344, RAW: 0x0158, propName: unknown, complex: false, blipId: false, value: 0 (0x00000000)\n        propNum: 385, RAW: 0x0181, propName: fill.fillcolor, complex: false, blipId: false, value: 14811135 (0x00E1FFFF)\n        propNum: 387, RAW: 0x0183, propName: fill.fillbackcolor, complex: false, blipId: false, value: 14811135 (0x00E1FFFF)\n        propNum: 389, RAW: 0x0185, propName: fill.crmod, complex: false, blipId: false, value: 268435700 (0x100000F4)\n        propNum: 447, RAW: 0x01BF, propName: fill.nofillhittest, complex: false, blipId: false, value: 1048592 (0x00100010)\n        propNum: 451, RAW: 0x01C3, propName: linestyle.crmod, complex: false, blipId: false, value: 268435700 (0x100000F4)\n        propNum: 513, RAW: 0x0201, propName: shadowstyle.color, complex: false, blipId: false, value: 0 (0x00000000)\n        propNum: 515, RAW: 0x0203, propName: shadowstyle.crmod, complex: false, blipId: false, value: 268435700 (0x100000F4)\n        propNum: 575, RAW: 0x023F, propName: shadowstyle.shadowobscured, complex: false, blipId: false, value: 196611 (0x00030003)\n        propNum: 959, RAW: 0x03BF, propName: groupshape.print, complex: false, blipId: false, value: 131072 (0x00020000)\n    \n   Child 2:\n    org.apache.poi.ddf.EscherClientAnchorRecord:\n      RecordId: 0xF010\n      Version: 0x0000\n      Instance: 0x0000\n      Flag: 3\n      Col1: 1\n      DX1: 169\n      Row1: 0\n      DY1: 30\n      Col2: 2\n      DX2: 832\n      Row2: 4\n      DY2: 196\n      Extra Data:\n    No Data\n    \n   Child 3:\n    org.apache.poi.ddf.EscherClientDataRecord:\n      RecordId: 0xF011\n      Version: 0x0000\n      Instance: 0x0000\n      Extra Data:\n    No Data\n    \n   Child 4:\n    org.apache.poi.ddf.EscherTextboxRecord:\n      isContainer: false\n      version: 0x0000\n      instance: 0x0000\n      recordId: 0xF00D\n      numchildren: 0\n    \n\nObjectRecord\n[OBJ]\nSUBRECORD: [ftCmo]\n    .objectType           = 0x0019 (25 )\n    .objectId             = 0x00000003 (3 )\n    .option               = 0x4011 (16401 )\n         .locked                   = true\n         .printable                = true\n         .autofill                 = false\n         .autoline                 = true\n    .reserved1            = 0x03B53750 (62207824 )\n    .reserved2            = 0x032FCC60 (53464160 )\n    .reserved3            = 0x00000000 (0 )\n[/ftCmo]\nSUBRECORD: [ftNts ]\n  size     = 22\n  reserved = [41, 68, 11, C0, EC, 21, 65, 46, 86, B6, E6, 6B, EF, 8E, 10, 2B, 00, 00, 10, 00, 00, 00]\n[/ftNts ]\nSUBRECORD: [ftEnd]\n[/ftEnd]\n[/OBJ]\n\nTextObjectRecord\n[TXO]\n    .options        = 0x0212\n         .isHorizontal = 1\n         .isVertical   = 1\n         .textLocked   = true\n    .textOrientation= 0x0000\n    .reserved4      = 0x0000\n    .reserved5      = 0x0000\n    .reserved6      = 0x0000\n    .textLength     = 0x001A\n    .reserved7      = 0x00000000\n    .string = jx:area(lastCell = \"C25\")\n\n    .textrun = 6\n    .textrun = 24\n[/TXO]\n\nNoteRecord\nnull\n\nThis is the stack trace that identifies how the HSSFComment was created:\n  File \"<stdin>\", line 1, in <module>\n        at org.apache.poi.hssf.usermodel.HSSFComment.<init>(HSSFComment.java:62)\n        at org.apache.poi.hssf.usermodel.HSSFShapeFactory.createShapeTree(HSSFShapeFactory.java:108)\n        at org.apache.poi.hssf.usermodel.HSSFPatriarch.buildShapeTree(HSSFPatriarch.java:540)\n        at org.apache.poi.hssf.usermodel.HSSFPatriarch.<init>(HSSFPatriarch.java:87)\n        at org.apache.poi.hssf.usermodel.HSSFSheet.getPatriarch(HSSFSheet.java:1989)\n        at org.apache.poi.hssf.usermodel.HSSFSheet.getDrawingPatriarch(HSSFSheet.java:1941)\n        at org.apache.poi.hssf.usermodel.HSSFSheet.getCellComments(HSSFSheet.java:2348)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n\nIn HSSFShapeFactory.java line 108:\nThe _note argument to the HSSFComment constructor is null, which equals agg.getNoteRecordByObj(objRecord)). Either getNoteRecordByObj is misbehaving or there are duplicates in the `for (EscherRecord record : container.getChildRecords())` that are screwing up the lookup.\n\nSavchenko, do you have any files where POI doesn't recognized a cell comment NOT located at A1?"}, {"count": 2, "text": "Created attachment 33508\nfix EscherAggregate.createAggregate\n\nIt seems like the the break statement in createAggregate [2] leaves some records unread. In attachment 33418, the NoteRecord has object id 3, and is skipped by the break statement. Removing the break statement fixes the described error (HSSFSheet.getCellComments) but fails a unit test [1]. \n\n[1] src/testcases/org/apache/poi/hssf/model/TestDrawingAggregate.java\n[2]\n>        // any NoteRecords that follow the drawing block must be aggregated and and saved in the tailRec collection\n>        while (loc < records.size()) {\n>            if (sid(records, loc) == NoteRecord.sid) {\n>                NoteRecord r = (NoteRecord) records.get(loc);\n>                agg.addTailRecord(r);\n>            }\n>            else {\n>                break;\n>            }\n>            loc++;\n>        }", "bug_id": 58818, "is_private": false, "id": 188094, "time": "2016-02-01T04:50:50Z", "creator": "onealj@apache.org", "creation_time": "2016-02-01T04:50:50Z", "tags": [], "attachment_id": 33508}, {"count": 3, "text": "Created attachment 33509\nfailed junit", "creator": "onealj@apache.org", "is_private": false, "id": 188095, "time": "2016-02-01T04:53:01Z", "bug_id": 58818, "creation_time": "2016-02-01T04:53:01Z", "tags": [], "attachment_id": 33509}, {"attachment_id": null, "tags": [], "creator": "64svv@rambler.ru", "is_private": false, "count": 4, "id": 188140, "time": "2016-02-02T03:10:08Z", "bug_id": 58818, "creation_time": "2016-02-02T03:10:08Z", "text": "> Savchenko, do you have any files where POI doesn't recognized a cell comment\n> NOT located at A1?\n\nNo, I have not. \nI found no problems with the other cells"}, {"count": 5, "tags": [], "creator": "64svv@rambler.ru", "text": "Any news?", "id": 190193, "time": "2016-04-12T16:17:29Z", "bug_id": 58818, "creation_time": "2016-04-12T16:17:29Z", "is_private": false, "attachment_id": null}]
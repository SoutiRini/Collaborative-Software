[{"count": 0, "tags": [], "creator": "rwong@ariba.com", "attachment_id": null, "id": 44969, "time": "2003-10-02T00:28:38Z", "bug_id": 23554, "creation_time": "2003-10-02T00:28:38Z", "is_private": false, "text": "The following code instantiates a HelperNodeList if IdResolver.getElementById \nreturns null. This can happen in situations where the fragment corresponding to \nthe Reference URI is missing from the doc, and any registered Resource \nresolvers do not know how to resolve this reference (because for example it \nreally is an unknown resource). The correct behavior in this case I believe \nwould be for XMLSignature.sign() to throw an XMLSignatureException. But the \ncode below actually would instantiate a HelperNodeList and use its bytes as the \nXMLInputSource for the digest to be generated. As a result, signing succeeds \n(where it really should fail). I think the code should throw an exception \ninstead of doing a new HelperNodeList().\n\n         // Element selectedElem = doc.getElementById(id);\n         Element selectedElem = IdResolver.getElementById(doc, id);\n\n         // cat.debug(\"Try to catch an Element with ID \" + id + \" and Element \nwas \" + selectedElem);\n         if (selectedElem == null) {\n            resultNodes = new HelperNodeList();\n         } else {\n          ...\n         }"}, {"count": 1, "tags": [], "bug_id": 23554, "attachment_id": null, "text": "This is actually xmlsec.jar version 1.0.5, not C++0.20, as indicated in \nVersion. I specified \"unspecified\" in the Version field, but it got changed to \nC++ 0.20.", "id": 44970, "time": "2003-10-02T00:34:26Z", "creator": "rwong@ariba.com", "creation_time": "2003-10-02T00:34:26Z", "is_private": false}, {"count": 2, "text": "Now xmlsec.jar throws an exception when the id is not found.", "creator": "raul-info@r-bg.com", "is_private": false, "id": 71324, "time": "2005-02-21T21:57:52Z", "bug_id": 23554, "creation_time": "2005-02-21T21:57:52Z", "tags": [], "attachment_id": null}]
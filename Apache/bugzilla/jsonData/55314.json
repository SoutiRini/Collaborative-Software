[{"count": 0, "tags": [], "text": "JSR-356 explicitly states that the addEndpoint methods on ServerContainer \"are only operational during the application deployment phase of an application. Specifically, as soon as any of the server endpoints within the application have accepted an opening handshake request, the apis may not longer be used. This restriction may be relaxed in a future version.\"\n\nThere are cases when it is useful to have consolidated handling of HTTP requests including WebSocket handshake requests. For example SockJS [1] defines a URL structure of the form \"/endpointPrefix/<server>/<session>/<transport>\" where \"transport\" can be an HTTP-based (e.g. streaming, long polling) or WebSocket (see the \"Session URLs\" section). The most natural way to implement this is to create a single SockJsServlet that handles all requests under \"/endpointPrefix\" including requests for \"/endpointPrefix/*/*/websocket\".\n\nI'd like to propose that in the very least Tomcat make this possible through a flag. I will also create a spec ticket to suggest it for the next iteration. I think it's also worth considering whether this should be the default behavior, with a flag being necessary only to revert back to strict compliance.\n\nFor what it's worth, pretty much all WebSocket APIs I'm familiar with (Java and non-Java) do make it possible to create some kind of HTTP request handler that can also initiate a WebSocket handshake. That includes the Tomcat 7 WebSocketServlet for which it's conceivable that some existing users may realize this limitation when upgrading to Tomcat 8.\n\n[1] http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html", "is_private": false, "id": 168822, "creator": "rstoyanchev@yahoo.com", "time": "2013-07-26T16:24:12Z", "bug_id": 55314, "creation_time": "2013-07-26T16:24:12Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 55314, "attachment_id": null, "text": "I've created a spec request also:\nhttps://java.net/jira/browse/WEBSOCKET_SPEC-211", "id": 168828, "time": "2013-07-26T18:13:14Z", "creator": "rstoyanchev@yahoo.com", "creation_time": "2013-07-26T18:13:14Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55314, "text": "Maybe this is relevant. When I try to add the WsListener to an embedded Tomcat I get this:\n\n2013-07-27 12:01:16.974 ERROR 31782 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Exception sending context initialized event to listener instance of class org.apache.tomcat.websocket.server.WsListener\n\njava.lang.UnsupportedOperationException: Section 4.4 of the Servlet 3.0 specification does not permit this method to be called from a ServletContextListener that was not defined in web.xml, a web-fragment.xml file nor annotated with @WebListener\n\tat org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addFilter(StandardContext.java:6805)\n\tat org.apache.tomcat.websocket.server.WsServerContainer.setServletContext(WsServerContainer.java:132)\n\tat org.apache.tomcat.websocket.server.WsSci.init(WsSci.java:131)\n\tat org.apache.tomcat.websocket.server.WsListener.contextInitialized(WsListener.java:33)\n\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4838)", "id": 168835, "time": "2013-07-27T11:03:20Z", "creator": "david_syer@hotmail.com", "creation_time": "2013-07-27T11:03:20Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 168974, "time": "2013-07-31T13:28:19Z", "bug_id": 55314, "creation_time": "2013-07-31T13:28:19Z", "is_private": false, "text": "(In reply to Dave Syer from comment #2)\n> Maybe this is relevant. When I try to add the WsListener to an embedded\n> Tomcat I get this:\n\nThat looks to be a different issue. There are examples of how to do this without hitting the restriction imposed by Servlet 3.0 / Section 4.4 in the Tomcat unit tests. Essentially, you need to do this:\n\nctx.addApplicationListener(new ApplicationListener(WsListener.class.getName(), false));\n\n\nThe restriction on programmtic deployment is enforced in WsServerContainer.addEndpoint(ServerEndpointConfig)"}, {"count": 4, "tags": [], "bug_id": 55314, "is_private": false, "text": "An option to do this has been added and it has been enabled by default.\n\nShould you wish to change this you can either set the org.apache.tomcat.websocket.STRICT_SPEC_COMPLIANCE system property to true that will change the default vaue of this option to not allow additions or you can set the org.apache.tomcat.websocket.noAddAfterHandshake servlet context attribute which explicitly sets the option for a single context.", "id": 168976, "time": "2013-07-31T14:18:51Z", "creator": "markt@apache.org", "creation_time": "2013-07-31T14:18:51Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "rstoyanchev@yahoo.com", "attachment_id": null, "is_private": false, "id": 169154, "time": "2013-08-05T21:09:41Z", "bug_id": 55314, "creation_time": "2013-08-05T21:09:41Z", "text": "Mark, many thanks for the change although it looks like we had different ideas about the end result. From what I can see the solution makes it possible to call ServerContainer.addEndpoint at runtime after which WsFilter handles matching WebSocket handshake request.\n\nWhat I had in mind is the ability to create a Servlet that can do centralized HTTP request processing including WebSocket handshake requests, i.e. instead of WsFilter. It's what I meant with the comparison to the Tomcat 7 WebSocketServlet.\n\nThe obvious issue is that JSR-356 doesn't provide this, at least not yet. The client-side connectToServer is similar in spirit but nothing like it on the server side. I imagined it would be something like:\n\nWsHandshakeRequest wsRequest = ...\nWsHandshakeResponse wsResponse = ...\nWsServerContainer wsContainer = ...\n\nwsContainer.upgrade(wsRequest, wsResponse, endpoint);\n\nSo any intermediate solution would have to be Tomcat specific. Just a thought here on maybe providing a separate interface marked clearly as an intermidiate solution that will remain stable until the spec has an alternative and that will be deprecated afterwards, something like:\n\nNonCompliantWsServerContainer container = ...\ncontainer.upgrade(wsRequest, wsResponse, endpoint);"}, {"count": 6, "tags": [], "bug_id": 55314, "is_private": false, "text": "Re-open to see what can be done with respect to on demand upgrade.\n\nAs a (not very pretty) workaround, it should be possible to replicate the code in the WsFilter that triggers the upgrade. The sort of fix I have in mind is to extract the bulk of this out into a helper class (possibly a new class, possibly an existing one) that can then be used by other Servlets / Filters as well.", "id": 169172, "time": "2013-08-06T07:51:34Z", "creator": "markt@apache.org", "creation_time": "2013-08-06T07:51:34Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 169259, "time": "2013-08-07T15:52:38Z", "bug_id": 55314, "creation_time": "2013-08-07T15:52:38Z", "is_private": false, "text": "I've done some refactoring locally. Would the following method on WsServerContainer meet you requirements?\n\npublic void doUpgrade(\n        HttpServletRequest request,\n        HttpServletResponse response,\n        ServerEndpointConfig sec,\n        Map<String,String> pathParams)\n        throws ServletException, IOException"}, {"count": 8, "tags": [], "bug_id": 55314, "text": "Thinking about this some more, wouldn't it be easier from a developer point of view just to forward the request and let WsFilter do all the work?", "id": 169302, "time": "2013-08-08T10:26:01Z", "creator": "markt@apache.org", "creation_time": "2013-08-08T10:26:01Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 169468, "time": "2013-08-15T19:20:31Z", "bug_id": 55314, "creation_time": "2013-08-15T19:20:31Z", "text": "I've implemented the method in comment #7\n\nFeel free to re-open if this doesn't meet the requirement."}, {"count": 10, "tags": [], "text": "I've tried this and it works as expected. Thanks!", "attachment_id": null, "id": 169521, "creator": "rstoyanchev@yahoo.com", "time": "2013-08-16T18:37:44Z", "bug_id": 55314, "creation_time": "2013-08-16T18:37:44Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 55314, "attachment_id": null, "id": 169522, "time": "2013-08-16T18:40:47Z", "creator": "markt@apache.org", "creation_time": "2013-08-16T18:40:47Z", "is_private": false, "text": "Excellent. Thanks for the feedback."}]
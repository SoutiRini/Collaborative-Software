[{"count": 0, "tags": [], "bug_id": 23224, "attachment_id": null, "id": 44276, "time": "2003-09-17T19:05:34Z", "creator": "jmm@sublogic.com", "creation_time": "2003-09-17T19:05:34Z", "is_private": false, "text": "single Tomcat running, multiple webapps, each of which has their own log4j and \nwants to use NTEventLogAppender.\n\nThe problem is that the class loads its native library without try/catch'ing, \nso when any classloader besides the first attempts to load the library (as part \nof its classloader loading the NTEventLogAppender class file itself), there's \nan exception and the logging fails.\n\nso, the end of NTEventLogAppender.java is now:\n\n  static {\n    System.loadLibrary(\"NTEventLogAppender\");\n  }\n\nThat would be better with a try/catch of the loadLibrary so then the other \nwebapps could load the class and use it.  Note that the system classloader is \nwhere the library is actually loaded, so the other classloaders should have \naccess to it just fine.\n\n  static {\n    try {\n      System.loadLibrary(\"NTEventLogAppender\");\n    } catch (Throwable t) {}\n  }\n\n(would prob. wanna replace Throwable with whatever the specific type of \nexception is that's thrown for the second-and-later classloaders, I don't have \nmy logs around to check any more).\n\nAlternative work-around is to use something System-wide (outside of the \nindividual classloaders) like a System property:\n\n  static {\n    if(System.getProperty(\"NTEventLogAppender.loaded\") == null) {\n      System.loadLibrary(\"NTEventLogAppender\");\n      System.setProperty(\"NTEventLogAppender.loaded\", \"true\");\n    }\n  }"}, {"count": 1, "tags": [], "bug_id": 23224, "attachment_id": null, "id": 68418, "time": "2004-12-13T20:40:25Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-13T20:40:25Z", "is_private": false, "text": "This class is gone for log4j 1.3."}]
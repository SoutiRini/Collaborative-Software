[{"count": 0, "tags": [], "text": "We suffer from SIGSEGV abnormal httpd terminations. It seems to be related to\nthe worker/thread components.\n\nThe crashes only happen under higher load, on AIX 5.3.\n\nMore detailed info:\n--------------------------------------------------------------------------------------------------------------\nWe run the same binary on more than 200 servers with AIX 5.2 without problems.\nWe have reproduced the problem with '-g' compiled binary:\n\nts9 /work/thulek/httpd-2.0.59/server# dbx /usr/adissys/httpd/bin/httpd\n/usr/adissys/httpd/core\nType 'help' for help.\n[using memory image in /usr/adissys/httpd/core]\nreading symbolic information ...\n \nSegmentation fault in pth_usched._event_sleep [/usr/lib/libpthread.a] at\n0xd0122bc4 ($t3)\n0xd0122bc4 (_event_sleep+0xfc) 80410014        lwz   r2,0x14(r1)\n(dbx) t\npth_usched._event_sleep(??, ??, ??, ??, ??, ??) at 0xd0122bc4\npth_usched._event_wait(??, ??) at 0xd012314c\npth_cond._cond_wait_local(??, ??, ??) at 0xd012e820\npth_cond._cond_wait(??, ??, ??) at 0xd012ee58\npth_cond.pthread_cond_wait(??, ??) at 0xd012fa28\napr_thread_cond_wait(cond = 0x1003f65c, mutex = (nil)), line 80 in \"thread_cond.c\"\nap_queue_pop(queue = (nil), sd = (nil), p = (nil)), line 258 in \"fdqueue.c\"\nworker_thread(thd = (nil), dummy = (nil)), line 809 in \"worker.c\"\ndummy_worker(opaque = (nil)), line 105 in \"thread.c\"\n--------------------------------------------------------------------------------------------------------------", "attachment_id": null, "id": 99977, "creation_time": "2007-03-02T08:32:18Z", "time": "2007-03-02T08:32:18Z", "creator": "thulek@cz.ibm.com", "bug_id": 41748, "is_private": false}, {"count": 1, "tags": [], "bug_id": 41748, "is_private": false, "text": "The dbx display of parameters is incorrect.  The display of which thread crashed\nis presumably incorrect too, since that is a system function.\n\nThe backtrace happens to be the most common one during normal operation since it\nis that of an idle thread.  See what the other threads are doing by using the\nthread command to list threads then \"thread current THREADNUM\" followed by where\nto see the backtrace.\n\nAlso, don't try to use AIX 5.3 GA with no maintenance.  I use TL-5 currently.  \nI'm pretty sure that ML 1 is fine.  Make sure IY58143 is included in your\ncurrent or future maintenance level.  (I don't recall whether or not that is in\nML 1.)", "id": 99979, "time": "2007-03-02T10:10:56Z", "creator": "trawick@apache.org", "creation_time": "2007-03-02T10:10:56Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "thulek@cz.ibm.com", "attachment_id": null, "id": 100048, "time": "2007-03-05T04:59:24Z", "bug_id": 41748, "creation_time": "2007-03-05T04:59:24Z", "is_private": false, "text": "The OS level is:\n  # oslevel -s\n  5300-05-02\nplus latest levels of bos.64bit, bos.mp, bos.mp64, bos.net.tcp.client,\nbos.perf.tools, bos.rte.libc, bos.sysmgt.serv_aid.\n\nThe thread that handled the SIGSEGV signal is 4:\n(dbx) thread current 4\n(dbx) thread\n thread  state-k     wchan    state-u    k-tid   mode held scope function\n $t1     run                  running  1016051     u   no   sys  read\n $t2     run                  terminated 1020147     k   no   sys  _event_sleep\n*$t3     run                  blocked  1024245     k   no   sys  _event_sleep\n>$t4     run                  running  1028343     u   no   sys  sig_coredump\n $t5     run                  running  1032441     u   no   sys  read\n $t6     run                  running  1036539     u   no   sys  read\n $t7     run                  running  1040637     u   no   sys  read\n $t8     run                  blocked  1044735     u   no   sys  _event_sleep\n $t9     run                  blocked  1048577     u   no   sys  _event_sleep\n $t10    run                  blocked  1052675     u   no   sys  _event_sleep\n $t11    run                  blocked  1056773     u   no   sys  _event_sleep\n $t12    run                  blocked  1060871     u   no   sys  _event_sleep\n $t13    run                  blocked  1064969     u   no   sys  _event_sleep\n $t14    run                  blocked  1069067     u   no   sys  _event_sleep\n $t15    run                  blocked  1073165     u   no   sys  _event_sleep\n $t16    run                  blocked  1077263     u   no   sys  _event_sleep\n $t17    run                  blocked  1081361     u   no   sys  _event_sleep\n $t18    run                  blocked  1085459     u   no   sys  _event_sleep\n $t19    run                  blocked  1089557     u   no   sys  _event_sleep\n $t20    run                  blocked  1093655     u   no   sys  _event_sleep\n $t21    run                  blocked  1097753     u   no   sys  _event_sleep\n $t22    run                  blocked  1101851     u   no   sys  _event_sleep\n $t23    run                  blocked  1105949     u   no   sys  _event_sleep\n $t24    run                  blocked  1110047     u   no   sys  _event_sleep\n $t25    run                  blocked  1114145     u   no   sys  _event_sleep\n $t26    run                  running  1118243     u   no   sys  read\n $t27    run                  running  1122341     u   no   sys  poll\n $t28    run                  running  1126439     u   no   sys  poll\n(dbx) t\nsig_coredump(sig = 0), line 1050 in \"mpm_common.c\"\nmalloc_y.malloc_y(0x2000, 0x0, 0x8, 0x20, 0x0, 0x100fb0f7, 0x100fb0f7, 0x8000)\nat 0xd03272c4\nmalloc_common.malloc_common_53_36(??) at 0xd03248b8\njk_pool_dyn_alloc() at 0xd106d65c\njk_pool_alloc() at 0xd106d77c\njk_b_set_buffer_size() at 0xd107c768\nservice() at 0xd1082424\njk_handler() at 0xd1065b64\nap_run_handler(r = 0x100380d8), line 152 in \"config.c\"\nap_invoke_handler(r = 0x1003820c), line 364 in \"config.c\"\nap_process_request(r = 0x30767818), line 249 in \"http_request.c\"\nap_process_http_connection(c = 0x100173cc), line 253 in \"http_core.c\"\nap_run_process_connection(c = 0xf03c73ac), line 43 in \"connection.c\"\nap_process_connection(c = 0x307697f0, csd = 0x307677e0), line 176 in \"connection.c\"\nprocess_socket(p = (nil), sock = (nil), my_child_num = 0, my_thread_num = 0,\nbucket_alloc = (nil)), line 522 in \"worker.c\"\nworker_thread(thd = (nil), dummy = (nil)), line 842 in \"worker.c\"\ndummy_worker(opaque = (nil)), line 105 in \"thread.c\"\n(dbx)\n\nHow would I find the thread that caused the dump?\n\nTomas"}, {"count": 3, "tags": [], "bug_id": 41748, "attachment_id": null, "id": 100050, "creation_time": "2007-03-05T07:10:38Z", "time": "2007-03-05T07:10:38Z", "creator": "trawick@apache.org", "text": ">How would I find the thread that caused the dump?\n\nThat's a bit tricky.  The backtrace you showed was that of the thread that\n*triggered* the crash.  However, see the discussion below:\n\n>sig_coredump(sig = 0), line 1050 in \"mpm_common.c\"\n>malloc_y.malloc_y(0x2000, 0x0, 0x8, 0x20, 0x0, 0x100fb0f7, 0x100fb0f7, 0x8000)\nat 0xd03272c4\n>malloc_common.malloc_common_53_36(??) at 0xd03248b8\n>jk_pool_dyn_alloc() at 0xd106d65c\n\nYou have a memory corruption problem, since the AIX heap library is crashing. \nThere's no reason to believe that the thread which segfaulted (under control of\nmod_jk) is the thread which caused the problem.\n\nPossibly the AIX heap debugging will help by causing the crash to occur much\ncloser to the point of the problem.\n\nVery basic usage is to set\n\nexport MALLOCTYPE=debug\n\nin bin/envvars (I assume you use apachectl to start up; apachectl will read that\nfile)\n\nIf you get a different traceback when MALLOCTYPE is enabled and the traceback\ndoesn't show the AIX heap library, post the traceback to this PR.\n\nHere's more information about malloc debugging:\n\nhttp://publibn.boulder.ibm.com/doc_link/Ja_JP/a_doc_lib/aixprggd/genprogc/debug_malloc.htm\n\nTo the extent that it is practical, yank any non-httpd-distributed modules from\nthe configuration and try to reproduce.  Those which are used less by the\noverall population of Apache httpd users are more likely suspects.\n\nThe point that you're using the same binary on 5.2 is an obvious point to\nconsider.  It has occasionally been observed that exact same code and\nconfiguration bombs on a newer OS level because of OS changes which expose the\nparticular problem, or to allow the problem to be exposed much more frequently.\n I recall that AIX 5.2 and 5.3 use different heap libraries by default. \nExposure of certain types of heap corruption defects is dependent on the heap\nlibrary implementation.  A web search for ->yorktown watson 5.3<- will yield\nsome discussion of the heap library implementations and perhaps a way to switch\nback and forth for investigation.\n", "is_private": false}, {"count": 4, "tags": [], "creator": "thulek@cz.ibm.com", "attachment_id": null, "id": 100480, "time": "2007-03-16T07:44:56Z", "bug_id": 41748, "creation_time": "2007-03-16T07:44:56Z", "is_private": false, "text": "While debuging we discovered the terminations (SIGSEGV) seemed to be related to\nvarious symptoms of heap corruption (eg. SIGSEGV in malloc(), or invalid pointer\npassed to free()).\n\nTwo different approaches seemed to fix the problem:\n\n1) Using the original build, created on AIX 5.1\nOur original httpd build was made on AIX 5.1 and run under AIX 5.3. The default\nenvvars configuration contains: \"MALLOCMULTIHEAP=considersize,heaps:8; export\nMALLOCMULTIHEAP;\"\nAfter unsetting the environment variable MALLOCMULTIHEAP no abnormal httpd\nterminations occurred. \n\n2) New build of httpd on AIX 5.3\nWe made a another Apache build on AIX 5.3. Running this compilation with default\nenvvars configuration was without problems too, ie. multiheap\n\nWe are still puzzled as to why the behaviour of malloc (with respect to the\nmultiheap feature) depended on which version of AIX was used for compilation...\n"}, {"count": 5, "tags": [], "text": "Another user reported crashes on AIX for mod_jk.\n\nOur way of detecting a multi-threaded context during JK build was not working\nfor AIX. We switched to doing a thread-safe build by default in version 1.2.24+\n(and there's a configure switch for those who really want to do a non\nthread-safe build).\n\nIt's not unlikely, that your problem does no longer exist, once you are using a\nrecent mod_jk.\n\nIt would be nice, if you could do a littl test and let us know the result.\n\nThanks.", "attachment_id": null, "bug_id": 41748, "id": 112420, "time": "2008-01-01T18:32:25Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2008-01-01T18:32:25Z", "is_private": false}, {"count": 6, "tags": [], "creator": "fielding@apache.org", "attachment_id": null, "id": 124564, "time": "2009-01-31T12:13:02Z", "bug_id": 41748, "creation_time": "2009-01-31T12:13:02Z", "is_private": false, "text": "This turned out to be an OS issue."}]
[{"count": 0, "tags": [], "bug_id": 29962, "text": "This bug may be related to 28175, although I am on a different platform\nwith a slightly different setup, and I can reproduce the problem, so I am \nopening a new bugreport for this.\n\nFor many months, using different versions of Apache 2.0.x from\nDebian testing, we have been experiencing what can only be described as\nserious memory leaks when using mod_proxy and/or mod_rewrite to reverse \nproxy backend web servers. I am using MPM prefork.\n\nI have been able to troubleshoot this problem using network captures etc. on \nour production machines and I believe I can reproduce this problem on\na test system.\n\nTo reproduce this, I used an apache 1.3.29 on port 3000 on the localhost\nused as the backend server. In our live environment, this is on a\ndifferent machine.\nApache 2 listens on port 80 and is used as a reverse proxy for the\nserver on port 3000.\n\nFor the Apache1.3, I have /usr/lib/cgi-bin/do-post:\n\n#!/usr/bin/perl\nprint \"Content-type: text/plain\\n\\n\";\nfor ($t=0; $t<400000; ++$t) {\n        print \"o\"x99; print \"\\n\"\n}\n\nWhich essentially returns about 40Mb of data.\n\nFor the Apache2 config, I have the following virtual host:\n\n<VirtualHost *>\n        ServerName www.test.local\n        RewriteEngine On\n        ProxyRequests On\n        ProxyPreserveHost Off\n        RewriteCond %{HTTP_HOST}      ^www\\.test\\.local$\n        RewriteRule ^/(.*)            http://localhost:3000/$1     [P,L]\n</VirtualHost>\n\nNow, the following type of request:\n\nsneppef@xbox:~$ telnet localhost 80 > /tmp/t\nPOST /cgi-bin/do-post HTTP/1.1\nHost: www.test.local\nRange: bytes=20000000-35000000\n\nsuddenly bumps the memory use of an apache child process, in this\ncase to about 80Mb on my system, and this doesn't seem to get freed \nafterwards.\n\nThis is a close as I can simulate this on a test environment at this\nmoment. Things are even more dramatic on our production systems.\nThey have 1Gb of RAM, and the following virtualhost setting:\n\n<VirtualHost *>\n        ServerName www.xxxxxx.be\n        RewriteEngine On\n        ProxyRequests On\n        ProxyPreserveHost Off\n        CustomLog /var/log/apache2/www.caffo.be.log \"full\"\n        RewriteCond %{HTTP_HOST}      ^www\\.xxxxxx\\.be$\n        RewriteRule ^/(.*)            http://a.b.c.88/$1     [P,L]\n</VirtualHost>\n\n(I mangled the hostname and IP address in the above!)\n\ncombined with the following request (this is straight from a network\ncapture):\n\nPOST /xxxxxx/demodownload/download/Converter6_Trial_Setup.exe HTTP/1.0\nVia: 1.1 RGOPROXY\nContent-Length: 45\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/4.0 (compatible; MSIE 5.00; Windows 98)\nHost: www.xxxxxx.be\nRange: bytes=19092309-38183432\nAccept: */*\nReferer: http://www.xxxxxx.be/xxxxxx/demodownload/demodownload.downloadpage\nCache-Control: max-stale=0\nConnection: Keep-Alive\nX-BlueCoat-Via: 175D569BDF449936\n\ncustid=2813&p_type=CONVDEMO&download=Download\n\n(Again, the xxxxxx are mangled)\n\nBumps the memory use of an Apache2 process up to about 150Mb. Obviously a \nlimited number of these kinds of requests render our reverse proxy\nunusable.\n\nThe file in question is 38Mb large. The backend servers returns this\n(from tcpdump -X):\n\n0x0030   0782 c70e 4854 5450 2f31 2e31 2032 3030        ....HTTP/1.1.200\n0x0040   204f 4b0d 0a44 6174 653a 2057 6564 2c20        .OK..Date:.Wed,.\n0x0050   3037 204a 756c 2032 3030 3420 3231 3a33        07.Jul.2004.21:3\n0x0060   313a 3530 2047 4d54 0d0a 5365 7276 6572        1:50.GMT..Server\n0x0070   3a20 4f72 6163 6c65 2048 5454 5020 5365        :.Oracle.HTTP.Se\n0x0080   7276 6572 2050 6f77 6572 6564 2062 7920        rver.Powered.by.\n0x0090   4170 6163 6865 2f31 2e33 2e31 3220 2857        Apache/1.3.12.(W\n0x00a0   696e 3332 2920 4170 6163 6865 4a53 6572        in32).ApacheJSer\n0x00b0   762f 312e 3120 6d6f 645f 7373 6c2f 322e        v/1.1.mod_ssl/2.\n0x00c0   362e 3420 4f70 656e 5353 4c2f 302e 392e        6.4.OpenSSL/0.9.\n0x00d0   3561 206d 6f64 5f70 6572 6c2f 312e 3234        5a.mod_perl/1.24\n0x00e0   0d0a 436f 6e74 656e 742d 4c65 6e67 7468        ..Content-Length\n0x00f0   3a20 3338 3138 3334 3333 0d0a 436f 6e74        :.38183433..Cont\n0x0100   656e 742d 5479 7065 3a20 6170 706c 6963        ent-Type:.applic\n0x0110   6174 696f 6e2f 6f63 7465 742d 7374 7265        ation/octet-stre\n0x0120   616d 0d0a 0d0a 4d5a 9000 0300 0000 0400        am....MZ........\n\nFollowed by the complete file (38Mb)\n\napache2 returns only the requested byte range:\n\nHTTP/1.1 200 OK\nDate: Wed, 07 Jul 2004 21:28:14 GMT\nServer: Oracle HTTP Server Powered by Apache/1.3.12 (Win32) ApacheJServ/1.1\nmod_ssl/2.6.4 OpenSSL/0.9.5a mod_pe\nrl/1.24\nContent-Length: 19091124\nContent-Type: application/octet-stream\nContent-Range: bytes 19092309-38183432/38183433\nConnection: close\n\n...data...\n\nSurely if the backend server only returns about 38Mb of data and\nApache2 child process shouldn't consume 150Mb :-/\n\nI hope this helps... If you need any other info, let me know,\nas I have been able to reproduce this every time. I have tagged\nthis as a major issue, since bug 23567 seems to be considered\ncritical. I hope I am not exagerating, as this is my first\nbugreport on Apache. Do keep up the excellent work!\n\nRegards", "id": 60268, "time": "2004-07-07T21:39:29Z", "creator": "filip.sneppe@uptime.be", "creation_time": "2004-07-07T21:39:29Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 60298, "creation_time": "2004-07-08T12:52:19Z", "time": "2004-07-08T12:52:19Z", "bug_id": 29962, "text": "Yes, this is a problem with the byterange filter in 2.0, it will buffer the\nentire response in memory.\n", "is_private": false}, {"count": 2, "tags": [], "bug_id": 29962, "is_private": false, "text": "I am just wondering if there is currently *any* workaround for this ?\nA directive that disables byterange support ?\nBecause, isn't this a serious security issue in itself ? It means\nany user that can send http requests to an apache proxy can DoS it\nby sending even a limited number of specially crafted requests that\ndownload some large files somewhere...", "id": 61127, "time": "2004-07-26T14:33:49Z", "creator": "filip.sneppe@uptime.be", "creation_time": "2004-07-26T14:33:49Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 29962, "attachment_id": null, "id": 61133, "time": "2004-07-26T15:40:28Z", "creator": "nd@perlig.de", "creation_time": "2004-07-26T15:40:28Z", "is_private": false, "text": "You can DoS any HTTP server very easy. One could say, that's part of the\nprotocol ;-)\n\nAnyway,\n\nRequestHeader unset Range\n\nor somehting like this should work for you."}, {"count": 4, "tags": [], "bug_id": 29962, "text": "Don't forget\n\nHeader unset Accept-Ranges\n\nso the server isn't telling porkies about its capabilities", "id": 61141, "time": "2004-07-26T16:59:43Z", "creator": "nick@webthing.com", "creation_time": "2004-07-26T16:59:43Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 29962, "attachment_id": null, "id": 64347, "time": "2004-09-28T19:52:41Z", "creator": "tyler@nas.net", "creation_time": "2004-09-28T19:52:41Z", "is_private": false, "text": "I appear to be experiencing a similar problem when my users submit files to the\nserver.  I've noticed that a submitted assignment (POST), which has an attached\nword document, appears to cause one of the apache processes to inflate to\nbetween 300 - 750 megabytes in size.  This does not appear to be equal to the\nsize of the attachment."}, {"count": 6, "tags": [], "creator": "tyler@nas.net", "attachment_id": null, "text": "I hunted down the problem, it was an error in a purchased PHP script that loaded\nthe entire contents of our of our db tables into memory (which is now\napproaching the 800 megabytes threshhold).  However, when the script terminated\nthat memory was not being released by Apache 2.0.51.", "id": 64641, "time": "2004-10-05T19:37:53Z", "bug_id": 29962, "creation_time": "2004-10-05T19:37:53Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "The byterange filter memory consumption issue is now fixed for 2.1.5.\n\nhttp://svn.apache.org/viewcvs?rev=188797&view=rev", "id": 76410, "time": "2005-06-14T22:41:04Z", "bug_id": 29962, "creation_time": "2005-06-14T22:41:04Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 29962, "attachment_id": 16102, "text": "Created attachment 16102\nByterange patch for Apache 2.0.x\n\nI hope Joe won't mind if I post a version of the patch which he modified to\nwork with the Apache 2.0.x branch.  Thanks, Joe!", "id": 78661, "time": "2005-08-18T21:29:44Z", "creator": "dswhite42@yahoo.com", "creation_time": "2005-08-18T21:29:44Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 29962, "text": "Now merged for 2.0.55.  Thanks for the report.", "id": 78875, "time": "2005-08-23T10:36:47Z", "creator": "jorton@redhat.com", "creation_time": "2005-08-23T10:36:47Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 29962, "text": "\nI'm not sure that this has been fixed, I've downloaded the patch and have it\napplied yet, it still runs amuck.  I checked on my server this morning, and\nthere sat a process in apache holding onto 635MB of data.  Maybe this bug is\noccuring somewhere else.  I am in no way capable of tracking that down, but I do\nknow it's still occuring.\n", "id": 79043, "time": "2005-08-26T13:31:12Z", "creator": "mbarc.bowen@rcn.com", "creation_time": "2005-08-26T13:31:12Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 50836, "attachment_id": null, "is_private": false, "id": 144584, "time": "2011-02-26T14:05:18Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-02-26T14:05:18Z", "text": "I think some of the values returned by LifecycleState#isAvailable() are wrong.\n\n1. I am certain that MUST_DESTROY should return false, because it is a state that is later than stopped.\n2. I think that STOPPING_PREP should return false, because we can get there from the FAILED state.\n3. I think that STARTING should return false, because it is too early to return true there.\n\nAs a result, the following is the complete list of states are to return true in #isAvailable():\nSTARTED, MUST_STOP"}, {"count": 1, "tags": [], "text": "Agree with MUST_DESTROY.\n\nNeed to review the others.", "attachment_id": null, "id": 144585, "creator": "markt@apache.org", "time": "2011-02-26T14:22:21Z", "bug_id": 50836, "creation_time": "2011-02-26T14:22:21Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50836, "attachment_id": null, "id": 144586, "time": "2011-02-26T14:31:37Z", "creator": "markt@apache.org", "creation_time": "2011-02-26T14:31:37Z", "is_private": false, "text": "isAvailable() is aligned with when the public methods are available for use by other components. On that basis isAvailable() should return true for states STOPPING_PREP and STARTING. I'm sure there is scope to improve the documentation and MBean method descriptions to that effect."}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> are available for use by other components.\n\nThe \"public\" methods: I think those are methods that perform some work, like AccessLog#log(), not just any public methods.  Or you are talking about JMX here?\n\nRegarding STARTING:\n\nI think that in STARTING it is too early to call those methods:  the component has not completed its start up.\n\nE.g, if AccessLogValve#startInternal() is overriden in some child class, STARTING state will be set by AccessLogValve#startInternal(), before the child class method completes.\n\n\nRegarding STOPPING_PREP: \n\nMy only concern is that the previous state might be FAILED. When transitioning FAILED -> STOPPING_PREP the availability flag suddenly becomes \"true\".", "attachment_id": null, "id": 144587, "creator": "knst.kolinko@gmail.com", "time": "2011-02-26T14:54:47Z", "bug_id": 50836, "creation_time": "2011-02-26T14:54:47Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "markt@apache.org", "text": "(In reply to comment #3)\n> The \"public\" methods: I think those are methods that perform some work, like\n> AccessLog#log(), not just any public methods.  Or you are talking about JMX\n> here?\n\nI was quoting from the Lifecycle Javadoc. What is meant by public methods is not defined but I take it to mean \"any public method that isn't a property setter/getter or a lifecycle methods\". That could be better defined in the Lifecycle Javadoc.\n \n> Regarding STARTING:\n> \n> I think that in STARTING it is too early to call those methods:  the component\n> has not completed its start up.\n\nIt should be OK. Do you have an example of where it isn't?\n\n> E.g, if AccessLogValve#startInternal() is overriden in some child class,\n> STARTING state will be set by AccessLogValve#startInternal(), before the child\n> class method completes.\n\nProviding the class follows the guidelines in the Javadoc for Lifecycle and LifecycleBase that should be fine.\n\n> Regarding STOPPING_PREP: \n> \n> My only concern is that the previous state might be FAILED. When transitioning\n> FAILED -> STOPPING_PREP the availability flag suddenly becomes \"true\".\n\nI think we could safely move from FAILED to STOPPING in that case. It means changing the permitted Lifecycle transitions slightly but from a quick look at the code it should be ok.", "id": 144589, "time": "2011-02-26T15:34:28Z", "bug_id": 50836, "creation_time": "2011-02-26T15:34:28Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 50836, "is_private": false, "text": "(In reply to comment #4)\n> > Regarding STARTING:\n> > \n> > I think that in STARTING it is too early to call those methods:  the component\n> > has not completed its start up.\n> \n> It should be OK. Do you have an example of where it isn't?\n> \n\nI do not have one. I was thinking about AccessLog in context of bug 50835 (AccessLog#log() being called on uninitialized valve in unclear circumstances in some broken configuration), but I do not have any custom implementation.\n\nI am also concerned with StandardContext#getAvailable() delegating to LifecycleState#isAvailable().\n\n\nIf Child extends AccessLogValve, implementing Child#startInternal() to do not make the component available too soon essentially means that super.startInternal() should be called at the end of child's method, not sooner.\n\nTransition to STARTING means that Lifecycle.START_EVENT will be fired after the transition, but we are not waiting for the listeners to complete before declaring the component \"available\".\n\nTransition to STARTED is performed automatically in LifecycleBase#start(). All startup procedures for the component are completed in that state, and I think the STARTED state is better place to mark it as \"available\".\n\n> > Regarding STOPPING_PREP: \n> > \n> > My only concern is that the previous state might be FAILED. When transitioning\n> > FAILED -> STOPPING_PREP the availability flag suddenly becomes \"true\".\n> \n> I think we could safely move from FAILED to STOPPING in that case. It means\n> changing the permitted Lifecycle transitions slightly but from a quick look at\n> the code it should be ok.\n\nI like the idea. It means that we are not firing Lifecycle.BEFORE_STOP_EVENT, but that is not much to lose.", "id": 144592, "time": "2011-02-26T19:15:00Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-02-26T19:15:00Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "markt@apache.org", "text": "(In reply to comment #5)\n> I do not have one. I was thinking about AccessLog in context of bug 50835\n> (AccessLog#log() being called on uninitialized valve in unclear circumstances\n> in some broken configuration), but I do not have any custom implementation.\n\nIf the Javadoc is followed, I don't see how that bug happened. I'd be happy to revist this with a reproducible test case.\n\n> I am also concerned with StandardContext#getAvailable() delegating to\n> LifecycleState#isAvailable().\n\nIt is always possible to change the implementation of StandardContext#getAvailable() to check for a more limited set of states.\n\nI count 46 references to isAvailable(). I can see at least one place where changing that will break something (ContainerBase.addChildInternal()) and I am concerned that there will be places that are missed if we make this change.\n\n> If Child extends AccessLogValve, implementing Child#startInternal() to do not\n> make the component available too soon essentially means that\n> super.startInternal() should be called at the end of child's method, not\n> sooner.\n\nIt depends. That exact requirements are defined in the Javadoc and I am in the process of making that Javadoc even more explicit.\n\n> Transition to STARTING means that Lifecycle.START_EVENT will be fired after the\n> transition, but we are not waiting for the listeners to complete before\n> declaring the component \"available\".\n\nI'm happy with that. The listeners should be fired after the state change. Again, I'll clarify this in the Javadoc.\n\n> Transition to STARTED is performed automatically in LifecycleBase#start(). All\n> startup procedures for the component are completed in that state, and I think\n> the STARTED state is better place to mark it as \"available\".\n\n\"available\" means whatever we define it to mean. I'm happy with the way the current code works but can see lots of places where the Javadoc can be improved.\n\n> > I think we could safely move from FAILED to STOPPING in that case. It means\n> > changing the permitted Lifecycle transitions slightly but from a quick look at\n> > the code it should be ok.\n> \n> I like the idea. It means that we are not firing Lifecycle.BEFORE_STOP_EVENT,\n> but that is not much to lose.\n\nThat event can still be fired.\n\nI have a patch for most of the above, I just need to finish some of the Javadoc improvements.", "id": 144593, "time": "2011-02-27T05:49:00Z", "bug_id": 50836, "creation_time": "2011-02-27T05:49:00Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 50836, "attachment_id": null, "text": "I have applied a patch to 7.0.x that will be included in 7.0.9 that I believe addresses nearly all of the concerns raised in this issue. The bulk of the change clarifies what is meant by \"available\".\n\nThe outstanding issue is perhaps what StandardContext#getAvailable() returns but that is probably better discussed in a new issue / on the dev list if it is still of concern.", "id": 144594, "time": "2011-02-27T06:02:09Z", "creator": "markt@apache.org", "creation_time": "2011-02-27T06:02:09Z", "is_private": false}, {"count": 8, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "OK. I like it. Let's stop at this.", "id": 144599, "time": "2011-02-27T09:36:52Z", "bug_id": 50836, "creation_time": "2011-02-27T09:36:52Z", "is_private": false, "attachment_id": null}]
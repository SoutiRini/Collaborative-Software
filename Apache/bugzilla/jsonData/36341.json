[{"count": 0, "tags": [], "creator": "andreas@apache.org", "text": "Josias Thoeny:\n\n\nI have seen this error.\nI tried to debug this some time ago, but I didn't find out much.\n\nTo reproduce it, go to the site area of the default publication. Select\ne.g. the \"Document Type Examples\" page, copy it, and insert it\nsomewhere.\n\nHere is the relevant part of the stacktrace that I'm getting:\n\njava.io.UTFDataFormatException: Invalid byte 2 of 3-byte UTF-8 sequence.\n\tat org.apache.lenya.cms.metadata.MetaDataImpl.loadValues(MetaDataImpl.java:169)\n\tat org.apache.lenya.cms.metadata.MetaDataImpl.<init>(MetaDataImpl.java:82)\n\tat org.apache.lenya.cms.metadata.LenyaMetaData.<init>(LenyaMetaData.java:74)\n\tat\norg.apache.lenya.cms.metadata.MetaDataManager.getLenyaMetaData(MetaDataManager.java:80)\n\tat\norg.apache.lenya.cms.metadata.MetaDataManager.replaceMetaData(MetaDataManager.java:151)\n\tat\norg.apache.lenya.cms.repository.RepositoryManagerImpl.copy(RepositoryManagerImpl.java:40)\n\t... 100 more\nCaused by: java.io.UTFDataFormatException: Invalid byte 2 of 3-byte UTF-8 sequence.\n\tat org.apache.xerces.impl.io.UTF8Reader.invalidByte(Unknown Source)\n\tat org.apache.xerces.impl.io.UTF8Reader.read(Unknown Source)\n\tat org.apache.xerces.impl.XMLEntityScanner.load(Unknown Source)\n\tat org.apache.xerces.impl.XMLEntityScanner.scanContent(Unknown Source)\n\tat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanContent(Unknown\nSource)\n\tat\norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown\nSource)\n\tat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown\nSource)\n\tat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n\tat org.apache.xerces.parsers.DOMParser.parse(Unknown Source)\n\tat org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)\n\tat javax.xml.parsers.DocumentBuilder.parse(Unknown Source)\n\tat org.apache.lenya.xml.DocumentHelper.readDocument(DocumentHelper.java:173)\n\tat org.apache.lenya.cms.cocoon.source.SourceUtil.readDOM(SourceUtil.java:161)\n\tat org.apache.lenya.cms.metadata.MetaDataImpl.getDocument(MetaDataImpl.java:260)\n\tat org.apache.lenya.cms.metadata.MetaDataImpl.loadValues(MetaDataImpl.java:139)\n\t... 105 more\n\nHere is another way to get the same problem:\n- Create a document with an umlaut in the navigation title (the umlaut\nwill be written into the sitetree).\n- Perform an operation which changes the sitetree (e.g. create another\ndocument)\n\nI get the following stacktrace:\n<snip/>\nCaused by: java.io.UTFDataFormatException: Invalid byte 2 of 3-byte\nUTF-8 sequence.\n\tat org.apache.xerces.impl.io.UTF8Reader.invalidByte(Unknown Source)\n\tat org.apache.xerces.impl.io.UTF8Reader.read(Unknown Source)\n\tat org.apache.xerces.impl.XMLEntityScanner.load(Unknown Source)\n\tat org.apache.xerces.impl.XMLEntityScanner.scanContent(Unknown Source)\n\tat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanContent(Unknown\nSource)\n\tat\norg.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown\nSource)\n\tat org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown\nSource)\n\tat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n\tat org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n\tat org.apache.xerces.parsers.DOMParser.parse(Unknown Source)\n\tat org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)\n\tat javax.xml.parsers.DocumentBuilder.parse(Unknown Source)\n\tat org.apache.lenya.xml.DocumentHelper.readDocument(DocumentHelper.java:173)\n\tat org.apache.lenya.cms.cocoon.source.SourceUtil.readDOM(SourceUtil.java:161)\n\tat org.apache.lenya.cms.site.tree.DefaultSiteTree.<init>(DefaultSiteTree.java:83)\n\t... 51 more\n\n\nIt seems the problem occurs when lenya reads a non-ascii char from a\nfile and saves it again, using DocumentHelper/SourceUtil. If the special\nchar comes from a web-form, it seems to be saved correctly.\n\nCan anyone else reproduce this?\n\nI wonder if it might have something to do with the following code in\nSourceUtil.java, around line 195:\n\n    ....\n    OutputStream oStream = source.getOutputStream();\n    Writer writer = new OutputStreamWriter(oStream);\n    DocumentHelper.writeDocument(document, writer);\n    ....\n\nThe OutputStreamWriter assumes a default encoding, and does not respect\nthe encoding of the source. But that's just a guess, actually I'm not\nsure whether it's a reading or a writing problem.", "id": 78938, "time": "2005-08-24T18:17:17Z", "bug_id": 36341, "creation_time": "2005-08-24T18:17:17Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 36341, "attachment_id": null, "is_private": false, "id": 78967, "time": "2005-08-25T09:53:03Z", "creator": "oliver.schalch@wyona.com", "creation_time": "2005-08-25T09:53:03Z", "text": "Yes, I could reproduce that on Windows, lenya-trunk (1.4.x)."}, {"count": 2, "tags": [], "creator": "josias.thoeny@wyona.org", "text": "Created attachment 16198\npatch to fix the encoding problem\n\nThe problem seems to be twofold:\n1. Requests parameters are not decoded correctly \n2. DOMs are written with the wrong encoding\n\nto point 1:\nThe method org.apache.cocoon.environment.http.HttpRequest.get(String name) does\nnot perform any decoding of request parameters. \nThe patch changes usecases.js to use the method getParameter(String name) if\nthe parameter is a string. This method decodes the string with the correct\nencoding.\nI'm not sure if that's the only place where this problem occurs.\n\nto point 2:\nI hardcoded the utf-8 encoding in SourceUtil.java. Not sure if that's a good\nthing to do.", "id": 78989, "time": "2005-08-25T15:06:06Z", "bug_id": 36341, "creation_time": "2005-08-25T15:06:06Z", "is_private": false, "attachment_id": 16198}, {"count": 3, "attachment_id": null, "bug_id": 36341, "is_private": false, "id": 78991, "time": "2005-08-25T15:15:43Z", "creator": "manos_lists@geekologue.com", "creation_time": "2005-08-25T15:15:43Z", "tags": [], "text": "Note sure how relevant this is, but regarding request params: we have been using\na servlet filter to solve this issue in all our J2EE apps for years. What we do is:\n\n* Serve all HTTP responses in UTF-8 (so that browsers also make requests with\nthe same encoding)\n* Change all request encodings to UTF-8 in the servlet filter\n(request.setCharacterEncoding)\n\nIt has proven a great solution and works transparently for all other code (with\nthe possible exception of other filters that may be called before the one that\nsets the request encoding, this can be unpredictable in J2EE 1.3)"}, {"count": 4, "attachment_id": null, "bug_id": 36341, "text": "You mean a filter as described in \nhttp://wiki.apache.org/cocoon/RequestParameterEncoding,\nsection \"Problems with components using the original HttpServletRequest\"?\nIt looks like a clean solution to me.", "id": 78995, "time": "2005-08-25T15:58:26Z", "creator": "josias.thoeny@wyona.org", "creation_time": "2005-08-25T15:58:26Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "gregor@apache.org", "is_private": false, "text": "i tried said filter (which you can find in the tomcat sources) a couple months\nago without success, but maybe i didnt do it right:\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=34340#c1\n\n", "id": 78997, "time": "2005-08-25T16:09:06Z", "bug_id": 36341, "creation_time": "2005-08-25T16:09:06Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 36341, "attachment_id": 16201, "is_private": false, "id": 79004, "time": "2005-08-25T17:00:37Z", "creator": "manos_lists@geekologue.com", "creation_time": "2005-08-25T17:00:37Z", "text": "Created attachment 16201\nSample Servlet Filter to set the request encoding\n\nNope, i meant a servlet filter implementing javax.servlet.Filter. I am\nattaching a sample i use often with some things stripped for convinience (so i\nmay have an error here) and including the  fragments for the web.xml filter\nmapping below (i just typed them though, check for spelling!).\n\nThe theory is that the user agent makes a UTF-8 request if the current page is\nalso in UTF-8, but the servlet container cannot be sure the client is indeed\nusing UTF-8. The solution is to set explicitly the (Http)ServletRequest\nencoding for before further processing (i.e. the cocoon servlet). \n\nhth,\n\nManos\n\nPS: You'll need to map the servlet in web.xml:\n\n\n<filter>\n<filter-name>FixCharacterEncodingFilter</filter-name>\n<description>Sets the character encoding to use for interpreting request \nparams</description>\n<filter-class>com.geekologue.common.FixCharacterEncodingFilter</filter-class>\n<init-param>\n<param-name>encoding</param-name>\n<param-value>UTF-8</param-value>\n<description>the character encoding to use for interpreting request \nparam</description>\n</init-param>\n</filter>\n\n\n<filter-mapping>\n<filter-name>FixCharacterEncodingFilter</filter-name>\n<url-pattern>*</url-pattern>\n</filter-mapping>"}, {"count": 7, "tags": [], "text": "yeah, i used\nhttp://cvs.apache.org/viewcvs.cgi/jakarta-commons-sandbox/filters/src/java/org/apache/commons/filters/SetCharacterEncodingFilter.java?rev=1.3&view=log\nbut as i said, it didn't work.", "is_private": false, "id": 79006, "creation_time": "2005-08-25T17:14:28Z", "time": "2005-08-25T17:14:28Z", "creator": "gregor@apache.org", "bug_id": 36341, "attachment_id": null}, {"count": 8, "tags": [], "creator": "josias.thoeny@wyona.org", "text": "Created attachment 16211\npatch with filter\n\nThis new patch uses a filter, and it seems to work. However, it's still\nnecessary to patch SourceUtil.java, but that's included in the diff.", "id": 79054, "time": "2005-08-26T15:07:29Z", "bug_id": 36341, "creation_time": "2005-08-26T15:07:29Z", "is_private": false, "attachment_id": 16211}, {"count": 9, "tags": [], "creator": "josias.thoeny@wyona.org", "is_private": false, "text": "Created attachment 16212\nfilters.jar contains the filter\n\nThis jar contains the Filter (from Tomcat 5.0.28).\nIt must be copied into the lib directory.", "id": 79055, "time": "2005-08-26T15:10:05Z", "bug_id": 36341, "creation_time": "2005-08-26T15:10:05Z", "attachment_id": 16212}, {"count": 10, "attachment_id": null, "bug_id": 36341, "is_private": false, "id": 81905, "time": "2005-10-28T18:14:53Z", "creator": "felix.roethenbacher@wyona.com", "creation_time": "2005-10-28T18:14:53Z", "tags": [], "text": "Java 5.0 provides a method called getInputEncoding()\n\nhttp://java.sun.com/j2se/1.5.0/docs/api/org/w3c/dom/Document.html#getInputEncoding()\n\nbut for the time beeing we have to stay with a fixed UTF-8."}, {"count": 11, "tags": [], "creator": "josias.thoeny@wyona.org", "is_private": false, "text": "It looks like the servlet filter does not solve the issue, because it works with\nHttpServletRequest.setCharacterEncoding(), which normally only applies to the\nrequest body, not the URI. This, however, is not consistent among different\nservlet containers.\nWith tomcat-5.0.28 it does not apply to the URI unless\nuseBodyEncodingForURI=\"true\" is set in the Connector in server.xml. Without this\nparameter, only POST requests are correctly decoded, but not GET requests.\nI think we cannot expect people to change their server.xml, so we cannot use the\nservlet filter.\n\nSee also\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=23929\nhttp://jetty.mortbay.org/jetty/faq?s=900-Content&t=International\n\nI'm currently testing another solution, similar to the first patch I submitted.", "id": 84751, "time": "2006-01-18T18:21:58Z", "bug_id": 36341, "creation_time": "2006-01-18T18:21:58Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "josias.thoeny@wyona.org", "is_private": false, "text": "fixed in rev 370449\n(Don't use OutputStreamWriter because it changes the encoding of the stream. \nUse getParameter() instead of get() for cocoon's HttpRequest class because it\nfixes the encoding. \nChanged the default uri encoding of jetty to ISO-8859-1 so it is equal to\ntomcats default encoding.)", "id": 84769, "time": "2006-01-19T10:49:01Z", "bug_id": 36341, "creation_time": "2006-01-19T10:49:01Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "There are possible buffer overflows in InternalOutputBuffer. I am\nattaching patches to dynamically flush buf when it is full. \n\nOne way to trigger this exception is to add a header to the response\nwhich will be longer than maxHttpHeaderSize parameter (4K by default).\n\nHere is a typical stack trace:\n\nArrayIndexOutOfBoundsException: 37522952\nat\norg.apache.coyote.http11.InternalOutputBuffer.write(InternalOutputBuffer.java(Inline\n\nat\norg.apache.coyote.http11.InternalOutputBuffer.sendHeader(InternalOutputBuffer.java(I\n\nat\norg.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java(Compil\n\nat org.apache.coyote.http11.Http11Processor.action(Http11Processor.java(Compiled\nCode))\nat org.apache.coyote.Response.action(Response.java(Inlined Compiled Code))\nat org.apache.coyote.Response.sendHeaders(Response.java(Inlined Compiled Code))\nat org.apache.coyote.tomcat5.OutputBuffer.doFlush(OutputBuffer.java(Compiled Code))\nat org.apache.coyote.tomcat5.OutputBuffer.close(OutputBuffer.java(Compiled Code))\nat\norg.apache.coyote.tomcat5.CoyoteResponse.finishResponse(CoyoteResponse.java(Compiled\n\nat org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java(Compiled\nCode))\nat\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java(Compiled Code)\n\nat\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Ht\n\nat\norg.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java(Compiled Code)\n\nat\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683)\nat java.lang.Thread.run(Thread.java:568)", "is_private": false, "id": 80210, "creation_time": "2005-09-20T21:24:52Z", "time": "2005-09-20T21:24:52Z", "creator": "greg-apache-bugs@nest.cx", "bug_id": 36741, "attachment_id": null}, {"count": 1, "tags": [], "creator": "greg-apache-bugs@nest.cx", "text": "Created attachment 16465\npatch 1 out of 2", "id": 80211, "time": "2005-09-20T21:26:05Z", "bug_id": 36741, "creation_time": "2005-09-20T21:26:05Z", "is_private": false, "attachment_id": 16465}, {"count": 2, "tags": [], "text": "Created attachment 16466\npatch 2 out of 2", "is_private": false, "id": 80212, "creator": "greg-apache-bugs@nest.cx", "time": "2005-09-20T21:26:35Z", "bug_id": 36741, "creation_time": "2005-09-20T21:26:35Z", "attachment_id": 16466}, {"count": 3, "tags": [], "text": "It's not a \"buffer overflows\": the HTTP request and response buffers are\nvoluntarily limited in terms of size. So, sorry, -1.", "is_private": false, "id": 80231, "creation_time": "2005-09-20T22:26:02Z", "time": "2005-09-20T22:26:02Z", "creator": "remm@apache.org", "bug_id": 36741, "attachment_id": null}, {"count": 4, "tags": [], "creator": "greg-apache-bugs@nest.cx", "attachment_id": null, "is_private": false, "id": 80294, "time": "2005-09-22T01:52:52Z", "bug_id": 36741, "creation_time": "2005-09-22T01:52:52Z", "text": "The idea behind this patch is to enable large headers being sent without\nusing up excessive amounts of memory. For example, our application sometimes\nsets a lot of cookies. Instead of always preallocation memory and sometimes\nrunning out of buffer space when we cannot predict the cookie sizes correctly,\nwe send everything through the same buffer.\n\nAlso, the patch avoids a hard to diagnose exception. If you look around the\nweb, you will see that other people ran into this condition as well. I have\nnot seen any of them successfully identify the problem much less point at\nmaxHttpHeaderSize as a workaround.\n\nAs to calling this condition a \"buffer overflow\", it would be that\nhad this code not been written in Java.\n\nhttp://forums.atlassian.com/thread.jspa?threadID=6121&tstart=75\nhttp://mail-archive.objectweb.org/ops-users/2005-06/msg00109.html\nhttp://swforum.sun.com/jive/thread.jspa?threadID=50844&messageID=185391"}, {"count": 5, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "(In reply to comment #4)\n> As to calling this condition a \"buffer overflow\", it would be that\n> had this code not been written in Java.\n\nYes, but this is Java, where \"buffer overflow\" does not exist. -1 and WONTFIX\nmean: no sorry. Please don't reopen the report.", "id": 80306, "time": "2005-09-22T07:57:48Z", "bug_id": 36741, "creation_time": "2005-09-22T07:57:48Z", "is_private": false}, {"count": 6, "tags": [], "creator": "yguan@ask.com", "attachment_id": null, "is_private": false, "id": 105155, "time": "2007-07-06T17:47:21Z", "bug_id": 36741, "creation_time": "2007-07-06T17:47:21Z", "text": "Hi Remy,\n\nWe do see this exception happening a lot on our production server. And by\nchasing down the code, System.arraycopy() are throwing the exceptions because it\ndoesn't check the remaining size when appending more stuff into it.  So I agree\nwith Greg Steuck, just wondering why his fix never made into code base. \n\nCorrect me if I am wrong. \n\nYitao Guan\nyguan@ask.com "}]
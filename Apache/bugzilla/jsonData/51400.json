[{"count": 0, "tags": [], "creator": "dengberg@evernote.com", "attachment_id": 27186, "is_private": false, "id": 147307, "time": "2011-06-21T00:47:24Z", "bug_id": 51400, "creation_time": "2011-06-21T00:47:24Z", "text": "Created attachment 27186\nPatch with optimizations\n\nWe're using Tomcat 6 for a high-volume, high-concurrency service (Evernote).  At times, we've seen a performance slowdown within the service, which we've traced to a concurrency flaw within the JVM code that translates named encodings (e.g. \"utf-8\") into Charsets.  This translates into a number of stuck threads trying to convert a byte array to a String or vice versa, ala:\n\n  java.lang.Thread.State: BLOCKED (on object monitor)\n       at sun.nio.cs.FastCharsetProvider.charsetForName(Unknown Source)\n       - waiting to lock <0x00007ff3b4cc85b0> (a sun.nio.cs.StandardCharsets)\n       at java.nio.charset.Charset.lookup2(Unknown Source)\n       at java.nio.charset.Charset.lookup(Unknown Source)\n       at java.nio.charset.Charset.isSupported(Unknown Source)\n       at java.lang.StringCoding.lookupCharset(Unknown Source)\n       at java.lang.StringCoding.decode(Unknown Source)\n       at java.lang.String.<init>(Unknown Source)\n       at org.apache.tomcat.util.buf.ByteChunk.toStringInternal(ByteChunk.java:499)\n       at org.apache.tomcat.util.buf.StringCache.toString(StringCache.java:315)\n       at org.apache.tomcat.util.buf.ByteChunk.toString(ByteChunk.java:492)\n       at org.apache.tomcat.util.buf.MessageBytes.toString(MessageBytes.java:213)\n       at org.apache.tomcat.util.http.MimeHeaders.getHeader(MimeHeaders.java:319)\n       at org.apache.coyote.Request.getHeader(Request.java:330)\n       at org.apache.catalina.connector.Request.getHeader(Request.java:1854)\n       at org.apache.catalina.connector.RequestFacade.getHeader(RequestFacade.java:643)\n\nThis isn't a true deadlock, since each thread will eventually finish, but it can\nsignificantly affect concurrency if there are a number of threads making heavy use of:\n   new String(byte[] b, String encoding)\n   String.getBytes()\n   String.getBytes(String encoding)\n\nThis is, unfortunately, a known bottleneck within the JVM:\nhttp://blog.inuus.com/vox/2008/05/the-mysteries-of-java-character-set-performance.html\nhttp://halfbottle.blogspot.com/2009/07/charset-continued-i-wrote-about.html\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6790402\n\n\nTo avoid this bottleneck in the JVM, we've patched our server to use the explicit Charset object for String encoding rather than the name of the charset, and then added a ConcurrentHashMap<String, Charset> to lookup charsets by encodings.\n\nI've attached a patch with our fixes on 6.0.32\n\nJust as a random FYI - the same issue hits MySQL's Java connector, so we'd occasionally see Tomcat and MySQL fighting over this same JVM chokepoint:  http://bugs.mysql.com/bug.php?id=61105"}, {"count": 1, "tags": [], "bug_id": 51400, "attachment_id": 27186, "text": "Comment on attachment 27186\nPatch with optimizations\n\nMark patch as patch so it can be viewed in the browser.", "id": 147316, "time": "2011-06-21T11:16:15Z", "creator": "markt@apache.org", "creation_time": "2011-06-21T11:16:15Z", "is_private": false}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Thanks for the report and the patch.\n\nI've gone through the 7.0.x codebase and changed almost all of the calls to:\n   new String(byte[] b, String encoding)\n   String.getBytes()\n   String.getBytes(String encoding)\nto use a Charset. That fix will be in 7.0.17 onwards.\n\nThe 7.0.x patch is a lot larger than the patch you propose for 6.0.x. I'm currently considering what to propose for 6.0.x.", "id": 147326, "time": "2011-06-21T14:32:27Z", "bug_id": 51400, "creation_time": "2011-06-21T14:32:27Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 51400, "is_private": false, "text": "Hello,\nplease note that String.getBytes(Charset charset), new String(byte[] bytes, Charset charset) etc. are available since Java 1.6 only, so these probably can't be used for Tomcat 6.\n\nAccording to the second link in the report, Charset.decode() / Charset.encode() (with ByteBuffer/CharBuffer) can be used for Strings.", "id": 147329, "time": "2011-06-21T15:05:53Z", "creator": "kpreisser@apache.org", "creation_time": "2011-06-21T15:05:53Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 51400, "attachment_id": null, "text": "Unfortunately, Tomcat 6 implements Servlet 2.5 and that requires Java 1.5 support. That means we can't use any of the String method that use Charset.\n\nhttp://halfbottle.blogspot.com/2009/07/charset-continued-i-wrote-about.html does provide a pure Java 1.5 way of doing this.\n\nWith this in mind, I am going to go propose a variation of your patch for 6.0.x that doesn't use any 1.6 methods. Back-porting the 7.0.x patch is too big a change. I would rather focus on the known issue for 6.0.x.", "id": 147330, "time": "2011-06-21T15:10:00Z", "creator": "markt@apache.org", "creation_time": "2011-06-21T15:10:00Z", "is_private": false}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": 27189, "text": "Created attachment 27189\nUpdated patch that works with Java 1.5", "id": 147337, "time": "2011-06-21T16:09:57Z", "bug_id": 51400, "creation_time": "2011-06-21T16:09:57Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 51400, "attachment_id": null, "id": 147338, "time": "2011-06-21T16:13:44Z", "creator": "markt@apache.org", "creation_time": "2011-06-21T16:13:44Z", "is_private": false, "text": "Proposed for 6.0.x"}, {"count": 7, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": null, "is_private": false, "id": 147349, "time": "2011-06-21T19:25:02Z", "bug_id": 51400, "creation_time": "2011-06-21T19:25:02Z", "text": "Hi,\n\ncould/should this also be fixed for calls to new OutputStreamWriter(OutputStream out, String charsetName)?\n\nFor example, org.apache.tomcat.util.buf.WriteConvertor (in C2BConverter.java) which seems to be used for ServletResponse.getWriter() calls the constructor of OutputStreamWriter with charsetName as String, and in the Sun Implementation this calls Charset.forName() / Charset.lookup()."}, {"count": 8, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "Maybe we could cache not only found charsets, but charset misses as well.", "id": 147351, "time": "2011-06-22T00:18:40Z", "bug_id": 51400, "creation_time": "2011-06-22T00:18:40Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 51400, "attachment_id": null, "text": "Hi,\n\nwould caching charset misses be a good idea, if the Encoding strings can also be received from external sources?\n\nFor example, if a client makes a POST request to a Servlet and sends this header: \n\nContent-Type: application/x-www-form-urlencoded; charset=this-is-a-non-existing-charset\n\nand a Servlet makes a call to HttpServletRequest.getParameter(...), then o.a.tomcat.util.buf.B2CConverter.getCharset(String) will be called with a value of \"this-is-a-non-existing-charset\". If a client would make tons of requests with random, invalid charset strings and these misses would be added to a List, couldn't it lead to a memory leak? (if they would never be deleted)\n\nHowever, there is static method Charset.availableCharsets() which returns a SortedMap<String, Charset> of all charsets available by the current JVM. Maybe this list could be used to build a Map of all available charsets (the aliases returned by Charset.aliases() would also have to be added)? Then missing charsets could also be found fast.\n\nHowever, I think, in B2CConverter.getCharset() the encoding string should be converted to lower-case/upper-case before a lookup in the Map, to avoid multiple entries (\"uTF-8\", \"UtF-8\" etc.).", "id": 147402, "time": "2011-06-23T14:08:49Z", "creator": "kpreisser@apache.org", "creation_time": "2011-06-23T14:08:49Z", "is_private": false}, {"count": 10, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "is_private": false, "id": 147404, "time": "2011-06-23T14:47:42Z", "bug_id": 51400, "creation_time": "2011-06-23T14:47:42Z", "text": "> would caching charset misses be a good idea, if the Encoding strings can also\n> be received from external sources?\n\n+1 to Konstantin Prei\u00dfer's DOS concerns.\n\n> However, there is static method Charset.availableCharsets() which returns a\n> SortedMap<String, Charset> of all charsets available by the current JVM. Maybe\n> this list could be used to build a Map of all available charsets (the aliases\n> returned by Charset.aliases() would also have to be added)? Then missing\n> charsets could also be found fast.\n\nIf you read some of the online posts linked from this BZ issue, you'll see claims that pre-populating such a cache does not have a noticeable impact on performance. Honestly, I'm okay not pre-populating things because there are probably a dozen encodings that get any significant amount of real use on the web, while Charset.availableCharsets returns 163 different obscure character sets.\n\nI suppose it's a fairly small set of encodings, but with little benefit, there's no reason IMO to pre-populate.\n\n> However, I think, in B2CConverter.getCharset() the encoding string should be\n> converted to lower-case/upper-case before a lookup in the Map, to avoid\n> multiple entries (\"uTF-8\", \"UtF-8\" etc.).\n\nActually, I might leave the case in-tact for performance considerations. Yes, it's true that utf-8, UTF-8, uTf-8, UTf-8, UtF-8, etc. would all be the same, I suspect that only \"utf-8\" and \"UTF-8\" will be used in the wild with any reasonable frequency. Normalizing case for every lookup is probably a waste of time, unless there are significant concerns of DOS using long, non-normalized permutations of valid encodings (longest is x-MacCentralEurope with 17 characters to play with). 17 characters is a lot of permutations (~2MiB), though."}, {"count": 11, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": null, "text": "Hi Christopher,\n\n(In reply to comment #10)\n> If you read some of the online posts linked from this BZ issue, you'll see\n> claims that pre-populating such a cache does not have a noticeable impact on\n> performance. Honestly, I'm okay not pre-populating things because there are\n> probably a dozen encodings that get any significant amount of real use on the\n> web, while Charset.availableCharsets returns 163 different obscure character\n> sets.\n> \n> I suppose it's a fairly small set of encodings, but with little benefit,\n> there's no reason IMO to pre-populate.\nYou're right; however if I read the reports correctly, this is true if charsets with valid names only are used for the lookup. But everytime when there is a loopkup for a non-existing Charset, the JVM-synchronized Charset.lookup() is called. Probably to speed this up, Konstantin Kolinko suggested to cache charset missings.\n\nIf a list with all avaliable charsets would be pre-populated, including their aliases, missing charsets could also be determined fast. \n\n> Actually, I might leave the case in-tact for performance considerations. Yes,\n> it's true that utf-8, UTF-8, uTf-8, UTf-8, UtF-8, etc. would all be the same, I\n> suspect that only \"utf-8\" and \"UTF-8\" will be used in the wild with any\n> reasonable frequency. Normalizing case for every lookup is probably a waste of\n> time, unless there are significant concerns of DOS using long, non-normalized\n> permutations of valid encodings (longest is x-MacCentralEurope with 17\n> characters to play with). 17 characters is a lot of permutations (~2MiB),\n> though.\nWell, on my Windows machine the longest alias (not canonical name) of a charset is \"Extended_UNIX_Code_Packed_Format_for_Japanese\" which consists of 39 muatble characters. The current (trunk) implementation in o.a.tomcat.util.buf.B2CConverter.getCharset() does not normalize the name, so a Client could send requests with 2^39 permutations in a Content-Type header (which would make 49 TiB of Charset strings) ;-)", "id": 147406, "time": "2011-06-23T15:25:01Z", "bug_id": 51400, "creation_time": "2011-06-23T15:25:01Z", "is_private": false}, {"count": 12, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "> > I suppose it's a fairly small set of encodings, but with little benefit,\n> > there's no reason IMO to pre-populate.\n>\n> You're right; however if I read the reports correctly, this is true if charsets\n> with valid names only are used for the lookup. But everytime when there is a\n> loopkup for a non-existing Charset, the JVM-synchronized Charset.lookup() is\n> called. Probably to speed this up, Konstantin Kolinko suggested to cache\n> charset missings.\n\nDuh. I hadn't thought of spurious lookups causing their own synchronization disasters.\n\nPerhaps the invalid-charset cache could be limited in some way: MRU caches are easy to build with the standard Java library.\n\n> If a list with all avaliable charsets would be pre-populated, including their\n> aliases, missing charsets could also be determined fast. \n\nTrue: if the encoding is not supported by the JVM, then it's invalid no matter what. In that case, case normalization is probably a good thing to do: if it's not in the case (after normalization), then it's not valid... no reason to ever call Charset.lookup() after startup.\n\n> Well, on my Windows machine the longest alias (not canonical name) of a charset\n> is \"Extended_UNIX_Code_Packed_Format_for_Japanese\" which consists of 39 mutable\n> characters.\n\nWow.\n\n> The current (trunk) implementation in\n> o.a.tomcat.util.buf.B2CConverter.getCharset() does not normalize the name, so a\n> Client could send requests with 2^39 permutations in a Content-Type header\n> (which would make 49 TiB of Charset strings) ;-)\n\nMy math might be wrong, too, but I believe that's only 512GiB if names are 1-byte-per-char, but I think Java does 2-bytes-per-char, so it's 1TiB.\n\nYou're right, though: that's pretty huge.\n\n+1 to case normalization.\n+1 to LUT pre-population.\n-1 to LUT miss caching: it's totally unnecessary given the above.", "id": 147414, "time": "2011-06-23T20:02:11Z", "bug_id": 51400, "creation_time": "2011-06-23T20:02:11Z", "is_private": false}, {"count": 13, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": 27202, "text": "Created attachment 27202\nPatch to prepopulate available charsets\n\nI made a example of a patch which uses a HashMap to prepopulate all available Charsets in the current JVM when the class is initialized (I'm sorry if I did something wrong, I didn't made a patch before).\n\nThe patch adds all available charsets and their aliases (by converting them to lower-case) to the Map. The case normalization solves the DoS danger when a Client makes requests with lot of different case permutations of the same charset name, and it allows detection of missing charsets without calling Charset.forName().", "id": 147415, "time": "2011-06-23T20:24:24Z", "bug_id": 51400, "creation_time": "2011-06-23T20:24:24Z", "is_private": false}, {"count": 14, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "Thanks for the patch -- it looks just fine.\n\nIf you wanted to, you could even remove the explicit use of SortedMap and just use \"Charset.availableCharsets().entrySet()\" as your Iterable.", "id": 147416, "time": "2011-06-23T20:44:01Z", "bug_id": 51400, "creation_time": "2011-06-23T20:44:01Z", "is_private": false}, {"count": 15, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "The patch doesn't correctly address the DOS concerns, neither does it cache misses.", "id": 147524, "time": "2011-06-27T13:18:35Z", "bug_id": 51400, "creation_time": "2011-06-27T13:18:35Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 51400, "attachment_id": null, "id": 147526, "time": "2011-06-27T13:51:46Z", "creator": "markt@apache.org", "creation_time": "2011-06-27T13:51:46Z", "is_private": false, "text": "I've updated the 7.0.x code to:\n- address the DOS concerns\n- pre-populate the cache\n- ensure cache misses are efficient\n\nI'll create a patch for 6.0.x shortly."}, {"count": 17, "tags": [], "creator": "markt@apache.org", "attachment_id": 27211, "text": "Created attachment 27211\nUpdated patch\n\nUpdated patch that works with Java 5, pre-populates the cache and handles the DOS concerns. This is still focussed on the areas reported by the OP where issues were observed.", "id": 147527, "time": "2011-06-27T14:07:00Z", "bug_id": 51400, "creation_time": "2011-06-27T14:07:00Z", "is_private": false}, {"count": 18, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": null, "text": "Hi Mark,\n\ndoes the patch not correctly address DoS and charset misses because I didn't use Locale.US? (Nothing would be added to the Map after initialization, so I can't see a DoS danger there or how it would not cache misses (besides some \"false-positives\" with incorrect charset strings in other Locales)).\n\nHowever, I see that the patch applied to trunk doesn't add the charset aliases to the Map, which means Charset strings like \"utf8\" don't work anymore, but they worked before that change, because Charset.forName or new String(byte[], String charsetName) allow charset aliases to be used as encoding names. That is why I also added the aliases to the Map.", "id": 147528, "time": "2011-06-27T14:40:57Z", "bug_id": 51400, "creation_time": "2011-06-27T14:40:57Z", "is_private": false}, {"count": 19, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "(In reply to comment #18)\n> Hi Mark,\n> \n> does the patch not correctly address DoS and charset misses because I didn't\n> use Locale.US?\n\nMy bad. I mis-read the patch (too  much time working with Eclipse where the old and new versions are the other way around). Your patch is fine.\n\n> However, I see that the patch applied to trunk doesn't add the charset aliases\n> to the Map, which means Charset strings like \"utf8\" don't work anymore, but\n> they worked before that change, because Charset.forName or new String(byte[],\n> String charsetName) allow charset aliases to be used as encoding names. That is\n> why I also added the aliases to the Map.\n\nYep - I missed that too. I'll add that shortly.", "id": 147529, "time": "2011-06-27T14:46:55Z", "bug_id": 51400, "creation_time": "2011-06-27T14:46:55Z", "is_private": false}, {"count": 20, "tags": [], "creator": "markt@apache.org", "attachment_id": 27212, "text": "Created attachment 27212\nPatch for tc6.0.x\n\nThird attempt", "id": 147530, "time": "2011-06-27T15:21:10Z", "bug_id": 51400, "creation_time": "2011-06-27T15:21:10Z", "is_private": false}, {"count": 21, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": 27213, "text": "Created attachment 27213\nSmall patch to update C2BConverter\n\nHi Mark,\n\n(In reply to comment #19)\n> My bad. I mis-read the patch (too  much time working with Eclipse where the old\n> and new versions are the other way around). Your patch is fine.\n\n> Yep - I missed that too. I'll add that shortly.\n\nThanks!\n\nWell, I don't mean to be annoying or something, but.. It seems that you forgot to convert the aliases to lower-case before adding them to the Map, which also would cause \"utf8\" not to work. ;-)\n\nMay I suggest to also update o.a.tomcat.util.buf.C2BConverter to use a Charset (because it seems this is used when calling HttpServletResponse.getWriter())? Please see attached (small) patch.", "id": 147533, "time": "2011-06-27T16:06:52Z", "bug_id": 51400, "creation_time": "2011-06-27T16:06:52Z", "is_private": false}, {"count": 22, "tags": [], "creator": "markt@apache.org", "attachment_id": 27214, "text": "Created attachment 27214\nPatch for tc6.0.x\n\nThis just isn't my day ;)\n\n7.0.x is patched.\n\nUpdated 6.0.x patch attached.", "id": 147534, "time": "2011-06-27T16:10:54Z", "bug_id": 51400, "creation_time": "2011-06-27T16:10:54Z", "is_private": false}, {"count": 23, "tags": [], "creator": "markt@apache.org", "attachment_id": 27219, "text": "Created attachment 27219\nPatch for tc6.0.x\n\nUpdated patch based on review comments", "id": 147543, "time": "2011-06-28T07:37:05Z", "bug_id": 51400, "creation_time": "2011-06-28T07:37:05Z", "is_private": false}, {"count": 24, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": null, "text": "Hi Mark,\ndid you see my point about C2BConverter? I can see that you marked that patch as obsolete (it was for C2BConverter, not B2CConverter), but in trunk, C2BConverter still uses the Encoding String instead of a Charset to create a new IntermediateOutputStream (but I forgot to remove \"throws UnsupportedEncodingException\" in the patch).", "id": 147557, "time": "2011-06-28T12:45:26Z", "bug_id": 51400, "creation_time": "2011-06-28T12:45:26Z", "is_private": false}, {"count": 25, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "C2BConvertor patched with a slightly modified patch for 7.0.x. I don't propose back-porting this to 6.0.x", "id": 147562, "time": "2011-06-28T16:07:11Z", "bug_id": 51400, "creation_time": "2011-06-28T16:07:11Z", "is_private": false}, {"count": 26, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": null, "text": "Thanks!", "id": 147576, "time": "2011-06-28T18:48:32Z", "bug_id": 51400, "creation_time": "2011-06-28T18:48:32Z", "is_private": false}, {"count": 27, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Fixed in 6.0.x and will be included in 6.0.33 onwards.", "id": 147583, "time": "2011-06-28T23:26:28Z", "bug_id": 51400, "creation_time": "2011-06-28T23:26:28Z", "is_private": false}, {"count": 28, "tags": [], "creator": "mlists@juma.me.uk", "attachment_id": null, "text": "Note that there have been changes in this area in Java 7:\n\n\"Using Charset as the parameter does not bring you any performance benefit (in fact it's slower and bloat) in most use scenarios, use it with caution.\"\nhttp://blogs.oracle.com/xuemingshen/entry/faster_new_string_bytes_cs\n\nThe blog above talks about single-byte encodings, but there has been a follow-up commit for UTF-8 earlier this year.", "id": 148011, "time": "2011-07-19T15:56:24Z", "bug_id": 51400, "creation_time": "2011-07-19T15:56:24Z", "is_private": false}, {"count": 29, "tags": [], "bug_id": 51400, "attachment_id": 27219, "id": 172136, "time": "2014-01-07T06:05:02Z", "creator": "pikymiky9114@gmail.com", "creation_time": "2014-01-07T06:05:02Z", "is_private": false, "text": "Comment on attachment 27219\nPatch for tc6.0.x\n\nHelp to"}]
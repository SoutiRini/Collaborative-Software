[{"attachment_id": null, "tags": [], "bug_id": 49926, "is_private": false, "count": 0, "id": 139863, "time": "2010-09-14T08:26:02Z", "creator": "sjjrbhz2@yahoo.com", "creation_time": "2010-09-14T08:26:02Z", "text": "I have a suggestion for the developers of Apache related to mod_log_config\nor mod_log_forensics:\n \n1)- To allow mod_log_config to write the log file with a first log entry with basic information about the request before it's processed further (that is, after receiving the headers). The current logging format would be written after the request is processed. A unique \"log ID\", just like the \"forensic ID\", should be available on both entries.\n\n2)- Or to allow mod_log_forensic to be configured not to write all headers to disk, or not to write headers at all.\n\nI don\u00b4t want to miss information about any request. Its important to identify and account for all incoming requests, no matter if they fail or succeed. Since the main purpose here it to account for all the requests and not only trace crash events, the current header information on mod_log_forensicis would not be necessary. This leads to a small log forensics file and less I/O on the server.\n\nIf I need more information or if i need to trace crash events, then mod_log_forensics would be activated with the all header option."}, {"count": 1, "tags": [], "bug_id": 49926, "attachment_id": null, "text": "Option 1 is essentially out of the question...\n\nmod_log_config conducts its activity after transmitting the response in part to avoid possible disk contention and delays in servicing the response.  Yes, this\nremains an issue on modern hardware when coupled with servicing 1000's of\nsimultaneous requests.  It's also not realistic to spin back the log and change\nthe entry, but mod_log_config is oriented for 1-line per request.\n\nSo it seems your second option makes the most sense?", "id": 139864, "time": "2010-09-14T08:38:09Z", "creator": "wrowe@apache.org", "creation_time": "2010-09-14T08:38:09Z", "is_private": false}, {"count": 2, "tags": [], "text": "Ok, the second option works fine for me. I need to account for all incoming requests and match them to the responses if one is generated. An option without headers allows me to use mod_log_forensics, working with smaller files and less i/o.\n\n(In reply to comment #1)\n> Option 1 is essentially out of the question...\n> \n> mod_log_config conducts its activity after transmitting the response in part to\n> avoid possible disk contention and delays in servicing the response.  Yes, this\n> remains an issue on modern hardware when coupled with servicing 1000's of\n> simultaneous requests.  It's also not realistic to spin back the log and change\n> the entry, but mod_log_config is oriented for 1-line per request.\n> \n> So it seems your second option makes the most sense?", "is_private": false, "id": 139871, "creator": "sjjrbhz2@yahoo.com", "time": "2010-09-14T13:22:11Z", "bug_id": 49926, "creation_time": "2010-09-14T13:22:11Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "It seems that the access log could also be used to store the completion records,\nsince the unique ID is loggable.\n\nSeems like a ForensicOptions might be in order.", "is_private": false, "bug_id": 49926, "id": 139872, "time": "2010-09-14T14:08:11Z", "creator": "wrowe@apache.org", "creation_time": "2010-09-14T14:08:11Z", "attachment_id": null}]
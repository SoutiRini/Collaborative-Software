[{"count": 0, "tags": [], "text": "ProxyPass behaves unreasonably when asked to proxy a request from one name based\nvirtual host to another which bound to the same ip and port.\n\nExample partial config:\nListen 1.2.3.4:80\nNameVirtualHost *\n\n<VirtualHost *>\nServerName a.local\nDocumentRoot /www/a.local\nProxyPass /bar http://b.local/foo\n</VirtualHost>\n\n<VirtualHost *>\nServerName b.local\nDocumentRoot /www/b.local\n</VirtualHost>\n\nA request to http://a.local/bar/ will end up generating an entry in a.local's\nlogs as a request for /foo/ which is clearly unexepected. The response sent to\nthe client is consistant with the logs - it responds as if the original request\nwere http://a.local/foo/. This seems to happen in any case where b.local\nresolves to an address which a.local is also configured to listen on.\n\nThis does not occur between virtual hosts in the same instance which are bound\nto different ip/port pairs.\n\nI noticed this in a scenario wherein I wanted to set up one virtual host running\nas the webserver user which offered certain cgi based services, and set my other\nvirtual hosts, which all run with suEXEC, to proxy that server for requests to\ncertain paths. This allows there to be one copy of said trusted cgis that all of\nthe otherwise suEXEC limited hosts can access within their URI space.\n\nI've worked around the problem without an additional apache instance by binding\nthe virtual host designed to provide services to one IP/port and explicitly\nbinding all of my virtual hosts to a different IP/port, so I consider my problem\nresolved, but the documentation should at least warn future users of this. For\nthe record, the case that works looks like this:\n\nListen 1.2.3.4:80\nListen 127.0.0.1:8080\nNameVirtualHost 1.2.3.4:80\n\n<VirtualHost 1.2.3.4:80>\nServerName a.local\nDocumentRoot /www/a.local\nProxyPass /bar http://b.local/foo\n</VirtualHost>\n\n<VirtualHost 127.0.0.1:8080>\nServerName b.local\nDocumentRoot /www/b.local\n</VirtualHost>", "is_private": false, "bug_id": 42514, "id": 103647, "time": "2007-05-24T11:51:07Z", "creator": "amylinari@swiftweb.com", "creation_time": "2007-05-24T11:51:07Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 42514, "text": "Nevermind... Just a foolish combination of ProxyPreserveHost and the above\narrangement... This is working exactly as it should be expected to.", "id": 103650, "time": "2007-05-24T12:24:56Z", "creator": "amylinari@swiftweb.com", "creation_time": "2007-05-24T12:24:56Z", "is_private": false, "attachment_id": null}]
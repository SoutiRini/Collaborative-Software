[{"count": 0, "tags": [], "creator": "dlr@apache.org", "attachment_id": null, "id": 30784, "time": "2003-02-05T23:30:42Z", "bug_id": 16822, "creation_time": "2003-02-05T23:30:42Z", "is_private": false, "text": "OBSERVED BEHAVIOR: ManagerBase.createSession() calls\nStandardSession.setId() as the last thing it does before returning a\nnewly created session.  StandardSession.setId() exhibits the\nundocumented side effect of firing a session creation event, iterating\nover all HttpSessionListeners registered with the current web context\nand notifying them of its \"creation\".\n\nA second call to setId() will again fire a session creation event for\nthe existing session.  Here's some trace from making a single request\nwhen calling setId() explicitly:\n\n2003-02-03 17:46:43,113 [Ajp13Processor[17025][4]] INFO  default - Adding\nsession org.apache.catalina.session.StandardSessionFacade@4977e2 with id of\n2EA4840C7D4D6C7F3FF76F1F95C575D5\n2003-02-03 17:46:43,175 [Ajp13Processor[17025][4]] INFO  default - Adding\nsession org.apache.catalina.session.StandardSessionFacade@4977e2 with id of\nC6C908E127E6230CC81AE70E10D914A4\n\nMy web application's list of active sessions (stored as a Map of\nStandardSessionFacade objects keyed by session ID) will look as\nfollows:\n\nSession creation event fired as ManagerBase sets the initial ID by\ncalling StandardSession.setId() during its createSession() method\n              |\n              |\n              v\n.______________________________________.\n| Key  | Value                         |\n`--------------------------------------'\n| ID A | Facade A --> Session A (ID A) |\n`--------------------------------------'\n              |\n              |\nSecond session creation event fired as SessionIdValve resets the ID,\ncalling setId() for a second time (this time explicitly).\n              |\n              |\n              v\n.______________________________________.\n| Key  | Value                         |\n`--------------------------------------'\n| ID A | Facade A --> Session A (ID A) |\n| ID B | Facade A --> Session A (ID B) |\n`--------------------------------------'\n\nThe entry keyed by session ID A will not be removed from our list of\nactive sessions when Session A expires, as the session now has an ID\nof B.\n\n\nUSE CASE: When creating a new session, I must set the session\nidentifier (or manipulate it after the initial generation from a\nValve) using request-specific inputs.\n\nSpecifically, I must re-use any session identifier supplied by the\nclient via its JSESSIONID cookie if that session identifier is not\nalready in use.  Because the Servlet API dictates that the session\ncookie is always named JSESSIONID, this is a must have for support of\nwildcard cookie domains across hosts which share a common base domain\nname.\n\nFor instance, if I have host1.domain.com and host2.domain.com, and set\nthe cookie domain of sessions cookie to the wildcard \".domain.com\"\n(some pathetic browsers only support two part wildcard domains), the\ncookie will apply to both hosts.  This is problematic when a client\nwhich has established a session on host1 tries to establish a second\nsession on host2 -- host2 will assign the client a new session ID,\nwiping the client's memory of its session ID for host1.  Now, if host1\nand host2 are gracious enough to use the same session ID, they can\neffectively share the JSESSIONID cookie, allowing the client to enjoy\nsimultaneous sessions on both host1 and host2 while working within the\nServlet API.\n\n\nPROBLEM: Tomcat's Manager interface has no API for accessing\ncontextual information specific to a request.  Combining a Valve which\nprovides this request-specific context via thread-local storage with\nmy own custom manager is hacky at best, and would require that I\ncompletely re-implement the code in StandardSession (due to its\npackage-private scoping)."}, {"count": 1, "tags": [], "text": "Created attachment 4749\nSessionIdValve -- calls setId() and hacks around its side effects", "is_private": false, "bug_id": 16822, "id": 30785, "time": "2003-02-05T23:31:59Z", "creator": "dlr@apache.org", "creation_time": "2003-02-05T23:31:59Z", "attachment_id": 4749}, {"count": 2, "tags": [], "bug_id": 16822, "text": "ManagerBase.createEmptySession() was added in 4.1.20.\n\nBased on the mail archives (see URL) I assume that this is sufficient to close\nthis bug report.", "id": 69830, "time": "2005-01-19T00:22:48Z", "creator": "markt@apache.org", "creation_time": "2005-01-19T00:22:48Z", "is_private": false, "attachment_id": null}]
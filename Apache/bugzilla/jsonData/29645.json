[{"count": 0, "tags": [], "creator": "burgoyne@keenuh.com", "attachment_id": null, "text": "When doing some performance analisys for a client, an issue found was that they \nhad a huge number of redirects (over 1000) that was slowing down every request \nwith string compares. Due to ionternal political issues and the fact that this \nwas considered common business, it was realistically impossible to get them to \ndiscontinue adding to their configuration in this manner.\n\nI therefore made changes into mod_alias on Apache 1.3.26 to use a sorted list \ninstead of a linear list which resulted in significant performance gains. I \nwould like to release these changes back into the main stream of apache.\n\nFollowing is the diff file for my changes for 1.3.26. Please note is also \nrequires implementation of bug 29640 which is used to sort the array. That \ntruly belonged back in the core and not in mod_alias.\n\n\n73d72\n<     char *fake;\n74a74\n>     char *fake;\n83,84d82\n<     array_header *redirects_regexp;\n<     int          sorted;\n89d86\n<     int          sorted;\n94,109d90\n< \n< \n< int\n< compare_alias(void *first, void *second)\n< {\n<     alias_entry *first_alias = (alias_entry *) first;\n<     alias_entry *second_alias = (alias_entry *) second;\n<     if (strcmp(first_alias->fake, second_alias->fake) < 0) {\n<         return 0;\n<     }\n<     return 1;\n< }\n< \n< \n< \n< \n117,124d97\n<     a->redirects_regexp = ap_make_array(p, 20, sizeof(alias_entry));\n<     a->sorted = 0;\n< \n<     /*char *srm_confname;\n<     char *access_confname;\n<     char *server_admin;\n<     char *server_hostname;*/\n< \n133d105\n<     a->sorted = 0;\n145,151d116\n<     a->redirects_regexp = ap_append_arrays(p, overrides->redirects_regexp, \nbase->redirects_regexp);\n< \n<     if (base->sorted || overrides->sorted) {\n<         ap_array_sort(a->redirects, &compare_alias);\n<         a->sorted = 1;\n<     }\n< \n161,166d125\n< \n<     if (base->sorted || overrides->sorted) {\n<         ap_array_sort(a->redirects, &compare_alias);\n<         a->sorted = 1;\n<     }\n< \n254d212\n<     {\n256,257d213\n<         dirconf->sorted = 0;\n<     }\n259,268c215\n<     {\n<         if (use_regex)\n<         {\n<           new = ap_push_array(serverconf->redirects_regexp);\n<         } else\n<         {\n<           new = ap_push_array(serverconf->redirects);\n<             serverconf->sorted = 0;\n<       }\n<     }\n---\n>       new = ap_push_array(serverconf->redirects);\n274d220\n< \n290,312d235\n< \n< \n<     \n< \n< static const char *sortAlias(cmd_parms *cmd, void *dummy, int to_sort)\n< {\n<     server_rec *s = cmd->server;\n<     alias_server_conf *conf = (alias_server_conf *) \n<                               ap_get_module_config(s->module_config, \n<                                                    &alias_module);\n< \n< \n<     if (!to_sort || conf->sorted) {\n<         return NULL;\n<     } else {\n<         ap_array_sort(conf->redirects, &compare_alias);\n<         conf->sorted = 1;\n<     }\n<     return NULL;\n< }\n< \n< \n< \n315,316d237\n<     {\"RedirectSort\", sortAlias, NULL, RSRC_CONF, FLAG,\n<      \"Sorts the list\"},\n378,380c299\n< \n< int\n< could_alias_match(char *real_URL, char *fake_URL)\n---\n> static char *try_alias_list(request_rec *r, array_header *aliases, int doesc, \nint *status)\n382,406d300\n<     int count = 0;\n<     \n<     if (alias_matches(real_URL, fake_URL)) {\n<         return 1;\n<     }\n<     \n<     while (real_URL[count] == fake_URL[count]) {\n< \n<         if (count && real_URL[count] == '/') {\n<             return 1;\n<         }\n<         count++;\n<     \n<         if (count > strlen(real_URL) || count > strlen(fake_URL)) {\n<             return 0;\n<         }\n<     }\n<     \n<     return 0;\n< }\n< \n< \n< static char *try_alias_list(request_rec *r, array_header *aliases, int doesc, \n<                             int *status, int sorted)\n< {\n410,415c304\n<     int i = 0;\n<     int to_continue = 1;\n<     alias_entry *p;\n<     int start = 0;\n<     int current = 0;\n<     int end = aliases->nelts;\n---\n>     int i;\n416a306,308\n>     for (i = 0; i < aliases->nelts; ++i) {\n>       alias_entry *p = &entries[i];\n>       int l;\n418,448d309\n<     if (end == 0) {\n<          return NULL;\n<     }\n< \n<     while (to_continue) {\n< \n<         int l;\n< \n<       if (sorted) {\n< \n<             int old_current = current;\n<             if (end == start) {\n<                 current = start;\n<                 to_continue = 0;\n<             } else {\n<               current = (start + end) / 2;\n<             }\n<          \n<             if (old_current == current && end - start == 1)\n<             {\n<                   to_continue = 0;\n<             }\n<             p = &entries[current];\n< \n<         } else {\n<              p = &entries[i++];\n<            if (i == end) {\n<                  to_continue = 0;\n<              }\n<       }\n< \n450c311\n<             if (!ap_regexec(p->regexp, r->uri, p->regexp->re_nsub + 1, regm, \n0)) {\n---\n>           if (!ap_regexec(p->regexp, r->uri, p->regexp->re_nsub + 1, regm, \n0)) {\n467c328,331\n<           if (l > 0 && sorted) {\n---\n>           if (l > 0) {\n>               if (doesc) {\n>                   char *escurl;\n>                   escurl = ap_os_escape_path(r->pool, r->uri + l, 1);\n469,470c333,338\n<                 int lower_boundary = current - 1;\n<                 int upper_boundary = current + 1;\n---\n>                   found = ap_pstrcat(r->pool, p->real, escurl, NULL);\n>               }\n>               else\n>                   found = ap_pstrcat(r->pool, p->real, r->uri + l, NULL);\n>           }\n>       }\n472,522d339\n<                 while (could_alias_match(r->uri, \n<                        (&entries[lower_boundary])->fake) > 0) {\n<                     lower_boundary--;\n<                 }\n< \n<                 lower_boundary++;\n<                 while (could_alias_match(r->uri, \n<                        (&entries[upper_boundary])->fake) > 0) {\n<                     upper_boundary++;\n<                 }\n<     \n<                 upper_boundary--;\n< \n<                 if (upper_boundary != lower_boundary) {\n< \n<                     int longest_length = 0;\n<                     int best_match = 0;\n<                     while (lower_boundary != upper_boundary + 1) {\n< \n<                         int current_length;\n<                         current_length = strlen((&entries[lower_boundary])\n<                                                  ->fake);\n<                         if (current_length > longest_length && \n<                             alias_matches(r->uri, \n<                                           (&entries[lower_boundary])->fake)) {\n<                             longest_length = current_length;\n<                             best_match = lower_boundary;\n<                             l = alias_matches(r->uri, \n<                                               (&entries[lower_boundary])-\n>fake);\n<                         }\n<                         lower_boundary++;\n<                     }\n< \n<                     p = &entries[best_match];\n<         \n<                 }\n<             }\n< \n<             if (l > 0) {\n<     \n<                 if (doesc) {\n<                     char *escurl;\n<                     escurl = ap_os_escape_path(r->pool, r->uri + l, 1);\n< \n<                     found = ap_pstrcat(r->pool, p->real, escurl, NULL);\n<                 }\n<                 else\n<                     found = ap_pstrcat(r->pool, p->real, r->uri + l, NULL);\n<             }\n<         }\n< \n524d340\n< \n534,542d349\n< \n<         if (sorted)\n<         {\n<             if (strcmp(r->uri, p->fake) > 0) {\n<                 start = current;\n<           } else {\n<                 end = current;\n<             }\n<        }\n559,561c366\n< \n<     if ((ret = try_alias_list(r, serverconf->redirects, 1, &status, \nserverconf->sorted)) != NULL) {\n< \n---\n>     if ((ret = try_alias_list(r, serverconf->redirects, 1, &status)) != NULL) \n{\n570d374\n< \n576c380\n<     if ((ret = try_alias_list(r, serverconf->aliases, 0, &status, 0)) != \nNULL) {\n---\n>     if ((ret = try_alias_list(r, serverconf->aliases, 0, &status)) != NULL) {\n594c398\n<     if ((ret = try_alias_list(r, dirconf->redirects, 1, &status, 0)) != NULL) \n{\n---\n>     if ((ret = try_alias_list(r, dirconf->redirects, 1, &status)) != NULL) {", "id": 59425, "time": "2004-06-17T15:39:07Z", "bug_id": 29645, "creation_time": "2004-06-17T15:39:07Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 29645, "is_private": false, "id": 59467, "time": "2004-06-18T09:15:15Z", "creator": "burgoyne@keenuh.com", "creation_time": "2004-06-18T09:15:15Z", "tags": [], "text": "OK, based upon a comment I got for the changes to the sorting routine, I'm \ngoing to make some changes on this particular module and then I'll send out the \ndiffs then.\n\nIf anyone has any other comments please let me know ASAP and I can incorporate \nthem at this time."}, {"count": 2, "tags": [], "bug_id": 29645, "text": "The major drawback of ordering of any mod_alias list is, that the items must not\noverlap then. Typcially with such a long list of Redirects, one uses a dbm\nrewritemap or the like.\n\nSince the diff is not really readable (please use diff -u in the future and\nattach (!) it to the report) - what does the patch exactly do?", "id": 59468, "time": "2004-06-18T09:35:38Z", "creator": "nd@perlig.de", "creation_time": "2004-06-18T09:35:38Z", "is_private": false, "attachment_id": null}]
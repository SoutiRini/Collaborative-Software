[{"count": 0, "text": "If the JDBC connection obtained by JDBCRealm fails in ways other than throwing \nan SQLException (such as would be the case if the database forced the \nconnection closed because of an idle timeout, or the database was bounced), \nJDBCRealm doesn't appear to handle any thing other than SQLException and \nremains non-operational until tomcat is restarted.\n\nThe current behavior would frustrate users by making their first attempt to log \ninto a server with a failed JDBC connection even if they typed their password \nin correctly.  It is also frustrating for the server administrator if the JDBC \ndriver does not always wrap other failures and rethrow them as SQLExceptions.\n\nIt would be better if JDBCRealm attempted to reconnect within the first call to \nauthenticate and made this attempt upon any failure of the \"cached\" connection \n(i.e. catch Throwable). \n\nChanges could be as follows (unless someone thinks of a better way):\n\n    public Principal authenticate(String username, String credentials) {\n      return authenticate(username, credentials, true);\n    }\n\n    private final Principal authenticate(String username, String credentials, \n       boolean firstTry) {\n\n        Connection dbConnection = null;\n\n        try {\n\n            // Ensure that we have an open database connection\n            dbConnection = open();\n\n            // Acquire a Principal object for this user\n            Principal principal = authenticate(dbConnection,\n                                               username, credentials);\n\n            // Release the database connection we just used\n            release(dbConnection);\n\n            // Return the Principal (if any)\n            return (principal);\n\n        } catch (Throwable t) {\n            if (firstTry) { // recurse and try one more time while we're here\n              return authenticate(username, password, false);\n            }\n            else {   // give up and hope something changes before next login\n              // Log the problem for posterity\n              log(sm.getString(\"jdbcRealm.exception\"), t);\n\n              // Close the connection so that it gets reopened next time\n              if (dbConnection != null)\n                  close(dbConnection);\n\n              // Return \"not authenticated\" for this request\n              return (null);\n            }\n\n        }", "bug_id": 10361, "attachment_id": null, "id": 18774, "time": "2002-06-30T20:19:40Z", "creator": "rthomas-contrib@liveintellect.org", "creation_time": "2002-06-30T20:19:40Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 10361, "attachment_id": null, "text": "I did a bit of additional testing on this and found that the problem I was \nseeing was reporting a \"Communications link failure: java.io.IOException\" but \nmust have actually been wrapped and thrown in an SQLException.  The \nmodification to recurse and try at least twice would still be helpful to avoid \nthe login failure for the first arrival to a failed JDBC connection.  The \nprivate signature of authenticate that has the firstTry boolean argument still \napplies, but the suggested modification to the catch would acutally be \nsomething like the following:\n\n   } catch (SQLException e) {\n      if (firstTry && dbConnection != null) { \n        close(dbConnection);  // close the connection\n        return authenticate(username, password, false); // try a 2nd time\n     }\n     else {   // give up and hope something changes before next login\n        // bla bla bla, etc. etc.", "id": 18781, "time": "2002-07-01T00:39:36Z", "creator": "rthomas-contrib@liveintellect.org", "creation_time": "2002-07-01T00:39:36Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 10361, "attachment_id": null, "is_private": false, "id": 43296, "time": "2003-08-26T01:14:17Z", "creator": "funkman@joedog.org", "creation_time": "2003-08-26T01:14:17Z", "text": "Fixed for tomcat5 - please confirm with HEAD of tomcat 5 (or when 5.0.10 is\navailable). Upon confirmation - will backport to tomcat 4.1 Will not port to\ntomcat 4.0.\n"}]
[{"count": 0, "tags": [], "text": "I have been using Log4j to development my web application and it has been \nworking perfectly. Yesterday I just put the \"jakarta-poi-1.5.1-final-\n20020615.jar\" file into my WEB-INF/lib directory of my web app, the logger i \nhave been using become silent. I neither changed other configuration nor my \ncode. \n\nI have tried removing the file from the lib directory and the log4j starts \nworking again. Here is my configuration:\n\nContainer: Oracle9iAS (9.0.2.0.0) Containers for J2EE\nLog4j: version 1.2.3\nPOI: version 1.5.1 final\n\nThanks.\n\nPaul", "is_private": false, "bug_id": 12671, "id": 22893, "time": "2002-09-16T08:02:29Z", "creator": "chung_po_loi@hotmail.com", "creation_time": "2002-09-16T08:02:29Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "nicolaken@apache.org", "attachment_id": null, "text": "Look inside the jar, probably there is a property file that confuses log4j\nconfiguration; remove it and it should work ok...\nIf it's not there, please report here.\nThanks.", "id": 22905, "time": "2002-09-16T09:21:54Z", "bug_id": 12671, "creation_time": "2002-09-16T09:21:54Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 12671, "text": "I have had the same problem. Indeed, there is a log4j.properties file\nin the jar. Thus, adding the POI jar to the CLASSPATH *MAY* change program\nbehaviour, even if no POI class is used at all. I'm not sure this is what\nshould be expected. Is there are reason for the log4j.properties file to\nactually be there? POI currently does not use Commons-Logging or Log4J at\nall...\n\nHere's a test that surprises, if run with or without POI in the classpath:\n\npackage com.mplify.win2k.diskmon;\n\nimport org.apache.log4j.Appender;\nimport java.util.Enumeration;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.Layout;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.TTCCLayout;\nimport org.apache.log4j.ConsoleAppender;\nimport org.apache.log4j.LogManager;\n\n/**********************************************************************\n * Simple test of Log4J.\n * By default, the program just writes out a description of the logging\n * hierarchy to stdout using the System.out PrintStream. If the first\n * argument to the program is 'WITH', a logger is allocated before the\n * logging hierarchy is printed to stdout.\n *\n * With 'jakarta-poi' in the classpath:\n * ====================================\n *\n * WITH Logger allocated\n * LOGGER: root\n *  Level   = DEBUG                                <-- our level for root (POI \nsets it to FATAL)\n *  Additivity = true\n *  Appender name = stdout                         <-- Jakarta-POI debugging \nappender\n *  Appender name = null                           <-- our appender for root\n * LOGGER: com.mplify.win2k.diskmon.Log4JTest.main <-- our method-specific \nlogger\n *  Level   = null\n *  Additivity = true\n * LOGGER: org                                     <-- Jakarta-POI specific \nlogger\n *  Level   = FATAL                                <-- ...it works at level \nFATAL\n *  Additivity = true\n *  Appender name = stdout                         <-- Jakarta-POI debugging \nappender\n *\n * WITHOUT Logger allocated\n * LOGGER: root\n *  Level   = DEBUG                                <-- our level for root (POI \nsets it to FATAL)\n *  Additivity = true\n *  Appender name = stdout                         <-- Jakarta-POI debugging \nappender\n *  Appender name = null                           <-- our appender for root\n * LOGGER: org                                     <-- Jakarta-POI specific \nlogger\n *  Level   = FATAL                                <-- ...it works at level \nFATAL\n *  Additivity = true\n *  Appender name = stdout                         <-- Jakarta-POI debugging \nappender\n *\n * With no 'jakarta-poi' in the classpath:\n * =======================================\n *\n * WITH Logger allocated\n * LOGGER: root\n *  Level   = DEBUG                                 <-- our level for root\n *  Additivity = true\n *  Appender name = null                            <-- our appender for root\n * LOGGER: com.mplify.win2k.diskmon.Log4JTest.main  <-- our method-specific \nlogger\n *  Level   = null\n *  Additivity = true\n *\n * 20 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 0\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 1\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 2\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 3\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 4\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 5\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 6\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 7\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 8\n * 30 [main] DEBUG com.mplify.win2k.diskmon.Log4JTest.main - This is message 9\n *\n * WITHOUT Logger allocated\n * LOGGER: root\n *  Level   = DEBUG                                 <-- our level for root\n *  Additivity = true\n *  Appender name = null                            <-- our appender for root\n *********************************************************************/\n\npublic class Log4JTest {\n\n    private final static String PACKAGE = \"com.mplify.win2k.diskmon\";\n    private final static String CLASS = PACKAGE + \".Log4JTest\";\n\n    /**\n    * List the whole setup of Log4J's default Hierarchy\n    * Except the Renderers which are not listable\n    */\n\n    public static void listSetupOfDefaultLog4JHierarchy() {\n        StringBuffer buf = new StringBuffer();\n        //\n        // first the root element of the default hierarchy\n        //\n        {\n            Logger root = Logger.getRootLogger();\n            buf.append(\"LOGGER: \");\n            buf.append(root.getName());\n            buf.append(\"\\n\");\n            buf.append(\" Level   = \");\n            buf.append(root.getLevel());\n            buf.append(\"\\n\");\n            buf.append(\" Additivity = \");\n            buf.append(root.getAdditivity());\n            buf.append(\"\\n\");\n            Enumeration appEnum = root.getAllAppenders();\n            while (appEnum.hasMoreElements()) {\n                Appender app = (Appender) (appEnum.nextElement());\n                buf.append(\" Appender name = \");\n                buf.append(app.getName());\n                buf.append(\"\\n\");\n                // may want to check the filter and the layout of the appender\n            }\n        }\n        //\n        // then for the rest of the categories\n        //\n        {\n            Enumeration enum = LogManager.getCurrentLoggers();\n            while (enum.hasMoreElements()) {\n                Logger cat = (Logger) (enum.nextElement());\n                buf.append(\"LOGGER: \");\n                buf.append(cat.getName());\n                buf.append(\"\\n\");\n                buf.append(\" Level   = \");\n                buf.append(cat.getLevel());\n                buf.append(\"\\n\");\n                buf.append(\" Additivity = \");\n                buf.append(cat.getAdditivity());\n                buf.append(\"\\n\");\n                Enumeration appEnum = cat.getAllAppenders();\n                while (appEnum.hasMoreElements()) {\n                    Appender app = (Appender) (appEnum.nextElement());\n                    buf.append(\" Appender name = \");\n                    buf.append(app.getName());\n                    buf.append(\"\\n\");\n                    // may want to check the filter and the layout of the \nappender\n                }\n            }\n        }\n        System.out.println(buf.toString());\n    }\n    /**\n     * Example main() code\n     * 2) The TTCCLayout timing info is crap --- Is this also the case in UNIX?\n     */\n\n    public static void main(String[] argv) {\n        Logger logger = null;\n        if (argv != null && argv.length >= 1 && \"WITH\".equalsIgnoreCase(argv\n[0])) {\n            logger = Logger.getLogger(CLASS + \".main\");\n            System.out.println(\"WITH Logger allocated\");\n        } else {\n            System.out.println(\"WITHOUT Logger allocated\");\n        }\n        //\n        // prepare logging\n        //\n        Layout layout = new TTCCLayout();\n        Logger.getRoot().addAppender(new ConsoleAppender(layout, \nConsoleAppender.SYSTEM_OUT));\n        Logger.getRoot().setLevel(Level.DEBUG);\n        //\n        // write out how the hierarchy looks now\n        //\t\n        listSetupOfDefaultLog4JHierarchy();\n        //\n        // then write some stuff\n        //\n        if (logger != null) {\n            for (int i = 0; i < 10; i++) {\n                logger.debug(\"This is message \" + i);\n            }\n        }\n    }\n} ", "id": 31501, "time": "2003-02-18T09:47:00Z", "creator": "bughunt@gluino.name", "creation_time": "2003-02-18T09:47:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "avik@apache.org", "attachment_id": null, "id": 32224, "time": "2003-03-01T15:35:52Z", "bug_id": 12671, "creation_time": "2003-03-01T15:35:52Z", "is_private": false, "text": "This seems to have been fixed in the dev releases. They no longer contain a\nlog4j.properties in the poi-xxx.jar. so can i mark this as fixed. I doubt we\nwill do a release on the 1.5 branch just for this. Will add a FAQ for this. "}, {"count": 4, "tags": [], "text": "This is the code: Below is the error message.What seems to be the problem?Do i \nhave to know Logger of Log4J to use HSSF?\n\nimport java.io.*;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\n\npublic class FirstExcelTest {\n\n\tpublic static void main(String[] args) {\n\t\tHSSFWorkbook wb = new HSSFWorkbook();\n\t\tFileOutputStream fileOut=null;\n\t\ttry {\n\t\t\tfileOut = new FileOutputStream(\"c:\\\\workbook.xls\");\t\n\t\t\n\t\t\twb.write(fileOut);\t\t\t \n\t\t\tfileOut.close();\t\t\n\t\t} catch (FileNotFoundException e) {\t\t\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e1) {\t\t\n\t\t\te1.printStackTrace();\n\t\t}        \n\t}\n}\n\njava.lang.NoClassDefFoundError: org/apache/log4j/Logger\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<clinit>\n(HSSFWorkbook.java:115)\n\tat com.qinteraction.Excel.AnotherExcel.main(AnotherExcel.java:24)\nException in thread \"main\"", "is_private": false, "bug_id": 12671, "id": 43071, "time": "2003-08-21T02:40:14Z", "creator": "normanordas@qinteraction.com", "creation_time": "2003-08-21T02:40:14Z", "attachment_id": null}]
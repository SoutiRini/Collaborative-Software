[{"count": 0, "tags": [], "creator": "ohollander@mercury.com", "attachment_id": null, "id": 64093, "time": "2004-09-23T09:34:34Z", "bug_id": 31382, "creation_time": "2004-09-23T09:34:34Z", "is_private": false, "text": "Description\n-----------\nI have a JSP 2.0 tag file which refernces itself (for recursion).\nWhen I first compile it, everything is OK.\n\nIf I then change the JSP tag source and recompiles and deploy, I get an error \n(I have pasted it at the bottom of this message).\n\nIf I delete the class file generated from this JSP tag, everything works fine.\n\nMy assumption is that when Tomcat tries to compile the Java file, the class \nfile still exists on disk. This might cause the compiler to reference the \nexisting class while compiling the source (since the source references itself).\n\nIf Tomcat would first delete the class when it recognizes that the source was \nchanged, this might not have happened.\n\n=========================================================================\nThe error:\n=========================================================================\njavax.servlet.ServletException\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:244)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:810)\n\torg.apache.struts.action.RequestProcessor.doForward\n(RequestProcessor.java:1056)\n\torg.apache.struts.action.RequestProcessor.processForwardConfig\n(RequestProcessor.java:388)\n\torg.apache.struts.action.RequestProcessor.process\n(RequestProcessor.java:231)\n\torg.apache.struts.action.ActionServlet.process(ActionServlet.java:1158)\n\torg.apache.struts.action.ActionServlet.doGet(ActionServlet.java:397)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:697)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:810)\n\n\nroot cause \n\njava.lang.StackOverflowError\n\n========================================================================="}, {"count": 1, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "text": "Pleast post the JSP file (or a WAR containing a complete webapp) we can use to \nreproduce this problem.  I'm also changing the component from Catalina to \nJasper.  Finally, even though I'd guess it's still present, can you please test \non 5.0.28 (the latest stable version at the time of this writing)?", "id": 64190, "time": "2004-09-24T15:03:14Z", "bug_id": 31382, "creation_time": "2004-09-24T15:03:14Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 31382, "attachment_id": null, "id": 64210, "time": "2004-09-25T08:44:29Z", "creator": "acm@tweakers.net", "creation_time": "2004-09-25T08:44:29Z", "is_private": false, "text": "I found the same issue in tomcat 5.0.27.\nHere is a minimal testcase I created:\n\ntest.jsp:\n<%@ taglib prefix=\"t\" tagdir=\"/WEB-INF/tags/test\" %>\n<t:test param=\"5\" />\n\ntest.tag:\n<%@ tag %>\n<%@ attribute name=\"param\" type=\"java.lang.Integer\" %>\n<%@ taglib prefix=\"t\" tagdir=\"/WEB-INF/tags/test\" %>\n<%=param + \", \"%>\n<% param = param -1; %>\n<t:test param=\"<%=param%>\" />\n\nThe above ran in JDK 5.0, so the param = param -1 might not work correctly in\nother JDK's since it probably incurs auto-boxing. For this issue, you can remove\nthe line anyway though... It'll yield a stackoverflow, but at another spot than\nthe issue which is reported here.\n\nTo reproduce the bug:\n- Use above (or similar) test.jsp\n- Edit tag-file\n- Refresh jsp-file"}, {"count": 3, "tags": [], "bug_id": 31382, "attachment_id": null, "text": "Seems like unbound recursion to me. Do not expect it to run, the execution stack\nhas its *limited* capacity... You might want to introduce some exit condition,\nas the tag you present keeps inserting itself endlessly which implies\njava.lang.StackOverflowError. This is neither Tomcat nor Java bug. ", "id": 64243, "time": "2004-09-27T06:03:48Z", "creator": "drzewo@post.pl", "creation_time": "2004-09-27T06:03:48Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 31382, "is_private": false, "text": "I sent this e-mail earlier to Dominik, since I disagree with his choice to mark\nthis as not-a-bug. But since I didn't receive a reply yet, I'll post it as a\ncomment here.\n\nHi Dominik,\n\nIn bug-report http://nagoya.apache.org/bugzilla/show_bug.cgi?id=31382 you seem\nto be missing the point of the bug. It actually IS a tomcat-bug, imho. I'll\ndescribe what happens more clearly, perhaps you agree with me afterwards:\n\nThe tag I displayed there is a recursive tag, indeed. And yes, there seems to be\nunbound recursion... But not when executing the tag, the unbound recursion is at\ntag-recompile-time. When the tag is first created, and there are no\nclass/java-files for it, everything goes fine (including executing the tag).\nBut when the tag changes, the COMPILER goes into the recursion. My guess is that\nthe tag is reparsed, but that the compiler/parser/whatever notices it depends on\na certain tag (itself) and notices that that dependency is also changed (doh)...\nThat dependency is reparsed/recompiled and the compiler notices a dependency\n(itself again...), of course the dependency has changed so that needs\nrecompilation/reparsing... And again, again, again etc.\n\nThe above does not happen for new tags, nor when you remove the\n.class/.java-files for the specific tag. Why this only fails when a tag changes,\nI don't know. There is probably some save-guard or another order of compilation\nwhen a new tag is used.\n\nPlease see for yourself using the test.jsp and test.tag I displayed there. That\nshould not run into unbound recursion, since it is only allowed 5 steps... (I\ntested it)\n\nBest regards,\n\nArjen van der Meijden\n\nPS, my guess is that this may also fail when there are more tags involved in the\nrecursion. But I haven't tested that.", "id": 65060, "time": "2004-10-13T11:05:47Z", "creator": "acm@tweakers.net", "creation_time": "2004-10-13T11:05:47Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 31382, "attachment_id": null, "id": 65064, "time": "2004-10-13T11:34:46Z", "creator": "krueger@signal7.de", "creation_time": "2004-10-13T11:34:46Z", "is_private": false, "text": "Hi, \nisn't this a duplicate of 29887, which I reported for 5.0.25? If so, it was\nreported fixed and there exists a test case attached to my bug report to see if\nsimple recursions still break upon file modification (in the case of 29887 it\nwas the file modification check that caused the infinite recursion). I have\nnever tested, though, if recursions which involve more than one tag file (as\nArjen correctly noted are an issue that needs to be dealt with) were fixed."}, {"count": 6, "tags": [], "bug_id": 31382, "attachment_id": null, "text": "Yes, it appears to be the same. But your word choice prevented me from finding\nyour report :)\n\nI do believe that the fix in your report won't fix the case where a tag calls\nanother tag which in turn calls the first one again or any other level of\nrecursion apart from the trivial one.", "id": 65067, "time": "2004-10-13T13:26:30Z", "creator": "acm@tweakers.net", "creation_time": "2004-10-13T13:26:30Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 31382, "attachment_id": null, "id": 65115, "time": "2004-10-14T08:15:16Z", "creator": "krueger@signal7.de", "creation_time": "2004-10-14T08:15:16Z", "is_private": false, "text": "You're right, it won't. I didn't look at how Kin-Man actually fixed it in\n5.0.26. Neither am I sure if I ever verified the fix or just kept working with\nmy rather naive patch. I just hoped he also covered the non-trivial case (e.g.\nby keeping track of all the files already checked for a dependency in the\ndependency check algorithm)."}, {"count": 8, "tags": [], "bug_id": 31382, "is_private": false, "text": "So if this is a duplicate of 29887, I'm marking it as such.  Reopen that one \nwith your findings, as apparently this was fixed in 5.0.26 but your results \nshow it's not really fixed, or is only partially fixed.  I'd like to keep the \ndiscussion in one Bugzilla item rather than two.\n\n*** This bug has been marked as a duplicate of 29887 ***", "id": 65134, "time": "2004-10-14T17:16:38Z", "creator": "yoavs@computer.org", "creation_time": "2004-10-14T17:16:38Z", "attachment_id": null}]
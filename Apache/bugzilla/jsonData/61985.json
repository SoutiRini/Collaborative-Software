[{"count": 0, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": null, "text": "In support/unix/waitio.c, in case pfd.fd < 0, the poll() function waits until the time-out is expired.\nThis problem happens when, for instance, ModSecurity drops a connection in httpd. In this case, ressources gets blocked until the timeout expires.\nIn this situation, we should immediately return an error.", "id": 203181, "time": "2018-01-10T08:12:57Z", "bug_id": 61985, "creation_time": "2018-01-10T08:12:57Z", "is_private": false}, {"count": 1, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": 35666, "is_private": false, "id": 203182, "time": "2018-01-10T08:14:30Z", "bug_id": 61985, "creation_time": "2018-01-10T08:14:30Z", "text": "Created attachment 35666\npatch"}, {"count": 2, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "text": "The man of poll(2) on linux says:\n       \"The field fd contains a file descriptor for an open file.  If this field is negative, then the corresponding events field is ignored and the revents field returns zero.  (This provides an easy way of ignoring a file descriptor for a single poll() call: simply negate the fd field...)\"\n\nSo it's valid operation somehow (which timeouts), why wouldn't APR respect that?\nI'm not sure apr_wait_for_io_or_timeout() should error here, not really a strong opinion either.\n\nMaybe something to fix on the caller side though, how does such negative fd come here, double close? No c->aborted on the httpd side?", "id": 203194, "time": "2018-01-10T13:28:27Z", "bug_id": 61985, "creation_time": "2018-01-10T13:28:27Z", "is_private": false}, {"count": 3, "tags": [], "text": "When a ModSecurity rule decides a drop in phase 1, the TCP is immediately closed (which is good and intended), however the handler behind is still somehow called. If this handler is \"proxy-server\", it will stay stuck until the global request timeout (5mn) shuts it down.\nThis has the nasty side-effect of keeping an httpd thread of process busy all that time.", "attachment_id": null, "bug_id": 61985, "id": 203197, "time": "2018-01-10T13:46:50Z", "creator": "marc.stern@approach.be", "creation_time": "2018-01-10T13:46:50Z", "is_private": false}, {"count": 4, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": null, "is_private": false, "id": 203198, "time": "2018-01-10T13:50:10Z", "bug_id": 61985, "creation_time": "2018-01-10T13:50:10Z", "text": "Note that the patch actually proves to solve the problem"}, {"count": 5, "tags": [], "bug_id": 61985, "is_private": false, "text": "I see but why doesn't the \"phase 1\" return an error for httpd to stop processing/handling the connection?\n\nNo close (nor c->aborted) needed on the mod_security side then, I think httpd would take care of the best way to close the connection ASAP in this case (in cluding TLS close notify and so on if needed...).", "id": 203199, "time": "2018-01-10T13:54:29Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2018-01-10T13:54:29Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "is_private": false, "id": 203200, "time": "2018-01-10T14:04:34Z", "bug_id": 61985, "creation_time": "2018-01-10T14:04:34Z", "text": "By the way, did you follow bug 61551 ?\n\nmod_security could possibly improve the way it returns to httpd in some phases, maybe we could discuss this on dev@httpd, your call."}, {"count": 7, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": null, "text": "I didn't follow bug 61551. I just had a look at it but I have to admit that I don't understand the internals well enough to check if this would solve the problem.\nYou may be right (and youprobably are) that ModSecurity doesn't behave correctly, but the \"sanity\" check I propose is, imho, a good practice (defensive programming). It costs no resource, doesn't complexify the code and protects the code from unexpected situations (due to a misbehaved module or maybe other causes), so it offers, at least, a stability \"insurance\".\nI don't see any drawback to it, only an advantage (that should be very small in an ideal world, I agree).", "id": 203215, "time": "2018-01-11T09:19:13Z", "bug_id": 61985, "creation_time": "2018-01-11T09:19:13Z", "is_private": false}, {"count": 8, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "text": "From my POV, the drawback of defensive programming (which we usually don't do in APR) is that the error/fault finally happens at the wrong/later place, and thus becomes hard to debug. For instance, we don't check for NULL args where they shouldn't be (e.g. given by the responsible user), and prefer to crash where is due.\n\nHere it may make sense to error on an invalid fd though, it's the single one to be poll()ed after all, so there is really nothing to wait for. Let's see what others say.", "id": 203216, "time": "2018-01-11T09:33:23Z", "bug_id": 61985, "creation_time": "2018-01-11T09:33:23Z", "is_private": false}]
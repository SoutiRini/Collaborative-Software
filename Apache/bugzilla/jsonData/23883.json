[{"count": 0, "tags": [], "creator": "tom.vijlbrief@xs4all.nl", "text": "0.20.5 and 1.0dev cannot handle large translates when drawing polylines.\n\n======buggy.fo==============================\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<fo:root xmlns:fo=\"http://www.w3.org/1999/XSL/Format\"\nxmlns:svg=\"http://www.w3.org/2000/svg\">\n<fo:layout-master-set>\n<fo:simple-page-master master-name=\"simpleA4\"\npage-height=\"29.7cm\" page-width=\"21cm\" margin-top=\"2cm\"\nmargin-bottom=\"2cm\" margin-left=\"2cm\" margin-right=\"2cm\">\n<fo:region-body/>\n</fo:simple-page-master>\n</fo:layout-master-set>\n<fo:page-sequence master-reference=\"simpleA4\">\n<fo:flow flow-name=\"xsl-region-body\">\n<fo:block font-size=\"16pt\" font-weight=\"bold\"\nspace-after=\"5mm\">Project GML to SVG\n\n<fo:instream-foreign-object>\n<svg:svg viewBox=\"0 0 400 400\" width=\"18cm\" height=\"18cm\">\n<svg:title>A map\n</svg:title>\n\n<!-- this group (blue polyline) renders OK -->\n<svg:g transform=\"translate(-1400.0,0.0)\">\n<svg:polyline points=\"1400.0,0.0 1471.0,50.0\"\n        fill=\"none\" stroke-width=\"9\" stroke=\"blue\"/>\n</svg:g>\n\n<!-- this group (red polyline) renders\nNOT OK due to the large translate -->\n<svg:g transform=\"translate(-140000.0,0.0)\">\n<svg:polyline points=\"140100.0,0.0 140171.0,50.0\"\n        fill=\"none\" stroke-width=\"9\" stroke=\"red\"/>\n</svg:g>\n</svg:svg>\n</fo:instream-foreign-object>\n</fo:block>\n\n</fo:flow>\n</fo:page-sequence>\n</fo:root>", "id": 45818, "time": "2003-10-17T08:39:14Z", "bug_id": 23883, "creation_time": "2003-10-17T08:39:14Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 23883, "attachment_id": 8603, "text": "Created attachment 8603\nexample of incorrect PDF output", "id": 45820, "time": "2003-10-17T08:44:34Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-17T08:44:34Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 23883, "attachment_id": null, "text": "Note that only the OUTLINE of a polyline is drawn incorrectly\n(this is not clear from the example).\n\nThe interior of polylines with 3 or more points is drawn correctly when\nfill != \"none\". Also text, etc, is drawn correctly so this bug is outline\nspecific.", "id": 45829, "time": "2003-10-17T10:31:40Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-17T10:31:40Z", "is_private": false}, {"count": 3, "text": "Sir, did you run the SVG portion within Batik (using their Squiggle app) to \nconfirm the problem is indeed with FOP and not Batik?  \n\nFOP uses Batik for all its SVG--generally speaking, any error within \nfo:instream-foreign-object tends to be with the tool processing it, here, \nBatik.  You may wish to reroute this bug to the Batik team.", "bug_id": 23883, "attachment_id": null, "id": 45866, "time": "2003-10-17T21:11:48Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-10-17T21:11:48Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "tom.vijlbrief@xs4all.nl", "text": "The same SVG code runs correctly with Batik so this behaviour is FOP specific ", "id": 45874, "time": "2003-10-18T05:31:33Z", "bug_id": 23883, "creation_time": "2003-10-18T05:31:33Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "text": "It's still quite difficult to resolve, unless a more detailed explanation can \nbe given of what exactly the error is here.\nThe supplied FO renders without error messages, the pdf doesn't *show* what is \nactually going wrong.\n\nIs it possible for you to describe in more detail what the intended result is, \nand to what extent the obtained result deviates from what one would expect?\n\n(Also, could it be that the standard PDF point size is causing difficulty here? \n1/72 inch. All embedded SVG is inserted as rasterized pdf graphics... Does the \nsame error occur when using the AWT Renderer?)", "id": 45877, "time": "2003-10-18T10:00:26Z", "bug_id": 23883, "creation_time": "2003-10-18T10:00:26Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 23883, "attachment_id": null, "id": 45883, "time": "2003-10-18T17:35:55Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-10-18T17:35:55Z", "is_private": false, "text": "<Q>\n\"Note that only the OUTLINE of a polyline is drawn incorrectly\n(this is not clear from the example).\"\n</Q>\n\nNot clear indeed--like Andreas, I can't see the problem.  If I had a 57-inch \nmonitor and blew up the document to 2000% I might be able to see it, but it \nappears that you're just moving beyond the reasonable mathematical capabilities \nof FOP and PDF.  Again, FOP uses Batik for all SVG--we don't code this.  At any \nrate, your high precision demands would probably suggest you need to explore a \ncommercial alternative."}, {"count": 7, "tags": [], "creator": "tom.vijlbrief@xs4all.nl", "text": "Created attachment 8647\nEquivalent SVG file which renders correct with Batik", "id": 45970, "time": "2003-10-21T08:50:26Z", "bug_id": 23883, "creation_time": "2003-10-21T08:50:26Z", "is_private": false, "attachment_id": 8647}, {"count": 8, "tags": [], "bug_id": 23883, "attachment_id": null, "id": 45973, "time": "2003-10-21T08:57:29Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-21T08:57:29Z", "is_private": false, "text": "Common guys, this has nothing to do with unreasonable precisions.\n\nI added the svg file which renders correctly with Batik and Adobe-plugin,\nas you can see the red line is drawn incorrectly in the FOP PDF result.\n\nThis is because of the translation is larger than 32768 (16Bit signed!), \nso there is a short calculation/cast in the part of FOP that renders lines.\n\nNote that text and polygons ARE DRAWN CORRECTLY, so this is polyline/PDF-path\nspecific and it only happens in FOP, not in Batik.\n\nThis bug makes it impossible to render geographic data in GML format,\nwhich normally has a large coordinate-space in meters or feet...\n\n"}, {"count": 9, "text": "1. Remark : We don't have *any* use for the SVG. What we *do* need is a small \nFO, but not so small that it doesn't show what the error is... If the error \nonly becomes apparent when adding text (or the like), please add the text to \nthe sample FO.\n\n2. Question : What does Batik do with this if you use its rasterizer to make a \nPDF out of the SVG? Does it render correctly? (If not, this might be due to the \n1/72 inch point size...)\n\n3. Remark : You seem to already have a fairly good idea where the problem \nlies... perhaps you could provide us with a patch to solve it (?)\n\n4. Possible workaround : rasterize the SVG to another graphic format with \nBatik, then add that to the FO by use of fo:external-graphic.", "bug_id": 23883, "attachment_id": null, "id": 45988, "time": "2003-10-21T15:56:28Z", "creator": "adelmelle@apache.org", "creation_time": "2003-10-21T15:56:28Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "tom.vijlbrief@xs4all.nl", "text": ">1. Remark : We don't have *any* use for the SVG. What we *do* need is a small  \n>FO, but not so small that it doesn't show what the error is... If the error  \n>only becomes apparent when adding text (or the like), please add the text to  \n>the sample FO. \n \nThe sample FO *DOES* show the error! \n \nJust open the .svg with batik in one window (this is how it should look) \nand open the supplied .pdf in another window. The difference is obvious, you'll \nbe able to spot it in less than a nanosecond.  What more can \nI possible do to demonstrate the error ? The supplied SVG renders two parallel slanted lines, \none in red and one in blue. The same SVG embedded in FO renders the red line  \non the Y-axis, instead of pointing south-east......  \n \n>3. Remark : You seem to already have a fairly good idea where the problem  \n>lies... perhaps you could provide us with a patch to solve it (?) \n \nI've tried to locate it, but didn't found it (yet). It would be motivating if you \ncould at least acknowledge that this is clearly a bug. The current feedback \nmakes me wonder if you would bother to patch if I solved the problem. \n \n>2. Question : What does Batik do with this if you use its rasterizer to make a  \n>PDF out of the SVG? Does it render correctly? (If not, this might be due to the  \n>1/72 inch point size...) \n \nThat's interesting, it does NOT! (the red line disappears totally, instead of \nbeing drawn at the Y-axis as in the FOP PDF result). The batik viewer displays it ok. \n \nI didn't know that batik could convert to PDF without FOP, but the transcoder to PDF *IS* \npart of the FOP implementation, isn't it? Is a part of the PDF transcoder inherited \nfrom Batik? \n \n \n \n ", "id": 46165, "time": "2003-10-23T19:12:13Z", "bug_id": 23883, "creation_time": "2003-10-23T19:12:13Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 23883, "attachment_id": null, "text": "Tom,  I was able to duplicate the error and we are now looking at it. \n\n>1. Remark : We don't have *any* use for the SVG. \n\nActually, we did have a use for it--it shows me that you did indeed check first \n(many come to us first when the problem may be in Batik) in Squiggle, and it \nallows me to quickly verify as well.  Thanks for sending it to us.\n \n>3. Remark : You seem to already have a fairly good idea where the problem  \n>lies... perhaps you could provide us with a patch to solve it (?) \n \n>I've tried to locate it, but didn't found it (yet). It would be motivating if \n>you could at least acknowledge that this is clearly a bug. \n\nHere's your motivation:  Yup, it's a bug!  ;)  But while I examined the problem \nyesterday--not much headway yet--I have seen another problem with the latest \nBatik builds used in FOP 0.20.x nightly and 1.0 (not the Batik jar in 0.20.5)--\nFO's using the instream-foreign-object are hanging after generating the \ndocument--*perhaps* Batik is creating another thread and not ending it.  So \nthis problem I'll have to look at as well.\n\n>2. Question : What does Batik do with this if you use its rasterizer to make a \nPDF out of the SVG? Does it render correctly? (If not, this might be due to the \n1/72 inch point size...) \n\n>That's interesting, it does NOT! (the red line disappears totally, instead of \n>being drawn at the Y-axis as in the FOP PDF result). The batik viewer displays \n>it ok. \n \nI'm confused.  Is the Batik rasterizer = PDF transcoder?  Or is it another way \nto convert from SVG to PDF?\n\n>I didn't know that batik could convert to PDF without FOP, but the transcoder \n>to PDF *IS* part of the FOP implementation, isn't it? Is a part of the PDF \n>transcoder inherited from Batik? \n \nYes.\n\nThanks,\nGlen\n", "id": 46179, "time": "2003-10-23T20:20:19Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-10-23T20:20:19Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 23883, "attachment_id": null, "text": "Tom,\n\nI retested on my home computer (AMD processor)--no problem at all with your \nbuggy.fo file--not on 0.20.5 release, 0.20.5 nightly, nor 1.0 development.  \nAlso, the hanging problem I mentioned below for the latter two versions hasn't \nhappened at all--all three versions run smoothly.  \n\nI'm attaching my pdf output of the buggy.fo from the 0.20.5 release.\n\nI did however duplicate your bug on my Intel processor at work.  So this may be \na 16/32-bit variable issue you mentioned, however, it may prove very pesky to \nsolve (it's not necessarily within FOP, because FOP may be activating different \nBatik code than Squiggle does).  This will probably take too much time to fix \non 0.20.5, but if you can patch the problem for us, we will fix it.\n\nCan you try to see if FOP 1.0 development works for you with the buggy.fo \nfile?  This will be the version worth fixing, at it also retains the most up-to-\ndate version of Batik.\n\nGlen\n", "id": 46192, "time": "2003-10-23T23:39:06Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-10-23T23:39:06Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 23883, "attachment_id": 8716, "id": 46195, "time": "2003-10-24T00:44:52Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-10-24T00:44:52Z", "is_private": false, "text": "Created attachment 8716\nPDF output on AMD processor for buggy.fo example"}, {"count": 14, "tags": [], "bug_id": 23883, "attachment_id": null, "text": ">I'm attaching my pdf output of the buggy.fo from the 0.20.5 release.\n\nHi Glen, thanks for spotting the bug! Things are getting REALLY interesting\nnow because your attached PDF file *shows the bug* (red line is drawn on\nthe y-axis instead of slanted) om my Intel workstation\nat work. Does this mean that what is shown depends on the used VERSION\nof Acrobat Reader!? That would explain why at home you didn't see the\nproblem and probably others noted no difference, which made me look\nlike a lunatic. When you look at\nyour PDF file again at work, you'll probably see the problem again.\n\nI'm no PDF expert, but aren't the PDF transformation matrices specified as\nfloats/doubles? This is still weird. It is unlikely that the problem\nis with java differences between your home computer and the computers\nat our work. The floating point specs are part of the standard.", "id": 46205, "time": "2003-10-24T06:27:10Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-24T06:27:10Z", "is_private": false}, {"count": 15, "text": "Acrobat Reader 6.0 shows the produced PDF's ok! Older versions not...", "bug_id": 23883, "attachment_id": null, "id": 46207, "time": "2003-10-24T06:55:16Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-24T06:55:16Z", "tags": [], "is_private": false}, {"count": 16, "text": "Created attachment 8719\nAnother example of a problem FO", "bug_id": 23883, "attachment_id": 8719, "id": 46218, "time": "2003-10-24T08:42:48Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-24T08:42:48Z", "tags": [], "is_private": false}, {"count": 17, "text": "Alas upgrading to AcrobatReader 6.0 does not solve the real problems.\n\nThe last attached FO should show a map with rotated texts and border lines.\nFop0.20.5 does show part of the text but not the lines. Only the solid\nred block (added for debugging purposes) and the blue border are shown.\n\nThe development version shows NOTHING and the produced file is much smaller.\n\nI'll also attach the corresponding SVG (this SVG is identical except for\nthe large red block)\n\n\n", "bug_id": 23883, "attachment_id": null, "id": 46219, "time": "2003-10-24T08:49:15Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-24T08:49:15Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "bug_id": 23883, "attachment_id": 8720, "id": 46220, "time": "2003-10-24T08:50:52Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-10-24T08:50:52Z", "is_private": false, "text": "Created attachment 8720\nThe corresponding plain SVG file"}, {"count": 19, "tags": [], "bug_id": 23883, "attachment_id": null, "text": "Setting back to fop-dev, so these issues get sent to the developer's list as \nwell.  (Also, others may be able to help out... ;)", "id": 46259, "time": "2003-10-24T18:30:35Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-10-24T18:30:35Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 23883, "attachment_id": null, "text": "Indeed a *very* annoying one... ( thx for supplying these extended test files, \nthis was more what I meant :) )\n\nMust correct my earlier mail to fop-dev:\n\nthe polylines don't get drawn at all, and some of the text-elements have \nproblems\n", "id": 46270, "time": "2003-10-25T11:10:27Z", "creator": "adelmelle@apache.org", "creation_time": "2003-10-25T11:10:27Z", "is_private": false}, {"count": 21, "tags": [], "creator": "adelmelle@apache.org", "text": "> -----Original Message-----\n> From: Thomas DeWeese [mailto:Thomas.DeWeese@Kodak.com]\n> \n> Glen Mazza wrote:\n> \n> > to find where Batik is wrong.  So far, Squiggle has\n> > drawn the SVG correct *all* the time.  But comments\n> > always welcome, and it's good for you to be aware of\n> > the issue.\n> \n>     At least one of the issues is with the PDFGraphics2D.\n> in PDFGraphics2D.java:632 in draw(shape s).  There is\n> a check for a newTransform which inexplicably decides that\n> if the new transform is the Identity transform there is\n> no change.\n> \n<snip/>\n> \n>     I believe the above problem is responsible for the issue\n> with the blue box. Why the text is 'shifted' is still a bit\n> of a mystery to me.\n> \n\n'Shifted' - that's indeed what is happening! The rest of the text still \ngets 'drawn', but suddenly shifts to co\u00f6rdinates off the scale... \n\nBTW:\nRunning the map example fo through FOP 0.20.5 on a Mac, I get a few warnings \nlike the following :\n\n{timestamp} java[837] Font GB18030Bitmap: in _readBasicMetricsForSize, claims 0 \nmax-advance but is fixed-pitch\n\n{timestamp} java[837] Warning: Font LucidaSans-TypeWriterBold claims fixed-\npitch with 0 max advance!\n\nI know Apple's JVM deals with awt differently than Sun's, and since no font is \nbeing specified anywhere in the svg, the awt libs are most probably being used \nto obtain a font from the platform for the text to be drawn. Leading to this \noutput (perhaps these warnings are suppressed on other platforms?)\n\n(Obviously, because of the use of outlined text, strokeSVGText cannot be set to \nfalse. I tried anyway, but that was a killer :) )\n\nIn the process, I also noticed that when you run the fo with the embedded svg \nthrough fop to deliver a new svg, then add the resulting svg to a fo via \nfo:external-graphic, the text problem disappears.\n( the polylines still don't get rendered when viewing with Acrobat 5.0 PC, but \nI see them perfectly on Adobe Reader 6.0 Mac ????). This was not the case when \nusing fo:external-graphic on the original svg.", "id": 46283, "time": "2003-10-25T20:28:20Z", "bug_id": 23883, "creation_time": "2003-10-25T20:28:20Z", "is_private": false, "attachment_id": null}, {"count": 22, "text": "Created attachment 8739\nSVG result from FO2SVG transformation", "bug_id": 23883, "attachment_id": 8739, "id": 46291, "time": "2003-10-26T08:56:24Z", "creator": "adelmelle@apache.org", "creation_time": "2003-10-26T08:56:24Z", "tags": [], "is_private": false}, {"count": 23, "text": "The warnings about the fonts on the Mac turn out to be sth Mac-specific \n(happens with a number of FOs containing embedded SVG), so I guess this remark \ncan be ignored WRT to this bug...\n\nBeing quite intrigued by this, I decided to do a little reading in the PDF \nspec, and found this little note (4.2.3 Graphics - Coordinate Systems - \nTransformation Matrices) :\n<q>\nWhen rendering graphics objects, it is sometimes necessary for a viewer \napplication to perform the inverse of a transformation -\u2014that is, to \ufb01nd the \nuser space coordinates that correspond to a given pair of device space \ncoordinates. Not all transformations are invertible, however. For example, if a \nmatrix contains a, b, c, and d elements that are all zero, all user coordinates \nmap to the same device coordinates and there is no unique inverse \ntransformation. Such noninvertible transformations are not very useful and \ngenerally arise from unintended operations, such as scaling by 0. Use of a \nnoninvertible matrix when painting graphics objects can result in unpredictable\nbehavior.\n</q>\n\nWonder if this has got sth to do with it... Just an idea... We'll keep looking.", "bug_id": 23883, "attachment_id": null, "id": 46324, "time": "2003-10-27T17:16:13Z", "creator": "adelmelle@apache.org", "creation_time": "2003-10-27T17:16:13Z", "tags": [], "is_private": false}, {"count": 24, "tags": [], "bug_id": 23883, "attachment_id": null, "text": "OK, the cause of the bug is a buggy doubleOut() implementation which\ndoes not expect scientific notation (1.0E-4) for small numbers. The next\nimplementation (tested in 0.20.5) looks to solve most problems, although\nlines are still drawn wrong with at least Acrobat5. I cannot test\nwith Acrobat6, cause that's not installed at this workstation.\n(I'll look at that at home)\n\n=============pdf/PDFNumber.java====================\npublic class PDFNumber {\n\n    static java.text.DecimalFormat myFormatter = new java.text.DecimalFormat(\"#.\n########\");\n\n    public static String doubleOut(Double doubleDown) {\n        return doubleOut(doubleDown.doubleValue());\n    }\n\n    public static String doubleOut(double doubleDown) {\n        return myFormatter.format(doubleDown);\n    }\n\n    public static String doubleOut(double doubleDown, int dec) {\n        return doubleOut(doubleDown);\n    }\n\n}\n", "id": 46757, "time": "2003-11-04T15:13:25Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-11-04T15:13:25Z", "is_private": false}, {"count": 25, "tags": [], "creator": "tom.vijlbrief@xs4all.nl", "text": "Created attachment 8916\nnew output after fix", "id": 46758, "time": "2003-11-04T15:18:54Z", "bug_id": 23883, "creation_time": "2003-11-04T15:18:54Z", "is_private": false, "attachment_id": 8916}, {"count": 26, "tags": [], "bug_id": 23883, "attachment_id": null, "text": "Acrobat6.0 shows the output reasonable, except that the red\nlines are irregular (jagged) :-/ .\n\nThe black lines look normal, strange...", "id": 46811, "time": "2003-11-04T19:43:36Z", "creator": "tom.vijlbrief@xs4all.nl", "creation_time": "2003-11-04T19:43:36Z", "is_private": false}, {"count": 27, "tags": [], "creator": "glenmazza@yahoo.com", "text": "Tom,\n\nCouple of comments:\n\n(1.) You mentioned another bug earlier in this thread, separate from this \nissue, that fails in *both* 6.0 and 5.5--it may be good to add that issue in a \nseparate Bugzilla report so it isn't forgotten.\n\n(2.) Would you like me to hold off on this patch until you have it working for \n6.0?  IIRC the code *was* working OK in 6.0 but failing in 5.5--I wouldn't want \nto apply a patch that would cause the reverse to occur.\n\nThanks,\nGlen", "id": 46824, "time": "2003-11-04T22:06:24Z", "bug_id": 23883, "creation_time": "2003-11-04T22:06:24Z", "is_private": false, "attachment_id": null}, {"count": 28, "tags": [], "creator": "tom.vijlbrief@xs4all.nl", "text": ">(1.) You mentioned another bug earlier in this thread, separate from this \n>issue, that fails in *both* 6.0 and 5.5--it may be good to add that issue in a \n>separate Bugzilla report so it isn't forgotten.\n>\n>(2.) Would you like me to hold off on this patch until you have it working for \n>6.0?  IIRC the code *was* working OK in 6.0 but failing in 5.5--I wouldn't \n>want \n>to apply a patch that would cause the reverse to occur.\n\nTo start with item (2), the fix solves a bug that generates wrong PDF\n(incorrect rounding, this could be seen as the spikes pointing\nnorth from the text items). The generated PDF is wrong for any PDF\nviewer, so the fix can and should be applied now. It should not break\nany existing test-cases, the PDF-output could be larger though, because\nthe rounding process is more conservative. The original code rounded to\n1 decimal digit in some cases, I always round to 8 decimal positions,\nbut trailing zeros are omitted, so the PDF should not grow much.\nNot that the original code was rounding incorrectly in some cases,\nmy code is rounding correctly, but also more conservative. This could\nperhaps be optimised, but I think correctnes is more important for now.\n\nNow for item (1), the original bug STILL exists. FOP will generate PDF\nin some cases of embedded SVG which exceeds the capabilities for certain\nPDF-viewers, c.q. violates the formal PDF specs/constraints. My fix is NOT\nrelated to this behaviour. Acrobat 6 is more tolerant than Acrobat 5 for\nlarge translations.\n\nIn Acrobat 5 text and filled areas are drawn correctly, despite\nlarge translations (>32000), but path objects are drawn incorrectly.\n\nIn acrobat 6 also path object are drawn better, but still not correct.\nGNU ghostscript DOES draw the PDF-output correct. \n\nI think we agree that the generated PDF should be viewable with\nat least the recent Adobe products, so a fix for FOP still has to be\nwritten, although it probably isn't very easy. (I'm not a PDF-expert,\nperhaps it IS easy to solve...)\n\n", "id": 46923, "time": "2003-11-06T12:06:44Z", "bug_id": 23883, "creation_time": "2003-11-06T12:06:44Z", "is_private": false, "attachment_id": null}, {"count": 29, "tags": [], "bug_id": 23883, "attachment_id": null, "id": 47284, "time": "2003-11-12T23:40:27Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-11-12T23:40:27Z", "is_private": false, "text": "Tom,\n\nYour patch fixed things quite well in 0.20.5--I tested it--*but* the nightly \nmaintenance version of 0.20.5 has a different Batik library (a version of a \ncouple of months ago, that we had to update because of an API change) that your \npatch would *not* fix.  We're going to pass on making the change in 0.20.5 \n(maintenance is mostly frozen anyway).  Your patch has the same problems with \n1.0, which has an even newer Batik library, however, there may be also other \nissues in 1.0 causing the problem there.)\n\nThere may be other issues as well with the patch you supplied, namely the loss \nof the third method which allows one to choose the number of desired decimal \npoints--I'm unsure how needed it is right now. (Also, I'm unclear how \nexponential notation is an issue with the double data type--that should be \nunderstood inherently with that datatype, correct?  Nonetheless, your patch \n*did* fix the problem.)  Some of our more experienced SVG developers may be \nable to comment on this later for 1.0.\n\nThe bug below has gotten too huge for anyone to look at, so I just took the \nrelevant points and redid the bug in #24666.  Clearly, this is something that \nneeds fixing but we'll concentrate on making sure it will be OK in 1.0 instead. \n\nThanks,\nGlen\n\n*** This bug has been marked as a duplicate of 24666 ***"}, {"count": 30, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "id": 156426, "time": "2012-04-01T13:47:55Z", "bug_id": 23883, "creation_time": "2012-04-01T13:47:55Z", "is_private": false}]
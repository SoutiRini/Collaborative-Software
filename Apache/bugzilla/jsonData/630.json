[{"count": 0, "tags": [], "creator": "kelly@apache.org", "text": "OVERVIEW DESCRIPTION\n--------------------\n\nWhen using a specified classpath (by either the\nclasspath attribute or nested <classpath> elements)\nwith the <java> task, the AntClassLoader is constructed\nso that the system class loader is used first.  That seems\nwrong.\n\nLine 122 of ExecuteJava.java reads:\n\n    AntClassLoader loader = new AntClassLoader(project, classpath);\n\nThis constructs a class loader that consults the system\nclass loader first for classes.\n\nIt should read:\n\n    AntClassLoader loader = new AntClassLoader(project, classpath,\n        /*systemFirst*/ false);\n\nAfter all, if the user has specified a classpath, he\npresumably wants it to be used preferentially to load\nclasses.\n\nSTEPS TO REPRODUCE\n------------------\n\nCreate a file App.java:\n\n---\npublic class App {\n    public static void main(String[] argv) {\n        MyClass m = new MyClass();\n    }\n}\nclass MyClass { }\n---\n\nCompile this file, generating public class App and\npackage-scoped class MyClass.  Put both into a jar\nfile, app.jar.  List app.jar in your CLASSPATH\nenvironment variable.  Create a build.xml file:\n\n<project name=\"bug\" default=\"run\" basedir=\".\">\n  <target name=\"run\">\n    <java classpath=\"app.jar\" classname=\"App\"/>\n  </target>\n</project>\n    \nRun ant.\n\nACTUAL RESULTS\n--------------\n\nBUILD FAILED\n\n/home/saffron/kelly/junk/build.xml:4: java.lang.IllegalAccessError: try to \naccess class MyClass from class App\n--- Nested Exception ---\njava.lang.IllegalAccessError: try to access class MyClass from class App\n        at java.lang.reflect.Method.invoke(Native Method)\n        at org.apache.tools.ant.taskdefs.ExecuteJava.execute\n(ExecuteJava.java:126)\n        at org.apache.tools.ant.taskdefs.Java.run(Java.java:260)\n        at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:123)\n        at org.apache.tools.ant.taskdefs.Java.execute(Java.java:87)\n        at org.apache.tools.ant.Target.execute(Target.java:153)\n        at org.apache.tools.ant.Project.runTarget(Project.java:898)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:536)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:510)\n        at org.apache.tools.ant.Main.runBuild(Main.java:421)\n        at org.apache.tools.ant.Main.main(Main.java:149)\n\nEXPECETED RESULTS\n-----------------\n\nBUILD SUCCEEDED\n\nBUILD DATE AND PLATFORM\n-----------------------\n\nAnt 1.3 Beta 2 built 16 Feb 2001 1.05pm PST on FreeBSD\n4.2 using FreeBSD JDK 1.2.2\n\nADDITIONAL BUILDS AND PLATFORMS\n-------------------------------\n\nAnt 1.3 Beta 2 built 16 Feb 2001 12.35pm PST on Windows\n98 Sun JDK 1.3.0.\n\nADDITIONAL INFORMATION\n----------------------\n\nYou can work around the problem by either removing the\nclasspath attribute from build.xml, or removing app.jar\nfrom the CLASSPATH environment variable.\n\nWe'd rather not do that, though: we're shipping\nbuild.xml files with the classpath attribute.  Some\ncustomers are have the problem-causing .jar file in\ntheir CLASSPATH, and some don't.  It's created a\nsupport problem having to tell users to either remove\nthe .jar file from their CLASSPATH or edit the\nbuild.xml file.\n\nTo repair the problem, modify line 122 of\nExecuteJava.java to read:\n\n    AntClassLoader loader = new AntClassLoader(project, classpath,\n        /*systemFirst*/ false);\n\nThis makes sense: the user has specified a classpath in\nbuild.xml, so that one should be used preferentially.\nUsing the other constructor (which defaults systemFirst\nto true) means that some classes may be loaded by the\nsystem class loader, and some by the classpath\nspecified in build.xml.", "id": 741, "time": "2001-02-16T14:27:25Z", "bug_id": 630, "creation_time": "2001-02-16T14:27:25Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "conor@apache.org", "text": "I have made this change but I have gone a little further and added the \nconcept of isolating the classloaders. Now if the class isn't found in the \nsupplied classpath, it will throw a classNotFoundException even if the \nclass is avilable on the system classpath. This makes the <java> task work much\nlike running java from the command line (but not identical). So, it now \nworks like this\n1. If you don't supply a classpath, Ant's classpath is used\n2. If you do supply a classpath, all necessary classes need to be \n   on that classpath.\n\nIf you always want to include the system classpath in all classpaths, \nyou can set the property\nbuild.sysclasspath to eiher \"first\" or \"last\" depending on where you want the\nsystem classpath to appear.", "id": 750, "time": "2001-02-18T05:46:21Z", "bug_id": 630, "creation_time": "2001-02-18T05:46:21Z", "tags": [], "is_private": false}]
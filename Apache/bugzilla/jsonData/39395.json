[{"count": 0, "tags": [], "creator": "yegor@dinom.ru", "text": "(1) Obsolete classes which go away:\norg.apache.poi.hslf.model.Ellipse.java\norg.apache.poi.hslf.model.Rectangle.java\n\n(2) TextBox didn't properly handle text in placeholders. \nNow the problem is fixed. \nPlaceholder is a new subclass of TextBox which handles such text.\nI also had to implement a couple of new records:\n\nOEPlaceholderAtom.java\n - Describes a placeholder. \n\nOutlineTextRefAtom.java\n - If present it indicates that TextHeaderAtom, TextBytesAtom and StyleTextPropAtom\nare stored in Document.SlideListWithText instead of the shape'S escher container.\nThe content is just a 0-based index of the [TextHeaderAtom, TextBytesAtom and\nStyleTextPropAtom] block in SlideListWithText.\n\nIf you iterate over text shapes in a slide and collect them in a set \nit must be the same as returned by Slide.getTextRuns().\nThe test code is in TestShapes.testTextBoxSet() . It is a good sanity check\nwhich revealed some bugs.\n\n(4) Placeholder shape. It is a subclass of TextBox which stores text attributes\noutside of it's escher container.\n\nFor now I can create the only type of placeholder: slide title.\nUse case:\n\n Slide slide = ppt.createSlide(); //blank slide\n\n TextBox title = slide.addTitle(); //add title placeholder. \n title.setText(\"Hello, World\");\n\n...\n\n If you edit this shape in powerpoint you can\n  (a) see that it is a placeholder\n  (b) see that it holds slide's title. Outline view shows the  correct title text .\n\nI also added the sample code in how-to-shapes.xml\n\n(5) Added getFontColor and setFontColor to RichTextRun. Now I think all\ncharacter format properties are covered.\n\nRegards, Yegor Kozlov", "id": 88440, "time": "2006-04-24T14:44:42Z", "bug_id": 39395, "creation_time": "2006-04-24T14:44:42Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": 18167, "id": 88441, "time": "2006-04-24T14:45:21Z", "bug_id": 39395, "creation_time": "2006-04-24T14:45:21Z", "is_private": false, "text": "Created attachment 18167\nsource code"}, {"count": 2, "tags": [], "text": "Created attachment 18168\npatch with the changes", "attachment_id": 18168, "id": 88442, "creator": "yegor@dinom.ru", "time": "2006-04-24T14:45:47Z", "bug_id": 39395, "creation_time": "2006-04-24T14:45:47Z", "is_private": false}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 88919, "time": "2006-05-08T16:42:24Z", "bug_id": 39395, "creation_time": "2006-05-08T16:42:24Z", "is_private": false, "text": "Cheers for this, I've applied it. Couple of things though:\n\nDo you think have a nice helper for RGB for the text colour (and presumably also\nbackground colour, shape colour etc), splitting into the tripplets, or should we\njust stick with using the java.awt one?\n\nLooking at TextBox, I'm not happy with how much of RichTextRun it seems to be\nduplicating. Can we just provide a RichTextRun over the top of it? Otherwise, we\nshould refactor both of them to remove the duplication.\n\nAlso, why did you change TextCharsAtom to no longer use the common StringUtil\nstuff? I didn't commit that, I didn't see the point!"}, {"count": 4, "tags": [], "text": "\n\n>> Do you think have a nice helper for RGB for the text colour (and presumably also\n>> background colour, shape colour etc), splitting into the tripplets, or should we\n>> just stick with using the java.awt one?\n\nEnd-user should work with  java.awt.Color. For internal purposes we\ncan use either approach, but what we have now is OK to me.\n\nIf you are going to work with colors in PowerPoint, be aware it is not always\nlogical:\n\n- RGB values are swapped, i.e. it is 'BGR' instead of 'RGB'\n- alpha component is 254 for rich text runs and 0 for shape color.\n\nThere may be more 'features' we don't know about .\n\n>> Looking at TextBox, I'm not happy with how much of RichTextRun it seems to be\n>> duplicating. Can we just provide a RichTextRun over the top of it? Otherwise, we\n>> should refactor both of them to remove the duplication.\n\nThis is only temporary architecture. I have plans how to refactor it,\njust need time to put things in order in my head and start\nimplementing it.\n\n\n>> Also, why did you change TextCharsAtom to no longer use the common StringUtil\n>> stuff? I didn't commit that, I didn't see the point!\n\nOps. My bad, sorry.\nThis is experimental code and it came to the patch by mistake.\n\nI studied why TextBox didn't display extended ASCII wingdings and\ndecided to use TextCharsAtom by default, not TextBytesAtom when a new\nTextBox is created. Unfortunately I couldn't do it with current TextCharsAtom.\n\nThe following simple code results in error:\n\n        TextCharsAtom tca = new TextCharsAtom();\n        String txt = tca.getText();\n\nava.lang.ArrayIndexOutOfBoundsException: Illegal offset\n        at org.apache.poi.util.StringUtil.getFromUnicodeLE(StringUtil.java:67)\n        at org.apache.poi.util.StringUtil.getFromUnicodeLE(StringUtil.java:91)\n        at org.apache.poi.hslf.record.TextCharsAtom.getText(TextCharsAtom.java:44)\n\nI looked at TextCharsAtom and simplified it a bit: construct UTF-16LE\nstring directly from a byte array. With this simplification it worked\nfine.\n\nAnd what were your reasons to use StringUtil instead of\nconstructing strings from byte array? I prefer to keep things simple.\n\nOf course I would have discussed this change with you if I meant to commit it.\n\nRegards, Yegor\n", "is_private": false, "id": 88984, "creator": "yegor@dinom.ru", "time": "2006-05-10T07:30:23Z", "bug_id": 39395, "creation_time": "2006-05-10T07:30:23Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 39395, "text": "(In reply to comment #4)\n> >> Do you think have a nice helper for RGB for the text colour (and presumably\nalso\n> >> background colour, shape colour etc), splitting into the tripplets, or\nshould we\n> >> just stick with using the java.awt one?\n> \n> End-user should work with  java.awt.Color. For internal purposes we\n> can use either approach, but what we have now is OK to me.\n> \n> If you are going to work with colors in PowerPoint, be aware it is not always\n> logical:\n> \n> - RGB values are swapped, i.e. it is 'BGR' instead of 'RGB'\n> - alpha component is 254 for rich text runs and 0 for shape color.\n> \n> There may be more 'features' we don't know about .\n\nHmm. Perhaps we will need our own wrapper longer term then, to handle these fun\nfeatures!\n\n> >> Looking at TextBox, I'm not happy with how much of RichTextRun it seems to be\n> >> duplicating. Can we just provide a RichTextRun over the top of it?\nOtherwise, we\n> >> should refactor both of them to remove the duplication.\n> \n> This is only temporary architecture. I have plans how to refactor it,\n> just need time to put things in order in my head and start\n> implementing it.\n\nOK, sure. We should probably warn people that the API is subject to a lot of\nchange on it though!\n\n> >> Also, why did you change TextCharsAtom to no longer use the common StringUtil\n> >> stuff? I didn't commit that, I didn't see the point!\n> \n> Ops. My bad, sorry.\n> This is experimental code and it came to the patch by mistake.\n> \n> I studied why TextBox didn't display extended ASCII wingdings and\n> decided to use TextCharsAtom by default, not TextBytesAtom when a new\n> TextBox is created. Unfortunately I couldn't do it with current TextCharsAtom.\n\nI've fixed StringUtils so it now works, and added a test for the TextCharsAtom\nconstructor stuff\n\n> And what were your reasons to use StringUtil instead of\n> constructing strings from byte array? I prefer to keep things simple.\n\nI prefer not to duplicate code, when we already have handy util methods :)\n\nNick", "id": 88993, "time": "2006-05-10T13:24:35Z", "creator": "apache@gagravarr.org", "creation_time": "2006-05-10T13:24:35Z", "is_private": false, "attachment_id": null}]
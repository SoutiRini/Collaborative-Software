[{"count": 0, "tags": [], "text": "test/testlfs reports:\n\n[...]\ntestcond            : SUCCESS\ntestlfs             : |Line 345: Large Files not supported\nSUCCESS\ntestmmap            : SUCCESS\n[...]\n\nThis is rather strange, considering, the entire build is 64-bit. I'm afraid, that in other code (inside apr itself or in the clients), the !APR_HAS_LARGE_FILES will be bogusly considered as a 4Gb (or even 2Gb) limit on the file-size.", "attachment_id": null, "id": 119685, "creator": "mi+apache@aldan.algebra.com", "time": "2008-08-11T08:28:10Z", "bug_id": 45615, "creation_time": "2008-08-11T08:28:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45615, "attachment_id": null, "is_private": false, "id": 119876, "time": "2008-08-17T23:44:13Z", "creator": "bojan@rexursive.com", "creation_time": "2008-08-17T23:44:13Z", "text": "Could you attach the relevant part of config.log?"}, {"count": 2, "text": "Closing, no new information provided. Please reopen if this is still a problem and attach requested info.", "bug_id": 45615, "attachment_id": null, "id": 125113, "time": "2009-02-23T19:45:15Z", "creator": "bojan@rexursive.com", "creation_time": "2009-02-23T19:45:15Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 45615, "attachment_id": null, "text": "I would like to reopen this bug report for apr 1.5.2 wherein I see similar\noutput during testing thus : \n\n.\n.\n.\ntestlock            :  SUCCESS\ntestcond            :  SUCCESS\nLine 345: Large Files not supported\ntestlfs             :  SUCCESS\ntestmmap            :  SUCCESS\n.\n.\n.\n\nThe system in this case if an Oracle Niagara T5220 UltraSPARC T2 server\nrunning entirely up to date Solaris 10 with Oracle Studio 12.5 dev tools \nwhich are also the latest release. My existing Apache 2.4.23 systems are\nall running fine with previous builds using apr-1.5.2 and apr-util 1.5.4\nso this is an oddity but seems to be a false message. Regardless, it does\nhappen. \n\nSo the essential environment bits are : \n\nCC=/opt/developerstudio12.5/bin/cc\nCXX=/opt/developerstudio12.5/bin/CC\n\nCFLAGS=-errfmt=error -erroff=%none -errshort=full -xstrconst -xildoff -m64 -xarch=sparc -xmemalign=8s -xnolibmil -Xa -xcode=pic32 -xregs=no%appl -xlibmieee -mc -g -xs -ftrap=%none -Qy -xbuiltin=%none -xdebugformat=dwarf -xunroll=1 -D_TS_ERRNO -D_POSIX_PTHREAD_SEMANTICS -D_LARGEFILE64_SOURCE\n\nCPPFLAGS=-I/usr/local/include -I/usr/local/ssl/include -I/usr/local/include/apr-1 -D_TS_ERRNO -D_POSIX_PTHREAD_SEMANTICS -D_LARGEFILE64_SOURCE\n\nCXXFLAGS=-dalign -erroff=%none -errtags=yes -ftrap=%none -g -xcode=pic32 -m64 -xarch=sparc -mc -xunroll=1 -xbuiltin=%none -xdepend=no -xnolibmopt -xlinkopt=0 -xnolibmil -xregs=no%appl -xs -D_POSIX_PTHREAD_SEMANTICS -D_LARGEFILE64_SOURCE -D_TS_ERRNO\n\nLANG=en_US.UTF-8\nLC_ALL=en_US.UTF-8\nLC_COLLATE=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\nLC_MESSAGES=en_US.UTF-8\nLC_MONETARY=en_US.UTF-8\nLC_NUMERIC=en_US.UTF-8\nLC_TIME=en_US.UTF-8\n\nLD_LIBRARY_PATH=/usr/local/lib:/usr/local/ssl/lib\n\nconfigure was : \n\n./configure --prefix=/usr/local \\\n> --enable-threads --enable-shared --enable-static \\\n> --enable-other-child --with-devrandom=/dev/random --enable-posix-shm \n\nThe results of the configure were : \n\nchecking build system type... sparc-sun-solaris2.10\nchecking host system type... sparc-sun-solaris2.10\nchecking target system type... sparc-sun-solaris2.10\nConfiguring APR library\nPlatform: sparc-sun-solaris2.10\nchecking for working mkdir -p... yes\nAPR Version: 1.5.2\nchecking for chosen layout... apr\nchecking for gcc... /opt/developerstudio12.5/bin/cc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... no\nchecking whether /opt/developerstudio12.5/bin/cc accepts -g... yes\nchecking for /opt/developerstudio12.5/bin/cc option to accept ISO C89... none needed\nchecking for a sed that does not truncate output... /usr/local/bin/gsed\nApplying APR hints file rules for sparc-sun-solaris2.10\n  adding \"-DSOLARIS2=10\" to CPPFLAGS\n  adding \"-D_REENTRANT\" to CPPFLAGS\n  setting apr_lock_method to \"USE_PROC_PTHREAD_SERIALIZE\"\n  setting ac_cv_func_readdir64_r to \"no\"\n(Default will be unix)\nchecking whether /usr/local/bin/gmake sets $(MAKE)... yes\nchecking how to run the C preprocessor... /opt/developerstudio12.5/bin/cc -E\nchecking for gawk... /usr/local/bin/gawk\nchecking whether ln -s works... yes\nchecking for ranlib... ranlib\nchecking for a BSD-compatible install... build/install.sh -c\nchecking for rm... rm\nchecking for as... /usr/ccs/bin/as\nchecking for cpp... no\nchecking for ar... /usr/ccs/bin/ar\nchecking for grep that handles long lines and -e... /usr/local/bin/grep\nchecking for egrep... /usr/local/bin/grep -E\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking minix/config.h usability... no\nchecking minix/config.h presence... no\nchecking for minix/config.h... no\nchecking whether it is safe to define __EXTENSIONS__... yes\nchecking for library containing strerror... none required\nchecking whether system uses EBCDIC... no\nperforming libtool configuration...\nchecking how to print strings... printf\nchecking for a sed that does not truncate output... (cached) /usr/local/bin/gsed\nchecking for fgrep... /usr/local/bin/grep -F\nchecking for non-GNU ld... /usr/ccs/bin/sparcv9/ld\nchecking if the linker (/usr/ccs/bin/sparcv9/ld) is GNU ld... no\nchecking for BSD- or MS-compatible name lister (nm)... /usr/ccs/bin/sparcv9/nm -p\nchecking the name lister (/usr/ccs/bin/sparcv9/nm -p) interface... BSD nm\nchecking the maximum length of command line arguments... 786240\nchecking whether the shell understands some XSI constructs... yes\nchecking whether the shell understands \"+=\"... yes\nchecking how to convert sparc-sun-solaris2.10 file names to sparc-sun-solaris2.10 format... func_convert_file_noop\nchecking how to convert sparc-sun-solaris2.10 file names to toolchain format... func_convert_file_noop\nchecking for /usr/ccs/bin/sparcv9/ld option to reload object files... -r\nchecking for objdump... objdump\nchecking how to recognize dependent libraries... pass_all\nchecking for dlltool... dlltool\nchecking how to associate runtime and link libraries... printf %s\\n\nchecking for archiver @FILE support... no\nchecking for strip... strip\nchecking for ranlib... (cached) ranlib\nchecking command to parse /usr/ccs/bin/sparcv9/nm -p output from /opt/developerstudio12.5/bin/cc object... ok\nchecking for sysroot... no\nchecking for mt... mt\nchecking if mt is a manifest tool... no\nchecking for dlfcn.h... yes\nchecking for objdir... .libs\nchecking for /opt/developerstudio12.5/bin/cc option to produce PIC... -KPIC -DPIC\nchecking if /opt/developerstudio12.5/bin/cc PIC flag -KPIC -DPIC works... yes\nchecking if /opt/developerstudio12.5/bin/cc static flag -Bstatic works... yes\nchecking if /opt/developerstudio12.5/bin/cc supports -c -o file.o... yes\nchecking if /opt/developerstudio12.5/bin/cc supports -c -o file.o... (cached) yes\nchecking whether the /opt/developerstudio12.5/bin/cc linker (/usr/ccs/bin/sparcv9/ld -64) supports shared libraries... yes\nchecking dynamic linker characteristics... solaris2.10 ld.so\nchecking how to hardcode library paths into programs... immediate\nchecking whether stripping libraries is possible... no\nchecking if libtool supports shared libraries... yes\nchecking whether to build shared libraries... yes\nchecking whether to build static libraries... yes\n\nCheck for compiler flags...\nchecking whether the compiler provides atomic builtins... no\nchecking if /opt/developerstudio12.5/bin/cc -MM can create proper make dependencies... yes\nchecking whether to enable -D_LARGEFILE64_SOURCE... no\n\nChecking for libraries...\nchecking for library containing gethostbyname... -lnsl\nchecking for library containing gethostname... none required\nchecking for library containing socket... -lsocket\nchecking for library containing crypt... none required\nchecking for main in -ltruerand... no\nchecking for library containing modf... none required\n\nChecking for Threads...\nchecking for CFLAGS needed for pthreads... none\nchecking for LIBS needed for pthreads... -lpthread\n  adding \"-lpthread\" to LIBS\nchecking pthread.h usability... yes\nchecking pthread.h presence... yes\nchecking for pthread.h... yes\nchecking whether pthread_getspecific takes two arguments... no\nchecking whether pthread_attr_getdetachstate takes one argument... no\nchecking for recursive mutex support... yes\nchecking for pthread_key_delete... yes\nchecking for pthread_rwlock_init... yes\nchecking for pthread_attr_setguardsize... yes\nchecking for pthread_yield... no\nchecking for pthread_rwlock_t... yes\nchecking sched.h usability... yes\nchecking sched.h presence... yes\nchecking for sched.h... yes\nchecking for sched_yield... no\nAPR will use threads\nchecking for readdir in -lc_r... no\nchecking for gethostbyname in -lc_r... no\nchecking for gethostbyaddr in -lc_r... no\nchecking for getservbyname in -lc_r... no\nchecking for gethostbyname_r... yes\nchecking for gethostbyaddr_r... yes\nchecking for getservbyname_r... yes\nchecking for sigsuspend... yes\nchecking for sigwait... yes\nchecking for poll... yes\nchecking for kqueue... no\nchecking for port_create... yes\nchecking for epoll support... no\nchecking for epoll_create1 support... no\nchecking for dup3 support... no\nchecking for accept4 support... no\nchecking for SOCK_CLOEXEC support... no\nchecking for fdatasync... yes\nchecking for epoll_create1 support... (cached) no\nchecking for asio -> message queue support... no\nchecking for dup3 support... (cached) no\nchecking for accept4 support... (cached) no\nchecking for SOCK_CLOEXEC support... (cached) no\nchecking for getpwnam_r... yes\nchecking for getpwuid_r... yes\nchecking for getgrnam_r... yes\nchecking for getgrgid_r... yes\n\nChecking for Shared Memory Support...\nchecking for library containing shm_open... -lrt\nchecking for sys/types.h... (cached) yes\nchecking sys/mman.h usability... yes\nchecking sys/mman.h presence... yes\nchecking for sys/mman.h... yes\nchecking sys/ipc.h usability... yes\nchecking sys/ipc.h presence... yes\nchecking for sys/ipc.h... yes\nchecking sys/mutex.h usability... yes\nchecking sys/mutex.h presence... yes\nchecking for sys/mutex.h... yes\nchecking sys/shm.h usability... yes\nchecking sys/shm.h presence... yes\nchecking for sys/shm.h... yes\nchecking sys/file.h usability... yes\nchecking sys/file.h presence... yes\nchecking for sys/file.h... yes\nchecking kernel/OS.h usability... no\nchecking kernel/OS.h presence... no\nchecking for kernel/OS.h... no\nchecking os2.h usability... no\nchecking os2.h presence... no\nchecking for os2.h... no\nchecking windows.h usability... no\nchecking windows.h presence... no\nchecking for windows.h... no\nchecking for mmap... yes\nchecking for munmap... yes\nchecking for shm_open... yes\nchecking for shm_unlink... yes\nchecking for shmget... yes\nchecking for shmat... yes\nchecking for shmdt... yes\nchecking for shmctl... yes\nchecking for create_area... no\nchecking for MAP_ANON in sys/mman.h... yes\nchecking for /dev/zero... yes\nchecking for mmap that can map /dev/zero... yes\ndecision on anonymous shared memory allocation method... 4.4BSD-style mmap() via MAP_ANON\ndecision on namebased memory allocation method... mmap() via POSIX.1 shm_open() on temporary file\nchecking for size_t... yes\nchecking for working alloca.h... yes\nchecking for alloca... yes\nchecking for calloc... yes\nchecking for setsid... yes\nchecking for isinf... no\nchecking for isnan... yes\nchecking for getenv... yes\nchecking for putenv... yes\nchecking for setenv... yes\nchecking for unsetenv... yes\nchecking for writev... yes\nchecking for getifaddrs... no\nchecking for utime... yes\nchecking for utimes... yes\nchecking for setrlimit... yes\nchecking for getrlimit... yes\nchecking for sendfilev in -lsendfile... yes\nchecking for sendfile... yes\nchecking for send_file... no\nchecking for sendfilev... yes\nchecking for sigaction... yes\nchecking whether sys_siglist is declared... no\nchecking for fork... yes\nchecking for inet_addr... yes\nchecking for inet_network... yes\nchecking for _getch... no\nchecking for strerror_r... yes\nchecking for type of return code from strerror_r... int\nchecking for mmap... (cached) yes\nchecking for memmove... yes\nchecking for getpass... yes\nchecking for getpassphrase... yes\nchecking for gmtime_r... yes\nchecking for localtime_r... yes\nchecking for mkstemp... yes\nchecking whether sigwait takes one argument... no\nchecking for ANSI C header files... (cached) yes\nchecking ByteOrder.h usability... no\nchecking ByteOrder.h presence... no\nchecking for ByteOrder.h... no\nchecking conio.h usability... no\nchecking conio.h presence... no\nchecking for conio.h... no\nchecking crypt.h usability... yes\nchecking crypt.h presence... yes\nchecking for crypt.h... yes\nchecking ctype.h usability... yes\nchecking ctype.h presence... yes\nchecking for ctype.h... yes\nchecking dir.h usability... no\nchecking dir.h presence... no\nchecking for dir.h... no\nchecking dirent.h usability... yes\nchecking dirent.h presence... yes\nchecking for dirent.h... yes\nchecking dl.h usability... no\nchecking dl.h presence... no\nchecking for dl.h... no\nchecking for dlfcn.h... (cached) yes\nchecking errno.h usability... yes\nchecking errno.h presence... yes\nchecking for errno.h... yes\nchecking fcntl.h usability... yes\nchecking fcntl.h presence... yes\nchecking for fcntl.h... yes\nchecking grp.h usability... yes\nchecking grp.h presence... yes\nchecking for grp.h... yes\nchecking io.h usability... no\nchecking io.h presence... no\nchecking for io.h... no\nchecking limits.h usability... yes\nchecking limits.h presence... yes\nchecking for limits.h... yes\nchecking mach-o/dyld.h usability... no\nchecking mach-o/dyld.h presence... no\nchecking for mach-o/dyld.h... no\nchecking malloc.h usability... yes\nchecking malloc.h presence... yes\nchecking for malloc.h... yes\nchecking for memory.h... (cached) yes\nchecking netdb.h usability... yes\nchecking netdb.h presence... yes\nchecking for netdb.h... yes\nchecking osreldate.h usability... no\nchecking osreldate.h presence... no\nchecking for osreldate.h... no\nchecking poll.h usability... yes\nchecking poll.h presence... yes\nchecking for poll.h... yes\nchecking process.h usability... no\nchecking process.h presence... no\nchecking for process.h... no\nchecking pwd.h usability... yes\nchecking pwd.h presence... yes\nchecking for pwd.h... yes\nchecking semaphore.h usability... yes\nchecking semaphore.h presence... yes\nchecking for semaphore.h... yes\nchecking signal.h usability... yes\nchecking signal.h presence... yes\nchecking for signal.h... yes\nchecking stdarg.h usability... yes\nchecking stdarg.h presence... yes\nchecking for stdarg.h... yes\nchecking stddef.h usability... yes\nchecking stddef.h presence... yes\nchecking for stddef.h... yes\nchecking stdio.h usability... yes\nchecking stdio.h presence... yes\nchecking for stdio.h... yes\nchecking for stdlib.h... (cached) yes\nchecking for string.h... (cached) yes\nchecking for strings.h... (cached) yes\nchecking sysapi.h usability... no\nchecking sysapi.h presence... no\nchecking for sysapi.h... no\nchecking sysgtime.h usability... no\nchecking sysgtime.h presence... no\nchecking for sysgtime.h... no\nchecking termios.h usability... yes\nchecking termios.h presence... yes\nchecking for termios.h... yes\nchecking time.h usability... yes\nchecking time.h presence... yes\nchecking for time.h... yes\nchecking tpfeq.h usability... no\nchecking tpfeq.h presence... no\nchecking for tpfeq.h... no\nchecking tpfio.h usability... no\nchecking tpfio.h presence... no\nchecking for tpfio.h... no\nchecking for unistd.h... (cached) yes\nchecking unix.h usability... no\nchecking unix.h presence... no\nchecking for unix.h... no\nchecking for windows.h... (cached) no\nchecking winsock2.h usability... no\nchecking winsock2.h presence... no\nchecking for winsock2.h... no\nchecking arpa/inet.h usability... yes\nchecking arpa/inet.h presence... yes\nchecking for arpa/inet.h... yes\nchecking for kernel/OS.h... (cached) no\nchecking net/errno.h usability... no\nchecking net/errno.h presence... no\nchecking for net/errno.h... no\nchecking netinet/in.h usability... yes\nchecking netinet/in.h presence... yes\nchecking for netinet/in.h... yes\nchecking netinet/sctp.h usability... yes\nchecking netinet/sctp.h presence... yes\nchecking for netinet/sctp.h... yes\nchecking netinet/sctp_uio.h usability... no\nchecking netinet/sctp_uio.h presence... no\nchecking for netinet/sctp_uio.h... no\nchecking for sys/file.h... (cached) yes\nchecking sys/ioctl.h usability... yes\nchecking sys/ioctl.h presence... yes\nchecking for sys/ioctl.h... yes\nchecking for sys/mman.h... (cached) yes\nchecking sys/param.h usability... yes\nchecking sys/param.h presence... yes\nchecking for sys/param.h... yes\nchecking sys/poll.h usability... yes\nchecking sys/poll.h presence... yes\nchecking for sys/poll.h... yes\nchecking sys/resource.h usability... yes\nchecking sys/resource.h presence... yes\nchecking for sys/resource.h... yes\nchecking sys/select.h usability... yes\nchecking sys/select.h presence... yes\nchecking for sys/select.h... yes\nchecking sys/sem.h usability... yes\nchecking sys/sem.h presence... yes\nchecking for sys/sem.h... yes\nchecking sys/sendfile.h usability... yes\nchecking sys/sendfile.h presence... yes\nchecking for sys/sendfile.h... yes\nchecking sys/signal.h usability... yes\nchecking sys/signal.h presence... yes\nchecking for sys/signal.h... yes\nchecking sys/socket.h usability... yes\nchecking sys/socket.h presence... yes\nchecking for sys/socket.h... yes\nchecking sys/sockio.h usability... yes\nchecking sys/sockio.h presence... yes\nchecking for sys/sockio.h... yes\nchecking for sys/stat.h... (cached) yes\nchecking sys/sysctl.h usability... no\nchecking sys/sysctl.h presence... no\nchecking for sys/sysctl.h... no\nchecking sys/syslimits.h usability... no\nchecking sys/syslimits.h presence... no\nchecking for sys/syslimits.h... no\nchecking sys/time.h usability... yes\nchecking sys/time.h presence... yes\nchecking for sys/time.h... yes\nchecking for sys/types.h... (cached) yes\nchecking sys/uio.h usability... yes\nchecking sys/uio.h presence... yes\nchecking for sys/uio.h... yes\nchecking sys/un.h usability... yes\nchecking sys/un.h presence... yes\nchecking for sys/un.h... yes\nchecking sys/wait.h usability... yes\nchecking sys/wait.h presence... yes\nchecking for sys/wait.h... yes\nchecking for netinet/tcp.h... yes\nchecking for h_errno in netdb.h... yes\nchecking for off_t... yes\nchecking for pid_t... yes\nchecking for size_t... (cached) yes\nchecking for uid_t in sys/types.h... yes\nchecking for ssize_t... yes\nchecking for inline... inline\nchecking for an ANSI C-conforming const... yes\nchecking whether setpgrp takes no argument... yes\nchecking for socklen_t... yes\nchecking size of void*... 8\nchecking size of char... 1\nchecking size of int... 4\nchecking size of long... 8\nchecking size of short... 2\nchecking size of long long... 8\nchecking for INT64_C... yes\nchecking size of pid_t... 4\nchecking whether ssize_t and int are the same... no\nchecking whether ssize_t and long are the same... no\nchecking whether size_t and unsigned int are the same... no\nchecking whether size_t and unsigned long are the same... no\nchecking size of ssize_t... 8\nchecking which format to use for apr_ssize_t... %ld\nchecking size of size_t... 8\nchecking which format to use for apr_size_t... %ld\nchecking size of off_t... 8\nchecking which type to use for apr_off_t... off_t\nchecking size of ino_t... 8\nconfigure: using ino_t for ino_t\nchecking whether byte ordering is bigendian... yes\nchecking size of struct iovec... 16\nchecking for strnicmp... no\nchecking for strncasecmp... yes\nchecking for stricmp... no\nchecking for strcasecmp... yes\nchecking for strdup... yes\nchecking for strstr... yes\nchecking for memchr... yes\nchecking for strtol... yes\n\nChecking for DSO...\nchecking for dlopen... yes\nchecking for dlsym... yes\n\nChecking for Processes...\nchecking for waitpid... yes\nchecking for Variable Length Arrays... yes\nchecking struct rlimit... yes\n\nChecking for Locking...\nchecking for semget... yes\nchecking for semctl... yes\nchecking for flock... no\nchecking for semaphore.h... (cached) yes\nchecking OS.h usability... no\nchecking OS.h presence... no\nchecking for OS.h... no\nchecking for library containing sem_open... none required\nchecking for sem_close... yes\nchecking for sem_unlink... yes\nchecking for sem_post... yes\nchecking for sem_wait... yes\nchecking for create_sem... no\nchecking for working sem_open... yes\nchecking for union semun in sys/sem.h... no\nchecking for LOCK_EX in sys/file.h... no\nchecking for F_SETLK in fcntl.h... yes\nchecking for SEM_UNDO in sys/sem.h... yes\nchecking for POLLIN in poll.h sys/poll.h... yes\nchecking for PTHREAD_PROCESS_SHARED in pthread.h... yes\nchecking for pthread_mutexattr_setpshared... yes\nchecking for working PROCESS_SHARED locks... yes\nchecking for robust cross-process mutex support... yes\ndecision on apr_lock implementation method... USE_PROC_PTHREAD_SERIALIZE\nchecking if fcntl returns EACCES when F_SETLK is already held... no\nchecking if all interprocess locks affect threads... no\nchecking if POSIX sems affect threads in the same process... no\nchecking if SysV sems affect threads in the same process... no\nchecking if fcntl locks affect threads in the same process... no\nchecking if flock locks affect threads in the same process... no\nchecking for entropy source... /dev/random\n\nChecking for File Info Support...\nchecking for struct stat.st_blocks... yes\nchecking for struct stat.st_atimensec... no\nchecking for struct stat.st_ctimensec... no\nchecking for struct stat.st_mtimensec... no\nchecking for struct stat.st_atim.tv_nsec... yes\nchecking for struct stat.st_ctim.tv_nsec... yes\nchecking for struct stat.st_mtim.tv_nsec... yes\nchecking for struct stat.st_atime_n... no\nchecking for struct stat.st_ctime_n... no\nchecking for struct stat.st_mtime_n... no\nchecking for inode member of struct dirent... d_ino\nchecking for file type member of struct dirent... no\n\nChecking for OS UUID Support...\nchecking uuid.h usability... no\nchecking uuid.h presence... no\nchecking for uuid.h... no\nchecking uuid/uuid.h usability... yes\nchecking uuid/uuid.h presence... yes\nchecking for uuid/uuid.h... yes\nchecking for library containing uuid_create... no\nchecking for library containing uuid_generate... -luuid\nchecking for uuid_create... no\nchecking for uuid_generate... yes\nchecking for os uuid usability... yes\n\nChecking for Time Support...\nchecking for struct tm.tm_gmtoff... no\nchecking for struct tm.__tm_gmtoff... no\n\nChecking for Networking support...\nchecking for type in_addr... yes\nchecking if fd == socket on this platform... yes\nchecking style of gethostbyname_r routine... none\nchecking 3rd argument to the gethostbyname_r routines... char\nchecking style of getservbyname_r routine... solaris\nchecking if TCP_NODELAY setting is inherited from listening sockets... yes\nchecking if O_NONBLOCK setting is inherited from listening sockets... yes\nchecking whether TCP_NODELAY and TCP_CORK can both be enabled... no\nchecking for TCP_CORK in netinet/tcp.h... no\nchecking for TCP_NOPUSH in netinet/tcp.h... no\nchecking for SO_ACCEPTFILTER in sys/socket.h... no\nchecking whether SCTP is supported... yes\nchecking for struct ip_mreq... yes\nchecking for set_h_errno... no\n\nChecking for IPv6 Networking support...\nchecking for library containing getaddrinfo... none required\nchecking for library containing gai_strerror... none required\nchecking for library containing getnameinfo... none required\nchecking for gai_strerror... yes\nchecking for working getaddrinfo... yes\nchecking for negative error codes for getaddrinfo... no\nchecking for working getnameinfo... yes\nchecking for sockaddr_in6... yes\nchecking for sockaddr_storage... yes\nchecking for working AI_ADDRCONFIG... yes\nchecking if APR supports IPv6... yes\nchecking langinfo.h usability... yes\nchecking langinfo.h presence... yes\nchecking for langinfo.h... yes\nchecking for nl_langinfo... yes\n  setting have_unicode_fs to \"0\"\n  setting apr_has_xthread_files to \"0\"\n  setting apr_procattr_user_set_requires_password to \"0\"\n  setting apr_thread_func to \"\"\n  setting apr_has_user to \"1\"\n\nRestore user-defined environment settings...\n  restoring CPPFLAGS to \"-I/usr/local/include -I/usr/local/ssl/include -I/usr/local/include/apr-1 -D_TS_ERRNO -D_POSIX_PTHREAD_SEMANTICS -D_LARGEFILE64_SOURCE\"\n  setting EXTRA_CPPFLAGS to \" -DSOLARIS2=10 -D_REENTRANT\"\n  restoring CFLAGS to \"-errfmt=error -erroff=%none -errshort=full -xstrconst -xildoff -m64 -xarch=sparc -xmemalign=8s -xnolibmil -Xa -xcode=pic32 -xregs=no%appl -xlibmieee -mc -g -xs -ftrap=%none -Qy -xbuiltin=%none -xdebugformat=dwarf -xunroll=1 -D_TS_ERRNO -D_POSIX_PTHREAD_SEMANTICS -D_LARGEFILE64_SOURCE\"\n  setting EXTRA_CFLAGS to \"\"\n  restoring LDFLAGS to \"-L/usr/local/lib\"\n  setting EXTRA_LDFLAGS to \"\"\n  restoring LIBS to \"\"\n  setting EXTRA_LIBS to \"-luuid -lsendfile -lrt -lsocket -lnsl  -lpthread\"\n  restoring INCLUDES to \"\"\n  setting EXTRA_INCLUDES to \"\"\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating include/apr.h\nconfig.status: creating build/apr_rules.mk\nconfig.status: creating build/pkg/pkginfo\nconfig.status: creating apr-1-config\nconfig.status: creating apr.pc\nconfig.status: creating test/Makefile\nconfig.status: creating test/internal/Makefile\nconfig.status: creating include/arch/unix/apr_private.h\nconfig.status: executing libtool commands\nconfig.status: executing default commands\n\n\nThe build goes just fine and then during testing stage we see : \n\n.\n.\n.\ntestlock            :  SUCCESS\ntestcond            :  SUCCESS\nLine 345: Large Files not supported\ntestlfs             :  SUCCESS\ntestmmap            :  SUCCESS\ntestnames           :  SUCCESS\ntestoc              :  SUCCESS\ntestpath            :  SUCCESS\ntestpipe            :  SUCCESS\ntestpoll            :  SUCCESS\ntestpools           :  SUCCESS\ntestproc            :  SUCCESS\ntestprocmutex       :  SUCCESS\ntestrand            :  SUCCESS\ntestsleep           :  SUCCESS\ntestshm             :  SUCCESS\ntestsock            :  Line 376: Cannot test if connect completes synchronously\nSUCCESS\ntestsockets         :  SUCCESS\ntestsockopt         :  Line 84: TCP isn't corkable\nSUCCESS\nteststr             :  SUCCESS\n.\n.\n.\n\nTesting is horrifically slow as we are well into hour 6 now and no end in sight. \n\n# ps -ef | grep -E \"PID|testall\"\n     UID   PID  PPID   C    STIME TTY         TIME CMD\n    root 19786 22157   0 22:53:50 pts/4       0:00 grep -E PID|testall\n dclarke 18137 18130  25 16:18:56 pts/3     392:39 ./testall -v\n\n\nSo I would be concerned if it were not for the fact that my previous Apache \nbuilds all run so wonderfully fast and stable.", "id": 195943, "time": "2017-01-09T22:55:08Z", "creator": "dclarke@blastwave.org", "creation_time": "2017-01-09T22:55:08Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 45615, "is_private": false, "text": "I might be wrong, but this looks to me as follows:\n\n- you are doing a 64 bit build\n- as a consequence size of off_t and size_t both are already 8 bytes\n- the normal system calls handling files thus will already use large (8 bytes) data types, so no need to use the special *64 system calls\n\nSo your build should be fine. No LFS support here means no need to use special LFS calls. The basic ones will do even for large files.\n\nThe same configure and \"make check\" results appear when building for 64 bit Linux and gcc, not just on your Solaris system and Studio compiler.\n\nRegards,\n\nRainer", "id": 195944, "time": "2017-01-09T23:59:07Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2017-01-09T23:59:07Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "Thank you Rainer for the reply. I was mildly concerned but now I see\nthe logic. Perhaps the message should be changed. A bit. \n\nAlso, just how long should the tests run? \n\nI finally gave up and hit CTRL-C : \n\n\n\n\n$ /usr/bin/time -p /usr/local/bin/gmake test\ncd test && /usr/local/bin/gmake all check\ngmake[1]: Entering directory `/usr/local/build/apr-1.5.2_SunOS5.10_sparcv9.002/test'\ngmake[2]: Entering directory `/usr/local/build/apr-1.5.2_SunOS5.10_sparcv9.002/test'\n.\n.\n.\ntestvsn             :  SUCCESS\ntestskiplist        :  \n^Cgmake[1]: *** [check] Interrupt\ngmake: *** [check] Interrupt\ntime: command terminated abnormally.\n\nreal 41249.65\nuser 40885.05\nsys 293.16\n\nReally that can't be right. \n\nDennis", "is_private": false, "id": 195946, "creator": "dclarke@blastwave.org", "time": "2017-01-10T03:39:35Z", "bug_id": 45615, "creation_time": "2017-01-10T03:39:35Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "The APR \"make check\" runs about 8 minutes on a Solaris 10 Sparc Sun Fire V240 (SUNW,UltraSPARC-IIIi with 1,2 GHz) when compiled with gcc. I do not have times available for Niagara nor do I know times for the Studio compiler, but IMHO if it varies by more than a factor of 2 something is wrong.\n\nYou can run the make check, wait until the output doesn't make any more progress and then run a couple of \"pstack\" commands to collect the stacks the code is in. Also look at \"prstat\" to check, whether the code consumes CPU. Finally you can run \"truss -f -v all -w all -r all -o /path/to/my/OUTPUTFILE -p PID\" against the actual test binary.\n\nPlease do proceed this discussion on the users list, not here. Provide a bit of context when posting to the list so that the discussion can start freshly there. If you do not get appropriate help on the list or the discussion shows it is a real bug, you can open a new ticket here.\n\nFor details about the users list see:\n\nhttp://httpd.apache.org/lists.html#http-users\n\nRegards,\n\nRainer", "is_private": false, "id": 195954, "creator": "rainer.jung@kippdata.de", "time": "2017-01-10T09:21:31Z", "bug_id": 45615, "creation_time": "2017-01-10T09:21:31Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 45615, "is_private": false, "id": 195955, "time": "2017-01-10T09:22:39Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2017-01-10T09:22:39Z", "tags": [], "text": "Oups, I ment the APR dev list not the httpd users list:\n\nhttp://apr.apache.org/mailing-lists.html"}, {"count": 8, "tags": [], "text": "(In reply to Dennis Clarke from comment #5)\n> \n> testskiplist        :  \n> ^Cgmake[1]: *** [check] Interrupt\n\nDoes the system have a blocking rand() [1] call (when lacking entropy)?\n\n[1] http://pubs.opengroup.org/onlinepubs/009695399/functions/rand.html", "attachment_id": null, "bug_id": 45615, "id": 195956, "time": "2017-01-10T09:30:47Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-01-10T09:30:47Z", "is_private": false}, {"count": 9, "tags": [], "creator": "dclarke@blastwave.org", "attachment_id": null, "id": 195970, "time": "2017-01-11T00:05:50Z", "bug_id": 45615, "creation_time": "2017-01-11T00:05:50Z", "is_private": false, "text": "This is exactly the problem with the test performance. Using a entropy \nsource such as /dev/random is a blocking input. \n\nTesting with /dev/random results in very fast results. \n\nHowever, none of which is really related to the Large Files not supported message."}, {"count": 10, "tags": [], "text": "(In reply to Dennis Clarke from comment #9)\n> This is exactly the problem with the test performance. Using a entropy \n> source such as /dev/random is a blocking input. \n> \n> Testing with /dev/urandom results in very fast results. \n> \n> However, none of which is really related to the Large Files not supported\n> message.\n\nThat should read /dev/urandom there for fast entropy source.", "is_private": false, "bug_id": 45615, "id": 195971, "time": "2017-01-11T00:06:56Z", "creator": "dclarke@blastwave.org", "creation_time": "2017-01-11T00:06:56Z", "attachment_id": null}]
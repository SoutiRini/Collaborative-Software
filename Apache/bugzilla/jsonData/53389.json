[{"attachment_id": null, "tags": [], "bug_id": 53389, "is_private": false, "count": 0, "id": 159840, "time": "2012-06-08T20:09:04Z", "creator": "robert_kish@yahoo.com", "creation_time": "2012-06-08T20:09:04Z", "text": "The DataFormatter is not removing the locale when given the format string [$-1010409]General for a number cell. The resulting format String is \"General\", but is applied too late.\n\nIn org.apache.poi.ss.usermodel.DataFormatter.getFormat(double, int, String), at the end of the function, createFormat is called. However, if the resulting format is \"General\" (or I assume \"@\" also), the logic a couple lines earlier to return generalWholeNumFormat or generalDecimalNumFormat does not apply. If the code were rearranged to apply this check (again?) after createFormat is called, then a valid format could be used.\n\nFor the Junit, org.apache.poi.ss.usermodel.TestDataFormatter, (I stuck it in testOther), you can add the following to demonstrate this case:\n\nassertEquals(\"63\", dfUS.formatRawCellContents(63.0, -1, \"[$-1010409]General\"));\n\nI expect \"63\". The code outputs \"General\"."}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "Is the lack of locale removal only affecting the General case, or does it apply to all formats (custom and built in)?\n\n(This should help us work out what area to focus on)", "id": 159850, "time": "2012-06-10T23:36:42Z", "bug_id": 53389, "creation_time": "2012-06-10T23:36:42Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 53389, "text": "(In reply to comment #1)\n> Is the lack of locale removal only affecting the General case, or does it\n> apply to all formats (custom and built in)?\n> \n> (This should help us work out what area to focus on)\n\nGeneral and @ are the ones not working as expected. Other formats, such as ## and 00 are working fine when a locale is present.\n\nThese 2 fail:\nassertEquals(\"63\", dfUS.formatRawCellContents(63.0, -1, \"[$-1010409]General\"));\nassertEquals(\"63\", dfUS.formatRawCellContents(63.0, -1, \"[$-1010409]@\"));\n\nThese 2 are fine:\nassertEquals(\"63\", dfUS.formatRawCellContents(63.0, -1, \"[$-1010409]##\"));\nassertEquals(\"63\", dfUS.formatRawCellContents(63.0, -1, \"[$-1010409]00\"));        \n\nI put all 4 formats in Excel 2003, and when saved to CSV, they export as \"63\".", "count": 2, "id": 159866, "time": "2012-06-11T14:22:51Z", "creator": "robert_kish@yahoo.com", "creation_time": "2012-06-11T14:22:51Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 53389, "is_private": false, "id": 159936, "time": "2012-06-12T22:11:13Z", "creator": "apache@gagravarr.org", "creation_time": "2012-06-12T22:11:13Z", "tags": [], "text": "Fixed in r1349562, and unit tests added based on your supplied example ones, thanks!"}]
[{"count": 0, "tags": [], "creator": "pgrifel@gmail.com", "text": "Created attachment 31896\ntest.TestingServlet\n\nPer the below mailing list discussion, the latest 8.0.X branch does not cache results from certain calls to the web resources implementation.\n\nhttp://marc.info/?t=140728308100001&r=1&w=2\n\nThis has resulted in a significant performance decrease in some scenarios over Tomcat 7.  The attached servlet and web resource demonstrate the problem.", "id": 177061, "time": "2014-08-11T05:55:04Z", "bug_id": 56838, "creation_time": "2014-08-11T05:55:04Z", "is_private": false, "attachment_id": 31896}, {"count": 1, "attachment_id": 31897, "creator": "pgrifel@gmail.com", "is_private": false, "id": 177062, "time": "2014-08-11T05:55:35Z", "bug_id": 56838, "creation_time": "2014-08-11T05:55:35Z", "tags": [], "text": "Created attachment 31897\n/WEB-INF/test.xsd"}, {"count": 2, "tags": [], "bug_id": 56838, "text": "Tweak the title. I can reproduce this and while it is true that the call to getResources() bypasses the cache and that has a negative performance impact, that doesn't account for all of the differences observed. More investigation as to the root cause is required.", "id": 177063, "time": "2014-08-11T06:33:08Z", "creator": "markt@apache.org", "creation_time": "2014-08-11T06:33:08Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "text": "Having spent some time digging into this, the bulk of the delay is related to class loading. The text case triggers an attempt to load the same class for every iteration. The bulk of the performance difference between 7.0.x and 8.0.x is as a result of different optimisations (e.g. r1539992 ) being applied to 8.0.x when compared to 7.0.x.\n\nWhile the web app class loader could be optimised for this test case, it would be at the expense of more common cases. In this case it would be better for the application to retain a simple pool of XML objects and reuse them as required.\n\nThere are a few changes (such as caching the call to getResources()) that will shave a few % off the 8.0.x time and are also generally useful. I'll look at making those changes shortly but they aren't going to be sufficient to enable 8.0.x to handle this particular case as well as 7.0.x does.\n\nOverall, I think this is going to be resolved as WONTFIX.", "id": 177069, "time": "2014-08-11T12:11:38Z", "bug_id": 56838, "creation_time": "2014-08-11T12:11:38Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 56838, "text": "Resolving as WONTFIX since the bulk of the delay is caused by other optimisations that aren't going to be reverted.", "id": 177070, "time": "2014-08-11T12:32:00Z", "creator": "markt@apache.org", "creation_time": "2014-08-11T12:32:00Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 56838, "text": "(In reply to Mark Thomas from comment #3)\n> The bulk of the performance difference between 7.0.x\n> and 8.0.x is as a result of different optimisations (e.g. r1539992 ) being\n> applied to 8.0.x when compared to 7.0.x.\n\nRegarding r1539992\nIn case if we are trying to load a class that is already loaded by the \"system\" classloader (it is called \"javaseLoader\" in the current trunk code).\n\nIn the old code the system.loadClass() call does system.findLoadedClass() as one of its first steps and will return fast. In the new code it does getResource() lookup which is slower.\n\na) Is r1539992 really worth it? I expect that a typical web application and its libraries do load a lot of classes from the system classloader.\n\nb) Implement a cache that lists classes that have been already loaded by system class loader?", "id": 177105, "time": "2014-08-12T12:42:46Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-08-12T12:42:46Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "text": "(In reply to Konstantin Kolinko from comment #5)\n> (In reply to Mark Thomas from comment #3)\n> > The bulk of the performance difference between 7.0.x\n> > and 8.0.x is as a result of different optimisations (e.g. r1539992 ) being\n> > applied to 8.0.x when compared to 7.0.x.\n> \n> Regarding r1539992\n> In case if we are trying to load a class that is already loaded by the\n> \"system\" classloader (it is called \"javaseLoader\" in the current trunk code).\n> \n> In the old code the system.loadClass() call does system.findLoadedClass() as\n> one of its first steps and will return fast. In the new code it does\n> getResource() lookup which is slower.\n\nBut the new code doesn't trigger a CNFE. Generation of that exception is really slow.\n\n> a) Is r1539992 really worth it? I expect that a typical web application and\n> its libraries do load a lot of classes from the system classloader.\n\nThe benefit (or cost) will vary from app to app but those CNFE were really killing the start time of medium to large apps.\n\n> b) Implement a cache that lists classes that have been already loaded by\n> system class loader?\n\nI thought about that. If an app tries to load 1000 difference classes from the system class loader the cache wouldn't help and woudl actually make things worse. If an app tries to load the same class 1000 times from the system class loader then a cache would help.\n\nThe cache solution penalises what looks like (to me) sensible behaviour and rewards what looks like (to me) non-sensible behaviour. That didn't seem right to me.\n\nWe can't call findLoadedClass(String) since that is a protected method. Unless...\n\nOne option to speed things up would be to use reflection to make findLoadedClass(String) accessible and then call it directly. That would give the benefits of r1539992 without and additional costs. I'll take a look...", "count": 6, "id": 177106, "time": "2014-08-12T13:08:10Z", "bug_id": 56838, "creation_time": "2014-08-12T13:08:10Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "(In reply to Mark Thomas from comment #6)\n> \n> One option to speed things up would be to use reflection to make\n> findLoadedClass(String) accessible and then call it directly. That would\n> give the benefits of r1539992 without and additional costs. I'll take a\n> look...\n\nI thought that as well. It looks promising, but looking into Java 7 I see two caveats:\na) If the system classloader has a parent,  there is a question of calling parent.findLoadedClass() as well.\nb) In ClassLoader#loadClass() it obtains a lock before calling findLoadedClass(), so it might be not safe to call it without a lock.", "count": 7, "id": 177108, "time": "2014-08-12T13:15:04Z", "bug_id": 56838, "creation_time": "2014-08-12T13:15:04Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 56838, "is_private": false, "text": "I have updated the summary to reflect our better understanding of this issue.\n\nI have also moved this to an enhancement request.\n\nThis is really a case of what case(s) do we optimise for. The parameters in play are:\n- division of required classes between webapps, container and JRE\n- how many times a request to load the same class will be made\n- setting of delegate option\n\nOn top of this there are the spec mandated rules about class loading that we have to follow.\n\nI agree that the issues Konstatin raised in comment #7 makes a solution along those lines unlikely to be practical.\n\nI do come back to the idea of a cache. I am currently pondering the idea of a cache that maps class name to class loader so that once a class has been loaded (or a CNFE thrown) subsequent requests to load that class skip all the tests in WebappClassLoader.loadClass() and go directly to the correct class loader (or throw CNFE). I think I'll experiment along these lines and see what difference it makes to this test case and to the start time of a complex application like Jira.", "id": 177149, "time": "2014-08-13T20:18:46Z", "creator": "markt@apache.org", "creation_time": "2014-08-13T20:18:46Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "I've done some experiements with Jira 6.2.7 (the latest version I can get to work with Tomcat 8) and the results are pretty unspectacular.\n\nCaching the class loader doesn't help and probably makes performance a little worse.\n\nCaching the class appears to make no difference or if there is a difference it is well within the noise.\n\nI also took a good look at the rest of the class loader code and I don't see any places where big gains could be made. I saw a handful of minor improvements but none of them made a measurable difference.\n\nI am currently leaning to resolving this as WONTFIX again although alternative ideas for optimising the class loader are welcome.", "is_private": false, "bug_id": 56838, "id": 177167, "time": "2014-08-14T20:28:56Z", "creator": "markt@apache.org", "creation_time": "2014-08-14T20:28:56Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "OK.\nThank you for investigating.\n\nIf it does not go into production, maybe you can attach a patch here -- for archiving purposes and in case there is another web application that is worth being tested?\n\nThere exists bug 52448 with patch for Tomcat 6 that I wrote 2,5 years ago. I have not looked whether the idea there is applicable to Tomcat 8. (The idea is to cache JAR indexes to skip opening unneeded JARs).", "is_private": false, "bug_id": 56838, "id": 177172, "time": "2014-08-14T20:49:02Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-08-14T20:49:02Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "Closing this as WONTFIX as per comment #9.\n\nI did look to see if I still had the patch but I don't believe I do.", "is_private": false, "bug_id": 56838, "id": 188273, "time": "2016-02-07T19:44:11Z", "creator": "markt@apache.org", "creation_time": "2016-02-07T19:44:11Z", "attachment_id": null}]
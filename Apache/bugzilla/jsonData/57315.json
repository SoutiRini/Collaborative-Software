[{"count": 0, "tags": [], "creator": "jozefhartinger@gmail.com", "is_private": false, "id": 179540, "creation_time": "2014-12-05T15:37:14Z", "time": "2014-12-05T15:37:14Z", "bug_id": 57315, "text": "+++ This bug was initially created as a clone of Bug #57314 +++\n\nTL;DR version:\n==============\n\nWhen processing async requests, Tomcat calls ServletRequestListener.requestInitialized() callback from a different thread than the corresponding ServletRequestListener.requestDestroyed() callback. This breaks a lot of frameworks and technologies that depend on ThreadLocals (for example CDI - Weld). All the other Servlet implementations I could get my hands on call these callbacks symmetrically from the same thread. Please fix this.\n\nLong version:\n=============\n\nThe Servlet specification is unfortunatelly quite vague when it comes to when and how ServletRequestListeners are called. \n\nFor a simple synchronous request this is not such a big deal as there are not many options. Both callbacks are called by a thread that processes the request. ServletRequestListener.requestInitialized() at the beginning and ServletRequestListener.requestDestroyed() at the end. So far so good.\n\nHowever, when it comes to asynchronous requests, this gets more complicated. \n\nSuppose we have a simple asynchronous servlet that:\n\nA1) Does initial processing of the request\nA2) Goes async (req.startAsync())\nA3) Spawns a new thread T that calculates something\nA4) The servlet exits\n\nB1) The spawn thread T calculates the value\nB2) Once the thread T finishes calculation, it dispatches back to Servlet container for rendering (ctx.dispatch(\"/asyncFinish?value=calculatedValue\"))\n\nC1) Servlet container creates response and completes the request\n\nA* steps are performed by a thread that initially handles the request. B* steps are performed by a thread spawned by a Servlet, C* steps are performed again by a Servlet container thread.\n\nNow the question arises: When and how should ServletRequestListener callbacks be invoked? Common requirements are:\n\n1) Symmetry - each time ServletRequestListener.requestInitialized() is called, there should be a corresponding ServletRequestListener.requestDestroyed() call\n\nThis I think is clear - if a listener starts something, it should get a chance to stop it.\n\n\n2) Symmetry with respect to calling thread - each time ServletRequestListener.requestInitialized() is called by thread T, there should be a corresponding ServletRequestListener.requestDestroyed() call by thread T\n\nThis is an extension of requirement (1) and is needed because frameworks often use ServletRequestListener.requestInitialized() as a hook to set a ThreadLocal for the duration of the request and then unset it in ServletRequestListener.requestDestroyed()\n\nOther Servlet containers\n========================\n\nAs we saw before, the fact that a request is processed in multiple threads may seem in conflict with this second requirement (Symmetry with respect to calling thread - each time). How do other Servlet implementations solve this? They typically do the following:\n\nThread A calls ServletRequestListener.requestInitialized()\nA1, A2, A3 and A4 are performed\nThread A calls ServletRequestListener.requestDestroyed()\n\nWhen the value is calculated by thread B and the request is dispatched to the Servlet container again:\n\nThread C calls ServletRequestListener.requestInitialized()\nC1 is performed\nThread C calls ServletRequestListener.requestDestroyed()\n\nThis ensures symmetry with respect to a given thread.\n\nTomcat\n======\n\nTomcat simply does:\n\n- Thread A calls ServletRequestListener.requestInitialized()\n- the entire request is processed in threads A, B and C\n- Thread C calls ServletRequestListener.requestDestroyed()\n\nwhich breaks the second requirement (Symmetry with respect to calling thread). I tested with Tomcat 7 and Tomcat 8\n\nI tested with the following Servlet containers:\n\n- Undertow\n- JBoss Web\n- Jetty\n- Grizzly\n\nand Tomcat is really the odd one out in not respecting the second requirement. Please fix this so that Tomcat matches the second requirement.", "attachment_id": null}, {"count": 1, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of bug 57314 ***", "is_private": false, "id": 179541, "creator": "markt@apache.org", "time": "2014-12-05T15:39:18Z", "bug_id": 57315, "creation_time": "2014-12-05T15:39:18Z", "attachment_id": null}]
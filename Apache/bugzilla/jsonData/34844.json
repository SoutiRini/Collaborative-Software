[{"count": 0, "tags": [], "bug_id": 34844, "attachment_id": null, "is_private": false, "id": 74674, "time": "2005-05-10T16:57:29Z", "creator": "jholdsworth@nopworld.com", "creation_time": "2005-05-10T16:57:29Z", "text": "Using cookie based sticky sessions across a load balancer group containing two\nservers, when a server enters the error state, the session moves across to the\nsecond server as expected, however, when the first server exits the error state,\nthe session moves back across to this server, not staying on the new server as\nwould be expected. This leads to the client / backend server session being\ninterupted twice, not once as would be expected."}, {"count": 1, "tags": [], "text": "Created attachment 16701\nPropose URL decoding of stickysession route\n\nI suspect current httpd-2.2.x branch mod_proxy_balancer stickysession doesn't\nwork _at all_ when using cookie-based stickysessions, at least not when the\ncookie value is URL encoded (as it was in my case).  Found this by load\nbalancing between two servers with different content, and I was sent back and\nforth between them; definitely not sticky.\n\nI got Found value <sessionid> for stickysession <stickysession>, but _not_ any\nFound route <route> when looking at the debug log.\n\nThe <sessionid> was logged as \"%2EW1\" and not \".W1\", though.  It seems as if\nmod_proxy_balancer.c checks against '.', but doesn't URL decode the string\nfirst (if it had, it shouldn't have logged it encoded):\n\n    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,\n\t\t\t    \"proxy: BALANCER: Found value %s for \"\n\t\t\t    \"stickysession %s\", *route, balancer->sticky);\n    /*\n     * If we found a value for sticksession, find the first '.' within.\n     * Everything after '.' (if present) is our route.\n     */\n    if ((*route) && ((*route = strchr(*route, '.')) != NULL ))\n\t(*route)++;\n    if ((*route) && (**route)) {\n\tap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,\n\t\t\t\t  \"proxy: BALANCER: Found route %s\", *route);\n\n(Note that the backend server is running IIS.  I'm assuming it's doing the\nright thing of encoding the cookie values; I'm not doing that explicitly.)\n\nThe attached patch seems to fix this in my case, and something like this should\nprobably be included in mod_proxy_balancer.c.\n\nNote: I'm not sure if this is the proper Apache way of doing things.  I\nborrowed decodeenc() from mod_proxy_ftp.c, so it should probably be refactored\ninto a common function, if it's not already in APR (which I guess it may be). \nAlso, I had to change from (void)decodeenc(route) to (void)decodeenc(*route) -\nnot sure if that's a problem in mod_proxy_ftp.c, didn't check that closely.", "is_private": false, "id": 81176, "creator": "tsb@komplett.no", "time": "2005-10-15T19:11:21Z", "bug_id": 34844, "creation_time": "2005-10-15T19:11:21Z", "attachment_id": 16701}, {"count": 2, "tags": [], "bug_id": 34844, "attachment_id": 16702, "id": 81177, "time": "2005-10-15T19:56:20Z", "creator": "tsb@komplett.no", "creation_time": "2005-10-15T19:56:20Z", "is_private": false, "text": "Created attachment 16702\nProposal for url decoding cookie-based stickysession routes\n\nThis version hopefully also works properly for new sessions, and only tries to\ndecode the cookie value."}, {"count": 3, "tags": [], "bug_id": 34844, "attachment_id": null, "id": 81178, "time": "2005-10-15T21:30:54Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-15T21:30:54Z", "is_private": false, "text": "(In reply to comment #1)\n> \n> The <sessionid> was logged as \"%2EW1\" and not \".W1\", though.  It seems as if\n> mod_proxy_balancer.c checks against '.', but doesn't URL decode the string\n> first (if it had, it shouldn't have logged it encoded):\n\nI am currently unsure if it is ok to expect that the '.' in the sessioncookie\nthat separates sessionid and route can be URL encoded. So lets see the opinion\nof other developers on this topic. I tend to say: No.\nNevertheless, if it is found ok to be URL encoded, I think the following patch\nwould be better:\n\nIndex: modules/proxy/mod_proxy_balancer.c\n===================================================================\n--- modules/proxy/mod_proxy_balancer.c  (Revision 320868)\n+++ modules/proxy/mod_proxy_balancer.c  (Arbeitskopie)\n@@ -158,6 +158,7 @@\n                         *end_cookie = '\\0';\n                     if((end_cookie = strchr(cookie, ',')) != NULL)\n                         *end_cookie = '\\0';\n+                    ap_unescape_url_keep2f(cookie);\n                     return cookie;\n                 }\n             }\n\n"}, {"count": 4, "tags": [], "bug_id": 34844, "attachment_id": null, "is_private": false, "id": 81179, "time": "2005-10-15T21:36:08Z", "creator": "rpluem@apache.org", "creation_time": "2005-10-15T21:36:08Z", "text": "(In reply to comment #0)\n\n> the session moves back across to this server, not staying on the new server as\n> would be expected. This leads to the client / backend server session being\n> interupted twice, not once as would be expected.\n\nI do not regard this as a failure of httpd. If you get a new sessioncookie when\nyou fall over to the second server, then this cookie should contain a correct\nroute to the second server and everything is fine (no fallback back once the\nfirst server recovered). If the second server delivers the same routing\ninformation with the new sessioncookie as the first server then either\n\n- first and second server should have an internal clustering where it does\n  not matter which one gets the session\n\n- your backend configuration is wrong"}, {"count": 5, "tags": [], "creator": "tsb@komplett.no", "attachment_id": null, "id": 81198, "creation_time": "2005-10-16T12:16:04Z", "time": "2005-10-16T12:16:04Z", "bug_id": 34844, "text": "(In reply to comment #3)\n> I am currently unsure if it is ok to expect that the '.' in the sessioncookie\n> that separates sessionid and route can be URL encoded. So lets see the opinion\n> of other developers on this topic. I tend to say: No.\n\nYou're probably right, even if it means trouble for me :)  I'm not sure if this is a bug in ASP 3.0, but \nit seems that MS switched to _not_ encoding cookies in ASP.NET -- http://support.microsoft.com/\ndefault.aspx?scid=kb;en-us;313282.  (Also, even when encoding chances are . should not have \nbeen touched in the first place.)\n\nWhat's the best approach then?  Just keep this a local modification as long as one has ASP 3.0 \nbackends?\n", "is_private": false}]
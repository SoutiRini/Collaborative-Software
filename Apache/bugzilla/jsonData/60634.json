[{"count": 0, "attachment_id": null, "creator": "shq-king@163.com", "is_private": false, "id": 196365, "time": "2017-01-24T15:23:14Z", "bug_id": 60634, "creation_time": "2017-01-24T15:23:14Z", "tags": [], "text": "The vulnerable function is in \"support/htpasswd.c\".\nThe code snippet is as following.\n\nstatic int mkrecord(struct passwd_ctx *ctx, char *user)\n{\n    char hash_str[MAX_STRING_LEN];\n    ...\n    ctx->out = hash_str;\n    ...\n\n    ret = mkhash(ctx);\n    if (ret)\n        return ret;\n\n    ...\n}\n\nAs \"ctx->out\" is not updated in function \"mkhash\", a stack address, i.e. \"hash_str\" is returned as a side effect.\n\nThis issue is similar to Bug 59844.\n\nNote that this issue is reported by shqking and Zhenwei Zou."}, {"count": 1, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "text": "Since the main (caller of mkrecord) exits when a non-zero value is returned, it does not access ctx->out so this is not really an issue, right?", "id": 196682, "time": "2017-02-03T08:33:43Z", "bug_id": 60634, "creation_time": "2017-02-03T08:33:43Z", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "ylavic.dev@gmail.com", "text": "Anyway, addressed in r1781509 to avoid further warnings (false positive) from code analysis.\n\nThanks for the report.", "id": 196683, "time": "2017-02-03T08:58:54Z", "bug_id": 60634, "creation_time": "2017-02-03T08:58:54Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 60634, "attachment_id": null, "id": 196694, "time": "2017-02-04T03:16:57Z", "creator": "shq-king@163.com", "creation_time": "2017-02-04T03:16:57Z", "is_private": false, "text": "(In reply to Yann Ylavic from comment #1)\n> Since the main (caller of mkrecord) exits when a non-zero value is returned,\n> it does not access ctx->out so this is not really an issue, right?\n\nThanks for your reply.\n\nAccording to the C Standard, 6.2.4 [ISO/IEC 9899:2011] (https://www.securecoding.cert.org/confluence/display/c/DCL30-C.+Declare+objects+with+appropriate+storage+durations), the address of local variables escaping through output parameters is one kind of undefined behaviors, and can lead to an exploitable vulnerability.\n\nYes. We agree with you in that, this issue cannot cause any severe impact so far.\nBut in our opinion, this issue seems like a \"time bomb\" and we'd better solve it earlier.\n\nAlso your revision r1781509 makes it safe.\nThanks."}]
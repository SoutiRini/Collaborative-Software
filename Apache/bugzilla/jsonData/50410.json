[{"count": 0, "attachment_id": null, "creator": "costin@apache.org", "is_private": false, "id": 142361, "time": "2010-12-03T23:35:55Z", "bug_id": 50410, "creation_time": "2010-12-03T23:35:55Z", "tags": [], "text": "If apr returns APR_ENOTIMPL the JNI code will just turn the flag off. \nI couldn't find any way for java side to find if the create poll was or was not threadsafe. \n\nThere are 2 options to fix it: \n- throw an exception - seems the right thing to do, java can do the fallback\n- consistent with 'wakeable' - add a field and a method to check if it's on. \n\nIt seems Tomcat code is not using the flag, not sure why - I would go with the first option."}, {"count": 1, "attachment_id": null, "creator": "mturk@apache.org", "is_private": false, "id": 143168, "time": "2011-01-07T06:10:48Z", "bug_id": 50410, "creation_time": "2011-01-07T06:10:48Z", "tags": [], "text": "This is APR's wrongly designed API.\nNo mater if the native OS pollset implementation is thread safe\nor not, if APR_POLLSET_THREADSAFE is not provided internal\nmutex will be created. However if required create will fail\nand we would need to call that API again.\nIf not required beside creating unneeded mutex what's worse\nit's be used although not required, so it's clear why\nwe wish too call it with that flag.\n\nHowever from the end user (tomcat native) point of view\nthis makes no difference at all.\nWhat we do internally is to clear that flag and try again\nwithout that flag, fixing the APR api which should\ntreat APR_POLLSET_THREADSAFE as a 'hint' not as a requirement.\n\nWhether native pollset implementation is thread safe or not\nmakes no real value because if it's not APR will create\ninternal mutex protecting it, so this is just one\nof those \"legacy\" api's."}]
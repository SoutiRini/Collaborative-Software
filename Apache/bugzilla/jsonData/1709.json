[{"count": 0, "tags": [], "bug_id": 1709, "attachment_id": null, "is_private": false, "id": 2402, "time": "2001-05-11T02:24:47Z", "creator": "mark@dunadain.demon.co.uk", "creation_time": "2001-05-11T02:24:47Z", "text": "The -find command line argument currently only works if only a file name with \nno path is specified.  It takes as root \".\" where it starts the search.\n\nIt would be useful to state an absolute path and file name.  I know -buildfile \nallows you to do this, but without the search back up the directory structure.  \nMore tools being created such as AntRunner mean that the current directory when \nthe ant script is run cannot be guaranteed to be a specific directory.  The onus \nis now on the ant.bat script writer to push and pop the current directory."}, {"count": 1, "tags": [], "creator": "Daniel.Barclay@digitalfocus.com", "attachment_id": null, "is_private": false, "id": 2407, "time": "2001-05-11T07:40:52Z", "bug_id": 1709, "creation_time": "2001-05-11T07:40:52Z", "text": "It's a little unclear what you're reporting or asking for.\n\nIf you gave -find an absolute pathname, what good would searching upwards be? \n(An absolute pathname is independent of the current directory, so iteratively \nresolving it relative to a list of ancestor directories would always resolve\nto the same file, so searching wouldn't add anything, right?)\n\nDo you mean a relative pathname that's not just a simple file name (e.g.,\n\"scripts/build.xml\")?  That already works, right?\n\nCould you clarify the problem with setting the current directory?\n\nAnt seems to set the current directory to the directory of the build\nfile whether you use -find with a simple name (e.g., \"build.xml\"),\n-find with a non-simple relative name (e.g., \"scripts/build.xml\"), or\n-buildfile with an absolute name (\"C:\\...\\build.xml\").  (Tested with \n\" <exec command=\"pwd\"/> \".)\n\nDid you want different behavior?  (Or did I not test carefully enough\nand misperceive and misstate what Ant does?)"}]
[{"attachment_id": null, "tags": [], "bug_id": 14755, "text": "We used JDK 1.3.1 on both Win2K & Red Hat 7.3 to try to converter SVG to jpg \nby batik1.5. But it throw OutOfMemoryError at java.awt.image.DataBufferInt.\n\n  The adjunct contains the SVG \"slide_0.svg\", and some JPG pictures with \nname \"wmf\", all these JPG pictures were converted from the SVG with the same \nfile name by batik1.5 itself. In the \"slide_0.svg\", it insert all the JPG \npictures, but while converter it to JPG again by batik1.5, we catch \nOutOfMemoryError.", "count": 0, "id": 26760, "time": "2002-11-22T02:29:18Z", "creator": "zhanzh@dragontec.com.cn", "creation_time": "2002-11-22T02:29:18Z", "is_private": false}, {"count": 1, "attachment_id": 3917, "bug_id": 14755, "is_private": false, "id": 26761, "time": "2002-11-22T02:30:02Z", "creator": "zhanzh@dragontec.com.cn", "creation_time": "2002-11-22T02:30:02Z", "tags": [], "text": "Created attachment 3917\nthe zip file contains the SVG and some other files"}, {"count": 2, "tags": [], "creator": "deweese@apache.org", "text": "Well, you are running you of memory.\nThe example you sent is referenceing ~20 1Kx1K images  this is \napproximately 80Mb of image data.  Given that the default JVM partion is\neither 64MB or 128MB you aren't leaving much room for the rest of the\nrendering to take place.\n\nI suggest you make use of the -Xmx switch and use something like:\n-Xmx256m to up the partition allocated to Java.", "id": 32258, "time": "2003-03-02T16:44:02Z", "bug_id": 14755, "creation_time": "2003-03-02T16:44:02Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "onlychanchal@gmail.com", "attachment_id": 21868, "is_private": false, "id": 115955, "time": "2008-04-28T03:10:04Z", "bug_id": 44888, "creation_time": "2008-04-28T03:10:04Z", "text": "Created attachment 21868\nLog file with defects\n\nHi.\nI am using Log4j ver 1.2.8\nhere sometime I get question mark instead of file name and line number \nsee below for details\n\n\n\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,415] [INFO] - The customer with customer number 00797343 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,424] [INFO] - The customer with customer number 00119972 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,431] [INFO] - The customer with customer number 00575408 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,437] [INFO] - The customer with customer number 00156617 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,494] [INFO] - The customer with customer number 00850370 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,510] [INFO] - The customer with customer number 00124816 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,522] [INFO] - The customer with customer number 00202916 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,575] [INFO] - The customer with customer number 00613744 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [AbstractDataLoad.java : 1098 ] [19 Mar 2008 06:20:52,582] [INFO] - The customer with customer number 00472839 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,783] [INFO] - The customer with customer number 00474659 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,790] [INFO] - The customer with customer number 00338894 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,798] [INFO] - The customer with customer number 00887960 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,824] [INFO] - The customer with customer number 00884282 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,830] [INFO] - The customer with customer number 00652635 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,836] [INFO] - The customer with customer number 00926011 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,850] [INFO] - The customer with customer number 00677557 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,857] [INFO] - The customer with customer number 00700285 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,871] [INFO] - The customer with customer number 00798306 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,882] [INFO] - The customer with customer number 00394582 and LegacyCmrCtryCode 649 was missing in customer table CTMTCUSCA and has been inserted into the customer table CTMTCUSCA\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,898] [INFO] - The customer with customer number 00809820 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,907] [INFO] - The customer with customer number 00001129 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,917] [INFO] - The customer with customer number 00577303 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,927] [INFO] - The customer with customer number 00067160 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,937] [INFO] - The customer with customer number 00127121 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,948] [INFO] - The customer with customer number 00394710 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,956] [INFO] - The customer with customer number 00070602 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,965] [INFO] - The customer with customer number 00126677 and LegacyCmrCtryCode 706 was missing in customer table CTMTCUSFR and has been inserted into the customer table CTMTCUSFR\n[catSwgDataLoad] [? : ? ] [19 Mar 2008 06:20:52,977] [INFO\n\nMore you can find in Attached file\n\nhere all the logs are from same java file and same line number but as you can see here after sometime logging file name and line number the loger has some problem it can not log file name and line number \n\nbelow is the setting for log4j in application \n\n# Appender swg_err uses the PatternLayout.\nlog4j.logger.swg_err = ,swg_err\nlog4j.appender.swg_err.layout=org.apache.log4j.PatternLayout\nlog4j.appender.swg_err.layout.ConversionPattern=[catSwgDataLoad] [%F : %L ] %d{[dd MMM yyyy HH:mm:ss,SSS]} [%p] - %m%n  \n\n\nPlease give me solution ASAP"}, {"count": 1, "tags": [], "bug_id": 44888, "is_private": false, "text": "The most common reason for class and line number extraction to fail is that the class file was compiled without debug information.  However, nothing suggests that you recompiled in the middle of collecting the log.\n\nUnless somebody has run into this before, it seems unlikely that we'd be able to diagnose the problem without more information.\n\nThe following information would be very helpful:\n\nDoes the problem occur with log4j 1.2.15?  It is possible that you are encountering a bug that has already been fixed in the several years since log4j 1.2.8.\n\nWhat JVM are you using (java -v)?  LocationInfo depends on parsing the output of Throwable.printStackTrace() to determine the calling class and line number and as such may be affected by differences in JVM's.  JDK 1.4 added more reliable methods to access this information, but log4j still targets earlier JDK's.\n\nIf you run your app under a debugger, you could place break points in the returns within LocationInformation constructor.  When the extraction is working properly, the constructor should exit after the last line.  Knowing which early exit is used and the contents of the \"s\" variable would be key to identifying the problem.\n\nCan you provide a sample program that reproduces the defect?\n\n\n", "id": 115968, "time": "2008-04-28T08:54:24Z", "creator": "carnold@apache.org", "creation_time": "2008-04-28T08:54:24Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 44888, "attachment_id": null, "id": 116626, "time": "2008-05-15T00:35:44Z", "creator": "rgoers@apache.org", "creation_time": "2008-05-15T00:35:44Z", "is_private": false, "text": "I just tried this with log4j 1.2.15 and could not get my location information. I am calling the log method from a class that uses SLF4J and does\n\n        if (logger.isTraceEnabled() && logger instanceof LocationAwareLogger)\n        {\n            ((LocationAwareLogger)logger).log(FLOW_MARKER, FQCN, LocationAwareLogger.TRACE_INT, \"entry\", null);\n        }\n\nwhere FQCN is the fully qualified name of my class. This works correctly with logback. I traced this down and was able to determine that the information being captured in LocationInfo is wrong.  I was able to hack together a bypass by creating an appender using the same package name as LocationInfo and doing\n\n    protected void append(LoggingEvent event)\n    {\n        LocationInfo info = event.getLocationInformation();\n        String fqcn = event.getFQNOfLoggerClass();\n        Throwable throwable = new Throwable();\n        StackTraceElement[] steArray = throwable.getStackTrace();\n\n        int found = LINE_NA;\n        for (int i=0; i < steArray.length; ++i)\n        {\n            if (steArray[i].getClassName().equals(fqcn))\n            {\n                found = i + 1;\n            }\n            else if (found != LINE_NA)\n            {\n                break;\n            }\n        }\n        if (found == LINE_NA)\n        {\n            return;\n        }\n        info.className = steArray[found].getClassName();\n        info.fileName = steArray[found].getFileName();\n        info.lineNumber = Integer.toString(steArray[found].getLineNumber());\n        info.methodName = steArray[found].getMethodName();\n        info.fullInfo = steArray[found].toString();\n    }\n\nBy putting this appender first the correct LocationInfo is returned. BTW - this code came straight from Logback."}, {"count": 3, "tags": [], "bug_id": 44888, "text": "java version \"1.5.0_14\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_14-b03)\nJava HotSpot(TM) Client VM (build 1.5.0_14-b03, mixed mode, sharing)\n\nMy guess is this is the real problem. ", "id": 116627, "time": "2008-05-15T00:42:00Z", "creator": "rgoers@apache.org", "creation_time": "2008-05-15T00:42:00Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 44888, "attachment_id": null, "id": 116682, "time": "2008-05-15T13:39:43Z", "creator": "carnold@apache.org", "creation_time": "2008-05-15T13:39:43Z", "is_private": false, "text": "Ralph, it sounds like you have an environment and sample app that reveals a defect in the LocationInfo class.  It would be very helpful if you could provide some insight into the defect so that could be understood.  Having a work-around is good, but it would be better to understand the defect and try to resolve it appropriately.\n\nCould you provide any of the following info (the more, the better):\n\nWhat platform are you running on (Windows, Mac, Linux, etc)?\n\nDo the unit tests pass in your environment?\n\nIf the current tests pass, could you write a unit test that test the defective code and fails?\n\nIf you can't write a unit test, could you write a sample app that demonstrates the problem?\n\nCan you step through the LocationInformation constructor and identify where and why the location extraction code breaks down?  Previously this has been due to a slightly different format of the output from printStackTrace, for example, JRocket used spaces instead of tabs if I remember correctly.\n\nThrowable.getStackTrace() was added in JDK 1.4, so depending on it would not be consistent with log4j's targeting of JDK 1.3 or later.  However, it might be tolerable to sniff for it using reflection or catch a MethodNotFound exception and then fallback to the older code.\n\nlogback is licensed under the LGPL, so use of logback code without explicit licensing from the original author is inconsistent with the ASF license and can't go into log4j.  If the underlying problem is adequately identified, I'm sure that we can come up with an appropriate solution without referring to the logback code.\n\n"}, {"count": 5, "tags": [], "bug_id": 44888, "attachment_id": null, "id": 116691, "time": "2008-05-15T17:24:20Z", "creator": "rgoers@apache.org", "creation_time": "2008-05-15T17:24:20Z", "is_private": false, "text": " My environment: Ubuntu running in VMWare on Windows NT.\nLinux testuser-desktop 2.6.22-14-generic #1 SMP Tue Feb 12 07:42:25 UTC 2008 i686 GNU/Linux\n\nI haven't tried building log4j itself, but I certainly can and I'd be happy to see if I can come up with something that fails if the current unit tests don't. \n\nAs for stepping through the current code that seems like a waste of time. I'd prefer to write something that leverages Thread.currentThread().getStackTrace() and just use that if the JVM is 1.5 or better. I'd be happy to come up with a way to do that. That way it should also fix the performance problems the current code has as well as be a lot less susceptible to parsing problems. If I can't see any good way to do that then I will resort to fixing the current code.\n\nAs for the LGPL vs Apache license issues, I'm well aware of them as I've participated on legal-discuss and been an Apache committer for years. "}, {"count": 6, "tags": [], "bug_id": 44888, "attachment_id": null, "id": 116694, "time": "2008-05-16T00:49:47Z", "creator": "rgoers@apache.org", "creation_time": "2008-05-16T00:49:47Z", "is_private": false, "text": "I ran the build and it was successful. I modified the Appender code I showed below to print the stacktrace and the info in LocationInfo before it was corrected. From that I was able to determine what the problem is. The code is only matching up to a class name the length of the FQCN. In the case below that means it matches LoggerUtilTest when it shouldn't have. I modified LocationInfoTest with a new test case and created a new class to simulate the behvior and it failed. If included both after the stack trace.\n\nI'll still look into creating a Java 5 version of this. However you fix this for 1.3 is just going to make it even slower.\n\nclassName: sun.reflect.NativeMethodAccessorImpl\nfilename: ?\nlineNumber: ?\nmethodName: invoke0\nFQCN: com.diginsite.services.logging.LoggerUtil\njava.lang.Throwable\n        at org.apache.log4j.spi.LocationAppender.append(LocationAppender.java:20)\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251)\n        at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66)\n        at org.apache.log4j.Category.callAppenders(Category.java:206)\n        at org.apache.log4j.Category.forcedLog(Category.java:391)\n        at org.apache.log4j.Category.log(Category.java:856)\n        at org.slf4j.impl.Log4jLoggerAdapter.log(Log4jLoggerAdapter.java:509)\n        at com.diginsite.services.logging.LoggerUtil.entering(LoggerUtil.java:121)\n        at com.diginsite.services.logging.LoggerUtilTest.testDefaultEntering(LoggerUtilTest.java:46)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\n\nnew test case for LocationInfoTest.java\n\n    /**\n     * Tests creation of location info from a throwable and where the\n     * FQCN is part of the caller's name.\n     */\n    public void testLocationInfo() {\n        LocationInfo li = new LocationIn().getLocationInfo();\n        final String className = LocationInfoTest.class.getName();\n        final String methodName = \"testLocationInfo\";\n        final String fileName = \"LocationInfoTest.java\";\n        final String lineNumber = \"49\";\n        assertEquals(className, li.getClassName());\n        assertEquals(methodName, li.getMethodName());\n        assertEquals(fileName, li.getFileName());\n        assertEquals(lineNumber, li.getLineNumber());\n        assertEquals(className + \".\"  + methodName\n                + \"(\" + fileName + \":\" + lineNumber + \")\",\n                li.fullInfo);\n    }\n\nLocationIn.java \n\npackage org.apache.log4j.spi;\n\n/**\n *\n */\npublic class LocationIn\n{\n    public LocationInfo getLocationInfo()\n    {\n       Throwable t = new Throwable();\n       String fqcn = LocationIn.class.getName();\n       return new LocationInfo(t, fqcn);\n    }\n}\n        "}, {"text": "Rev 657869 should fix issue reported by Ralph Goers.  Likely not same issue that Chanchal encountered, but since he did not provide any additional information can be sure.  Chanchal, if this fix does not address your problem, please file a new bug report and provide the information that was requested.\n\nUsing Throwable.getStackElement() when JDK 1.4+ or later is available seems like a desirable improvement, but that should be done as a different bug report.  I've filed bug 45039 for that enhancement.", "tags": [], "bug_id": 44888, "is_private": false, "count": 7, "id": 116819, "time": "2008-05-19T10:32:00Z", "creator": "carnold@apache.org", "creation_time": "2008-05-19T10:32:00Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "is_private": false, "id": 118591, "time": "2008-07-11T22:46:06Z", "bug_id": 44888, "creation_time": "2008-07-11T22:46:06Z", "text": "*** Bug 45364 has been marked as a duplicate of this bug. ***"}, {"count": 9, "tags": [], "bug_id": 44888, "is_private": false, "id": 131057, "creation_time": "2009-10-10T12:41:16Z", "time": "2009-10-10T12:41:16Z", "creator": "carnold@apache.org", "text": "*** Bug 47014 has been marked as a duplicate of this bug. ***", "attachment_id": null}]
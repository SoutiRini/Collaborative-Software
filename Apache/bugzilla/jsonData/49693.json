[{"attachment_id": null, "tags": [], "bug_id": 49693, "is_private": false, "count": 0, "id": 138845, "time": "2010-08-03T10:53:11Z", "creator": "chirag.desai@ctg.com", "creation_time": "2010-08-03T10:53:11Z", "text": "Hi,\n\nWe face a strange problem on our environments that when sometimes application is started in Tomcat (v5.5.26) we see following error:\n\nINFO: Deploying web application archive Xyz.war\nlog4j:ERROR setFile(null,true) call failed.\njava.io.FileNotFoundException: ../logs/xyz/xyz.log (No such file or directory)\n        at java.io.FileOutputStream.openAppend(Native Method)\n        at java.io.FileOutputStream.<init>(FileOutputStream.java:177)\n        at java.io.FileOutputStream.<init>(FileOutputStream.java:102)\n        at org.apache.log4j.FileAppender.setFile(FileAppender.java:272)\n        at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:151)\n        at org.apache.log4j.DailyRollingFileAppender.activateOptions(DailyRollingFileAppender.java:206)\n\nDue to this although application starts properly and can be used by users, it fails to update log file and also does not use daily rolling feature.\n\nHowever if Tomcat is stopped and then started this problem goes away. Therefore the issue is intermittent and only surfaces randomly when Tomcat is restarted,\n\nWe investigated this issue in detail and have verified that path/permissions for the log file and folder is correct.\n\nCould you please confirm is this is a bug in this version (1.2.8) or something else needs correcting?\n\nAny views/comments/experience on this would be much appreciated!\n\nRegards,\nChirag Desai"}, {"count": 1, "tags": [], "text": "Have you tested with a newer version of Log4j?  The latest is 1.2.16.  It's entirely possible this used to be an issue, but has since been fixed.\n\nJake", "is_private": false, "id": 138863, "creator": "hoju@visi.com", "time": "2010-08-03T23:49:03Z", "bug_id": 49693, "creation_time": "2010-08-03T23:49:03Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Hi,\n\nI came accross this issue while researching a similar behavior on our systems.\n\nWhen rolling at midnight (using companions, we create a folder based on date) we intermittently lose the logs.\n\nBascially the appender gets broken in a way a no new log file is created.\n\nLooking at the code there is a race condition in FileAppender in the following block:\n\nString parentName = new File(fileName).getParent();\n      if (parentName != null) {\n        File parentDir = new File(parentName);\n        if ((!parentDir.exists()) && (parentDir.mkdirs()))\n          ostream = new FileOutputStream(fileName, append);\n        else\n          throw ex;\n      }\n\nThis is run when a new folder structure must be created by the appender. If two different appenders try to create the parent directory at the same time, then both will get \"false\" when testing for parent dir existence, but only one will get \"true\" upon directory creation. The second appender will then fail and rethrow the original exception, and log4j presumably closes the appender after that, which prevents any further attempt to write to the appender.\n\nOnly solution so far is to reload log4j configuration.\n\nMy assumption is that this code tries to protect against errors while trying to create the directories. To keep the protection a double check pattern should be added to re-test for parent dir existence and only fail if it does not exist during the second test. Another option would be to synchronize on a static monitor object at the FileAppender level so that two different appenders could not enter that section at the same time.", "is_private": false, "id": 166329, "creator": "fabrice.delaporte@eileo.com", "time": "2013-04-02T15:56:41Z", "bug_id": 49693, "creation_time": "2013-04-02T15:56:41Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 49693, "is_private": false, "id": 166330, "time": "2013-04-02T16:08:08Z", "creator": "fabrice.delaporte@eileo.com", "creation_time": "2013-04-02T16:08:08Z", "tags": [], "text": "Even easier actually, change the code to:\n\nif (!parentDir.exists())) {\n    parentDir.mkdirs();\n}\nostream = new FileOutputStream(fileName, append);\n\nAnd the stream constructor will throw again an exception it it has to."}]
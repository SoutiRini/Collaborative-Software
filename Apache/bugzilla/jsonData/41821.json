[{"count": 0, "tags": [], "text": "For XAdES signatures we have to use 2 namespaces. One for Digital Signature and\nanother for XAdES. When we do that it is not possible to make correct signature\nbecause the digest value is calculated using just one of the 2 namespaces. When\nthe XML Signature is stored to the file using XMLUtils.outputDOMc14nWithComments\nthe file format is correct. After that when the file again is loaded into the\nmemory and the validation is failed because now the validation algorithm use\nboth namespaces which is the correct situation.\n\nI try the suggested ideas using CanonicalizationMethod.INCLUSIVE_WITH_COMMENTS\nTransforms in Reference without successful results. \nI am not so familiar with the standards, but in my opinion this is very strong\nbug in Java XML Signature implementation. Using of one or more namespaces with\nprefixes is very typical issue.", "attachment_id": null, "id": 100300, "creator": "miro@space-comm.com", "time": "2007-03-12T04:30:02Z", "bug_id": 41821, "creation_time": "2007-03-12T04:30:02Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 41821, "attachment_id": 19698, "text": "Created attachment 19698\nSign and Validate something using 2 namespaces\n\nThe problem is when are used 2 XML Namespaces:\n- \"dsig\" for \"http://www.w3.org/2000/09/xmldsig#\"\n- \"xsd\" for \"http://uri.etsi.org/01903/v1.3.2#\"\n\nThe actual problem is happen because during the signing process the Digest\ncalculations are done using just one (the first and main) namespace. When the\nXML signature is saved to the file using c14nWithComments transformation the\nfile is saved in correct format. Then when the file is loading the signature is\nloaded using both namespaces which is correct also. Then the problem is showing\nduring Validation when the digest calculation is done using just one namespace\nwhich is not correct and validation  which using both namespaces which is\ncorrect.\nI am attached a file with test case.\nAny idea how to solve the problem?\nI am trying to solve the problem using Transform in Reference\n\"#L1.S1-SignedProperties\" where this is happen but without result until now.", "id": 100301, "time": "2007-03-12T04:35:51Z", "creator": "miro@space-comm.com", "creation_time": "2007-03-12T04:35:51Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 41821, "text": "This is not a bug. You need to always use the namespace-aware DOM L2\nElement.setAttributeNS() method (instead of setAttribute) when creating\nattributes, even namespace attributes. Otherwise, the C14n algorithm doesn't\n\"see\" these namespace attributes when canonicalizing and that is why the\nresults did not match. I changed the following lines in your code and it now\nworks fine:\n\n//element.setAttribute(\"xmlns:\" + XML_SIGNATURE_PREFIX,\n//                     XMLSignature.XMLNS);\n//element.setAttributeNS(\"xmlns:\" + XAdES_XMLNS_PREFIX,\n//                       XAdES_XMLNS);\nelement.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \n                       \"xmlns:\" + XAdES_XMLNS_PREFIX,\n                       XAdES_XMLNS);\nelement.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \n                       \"xmlns:\" + XML_SIGNATURE_PREFIX,\n                       XMLSignature.XMLNS);\n\n\n\n\n\n", "id": 100358, "time": "2007-03-13T15:09:09Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-03-13T15:09:09Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 41821, "text": "Closing old bugs.", "id": 108413, "time": "2007-09-19T12:31:33Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-09-19T12:31:33Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 50026, "attachment_id": null, "text": "The following in web.xml\n\n    <servlet>\n        <servlet-name>static</servlet-name>\n        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>static</servlet-name>\n        <url-pattern>/static/*</url-pattern>\n    </servlet-mapping>\n\nmakes restricted folders accessible by e.g.\n\nhttp://localhost:8080/context/static/WEB-INF/web.xml\nhttp://localhost:8080/context/static/META-INF/MANIFEST.MF", "id": 140298, "time": "2010-09-29T11:25:46Z", "creator": "balusc@gmail.com", "creation_time": "2010-09-29T11:25:46Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 50026, "is_private": false, "id": 140299, "time": "2010-09-29T11:57:22Z", "creator": "pidster@apache.org", "creation_time": "2010-09-29T11:57:22Z", "tags": [], "text": "(In reply to comment #0)\n> The following in web.xml\n> \n>     <servlet>\n>         <servlet-name>static</servlet-name>\n>        \n> <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n>     </servlet>\n>     <servlet-mapping>\n>         <servlet-name>static</servlet-name>\n>         <url-pattern>/static/*</url-pattern>\n>     </servlet-mapping>\n\nURL patterns are application-relative.\n\n> makes restricted folders accessible by e.g.\n> \n> http://localhost:8080/context/static/WEB-INF/web.xml\n> http://localhost:8080/context/static/META-INF/MANIFEST.MF\n\nThe directories you refer to aren't in use by the app called 'context', so they're just ordinary directories which happen to duplicate the special name. The actual special directories would be here:\n\n http://localhost:8080/context/WEB-INF/web.xml \n http://localhost:8080/context/META-INF/MANIFEST.MF"}, {"count": 2, "attachment_id": null, "bug_id": 50026, "is_private": false, "id": 140300, "time": "2010-09-29T12:08:27Z", "creator": "balusc@gmail.com", "creation_time": "2010-09-29T12:08:27Z", "tags": [], "text": "No, there are no directories like that in `/static` folder. It actually refers to the restricted directories in the context root."}, {"count": 3, "tags": [], "creator": "chuck.caldarale@unisys.com", "attachment_id": null, "text": "(In reply to comment #2)\n> No, there are no directories like that in `/static` folder. It actually refers\n> to the restricted directories in the context root.\n\nThe standard DefaultServlet uses just HttpServletRequest.getPathInfo(), which is defined to return only extra path information - that which is beyond the mapping that selected the servlet.  So, with the \"/static/*\" pattern and a URL of /context/static/WEB-INF/web.xml, the DefaultServlet went looking for \"/WEB-INF/web.xml\" - and found it.\n\nI think what would be best is to change the DefaultServlet so it includes both getServletPath() and getPathInfo() in its result string, rather than just one or the other.  I haven't tried it yet, but I think the following replacement for the getRelativePath() method in DefaultServlet will work:\n\n    protected String getRelativePath(HttpServletRequest request) {\n        // Are we being processed by a RequestDispatcher.include()?\n        if (request.getAttribute(Globals.INCLUDE_REQUEST_URI_ATTR) != null) {\n            String result = (String)request.getAttribute(Globals.INCLUDE_PATH_INFO_ATTR);\n            if (result == null) {\n                result = (String)request.getAttribute(Globals.INCLUDE_SERVLET_PATH_ATTR);\n            }\n            if (result == null || result.equals(\"\")) result = \"/\";\n            return result;\n        }\n        // No, extract the desired path directly from the request.\n        String result = request.getPathInfo();\n        if (result == null) {\n            result = request.getServletPath();\n        } else {\n            result = request.getServletPath() + result;\n        }\n        if (result == null || result.equals(\"\")) result = \"/\";\n        return result;\n    }\n\nYou could also write your own class that extends DefaultServlet, and override the getRelativePath() method with the above.\n\n - Chuck", "id": 140301, "time": "2010-09-29T12:34:42Z", "bug_id": 50026, "creation_time": "2010-09-29T12:34:42Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "timw@apache.org", "text": "I'm thinking this is a WONTFIX.\n\nThe servlet engine protects the WEB-INF and META-INF paths in the web application (which is working fine), not files of that name under arbitrary paths.\n\nWhat's actually happening here is you're configuring a general purpose file serving servlet to mount up your entire web application under a different path - it's equivalent to configuring Apache to do the same thing. Except that DefaultServlet isn't a general purpose file server - it's designed to be mapped to /, and you can't configure it to do anything but serve files out of the web application directory.\n\nI'm guessing you're trying to work around a problem introduced by mapping another servlet to /*, which is basically trying to work around the way a servlet engine works.\nhttp://stackoverflow.com/questions/870150/how-to-access-static-resources-when-using-default-servlet/3593513#3593513 has an example of a better way to approach things if this is what you're trying to do.\n\nAdvice to remount DefaultServlet in Tomcat seems to have been around as long as Tomcat has existed, so perhaps we need to lock it down (so people can't accidentally create insecure configurations) or support mounting specific directories (inside or outside the web application), and break if accessing the root resources when mapped to a sub-path in any case.", "id": 140395, "time": "2010-10-03T04:05:36Z", "bug_id": 50026, "creation_time": "2010-10-03T04:05:36Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 50026, "text": "Some random thoughts:\n- The default Servlet doesn't *need* to support serving content from an arbitrary mapping. The user can just move the static content in the web-app to the desired location\n- The WebDAV Servlet (that extends the Default Servlet) does need to do this and I suspect is the reason for just using getPathInfo() and not getServletPath() + getPathInfo()\n- We don't, currently, support configuring the Default Servlet for a sub-set of the application's URL space (without using a sub-context). Chuck's proposed change would support this. Need to think about the implications for WebDAV.\n\nI'm leaning towards making Chuck's proposed change for the Default Servlet and over-riding that in the WebDAV Servlet to restore the current behaviour.", "id": 140396, "time": "2010-10-03T06:05:17Z", "creator": "markt@apache.org", "creation_time": "2010-10-03T06:05:17Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 50026, "is_private": false, "id": 140401, "time": "2010-10-03T11:59:03Z", "creator": "balusc@gmail.com", "creation_time": "2010-10-03T11:59:03Z", "tags": [], "text": "@Tim: that was one of my answers over there :) This issue is by the way triggered by another Stackoverflow question (so it was not my intent to (ab)use the default servlet like that) http://stackoverflow.com/questions/3822524/tomcat-serving-static-content (I have also answered over there).\n\nI personally can live with the WONTFIX, but this leaves a huge security hole for companies/ones who are using the DefaultServlet this way. This should probably better be documented in DefaultServlet's javadoc/manual."}, {"count": 7, "attachment_id": null, "bug_id": 50026, "text": "> I personally can live with the WONTFIX, but this leaves a huge security hole\n> for companies/ones who are using the DefaultServlet this way. This should\n> probably better be documented in DefaultServlet's javadoc/manual.\n\nYeah, I think closing the security issue is a must, given the prevalence of such use (the WONTFIX was more about the fact that this was an unintended use).\n\nThe DefaultServlet docs do need some tweaking (as well as WebdavServlet, which is almost anonymous) - will look at that as well.", "id": 140415, "time": "2010-10-03T16:54:25Z", "creator": "timw@apache.org", "creation_time": "2010-10-03T16:54:25Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "creator": "timw@apache.org", "text": "(In reply to comment #5)\n> Some random thoughts:\n> - The default Servlet doesn't *need* to support serving content from an\n> arbitrary mapping. The user can just move the static content in the web-app to\n> the desired location\n\nAgreed, although it's a breaking change for people using it now.\nI can't see the sense in re-mounting your entire webapp under a sub-path (except for WebDAV, where you want to sandbox the capabilities).\n\n> - The WebDAV Servlet (that extends the Default Servlet) does need to do this\n> and I suspect is the reason for just using getPathInfo() and not\n> getServletPath() + getPathInfo()\n\nThe WebDAV Servlet already uses getPathInfo() explicitly, so won't be affected by this change.\nIt does suffer from exposing WEB-INF though, as it delegates GET requests to DefaultServlet.\n\n> - We don't, currently, support configuring the Default Servlet for a sub-set of\n> the application's URL space (without using a sub-context). Chuck's proposed\n> change would support this. Need to think about the implications for WebDAV.\n\nI can't see any major implications - I've tested with a combination of WebDAV mounted to subpath, WebDAV mounted to /*, and DefaultServlet mounted to / and a subpath, and all looks to work OK.\n \n> I'm leaning towards making Chuck's proposed change for the Default Servlet and\n> over-riding that in the WebDAV Servlet to restore the current behaviour.\n\n+1, except that it's already overridden.\n\nI'll commit some fixes to DefaultServlet and WebdavServlet, get some review and then propose changes for 6.0.x and perhaps 5.5.x.", "id": 140456, "time": "2010-10-04T16:09:02Z", "bug_id": 50026, "creation_time": "2010-10-04T16:09:02Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "bug_id": 50026, "is_private": false, "id": 140473, "time": "2010-10-04T23:08:28Z", "creator": "timw@apache.org", "creation_time": "2010-10-04T23:08:28Z", "tags": [], "text": "Fixes for DefaultServlet and WebdavServlet are committed for 7.0.x (will be in 7.0.4+) and proposed for 6.0.\u0010x.\nWill need to check 5.5.x and see if a backport is required for that too."}, {"count": 10, "attachment_id": null, "bug_id": 50026, "is_private": false, "id": 141057, "time": "2010-10-26T08:46:27Z", "creator": "markt@apache.org", "creation_time": "2010-10-26T08:46:27Z", "tags": [], "text": "*** Bug 50153 has been marked as a duplicate of this bug. ***"}, {"count": 11, "tags": [], "bug_id": 50026, "attachment_id": null, "text": "Instead of disallowing the whole remapping of the default servlet, can't this be implemented (as suggested) by using the getPathInfo(). for example:\n\nString pathInfo = request.getPathInfo();\nif (pathInfo.startsWith(\"WEB-INF\") || pathInfo.startsWith(\"META-INF\")) {\n   // disallow, send 404\n} else {\n  proceed normally\n}\n\n\nThis would mean that nothing existing would be broken, while the security hole will be fixed.\n\nAnd there are actual reasons for remapping the default servlet. For example spring MVC prefers to have its servlet mapped to /, and static resources be served from a different path - say /static\n\nI'm aware that this can be worked around by a Filter, or placing the static resources in a new app, or perhaps some more ways, but why should these be needed, when a simple mapping could do?", "id": 141068, "time": "2010-10-26T13:38:27Z", "creator": "glamd@abv.bg", "creation_time": "2010-10-26T13:38:27Z", "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 50026, "is_private": false, "id": 141069, "time": "2010-10-26T14:21:24Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2010-10-26T14:21:24Z", "tags": [], "text": "(In reply to comment #11)\n> Instead of disallowing the whole remapping of the default servlet, can't this\n> be implemented (as suggested) by using the getPathInfo(). for example:\n> \n> String pathInfo = request.getPathInfo();\n> if (pathInfo.startsWith(\"WEB-INF\") || pathInfo.startsWith(\"META-INF\")) {\n>    // disallow, send 404\n> } else {\n>   proceed normally\n> }\n\nInsufficient, since that would expose other directories that a site might not want to give direct access to.\n\n> I'm aware that this can be worked around by a Filter, or placing the static\n> resources in a new app, or perhaps some more ways, but why should these be\n> needed, when a simple mapping could do?\n\nBecause the mapping is misleading, and numerous complaints have been lodged on the user's mailing list (and some here) about the previous discrepancy between the <url-pattern> and reality.\n\n - Chuck"}, {"count": 13, "attachment_id": null, "bug_id": 50026, "is_private": false, "id": 141070, "time": "2010-10-26T15:09:44Z", "creator": "glamd@abv.bg", "creation_time": "2010-10-26T15:09:44Z", "tags": [], "text": "> Insufficient, since that would expose other directories that a site might not\n> want to give direct access to.\n\nFor example? How would other directories be protected? \n\n\n> Because the mapping is misleading, and numerous complaints have been lodged on\n> the user's mailing list (and some here) about the previous discrepancy between\n> the <url-pattern> and reality.\n\nPerhaps. To me, for example, it is entirely straightforward what's happening."}, {"count": 14, "attachment_id": null, "creator": "chris@christopherschultz.net", "text": "Has a CVE number been assigned to this? Seems there should be one, and this vulnerability should be documented in Tomcat's security page(s).", "id": 143093, "time": "2011-01-05T11:30:07Z", "bug_id": 50026, "creation_time": "2011-01-05T11:30:07Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "text": "No. The view was that it was mis-configuration rather than a vulnerability (the default servlet was never intended to be mapped to anything other than /).", "is_private": false, "bug_id": 50026, "id": 143095, "time": "2011-01-05T11:48:05Z", "creator": "markt@apache.org", "creation_time": "2011-01-05T11:48:05Z", "attachment_id": null}, {"count": 16, "tags": [], "text": "This has been fixed in 6.0.x and will be included in 6.0.30 onwards.", "is_private": false, "id": 143196, "creator": "markt@apache.org", "time": "2011-01-08T13:58:14Z", "bug_id": 50026, "creation_time": "2011-01-08T13:58:14Z", "attachment_id": null}]
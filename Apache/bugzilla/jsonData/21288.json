[{"count": 0, "tags": [], "bug_id": 21288, "is_private": false, "text": "I have a webdav enabled webapp in /webdav.\nIf I in Dreamweaver drag-drop a deep directory structure such as:\n\nrisk2/\nrisk2/character/\nrisk2/character/file.txt\n\nAnd the risk2 directory does not exist under /webdav/.\n\nThe commands at one point issued are:\nPROPFIND /webdav-www.boscom.com.preview.taglab.com/risk2 HTTP/1.1\nHTTP/1.1 404\nPROPFIND /webdav-www.boscom.com.preview.taglab.com/ HTTP/1.1\nHTTP/1.1 207\nMKCOL /webdav-www.boscom.com.preview.taglab.com/risk2/ HTTP/1.1\nHTTP/1.1 201\nPROPFIND /webdav-www.boscom.com.preview.taglab.com/risk2/character HTTP/1.1\nHTTP/1.1 404\nPROPFIND /webdav-www.boscom.com.preview.taglab.com/risk2/ HTTP/1.1\nHTTP/1.1 404\n\nThe problem is the last PROPFIND fails despite the MKCOL for the same resource\nsucceeded. \n\nIt all boils down to that doPropfind() always strips a trailing \"/\" of the path.\nThis means that \"/risk2/\" would be used as \"/risk2\". The lookup in the\nDirContext is done using \"/risk2\" (resources.lookup()) and such the very first\n\"/risk2\" propfind (before MKCOL) gets cached in the DirContext as not existing\n(which is correct). However the MKCOL is done using \"/risk2/\" with the trailing\nslash which means that the resources.createSubcontext() call does not clear the\nDirContext cached entry for \"/risk2\", and such the second call to propfind for\n\"/risk2/\" fails with a 404.\n\nHere is one solution to this specific problem.\n\n$ diff -u WebdavServlet.java-2003-07-01 WebdavServlet.java\n--- WebdavServlet.java-2003-07-01       2003-07-01 11:37:34.000000000 +0100\n+++ WebdavServlet.java  2003-07-02 15:10:30.000000000 +0100\n@@ -692,6 +692,8 @@\n         }\n                                                                                \n         String path = getRelativePath(req);\n+        if (path.endsWith(\"/\"))\n+            path = path.substring(0, path.length() - 1);\n                                                                                \n         if ((path.toUpperCase().startsWith(\"/WEB-INF\")) ||\n             (path.toUpperCase().startsWith(\"/META-INF\"))) {\n\n\n\nI think that this needs to be solved on a more fundamental level. ALL methods in\nthe WebdavServlet should do the same processing of the path so that no\ninconsistencies against the DirContext can occur. Perhaps getRelativePath()\ncould be overriden and _always_ strip any trailing slashes. I haven't tried this\nout and I'm out of time in resolving this issue now.", "id": 39881, "time": "2003-07-02T18:29:45Z", "creator": "puckman@taglab.com", "creation_time": "2003-07-02T18:29:45Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 21288, "attachment_id": null, "text": "replace /webdav-www.boscom.com.preview.taglab.com/ with /webdav/ above... I\nforgot to change that.", "id": 39883, "time": "2003-07-02T18:33:51Z", "creator": "puckman@taglab.com", "creation_time": "2003-07-02T18:33:51Z", "is_private": false}, {"count": 2, "tags": [], "text": "Ah, ok, I thought I had correctly added the cache invalidation when creating the\ndirectory or changing some properties. So the cache invalidation works, but it's\nnot done on the right entry :-(\nOne thing which would be cleaner could indeed be to always strip a trailing '/'.\nI will not apply your patch to TC 5, but make sure a more generic solution is used.", "is_private": false, "bug_id": 21288, "id": 39884, "time": "2003-07-02T18:47:05Z", "creator": "remm@apache.org", "creation_time": "2003-07-02T18:47:05Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "I have added:\n        if (name.endsWith(\"/\")) {\n            name = name.substring(0, name.length() - 1);\n        }\n\nin both ProxyDirContext.cacheLookup and cacheUnload. That should fix the problem\n(and other similar problems), but I can't really test it. Can you help ?\n\nI'm committing the fix to TC 5, and will backport it to TC 4.1.x if it does fix\nthe issue.", "is_private": false, "bug_id": 21288, "id": 39895, "time": "2003-07-02T22:30:13Z", "creator": "remm@apache.org", "creation_time": "2003-07-02T22:30:13Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 21288, "is_private": false, "id": 39897, "creation_time": "2003-07-02T23:00:51Z", "time": "2003-07-02T23:00:51Z", "creator": "remm@apache.org", "text": "I thought about it some more, and fear that my patch could have some\nconsequences, as it could makes URLs like /somejsp.jsp and /somejsp.jsp/\nidentical (very bad). Of course, that occurs after extension or exact mapping,\nso you can't get the JSP source that easily (and indeed, I couldn't exploit it),\nbut still, it's not a safe patch.\n\nInstead, I plan to unload the slashed version of a resource as well as the\nnon-slashed version when unloading from the cache. Since unloading doesn't\nhappen too often, it shouldn't have any performance impact.\n", "attachment_id": null}, {"count": 5, "tags": [], "text": "Remy,\nThat cache unload would indeed sort the problem. My suggestion was to fix the trailing \nslash issue in WebdavServlet. You could argue that ProxyDirContext is currently doing \nthe right thing, treating /some.gif and /some.gif/ as two different entries and that is the \nuser of the API (WebdavServlet) that should make sure the cache pollution doesn't occur. \nBut I suppose that's philosophical since the end result would be the same.\n\nI would be happy to test the patch for you. I'm doing TC4.1 on my live systems.\nDid you have any thoughts on the #21284 issue?\n", "is_private": false, "bug_id": 21288, "id": 39915, "time": "2003-07-03T08:57:41Z", "creator": "puckman@taglab.com", "creation_time": "2003-07-03T08:57:41Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 52267, "time": "2004-02-13T22:38:17Z", "bug_id": 21288, "creation_time": "2004-02-13T22:38:17Z", "text": "This works for me in TC4 and TC5."}]
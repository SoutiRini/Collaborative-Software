[{"count": 0, "attachment_id": null, "creator": "peter.holzwarth@io-software.com", "text": "When invoking ant from within a running vm, the system properties may contain \nobjects, in contrast to calling ant from a shell, when they will only contain \nstrings. This is an extremely useful feature of the system properties, and \nshould not lead to problems when using ant.\n\nHowever, the system properties containing objects will cause a type cast error \nin ant's Project.java. I'd like to submit the following fix for this issue:\n\nIndex: Project.java\n===================================================================\nRCS file: \n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/Project.java,v\nretrieving revision 1.53\ndiff -r1.53 Project.java\n207c207\n<             String value = (String) systemP.get(name);\n---\n>             String value = systemP.get(name).toString();", "id": 1072, "time": "2001-03-08T09:38:28Z", "bug_id": 904, "creation_time": "2001-03-08T09:38:28Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "Peter, could you please explain this a little more?\n\nSystem.getProperties returns a Properties instance, which by definition contains\nkeys and values of type String - nothing else. How would you insert Objects into\nthe system properties?", "is_private": false, "bug_id": 904, "id": 1205, "time": "2001-03-12T03:48:03Z", "creator": "bodewig@apache.org", "creation_time": "2001-03-12T03:48:03Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 904, "attachment_id": null, "text": "Actually, the Properties object is not strictly String-values only: it does \nextend Hashtable, which allows any Object values.  It's just that most people \nonly use Strings in Properties blocks.  See the Sun JDK 1.2.2 Javadoc for more.\nNote that using non-String values will probably call any .load()/.save() calls \nto barf, since they're only expecting Strings.\nNote also that you probably have another bug here: why is it calling systemP.get\n(name) instead of .getProperty?  The get() is just an override of the \nHashtable, which will get the value only if it's found in this Properties \nblock.  getProperty will only return String-values, and will also search any \ndefaults that the Properties block has, which is another important Properties \nfeature.  (Note: I have not looked at the surrounding code much, so I don't \nactually know if you want this - just wanted to point it out)", "id": 1209, "time": "2001-03-12T05:32:47Z", "creator": "curcuru@apache.org", "creation_time": "2001-03-12T05:32:47Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 904, "text": "(I used reply to send my answer, but that didn't show up anywhere, so I'm trying \nout the form now...) \n\nwe're using ant from within our ArcStyler IDE in-process. Inside our IDE, we're \nusing the system properties to transport context information between classes \nthat run within different class loaders. As an example, we're writing things \nlike \n\n----------------------------------\nSystem.getProperties().put(\"myKey\", new Integer(3));\n----------------------------------\n\nThis appears to be completely legal regarding the JDK. The getProperty() method\nimplemented in the JDK simply ignores non-string values:\n----------------------------------\npublic String getProperty(String key) {\n Object oval = super.get(key);\n String sval = (oval instanceof String) ? (String)oval : null;\n return ((sval == null) && (defaults != null)) ? defaults.getProperty(key) : \nsval;\n}\n----------------------------------\n\nThis might be feasible for ant, too. Or, ant may use a toString() on the \nobjects. Both make sense in some situations. However, the current behaviour of \nant is that it throws a class cast exception, which shouldn't be.\n\nIf you decide to interpret the semantics of the Properties class in a strict  \nway, I would suggest writing\n\n----------------------------------\nString value = systemP.getProperty(name);\n----------------------------------\n\ninstead of\n\n----------------------------------\nString value = (String) systemP.get(name);\n----------------------------------\n", "id": 1211, "time": "2001-03-12T05:58:46Z", "creator": "peter.holzwarth@io-software.com", "creation_time": "2001-03-12T05:58:46Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 1212, "time": "2001-03-12T06:01:59Z", "bug_id": 904, "creation_time": "2001-03-12T06:01:59Z", "tags": [], "text": "Actually the javadoc for Properties says \"Each key and its corresponding value\nin the property list is a string.\", and I always thought (without looking at the\nsource) that Properties would override put to make sure you cannot insert\nsomething else.\n\nI'll apply the patch that uses .toString instead of the cast - that way Objects\nliving in system properties might even yield some reasonable result.\n\nShould be fixed in nightly build 2001-03-13."}]
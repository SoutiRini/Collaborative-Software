[{"count": 0, "tags": [], "text": "I am facing a issue with validating the xml signature. I have enveloped \ntransform followed by ex-C14N. I did search xmlsec mail archive but to \nno success. Then I tried with debugging the xmlsec src code:\n\n The Reference object loops through all the configured transforms, in my case it is http://www.w3.org/2000/09/xmldsig#enveloped-signature \n   transform which returns a (modified, i assume) XMLSignatureInput followed by   C14N and it returns null! When I tried debugging, i find this:\n\nCanonicalizerBase.engineCanonicalizeXPathNodeSetInternal() method:\n\n           this.canonicalizeXPathNodeSet(doc,doc);\n           System.out.println(\"canonicalizeXPathNodeSet is ok i  \n guess...\");\n           this._writer.close();\n           if (this._writer instanceof ByteArrayOutputStream) {\n              byte []  \n sol=((ByteArrayOutputStream)this._writer).toByteArray();\n              if (reset) {\n              \t((ByteArrayOutputStream)this._writer).reset();\n              }\n           \treturn sol;\n           }  else if (this._writer instanceof  \n UnsyncByteArrayOutputStream) {\n          \t byte  \n []result=((UnsyncByteArrayOutputStream)this._writer).toByteArray();\n               if (reset) {\n                   ((UnsyncByteArrayOutputStream)this._writer).reset();\n               }\n            \t return result;\n           }\n           return null;   <------ returns this null!\n\n The _writer instance in this case was created in Reference.java method  \n calculateDigest. Thus the ByteArrayOutputStreams of CanonicalizeBase do not\n match with the BufferedOutputStreams of Reference class, causing it to return\n null.\n\n           MessageDigestAlgorithm mda = this.getMessageDigestAlgorithm();\n\n           mda.reset();\n           DigesterOutputStream diOs=new DigesterOutputStream(mda);\n           OutputStream os=new UnsyncBufferedOutputStream(diOs);   <---  \n not check via instanceof in CanonicalizerBase\n           XMLSignatureInput  \n output=this.dereferenceURIandPerformTransforms(os);\n           output.updateOutputStream(os);\n           os.flush();\n\nPls help me in resolving this. I am attachin a sample signed SAML token file that was generated in my app. Note that while this problem comes, we have not yet reached the actual digest value comparision.", "is_private": false, "id": 119537, "creation_time": "2008-08-07T02:34:32Z", "time": "2008-08-07T02:34:32Z", "creator": "sburnwal@cisco.com", "bug_id": 45586, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 45586, "attachment_id": 22400, "id": 119538, "time": "2008-08-07T02:36:43Z", "creator": "sburnwal@cisco.com", "creation_time": "2008-08-07T02:36:43Z", "is_private": false, "text": "Created attachment 22400\nSample Signed SAML token for verification"}, {"count": 2, "tags": [], "bug_id": 45586, "attachment_id": null, "is_private": false, "id": 119857, "time": "2008-08-15T10:06:46Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-08-15T10:06:46Z", "text": "I have marked this as NEEDINFO. Here's my analysis that I also \nposted to the mailing list:\n\nReturning null is intentional and is a performance optimization as\nRaul mentions. The c14ned bytes are still being written to the output\nstream.\n\nI validated the signature with the JSR 105 API, and it is invalid. The\nreference digests don't match. Here's some debugging info:\n\nExpected digest: SVUf+cO2NKZpSOHHhPfQjLQNhiE= \nActual digest: Us20IPzJot+nTKMGap+rv81TVOo=\n\nPre-digested input (likely skewed by the email app):\n\n<saml:Assertion xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" \nAssertionID=\"c63cc59337d833aeb06186e4d19556b2\" Id=\"id-23761097\" \nIssueInstant=\"2008-08-01T08:28:40.298Z\" Issuer=\"SmartInternetTechnology\" \nMajorVersion=\"1\" MinorVersion=\"0\"><Conditions\nxmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" \nNotBefore=\"2008-08-01T08:27:58.688Z\" \nNotOnOrAfter=\"2008-08-01T09:27:58.688Z\"></Conditions><AuthenticationStatemen\nt\nxmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" \nAuthenticationInstant=\"2008-08-01T08:27:58.688Z\" \nAuthenticationMethod=\"urn:oasis:names:tc:SAML:1.0:am:password\"><Subject><Nam\neIdentifier\nFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIde\nntifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0\n:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject></Auth\nenticationStatement><AttributeStatement\nxmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\"><Subject><NameIdentifier\nFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIde\nntifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0\n:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject><Attri\nbute\nAttributeName=\"telephoneNumber\" \nAttributeNamespace=\"telephoneNumber\"><AttributeValue>a</AttributeValue></Att\nribute></AttributeStatement></saml:Assertion>\n\nI suggest you dump the pre-digested input when signing and compare byte for\nbyte to see what broke the signature.\n"}, {"attachment_id": null, "tags": [], "bug_id": 45586, "is_private": false, "count": 3, "id": 120676, "time": "2008-09-16T04:58:11Z", "creator": "sburnwal@cisco.com", "creation_time": "2008-09-16T04:58:11Z", "text": "As suggested, I am dumping the pre-digested input just before signing. I did debug the signing code as well. Actually during signing itself, while applying the all the transforms, in my case which is http://www.w3.org/2000/09/xmldsig#enveloped-signature \nfollowed by ex-C14N, it returns null. Thus digest seems to be computed for null content. Below is the input that is being signed. You can verify that after signing, signature verification fails. \n\n<?xml version=\"1.0\"?>\n<saml:Assertion AssertionID=\"b5b4e2ec57d9fb038ec1f45637bc8799\" Id=\"id-6074555\" IssueInstant=\"2008-09-16T11:48:21.160Z\" Issuer=\"SmartInternetTechnology\" MajorVersion=\"1\" MinorVersion=\"1\" xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" xmlns:samlp=\"urn:oasis:names:tc:SAML:1.0:protocol\"><Conditions NotBefore=\"2008-09-16T11:48:20.800Z\" NotOnOrAfter=\"2008-09-16T12:48:20.800Z\"/><AuthenticationStatement AuthenticationInstant=\"2008-09-16T11:48:20.800Z\" AuthenticationMethod=\"urn:oasis:names:tc:SAML:1.0:am:password\"><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject></AuthenticationStatement><AttributeStatement><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject><Attribute AttributeName=\"telephone\" AttributeNamespace=\"telephoneNumber\"><AttributeValue>a</AttributeValue></Attribute></AttributeStatement><ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:SignedInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"/>\n<ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"/>\n<ds:Reference URI=\"#id-6074555\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:Transforms xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"/>\n<ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"/>\n</ds:Transforms>\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"/>\n<ds:DigestValue xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"/>\n</ds:Reference>\n</ds:SignedInfo>\n<ds:SignatureValue xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"/>\n<ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:X509Data xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:X509Certificate xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\nMIIDdjCCAl6gAwIBAgIKUp60agACAAAA0zANBgkqhkiG9w0BAQUFADAuMRYwFAYDVQQKEw1DaXNj\nbyBTeXN0ZW1zMRQwEgYDVQQDEwtDQVAtUlRQLTAwMzAeFw0wNTAzMDIxNzUzMDJaFw0xNTAzMDIx\nODAzMDJaMBQxEjAQBgNVBAMTCWxvY2FsaG9zdDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\nyiU+P4QcZzOcoF2gmCEomDppV+oOJ7I+RJyk+SUiuhxO50o3KiNtLBFEpDKlHJe8552gH0BWOB3f\nDd1DS/+fT0DXo3aixtvMp/Z6MNPxXHqZFA+9BKDvlNvFFI0xReve2DDq4Na2wP+6+fPZxp2Cwt0f\npXUeZTaFz50oo4ydXqcCAwEAAaOCATIwggEuMA4GA1UdDwEB/wQEAwIFoDAdBgNVHQ4EFgQUKwPh\nYnELbDtH0lRZWds8+kwgVIQwHwYDVR0jBBgwFoAUEBevY1HgigL/os3QrD36oRawm0gwRgYDVR0f\nBD8wPTA7oDmgN4Y1aHR0cDovL3d3dy5jaXNjby5jb20vc2VjdXJpdHkvcGtpL2NybC9DQVAtUlRQ\nLTAwMy5jcmwwUwYIKwYBBQUHAQEERzBFMEMGCCsGAQUFBzAChjdodHRwOi8vd3d3LmNpc2NvLmNv\nbS9zZWN1cml0eS9wa2kvY2VydHMvQ0FQLVJUUC0wMDMuY2VyMD8GCSsGAQQBgjcUAgQyHjAASQBQ\nAFMARQBDAEkAbgB0AGUAcgBtAGUAZABpAGEAdABlAE8AZgBmAGwAaQBuAGUwDQYJKoZIhvcNAQEF\nBQADggEBADckYVldCRW6MYtN9hmdH7GnROo/0o9LE70qXyGn1vrGtyW06ceePLq6v3svjPp70Emg\nhFoFc+/tX5i1vx9teI8HnfjGEx9BhNbumkXNgrWR8ELB7oozLQ4YRE2BgEklJEhwed4MBSEEQ+3x\nDStNrXzj7F8QLLYHy8vKWMoGqnPptmjB7x6LvBCkGa11rEsS8bQs7ShGciily/8Hu5DT0ssFwxCg\npsJYjjNuF4MwNLP0u6SFpKDWNH2FUFMrvPB/1pkY/GnRFR0/P+WP3Jw45+Hw6WPxfAS6Fy1Vp9un\nCbFIOHt4qotRJu/ArdzP2N5oIRu4uKSTH2un+42StzlrYOA=\n</ds:X509Certificate>\n</ds:X509Data>\n<ds:KeyValue xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:RSAKeyValue xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:Modulus xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\nyiU+P4QcZzOcoF2gmCEomDppV+oOJ7I+RJyk+SUiuhxO50o3KiNtLBFEpDKlHJe8552gH0BWOB3f\nDd1DS/+fT0DXo3aixtvMp/Z6MNPxXHqZFA+9BKDvlNvFFI0xReve2DDq4Na2wP+6+fPZxp2Cwt0f\npXUeZTaFz50oo4ydXqc=\n</ds:Modulus>\n<ds:Exponent xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">AQAB</ds:Exponent>\n</ds:RSAKeyValue>\n</ds:KeyValue>\n</ds:KeyInfo>\n</ds:Signature>\n</saml:Assertion>\n\n-----------------------\nThanks in adv,\nSatish."}, {"count": 4, "tags": [], "bug_id": 45586, "attachment_id": null, "id": 120679, "time": "2008-09-16T05:46:05Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-09-16T05:46:05Z", "is_private": false, "text": "(In reply to comment #3)\n> As suggested, I am dumping the pre-digested input just before signing. \n\nThis isn't the pre-digested input. The signature is still inside\nthe assertion which means the enveloped transform has not been processed yet.\n\n> I did\n> debug the signing code as well. Actually during signing itself, while applying\n> the all the transforms, in my case which is\n> http://www.w3.org/2000/09/xmldsig#enveloped-signature \n> followed by ex-C14N, it returns null. Thus digest seems to be computed for null\n> content. \n\nThis is expected behavior. The code is optimized for performance,\nsuch that the bytes are canonicalized and then digested in a streaming manner.\nThe byte array is not available to be returned, thus null is returned."}, {"count": 5, "tags": [], "text": "I am little confused when you say pre-digested input. But looking at the code in TransformEnvelopedSignature.java of xmlsec which is:\n\nif (input.isElement()) {\n         \tXMLSignatureInput result = new XMLSignatureInput(input.getSubNode());\n         \tresult.setExcludeNode(signatureElement);\n         \tresult.setExcludeComments(input.isExcludeComments());\n         \treturn result;\n         }\n\nSo excluding the sign elt and the comments, I get this:\n<saml:Assertion AssertionID=\"b5b4e2ec57d9fb038ec1f45637bc8799\" Id=\"id-6074555\" IssueInstant=\"2008-09-16T11:48:21.160Z\" Issuer=\"SmartInternetTechnology\" MajorVersion=\"1\" MinorVersion=\"1\" xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" xmlns:samlp=\"urn:oasis:names:tc:SAML:1.0:protocol\"><Conditions NotBefore=\"2008-09-16T11:48:20.800Z\" NotOnOrAfter=\"2008-09-16T12:48:20.800Z\"/><AuthenticationStatement AuthenticationInstant=\"2008-09-16T11:48:20.800Z\" AuthenticationMethod=\"urn:oasis:names:tc:SAML:1.0:am:password\"><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject></AuthenticationStatement><AttributeStatement><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject><Attribute AttributeName=\"telephone\" AttributeNamespace=\"telephoneNumber\"><AttributeValue>a</AttributeValue></Attribute></AttributeStatement></saml:Assertion>\n\nOf course, after applying the next transformation (exc14n), what is returned is null which you is fine.\n\nAm I still missing sth?\n\n", "attachment_id": null, "id": 120698, "creation_time": "2008-09-16T22:30:48Z", "time": "2008-09-16T22:30:48Z", "creator": "sburnwal@cisco.com", "bug_id": 45586, "is_private": false}, {"count": 6, "tags": [], "text": "(In reply to comment #5)\n> I am little confused when you say pre-digested input. \n\nBy pre-digested input, I mean the bytes that are input to the MessageDigest algorithm. These are the bytes that are digested and become the DigestValue of\neach Reference element. Being able to dump these bytes are usually critical to debugging XML Signature validation failures. You need to obtain the pre-digested bytes when you are both signing and validating the XML Signature. Then you can compare them and look for the differences (i.e. which is causing the signature not to validate and the digests not to match).\n\nOften, it is caused by the following problems:\n\n- namespaces are leaking into the signed content\n- serializing the signature from DOM to xml and back to DOM has introduced something that breaks the signature, maybe additional whitespace or default namespaces due to legacy xml, etc\n\nIn the Apache XMLSec implementation, there is logging code that dumps the pre-digested bytes in the org.apache.xml.security.utils.DigesterOutputStream class:\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"Pre-digested input:\");\n            StringBuffer sb = new StringBuffer(arg2);\n            for (int i=arg1; i<(arg1+arg2); i++) {\n                sb.append((char) arg0[i]);\n            }\n            log.debug(sb.toString());\n        }\n\nPlease enable this logging and attach this output when you are generating the signature.\n\n> But looking at the code\n> in TransformEnvelopedSignature.java of xmlsec which is:\n> \n> if (input.isElement()) {\n>                 XMLSignatureInput result = new\n> XMLSignatureInput(input.getSubNode());\n>                 result.setExcludeNode(signatureElement);\n>                 result.setExcludeComments(input.isExcludeComments());\n>                 return result;\n>          }\n> \n> So excluding the sign elt and the comments, I get this:\n\nIt is not enough to do that. There is another transform following the enveloped transform that canonicalizes the nodeset result of the enveloped transform. The bytes resulting from that are the pre-digested input. But you can just use the logging code above to dump the bytes.\n\nAlso, I am assuming that you used the Apache XMLSec implementation to generate the signature. If you used some other XML Signature implementation to generate the signature, then you must use that implementation to dump the pre-digested bytes. You may need to ask the developers if there is a hook or debug mechanism to do that (hopefully there is). If there isn't a way to do that, then there isn't much else I can do with this report and will have to close it. I would like to help find out the problem, but without this minimal information, it is impossible since I have nothing to start with.\n", "attachment_id": null, "id": 120720, "creator": "sean.mullan@oracle.com", "time": "2008-09-17T12:47:10Z", "bug_id": 45586, "creation_time": "2008-09-17T12:47:10Z", "is_private": false}, {"count": 7, "tags": [], "text": "As per your suggestion, I have obtained and compared the pre-digest inputs before signing and before validating the signature - they are identical. In fact during the signature verification, I observed that the class org.apache.xml.security.signature.Reference does prints\t\"Verification successful for URI #id-29762786\". FYI - there were 4 spaces which are present in both the pre-digested inputs at the end of the line.\n\nBefore signing:\n<saml:Assertion xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" AssertionID=\"a8d403e706c3a178cc312f9ec97fe771\" Id=\"id-24044096\" IssueInstant=\"2008-09-18T08:58:11.321Z\" Issuer=\"SmartInternetTechnology\" MajorVersion=\"1\" MinorVersion=\"1\"><Conditions xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" NotBefore=\"2008-09-18T08:58:11.102Z\" NotOnOrAfter=\"2008-09-18T09:58:11.102Z\"></Conditions><AuthenticationStatement xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" AuthenticationInstant=\"2008-09-18T08:58:11.102Z\" AuthenticationMethod=\"urn:oasis:names:tc:SAML:1.0:am:password\"><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject></AuthenticationStatement><AttributeStatement xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\"><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject><Attribute AttributeName=\"telephone\" AttributeNamespace=\"telephoneNumber\"><AttributeValue>a</AttributeValue></Attribute></AttributeStatement></saml:Assertion>\n\n\nBefore validating sign:\n<saml:Assertion xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" AssertionID=\"a8d403e706c3a178cc312f9ec97fe771\" Id=\"id-24044096\" IssueInstant=\"2008-09-18T08:58:11.321Z\" Issuer=\"SmartInternetTechnology\" MajorVersion=\"1\" MinorVersion=\"1\"><Conditions xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" NotBefore=\"2008-09-18T08:58:11.102Z\" NotOnOrAfter=\"2008-09-18T09:58:11.102Z\"></Conditions><AuthenticationStatement xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\" AuthenticationInstant=\"2008-09-18T08:58:11.102Z\" AuthenticationMethod=\"urn:oasis:names:tc:SAML:1.0:am:password\"><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject></AuthenticationStatement><AttributeStatement xmlns=\"urn:oasis:names:tc:SAML:1.0:assertion\"><Subject><NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\">arun</NameIdentifier><SubjectConfirmation><ConfirmationMethod>urn:oasis:names:tc:SAML:1.0:cm:holder-of-key</ConfirmationMethod></SubjectConfirmation></Subject><Attribute AttributeName=\"telephone\" AttributeNamespace=\"telephoneNumber\"><AttributeValue>a</AttributeValue></Attribute></AttributeStatement></saml:Assertion>\t\n\n\nAlso as you wanted to know - there is exc14n tranform after enveloped transform and we are using the apache xmlsec impl only for signing.\n\nThanks\n-Satish", "attachment_id": null, "id": 120737, "creator": "sburnwal@cisco.com", "time": "2008-09-18T04:17:09Z", "bug_id": 45586, "creation_time": "2008-09-18T04:17:09Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 45586, "attachment_id": null, "is_private": false, "id": 120740, "time": "2008-09-18T05:34:02Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-09-18T05:34:02Z", "text": "(In reply to comment #7)\n> As per your suggestion, I have obtained and compared the pre-digest inputs\n> before signing and before validating the signature - they are identical. In\n> fact during the signature verification, I observed that the class\n> org.apache.xml.security.signature.Reference does prints        \"Verification\n> successful for URI #id-29762786\". \n\nDoes the signature validate successfully? If it does, I'm not sure what the bug is. When I validated the signature that you originally posted, I was getting a validation failure due to a reference digesting failure, which is why I asked for you to obtain the pre-digested bytes when signing, so that I could see why the digests are different. If the pre-digested bytes are now the same, it seems that there is no longer a problem ..."}, {"count": 9, "tags": [], "text": "Created attachment 22610\nSigned SAML token for signature verification", "is_private": false, "id": 120781, "creation_time": "2008-09-19T02:21:15Z", "time": "2008-09-19T02:21:15Z", "creator": "sburnwal@cisco.com", "bug_id": 45586, "attachment_id": 22610}, {"count": 10, "tags": [], "creator": "sburnwal@cisco.com", "is_private": false, "id": 120782, "creation_time": "2008-09-19T02:30:25Z", "time": "2008-09-19T02:30:25Z", "bug_id": 45586, "text": "I have re-posted the signed saml token (see the file attached today) as I believe the original file I had posted was a bit tampered (sorry for that - I had played with the Id attr while debugging the issue). In the new attachment, you can see that pre-digest inputs match, digests also match but signature validation fails. Can you pls verify this yourself ? ", "attachment_id": null}, {"count": 11, "tags": [], "creator": "putmanb@georgetown.edu", "is_private": false, "id": 120807, "creation_time": "2008-09-19T10:38:55Z", "time": "2008-09-19T10:38:55Z", "bug_id": 45586, "text": "I think your problem is not with the Reference, but with the SignedInfo.  You are not using exclusive c14n in the Signature/SignedInfo/CanonicalizationMethod.\n\nThat's pretty much required if you are going to sign the Assertion in a standalone context and then embed in another context where it will be verified (e.g. inside a SOAP Envelope).\n\nMost likely, the namespaces defined in the SOAP element parents are leaking into the inclusively canonicalized SignedInfo, causing validation to fail.", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 45586, "attachment_id": null, "id": 120878, "time": "2008-09-23T05:36:19Z", "creator": "sburnwal@cisco.com", "creation_time": "2008-09-23T05:36:19Z", "is_private": false, "text": "Brent,\nYou may be right in your assessment but I do not see any way to set the value for Signature/SignedInfo/CanonicalizationMethod. Looking at the documentation for the constructor XMLSignature(Document doc, String BaseURI, String SignatureMethodURI), I see that Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS algo should be used which is required by the spec and that is what I am also following (xmlsec examples also use that). I do not see any method either in XMLSignature or in SignedInfo class to set the c14n algo. Do you know any way to do that? Can I set the excl c14n algo using the other constructors of XMLSignature ?"}, {"count": 13, "tags": [], "text": "(In reply to comment #12)\n> Brent,\n> You may be right in your assessment but I do not see any way to set the value\n> for Signature/SignedInfo/CanonicalizationMethod. Looking at the documentation\n> for the constructor XMLSignature(Document doc, String BaseURI, String\n> SignatureMethodURI), I see that Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS algo\n> should be used which is required by the spec and that is what I am also\n> following (xmlsec examples also use that). I do not see any method either in\n> XMLSignature or in SignedInfo class to set the c14n algo. Do you know any way\n> to do that? Can I set the excl c14n algo using the other constructors of\n> XMLSignature ?\n> \n\nThere's another constructor that takes the C14N algorithm as a uri:\n\n    public XMLSignature(Document doc, String BaseURI, String SignatureMethodURI,\n        String CanonicalizationMethodURI)\n\nTry that, and specify Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS as the URI.\n\n\n\n", "is_private": false, "bug_id": 45586, "id": 120885, "time": "2008-09-23T06:52:58Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-09-23T06:52:58Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 45586, "attachment_id": null, "is_private": false, "id": 120893, "time": "2008-09-23T10:26:51Z", "creator": "sburnwal@cisco.com", "creation_time": "2008-09-23T10:26:51Z", "text": "Sean, Brent etc:\nWith Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS signature gets verified. Since I am going to use this logic in a product, can you shed some light on which c14n algo should be used when ? Do you think in case of Enveloping signature, we would be fine with Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS ?"}, {"count": 15, "tags": [], "bug_id": 45586, "attachment_id": null, "id": 120895, "time": "2008-09-23T13:52:52Z", "creator": "putmanb@georgetown.edu", "creation_time": "2008-09-23T13:52:52Z", "is_private": false, "text": "I'm afraid I haven't worked much with enveloping so I don't know about special issues there.  I would venture a guess that if the signing and validation are done in the same XML contexts, then the standard inclusive c14n 1.0 is likely ok.  However, if you want to take an enveloping Signature element and embed it in some other document, then you've got issues there, I imagine.\n\nNote also that there is a newer 1.1 version of the inclusive C14N algorithm.  I'm not up on the differences with 1.0, just fyi.\n\nhttp://www.w3.org/TR/xml-c14n11/\n\nI believe it's supposed to be supported by the latest Apache Java xmlsec (1.4.2).\n\n"}, {"count": 16, "tags": [], "text": "Sean, Brent:\nThank you very much for helping me resolve this.", "attachment_id": null, "id": 121004, "creator": "sburnwal@cisco.com", "time": "2008-09-25T23:16:08Z", "bug_id": 45586, "creation_time": "2008-09-25T23:16:08Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "The LocationInfo constructor obtains the location of the logging request by capturing the output of Throwable.printStackTrace and then parsing it to find the earliest caller of any method on the fully qualified class name.  Unfortunately, this can be sensitive to differences in implementations of Throwable.printStackTrace (see bug 42281 and 30588 for examples) or general weaknesses in the parsing of the output (see bug 44888).\n\nJDK 1.4 added Throwable.getStackTrace() to provide direct access to this info, but since log4j still supports running on earlier platforms it can not depend on the availability of this method.  Building log4j does require at least a JDK 1.4 due to the use of Maven, so it could have explicit calls to Throwable.getStackTrace() as long as it was prepared to catch an exception if the method was not found and would fallback to the JDK 1.3 compatible behavior.  Or it could just use reflection.", "attachment_id": null, "id": 116818, "creator": "carnold@apache.org", "time": "2008-05-19T10:31:28Z", "bug_id": 45039, "creation_time": "2008-05-19T10:31:28Z", "is_private": false}, {"count": 1, "tags": [], "creator": "thorbjoern@gmail.com", "attachment_id": null, "id": 118215, "time": "2008-07-02T17:25:46Z", "bug_id": 45039, "creation_time": "2008-07-02T17:25:46Z", "is_private": false, "text": "(In reply to comment #0)\n\n> JDK 1.4 added Throwable.getStackTrace() to provide direct access to this info,\n> but since log4j still supports running on earlier platforms it can not depend\n> on the availability of this method.  Building log4j does require at least a JDK\n> 1.4 due to the use of Maven, so it could have explicit calls to\n> Throwable.getStackTrace() as long as it was prepared to catch an exception if\n> the method was not found and would fallback to the JDK 1.3 compatible behavior.\n>  Or it could just use reflection.\n\nIn my experience having code conforming to a given Java version gives problems especially when having several of these each for their own Java version all put in the same source tree.\n\nPersonally I think that the best way to do this kind of \"call this method which we know at runtime if it exists or not\" is through reflection.  If the code is written and debugged first as a normal Java method it is not hard to transform the finished result into reflection method calls. \n"}, {"count": 2, "tags": [], "text": "Committed rev 685300.", "attachment_id": null, "bug_id": 45039, "id": 119757, "time": "2008-08-12T13:28:23Z", "creator": "carnold@apache.org", "creation_time": "2008-08-12T13:28:23Z", "is_private": false}]
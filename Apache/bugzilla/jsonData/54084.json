[{"count": 0, "tags": [], "bug_id": 54084, "attachment_id": null, "id": 163105, "time": "2012-11-01T08:01:59Z", "creator": "l_alexandra2010@yahoo.com", "creation_time": "2012-11-01T08:01:59Z", "is_private": false, "text": "Set the value of a SXSSFCell to a string that contains chinese chars:\ncell.setCellValue(\""}, {"count": 1, "tags": [], "creator": "l_alexandra2010@yahoo.com", "attachment_id": null, "is_private": false, "id": 163106, "time": "2012-11-01T08:04:32Z", "bug_id": 54084, "creation_time": "2012-11-01T08:04:32Z", "text": "The chinese chars are replaced with ? in the xlsx file:\n\n??????\u0916\u092b\u0906\u091b??????"}, {"count": 2, "tags": [], "bug_id": 54084, "attachment_id": null, "id": 163107, "time": "2012-11-01T09:00:18Z", "creator": "apache@gagravarr.org", "creation_time": "2012-11-01T09:00:18Z", "is_private": false, "text": "Could you please upload a unit test that shows the problem?\n\nAlso, are you sure that you're correctly getting the characters into Java without breaking the encoding, and are you sure that the font you're using can correctly render the characters?"}, {"count": 3, "tags": [], "creator": "l_alexandra2010@yahoo.com", "attachment_id": 29537, "is_private": false, "id": 163108, "time": "2012-11-01T09:21:24Z", "bug_id": 54084, "creation_time": "2012-11-01T09:21:24Z", "text": "Created attachment 29537\nthe 2 xlsx files\n\nHere are 2 xlsx files.\nThe first file(TestUnicode.xlsx) is used to load the data from it to the database.\n\nThe data is inserted corectly in database, and then is displayed corectly on the UI.\nThe same data we are trying to export to another xlsx file, but the chars are not encoded corectly. Both files have the same font(Calibri 11)."}, {"count": 4, "tags": [], "bug_id": 54084, "attachment_id": null, "id": 163109, "time": "2012-11-01T11:57:48Z", "creator": "yegor@dinom.ru", "creation_time": "2012-11-01T11:57:48Z", "is_private": false, "text": "I can't reproduce the problem with the latest build from trunk. Can you please upload a unit test that demonstrates the problem?\n\nI see that in the corrupted file unicode characters are garbled, but as of POI-3.9, we don't write raw unicode - every character above ASCII is written in the &#charCode; form which means that the problem is mostly certainly fixed in trunk. \n\nLinks to download nightly builds are on http://poi.apache.org/\n\nYegor\n\n(In reply to comment #3)\n> Created attachment 29537 [details]\n> the 2 xlsx files\n> \n> Here are 2 xlsx files.\n> The first file(TestUnicode.xlsx) is used to load the data from it to the\n> database.\n> \n> The data is inserted corectly in database, and then is displayed corectly on\n> the UI.\n> The same data we are trying to export to another xlsx file, but the chars\n> are not encoded corectly. Both files have the same font(Calibri 11)."}, {"count": 5, "tags": [], "bug_id": 54084, "attachment_id": null, "text": "I also found that surrogate pair characters (supplementary utf16) are not getting written correctly.\n\ne.g. If you have character \"\\uD835\\uDF4B\" - 4 byte surrogate pair encoding of unicode U+1D74B (big endian), which is \"mathematical italics bold phi\", it gets converted to ? when it's exported to excel.", "id": 167007, "time": "2013-05-03T09:42:39Z", "creator": "sumedh.inamdar@gmail.com", "creation_time": "2013-05-03T09:42:39Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 54084, "attachment_id": null, "text": "If you write that character in Excel, how does Excel encode it to the file? (Might be worth checking both the raw xml inside the .xlsx, and how POI sees it)", "id": 167008, "time": "2013-05-03T09:49:41Z", "creator": "apache@gagravarr.org", "creation_time": "2013-05-03T09:49:41Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 54084, "attachment_id": 30251, "text": "Created attachment 30251\nGreek alphabet beyond BMP\n\nPFA the UTF-16 (little endian) file with greek characters from beyond basic multilingual plane.", "id": 167009, "time": "2013-05-03T10:00:42Z", "creator": "sumedh.inamdar@gmail.com", "creation_time": "2013-05-03T10:00:42Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 54084, "attachment_id": 30252, "text": "Created attachment 30252\nGreek alphabet beyond BMP - Manually created xlsx\n\nPFA manually created excel for these characters. MS Excel correctly writes the values in shared string table. SXSSF writes ???? (inline) for them.", "id": 167010, "time": "2013-05-03T10:07:48Z", "creator": "sumedh.inamdar@gmail.com", "creation_time": "2013-05-03T10:07:48Z", "is_private": false}, {"count": 9, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 168161, "time": "2013-06-30T22:51:59Z", "bug_id": 54084, "creation_time": "2013-06-30T22:51:59Z", "is_private": false, "text": "I worked on reproducing the reported problems with greek characters. This seems to happen when loading shared strings from the XLSX file. The XML file is encoded correctly (UTF-8 codes e.g. from http://www.fileformat.info/info/unicode/char/1d74a/index.htm) and characters appear in OpenOffice and when opening the file in a text-editor.\n\nAlso initial loading of the Workbook using XSSF works, the cell contains the necessary data, however after writing out the data and reading back in, it does not match any more.\n\nAs far as I see, the shared-strings are read incorrectly and thus break the writing of the data back out.\n\nI could debug the code as far as xmlbeans handles the string where it seems to be fine, but as soon as the SstDocumentImpl takes over, it seems to become corrupted, however debugging there is not possible for me currently because the .class files are stripped... :(\n\nI have for now added a testcase to the special test-class TestUnfixedBugs.java called testBug54084Unicode() which verifies the problem, no fix available yet..."}, {"count": 10, "tags": [], "bug_id": 54084, "attachment_id": null, "text": "What is the status of this defect? Is somebody still working to fix this defect?", "id": 177807, "time": "2014-09-12T12:10:34Z", "creator": "stanescuflorentina@gmail.com", "creation_time": "2014-09-12T12:10:34Z", "is_private": false}, {"count": 11, "tags": [], "creator": "yaniv@kundas.net", "attachment_id": null, "id": 177860, "time": "2014-09-14T15:35:28Z", "bug_id": 54084, "creation_time": "2014-09-14T15:35:28Z", "is_private": false, "text": "I've tried to debug it using POI's TestUnfixedBugs, but the loss is happening deep inside XMLBeans.\nProbably due to https://issues.apache.org/jira/browse/XMLBEANS-332"}, {"count": 12, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "is_private": false, "id": 182023, "time": "2015-03-23T21:05:58Z", "bug_id": 54084, "creation_time": "2015-03-23T21:05:58Z", "text": "The testcase shows that it is not related to SXSSF, it also happens for plain XSSF."}, {"count": 13, "tags": [], "bug_id": 54084, "attachment_id": null, "text": "*** Bug 61029 has been marked as a duplicate of this bug. ***", "id": 198918, "time": "2017-05-27T21:00:03Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-05-27T21:00:03Z", "is_private": false}, {"count": 14, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 201051, "time": "2017-09-21T16:13:24Z", "bug_id": 54084, "creation_time": "2017-09-21T16:13:24Z", "is_private": false, "text": "I have verified that using the newer version of XMLBeans that is discussed in Bug 59268 also fixes this issue, so this is a duplicate of that bug.\n\n*** This bug has been marked as a duplicate of bug 59268 ***"}]
[{"count": 0, "tags": [], "bug_id": 29374, "attachment_id": null, "text": "Hi,\n\nI was wondering whether there is currently any support for validing the ant \nbuild script, by this I mean some sort of XML Schema support so that when the \nant build script is parsed all errors can be reported and fixed prior to any \ntask being executed.\n\nRegards,\nScott", "id": 58657, "time": "2004-06-03T19:00:39Z", "creator": "scotta_coleman@hotmail.com", "creation_time": "2004-06-03T19:00:39Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 29374, "is_private": false, "id": 60261, "time": "2004-07-07T20:17:17Z", "creator": "jay@drummondsoftware.com", "creation_time": "2004-07-07T20:17:17Z", "tags": [], "text": "Try editing with jedit. www.jedit.org\n\nGo to Plugins - Plugin Manager\n\nAdd at least these plugins.\nXML\nXML Indenter\nXSLT\nErrorList\n\nSet ErrorList up to automatically show errors on save. Utilities->Global \nOptions->Plugins->ErrorList-> check automatically display on error. You can \nalso have the ErrorList window dock (I dock left set by Utilities->Global \nOptions->JEdit->Docking->ErrorList->Left) so it doesn't get in the way.\n\nThis catches many of the errors that have to do with XML syntax of the \ndocument, like missing closing tags, missing quotes on attributes, etc...\n\nThere are also some ANT specific plugins, but I find that the XML stuff finds a \nlot of errors. \n\nI use jedit 4.1 which is the stable version.\n\n\n"}, {"count": 2, "tags": [], "text": "Created attachment 16826\nPartial Ant 1.6.5 schema\n\nThe attached XML schema is a partial Ant validation schema.  As it stands now,\nand  especially when it becomes complete, can work quite well for Ant build\nfile validation, and retained desired flexibility either by:\n\n* Writing extending schemas which include new tasks and macros defined through\ntaskdef and macrodef, or...\n\n* \"element\" elements in macrodefs (for instance) support defining elements that\ncan be assigned to different namespaces.  You can see within this partial\nschema that I have littered it with many \"any\" elements which validate against\n##other namespaces.  This is the only way to encode flexibility in a schema\nwithout becoming ambiguosly non-unique (try changing the ##others to ##any and\nyou'll see what I mean).  I would really, really like this feature.\n\nExample of a macrodef with an element from another namespace (assume the mchx\nnamespace was defined on the project element to be some namespace,\nhttp://www.foo.com/ant):\n\n\t\n<target name=\"-init-macrodef-java\" depends=\"-init\">\n\t<macrodef name=\"java\" uri=\"http://www.marchex.com/ant\">\n\t\t<attribute name=\"classname\" default=\"${main.class}\"/>\n\t\t<element name=\"mchx:customize\" optional=\"true\"/>\n\t\t<sequential>\n\t\t\t<java fork=\"true\" classname=\"@{classname}\">\n\t\t\t\t<jvmarg line=\"${runmain.jvmargs}\"/>\n\t\t\t\t<classpath>\n\t\t\t\t\t<path\npath=\"${build.classes.dir.real}:${javac.classpath}:${j2ee.platform.classpath}\"/>\n\n\t\t\t\t</classpath>\n\t\t\t\t<syspropertyset>\n\t\t\t\t\t<propertyref prefix=\"run-sys-prop.\"/>\n\t\t\t\t\t<mapper type=\"glob\"\nfrom=\"run-sys-prop.*\" to=\"*\"/>\n\t\t\t\t</syspropertyset>\n\t\t\t\t<mchx:customize/>\n\t\t\t</java>\n\t\t</sequential>\n\t</macrodef>\n</target>", "is_private": false, "id": 81881, "creator": "nicole@tedesco.name", "time": "2005-10-28T05:58:42Z", "bug_id": 29374, "creation_time": "2005-10-28T05:58:42Z", "attachment_id": 16826}, {"count": 3, "tags": [], "text": "BTW, while the schema is legal and the build fragment in the previous comment\npasses validation, Ant 1.6.5 rejects it with a \" Illegal name [mchx:customize]\nfor attribute\" error and fails the build.", "is_private": false, "id": 81882, "creator": "nicole@tedesco.name", "time": "2005-10-28T06:00:36Z", "bug_id": 29374, "creation_time": "2005-10-28T06:00:36Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "First, I personally think XSD is evil, and that is speaking as someone who works\nin standards bodies for whom XSD and WSDL are the core outputs.\n\nputting that aside, ant also abuses xml namespaces to make namespace'd\nmacros/tasks/presets easier to use. When you have a task in a namespace, ant\nwill accept child elements that are either in the same namespace, or the default\nnamespace: we match on the name, not the qname. \nA generated schema would have to take this into account by offering a choice of\nchild elements in both namespaces.", "attachment_id": null, "bug_id": 29374, "id": 81886, "time": "2005-10-28T11:38:01Z", "creator": "stevel@apache.org", "creation_time": "2005-10-28T11:38:01Z", "is_private": false}]
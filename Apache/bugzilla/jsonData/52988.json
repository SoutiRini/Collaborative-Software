[{"count": 0, "tags": [], "creator": "christiwald@gmail.com", "attachment_id": null, "text": "Overview:\nWhen Tomcat fails to expand a WAR file, it attempts to clean up after itself by running deleteDir(docBase). This function contains a problematic if-condition that allows Tomcat to traverse symlinked directories and recursively delete files behind them, even if those files are outside 'docBase'.\n\nSteps to Reproduce:\n1) Explode a WAR successfully into webapps/. \n2) Add a symlink in that WAR's docbase to a directory outside of webapps/. As far as I can tell, it can be anywhere on the machine (ours traversed a mount, for example).\n3) Redeploy a WAR, but make it fail somehow (I witnessed it while deploying a corrupted zip archive), thus activating these lines of ExpandWar.java:\n\n158             if (!success) {\n159                 // If something went wrong, delete expanded dir to keep things.\n160                 // clean\n161                 deleteDir(docBase);\n162             }\n\nActual Results:\ndeleteDir() traversed the directory symlinks in 'docBase', allowing Tomcat to incorrectly delete files outside of docBase. It appears the problem is line 374 of ExpandWar.java. Despite internet sources claiming otherwise, I was able to verify the isDirectory() method returns 'true' for symlinked directories using my version, build, and platform:\n\n366     public static boolean deleteDir(File dir, boolean logFailure) {\n367 \n368         String files[] = dir.list();\n369         if (files == null) {\n370             files = new String[0];\n371         }\n372         for (int i = 0; i < files.length; i++) {\n373             File file = new File(dir, files[i]);\n374             if (file.isDirectory()) {\n375                 deleteDir(file, logFailure);\n376             } else {\n377                 file.delete();\n378             }\n \nExpected Results:\nExpandWar.java should delete symlinks without following them. One could either check the absolute vs. canonical path, or use something like the isSymlink() method already present in Apache Commons: http://stackoverflow.com/a/813730/877115\n\nBuild Date and Platform:\nSun java 1.6.0_20 running on RHEL 6.1. First discovered in 7.0.16, but I checked trunk and the troubled logic is unchanged there.\n\nAdditional information:\nWe used symlinks to link client assets inside docBase for legacy code purposes. We've refactored this code out after encountering this bug, as maintaining symlinks inside exploded WARs is difficult, a bad practice, and this bug makes them a time bomb. All the same, I can't imagine any conditions under which Tomcat's WAR logic should be able to delete files outside of 'docBase', even if the user was foolish like me. Hence this filing.", "id": 155290, "time": "2012-03-26T16:41:43Z", "bug_id": 52988, "creation_time": "2012-03-26T16:41:43Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52988, "text": "Follow up on the users list for the right way to do this.\n\n*** This bug has been marked as a duplicate of bug 39226 ***", "id": 155291, "time": "2012-03-26T18:04:54Z", "creator": "markt@apache.org", "creation_time": "2012-03-26T18:04:54Z", "is_private": false, "attachment_id": null}]
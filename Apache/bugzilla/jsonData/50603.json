[{"count": 0, "tags": [], "text": "Created attachment 26498\ntrace of the problem\n\nHi,\n\nIn my belief their is a bug in the way Apache is counting the KeepAliveTimeout. \n\nThe problems is that Apache starts to count the KeepAliveTimeout when it starts to send data (package 28) instead of when the transfer is finished. In this case the session is taken down in package 53. Please see the attachement.\n\nThis causes unnecessary retransmitts and establishing of new sessions if you are not aware about this.\n\nAnd yes, this behaviour is in apache 2.2.17.\n\nBest regards,\n\nPeter", "attachment_id": 26498, "bug_id": 50603, "id": 143412, "time": "2011-01-17T09:43:36Z", "creator": "peter.hans.nilsson@volvo.com", "creation_time": "2011-01-17T09:43:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 50603, "attachment_id": 26621, "id": 144037, "time": "2011-02-08T04:46:01Z", "creator": "peter.hans.nilsson@volvo.com", "creation_time": "2011-02-08T04:46:01Z", "is_private": false, "text": "Created attachment 26621\ntrace2 of the problem\n\nAdding another example of the same behaviour.\n\nApache starts to count at package 8 and ends the sessions at package 56.\n\n/Peter"}, {"count": 2, "tags": [], "bug_id": 50603, "attachment_id": null, "is_private": false, "id": 147957, "time": "2011-07-17T14:19:29Z", "creator": "sf@sfritsch.de", "creation_time": "2011-07-17T14:19:29Z", "text": "httpd will start counting the keepalive timeout once it has delivered all data to the OS. If you have a slow connection, it is possible that the delivery of the data to the client will take some time. There is nothing to be fixed in httpd.\n\nYou should either increase the keepalive timeout or tune the socket buffer size (SendBufferSize in httpd, or /proc/sys/net/* under Linux)."}, {"count": 3, "tags": [], "text": "It sounds a little strange that Apache starts to count when it has delivered the data to the OS. Is this an RFC compliant behaviour? In my world it would be more reasonable if it starts to count when the data really has been transfered by the NIC. Counting as soon as the data is delivered to the OS makes the value of KeepAliveTimeout to vary a lot from request to request for the end user. \n\n/Peter", "attachment_id": null, "id": 148303, "creator": "peter.hans.nilsson@volvo.com", "time": "2011-08-01T07:45:06Z", "bug_id": 50603, "creation_time": "2011-08-01T07:45:06Z", "is_private": false}, {"count": 4, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "id": 148306, "time": "2011-08-01T11:45:42Z", "bug_id": 50603, "creation_time": "2011-08-01T11:45:42Z", "is_private": false, "text": "As Stefan described, You'll have to accommodate for your slow/high latency clients by using a larger KeepAliveTimeout or try to get httpd to block instead of queuing up much data by tuning the TCP stack.  In both cases, it looks like buffering cost you close to half of your low KeepAliveTimeout."}, {"count": 5, "tags": [], "text": "Yes, the KeepAliveTimeout is maybe a little to low and we are planning to change that to 15, but it wont fix the problem entirely since apache starts to count before the transfer is finished! It doesn't matter if it is a high or low speed connection, if you download a file large enough the KeepAliveTimeout will expire. You don't want to set a unnessasary high KeepAliveTimeout since that will require a higher MaxClient value with will take additional resourses from the system.\n\nRegarding buffering I have hard to see how I can tune the already tuned IP-stack further.\n\n/Peter", "is_private": false, "id": 148307, "creator": "peter.hans.nilsson@volvo.com", "time": "2011-08-01T12:02:40Z", "bug_id": 50603, "creation_time": "2011-08-01T12:02:40Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 50603, "attachment_id": null, "is_private": false, "id": 148308, "time": "2011-08-01T12:14:01Z", "creator": "covener@gmail.com", "creation_time": "2011-08-01T12:14:01Z", "text": "I think you're confusing when Apache begins counting -- it's when the last buffer has been queued up the OS, not the first. Your responses have been small, so this has not been apparent.\n\nAlso, a large response would likely begin to block on the way, so my belief is that your loss of a 2-3 seconds out of 5 would not really get much worse in a practical way."}, {"count": 7, "tags": [], "text": "I'm not confused when apache is starting to count.\n\nI looked up the RFC for HTTP 1.1 and found the following:\nhttp://tools.ietf.org/html/rfc2616#section-8.1\n\n8.1.4 Practical Considerations\n\n Servers SHOULD NOT close a connection in the\n   middle of transmitting a response, unless a network or client failure\n   is suspected.\n\n8.2.1 Persistent Connections and Flow Control\n\n   HTTP/1.1 servers SHOULD maintain persistent connections and use TCP's\n   flow control mechanisms to resolve temporary overloads, rather than\n   terminating connections with the expectation that clients will retry.\n   The latter technique can exacerbate network congestion.\n\nAs I read the text apache is not following the RFC and closes the connection in the middle of a transmition of a response.\n\n/Peter", "attachment_id": null, "id": 148309, "creation_time": "2011-08-01T12:55:39Z", "time": "2011-08-01T12:55:39Z", "creator": "peter.hans.nilsson@volvo.com", "bug_id": 50603, "is_private": false}, {"count": 8, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 148310, "time": "2011-08-01T13:10:19Z", "bug_id": 50603, "creation_time": "2011-08-01T13:10:19Z", "text": "The server is not closing the connection in the middle of a response.  Emphasis on \"middle\" and  \"response\"."}, {"count": 9, "attachment_id": null, "creator": "peter.hans.nilsson@volvo.com", "is_private": false, "id": 148311, "time": "2011-08-01T13:37:09Z", "bug_id": 50603, "creation_time": "2011-08-01T13:37:09Z", "tags": [], "text": "If you take a look at the first trace of this error I have attached to this bug report you see that a transfer starts at package 28 and the servers is closing the connection at package 53, in the \"middle\" of a transfer."}, {"count": 10, "tags": [], "bug_id": 50603, "attachment_id": null, "id": 148313, "time": "2011-08-01T13:53:06Z", "creator": "covener@gmail.com", "creation_time": "2011-08-01T13:53:06Z", "is_private": false, "text": "(In reply to comment #9)\n> If you take a look at the first trace of this error I have attached to this bug\n> report you see that a transfer starts at package 28 and the servers is closing\n> the connection at package 53, in the \"middle\" of a transfer.\n\nI disagree.\n\nI interpret the trace as showing a response that begins in #28 and is fully transmitted and acknowledged by packet #45.  Packet #46 is a new request that hasn't been ackowledged at all by the server at the time the FIN arrives at the system running the trace [presumably the client].\n\nThis is not in the middle of a response."}, {"count": 11, "tags": [], "bug_id": 50603, "attachment_id": null, "is_private": false, "id": 148314, "time": "2011-08-01T14:11:25Z", "creator": "peter.hans.nilsson@volvo.com", "creation_time": "2011-08-01T14:11:25Z", "text": "Ok, I see your point regarding the trace.\n\nBut with this implementation of the Keep-Alive in apache in mind is their not a potential risk/problem to close a connection in the middle of transmitting a response?"}, {"count": 12, "tags": [], "text": "(In reply to comment #11)\n> Ok, I see your point regarding the trace.\n> \n> But with this implementation of the Keep-Alive in apache in mind is their not a\n> potential risk/problem to close a connection in the middle of transmitting a\n> response?\n\nEven with latency, delay between requests, and a small KeepAliveTimeout the closure is queued up behind the response, so I don't think there is a concern there.", "is_private": false, "id": 148317, "creator": "covener@gmail.com", "time": "2011-08-01T15:04:13Z", "bug_id": 50603, "creation_time": "2011-08-01T15:04:13Z", "attachment_id": null}]
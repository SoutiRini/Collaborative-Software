[{"count": 0, "tags": [], "creator": "Martin.vGagern@gmx.net", "is_private": false, "id": 127929, "attachment_id": null, "bug_id": 47365, "creation_time": "2009-06-12T22:38:18Z", "time": "2009-06-12T22:38:18Z", "text": "Command line arguments for many applications consist of an option, which is a fixed string, immediately followed by a file name or path, which should follow platform conventions.\n\nExamples:\n'-I/my/include/dir' for gcc\n'--exclude-from=/path/to/excl.lst' for rsync\n'--filter=.- /path/to/excl.lst' for rsync is still a single option\n\nIt is tedious to formulate this kind of command line arguments for e.g. exec, as one has to use pathconvert together with properties in order to ensure proper syntax for the file name and still include the prefix.\n\nI suggest the introduction of an attribute called prefix for the <arg> nested element, i.e. for the Commandline.Argument class. I guess there should also be a postfix attribute for consistency, though I believe it would be used much less often than the prefix. The above arguments could then be written as\n<arg prefix=\"-I\" file=\"include/dir\"/>\n<arg prefix=\"--exclude-from\" file=\"excl.lst\"/>\n<arg prefix=\"--filter=.- \" file=\"excl.lst\"/>\n\nI would suggest the prefix to be placed in front of every part of an argument, if it is specified using the line parameter and thus broken into parts. This might be useful e.g. to turn line=\"EL r\" into the arguments '-Wl,EL' '-Wl,r' for gcc, while some other prefix would be appropriate for a different compiler.\n<arg prefix=\"${linker.option.prefix}\" line=\"${linker.options.list}\"/>\n\nI will write a patch and attach it here shortly."}, {"count": 1, "text": "Created attachment 23808\nImplement and document prefix and suffix attributes\n\nIf my English is correct, one attribute should be called \"suffix\", not \"postfix\" as I originally proposed.", "bug_id": 47365, "attachment_id": 23808, "id": 127930, "time": "2009-06-12T23:18:19Z", "creator": "Martin.vGagern@gmx.net", "creation_time": "2009-06-12T23:18:19Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "ddevienne@gmail.com", "is_private": false, "id": 127935, "attachment_id": null, "bug_id": 47365, "creation_time": "2009-06-13T06:42:09Z", "time": "2009-06-13T06:42:09Z", "text": "In your example, you sometimes omit the =, and sometimes not, to yield a single =, so I suspect you meant to write suffix=\"--exclude-from=\", no?\n\nRegarding prefix=\"--filter=.- \", note that by default the space is preserved, because there's no Ant official DTD, but if somehow one does run with a DTD, and the attribute is not of declared type CDATA, then white-space normalization from http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize would remove the trailing space. Note of general concern, but I'm mentioning it nonetheless.\n\nOtherwise I like this feature. I've wished for it myself in the past, without actually implementing it (partly because I used Ant-Contrib's CppTask). --DD"}, {"count": 3, "text": "(In reply to comment #2)\n> In your example, you sometimes omit the =, and sometimes not, to yield a single\n> =, so I suspect you meant to write suffix=\"--exclude-from=\", no?\n\nYou are right, that was my intention. Thanks for noticing.\n\n> Regarding prefix=\"--filter=.- \", note that by default the space is preserved,\n> because there's no Ant official DTD, but if somehow one does run with a DTD,\n> and the attribute is not of declared type CDATA, then white-space normalization\n> [...] would remove the trailing space.\n\nSounds like a rather obscure scenario. The only non-CDATA type I can fathom would make any sense in this respect would be an Enumeration, in which case all valid values must be Nmtokens in any case, so it cannot possibly end in a space.\n\n> Otherwise I like this feature. I've wished for it myself in the past, without\n> actually implementing it (partly because I used Ant-Contrib's CppTask). --DD\n\nHappy to hear that. Let's hope this makes it into ant soon. Care to vote? :-D", "bug_id": 47365, "attachment_id": null, "id": 127936, "time": "2009-06-13T07:43:44Z", "creator": "Martin.vGagern@gmx.net", "creation_time": "2009-06-13T07:43:44Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "text": "slightly modified patch included in svn revision 788677\n\nI've added two trivial tests but more tests would (as always) be welcome.\n\nThanks!", "id": 128314, "attachment_id": null, "bug_id": 47365, "creation_time": "2009-06-26T05:42:06Z", "time": "2009-06-26T05:42:06Z", "is_private": false}, {"count": 5, "tags": [], "creator": "Martin.vGagern@gmx.net", "attachment_id": 23924, "is_private": false, "id": 128516, "time": "2009-07-05T07:49:06Z", "bug_id": 47365, "creation_time": "2009-07-05T07:49:06Z", "text": "Created attachment 23924\ntestPrefixSuffixLine testcase\n\n(In reply to comment #4)\n> slightly modified patch included in svn revision 788677\n\nThanks, both for comitting it as well as for fixing my documentation errors.\n\n> I've added two trivial tests but more tests would (as always) be welcome.\n\nHere is one more, using setLine to test the behaviour in the presence of multiple arguments. It also tests for space in the prefix, ensuring that arguments don't get broken again. I assume this case should ward against the most likely future regression. Haven't run the tests locally yet."}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "committed as svn revision 791400\n\nThanks", "id": 128540, "time": "2009-07-06T00:51:10Z", "bug_id": 47365, "creation_time": "2009-07-06T00:51:10Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 23273, "text": "Consider the following ANT task :\n\n        <java classname=\"MyClass\" failonerror=\"true\" fork=\"true\">\n            <arg value=\"Some text\\\\\"/>\n            <arg value=\"Second argument\" />\n        </java>\n \nWhich is used to invoke the following Java class :\n\n    public final class MyClass\n    {\n        public static void main( String[] args )\n        {\n            int loop = -1;\n            while ( ++loop != args.length )\n            {\n                System.out.println ( loop + \")\\t\" + args[ loop ] );\n            }\n        }\n    }\n \n \n \nThe expected output would be:\n \n     [java] 0)  Some text\\\\\n     [java] 1)  Second argument\n \n \nWhat actually happens is\n \n     [java] 0)  Some text\\\" Second\n     [java] 1)  argument\n \n  \n \nThe first argument has a trailing double back-slash character. This has been \nreplaced by a single back slash and a double quote character.\n\nANT has then broken the second argument into two parts, as separated by a space \ncharacter. The first part of this argument has been concatenated with the first \nargument! If there had been no space character in the second argument, then it \nwould have been completely concatenated with the first argument.", "id": 44351, "time": "2003-09-19T15:55:37Z", "creator": "r.rawlinson@emuse.ie", "creation_time": "2003-09-19T15:55:37Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "text": "Does ant -verbose geve any extra hint?\n\nThis is what I get on Linux using 1.5.4\n\nBuildfile: /tmp/java.xml\n\njava:\n0)\tSome text\\\\\n1)\tSecond argument\n\nBUILD SUCCESSFUL\nTotal time: 2 seconds\n", "id": 44456, "time": "2003-09-22T15:28:17Z", "bug_id": 23273, "creation_time": "2003-09-22T15:28:17Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 23273, "is_private": false, "id": 44459, "time": "2003-09-22T15:39:56Z", "creator": "r.rawlinson@emuse.ie", "creation_time": "2003-09-22T15:39:56Z", "tags": [], "text": "I couldn't say if this works under Linux - I'm using Winodes 2000.\n\nThe -verbose trace looks Ok (see below)\n\n     [java] Executing 'C:\\jre\\bin\\java.exe' with arguments:\n     [java] '-classpath'\n     [java] '-classpath'\n     [java] 'C:\\ant\\ant.jar;C:\\jre\\lib\\rt.jar;C:\\log4j\\log4j.jar\n     [java] 'myClass'\n     [java] 'Some text\\\\'\n     [java] 'Second argument'\n\nJava -version reports the following\n\njava version \"1.4.2\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.2-b28)\nJava HotSpot(TM) Client VM (build 1.4.2-b28, mixed mode)\n\n"}, {"count": 3, "tags": [], "creator": "peter.reilly@corvil.com", "text": "The problem is most likely in java's Exec code for Windows.\nThere has been a change between 1.4 and 1.4.2 in handling of \\ at\nthe end of a parameter. (java.lang.Win32Process).\n\nPlease test with 1.4.2\n", "id": 47766, "time": "2003-11-21T13:16:33Z", "bug_id": 23273, "creation_time": "2003-11-21T13:16:33Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "Opps that should be Please test with java 1.4.2\n", "is_private": false, "id": 47767, "creation_time": "2003-11-21T13:17:31Z", "time": "2003-11-21T13:17:31Z", "creator": "peter.reilly@corvil.com", "bug_id": 23273, "attachment_id": null}, {"count": 5, "tags": [], "creator": "r.rawlinson@emuse.ie", "attachment_id": null, "text": "Tested with java version 1.4.2. It fails as descibed above.\n\n:-(", "id": 47776, "time": "2003-11-21T14:05:22Z", "bug_id": 23273, "creation_time": "2003-11-21T14:05:22Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 23273, "text": "can confirm that it still fails with Ant 1.7.1 and JDK 6 Update 7 on Windows.", "id": 118454, "time": "2008-07-10T06:07:21Z", "creator": "bodewig@apache.org", "creation_time": "2008-07-10T06:07:21Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 23273, "text": "(In reply to comment #6)\n> can confirm that it still fails with Ant 1.7.1 and JDK 6 Update 7 on Windows.\n> \n\nThis seems to be a JVM issue as there are a lot of bug reports on bugs.sun.com related to using Runtime.exec() method in Windows and command line parsing.\n\nI wrote a simple program that uses Runtime.exec() and I got the same (bad) results as shown in the bug report so it's not ant-related (though it would be nice if ant had a work-around for this).\n\n====\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\tProcess p =  Runtime.getRuntime().exec(new String[] {\"java.exe\", \"MyClass\", \"a \\\\\", \"222\" }, null, null);\n\t\t//p.waitFor();\n\t\t\n\t\tBufferedReader in  = new BufferedReader(new InputStreamReader(p.getInputStream()));\n\n\t\tString s;\n\t\twhile((s = in.readLine()) != null) {\n\t\t\tSystem.out.println(s);\n\t\t}\n\t\t\n\t}\n====", "id": 123411, "time": "2008-12-19T02:23:35Z", "creator": "dumitru.postoronca@gmail.com", "creation_time": "2008-12-19T02:23:35Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "vincent.b.1@hotmail.fr", "text": "Please have look at the bug which I filed #54285 (please note that the description of the bug is entered with Jira markup, this is because I initially did a mistake and filed the bug on ivy jira).\n\nThe root problem is the way how MSWindows escapes double quotes: to escape a double quote you have to do this way:\n\nLet N be the number of backslash(es) preceding the double quote to be escaped (with N>=0), then replace the N backslash(es) by 2*N+1 backslash(es) and your double quote gets escaped.\n\nNow, the thing is that a group of N tailing backslahes, N>=1, is to be considered as followed by a double quote --- that double-quote that is part of the whole argument quoting --- so they must also be replaced by 2*N+1 backslashes.\n\nThe problem is that I could not find that this escaping technique is documented anywhere except in some discussion forum. Furthermore you can also quote one double quotes by replacing by 3 consecutive double quotes, and that works when there are no backslash --- so some people do that and everybody gets confused.\n\nNow the question is whether this is a problem of Ant, or a problem of the JVM. I would tend to think that this is not a problem of the JVM, and that you have to pass to the JVM a command line that is correctly formatted for the underlying platform --- just like in a GNU Makefile shell commands have to follow the shell syntax. This means that you need some class to do platform dependent command-line formatting --- this is what is missing in the standard JAVA libraries. Then this standard class could be deployed differently depending on the platform. So, in my opinion this is more an issue of standard JAVA library than of pure JVM implementation --- well one could also consider that the JVM comprises a set of standard libraries, but I think that this is not correct wording.\n\nI proposed some code to do the escaping for one argument. I think one has to see what is the intention on the JVM/Standard library side before to take any decision. Maybe they do something new that would solve the problem more easily. But then there should also be some way to keep Ant executable on older JVM deployments. So maybe the temporary solution is to do the platform escaping job by some Ant own code.\n\nAnyway, I suggest to mark this bug as duplicate with #54285", "id": 165187, "time": "2013-02-12T06:54:16Z", "bug_id": 23273, "creation_time": "2013-02-12T06:54:16Z", "is_private": false, "attachment_id": null}]
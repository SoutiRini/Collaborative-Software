[{"text": "Hello, I have I wish.\n\nlogger.debug(exception)\n\n(or logger.info(exception))\n\nbehaves as\n\nlogger.debug(exception.toString())\n\nbut should (I think) be equlivalent of\n\nlogger.debug(exception.getMessage(), exception)\n\nto get exception stack trace in logs. Because exceptions mostly logged to help\ndebugging, and in this case, stack trace can help.", "tags": [], "creator": "yozh@mx1.ru", "attachment_id": null, "count": 0, "id": 61469, "time": "2004-08-02T21:08:03Z", "bug_id": 30440, "creation_time": "2004-08-02T21:08:03Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "yoavs@computer.org", "text": "No: people expect high performance from the basic logging methods.  Additional \nmethods, such as those with an exception parameter, do more at the cost of \nperformance.  Use them as you need.  Changing this as you proposed would break \nthat contract that log4j has upheld for years.", "count": 1, "id": 68396, "time": "2004-12-13T17:51:27Z", "bug_id": 30440, "creation_time": "2004-12-13T17:51:27Z", "is_private": false}, {"count": 2, "tags": [], "text": "If user need high performance, he should write\n\nlogger.info(exception.toString())\n\n. From the other side, logger often needed to debug. It's easy just to write\nlogger.warn(exception), then build strange construction\n\nlogger.warn(exception, exception)\n\nor\n\nlogger.warn(exception.toString(), exception)\n\nOn the other hand I can write a wrapper to Logger that does what I want...", "attachment_id": null, "id": 68463, "creator": "yozh@mx1.ru", "time": "2004-12-14T07:33:20Z", "bug_id": 30440, "creation_time": "2004-12-14T07:33:20Z", "is_private": false}]
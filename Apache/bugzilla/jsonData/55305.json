[{"count": 0, "tags": [], "bug_id": 55305, "attachment_id": 30624, "text": "Created attachment 30624\nmoves the content  type code up several lines.\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=19721\n\nI am experimenting with an xslt processing instruction filter which is hampered by this problem. Hence my involvement as a stakeholder.\n\nI think the arguments given for wont fix by Remey in 2003 were and are no longer valid (and in logical fact contradictory) He says the example is not supposed to actually work, is not affected by this as a bug and then correctly suggests that the convoluted workaround is invalid (which it actually is). \n\nThe fix is to move the content type code up a few lines in the DefaultServlet.\n\nFrom a fast gap analysis, there is very low impact on this fix. \n\nI think the correct behaviour is typically the expected behaviour, which in this case is for the ServletRequest to have a content type \"associated\" with it (by the container) before the filter chain is invoked. \n\nWithout this fix it would imply that the workaround for any filter which is only to process a given mime type would need to check the magic in the stream and exclude for every request NOT required for processing. This is indeed incorrect as Remey pointed out because checking the stream is non deterministic as it can and will induce blocking and lead to a conflagration of pain and suffering.", "id": 168768, "time": "2013-07-24T19:31:48Z", "creator": "warren.crossing@mofokom.biz", "creation_time": "2013-07-24T19:31:48Z", "is_private": false}, {"count": 1, "text": "I would also happily contribute this filter as an example on how to use apache xalan to compile/cache xslt (Translets) and apply the templates to xml content that has a xslt processing instruction in the FilterChain.   I.e xsltxforms etc.\n\nhttp://www.mofokom.biz/artifactory/snapshots-public/mofokom/templates-filter/1.0-SNAPSHOT/templates-filter-1.0-SNAPSHOT-sources.jar\n\nThis could be the start of something beautiful. Your thoughts??", "creator": "warren.crossing@mofokom.biz", "is_private": false, "id": 168771, "time": "2013-07-24T19:48:03Z", "bug_id": 55305, "creation_time": "2013-07-24T19:48:03Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 55305, "attachment_id": null, "id": 168787, "time": "2013-07-25T17:57:39Z", "creator": "markt@apache.org", "creation_time": "2013-07-25T17:57:39Z", "is_private": false, "text": "Remy's points look perfectly valid, logical and non-contradictory to me:\n\n1. There is nothing in the specification that requires the content type to be set before the output stream is obtained.\n\n2. The point where the content type is fixed is when the response is committed. (Note: different rules apply to character encoding which can be set via the same method.)\n\n3. A filter that wishes to take different actions depending on the content type can't reliably make that decision until the point where the reponse is committed.\n\n4. The compression filter from the examples does not robustly handle all cases. Once such case is point 3 above.\n\n\nTo address some of the points the in the description:\n- There is no need to do magic byte checking. Simply buffering the output until the reponse is committed is sufficient.\n- The correct behaviour is whatever the specification says it is. The DefaultServlet is specification compliant and therefore behaving correctly.\n- The content type of the ServletRequest is not going to help in this case. You want the ServletResponse.\n\nRegarding having an XLST filter in the Tomcat distribution, my preference is not include it unless there is a demonstrable demand for it (and from memory I don't recall anything like this being requested previously). I think I link to the code from the wiki is the way to go at this point. If demand changes then that can always be revisited.\n\nGetting to the requested change, the Default Servlet is free to set the content type whenever it likes. Therefore, in principle, there is no reason why this patch could not be applied. Obviously I want to look at the Default Servlet code before making a final decision. That is next on my TODO list."}, {"count": 3, "tags": [], "bug_id": 55305, "attachment_id": null, "is_private": false, "id": 168788, "time": "2013-07-25T18:53:18Z", "creator": "markt@apache.org", "creation_time": "2013-07-25T18:53:18Z", "text": "The supplied patch has a bug - it fails to always set the content type for HEAD requests.\n\nAfter reviewing the code, I do have concerns with moving the setting of the content type. The content type needs to be set to different values for range requests and I'd rather see it set once correctly rather than multiple times and be overwritten.\n\nThere is, however, a simple solution to the particualr problem that triggered this report. The filter can use the same mechanism as the default servlet (ServletContext.getMimeType()) to determine the mime type if the content type is not set. That is not fool-proof but it is no worse than the change that was proposed to the default servlet and it remains within the filter's control."}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 168789, "time": "2013-07-25T19:25:15Z", "bug_id": 55305, "creation_time": "2013-07-25T19:25:15Z", "is_private": false, "text": "(In reply to wozza.xing from comment #1)\n> I would also happily contribute this filter as an example on how to use\n> apache xalan to compile/cache xslt (Translets) and apply the templates to\n> xml content that has a xslt processing instruction in the FilterChain.\n\nDoes this do anything that Apache Cocoon does not already do?"}, {"count": 5, "tags": [], "text": "Created attachment 30635\nsets the content type in only one place as soon as possible", "attachment_id": 30635, "id": 168832, "creator": "warren.crossing@mofokom.biz", "time": "2013-07-26T22:09:20Z", "bug_id": 55305, "creation_time": "2013-07-26T22:09:20Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 55305, "attachment_id": null, "id": 168833, "time": "2013-07-27T01:44:13Z", "creator": "warren.crossing@mofokom.biz", "creation_time": "2013-07-27T01:44:13Z", "is_private": false, "text": "You are correct, according to the spec a servlet programmer must set the content type so she can do it in any order, even multiple times before commiting the response.  So we are really talking about Servlet design of the DefaultServlet and his responsibilites to FilterChain invoker. Not spec compliance.\n\nFrom that perspective I reckon ContentType setting is programatically deterministic since the ContentType won't change throughout multiple calls to serveResource, even when requesting multiple ranges and zero length files. In fact AFIK the DefaultServlet can set the responses' ContentType as soon as the RANGE header has been parsed.  Which is before serving content to the outputstream.  \n\nI have revised my patch which just sets it in one place, unless there is a case where the DefaultServlet would not set the responses ContentType at all even if known or where it could set it multiple times.  \n\nAs per your suggestion, I have update my filter to check the mime type when running on affected tomcats and other war servers.\n\nCocoons XSLTProcessor is a basic trax component that has a dependency on the use of the entire cocoon framework, must be configured using cocoon and used only by programmers selecting the framework. \n\nThe Stylesheet Filter uses advanced performance enhanced features of Apache Tomcat & Xalan (compiled translets) complies with W3C Recommendation 28 October 2010 Associating Style Sheets with XML documents 1.0 (Second Edition) and allows authors access to content templating within the bounds of the specifications of XML and JavaTM Servlet, so without being an expert Java Servlet programmer.\n\nI think I could even extend it to support 2.7 Embedding Stylesheets (XSL Transformations (XSLT)\nVersion 1.0 W3C Recommendation)\n\nThe servlet spec even mentions a XSLT processor as a Filter.\n\nsection 6.1.1\nExamples of Filtering Components\nXSL/T filters that transform XML content\nMIME-type chain filters\n\nI would be verry happy for you to put a link in the wiki. If it gains any traction with the developer community then it can be incorporated into the tomcat core."}, {"count": 7, "tags": [], "text": "templates-filter is hosted here, please link/inspect at your leasure.\n\nhttp://www.mofokom.eu/maven/snapshots-public/mofokom/templates-filter/1.0-SNAPSHOT/", "is_private": false, "id": 168834, "creator": "warren.crossing@mofokom.biz", "time": "2013-07-27T01:52:02Z", "bug_id": 55305, "creation_time": "2013-07-27T01:52:02Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 55305, "attachment_id": null, "id": 169163, "time": "2013-08-06T05:43:50Z", "creator": "warren.crossing@mofokom.biz", "creation_time": "2013-08-06T05:43:50Z", "is_private": false, "text": "(In reply to Christopher Schultz from comment #4)\n> (In reply to wozza.xing from comment #1)\n> > I would also happily contribute this filter as an example on how to use\n> > apache xalan to compile/cache xslt (Translets) and apply the templates to\n> > xml content that has a xslt processing instruction in the FilterChain.\n> \n> Does this do anything that Apache Cocoon does not already do?\n\n\nYes, and I think there IS real demand for this directly in the app server.  For standards based templating for quasi-programmer/page authors using JSP and tomcat.\n\nResin supports XSLT filters for JSP page authors and maybe Tomcat should to.\n\nhttp://www.caucho.com/resin-3.1/doc/xslt-filter.xtp\n\nCacoon & Carrot2 & spring also support XSLT in a basic way and depends on the author understanding that framework and probably programming. \n\nOrelly even gets into how to build one.\n\nhttp://docstore.mik.ua/orelly/xml/jxslt/ch08_04.htm\n\nanother excerpt from \n\nhttp://www.cs.put.poznan.pl/dweiss/xml/projects/xslt-filter/index.xml?lang=en\n\nI needed an XSLT filter for a long time. These few solutions you can find on the Web are usually very simple \u2014 buffering of the servlet's output and preprocessing with a given XSLT stylesheet. My goal was to create something more advanced \u2014 a production-quality XSLT filter which could preprocess XML files with various xml-stylesheet directives, output methods and encodings, take into consideration processing errors and such. This is the result.\n\nBut this discussion needs to move out of this bug."}]
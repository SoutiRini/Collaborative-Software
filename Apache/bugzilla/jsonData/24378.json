[{"count": 0, "tags": [], "text": "The sample code on the FOP web site for embedding uses in a number of places \nconstructs like\n\nDriver driver = new Driver(new InputSource(args[0]),\n                           new FileOutputStream(args[1]));\n\nor\n\ndriver.setOutputStream(new FileOutputStream(args[1]));\n\nUsing \"new ...Stream(...)\" as a constructor or function argument is dangerous \nas the stream doesn't get closed until the object is garbage collected. This \ncan lead to \"out of file handle\" conditions.\n\nI learned this the hard way with a (supposedly) perfectly working server \napplication which had fop embedded. The app ran happily for over two years. \nThen a hardware upgrade came along and the system admin changed the Java VM \nsettings to give it more memory as the new machine had lots of it. Suddenly the \nsystem was running out of file handles because the Java VM did less garbage \ncollection which in turn kept all those implicitly constructed streams open.\n\nThe sample code should probably be looking more like\n\nFileOutputStream fos = new FileOutputStream(args[1]);\nDriver driver = new Driver(new InputSource(args[0]), fos);\nfos.close();\n\nor to make sure the file is always closed like:\n\nFileOutputStream fos = null;\ntry {\n    fos = new FileOutputStream(args[1]);\n    Driver driver = new Driver(new InputSource(args[0]), fos);\n    fos.close();\n} finally {\n    if (fos != null) {\n        try {\n            fos.close();\n        } catch (IOException ioe) {}\n    }\n}\n\nwhich is probably an overkill for the sake of the example.", "is_private": false, "bug_id": 24378, "id": 46736, "time": "2003-11-04T09:11:22Z", "creator": "mm@arcus.com.au", "creation_time": "2003-11-04T09:11:22Z", "attachment_id": null}]
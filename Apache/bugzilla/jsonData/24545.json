[{"count": 0, "attachment_id": null, "creator": "kylev@yaga.com", "text": "When defining a Realm withing a Context (in an xml fragment in the webapps\ndirectory), I can only seem to use a JNDI DataSource defined in the\nGlobalNamingResources section of server.xml.\n\nIf a Resource and ResourceParams section are defined withing the Context where I\nuse the DataSourceRealm, JNDI lookups fail.  DataSourceRealm cannot find them.\n\nI believe this to be a defect in the way that DataSourceRealms.open() is\nwritten.  It uses ServerFactory.getServer() to get the Server object and it's\nglobal naming context.  It seems like there should be a way to get a more\n\"local\" JNDI naming context where the webapp-Context-defined Resource will be\nvisible.", "id": 47072, "time": "2003-11-10T01:27:57Z", "bug_id": 24545, "creation_time": "2003-11-10T01:27:57Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 24545, "is_private": false, "text": "Created attachment 9013\nExample context deployment fragment that should work, but doesn't.  Works if identical Resource is defined in server.xml", "id": 47073, "time": "2003-11-10T01:30:06Z", "creator": "kylev@yaga.com", "creation_time": "2003-11-10T01:30:06Z", "attachment_id": 9013}, {"count": 2, "attachment_id": 9015, "creator": "kylev@yaga.com", "text": "Created attachment 9015\nProposed patch to use an actual InitialContext to look up the JNDI DataSource", "id": 47082, "time": "2003-11-10T05:41:38Z", "bug_id": 24545, "creation_time": "2003-11-10T05:41:38Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "remm@apache.org", "text": "Sorry, but this is 100% normal. This will not be fixed.", "id": 47083, "time": "2003-11-10T05:42:21Z", "bug_id": 24545, "creation_time": "2003-11-10T05:42:21Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "kylev@yaga.com", "text": "IMHO, DataSourceRealm should use an InitialContext to look up its JNDI\nDataSource (see patch).  Current implementation jumps directly to the server's\nglobal naming context (via call to server.getGlobalNamingContext()).\n\nIf you still want to, you can use a globally defined DS via a ResourceLink element.", "id": 47084, "time": "2003-11-10T05:49:27Z", "bug_id": 24545, "creation_time": "2003-11-10T05:49:27Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 24545, "is_private": false, "id": 47085, "time": "2003-11-10T05:53:31Z", "creator": "remm@apache.org", "creation_time": "2003-11-10T05:53:31Z", "tags": [], "text": "No, the realm is a container component (which is usually not defined at the\ncontext level), and as such should only see container specific datasources."}, {"count": 6, "tags": [], "creator": "kylev@yaga.com", "attachment_id": null, "id": 47091, "time": "2003-11-10T07:17:36Z", "bug_id": 24545, "creation_time": "2003-11-10T07:17:36Z", "is_private": false, "text": "That's precisely the problem: DataSourceRealm does *not* see any Container\nDataSources: it only sees ones defined as global resources.\n\nIt seems logical that if I define a \"jdbc/UserDB\" DataSource in a Host, the\nRealm defined in that Host or any Container underneath it should see that\nJNDI-exposed resource.\n\nI think the assertion that a Realm isn't usually defined in a Context is\nerronious.  I do it.  And it's useful to define a Realm on a per-context basis,\nallowing you to run applications with wildly divergent authentication\nrequirements under a single Tomcat instance.  And allowing Realm under a Context\n(as Tomcat currently does) makes deployment of a turn-key application easier:\njust drop the Context XML fragment in the webapps directory and be done, no\nmeddling in the server.xml.  This sort of modularity is very desireable."}, {"count": 7, "attachment_id": null, "bug_id": 24545, "is_private": false, "id": 47096, "time": "2003-11-10T08:47:01Z", "creator": "kylev@yaga.com", "creation_time": "2003-11-10T08:47:01Z", "tags": [], "text": "Failing implementation of my suggestion, it'd be useful if the documentation\nmentioned that *only* DataSources defined globally are usable.  I futzed around\na long time before reading the source code and tracing the calls to discover this."}, {"count": 8, "attachment_id": null, "creator": "sfzhi@yahoo.com", "is_private": false, "id": 47115, "time": "2003-11-10T14:29:13Z", "bug_id": 24545, "creation_time": "2003-11-10T14:29:13Z", "tags": [], "text": "See also bug 16316 (http://nagoya.apache.org/bugzilla/show_bug.cgi?id=16316).\nRemy Maucherat continues to insist that this is not a bug. Remy, it seems that \nmany people disagree with that. Could you, please, mention a single reason WHY \nit should not be possible to define a realm on the context level.\nIn the bug 16316 discussions a reason was mentioned why it SHOULD be possible \n(because if the realm is used for only one context why should other contexts \nhave access to it). The only phrase that might be considered an argument \nagainst that was that the realm is a global scope entity. But why is that? It \nlooks like that statement is based on nothing more than someone's personal \nbelief.\nIn order to close this issue once and forever I suggest to modify \nDataSourceRealm to make it try to lookup both global and context level \nresources. That would allow people to stop arguing and use the way they prefer.\nThe modification is very simple and strait-forward. I can submit a patch if \nanyone is interested."}, {"count": 9, "tags": [], "creator": "remm@apache.org", "text": "And I will not give up. Sorry ;-)\nPlease do not reopen this report.", "id": 47116, "time": "2003-11-10T14:37:19Z", "bug_id": 24545, "creation_time": "2003-11-10T14:37:19Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "tamersalama@comcast.net", "text": "What if I can't control the gloabl-resources?? Third party hosting allows me \nto modify only the application Context. If the JDBCRealm, MemoryRealm work \nfrom within the context, why shouldn't the DataSourceRealm?", "id": 48233, "time": "2003-11-27T08:22:48Z", "bug_id": 24545, "creation_time": "2003-11-27T08:22:48Z", "is_private": false, "attachment_id": null}, {"count": 11, "attachment_id": null, "creator": "david.wahlund@home.se", "text": "I'm trying to run a server with multiple instances of the same application \nconfigured for different customers. I need each application to have it's own \ndatasource and realm.\nI can't see the logic in beeing able to create a context specific datasource \nand realm but not beeing able to use _that_ datasource _for_ the realm. I think \nthe demand for a global datasource breaks the whole idea with the application \nspecific configuration.\n\nThe worst part is that Remy wont listen to reason neither explain why he \nrefuses to add this feature.  ", "id": 50261, "time": "2004-01-08T15:35:58Z", "bug_id": 24545, "creation_time": "2004-01-08T15:35:58Z", "tags": [], "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 24545, "is_private": false, "id": 53980, "time": "2004-03-14T22:38:21Z", "creator": "msowka@hotmail.com", "creation_time": "2004-03-14T22:38:21Z", "tags": [], "text": "Wow...\n\nThis is ridiculous. I put in my two-cents-worth vote that one should be able to\ndeinfe DataSourceRealms on JNDI DataSource defined in the Context. Limiting the\nrealm to global DataSources makes no sense...\n\nTisk Tisk,\nMike"}, {"count": 13, "attachment_id": null, "creator": "pr@webapp.de", "is_private": false, "id": 54015, "time": "2004-03-15T15:57:02Z", "bug_id": 24545, "creation_time": "2004-03-15T15:57:02Z", "tags": [], "text": "Hey\n\nbut at Tomcat 5.x it is supported \n\nWith \n<Realm className=\"org.apache.catalina.realm.DataSourceRealm\"   \n       localDataSource=\"true\" ....>\n\nyou can used this feature.\n\nRegards\nPeter"}]
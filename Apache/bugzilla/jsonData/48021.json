[{"count": 0, "text": "Created attachment 24391\ntest file\n\nIf request size exceed FcgidMaxRequestInMem PHP got error: UPLOAD_ERR_PARTIAL\n(The uploaded file was only partially uploaded)", "bug_id": 48021, "is_private": false, "id": 131199, "time": "2009-10-18T08:35:20Z", "creator": "sitnikov@gmail.com", "creation_time": "2009-10-18T08:35:20Z", "tags": [], "attachment_id": 24391}, {"count": 1, "tags": [], "creator": "sitnikov@gmail.com", "is_private": false, "text": "Created attachment 24392\nstrace while upload test file", "id": 131200, "time": "2009-10-18T08:36:07Z", "bug_id": 48021, "creation_time": "2009-10-18T08:36:07Z", "attachment_id": 24392}, {"count": 2, "tags": [], "bug_id": 48021, "is_private": false, "text": "Thanks for the report.\nI'm not yet able to reproduce, so I have a few more questions:\n* Is this a 32-bit or 64-bit build?\n* What is your value of FcgidMaxRequestInMem?\n* Is it possible to get a trace of the httpd process for the same testcase?\n\nmod_fcgid 2.2 didn't actually respect FcgidMaxRequestInMem except for fairly low values (< ~8K), so to get the previous behavior you can set FcgidMaxRequestInMem to a very high value.", "id": 131219, "time": "2009-10-19T08:17:52Z", "creator": "trawick@apache.org", "creation_time": "2009-10-19T08:17:52Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 48021, "text": "(In reply to comment #2)\n> Thanks for the report.\n> I'm not yet able to reproduce, so I have a few more questions:\n> * Is this a 32-bit or 64-bit build?\ntest with 32 and 64 bit\n\n> * What is your value of FcgidMaxRequestInMem?\nany. i test with defaut (64K), 32K (for test case) and 1M. \nif request is large that this value we got broken upload.\n\n> * Is it possible to get a trace of the httpd process for the same testcase?\nsee new attache.\n\n> mod_fcgid 2.2 didn't actually respect FcgidMaxRequestInMem except for fairly\n> low values (< ~8K), so to get the previous behavior you can set\nsorry, my mistake. before we use \"origin\" 2.3.x (not asf)\n \n> FcgidMaxRequestInMem to a very high value.\nnow, we use this as workaround", "count": 3, "id": 131222, "time": "2009-10-19T09:07:46Z", "creator": "sitnikov@gmail.com", "creation_time": "2009-10-19T09:07:46Z", "is_private": false}, {"count": 4, "text": "Created attachment 24396\nhttpd strace", "bug_id": 48021, "is_private": false, "id": 131223, "time": "2009-10-19T09:09:43Z", "creator": "sitnikov@gmail.com", "creation_time": "2009-10-19T09:09:43Z", "tags": [], "attachment_id": 24396}, {"attachment_id": null, "tags": [], "creator": "trawick@apache.org", "is_private": false, "count": 5, "id": 131224, "time": "2009-10-19T10:11:52Z", "bug_id": 48021, "creation_time": "2009-10-19T10:11:52Z", "text": "Thanks for the new data.  The temporary file that holds the part of the request body in excess of FcgidMaxRequestInMem is getting truncated after the first buffer of data for this request is getting written there:\n\n19921 open(\"/tmp/fcgid.tmp.pBN8aH\", O_RDWR|O_CREAT|O_EXCL, 0600) = 40\n19921 write(40, \"pppppppppppppppppppppppppppppppp\"..., 1460) = 1460\n19921 poll([{fd=39, events=POLLIN, revents=POLLIN}], 1, 120000) = 1\n19921 read(39, \"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\"..., 8000) = 1460\n19921 ftruncate(40, 0)                  = 0\n19921 write(40, \"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\"..., 1460) = 1460\n\nThe fix may be as simple as this:\n\n--- mod_fcgid-2.3.4/modules/fcgid/fcgid_bridge.c.orig\t2009-10-19 13:08:15.437700200 -0400\n+++ mod_fcgid-2.3.4/modules/fcgid/fcgid_bridge.c\t2009-10-19 13:08:55.547050836 -0400\n@@ -574,7 +574,9 @@\n                     apr_pool_userdata_set((const void *) fd, fd_key,\n                                           apr_pool_cleanup_null,\n                                           r->connection->pool);\n-                } else if (need_truncate) {\n+                } \n+\n+                if (need_truncate) {\n                     need_truncate = 0;\n                     apr_file_trunc(fd, 0);\n                     cur_pos = 0;\n\nBefore testing that fix I need to see why my testcase isn't failing with 2.3.4 :("}, {"count": 6, "tags": [], "bug_id": 48021, "text": "> The fix may be as simple as this:\nthis patch working for me", "id": 131225, "time": "2009-10-19T10:34:29Z", "creator": "sitnikov@gmail.com", "creation_time": "2009-10-19T10:34:29Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 48021, "text": "Thanks for the quick feedback.\n\nI found out what was breaking my own test: the request body size has to exceed FcgidMaxRequestInMem by some variable amount before hitting the truncation bug, and I wasn't sending enough data to hit it.\n\nThe patch is working for my updated testcase as well.", "id": 131226, "time": "2009-10-19T10:40:26Z", "creator": "trawick@apache.org", "creation_time": "2009-10-19T10:40:26Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 48021, "text": "This is now fixed for future mod_fcgid 2.3.5.\n\nIn the interim:\n\nTo make mod_fcgid behave like 2.2 (which ignored the in-memory limit in most cases), set FcgidMaxRequestInMem higher than your largest request body.\n\nTo resolve the regression and at the same time respect FcgidMaxRequestInMem, apply this patch:\n\nhttp://svn.apache.org/viewvc/httpd/mod_fcgid/trunk/modules/fcgid/fcgid_bridge.c?r1=826829&r2=826828&pathrev=826829", "id": 131239, "time": "2009-10-20T03:52:44Z", "creator": "trawick@apache.org", "creation_time": "2009-10-20T03:52:44Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "*** Bug 48554 has been marked as a duplicate of this bug. ***", "id": 133630, "time": "2010-01-15T07:21:42Z", "bug_id": 48021, "creation_time": "2010-01-15T07:21:42Z", "is_private": false}, {"count": 10, "text": "*** Bug 48626 has been marked as a duplicate of this bug. ***", "bug_id": 48021, "is_private": false, "id": 133965, "time": "2010-01-26T13:46:30Z", "creator": "trawick@apache.org", "creation_time": "2010-01-26T13:46:30Z", "tags": [], "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 10449, "attachment_id": null, "text": "Due to the way suexec checks environment variables in the environment against\nthe compiled-in safe list to decide if variables should be allowed through to\nthe executed CGI program, environment varibles *not* explicitly defined in the\nsafe list are allowed through if the beginning of the variable name matches a\nvariable in the safe list.  This may be by design, in which case the suexec\ndocumentation should be amended appropriately.  I cannot see how this could ever\nbe a security problem.\n\nThe \"problem\" appears in both the 1.3.26 and the 2.0.39 versions of suexec.c,\nand I have verified it at runtime in Apache 1.3.26.  The problematic code appears in\napache_1.3.26/src/support/suexec.c, function clean_env():\n\nstatic void clean_env(void)\n{\n    char pathbuf[512];\n    char **cleanenv;\n    char **ep;\n    int cidx = 0;\n    int idx;\n\n\n    if ((cleanenv = (char **) calloc(AP_ENVBUF, sizeof(char *))) == NULL) {\n        log_err(\"emerg: failed to malloc memory for environment\\n\");\n        exit(120);\n    }\n\n    sprintf(pathbuf, \"PATH=%s\", SAFE_PATH);\n    cleanenv[cidx] = strdup(pathbuf);\n    cidx++;\n\n    for (ep = environ; *ep && cidx < AP_ENVBUF-1; ep++) {\n        if (!strncmp(*ep, \"HTTP_\", 5)) {\n            cleanenv[cidx] = *ep;\n            cidx++;\n        }\n        else {\n            for (idx = 0; safe_env_lst[idx]; idx++) {\n                if (!strncmp(*ep, safe_env_lst[idx],\n                             strlen(safe_env_lst[idx]))) {\n                     ^^^^^^^^^^^^^^^^^^^^^^^^\n                     ! note only checked to length safe_env_lst[idx] variable!\n                    cleanenv[cidx] = *ep;\n                    cidx++;\n                    break;\n                }\n            }\n        }\n    }\n\n    cleanenv[cidx] = NULL;\n\n    environ = cleanenv;\n}\n\nI suppose one way of fixing this to do exact comparisions would be (avoiding\ncalling strlen() on an 'untrusted' environment variable):\n\n            for (idx = 0; safe_env_lst[idx]; idx++) {\n                if (!strncmp(*ep, safe_env_lst[idx],\n                             strlen(safe_env_lst[idx])\n                     && *ep[strlen(safe_env_lst[idx])]=='\\0')) {\n                    cleanenv[cidx] = *ep;\n                    cidx++;\n                    break;\n                }\n            }\n\nAlternatively this could just be described as a feature, in which case this\nparagraph in htdocs/manual/suexec.html.html should be amended appropriately:\n\n      <li>\n        <strong>Can we successfully clean the process environment\n        to ensure safe operations?</strong> \n\n        <blockquote>\n          suEXEC cleans the process' environment by establishing a\n          safe execution PATH (defined during configuration), as\n          well as only passing through those variables whose names\n          are listed in the safe environment list (also created\n          during configuration).\n        </blockquote>\n      </li>", "id": 18957, "time": "2002-07-03T18:06:39Z", "creator": "alex-news@oenone.demon.co.uk", "creation_time": "2002-07-03T18:06:39Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 10449, "attachment_id": null, "text": "hmm, shouldn't one check for a '=' sign?\n\n(or alternatively append a '=' to the variable names within the \"safe\" list?)\nOptions?", "id": 30983, "time": "2003-02-10T03:19:07Z", "creator": "nd@perlig.de", "creation_time": "2003-02-10T03:19:07Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 10449, "text": "I guess it could be fixed with just a quick strlen comparison.\n\nBut note that this is probably not a security risk.  The point of cleaning\ndown the environment is to prevent unsafe env variables from being passed\n(think LD_LIBRARY_PATH, etc).  It is HIGHLY unlikely that an attacker\nwould be able to construct an unsafe env variable using a prefix of a\nsafe env variable.", "id": 31007, "time": "2003-02-10T14:30:07Z", "creator": "slive@apache.org", "creation_time": "2003-02-10T14:30:07Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 10449, "attachment_id": null, "id": 31626, "time": "2003-02-19T19:58:49Z", "creator": "nd@perlig.de", "creation_time": "2003-02-19T19:58:49Z", "is_private": false, "text": "strlen doesn't work here, because the env array consists of enties ala\n\"PATH=/foo/bar\".\n\nBut you're right, it's not really a security risk. But I'm pedantic ;-))\nI found, however, <http://bugs.apache.org/index.cgi/full/2790> and I think, most\nof the stuff suggested there is worth to be patched. (the current problem is\nalso described there - with the same solution, I proposed here 5 years later ;-)"}, {"attachment_id": null, "tags": [], "bug_id": 10449, "text": "Well, it's fixed in 2.1 and proposed for backport.\n\nThanks for the report and thanks for using Apache!", "count": 4, "id": 31633, "time": "2003-02-19T21:43:08Z", "creator": "nd@perlig.de", "creation_time": "2003-02-19T21:43:08Z", "is_private": false}, {"count": 5, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "id": 31795, "time": "2003-02-22T20:28:29Z", "bug_id": 10449, "creation_time": "2003-02-22T20:28:29Z", "is_private": false, "text": "The fix will appear in 1.3.28 and 2.0.45."}]
[{"attachment_id": null, "tags": [], "bug_id": 27966, "text": "When a POST or PUT is made with Expect: 100-continue and\nContent-Length: 0, then Apache immediately replies with\n200 OK instead of first sending 100 Continue.\n\nBy RFC 2616, section 4.3, an empty message body is still\na message body.  By section 8.2.3, the only valid responses\nafter Expect: 100-continue are 100 Continue or a final status\ncode... but if a final status code is given then the server\nMUST NOT perform the requested method, implying that 200 OK\nis not valid.  (Apache does in fact perform the requested\nPOST, returning the script output, if appropriately configured.)\n\nThe RFC does say that the server MAY omit the 100 Continue\nresponse if it has received all of the request body (which\nit certainly has if the Content-Length is 0)... but I believe\nthat the MUST NOT (perform...) overrides the MAY, so in all\ncases leading to 200 OK, a 100 Continue must be sent.\n\nThere is a workaround: the client should not send a 100-continue\nexpectation with a Content-Length: 0.  This may or may not be\neasy to implement for arbitrary clients.  (It is a moderate\nnuisance for my code which provoked this bug report.)\n\nI have reproduced this bug under WindowsNT; I have no reason\nto believe that it is platform-specific, but don't have a\nconvenient place to test for any other platform.\n\nA simple perl script to exercise the problem follows.\n\n- Alex\n\n#!/bin/perl\n\nuse IO::Socket::INET;\n\n$where = \"localhost:8080\";\n$sock = IO::Socket::INET->new($where);\n\nprint $sock <<\"EOT\";\nPOST /foo.pl HTTP/1.1\nHost: $where\nContent-Length: 0\nExpect: 100-continue\nConnection: keep-alive\nUser-Agent: My stupid test agent\n\n\nEOT\n\nwhile ($line = <$sock>) {\n  print $line;\n  if ($line =~ /^HTTP\\/1.1 100/o) {\n    print \"Got the continue.\\n\";\n    exit(0);\n  }\n  if ($line =~ /^HTTP\\/1.1 417/o) {\n    print \"Got a reasonable expectation failure.\\n\";\n    exit(0);\n  }\n  if ($line =~ /^HTTP\\/1.1 200/o) {\n    print \"BUSTED!  Need to deal with the continue expectation before giving \nsuccess!\\n\";\n    exit(1);\n  }\n}\n\nprint \"Hrm.  Something unexpected happened, probably bad.\\n\";\nexit(1);", "count": 0, "id": 54694, "time": "2004-03-25T23:04:25Z", "creator": "alexp@hubspan.com", "creation_time": "2004-03-25T23:04:25Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jorton@redhat.com", "is_private": false, "text": "Interesting...  my interpretation of 2616: the \"MAY omit a 100 (Continue)\"\nclause is pointless if it does not modify the \"MUST\"/\"MUST NOT\" requirements;\ni.e. it explicitly makes it valid for an origin server omit a 100 continue\nresponse if  all of the body has already been received.  What other meaning\ncould the clause have?  By that interpretation, 2.0's behaviour is compliant\nwith 2616 for the \"C-L: 0\" case, and it seems reasonable.\n\nI'd ask the httpwg list for clarification if you're really convinced this is\nwrong; please re-open the bug report if httpwg agrees with you. :)", "id": 58689, "time": "2004-06-03T23:20:31Z", "bug_id": 27966, "creation_time": "2004-06-03T23:20:31Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 48527, "attachment_id": null, "id": 133530, "time": "2010-01-11T20:48:08Z", "creator": "jim.at.company@mailinator.com", "creation_time": "2010-01-11T20:48:08Z", "is_private": false, "text": "http://repo1.maven.org/maven2/log4j/log4j/maven-metadata.xml lists log4j versions up to 1.2.13, although versions .14 and .15 are available in that same repo.\n\nThis means that hard dependencies and range dependencies do not work, as maven does not pick up these versions. So you have to stick to soft dependencies or use the out of date versions.\n\nIn other words - this (soft dep) works:\n\n<dependency>\n  <artifactId>log4j</artifactId>\n  <version>1.2.14</version>\n  ...\n\nthis (hard dep) does not:\n\n<dependency>\n  <artifactId>log4j</artifactId>\n  <version>[1.2.14]</version>\n\nnor does this (range dep):\n\n<dependency>\n  <artifactId>log4j</artifactId>\n  <version>[1.2.14,2.0)</version>\n\nUnfortunately, soft dependencies can cause a lot of problems, especially in larger setups, that are not detected at deploy time, but only at run time (MethodNotFoundError and others). But you cannot really use hard / range dependencies with incomplete metadata, as maven will not find undeclared versions.\n\nBtw, isn't this metadata file something that would be auto-generated?"}, {"count": 1, "tags": [], "bug_id": 48527, "attachment_id": null, "id": 133532, "time": "2010-01-11T20:50:50Z", "creator": "jim.at.company@mailinator.com", "creation_time": "2010-01-11T20:50:50Z", "is_private": false, "text": "fyi, there is also an unresolved bug report from Oct 2009 about the same issue on the codehaus page: http://jira.codehaus.org/browse/MEV-639"}, {"count": 2, "attachment_id": null, "creator": "carnold@apache.org", "text": "It appears that maven-metadata.xml is generated by merging the current metadata at the deployment repository with the generated metadata for the new version being deployed.  I have not found a way to explicitly specify in the pom.xml what the full version history should look like.  The schema for pom.xml does not have anything that looks like it.\n\nlog4j is deployed first to a staging repo for voting before release.  Unfortunately, this has resulted in generating a minimal maven-metadata.xml since the staging repo started empty.\n\nAs far as I can tell, the best way to approach this is the manually manipulate the staging repository's maven-metadata.xml prior to release generation to put all the back versions into the history.", "id": 137669, "time": "2010-06-16T00:12:09Z", "bug_id": 48527, "creation_time": "2010-06-16T00:12:09Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 48527, "attachment_id": null, "id": 159559, "time": "2012-05-31T13:06:40Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-05-31T13:06:40Z", "is_private": false, "text": "Starting with 1.2.16 older versions are kept again.\nI am not aware of a chance to change it to support older versions."}]
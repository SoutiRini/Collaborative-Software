[{"count": 0, "tags": [], "text": "Created attachment 28315\nPatch to not pollute the destination array\n\nCalling a web site with a parameter name twice:\nhttp://lilie/form.rvt?d=d&d=e\n\nand using \"load_response\":\n<?\nload_response response\nparray response\n?>\ndisplays:\nresponse\nresponse(d)   = d e\nresponse(__d) = \n---\nThe spurious additional index \"__d\" is the internal memory, that d is a list.\n\nIMHO this should be wether:\na) documented\nb) removed\n\nFor me, this was quite missleading at the beginning.\n\nAttached is a patch which does not create the __d indexes.\n\nThe patch is Tcl8.4 clean. The following optimisation is possible if Tcl8.5 could be used:\nReplace\n  if {-1 != [lsearch -exact $listIndexes $var]} {\nby\n  if { $var in $listIndexes $var } {", "is_private": false, "id": 153731, "creator": "harald.oehlmann@elmicron.de", "time": "2012-02-13T13:57:17Z", "bug_id": 52653, "creation_time": "2012-02-13T13:57:17Z", "attachment_id": 28315}, {"count": 1, "tags": [], "bug_id": 52653, "attachment_id": 28316, "id": 153732, "time": "2012-02-13T14:09:50Z", "creator": "harald.oehlmann@elmicron.de", "creation_time": "2012-02-13T14:09:50Z", "is_private": false, "text": "Created attachment 28316\nOptimized patch to remove spurious indexes\n\nHere is another patch with optimized processing.\nThe check for multiple must only be done if the variable was already seen.\n\nI also doubt, if those spurious indexes are not intended.\nThey are crucial, if the list state of elements should be kept between multiple calls.\n\nI would find it nicer to have a mega-index, say \"__lists\" with a list of the indexes which are lists.\n\nSo in the upper case, we would get the output:\nresponse\nresponse(d)   = d e\nresponse(__lists) = d"}, {"count": 2, "tags": [], "text": "I slept over the concept of the command.\n\nThe purpose of the listification is to support radio and checkbox widgets where multiple parameters with the same name are returned.\nThose parameters are supposed to be part of a set of radio or checkboxes.\nThe form package uses this fact by checking, if the value of a distinct checkbox is contained in the list of its name:\nif {[info exists DefaultValues($name)]} {\n  if {[lsearch $DefaultValues($name) $data(value)] >= 0} {\t\t\t\n    append string { checked=\"checked\"}\n  }\n}\n\nIn this backround, I think the implementation is quite strange, because it depends on the current contents of the output array.\n\nThe documentation states, that data is added (and listified) on multiple calls.\nIs there any reason for this or is this just a warning about a side effect ?\nIMHO this is not helpful and may lead to user errors.\n\nAs I understood by the manual, this command is inspired by a former command.\nAre there any backward compatibility issues involved ?", "is_private": false, "id": 153768, "creator": "harald.oehlmann@elmicron.de", "time": "2012-02-14T08:46:40Z", "bug_id": 52653, "creation_time": "2012-02-14T08:46:40Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "See comments of Bug ID 52909.\nAn information if an item was listifed would be quite helpful in further processing.", "is_private": false, "id": 154901, "creator": "harald.oehlmann@elmicron.de", "time": "2012-03-14T13:54:48Z", "bug_id": 52653, "creation_time": "2012-03-14T13:54:48Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "mxmanghi@apache.org", "is_private": false, "text": "I propose to improve the manual page for 'load_response'. As said, the current command tries to emulate a similar command in another Tcl based web programming environment. As to checkboxes: you're right, multiple options checked in a checkbox are returned and they go into a single list. I think that when you speak of 'listification' you are forcing a concept which Tcl has avoided from the very beginning. (nearly) Everything is a list, perhaps a degenerate one, but still can be treated as such. I'm not sure I understand your need for telling which parameters have length > 2 a priori, but your applications certainly know which parameters of a form might be returning a single scalar variable or a list of values. Looking forward for your comments.", "id": 155025, "time": "2012-03-18T19:06:25Z", "bug_id": 52653, "creation_time": "2012-03-18T19:06:25Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "harald.oehlmann@elmicron.de", "attachment_id": null, "text": "Dear Massimo,\nthank you for looking into this.\n\nOne sense of this function is to coorperate with the defaults-option of the form package.\n\nImagine two checkboxes with the same name \"vb\" witch values \"check 1\" and \"check 2\":\n--test.rvt--\n<html><body><?\nload_response response\nif {[array exists response]} {\n\tparray response\n}\nform form_request -method get -defaults response\nform_request start\nform_request checkbox vb -value \"check 1\"\nform_request checkbox vb -value \"check 2\"\nform_request submit action -value Send\nform_request end\n?></body></html>\n--EOF--\n\n(E1) If you invoke the form you get as result from load_response:\n- array response does not exist\n\n(E2) If you check none, you get:\nresponse(action) = Send\n\n(E3) If you check one you get:\nresponse(action) = Send\nresponse(vb)     = check 1\n\n(E4) If you check both, you get:\nresponse(action) = Send\nresponse(vb)     = {check 1} {check 2}\n\nThe form package needs the information, if response(vb) is a list.\nIn case (E3), it is a scalar\nIn case (E4), it is a list\nAt the moment, the form package has no possibility to determine the type.\nThus, it assumes, it is a list for multi-item elements (checkboxes, radio) and a scalar if not.\nThis fails, if:\n- the item is not a list (Case E3)\n- The value has a space in and thus is decomposed into multiple list elements.\n  In consequence, the default value is not found and the item is not checked.\n\nPossible cures:\nR1) all elements returned by load_response are lists\n  E.g. the (E3) result would be:\n  response(action) = Send\n  response(vb)     = {check 1}\n  This breaks compatibility\n  Would solve in an easy way\nR2) Return information, if a value is a list.\n  The form package could detect this and act accordingly.\n  Here are two possible implementations:\n  - stay with the current \"__index\", document it and detect this by the form\n    package.\n  - Create a new output array key: \"__lists\" which is a list of all other keys\n    which are lists.\n    The E4-result would be:\n    response(action) = Send\n    response(vb)     = {check 1} {check 2}\n    response(__lists) = vb\n\nN.B. The upper example does not never preselect any checkbox. I suppose this is an issue in the form package. I don't have the original any more...\n\nN.B.: In TCL, not everything is a list.\nJust try this, check only one and press submit:\n<html><body><?\nload_response response\nif {[array exists response]} {\n\tparray response\n}\nform form_request -method get -defaults response\nform_request start\nform_request checkbox vb -value \"{\"\nform_request checkbox vb -value \"}\"\nform_request submit action -value Send\nform_request end\n?></body></html>", "id": 155039, "time": "2012-03-19T08:54:37Z", "bug_id": 52653, "creation_time": "2012-03-19T08:54:37Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 52653, "attachment_id": null, "id": 159031, "time": "2012-05-14T10:06:48Z", "creator": "mxmanghi@apache.org", "creation_time": "2012-05-14T10:06:48Z", "is_private": false, "text": " thanks for the analysis of the problem. I will adopt the solution that best preserves backward compatibility but I don't think we can cope with every pathology induced by the EIAS paradigm. In the meanwhile we ought to figure out to solve the problem in a safe way. I think we can dispose of NWS compatibility and image our own approach to the problem. Something like a new ensemble implementing a tool for consistent and safe handling of all these cases and hide to the programmer the way we do it. \n\nI change the status to NEEDINFO and open a thread on rivet-dev"}, {"count": 7, "tags": [], "creator": "mxmanghi@apache.org", "attachment_id": null, "text": "Bug reassigned to component 'Core Commands'", "id": 159137, "time": "2012-05-17T20:49:23Z", "bug_id": 52653, "creation_time": "2012-05-17T20:49:23Z", "is_private": false}, {"count": 8, "tags": [], "creator": "mxmanghi@apache.org", "is_private": false, "text": "component changed to 'form'", "id": 159185, "time": "2012-05-20T17:45:44Z", "bug_id": 52653, "creation_time": "2012-05-20T17:45:44Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 52653, "attachment_id": null, "id": 159186, "time": "2012-05-20T19:35:08Z", "creator": "mxmanghi@apache.org", "creation_time": "2012-05-20T19:35:08Z", "is_private": false, "text": "I did a few tests and it seems to me in the current form load_response is not working well anyway. I think you can do something better by forcing an array variable to be a list using  and detect it through the variable __$var, as you said, but probably we can do even better than that by changing the mechanics and rewrite on something more robust (an Itcl class?). In the past I wrote a 'Collection' class, something like a structured wrapper of an array of variables, just like the 'response' array, but with extra features"}, {"count": 10, "tags": [], "text": "Created attachment 28806\npatch that seems to restore correct handling of checkboxes list values\n\nHere is a patch that adopts the strategy you suggested: comparing a value of a checkbox input element as either a string or looking it up in a list with lsearch", "is_private": false, "id": 159187, "creator": "mxmanghi@apache.org", "time": "2012-05-20T21:43:42Z", "bug_id": 52653, "creation_time": "2012-05-20T21:43:42Z", "attachment_id": 28806}, {"count": 11, "tags": [], "bug_id": 52653, "attachment_id": null, "is_private": false, "id": 162300, "time": "2012-09-20T12:33:39Z", "creator": "harald.oehlmann@elmicron.de", "creation_time": "2012-09-20T12:33:39Z", "text": "Behaviour accepted as historical.\nAdditional documentation:\na key \"__varname\" means that varname is an array\nmay help.\n\nThanks,\nHarald"}]
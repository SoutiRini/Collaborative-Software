[{"count": 0, "tags": [], "creator": "marian.romascanu@nuance.com", "is_private": false, "text": "SPNEGO and JNDIRealm are integrated in catalina core library. \nThe web application is using Kerberos SSO using SPNEGO and JNDIRealm.\nThe application requires using hostname-independent LDAP URLs in the JNDIRealm configuration. This is done (e.g.) using a construct based on SRV records similar to the following domain-based construct:\n  <Realm className=\"org.apache.catalina.realm.JNDIRealm\"\n        connectionURL=\"ldap:///dc=testdomain,dc=example,dc=org\"\n   ...\nThe ldap:///dc=testdomain,dc=example,dc=org construct is internally resolved into a query against a SRV record exposed by the DNS server (AD in this case):\n_ldap._tcp.testdomain.example.org\n\nThis is visible in the wireshark trace of the transaction and in the logs.\n\nThe query return several valid hostnames corresponding to one of several Domain Controllers and Tomcat JNDIREalm would chose one, e.g.:\n\ndc1.testdomain.example.org IN A 1.2.3.4\n\nIn the DNS \n\nHowever when the JNDIREalm logic tries first to get a Kerberos ticket for the GSSAPI/SASL protocol, it issues a TGS-REQ containing the DNS-returned hostname plus a trailing dot as illustrated below in a trace excerpt. \n\ntgs-req\n...\nsname-string: 2 items\n    SNameString: ldap\n    SNameString: dc1.testdomain.example.org.\n\nAs a result the LDAP SPN is not found (KDC_ERR_PRINCIPAL_UNKNOWN) - the SPN defined in AD is ldap/dc1.testdomain.example.org  w/o the trailing dot.\n\nThe issue is reported as originating in a JDK core library:\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=8149521\nHowever the issue is being marked as resolved in JDK 8u152 - however fixed not in the JNDI \"servicelocator\" but apparently at the Kerberos level - the krb5 component in the Java core runtime library, which is not being used by Catalina.  Tests with Tomcat 8.20 and JRE 8u152 show the issue is still there.\n\nThere is a need for a bug fix in the catalina JNDIRealm for stripping the trailing dot, if any, before attempting the LDAP SPN resolution.", "id": 203158, "time": "2018-01-09T02:12:35Z", "bug_id": 61977, "creation_time": "2018-01-09T02:12:35Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "1983-01-06@gmx.net", "attachment_id": null, "text": "I am inclined to close this as wontfix. I have reporting this several times to Oracle years ago, even to the appropriate people in security-dev@openjdk and core-libs-dev@openjdk and no proper avail.\n\nMy solution was to completely replace the ServiceLocator with a proper implementation and patch the bootclass path. I also have raised an issue with Oracle support for this: http://mail.openjdk.java.net/pipermail/core-libs-dev/2017-December/050342.html\n\nAlan Bateman rejected this solution for Java 9, but only for Java 10. I recommend you to bomb the core-libs-dev and Rob McKenna and Weijun Wang about this.", "id": 203160, "time": "2018-01-09T09:32:06Z", "bug_id": 61977, "creation_time": "2018-01-09T09:32:06Z", "is_private": false}, {"count": 2, "tags": [], "text": "Btw, this cannot be reasonable fixed in the JNDIRealm because the issue lies deep down in Sun's private classes.", "is_private": false, "id": 203161, "creator": "1983-01-06@gmx.net", "time": "2018-01-09T09:38:23Z", "bug_id": 61977, "creation_time": "2018-01-09T09:38:23Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I can confirm that this is fixed in Java 10 (ea38).\n\nUsing the configuration from:\nhttps://tomcat.apache.org/tomcat-9.0-doc/windows-auth-howto.html\n\nThis works with Java 8 or Java 10:\n<Realm  className=\"org.apache.catalina.realm.JNDIRealm\"\n\tconnectionURL=\"ldap://win-dc01.dev.local:3268\"\n\tconnectionName=\"CN=Administrator,CN=Users,DC=dev,DC=local\"\n\tconnectionPassword=\"password\"\n\tuserSearch=\"(sAMAccountName={0})\"\n\tuserBase=\"CN=Users,DC=dev,DC=local\"\n\tuserSubtree=\"true\"\n\troleSearch=\"(member={0})\"\n\troleBase=\"DC=dev,DC=local\"\n\troleName=\"cn\"\n\troleSubtree=\"true\"\n\troleNested=\"true\"\n\t/>\n\nThis fails with Java 8 but works with Java 10:\n<Realm  className=\"org.apache.catalina.realm.JNDIRealm\"\n\tconnectionURL=\"ldap:///DC=dev,DC=local\"\n\tconnectionName=\"CN=Administrator,CN=Users,DC=dev,DC=local\"\n\tconnectionPassword=\"password\"\n\tuserSearch=\"(sAMAccountName={0})\"\n\tuserBase=\"CN=Users\"\n\tuserSubtree=\"true\"\n\troleSearch=\"(member={0})\"\n\troleName=\"cn\"\n\troleSubtree=\"true\"\n\troleNested=\"true\"\n               adCompat=\"true\"\n\t/>\n\nThis is, clearly, a JRE bug. The fix for 8149521 looks more like addressing the symptom than the root cause. Such an approach isn't unusual for the JRE that tends to take a very conservative view on changes that might break existing apps.\n\nGenerally, the Tomcat community doesn't implement workarounds for bugs in third party code. The preferred solution is to fix the problem at source. This keeps the Tomcat code clean(er) and everyone gets the fix.\n\nThere are exceptions where we have provided workarounds. A number of factors influence this. One is how big a patch is required to work-around it. I'll take a look at what a patch might look like.\n\nFinally, moving this to an enhancement as there is no Tomcat bug here.", "id": 203201, "time": "2018-01-10T15:20:52Z", "bug_id": 61977, "creation_time": "2018-01-10T15:20:52Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 61977, "attachment_id": 35672, "text": "Created attachment 35672\nOutline patch\n\nAfter some further investigation I have identified a point where we could fix this. I have attached an outline patch that shows how the issue could be worked around. The patch isn't robust and Java 9 is going to complain unless some modules are opened up.", "id": 203204, "time": "2018-01-10T16:28:10Z", "creator": "markt@apache.org", "creation_time": "2018-01-10T16:28:10Z", "is_private": false}, {"count": 5, "tags": [], "creator": "marian.romascanu@nuance.com", "is_private": false, "text": "Would it be possible to override in the webapp the JNDIRealm class in catalina.jar with the patched version? I mean providing the class in a webapp-specific jar. This taking advantage of Tomcat's class loader preference for loading first the webapp classes. Just wondering - if there is a way to do it the patch would be confined to the context of the webapp requiring the removal of the trailing dot.\nNot sure how this would be possible - kindly advise.", "id": 203250, "time": "2018-01-12T22:58:02Z", "bug_id": 61977, "creation_time": "2018-01-12T22:58:02Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "Realm's many be specified at the Context, Host or Engine level. However, the implementation class needs to visible to Tomcat so it needs to be in CATALINA_BASE/lib.\n\nSo, to apply this patch to a single web app:\n- create your patched Realm (e.g. extend the JNDIRealm and override open())\n- add your class to CATALINA_BASE/lib\n- configure the web app to use the Realm via the context.xml file for the app", "is_private": false, "id": 203252, "creator": "markt@apache.org", "time": "2018-01-13T07:37:32Z", "bug_id": 61977, "creation_time": "2018-01-13T07:37:32Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "marian.romascanu@nuance.com", "is_private": false, "text": "Hi. Cannot find in the the 8.5 trunk or tags the rev. 1820700.\nhttps://svn.apache.org/repos/asf/tomcat/tc8.5.x/trunk/java/org/apache/catalina/realm\n\nTrying to match the patch with the 8.5 JNDIRealm - I presume it starts at the end of \"DirContext open()\" just before the return. Please confirm.", "id": 203254, "time": "2018-01-13T17:16:26Z", "bug_id": 61977, "creation_time": "2018-01-13T17:16:26Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 61977, "text": "Finally incorporated the patches in the JNDIRealm.jave for Tomcat 8.5.20 (checkout from asf repo) and tested in a \"crude\" way by simply replacing the JNDIRealm classes in catalina.jar.  The trailing dot is gone and the SPN resolution works. Thanks.", "id": 203255, "time": "2018-01-13T20:03:44Z", "creator": "marian.romascanu@nuance.com", "creation_time": "2018-01-13T20:03:44Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "text": "A bit too quick in crying victory. Here is the scenario:\n- using CombinedRealm with 2 JNDIREalm \n  * 1 on testdomain1.example.org\n  * 1 on testdomain2.example.org\n- using the ldap:///<domain> construct for the connectionURL in each JNDIREalm\n- having different userBase and roleBase in each of the JNDIREalm, like below\n  userBase=\"OU=ouUserBase1,DC=testdomain1,DC=example,DC=org\" \n  roleBase=\"OU=ouRoleBase1,DC=testdomain1,DC=example,DC=org\" \n  userBase=\"OU=ouUserBase2,DC=testdomain2,DC=example,DC=org\" \n  roleBase=\"OU=ouRoleBase2,DC=testdomain2,DC=example,DC=org\" \n- using a Kerberos SSO config (securityConstraints based on the userBase/roleBase above)\n\nHere are the issues observed so far:\n1) with the patch the userBase and roleBase above result in LDAP searches with the domain part in double e.g :\n\"OU=ouUserBase1,DC=testdomain1,DC=example,DC=org,DC=testdomain1,DC=example,DC=org\"\nI had to remove the domain parts to move on and make it partially working (see issue #2)\n  userBase=\"OU=ouUserBase1\" \n  roleBase=\"OU=ouRoleBase1\" \n  userBase=\"OU=ouUserBase2\" \n  roleBase=\"OU=ouRoleBase2\" \n\n2) With the above \"hack\" the first TGS-REQ trying to get an LDAP SPN will be OK w/o a trailing dot in the sname. However 2'nd TGS-REQ (for the other sub-domain) will come with the trailing dot. Does not matter the order - the 1'st can be for testdomain1 or testdomain2, it will work. The 2'nd SSO attempt for the other subdomain, as visible in the Wireshark trace, will produce a TCS-REQ with a ldap SPN sname with a trailing dot\n\nThanks in advance for looking at what might cause the 2 issues above.", "is_private": false, "id": 203256, "creator": "marian.romascanu@nuance.com", "time": "2018-01-14T04:07:54Z", "bug_id": 61977, "creation_time": "2018-01-14T04:07:54Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "marian.romascanu@nuance.com", "attachment_id": null, "text": "One more thing observed in the trace - with the combined realm the DNS requests for the SRV records _ltap._tcp.testdomain1.example.org and _ldap._tcp.testdomain2.example.org are done at the very beginning, when the 2 JNDIRealm are initialized, before any SSO request.", "id": 203257, "time": "2018-01-14T04:26:36Z", "bug_id": 61977, "creation_time": "2018-01-14T04:26:36Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 61977, "text": "(In reply to Mark Thomas from comment #3)\n> I can confirm that this is fixed in Java 10 (ea38).\n>\n> This is, clearly, a JRE bug. The fix for 8149521 looks more like addressing\n> the symptom than the root cause. Such an approach isn't unusual for the JRE\n> that tends to take a very conservative view on changes that might break\n> existing apps.\n\nI wrote the same to Weijun Wang, no avail. Mark, can you raise through your Oracle contacts? This is an easy fix actually and can be backported to Java 8.", "count": 11, "id": 203267, "time": "2018-01-15T09:04:26Z", "creator": "1983-01-06@gmx.net", "creation_time": "2018-01-15T09:04:26Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 61977, "attachment_id": null, "text": "Having to remove the domain components when using a SRV record appears to be a side effect of how the Java LDAP provider operates.\n\nI can't recreate the problem with multiple JNDIRealms. Authentication happens correctly for me with the domains in either order. I'd recommend using remote debugging to step through the code to see what is going on. If you can post you configuration here, someone might be able to spot something but, generally, debugging is more fruitful.\n\nI'll ping our friendly Oracle contact to see if there is any scope to change the behaviour of the Java 8 fix. See the dev list.", "id": 203362, "time": "2018-01-19T12:17:30Z", "creator": "markt@apache.org", "creation_time": "2018-01-19T12:17:30Z", "is_private": false}, {"count": 13, "attachment_id": null, "bug_id": 61977, "text": "Will reproduce on our side and send traces and logs", "id": 203363, "time": "2018-01-19T13:02:55Z", "creator": "marian.romascanu@nuance.com", "creation_time": "2018-01-19T13:02:55Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "text": "I've just tested Java 8 u162 as part of creating the bug report for Oracle and the issue is resolved. Windows auth works correctly without the patch applied. Reverting the u144 and it starts to fail again.", "is_private": false, "id": 203368, "creator": "markt@apache.org", "time": "2018-01-19T14:22:06Z", "bug_id": 61977, "creation_time": "2018-01-19T14:22:06Z", "attachment_id": null}, {"count": 15, "tags": [], "text": "Yes it seems to work. Just tested it wit JDK 8u162 and without the JNDIREalm patch. The only hic of the fix, whatever that is,is the side effect that might break other applications running on same Tomcat instance. The same issue reported with the JNDIRealm patch - the standard DN-style userBase and roleBase will no longer work - as if the trailing dot removal makes these relative to the domain DN in the connectionURL. Namely:\nThis was working fine in JDK8u144 to 8u152 but with host-based connectionURL in JNDIREalm\n  connectionURL=\"ldap://dc=dchost1,dc=testdomain1,dc=example,dc=org\"\n  ...\n  userBase=\"OU=ouUserBase1,DC=testdomain1,DC=example,DC=org\" \n  roleBase=\"OU=ouRoleBase1,DC=testdomain1,DC=example,DC=org\" \n  ...\nNow with JDK 8u162\n connectionURL=\"ldap://dc=testdomain1,dc=example,dc=org\"\nThe above userBase/roleBase are broken - looking at the LDAP search the domain part is sent in double:\n\"OU=ouUserBase1,DC=testdomain1,DC=example,DC=org,DC=testdomain1,DC=example,DC=org\"\nMust remove the domain parts to move on and the LDAP search works\n  userBase=\"OU=ouUserBase1\" \n  roleBase=\"OU=ouRoleBase1\" \n  userBase=\"OU=ouUserBase2\" \n  roleBase=\"OU=ouRoleBase2\"", "is_private": false, "id": 203372, "creator": "marian.romascanu@nuance.com", "time": "2018-01-19T15:35:00Z", "bug_id": 61977, "creation_time": "2018-01-19T15:35:00Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 61977, "attachment_id": null, "id": 203375, "time": "2018-01-19T17:22:51Z", "creator": "markt@apache.org", "creation_time": "2018-01-19T17:22:51Z", "is_private": false, "text": "OK. That looks like a regression. You'll need to report that to Oracle. I'd expect the bug to be accepted fairly quickly if there is a regression but let us know on the dev list if not."}]
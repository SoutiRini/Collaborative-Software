[{"attachment_id": 33551, "tags": [], "bug_id": 59002, "is_private": false, "count": 0, "id": 188412, "time": "2016-02-14T18:24:34Z", "creator": "sanjaysaini31@gmail.com", "creation_time": "2016-02-14T18:24:34Z", "text": "Created attachment 33551\nxls file in zip format (I have used that file for making HSSFWorkbook instance.\n\nException Occured inside transFormXLS2XLSX :: file Name :: D:/t.xls:: reason ::Expected size 18 but got (0)\norg.apache.poi.hssf.record.RecordFormatException: Expected size 18 but got (0)\n\tat org.apache.poi.hssf.record.CommonObjectDataSubRecord.<init>(CommonObjectDataSubRecord.java:86)\n\tat org.apache.poi.hssf.record.SubRecord.createSubRecord(SubRecord.java:49)\n\tat org.apache.poi.hssf.record.ObjRecord.<init>(ObjRecord.java:93)\n\tat sun.reflect.GeneratedConstructorAccessor9.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)\n\tat java.lang.reflect.Constructor.newInstance(Unknown Source)\n\tat org.apache.poi.hssf.record.RecordFactory$ReflectionConstructorRecordCreator.create(RecordFactory.java:84)\n\tat org.apache.poi.hssf.record.RecordFactory.createSingleRecord(RecordFactory.java:334)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.readNextRecord(RecordFactoryInputStream.java:308)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.nextRecord(RecordFactoryInputStream.java:274)\n\tat org.apache.poi.hssf.record.RecordFactory.createRecords(RecordFactory.java:478)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:344)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:401)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:382)\n\tat readexcel.Conversion.convertXLS2XLSX(Conversion.java:89)\n\tat readexcel.Conversion.main(Conversion.java:69)\n\n\n\nI have trying to convert xls file to xlsx.\n\nwbIn = new HSSFWorkbook(inputStream); // main culprit of the above exception\n\nCode ::::::::::::::::::::::\n\n\npackage readexcel;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.HashMap;\n\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.validator.GenericValidator;\nimport org.apache.poi.POIOLE2TextExtractor;\nimport org.apache.poi.POITextExtractor;\nimport org.apache.poi.extractor.ExtractorFactory;\nimport org.apache.poi.hssf.record.RecordFactory;\nimport org.apache.poi.hssf.usermodel.HSSFCellStyle;\nimport org.apache.poi.hssf.usermodel.HSSFClientAnchor;\nimport org.apache.poi.hssf.usermodel.HSSFPalette;\nimport org.apache.poi.hssf.usermodel.HSSFPatriarch;\nimport org.apache.poi.hssf.usermodel.HSSFPicture;\nimport org.apache.poi.hssf.usermodel.HSSFPictureData;\nimport org.apache.poi.hssf.usermodel.HSSFShape;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.util.HSSFColor;\nimport org.apache.poi.hssf.util.PaneInformation;\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.ClientAnchor;\nimport org.apache.poi.ss.usermodel.CreationHelper;\nimport org.apache.poi.ss.usermodel.DataFormat;\nimport org.apache.poi.ss.usermodel.Drawing;\nimport org.apache.poi.ss.usermodel.Font;\nimport org.apache.poi.ss.usermodel.Footer;\nimport org.apache.poi.ss.usermodel.Header;\nimport org.apache.poi.ss.usermodel.PrintSetup;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\nimport org.apache.poi.ss.util.CellRangeAddress;\nimport org.apache.poi.xssf.usermodel.XSSFCellStyle;\nimport org.apache.poi.xssf.usermodel.XSSFClientAnchor;\nimport org.apache.poi.xssf.usermodel.XSSFColor;\nimport org.apache.poi.xssf.usermodel.XSSFDrawing;\nimport org.apache.poi.xssf.usermodel.XSSFPicture;\nimport org.apache.poi.xssf.usermodel.XSSFPictureData;\nimport org.apache.poi.xssf.usermodel.XSSFShape;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.openxmlformats.schemas.drawingml.x2006.spreadsheetDrawing.CTMarker;\nimport org.openxmlformats.schemas.drawingml.x2006.spreadsheetDrawing.CTTwoCellAnchor;\n\n\npublic class Conversion {\n\t//TODO\n\tprivate static final int ZOOM_FACTOR_NUMERATOR = 1;\n\tprivate static final int ZOOM_FACTOR_DENOMINATOR = 1;\n\n\n\tpublic static void main(String args[]){\n\t\tnew Conversion().convertXLS2XLSX();\n\t}\n\n\t//private transient static Log log = LogFactory.getLog(FileConversionUtil.class);\n\n\n\t//public String convertXLS2XLSX(InputStream inputStream,String xlsFilePath){\n\tpublic String convertXLS2XLSX(){\n\t\tMap cellStyleMap = new HashMap();\n\t\tString xlsFilePath =\"D:/DD.xls\";\n\t\tSystem.out.println(\"::::\"+xlsFilePath);\n\t\tString xlsxFilePath = null;\n\t\tInputStream inputStream = null;\n\t\tWorkbook wbIn = null;\n\t\tFile xlsxFile= null;\n\t\tWorkbook wbOut = null;\n\t\tOutputStream out = null;\n\t\ttry {\n\n\t\t\tinputStream = new BufferedInputStream(new FileInputStream(xlsFilePath));\n\t\t\twbIn = new HSSFWorkbook(inputStream);\n\t\t\tif(GenericValidator.isBlankOrNull(xlsFilePath)&&inputStream==null)\n\t\t\t\treturn null;\n\t\t\telse\n\t\t\t\txlsxFilePath = xlsFilePath.substring(0,xlsFilePath.lastIndexOf('.'))+\".xlsx\";\n\t\t\twbIn = new HSSFWorkbook(inputStream);\n\t\t\txlsxFile = new File(xlsxFilePath);\n\t\t\tif (xlsxFile.exists())\n\t\t\t\txlsxFile.delete();\n\t\t\twbOut = new XSSFWorkbook();\n\t\t\tMap fontMap  = createFontForXLSXWorkSheet(wbOut,wbIn);\n\t\t\tint sheetCnt = wbIn.getNumberOfSheets();\n\n\t\t\tfor (int i = 0; i < sheetCnt; i++) {\n\t\t\t\tSheet sIn = wbIn.getSheetAt(i);\n\t\t\t\tSheet sOut = wbOut.createSheet(sIn.getSheetName());\n\t\t\t\tcopySheetProperties(sOut,sIn);\n\t\t\t\tIterator<Row> rowIt = sIn.rowIterator();\n\t\t\t\twhile (rowIt.hasNext()) {\n\t\t\t\t\tRow rowIn = rowIt.next();\n\t\t\t\t\tRow rowOut = sOut.createRow(rowIn.getRowNum());\n\t\t\t\t\tcopyRowProperties(rowOut,rowIn,fontMap,cellStyleMap);\n\t\t\t\t}\n\t\t\t}\n\t\t\tout = new BufferedOutputStream(new FileOutputStream(xlsxFile));\n\t\t\twbOut.write(out);\n\t\t}catch(Exception ex){\n\t\t\tSystem.out.println(\"Exception Occured inside transFormXLS2XLSX :: file Name :: \"+xlsFilePath + \":: reason ::\"+ ex.getMessage());\n\t\t\tex.printStackTrace();\n\t\t\txlsxFilePath =null;\n\t\t}finally {\n\t\t\ttry{\n\t\t\t\tif(wbOut!=null)\n\t\t\t\t\twbOut.close();\n\t\t\t\tif(wbIn!=null)\n\t\t\t\t\twbIn.close();\n\t\t\t\tif(out!=null)\n\t\t\t\t\tout.close();\n\t\t\t\tif(inputStream!=null)\n\t\t\t\t\tinputStream.close();\n\t\t\t}catch(Exception ex){\n\t\t\t\tex.printStackTrace();\n\t\t\t\txlsxFilePath =null;\n\t\t\t}\n\t\t}\n\t\treturn xlsxFilePath;\n\t}\n\n\tpublic void copySheetProperties(Sheet sOut,Sheet sIn){\n\t\tsOut.setZoom(ZOOM_FACTOR_NUMERATOR,ZOOM_FACTOR_DENOMINATOR);//set 100% zoom on sheet\n\t\tList<CellRangeAddress>cellRangeAddresssList =  sIn.getMergedRegions();\n\t\tif(cellRangeAddresssList!=null){\n\t\t\tfor(int i=0;i<cellRangeAddresssList.size();i++){\n\t\t\t\tCellRangeAddress copyCellRegion  = cellRangeAddresssList.get(i);\n\t\t\t\tint firstRow = copyCellRegion.getFirstRow();\n\t\t\t\tint lasRow = copyCellRegion.getLastRow();\n\t\t\t\tint firstColumn = copyCellRegion.getFirstColumn();\n\t\t\t\tint lastColumn =copyCellRegion.getLastColumn();\n\t\t\t\tif(firstRow<=lasRow && firstColumn <= lastColumn){\n\t\t\t\t\tCellRangeAddress cellRegion = new CellRangeAddress(copyCellRegion.getFirstRow(),copyCellRegion.getLastRow(),copyCellRegion.getFirstColumn(),copyCellRegion.getLastColumn());\n\t\t\t\t\tsOut.addMergedRegion(cellRegion);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tPaneInformation paneInformation = sIn.getPaneInformation();\n\t\tif(paneInformation!=null){\n\t\t\tif(paneInformation.isFreezePane()){\n\t\t\t\tsOut.createFreezePane(paneInformation.getVerticalSplitLeftColumn(),paneInformation.getHorizontalSplitTopRow());\n\t\t\t}else{\n\t\t\t\tsOut.createSplitPane(paneInformation.getHorizontalSplitPosition(), paneInformation.getVerticalSplitPosition(), paneInformation.getVerticalSplitLeftColumn(),paneInformation.getHorizontalSplitTopRow(),paneInformation.getActivePane());\n\t\t\t}\n\t\t}\n\t\tcopyPictures(sOut,sIn);\n\t\tsOut.setVerticallyCenter(sIn.getVerticallyCenter());\n\t\tsOut.setHorizontallyCenter(sIn.getHorizontallyCenter());\n\t\tsOut.setDisplayRowColHeadings(sIn.isDisplayRowColHeadings());\n\t\tsOut.setDisplayFormulas(sIn.isDisplayFormulas());\n\t\tsOut.setDisplayZeros(sIn.isDisplayZeros());\n\t\tsOut.setRightToLeft(sIn.isRightToLeft());\n\t\tint [] rowBreaks = sIn.getRowBreaks();\n\t\tint [] colBreaks = sIn.getColumnBreaks();\n\t\tif(rowBreaks!=null){\n\t\t\tfor(int row : rowBreaks){\n\t\t\t\tsOut.setRowBreak(row);\n\t\t\t}\n\t\t}\n\t\tif(colBreaks!=null){\n\t\t\tfor(int column : colBreaks){\n\t\t\t\tsOut.setColumnBreak(column);\n\t\t\t}\n\t\t}\n\t\tsOut.setAutobreaks(sIn.getAutobreaks());\n\t\tsOut.setDefaultRowHeight(sIn.getDefaultRowHeight());\n\t\tsOut.setDefaultRowHeightInPoints(sIn.getDefaultRowHeightInPoints());\n\t\tsOut.setDefaultColumnWidth(sIn.getDefaultColumnWidth());\n\t\tsOut.setRowSumsRight(sIn.getRowSumsRight());\n\t\tsOut.setRowSumsBelow(sIn.getRowSumsBelow());\n\t\tsOut.setDisplayGuts(sIn.getDisplayGuts());\n\t\tsOut.setDisplayGridlines(sIn.isDisplayGridlines());\n\t\tsOut.setRepeatingColumns(sIn.getRepeatingColumns());\n\t\tsOut.setSelected(sIn.isSelected());\n\t\tsOut.setMargin(Sheet.LeftMargin,sIn.getMargin(Sheet.LeftMargin));\n\t\tsOut.setMargin(Sheet.RightMargin,sIn.getMargin(Sheet.RightMargin));\n\t\tsOut.setMargin(Sheet.TopMargin,sIn.getMargin(Sheet.TopMargin));\n\t\tsOut.setMargin(Sheet.BottomMargin,sIn.getMargin(Sheet.BottomMargin));\n\t\tPrintSetup sInPrintSetup = sIn.getPrintSetup();\n\t\tPrintSetup sOutPrintSetup = sOut.getPrintSetup();\n\t\tsOutPrintSetup.setPaperSize(sInPrintSetup.getPaperSize());\n\t\tif(sInPrintSetup.getScale()>10&&sInPrintSetup.getScale()<400)\n\t\t\tsOutPrintSetup.setScale(sInPrintSetup.getScale());\n\t\tsOutPrintSetup.setPageStart(sInPrintSetup.getPageStart());\n\t\tsOutPrintSetup.setFitWidth(sInPrintSetup.getFitWidth());\n\t\tsOutPrintSetup.setFitHeight(sInPrintSetup.getFitHeight());\n\t\tsOutPrintSetup.setLeftToRight(sInPrintSetup.getLeftToRight());\n\t\tsOutPrintSetup.setLandscape(sInPrintSetup.getLandscape());\n\t\tsOutPrintSetup.setValidSettings(sInPrintSetup.getValidSettings());\n\t\tsOutPrintSetup.setNoColor(sInPrintSetup.getNoColor());\n\t\tsOutPrintSetup.setDraft(sInPrintSetup.getDraft());\n\t\tsOutPrintSetup.setNotes(sInPrintSetup.getNotes());\n\t\tsOutPrintSetup.setNoOrientation(sInPrintSetup.getNoOrientation());\n\t\tsOutPrintSetup.setUsePage(sInPrintSetup.getUsePage());\n\t\tsOutPrintSetup.setHResolution(sInPrintSetup.getHResolution());\n\t\tsOutPrintSetup.setVResolution(sInPrintSetup.getVResolution());\n\t\tsOutPrintSetup.setHeaderMargin(sInPrintSetup.getHeaderMargin());\n\t\tsOutPrintSetup.setFooterMargin(sInPrintSetup.getFooterMargin());\n\t\tsOutPrintSetup.setCopies(sInPrintSetup.getCopies());\n\n\t\tHeader sInHeader = sIn.getHeader();\n\t\tHeader sOutHeader = sOut.getHeader();\n\t\tsOutHeader.setCenter(sInHeader.getCenter());\n\t\tsOutHeader.setLeft(sInHeader.getLeft());\n\t\tsOutHeader.setRight(sInHeader.getRight());\n\n\t\tFooter sInFooter = sIn.getFooter();\n\t\tFooter sOutFooter = sOut.getFooter();\n\t\tsOutFooter.setCenter(sInFooter.getCenter());\n\t\tsOutFooter.setLeft(sInFooter.getLeft());\n\t\tsOutFooter.setRight(sInFooter.getRight());\n\t}\n\n\tpublic void copyRowProperties(Row rowOut,Row rowIn,Map fontMap,Map cellStyleMap){\n\t\trowOut.setRowStyle(rowIn.getRowStyle());\n\t\trowOut.setRowNum(rowIn.getRowNum());\n\t\trowOut.setHeight(rowIn.getHeight());\n\t\trowOut.setHeightInPoints(rowIn.getHeightInPoints());\n\t\trowOut.setZeroHeight(rowIn.getZeroHeight());\n\t\tIterator<Cell> cellIt = rowIn.cellIterator();\n\t\twhile (cellIt.hasNext()) {\n\t\t\tCell cellIn = cellIt.next();\n\t\t\tCell cellOut = rowOut.createCell(cellIn.getColumnIndex(), cellIn.getCellType());\n\t\t\trowOut.getSheet().setColumnWidth(cellOut.getColumnIndex(),rowIn.getSheet().getColumnWidth(cellIn.getColumnIndex()));\n\t\t\tcopyCellProperties(cellOut,cellIn,fontMap,cellStyleMap);\n\t\t}\n\n\t}\n\n\tpublic void copyCellProperties(Cell cellOut,Cell cellIn,Map fontMap,Map cellStyleMap){\n\n\t\tWorkbook wbOut = cellOut.getSheet().getWorkbook();\n\t\tHSSFPalette hssfPalette = ((HSSFWorkbook)cellIn.getSheet().getWorkbook()).getCustomPalette();\n\t\tswitch (cellIn.getCellType()) {\n\t\tcase Cell.CELL_TYPE_BLANK:\n\t\t\tbreak;\n\n\t\tcase Cell.CELL_TYPE_BOOLEAN:\n\t\t\tcellOut.setCellValue(cellIn.getBooleanCellValue());\n\t\t\tbreak;\n\n\t\tcase Cell.CELL_TYPE_ERROR:\n\t\t\tcellOut.setCellValue(cellIn.getErrorCellValue());\n\t\t\tbreak;\n\n\t\tcase Cell.CELL_TYPE_FORMULA:\n\t\t\tcellOut.setCellFormula(cellIn.getCellFormula());\n\t\t\tbreak;\n\n\t\tcase Cell.CELL_TYPE_NUMERIC:\n\t\t\tcellOut.setCellValue(cellIn.getNumericCellValue());\n\t\t\tbreak;\n\n\t\tcase Cell.CELL_TYPE_STRING:\n\t\t\tcellOut.setCellValue(cellIn.getStringCellValue());\n\t\t\tbreak;\n\t\t}\n\t\tHSSFCellStyle styleIn = (HSSFCellStyle) cellIn.getCellStyle();\n\t\tXSSFCellStyle styleOut = null;\n\t\tif(cellStyleMap.get(styleIn.getIndex())!=null){\n\t\t\tstyleOut = (XSSFCellStyle)cellStyleMap.get(styleIn.getIndex());\n\t\t}\n\t\telse{\n\t\t\tstyleOut = (XSSFCellStyle) wbOut.createCellStyle();\n\t\t\tstyleOut.setAlignment(styleIn.getAlignment());\n\t\t\tshort fontIndex =  styleIn.getFontIndex();\n\t\t\tFont font = (Font)fontMap.get(fontIndex);\n\t\t\tif(font==null){\n\t\t\t\tfont = wbOut.createFont();\n\t\t\t\tfont.setColor(HSSFColor.BLACK.index);\n\t\t\t\tfontMap.put(font.getIndex(),font);\n\t\t\t}\n\t\t\tDataFormat format = wbOut.createDataFormat();\n\t\t\tstyleOut.setDataFormat(format.getFormat(styleIn.getDataFormatString()));\n\t\t\tHSSFColor forgroundColor = (HSSFColor) styleIn.getFillForegroundColorColor();\n\t\t\tif(forgroundColor!=null){\n\t\t\t\tshort [] foregroundColorValues = forgroundColor.getTriplet();\n\t\t\t\tstyleOut.setFillForegroundColor(new XSSFColor(new java.awt.Color(foregroundColorValues[0], foregroundColorValues[1], foregroundColorValues[2])));\n\t\t\t\tstyleOut.setFillPattern(styleIn.getFillPattern());\n\t\t\t}\n\t\t\tstyleOut.setFillPattern(styleIn.getFillPattern());\n\t\t\tstyleOut.setBorderBottom(styleIn.getBorderBottom());\n\t\t\tstyleOut.setBorderLeft(styleIn.getBorderLeft());\n\t\t\tstyleOut.setBorderRight(styleIn.getBorderRight());\n\t\t\tstyleOut.setBorderTop(styleIn.getBorderTop());\n\t\t\tHSSFColor bottom =  hssfPalette.getColor(styleIn.getBottomBorderColor());\n\t\t\tif(bottom!=null){\n\t\t\t\tshort [] bottomColorArray = bottom.getTriplet();\n\t\t\t\tstyleOut.setBottomBorderColor(new XSSFColor(new java.awt.Color(bottomColorArray[0], bottomColorArray[1], bottomColorArray[2])));\n\t\t\t}\n\t\t\tHSSFColor top =  hssfPalette.getColor(styleIn.getTopBorderColor());\n\t\t\tif(top!=null){\n\t\t\t\tshort []  topColorArray =top.getTriplet();\n\t\t\t\tstyleOut.setTopBorderColor(new XSSFColor(new java.awt.Color(topColorArray[0],topColorArray[1],topColorArray[2])));\n\t\t\t}\n\t\t\tHSSFColor left =  hssfPalette.getColor(styleIn.getLeftBorderColor());\n\t\t\tif(left!=null){\n\t\t\t\tshort [] leftColorArray = left.getTriplet();\n\t\t\t\tstyleOut.setLeftBorderColor(new XSSFColor(new java.awt.Color(leftColorArray[0],leftColorArray[1],leftColorArray[2])));\n\t\t\t}\n\t\t\tHSSFColor right =  hssfPalette.getColor(styleIn.getRightBorderColor());\n\t\t\tif(right!=null){\n\t\t\t\tshort [] rightColorArray= right.getTriplet();\n\t\t\t\tstyleOut.setRightBorderColor(new XSSFColor(new java.awt.Color(rightColorArray[0],rightColorArray[1],rightColorArray[2])));\n\t\t\t}\n\t\t\tstyleOut.setVerticalAlignment(styleIn.getVerticalAlignment());\n\t\t\tstyleOut.setHidden(styleIn.getHidden());\n\t\t\tstyleOut.setIndention(styleIn.getIndention());\n\t\t\tstyleOut.setLocked(styleIn.getLocked());\n\t\t\tstyleOut.setRotation(styleIn.getRotation());\n\t\t\tstyleOut.setShrinkToFit(styleIn.getShrinkToFit());\n\t\t\tstyleOut.setVerticalAlignment(styleIn.getVerticalAlignment());\n\t\t\tstyleOut.setWrapText(styleIn.getWrapText());\n\t\t\tstyleOut.setFont(font);\n\t\t\tcellOut.setCellComment(cellIn.getCellComment());\n\t\t\tcellStyleMap.put(styleIn.getIndex(),styleOut);\n\t\t}\n\t\tcellOut.setCellStyle(styleOut);\n\t}\n\n\n\tprivate void copyPictures(Sheet sOut, Sheet sIn) {\n\t\ttry{\n\t\t\tif(sOut!=null && sIn!=null){\n\t\t\t\tDrawing drawingOld = sIn.createDrawingPatriarch();\n\t\t\t\tDrawing drawingNew = sOut.createDrawingPatriarch();\n\t\t\t\tCreationHelper helper = sOut.getWorkbook().getCreationHelper();\n\n\t\t\t\tif (drawingOld instanceof HSSFPatriarch) {\n\t\t\t\t\tList<HSSFShape> shapes = ((HSSFPatriarch) drawingOld).getChildren();\n\t\t\t\t\tfor (int i = 0; i < shapes.size(); i++) {\n\t\t\t\t\t\tif (shapes.get(i) instanceof HSSFPicture) {\n\t\t\t\t\t\t\tHSSFPicture pic = (HSSFPicture) shapes.get(i);\n\t\t\t\t\t\t\tHSSFPictureData picdata = pic.getPictureData();\n\t\t\t\t\t\t\tint pictureIndex = sOut.getWorkbook().addPicture(picdata.getData(), picdata.getFormat());\n\t\t\t\t\t\t\tClientAnchor anchor = null;\n\t\t\t\t\t\t\tif (pic.getAnchor() != null) {\n\t\t\t\t\t\t\t\tanchor = helper.createClientAnchor();\n\t\t\t\t\t\t\t\tanchor.setDx1(((HSSFClientAnchor) pic.getAnchor()).getDx1());\n\t\t\t\t\t\t\t\tanchor.setDx2(((HSSFClientAnchor) pic.getAnchor()).getDx2());\n\t\t\t\t\t\t\t\tanchor.setDy1(((HSSFClientAnchor) pic.getAnchor()).getDy1());\n\t\t\t\t\t\t\t\tanchor.setDy2(((HSSFClientAnchor) pic.getAnchor()).getDy2());\n\t\t\t\t\t\t\t\tanchor.setCol1(((HSSFClientAnchor) pic.getAnchor()).getCol1());\n\t\t\t\t\t\t\t\tanchor.setCol2(((HSSFClientAnchor) pic.getAnchor()).getCol2());\n\t\t\t\t\t\t\t\tanchor.setRow1(((HSSFClientAnchor) pic.getAnchor()).getRow1());\n\t\t\t\t\t\t\t\tanchor.setRow2(((HSSFClientAnchor) pic.getAnchor()).getRow2());\n\t\t\t\t\t\t\t\tanchor.setAnchorType(((HSSFClientAnchor) pic.getAnchor()).getAnchorType());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdrawingNew.createPicture(anchor, pictureIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (drawingNew instanceof XSSFDrawing) {\n\t\t\t\t\t\tList<XSSFShape> shapes = ((XSSFDrawing) drawingOld).getShapes();\n\t\t\t\t\t\tfor (int i = 0; i < shapes.size(); i++) {\n\t\t\t\t\t\t\tif (shapes.get(i) instanceof XSSFPicture) {\n\t\t\t\t\t\t\t\tXSSFPicture pic = (XSSFPicture) shapes.get(i);\n\t\t\t\t\t\t\t\tXSSFPictureData picdata = pic.getPictureData();\n\t\t\t\t\t\t\t\tint pictureIndex = sOut.getWorkbook().addPicture(picdata.getData(), picdata.getPictureType());\n\t\t\t\t\t\t\t\tXSSFClientAnchor anchor = null;\n\t\t\t\t\t\t\t\tCTTwoCellAnchor oldAnchor = ((XSSFDrawing) drawingOld).getCTDrawing().getTwoCellAnchorArray(i);\n\t\t\t\t\t\t\t\tif (oldAnchor != null) {\n\t\t\t\t\t\t\t\t\tanchor = (XSSFClientAnchor) helper.createClientAnchor();\n\t\t\t\t\t\t\t\t\tCTMarker markerFrom = oldAnchor.getFrom();\n\t\t\t\t\t\t\t\t\tCTMarker markerTo = oldAnchor.getTo();\n\t\t\t\t\t\t\t\t\tanchor.setDx1((int) markerFrom.getColOff());\n\t\t\t\t\t\t\t\t\tanchor.setDx2((int) markerTo.getColOff());\n\t\t\t\t\t\t\t\t\tanchor.setDy1((int) markerFrom.getRowOff());\n\t\t\t\t\t\t\t\t\tanchor.setDy2((int) markerTo.getRowOff());\n\t\t\t\t\t\t\t\t\tanchor.setCol1(markerFrom.getCol());\n\t\t\t\t\t\t\t\t\tanchor.setCol2(markerTo.getCol());\n\t\t\t\t\t\t\t\t\tanchor.setRow1(markerFrom.getRow());\n\t\t\t\t\t\t\t\t\tanchor.setRow2(markerTo.getRow());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdrawingNew.createPicture(anchor, pictureIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tpublic Map createFontForXLSXWorkSheet(Workbook XLSXWorkbook,Workbook XLSWorkbook){\n\t\tMap fontMap =  new HashMap();\n\t\ttry{\n\t\t\tif(XLSXWorkbook!=null && XLSWorkbook!=null){\n\t\t\t\tshort totalNoOfFontsUsed = XLSWorkbook.getNumberOfFonts();\n\t\t\t\tif(totalNoOfFontsUsed!=0){\n\t\t\t\t\tfor(short i=0;i<=totalNoOfFontsUsed;i++){\n\t\t\t\t\t\tFont xlsFont =  XLSWorkbook.getFontAt(i);\n\t\t\t\t\t\tFont xlsxFont = XLSXWorkbook.createFont();\n\t\t\t\t\t\tBeanUtils.copyProperties(xlsxFont, xlsFont);\n\t\t\t\t\t\tfontMap.put(xlsFont.getIndex(), xlsxFont);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(Exception ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t\treturn fontMap;\n\t}\t\n}"}, {"count": 1, "tags": [], "text": "Created attachment 33552\nCode Used for reading or writing", "attachment_id": 33552, "id": 188413, "creator": "sanjaysaini31@gmail.com", "time": "2016-02-14T18:26:10Z", "bug_id": 59002, "creation_time": "2016-02-14T18:26:10Z", "is_private": false}, {"count": 2, "tags": [], "text": "Any one please can help me?", "is_private": false, "id": 188489, "creator": "sanjaysaini31@gmail.com", "time": "2016-02-17T06:04:44Z", "bug_id": 59002, "creation_time": "2016-02-17T06:04:44Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 59002, "attachment_id": null, "is_private": false, "id": 188498, "time": "2016-02-17T12:10:31Z", "creator": "tallison@mitre.org", "creation_time": "2016-02-17T12:10:31Z", "text": "I regret that I can't actually help.  \n\nI agree with your diagnosis, the problem is that POI can't read/open this file either with the event listener model or with your method:\n\nwbIn = new HSSFWorkbook(inputStream); // main culprit of the above exception\n\nWhen I try to open the attached file in Excel, I get an \"Office has detected a problem with this file\" message, and Excel sternly warns me not to edit it.\n\nI don't know enough about the underlying POI/Excel code (ObjRecord,SubRecord) to be able to help."}, {"count": 4, "tags": [], "bug_id": 59002, "text": "Question asked on SO: http://stackoverflow.com/questions/35298310/org-apache-poi-hssf-record-recordformatexception-expected-size-18-but-got-0\n\nResponse there, also: potentially corrupt file, although LibreOffice is able to open it.\n\nNote, too, that from https://www.mail-archive.com/dev@poi.apache.org/msg12584.html, it looks like we used to get this exception from 43493.xls (if I read that list correctly), but we're now getting a different exception for that file.  43493 was closed as \"won't fix\" because the file was corrupt.", "id": 188499, "time": "2016-02-17T12:27:23Z", "creator": "tallison@mitre.org", "creation_time": "2016-02-17T12:27:23Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "text": "I don't think it much use to try to read files which Excel itself marks as \"corrupt\", I strongly suggest you fix how the files are created in the first place to not have to \"fix\" the symptoms of a corrupted file later. Please feel free to submit a patch for this issue if you find out how this can be handled gracefully in POI then we can see if it makes sense to handle this more gracefully in POI.", "id": 189785, "time": "2016-03-29T15:06:35Z", "bug_id": 59002, "creation_time": "2016-03-29T15:06:35Z", "is_private": false}]
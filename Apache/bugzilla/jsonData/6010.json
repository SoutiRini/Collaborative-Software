[{"count": 0, "tags": [], "bug_id": 6010, "attachment_id": null, "text": "I posted a patch to the developer mailing list without response so I'm entering \nit as a bug to see whether it's actually dismissed, resolved, etc.  The bug is \nthat while it should be sufficient for a class to be put in server/lib to be \nloaded in the catalina class loader (where ContainerServlets need to be), \narbitrary ContainerServlets placed into server/lib are _not_ being loaded \nproperly into the catalina class loader due to a hardcoded reference to \nthe 'org.apache.catalina' package in StandardWrapper.java.  This patch resolves \nthe issue by doing an extra classloader load check _only_ when privileged is \nset to true for a context.  Since all we know about a servlet from a web.xml \nfile is its class name as a string, which tells us nothing about interfaces it \nimplements, the only reliable way to see if a servlet is a container servlet is \nto try and load it in the catalina class loader, instantiating the object from \nthat class loader only if it actually implements ContainerServlet, otherwise \nusing the webapp classloader as usual.  Without this resolution it is a major \nhassle to deploy a ContainerServlet in an arbitrary package.\n\n\nIndex: StandardWrapper.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-tomcat-\n4.0/catalina/src/share/org/apache/catalina/core/StandardWrapper.java,v\nretrieving revision 1.35\ndiff -u -r1.35 StandardWrapper.java\n--- StandardWrapper.java\t11 Dec 2001 18:56:03 -0000\t1.35\n+++ StandardWrapper.java\t22 Jan 2002 18:59:00 -0000\n@@ -851,34 +851,44 @@\n         }\n \n         ClassLoader classLoader = loader.getClassLoader();\n+        Class classClass = null;\n \n-        // Special case class loader for a Catalina internal servlet\n-        if (isContainerServlet(actualClass)) {\n-            classLoader = this.getClass().getClassLoader();\n-            log(sm.getString\n-                  (\"standardWrapper.containerServlet\", getName()));\n-        }\n+        //if privileged, try loading in catalina classloader\n+        if (((Context) getParent()).getPrivileged()) {\n+            try {\n+                classLoader = this.getClass().getClassLoader();\n+                Class sClass = classLoader.loadClass(actualClass);\n \n+                if (ContainerServlet.class.isAssignableFrom(sClass)) {\n+                    classClass = sClass;\n+                }\n+\n+                log(sm.getString(\"standardWrapper.containerServlet\", getName\n()));\n+            } catch (ClassNotFoundException e) {}\n+        }\n+        \n         // Load the specified servlet class from the appropriate class loader\n-        Class classClass = null;\n-        try {\n-            if (classLoader != null) {\n-                classClass = classLoader.loadClass(actualClass);\n-            } else {\n-                classClass = Class.forName(actualClass);\n+        if (classClass == null) {\n+            try {\n+                if (classLoader != null) {\n+                    classClass = classLoader.loadClass(actualClass);\n+                } else {\n+                    classClass = Class.forName(actualClass);\n+                }\n+            } catch (ClassNotFoundException e) {\n+                unavailable(null);\n+                throw new ServletException\n+                    (sm.getString(\"standardWrapper.missingClass\", actualClass),\n+                     e);\n             }\n-        } catch (ClassNotFoundException e) {\n-            unavailable(null);\n-            throw new ServletException\n-                (sm.getString(\"standardWrapper.missingClass\", actualClass),\n-                 e);\n         }\n+\n         if (classClass == null) {\n             unavailable(null);\n             throw new ServletException\n                 (sm.getString(\"standardWrapper.missingClass\", actualClass));\n         }\n-\n+        \n         // Instantiate and initialize an instance of the servlet class itself\n         Servlet servlet = null;\n         try {\n@@ -903,9 +913,10 @@\n                               actualClass));\n         }\n \n-        // Special handling for ContainerServlet instances\n+        // Special handling for ContainerServlet instances, if loaded by\n+        // this classloader\n         if ((servlet instanceof ContainerServlet) &&\n-            isContainerServlet(actualClass)) {\n+            classLoader == this.getClass().getClassLoader()) {\n             ((ContainerServlet) servlet).setWrapper(this);\n         }\n \n@@ -1197,22 +1208,6 @@\n     protected void addDefaultMapper(String mapperClass) {\n \n         ;       // No need for a default Mapper on a Wrapper\n-\n-    }\n-\n-\n-    /**\n-     * Return <code>true</code> if the specified class name represents a\n-     * container class that should be loaded by the system class loader.\n-     *\n-     * @param name Name of the class to be checked\n-     */\n-    private boolean isContainerServlet(String classname) {\n-\n-        if (classname.startsWith(\"org.apache.catalina.\"))\n-            return (true);\n-        else\n-            return (false);\n \n     }", "id": 9856, "time": "2002-01-24T15:54:07Z", "creator": "anewberger@plumbdesign.com", "creation_time": "2002-01-24T15:54:07Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 6010, "text": "Craig's patch should fix this (please review it). The current nightly build has\nthe change.", "id": 9968, "time": "2002-01-27T21:17:58Z", "creator": "remm@apache.org", "creation_time": "2002-01-27T21:17:58Z", "tags": [], "is_private": false}]
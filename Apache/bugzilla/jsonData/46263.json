[{"count": 0, "tags": [], "bug_id": 46263, "is_private": false, "id": 122722, "attachment_id": null, "creator": "joekislos@gmail.com", "creation_time": "2008-11-21T08:46:29Z", "time": "2008-11-21T08:46:29Z", "text": "Tomcat reloading of context does not update context path\n\nSeveral years ago I worked on integrating tomcat 5.5 into our web application management infrastructure.  During the process I fixed several tomcat 5.5 bugs, but apparently never sent the fixes upstream.  Oops.\n\nOur application environment requires that we be able to upgrade to a newer version of code for our application without loosing any webrequests.  One major obstacle was fixed with Bug #43683.  Another obstacle is the changing of the docBase of the context itself during the reload.\n\nIf you are running in autoDeploy=\"false\" mode, and you start a context (EG: visit the url of one of the servlets), if you update the docBase in the context xml file on disk, and then reload that context using the tomcat-hostmanager app:\nw3m http://localhost:8180/tomcat-manager/reload?path=/thecontext\n\nThe context will reload, however the new docBase will not be respected.  It will reload the original docBase.\n\nIf you tomcat-manager/stop then tomcat-manager/start, your updates will be respected, but the transfer to the new docBase is not atomic (you will loose requests).\n\nIf you run in autoDeploy=\"true\" mode, the new docBase will be respected, however the transfer to the new docBase is not atomic (you will loose requests)."}, {"count": 1, "tags": [], "creator": "joekislos@gmail.com", "text": "The solution I provide is to allow an additional parameter to the /reload request.  The patch I have provided allows you to supply a \n&war=/path/to/my/new/docPath\n\nparameter, which if supplied, will replace the docpath atomically during the reload process.\n\nThis request could also be fulfilled by actually reloading the context file off of disk, but I was worried that somebody may change more than just the docPath, and I do not know the ramifications of other things being changed in the context file during a reload.\n", "id": 122723, "time": "2008-11-21T08:48:47Z", "bug_id": 46263, "creation_time": "2008-11-21T08:48:47Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": 22911, "bug_id": 46263, "text": "Created attachment 22911\nProposed Patch", "id": 122724, "time": "2008-11-21T08:50:33Z", "creator": "joekislos@gmail.com", "creation_time": "2008-11-21T08:50:33Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "joekislos@gmail.com", "is_private": false, "text": "I can confirm my patch still works on Tomcat 6.0.29", "id": 142145, "time": "2010-11-29T15:07:33Z", "bug_id": 46263, "creation_time": "2010-11-29T15:07:33Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "id": 161344, "creation_time": "2012-08-13T16:11:20Z", "time": "2012-08-13T16:11:20Z", "bug_id": 46263, "text": "If you want to re-name the context AND install a new copy of it, why not just deploy a completely new copy of the webapp on the new context path, then undeploy the old one at your leisure?", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 46263, "text": "This feature request is covered by parallel deployment available in Tomcat 7 onwards.", "id": 168240, "time": "2013-07-02T18:12:32Z", "creator": "markt@apache.org", "creation_time": "2013-07-02T18:12:32Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 46263, "text": "To answer Christopher Schultz:\n  We are try to upgrade a web application from one build to a newer build, so we would want to use the same URL, but with the newer version of the application, and we do not want to loose any requests when the transition is happening.  So we can't undeploy and redeploy.\n\nTo answer Mark Thomas:\n  We looked into the parallel code deployment feature of Tomcat 7, and it is a very clever way to solve this issue.  I suspect it will be sufficient for most people.  However in our case we do need fine-grained control of the starting and stopping of a specific version of the application.  We handle long-running requests in a special manner in the servlet destroy() and we know the new code is not deployed prior to them being serviced or 'dealt with'.  We also synchronize code upgrades with other non-servlet deployments of the code base, so having 'old' or 'unknown' versions of the servlet running out there is not something that works for us.  Our deployment mechanism communicates with a number of different components, tomcat being just one, and knowing the specific state of each server is important.\n\nI am reopening this bug/feature request, because I believe it is beneficial for tomcat to have this capability, and it is a capability present in the application server we migrated from (and I suspect is a common capability in other application servers).  I am attaching an updated patch that applies to Tomcat 7.0.42.  \n\nMark, if your opinion Tomcat is better without this capability, feel free to re-close as wontfix and I won't be offended.  :)", "id": 171199, "time": "2013-11-13T01:07:12Z", "creator": "joekislos@gmail.com", "creation_time": "2013-11-13T01:07:12Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 46263, "is_private": false, "id": 171200, "attachment_id": 31039, "creator": "joekislos@gmail.com", "creation_time": "2013-11-13T01:08:02Z", "time": "2013-11-13T01:08:02Z", "text": "Created attachment 31039\n7.0.42 patch"}, {"count": 8, "tags": [], "bug_id": 46263, "attachment_id": null, "is_private": false, "id": 171218, "time": "2013-11-14T13:41:44Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-11-14T13:41:44Z", "text": "Your patch looks okay to me with one minor exception: it would be better to use the StringManager for strings instead of hard-coded ones. Look for uses of \"sm.getString\" for examples.\n\nOn the other hand, I'm not sure how it makes much of a difference to deploy MY-GREAT-APP-v1.2.3.4.war instead of MY-GREAT-APP#1.2.3.4.war.\n\nAlso, if I'm not mistaken, the patch you have written does not allow for parallel deployment: it will essentially perform an undeploy/redeploy. During the \"reload\", clients will experience at least a pause."}, {"count": 9, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 188214, "creation_time": "2016-02-04T12:26:44Z", "time": "2016-02-04T12:26:44Z", "bug_id": 46263, "text": "Sorry it has taken us so long to get back to this.\n\nSince this issue was raised, we have clarified Tomcat's expected behavior in a number of scenarios. That is documented here:\nhttp://tomcat.apache.org/tomcat-9.0-doc/config/automatic-deployment.html\n(adjust for your preferred version although it should be the same for 7, 8 and 9)\n\nIf the context.xml file is modified then the application has to be redeployed. Redeployment does mean there is a small gap where requests may get lost. Parallel deployment is the solution offered to this problem.\n\nFor your specific use case you should be able to use the deploy command with the update option. The follopwing should work:\n- test.war in webapps\n- conf/Catalina/localhost/test.xml created (can just contain <Context />\n- Use the text manager interface and do:\nhttp://localhost:8080/manager/text/deploy?war=file:/d:/test1.war&path=/test&update=true\n\nThat should:\n- replace webapps/test.war with d:/test2.war (test2.war will be renamed to test.war)\n- trigger a reload\n\nIt will work best is unpackWARs is true.\n\nThe autodeployment process is already fairly complex and I believe your use case can be met with existing functionality so I am (finally) resolving this as WONTFIX.", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 164277, "time": "2012-12-28T20:51:07Z", "bug_id": 54357, "creation_time": "2012-12-28T20:51:07Z", "is_private": false, "text": "Reason for crash: the stapling code in mod_ssl implements a free_func which it registers in OpenSSL as a function pointer. After restart, the function address registered during the original startup is still used, because the OpenSSL libs were not reloaded, but due to a different module load order, mod_ssl.so was loaded at another address. The function pointer points to memory now used for other stuff and calling the function there crashes.\n\nIt seems in my config the OpenSSL libs don't get reloaded during restart, so still hold the original reference.\n\nStack:\n\n#0  0xfee71920 in ?? ()\n#1  0xfec4c91c in int_free_ex_data (class_index=<optimized out>, obj=0x1cfc48, ad=0x1cfc60) at ex_data.c:522\n#2  0xfec4c65c in CRYPTO_free_ex_data (class_index=class_index@entry=10, obj=obj@entry=0x1cfc48, ad=ad@entry=0x1cfc60) at ex_data.c:592\n#3  0xfeced474 in x509_cb (operation=operation@entry=3, pval=pval@entry=0xffbfd68c, it=it@entry=0xfed9c358, exarg=exarg@entry=0x0) at x_x509.c:113\n#4  0xfecf2a30 in asn1_item_combine_free (pval=0xffbfd68c, it=0xfed9c358, combine=0) at tasn_fre.c:173\n#5  0xfecf2c38 in ASN1_item_free (val=0x1cfc48, it=0xfed9c358) at tasn_fre.c:71\n#6  0xfe9ccf74 in ssl_pphrase_Handle (s=0xb8ee0, p=0xf3e08) at ssl_engine_pphrase.c:295\n#7  0xfe9c13cc in ssl_init_Module (p=0x93c48, plog=<optimized out>, ptemp=0xf3e08, base_server=0xb8ee0) at ssl_engine_init.c:368\n#8  0x0004ae0c in ap_run_post_config (pconf=pconf@entry=0x93c48, plog=0xeabd8, ptemp=0xf3e08, s=0xb8ee0) at config.c:105\n#9  0x00065b98 in main (argc=5, argv=0xffbff90c) at main.c:765\n\nThe address 0xfee71920 after the restart lies between two memory segments used by the prefork MPM:\n\nFEE60000      24K r-x--  /shared/build/autobuild/install/apache24-2.4.4_dev_r1422615_1.0.1csp1-X3.solaris10.sparc/modules/mod_mpm_prefork.so\nFEE74000      16K rwx--  /shared/build/autobuild/install/apache24-2.4.4_dev_r1422615_1.0.1csp1-X3.solaris10.sparc/modules/mod_mpm_prefork.so\n\n\nDirectly after the original apache start it is in the region occupied by mod_ssl:\n\nFEE50000     192K r-x--  /shared/build/autobuild/install/apache24-2.4.4_dev_r1422615_1.0.1csp1-X3.solaris10.sparc/modules/mod_ssl.so\nFEE8E000      16K rwx--  /shared/build/autobuild/install/apache24-2.4.4_dev_r1422615_1.0.1csp1-X3.solaris10.sparc/modules/mod_ssl.so\n\nThe problematic code is in modules/ssl/ssl_util_stapling.c (trunk and 2.4):\n\n 68 static int stapling_ex_idx = -1;\n 69\n 70 void ssl_stapling_ex_init(void)\n 71 {\n 72     if (stapling_ex_idx != -1)\n 73         return;\n 74     stapling_ex_idx = X509_get_ex_new_index(0, \"X509 cached OCSP info\", 0, 0,\n 75                                             certinfo_free);\n 76 }\n\nIt registers the function certinfo_free in OpenSSL via a function pointer. The function is implemented in mod_ssl (ssl_util_stapling.c) which can be loaded into another adress range after restart (when linked dynamically). Then the pointer is no longer valid:\n\nAH00060: seg fault or similar nasty error detected in the parent process\n\nCurrently I don't know how o fix that:\n\n- there seems to be no API to remove an index once registered.\n- there seems to be no API to set the free_func to a new value for an existing index (maybe I didn't look thorougly enough)\n\nNote that furthermore there's a slight order problem in ssl_init_Module: it first calls ssl_pphrase_Handle(), then ssl_stapling_ex_init(). After restart, the call to ssl_pphrase_Handle() already triggers the problem before the next ssl_stapling_ex_init() could fix it.\n\nModules and libs are build as DSOs, but it seems only the modules get reloaded but not the SSL libs.\n\nReproducible by running start-restart-stop in a loop. No requests need to be send. Another scenario is adding modules to the LoadModule list before restart.\n\nConfig used (a more complex config makes the crash happen more frequently):\n\nDefine base \"/path/to/my/apache/installation\"\nDefine user \"myuser\"\nDefine group \"mygroup\"\nDefine sslport \"8443\"\nDefine cert \"snakeoil-rsa\"\n\nServerRoot \"${base}\"\nServerName \"www.snakeoil.dom\"\nListen ${sslport}\n\nLoadModule socache_shmcb_module modules/mod_socache_shmcb.so\nLoadModule slotmem_shm_module modules/mod_slotmem_shm.so\nLoadModule authz_core_module modules/mod_authz_core.so\nLoadModule log_config_module modules/mod_log_config.so\nLoadModule env_module modules/mod_env.so\nLoadModule setenvif_module modules/mod_setenvif.so\nLoadModule session_module modules/mod_session.so\nLoadModule session_crypto_module modules/mod_session_crypto.so\nLoadModule ssl_module modules/mod_ssl.so\nLoadModule mpm_prefork_module modules/mod_mpm_prefork.so\nLoadModule unixd_module modules/mod_unixd.so\n\n<IfModule unixd_module>\n  User ${user}\n  Group ${group}\n</IfModule>\n\n<IfModule ssl_module>\n  SSLPassPhraseDialog  builtin\n  SSLSessionCache        \"shmcb:run/ssl_scache.base(512000)\"\n  SSLSessionCacheTimeout  300\n  SSLRandomSeed startup builtin\n  SSLRandomSeed connect builtin\n</IfModule>\n\n<VirtualHost _default_:${sslport}>\n  SSLEngine on\n  SSLCertificateFile \"conf/ssl.crt/${cert}.crt\"\n  SSLCertificateKeyFile \"conf/ssl.key/${cert}.key\"\n</VirtualHost>"}, {"count": 1, "tags": [], "bug_id": 54357, "attachment_id": null, "text": "(In reply to comment #0)\n> Modules and libs are build as DSOs, but it seems only the modules get\n> reloaded but not the SSL libs.\n\nA workaround may be to add a function to apr-util that allows to unload all crypto drivers and call that function on restart. Or make apr-util unload the driver when the pool passed to apr_crypto_get_driver() is destroyed (doing refcounting to ensure that no user of the driver remains). This also requires changes in apu_dso.c, though.", "id": 164302, "time": "2013-01-01T15:55:12Z", "creator": "sf@sfritsch.de", "creation_time": "2013-01-01T15:55:12Z", "is_private": false}, {"count": 2, "tags": [], "creator": "minfrin@sharp.fm", "attachment_id": null, "id": 170596, "time": "2013-10-13T13:42:07Z", "bug_id": 54357, "creation_time": "2013-10-13T13:42:07Z", "is_private": false, "text": "My understanding is that openssl implements reference counting itself to handle being configured two or more times.\n\nIf mod_ssl is registering a function pointer with openssl, it should be deregistering that pointer in a cleanup in a suitable pool. mod_ssl cannot assume it is the only consumer of openssl in the server."}, {"attachment_id": null, "tags": [], "bug_id": 54357, "text": "(In reply to Graham Leggett from comment #2)\n> If mod_ssl is registering a function pointer with openssl, it should be\n> deregistering that pointer in a cleanup in a suitable pool. mod_ssl cannot\n> assume it is the only consumer of openssl in the server.\n\nAs I wrote originally:\n\n- there seems to be no API to remove an index once registered.\n- there seems to be no API to set the free_func to a new value for an existing index (maybe I didn't look thorougly enough)\n\nSo it is unclear to me how mod_ssl can deregister the pointer in OpenSSL. I didn't find am appropriate call in the OpenSSL API.", "count": 3, "id": 170598, "time": "2013-10-13T14:37:54Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2013-10-13T14:37:54Z", "is_private": false}, {"count": 4, "tags": [], "creator": "alp@rsu.ru", "attachment_id": null, "id": 174587, "time": "2014-04-15T11:23:15Z", "bug_id": 54357, "creation_time": "2014-04-15T11:23:15Z", "is_private": false, "text": "32-bit/x86 Apache 2.4 crashes at startup on OpenIndiana (illumos distribution) with similar stack trace when ssl is enabled. 64 bit apache 2.4 is not affected.\nApache 2.2 (both 32-bit and 64 bit) are not affected.\n\n(gdb) bt\n#0  0xfeaf9d40 in ?? ()\n#1  0xfe99dd5c in int_free_ex_data () from /lib/libcrypto.so.1.0.0\n#2  0xfe99daea in CRYPTO_free_ex_data () from /lib/libcrypto.so.1.0.0\n#3  0xfea1df45 in x509_cb () from /lib/libcrypto.so.1.0.0\n#4  0xfea22a39 in asn1_item_combine_free () from /lib/libcrypto.so.1.0.0\n#5  0xfea22c33 in ASN1_item_free () from /lib/libcrypto.so.1.0.0\n#6  0xfea1e132 in X509_free () from /lib/libcrypto.so.1.0.0\n#7  0xfe524657 in ssl_pphrase_Handle (s=0x8117ab8, p=0x811bb60) at /export/home/alp/srcs/oi-userland/components/apache24/httpd-2.4.7/modules/ssl/ssl_engine_pphrase.c:116\n#8  0xfe51183e in ssl_init_Module (p=0x80f2870, plog=0x8119b58, ptemp=0x811bb60, base_server=0x8117ab8) at /export/home/alp/srcs/oi-userland/components/apache24/httpd-2.4.7/modules/ssl/ssl_engine_init.c:54\n#9  0x0809f33b in ap_run_post_config (pconf=0x80f2870, plog=0x8119b58, ptemp=0x811bb60, s=0x8117ab8) at /export/home/alp/srcs/oi-userland/components/apache24/httpd-2.4.7/server/config.c:87\n#10 0x0807c5ff in main (argc=3, argv=0x8047d9c) at /export/home/alp/srcs/oi-userland/components/apache24/httpd-2.4.7/server/main.c:333"}, {"count": 5, "tags": [], "creator": "alp@rsu.ru", "attachment_id": null, "id": 174590, "time": "2014-04-15T12:37:43Z", "bug_id": 54357, "creation_time": "2014-04-15T12:37:43Z", "is_private": false, "text": "My issue was fixed after updating from 2.4.7 to apache 2.4.9."}, {"count": 6, "tags": [], "bug_id": 54357, "attachment_id": null, "text": "*** Bug 56919 has been marked as a duplicate of this bug. ***", "id": 177721, "time": "2014-09-11T06:09:52Z", "creator": "rpluem@apache.org", "creation_time": "2014-09-11T06:09:52Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 54357, "text": "Note (as per 56519 which is a duplicate of this), this bug can be triggered at start as well as at reload / restart.", "id": 177722, "time": "2014-09-11T06:25:45Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-11T06:25:45Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "creator": "alex@alex.org.uk", "attachment_id": null, "text": "In https://issues.apache.org/bugzilla/show_bug.cgi?id=56919 (now marked as a dupe of this bug), Kaspar Brand said:\n\n> Getting rid of ex_data might be cleaner in the end, and was actually one\n> of Joe's questions on the dev list in October 2009:\n>\n>https://mail-archives.apache.org/mod_mbox/httpd-dev/200910.mbox/%3C20091025200721.GA20714@redhat.com%3E\n\nJoe Orton appears to have predicted this with remarkable prescience:\n\n> 1) the use of an ex_data structure attached to the X509 * to store the \n> stapling-specific state seems unnecessary.  Was there a reason why you \n> did this rather than simply extending the modssl_pk_server_t structure? \n> (The ex_data indices have historically been a nightmare with mod_ssl due \n> to the fact that OpenSSL might get unloaded from memory during startup, \n> and any cached copies of the index values outside of OpenSSL may or may \n> not be reliable.  Global state == bad!)\n\nI am certainly not an expert either in apache or OCSP but I agree this looks like the way to go.\n\nI found the code a little incomprehensible as the ex_data stuff is pretty opaque as far as I'm concerned, but if this is the way people think it should be fixed I could take a look. Any hints about how this bit works would be appreciated.", "id": 177753, "time": "2014-09-11T14:40:09Z", "bug_id": 54357, "creation_time": "2014-09-11T14:40:09Z", "is_private": false}, {"count": 9, "attachment_id": 32010, "bug_id": 54357, "is_private": false, "id": 177792, "time": "2014-09-12T09:06:54Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-12T09:06:54Z", "tags": [], "text": "Created attachment 32010\nProof of concept patch to address the issue\n\nAttached is a proof of concept patch to address the issue. This moves the storage of the stapling information to the modssl_pk_server_t structure, and out of X509 ex_data, which is the source of the issue. It thus has a server lifetime.\n\nPlease note this is COMPILE TESTED ONLY. IE I have not checked whether it actually works at all. Also note that I am almost entirely unfamiliar with OCSP.\n\nI have assumed that one set of stapling information per certificate is required, not per certificate algorithm (i.e. we do not need an array).\n\nFeedback appreciated."}, {"count": 10, "tags": [], "creator": "asfbugz@velox.ch", "attachment_id": null, "text": "(In reply to Alex Bligh from comment #9)\n> I have assumed that one set of stapling information per certificate is\n> required, not per certificate algorithm (i.e. we do not need an array).\n\nThank you for looking into this. A couple of comments:\n\n- Your patch is against 2.4.7 I assume. In 2.4.8, major changes were done in the area of server certificate configuration (r1573360), i.e. there is no longer a fixed limit of three certificates (RSA/DSA/ECC) per SSL_CTX.\n\n- OCSP stapling (RFC 6066, section 8) is a per-certificate feature, actually, so we need to make sure that we have a per-certificate store (not a per-modssl_pk_server_t one only) for the certinfo struct.\n\n- Using an array which parallels the current \"cert_files\" in the modssl_pk_server_t struct might be sufficient for the time being, though I'm reluctant to say that it's futureproof. If RFC 6961 (\"Multiple Certificate Status Request Extension\") support becomes available in OpenSSL one day, there would be a need to have a certinfo struct attached to each certificate in the chain.\n\n- It would be best to write the patch against trunk, after which it can be proposed for backport to 2.4.x.", "id": 177852, "time": "2014-09-14T08:08:27Z", "bug_id": 54357, "creation_time": "2014-09-14T08:08:27Z", "is_private": false}, {"count": 11, "tags": [], "creator": "alex@alex.org.uk", "attachment_id": null, "id": 177853, "time": "2014-09-14T09:50:03Z", "bug_id": 54357, "creation_time": "2014-09-14T09:50:03Z", "is_private": false, "text": "Yes, it's against 2.4.7.\n\nRe it being per certificate: any idea what the best way is to get back to a certificate index from the information available in the callback? Or, given your third comment, if I build some sort of associative array, what would be the best key into it? Obviously (e.g.) the CN would not be an appropriate key."}, {"count": 12, "tags": [], "bug_id": 54357, "attachment_id": null, "text": "(In reply to Alex Bligh from comment #11)\n> if I build some sort of associative array, what would be the best key into it?\n\nIn a well-behaving X.509 PKI, a certificate is uniquely identified by the issuer name and serial number (RFC 5280, section 4.1.2.2). In the real world, this might not always be the case, so a hash over the certificate's DER encoding is more reliable (it is also what the stapling code in mod_ssl currently uses as a key for its cache). You can get at the certificate in the callback via SSL_get_certificate(), and then use X509_digest() to derive that key.", "id": 177861, "time": "2014-09-14T16:59:53Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-09-14T16:59:53Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 54357, "attachment_id": 32021, "text": "Created attachment 32021\nv2 Proof of concept patch to address the issue\n\nAttached is a revised proof of concept patch to address the issue. This moves the storage of the stapling information to the modssl_pk_server_t structure, and out of X509 ex_data, which is the source of the issue. It thus has a server lifetime.\n\nPlease note this is COMPILE TESTED ONLY. IE I have not checked whether it actually works at all. Also note that I am almost entirely unfamiliar with OCSP.\n\nThis addresses the following comments:\n\n- The patch is now against trunk\n\n- Rather than storing one set of stapling info per modssl_pk_server_t, there is now a hash based on the SHA1 digest of the certificate data\n\n- It's also even smaller than the previous attempt", "id": 177864, "time": "2014-09-14T20:15:19Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-14T20:15:19Z", "is_private": false}, {"count": 14, "attachment_id": null, "bug_id": 54357, "is_private": false, "id": 177959, "time": "2014-09-18T17:31:16Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-18T17:31:16Z", "tags": [], "text": "Any feedback on the above?"}, {"count": 15, "tags": [], "bug_id": 54357, "attachment_id": null, "is_private": false, "id": 177991, "time": "2014-09-21T07:46:31Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-09-21T07:46:31Z", "text": "(In reply to Alex Bligh from comment #14)\n> Any feedback on the above?\n\nIt's on the right track, I think. Comments about v2:\n\n- Keying the array/hash on the cert's SHA-1 digest is fine. What it also means is that we don't need to store it on a per-vhost basis (modssl_pk_server_t), it's sufficient to put it into SSLModConfigRec (similar to stapling_cache, this also avoids duplicate storage in case a certificate is used for more than one vhost). I would suggest to rename it to \"stapling_cert_info\", furthermore, to make its specific purpose more explicit.\n\n- Initialization, i.e. apr_hash_make(), is best done in ssl_engine_config.c (in ssl_config_global_create() in this case). You don't need to check for apr_hash_make() or apr_pcalloc() failures, since httpd configures a global OOM handler for these APR failures.\n\n- In ssl_stapling_init_cert(), there's a simpler way of achieving memory management by APR: instead of\n\n    if (aia) {\n        /* Ugly: ensure memory managed by apr */\n        char *uri;\n        uri = sk_OPENSSL_STRING_pop(aia);\n        cinf->uri = apr_pstrdup(p, uri);\n        OPENSSL_free(uri);\n    }\n\nyou can simply say:\n\n    if (aia) {\n        cinf->uri = apr_pstrdup(p, sk_OPENSSL_STRING_value(aia, 0));\n        X509_email_free(aia);\n    }\n\n  (Make sure to free \"aia\" - the \"1\" in X509_get1_ocsp(x) means that you own the copy.)\n\n- In stapling_get_cert_info(), I suggest to check for X509_digest() returning 1 before proceeding, e.g.:\n\n    if ((x == NULL) || (X509_digest(x, EVP_sha1(), idx, NULL) != 1))\n        return NULL;\n\n- In the certinfo struct, I wonder if we still need to explicitly keep the \"idx\" member, as we have to calculate the SHA-1 hash on the fly in stapling_get_cert_info() anyway. Could you try to figure out if dropping \"idx\" from the struct is feasible? (BTW, instead of using \"20\", I would prefer SHA_DIGEST_LENGTH being used, and the \"Cached info stored in certificate ex_info\" comment should be reworded.)\n\n- In ssl_engine_init.c, there's a second call of ssl_stapling_init_cert() which needs adjustment as well (for the OpenSSL 1.0.2 or later case).\n\n- Also remove the ssl_stapling_ex_init() declaration from ssl_private.h.\n\nThanks for your work on getting this fixed, much appreciated."}, {"count": 16, "attachment_id": null, "bug_id": 54357, "text": "Kaspar,\n\nThanks for this.\n\nI thought about moving to a global ssl stapling info hash. My concern about doing this was two fold.\n\n1. Does the OCSP somehow requires a state per vhost - for instance what happens if 2 sites have a different stapling_force_url for the same certificate? As SSLStaplingForceURL is a vhost ctx directive, wouldn't this introduce a back compatibility problem?\n\n2. Does this work with apache's threading model without further mutexes? Do I then need to worry about concurrent accesses to the stapling info in a way I didn't before?\n\n3. If I make this change, presumably the check for \"\"ssl_stapling_init_cert: certificate already initialized!\"\" should go.\n\nMainly because of (1), I'm tempted to do this without the change in scope of the stapling info (i.e. to keep it at a vhost level).\n\nDoes that make sense?\n\nAlex", "id": 177992, "time": "2014-09-21T08:24:31Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-21T08:24:31Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "text": "Created attachment 32035\nv3 Proof of concept patch to address the issue\n\nAttached is v3 of the proof of concept patch. Details below:\n\n    (v3) Remove OCSP stapling info from X509 ex_data\n\n    Remove OSCP stapling info from X509 ex_data, and manage it within\n    normal APR pools with server lifecyle. This is to address BZ 54357\n    and BZ 56919. Introduce a hash of stapling info indexed by the\n    SHA1 hash of the certificate content.\n\n    Note this code as been compile tested only at this stage and\n    is submitted as a proof of concept.\n\n    Changes since v2:\n    * change stapling_info to stapling_cert_info\n    * move init of stapling_cert_info hash to modssl_ctx_init_server\n    * Drop unnecessary memory allocation failure checks\n    * Simply extraction of uri string into apr memory management\n    * Free aia structure\n    * In stapling_get_cert_info check for X509_digest failure\n    * Use SHA_DIGEST_LENGTH not hardcoded 20\n    * Fix up second call to ssl_stapling_init_cert\n    * Remove ssl_stapling_ex_init() declaration from ssl_private.h\n\n    Changes NOT done since v2 that were suggested by Kaspar Brand\n\n    * move stapling_cert_info to SSLModConfigRec. Reasons include the\n      fact that SSLStaplingForceURL etc are per vHost.\n\n    * Drop use of idx member from cert_info structure. Reason: the\n      index to the apr hash structure has to be held somewhere for all\n      the recorded certificates. Whilst we do calculate the SHA1 hash\n      on the fly, the apr hash algorithm needs something to compare it\n      to (i.e. the SHA1s of all the recorded certificates) so it can\n      index the correct URI. As the SHA1 value needs to be stored\n      somewhere for each certificate, it might as well be stored in\n      the struct. It's possible I've misunderstood what Kaspar was\n      suggesting here.", "attachment_id": 32035, "bug_id": 54357, "id": 177993, "time": "2014-09-21T09:05:33Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-21T09:05:33Z", "is_private": false}, {"attachment_id": 32036, "tags": [], "bug_id": 54357, "text": "Created attachment 32036\nv3 Proof of concept patch to address the issue (with signed-of-by)\n\nThis time with Signed-Off-By line.", "count": 18, "id": 177994, "time": "2014-09-21T09:09:56Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-21T09:09:56Z", "is_private": false}, {"count": 19, "attachment_id": null, "bug_id": 54357, "is_private": false, "id": 178001, "time": "2014-09-21T10:12:55Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-09-21T10:12:55Z", "tags": [], "text": "(In reply to Alex Bligh from comment #16)\n> 1. Does the OCSP somehow requires a state per vhost - for instance what\n> happens if 2 sites have a different stapling_force_url for the same\n> certificate? As SSLStaplingForceURL is a vhost ctx directive, wouldn't this\n> introduce a back compatibility problem?\n\nNo, it doesn't. stapling_renew_response() favors stapling_force_url over all certs for a given vhost, i.e. any OCSP URI from stapling_cert_info (i.e. the cert itself) is ignored in this case.\n\n> 2. Does this work with apache's threading model without further mutexes? Do\n> I then need to worry about concurrent accesses to the stapling info in a way\n> I didn't before?\n\nstapling_cert_info is basically an \"init-once\" thing - i.e., it's only populated at startup (in ssl_init_server_certs()) and therefore different from the stapling_cache.\n\n> 3. If I make this change, presumably the check for \"\"ssl_stapling_init_cert:\n> certificate already initialized!\"\" should go.\n\nYes, exactly, I was expecting you to figure this out.\n\n(In reply to Alex Bligh from comment #17)\n>     * Drop use of idx member from cert_info structure. Reason: the\n>       index to the apr hash structure has to be held somewhere for all\n>       the recorded certificates. Whilst we do calculate the SHA1 hash\n>       on the fly, the apr hash algorithm needs something to compare it\n>       to (i.e. the SHA1s of all the recorded certificates) so it can\n>       index the correct URI. As the SHA1 value needs to be stored\n>       somewhere for each certificate, it might as well be stored in\n>       the struct. It's possible I've misunderstood what Kaspar was\n>       suggesting here.\n\nPreviously the SHA-1 hash was used as a key for the OCSP response cache (mc->stapling_cache), and as there was ex_info attached to each certificate, it was convenient to have it only calculated once. But now that we always have to calculate the hash in stapling_cb()/stapling_get_cert_info() anyway, we could just pass it directly to stapling_cache_response() and stapling_get_cached_response() (these are the only places where cinf->idx is still used) and avoid the reduntant storage. I.e., you could merge the code from staping_get_cert_info() right into stapling_cb() and use a local \"idx\" which you would pass as an argument to stapling_get_cached_response() and stapling_renew_response() (which in turn would supply it to stapling_cache_response())."}, {"count": 20, "tags": [], "bug_id": 54357, "attachment_id": null, "is_private": false, "id": 178002, "time": "2014-09-21T10:41:21Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-21T10:41:21Z", "text": "(In reply to Kaspar Brand from comment #19)\n> (In reply to Alex Bligh from comment #16)\n> > 1. Does the OCSP somehow requires a state per vhost - for instance what\n> > happens if 2 sites have a different stapling_force_url for the same\n> > certificate? As SSLStaplingForceURL is a vhost ctx directive, wouldn't this\n> > introduce a back compatibility problem?\n> \n> No, it doesn't. stapling_renew_response() favors stapling_force_url over all\n> certs for a given vhost, i.e. any OCSP URI from stapling_cert_info (i.e. the\n> cert itself) is ignored in this case.\n\nOh I see. So ssl_stapling_init_cert remains done once (or more) per\nvhost, but we use a per SSL server cache. We keep the check for no\nstapling URI and no force URI *on that server*, then if the cert\nhas no URI we error if any of the vhosts using that cert have no\nforce URI.\n\nPresumably I then need to use the global SSL state's pool rather than\nthe server pool, which means I can drop the changes to pass pool in\nand use (I presume) myModConfig(s)->pPool or similar.\n\n\n> (In reply to Alex Bligh from comment #17)\n> >     * Drop use of idx member from cert_info structure. Reason: the\n> >       index to the apr hash structure has to be held somewhere for all\n> >       the recorded certificates. Whilst we do calculate the SHA1 hash\n> >       on the fly, the apr hash algorithm needs something to compare it\n> >       to (i.e. the SHA1s of all the recorded certificates) so it can\n> >       index the correct URI. As the SHA1 value needs to be stored\n> >       somewhere for each certificate, it might as well be stored in\n> >       the struct. It's possible I've misunderstood what Kaspar was\n> >       suggesting here.\n> \n> Previously the SHA-1 hash was used as a key for the OCSP response cache\n> (mc->stapling_cache), and as there was ex_info attached to each certificate,\n> it was convenient to have it only calculated once. But now that we always\n> have to calculate the hash in stapling_cb()/stapling_get_cert_info() anyway,\n> we could just pass it directly to stapling_cache_response() and\n> stapling_get_cached_response() (these are the only places where cinf->idx is\n> still used) and avoid the reduntant storage. I.e., you could merge the code\n> from staping_get_cert_info() right into stapling_cb() and use a local \"idx\"\n> which you would pass as an argument to stapling_get_cached_response() and\n> stapling_renew_response() (which in turn would supply it to\n> stapling_cache_response()).\n\nI get the feeling I'm being dumb here.\n\nYes, I understand that the code does not use cinf->idx /afterwards/ save\nwhere you point out and if it did it could simply use the locally generated\nidx. Or to put it another way, before my changes we could have locally\ngenerated idx with an X.509 digest in stapling_cb()/stapling_get_cert_info().\n\nHowever, now we are using stapling_cert_info, that no longer holds true (I\nthink). That's because we need to store the SHA1 of each certificate somewhere\nanyway, because those SHA1 values (now) form the key to the stapling_cert_info\nhash. IE when we create the local X.509 SHA1, we then need to go through\neach of the cert_info structures within the apr hash to determine which ones\nmatch, so we can get access to the OTHER fields within cert_info. Therefore\nthe SHA1 of each certificate needs to be stored somewhere with a reference\nto the relevant cert_info structure, and as good a place as any is to store\nit within the cert_info structure itself - partly because that's minimum\ncode change, and partly because frankly where else are you going to store it?\nI suppose I am assuming (possible wrongly) that apr_hash_set isn't actually\nmaking a copy of the key here.\n\nAgain, perhaps I'm missing the point here."}, {"count": 21, "tags": [], "creator": "alex@alex.org.uk", "attachment_id": 32037, "id": 178003, "time": "2014-09-21T10:58:39Z", "bug_id": 54357, "creation_time": "2014-09-21T10:58:39Z", "is_private": false, "text": "Created attachment 32037\nv4 Proof of concept patch to address the issue\n\nv4 Proof of concept patch to address the issue:\n\n    (v4) Remove OCSP stapling info from X509 ex_data\n\n    Remove OSCP stapling info from X509 ex_data, and manage it within\n    normal APR pools with SSLModConfigRec lifecyle. This is to address\n    BZ 54357 and BZ 56919. Introduce a hash of stapling info indexed\n    by the SHA1 hash of the certificate content.\n\n    Note this code as been compile tested only at this stage and\n    is submitted as a proof of concept.\n\n    Changes since v3:\n    * move stapling_cert_info to SSLModConfigRec\n\n    Changes since v2:\n    * change stapling_info to stapling_cert_info\n    * move init of stapling_cert_info hash to modssl_ctx_init_server\n    * Drop unnecessary memory allocation failure checks\n    * Simply extraction of uri string into apr memory management\n    * Free aia structure\n    * In stapling_get_cert_info check for X509_digest failure\n    * Use SHA_DIGEST_LENGTH not hardcoded 20\n    * Fix up second call to ssl_stapling_init_cert\n    * Remove ssl_stapling_ex_init() declaration from ssl_private.h\n\n    Changes NOT done since v3 that were suggested by Kaspar Brand\n\n    * Drop use of idx member from cert_info structure. Reason: the\n      index to the apr hash structure has to be held somewhere for all\n      the recorded certificates. Whilst we do calculate the SHA1 hash\n      on the fly, the apr hash algorithm needs something to compare it\n      to (i.e. the SHA1s of all the recorded certificates) so it can\n      index the correct URI. As the SHA1 value needs to be stored\n      somewhere for each certificate, it might as well be stored in\n      the struct. It's possible I've misunderstood what Kaspar was\n      suggesting here."}, {"count": 22, "attachment_id": null, "creator": "asfbugz@velox.ch", "text": "(In reply to Alex Bligh from comment #20)\n> However, now we are using stapling_cert_info, that no longer holds true (I\n> think). That's because we need to store the SHA1 of each certificate\n> somewhere\n> anyway, because those SHA1 values (now) form the key to the\n> stapling_cert_info\n> hash.\n\nAh yes, you're right. I didn't realize that the stapling_cert_info hash is populated with apr_hash_set()...\n\n> I suppose I am assuming (possible wrongly) that apr_hash_set isn't actually\n> making a copy of the key here.\n\n... and your assumption is correct, of course (it's indeed a straightforward way of keeping the idx around).\n\nTwo comments about v4: \n\n- In ssl_stapling_init_cert, we're potentially allocating/\"leaking\" unneeded certinfo structs, I think. If a specific certificate is configured for more than one vhost (or at restart), we're constructing \"cinf\" even if we might not really need it later for apr_hash_set. Is it possible to first check with apr_hash_get if there's already a suitable entry in stapling_cert_info, and return early in this case? (Needs a local idx[] for temporary storage of the X509_digest result, I guess.)\n\n- It is actually safe to use\n\n        cinf->uri = apr_pstrdup(p, sk_OPENSSL_STRING_value(aia, 0));\n\nin ssl_stapling_init_cert (without checking the intermediate result of sk_OPENSSL_STRING_value), as aia will only be non-NULL if the stack includes at least one element (and furthermore, apr_pstrdup has a non-NULL check for the second argument).", "id": 178011, "time": "2014-09-21T17:23:11Z", "bug_id": 54357, "creation_time": "2014-09-21T17:23:11Z", "tags": [], "is_private": false}, {"count": 23, "attachment_id": 32039, "bug_id": 54357, "is_private": false, "id": 178012, "time": "2014-09-21T17:49:12Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-21T17:49:12Z", "tags": [], "text": "Created attachment 32039\nv5 Proof of concept patch to address the issue\n\nKaspar,\n\nTry the attached v5 patch which should address both your issues.\n\nAlex\n\nRemove OCSP stapling info from X509 ex_data, and manage it within\nnormal APR pools with SSLModConfigRec lifecyle. This is to address\nBZ 54357 and BZ 56919. Introduce a hash of stapling info indexed\nby the SHA1 hash of the certificate content.\n\nNote this code as been compile tested only at this stage and\nis submitted as a proof of concept.\n\nChanges since v4:\n* simplify (again) URI extraction\n* check certificate does not exist in hash first\n\nChanges since v3:\n* move stapling_cert_info to SSLModConfigRec\n\nChanges since v2:\n* change stapling_info to stapling_cert_info\n* move init of stapling_cert_info hash to modssl_ctx_init_server\n* Drop unnecessary memory allocation failure checks\n* Simplify extraction of uri string into apr memory management\n* Free aia structure\n* In stapling_get_cert_info check for X509_digest failure\n* Use SHA_DIGEST_LENGTH not hardcoded 20\n* Fix up second call to ssl_stapling_init_cert\n* Remove ssl_stapling_ex_init() declaration from ssl_private.h"}, {"count": 24, "tags": [], "bug_id": 54357, "attachment_id": null, "text": "Hmm - all this talk of combining the hash entry across different vhosts (i.e. moving stapling_cert_info from modssl_pk_server_t to SSLModConfigRec) assumes that\n    issuer = stapling_get_issuer(mctx, x);\nreturns the same information irrespective of the mctx.\n\nIn theory it would I presume be possible for the same certificate on one vhost to use a different set of extra_certs than on another, which in theory could result in a different value of 'issuer' per vhost, and hence in theory a different cert_info structure. Is this in practice an issue?", "id": 178013, "time": "2014-09-21T18:02:16Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-21T18:02:16Z", "is_private": false}, {"count": 25, "tags": [], "creator": "asfbugz@velox.ch", "attachment_id": null, "text": "(In reply to Alex Bligh from comment #24)\n> In theory it would I presume be possible for the same certificate on one\n> vhost to use a different set of extra_certs than on another, which in theory\n> could result in a different value of 'issuer' per vhost, and hence in theory\n> a different cert_info structure. Is this in practice an issue?\n\nFor the stapling part, it's not an issue. What stapling_get_issuer() really needs from the issuing CA is its public key (for creating the request's OCSP_CERTID, see RFC 6960 section 4.1.1, \"issuerKeyHash\"). Even if there are multiple versions of an issuer cert (e.g. with different validities, alternative signature algorithms etc.), the issuerKeyHash will always be the same for all certificates signed by this key (otherwise the signature of the server cert would fail verification).\n\nOr put differently, the members of the certinfo structure (\"idx\", \"cid\", \"uri\") for a specific cert only depend on the cert itself and the public key of its issuer, nothing else.\n\nv5 is very close I think. These lines in ssl_stapling_init_cert()\n\n    cinf = apr_hash_get(mc->stapling_cert_info, idx, sizeof(idx));\n    if (cinf) {\n        /* It's already in the hash. However, it may not have a uri\n         * If not, check we have a force URL */\n        if (!cinf->uri && !mctx->stapling_force_url) {\n            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, APLOGNO(02218)\n                         \"ssl_stapling_init_cert: no responder URL\");\n            return 0;\n        }\n        return 1;\n    }\n\ncan be shortened to\n\n    if ((cinf = apr_hash_get(mc->stapling_cert_info, idx, sizeof(idx))))\n        return 1;\n\nas the case of cinf already existing in the hash, but cinf->uri being undefined is a \"can't happen\", really: remember that \"idx\" is a SHA-1 hash over the full DER encoding of the certificate (which of course includes the OCSP URI in the AIA extension), so unless we have a collision with the DER encoding of two completely distinct certificates (which would also be very bad for the response cache, just as an aisde), it's impossible to reach the situation where \"cinf && !cinf->uri\" if we already have a hash entry. (Also, note that every log message needs a unique APLOGNO, so we would have to assign a new one if we kept the message.)", "id": 178014, "time": "2014-09-22T05:32:38Z", "bug_id": 54357, "creation_time": "2014-09-22T05:32:38Z", "is_private": false}, {"count": 26, "tags": [], "creator": "alex@alex.org.uk", "attachment_id": null, "id": 178015, "time": "2014-09-22T06:33:55Z", "bug_id": 54357, "creation_time": "2014-09-22T06:33:55Z", "is_private": false, "text": "> v5 is very close I think. These lines in ssl_stapling_init_cert()\n> \n>     cinf = apr_hash_get(mc->stapling_cert_info, idx, sizeof(idx));\n>     if (cinf) {\n>         /* It's already in the hash. However, it may not have a uri\n>          * If not, check we have a force URL */\n>         if (!cinf->uri && !mctx->stapling_force_url) {\n>             ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, APLOGNO(02218)\n>                          \"ssl_stapling_init_cert: no responder URL\");\n>             return 0;\n>         }\n>         return 1;\n>     }\n> \n> can be shortened to\n> \n>     if ((cinf = apr_hash_get(mc->stapling_cert_info, idx, sizeof(idx))))\n>         return 1;\n> \n> as the case of cinf already existing in the hash, but cinf->uri being\n> undefined is a \"can't happen\", really:\n\nI think you might be wrong about that.\n\nLet's say two vhosts have the same certificate. The first vhost this\ncomes across calls ssl_stapling_init_cert, and this calls X509_get1_ocsp.\nX509_get1_ocsp reveals this certificate has no URI, however on this\nvhost, SSLStaplingForceURL is set at a vhost level. The certificate's\ninfo then gets added to the hash. The second vhost then gets processed.\nThe SHA is the same (obviously) so what the above section does is\nto check that on the second vhost, SSLStaplingForceURL is also set.\nIf we don't make this check, then on the first vhost will be OK\nbecause it has SSLStaplingForceURL set, and the second vhost will\nbe OK although it does not have SSLStaplingForceURL set. That means\nthat when it gets to deal with the stapling for the second vhost,\nthere will be no URL. IE it's purpose is to look for an illegal\nconfiguration and return 0 in that case.\n\nSomeone who knows how to test OCSP should really test this code works\nas opposed to merely compiles. I have no idea how to do that."}, {"count": 27, "tags": [], "bug_id": 54357, "attachment_id": null, "text": "(missed the bit re the log numbers).\n\nIt's actually exactly the same log message as further down the same function. If that's an issue, I could easily refactor the check into a function of its own so the log message appears only once.", "id": 178018, "time": "2014-09-22T07:50:26Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-22T07:50:26Z", "is_private": false}, {"count": 28, "tags": [], "creator": "asfbugz@velox.ch", "attachment_id": null, "id": 178035, "time": "2014-09-22T20:08:03Z", "bug_id": 54357, "creation_time": "2014-09-22T20:08:03Z", "is_private": false, "text": "(In reply to Alex Bligh from comment #26)\n> If we don't make this check, then on the first vhost will be OK\n> because it has SSLStaplingForceURL set, and the second vhost will\n> be OK although it does not have SSLStaplingForceURL set.\n\nI see. You're right, I didn't think of this case. Maybe it would be good to log mctx->sc->vhost_id in the message as well, so that it's easier to identify for which vhost the problem actually exists (we might even consider switching to ssl_log_xerror, which logs more cert details, but this would mean passing in ptemp to ssl_stapling_init_cert).\n\nUsing the same APLOGNO() for two different places in the codeshould be avoided, i.e. instead of factoring it out, we can just use a new number for the first occurrence (I can deal with this when checking in, just put in APLOGNO() for the time being).\n\n> Someone who knows how to test OCSP should really test this code works\n> as opposed to merely compiles. I have no idea how to do that.\n\nIf you have a cert from a publicly-trusted CA, chances are very high that it also includes an OCSP URI, so configuring the SSLStaplingCache and adding \"SSLUseStapling on\" will turn on stapling (if your cert lacks an OCSP URI, you could at least try to force a \"fake\" SSLStaplingForceURL and see if it is properly taken into account). Then, openssl s_client and its \"-status\" option can be used to connect to the server and request a stapled OCSP response (which will be dumped if provided by the server, otherwise you get \"OCSP response: no response sent\"). I will also give it a try later this week."}, {"count": 29, "tags": [], "creator": "alex@alex.org.uk", "attachment_id": 32043, "id": 178036, "time": "2014-09-22T20:24:45Z", "bug_id": 54357, "creation_time": "2014-09-22T20:24:45Z", "is_private": false, "text": "Created attachment 32043\nv6 Proof of concept patch to address the issue\n\nKaspar,\n\nHere's a v6 of the patch that does the refactor - prepared before I read your email properly. Feel free to use v5 instead, but it may save you an APLOGNO patch and make it easier to backport.\n\nRe your comment on logging, isn't this why one passes 's' to ap_log_error, so that it can log the server that has the issue?\n\nAlex"}, {"attachment_id": 32053, "tags": [], "bug_id": 54357, "text": "Created attachment 32053\nPatch v7 - store stapling certinfo in a global hash, based on work by Alex Bligh\n\nHmm, ok, so after another closer look, I think I found another issue with the existing code, actually: IINM, with the current certinfo_free code, we actually leak the OCSP_CERTID stored cinf->cid (which gets allocated by OCSP_cert_to_id).\n\nI came to this conclusion when I was restructuring ssl_stapling_init_cert() a bit more, and am attaching my current version. I did some limited \"real-world\" testing, but more testing and further reviews are welcome and appreciated, of course.\n\nJoe and Steve: I've Cc'ed you in the hope that you could share your insights and opinion on the currently suggested approach.", "count": 30, "id": 178076, "time": "2014-09-24T12:29:20Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-09-24T12:29:20Z", "is_private": false}, {"count": 31, "tags": [], "bug_id": 54357, "attachment_id": null, "is_private": false, "id": 178079, "time": "2014-09-24T13:18:23Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-24T13:18:23Z", "text": "(In reply to Kaspar Brand from comment #30)\n> Created attachment 32053 [details]\n> Patch v7 - store stapling certinfo in a global hash, based on work by Alex\n> Bligh\n> \n> Hmm, ok, so after another closer look, I think I found another issue with\n> the existing code, actually: IINM, with the current certinfo_free code, we\n> actually leak the OCSP_CERTID stored cinf->cid (which gets allocated by\n> OCSP_cert_to_id).\n> \n> I came to this conclusion when I was restructuring ssl_stapling_init_cert()\n> a bit more, and am attaching my current version. I did some limited\n> \"real-world\" testing, but more testing and further reviews are welcome and\n> appreciated, of course.\n\nAh yes. Your v7 is still leaking it on server restart.\n\nWhilst we could put in some form of pool handler, that is rather tiresome and I worry about lifetime issues. I had been trying to keep SSL objects out of the cert_info structure.\n\nDo we need something like:\n   apr_pool_cleanup_register(p, cid, OCSP_CERTID_free, apr_pool_cleanup_null);\n\nin there?"}, {"count": 32, "tags": [], "bug_id": 54357, "attachment_id": null, "text": "(In reply to Alex Bligh from comment #31)\n> Ah yes. Your v7 is still leaking it on server restart.\n\nOn restart? How exactly? I don't follow yet, but perhaps I'm missing the obvious.", "id": 178086, "time": "2014-09-24T16:38:19Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-09-24T16:38:19Z", "is_private": false}, {"count": 33, "tags": [], "bug_id": 54357, "attachment_id": null, "is_private": false, "id": 178089, "time": "2014-09-24T18:11:14Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-24T18:11:14Z", "text": "(In reply to Kaspar Brand from comment #32)\n> (In reply to Alex Bligh from comment #31)\n> > Ah yes. Your v7 is still leaking it on server restart.\n> \n> On restart? How exactly? I don't follow yet, but perhaps I'm missing the\n> obvious.\n\nKaspar,\n\nHere's what I think will happen.\n\nWhen ssl_stapling_init_cert is run, it does:\n cid = OCSP_cert_to_id(NULL, x, issuer);\n\nYour new patch (v7) implies that this actually allocates something that needs to be deallocated (as opposed to merely returning a pointer to an existing object). I didn't realise that (because the old code was never freeing cid under any circumstances). This is presumably why you have inserted:\n  OCSP_CERTID_free(cid);\nif aia is NULL and there is no stapling URL.\n\nBut if this is true, we have an issue when the server is restarted as follows:\n\nIf the stapling info is correct, then the cinf struct will have a reference to the allocated OSCP_CERTID (cid), and this will be inserted into the hash table. This is used later on stapling callbacks.\n\nBut when the server apr pool is freed (on a restart), it will free the hash table of cinf entries and the cinf entries themselves, but cinf->cid will not be freed (i.e. OCSP_CERTID_free() will not be called), because it is not allocated in an apr pool and we haven't registered a cleanup handler for it.\n\nTherefore, when the restart occurs, the hash table will be entry and it will call OCSP_cert_to_id again for each certificate, allocating another OSCP_CERTID structure (and anything beneath that). As far as I can tell, this will be leaked on each restart.\n\nI think:\n  apr_pool_cleanup_register(p, cid, OCSP_CERTID_free, apr_pool_cleanup_null);\n\nor similar somewhere around the hash_set will fix this.\n\nAlex"}, {"count": 34, "tags": [], "bug_id": 54357, "attachment_id": null, "text": "(In reply to Alex Bligh from comment #33)\n> I didn't realise that (because the old code was never freeing cid under any circumstances).\n\nYes, that's what was referring to in comment 30 with the issue in the current certinfo_free code.\n\n> This is presumably why you have\n> inserted:\n>   OCSP_CERTID_free(cid);\n> if aia is NULL and there is no stapling URL.\n\nThat's because we're aborting early, and we don't want to store any certinfo in this case - i.e., its part of the cleanup of temporary stuff.\n\n> But when the server apr pool is freed (on a restart),\n[...]\n> Therefore, when the restart occurs, the hash table will be entry and it will\n> call OCSP_cert_to_id again for each certificate, allocating another\n> OSCP_CERTID structure (and anything beneath that). As far as I can tell,\n> this will be leaked on each restart.\n\nThis doesn't happen, and is probably the reason you thought v7 would leak. The SSLModConfigRec (\"mc\") survives restarts, and the stapling_cert_info hash is not cleared. Put differently, we only add certinfo for a specific certificate once in the lifetime of the process - if apr_hash_set() for certificate X was called at startup, then it's skipped if certificate X is encountered again in any of the additional rounds (in fact, this also the reason I put in the TRACE1 log statement, which you'll see only once per certificate and process lifetime when configuring \"LogLevel ssl:trace1\").\n\n> I think:\n>   apr_pool_cleanup_register(p, cid, OCSP_CERTID_free, apr_pool_cleanup_null);\n> \n> or similar somewhere around the hash_set will fix this.\n\nIt's sort of moot because it would only be called when httpd exits. I don't have strong feelings, and hope that we get some further opinions from other httpd devs at this point (Rainer/Ruediger/Joe/Steve?).", "id": 178096, "time": "2014-09-25T04:58:33Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-09-25T04:58:33Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 54357, "text": "Kaspar,\n\n> This doesn't happen, and is probably the reason you thought v7 would leak.\n> The SSLModConfigRec (\"mc\") survives restarts, and the stapling_cert_info\n> hash is not cleared. Put differently, we only add certinfo for a specific\n> certificate once in the lifetime of the process - if apr_hash_set() for\n> certificate X was called at startup, then it's skipped if certificate X is\n> encountered again in any of the additional rounds (in fact, this also the\n> reason I put in the TRACE1 log statement, which you'll see only once per\n> certificate and process lifetime when configuring \"LogLevel ssl:trace1\").\n\nOK, thanks, I didn't understand that. I will have to think of a more contrived example:\n\nImagine a server with 100 SSL Certificates, which are all changed and the SSL server reloaded once a minute. As the certs are changed, they have different SHA-1 sums. This means not only the OSCP_CERTID but also the certinfo structure leak, as nothing is ever removed from the hash.\n\nTechnically on server reload we should be freeing the hash and its contents.\n\nI am fantastically unbothered about this.", "count": 35, "id": 178097, "time": "2014-09-25T06:05:15Z", "creator": "alex@alex.org.uk", "creation_time": "2014-09-25T06:05:15Z", "is_private": false}, {"count": 36, "attachment_id": 32073, "bug_id": 54357, "text": "Created attachment 32073\nPatch v8 (based on work by Alex Bligh) - store stapling certinfo in a pconf-allocated hash\n\nHere is another attempt, which tries to improve memory management wrt v7. Specifically, the certinfo stuff is now put into a static hash which is allocated out of the pconf pool (i.e., cleared at restarts), and a cleanup function is registered to take care of the OCSP_CERTID allocations (which actually leak with the current code in trunk and 2.4.x).\n\nWould appreciate feedback/reviews from other devs (in particular about the memory management things).", "id": 178216, "time": "2014-10-01T14:52:47Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-10-01T14:52:47Z", "tags": [], "is_private": false}, {"count": 37, "tags": [], "creator": "alex@alex.org.uk", "attachment_id": 32073, "text": "Comment on attachment 32073\nPatch v8 (based on work by Alex Bligh) - store stapling certinfo in a pconf-allocated hash\n\nKaspar,\n\nCan you legally pass ssl_stapling_certid_free as a parameter to apr_pool_cleanup_register? Might the ssl module not be unloaded / reloaded to a different address at that point (this was the cause of the original bug)? That's why I was trying to simply pass OCSP_CERTID_free. If that legally will take a NULL we should be OK.\n\nAlex", "id": 178217, "time": "2014-10-01T14:59:39Z", "bug_id": 54357, "creation_time": "2014-10-01T14:59:39Z", "is_private": false}, {"count": 38, "tags": [], "creator": "asfbugz@velox.ch", "attachment_id": null, "id": 178218, "time": "2014-10-01T17:51:54Z", "bug_id": 54357, "creation_time": "2014-10-01T17:51:54Z", "is_private": false, "text": "(In reply to Alex Bligh from comment #37)\n> Can you legally pass ssl_stapling_certid_free as a parameter to\n> apr_pool_cleanup_register?\n\nYes, because this cleanup is called before the module is unloaded (unload_module in mod_so is implemented as a cleanup call registered with the pconf pool, and because ssl_stapling_init_cert registers its cleanup afterwards, it is called before mod_ssl is unloaded by mod_so).\n\n> Might the ssl module not be unloaded / reloaded\n> to a different address at that point (this was the cause of the original\n> bug)?\n\nDoesn't matter in this case. With the current X509_get_ex_new_index call, the problem is most likely the one pointed out by Rainer in the initial description: libcrypto doesn't get unloaded (in contrast to mod_ssl), and therefore keeps the pointer to the old free_func."}, {"count": 39, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "text": "(In reply to Kaspar Brand from comment #36)\n> Would appreciate feedback/reviews from other devs (in particular about the\n> memory management things).\n\nThe patch looks good to me, +1.\nThank you and Alex for the good work.", "id": 178220, "time": "2014-10-01T21:49:18Z", "bug_id": 54357, "creation_time": "2014-10-01T21:49:18Z", "is_private": false}, {"count": 40, "tags": [], "creator": "asfbugz@velox.ch", "attachment_id": null, "id": 178283, "time": "2014-10-04T11:00:53Z", "bug_id": 54357, "creation_time": "2014-10-04T11:00:53Z", "is_private": false, "text": "I have committed v8 (with some very minor tweaks plus the APLOGNO adjustments) as r1629372 to trunk. Let's see if this triggers any additional feedback on the mailing list, otherwise I will propose for backport to 2.4.x soon."}, {"count": 41, "attachment_id": null, "bug_id": 54357, "is_private": false, "id": 178352, "time": "2014-10-08T21:11:02Z", "creator": "alex@alex.org.uk", "creation_time": "2014-10-08T21:11:02Z", "tags": [], "text": "Any news on the 2.4 backport?"}, {"count": 42, "tags": [], "bug_id": 54357, "attachment_id": null, "is_private": false, "id": 178386, "time": "2014-10-11T09:12:49Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-10-11T09:12:49Z", "text": "Proposed for backport to 2.4.x with r1631030."}, {"count": 43, "tags": [], "creator": "alex@alex.org.uk", "attachment_id": null, "id": 178617, "time": "2014-10-20T09:36:30Z", "bug_id": 54357, "creation_time": "2014-10-20T09:36:30Z", "is_private": false, "text": "Would it help if I produced a backport patch for this, or is this already under way?"}, {"count": 44, "attachment_id": null, "creator": "asfbugz@velox.ch", "text": "(In reply to Alex Bligh from comment #43)\n> Would it help if I produced a backport patch for this, or is this already\n> under way?\n\nThe patch is linked to in the STATUS file (together with the proposal for backport), see https://svn.apache.org/viewvc/httpd/httpd/branches/2.4.x/STATUS?r1=1631030&r2=1631029.", "id": 178753, "time": "2014-10-26T07:23:29Z", "bug_id": 54357, "creation_time": "2014-10-26T07:23:29Z", "tags": [], "is_private": false}, {"count": 45, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 178848, "time": "2014-10-30T14:40:46Z", "bug_id": 54357, "creation_time": "2014-10-30T14:40:46Z", "is_private": false, "text": "This has been approved and merged to the 2.4.x branch for upcoming 2.4.11."}]
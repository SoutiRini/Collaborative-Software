[{"count": 0, "tags": [], "creator": "philippe.laflamme@gmail.com", "text": "Created attachment 25147\nThis patch adds a test case. Created against 3_6 tag.\n\nA specific sequence of strings results in broken CDATA section in sharedStrings.xml file.\n\nAttached patch adds a test case to 3_6 tag to reproduce the problem.\n\njava.lang.reflect.InvocationTargetException\norg.apache.poi.POIXMLException: java.lang.reflect.InvocationTargetException\n        at org.apache.poi.xssf.usermodel.XSSFFactory.createDocumentPart(XSSFFactory.java:61)\n        at org.apache.poi.POIXMLDocumentPart.read(POIXMLDocumentPart.java:256)\n        at org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:196)\n        at org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:179)\n        at org.apache.poi.xssf.TestBrokenCdata.testWritingSomeStringsResultsInMalformedCdata(TestBrokenCdata.java:53)\nCaused by: java.lang.reflect.InvocationTargetException\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n        at org.apache.poi.xssf.usermodel.XSSFFactory.createDocumentPart(XSSFFactory.java:59)\nCaused by: java.io.IOException: error: Unexpected character encountered (lex state 9): '!'\n        at org.apache.poi.xssf.model.SharedStringsTable.readFrom(SharedStringsTable.java:119)\n        at org.apache.poi.xssf.model.SharedStringsTable.<init>(SharedStringsTable.java:97)", "id": 135438, "time": "2010-03-18T16:49:11Z", "bug_id": 48936, "creation_time": "2010-03-18T16:49:11Z", "is_private": false, "attachment_id": 25147}, {"count": 1, "tags": [], "bug_id": 48936, "text": "Created attachment 25154\nA simplified version of the strings file\n\nThe problem seems to be within piccolo (part of xmlbeans).  The encoding logic is incorrectly identifying the ']]' in one string as ']]>' and thus attempts a mis-aligned escape.  This logic is being performed in a buffer which gets re-used multiple times across the document.  When piccolo reads one character too far, it reads whatever was left in the buffer from the previous use.  If the input data is constructed carefully, the '>' character may be incorrectly detected.\n\nThere are many sets of data which can cause this problem though they can be a little hard to find.  Here are a few guidelines:\n  - there needs to be enough total data to cause a wrap around in the buffer.  The problem occurs with strings written after the first buffer flush.\n  - one of those strings needs to \n     - be longer than 32 chars, \n     - have more than 5 entities that need escaping (e.g. '>')\n     - end in ']]'\n  - the lengths of all previous strings are chosen to cause a '>' from the previous buffer usage align with the']]'\n\nThis bug should probably be forwarded off to the xmlbeans team.  It will probably take some effort to create a test case that is independent of POI.\n\nxmlbeans 2.5.0 displays the same problem (POI currently uses 2.3.0)", "id": 135482, "attachment_id": 25154, "creator": "josh@apache.org", "creation_time": "2010-03-20T01:08:57Z", "time": "2010-03-20T01:08:57Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 48936, "attachment_id": null, "is_private": false, "id": 136400, "time": "2010-04-25T09:03:35Z", "creator": "yegor@dinom.ru", "creation_time": "2010-04-25T09:03:35Z", "text": "Quite an interesting bug. \nThe problem is in the way XmlBeans detects and writes CDATA blocks. Luckily, we can control this funny behavior.\n\nI traced the problem down to the internal class TextSaver in XmlBeans: \n\nhttp://svn.apache.org/viewvc/xmlbeans/tags/2.3.0/src/store/org/apache/xmlbeans/impl/store/Saver.java?view=markup\n\nThe logic for detection CDATA starts at line #1286. The heuristic is quite complex, but it turned out that it can be controlled with two options:\n\n  XmlOptions#setSaveCDataLengthThreshold(int)\n  XmlOptions#setSaveCDataEntityCountThreshold(int)\n\nThe default value of cdataEntityCountThreshold is 5 and the default value of cdataLengthThreshold is 32. These values perfectly agree with Josh's observations. \n\nAccording to the docs, XmlBeans will use CDATA if the following condition is true:\n    textLength > cdataLengthThreshold && entityCount > cdataEntityCountThreshold\n\nThe combination of XmlOptions.setSaveCDataEntityCountThreshold(0) and XmlOptions.setSaveCDataLengthThreshold(-1) will make every text CDATA. \n\nThe combination of XmlOptions.setSaveCDataEntityCountThreshold(MAXLENGTH) and XmlOptions.setSaveCDataLengthThreshold(-1) will detect CDATA only if the text is longer than MAXLENGTH chars. I used the following values to disable CDATA when saving sharedStrings.xml:\n\n  XmlOptions options = new XmlOptions(DEFAULT_XML_OPTIONS);\n  options.setSaveCDataLengthThreshold(1000000); \n  options.setSaveCDataEntityCountThreshold(-1);\n\n\nI committed the fix in r937792. \n\nExisting code using POI-3.6 can be fixed as follows:\n\n  XmlOptions options = POIXMLDocumentPart.DEFAULT_XML_OPTIONS;\n  options.setSaveCDataLengthThreshold(1000000);\n  options.setSaveCDataEntityCountThreshold(-1);\n\nAdd these lines before calling  workbook.write(out)\n\nRegards,\nYegor"}]
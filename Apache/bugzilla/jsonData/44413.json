[{"count": 0, "tags": [], "bug_id": 44413, "text": "Hello All, \n\nDescription\n-----------\nIf an INDEX() formula contains its own location in the data array range, parsing\nthis spreadsheet with POI causes a recursive exception with an eventual\njava.lang.StackOver.\n\nSteps to Reproduce\n------------------\n1/\nCreate a simple spreadsheet as follows\n     A    B\n   -------------\n1 |    |  1  |\n2 |    |  2  |\n3 |    |  3  |\n4 | ** |     |\n\n** contains formula =INDEX(A1:B4,2,2)\n\n2/\nNotice in Excel (2003), cell A4 evaluates to 2.\n\n3/\nParse the Excel file using POI to evaulate cell formulas (i.e. using\nHSSFFormulaEvaluator.CellValue cellValue = evaluator.evaluate(cell); for example)\n\n4/\nEvaluating cell A4 causes an exception.\n\nActual Results\n--------------\nAs stated in 4/ above.\nException is:\n\nException in thread \"main\" java.lang.StackOverflowError\n        at java.lang.Character.digit(Character.java:4531)\n        at java.lang.Character.digit(Character.java:4490)\n        at java.lang.Integer.parseInt(Integer.java:445)\n        at java.lang.Integer.parseInt(Integer.java:497)\n        at org.apache.poi.hssf.util.CellReference.<init>(CellReference.java:53)\n        at org.apache.poi.hssf.util.AreaReference.<init>(AreaReference.java:43)\n        at org.apache.poi.hssf.record.formula.AreaPtg.<init>(AreaPtg.java:55)\n        at org.apache.poi.hssf.model.FormulaParser.Ident(FormulaParser.java:290)\n        at org.apache.poi.hssf.model.FormulaParser.Factor(FormulaParser.java:522)\n        at org.apache.poi.hssf.model.FormulaParser.Term(FormulaParser.java:660)\n        at\norg.apache.poi.hssf.model.FormulaParser.Expression(FormulaParser.java:708)\n        at org.apache.poi.hssf.model.FormulaParser.Arguments(FormulaParser.java:486)\n        at org.apache.poi.hssf.model.FormulaParser.function(FormulaParser.java:358)\n        at org.apache.poi.hssf.model.FormulaParser.Ident(FormulaParser.java:280)\n        at org.apache.poi.hssf.model.FormulaParser.Factor(FormulaParser.java:522)\n        at org.apache.poi.hssf.model.FormulaParser.Term(FormulaParser.java:660)\n        at\norg.apache.poi.hssf.model.FormulaParser.Expression(FormulaParser.java:708)\n        at org.apache.poi.hssf.model.FormulaParser.parse(FormulaParser.java:812)\n        at\norg.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.internalEvaluate(HSSFFormulaEvaluator.java:361)\n        at\norg.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.getEvalForCell(HSSFFormulaEvaluator.java:557)\n        at\norg.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.internalEvaluate(HSSFFormulaEvaluator.java:361)\n        at\norg.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.getEvalForCell(HSSFFormulaEvaluator.java:557)\n<REPEATED 100's OF TIMES>\n\nExpected Results\n----------------\nSame as Excel as stated in 2/ above.\n\nBuild Date & Platform\n---------------------\n2008-02-13 on Windows XP\n\nAdditional Information\n----------------------\nI can't think of the top of my head what other Excel functions are \na) implemented in POI,\nb) use data ranges, and \nc) are *legal* in Excel (for instance, you can't use =SUM in a cell which is\npart of its own range)\n\nso as far as I know, this only affects the INDEX() function.\n\nCheers and thanks again!\n\nDave", "id": 113704, "attachment_id": null, "creator": "dave.webster@virginmedia.co.uk", "creation_time": "2008-02-13T04:44:37Z", "time": "2008-02-13T04:44:37Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 21518\nExcel file showing INDEX function specified within its own range, which causes Java stack overflow", "is_private": false, "id": 113705, "creator": "dave.webster@virginmedia.co.uk", "time": "2008-02-13T04:45:38Z", "bug_id": 44413, "creation_time": "2008-02-13T04:45:38Z", "attachment_id": 21518}, {"count": 2, "tags": [], "bug_id": 44413, "attachment_id": 21522, "is_private": false, "id": 113726, "time": "2008-02-13T14:04:18Z", "creator": "josh@apache.org", "creation_time": "2008-02-13T14:04:18Z", "text": "Created attachment 21522\nsvn diff of 1 changed file (HSSFFormulaEvaluator)"}, {"count": 3, "tags": [], "bug_id": 44413, "text": "Created attachment 21523\ntar bz2 of two new classes and one test case", "id": 113727, "attachment_id": 21523, "creator": "josh@apache.org", "creation_time": "2008-02-13T14:05:48Z", "time": "2008-02-13T14:05:48Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 44413, "attachment_id": null, "id": 113730, "time": "2008-02-13T14:34:11Z", "creator": "josh@apache.org", "creation_time": "2008-02-13T14:34:11Z", "is_private": false, "text": "Bugfix patch submitted.\n\nThe root problem is that the scratchpad evaluator does(/did) not handle \ncircular references (it crashes with SOE).  \nSome functions like INDEX, OFFSET, VLOOKUP are distinguished by the \ncharacteristic that not every cell in the range arguments has to be \nevaluated.  This is in contrast to more basic functions like SUM and COUNTIF \nwhere every input cell must be evaluated.  Functions like INDEX can be set up \nto potentially cause cyclic references, but nonetheless behave OK due to \ncareful choice of other parameters (like in this example).\n\nPOI's evaluation strategy is to fully evaluate all operator arguments prior to \ncalling the operator.  So the situation described here causes SOE due to a \ncyclic reference on cell A4 even though cell A4 should eventually get ignored \nby this call to INDEX.\n\nThe patch supplied here allows HSSFFormulaEvaluator to handle cyclic \nreferences (and *potential* cyclic references) gracefully.  No change was made \nto the INDEX function.\n\n\nA junit test case was added to show this bug (exactly as described), and also \nsome simpler cyclic errors involving plain cell references.\n"}, {"count": 5, "tags": [], "bug_id": 44413, "attachment_id": null, "id": 113783, "time": "2008-02-15T03:53:38Z", "creator": "apache@gagravarr.org", "creation_time": "2008-02-15T03:53:38Z", "is_private": false, "text": "Thanks for this patch Josh, I've applied to to svn\n\n(I also enabled the error code test, since the patch it depends on is now in svn\ntoo)"}]
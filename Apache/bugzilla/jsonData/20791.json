[{"count": 0, "tags": [], "creator": "spud@madbean.com", "text": "(this was posted to dev@ant.apache.org, just creating a bugzilla entry for \ntracking)\n\nHi, \n\nThis  is  a  patch  for  the  <junit>  task,  that  adds  an  option  to  use  \nthe  traditional  JUnit  GUI  instead  of  Ant's  built-in  text/xml/html/etc.  \nformatters.  You  know,  this  kind  of  thing: \n\n  http://junit.sourceforge.net/doc/testinfected/IMG00001.GIF \n\n\u00a0 \nThis  is  a  scratch  I've  always  wanted  to  itch.  The  text/html/etc.  \n<junit>  output  formats  are  great  in  continuous-integration  situations,  \nbut  when  doing  a  code/compile/test  cycle,  I  think  the  \"immediate\"  \nfeedback  of  the  GUI  is  preferable.  You  have  to  love  the  green-bar  :D \n\nThis  patch  adds  a  uimode=\"true\"  attribute  to  <junit>  (see  the  \npreliminary  doco  below). \n\nI  have  tested  this  patch  with  JDK1.2.2  on  Win2k,  with  JUnit  3.8.1  \nand  3.0 \n\u00a0 \n\nPatch  Contents \n============== \n(see  attached  patch.zip) \n\nNOTES: \n-  I've  used  \"@since  Ant  1.6FIXME\",  not  sure  what  the  correct  value \n   should  be \n\u00a0 \nModified  files: \n\u00a0 \no  JUnitTask.java \n -  added  UI  mode  functionality \n -  \"extract  method\"  refactor  in  executeAsForked()  creating \n   executeAsForkedCommon(),  so  that  the  setup  performed  on \n   \"cmd\"  could  be  reused \n -  Removed  some  deprecated  warnings  by  using  appropriate  JDK1.2  \n    methods \n   (this  is  okay  now,  right?) \n -  misc  whitespace  cleaning\n  \no  JUnitTestRunner.java \n -  an  \"extract  method\"  refactor  so  that  logic  can  be  re-used \n -  fix  illegal  javadoc\n  \no  BaseTest.java \no  JUnitTest.java \no  BatchTest.java \n -  move  shouldRun()  from  JUnitTest  to  superclass  BaseTest \n -  added  abstract  method  getTestNames()  to  BaseTest  and \n    implemented  in  subclasses \n\u00a0 \nAdded  File: \no  BatchSuite.java \n  -  A  JUnit  test  that  initializes  its  suite  from  a  file \n\n  \nPreliminary  Doco \n============== \n\n(if  the  patch  is  accepted  I'll  submit  a  follow-up  patch  to  \njunit.html) \n\n\u00a0 \n--START  DOCS-- \nNote:  UI  Mode \n------------- \n\nWhen  UI  mode  is  activated  (using  the  \"uimode\"  attribute),  any  \nassociated  <formatter>  tags  are  ignored,  and  one  of  JUnit's  own  GUI  \nviewers  is  used  instead. \n\nWhen  in  UI  mode,  the  following  options  are  ignored:  printsummary,  \nfork,  halton*,  errorproperty,  failureproperty,  filtertrace,  timeout,  \nshowoutput,  todir,  and  outfile. \n\n\u00a0 \nAll  tests  will  be  run  in  forked  mode,  irrespective  of  the  value  of  \n\"fork\".  If  more  than  one  test  is  run  at  once  (eg,  as  in  a  \n<batchtest>  or  multiple  <test>s)  then  \"includeAntRuntime\"  will  be  force  \nto  be  \"true\". \n\nThe  <uiarg>  nested  element  can  be  used  when  UI  mode  is  active  \n(otherwise  it  is  ignored  by  <junit>). \n\n\nuimode         When  set,  UI  mode  is  activated  as  described \n               above.  Valid  values  include  \"swing\",  \"awt\"  or \n               the  fully-qualified  classname  of  a  JUnit  \"runner\". \n               When  \"true\",  \"yes\"  or  \"on\",  then  \"swing\"  is  used. \n               (In  versions  of  JUnit  that  don't  have  the  \"swing\" \n               viewer,  then  \"swing\"  and  \"awt\"  mean  the  same  thing) \n               If  \"false\"  or  not  set  (the  default),  then \n               UI  mode  is  not  active. \n\n<uiarg> \n\nAdds  arguments  to  the  of  the  JUnit's  commandline.  <uiarg>  allows  all  \nattributes  described  in  Command-line  Arguments. \n\nThis  is  useful,  for  example,  to  pass  \"-noloading\"  to  JUnit: \n\n<junit  uimode=\"yes\"> \n   <uiarg  value=\"-noloading\"/> \n   ... \n</junit> \n\n--END  DOCS-- \n\n\u00a0 \nThanks, \n\n\u00a0 \n=Matt", "id": 38885, "time": "2003-06-15T23:17:31Z", "bug_id": 20791, "creation_time": "2003-06-15T23:17:31Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 20791, "text": "Created attachment 6843\n.zip file containing patch.txt and new files", "id": 38886, "time": "2003-06-15T23:18:33Z", "creator": "spud@madbean.com", "creation_time": "2003-06-15T23:18:33Z", "is_private": false, "attachment_id": 6843}, {"count": 2, "tags": [], "bug_id": 20791, "attachment_id": null, "is_private": false, "id": 39084, "time": "2003-06-19T10:40:40Z", "creator": "cmlenz@apache.org", "creation_time": "2003-06-19T10:40:40Z", "text": "This is totally overloading the <junit> task. There's a dozen of attributes that\nare ignored in GUI mode. Nested <formatter>s are ignored, fork is always true,\netc. Effectively, this is another task. \n\n[Note: while Ant has a tradition of heavily overloading tasks, such as\n<available> and <property>, it's not something that should be followed IMHO].\n\nI wonder what the 'uimode' gives you that cannot be easily done by just using\n<java classname=\"junit.swingui.Runner\">? Is it the specification of the tests to\nrun via <test>/<batchtest>? The classpath configuration?\n\nI'd rather see this added to a separate task, say <junitgui>. In that context,\nit would make sense to refactor the JUnitTestRunner class (and others) so that\nit can be more easily reused from other tasks. However, I doubt that a GUI-based\ntask would be included in Ant anyway.\n"}, {"attachment_id": null, "tags": [], "bug_id": 20791, "is_private": false, "count": 3, "id": 39088, "time": "2003-06-19T11:55:32Z", "creator": "spud@madbean.com", "creation_time": "2003-06-19T11:55:32Z", "text": "I agree that it is totally overloading the <junit> task. I'll try and\noutline my reasons for submitting the patch I have.\n\n> I wonder what the 'uimode' gives you that cannot be easily done by just using\n> <java classname=\"junit.swingui.Runner\">? Is it the specification of the tests \nto\n> run via <test>/<batchtest>? The classpath configuration?\n\nThis is *exactly* what I was trying to achieve: re-use of the <test>\nand <batchtest> clauses; plus their associated classpaths, 'if' and\n'unless' behaviour, <exclude> and <include> statements (with *their*\nown 'if' and 'unless' behaviour).\n\nMy patch is based upon these principles/assumptions:\n\n1) it is common that projects use <junit> for automated testing\n   (\"continuous integration\" scenarios).\n2) it is common that projects use the same build files for continuous\n   integration AND for desktop development (ie; during the daily\n   code/build/test cycle)\n3) when maintaining Ant build files, the DRY principle is useful: Don't\n   Repeat Yourself.\n\nSo, the current <junit> task certainly fulfills 1) above.\n\nI think JUnit's own GUIs enhance the desktop-development experience. I\nthink there is an inherent *goodness* about seeing the\ngreen-bar. And being able to run a project's unit tests *during\ndevelopment* is crucial to avoiding software rot in the test code.\n\nSo, *some* ability to run \"development friendly\" tests is what is\nrequired by 2) but, for me, the html or text formatters don't cut it,\nnor does \"print summary\". I like to see the JUnit GUI; and I suppose\nthat I can achieve that with a <java classname=\"junit.swingui.Runner\">\nbut...\n\nThe DRY principle suggests should we should only need to specify our\nunit tests once; whether we are running the GUI, or not. And *that* is\nthe goal of my patch.\n\nAs an example, Ant's own build.xml file has a <junit> specification\nthat spans 127 lines. This specification lists MANY excluded tests\nbased upon library availability, sets system properties and sets\nclasspaths. It has just one line detailing a <formatter> :)\n\nIn addition, my uimode=\"true\" patch allows you to do something with\n<junit> that cannot be done with junit.swingui.Runner, which is to use\nselectors and Ant file-sets to specify what all your tests are; in\nJUnit you need to set up your suite() methods, etc.\n\n\nSo, that is my case for the patch. If it is deemed that a separate\n<junitgui> task is preferable, then I will pursue that path. In that\ncase, I may put forward a proposal for a new ant type that captures\nthe information specified by <batchtest>/<test>, so that it can be\nused by multiple <junit> and <junitgui> tasks. (I suppose this info is\njust a <classpath> and a <fileset> which are types that can just be\nused as-is.)\n\n=Matt\n"}, {"count": 4, "tags": [], "creator": "stevel@apache.org", "text": "I can see a reason for having it all in the <junit> task: you can make it a\nper-person switch. But if the default is noui and things like the formatting go\non afterwards, a simple ui switch isnt going to work.\n\nwhat about refactoring the base of junit so that the core is an abstract class\nthat <JunitGui> and classic <junit> can use?", "id": 39101, "time": "2003-06-19T15:57:22Z", "bug_id": 20791, "creation_time": "2003-06-19T15:57:22Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 20791, "attachment_id": null, "is_private": false, "id": 39129, "time": "2003-06-19T23:12:26Z", "creator": "spud@madbean.com", "creation_time": "2003-06-19T23:12:26Z", "text": ".\n> what about refactoring the base of junit so that the core is an abstract class\n> that <JunitGui> and classic <junit> can use?\n\nOkay, will do. I will re-submit such a patch (including html\ndocumentation).\n\n=Matt\n"}, {"count": 6, "tags": [], "bug_id": 20791, "attachment_id": null, "is_private": false, "id": 86220, "time": "2006-02-24T23:48:28Z", "creator": "jglick@apache.org", "creation_time": "2006-02-24T23:48:28Z", "text": "This has had no activity for two and a half years, so I'm guessing no patch is\nforthcoming.\n\nI'm going to close this on the grounds that JUnit 4 has anyway dropped the\nstandalone GUI runners (under the assumption that most users will be running\ntests from an IDE with its own GUI anyway). While it generally remains\ncompatible with JUnit 3, only junit.textui.TestRunner is included in release 4.\n\nIf anyone still has a strong interest in this, of course feel free to reopen."}]
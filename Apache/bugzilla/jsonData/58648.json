[{"count": 0, "tags": [], "creator": "apache@rpdavison.ca", "attachment_id": null, "text": "To reproduce:\n\nDefine an XSSFCell with a formula like: \"((1 + 1) )\".\nNote the extra space between the closing parentheses.\n\nOr create a spreadsheet with a cell with the formula specified above, save it and then read it in as a workbook.  Navigate via POI to the sheet, row, and cell in question.\n\nCall getCellFormula() on the cell.\n\nResults in an exception: \norg.apache.poi.ss.formula.FormulaParseException: Parse error near char ... ')' in specified formula '((1 + 1) )'. Expected cell ref or constant literal\n\tat org.apache.poi.ss.formula.FormulaParser.expected(FormulaParser.java:208)\n\tat org.apache.poi.ss.formula.FormulaParser.parseSimpleFactor(FormulaParser.java:1148)\n\tat org.apache.poi.ss.formula.FormulaParser.percentFactor(FormulaParser.java:1103)\n\tat org.apache.poi.ss.formula.FormulaParser.powerFactor(FormulaParser.java:1090)\n\tat org.apache.poi.ss.formula.FormulaParser.Term(FormulaParser.java:1450)\n\tat org.apache.poi.ss.formula.FormulaParser.additiveExpression(FormulaParser.java:1570)\n\tat org.apache.poi.ss.formula.FormulaParser.concatExpression(FormulaParser.java:1554)\n\tat org.apache.poi.ss.formula.FormulaParser.comparisonExpression(FormulaParser.java:1511)\n\tat org.apache.poi.ss.formula.FormulaParser.intersectionExpression(FormulaParser.java:1499)\n\tat org.apache.poi.ss.formula.FormulaParser.unionExpression(FormulaParser.java:1472)\n\tat org.apache.poi.ss.formula.FormulaParser.parseSimpleFactor(FormulaParser.java:1131)\n\tat org.apache.poi.ss.formula.FormulaParser.percentFactor(FormulaParser.java:1103)\n\tat org.apache.poi.ss.formula.FormulaParser.powerFactor(FormulaParser.java:1090)\n\tat org.apache.poi.ss.formula.FormulaParser.Term(FormulaParser.java:1450)\n\tat org.apache.poi.ss.formula.FormulaParser.additiveExpression(FormulaParser.java:1570)\n\tat org.apache.poi.ss.formula.FormulaParser.concatExpression(FormulaParser.java:1554)\n\tat org.apache.poi.ss.formula.FormulaParser.comparisonExpression(FormulaParser.java:1511)\n\tat org.apache.poi.ss.formula.FormulaParser.Arguments(FormulaParser.java:1076)\n\tat org.apache.poi.ss.formula.FormulaParser.function(FormulaParser.java:963)\n\tat org.apache.poi.ss.formula.FormulaParser.parseNonRange(FormulaParser.java:556)\n\tat org.apache.poi.ss.formula.FormulaParser.parseRangeable(FormulaParser.java:524)\n\tat org.apache.poi.ss.formula.FormulaParser.parseRangeExpression(FormulaParser.java:257)\n\tat org.apache.poi.ss.formula.FormulaParser.parseSimpleFactor(FormulaParser.java:1143)\n\tat org.apache.poi.ss.formula.FormulaParser.percentFactor(FormulaParser.java:1103)\n\tat org.apache.poi.ss.formula.FormulaParser.powerFactor(FormulaParser.java:1090)\n\tat org.apache.poi.ss.formula.FormulaParser.Term(FormulaParser.java:1450)\n\tat org.apache.poi.ss.formula.FormulaParser.additiveExpression(FormulaParser.java:1570)\n\tat org.apache.poi.ss.formula.FormulaParser.concatExpression(FormulaParser.java:1554)\n\tat org.apache.poi.ss.formula.FormulaParser.comparisonExpression(FormulaParser.java:1511)\n\tat org.apache.poi.ss.formula.FormulaParser.intersectionExpression(FormulaParser.java:1492)\n\tat org.apache.poi.ss.formula.FormulaParser.unionExpression(FormulaParser.java:1472)\n\tat org.apache.poi.ss.formula.FormulaParser.parse(FormulaParser.java:1612)\n\tat org.apache.poi.ss.formula.FormulaParser.parse(FormulaParser.java:153)\n\tat org.apache.poi.xssf.usermodel.XSSFCell.convertSharedFormula(XSSFCell.java:421)\n\tat org.apache.poi.xssf.usermodel.XSSFCell.getCellFormula(XSSFCell.java:393)\n\nRemove the white space between the two closing parentheses and the exception goes away.\n\nProposed fix:\nAdd an additional call to \"SkipWhite()\" before the call to \"Match(')');\" inside the case for '('.  Near line 1130 in parseSimpleFactor method of FormulaParser.java (release version 3.13).", "id": 186525, "time": "2015-11-24T21:53:06Z", "bug_id": 58648, "creation_time": "2015-11-24T21:53:06Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58648, "attachment_id": 33295, "id": 186539, "time": "2015-11-25T09:43:57Z", "creator": "onealj@apache.org", "creation_time": "2015-11-25T09:43:57Z", "is_private": false, "text": "Created attachment 33295\nskip whitespace before matching close parentheses\n\nThanks for finding this problem!\nI added a unit tests that shows this problem in r1716338, and can verify that this problem still exists in the latest dev build (2015-11-25, r1716338).\n\nThe attached patch, which I think is what your suggested fix was from comment 0, still fails the unit test. Were you able to get a passing build? If so, could you add your patch/diff as an attachment?"}, {"count": 2, "tags": [], "bug_id": 58648, "text": "Sorry no.  I haven't tried building the code, just been using jars and src-jars up til now.\nMy suggested fix was based on a quick perusal of the source code.  It may not actually fix the problem.", "id": 186553, "time": "2015-11-25T16:14:36Z", "creator": "apache@rpdavison.ca", "creation_time": "2015-11-25T16:14:36Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "onealj@apache.org", "text": "The second Match() call without another SkipWhite() looked suspiscious, so good guess. I guess whoever works on this bug will become intimately familiar with the deep call-stack that is used for PTG parsing.", "id": 186566, "time": "2015-11-25T19:32:39Z", "bug_id": 58648, "creation_time": "2015-11-25T19:32:39Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 58648, "text": "*** Bug 59271 has been marked as a duplicate of this bug. ***", "id": 189943, "time": "2016-04-04T19:24:19Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-04-04T19:24:19Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "Bug 59271 provides a testcase with a testfile", "id": 189944, "attachment_id": null, "bug_id": 58648, "creation_time": "2016-04-04T19:48:00Z", "time": "2016-04-04T19:48:00Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58648, "text": "Did some initial analysis: the problem is not skipping whitespaces, but the Excel \"intersection operator\", which is ... TADA .. a blank! \n\nBad idea to use a char for something when you also allow the same char to act as arbitrary whitespace in formulas at various places. Seems we need to put logic in place that at first tries to parse the pieces as intersection and if that fails skip it as whitespace. Quite bad for reproducible behaviour and good error messages. :(", "id": 189945, "time": "2016-04-04T20:17:43Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-04-04T20:17:43Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "creator": "dominik.stadler@gmx.at", "text": "My approach would be to handle this in FormulaParser.intersectionExpression() as follows, however I fear that this might lead to hard to track errors with formula parsing and/or misleading error messages, any thoughts or ideas how to do this better? I.e. maybe intersection is only possible in some specific places in the formula and we can only allow it there in the first place?\n\n   private ParseNode intersectionExpression() {\n\t\tParseNode result = comparisonExpression();\n\t\tboolean hasIntersections = false;\n\t\twhile (true) {\n\t\t\tSkipWhite();\n\t\t\tif (_inIntersection) {\n\t\t\t\tint savePointer = _pointer;\n\n\t\t\t\t// Don't getChar() as the space has already been eaten and recorded by SkipWhite().\n\t\t\t\ttry {\n\t\t\t\t\tParseNode other = comparisonExpression();\n\t\t\t\t\tresult = new ParseNode(IntersectionPtg.instance, result, other);\n\t\t\t\t\thasIntersections = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t} catch (FormulaParseException e) {\n\t\t\t\t\t// if parsing for intersection fails we assume that we actually had an arbitrary\n\t\t\t\t\t// whitespace and thus should simply skip this whitespace\n\t\t\t\t\tresetPointer(_pointer);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasIntersections) {\n\t\t\t\treturn augmentWithMemPtg(result);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}", "id": 189946, "time": "2016-04-04T20:25:31Z", "bug_id": 58648, "creation_time": "2016-04-04T20:25:31Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 58648, "text": "See http://www.techrepublic.com/blog/microsoft-office/use-excels-intersect-operator-to-evaluate-common-cells/ and http://trumpexcel.com/2013/08/intersect-operator-in-excel/ for some description of the intersection operator.", "id": 189947, "time": "2016-04-04T20:37:14Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-04-04T20:37:14Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "nospam@kaigrabfelder.de", "attachment_id": null, "text": "Wow using a blank as an operator is really weird - I was not aware of that. Did we add support for the intersection in 3.13 or what changes between 3.12 & 3.13 caused this issue?", "id": 189956, "time": "2016-04-05T09:22:11Z", "bug_id": 58648, "creation_time": "2016-04-05T09:22:11Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 58648, "attachment_id": null, "id": 189957, "time": "2016-04-05T10:10:09Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-04-05T10:10:09Z", "is_private": false, "text": "Seems to have been introduced by bug 52111 when support for the intersection operator was added."}, {"count": 11, "attachment_id": null, "creator": "nospam@kaigrabfelder.de", "text": "That makes sense. Unfortunately I don't know the whole formula parsing in POI too well, so I don't know if your suggested fix would work ;-(", "id": 189970, "time": "2016-04-05T14:38:18Z", "bug_id": 58648, "creation_time": "2016-04-05T14:38:18Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "text": "Intersection is whitespace between two cell range/area PTGs. If the two operands don't evaluate to ranges, treat the whitespace as just whitespace. Is multiple whitespace characters as the operator a valid intersection expression?", "attachment_id": null, "id": 189974, "creator": "onealj@apache.org", "time": "2016-04-05T16:17:12Z", "bug_id": 58648, "creation_time": "2016-04-05T16:17:12Z", "is_private": false}, {"count": 13, "tags": [], "creator": "nospam@kaigrabfelder.de", "attachment_id": null, "text": "Well in excel both\n\n=A1:B1 B1:B2\nas well as \n=A1:B1    B1:B2\n\nare valid and return the same value (b) in the following table\n\n | A | B |  \n1| a | b |\n2| a | a |", "id": 190009, "time": "2016-04-06T12:03:50Z", "bug_id": 58648, "creation_time": "2016-04-06T12:03:50Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 58648, "text": "I have applied my proposed simple approach via r1738033 and added a number of tests which verify that all the cases that I could think of seem to work fine now. If there is any that I missed, please report it as new bug so we can fix it and add additional unit-tests.", "id": 190028, "time": "2016-04-06T19:54:01Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-04-06T19:54:01Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 58648, "text": "*** Bug 59652 has been marked as a duplicate of this bug. ***", "id": 193082, "time": "2016-08-13T20:43:25Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-08-13T20:43:25Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "text": "Re-enabled unit tests in r1765548.", "attachment_id": null, "id": 194541, "creator": "onealj@apache.org", "time": "2016-10-19T08:04:45Z", "bug_id": 58648, "creation_time": "2016-10-19T08:04:45Z", "is_private": false}]
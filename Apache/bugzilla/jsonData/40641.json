[{"count": 0, "tags": [], "bug_id": 40641, "attachment_id": null, "text": "There are a lot of issues with using UnknownElement/RuntimeConfigur,\nand other core ant classes outside of the core ant. Some of\nthe doc referres to ant 1.5, some of the doc is wrong and a *lot*\nof the code only works if called in strict order. In other words\nthis code should never have been advertised as been usable via\nthe java api to third party code.\n\nBe that as it may, UE.configure() should be changed..\n\nThe example of code that you gave does work for me:\n\nMyTask.java:\nimport org.apache.tools.ant.*;\nimport java.util.*;\n\npublic class MyTask extends Task {\n    public void injectParent(Parent p) {\n        System.out.println(\"Parent was injected\");\n    }\n}\nParent.java:\nimport org.apache.tools.ant.*;\nimport java.util.*;\n\npublic class Parent extends Task implements TaskContainer {\n    private List<Task> children = new ArrayList<Task>();\n    public void addTask(Task task) {\n        children.add(task);\n    }\n    public void execute() {\n        for (Task child : children) {\n            child.maybeConfigure();\n            if (child instanceof UnknownElement) {\n                Object realThing = ((UnknownElement)child).getRealThing();\n                if (realThing instanceof MyTask) {\n                    ((MyTask)realThing).injectParent(this);\n                }\n            }\n            child.perform();\n        }\n    }\n}\nbuild.xml:\n<project default=\"r\">\n  <target name=\"r\">\n    <mkdir dir=\"build/classes\"/>\n    <javac srcdir=\"src\" destdir=\"build/classes\" debug=\"yes\"/>\n    <taskdef name=\"parent\" classname=\"Parent\" classpath=\"build/classes\"\n             loaderref=\"classes\"/>\n    <taskdef name=\"child\" classname=\"MyTask\" loaderref=\"classes\"\n             classpath=\"build/classes\"/>\n    <parent>\n      <child/>\n      <child/>\n      <child/>\n      <child/>\n    </parent>\n  </target>\n  <target name=\"clean\">\n    <delete dir=\"build\"/>\n  </target>\n</project>\noutputs:\nr:\n   [parent] Parent was injected\nParent was injected\nParent was injected\nParent was injected\n\nfor ant1.6.5 and for ant1.7", "id": 94277, "time": "2006-09-29T09:41:39Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-29T09:41:39Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 40641, "text": "weird! bugzilla placed my reply before the description!\n", "count": 1, "id": 94278, "time": "2006-09-29T09:43:14Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-29T09:43:14Z", "is_private": false}, {"count": 2, "text": "> The example of code that you gave does work for me:\n\nYes, that code will work. Sorry if I wasn't clear enough: what happens is that\nthe UnknownElement.perform() calls maybeConfigure(), which will create a new\ninstance of the real child task, with the result that the parent will be null\nwhen the child is executed. Try this code (apologies if it has a syntax error, I\ndidn't compile it):\n\npublic class MyTask extends Task {\n\n    private Object _parent;\n\n    public void injectParent(Parent p) {\n        System.out.println(\"Parent was injected\");\n        System.out.println(\"my identity = \" + System.identityHashCode(this));\n        _parent = p;\n    }\n\n    public void execute() {\n       System.out.println(\"in execute, parent = \" + _parent);\n       System.out.println(\"my identity = \" + System.identityHashCode(this));\n    }\n}\n", "bug_id": 40641, "is_private": false, "id": 94279, "time": "2006-09-29T10:02:19Z", "creator": "kdgregory@yahoo.com", "creation_time": "2006-09-29T10:02:19Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 40641, "attachment_id": null, "text": "Ah, I see.\nThis will not be easy to fix - any changes\nto UE/RC + infrastructure are difficult.\n\n", "id": 94281, "time": "2006-09-29T10:21:21Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-29T10:21:21Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "peterreilly@apache.org", "is_private": false, "count": 4, "id": 94282, "time": "2006-09-29T10:38:46Z", "bug_id": 40641, "creation_time": "2006-09-29T10:38:46Z", "text": "Ok, this particular change does not look too bad..\nShould have a fix soon.\n"}, {"count": 5, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "text": "A simple check for realthing seems to be\nsufficient (at least at the moment).", "id": 94289, "time": "2006-09-29T15:24:43Z", "bug_id": 40641, "creation_time": "2006-09-29T15:24:43Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 40641, "attachment_id": null, "id": 94270, "time": "2006-09-29T15:53:52Z", "creator": "kdgregory@yahoo.com", "creation_time": "2006-09-29T15:53:52Z", "is_private": false, "text": "Although the documentation indicates that this method will only configure a task\nif it has not already been configured, the actual code always creates a new\nobject, and always calls configure() with that new object.\n\nAside from not following the documentation, this makes any sort of parent-child\ndependency injection impossible. Consider the following:\n\n    for (Task child : _children) {\n        child.maybeConfigure();\n        if (child instanceof UnknownElement) {\n            Object realThing = ((UnknownElement)child).getRealThing();\n            if (realThing instanceof MyTask) {\n                ((MyTask)realThing).injectParent(this);\n            }\n        }\n        child.perform();\n    }\n\nWhen I explicitly call maybeConfigure() on the child, assuming that the parent\nhasn't been executed already, I expect it to create an actual child instance. I\nthen inject the dependency (ugly though that may be), and perform the task. I\nknow that perform() will also call maybeConfigure(), but according to the\ndocumentation, it should only do something \"if it hasn't been done already\".\nInstead, it replaces the \"real thing\" with a new instance, and I get a NPE when\nI try to access the parent.\n\nOne alternative is to create the children explicitly, via factory methods on the\nparent. However, these children will be configured _before the parent is run_,\nwhich means that I can't rely on property conversions (since they property is\nstill \"${foo}\" at this point, and have to explicitly convert the properties at\nruntime.\n\nAnother alternative (and I'll add an enhancement request for this if it's not in\nthe 1.7 beta docs) is to allow dependency injection as part of the Task interface."}]
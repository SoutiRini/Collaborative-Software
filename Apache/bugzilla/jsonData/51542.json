[{"count": 0, "tags": [], "bug_id": 51542, "text": "I've tested the our PVS-Studio analyzer with the projects Apache. While analyzing this project I've found some mistakes and decided to mention it. Hope it will come in handy.\n\nSee also this article: http://www.viva64.com/en/b/0105/\n\nBugs:\n\nV501 There are identical sub-expressions 'state == rsl_encoding' to the left and to the right of the '||' operator. mod_mime_magic mod_mime_magic.c 787\n\nstatic int magic_rsl_to_request(request_rec *r)\n{\n  ...\n  if (state == rsl_subtype || state == rsl_encoding ||\n      state == rsl_encoding) {\n  ...\n}\n\nNeed:\nif (state == rsl_subtype || state == rsl_separator ||\n    state == rsl_encoding) {\n\n---------------------------------------------------------------\nV512 A call of the 'memset' function will lead to underflow of the buffer '(context)'. apr sha2.c 560\n\n#define MEMSET_BZERO(p,l)       memset((p), 0, (l))\n\nvoid apr__SHA256_Final(sha2_byte digest[], SHA256_CTX* context) {\n  ...\n  MEMSET_BZERO(context, sizeof(context));\n  ...\n}\n\nAnd here:\nFalse 1 902 V512 A call of the 'memset' function will lead to underflow of the buffer '(context)'. apr sha2.c 581 False\nFalse 1 916 V512 A call of the 'memset' function will lead to underflow of the buffer '(context)'. apr sha2.c 892 False\nFalse 1 917 V512 A call of the 'memset' function will lead to underflow of the buffer '(context)'. apr sha2.c 912 False\nFalse 1 918 V512 A call of the 'memset' function will lead to underflow of the buffer '(context)'. apr sha2.c 967 False\nFalse 1 919 V512 A call of the 'memset' function will lead to underflow of the buffer '(context)'. apr sha2.c 987 False\n---------------------------------------------------------------\nV527 It is odd that the '\\0' value is assigned to 'char' type pointer. Probably meant: *tag->arg = '\\0'. mod_headers mod_headers.c 330\n\ntypedef struct {\n    const char* (*func)(request_rec *r,char *arg);\n    char *arg;\n} format_tag;\n\nstatic char *parse_format_tag(apr_pool_t *p, format_tag *tag, const char **sa)\n{\n  ...\n  tag->arg = '\\0';\n  ...\n}\n\nNeed:\ntag->arg = NULL;\nOr:\ntag->arg[0] = '\\0';\n\n---------------------------------------------------------------\nV532 Consider inspecting the statement of '*pointer++' pattern. Probably meant: '(*pointer)++'. apriconv iconv_uc.c 114\n\napr_status_t\niconv_uc_conv(..., apr_size_t *res)\n{\n  ...\n  if (size)\n    *res ++;\n  ...\n}\n\nNeed: (*res)++;\n---------------------------------------------------------------\nV547 Expression 'len < 0' is always false. Unsigned type value is never < 0. aprutil apr_memcache.c 814\n\ntypedef  size_t      apr_size_t;\n\nAPU_DECLARE(apr_status_t) apr_memcache_getp(...)\n{\n  ...\n  apr_size_t len = 0;\n  ...\n  len = atoi(length);\n  ...\n  if (len < 0) {\n    *new_length = 0;\n    *baton = NULL;\n  }\n  else {\n    ...  \n  }\n}\n---------------------------------------------------------------\nV547 Expression 'csd < 0' is always false. Unsigned type value is never < 0. libhttpd child.c 404\n\ntypedef UINT_PTR SOCKET;\n\nstatic unsigned int __stdcall win9x_accept(void * dummy)\n{\n  SOCKET csd;\n  ...\n  do {\n      clen = sizeof(sa_client);\n      csd = accept(nsd, (struct sockaddr *) &sa_client, &clen);\n  } while (csd < 0 && APR_STATUS_IS_EINTR(apr_get_netos_error()));\n  ...\n}\n---------------------------------------------------------------\nV560 A part of conditional expression is always true: 0x04. pcre pcre.c 3366\n\nstatic BOOL\ncompile_branch(...)\n{\n  ...\n  else if ((digitab[ptr[1]] && ctype_digit) != 0)\n  ...\n}\n\nNeed:\nelse if ((digitab[ptr[1]] & ctype_digit) != 0)\n---------------------------------------------------------------\nV568 It's odd that the argument of sizeof() operator is the 'sizeof (SECURITY_ATTRIBUTES)' expression. libhttpd util_win32.c 115\n\nPSECURITY_ATTRIBUTES GetNullACL(void)\n{\n  PSECURITY_ATTRIBUTES sa;\n\n  sa  = (PSECURITY_ATTRIBUTES) LocalAlloc(LPTR, sizeof(SECURITY_ATTRIBUTES));\n  sa->nLength = sizeof(sizeof(SECURITY_ATTRIBUTES));\n  ...\n}\n\nNeed: \nsa->nLength = sizeof(SECURITY_ATTRIBUTES);\n---------------------------------------------------------------\nV579 The apr_snprintf function receives the pointer and its size as arguments. It is possibly a mistake. Inspect the second argument. libhttpd util_pcre.c 85\n\nAP_DECLARE(apr_size_t) ap_regerror(int errcode, const ap_regex_t *preg,\n                                   char *errbuf, apr_size_t errbuf_size)\n{\n  ...\n  apr_snprintf(errbuf, sizeof errbuf,\n               \"%s%s%-6d\", message, addmessage, (int)preg->re_erroffset);", "id": 148082, "time": "2011-07-22T12:21:28Z", "creator": "karpov@viva64.com", "creation_time": "2011-07-22T12:21:28Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "trawick@apache.org", "text": "Very cool/thanks for the report!\n(child.c 404 is already fixed, but the others aren't familiar)", "id": 148086, "time": "2011-07-22T14:13:23Z", "bug_id": 51542, "creation_time": "2011-07-22T14:13:23Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "- util_pcre.c 85 already fixed in r1095448\n- other HTTPD issues fixed in trunk in r1172732\n- the APR parts still need to be checked", "attachment_id": null, "id": 149500, "creator": "sf@sfritsch.de", "time": "2011-09-19T18:05:38Z", "bug_id": 51542, "creation_time": "2011-09-19T18:05:38Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 51542, "is_private": false, "id": 149506, "time": "2011-09-19T21:25:51Z", "creator": "sf@sfritsch.de", "creation_time": "2011-09-19T21:25:51Z", "tags": [], "text": "- fixed apr sha2.c issue in 1172825, r1172828, r1172829\n- apr memcache issue already fixed in trunk in r982408, r982409\n- Checked that the pcre issue is fixed in 8.12\n\nCan somebody look at iconv_uc.c?"}]
[{"count": 0, "tags": [], "creator": "ojd@aspectgroup.co.uk", "text": "By passing in NULL as the filter object, the brigade isnt flushed. At the end \nwe can query the length of the data and set the Content-Length, and so allow \nKeep-Alives to work. The propfind method still supplies a filter object and so \nthe possibly long responses will be streamed out.\n\nOli\n\ndiff -u mod_dav.c.orig mod_dav.c\n\n--- mod_dav.c.orig      2004-03-10 17:49:48.000000000 +0000\n+++ mod_dav.c   2004-03-10 15:03:49.000000000 +0000\n@@ -524,7 +524,7 @@\n    R->output_filters.  Use xml NAMESPACES in initial tag, if\n    non-NULL. */\n static void dav_begin_multistatus(apr_bucket_brigade *bb,\n-                                  request_rec *r, int status,\n+                                  request_rec *r, ap_filter_t *output, int \nstatus,\n                                   apr_array_header_t *namespaces)\n {\n     /* Set the correct status and Content-Type */\n@@ -532,19 +532,19 @@\n     ap_set_content_type(r, DAV_XML_CONTENT_TYPE);\n \n     /* Send the headers and actual multistatus response now... */\n-    ap_fputs(r->output_filters, bb, DAV_XML_HEADER DEBUG_CR\n+    ap_fputs(output, bb, DAV_XML_HEADER DEBUG_CR\n              \"<D:multistatus xmlns:D=\\\"DAV:\\\"\");\n \n     if (namespaces != NULL) {\n        int i;\n \n        for (i = namespaces->nelts; i--; ) {\n-           ap_fprintf(r->output_filters, bb, \" xmlns:ns%d=\\\"%s\\\"\", i,\n+           ap_fprintf(output, bb, \" xmlns:ns%d=\\\"%s\\\"\", i,\n                       APR_XML_GET_URI_ITEM(namespaces, i));\n        }\n     }\n \n-    ap_fputs(r->output_filters, bb, \">\" DEBUG_CR);\n+    ap_fputs(output, bb, \">\" DEBUG_CR);\n }\n \n \n@@ -556,17 +556,20 @@\n     apr_bucket_brigade *bb = apr_brigade_create(r->pool,\n                                                 r->connection->bucket_alloc);\n \n-    dav_begin_multistatus(bb, r, status, namespaces);\n+    dav_begin_multistatus(bb, r, NULL, status, namespaces);\n \n     apr_pool_create(&subpool, r->pool);\n \n     for (; first != NULL; first = first->next) {\n       apr_pool_clear(subpool);\n-      dav_send_one_response(first, bb, r->output_filters, subpool);\n+      dav_send_one_response(first, bb, NULL, subpool);\n     }\n     apr_pool_destroy(subpool);\n \n-    ap_fputs(r->output_filters, bb, \"</D:multistatus>\" DEBUG_CR);\n+    ap_fputs(NULL, bb, \"</D:multistatus>\" DEBUG_CR);\n+    apr_off_t len;\n+    apr_brigade_length(bb,1,&len);\n+    ap_set_content_length(r,len);\n     ap_filter_flush(bb, r->output_filters);\n }\n \n@@ -2049,7 +2052,7 @@\n        404. Note that <response> elements will override these ns0,\n        ns1, etc, but NOT within the <response> scope for the\n        badprops. */\n-    dav_begin_multistatus(ctx.bb, r, HTTP_MULTI_STATUS,\n+    dav_begin_multistatus(ctx.bb, r, r->output_filters, HTTP_MULTI_STATUS,\n                           doc ? doc->namespaces : NULL);\n \n     /* Have the provider walk the resource. */", "id": 53823, "time": "2004-03-10T18:05:07Z", "bug_id": 27576, "creation_time": "2004-03-10T18:05:07Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 27576, "attachment_id": null, "text": "What issue are you seeing? No, the PROPFIND response does not, and should not\nnecessarily include a Content-Length header any more.  This is a feature, not a bug.", "id": 53864, "time": "2004-03-11T13:12:18Z", "creator": "jorton@redhat.com", "creation_time": "2004-03-11T13:12:18Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 27576, "attachment_id": null, "text": "Hmmm, mod_dav is not sending an EOS bucket after the PROPFIND response, which\nlooks like a bug, but I can't see any direct practical problems caused by it.", "id": 53866, "time": "2004-03-11T13:30:57Z", "creator": "jorton@redhat.com", "creation_time": "2004-03-11T13:30:57Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 27576, "attachment_id": null, "text": "I was wanting to enable Keep-Alives for in particular PROPPATCH as I am trying \nto upload/syncronising 10,000s of files on some web servers and was looking for \na simple speed improvements. I wasnt looking at the PROPFIND method ( except \nfor not breaking it )", "id": 53868, "time": "2004-03-11T14:04:54Z", "creator": "ojd@aspectgroup.co.uk", "creation_time": "2004-03-11T14:04:54Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jorton@redhat.com", "text": "That still doesn't describe the issue: are you using an HTTP/1.0 client? \nHTTP/1.1 supports persistent connections for responses without a Content-Length\nusing the \"chunked\" transfer-encoding.  Yes, if you're using an HTTP/1.0 client,\nthen the server may not use a persistent connection with any 207 response.", "id": 53869, "time": "2004-03-11T14:19:14Z", "bug_id": 27576, "creation_time": "2004-03-11T14:19:14Z", "is_private": false, "attachment_id": null}, {"text": "Blame Microsoft! I am using their MsXml.IServerXmlHttp object (ver 4) which I \nthought always did HTTP/1.1, but on my dev server I am getting Connection: \nclose in the response, until I changed the server to set the Content-Length as \nper the patch. On my live server I get Transfer-Encoding: chunked, as you say \nit should.\n\nSorry to have wasted your time.", "tags": [], "bug_id": 27576, "attachment_id": null, "count": 5, "id": 53872, "time": "2004-03-11T15:24:58Z", "creator": "ojd@aspectgroup.co.uk", "creation_time": "2004-03-11T15:24:58Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "charles-edouard.poisnel@kosmos.fr", "is_private": false, "text": "We are using fat war packaging for one of our webapps. There are JSP tags (/META-INF/tags/**/*.tag), inside required jars (/WEB-INF/lib/*.jar).\n\nDuring JSP compilation, when calling a jar entry (a tag inside a nested jar) this entry is called twice, with same name, but the InputStream is not at same position.\n\n# Explanation\n\n1. JSP compilation of a JSP: This JSP references tld (in lib-tld.jar), and this tld uses a tag (standard syntax) :\n\nEx:\n<tag-file>\n   <name>autocomplete</name>\n   <path>/META-INF/tags/autocomplete/autocomplete.tag</path>\n</tag-file>\n\n\n2. The tag is loaded one first time, to determine syntax and encoding (org.apache.jasper.compiler.ParserController#determineSyntaxAndEncoding).\n\nIt calls:\n\norg.apache.jasper.compiler.JspUtil#getInputStream -> jar.getInputStream(jarEntryName);\n\n\n3. The tag is loaded a second time to parse content, but the return value is an InputStream at a different position (called by ParseController#doParse)\n\n4. Tag is not properly parsed (no attributes) and JSP does not compile.\n\n\n# Cause\n\norg.apache.tomcat.util.scan.AbstractInputStreamJar\n\n\n>    private void gotoEntry(String name) throws IOException {\n>        if (entry != null && name.equals(entry.getName())) {\n>            return;\n>        }\n>        reset();\n>        JarEntry jarEntry = jarInputStream.getNextJarEntry();\n>        while (jarEntry != null) {\n>            if (name.equals(jarEntry.getName())) {\n>                entry = jarEntry;\n>                break;\n>            }\n>            jarEntry = jarInputStream.getNextJarEntry();\n>        }\n>    }\n\nWhen calling the same entry twice consecutively, entry is not null and parameter name is same as entry.getName(), it loads the same attribute jarInputStream (org.apache.tomcat.util.scan.AbstractInputStreamJar#getInputStream)\n\nI've patched the class AbstractInputStreamJar and removed the first three lines of gotoEntry (reset unconditionnally), and it solved this problem.\n\n# Workaround\n\nIt's not reproducible if the war is unpacked (no problem with JarFileUrlJar)\nFor information, this behavior does not seem to be reproducible with this revision:  http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/tomcat/util/scan/JarFileUrlNestedJar.java?view=markup&pathrev=1742245#l76\n\nRegards,", "id": 197367, "time": "2017-03-01T22:38:03Z", "bug_id": 60798, "creation_time": "2017-03-01T22:38:03Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 60798, "text": "Note: tomcat-embed-core-8.5.11 is used.", "id": 197369, "time": "2017-03-01T22:40:40Z", "creator": "charles-edouard.poisnel@kosmos.fr", "creation_time": "2017-03-01T22:40:40Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 60798, "attachment_id": null, "is_private": false, "id": 197422, "time": "2017-03-03T12:08:29Z", "creator": "markt@apache.org", "creation_time": "2017-03-03T12:08:29Z", "text": "Thanks for the report. I created a simple test that confirmed the issue and I have fixed the root cause.\n\nFixed in:\n- trunk for 9.0.0.M18 onwards\n- 8.5.x for 8.5.12 onwards\n- 8.0.x for 8.0.42 onwards"}]
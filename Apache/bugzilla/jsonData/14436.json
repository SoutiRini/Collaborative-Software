[{"count": 0, "tags": [], "creator": "tony@absolutejava.com", "attachment_id": null, "text": "Hello,\n\nI'm using TC 4.1.12 on Win 2k. I'm using the TC Coyote Connector.\n\nI've checked the Servlet v2.3 spec and the behavior I'm seeing in TC seems to \ngo against the spec. In general, the problem is that the original query string \nis not properly aggregated when a servlet is invoked using a RequestDispatcher \nwhere and the target servlet has its own query string. Here's an example:\n\nI have a servlet called \"servletA\". Let's say \"servletA\" is invoked from a \nbrowser with this URL:\n\nhttp://localhost/tst/ServletA?x=1\n\nWithin \"servletA\" we create a RequestDispatcher for \"servletB\" and then forward \nto \"servletB\" like this:\n\nRequestDispatcher rd = request.getRequestDispatcher(\"servletB\");\nrd.forward(request, response);\n\nIn \"servletB\", a call to \"request.getQueryString()\" returns the string \"x=1\". \nIn other words, \"servletB\" is able to \"see\" the query string used to \ninvoke \"servletA\". Okay, so far, so good.\n\nNow, here's the problem: If \"servletA\" appends a query string to \"servletB\" \nwhen creating the RequestDispatcher like this:\n\nRequestDispatcher rd = request.getRequestDispatcher(\"servletB?z=1\");\n\n\"servletB\" will only see the query string, \"z=1\", it will *no longer* see \nthe \"x=1\" query string.\n\nWhat I *expect* to see in \"servletB\" is a query string \"x=1&z=1\" -- i.e., \n*both* query strings.\n\nLet me quote from SRV.8.1.1 (Servlet 2.3): \"Parameters specified in the query \nstring used to create the RequestDispatcher take precedence over other \nparameters of the same name passed to the included servlet.\"\n\nIn my example, the parameter names are *not* the same (\"x\" and \"z\") so the \"z\" \nparameter should not take precedence over \"x\". Also, the quote above refers to \nthe \"included servlet\". I believe this generically refers to forwarded servlets \nas well. The example in the spec just happens to be using include() rather than \nforward().\n\nFinally, I would like to mention what happens if you use the \nRequestDispatcher.include() method rather than forward(). Using my example \nabove, if you change forward() to include(), \"servletB\" will only see the \"x=1\" \nquery string. It will *never* see the \"z=1\".\n\nOne last quote from the servlet spec (SRV.8.4.1): \"The request dispatching \nmechanism is responsible for aggregating query string parameters when \nforwarding or including responses.\"\n\nSo, can you confirm that this is a bug?\n\nThanks very much...", "id": 26043, "time": "2002-11-11T02:42:23Z", "bug_id": 14436, "creation_time": "2002-11-11T02:42:23Z", "is_private": false}, {"count": 1, "tags": [], "creator": "Brian.Ewins@btinternet.com", "text": "*** Bug 11324 has been marked as a duplicate of this bug. ***", "id": 26797, "time": "2002-11-22T15:32:04Z", "bug_id": 14436, "creation_time": "2002-11-22T15:32:04Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 14436, "attachment_id": null, "text": "This is not a bug. All of the parameters are available through the API using \ngetParameter() and related functions. I have tested this with TC4 and TC5.\n\nThe spec only requires that the parameters are made available. It does not \nrequire that the query strings are merged.", "id": 53060, "time": "2004-02-26T20:45:24Z", "creator": "markt@apache.org", "creation_time": "2004-02-26T20:45:24Z", "is_private": false}]
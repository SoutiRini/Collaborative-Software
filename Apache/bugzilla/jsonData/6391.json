[{"count": 0, "tags": [], "creator": "gb@opengroup.org", "text": "If I have target A that task B depends on, i.e.\n\n<target name=\"A\" />\n\n<target name=\"B\" depends=\"A\" />\n\nThen if I do an antcall within A to B then you have a circular \ndependency.\n\ni.e.\n\n<target name=\"A\">\n   <antcall target=\"B\" />\n</target>\n\nyou now have a circular dependency and Ant will just spin.\n\nIt would be nice to have detection of this by examining the parent\ntarget chain to ensure that this can't happen.\n\nLeaving this down to the developer is feasible but can put a large burden on \nyou when you have a large build file, i.e. > 2000 lines.\n\nLooking at the change notes for 1.4.1 it doesn't look like this issue has been \ntackled.\n\nThanks,\n\nGary", "id": 10579, "time": "2002-02-12T12:44:12Z", "bug_id": 6391, "creation_time": "2002-02-12T12:44:12Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "steve_l@iseran.com", "text": "Because the target of an <antcall> can be specified with properties, this is \nclearly an instance of The Halting Problem: you cant tell what happens till \nyou run it. As such it can not be fixed until a fundamental breakthrough in \nComputer Science theory, or, given that the Halting Problem is related to \nGodel's Incompleteness Theorem, a fundamental breakthrough in mathematics.\n\nIf you can address these issues, you are welcome to submit a patch: I will \ngladly commit it.\n\nFiled as WONTFIX as there is no CANTFIX", "count": 1, "id": 10814, "time": "2002-02-16T18:30:04Z", "bug_id": 6391, "creation_time": "2002-02-16T18:30:04Z", "is_private": false}, {"count": 2, "tags": [], "text": "This seems a bit of a cop-out...\n\nI can think of lots of potential ways out, for instance:\n\n   1.  Acknowledge that this can happen and provide loop detection and \n   allow an attribute either on \"target\" or \"antcall\" that will then \n   allow Ant to break out after a specific number of loops, this would\n   then allow Users who want to loop loop.  i.e. have:\n       <antcall loops=\"5\"...\n\n   2.  Provide a warning before execution begins to indicate that a loop\n   could occur, based purely on the antcall targets and depends list.\n   It is then up to the User to decide whether they keep processing.\n\n   3.  If you are in a loop then, in general, you have evaulated all the\n   properties and you should then be able to detect the loop, i.e. determine\n   whether you would execute the loop again since the property is unlikely \n   to change.  If you loop twice then you can be pretty sure that the property\n   that governs entry into the loop would not change.\n\n   4.  Do a \"dummy\" pass through the targets to try and evaluate the\n   properties, since the properties can be evaluated this should be possible.\n\nNot sure why the Halting Problem applies here since Ant is the one who is \nexecuting the commands.  It is not Ant itself that would loop but the commands \nit executes...this is a different matter and the Halting Problem should not \napply.\n\nMy preference is for option 3, so that a warning is output to indicate that it \nMAY occur...if the User then wants to ignore it then that's fine...\n\nIt seems a bit of a poor side-step to just say that \"it can't be fixed\", so \ndon't fix the specific problem, just provide Users with more \ninformation...that's better than saying we have to re-write Computer Science \ntheory...\n", "attachment_id": null, "id": 10849, "creator": "gb@opengroup.org", "time": "2002-02-18T10:39:44Z", "bug_id": 6391, "creation_time": "2002-02-18T10:39:44Z", "is_private": false}, {"count": 3, "tags": [], "creator": "steve_l@iseran.com", "text": "You propose three fixes. #2. 'detect' by examining the graph, is the one that \nTHP states is impossible without running the code. This is what you asked for \nin your original RFE.\n\n1, 3 and 4 rely on detecting looping at run time, which is nominally tractable.\n\nIf you look at how <antcall> is implemented, it is transformed in a call of \n<ant> where buildfile=self; to implement circular dependency checking in \n<antcall> you'd probably have to do it in <ant>, which means that you need to \nredesign the framework to detect (at run time) looping across multiple build \nfile graphs, and distinguish callbacks and contrived execution patterns from \nreal looping.\n\nMaybe it could be done with a central (shared) list of executing targets, \nbuild files, properties, etc.\n\nBut it would be very hard to write, potentially hard to test as the corner \ncases that would break the process are pretty convoluted. \n\nBut here is the key point: you shouldnt be using antcall that much anyway.\n\nIf you find your build file is too full of antcall work, then rethink how you \nare using ant, refactor the build file. split out common 'subroutine' targets \ninto a separate build file.  \n\n", "id": 10865, "time": "2002-02-18T20:58:52Z", "bug_id": 6391, "creation_time": "2002-02-18T20:58:52Z", "is_private": false, "attachment_id": null}]
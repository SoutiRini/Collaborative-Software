[{"count": 0, "tags": [], "bug_id": 35748, "attachment_id": null, "id": 77316, "time": "2005-07-15T03:32:12Z", "creator": "eross@m-qube.com", "creation_time": "2005-07-15T03:32:12Z", "is_private": false, "text": "Refer to src/java/org/apache/log4j/Category.java :\n\n      try {\n        // Protect against simultaneous writes operations such as\n        // addAppender, removeAppender,...\n        c.lock.getReadLock();\n...\n       } finally {\n         c.lock.releaseReadLock();\n       }\n\nAlthough you're not using this class, this advice holds:\n\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/locks/ReentrantLock.html\n\nIt is recommended practice to always immediately follow a call to lock with a\ntry block, most typically in a before/after construction such as:\n\n class X {\n   private final ReentrantLock lock = new ReentrantLock();\n   // ...\n\n   public void m() { \n     lock.lock();  // block until condition holds\n     try {\n       // ... method body\n     } finally {\n       lock.unlock()\n     }\n   }\n }"}, {"count": 1, "tags": [], "bug_id": 35748, "attachment_id": 19113, "text": "Created attachment 19113\nCategory.java with \"recommended practice\"-locks", "id": 95689, "time": "2006-11-11T10:52:45Z", "creator": "kay.abendroth@raxion.net", "creation_time": "2006-11-11T10:52:45Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 35748, "attachment_id": 19132, "text": "Created attachment 19132\nPatch file equivalent to previous submission.", "id": 95846, "time": "2006-11-14T14:50:59Z", "creator": "carnold@apache.org", "creation_time": "2006-11-14T14:50:59Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 35748, "attachment_id": null, "id": 95848, "time": "2006-11-14T15:05:26Z", "creator": "carnold@apache.org", "creation_time": "2006-11-14T15:05:26Z", "is_private": false, "text": "Looks reasonable.  log4j 1.2 code uses a different design, so patch is not appropriate.  Committed \npatched version of Category.java (no unnecessary whitespace changes) rev 475041."}]
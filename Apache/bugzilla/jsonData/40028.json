[{"count": 0, "tags": [], "bug_id": 40028, "text": "When i try to put into a cell this\n\n<javaCode>\nrow.createCell((short) 11).setCellValue(productos.getImporte().doubleValue());\n</javaCode>\n\nand doubleValue() return zero... in xls appears 3.48484087130803E+308", "id": 91204, "time": "2006-07-12T12:17:39Z", "creator": "rodrigo.vega.bs.as.arg@gmail.com", "creation_time": "2006-07-12T12:17:39Z", "is_private": false, "attachment_id": null}, {"text": "(In reply to comment #0)\n> When i try to put into a cell this\n> \n> <javaCode>\n> row.createCell((short) 11).setCellValue(productos.getImporte().doubleValue());\n> </javaCode>\n> \n> and doubleValue() return zero... in xls appears 3.48484087130803E+308\nSorry doubleValue() don't return zero, it return NaN\n", "tags": [], "bug_id": 40028, "is_private": false, "count": 1, "id": 91205, "time": "2006-07-12T12:36:46Z", "creator": "rodrigo.vega.bs.as.arg@gmail.com", "creation_time": "2006-07-12T12:36:46Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "text": "IEEE NaN is a little bit tricky, and Excel makes a big mess of it.  I believe if you put NaN in a formula (encoding that value in a NumberPtg) Excel will display '#NUM!', which is sort of expected.  Excel seems to get NaN wrong for a (non formula) cell with a plain number value.  \n\nPerhaps the most consistent way to translate the concept of NaN to an Excel cell value would be to set the error code value to '#NUM!'. The following code can do that:\nif(Double.isNaN(d)) {\n  cell.setCellErrorValue(HSSFErrorConstants.ERROR_NUM);\n} else {\n  cell.setCellValue(d);\n}\n", "id": 116277, "time": "2008-05-05T19:43:13Z", "bug_id": 40028, "creation_time": "2008-05-05T19:43:13Z", "is_private": false}]
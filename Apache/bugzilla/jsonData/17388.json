[{"count": 0, "tags": [], "bug_id": 17388, "text": "Result set created in query tag is never released, resulting in rdbms error: ' \nmaximum open cursors exceeded'.\n\nThe jsp code is very like this:\n\n<c:set var=\"date_begin\" value=\"${param.begin_date}\"/>\n<c:set var=\"date_end\" value=\"${param.end_date}\"/>\n\n<sql:query var=\"manifs\">\nSELECT key_cuo, key_voy_nber, key_dep_date from car_gen\n  where car_reg_date is not null and car_reg_date >= to_date(?,'YYYYMMDD') and \ncar_reg_date <= to_date(?,'YYYYMMDD')\n<sql:param value=\"${date_begin}\"/>\n<sql:param value=\"${date_end}\"/>\n</sql:query>\n\n<c:forEach var=\"man\" begin=\"0\" items=\"${manifs.rows}\">\n  <sql:query var=\"ops\">\n \t\tSELECT key_cuo, key_voy_nber, key_dep_date, key_bol_ref, \ncar_wgt_avl, car_pkg_avl,  max(car_ope_nbr)\n    from car_bol_ope\n    where key_cuo = ? and key_voy_nber = ? and \n    key_dep_date = ? and (car_pkg_avl    > 0 or car_wgt_avl > 10)\n    group by key_cuo, key_voy_nber,key_dep_date, key_bol_ref, car_wgt_avl, \ncar_pkg_avl\n  \t<sql:param value=\"${man.KEY_CUO}\"/>\n  \t<sql:param value=\"${man.KEY_VOY_NBER}\"/>\n  \t<sql:param value=\"${man.KEY_DEP_DATE}\"/>\n  </sql:query>\n\t<c:forEach var=\"op\" begin=\"0\" items=\"${ops.rows}\">\n\t  <sql:query var=\"dts\">\n\t\t\tSELECT a.key_cuo cuo, a.key_voy_nber voy, TO_CHAR\n(a.key_dep_date, 'YYYY/MM/DD') dep, a.key_bol_ref bol, \n    \t? wgt, ? pkg, a.carbol_cons_nam cons, TO_CHAR\n(b.car_reg_date, 'YYYY/MM/DD') reg\n  \t\tfrom   car_bol_gen a, car_gen b\n  \t\twhere (a.key_cuo = b.key_cuo and a.key_voy_nber = \nb.key_voy_nber and a.key_dep_date = b.key_dep_date) and \n\t\t\ta.key_cuo = ? and a.key_voy_nber = ? and a.key_dep_date \n= ? and a.key_bol_ref = ? and \n     (carbol_status = 0 or carbol_status = 4)\n  \t\t<sql:param value=\"${op.CAR_WGT_AVL}\"/>\n  \t\t<sql:param value=\"${op.CAR_PKG_AVL}\"/>\n  \t\t<sql:param value=\"${op.KEY_CUO}\"/>\n  \t\t<sql:param value=\"${op.KEY_VOY_NBER}\"/>\n  \t\t<sql:param value=\"${op.KEY_DEP_DATE}\"/>\n  \t\t<sql:param value=\"${op.KEY_BOL_REF}\"/>\n\t\t</sql:query>\n\t\t<c:forEach var=\"dt\" begin=\"0\" items=\"${dts.rows}\">\n\t\t\n\t\t<!-- <TR> row here using ${dt.<column_name} -->\n\t\t</c:forEach>\n\t</c:forEach>\n</c:forEach>", "id": 31930, "time": "2003-02-25T18:40:45Z", "creator": "cvasquez@seniat.gov.ve", "creation_time": "2003-02-25T18:40:45Z", "is_private": false, "attachment_id": null}, {"text": "Hummm, I just checked the code and we definitely close the connection in \nthe doFinally() of the tag handler (you don't use transactions, right?)\n\n    /**\n     * Close the <code>Connection</code>, unless this action is used\n     * as part of a transaction.\n     */\n    public void doFinally() {\n\tif (conn != null && !isPartOfTransaction) {\n\t    try {\n\t\tconn.close();\n\t    } catch (SQLException e) {} // Not much we can do\n\t}\n\n\tconn = null;\n\tparameters = null;\n    }\n\nI suggest you create a much simpler test case that reproduces the problem\nyou are describing and try it out again. \nIf you still experiment the problem, send us the *simple* test case and \nwe'll be happy to run it and figure out what the problem is.\n\nChanging the state to \"WORKSFORME\" until more details can be provided.\n", "tags": [], "bug_id": 17388, "is_private": false, "count": 1, "id": 32051, "time": "2003-02-26T23:14:41Z", "creator": "pierre.delisle@sun.com", "creation_time": "2003-02-26T23:14:41Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 17388, "text": "Apparently I'm using a pooled database connection, for that reason the result \nsets never becomes disconnected, although the connection has been closed \nseveral times (one for each </sql:query>). \n\nThat fact, added to the fact that I use query tags inside <sql:forEach> loops, \ncauses the rdbms to rise fault 'too many cursors open'.\n\nI added a 'statement close' in the file QueryTagSupport.java, and my problem \ndisappeared.\n\nThis is the code I left in the \norg/apache/taglibs/standard/tag/common/sql/QueryTagSupport.java file (line \n~249):\n\n\ttry {\n\t    PreparedStatement ps = conn.prepareStatement(sqlStatement);\n\t    setParameters(ps, parameters);\n\t    ResultSet rs = ps.executeQuery();\n\t    result = new ResultImpl(rs, startRow, maxRows);\n            ps.close(); // added \n\t}\n\tcatch (Throwable e) {\n\t    throw new JspException(sqlStatement + \": \" + e.getMessage(), e);\n\t}", "id": 33355, "time": "2003-03-18T16:54:50Z", "creator": "cvasquez@seniat.gov.ve", "creation_time": "2003-03-18T16:54:50Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "pierre.delisle@sun.com", "attachment_id": null, "is_private": false, "id": 36305, "time": "2003-04-29T19:01:30Z", "bug_id": 17388, "creation_time": "2003-04-29T19:01:30Z", "text": "According to experts in the JDBC field, \n\"all Statement objects (and their inherited statements PreparedStatement,\nCallableStatement) will be closed when the connection that created them is closed.\"\n\nSo this should not be a problem.\n\nHowever, experts will also say:\n\"It is however good coding practise for applications to close the statements as\nsoon as they have finished processing them.\"\n\nIn light of this, and if it can solve the reported problem, I have therefore\ncommitted the suggested fix."}, {"count": 4, "tags": [], "creator": "marrottem@comcast.net", "attachment_id": null, "is_private": false, "id": 65185, "time": "2004-10-15T15:09:30Z", "bug_id": 17388, "creation_time": "2004-10-15T15:09:30Z", "text": "I found the same problem with the <sql:update> tag.  You might consider \nclosing the statement after getting the result set in this case, too."}, {"count": 5, "tags": [], "text": "I found the same problem with the <sql:update> tag.  You might consider \nclosing the statement after getting the result set in this case, too.", "is_private": false, "id": 65186, "creator": "marrottem@comcast.net", "time": "2004-10-15T15:12:39Z", "bug_id": 17388, "creation_time": "2004-10-15T15:12:39Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "justyna.horwat@sun.com", "is_private": false, "id": 65333, "attachment_id": null, "bug_id": 17388, "creation_time": "2004-10-19T20:53:19Z", "time": "2004-10-19T20:53:19Z", "text": "Closed statement object in update tag as soon as processing is finished instead of waiting for the \nconnection close to clean up the statements."}, {"count": 7, "tags": [], "bug_id": 17388, "text": "<sql:transaction> provides nested database action elements with a shared \nConnection, set up to execute all statements as one transaction.  \nUnfortunetly, each statement remains open until the entire transaction \ncompletes.  Leaving statements open usually mean leaving database resources \nopen.  For example each <sql:update> opens an Oracle cursor.  And the maximum \nopen cursors in Oracle is typically set to a relativley small number, e.g. \n500.  Why should a JSTL user have to worry about explicilty closing statements \nthat <sql:update> tag opens?  In addition, what tag or object would be used to \nexplicitly do this?  \n\nIt's always good programming practice to close a statemnt after it's used.  \nThe <sql:update> is an agent for the tag consumer that opens database \nstatements and should finally close them after the body of the tag is executed.\n\n", "id": 65668, "time": "2004-10-25T19:33:08Z", "creator": "marrottem@comcast.net", "creation_time": "2004-10-25T19:33:08Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "dhiru.pandey@sun.com", "attachment_id": null, "text": "(In reply to comment #7)\n\nNeed some clarification on this comment.\n\n> <sql:transaction> provides nested database action elements with a shared \n> Connection, set up to execute all statements as one transaction.  \n> Unfortunetly, each statement remains open until the entire transaction \n> completes.  Leaving statements open usually mean leaving database resources \n> open.  For example each <sql:update> opens an Oracle cursor.  And the maximum \n> open cursors in Oracle is typically set to a relativley small number, e.g. \n> 500.  Why should a JSTL user have to worry about explicilty closing statements \n> that <sql:update> tag opens?  In addition, what tag or object would be used to \n> explicitly do this?  \n> \nIn looking thru the code, I did find that 2 places where PreparedStatement was\nbeing used, and it was being closed right after. Is there something else that \nwe should be doing here ? (Files were QueryTagSupport.java and \nUpdateTagSupport.java.)\n\nI did submit a patch request for one issue that I did find in closing of the\nprepared statement. Here is what I thought was a potential problem: \n\nA change is needed in the current implementation, if an error occurs\nbefore the preparedStatement is closed, then the closing of the\npreparedStatement would depend on the implementation of finalize() for\nthe PreparedStatement class which should be called when that object is\nGCed (Garbage Collected). This is not a good practice since:\n\na) we should not depend on the implementation of the finalize() method\n     in PreparedStatement\nb) the invocation of the finalize() method is not guaranteed by the JVM.\n     So even if finalize() does call close(), there is no guarantee\n     that finalize() itself will be called when this object is GCed\n     and we may continue to see memory leaks and resource leaks\n     as reported in this Bug\n\nThis is true for both the files (QueryTagSupport.java and \nUpdateTagSupport.java.)\n\n> It's always good programming practice to close a statemnt after it's used.  \n> The <sql:update> is an agent for the tag consumer that opens database \n> statements and should finally close them after the body of the tag is executed.\n> \n> \nAgreed\n\nIn light of the above facts, shouldn't this bug be closed. Please clarify if\nanything more is needed here", "id": 68545, "time": "2004-12-15T01:37:08Z", "bug_id": 17388, "creation_time": "2004-12-15T01:37:08Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 17388, "text": "Created attachment 13765\nPatch sent by Dhiru to the devs list", "id": 68615, "time": "2004-12-16T14:07:05Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-12-16T14:07:05Z", "is_private": false, "attachment_id": 13765}, {"count": 10, "tags": [], "bug_id": 17388, "attachment_id": null, "text": "The patch submitted by me was applied by Pierre Delisle (thanks Pierre)\n\n  This is needed because in the current implementation, if an error occurs\n  before the preparedStatement is closed, then the closing of the\n  preparedStatement would depend on the implementation of finalize() for\n  the PreparedStatement class which should be called when that object is\n  GCed (Garbage Collected). This is not a good practice since:\n  \n  a) we should not depend on the implementation of the finalize() method\n       in PreparedStatement\n  b) the invocation of the finalize() method is not guaranteed by the JVM.\n       So even if finalize() does call close(), there is no guarantee\n       that finalize() itself will be called when this object is GCed\n       and we may continue to see memory leaks and resource leaks\n       as reported here.\n\nThis should fix the memory and resource leaks observed. Closing this bug.\n\n-Dhiru", "id": 71109, "time": "2005-02-17T02:20:31Z", "creator": "dhiru.pandey@sun.com", "creation_time": "2005-02-17T02:20:31Z", "is_private": false}, {"count": 11, "tags": [], "creator": "lethe@fly.srk.fer.hr", "attachment_id": null, "is_private": false, "id": 73815, "time": "2005-04-19T16:18:44Z", "bug_id": 17388, "creation_time": "2005-04-19T16:18:44Z", "text": "This will not work with Oracle database. Oracle JDBC documentation states\n(oracle.jdbc.driver.OracleResultSet):\n\nNote: Because finalization is problematic for many Java VMs, Oracle JDBC does\nnot have finalizer methods on OracleConnection, OracleStatement and its\nsubclasses, nor OracleResultSet and its subclasses. User code must explicitly\nclose these by sending the close method."}, {"count": 12, "tags": [], "bug_id": 17388, "text": "Created attachment 14757\npatch for query tag\n\nI have created a patch for query tag. Please validate.", "id": 73820, "time": "2005-04-19T16:59:55Z", "creator": "lethe@fly.srk.fer.hr", "creation_time": "2005-04-19T16:59:55Z", "is_private": false, "attachment_id": 14757}, {"count": 13, "tags": [], "bug_id": 17388, "is_private": false, "text": "Created attachment 19444\nPatch for 1.1 and 1.0 tags to close result set", "id": 98415, "time": "2007-01-23T12:08:37Z", "creator": "jimmy.mitchener@gmail.com", "creation_time": "2007-01-23T12:08:37Z", "attachment_id": 19444}, {"count": 14, "tags": [], "bug_id": 17388, "attachment_id": null, "text": "I think the fix is actually a little messier than that ;-). I'm in the process\nof putting something together and I'll check it in shortly.", "id": 98420, "time": "2007-01-23T13:15:47Z", "creator": "kschneider@gmail.com", "creation_time": "2007-01-23T13:15:47Z", "is_private": false}, {"count": 15, "tags": [], "creator": "kschneider@gmail.com", "text": "Just a quick note that I checked-in a fix last week (r499150):\n\nhttp://svn.apache.org/viewvc/jakarta/taglibs/proper/standard/trunk/src/org/apache/taglibs/standard/tag/common/sql/QueryTagSupport.java?view=diff&rev=499150&r1=499149&r2=499150\n\nI guess I won't close this until it can be tested properly...", "id": 98696, "time": "2007-01-29T11:04:20Z", "bug_id": 17388, "creation_time": "2007-01-29T11:04:20Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 17388, "text": "The commit looks good to me. Given that it's for when there are problems with\nthe database, it's not the easiest thing to test.\n\nQueryTagSupport does get tested by the 33054 test. Marking this as fixed.", "id": 99945, "attachment_id": null, "creator": "bayard@apache.org", "creation_time": "2007-03-01T14:03:26Z", "time": "2007-03-01T14:03:26Z", "is_private": false}]
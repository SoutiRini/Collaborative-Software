[{"count": 0, "tags": [], "bug_id": 6160, "attachment_id": null, "id": 10128, "time": "2002-01-31T18:01:30Z", "creator": "amp2@cdc.gov", "creation_time": "2002-01-31T18:01:30Z", "is_private": false, "text": "I am sending responses from a servlet to a client as several serialized objects. \nThe objects need to be returned to client as soon as they are written to the \nObjectOutputStream, instead of all together at one time.  So for example, the \nfirst object written to the output stream is an ack which needs to get returned \nimmediately.  Then, some time later,  a collection of objects might follow that \nare status reports.  Finally, the requested data is returned to the client.\n\n\n\nThe following code, called once for each object that is returned to client, \ncorrectly flushed the data to the client as each object was written to the \noutput stream when using Tomcat 3.1.  However, when using Tomcat 4.0 and 4.0.1 \nversions none of the objects are returned to the client until the output stream \nis closed.\n\n...\nObjectOutputStream clientOutput = new                 \nObjectOutputStream(response.getOutputStream());\nclientOutput.writeObject(data);\nclientOutput.flush();\nresponse.flushBuffer();\n...\n\nwhere response is instance of HttpServletResponse and data is instance of \nSerializable."}, {"count": 1, "tags": [], "bug_id": 6160, "attachment_id": null, "is_private": false, "id": 10129, "time": "2002-01-31T18:09:44Z", "creator": "remm@apache.org", "creation_time": "2002-01-31T18:09:44Z", "text": "flushBuffer does flush the buffer (you can look at the code in the\norg.apache.catalina.connector if you'd like to be convinced of that).\nHowever, the HTTP/1.1 connector may make it behave in a very different way than\nit did in the past, depending on what the HTTP client is doing (but that's the\nHTTP client's fault).\nTry with the HTTP/1.0 connector to see if your client would like it better."}, {"text": "Mark's response:\n\nThanks for your quick response.\n\nMy client is an applet using URLConnection to send and receive request.\n\nI tested the same tomcat setup where the flush appears to fail but this time\nreturned simple text.   See code below.  Client used was Netscape.  The text\nwas returned at seperate times.\n\nI gather from your email that it might be something in the http request\ncoming from my applet that is making the http connector behave differently.\nDo you have any ideas or suggestions about what to explore about using\nURLConnection to correct problem?\n\nthanks greatly for your help,\nmark", "tags": [], "bug_id": 6160, "is_private": false, "count": 2, "id": 10131, "time": "2002-01-31T19:00:02Z", "creator": "remm@apache.org", "creation_time": "2002-01-31T19:00:02Z", "attachment_id": null}, {"count": 3, "text": "No, if you're writing serialized objects, it can be that the client is trying \nto get the whole response before unserializing, for reasons I don't understand \nvery well, but may be caused because the connector will be using the chunked \ntranfer encoding.\nI think it's the client's problem for failing to handle it properly.\n\nI recommend that you try with the HTTP/1.0 connector (it's commented out in the \ndefault configuration), which is a much less modern, so it won't use chunking.", "bug_id": 6160, "attachment_id": null, "id": 10132, "time": "2002-01-31T19:04:25Z", "creator": "remm@apache.org", "creation_time": "2002-01-31T19:04:25Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 6160, "is_private": false, "text": "I tried using the HTTP/1.0 connector defined in the default server.xml which had \nno affect.  I also turned chunking off in the HTTP/1.1 connector with \nallowChunking=\"false\" which had no affect.\n\nOur client is an applet which uses URLConnect to communicate to servlets. For \ntesting I had been running my applets, in appletviewer found in Sun jdk 1.3.  \nThe flush failed as previously described. Same results were observed running the \napplet in Netscape using 1.3.1_01 plugin.\n\nI tried using appletviewer in Sun jdk 1.4 and communications started working as \nexpected.  All serialized objects were returned individually to client when \nservlet's output stream was flushed.\n\nAlso, tomcat 4.0 must be running in jvm 1.4 for flushing to work as expected.  \nFlushing failed when running tomcat 4.0 in 1.3 jvm when using any jvm for \nclient.\n\nObviously there is a work around.  However, it creates a linkage between jvm \nversions used in the server and client, which is a maintenance nightmare for a \ndistributed system.\n\nDo you have any ideas where else to look to find root of problem.  I would \nprefer to figure this out and fix rather than rely on work around.\n\nthanks", "id": 10168, "time": "2002-02-01T15:40:40Z", "creator": "amp2@cdc.gov", "creation_time": "2002-02-01T15:40:40Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 6160, "attachment_id": null, "id": 10169, "time": "2002-02-01T16:27:02Z", "creator": "remm@apache.org", "creation_time": "2002-02-01T16:27:02Z", "is_private": false, "text": "That's strange, but I'm against adding workarounds for obvious JDK bugs. It must\nbe dealing with some buffering issues or something like that, and is extremely\nrisky to fix for a very narrow use case. So it won't be fixed in the current\nconnector (so I mark the bug as WONTFIX).\n\nI don't know yet if the new HTTP connector will fix it, but it will be written\nprimarily for HTTP spec compliance, robustness and speed, not to work around JDK\nbugs. It will also have a much cleaner design, which separates the buffering\nfrom the connector itself. This may fix the problems (at least on the server side).\n\nI find it extremely strange that the JDK version on the server side would also\naffect the result."}, {"count": 6, "tags": [], "creator": "amp2@cdc.gov", "attachment_id": null, "id": 10331, "time": "2002-02-04T20:17:02Z", "bug_id": 6160, "creation_time": "2002-02-04T20:17:02Z", "is_private": false, "text": "Sorry about this, but I provided some incorrect information about this problem.  \nWhen I attempted to turn the chunking off, I was working on the wrong copy of \nserver.xml.  After correcting this, disabling the chunking in the HTTP/1.1 \nconnector solved the problem.\n\nI am able to get the flushBuffer() method to work using both 1.3 and 1.4 jvm on \nthe client and server side."}]
[{"count": 0, "tags": [], "creator": "kwright@apache.org", "attachment_id": null, "id": 200571, "time": "2017-09-02T08:48:16Z", "bug_id": 61478, "creation_time": "2017-09-02T08:48:16Z", "is_private": false, "text": "When poi-ooxml uses reflection to locate classes in poi-ooxml-schema, it apparently does not use the classloader of the current class or thread to do this.  As a result, you cannot get poi-ooxml to work properly in a non-root classloader.\n\nFurthermore, even if you move poi-ooxml-schema to the root level, it has callbacks into poi-ooxml, so you are forced to move THAT jar to root level as well.  And once you do that, poi-ooxml calls back to org.apache.poi.util, which is in poi.jar, so that jar also needs to be run at root level.\n\n(A side note: having poi and poi-ooxml and poi-ooxml-schemas be separate makes little sense if they all depend on each other in this way.)\n\nWe discovered this trying to integrate the latest Tika (which uses POI version 3.9) with ManifoldCF.  ManifoldCF runs tika-parsers at the connector level, which has its own classloader.  We were forced to move all of POI, and its dependencies, to the root classloader level, which greatly increases the size of our binary image."}, {"count": 1, "text": "Any chance you could work up a small junit unit test (probably with dummy classloader) to show the problem, and/or a fix?", "bug_id": 61478, "attachment_id": null, "id": 200572, "time": "2017-09-02T09:40:12Z", "creator": "apache@gagravarr.org", "creation_time": "2017-09-02T09:40:12Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 61478, "attachment_id": null, "id": 200573, "time": "2017-09-02T10:27:43Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T10:27:43Z", "is_private": false, "text": "I verified that this occurs also with POI 3.15.\n\nI should be able to come up with a classloader code snippet that demonstrates the problem.  It will occur when trying to parse any Windows Office file, e.g. xlsx or docx."}, {"count": 3, "tags": [], "creator": "kwright@apache.org", "text": "I looked at providing an example but unfortunately, this occurs under the execution of Tika, which has many dozen dependent jars. If you want a code snippet, you'll either need to set up directory with all Tika dependent jars in it, or you will need to provide me a snippet of code which parses a Microsoft Office file.  Alternatively I can upload a many-megabyte zip file containing the Tika parser with all dependencies that you can just unpack.  Please let me know what you prefer.\n\nAnother way forward is to discuss how you use reflection in POI.  If you use the following method to locate your classes, all should be well:\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-\n\nBut if you use this method, then you will have to be very certain you know what you are doing to get the right class loader:\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-boolean-java.lang.ClassLoader-\n\nI suspect it is the latter, and perhaps you are using the thread class loader rather than the current class's class loader?", "id": 200574, "time": "2017-09-02T10:52:58Z", "bug_id": 61478, "creation_time": "2017-09-02T10:52:58Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 200576, "time": "2017-09-02T11:24:01Z", "bug_id": 61478, "creation_time": "2017-09-02T11:24:01Z", "is_private": false, "text": "Does using XWPFWordExtractor <http://poi.apache.org/apidocs/org/apache/poi/xwpf/extractor/XWPFWordExtractor.html> trigger the problem in your environment? That's the easiest way to do roughly what Tika does in just a few lines\n\nXWPFWordExtractor doc = new XWPFWordExtractor(OPCPackage.open(\"input.docx\"));\ndoc.getText();\ndoc.close();\n\nIf not, just send over a unit test that triggers the problem with Tika, we'll pop the test in the Tika codebase + fix here + check with Tika after our next release\n\n(There's a good overlap in POI and Tika committers!)"}, {"count": 5, "attachment_id": 35277, "bug_id": 61478, "text": "Created attachment 35277\nTestbed for exercising POI classloader\n\nThis testbed needs xmlbeans-2.6.0.jar, poi-3.15.jar, poi-ooxml-3.15.jar, and poi-ooxml-schemas-3.15.jar added to the lib directory after unzipping.", "id": 200577, "time": "2017-09-02T12:21:11Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T12:21:11Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 61478, "attachment_id": null, "id": 200578, "creation_time": "2017-09-02T12:22:01Z", "time": "2017-09-02T12:22:01Z", "creator": "kiwiwings@apache.org", "text": "Please check if #60226, which was applied after 3.15, makes any difference", "is_private": false}, {"count": 7, "tags": [], "bug_id": 61478, "text": "I've uploaded the testbed.  The testbed does not seem to cause the failure we were seeing, however.\n\nIf the codepath for a docx document goes through poi-ooxml-schemas, that means that we're seeing something that's being triggered somehow by Tika.\n\nIn the MCF setup, we have tika-core at the root level, and tika-parsers (and most of its dependencies, including poi) at the connector level.  This has worked in the past, at least until POI started using reflection to look up classes in poi-ooxml-schemas.\n\nThe classloader setup I'm using in the testbed is cribbed directly from ManifoldCF classes that set the class loaders up, so that's clearly not the issue.  Any ideas?", "id": 200579, "time": "2017-09-02T12:30:01Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T12:30:01Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 61478, "text": "Could you provide some stack traces?", "id": 200580, "time": "2017-09-02T13:13:18Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-09-02T13:13:18Z", "is_private": false, "attachment_id": null}, {"count": 9, "text": "Created attachment 35278\nUser stack trace with all jars loaded by connector classloader\n\nImage of user stacktrace when all Tika parser dependencies (including POI) loaded with connector classpath attached.", "bug_id": 61478, "attachment_id": 35278, "id": 200582, "time": "2017-09-02T14:00:52Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T14:00:52Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 61478, "text": "Created attachment 35279\nImage of user stacktrace when poi-ooxml-schema.jar moved to root classloader\n\nThis is the user stacktrace when poi-ooxml-schema and poi-ooxml both moved to root classloader.", "id": 200583, "time": "2017-09-02T14:02:38Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T14:02:38Z", "is_private": false, "attachment_id": 35279}, {"count": 11, "tags": [], "bug_id": 61478, "text": "Mr. Beeker, I cannot readily modify Tika to call the new method.", "id": 200584, "time": "2017-09-02T14:04:26Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T14:04:26Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 61478, "attachment_id": null, "id": 200585, "creation_time": "2017-09-02T15:44:42Z", "time": "2017-09-02T15:44:42Z", "creator": "fanningpj@yahoo.com", "text": "Could you call the setClassLoader method before calling Tika code?\nhttps://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/POIXMLTypeLoader.java?view=markup&pathrev=1763922", "is_private": false}, {"count": 13, "text": "Is the patched POI binary available on Maven yet?", "bug_id": 61478, "attachment_id": null, "id": 200586, "time": "2017-09-02T16:01:10Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T16:01:10Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 61478, "attachment_id": null, "text": "Try poi 3.16 or 3.17-beta1. Both are in maven central.", "id": 200587, "time": "2017-09-02T16:04:01Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-09-02T16:04:01Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 61478, "attachment_id": null, "id": 200588, "time": "2017-09-02T16:19:12Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T16:19:12Z", "is_private": false, "text": "OK -- I am certain that this workaround would solve the problem.  But it is pretty ugly, and we already have a workaround implemented and a patch release is up for a vote.\n\nMay I ask if the POI team attends to address this in a more official manner?  If not, perhaps the Tika team should?  If neither team wishes to address the issue, I will put this fix into ManifoldCF."}, {"count": 16, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "id": 200615, "time": "2017-09-02T21:38:15Z", "bug_id": 61478, "creation_time": "2017-09-02T21:38:15Z", "is_private": false, "text": "> But it is pretty ugly, and we already have a workaround implemented and a patch release is up for a vote.\n\nCould you recommend how to use/identify the correct classloader?\n(as we need access the .xsb files, it's neither the thread context classload, nor the classloader of any generated OOXML xml beans class)\n\nAs I had not much of an idea what the OSGi classloader does, I thought that this is the KISS way to solve the problem, but I'm happy to learn ... and if you ask nicely, we could postpone our final version which I wanted to prepare the release candidate today. \n\n> May I ask if the POI team attends to address this in a more official manner?\n\nOfficial manner, as in a technical solution, if you know how, we will adapt it.\nOtherwise it's officially in our FAQ:\n\nhttp://poi.apache.org/faq.html#faq-N1029C\n\n> We discovered this trying to integrate the latest Tika (which uses POI version 3.9) ...\n\nSeriously? I always rant about users not able to use a recent version, but I never would\nimagine that a PMC chair would write something like that"}, {"count": 17, "text": ">>>\nSeriously? I always rant about users not able to use a recent version, but I never would\nimagine that a PMC chair would write something like that\n<<<\n\nMy apologies -- the actual POI version we were using was 3.15, not 3.9, as I explained elsewhere.  I hope that is clear now.\n\n>>>\nCould you recommend how to use/identify the correct classloader?\n<<<\n\nYes, as I explained above, what you really want to emulate is what happens when you do Class.forName(String classname).  There is a Class.forName() variant which accepts a passed-in class loader, which is what you use.  So you need to do this:\n\n>>>\nInvoking this method is equivalent to:\nClass.forName(className, true, currentLoader)\nwhere currentLoader denotes the defining class loader of the current class.\n<<<\n\nThe defining class loader of the current class is:\n\nxxx.Class.getClassLoader();\n\nThat should be the default behavior, I believe.  What do you think?", "bug_id": 61478, "attachment_id": null, "id": 200616, "time": "2017-09-02T21:59:07Z", "creator": "kwright@apache.org", "creation_time": "2017-09-02T21:59:07Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "creator": "kiwiwings@apache.org", "text": "Just a short feedback ... as I'm not sure, if I can finish it this weekend.\nWhen I tested #60226 / #57857, I used a sample project [1]\nAdditional to Glucazeaus project, one needs the additional service mix patch in #57857\n\nIf the Class.forName approach works in this and manifoldCF, it should be hopefully sufficient to render the workaround obsolete.\n\n\n[1] https://github.com/glucazeau/test-poi-sling", "id": 200617, "time": "2017-09-02T22:34:29Z", "bug_id": 61478, "creation_time": "2017-09-02T22:34:29Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 61478, "text": "From the attached stacktrace, and the sources, it can be seen that the error originates from \n\norg.openxmlformats.schemas.wordprocessingml.x2006.main.DocumentDocument.Factory.parse(*)\n\nwhich is found in\n\nooxml-schemas-1.3.jar\n\nThis is a generated XMLBeans class.  Further, it isn't doing any explicit class loading, it is just importing a class.  So it looks to me like the issue is down in XMLBeans somewhere, or in the user's ClassLoader hierarchy.  \n\nI searched the entire POI codebase, and there are no calls to *.forName(String, ClassLoader) or anything similar.  All calls are using the static Class.forName(String classname) method, which should be fine.\n\nI'm fairly certain the issue for the end user is the placement of ooxml-schemas-1.3.jar in their class loader library structure.  It could be defined at too high a level, and thus inaccessible to a lower classloader, in which case that library should be pushed down rather than POI pulled up.  Note that this is a standard dependency for POI.", "id": 200618, "time": "2017-09-03T05:32:48Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-09-03T05:32:48Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 61478, "attachment_id": null, "id": 200619, "creation_time": "2017-09-03T05:41:48Z", "time": "2017-09-03T05:41:48Z", "creator": "gwoolsey@apache.org", "text": "Argh, I should go to bed.  I see now the issue was calling from DocumentDocument.Factory in ooxml-schemas-1.3.jar to POIXMLTypeLoader in poi-ooxml.jar.\n\nSo it still could be the placement of ooxml-schemas-1.3.jar, but in the reverse case - it could be that the client code can see that jar, but that jar can't see POI.  It could be that ooxml-schemas.1.3.jar is loaded too early, and thus can't see POI.  Perhaps some library at a higher-order classloader also loads that jar somehow.\n\n(In reply to Greg Woolsey from comment #19)\n> From the attached stacktrace, and the sources, it can be seen that the error\n> originates from \n> \n> org.openxmlformats.schemas.wordprocessingml.x2006.main.DocumentDocument.\n> Factory.parse(*)\n> \n> which is found in\n> \n> ooxml-schemas-1.3.jar\n> \n> This is a generated XMLBeans class.  Further, it isn't doing any explicit\n> class loading, it is just importing a class.  So it looks to me like the\n> issue is down in XMLBeans somewhere, or in the user's ClassLoader hierarchy.\n> \n> \n> I searched the entire POI codebase, and there are no calls to\n> *.forName(String, ClassLoader) or anything similar.  All calls are using the\n> static Class.forName(String classname) method, which should be fine.\n> \n> I'm fairly certain the issue for the end user is the placement of\n> ooxml-schemas-1.3.jar in their class loader library structure.  It could be\n> defined at too high a level, and thus inaccessible to a lower classloader,\n> in which case that library should be pushed down rather than POI pulled up. \n> Note that this is a standard dependency for POI.", "is_private": false}, {"count": 21, "tags": [], "bug_id": 61478, "text": "Hi Greg,\n\nAs I've explained before, there are exactly two classloader levels in ManifoldCF - the root level, and the \"connectors\" level.  In previous (working) Tika integrations, tika-core was at the root level, and tika-parsers (and all its dependencies, including xmlbeans) was at the \"connectors\" level.\n\nWhen we went to the most recent version of Tika we discovered that having poi-ooxml-schemas at the higher level meant that the Tika connector could not find anything in poi-ooxml-schemas, even though that also was at the higher level, as was xmlbeans.  We needed to move ALL poi jars and their dependencies to the lower level in order to get it to work again.  (I'm in the process of voting on a point release for this as we speak so that our users will not be impacted.)\n\nWe'd much prefer having these jars once again live at the higher level, since putting them at the lower level means they must be included multiple times (in multiple webapps etc.), and that bloats our binary considerably.\n\nHope this helps.", "id": 200620, "time": "2017-09-03T08:37:42Z", "creator": "kwright@apache.org", "creation_time": "2017-09-03T08:37:42Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 61478, "attachment_id": null, "id": 200621, "time": "2017-09-03T08:56:54Z", "creator": "kwright@apache.org", "creation_time": "2017-09-03T08:56:54Z", "is_private": false, "text": "If there are no invocations of Class.forName(String, boolean, ClassLoader), then there's no way the POI libraries can be a problem.  But a glance at the code shows that that's not entirely true; the POIXMLTypeLoader class does the latter.\n\nIt may be the case that the only reason for that code was written was to work around this problem when it was discovered by others (e.g. #60226).  But, in that case, the problem might well be that some other dependency, e.g. xmlbeans, is doing the wrong thing and you guys need to request a fix from them.\n\nHere are some data points:\n\n- Running all poi jars and their dependencies at the \"connectors\" level with poi-3.15 *definitely* uses the wrong classloader at some point -- probably the thread classloader\n- The testbed I constructed and uploaded, on the other hand, *succeeds* - and that setup mimics MCF's classloader setup, but without Tika in between the MCF \"connector\" and the poi jars\n\nMaybe the right approach is to analyze the difference in code paths between these two ways of calling into poi and see what differences there are, if any?  The stack traces are helpful here, yes, but maybe also looking at the testbed I uploaded could provide some insight into a way of getting into poi that does not seem to have the problem?\n\nThe only thing I'm pretty sure of is that it probably isn't Tika that does this, because it *does* manage to find the poi classes, just not those in poi-ooxml-schemas."}, {"count": 23, "tags": [], "creator": "kiwiwings@apache.org", "text": "Created attachment 35283\nGet Classloader from SchemaType instead of ContextClassLoader/preset CL\n\nI've tested that patch against the OSGi example mentioned above (the latest servicemix bundle for POI 3.16 is also incomplete as far as I can say).\nI wasn't sure (and I'm still not), if the cached SchemaTypeLoader would result  in a failing resource loading. At least I've added some kind of OOM-check to see if the ThreadLocals would result in memory leaks.", "id": 200629, "time": "2017-09-03T20:00:10Z", "bug_id": 61478, "creation_time": "2017-09-03T20:00:10Z", "is_private": false, "attachment_id": 35283}, {"count": 24, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "id": 200630, "time": "2017-09-03T20:02:17Z", "bug_id": 61478, "creation_time": "2017-09-03T20:02:17Z", "is_private": false, "text": "I should add ... if the schema type loader is not cached, this will result in OOM in the tests."}, {"attachment_id": null, "tags": [], "bug_id": 61478, "text": "Karl (or should I say Mr. Wright?), I'll wait for your response, before I commit the patch and release(-candidate) POI 3.17 final - the last version to support Java 6.\n\nPlease apply the patch to the POI trunk, build it and give us feedback if it works for you.", "count": 25, "id": 200653, "time": "2017-09-04T20:19:47Z", "creator": "kiwiwings@apache.org", "creation_time": "2017-09-04T20:19:47Z", "is_private": false}, {"count": 26, "tags": [], "bug_id": 61478, "attachment_id": null, "text": "Will do, as time permits.  Hopefully you should have an answer by tomorrow evening at the latest.", "id": 200654, "time": "2017-09-04T23:04:38Z", "creator": "kwright@apache.org", "creation_time": "2017-09-04T23:04:38Z", "is_private": false}, {"count": 27, "tags": [], "creator": "kwright@apache.org", "text": "I was able to confirm that this fix corrected the problem in the MCF environment with Tika extraction.\n\nThanks to all for your help on this!\n\nWhen do you expect this code to \"go live\" and be available for download from Maven?", "id": 200655, "time": "2017-09-05T00:09:48Z", "bug_id": 61478, "creation_time": "2017-09-05T00:09:48Z", "is_private": false, "attachment_id": null}, {"count": 28, "tags": [], "bug_id": 61478, "text": "Re-opening the bug, as I think Andreas still needs to commit the proposed fix to svn!\n\nRelease wise - we're holding off doing the 3.17 release candidate for this fix, as we want to play nicely with other ASF projects :)", "id": 200656, "time": "2017-09-05T00:22:49Z", "creator": "apache@gagravarr.org", "creation_time": "2017-09-05T00:22:49Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 61478, "text": "Applied via r1807418", "count": 29, "id": 200687, "time": "2017-09-05T21:48:50Z", "creator": "kiwiwings@apache.org", "creation_time": "2017-09-05T21:48:50Z", "is_private": false}]
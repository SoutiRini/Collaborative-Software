[{"count": 0, "tags": [], "bug_id": 32804, "attachment_id": null, "is_private": false, "id": 68808, "time": "2004-12-22T18:15:56Z", "creator": "tomasz.bech@bull.com.pl", "creation_time": "2004-12-22T18:15:56Z", "text": "It would be nice to have possibility to check version of Ant in build.xml script\n(that is needed when there is uneducated customer which is ignoring requirements\nof ant/java versions described in document - so we have to put 'fail' in ant\nscript to stop doing stupid thing by the customer)\nCurrently there are used too tricks (what I found):\n- based on checking if pointed class exists (like MacroDef from 1.6);\n- using contains + ${ant.version}\nBut both have cause (or can) some problems, for example class can be moved in\nfuture versions.\nBelow is small proposal of checkVersion task:\n<checkVersion name=\"ant.version.number\" value=\"- + = += -=(means less greater\nequal, greater equal) version here, i.e. +=1.6.1\" property=\"property name to set\nwhen condition not met\"/>\n\nIdea is that it can be used for any version checking which follows standard\npattern: number.number.number. Additional needed extension is\n'ant.version.number' which returns just the number."}, {"count": 1, "tags": [], "bug_id": 32804, "is_private": false, "text": "Would indeed be useful. Should probably be a condition, e.g.\n\n<fail message=\"Sorry, this script requires Ant 1.7+.\">\n    <condition>\n        <not>\n            <antversion atleast=\"1.7\"/>\n        </not>\n    </condition>\n</fail>\n\nHere the proposed condition would just support two (mutually exclusive) attrs,\n'atleast' and 'exactly', with 'atleast' doing a lexicographic-numeric check I guess.", "id": 68855, "time": "2004-12-22T21:53:21Z", "creator": "jglick@apache.org", "creation_time": "2004-12-22T21:53:21Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 32804, "attachment_id": null, "is_private": false, "id": 68896, "time": "2004-12-23T08:01:12Z", "creator": "jan@materne.de", "creation_time": "2004-12-23T08:01:12Z", "text": "Not the \"cleanest\" way, but I wrote two *def\u00b4s for handling with that:\n\n<project name=\"common-define-checkAnt\">\n    <scriptdef name=\"checkAnt\" language=\"javascript\">\n        <![CDATA[\n            importClass(java.text.SimpleDateFormat);\n            importClass(java.util.Locale);\n\n            // String evaluation of 'ant.version' string\n            // e.g: 'Apache Ant version 1.6beta3 compiled on December 5 2003'\n            string   = project.getProperty(\"ant.version\");\n            version  = string.substring(string.indexOf(\"Ant version\")+12, \nstring.indexOf(\"compiled on\")-1);\n            compiled = string.substring(string.indexOf(\"compiled on\")+12);\n\n            // Get the compiled date: 'December 5 2003'\n            dateParser = new SimpleDateFormat(\"MMM d yyyy\", Locale.US);\n            compiledDate = dateParser.parse(compiled);\n\n            compiledYear  = (new SimpleDateFormat(\"yyyy\")).format(compiledDate);\n            compiledMonth = (new SimpleDateFormat(\"M\")   ).format(compiledDate);\n            compiledDay   = (new SimpleDateFormat(\"d\")   ).format(compiledDate);\n\n            project.setNewProperty(\"ant.version.number\", version);\n            project.setNewProperty(\"ant.version.compiled\", compiled);\n            project.setNewProperty(\"ant.version.compiled.year\", compiledYear);\n            project.setNewProperty(\"ant.version.compiled.month\", compiledMonth);\n            project.setNewProperty(\"ant.version.compiled.day\", compiledDay);\n        ]]>\n    </scriptdef>\n</project>\n\n\n<project name=\"common-define-needAnt\">\n    <scriptdef name=\"needAnt\" language=\"javascript\">\n        <attribute name=\"version\"/>\n        <![CDATA[\n            needed = attributes.get(\"version\");\n\n            string = project.getProperty(\"ant.version\");\n            actual = string.substring(string.indexOf(\"Ant version\")+12, \nstring.indexOf(\"compiled on\")-1);\n\n            neededInt = getInt(needed);\n            actualInt = getInt(actual);\n\n            verbose(\"Needed: \" + needed + \" --> \" + neededInt);\n            verbose(\"Actual: \" + actual + \" --> \" + actualInt);\n\n            check = false;\n            if (actualInt >= neededInt) check = true;\n\n            if (!check) {\n                java.lang.System.out.println(\" -- abbruch --\");\n                fail = project.createTask(\"fail\");\n                fail.setMessage(\"Needed Ant-Version (\" + needed + \") not \navailable. Was: \" + actual);\n                fail.perform();\n            }\n\n            // convert the version string to int value for easier comparison\n            function getInt(string) {\n                if (string.equals(\"1.1\"))   return 11;\n                if (string.equals(\"1.2\"))   return 12;\n                if (string.equals(\"1.3\"))   return 13;\n                if (string.equals(\"1.4\"))   return 14;\n                if (string.equals(\"1.4.1\")) return 14.1;\n                if (string.equals(\"1.5\"))   return 15;\n                if (string.equals(\"1.5.1\")) return 15.1;\n                if (string.equals(\"1.5.2\")) return 15.2;\n                if (string.equals(\"1.5.3\")) return 15.3;\n                if (string.equals(\"1.5.4\")) return 15.4;\n                if (string.equals(\"1.5alpha\"))  return 15.880;\n                if (string.equals(\"1.6beta1\"))  return 15.991;\n                if (string.equals(\"1.6beta2\"))  return 15.992;\n                if (string.equals(\"1.6beta3\"))  return 15.993;\n                if (string.equals(\"1.6\"))       return 16;\n                if (string.equals(\"1.6.0\")  )   return 16;\n                if (string.equals(\"1.6.1\")  )   return 16.1;\n                if (string.equals(\"1.6.2\")  )   return 16.2;\n                if (string.equals(\"1.6.3\")  )   return 16.3;\n                if (string.equals(\"1.7alpha\"))  return 16.880;\n                if (string.equals(\"1.7beta\"))   return 16.990;\n                if (string.equals(\"1.7\"))       return 17;\n                if (string.equals(\"1.7.0\"))     return 17;\n                if (string.equals(\"1.7.1\"))     return 17.1;\n                if (string.equals(\"1.7.2\"))     return 17.2;\n                return 0;\n            }\n\n            // log-message\n            function verbose(msg) {\n                project.log(\"[needAnt]  \" + msg, project.MSG_VERBOSE);\n            }\n        ]]>\n    </scriptdef>\n</project>"}, {"count": 3, "tags": [], "bug_id": 32804, "is_private": false, "text": "So this is now FIXED with target milestone 1.7, right? Needs mention in WHATSNEW\nI guess.\n\nUnfortunate that you can't use this condition in any pre-1.7 scripts, which\nmeans it will only really be useful far into the future when 1.6.5 is a distant\nmemory.", "id": 89671, "time": "2006-06-01T20:03:29Z", "creator": "jglick@apache.org", "creation_time": "2006-06-01T20:03:29Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 32804, "is_private": false, "text": "It is in ant 1.7, I have added a manual entry for it.", "id": 95789, "time": "2006-11-13T12:50:19Z", "creator": "peterreilly@apache.org", "creation_time": "2006-11-13T12:50:19Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jglick@apache.org", "text": "Seems to work:\n\n    <fail message=\"too old\">\n        <condition>\n            <not>\n                <antversion atleast=\"1.7.0\"/>\n            </not>\n        </condition>\n    </fail>\n\nAnt 1.6.5 fails, although with an unhelpful message:\n\nClass org.apache.tools.ant.taskdefs.condition.Not doesn't support the nested\n\"antversion\" element.", "count": 5, "id": 95791, "time": "2006-11-13T13:32:44Z", "bug_id": 32804, "creation_time": "2006-11-13T13:32:44Z", "is_private": false}]
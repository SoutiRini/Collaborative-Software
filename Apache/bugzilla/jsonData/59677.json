[{"count": 0, "tags": [], "bug_id": 59677, "attachment_id": null, "id": 191476, "creation_time": "2016-06-09T08:57:39Z", "time": "2016-06-09T08:57:39Z", "creator": "msww-asfbugs@corefiling.co.uk", "text": "As mentioned in Bug 59673, HSSFWorkbook#setSheetOrder is passing internal sheet\nindexes in to FormulaShifter's constructor, but these numbers are used to\nupdate the indices of referenced external sheet records. This can corrupt\nreferences to sheets when the EXTERNSHEET records do not exactly correspond\nwith the internal sheets, such as if there has been a multiple-sheet range.\n\nFor example:\n\n===========\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.usermodel.HSSFCell;\n\npublic class MakeBad {\n\n  public static void main(String ... args) throws Exception {\n    HSSFWorkbook workbook = new HSSFWorkbook();\n    HSSFSheet originalA = workbook.createSheet(\"A\");\n    workbook.createSheet(\"B\");\n    workbook.createSheet(\"C\");\n\n    originalA.createRow(0).createCell(0).setCellFormula(\"SUM(B:C!A1:B5)\");\n\n    workbook.removeSheetAt(0);\n\n    HSSFSheet newA = workbook.createSheet(\"A\");\n\n    HSSFCell cell = newA.createRow(0).createCell(0);\n    cell.setCellFormula(\"C!A2\");\n    System.out.println(\"Before sheet move:\");\n    System.out.println(\"  cell formula=\" + cell.getCellFormula());\n    describeExternalIndices(workbook);\n\n    workbook.setSheetOrder(\"A\", 1);\n\n    System.out.println(\"After sheet move:\");\n    System.out.println(\"  cell formula=\" + cell.getCellFormula());\n    describeExternalIndices(workbook);\n  }\n\n  private static void describeExternalIndices(HSSFWorkbook workbook) {\n      System.out.printf(\"  Sheet %s has internal index %d and external index %d%n\", workbook.getSheetName(i), i, workbook.getExternalSheetIndex(i));\n    }\n  }\n}\n===========\n\noutputs\n\n===========\nBefore sheet move:\n  cell formula=C!A2\n  Sheet B has internal index 0 and external index 1\n  Sheet C has internal index 1 and external index 2\n  Sheet A has internal index 2 and external index 4\nAfter sheet move:\n  cell formula=B!A2\n  Sheet B has internal index 0 and external index 1\n  Sheet A has internal index 1 and external index 2\n  Sheet C has internal index 2 and external index 4\n===========\n\nThis is because the external index in the formula before the move (2) is the\nsame as the internal index (1) of the moved sheet, so\nFormulaShifter#adjustPtgDueToSheetMove has changed the external index to match\nthe new internal index of the moved sheet (1). Note also that the external\nindex records have not been reordered or changed, so the mapping of internal\nindex to external index remains unchanged.\n\nI think the way to fix this is to change how sheet reorders are handled just in\nthe case that the external index records are not just the trivial n ascending\ninternal indexes. When this happens, it is not possible to correct the\nreferences by updating all the Area/Ref3DPtgs as the records for multiple sheet\nranges would be pointing at the wrong set of sheets. Instead, rather than\nupdating those indices, the external sheet records would need updating with the\nnew internal sheet ids.\n\nWhile this approach could also be followed in the case that the external index\nrecords are the trivial case, that would result in the indices getting out of\nsync under circumstances that currently both POI and popular spreadsheet\nsoftware does not do so.\n\nA complication here is that such a sheet reorder can change the meaning of a\nreference. For example, consider a workbook with sheets A, B, and C in that\norder, with a formula \"=SUM(A:B!A1:B5)\" on C. Moving sheet C between A and B\nwill result in that range including C, while previously it did not. However, I\nthink this would be the least surprising behaviour POI could have in this case,\nas it would maintain the text of the cell formula unchanged. This is also the\nbehaviour of a couple of common spreadsheet programs that I have checked while\ninvestigating this.", "is_private": false}, {"count": 1, "tags": [], "bug_id": 59677, "is_private": false, "text": "For a Workbook with sheets A, B and C, if someone creates a formula covering a range of sheets A and Bm then re-orders C before B, then having it cover A+C+B seems logical to me\n\nI guess that setSheetOrder should do something for the external sheet records too. Would the delete sheet case need to do so as well, or is that already covered?\n\nAs a first step, maybe it would be good to go through the code you've been looking at, and identify any places where internal and external sheet indexes get incorrectly treated as equivalent, then add TODOs / Warnings there. Also in methods where there's a risk of confusion, rename the variables to things like internalSheetIndex and externalSheetIndex to make it clearer", "id": 191508, "time": "2016-06-09T18:12:57Z", "creator": "apache@gagravarr.org", "creation_time": "2016-06-09T18:12:57Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "robert_s@gmx.net", "attachment_id": null, "is_private": false, "id": 188058, "time": "2016-01-30T00:05:13Z", "bug_id": 58944, "creation_time": "2016-01-30T00:05:13Z", "text": "Trying to compile httpd with openssl with zlib for TLS compression support (yes, I'm aware of CRIME and consider it no threat to my application), the httpd configure script always bombs out on the test compiles with openssl.\n\nCloser inspection reveals that the required openssl libs are correctly retrieved in line 25273 of the configure script:\n\n      ap_openssl_libs=\"`$PKGCONFIG $PKGCONFIG_LIBOPTS --libs-only-l --silence-errors openssl`\"\n\nyielding:\n\n-lssl -ldl -lz -lcrypto -ldl -lz\n\nwhich would work, but then the script strips duplicates from libs, yielding\n\n-lssl -ld -lz -lcrypto\n\nwhich will fail to link since the dependencies inside lcrypto cannot be resolved.\n\nThe script code in question appears buggy, too:\n\n  if test \"x$MOD_LDFLAGS\" = \"x\"; then\n    test \"x$silent\" != \"xyes\" && echo \"  setting MOD_LDFLAGS to \\\"$ap_openssl_libs\\\"\"\n    MOD_LDFLAGS=\"$ap_openssl_libs\"\n  else\n    apr_addto_bugger=\"$ap_openssl_libs\"\n    for i in $apr_addto_bugger; do\n      apr_addto_duplicate=\"0\"\n      for j in $MOD_LDFLAGS; do\n        if test \"x$i\" = \"x$j\"; then\n          apr_addto_duplicate=\"1\"\n          break\n        fi\n      done\n      if test $apr_addto_duplicate = \"0\"; then\n        test \"x$silent\" != \"xyes\" && echo \"  adding \\\"$i\\\" to MOD_LDFLAGS\"\n        MOD_LDFLAGS=\"$MOD_LDFLAGS $i\"\n      fi\n    done\n  fi\n\nIf the variable in question is initially empty, duplicates are _not_ stripped from the new value it is set to.\n\nIs this actually a bug in GNU autoconf...? Or is it just not being used correctly?"}, {"count": 1, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "This code comes form APACHE_CHECK_OPENSSL in acinclude.m4, which in turn uses APR_ADDTO to add the flags.\n\nAPR_ADDTO is part of APR and defined in apr_common.m4. It adds all tokens given in the second argument to the variable which name is given in the first argument. It does this by processing tokens fromleft to right.\n\nUnfortunately for redundant library dependencies this can lead to a result that doesn't work, because ordering is relevant for library dependencies (-l...).\n\nIt looks to me as we would need a version of APR_ADDTO that works from right to left:\n\n- combine original token and full list of new tokens in new token list\n- create a new empty token result list\n- work through new list from right to left, copy any token to the front of the result list that is not already part of the result list.\n\nBecause of APR versioning I guess we can't rely on such a new macro in httpd 2.4 and thus would have to add it to APR for future use but use a private copy in httpd.\n\nThe same problem might occur in any place we use APR_ADDTo to handle \"-l\" flags and where the libraries might have complex dependencies themselves. I don't have another concrete example than openssl in my mind though.", "id": 188146, "time": "2016-02-02T10:48:18Z", "bug_id": 58944, "creation_time": "2016-02-02T10:48:18Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Since fixing this might break subtle build config, can you please try as a workaround setting and exporting the environment variable\n\n  MOD_SSL_LDADD=\"-lssl -lcrypto -ldl -lz\"\n\nbefore running configure?\n\nThanks!", "attachment_id": null, "bug_id": 58944, "id": 188151, "time": "2016-02-02T15:28:22Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2016-02-02T15:28:22Z", "is_private": false}]
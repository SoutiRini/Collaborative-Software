[{"count": 0, "tags": [], "creator": "kmcginn@entradasoftware.com", "attachment_id": null, "id": 19367, "creation_time": "2002-07-12T00:08:35Z", "time": "2002-07-12T00:08:35Z", "bug_id": 10719, "text": "When using the <sql> task and specify a source file, the subsequent data from\nthe file passed to Jconnect losses all formatting. Case in point is stored\nprocedure that is to be compiled into the database. The <sql> tasks compiles the\nproc correctly into the database, but all line feeds are dropped resulting in a\nsingle line of text when the proc is extracted from the database.\n\nThis make extraction of the proc from the database worthless as well as\nvirtually un readable.\n\nThere must be method by which the formatting can be preserved.", "is_private": false}, {"count": 1, "tags": [], "bug_id": 10719, "is_private": false, "id": 19448, "creation_time": "2002-07-12T20:06:05Z", "time": "2002-07-12T20:06:05Z", "creator": "kdenehy@att.net", "text": "I agree with the sentiment of this bug.  The same problem exists if the SQL is \ninlined in the build.xml file between the <sql> tags.  The formatting of the \nSQL text should be preserved.\n", "attachment_id": null}, {"count": 2, "tags": [], "text": "Anyone care to provide a patch for this ?", "is_private": false, "id": 19539, "creator": "sbailliez@apache.org", "time": "2002-07-15T08:32:01Z", "bug_id": 10719, "creation_time": "2002-07-15T08:32:01Z", "attachment_id": null}, {"attachment_id": 2387, "tags": [], "bug_id": 10719, "is_private": false, "count": 3, "id": 19723, "time": "2002-07-17T21:11:07Z", "creator": "jhkeller@ucdavis.edu", "creation_time": "2002-07-17T21:11:07Z", "text": "Created attachment 2387\nProposed Patch to preserve whitespace"}, {"attachment_id": null, "tags": [], "creator": "jhkeller@ucdavis.edu", "text": "I created a patch for the sql task that seems to work.  Would someone please\ncheck it out to make sure that I haven't done something foolish that might break\nthe task under more complex usage?\n\nThe basics of the patch is to create a trimmed line for comparison purposes during\nthe extraction of the sql, but to add the original entire line to the sql buffer\nthat gets sent to the server.", "count": 4, "id": 19725, "time": "2002-07-17T21:14:57Z", "bug_id": 10719, "creation_time": "2002-07-17T21:14:57Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 10719, "attachment_id": null, "id": 19811, "time": "2002-07-18T20:17:30Z", "creator": "kdenehy@att.net", "creation_time": "2002-07-18T20:17:30Z", "is_private": false, "text": "Thanks Jonathan for going to the trouble of submitting a fix.  It looks like it \nshould work, but I didn't test it, because I noticed that both your fix and the \noriginal code also strip out comments.\n\nI don't want the comments stripped from my Oracle PL/SQL stored procedures, \ntriggers, etc., so I made my own modifications to the runStatements method, and \nit seems to work fine.\n\nSince the Java code doesn't have comments explaining all the work that method \ndoes to strip out SQL comments and formatting, it's hard for me to know whether \nmy changes would break the task for databases other than Oracle.  I've run it \nwith SQL that creates tables, indexes, packages, package bodies, triggers, \nviews, and sequences; drops all of the above; and inserts rows into several of \nthe tables, and everything seems to work fine.\n\nCan any of the developers comment (no pun intended :) on whether the comments \nreally need to be stripped?\n"}, {"count": 6, "tags": [], "bug_id": 10719, "text": "Well, I looked into the patch yesterday and it seems good so far at first \nglance but I'm also wondering why the comments were stripped.", "id": 19812, "time": "2002-07-18T20:26:36Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-18T20:26:36Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 10719, "attachment_id": null, "id": 19813, "time": "2002-07-18T20:35:51Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-18T20:35:51Z", "is_private": false, "text": "the stripped comment has been there since day 1, that is about 2 years.\nThe only thing I could see that could change the behavior is having only \ncomments in the sql. It will be processed while now there is some workaround \nto avoid processing 'empty' statements.\n"}, {"count": 8, "tags": [], "bug_id": 10719, "attachment_id": null, "id": 19814, "time": "2002-07-18T20:57:56Z", "creator": "jhkeller@ucdavis.edu", "creation_time": "2002-07-18T20:57:56Z", "is_private": false, "text": "I'm assuming that the comments are eliminated to prevent the presence of a\ndelimiter on a comment line from submitting the statement.  The other problem\nis the submission of nothing but comments.  I'm not sure what the Oracle JDBC\ndriver would do (much less other databases) with an empty statement.\n\nI have fixes in mind for both issues.  I'll submit an updated patch soon.\n\nI should also note, that the existing code has no recognition of block comments\n(/* */).  To handle those the code would have to retain state.  Right now, a\ndelimiter in the comment block would submit the statement."}, {"attachment_id": 2418, "tags": [], "creator": "jhkeller@ucdavis.edu", "text": "Created attachment 2418\nRevised Patch that preserves comments", "count": 9, "id": 19862, "time": "2002-07-19T16:43:54Z", "bug_id": 10719, "creation_time": "2002-07-19T16:43:54Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 10719, "attachment_id": null, "id": 20081, "time": "2002-07-23T20:39:40Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-23T20:39:40Z", "is_private": false, "text": "Jonathan, if you could actually comment all the logic behind the hack that \nwould be nice. In the future it will avoid the question we are asking \nourselves right now: 'what is this hack supposed to do. I'm not sure I'm \nbreaking something as I don't know what it is really supposed to do'"}, {"count": 11, "tags": [], "text": "Created attachment 2459\nSlightly refined and commented patch", "attachment_id": 2459, "bug_id": 10719, "id": 20088, "time": "2002-07-23T22:23:40Z", "creator": "jhkeller@ucdavis.edu", "creation_time": "2002-07-23T22:23:40Z", "is_private": false}, {"count": 12, "tags": [], "text": "OK, this is just my opinion, but frankly I think the method would be much\ncleaner if we stopped worrying about comments all together.  Just send whatever\nyou have. If it's nothing but comments, send it anyway!\n\nWhat's the worst that could happen?  The database crashes?  I should hope not. \nI would think that a SQL script containing nothing but comments would be\nperfectly valid, but if it's not, then the database should complain, and the\nJDBC driver should throw a SQLException, and then Ant will display the error,\nand the writer of the SQL script can fix it.  It shouldn't be Ant's\nresponsibility to worry about this, just like it shouldn't be Ant's\nresponsibility to ensure that a table referenced in the database really exists\nbefore sending a select statement.\n\nLike they say in the XP world, make it as simple as possible (but no simpler).", "is_private": false, "id": 20297, "creator": "kdenehy@att.net", "time": "2002-07-27T13:01:14Z", "bug_id": 10719, "creation_time": "2002-07-27T13:01:14Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 10719, "attachment_id": null, "id": 20298, "time": "2002-07-27T13:21:44Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-27T13:21:44Z", "is_private": false, "text": "can be make somewhat cleaner like this (not sure it works, this is just the \nidea from the top of my head) if we don't care about comments:\n\n        StringBuffer sqlBuffer = new StringBuffer(128);\n        String line = null;\n        BufferedReader in = new BufferedReader(reader);        \n        while ((line = in.readLine()) != null) {\n            line = project.replaceProperties(line);            \n            // add the untrimmed line to the sql statement\n            sqlBuffer.append(\" \").append(line).append(\"\\n\");\n            \n            // create a trimmed line for comparisons\n            line = line.trim();            \n            \n            // skip comments\n            if (isComment(line)) {\n              continue;\n            }\n            \n            if (isDelimited(line)) {\n                // trim the final sql to remove any whitespace after the \ndelimiter              \n                String sql = sqlBuffer.toString().trim();              \n                log(\"SQL: '\" + sql + \"'\", Project.MSG_VERBOSE);\n                sql = sql.substring(0, sql.length() - delimiter.length());\n                execSQL(sql, out);\n                // reset for the next statement...\n                sqlBuffer = new StringBuffer(128);\n            }\n        }\n        \n        // Catch any statements not followed by a delimiter\n        String sql = sqlBuffer.toString().trim();\n        log(\"SQL: '\" + sql + \"'\", Project.MSG_VERBOSE);\n        execSQL(sql, out);\n     } \n\n"}, {"count": 14, "tags": [], "creator": "kdenehy@att.net", "attachment_id": null, "is_private": false, "id": 20299, "time": "2002-07-27T13:40:48Z", "bug_id": 10719, "creation_time": "2002-07-27T13:40:48Z", "text": "But Stephane, many of us DO care about comments.  That was the point of my last\nfew posts.  I want the SQL text sent *exactly* as it appears in the script,\nexcept that the Ant properties get filled in by the\n\"project.replaceProperties(line)\" call, and the individual statements within the\nscript get sent individually, by breaking them up based on the statement delimiter.\n\nIMHO, this is ALL this method should do.\nI use Ant to create Oracle stored procedures.  I want those stored procedures to\ncontain comments, so that if a DBA has to troubleshoot a production problem, he\ncan read the comments to get a better understanding of what the procedure does.\n\n"}, {"count": 15, "tags": [], "creator": "j_a_fernandez@yahoo.com", "attachment_id": null, "is_private": false, "id": 20300, "time": "2002-07-27T13:51:28Z", "bug_id": 10719, "creation_time": "2002-07-27T13:51:28Z", "text": "Well, I was one of the original authors of this task and the reason why \ncomments were stripped was that different RDBMSs use different types of \ncomments. \nAlthough this may seem unimportant for people that are committed to support \nonly one DB, it is an important issue for those projects that try to be DB \nagnostic.\n\nThe idea beeing that ANT should treat the DB the same way it treats an OS, \nwhich in escence is what JDBC is all about.\n\nMaybe the solution to this issue (and I am not sure if the original code had \nprovisions for that) is to allow defining which types of comments, <sql> should \nstrip, if any. This would allow people writing multiDB scripts to write \ncomments in the file but knowing that they will not be a problem when deploying \non different DBs. At the same time people will be able to preserve comments \nusing DB specific syntax if they please. It would be nice if DB comments could \nbe translated to the DB specific syntax, but I am not sure if this info is \navailable from the JDBC API.\n\nWhatever the solution, one should be able to write a well documented DB script \nthat can be executed asis on all major RDBMSs: oracle, mssql, mysql, posgress, \nDB2, etc. (As long as they use SQL92 syntax, of course).\n"}, {"count": 16, "tags": [], "creator": "kdenehy@att.net", "attachment_id": null, "id": 20304, "creation_time": "2002-07-27T15:17:08Z", "time": "2002-07-27T15:17:08Z", "bug_id": 10719, "text": "Thanks for the explanation, Jose.  I appreciate your intentions, but I still\nthink it should be the responsibility of the SQL script to be cross-platform, it\nshould *not* be Ant's responsibility.\n\nIf I'm developing a system that targets multiple databases, and I want to put\ncross-platform comments in the script, can't I create an Ant property to do\nthis?  For example, can't I create a {sql.comment} property (and set it to \"--\"\nfor Oracle, or \"//\" for another platform, etc.), and then my script can read:\n\ncreate or replace\nstored procedure xyz is\n\n{sql.comment} ************************************************\n{sql.comment} *\n{sql.comment} * This procedure does absolutly nothing\n{sql.comment} *\n{sql.comment} ************************************************\nbegin\n    null; {sql.comment} do nothing\nend; {sql.comment} End of procedure xyz\n\nAnd after doing a usenet search on google, I found that the SQL92 standard\nspecifies \"--\" as the standard anyway (although we all know the commercial\nvendors do a mediocre job of conforming to the standard), as shown in this snippet:\n\n<simple comment> ::=\n          <simple comment introducer> [ <comment character>... ] <newline>\n\n<simple comment introducer> ::= <minus sign><minus sign>[<minus sign>...]\n\nOf course I'm assuming that something I found in usenet is correct, which is a\nbit of a gamble, but it looked legitimate.\n\nSo, IMHO, you should leave all comments (and formatting) alone, document the\nfact that \"--\" is the official \"cross-platform\" SQL92 comment indicator (after\nverifying that it _really_ is), and warn developers that not all databases are\n100% SQL92 compliant, so \"--\" may not work.\n", "is_private": false}, {"count": 17, "tags": [], "creator": "j_a_fernandez@yahoo.com", "text": "I have no problem if a new attribute is added that says leavecomments=\"true\"\nbut to remove this functionality is to break backward compatibility of the SQL \ntask and as per the ANT rules for ANT1.x is absolutely unacceptable.\n", "id": 20305, "time": "2002-07-27T15:48:53Z", "bug_id": 10719, "creation_time": "2002-07-27T15:48:53Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 10719, "is_private": false, "id": 22594, "creation_time": "2002-09-10T13:55:29Z", "time": "2002-09-10T13:55:29Z", "creator": "danny@apache.org", "text": "I found that comments generated by MySQL dump choked Ant's SQL task, such that \nnot all of the SQL staements were executed from the file.\n\nI'd like to see this task able to accept as input the kind of verbose SQL/DDL \noutput generated by database dumps and other tools.\n", "attachment_id": null}, {"count": 19, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 23901, "time": "2002-10-04T12:03:57Z", "bug_id": 10719, "creation_time": "2002-10-04T12:03:57Z", "text": "*** Bug 11873 has been marked as a duplicate of this bug. ***"}, {"count": 20, "tags": [], "bug_id": 10719, "is_private": false, "text": "Well, in the end, comments are probably not THAT important. But missing all the\nline feeds in a bad loss - it makes the whole code unreadable. Could anyone\nplease fix the linefeed in ant 1.x - I hope this would not break any compatibility.", "id": 28123, "time": "2002-12-20T15:45:23Z", "creator": "sergey.oudaltsov@clients.ie", "creation_time": "2002-12-20T15:45:23Z", "attachment_id": null}, {"count": 21, "tags": [], "creator": "riznob@hotmail.com", "attachment_id": 5083, "text": "Created attachment 5083\nAdded a keepformat attribute. Keeps format and comments.", "id": 32127, "time": "2003-02-28T00:35:36Z", "bug_id": 10719, "creation_time": "2003-02-28T00:35:36Z", "is_private": false}, {"count": 22, "tags": [], "text": "NOTE: The last attachment is the only one needed for fixing this bug, since now\nthe missing functionality has been added directly to SQLExec.java.", "attachment_id": null, "bug_id": 10719, "id": 32309, "time": "2003-03-03T12:22:15Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2003-03-03T12:22:15Z", "is_private": false}, {"count": 23, "tags": [], "creator": "riznob@hotmail.com", "attachment_id": 5299, "is_private": false, "id": 33095, "time": "2003-03-13T01:29:01Z", "bug_id": 10719, "creation_time": "2003-03-13T01:29:01Z", "text": "Created attachment 5299\ndiff -u of last attachement and cvs version 1.49"}, {"count": 24, "tags": [], "bug_id": 10719, "is_private": false, "id": 33153, "creation_time": "2003-03-13T21:41:20Z", "time": "2003-03-13T21:41:20Z", "creator": "stevel@apache.org", "text": "Note that the ${sql.comment} trick to per-platform comments does not work,\nbecause <SQL> does not (currently) expand comments in the inline text, something\nwe cannot change for backwards compatibility.\n\nAn expand-properties attribute could enable that, of course. ", "attachment_id": null}, {"count": 25, "tags": [], "text": "Seems as if Steve just forgot to close this report.\n\nFixed since nightly build 2003-03-14.", "attachment_id": null, "bug_id": 10719, "id": 35410, "time": "2003-04-17T12:47:41Z", "creator": "bodewig@apache.org", "creation_time": "2003-04-17T12:47:41Z", "is_private": false}, {"count": 26, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "text": "*** Bug 21365 has been marked as a duplicate of this bug. ***", "id": 40482, "time": "2003-07-11T15:51:29Z", "bug_id": 10719, "creation_time": "2003-07-11T15:51:29Z", "is_private": false}, {"count": 27, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "is_private": false, "id": 40595, "time": "2003-07-14T01:41:34Z", "bug_id": 10719, "creation_time": "2003-07-14T01:41:34Z", "text": "*** Bug 17048 has been marked as a duplicate of this bug. ***"}]
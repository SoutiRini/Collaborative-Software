[{"attachment_id": null, "tags": [], "bug_id": 31513, "is_private": false, "count": 0, "id": 64510, "time": "2004-10-02T20:15:00Z", "creator": "Svante.U.Schubert@gmx.de", "creation_time": "2004-10-02T20:15:00Z", "text": "Trying to run the build only if some preconditions are set, like the property\ncontaining a the path to an existing directory.\n\nUnfortunately all preconditions of an tasks are being addressed although the\n'if' attribute of the task is not set and the task itself won't, this seems not\nto be the correct behavior.\n\nEXAMPLE:\n\n  <target name=\"all\" depends=\"check-preconditions, build\" />\n  \n  <target name=\"check-preconditions\" depends=\"test-jcc-dir, casual-error-msg\" />\n  \n  <target name=\"test-jcc-dir\">\n    <available file=\"${jcc_home.dir}\" type=\"dir\" property=\"valid-precondition\" />\n  </target>  \n  \n  <target name=\"casual-error-msg\" unless=\"valid-precondition\">\n      <echo message=\"ERROR: Please set the path of 'jcc_home.dir' in the\nbuild.xml file!\" />\n  </target>    \n  \n  <target name=\"build\" depends=\"clean, compile, test, dist\"\nif=\"valid-precondition\" />\n\nAll targets listed as dependencies of 'build' are being addressed, although\nthere is no valid precondition."}, {"count": 1, "tags": [], "bug_id": 31513, "attachment_id": null, "id": 64511, "time": "2004-10-02T21:28:46Z", "creator": "stevel@apache.org", "creation_time": "2004-10-02T21:28:46Z", "is_private": false, "text": "Not a bug. This is by design. Think about it: it is often those predecessors who\ndo the precondition logic.\n\nif you have a target that needs to be conditional, have it explicitly depend on\nthe test (which it does, after all), and mark it as conditional. In your case,\nyou can make the build file do what you want, you just need to reorder things."}, {"count": 2, "tags": [], "bug_id": 31513, "is_private": false, "text": "Don't want to be blasphemous, but I really thought about it and unfortunately I\nstill think it is a not a good design.\nPlease help me convincing myself of your opinion, by showing me way to neglect\nthe execution of the build task if the precondtion does not work.", "id": 64512, "time": "2004-10-02T22:16:53Z", "creator": "Svante.U.Schubert@gmx.de", "creation_time": "2004-10-02T22:16:53Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 31513, "attachment_id": null, "id": 64513, "time": "2004-10-02T23:07:27Z", "creator": "florin@iucha.net", "creation_time": "2004-10-02T23:07:27Z", "is_private": false, "text": "This design is not obvious and certainly not documented. I was bitten by the\nsame problem and had to add intermediate targets to work around this \"feature\".\n\nThe implementation is confusing because both \"depends\" and \"if/unless\" are\ndefined using attributes which do not hint hierarchy of application.\n\nAnother severe misfeature of the if/unless test is that it tests only for the\nexistence of the property: this means that you cannot change the execution flow\nwith a property defined on the command line since you can not ask that a\nproperty never be defined."}, {"count": 4, "tags": [], "text": "It's OK to be blasphemous, but you also have to recognise that even if we were\nshown to be hopelessly wrong, we couldnt change behaviour for backwards\ncompatibility reasons. So you'd have to start an entire new fork of the code,\nwhich is what usually happens in real religions (that and centuries of war and\nstrife)\n\nHere is a rewrite/extension of your example:\n  <target name=\"all\" depends=\"build\" />\n  \n  <target name=\"check-preconditions\" depends=\"test-jcc-dir\" />\n  \n  <target name=\"test-jcc-dir\">\n    <available file=\"${jcc_home.dir}\" type=\"dir\" property=\"valid-precondition\" />\n  </target>  \n  \n  <target name=\"casual-error-msg\" unless=\"valid-precondition\"\ndepends=\"check-preconditions\">\n      <echo level=\"error\" message=\"ERROR: Please set the path of 'jcc_home.dir'\nin the\nbuild.xml file!\" />\n  </target>    \n  \n  <target name=\"test\" depends=\"check-preconditions\" if=\"valid-precondition\" >\n  \t<!-- something that only works if preconds are met -->\n  </target>\n  \n  <target name=\"build\" depends=\"clean, compile, test, dist\" />\n\n\nNote\n1. anything that depends on a precondition check *explicitly* declares that in\nthe dependency graph\n\n2. any target that doesnt want to wrun when a precond is false says if=\"\" itself.\n\nYou are currently trying to define behaviour by ordering stuff in descendent\nclasses, and marking them conditional. Visualise the tasks as a directed acyclic\ngraph: everything which depends on another target should say what it depends on\neither directly (depending on that target) or indirectly (depending on a target\nthat also depends on the target). Ant builds up a graph and then runs through\nthem : whenever it gets to execute a target it first looks at the current\nif/unless state.\n\nYour proposed policy 'dont execute predecessors if invalid' doesnt work in a\ncomplex graph, as different children could have different policies. For example.\nhere we have two targets which are contradictory:\n  <target name=\"if-run\" depends=\"test\" if=\"valid-precondition\" >\n  <target name=\"unless-run\" depends=\"test\" unless=\"valid-precondition\" >\n  <target name=\"inconsistent\" depends=\"check-preconditions,if-run,unless-run\" \n\nif you run \"ant inconsistent\" our interpretation of conditionalness is valid,\nbut yours would be inconsistent: would test run or not?", "attachment_id": null, "bug_id": 31513, "id": 64514, "time": "2004-10-02T23:08:09Z", "creator": "stevel@apache.org", "creation_time": "2004-10-02T23:08:09Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 31513, "attachment_id": null, "text": "Florin. The design does make sense, though we should document it better. \n\nyou can also convert any true/false property into a set/unset property using\n<condition>. Fiddly, but not impossible. \n\nOne thing that is something to consider in future is how conditional operation\ncould be improved without breaking compatibility. \n", "id": 64515, "time": "2004-10-02T23:12:08Z", "creator": "stevel@apache.org", "creation_time": "2004-10-02T23:12:08Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 31513, "attachment_id": null, "text": "Very well spoken Steve. I am pleased and I do not really need a new religion\n(resp. fork).\n\nBut as Florin as earlier stated, you surly should give an example in the docu\n(i.e. http://ant.apache.org/manual/using.html#tasks) about the relation of 'if\nand 'depends'. Especially that all depends task will be executed even when a\ncondition does not met.\nIt is not apparent, as if I would be a high-performant parser, I would be lazy\nand wouldn't bother with the dependent tasks, when the parent is not executed\nanyway. \nConcerning the desired switch for a complete different flow of execution, as\nFlorin earlier had required, I couldn't find in the documentation, either. Only\nthe neglecting of the execution of the interior of a task of one line of flow\nseems possible.\n\n\nConcerning your example:\n<target name=\"if-run\" depends=\"test\" if=\"valid-precondition\" >\n<target name=\"unless-run\" depends=\"test\" unless=\"valid-precondition\" >\n<target name=\"inconsistent\" depends=\"check-preconditions,if-run,unless-run\" \n\nIn the blashemous religion the 'test' would have been executed in any case.\n\nIn my original given example I wanted to run a pre-build test, if I am able to\nbuild anyway, so that there wouldn't appear any tasks like compile, smoke-test,\ndistribution in the log. \nBut it is only a minor blemish, no real harm for this very nice product.\n\nThanks for your help, Steve\n", "id": 64516, "time": "2004-10-03T01:21:30Z", "creator": "Svante.U.Schubert@gmx.de", "creation_time": "2004-10-03T01:21:30Z", "is_private": false}, {"count": 7, "tags": [], "creator": "stevel@apache.org", "is_private": false, "text": "the docs have already been updated Svante; future users wont be misled the same way.\n\nNote there is one way to make an entire tree conditional, invoke it inside an\nexisting targe\n\n<target name=\"conditional\" if=\"test\">\n <antcall target=\"conditional-tree\" />\n</target>\n\nThis will execute target \"conditional-tree\" and all its predecessors, which is\ngood. But then you wont get properties set in that antcall back into the main\nbuild, which is sometimes bad.", "id": 64518, "time": "2004-10-03T13:38:51Z", "bug_id": 31513, "creation_time": "2004-10-03T13:38:51Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 31513, "attachment_id": null, "is_private": false, "id": 64519, "time": "2004-10-03T14:15:17Z", "creator": "Svante.U.Schubert@gmx.de", "creation_time": "2004-10-03T14:15:17Z", "text": "Many thanks for your help, I become aware of 'antcall' as well this morning and\nupdated / simplified my earlier build.xml to:\n\n<!-- Default task -->\n<target name=\"build\" depends=\"precondition_warning\" if=\"build.possible\">\n  <antcall target=\"clean\" />\n  <antcall target=\"compile\" />\n  <antcall target=\"smoke-test\" />\n  <antcall target=\"dist\" />\n</target>\n\n<!-- Gives out an error message if preconditions are not met -->  \n<target name=\"precondition_warning\" depends=\"check-preconditions\"\nunless=\"build.possible\">\n  <antcall target=\"_error-msg\" /> \n</target>\n\n<!-- set 'build.possible' property, when the JCC directory exists  -->\n<target name=\"check-preconditions\">\n  <available file=\"${jcc_home.dir}\" \n    type=\"dir\" property=\"build.possible\" />\n</target>\n\n<target name=\"_error-msg\" depends=\"check-preconditions\" unless=\"build.possible\">\n  <echo level=\"error\" \n    message=\"ERROR: No valid path for 'jcc_home.dir' set in build.xml file!\" />\n</target>\n\nHow multiple conditions will be checked and connected to their related warning\nmessages, I will think about when such a scenario occurs. ;)\n\nAs I am not aware of your bughandling, I leave it up to you to verify and close\nthis issue.\nYou helped me a lot. Thanks again."}]
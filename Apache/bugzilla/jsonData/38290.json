[{"count": 0, "tags": [], "bug_id": 38290, "text": "I'm writing a single sign-on (SSO) filter for Tomcat 5.0, which adds itself as a\nlistener for HTTP session (org.apache.catalina.Session) objects. It relies on\nreceiving SessionEvents so that when a session times out, it can be removed from\nthe corresponding single sign-on session (and if the SSO session then contains\nno HTTP sessions, the whole SSO session itself should be destroyed).\n\nIf a webapp is accessed (creating a new HTTP session), and the webapp is then\nredeployed (either while the session is still active, or after it becomes\ninvalid but before the StandardManager removes it, the old Session object is\n\"forgotten\" and no SessionEvent is sent to my SessionListener.\n\nIf the webapp is redeployed while the session is still valid, and the webapp is\nthen refreshed in the browser, a new Session object for the same session ID is\ncreated.\n\nIf the webapp is redeployed after the session has become invalid, but before the\nStandardManager cleans it up, and the webapp is then refreshed, a new Session\nobject for a *new* session ID is created.\n\nIn both cases, I receive no SessionEvent for the old, \"forgotten\" Session\nobject, whereas the new Session object is treated normally, and times out, is\ncleaned up by the StandardManager, and so on.\n\nI may be missing something with regards to how Tomcat is supposed to clean up\ninvalid sessions, but I would expect a SESSION_DESTROYED_EVENT to be sent to all\nSessionListeners when a Session object is invalidated due to the webapp being\nreloaded.\n\nThe Java Servlet Specification mentions that when webapps are reloaded \"the\ncontainer should provide a robust approach to preserving session data within\nthat application\". Particularly in the second case, where a new session ID is\ncreated without properly destroying the old one, Tomcat doesn't seem to conform\nto the spec.", "id": 84676, "time": "2006-01-16T16:52:33Z", "creator": "asf-bugzilla@richardfearn.co.uk", "creation_time": "2006-01-16T16:52:33Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 38290, "text": "For events related to session passivation and activation (which as you noted is\nnot the same as destruction), which occur when the webapp is redeployed, you\nshould use the HttpSessionActivationListener.\n\nIn your particular use-case, you probably want your SSO filter to listen on both\nsession creation/destruction and activation/passivation.\n\nIf after adjusting your filter / code to listen for these events you still find\nthat they don't work, we would appreciate you submitting the simplest possible\ntest case demonstrating the bug.  Such a test case would greatly facilitate our\ninvestigation of this issue.\n\nAs a side note, if at all possible, please test this issue in Tomcat 5.5.17 or\nlater. Tomcat 5.0 is not being actively developed.", "id": 90263, "time": "2006-06-15T19:23:43Z", "creator": "yoavs@computer.org", "creation_time": "2006-06-15T19:23:43Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 38290, "text": "Closing assuming lack of response from OP means Yoav's advice fixed the problem.", "id": 109572, "time": "2007-10-22T17:41:04Z", "creator": "markt@apache.org", "creation_time": "2007-10-22T17:41:04Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 58885, "attachment_id": null, "text": "We regressed on performance after fixing bug 58443: adding each merged region is now linear in the number of merged regions which already exist, which showed up as quite a sharp performance regression in one of our apps.\n\nSee bug 58443 comment 3.\n\nWe either need to speed this up or allow bypassing the validation for applications which are confident they're doing it right.", "id": 187801, "time": "2016-01-18T14:43:47Z", "creator": "dtn-asfbugs@corefiling.co.uk", "creation_time": "2016-01-18T14:43:47Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58885, "attachment_id": null, "text": "Would Sheet.addMergedRegion(CellRangeAddress region, boolean checkForOverlapping) (not implemented) solve this problem?", "id": 187808, "time": "2016-01-18T19:42:51Z", "creator": "onealj@apache.org", "creation_time": "2016-01-18T19:42:51Z", "is_private": false}, {"count": 2, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 187816, "time": "2016-01-19T05:23:00Z", "bug_id": 58885, "creation_time": "2016-01-19T05:23:00Z", "is_private": false, "text": "Adding a merged region *safely* (without creating a potentially corrupted workbook) is inherently a O(n) operation, as it need to check all merged regions in the sheet for potential overlap.\n\nA merged region could be added unsafely (potential workbook corruption), but this should not be the default behavior.\n\nIf adding multiple merged regions, it still requires O(n) time for each merged region addition. The checking could be deferred until a later time before saving the workbook, but wouldn't save any CPU cycles unless merged regions were added and removed between opening and saving the workbook.\n\n> which showed up as quite a sharp performance regression in one of our apps\n\nCould I get a rough number of merged regions in a sheet so I could profile this? I don't think there's much we can do to make the code faster, so we'll probably need to provide a method that bypasses validation. To make it crystal clear that using the bypassed-validation option can produce a corrupt workbook, I was thinking of calling it public int Sheet.addMergedRegionUnsafe(CellRangeAddress region), as the signature from comment 1 does not stress the consequences of checkForOverlapping=False."}, {"count": 3, "tags": [], "creator": "dtn-asfbugs@corefiling.co.uk", "is_private": false, "id": 187819, "attachment_id": null, "bug_id": 58885, "creation_time": "2016-01-19T09:52:50Z", "time": "2016-01-19T09:52:50Z", "text": "Thanks Javen.\n\nI agree blindly adding merged regions without the guards is an inherently unsafe operation, but in our case we're authoring the workbook from scratch in one run, so I think it's reasonable to give us API to say \"we're confident we're adding non-overlapping regions\".\n\nIn terms of API, we could perhaps call the alternative method addMergedRegionUnsafe(CellRangeAddress region) or use an enum as an alternative to the boolean.\n\nThe number of merged regions on the sheet in question is 23,002 - which I'll admit is quite a lot!"}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "is_private": false, "id": 188074, "attachment_id": null, "bug_id": 58885, "creation_time": "2016-01-31T04:17:01Z", "time": "2016-01-31T04:17:01Z", "text": "Fixed in r1727776. Use XSSFSheet.addMergedRegionsUnsafe(CellRangeAddress) if you want to add a merged region without incurring the cost of checking for potential intersecting regions. XSSFSheet.validateMergedRegions can be called after the fact if you want to defer the validation.\n\nUpdated changelog in r1727779."}]
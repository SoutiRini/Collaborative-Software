[{"count": 0, "tags": [], "bug_id": 40039, "attachment_id": null, "text": "Using version poi-2.5.1-final-20040804, i tried writing an Excel file from a web\ndynpro SAP component. When downloading to local pc, Excel opens the file by\nrepairing it. In the \"show repairs\" option of Excel, i got this:\n\n\"Damage to the file was so extensive that repairs were not possible. Excel\nattempted to recover your formulas and values, but some data may have been lost\nor corrupted.\"\n\nThe final sheet appears with one less column than i wanted. And what i want is\nvery simple: a sheet with a first row filled and first column filled with a\nstring code, second line with 10 columns with strings (headers), and then a\ndynamic number of rows filling the first column with an integer value. \n\nHere's the code i use:\n\n  public byte[] exportToExcel( )\n  {\n    //@@begin exportToExcel()\n\n\t  //Create a workbook\n\t  HSSFWorkbook wb = new HSSFWorkbook();\n\n\t  //Create an sheet attached to the workbook\n\t  HSSFSheet sheet = wb.createSheet(\"Form Valores Levantamento\");\n\n\t  // Create a row (first header)\n\t  HSSFRow row = sheet.createRow((short) 0);\n\t  wdContext.currentResultadosElement().getCodigo();\n\t  row.createCell((short) 0).setCellValue(\"Levantamento N\u00ba\");\n\t  row.createCell((short)\n1).setCellValue(wdContext.currentResultadosElement().getCodigo());\n\n\t  // Create a row (second header)\n\t  row = sheet.createRow((short) 1);\n\t  // Create all cells and put all value in it.\n\t  row.createCell((short) 0).setCellValue(\"C\u00f3digo\");\n\t  row.createCell((short) 1).setCellValue(\"Quantidade \u00daltimo Ano\");\n\t  row.createCell((short) 2).setCellValue(\"Prazo M\u00e9dio Entrega\");\n\t  row.createCell((short) 3).setCellValue(\"Data \u00daltima Aquisi\u00e7\u00e3o\");\n\t  row.createCell((short) 4).setCellValue(\"Quantidade \u00daltima Aquisi\u00e7\u00e3o\");\n\t  row.createCell((short) 5).setCellValue(\"Custo Unit\u00e1rio\");\n\t  row.createCell((short) 6).setCellValue(\"Prev. Min. Mensal\");\n\t  row.createCell((short) 7).setCellValue(\"Prev. Min. Anual\");\n\t  row.createCell((short) 8).setCellValue(\"Prev. Max. Mensal\");\n\t  row.createCell((short) 9).setCellValue(\"Prev. Max. Anual\");\n\t \n\t  \t  \n\t  int count = wdContext.nodeNecValores_excel().size();\n\t  \n\t  for (int i = 0; i < count; i++){\n\t\t\n\t\t  IPublicLevValores.INecValores_excelElement elem=\n\t\t\t  wdContext.nodeNecValores_excel().getNecValores_excelElementAt(i);\n\t\t\n\t\t  double prod_id = Double.parseDouble( (elem.getProd_id()).trim() );\n\t\t\n\t\t  //Create a row \n\t\t  row = sheet.createRow((short) i+2);\n\t\t  // Create all cells and put all value in it.\n\t\t  row.createCell((short) 0).setCellValue(prod_id);\n\t  }\n\t  \n\t//\tget attribute info for context attribute 'FileResource'\n\tIWDAttributeInfo attributeInfo =\n\twdContext.getNodeInfo().getAttribute(IPublicLevValores.IContextElement.FILE_RESOURCE);\n\t//\tcreate a modifiable binary type for the context attribute\n\t//\twhich stores the MIME-object.\n\n\tIWDModifiableBinaryType binaryType =\n\t(IWDModifiableBinaryType) attributeInfo.getModifiableSimpleType();  \n \t\n\twdContext.currentContextElement().setFileResource(wb.getBytes());\n\n\tbinaryType.setFileName(\"folha-levantamentos.xls\");\n\tbinaryType.setMimeType(WDWebResourceType.XLS);\t  \n\n\treturn wb.getBytes();\n\t\n    //@@end\n  }\n\n\n\nThe cell created by this line:\nrow.createCell((short) 9).setCellValue(\"Prev. Max. Anual\");\nnever appears on the final Excel.\n\nI allready tried changing POI versions to older versions, but the problem\nmaintains. Even worse, besides the \"Corrupt file\" messages, i loose one of the\nrows now.", "id": 91281, "time": "2006-07-13T17:12:40Z", "creator": "xpto2k3@gmail.com", "creation_time": "2006-07-13T17:12:40Z", "is_private": false}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "You should check to see if your problem still exists in 3.0 alpha 2 - that's the\nversion where development and bug fixes are happening against.", "id": 91309, "time": "2006-07-14T09:53:22Z", "bug_id": 40039, "creation_time": "2006-07-14T09:53:22Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 40039, "attachment_id": null, "text": "Can you please retry with the alpha, if not upload a code snippet that fails but\ndoesnt include all of your custom classes.\n\nJason", "id": 91602, "time": "2006-07-26T11:58:37Z", "creator": "jheight@apache.org", "creation_time": "2006-07-26T11:58:37Z", "is_private": false}, {"count": 3, "tags": [], "creator": "epilz@altastrada.com", "text": "I just ran into this myself. The issue stems from using HFFSWorkbook#getBytes()\nto create an input stream that eventually gets saved as a file. From the docs\nfor getBytes() I think it may just be a misunderstanding of what the method\nreturns. \n\nHere's what I was doing that caused the problem:\n\nHFFSWorkbook wb = new HFFSWorkbook();\n// add sheets, rows, and cells.\nreturn new ByteArrayInputStream(wb.getBytes());\n\nThe way I ended up solving this is as follows:\n\n    HFFSWorkbook wb = new HFFSWorkbook();\n    // add sheets, rows, and cells.\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        workbook.write(baos);\n        return new ByteArrayInputStream(baos.toByteArray());\n    } catch (IOException e) {\n        try { baos.close(); } catch (IOException ee) { }\n    }\n\n- Erik\n", "id": 97062, "time": "2006-12-18T20:08:32Z", "bug_id": 40039, "creation_time": "2006-12-18T20:08:32Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 40039, "text": "Please check if the problem still exists in 3.1-beta1.\n\nYegor\n\n", "id": 116742, "time": "2008-05-17T06:30:48Z", "creator": "yegor@dinom.ru", "creation_time": "2008-05-17T06:30:48Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Jason had this analyzed correctly. GetBytes is the Workbook part of the output file. All binary results must always be wrapped in a POIFS to be a valid file. The BIFF8 can look like other older Excel files enough that it can sometimes read most of the file.\n\nLook at HSSFWorkbook and you can see how GetBytes is used:\n\n    /**\n     * Method write - write out this workbook to an Outputstream.  Constructs\n     * a new POI POIFSFileSystem, passes in the workbook binary representation  and\n     * writes it out.\n     *\n     * @param stream - the java OutputStream you wish to write the XLS to\n     *\n     * @exception IOException if anything can't be written.\n     * @see org.apache.poi.poifs.filesystem.POIFSFileSystem\n     */\n\n    public void write(OutputStream stream)\n            throws IOException\n    {\n        byte[] bytes = getBytes();\n        POIFSFileSystem fs = new POIFSFileSystem();\n\n        // For tracking what we've written out, used if we're\n        //  going to be preserving nodes\n        List excepts = new ArrayList(1);\n\n        // Write out the Workbook stream\n        fs.createDocument(new ByteArrayInputStream(bytes), \"Workbook\");\n\n        // Write out our HPFS properties, if we have them\n        writeProperties(fs, excepts);\n\n        if (preserveNodes) {\n            // Don't write out the old Workbook, we'll be doing our new one\n            excepts.add(\"Workbook\");\n            // If the file had WORKBOOK instead of Workbook, we'll write it\n            //  out correctly shortly, so don't include the old one\n            excepts.add(\"WORKBOOK\");\n\n            // Copy over all the other nodes to our new poifs\n            copyNodes(this.filesystem,fs,excepts);\n        }\n        fs.writeFilesystem(stream);\n        //poifs.writeFilesystem(stream);\n    }\n", "is_private": false, "id": 124941, "creation_time": "2009-02-18T10:48:53Z", "time": "2009-02-18T10:48:53Z", "creator": "dfisher@jmlafferty.com", "bug_id": 40039, "attachment_id": null}]
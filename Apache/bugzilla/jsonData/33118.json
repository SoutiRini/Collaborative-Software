[{"count": 0, "tags": [], "creator": "stevel@apache.org", "text": "Take a directory, say \"/\", which contains a subdir, say \"root\" which only has\nrwx permissions set for root.\n\nThen, as a normal user, do a fileset to enum all directories and files in root,\nbut not underneath it:\n   <target name=\"path2\" >\n    <path id=\"root.dir\">\n      <fileset dir=\"/\" includes=\"*\" />\n    </path>\n    <property name=\"root\" refid=\"root.dir\" />\n    <echo> ${root}</echo>\n   </target>\n\nExpected: a list of directories\nActual: a stack trace\n IO error scanning directory /root\n\tat org.apache.tools.ant.DirectoryScanner.scandir(DirectoryScanner.java:828)\n\tat\norg.apache.tools.ant.DirectoryScanner.accountForIncludedDir(DirectoryScanner.java:925)\n\tat org.apache.tools.ant.DirectoryScanner.scandir(DirectoryScanner.java:864)\n\tat\norg.apache.tools.ant.DirectoryScanner.checkIncludePatterns(DirectoryScanner.java:663)\n\tat org.apache.tools.ant.DirectoryScanner.scan(DirectoryScanner.java:642)\n\tat\norg.apache.tools.ant.types.AbstractFileSet.getDirectoryScanner(AbstractFileSet.java:352)\n\nQuestion is, if the fileset search pattern was just \"*\", why was the the fileset\ntrying to look inside the directory", "id": 69733, "time": "2005-01-15T18:27:28Z", "bug_id": 33118, "creation_time": "2005-01-15T18:27:28Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 33118, "attachment_id": null, "id": 71182, "time": "2005-02-18T14:50:38Z", "creator": "bodewig@apache.org", "creation_time": "2005-02-18T14:50:38Z", "is_private": false, "text": "because of these lines in accountForIncludedDirectory\n\n        if (fast && (included || couldHoldIncluded(name))) {\n            scandir(file, name + File.separator, fast);\n        }\n\nincluded is true, so we scan.\n\nI think it should be\n\n        if (fast && couldHoldIncluded(name + '/')) {\n            scandir(file, name + File.separator, fast);\n        }\n\nbut need some more time to look through all the side effects if such a change."}, {"count": 2, "tags": [], "creator": "mbenson@apache.org", "text": "I thought the same thing, except I forgot to add the trailing '/' when I tested\nit.  IIRC this broke one of the copy testcases, but your version may not.", "id": 71198, "time": "2005-02-18T17:23:28Z", "bug_id": 33118, "creation_time": "2005-02-18T17:23:28Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "I couldn't get your change to fix it either, Stefan.  I had to do a little\nextra; my fix passes testcases and since I'm so impetuous and all I'm going to\ngo ahead and commit it.", "is_private": false, "id": 71740, "creator": "mbenson@apache.org", "time": "2005-03-02T23:42:43Z", "bug_id": 33118, "creation_time": "2005-03-02T23:42:43Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 33118, "attachment_id": null, "id": 71741, "time": "2005-03-02T23:58:46Z", "creator": "mbenson@apache.org", "creation_time": "2005-03-02T23:58:46Z", "is_private": false, "text": "Hmm... this solved the sub-question: why were we looking in a directory whose\ncontents we couldn't match?  However, if we specifically try to scan a\nrestricted directory, the result will be the same. DS is coded (correctly, as\nfar as it goes) to interpret a null result from File.list() as an I/O error...\nthen it throws a BuildException.  If we are agreed that it is okay to raise the\nexception here then we should probably change the heading of this bugrep;\notherwise we should reopen it."}]
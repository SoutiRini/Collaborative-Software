[{"count": 0, "tags": [], "text": "The memory of the Apache process increase proportionnally by the number of \nrequests from a client when the MaxKeepAliveRequests is set to a high number \n(e.g. 10000 or 0).\n\nI have run a few tests and these are the main findings:\n\n1. Problem does not happen with Apache 1.3.33(request for local or proxy pages)\n2. Problem does not happen with Apache 2.0.54 when the file is local\n3. Problem happen with Apache 2.0.54 when using Proxy and ReverseProxy (e.g. \nthe page to be retrieved is on another server).\n4. Problem is related to MaxKeepAliveRequests count, and the memory increase \nby about 4.4 KB for each supplemental request.\n5. Problem happen with prefork and worker threading model.\n\nFor example, if the client request n consecutive requests (with same socket), \nthis is the amount of memory that the Apache process will grow. \n\n10    requests -> + 48 KB\n100   requests -> + 480 KB\n1000  requests -> + 4800 KB\n10000 requests -> + 48000 KB\n\nThe memory is never returned even if a new operation is requested by the same \nprocess. Whenever there is a different request from another IP Address, the \nprocess memory usage also increase by 100-200 KB.\n\nBecause of this behavior, we are seeing single apache process use up to 40-50 \nMB using prefork, and 400-500 MB using worker (since many threads are \nexecuting in the same process). We are using MaxRequestsPerChild 100 or 1000 \nto limits the amount of memory used, but this should not be required.\n\nThis is the test configuration and results:\n\nApache configuration\n              \nKeepAlive              On\nMaxKeepAliveRequests    0\nKeepAliveTimeout      120\n\n<IfModule prefork.c>\nServerLimit             1\nStartServers            1\nMinSpareServers         1\nMaxSpareServers         1\nMaxClients              1\nMaxRequestsPerChild     0\n</IfModule>\n\n#HTTP\n<VirtualHost nnn.nnn.nnn.nnn:80>\n    ServerAdmin root@host\n    DocumentRoot \"/usr/apache2/htdocs/\"\n    ServerName nnn.nnn.nnn:80\n    ErrorLog logs/error_log\n    CustomLog logs/referer_log referer\n\n#Remote server is WebLogic\nProxyPass /proxy/                  http://nnn.nnn.nnn.nnn:7002/proxy/\nProxyPassReverse /proxy/           http://nnn.nnn.nnn.nnn:7002/proxy/\n</VirtualHost>\n              \nThis table show the size of the Apache process (in KB) after each operation\n\n  Apache Version              1.3.33   2.0.47   2.0.54   2.0.54\n  Test ID URL                  proxy    proxy    local    proxy\n1 Request startup               1084     2400     2496     2496\n              \n2 Request 1 msg, 100 bytes      1260     2500     2568     2612\n  Difference in KB               176      100       72      116\n              \n3 Request 1 msg, 100 bytes      1260     2504     2572     2616\n  Difference in KB                 0        4        4        4\n              \n4 Request 10 msgs, 100 bytes    1260     2552     2576     2660\n  Difference in KB                 0       48        4       44\n              \n5 Request 100 msgs, 100 bytes   1260     2992     2580     3092\n  Difference in KB                 0      440        4      432\n              \n6 Request 200 msgs, 100 bytes   1260     3448     2580     3572\n  Difference in KB                 0      456        0      480\n              \n7 Request 210 msgs, 100 bytes            3528     2580     3624\n  Difference in KB                         80        0       52\n              \n8 Request 220 msgs, 100 bytes            3576     2580     3668\n  Difference in KB                         48        0       44\n              \n9 Request many status-server page        3764              3836\n  Difference in KB                        188               168\n\n10  Request 220 msgs, 100K bytes                           4012\n  Difference in KB                                          176\n\nTest Program\n\nThe test program is a simple Java program which is used to request a local or \nproxy page of different sizes and different counts.\n\nThe test program sends HTTP 1.1 requests.\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class GetURL {\n\n  public static void main(String[] args) throws Exception {\n\n  int messageSent = 0;\n  int maxRequests = 100;\n\n  while (messageSent < maxRequests) {\n  try {\n      // Create a URL for the desired page\n      URL url = new URL(\"http://proxyserver/proxy/100BytesR.jsp\");\n      BufferedReader in = \n      new BufferedReader(new InputStreamReader(url.openStream()));\n       \n      String str;\n      while ((str = in.readLine()) != null) {\n          // str is one line of text; readLine() strips the newline character\n          System.out.println(str);\n      }\n   in.close();\n   } catch (MalformedURLException e) {\n   } catch (IOException e) {\n   }\n   messageSent += 1;\n   System.out.println(\"\\nProcessed Message: \" + messageSent + \"\\n\");\n   }\n   }\n}", "attachment_id": null, "bug_id": 35373, "id": 76428, "time": "2005-06-15T18:30:39Z", "creator": "jean.dagenais@integral.com", "creation_time": "2005-06-15T18:30:39Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 35373, "attachment_id": null, "id": 83290, "time": "2005-12-06T07:52:09Z", "creator": "chip@force-elite.com", "creation_time": "2005-12-06T07:52:09Z", "is_private": false, "text": "I believe all of these leaks were fixed in 2.0.55."}]
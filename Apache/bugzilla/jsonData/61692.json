[{"count": 0, "tags": [], "bug_id": 61692, "text": "Created attachment 35474\nAllow additional HTTP methods by configuration\n\nI am working on running Nextcloud (PHP web application) with the Tomcat webserver.\nNextcloud serves different ressources with WebDAV, and that requires additional HTTP methods.\n\nCurrently CGIServlet only handles the GET, POST, HEAD (and OPTIONS, TRACE) HTTP methods.\n\nIn addition I have had to implement the following HTTP methods: DELETE MKCALENDAR, MKCOL, PROPFIND, PROPPATCH, PUT, REPORT.\nBecause there are tons of other HTTP methods nowadays, I suggest to make the whole think configurable. See for example https://github.com/nextcloud/server/issues/6644\nAlternatively, CGIServlet could just handle any HTTP method (that means just forward the method string to the CGI script, without limiting to a pre configured list).\nAttached is a patch, that works fine for me.", "id": 201762, "time": "2017-10-28T16:25:00Z", "creator": "jan0michael@yahoo.com", "creation_time": "2017-10-28T16:25:00Z", "is_private": false, "attachment_id": 35474}, {"count": 1, "tags": [], "bug_id": 61692, "attachment_id": null, "text": "I don't like this patch (-1) for a number of reasons.\n\n1. It uses many regular expressions during each request: poor performance\n2. It requires configuration for what should be pass-through semantics\n\nWhy not simply replace doGet, doPost, etc. with service(Request,Response) and pass everything through to the underlying CGI without all that overhead?", "id": 201823, "time": "2017-10-31T14:23:05Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-10-31T14:23:05Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 61692, "text": "(In reply to Christopher Schultz from comment #1)\n> I don't like this patch (-1) for a number of reasons.\n> \n> 1. It uses many regular expressions during each request: poor performance\n\nPatterns are compiled in init(), not for each request.\n\nLet Pattern p = Pattern.compile(\"A|B|C|D\").\nThen\np.matcher(String).matches\nshould be as efficient as\n\"A\".equals(String) || \"B\".equals(String) || \"C\".equals(String) || \"D\".equals(String).\n\n\n\n> 2. It requires configuration for what should be pass-through semantics\n> \n> Why not simply replace doGet, doPost, etc. with service(Request,Response)\n> and pass everything through to the underlying CGI without all that overhead?\n\nYep, I mentioned that as alternative solution.\n\nJust to make sure, I got your point: What do you mean by \"pass-through semantics\"?\n\nHow to determine in this case, if request body data (a.k.a. \"POST data\") should be forwarded to the servlet?\n\n- Forward any time?\nor\n- Check HttpServletRequest.getInputStream() != null && !HttpServletRequest.getInputStream().isFinished()?\n\nThis is, what Apache HTTPD does (simply accapts all method names and forwards them to the CGI script).\nI am wondering, if there might be cases, where forwarding request body data to a CGI script, that is not prepared for it, might result in security problems.", "count": 2, "id": 201833, "time": "2017-11-01T12:03:23Z", "creator": "jan0michael@yahoo.com", "creation_time": "2017-11-01T12:03:23Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 61692, "text": "(In reply to jm009 from comment #2)\n> How to determine in this case, if request body data (a.k.a. \"POST data\")\n> should be forwarded to the servlet?\n\nIf I get it right, this reverse proxy servlet\n\nhttps://github.com/mitre/HTTP-Proxy-Servlet\n\ndecides to handle request body data, if either http header CONTENT_LENGTH or TRANSFER_ENCODING is set.", "id": 201838, "time": "2017-11-01T21:56:22Z", "creator": "jan0michael@yahoo.com", "creation_time": "2017-11-01T21:56:22Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 61692, "is_private": false, "count": 4, "id": 202188, "time": "2017-11-16T20:28:14Z", "creator": "markt@apache.org", "creation_time": "2017-11-16T20:28:14Z", "text": "Currently, the CGI servlet only handles a request body if the method is POST and the Content-Length header is set.\n\nUnless there are objections then I propose the following:\n- allow any HTTP method and let the CGI script decide how to handle it\n- except HEAD, TRACE and OPTIONS which will still be handled by HttpServlet\n- pass the request body for any method if Content-Length or Transfer-Encoding is set\n\nSince this is a change in functionality, I propose to only make this change in 9.0.x."}, {"count": 5, "tags": [], "bug_id": 61692, "attachment_id": null, "text": "> Unless there are objections then I propose the following:\n> - allow any HTTP method and let the CGI script decide how to handle it\n\nSounds good.\n\n\n> - except HEAD, TRACE and OPTIONS which will still be handled by HttpServlet\n\nShouldn't the servlet handle OPTIONS, because Tomcat doesn't know which methods are handled by the servlet? I would say yes, but to be honest, I have not much experience with details of HTTP traffic.", "id": 202326, "time": "2017-11-22T05:02:03Z", "creator": "jan0michael@yahoo.com", "creation_time": "2017-11-22T05:02:03Z", "is_private": false}, {"count": 6, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Good point. Fixing that starts heading in the direction of the original patch again. More thought required.", "id": 202345, "time": "2017-11-22T19:44:52Z", "bug_id": 61692, "creation_time": "2017-11-22T19:44:52Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "text": "I've been thinking about this some more and experimenting with different ideas. Trying to reconcile the combination of maximising backwards compatibility, supporting any HTTP method and having the correct response for OPTIONS is not easy. Something has to give.\n\nMy current thinking is to add a single new option, enableAllHttpMethods. If this is enabled, every request regardless of method will be passed to the CGI script and it will be expected to respond appropriately. This maximises backwards compatibility while enabling scripts to be deployed that support any methods. The downside is that if you enable this option the script has to handle OPTIONS, TRACE and any unrecognised methods. That seems a reasonable compromise to me.\n\nFor the request body, I plan to go with the option of passing the request body for any method if Content-Length or Transfer-Encoding is set.\n\nThis approach has the advantage that it can be applied to all supported Tomcat versions.\n\nI'll leave this a few days for folks to comment and if the consensus is favourable, I'll implement this approach for the next round of releases.", "id": 202736, "time": "2017-12-12T15:18:14Z", "bug_id": 61692, "creation_time": "2017-12-12T15:18:14Z", "is_private": false, "attachment_id": null}, {"count": 8, "text": "(In reply to Mark Thomas from comment #7)\n> My current thinking is to add a single new option, enableAllHttpMethods. If\n> this is enabled, every request regardless of method will be passed to the\n> CGI script and it will be expected to respond appropriately.\n\nAlternative idea:\n- a regexp option that is applied as a filter to method names.\n\nIf \"OPTIONS\" method matches the regexp filter then it means that OPTIONS method is processed by underlying CGI script.\n\n\nIf \"OPTIONS\" method does not match the regexp filter, we can implement support for OPTIONS method in Java in the following way:\n1. Iterate over a list of known HTTP methods - see IANA registry [1]\n2. Retain only those that match the regexp filter.\n\n[1] https://www.iana.org/assignments/http-methods/http-methods.xhtml", "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 202739, "time": "2017-12-12T15:38:22Z", "bug_id": 61692, "creation_time": "2017-12-12T15:38:22Z", "tags": [], "attachment_id": null}]
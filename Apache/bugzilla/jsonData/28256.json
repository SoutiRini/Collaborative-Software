[{"count": 0, "tags": [], "bug_id": 28256, "text": "In summary, because WebappClassLoader extends the behavior of\nURLClassLoader's findClass method, it needs to insulate its extended\nbehavior in a doPrivileged block (with a stored AccessControlContext)\njust like URLClassLoader.findClass does.\n\nThe findClassInternal method of WebappClassLoader does not execute as a\nprivileged operation, but a brief glance the source to its superclass,\nURLClassLoader, shows that it needs to.  A class loader needs to\ninsulate itself from the arbitrary security context in which it might\nbe invoked (such as during lazy class loading).\n\nThe specific problem we are encountering is a bit complex, but in\nbrief, the bug occurs when attempting to load a class using a class\nloader whose parent is a servlet's WebappClassLoader-- the loading\nfails with a security exception.  (This situation can come about when,\nfor example, a servlet attempts to download the proxy for a Jini\nservice, for which the service proxy's class gets loaded using the\nRMIClassLoader.loadClass API.)\n\nWhen the child class loader, which is also a URLClassLoader, defines a\nclass that it has loaded itself, that operation executes as a\nprivileged operation restricted by the protection domains in the access\ncontrol context stored in that URLClassLoader instance (this access\ncontrol context was snapshotted by URLClassLoader's constructor).  This\naccess control context's domain's may not include permissions to read\nfrom where the parent WebappClassLoader looks for classes and\nresources-- in the case of an RMI class loader, for example, it\ntypically does not include such permissions, because it will only\ninclude permissions to read from the loader's own URLs.\n\nWhen this defineClass operation causes a recursive loading operation\n(such as to load a supertype of the class being defined), delegation to\nthe parent WebappClassLoader results in its findClassInternal method\nbeing invoked.  Because that method does not execute as a privileged\noperation itself, its attempt to read the class definition from some\nlocation (such as the .../WEB-INF/classes/ tree) fails with a security\nexception, because the child loader's privileged operation is still in\nforce.\n\n[Because the access control context used by RMI class loaders uses a\ndomain with a set of permissions that were assembled synthetically, it\nis impossible to grant the necessary permissions through the security\npolicy (as a workaround), except by granting them to all code, which is\nclearly undesirable.]\n\nThe fix is a relatively simple one.\nFirst we need to add a private class variable to hold the loaders context:\n\nprivate AccessControlContext acc;\n\nnext we need to retrieve and store this context in the Class's two constructors:\n\n    public WebappClassLoader() {\n    ...\n        if (securityManager != null) {\n            refreshPolicy();\n        }\n        acc = AccessController.getContext();    // see URLClassLoader\n >>>----^ add this line above\n    }^M\n\n\nFinally we need to wrap the logic of the findClassInternal() method in a\ndoPriveleged operation:\n\n    protected Class findClassInternal(final String name)\n        throws ClassNotFoundException {\n\n        try {\n            return (Class)\n                AccessController.doPrivileged( new PrivilegedExceptionAction() {\n                    public Object run() throws ClassNotFoundException {\n                        if (!validate(name))\n                            throw new ClassNotFoundException(name);\n\n                        Etc...\n            }, acc);\n        } catch (java.security.PrivilegedActionException pae) {\n            throw (ClassNotFoundException) pae.getException();\n        }\n    }\n\n\nWe have developed a simple servlet that employs the RMIClassloader\nto demonstrate the problem.  We've tested the fixes supplied above and\nthey do correct the problem.  We would be happy to furnish the test\nto you, if you like.", "id": 55450, "time": "2004-04-07T11:56:56Z", "creator": "ron.mann@sun.com", "creation_time": "2004-04-07T11:56:56Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 28256, "attachment_id": null, "is_private": false, "id": 55460, "time": "2004-04-07T14:55:37Z", "creator": "jfarcand@apache.org", "creation_time": "2004-04-07T14:55:37Z", "text": "Can you attach your test case? \n\nI'm -0 for such change for 1 reason: performance. Adding your recommendation\nwill impact the current Tomcat performance when security is turned on. What you\nare doing is not a common use case, and will impact a lot of container who\nembedded Tomcat with security turned on (J2EE 1.4 requires the security manager\nturned on by default). \n\nAlso, you can declare a more restrictive set of permissions in catalina.policy\nthan AllPermissions.\n\nThanks\n\n-- Jeanfrancois"}, {"count": 2, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "For the performance concern, I recommend adding the usual check on the presence\nof the security manager. Also, the CL actually *used* to be fast (it's no longer\nfast due to all the extra stuff done to avoid locking JARs at all costs - stupid\nJVM).\n\nBTW, going through the bug report gave me a headache :(", "id": 55461, "time": "2004-04-07T15:02:57Z", "bug_id": 28256, "creation_time": "2004-04-07T15:02:57Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 28256, "attachment_id": null, "id": 61840, "time": "2004-08-11T16:40:04Z", "creator": "yoavs@computer.org", "creation_time": "2004-08-11T16:40:04Z", "is_private": false, "text": "With the current refactoring of classloaders for Tomcat 5.next (or 5.1, or 5.5, \nor whatever), I'm probably going to close this item as it will no longer be \nrelevant."}, {"count": 4, "tags": [], "bug_id": 28256, "attachment_id": null, "is_private": false, "id": 62936, "time": "2004-09-02T00:38:10Z", "creator": "funkman@joedog.org", "creation_time": "2004-09-02T00:38:10Z", "text": "Closing per Yoav's comments."}, {"count": 5, "tags": [], "bug_id": 28256, "text": "(In reply to comment #4)\n> Closing per Yoav's comments.\n\nWould it be possible to reopen this issue? It is still relevant in 6.0.14.\nSee \nhttp://archives.java.sun.com/cgi-bin/wa?A2=ind0712&L=JINI-USERS&D=1&T=0&O=D&X=10B3EB026AA42B13C9&Y=michal.kleczek%40xpro.biz&P=6764\n\nMichal Kleczek\nXPro", "id": 112450, "time": "2008-01-03T00:57:18Z", "creator": "michal.kleczek@xpro.biz", "creation_time": "2008-01-03T00:57:18Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 28256, "is_private": false, "id": 112472, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2008-01-03T11:54:06Z", "time": "2008-01-03T11:54:06Z", "text": "Can you provide a publicly accessible reference?\n\nFailing that, a test case and a patch would be good."}]
[{"count": 0, "tags": [], "bug_id": 3374, "attachment_id": null, "text": "The Perl5Matcher.matches method is throwing an ArrayIndexOutOfBoundsException. \nHere's the relative code:\n\nFoo.class -\n\n  private static PatternCompiler patternCompiler = new Perl5Compiler();\n  Pattern regexPattern = patternCompiler.compile(\"[A-Za-z]*\");\n\nBar.class -\n\n  private static PatterMatcher patternMatcher = new Perl5Matcher();\n  boolean match = patternMatcher.matches(\"Bugs Bunny\", regexPattern);\n\nNote, my application is multi-threaded and, as such, there are multiple threads \ncalling the Perl5Matcher.matches method at the same time.   It appears that the \nexception is thread related because a) I didn't see the exception on my windows \nmachine, b) the exception is random and c) I haven't seen the exception since I \nchanged the code such that the patternMatcher is no longer static.   So, is the \nmethod thread safe? It doesn't appear to be.\n\nTom", "id": 5042, "time": "2001-09-02T09:46:32Z", "creator": "tmuldoon@lightbridge.com", "creation_time": "2001-09-02T09:46:32Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 3374, "text": "This is not a bug.  Patterns must be compiled with READ_ONLY_MASK if they\nare to be shared between threads.  Furthermore, one Perl5Matcher instance\nshould be used per thread.  This used to be made clear in the OROMatcher\nuser's guide.  If you don't want to optimize performance by avoiding the\noverhead of synchronization, use Perl5Util instead.\n\n", "id": 5044, "time": "2001-09-02T13:13:01Z", "creator": "dfs@apache.org", "creation_time": "2001-09-02T13:13:01Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "dfs@apache.org", "attachment_id": null, "text": "Closing bogus bug.", "id": 5045, "time": "2001-09-02T13:13:56Z", "bug_id": 3374, "creation_time": "2001-09-02T13:13:56Z", "is_private": false}]
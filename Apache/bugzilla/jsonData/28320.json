[{"count": 0, "tags": [], "bug_id": 28320, "is_private": false, "text": "The copy task currently does not preserve the permissions of the source files \nand uses the permissions dictated by umask.  It would be nice if there was a \nflag to preserve the permissions as much as possible, in the manner that cp \ndoes it.", "id": 55584, "time": "2004-04-09T20:40:48Z", "creator": "schveiguy@yahoo.com", "creation_time": "2004-04-09T20:40:48Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 28320, "attachment_id": null, "is_private": false, "id": 55586, "time": "2004-04-09T20:54:25Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-04-09T20:54:25Z", "text": "Unfortunately, there's no way to do this with Java... You have to resort to \nnative command you'd <exec> to preserve permissions. --DD"}, {"count": 2, "tags": [], "bug_id": 28320, "is_private": false, "text": "I had a similar problem. Somebody recommended to use Perl to copy permissions and it worked fine. This is a script that I am using to copy executable permission:\n\nmy ($src, $dst)=@ARGV;\n#print \"cpmod '$src' '$dst'\\n\";\n\nmy $srclen=length $src;\n\nfind (\n  {\n    no_chdir=>1,\n    wanted=>sub {\n      return if -d;\n      my $destfile= $dst.substr $_, $srclen;\n      if (-x and -f $destfile and not -x $destfile) {\n        my $mode=(stat $destfile)[2];\n        my $newmode=$mode | 0111; # +x\n        if ($mode != $newmode) {\n          #print \"chmod +x [\".sprintf(\"%lo\", $mode).\" -> \".sprintf(\"%lo\", $newmode).\"] '$destfile'\\n\";\n          chmod $newmode, $destfile\n        }\n      }\n    }\n  },\n  $src\n);\n", "id": 55588, "time": "2004-04-09T20:59:27Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-04-09T20:59:27Z", "attachment_id": null}, {"count": 3, "text": "Sorry, lost two lines at the beginning:\n\nuse strict;\nuse File::Find;\n", "bug_id": 28320, "is_private": false, "id": 55589, "time": "2004-04-09T21:00:22Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-04-09T21:00:22Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 28320, "attachment_id": null, "id": 55590, "time": "2004-04-09T21:03:10Z", "creator": "schveiguy@yahoo.com", "creation_time": "2004-04-09T21:03:10Z", "is_private": false, "text": "I think it is possible, since you have the chmod task.  If you claim it is not \npossible through Java to change the permissions, then you are doing it some \nother way for this native task, why can't the copy task also use this method?"}, {"text": "<chmod> exec's chmod on *nix, and does nothing on Windows.\n\n<copy> is implemented fully in Java, OTOH. You'd need to somehow post-process \nthe copied files to restore the same permission from the source files on to \nthe destination files. Patches welcomed ;-) --DD", "tags": [], "bug_id": 28320, "attachment_id": null, "count": 5, "id": 55592, "time": "2004-04-09T21:14:58Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-04-09T21:14:58Z", "is_private": false}, {"text": "How against JNI code is ant?\n\nThe reason I ask is I did some investigating on *reading* file permissions, \nand the only options are:\n\n1. use ls (which doesn't help much for spitting out ONLY file permissions)\n2. use JNI and call the system calls directly from java.\n3. write a program similar to chmod which reads file permissions, and use that \nprogram to read the permissions before copying and chmod'ing them.\n\nI appreciate the response with the perl script, but that isn't an option for \nme as I don't know or use perl.  The problem I'm trying to solve is that I'm \ntrying to use ant to build executables (from C++ code), which it is able to do \njust fine (I'm using ant-contrib).  However, when copying the executable to \nthe output directory, the file loses its executable permission.\n\nThe benefits of using JNI would be greater than just being able to read file \npermissions, you would also be able to set file permissions without having to \nexecute another program (i.e. change the chmod task).  You could also easily \nport a JNI version to non-unix filesystems (NTFS comes to mind).\n\nThe only drawback, of course, is that to build file permission support, you \nneed to have a c-compiler to build the native part of the class.  In my case, \nI have no problem with this.  However, other people may have issues with using \na C-compiled library with ant.  In reality, it is no different than using \nchmod, since you are in effect using a program built in c to do the dirty work \nthat Java does not support.  The build script for ant could also be modified \nto optionally use the old method for chmod in case people are very averse to \nbuilding the JNI interface.\n\nAnyways, I made my case, if the ant developers think this is a BAD idea, then \nI will just not contribute the work that I will inevitably do, as I still need \nto solve the problem, and ant is just way too good to not use for this minor \nissue :)", "tags": [], "bug_id": 28320, "is_private": false, "count": 6, "id": 55668, "time": "2004-04-12T21:01:48Z", "creator": "schveiguy@yahoo.com", "creation_time": "2004-04-12T21:01:48Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "ddevienne@lgc.com", "attachment_id": null, "is_private": false, "id": 55669, "time": "2004-04-12T21:12:01Z", "bug_id": 28320, "creation_time": "2004-04-12T21:12:01Z", "text": "It's unlikely Ant will accept C-code Steven, and a dependence on a JNI native \nlib... But the guys Ant would be happy (I think ;-) to add some hook (like a \nprotected setPermission(File src, File dst) method in Copy.java) which would \nallow you to extend <copy> in your own AntLib, which could depend on JNI code.\n\nIf you make your code OpenSource, others would be able to contribute ports of \nthe C code to the many platforms Ant is used on. This project could also act as \na small CppTasks demo project, to compile the C-code ;-) --DD\n\n"}, {"count": 8, "text": "If you know what files you need to be executable (like **/*.sh or bin/) you can always do it manually with <chmod>. A perl or some native script would be simple too and [almost] all Unixes have perl already installed.", "bug_id": 28320, "is_private": false, "id": 55674, "time": "2004-04-12T21:41:40Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-04-12T21:41:40Z", "tags": [], "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 28320, "attachment_id": null, "id": 55676, "time": "2004-04-12T21:47:24Z", "creator": "stevel@apache.org", "creation_time": "2004-04-12T21:47:24Z", "is_private": false, "text": "A native code impl would probably find its home in the ant-contrib project on\nsforge, presumably with a task <cp> that does permission setting. \n\nI dont know about DD's idea of putting a special permission preserving back door\nin everywhere, as <copy> is only one of many places people would ask; zip, tar &\nlots of others could add it. But then the result would be that build files that\nworked to build a redistributable on unix would work wrongly on windows, or\nnetware, or VMS.\n\nNTFS file permissions are so different from Unix land that I never want to go\nnear them. And that is me speaking from experiene :)\n\nComing back to the specific build file problem, is a chmod after copy so hard? \n\n(NB, one fix that would be strongly acceptable, a patch to java1.5 :)\n\n"}, {"count": 10, "tags": [], "bug_id": 28320, "attachment_id": null, "id": 55682, "time": "2004-04-12T22:16:50Z", "creator": "schveiguy@yahoo.com", "creation_time": "2004-04-12T22:16:50Z", "is_private": false, "text": "I understand the unwillingness to accept native code as a part of Ant, \nespecially since there really isn't an ant-proper way to build shared \nlibraries yet.  I also agree that a patch to java 1.5 (very unlikely) would be \nthe best answer.\n\nI must disagree on your interpretation in that building with file-permission \ncorrect copy would work \"wrongly\" on other platforms.  It currently \nworks \"wrongly\" on ALL platforms, as the operating system/environment decides \nthe permissions of the new file, allowing differences in operating system \nenvironments to affect the build process.  In the case of the current release \nof Ant, it is by your standards broken since the chmod task is not implemented \non all platforms, making any build which uses chmod build \"wrongly\" on non-\nunix platforms.  This new feature would open the door to an actual correct \nsolution, which is consitant across all platforms.\n\nI'm more inclined not to use chmod as I need to build my projects on both \nLinux and Windows (hence the attractive nature of Ant).  In addition, a \npermission-preserving copy seems like a much more natural solution than having \nto use chmod after each copy.\n\nFor now, I'll see if ant-contrib will accept the library, and some task I \ncreate, as part of its build, since it really is the only ant-like project \nthat could build such a library anyways :)"}, {"count": 11, "tags": [], "bug_id": 28320, "is_private": false, "text": "We have mis-explained <chmod>. \n\n<chmod> is a noop on Windows. So you put it in your code to set the exe\npermissions. On unix, after the task is invoked, the target files are executable\nbecause the permissions were set. On windows, after the task is invoked, the\ntarget files are executable because there was no need to set the permissions.\n\nTo repeat: use chmod after your copy, it has the desired outcome on all platforms.\n\nAlso, when archiving stuff up, use <tarfileset> to set the permissions on a tar\nfile. It will do this regardless of the platform you are running on. \n\n", "id": 55697, "time": "2004-04-13T11:23:48Z", "creator": "stevel@apache.org", "creation_time": "2004-04-13T11:23:48Z", "attachment_id": null}, {"count": 12, "text": "I have completed my addition to ant which allows file permission preserving \nwhile copying.\n\nThe way I did this was to extend the FileUtils class, overriding the copyFile \nmethod.  Then I extended Copy to a new task which used the new FileUtils class \nto do the copying.  So far, the library I wrote will (eventually) work on both \nPosix and NTFS filesystems, but I haven't yet tested it on NTFS.\n\nI ran into one snag, which I hope can be fixed.  Copy keeps the FileUtils \nobject that it uses as a private member, so I had to modify ant's Copy.java \nfile to change the permission of the fileUtils member to protected.  Any way \nthis update could be made permanent?\n\nAnother thought on this is that the copyFile method in FileUtils is used in \nmore than just the Copy task.  If there was a way to instruct all of Ant's \ncore tasks to use a *different* object other than Ant's FileUtils (i.e. my \nextended version), then I could keep the same task names, and all the copy \noperations will preserve permissions.", "bug_id": 28320, "attachment_id": null, "id": 56043, "time": "2004-04-19T20:27:00Z", "creator": "schveiguy@yahoo.com", "creation_time": "2004-04-19T20:27:00Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "id": 56074, "time": "2004-04-20T09:07:43Z", "bug_id": 28320, "creation_time": "2004-04-20T09:07:43Z", "is_private": false, "text": "1. yes, we could unprotect the access.\n\n2. But you point to a better way. The FileUtils() stuff was meant to be\nexensible, which is why the methods are not static. Instead everyone has to go \nnew FileUtils.doSomething();\n\nSo, we could provide a means to name the factory object used to create the\nfileutils instance, and from then on everyone who asks for one, gets the new\none. That would be very slick. It would give you what you want with minimal\nchanges to the rest of ant. "}, {"count": 14, "tags": [], "creator": "schveiguy@yahoo.com", "attachment_id": null, "id": 56102, "time": "2004-04-20T14:19:06Z", "bug_id": 28320, "creation_time": "2004-04-20T14:19:06Z", "is_private": false, "text": "That sounds like a great solution.\n\nI will wait to contribute my stuff to the ant-contrib project until this has \nbeen implemented, as my current fix requires a patch to ant.  If you need \nsomeone to do it, I'll try my best, but I may need help on the design.  I have \nsort of learned Java only when necessary :)"}, {"count": 15, "tags": [], "creator": "schveiguy@yahoo.com", "attachment_id": null, "id": 59310, "time": "2004-06-16T14:55:40Z", "bug_id": 28320, "creation_time": "2004-06-16T14:55:40Z", "is_private": false, "text": "Digging this back up again.\n\nJust to let you know, I have completed a library which does file permissions \non both filesystems with Posix-based permissions and NTFS.\n\nI have contributed this to the jst (Java System Toolkit) library, which is \nmaintained on sourceforge (jst.sourceforge.net).  Interestigly enough, there \nwas NO build system in place on that project, which I fixed by creating an ant \nbuild file, which uses cpptasks from ant-contrib to build the native libraries.\n\nI now await the fix for the FileUtils to be overridable.  Any status on this?  \nIs there something I can help with?\n\nI noticed some other annoying things on ant that could be fixed by permission \ngetting/setting.  untar doesn't set the file permissions up properly (which \ncould be fixed by the new jst library).  Also, tar itself relies on the ant \narguments to set permissions, very annoying."}, {"count": 16, "text": "Unfortunately we've changed FileUtils to statics by now and the original\nfactory approach went away.\n\nThat would leave us with adding hooks to tasks that you then needed to extend and\noverride.\n", "bug_id": 28320, "attachment_id": null, "id": 72630, "time": "2005-03-17T17:48:42Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-17T17:48:42Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "bug_id": 28320, "attachment_id": null, "text": "(In reply to comment #16)\n> Unfortunately we've changed FileUtils to statics by now and the original\n> factory approach went away.\n> \n> That would leave us with adding hooks to tasks that you then needed to extend and\n> override.\n> \n\nThe shared static FileUtils is always fetched via the getFileUtils() method on\nthe FileUtils class. If wanted, this shared instance could be a different one,\nper platform. the getFileUtils / FileUtils can be adapted to get the primary\ninstance via a factory method. (The old newFileUtils() wasn't a configurable\nfactory either.) Just different FileUtils per Task cannot be made via\ngetFileUtils(), another for the entire build, depending on OS would be feasible\nthough.", "id": 72642, "time": "2005-03-17T19:20:33Z", "creator": "jkf@apache.org", "creation_time": "2005-03-17T19:20:33Z", "is_private": false}, {"count": 18, "tags": [], "creator": "jkf@apache.org", "attachment_id": null, "id": 72643, "time": "2005-03-17T19:30:23Z", "bug_id": 28320, "creation_time": "2005-03-17T19:30:23Z", "is_private": false, "text": "The following methods are static and are good newFileUtils(deprecated,\nsuperseded by getFileUtils) / getFileUtils\n\nThe following methods do not really do much harm:\n\nclose(*)\ndelete(File)\nreadFully() <-- what is this one doing in FileUtils anyway?\n\n\nThe following methods are \"bad\" to be static, because platform specific\nimplementations should have the possibility to use different implementations:\nisAbsolutePath/isContextRelativePath"}, {"count": 19, "text": "Hi guys,\n\nEven if we can't preserve full unix permissions, It would still be useful to be \nable to preserve just the read-only status of files copied by the <copy> task.\n\nJava can do this much, and it's something my project found very handy (I did a \nquick change to ant - FileUtils and Copy are all that's changed).  We use an \nant script (exec'ed by an eclipse external task) to synchronise each desktop \ndevelopment area with a source baseline, and by preserving the read-only status \non the copied files we can hamper accidental changes to files which haven't \nbeen explicitly write-abled.  The developers like it.\n\nIs this worth adding to the standard build?   It's a simple change, and I'm \nsure there are people who'd find it useful.  \n\nTa.\n\n", "bug_id": 28320, "attachment_id": null, "id": 103803, "time": "2007-05-30T00:43:46Z", "creator": "Matthew.D.Wilson@pobox.com", "creation_time": "2007-05-30T00:43:46Z", "tags": [], "is_private": false}, {"count": 20, "tags": [], "bug_id": 28320, "attachment_id": null, "is_private": false, "id": 146691, "time": "2011-05-27T21:40:39Z", "creator": "igor@topright.com", "creation_time": "2011-05-27T21:40:39Z", "text": "The following note is completely bogus:\nUnix Note: File permissions are not retained when files are copied; they end up with the default UMASK permissions instead. This is caused by the lack of any means to query or set file permissions in the current Java runtimes. If you need a permission-preserving copy function, use <exec executable=\"cp\" ... > instead. \n\nAnt is the application here, not the build script.  Java never claimed to be an OS. But there's nothing that keeps Ant from knowing what OS it's running on and if it's Unix, use a system call to do the OS appropriate copy.  Indefensibly bogus."}, {"count": 21, "tags": [], "bug_id": 28320, "attachment_id": null, "is_private": false, "id": 146780, "time": "2011-05-31T20:13:06Z", "creator": "jglick@apache.org", "creation_time": "2011-05-31T20:13:06Z", "text": "Note: Java 6 supports setting general r/w/x permissions on a file. Java 7 supports access to a broad range of platform-specific permissions, and also has Files.copy(..., ..., COPY_ATTRIBUTES)."}]
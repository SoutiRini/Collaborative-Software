[{"count": 0, "tags": [], "creator": "stanleyl@plumtree.com", "text": "- invoke the <ant> task from within an ant script, calling some other ant \nscript that in turn invokes <subant>\n- <subant> will in turn successfully call into its target ant script, but the \nbasedir will be set incorrectly\n- so in this final ant script, any attempts to access files with relative paths \nwill fail\n\n\nExample:\n\nWe have files:\n\n/opt/workspace/file_a.xml\n/opt/workspace/file_b.xml\n/opt/workspace/subdir/file_c.xml\n/opt/workspace/subdir/file_d.xml\n\nfile_a.xml says:\n<target\tname=\"run\">\n   <ant antfile=\"file_b.xml\" dir=\"/opt/workspace\" target=\"run\" \ninheritAll=\"false\" />\n</target>\n\nfile_b.xml says:\n<target\tname=\"run\">\n   <subant antfile=\"file_c.xml\" inheritall=\"false\" target=\"run\">\n      <buildpathelement location=\"subdir\"/>\n   </subant>\n</target>\n\nfile_c.xml says:\n<target\tname=\"run\">\n   <copy file=\"./file_d.xml\" todir=\"./\" />\n</target>\n\n----\n\nIf you run this, there will be a failure to find file_d.xml, with the \ncomplaint: \"/opt/workspace/subdir/file_d.xml not found\"\n\nI have tried to overcome this with various permutations toggling \"inheritall\" \non and off and trying to force values on \"basedir\", but in the end, it is a \nfundamental problem that \"basedir\" simply is set incorrectly by ant and cannot \nbe overridden successfully.", "id": 61771, "time": "2004-08-10T19:09:17Z", "bug_id": 30569, "creation_time": "2004-08-10T19:09:17Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "The workaround i have found for this is to use <subant> instead of <ant> ( it is \na superset of the functionality ).\n\nHowerver:\n\nAnother scenario which produces the same problem is as follows:\n1. script calls subant on a set of directories using the genericantfile option.\n2. the generic ant file in turn calls subant on a set of directories ( each with \ntheir own ant file ).  The basedir is incorrectly at this point.\n\nThe following scenario does not produce the problem:\n1. script calls subant on a set of directories using the genericantfile option.\n2. the generic ant file in turn calls ant on a build file. The basedir is \ncorrectly set at this point.\n\n", "is_private": false, "id": 62238, "creator": "graham_barr@yahoo.co.uk", "time": "2004-08-20T14:52:24Z", "bug_id": 30569, "creation_time": "2004-08-20T14:52:24Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Created attachment 14894\nTestcase for the Bug\n\nToday I'm facing the same problem, described here.\n\nWhen \"antcall\" calls a target that contains \"subant\" the basedir of alle\ntargets called by subant are wrong.\nI could not find a workaround.\n\nSince I already built a a small testcase, I will attach it: \n\nTo reproduce, please create following folder structure (see attachment)\n\nP1\\build.xml\nP2\\build.xml\nmaster\\build.xml\nhelper\\helper.xml\n\n\nhelper.xml is a small file, containing our subant-task, it needs a property\n\"depend\" to be set: \n\n----------------\n<?xml version=\"1.0\"?>\n\n<project name=\"helper\" default=\"dependencies\">\n\t<target name=\"dependencies\">\n\t\t<echo message=\"subproject basedir=${basedir}\" />\n\t\t<subant antfile=\"build.xml\" target=\"message\" inheritAll=\"false\"\ninheritRefs=\"false\">\n\t\t\t<dirset refid=\"depend\" />\n\t\t</subant>\n\t</target>\n</project>\n--------------------\n\nfiles P1\\build.xml and P2\\build.xml just echo their basedir:\n\n--------------------\n<?xml version=\"1.0\"?>\n\n<project name=\"p1\" default=\"message\">\n\t<target name=\"message\">\n\t\t<echo message=\"file=${ant.file}\" />\t\t\n\t\t<echo message=\"mybasedir=${basedir}\" /> \t\n\t</target>\n</project>\n--------------------\n\n\nOur master build-file calls a target from helper.xml via antcall.\nIn target \"run1\" it explicitly sets the dir-property, while in \"run2\" we just\nleave it open, so helper.xml will set \nits own basedir.\n\n-----------------\n<?xml version=\"1.0\"?>\n\n<project name=\"master\" default=\"run\">\n\t<property name=\"project.name\" Value=\"${ant.project.name}\" />\n\n\t<dirset id=\"depend\" dir=\"..\" includes=\".\" >\n\t\t<include name=\"p1\" />\n\t\t<include name=\"p2\" />\t\t\n\t</dirset>\n\t\n\t<target name=\"run1\"> \n\t\t<ant antfile=\"../helper/helper.xml\" target=\"dependencies\" \ninheritrefs=\"no\" inheritall=\"no\" dir=\"${basedir}\">\n\t\t\t<reference refid=\"depend\" />\n\t\t</ant>\n\t</target>\t\n\n\t<target name=\"run2\"> \n\t\t<ant antfile=\"../helper/helper.xml\" target=\"dependencies\" \ninheritrefs=\"no\" inheritall=\"no\">\n\t\t\t<reference refid=\"depend\" />\n\t\t</ant>\n\t</target>\t\n</project>\n---------------------\n\n\n\nThe output of \"run1\" is the following, you can see, that P1/build.xml and\nP2/build.xml don't have their own basedir, but all work\nin the dir of the master-script:\n\n----------------\nC:\\temp\\master>ant run1\nBuildfile: build.xml\n\nrun:\n\ndependencies:\n     [echo] subproject basedir=C:\\$user\\temp\\ant\\master\n\nmessage:\n     [echo] file=C:\\$user\\temp\\ant\\p1\\build.xml\n     [echo] mybasedir=C:\\$user\\temp\\ant\\master\n\nmessage:\n     [echo] file=C:\\$user\\temp\\ant\\p2\\build.xml\n     [echo] mybasedir=C:\\$user\\temp\\ant\\master\n\n------------------------\n\n\nFor \"run2\" you get the following output.\nNote that the subproject now works in its own directory (helper), while the\nprojects called by subant work in \ntheir own directory (which is the supposed behaviour)\n\n-------------------------\nC:\\temp\\master>ant run2\nBuildfile: build.xml\n\nrun2:\n\ndependencies:\n     [echo] subproject basedir=C:\\$user\\temp\\ant\\helper\n\nmessage:\n     [echo] file=C:\\$user\\temp\\ant\\p1\\build.xml\n     [echo] mybasedir=C:\\$user\\temp\\ant\\p1\n\nmessage:\n     [echo] file=C:\\$user\\temp\\ant\\p2\\build.xml\n     [echo] mybasedir=C:\\$user\\temp\\ant\\p2\n-------------------------", "is_private": false, "id": 74306, "creator": "StefanHansel@web.de", "time": "2005-05-02T10:09:23Z", "bug_id": 30569, "creation_time": "2005-05-02T10:09:23Z", "attachment_id": 14894}, {"count": 3, "tags": [], "bug_id": 30569, "attachment_id": null, "is_private": false, "id": 74332, "time": "2005-05-02T21:35:13Z", "creator": "jglick@apache.org", "creation_time": "2005-05-02T21:35:13Z", "text": "Possible cause for problem mentioned in\n\nhttp://www.netbeans.org/issues/show_bug.cgi?id=45881\n\n(found a workaround). TBD."}, {"count": 4, "tags": [], "text": "I guess if originally reported against 1.6.2, version should stay there (meaning\nstill applicable to 1.6.3) - right?", "is_private": false, "bug_id": 30569, "id": 74333, "time": "2005-05-02T21:37:38Z", "creator": "jglick@apache.org", "creation_time": "2005-05-02T21:37:38Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 30569, "attachment_id": 14913, "is_private": false, "id": 74341, "time": "2005-05-02T23:46:52Z", "creator": "StefanHansel@web.de", "creation_time": "2005-05-02T23:46:52Z", "text": "Created attachment 14913\nAdded workaround to TestCase\n\nThe workaround you found, doesn't work for me (at least when adapted 1:1 and\nusing run1).\n\nNevertheless it brought a good idea, so I got my example to work with exactly\nthe basedirs I want. \nThe only drawback is, that the project-name has to equal the foldername of the\nbuildfile.\n\nAdded following to P1/build.xml:\n-------------------------\n\t<target name=\"pre-message\">\n\t   <ant target=\"message\" dir=\"..\\${ant.project.name}\" />\n\t</target>\n---------------------------\n\nWhen subant in helper/helper.xml calls \"pre-message\" now, with that extra\nindirection I get the basedirs I want to have: \n1) helper.xml runs in the basedir of the caller\n2) all targets called by subant run in their own project basedir, thus enabling\na clean dependency-run:\n\n--------\nC:\\temp\\master>ant run1\nBuildfile: build.xml\n\nrun1:\n\ndependencies:\n     [echo] subproject basedir=C:\\temp\\master\n\npre-message:\n\nmessage:\n     [echo] file=C:\\temp\\p1\\build.xml\n     [echo] mybasedir=C:\\temp\\p1\n\npre-message:\n\nmessage:\n     [echo] file=C:\\temp\\p2\\build.xml\n     [echo] mybasedir=C:\\temp\\p2\n--------\n\n\nThe solution is a bit rubbish though, cause all build-files have to be at the\nsame hierarchy level (or pre-message has to know exactly with which wrong\nbasedir it is called ;-) ). \nAt least p1/build.xml and p2/build.xml contain exactly the same code (apart\nfrom the project-name), thus enabling me to <import> the targets from another\nfile, like in our original scripts.\n\nThanks for the good idea :-D"}, {"count": 6, "tags": [], "bug_id": 30569, "is_private": false, "text": "Created attachment 15681\n1.6.5 SubAnt.execute() Fix\n\nFix is the addition of the following at line 199 in the 1.6.5 version of\nexecute().\n\n   directory = file.getAbsoluteFile().getParentFile();", "id": 77336, "time": "2005-07-15T15:48:33Z", "creator": "mbm@ptc.com", "creation_time": "2005-07-15T15:48:33Z", "attachment_id": 15681}, {"count": 7, "tags": [], "bug_id": 30569, "attachment_id": 15690, "is_private": false, "id": 77351, "time": "2005-07-16T06:09:47Z", "creator": "mbm@ptc.com", "creation_time": "2005-07-16T06:09:47Z", "text": "Created attachment 15690\n1.6.5 SubAnt.execute() Fix 2.\n\nSame line of code had to be added to line 203 also, for the case when a\nspecific build file is invoked from subant.\n\n   else\n      directory = file.getAbsoluteFile().getParentFile();"}, {"count": 8, "tags": [], "bug_id": 30569, "attachment_id": 15681, "is_private": false, "id": 77352, "time": "2005-07-16T06:11:29Z", "creator": "mbm@ptc.com", "creation_time": "2005-07-16T06:11:29Z", "text": "Comment on attachment 15681\n1.6.5 SubAnt.execute() Fix\n\nReplaced with more complete fix."}, {"count": 9, "tags": [], "bug_id": 30569, "attachment_id": null, "is_private": false, "id": 88906, "time": "2006-05-08T15:13:03Z", "creator": "asf@drewcox.com", "creation_time": "2006-05-08T15:13:03Z", "text": "I have a similar issue in 1.6.5 with regular <ant> calls nested 3 deep.  \n\nWith the folowing call, the basedir of the called build.xml remains set to the\ncalling build.xml:\n\n<ant antfile=\"../dep2/build.xml\" target=\"compile\" inheritrefs=\"false\"\ninheritall=\"false\"/>\n\nThe weird thing is that this does not occur when the nesting is only 2 deep?  I\nam not using <subant> to see this bug.  I am working around this by setting the\n\"dir\" attribute on the call:\n\n<ant antfile=\"../dep2/build.xml\" dir=\"../dep2\" target=\"compile\"\ninheritrefs=\"false\" inheritall=\"false\"/>\n\nHope this is of interest?"}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n> With the folowing call, the basedir of the called build.xml remains set to the\n> calling build.xml:\n> \n> <ant antfile=\"../dep2/build.xml\" target=\"compile\" inheritrefs=\"false\"\n> inheritall=\"false\"/>\n\nYes, this is potentially confusing but that's how it works. The 'dir' attr is\nnot set so it is inherited.\n\n> I am working around this by setting the\n> \"dir\" attribute on the call:\n> \n> <ant antfile=\"../dep2/build.xml\" dir=\"../dep2\" target=\"compile\"\n> inheritrefs=\"false\" inheritall=\"false\"/>\n\nThat is what you have to do in order to make <ant> behave the way you maybe\nexpected it to.", "is_private": false, "id": 88909, "creator": "jglick@apache.org", "time": "2006-05-08T15:26:42Z", "bug_id": 30569, "creation_time": "2006-05-08T15:26:42Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 30569, "text": "Thanks for the reply.  One thing to look into though: to me, the docs around\nthis (http://ant.apache.org/manual/CoreTasks/ant.html), specifically the table\nunder the \"Basedir of the new project\" heading imply the opposite behaviour - \n\ndir value ommitted + inheritAll:false = \"basedir attribute of the <project>\nelement of the new project\".  \n\nSee what you think?", "id": 88934, "time": "2006-05-08T22:57:20Z", "creator": "asf@drewcox.com", "creation_time": "2006-05-08T22:57:20Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": null, "creator": "gudlaugur.egilsson@gmail.com", "text": "There seems to be a difference as to how this manifests itself on windows versus\nlinux. I'm using Ivy 1.4 to compile a list of buildfiles which is called in this\nmanner:\n\n    <target name=\"buildlist\">\n        <ivy:buildlist reference=\"build-path\">\n            <fileset id=\"ide.buildlist.fileset\" dir=\".\" includes=\"**/ivybuild.xml\"/>\n        </ivy:buildlist>\n    </target>\n\n    <target name=\"build-all\" depends=\"buildlist\"\n            description=\"compile, jar and publish all projects in the right order\">\n        <subant target=\"build\" buildpathref=\"build-path\">\n            <property name=\"ROOT.DIR\" location=\".\"/>\n        </subant>\n    </target>\n\nThis works on Windows, but not on Linux (CentOS release 4.3). The basedir is\ncorrectly set on Windows, but not set when running the script on Linux.\n\nApplying SubAnt.execute() Fix 2 patch listed above fixed the issue for me.\nThanks for that.\n\nFor Ivy users building on an OS other than Windows, this bug is a blocker, i.e.\nSubAnt does not function at all as intended.", "id": 96401, "time": "2006-11-30T07:08:31Z", "bug_id": 30569, "creation_time": "2006-11-30T07:08:31Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 30569, "attachment_id": 19566, "is_private": false, "id": 99222, "time": "2007-02-10T08:50:47Z", "creator": "mbm@ptc.com", "creation_time": "2007-02-10T08:50:47Z", "text": "Created attachment 19566\n1.7.0 SubAnt.execute() Fix\n\nSame fix applied to the 1.7.0 version of SubAnt."}, {"count": 14, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 118725, "time": "2008-07-16T08:31:25Z", "bug_id": 30569, "creation_time": "2008-07-16T08:31:25Z", "tags": [], "text": "committed an AntUnit test in svn revision 677307"}, {"count": 15, "tags": [], "text": "I hope I'm not the only one who finds Ant's treatment of basedir very confusing!\n\nWhen you run a script using 'ant <target>' or 'ant -f <script> <target>', the basedir attribute on <project> is always considered (defaulting to \".\"), and is resolved relative to the directory containing the script. Thus, a given script always behaves the same way, regardless of who called it from where, modulo explicitly passed parameters. (As a special case, basedir is just ignored in <import>ed scripts.) This is how I want it to work in every single case I have ever encountered when using Ant: if I have a need for a generic script to perform some operations on a particular directory to be specified externally, I will pass in the path to that directory using -D or <property> as an explicit, descriptive property name. This is clearer, and anyway more flexible since I may want to pass several directories at once.\n\nUnfortunately, <ant> and <subant> do not use basedir consistently; they sometimes set the basedir to some other value, according to a complicated logic matrix. For compatibility reasons the existing behavior of these tasks cannot be changed. What I really want is a single attribute for both tasks - say, naturalbasedir=\"true\" - which invokes the scripts as they would be by the Ant launcher, regardless of the basedir of the current project, regardless of whether or not you are using the dir=\"...\" attribute to select the script, regardless of what inherit* options you are using, etc.\n\nSuch an attribute would be useful for solving thorny issues like\n\nhttp://www.netbeans.org/issues/show_bug.cgi?id=136694\n\nwhere Ant persists in using a weird basedir value and there is no easy way to tell it to stop.", "is_private": false, "id": 118727, "creator": "jglick@apache.org", "time": "2008-07-16T08:47:40Z", "bug_id": 30569, "creation_time": "2008-07-16T08:47:40Z", "attachment_id": null}, {"count": 16, "tags": [], "text": "Jesse, you are certainly not the only one who finds it confusing, same here (and I even was around when the first incarnations of that task appeared 8-)\n\nI agree that we can't change much for backwards compatibility reasons, except when we add a new attribute - but let's make that another enhancement request.\n\nsubant's behavior described here is certainly a side effect of <ant> turning the parent project's basedir into a special property for the project containing the subant task which in turn passes this on to the spawned process.  Fortunately this side effect is neither documented nor expected, so I don't feel bad for fixing it (I really don't think it will break any reasonable build process).\n\nMike, your patch doesn't really solve the problem.  It will always set the basedir for the executed project to the directory containing the build file, which is not what the task's documentation says - and not what is intended.  I do have build files that contain a basedir=\"..\" attribute, for example.\n", "is_private": false, "id": 118814, "creator": "bodewig@apache.org", "time": "2008-07-18T06:19:21Z", "bug_id": 30569, "creation_time": "2008-07-18T06:19:21Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 30569, "text": "Actually, adding the attribute Jesse talks about might be the best way to solve this.\n\nThe testcase I've committed is \n\n  <target name=\"testSubAntDoesntSetBasedir\">\n    <subant antfile=\"echo.xml\">\n      <dirset dir=\".\" includes=\"subant-helper\"/>\n    </subant>\n  </target>\n\n  <target name=\"XtestSubAntDoesntSetBasedirAfterAntWithDir\">\n    <ant antfile=\"${ant.file}\" dir=\"${basedir}\"\n         target=\"testSubAntDoesntSetBasedir\"/>\n  </target>\n\nand here the projects inside of subant-helper get their parent directory as basedir when invoked via XtestSubAntDoesntSetBasedirAfterAntWithDir\n\nThe <ant> task will bake basedir an \"inherited property\" for the project running subant.  subant leverages the ant task again when creating new properties and this one will pass on all inherited properties - including the basedir setting.\n\nIf we allowed the ant task to leave the spawned basedir alone, subant could set this attribute and things should work.\n\n", "id": 118818, "time": "2008-07-18T06:59:35Z", "creator": "bodewig@apache.org", "creation_time": "2008-07-18T06:59:35Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "text": "just keeping a record for myself.  svn revision 677914 introduces allowNativeBasedir to <ant> which already works for a single level of <ant> calls, but not if a level further up has already set the basedir as an inherited property.\n\nRight now I don't see any clean approach that doesn't involve changing the PropertyHelper API.", "is_private": false, "id": 118820, "creator": "bodewig@apache.org", "time": "2008-07-18T07:24:52Z", "bug_id": 30569, "creation_time": "2008-07-18T07:24:52Z", "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 30569, "attachment_id": null, "text": "(In reply to comment #18)\n> just keeping a record for myself.  svn revision 677914 introduces\n> allowNativeBasedir to <ant> which already works for a single level of <ant>\n> calls, but not if a level further up has already set the basedir as an\n> inherited property.\n\n[Just noticing this thread (I prefer such discussions on Ant-Dev that BugZilla).]\n\nFirst, I also never understood the logic of overriding the basedir of a build. This is utterly confusing to me, and I always avoided to force a build to use a different basedir.\n\nBut now I'm confused by allowNativeBasir, because I saw it used with 'dir' in your test of <ant>. Aren't these two attributes incompatible? If you specify the dir, you don't want allowNativeBasedir, no? --DD\n\nPS: If we had a clean slate for Ant, I'd argue against a basedir for projects, and have all relative files resolved against the parent URL (containing directory on a local file system) of the build file (just like HTML or XML, ignoring xml:base that is). If you wanted a different resolution, you'd use a property.", "id": 118933, "time": "2008-07-23T07:01:02Z", "creator": "ddevienne@gmail.com", "creation_time": "2008-07-23T07:01:02Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 30569, "attachment_id": null, "text": "I agree it would have been better had basedir never been invented.\n\nRegarding mutual exclusion of attributes - I think you could call\n\n<ant dir=\"subdir\" naturalbasedir=\"true\"/>\n\nmeaningfully; would mean the same as\n\nant -f subdir/build.xml\n\nHere dir=\"subdir\" is simply a shortcut for antfile=\"subdir/build.xml\".", "id": 118936, "time": "2008-07-23T07:47:01Z", "creator": "jglick@apache.org", "creation_time": "2008-07-23T07:47:01Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 30569, "text": "fixed with svn revision 690251", "id": 120200, "time": "2008-08-29T06:30:55Z", "creator": "bodewig@apache.org", "creation_time": "2008-08-29T06:30:55Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 58152, "attachment_id": null, "text": "Calling `apr_pool_create_ex` with no abort_fn or allocator (as is the case with the `apr_pool_create(**pool, *parent)` macro) begins to return the same pool over and over. In my current program, it happens on the third invocation each time, and then sporadically from then on. It happens the same whether I pass in a parent pool or not.\n\nObviously this creates a problem, as when I later attempt to destroy a pool that I *think* only contains a certain set of objects, I'm actually destroying many more.\n\nIn the output below, I'm logging all pool creations and destructions.\n\n```\nCreated pool: 0x7f98f282ea28\nCreated pool: 0x7f98f283b628\nCreated pool: 0x7f98f306bc28 < These are the same\nCreated pool: 0x7f98f306bc28 < These are the same\nCreated pool: 0x7f98f3803028\n...\nDestroying pool: 0x7f98f306bc28 < These should be freeing...\nDestroying pool: 0x7f98f306bc28 < independent sets of objects...\nDestroying pool: 0x7f98f3805028\nDestroying pool: 0x7f98f3803028\nDestroying pool: 0x7f98f306bc28 < but they are trampling each other...\nDestroying pool: 0x7f98f306bc28 < instead.\n```\n\nNote this is a single threaded application. Each call is made like this:\n\n```\napr_initialize();\n...\napr_pool_t* native_pool = NULL;\napr_pool_create_ex(&native_pool, NULL, NULL, NULL);\n```\n\nIf I create a new allocator for each pool, then all is well.\n\nIs this expected behavior? I'm guessing `apr_pool_create` should always return a new pool.", "id": 184073, "time": "2015-07-19T22:16:57Z", "creator": "jared.breeden@gmail.com", "creation_time": "2015-07-19T22:16:57Z", "is_private": false}]
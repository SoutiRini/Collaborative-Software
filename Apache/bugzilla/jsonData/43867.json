[{"text": "After upgrading from 1.2.14 to 1.2.15 the following error show up during shutdown:\nlog4j:ERROR LogMananger.repositorySelector was null likely due to error in class\nreloading, using NOPLoggerRepository.\n\nNo errors at all with 1.2.14\n\nThis probably is related to bug 40212", "tags": [], "creator": "marius.scurtescu@gmail.com", "attachment_id": null, "count": 0, "id": 110559, "time": "2007-11-14T15:04:27Z", "bug_id": 43867, "creation_time": "2007-11-14T15:04:27Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 110565, "time": "2007-11-14T22:03:17Z", "creator": "carnold@apache.org", "creation_time": "2007-11-14T22:03:17Z", "text": "The error message isn't the bug, it is a symptom of something else.  It is a notification that somehow that \nclass invarients are being broken (likely by class reloading) and log4j is going to avoid throwing a NPE by \nsubstituting a minimal non-functional logger repository.  If this is happening at shutdown, then you have \nan annoying message but at least you didn't crash.  Not much log4j can do if a class loader is starting to \nmess with invariants other than to minimize the damage.  I'd expect that 1.2.14 would raise \nNullPointerException under the same conditions that 1.2.15 would output a warning, but doesn't suprise \nme that things are a little inconsistent.  If the Tomcat community can either fix the classloader or give us \nspecific instructions how to avoid their issue, we could have the problem go away, but there isn't much \nlog4j can do to avoid the issue. "}, {"count": 2, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 110566, "time": "2007-11-14T22:25:19Z", "creator": "marius.scurtescu@gmail.com", "creation_time": "2007-11-14T22:25:19Z", "text": "Since 1.2.14 does not throw a NPE (or maybe it does, but it is never logged?), I\nassumed that 1.2.15 should not log an error.\n\nYou are saying that 1.2.15 outputs a warning, it actually outputs an error. A\nwarning would be much preferred."}, {"text": "Apparently, the Tomcat classloader sets all static fields to null when you\nremove a webapp. Bugs like this one here indicate that something is still alive\nafter the webapp has been removed (maybe a background thread).", "tags": [], "creator": "digulla@hepe.com", "attachment_id": null, "count": 3, "id": 110569, "time": "2007-11-15T02:27:55Z", "bug_id": 43867, "creation_time": "2007-11-15T02:27:55Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 43867, "text": "Apparently, the Tomcat classloader sets all static fields to null when you\nremove a webapp. Bugs like this one here indicate that something is still alive\nafter the webapp has been removed (maybe a background thread).", "id": 110570, "time": "2007-11-15T02:28:24Z", "creator": "digulla@hepe.com", "creation_time": "2007-11-15T02:28:24Z", "tags": [], "is_private": false}, {"text": "(In reply to comment #3)\n> Apparently, the Tomcat classloader sets all static fields to null when you\n> remove a webapp. Bugs like this one here indicate that something is still alive\n> after the webapp has been removed (maybe a background thread).\n\nYes, I am aware of that. I mentioned that this is related to bug 40212.\n\nThe issue is that with 1.2.14 there are not errors (no NPE) and with 1.2.15\nthere are errors. Same Tomcat and exact same webapps.\n\nSo problem seems to be with Log4j, introduced in 1.2.15.", "tags": [], "creator": "marius.scurtescu@gmail.com", "attachment_id": null, "count": 5, "id": 110609, "time": "2007-11-15T11:41:38Z", "bug_id": 43867, "creation_time": "2007-11-15T11:41:38Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 110904, "time": "2007-11-21T01:42:12Z", "creator": "digulla@hepe.com", "creation_time": "2007-11-21T01:42:12Z", "is_private": false, "text": "For me, your argument means that your webapp had a bug which wasn't triggered\nwith 1.2.14 but since we enhanced the code to report more erroneous states in\n1.2.15, it now shows up."}, {"count": 7, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 113140, "time": "2008-01-25T10:15:24Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-01-25T10:15:24Z", "text": "For me, the argument goes like this:\n\nLog4j has errors when a tomcat container is shutdown which contains log4j.  \n\nThese errors used to be silent - so no issue.\n\nNow, in 1.2.15, they are being logged - which is a problem for me as well.\n\nSuddenly, my customers are calling the help desk and asking what is this new error?\n\nLog4J needs to be able to be shutdown without logging (and preferably, without\nthrowing) errors like this.\n\nIf someone can tell me what in my webapp would cause this, I'm happy to fix it.\n But this appears to be a tomcat / log4j bug, from what I have learned so far."}, {"count": 8, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 113143, "time": "2008-01-25T11:49:25Z", "creator": "carnold@apache.org", "creation_time": "2008-01-25T11:49:25Z", "text": "The underlying problem has to be resolved in Tomcat.  If the Tomcat team would suggest modifications \nthat would make log4j immune to their classloader mucking with class invariants and leaving the class \nin limbo, it would likely be too drastic to consider to do this late in log4j 1.2's life.\n\nSo that leaves the question of what log4j should do in the circumstance that it is left in a corrupt state.  \nPrior to log4j 1.2.15, log4j would throw a NPE when an attempt was made to log after the Tomcat \nclass-loader did its damage.  In log4j 1.2.15, if that situation occurs log4j emits an error message \nwhich is definitely an improvement over a NPE.\n\nYou have observed that log4j 1.2.15 appears to be more likely to get in that state than log4j 1.2.14 \nsince you never saw the NPE with earlier versions, but now see the error message.  That likely is not \ndirectly related to the presence of the check and error message.  Removing the check for the null \nrepository selector may or may not change the frequency of log4j being in a corrupt state, but it would \ncause the NPE's to return when it got in that state.\n\nIt is unreasonable to expect log4j to perform perfectly when the class loader has put it in a state that is \nnot reachable by ordinary means.\n\nThe options are:\n\n1. Fix the tomcat class loader or provide instructions to avoid the scenario.  That would have to be \ndone by the Tomcat project.\n2.  Identify characteristics that make a library more likely to be corrupted.  If the Tomcat project could \nidentify that, we may (or may not) be able to adjust log4j to reduce the likelihood of getting in the \ncorrupt state.\n3. Remove the check for null repo which would cause NPE's to return.\n4. Change the error to a warning message.\n5. Change the error to a debug message (which would generally not be displayed). \n6. Change the message so it is not as frightening.\n\n"}, {"count": 9, "tags": [], "creator": "daniel.armbrust.list@gmail.com", "is_private": false, "text": "The strange part to me in the sequence of events is that I have never had an\nissue with the Null Pointers - I never saw one previously.  But I also haven't\nfollowed the other bug very closely which led to this change.\n\nUnless we can get some help from the tomcat folks to figure out how to prevent\nthis from happening - I would vote for option 5.\n\nIt doesn't seem unreasonable to me for someone to turn on full debug error\nlogging if they are trying to figure out where their log messages went if they\nend up getting switched over to the NOPLoggerRepository for some other reason.\n", "id": 113144, "time": "2008-01-25T12:01:33Z", "bug_id": 43867, "creation_time": "2008-01-25T12:01:33Z", "attachment_id": null}, {"text": "For the record, you can disable the Tomcat reference clearing code by setting\nthe following system property to false:\norg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES\n\nFor a properly written web app, this feature should not be required.", "tags": [], "creator": "markt@apache.org", "attachment_id": null, "count": 10, "id": 113147, "time": "2008-01-25T15:32:16Z", "bug_id": 43867, "creation_time": "2008-01-25T15:32:16Z", "is_private": false}, {"text": "Far more info here, from the Tomcat side:\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=41939", "tags": [], "creator": "daniel.armbrust.list@gmail.com", "is_private": false, "count": 11, "id": 113150, "time": "2008-01-25T15:49:27Z", "bug_id": 43867, "creation_time": "2008-01-25T15:49:27Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "cowwoc@bbs.darktech.org", "attachment_id": null, "text": "The webapps I personally wrote do not do any class reloading as far as I know. It could very well be that one of the other webapps I run on my server (or one of the frameworks they use) does so but that's totally outside of my control/scope.\n\nFrom an end-user point of view, this bug is a show-stopper for me. Having to manually kill Tomcat every single time is a major problem and for this reason I am downgrading to an older release of log4j. I humbly suggest you guys revisit this issue as soon as possible and resolve it better. Throwing an exception with an message that amounts to \"you did something wrong\" helps no one. Either provide us with a meaningful exception to track the problem back to the source or ensure log4j is more resilient, able to recover gracefully from such problems.", "id": 115785, "time": "2008-04-22T23:17:28Z", "bug_id": 43867, "creation_time": "2008-04-22T23:17:28Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 116222, "time": "2008-05-04T11:22:50Z", "creator": "digulla@hepe.com", "creation_time": "2008-05-04T11:22:50Z", "is_private": false, "text": "Re #12: As a rule of thumb, here are a few tips what you should look for:\n\n1. Threads which aren't completed when your webapp is stopped. I'm talking about threads you (or libraries which you use) start. Do you use a timer, quartz or something like that?\n\n2. Find out why the code which throws the error thinks it has to run after your webapp has been removed or reloaded."}, {"count": 14, "tags": [], "text": "From what I understand from the comments this is basically a Tomcat issue, and will not be circumvented in log4j 1.2?  Would it be reasonable to resolve with a WONTFIX then?", "attachment_id": null, "id": 118254, "creator": "thorbjoern@gmail.com", "time": "2008-07-03T13:40:25Z", "bug_id": 43867, "creation_time": "2008-07-03T13:40:25Z", "is_private": false}, {"text": "I can pretty much guarantee you that the Tomcat team will never make any changes to fix this issue. It is pretty much impossible getting them to do anything nowadays. In my experience 90% of valid bug reports filed get closed as WON'T FIX or INVALID by Remy. Other people have reported the same.", "tags": [], "creator": "cowwoc@bbs.darktech.org", "is_private": false, "count": 15, "id": 118272, "time": "2008-07-03T18:02:39Z", "bug_id": 43867, "creation_time": "2008-07-03T18:02:39Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 118281, "time": "2008-07-04T02:56:19Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-07-04T02:56:19Z", "text": "(In reply to comment #15)\n> I can pretty much guarantee you that the Tomcat team will never make any\n> changes to fix this issue. It is pretty much impossible getting them to do\n> anything nowadays. In my experience 90% of valid bug reports filed get closed\n> as WON'T FIX or INVALID by Remy. Other people have reported the same.\n\nInteresting.  Could you provide the link to this issue in the Tomcat Bugzilla, please?\n\n"}, {"count": 17, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 118284, "time": "2008-07-04T03:05:58Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-07-04T03:05:58Z", "is_private": false, "text": "It seems I might have been wrong in this instance. The only related bug I could find was https://issues.apache.org/bugzilla/show_bug.cgi?id=41939 but it is already marked as FIXED.\n\nPlease try opening a bug report with Tomcat if you feel there are any unresolved issues but please do not close this bug report (on the log4j end) until you get an initial reply from the Tomcat team."}, {"count": 18, "tags": [], "creator": "thorbjoern@gmail.com", "attachment_id": null, "text": "(In reply to comment #17)\n> It seems I might have been wrong in this instance. The only related bug I could\n> find was https://issues.apache.org/bugzilla/show_bug.cgi?id=41939 but it is\n> already marked as FIXED.\n> \n> Please try opening a bug report with Tomcat if you feel there are any\n> unresolved issues but please do not close this bug report (on the log4j end)\n> until you get an initial reply from the Tomcat team.\n\nThe original poster did not include a testcase, so it is impossible to determine now if the problem is still there.  \n\nUntil then I suggest this issue is put to NEEDINFO.\n\n", "id": 118285, "time": "2008-07-04T03:18:18Z", "bug_id": 43867, "creation_time": "2008-07-04T03:18:18Z", "is_private": false}, {"count": 19, "tags": [], "text": "I don't know what more info you possibly need.  This entire problem is well documented already.  See Comment #8.  Comment #11, and Comment #10 (from a Tomcat guy)\n\nThe quick summary is that log4j started logging more errors than it used to from 1.2.14 to 1.2.15.  \n\nNow, when it is deployed in a webapp in tomcat which is stopped, it logs ugly null pointer exceptions - as errors - which end up on the tomcat console.  \n\nThe real problem is caused by how tomcat does its shutdown process, which may or may not be fixed at present.  The referenced Tomcat bug seems to indicate that it now may be fixed, without the workaround presented in comment #10.\n\nBut to fix the log4j issue, and keep ugly errors from happening, what I think should happen is that Suggestion 5 from Comment #8 should be implemented in log4j.\n\n", "attachment_id": null, "id": 118335, "creator": "daniel.armbrust.list@gmail.com", "time": "2008-07-07T07:48:18Z", "bug_id": 43867, "creation_time": "2008-07-07T07:48:18Z", "is_private": false}, {"count": 20, "tags": [], "text": "If this is logged as DEBUG I am concerned users will see Tomcat hang without knowing what is going on. At least now you see some sort of error message. I haven't had the chance to try out this bug with recent Tomcat builds but I plan on doing so in the coming weeks.", "attachment_id": null, "id": 118337, "creator": "cowwoc@bbs.darktech.org", "time": "2008-07-07T09:39:52Z", "bug_id": 43867, "creation_time": "2008-07-07T09:39:52Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 118340, "time": "2008-07-07T09:57:51Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-07-07T09:57:51Z", "text": "When I saw the issue, it didn't result in any hang.  It simply caused ugly errors to end up on the tomcat console while the app and/or tomcat was shutting down.\n\n"}, {"count": 22, "tags": [], "text": "When running under Windows with Tomcat running as a service I routinely got hangs when I would invoke \"net stop tomcat6\" and the log4j message was the last error message printed to the logs. Furthermore, these problems only started once I upgraded my log4j version.\n\nJust to clarify, \"net stop tomcat6\" would fail regardless of how many times you'd try and \"net start tomcat6\" would complain Tomcat was already running.\n\nIf this issue has indeed been resolved then maybe the severity could be reduced from ERROR to WARN but I definitely would not consider it a DEBUG. The message is warning you about something that needs to be fixed, is it not?", "attachment_id": null, "id": 118341, "creator": "cowwoc@bbs.darktech.org", "time": "2008-07-07T10:02:24Z", "bug_id": 43867, "creation_time": "2008-07-07T10:02:24Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 118356, "time": "2008-07-07T11:11:35Z", "creator": "digulla@hepe.com", "creation_time": "2008-07-07T11:11:35Z", "text": "Guys, for the last time: This is neither a bug in log4j nor in Tomcat!\n\nIt's *always* *always* *always* *always* a bug in the deployed webapp.\n\nYeah, you didn't see it in 1.2.14 but that doesn't the bug wasn't there: You just didn't *see* it.\n\nThe root cause of the bug is that code of your webapp is executed *after* undeploy. The usual cause of the problem is a) a shutdown hook or b) a thread which your app starts and which isn't terminated during undeploy.\n\nThe usual culprits: Starting your own threads without terminating them on undeploy, using a timer framework like Quartz, ActiveMQ (which you can't stop cleanly after having started it), things like that.\n\nActivate the debug switched for Tomcat, use your IDE to connect and watch the threads. That should give you a very good idea where the bug comes from.\n\nSo IMHO, this is bug should be closed as INVALID."}, {"count": 24, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 118359, "time": "2008-07-07T13:12:14Z", "creator": "qualitychecker@free.fr", "creation_time": "2008-07-07T13:12:14Z", "is_private": false, "text": "\nIf of any help, look there : http://d.cr.free.fr/wswebconsulterfichiers.php?projet=demojava_log4j\n\nYou'll find a list of null references, overflow, dead code bugs for a large set of files from org.apache.log4j\n\nMay be the key of this bug is to be found there.\n\nGood luck."}, {"count": 25, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 118361, "time": "2008-07-07T13:49:53Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-07-07T13:49:53Z", "is_private": false, "text": "I'm sorry Aaron, but to borrow your pattern, I'm quite certain that this bug is *not* *not* *not* *not* a bug in the deployed webapp - or anything to do with users threads.\n\nThis is purely a problem between tomcat and log4j.  \n\nBy putting one of my apps into a debugger, I have concluded the following:\n\nThe error message in question\n\n\"log4j:ERROR LogMananger.repositorySelector was null likely due to error in class reloading, using NOPLoggerRepository.\" \n\nis printed by the Main thread in the JVM.  \n\nI know this because it happens when I have paused every other thread in the JVM via the debugger.  So, lets just throw out this mystery threading problem conclusion.\n\nFurthermore, this error message is printed within the class:\n\norg.apache.catalina.loader.WebappClassLoader.clearReferences() - between the lines of 1596 and 1640 (in tomcat version 5.5.25) as it is being executed by tomcats main thread during a tomcat shutdown.\n\nEven if this was a mystery threading problem (which is isn't) your answer isn't very helpful - in that case, the issue would be that the message being logged sucks - and it should be improved to at least give a stack trace, or a thread name, or something that could be used to actually track down the problem.\n"}, {"text": "(In reply to comment #24)\n> If of any help, look there :\n> http://d.cr.free.fr/wswebconsulterfichiers.php?projet=demojava_log4j\n> \n> You'll find a list of null references, overflow, dead code bugs for a large set\n> of files from org.apache.log4j\n\nCould you please provide an English version of these pages.  I do not understand French.\n\n\n> May be the key of this bug is to be found there.\n> \n> Good luck.\n\nLess luck might be needed if you gave a hint what we are to look for and what the error links mean.\n\nThanks for helping!\n\n", "tags": [], "creator": "thorbjoern@gmail.com", "is_private": false, "count": 26, "id": 118363, "time": "2008-07-07T14:17:23Z", "bug_id": 43867, "creation_time": "2008-07-07T14:17:23Z", "attachment_id": null}, {"count": 27, "tags": [], "text": "Since I'm well into this bug now, I figured I'd go a bit further.\n\nTo complicate matters even more, there is a third project involved in this problem - struts.\n\nThe class which is being \"mucked with\" by tomcat at the time the error happens is:\n\norg.apache.struts.validator.ValidatorForm\n\nThe field name is \"log\" - the type type of the field is \"org.apache.commons.logging.Log\"\n\nTomcat calls field.set(null, null); on this field.\n\nThis leads into java.lang.reflect.Field until the following line of code:\n\nreflectionFactory.newFieldAccessor(this, overrideFinalCheck);\n\nThe error then occurs somewhere down inside of the class \n\nsun.reflect.ReflectionFactory\n\n\nI have no idea what the ReflectionFactory class is trying to do when it triggers this error - I don't have the source for it right now.\n\nSo, if you are trying to reproduce this error, you will need to have some code  in your webapp which loads the struts ValidatorForm class.\n\n\n\n", "is_private": false, "id": 118364, "creator": "daniel.armbrust.list@gmail.com", "time": "2008-07-07T14:19:53Z", "bug_id": 43867, "creation_time": "2008-07-07T14:19:53Z", "attachment_id": null}, {"count": 28, "tags": [], "text": "(In reply to comment #25)\n\n> This is purely a problem between tomcat and log4j.  \n> \n> By putting one of my apps into a debugger, I have concluded the following:\n\nPlease create a minimal wep app which demonstrate this behaviour, and attach it to this issue.  This will allow us all to see what you see, plus the person who will write the patch (which might be you) can demonstrate quite clearly to the person who will review the patch that it fixes the issue.\n\nThis is with the latest Tomcat 6?", "attachment_id": null, "id": 118365, "creator": "thorbjoern@gmail.com", "time": "2008-07-07T14:26:55Z", "bug_id": 43867, "creation_time": "2008-07-07T14:26:55Z", "is_private": false}, {"text": "BTW: This issue might be triggered by a bug in a webapp, but there is certainly a severe log4j-specific bug at play too. I have a webapp which hasn't changed since 2005. When I upgraded log4j all of a sudden I noticed that Tomcat started hanging on shutdown. Log4j or Tomcat should not be hanging, even on so-called misbehaving webapps (and I'm not sure my webapp is even misbehaving!)", "tags": [], "creator": "cowwoc@bbs.darktech.org", "is_private": false, "count": 29, "id": 118366, "time": "2008-07-07T14:36:16Z", "bug_id": 43867, "creation_time": "2008-07-07T14:36:16Z", "attachment_id": null}, {"count": 30, "tags": [], "text": "Gili - I'm not seeing the hang myself - maybe it's related, maybe not.  Can you put your webapp in a debugger and see which thread is still running?\n\nUsually a tomcat instance that won't stop is caused by a non-daemon thread.\n\nIf your not set up for a debugger, try this: http://www.unixville.com/~moazam/stories/2004/05/18/debuggingHangsInTheJvm.html", "is_private": false, "id": 118367, "creator": "daniel.armbrust.list@gmail.com", "time": "2008-07-07T14:44:57Z", "bug_id": 43867, "creation_time": "2008-07-07T14:44:57Z", "attachment_id": null}, {"count": 31, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 118371, "time": "2008-07-07T15:45:40Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-07-07T15:45:40Z", "is_private": false, "text": "I'm using Tomcat 5.5.25.\n\nSo far, I haven't been able to create a simple webapp which demonstrated the problem.  There is some magic combination of tomcat, log4j, struts? (something else?) that triggers this.  \n\nI can't release my  code which always triggers this.  I'll keep poking at it, when I have free time - trying to figure out what is different between the simpla webapp I just created, and my other apps.  I would really like to know what the magic combination is that causes it to happen.\n\nIf someone else can come up with an example app, that would be great. "}, {"count": 32, "tags": [], "text": "(In reply to comment #29)\n> BTW: This issue might be triggered by a bug in a webapp, but there is certainly\n> a severe log4j-specific bug at play too. I have a webapp which hasn't changed\n> since 2005. When I upgraded log4j all of a sudden I noticed that Tomcat started\n> hanging on shutdown. Log4j or Tomcat should not be hanging, even on so-called\n> misbehaving webapps (and I'm not sure my webapp is even misbehaving!)\n\nPlease reduce your web app as much as you can while preserving the faulty behaviour and attach it to this issue for the same reasons as given in comment #28.\n\nThanks.", "is_private": false, "id": 118372, "creator": "thorbjoern@gmail.com", "time": "2008-07-07T16:02:53Z", "bug_id": 43867, "creation_time": "2008-07-07T16:02:53Z", "attachment_id": null}, {"count": 33, "tags": [], "text": "Re comment 25:\n\nDan,\n\nCode from deployed webapps is never executed in the main thread. Tomcat creates worker threads for that. So what your app is doing is the second thing I mentioned in comment 23: It's adding code to some hook (VM shutdown hooks, for example).\n\norg.apache.catalina.loader.WebappClassLoader.clearReferences() triggers the bug by overwriting all static variables in your webapp (classes and JARs) with null. It's not the place where you made the mistake; it's just the place where you notice you made it.\n\nAll your other questions have been answered before, too, like the reason why log4j can't give you a useful stack trace. To be able to do that, log4j would need to intercept all writes to static variables and remember the stack traces when they happen. I know of no VM which allows that in an efficient manner.", "is_private": false, "id": 118382, "creator": "digulla@hepe.com", "time": "2008-07-08T02:42:20Z", "bug_id": 43867, "creation_time": "2008-07-08T02:42:20Z", "attachment_id": null}, {"count": 34, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 118393, "time": "2008-07-08T09:21:44Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-07-08T09:21:44Z", "text": "(In reply to comment #33)\n> Re comment 25:\n> \n> Dan,\n> \n> Code from deployed webapps is never executed in the main thread. Tomcat creates\n> worker threads for that. So what your app is doing is the second thing I\n> mentioned in comment 23: It's adding code to some hook (VM shutdown hooks, for\n> example).\n> \n\nAaron, \n\nI'm sorry, but unless you can show otherwise in a debugger, you are just making incorrect assumptions.  My debugger shows me that the Tomcat shutdown process is not spawned to other threads - it is in fact, done by the main thread.  That is where the clearReferences() call is made. \n\nNow, I do agree, that the error itself is probably being printed from a finalizer or a shutdown hook which is triggered by the clearReferences call - and since that is a new and short lived thread, I don't think my debugger is catching it.\n\nThe reason that this hits and confuses so many web developers is because I don't think they made the mistake - at least not directly.  My suspicion now is strongly  pointing at common 3rd party code - likely struts, or one of its dependencies that many people use.  But so far, I can't find any code my included libraries that are setting up shutdown hooks.\n\nAlso, I still don't understand why log4j can't print a stack trace with this error - we don't want the stack trace of the thread that set the variable to null, we want the stack trace of the the thread that tried to use the null variable.  Why wouldn't that be available?  Because it seems that the only way to track down and close this issue is to find the class with the finalizer.  And unless I can figure out how to make my debugger pause newly spawned threads, I don't know how else to find it.  I thought I was on to something with the struts ValidationForm class - since that is the class that triggers the problem in my webapp - but in looking through that code, I can't find anything suspicious.\n"}, {"count": 35, "tags": [], "creator": "digulla@hepe.com", "is_private": false, "text": "(In reply to comment #34)\n\nPlease go through your own argument once more as someone who isn't stuck in it. Try to find answers to these questions:\n\n1. Why is a logger method being called in clearReferences()? Tomcat doesn't use log4j, it uses java.util.Logging. So your webapp must somehow put code somewhere which Tomcat executes during shutdown.\n\n2. When log4j notices that its static variables have been cleared, what should it print? The current stack trace would give no hint who cleared the variable because this probably has happened a long time ago, probably by some other thread. If it would print the stack trace the moment the variable is being cleared, you would see that you're inside the Tomcat cleanup code because your webapp is being undeployed. No surprise here and no information either. IIRC, there is another reason why the stack trace doesn't help but I can't recall it. You'll see it immediately when you try to debug this.\n\nSo you must find out: a) why is a logger called and b) who registered this piece of code which is executed after your webapp is supposed to be long gone?\n\nAgain: In your case, there is no need for another thread. All this can happen in the main thread and there are more ways to log during app exit than the shutdown hooks. Just put a breakpoint in the place where log4j prints the error message and see who is trying to log.\n\nBut it's a bug in your webapp (and I'm counting all the JARs you include as \"your\" here :) and not in log4j.", "id": 118406, "time": "2008-07-09T00:13:43Z", "bug_id": 43867, "creation_time": "2008-07-09T00:13:43Z", "attachment_id": null}, {"count": 36, "attachment_id": null, "bug_id": 43867, "text": "> 2. When log4j notices that its static variables have been cleared, what should\n> it print? The current stack trace would give no hint who cleared the variable\n> because this probably has happened a long time ago, probably by some other\n> thread. \n\nActually, yes, this is exactly the stack trace I want.  I don't care what thread cleared the variable - I already know that - its the main thread.  I want to know whet thread is trying to use the now null variable.  It's not a thread I started (in my known code), its none of the running threads the moment before the error happens - so - its a newly spawned thread - most likely a finalizer thread from some third party library I'm using.  I would like to think that that stack trace would give me a good clue as to what the finalizer is attempting to do - so maybe I could trace it back to where it was actually registered.  At least it would tell me which library to look in.\n\n> So you must find out: a) why is a logger called and b) who registered this\n> piece of code which is executed after your webapp is supposed to be long gone?\n\nThat's what i've been trying to figure out the whole time.  But log4j is not being helpful at all in tracking it down, since it won't give me any info on the thread which is hitting the null variable and I have no clue which one of the 50 jar files in my system is responsible for registering that code.  If log4j is going to print an error message that is useless in actually tracking down the error, why even bother?  99.9% of the developers won't care anyway, since the system is shutting down.  So I think this message should either be improved - or set back to info, or some such level, where it won't show up.  \n\n>Just put a breakpoint in the place where log4j prints the error\n> message and see who is trying to log.\n\nDo you know where that is?  Because I don't, offhand.  \n\n> \n> But it's a bug in your webapp (and I'm counting all the JARs you include as\n> \"your\" here :) and not in log4j.\n> \n\nI agree with that - but its a bug I don't care about.  Yet - log4j is insisting that I should care about it.  But I don't.  Why isn't there a way for me to tell log4j that I don't care about this problem - stop printing unnecessary error messages like this?", "id": 118412, "time": "2008-07-09T09:37:54Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-07-09T09:37:54Z", "tags": [], "is_private": false}, {"count": 37, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 118420, "time": "2008-07-09T10:48:43Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-07-09T10:48:43Z", "is_private": false, "text": "(In reply to comment #36)\n\n> >Just put a breakpoint in the place where log4j prints the error\n> > message and see who is trying to log.\n> \n> Do you know where that is?  Because I don't, offhand.  \n\nThe source files are present in the distribution archive.\n\nIn Eclipse I add the log4j-1.2.15.jar file to the build path, and in the properties of the jar file I set the source archive as the \"Java Source Attachment\".\n\nI can then press Ctrl-Alt-T, select NOPLoggerRepository and press Return to go to the NOPLoggerRepository.class file but SEE the NOPLoggerRepository.java file in my editor.  I can then position the cursor over the \"NOPLoggerRepository\" in \"public class NOPLoggerRepository {\" and press Ctrl-Alt-G.  I am then presented with the locations where the NOPLoggerRepository class is referenced. \n\nThe method you are looking for is LogManager.getLoggerRepository, and the error message is logged in line 177.\n\n > that I should care about it.  But I don't.  Why isn't there a way for me to\n> tell log4j that I don't care about this problem - stop printing unnecessary\n> error messages like this?\n\nPerhaps you would like to raise this as an enhancement issue then? \n\n"}, {"count": 38, "tags": [], "bug_id": 43867, "text": "> Why isn't there a way for me to tell log4j that I don't care about\n> this problem - stop printing unnecessary error messages like this?\n\nBecause your webapp will cause havoc when you install it in a shared app server. Undeploying your webapp can kill the whole server.\n\nAlso, this is a common mistake which most people never realize. They notice that \"Tomcat is unstable after a while\" and things like that but only error messages like this one can point you at the source of the fault. I understand that it's a pain to track these down; in my case, I search for two solid days until I found a really horrible bug in my webapp that needed fixing.\n\nIf you have any ideas how to make them easier to figure out, I'm all for it. But don't disable them. That's like \"Oh, I left my loaded gun in the room of my little brother. Well, I guess he won't play with it\".", "id": 118422, "time": "2008-07-09T11:20:21Z", "creator": "digulla@hepe.com", "creation_time": "2008-07-09T11:20:21Z", "is_private": false, "attachment_id": null}, {"text": "Ok.  First - how to make this easier for others to find:\n\nBefore closing this bug, I suggest a change along the following lines.\n\nIn LogManager, line 177, the following line:\n\nLogLog.error(\"LogMananger.repositorySelector was null likely due to error in class reloading, using NOPLoggerRepository.\");\n\n\nCould be changed to something like this:\n\nLogLog.error(\"LogMananger.repositorySelector was null likely due to error in class reloading, using NOPLoggerRepository.\", new Exception(\"Stack of offending thread\").fillInStackTrace());\n\nWhich would be vastly more helpful if you insist on leaving this message in place.  However, read-on....\n\n\n\nOn to the real issue - and this is interesting - even more of our assumptions are wrong.  This has nothing to do with finalizer code.  And in fact, has nothing to do with any code that I had deployed in my webapp.  The problem happens purely within the Main thread, being executed by tomcat.\n\nIt happens because of a basic design issue between tomcat and log4j - and if you ask me the error is purely in tomcat.\n\nSo, previously, I had traced the main thread all the way down to \n\nreflectionFactory.newFieldAccessor(this, overrideFinalCheck);\n\nas Tomcat was setting things to null - then I couldn't follow any farther, due to a lack of source code.\n\nWorking backwards from log4j, here is the offending stack:\n\nLogManager.getLoggerRepository() line: 177\t\nLogManager.getLogger(String) line: 199\t\nLogger.getLogger(String) line: 105\t\nLog4JLogger.getLogger() line: 229\t\nLog4JLogger.<init>(String) line: 65\t\nGeneratedConstructorAccessor5.newInstance(Object[]) line: not available\t\nDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27\t\nConstructor<T>.newInstance(Object...) line: 513\t\nLogFactoryImpl.newInstance(String) line: 529\t\nLogFactoryImpl.getInstance(String) line: 235\t\nLogFactoryImpl.getInstance(Class) line: 209\t\nLogFactory.getLog(Class) line: 351\t\nValidatorForm.<clinit>() line: 99\t\nUnsafe.ensureClassInitialized(Class) line: not available [native method]\t\nUnsafeFieldAccessorFactory.newFieldAccessor(Field, boolean) line: 25\t\nReflectionFactory.newFieldAccessor(Field, boolean) line: 122\t\n\n\nThe only code here that isn't from log4j or sun is:\n\nValidatorForm.<clinit>() line: 99\n\nThat particular class is org.apache.struts.validator.ValidatorForm from struts.\n\nWhat is happening on line 99 is:\n\nprivate static Log log = LogFactory.getLog(ValidatorForm.class);\n\nWhich is certainly not unusual - I don't think struts has anything to do with causing the problem.  It's more of just luck - depending on the order that tomcat runs through the classes as it clears references.\n\nTomcat, in the desire to clear out the static fields within a class by using reflection, has unwittingly caused the class init code to be rerun due to the way that reflection works.  When it hits this code that tries to use the log factory, it doesn't know that it has already broken the logfactory by setting fields within the logfactory to null.\n\nSo, the logfactory prints the error.\n\nShort of making tomcat stop clearing references - I don't think there is any way for me as a web developer to prevent this error.\n\nTherefore, with that argument, I think that we need a way to make log4j not log this as an error.  I think this particular message needs to go back to being a info or a debug level message.  \n\nAnd I'm going to re-raise this issue on the tomcat bug tracker, but I doubt that they will make any changes, since there is really no way for them to know what a safe order is for clearing references - and they still insist on clearing references by default.", "tags": [], "creator": "daniel.armbrust.list@gmail.com", "is_private": false, "count": 39, "id": 118424, "time": "2008-07-09T13:30:27Z", "bug_id": 43867, "creation_time": "2008-07-09T13:30:27Z", "attachment_id": null}, {"count": 40, "tags": [], "text": "Dan,\n\nGreat detective work! Can you please clarify some details further before we discuss what needs to be done? Specifically, I am wondering about this paragraph:\n\n\"Tomcat, in the desire to clear out the static fields within a class by using\nreflection, has unwittingly caused the class init code to be rerun due to the\nway that reflection works.\"\n\nWhat does \"clearing out static fields\" amount to? Setting them or null or something else? Can you please give a short verbal explanation of how the problem occurs (i.e. a scenario involves 1-2 classes)?", "attachment_id": null, "id": 118425, "creator": "cowwoc@bbs.darktech.org", "time": "2008-07-09T13:39:58Z", "bug_id": 43867, "creation_time": "2008-07-09T13:39:58Z", "is_private": false}, {"count": 41, "tags": [], "text": "(In reply to comment #40)\n\n> \n> What does \"clearing out static fields\" amount to? Setting them or null or\n> something else? Can you please give a short verbal explanation of how the\n> problem occurs (i.e. a scenario involves 1-2 classes)?\n> \n\nGili, take a look at this code:\n\nhttp://svn.apache.org/repos/asf/tomcat/container/tc5.5.x/catalina/src/share/org/apache/catalina/loader/WebappClassLoader.java\n\nDo a search for \"if (ENABLE_CLEAR_REFERENCES) {\"\n\n\nThat 'if' block is what tomcat is doing as it tries to clear references, and inadvertently causes this error.\n\n", "is_private": false, "id": 118429, "creator": "daniel.armbrust.list@gmail.com", "time": "2008-07-09T14:25:02Z", "bug_id": 43867, "creation_time": "2008-07-09T14:25:02Z", "attachment_id": null}, {"count": 42, "attachment_id": null, "bug_id": 43867, "text": "I have now seen this message in something I wrote a while back.  I will see if I can create a test case when I have better time.  This will also allow us to prove who the sinner is.", "id": 118669, "time": "2008-07-15T04:27:40Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-07-15T04:27:40Z", "tags": [], "is_private": false}, {"text": "(In reply to comment #0)\n> After upgrading from 1.2.14 to 1.2.15 the following error show up during\n> shutdown:\n> log4j:ERROR LogMananger.repositorySelector was null likely due to error in\n> class\n> reloading, using NOPLoggerRepository.\n\nI suggest that the wording of this message (LogManager.java, line 177) is changed to something like.\n\n\"log4j repository corrupted.  Happens with some class loaders.  Logging disabled.  See https://issues.apache.org/bugzilla/show_bug.cgi?id=43867 for discussion\"\n\nThis is to help the person seeing this message as much as possible resolving the problem.  The current message wording does not reflect the current consensus namely that this is essentially not a log4j problem.\n\nI would originally suggest adding an extra argument giving the requested stack trace, but thought better of it as it misleads more than it helps.\n\n", "tags": [], "creator": "thorbjoern@gmail.com", "is_private": false, "count": 43, "id": 119013, "time": "2008-07-25T03:25:51Z", "bug_id": 43867, "creation_time": "2008-07-25T03:25:51Z", "attachment_id": null}, {"count": 44, "tags": [], "bug_id": 43867, "text": "I don't like \"repository is corrupted\" which to me suggests some subtle distortion of the system than a total catastrophic failure.\n\nI think the best solution is to keep the message text, but add a link to a FAQ (which could link to the bugs for background info).", "id": 119418, "time": "2008-08-05T11:07:12Z", "creator": "carnold@apache.org", "creation_time": "2008-08-05T11:07:12Z", "is_private": false, "attachment_id": null}, {"count": 45, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 119422, "time": "2008-08-05T12:33:15Z", "creator": "carnold@apache.org", "creation_time": "2008-08-05T12:33:15Z", "text": "I think that we could suppress the message when it occurs within the scope of org.apache.catalina.loader.WebappClassLoader.clearReferences.  Hate to put a client specific hack in our code, but it seems to affect enough of our users to warrant that ugliness.\n\nDoes the stack trace extend all the way back to WebappClassLoader?\n\nI may take a shot at detecting that scenario and commit to the SVN, but would depend on somebody who can reproduce the issue to see if it addresses the issue.  \n"}, {"count": 46, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119423, "time": "2008-08-05T13:01:24Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-08-05T13:01:24Z", "is_private": false, "text": "Here is a full stack:\n\nThread [main] (Suspended (breakpoint at line 177 in LogManager))\t\n\tLogManager.getLoggerRepository() line: 177\t\n\tLogManager.getLogger(String) line: 199\t\n\tLogger.getLogger(String) line: 105\t\n\tLog4JLogger.getLogger() line: 229\t\n\tLog4JLogger.<init>(String) line: 65\t\n\tGeneratedConstructorAccessor5.newInstance(Object[]) line: not available\t\n\tDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27\t\n\tConstructor<T>.newInstance(Object...) line: 513\t\n\tLogFactoryImpl.newInstance(String) line: 529\t\n\tLogFactoryImpl.getInstance(String) line: 235\t\n\tLogFactoryImpl.getInstance(Class) line: 209\t\n\tLogFactory.getLog(Class) line: 351\t\n\tUIAjaxSupport.<clinit>() line: 57\t\n\tUnsafe.ensureClassInitialized(Class) line: not available [native method]\t\n\tUnsafeFieldAccessorFactory.newFieldAccessor(Field, boolean) line: 25\t\n\tReflectionFactory.newFieldAccessor(Field, boolean) line: 122\t\n\tField.acquireFieldAccessor(boolean) line: 918\t\n\tField.getFieldAccessor(Object) line: 899\t\n\tField.get(Object) line: 358\t\n\tWebappClassLoader.clearReferences() line: 1616\t\n\tWebappClassLoader.stop() line: 1499\t\n\tWebappLoader.stop() line: 734\t\n\tStandardContext.stop() line: 4398\t\n\tStandardHost(ContainerBase).stop() line: 1067\t\n\tStandardEngine(ContainerBase).stop() line: 1067\t\n\tStandardEngine.stop() line: 448\t\n\tStandardService.stop() line: 510\t\n\tStandardServer.stop() line: 734\t\n\tCatalina.stop() line: 602\t\n\tCatalina.start() line: 577\t\n\tNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]\t\n\tNativeMethodAccessorImpl.invoke(Object, Object[]) line: 39\t\n\tDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25\t\n\tMethod.invoke(Object, Object...) line: 597\t\n\tBootstrap.start() line: 295\t\n\tBootstrap.main(String[]) line: 433\t\n\n\nI can reproduce the error on demand, and test a fix attempt, but my schedule is a bit hectic right now, so it may not be timely.\n\nIt hadn't occurred to me to detect when tomcat causes the problem, and mask just that error.  I think that is a reasonable solution.\n\n"}, {"count": 47, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 119425, "time": "2008-08-05T13:10:11Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-08-05T13:10:11Z", "text": "What about Dan's comment #39?\n\n\"Tomcat, in the desire to clear out the static fields within a class by using\nreflection, has unwittingly caused the class init code to be rerun due to the\nway that reflection works.  When it hits this code that tries to use the log\nfactory, it doesn't know that it has already broken the logfactory by setting\nfields within the logfactory to null.\"\n\nWhat happens when you silently ignore Tomcat doing the wrong thing here? Doesn't this have the potential of breaking webapp code in the future?"}, {"count": 48, "attachment_id": null, "bug_id": 43867, "text": "I'm not sure how to interpret message #47.  Maybe best for me to take a shot at a fix and then for you to critique it.\n\nWe know one situation that can result in the NOPLoggerRepository warning, the undesirable reloading and reinitialization of classes in WebappClassLoader.clearReferences.  As that scenario is described, it seems like there is little potential for resource leakage or other issue that should concern a site admin, so the message could be dropped to a LogLog.debug() or similar which would likely be suppressed.\n\nHowever, we can't say that all situations that can result in the NOPLoggerRepository are as innocuous.  So we don't want to lower the severity in situations where we can't identify.  In those cases, we've got an obligation to let the admin know that log4j has a serious problem and can't perform as would be expected.  Maybe sometimes the NOPLoggerRepo message does occur because of misconfiguration or unterminated threads, if those cases occur, we shouldn't hide the info from the admin.  Comment #38 touched on the need to not hide problems from admins that might let them know that things are going south.\n\nThere is a compromise here and it won't be perfect, however hopefully we could eliminate a lot of unnecessarily scary messages to Tomcat admins that don't reflect a potential stability issue while still informing other uses when we feel that our stability has been compromised.", "id": 119429, "time": "2008-08-05T13:46:32Z", "creator": "carnold@apache.org", "creation_time": "2008-08-05T13:46:32Z", "tags": [], "is_private": false}, {"count": 49, "tags": [], "bug_id": 43867, "attachment_id": null, "is_private": false, "id": 119430, "time": "2008-08-05T13:49:44Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-08-05T13:49:44Z", "text": "Curt,\n\nI interpret comment #47 as saying that Tomcat isn't clearing the references properly (it clears some references then reinitializes a class by mistake). Shouldn't be trying to fix *that* instead of simply suppressing the resulting warning message? Who knows what effects partial reference-clearing will have on future webapps?!"}, {"count": 50, "tags": [], "text": "(In reply to comment #49)\n> Curt,\n> \n> I interpret comment #47 as saying that Tomcat isn't clearing the references\n> properly (it clears some references then reinitializes a class by mistake).\n> Shouldn't be trying to fix *that* instead of simply suppressing the resulting\n> warning message? Who knows what effects partial reference-clearing will have on\n> future webapps?!\n\nIf this is a matter of just Tomcat doing the wrong thing, and that it can be configured to do the right thing, then why not just say so (and how) in the message shown to the user?\n \nOr does this happen elsewhere than just in web apps inside Tomcat", "is_private": false, "id": 119431, "creator": "thorbjoern@gmail.com", "time": "2008-08-05T14:02:37Z", "bug_id": 43867, "creation_time": "2008-08-05T14:02:37Z", "attachment_id": null}, {"count": 51, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119432, "time": "2008-08-05T14:04:06Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-08-05T14:04:06Z", "is_private": false, "text": "Dan, can you please clarify your comment #39?"}, {"count": 52, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119433, "time": "2008-08-05T14:19:15Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-08-05T14:19:15Z", "is_private": false, "text": "(In reply to comment #50)\n> (In reply to comment #49)\n> > Curt,\n> > \n> > I interpret comment #47 as saying that Tomcat isn't clearing the references\n> > properly (it clears some references then reinitializes a class by mistake).\n> > Shouldn't be trying to fix *that* instead of simply suppressing the resulting\n> > warning message? Who knows what effects partial reference-clearing will have on\n> > future webapps?!\n> \n> If this is a matter of just Tomcat doing the wrong thing, and that it can be\n> configured to do the right thing, then why not just say so (and how) in the\n> message shown to the user?\n> \n> Or does this happen elsewhere than just in web apps inside Tomcat\n> \n\nTomcat is doing the best job that it can at clearing references.  But what it doesn't (and can't) know is what a safe order would be to clear the  references.  It is just walking through the classes that a given classloader has loaded.  I'm not sure if there is any order, other than random, here.\n\nSo, what happens for me is that tomcat nulls out the references inside of the logfactory class.  Then, it goes off to some other class - in my first example here it was the org.apache.struts.validator.ValidatorForm class from struts - and it tries to null out the references inside of that class.\n\nThings break because Tomcat is using reflection to find out what all of the private fields are inside of each class.  And, surprisingly (to me anyway) the way that Sun designed the reflection API's - this inadvertently calls the static init code of the ValidatorForm class again.  Which tries to use the (now broken) logfactory.\n\nThats what happens in this portion of the stacktrace:\n\nValidatorForm.<clinit>() line: 99       \nUnsafe.ensureClassInitialized(Class) line: not available [native method]        \nUnsafeFieldAccessorFactory.newFieldAccessor(Field, boolean) line: 25    \nReflectionFactory.newFieldAccessor(Field, boolean) line: 122   \nField.acquireFieldAccessor(boolean) line: 918   \nField.getFieldAccessor(Object) line: 899        \nField.get(Object) line: 358     \nWebappClassLoader.clearReferences() line: 1616 \n\n\nThats just the way reflection works, I guess.  Maybe there is another way to use the reflection API that would prevent it from rerunning init code of classes, but I doubt it.  Tomcat doesn't mean to reinitialize classes, but it happens when they use the reflection API.\n\nMake sense?\n\n"}, {"count": 53, "attachment_id": null, "bug_id": 43867, "text": "For comment #50:\n\nThe only place that we know where it happens is within clearReferences, but we can't say that is the only place that it happens.\n\nWe can tell Tomcat users to turn off clear references since it is an unsafe optimization, but apparently it is a very desirable optimization (otherwise it wouldn't be the default and they wouldn't have gone to the trouble to write it).  \n\nFor some class of users, they have observed that they upgrade to log4j 1.2.15 and now they get a message that they didn't get before and think that it is a log4j issue.  They never say the NPE that motivated writing the NOPLoggerRepo and the message.  For those that did see the NPE, log4j 1.2.15 was a good upgrade, those that never say the NPE and now see the message see it as a problematic upgrade.  \n\nThe problem is a latent Tomcat issue, but they don't know that and for us to tell them to change their configuration might be enough to discourage them from keeping current, so now we have pressure to try to continue to support 1.2.14 or whatever that for some reason we don't understand doesn't exhibit the issue for them (but NPE's for others).\n\nThe belt and suspenders approach (message with a FAQ and lowering level where we think it is innocuous) seems best to me, but I'll commit them as two separate changes (FAQ first) and we can decide whether to keep one or the other or both.", "id": 119436, "time": "2008-08-05T14:39:22Z", "creator": "carnold@apache.org", "creation_time": "2008-08-05T14:39:22Z", "tags": [], "is_private": false}, {"count": 54, "tags": [], "bug_id": 43867, "text": "Dan,\n\nSomething sounds suspicious about your description. It doesn't make sense that reflection would invoke the class initializer if the class has already been initialized. The Javadoc or JLS would mention it somewhere...\n\nDid you narrow down the problem to a specific line of code? Was it Class.getDeclaredFields()?", "id": 119462, "time": "2008-08-05T20:13:21Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-08-05T20:13:21Z", "is_private": false, "attachment_id": null}, {"count": 55, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119500, "time": "2008-08-06T07:17:28Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-08-06T07:17:28Z", "is_private": false, "text": "(In reply to comment #54)\n> Dan,\n> \n> Something sounds suspicious about your description. It doesn't make sense that\n> reflection would invoke the class initializer if the class has already been\n> initialized. The Javadoc or JLS would mention it somewhere...\n> \n> Did you narrow down the problem to a specific line of code? Was it\n> Class.getDeclaredFields()?\n> \n\nDidn't make much sense to me either.  The stacktrace above shows exactly where the init call happens.  And, now I did find it in the javadocs:\n\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/lang/reflect/Field.html#get(java.lang.Object)\n\n\n"}, {"count": 56, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119514, "time": "2008-08-06T09:57:45Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-08-06T09:57:45Z", "is_private": false, "text": "Dan,\n\nAre you referring to \"If the underlying field is static, the class that declared the field is initialized if it has not already been initialized.\"?\n\nThat only makes sense if Tomcat un-initializes the class somehow in the first place, but it isn't clear to me that it's doing this from your description... If it *is* then wouldn't the following technique fix the problem?\n\n1) Null-out all references first\n2) De-initializes classes second\n\na opposed to intermixing the two phases."}, {"count": 57, "attachment_id": null, "bug_id": 43867, "text": "Maybe, I don't know if that is possible or not.  I don't know the reflection API's well enough.\n\nPerhaps you can pursue it with the folks on the Tomcat side:\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=41939\n\nFrom the log4j side, I still like the idea of detecting when tomcat caused the problem during a shutdown sequence, and logging the error as a much lower level message.  ", "id": 119517, "time": "2008-08-06T11:51:44Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2008-08-06T11:51:44Z", "tags": [], "is_private": false}, {"count": 58, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119521, "time": "2008-08-06T12:24:29Z", "creator": "digulla@hepe.com", "creation_time": "2008-08-06T12:24:29Z", "is_private": false, "text": "Re: Field.get(Object)\n\nSome background info on reflection and static code in a class.\n\nIf you use reflection to access the static data of a class (which Tomcat has to do to clear static references so it can GC the webapp), then calling Field.get() will initialize a class if a) it hasn't been initialized, yet, b) if it has been initialized by a different classloader instead of the current one or c) when the class itself has been GC'd (not with Sun VM with default GC options but you can activate that).\n\nThere are a lot of spurious problems lurking around this \"feature\"; I once used it to execute code while the Groovy compiler worked on my class file. It wasn't nice.\n\nSo what can happen is that you need a class for something (i.e. someone imports it) but you don't actually use it. In this case, the classloader will have loaded the class but it won't be initialized. That's a standard optimization to make Java boot faster.\n\nThen, you shutdown. At that stage, Tomcat will look through all loaded classes (instead of those which are initialized) and call Field.get(). And that triggers the bug.\n\nTomcat can't solve this, because there is no way to ask the VM if a class is initialized or not.\n\nThe only solution for this kind of bug is not to use *any* static fields in code which will be deployed to Tomcat. Especially the Loggers of log4j must not be static ... and here we run into trouble because we have to mutually exclusive design goals.\n\nBut maybe we can hack our way out of this. Solution 1 would be to install a listener which deinitializes log4j in such a way that any getLogger() call would return null or a NOPLogger or something.\n\nSolution 2 would be to create a private final static field which Tomcat will eventually clear. If that field is cleared (and only Tomcat can do that since it's private), you know that you're in the Tomcat shutdown cycle (instead of some misconfiguration error) and you could ignore attempts to log anything instead of throwing an error.\n\nSolution 1 would depend a bit on Tomcat but it would be reusable for other app servers. Solution 2 would be independent of the appserver; any appserver who clears static fields would just work."}, {"count": 59, "tags": [], "creator": "cowwoc@bbs.darktech.org", "is_private": false, "text": "Aaron,\n\nThanks for clarifying further how this bug may occur. Okay, so I'm fine with omitting the error message but only during the Tomcat shutdown cycle.\n\n1) How are you going to reactivate the error message once the clearReferences method is complete?\n\n2) Can we safely assume that no other webapp will use log4j while it is being shut down?\n\nI suspect the answer to both the above questions is that Tomcat uses a different class-loader per Webapp so Log4j will never get shared between them. So once log4j is shut down it should, in theory, never come back to life.\n\nBTW: Why does Tomcat need to null out the references if the class-loader is being unloaded (hence all the classes inside it are being unloaded anyway)? Is it reusing the same class-loader if a webapp is reloaded? In such a case I think this fix isn't so clear-cut. We need to ensure that log4j doesn't end up in a corrupt state once the shutdown process is complete. How can we guarantee this?", "id": 119522, "time": "2008-08-06T13:00:44Z", "bug_id": 43867, "creation_time": "2008-08-06T13:00:44Z", "attachment_id": null}, {"count": 60, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119523, "time": "2008-08-06T13:37:47Z", "creator": "digulla@hepe.com", "creation_time": "2008-08-06T13:37:47Z", "is_private": false, "text": "> 1)\n\nNo.\n\n> 2)\n\nOnly when log4j is in WEB-INF/lib. If you put it into common/lib, one log4j instance is shared by all webapps and Tomcat itself.\n\nUnloading a classloader doesn't destroy the objects it created. As long as the objects live (and if they are static, they live forever ... or until someone nulls the reference), they will keep a reference to their class. So the classes can only be GC'd after all static references have been nulled."}, {"count": 61, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119525, "time": "2008-08-06T14:11:40Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-08-06T14:11:40Z", "is_private": false, "text": "That doesn't sound right to me. As far as I remember, static fields are bound at the ClassLoader level (they do not span them).\n\nhttp://forums.sun.com/thread.jspa?forumID=7&threadID=621392 says the same but I couldn't find a reference to this in the Java Language Specification (to be fair, I didn't look too deep)."}, {"text": "From comment #58\n\n>But maybe we can hack our way out of this. Solution 1 would be to install a\n>listener which deinitializes log4j in such a way that any getLogger() call\n>would return null or a NOPLogger or something.\n\n>Solution 2 would be to create a private final static field which Tomcat will\n>eventually clear. If that field is cleared (and only Tomcat can do that since\n>it's private), you know that you're in the Tomcat shutdown cycle (instead of\n>some misconfiguration error) and you could ignore attempts to log anything\n>instead of throwing an error.\n\nlog4j is already doing both of these things.  It checks a private static field that should never be null through normal language mechanism for null and if it detects that it returns a NOPLogger instance.  The complaint is that it emits a warning when it does so.\n\nIf we knew that anytime that it encountered this scenario it was running in Tomcat and in clearReferences, we could just remove the warning or lower it to a debug severity.  However, we can't say for certain that that is the only time it happens, we just know it is one place it happens.  The last suggestion was to detect if it is in this one place that we know it happens and where we think the fallback behavior doesn't mask a bigger error and in that one scenario to reduce the severity of the message.\n\n\n", "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "count": 62, "id": 119528, "time": "2008-08-06T21:57:43Z", "bug_id": 43867, "creation_time": "2008-08-06T21:57:43Z", "is_private": false}, {"count": 63, "tags": [], "creator": "digulla@hepe.com", "is_private": false, "text": "> As far as I remember, static fields are bound\n> at the ClassLoader level\n\nClass loading is a two step process. First, the class is loaded, then it is initialized. Static fields are filled in the second step when the static code of the class is executed.\n\n> (they do not span them)\n\nThe static fields are bound to the class object but that doesn't prevent you to use the class object created by classloader A in the context of classloader B.\n\nThis whole stuff is a huge mess and it can drive you crazy which is why most people want to avoid it but you can't when using something like Tomcat. The most simple solution is probably to use a \"one app per app server\" policy but that has other drawbacks.", "id": 119533, "time": "2008-08-07T00:49:48Z", "bug_id": 43867, "creation_time": "2008-08-07T00:49:48Z", "attachment_id": null}, {"count": 64, "tags": [], "text": "I've committed a change in rev 683811 that adds a faq on NPE's and NOPLoggerRepository warnings during class unloading.  \n\nBug 40212 which originally resulted in the NOPLoggerRepository warning that this bug complained about does show several other non Tomcat related scenarios that can result in log4j having its class invariants violated.  This isn't just a Tomcat issue.  Other bugs show that class invariants can be violated outside of Tomcat unload calls.\n\nPer comment #58.  I reviewed the current trunk implementation of WebappClassLoader.clearReferences and I think that Tomcat might be able to address the problem doing two passes on iterating through the loaded classes.  One pass that would trigger class initialization if it hadn't already occurred.  This would succeed since log4j is still in a valid state.  Then a second pass that actually sets the fields to null.\n\nWould appreciate comments on the FAQ, the detection of Tomcat shutdown and the possibility to eliminating the problem in Tomcat.", "attachment_id": null, "id": 119577, "creator": "carnold@apache.org", "time": "2008-08-07T20:20:09Z", "bug_id": 43867, "creation_time": "2008-08-07T20:20:09Z", "is_private": false}, {"text": "Curt,\n\nI like your proposed solution (two-pass for Tomcat). Do you think it would be possible to run it by the Tomcat staff to see what they think?", "tags": [], "creator": "cowwoc@bbs.darktech.org", "is_private": false, "count": 65, "id": 119580, "time": "2008-08-07T20:33:12Z", "bug_id": 43867, "creation_time": "2008-08-07T20:33:12Z", "attachment_id": null}, {"count": 66, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 119582, "time": "2008-08-07T22:12:07Z", "creator": "carnold@apache.org", "creation_time": "2008-08-07T22:12:07Z", "is_private": false, "text": "Bug 41059 is still open for Tomcat and also had the two pass suggestion.  I've just attached a patch to the bug to implement the two pass approach and will track it.  I would appreciate any users who are affected by this issue to try Tomcat with the modification and report whether the problem disappears for them."}, {"count": 67, "tags": [], "bug_id": 43867, "attachment_id": null, "id": 123981, "time": "2009-01-13T01:43:43Z", "creator": "mauromol@tiscali.it", "creation_time": "2009-01-13T01:43:43Z", "is_private": false, "text": "Shouldn't bug #41059 be added to the \"depends on\" field of this bug?\n\nMauro."}]
[{"attachment_id": null, "tags": [], "creator": "benjamin.gehrels_external@immobilienscout24.de", "text": "i think that ERROR logging should be reserved to misbehaviour of the software, that needs attention by the operator/developer (in contrast to WARN/INFO logging, that *may* show some misbehaviour). Having a client stumbeling over his network cable or having a bad connection during a subway ride should be a pretty normal and non-alarming situation in a distributed system, not a misbehaviour of the software.\n\nSadly, when a SocketTimeoutException or an IOException: Connection reset by peer is thrown in a HttpServlet, it will be propagated through the FilterChain and cause ugly ERROR Logging:\n\njava.io.IOException: Connection reset by peer\n\tat sun.nio.ch.FileDispatcherImpl.read0(Native Method) ~[na:1.8.0_51]\n\tat sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39) ~[na:1.8.0_51]\n\tat sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223) ~[na:1.8.0_51]\n\tat sun.nio.ch.IOUtil.read(IOUtil.java:197) ~[na:1.8.0_51]\n\tat sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:380) ~[na:1.8.0_51]\n\tat org.apache.tomcat.util.net.NioChannel.read(NioChannel.java:140) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.tomcat.util.net.NioBlockingSelector.read(NioBlockingSelector.java:173) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.tomcat.util.net.NioSelectorPool.read(NioSelectorPool.java:251) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.tomcat.util.net.NioSelectorPool.read(NioSelectorPool.java:232) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.coyote.http11.InternalNioInputBuffer.fill(InternalNioInputBuffer.java:133) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.coyote.http11.InternalNioInputBuffer$SocketInputBuffer.doRead(InternalNioInputBuffer.java:177) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.coyote.http11.filters.IdentityInputFilter.doRead(IdentityInputFilter.java:110) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.coyote.http11.AbstractInputBuffer.doRead(AbstractInputBuffer.java:416) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.coyote.Request.doRead(Request.java:469) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:338) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.tomcat.util.buf.ByteChunk.substract(ByteChunk.java:363) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.connector.InputBuffer.readByte(InputBuffer.java:352) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:94) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat java.io.FilterInputStream.read(FilterInputStream.java:83) ~[na:1.8.0_51]\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:139) ~[na:1.8.0_51]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:135) ~[spring-webmvc-4.1.7.RELEASE.jar!/:4.1.7.RELEASE]\n        [...]\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:869) ~[spring-webmvc-4.1.7.RELEASE.jar!/:4.1.7.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:648) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) ~[spring-webmvc-4.1.7.RELEASE.jar!/:4.1.7.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) ~[tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:676) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_51]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_51]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.23.jar!/:8.0.23]\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_51]\n\nI guess this should be an WARN/INFO/DEBUG logging, not an error.", "count": 0, "id": 184930, "time": "2015-09-03T12:48:37Z", "bug_id": 58323, "creation_time": "2015-09-03T12:48:37Z", "is_private": false}, {"text": "That stack trace originates inside Servlet.service(). Tomcat has no way to tell if the problem is a trivial one that is safe to ignore or a serious one that needs to be logged. Therefore, such errors are always logged at ERROR.\n\nEven if Tomcat is able to detect that it is due to a client abort exception, Tomcat still doens't know how serious an issue that is for any given application.\n\nApplications are expected to catch and handle such errors appropriately.", "tags": [], "creator": "markt@apache.org", "attachment_id": null, "count": 1, "id": 184931, "time": "2015-09-03T12:57:05Z", "bug_id": 58323, "creation_time": "2015-09-03T12:57:05Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58323, "attachment_id": null, "id": 184940, "time": "2015-09-03T15:44:31Z", "creator": "benjamin.gehrels_external@immobilienscout24.de", "creation_time": "2015-09-03T15:44:31Z", "is_private": false, "text": "I am not quite sure about that. I would say, if it would be critical, it would have been the Servlets responsibility to have done a try-catch-log-rethrowAsServletException. If it failed to do so, its worth maybe a warn, but not an error.\n\nWe had that discussion on the Spring MVC Jira (https://jira.spring.io/browse/SPR-12745 ) and after reading the comments there, i am not quite sure if the Servlet is even allowed to \"catch and handle such errors appropriately\" (that is, swallow) that Exception. \n\nOne could argue that the container (that manages and owns the connection) somehow \"borrows\" it to the servlet (via the ServletRequests/Responses Input/Output streams). The IOException thrown by the Servlet is then a way to tell the container \"Hey, i borrowed your connection, but something broke and now i am not sure if i return it in an non-broken state. Be aware that it may be fishy somehow\".\n\nThe fact that the servlet spec explicitly includes it (\"throws java.io.IOException - if an input or output exception occurs\") in the interface somehow suggests that. Otherwise, it could have simply forced us to wrap the IOException in a ServletException or Runtime exception - like all the other non-IO Exceptions. In the end, only the container knows what to do with its broken connection."}, {"count": 3, "tags": [], "bug_id": 58323, "attachment_id": null, "id": 184945, "time": "2015-09-03T18:17:53Z", "creator": "markt@apache.org", "creation_time": "2015-09-03T18:17:53Z", "is_private": false, "text": "Logging unhandled errors at ERROR level has been the convention in Tomcat for as long as I can remember and isn't going to change.\n\nAny exceptions in the service() method are up to the application to handle. Only it can determine how serious they are and only the application can determine what cleaning up - if any - is required after the error.\n\nWhile most applications won't be concerned about an I/O error, I have worked with apps where any I/O trigger the destruction of the session, the logging out of the user and a security alert. Tomcat has no way to determine which sort of app has been deployed.\n\nAs an aside, as soon as the I/O occurs - and before the exception even reaches the servlet - Tomcat will have marked the connection as faultly and be waiting to close it."}]
[{"count": 0, "tags": [], "text": "Hereby I request that custom levels are supported without the need to specify\nthe classname.\n\nCurrently, the configurators allow the standard levels (such as INFO, ERROR and\nFATAL) to be specified without specifying a class name. For example, in a\nproperties file:\n\n   log4j.rootLogger=DEBUG, console\n\nHowever, custom levels are only supported if they are referred to by name and\nclassname, separated by a hash. For example:\n\n   log4j.rootLogger=NOTICE#com.company.log.LogLevel, console\n\nI propose the following alternative is supported:\n\n   log4j.rootLogger=NOTICE, console\n\nCurrently, configurators use Level.toLevel(String,Level) class method to convert\nthe level string to a Level object. The current implementation (in 1.2.13) is as\nfollows:\n\n  public static Level toLevel(String sArg, Level defaultLevel) {\n    if(sArg == null)\n       return defaultLevel;\n\n    String s = sArg.toUpperCase();\n\n    if(s.equals(\"ALL\")) return Level.ALL;\n    if(s.equals(\"DEBUG\")) return Level.DEBUG;\n    if(s.equals(\"INFO\"))  return Level.INFO;\n    if(s.equals(\"WARN\"))  return Level.WARN;\n    if(s.equals(\"ERROR\")) return Level.ERROR;\n    if(s.equals(\"FATAL\")) return Level.FATAL;\n    if(s.equals(\"OFF\")) return Level.OFF;\n    if(s.equals(\"TRACE\")) return Level.TRACE;\n    return defaultLevel;\n  }\n\nProposed implementation scenario:\n- use an internal Map to convert from String to Level, in the Level class\n- add an entry to this Map each time a Level instance is constructed, with the\nappropriate name as the key and the object as the value", "is_private": false, "bug_id": 38617, "id": 85702, "time": "2006-02-11T17:05:22Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-11T17:05:22Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "wfe.dehaan@gmail.com", "attachment_id": null, "id": 85703, "time": "2006-02-11T17:12:18Z", "bug_id": 38617, "creation_time": "2006-02-11T17:12:18Z", "is_private": false, "text": "Of course I should have said \"Hashtable\" instead of \"Map\", since the code needs\nto be compatible with JDK 1.1."}, {"count": 2, "tags": [], "text": "Created attachment 17658\nPatch that makes Level dynamically store and lookup Level instances by name\n\nAttached is a patch that implements the change I propose. I've executed all\nunit tests successfully with it.\n\nNote that there are the following side-effects:\n1) there will be a warning logged if a duplicate Level instance is created.\n2) Priority.INFO is now equal to Level.INFO. Same applies to the other fields\nin Priority.\n\nPersonally, I see no harm in these side-effects.", "is_private": false, "bug_id": 38617, "id": 85704, "time": "2006-02-11T18:04:36Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-11T18:04:36Z", "attachment_id": 17658}, {"count": 3, "tags": [], "bug_id": 38617, "is_private": false, "text": "Created attachment 17661\nPatch that makes Level dynamically store and lookup Level instances by name, with test case\n\nI've attached a new patch, this time with a unit test.", "id": 85709, "time": "2006-02-11T19:51:54Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-11T19:51:54Z", "attachment_id": 17661}, {"count": 4, "attachment_id": null, "creator": "carnold@apache.org", "is_private": false, "id": 85714, "time": "2006-02-11T21:53:54Z", "bug_id": 38617, "creation_time": "2006-02-11T21:53:54Z", "tags": [], "text": "I don't see any mechanism that assigns a numerical level value an unrecognized level.  How would log4j \nknow whether NOTICE where more or less significant than \"ERROR\", for example.  In the current (less than \noptimal) mechanism, that infomation is coded into the class.\n\nThe patch seems to predate the restoration of Level extending Priority that occurred to bring log4j 1.3 \nback into line with log4j 1.2.\n\nI definitely agree the current level extension mechanism is not ideal.  I've thought about extending log4j \nto recognize arbitary integer values for levels, so if you wanted 9999 levels between DEBUG and INFO you \ncould have them without any custom code, though the level names might be DEBUG+5000."}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> I don't see any mechanism that assigns a numerical level value an unrecognized\nlevel.  How would log4j \n> know whether NOTICE where more or less significant than \"ERROR\", for example.\n In the current (less than \n> optimal) mechanism, that infomation is coded into the class.\n\nI don't understand. How is this related to the issue I fix? It does not touch\nthe basic properties of a Level (or a Priority instance, for that matter). So\neverything else remains working as it does now. Just create a Level instance as\none would do now. Then you already specify the numerical level.\n\nI think you think I'm trying to solve a larger (or even different) issue.\n\nThe requested enhancement is not about not having to do any coding. You still\nhave to write some code that will construct a Level instance with a proper name,\nnumeric value and syslog-equivalent value.", "is_private": false, "bug_id": 38617, "id": 85767, "time": "2006-02-14T17:16:39Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-14T17:16:39Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 85770, "time": "2006-02-14T18:30:51Z", "bug_id": 38617, "creation_time": "2006-02-14T18:30:51Z", "is_private": false, "text": "Okay, I missed that you were expecting the caller to have registered \"NOTICE\" by creating a derived \nclass prior to calling the configurator and misread the casts of the Priority.INFO et al which led me to \nthink you might have been working on code where Priority extends Level instead of vice-versa.  \n\nI'm concerned that the lazy initialization of the hashtable might present a threading issue.  It also \ncontinues to perpetuate the subclassing Level just to work around the protected constructor.  I also \ndon't like joining the construction and registration actions (though I understand why those were done).\n\nThe NAME#classname is a bit ugly, but it does not require registration of the level prior to the \nconfiguration and it only uglifies the configuration file and the benefit of the patch doesn't seem to be \nsufficient to justify the potential ramifications (particularly in the 1.2.x branch) in my opinion.\n\n\n\n\n\n  "}, {"count": 7, "tags": [], "text": "(In reply to comment #6)\n> Okay, I missed that you were expecting the caller to have registered \"NOTICE\"\nby creating a derived \n> class prior to calling the configurator and misread the casts of the\nPriority.INFO et al which led me to \n> think you might have been working on code where Priority extends Level instead\nof vice-versa.  \n\nPerhaps I should have been clearer on what my intensions were.\n\n> I'm concerned that the lazy initialization of the hashtable might present a\nthreading issue.  It also \n\nThe lazy initialization is indeed a bit ugly. I'll see if I can fix that. And\nindeed it may present a threading issue. I didn't think of that yet.\n\n> continues to perpetuate the subclassing Level just to work around the\nprotected constructor.  I also\n\nHow is the fact that Log4J requires subclassing Level relevant? I don't intend\nto change that fact here, it's just a relatively minor improvement.\n\n> don't like joining the construction and registration actions (though I\nunderstand why those were done).\n\nThey could be separated. But then you lose some of the perceived elegance from\nthe perspective of the Log4J user...\n\n> The NAME#classname is a bit ugly, but it does not require registration of the\nlevel prior to the \n> configuration and it only uglifies the configuration file and the benefit of\nthe patch doesn't seem to be \n> sufficient to justify the potential ramifications (particularly in the 1.2.x\nbranch) in my opinion.\n\nI disagree, because I have a practical issue here. The issue is that I don't\nwant to specify a class name in my Log4J settings, since the latter are\nmaintained by the IT Operations department. And class names are not in their\nvocabulary.\n\nAlso, we provide them with documentation on log levels, but then one log level\nis suddenly configured differently from all the others. That's inconsistent.", "is_private": false, "bug_id": 38617, "id": 85777, "time": "2006-02-14T20:13:59Z", "creator": "wfe.dehaan@gmail.com", "creation_time": "2006-02-14T20:13:59Z", "attachment_id": null}, {"count": 8, "attachment_id": 17692, "creator": "wfe.dehaan@gmail.com", "text": "Created attachment 17692\nPatch that makes Level dynamically store and lookup Level instances by name, with test case\n\nI've improvement the patch. This time, the Hashtable is initialized by the\nclass initializer. However, I moved the ALL_LEVELS class field to class\nPriority for this, because the latter is initialized before class Level, but it\nconstructs Level instances. So the Level constructor gets called before the\nclass initializer. This was the initial reason I introduced lazy\ninitialization.\n\nAlso, I've extended the test case to test some more situations.\n\nI will think about registering levels explicitly. Perhaps I'll submit another\nversion of the patch for that.", "id": 85778, "time": "2006-02-14T20:36:31Z", "bug_id": 38617, "creation_time": "2006-02-14T20:36:31Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "genman@noderunner.net", "text": "\nReally the purpose of the patch is to make editing your log4j configuration\nfiles (with your custom levels) easier for your IT team.  This is not a general\nconcern.\n\nOne big problem with having them created dynamically would be introducing memory\nleaks.  The other is compatibility.  I.e. how do levels \"leave\" the system?\n\nI'm guessing this will never \"fly\" with the log4j team.  So I suggest that you\napproach this in another way.  Make a patch that improves the DOM or .properties\nconfiguration format so that levels can be registered at the top.  Then, when\nparsing, the levels can be referenced using a simple name.\n", "id": 98642, "time": "2007-01-28T04:07:45Z", "bug_id": 38617, "creation_time": "2007-01-28T04:07:45Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "ben.zou@huawei.com", "text": "I want create a xls workbook that the sheets number are greater than 64 and every sheet has comment, it work at the version 3.10, but it not work at 3.12 and later version. The following code is my test code. The first 63 sheets is ok, but when the sheets are greater than 64 , it throw the exception \"The exception is Cannot add more than 65535 shapes. \"\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFClientAnchor;\nimport org.apache.poi.hssf.usermodel.HSSFComment;\nimport org.apache.poi.hssf.usermodel.HSSFPatriarch;\nimport org.apache.poi.hssf.usermodel.HSSFRichTextString;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\n\npublic class CellComments {\n\n  public static void main(String[] args) {\n    HSSFWorkbook wb = new HSSFWorkbook();\n    for (int i = 0; i < 256; i++) {\n      HSSFSheet sheet = wb.createSheet(\"Cell comments in POI HSSF\" + (i + 1));\n      // Create the drawing patriarch. This is the top level container for all shapes including cell comments.\n      HSSFPatriarch patr = sheet.createDrawingPatriarch();\n      try {\n        //create a cell in row 3\n        HSSFCell cell = sheet.createRow(0).createCell(0);\n        cell.setCellValue(new HSSFRichTextString(\"Hello, World\"));\n        //anchor defines size and position of the comment in worksheet\n        HSSFComment comment = patr.createComment(new HSSFClientAnchor(0, 0, 0, 0, (short) 1,  1, (short) 6, 4));\n        // set text in the comment\n        comment.setString(new HSSFRichTextString(\"We can set comments in POI\" + 0));\n        //set comment author.\n        //you can see it in the status bar when moving mouse over the commented cell\n        comment.setAuthor(\"Apache Software Foundation\");\n        // The first way to assign comment to a cell is via HSSFCell.setCellComment method\n        cell.setCellComment(comment);\n      } catch (Exception e) {\n        System.out.printf(\"Add comment fail at sheet%d. The exception is %s%n\", i+1, e.getMessage());\n      }\n    }\n    try (FileOutputStream out = new FileOutputStream(\"poi_comment.xls\")) {\n      wb.write(out);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}", "id": 198187, "time": "2017-04-06T13:27:43Z", "bug_id": 60960, "creation_time": "2017-04-06T13:27:43Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 60960, "text": "The HSSF-format (i.e. .xls) is limited in some ways, have you tried using the XSSF-classes (.xlsx)?", "id": 198944, "time": "2017-05-29T20:12:10Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-05-29T20:12:10Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 60960, "text": "(In reply to Dominik Stadler from comment #1)\n> The HSSF-format (i.e. .xls) is limited in some ways, have you tried using\n> the XSSF-classes (.xlsx)?\n\nThe xssf-classed is ok. The Hssf-format have the problem. But why it work ok at the version 3.10, and it not work at 3.12 and later version.", "id": 198966, "time": "2017-05-31T01:39:33Z", "creator": "ben.zou@huawei.com", "creation_time": "2017-05-31T01:39:33Z", "is_private": false, "attachment_id": null}]
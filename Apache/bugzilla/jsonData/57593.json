[{"count": 0, "tags": [], "bug_id": 57593, "attachment_id": null, "id": 181143, "time": "2015-02-18T15:31:31Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-18T15:31:31Z", "is_private": false, "text": "java.lang.Class - java.lang.IllegalArgumentException: The supplied POIFSFileSystem does not contain a BIFF8 'Workbook' entry. Is it really an excel file?\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.getWorkbookDirEntryName(HSSFWorkbook.java:223)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:245)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:188)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:305)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:286)\n\tat org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:60)\n\n\nI can't send the problematic file right now because it containts private information and has a lot of stuff. After removal of a single byte (or not editing at all) and saving - the problem is gone. I can speculate that the file had encryption or disabled cells which were removed. So, something was not cleared completely. After re-saving - the office fixes something automatically, so the problem is automatically gone. But we need this to be fixed since users may submit ANY file state and from the user's point of view the file is completely normal and no way to distinguish the wrong file which causes the crash from the good files."}, {"count": 1, "tags": [], "bug_id": 57593, "text": "What is the type of the file? If you grab the Apache Tika 1.7 CLI and run it with --detect on the file, what does that report the type as being?", "id": 181144, "time": "2015-02-18T15:34:09Z", "creator": "apache@gagravarr.org", "creation_time": "2015-02-18T15:34:09Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57593, "attachment_id": null, "id": 181146, "time": "2015-02-18T16:07:55Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-18T16:07:55Z", "is_private": false, "text": "From our perspective, this xlsm is normal, like thousands of other files. \nWhat I noticed, MS Office shows yellow \"Security Warning Some active content has been disabled. Click for more details.\" Pressing that button shows nothing, and the message is gone. After any re-saving in the Office (even without pressing on the warning) the problem is also gone.\n\n\n\nHere is what Apache Tika shows:\n\n>java -jar tika-app-1.7.jar --detect 096113YE06.xlsm\napplication/x-tika-ooxml-protected"}, {"count": 3, "tags": [], "bug_id": 57593, "text": "As Tika has shown, the file in question is an encrypted OOXML, though possibly with the default password. As such, HSSF can't read it\n\nSee http://poi.apache.org/encryption.html#XML-based+formats+-+Decryption for details of how to decrypt it to pass to XSSF\n\n(If you use a newer version of POI, you'll get a more helpful exception, but the underlying issue is that you're calling the wrong bit of POI)", "id": 181147, "time": "2015-02-18T16:13:40Z", "creator": "apache@gagravarr.org", "creation_time": "2015-02-18T16:13:40Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 57593, "text": "OK, thanks for your fast help! \nI'll try to deal with that\n\nRegards\nVasili", "id": 181149, "time": "2015-02-18T16:29:04Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-18T16:29:04Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 57593, "attachment_id": null, "id": 181217, "time": "2015-02-20T18:39:21Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-20T18:39:21Z", "is_private": false, "text": "Look, how it behaves...\n\n>java -jar tika-app-1.7.jar --detect 096113YE06.xlsm\napplication/x-tika-ooxml-protected\n\nbut after I open and immediately close the file in Excel (neither changing anything nor changing the file type), it becomes normal (from the point of view of tika and POI)\n\n>java -jar tika-app-1.7.jar --detect 096113YE06_just_resaved.xlsm\napplication/vnd.ms-excel.sheet.macroenabled.12\n\n\nAfter the re-saving HSSF api works as for thousands of other files derived from the same template. So, users of the template, during filling it, probably encrypted it (as I guess) and then decrypted. And the file remained in some volatile temp state which was automatically fixed by the re-saving.\n\nI'm wondering whether you can detect the file correctly from HSSF by other means (not raising the Exception, I guess BIFF8 may exist even in the 1st case - if it's not the Office which adds it). Is it possible?\n\nThanks"}, {"count": 6, "tags": [], "bug_id": 57593, "text": "Seems there is a bug here (unfortunately, due to another problem, mentioned in another ticket - I can't try to fix it until we fix the build):\nwe fall through, and if we had EncryptedPackage - we wouldn't have fallen through the 2nd block. I guess, under the 1st catch we should return something, may be a default.\n\n\nHSSFWorkbook.java, lines 237+, poi-3.11, we use\n-----------------------------------------------------\n    public static String getWorkbookDirEntryName(DirectoryNode directory) {\n\n        for (int i = 0; i < WORKBOOK_DIR_ENTRY_NAMES.length; i++) {\n            String wbName = WORKBOOK_DIR_ENTRY_NAMES[i];\n            try {\n                directory.getEntry(wbName);\n                return wbName;\n            } catch (FileNotFoundException e) {\n                                       \n            }\n        }\n        \n        // check for an encrypted .xlsx file - they get OLE2 wrapped\n        try {\n        \tdirectory.getEntry(\"EncryptedPackage\");\n        \tthrow new EncryptedDocumentException(\"The supplied spreadsheet seems to be an Encrypted .xlsx file. \" +\n        \t\t\t\"It must be decrypted before use by XSSF, it cannot be used by HSSF\");\n        } catch (FileNotFoundException e) {\n            // fall through\n        }\n\n        // check for previous version of file format\n        try {\n            directory.getEntry(\"Book\");\n            throw new OldExcelFormatException(\"The supplied spreadsheet seems to be Excel 5.0/7.0 (BIFF5) format. \"\n                    + \"POI only supports BIFF8 format (from Excel versions 97/2000/XP/2003)\");\n        } catch (FileNotFoundException e) {\n            // fall through\n        }\n\n        throw new IllegalArgumentException(\"The supplied POIFSFileSystem does not contain a BIFF8 'Workbook' entry. \"\n            + \"Is it really an excel file?\");\n    }\n------------------------------------------------------------", "id": 181218, "time": "2015-02-20T19:21:11Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-20T19:21:11Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 57593, "text": "(In reply to Vasili from comment #5)\n> Look, how it behaves...\n> \n> >java -jar tika-app-1.7.jar --detect 096113YE06.xlsm\n> application/x-tika-ooxml-protected\n> \n> I'm wondering whether you can detect the file correctly from HSSF by other\n> means (not raising the Exception, I guess BIFF8 may exist even in the 1st\n> case - if it's not the Office which adds it). Is it possible?\n\nI'd suggest you try opening it with XSSFWorkbook. If it's really XSSF, it'll open. If it's encrypted, you'll get an EncryptedDocumentException and you know to try decrytping it. If it's really a .xls file, you'll get (IIRC) an InvalidFormatException to tell you to retry with HSSF\n\nOtherwise, you should be fine using WorkbookFactory.create and catching EncryptedDocumentException. (Use a nightly / 3.12 beta 1 when out though, some improvements have happened)", "id": 181233, "time": "2015-02-21T12:00:44Z", "creator": "apache@gagravarr.org", "creation_time": "2015-02-21T12:00:44Z", "is_private": false, "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 57593, "text": "Hi Nick,\n\nIt seems that trying with different API should be hidden by facade in the framework, because applications have no idea - what type of the file arrives.\n\nIf it is the only way - I could try and if it succeeds I will have to do the same wrapper, hiding the abovementioned decisions, but it would be more correct if poi were doing that.\n\nRight now we use the most universal way, i.e.\n\nWorkbookFactory.create(fis);\n\nAnd a lot of business code (including 3rd party, which we do not control) is already using this approach, so it will be hard to change...\n\nI will return to this later, after the tests.\n\nThanks", "id": 181257, "time": "2015-02-23T14:28:06Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-23T14:28:06Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 57593, "attachment_id": null, "id": 181273, "time": "2015-02-23T17:16:09Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-23T17:16:09Z", "is_private": false, "text": "As you suggested, and to let you know, I tried to open the file with XSSFWorkbook first. It failed since it is not zip, it is BIFF8.\nEven if I fall through into HSSF, I'm still getting the same exception. \nSo, no sense to use XSSFWorkbook for that, and I use WorkbookFactory as before.\n\nThe last does not throws EncryptedDocumentException throwing the above-mentioned exception instead.\nI believe, it is rather a bug.\n\nI just tried nighly builds from Jenkins integration server (having downloaded poi-3.12-beta2 tarballs) and got the same pointing to those binaries (unfortunately, I can't debug and step into the code right now due to the build problem 57612):\n\n------8<------\njava.lang.IllegalArgumentException: The supplied POIFSFileSystem does not contain a BIFF8 'Workbook' entry. Is it really an excel file?\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.getWorkbookDirEntryName(HSSFWorkbook.java:223)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:245)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:188)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:305)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:286)\n\tat org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:60)\n------8<------"}, {"count": 10, "tags": [], "bug_id": 57593, "attachment_id": null, "id": 181280, "time": "2015-02-23T21:35:33Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-23T21:35:33Z", "is_private": false, "text": "Just a correction here (due to resolving of a CLASSPATH issue on my side, which was taking poi-3.7-20101029.jar)\n\nSo, now the file in question is throwing the EncryptedDocumentException, as you had expected. \n\norg.apache.poi.EncryptedDocumentException: The supplied spreadsheet seems to be an Encrypted .xlsx file. It must be decrypted before use by XSSF, it cannot be used by HSSF\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.getWorkbookDirEntryName(HSSFWorkbook.java:252)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:308)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:288)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:223)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:381)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:363)\n\tat org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:84)\n\n\n\nHowever the file seems to be not encrypted, although detected by all the tools as encrypted\n\n$ file 096113YE06.xlsm\n096113YE06.xlsm: Composite Document File V2 Document, Encrypted\n\nwhile after opening and immediate closing without any other internal modifications (and no passwords known) it is determined as:\n\n$ file 096113YE06_just_resaved.xlsm\n096113YE06_just_resaved.xlsm: Microsoft Excel 2007+\n\nAny suggestions? (We can't know the password because there is no password there)\n\nThanks and sorry for the confusion with the old version."}, {"count": 11, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Can you see if the file can be decrypted by POI using the default Excel password? (VelvetSweatshop). My guess is that the file has been \"protected\" with that default password, which is why you can read it in Excel without being prompted for a password, but why it is stored in the encrypted form\n\nOn a related note, I wonder if we should have overloaded / altenate WorkbookFactory methods which also take a password? Your code could then be something like:\n\ntry {\n   wb = WorkbookFactory.create(file);\n} catch (EncryptedDocumentException e) {\n   String password = promptUserForPassword(file);\n   wb = WorkbookFactory.create(file, password);\n}", "id": 181289, "time": "2015-02-24T09:33:29Z", "bug_id": 57593, "creation_time": "2015-02-24T09:33:29Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 57593, "attachment_id": null, "text": "I've tried Biff8EncryptionKey.setCurrentUserPassword(\"VelvetSweatshop\");\nbefore opening through WorkbookFactory.create(fis);\n\nand the result was the same: \n\norg.apache.poi.EncryptedDocumentException: The supplied spreadsheet seems to be an Encrypted .xlsx file. It must be decrypted before use by XSSF, it cannot be used by HSSF\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.getWorkbookDirEntryName(HSSFWorkbook.java:252)\n\nI agree with you that the file might had been protected, then unprotected, or may have some particular protected parts, nobody knows, may be only MS guys/developers. I assume, if it can be opened in MS Excel (without any indication about the encryption), it is a valid BIFF8 file.\nExcel is doing something automatically (fixes?) after any saving:\n\n$ file 096113YE06.xlsm\n096113YE06.xlsm: Composite Document File V2 Document, Encrypted\n\n$ file 096113YE06_just_resaved.xlsm\n096113YE06_just_resaved.xlsm: Microsoft Excel 2007+\n\nWhat exact usage/API are you suggesting for HSSF? It is for sure not xml file, it is a binary file.", "id": 181299, "time": "2015-02-24T17:22:01Z", "creator": "gavr145@gmail.com", "creation_time": "2015-02-24T17:22:01Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 57593, "text": "For an encrypted .xlsx file, you need to follow the approach detailed here - http://poi.apache.org/encryption.html#XML-based+formats+-+Decryption - against an open NPOIFSFileSystem. Do not call any HSSF code, that won't work!", "id": 181300, "time": "2015-02-24T17:23:57Z", "creator": "apache@gagravarr.org", "creation_time": "2015-02-24T17:23:57Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "gavr145@gmail.com", "attachment_id": null, "text": "But that is xml decryption, isn't it?\nThe encryption, you are suggesting, is encryption over xml files, and so is the API.\nThat file seems to be binary, BIFF8, so any xml (XSSF) code will fail.\nIf it is binary, it must be opened with HSSF only. Although, I understand, that we might have caught some undocumented MS binary format feature here (?)\n\nAm I wrong here?", "id": 181301, "time": "2015-02-24T17:29:51Z", "bug_id": 57593, "creation_time": "2015-02-24T17:29:51Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 57593, "attachment_id": null, "id": 181302, "time": "2015-02-24T17:32:39Z", "creator": "apache@gagravarr.org", "creation_time": "2015-02-24T17:32:39Z", "is_private": false, "text": "As the docs state, and as I've said several times, you need to follow those directions to decrypt the encrypted .xlsx, then pass the decrypted input stream to xssf to load. Please follow the docs given!"}, {"count": 16, "tags": [], "creator": "gavr145@gmail.com", "attachment_id": null, "text": "ok, finally, I succeeded, using the following (xml) API and using the password you provided: \n\n\n\t\tPOIFSFileSystem fs = new POIFSFileSystem(fis);\n\t        EncryptionInfo info = new EncryptionInfo(fs);\n\t        Decryptor d = Decryptor.getInstance(info);\n\t        \n\t        System.out.println(d.verifyPassword(\"VelvetSweatshop\")); \n\t        \n\t        InputStream decryptedDataStream = d.getDataStream(fs);\n\t        \n\t        OPCPackage pkg = OPCPackage.open(decryptedDataStream);\n\t        XSSFWorkbook workbook = new XSSFWorkbook(pkg);\n\nso this can be closed now. (so lot of confusion with different APIs!)\n\nThanks for your support.", "id": 181303, "time": "2015-02-24T17:54:31Z", "bug_id": 57593, "creation_time": "2015-02-24T17:54:31Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 57593, "attachment_id": null, "id": 181314, "time": "2015-02-25T05:40:14Z", "creator": "apache@gagravarr.org", "creation_time": "2015-02-25T05:40:14Z", "is_private": false, "text": "If you'd care to suggest the method signature of a WorkbookFactory method which took a password, along with the behaviours for:\n * Call with a null password\n * Called with a password and a non-encrypted file\nThen we can look at wrapping up the decryption code in there to make life easy for others!\n\n(I know how to write the code, I'm just not sure on what would make most sense for a user in answer to those two questions...)"}, {"count": 18, "tags": [], "creator": "gavr145@gmail.com", "attachment_id": null, "text": "\nI think, the most sense for us will be maximum backward compatibility, i.e. the old factory methods should remain in-place working as before with \nadditional functionality for the default password (the issue described) in the catch block of EncryptedDocumentException .\nExactly what your have proposed in your overloaded implementation. WorkbookFactory.create(fis, password) might be a separate method.\nI'm working on something else right now and will move to the wrapper for this issue later, and I might comment with my wrapper \nimplementation later - if you will not implement it earlier. Also, I haven't looked deeply into the differences between HSSF and XSSF, so may be mistaken in something. \nI guess, the input stream might be reopened in the catch block while the first stream should be closed (depending on the buffer, it's resetting and how the first call uses the stream).\nSo, the usage which gives the least number of headaches (at least for us) is something like the following (not tested completely!), backward compatible:\n\n\nWorkbook wb;\ntry{\n   wb = WorkbookFactory.create(fis);\n}catch (EncryptedDocumentException e) {\n   POIFSFileSystem fs = new POIFSFileSystem(fis);\n   EncryptionInfo info = new EncryptionInfo(fs);\n   Decryptor d = Decryptor.getInstance(info);\n   if(!d.verifyPassword(\"VelvetSweatshop\"))\n\tthrow new Exception(\"Please use WorkbookFactory.create(file, password) method and supply password\"); \n   InputStream decryptedDataStream = d.getDataStream(fs);\n   \n   OPCPackage pkg = OPCPackage.open(decryptedDataStream);\n   wb = new XSSFWorkbook(pkg);\n}\n\nAn additional method is to be implemented: org.apache.poi.ss.usermodel.WorkbookFactory.create(InputStream is, String password) - to supply additional password\n(it will not break the old code since it is additional functionality that had not been assumed before - to supply the password other from the default)\n\nThis is my current understanding (before looking into this more deeply)\n\nThanks!", "id": 181329, "time": "2015-02-25T14:38:41Z", "bug_id": 57593, "creation_time": "2015-02-25T14:38:41Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 57593, "text": "As of r1676853, overloaded WorkbookFactory.create methods which take a password have been added. Thanks for the idea!", "id": 182737, "time": "2015-04-29T20:36:50Z", "creator": "apache@gagravarr.org", "creation_time": "2015-04-29T20:36:50Z", "is_private": false, "attachment_id": null}]
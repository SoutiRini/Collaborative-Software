[{"count": 0, "tags": [], "creator": "apache@wheelhouse.org", "attachment_id": 34528, "text": "Created attachment 34528\nDon't dereference retained if it isn't set yet.\n\nIt seems like if signals are sent to an httpd process in a particular order/speed, Apache will segfault in mpm_event's ap_start_restart() function on the line:\n\nretained->is_graceful = graceful;\n\nThis behavior has been observed on a number of different systems at different times.\n\nWhen explored from gdb:\n\n#0  0x00000008019dd2cc in ap_start_restart (graceful=1) at event.c:696\n696\t    retained->is_graceful = graceful;\n[New Thread 802006400 (LWP 101541/<unknown>)]\nCurrent language:  auto; currently minimal\n(gdb) print retained\n$1 = (event_retained_data *) 0x0\n\nThe \"retained\" static variable is never explicitly set to NULL in the code.  It is only directly assigned in two places, both in event_pre_config():\n\n    retained = ap_retained_data_get(userdata_key);\n    if (!retained) {\n        retained = ap_retained_data_create(userdata_key, sizeof(*retained));\n\nThe processes that this happens to frequently crash after a couple of days, and they are the top-level run-as-root parent process, so it is not a case where the signal is coming in before the pointer has been allocated.\n\nThis doesn't appear to be related to receiving a restart signal while shutting down; gdb reports shutdown_pending is not set:\n\n(gdb) print shutdown_pending\n$1 = 0\n\nAccording to the call stack, this is happening from inside config parsing on the LoadModule directive for mpm_event:\n\n#0  0x00000008019dd2cc in ap_start_restart (graceful=1) at event.c:696\n#1  0x00000008019dd27f in restart (sig=30) at event.c:706\n#2  0x0000000801408b4a in pthread_sigmask () from /lib/libthr.so.3\n#3  0x0000000801407c08 in pthread_getspecific () from /lib/libthr.so.3\n#4  0x0000000801407abd in pthread_getspecific () from /lib/libthr.so.3\n#5  0x000000080140cbd7 in pthread_timedjoin_np () from /lib/libthr.so.3\n#6  0x00000008006c79fb in r_debug_state () from /libexec/ld-elf.so.1\n#7  0x00000008006cc437 in _rtld_is_dlopened () from /libexec/ld-elf.so.1\n#8  0x00000008006c8ea0 in dlopen () from /libexec/ld-elf.so.1\n#9  0x0000000800fc0b00 in apr_dso_load () from /usr/local/lib/libapr-1.so.0\n#10 0x0000000000493c40 in dso_load (cmd=0x7fffffffcfd0, \n    modhandlep=0x7fffffffca88, \n    filename=0x802095138 \"libexec/mod_mpm_event.so\", \n    used_filename=0x7fffffffca70) at mod_so.c:162\n#11 0x0000000000493705 in load_module (cmd=0x7fffffffcfd0, \n    dummy=0x7fffffffce80, modname=0x802095120 \"mpm_event_module\", \n    filename=0x802095138 \"libexec/mod_mpm_event.so\") at mod_so.c:263\n#12 0x0000000000478ef3 in invoke_cmd (cmd=0x4b5130, parms=0x7fffffffcfd0, \n    mconfig=0x7fffffffce80, args=0x80207b445 \"\") at config.c:923\n#13 0x00000000004799c0 in execute_now (cmd_line=0x80207b4e0 \"LoadModule\", \n    args=0x80207b41b \"mpm_event_module libexec/mod_mpm_event.so\", \n    parms=0x7fffffffcfd0, p=0x802021028, ptemp=0x80207b028, \n    sub_tree=0x7fffffffce80, parent=0x0) at config.c:1688\n\nThis makes me think that what is happening is that two restart signals are arriving in rapid succession.  The first initiates a restart, and then second requests a restart after the previous restart has begun but before event_pre_config() has initialized the retained variable in the newly-loaded mod_mpm_event.so.\n\nIf that's the case, then it may be sufficient simply to check retained before writing to it and just return if it is NULL (similar to what's done if restart_pending is already set).  If so, the (trivial) attached patch accomplishes that.\n\nHowever, if a NULL value for retained indicates that the server hasn't finished a previous restart, perhaps the check should be one line higher (above \"restart_pending = 1;\") to short-circuit the second restart completely.\n\nIt's also entirely possible that there's much more going on here and the NULL value for retained is indicative of a deeper problem.\n\nIf the simple solution is not the correct one, this is something I'm happy to look into further and work to fix if someone would be willing to shove me in the right direction.", "id": 195515, "time": "2016-12-16T06:25:19Z", "bug_id": 60487, "creation_time": "2016-12-16T06:25:19Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60487, "attachment_id": null, "id": 197050, "time": "2017-02-15T22:43:26Z", "creator": "jacob.perkins@cpanel.net", "creation_time": "2017-02-15T22:43:26Z", "is_private": false, "text": "A lot of our customers are starting to see this on their systems. Is there a chance we can get this looked at for 2.4.26?"}, {"count": 2, "text": "Thanks for the report and patch. \n\nDid you take some explicit efforts to get a SIGHUP/WINCH sent during the load of the module?  I am wondering if there is something else more likely to delay the startup in practice, perhaps in Jacob's env?\n\nIIUC the core issue is that despite the one weird comment that is 15+ years old, the signals for restart are not ignored while one is being processed / or when the MPM is unloaded (a much later invention for MPMS)\n\nI do think it's more likely you have back-to-back graceful signals and just ignoring the second is better.  Maybe a good sanity check would be to look for mpm_state == AP_MPMQ_STARTING when retained == NULL and no-op'ing it altogether.  An even safer option might be to only handle the graceful flavors w/ the new block, to avoid the chance a hard stop or hard restart is ignored if we're missing something?", "bug_id": 60487, "is_private": false, "id": 197052, "time": "2017-02-16T01:30:36Z", "creator": "covener@gmail.com", "creation_time": "2017-02-16T01:30:36Z", "tags": [], "attachment_id": null}, {"count": 3, "text": "\"Did you take some explicit efforts to get a SIGHUP/WINCH sent during the load of the module?\"\n\nNo, unfortunately, it rears its ugly head all on its own.\n\n\"I am wondering if there is something else more likely to delay the startup in practice, perhaps in Jacob's env?\"\n\nThere's no overlap between Jacob P and I, so I can't speak for him, but our environments definitely don't overlap.  (I.e. there is no cPanel in my environment.)\n\n\"I do think it's more likely you have back-to-back graceful signals and just ignoring the second is better.  Maybe a good sanity check would be to look for mpm_state == AP_MPMQ_STARTING when retained == NULL and no-op'ing it altogether.  An even safer option might be to only handle the graceful flavors w/ the new block, to avoid the chance a hard stop or hard restart is ignored if we're missing something?\"\n\nThese are good points.\n\nIf I understand this correctly, basically ap_start_restart() is getting called at the wrong time.  It expects to be called after \"retained\" is initialized, but it's getting called before that.  That happens because the second restart happens before the first restart has finished initializing it.\n\nIn other words, ap_start_restart() is getting called when the server hasn't started.  So the patch I provided might really be addressing the effect, not the cause.\n\nIt seems like a \"correct\" fix would cause ap_start_restart() not to be called when the server hasn't been started, either by deferring the 2nd restart until the first one is done or by ignoring it completely.\n\nSo, the types of safer/sanity checks you're talking about... would they possibly be best-positioned higher up in the code?  If so, would that be in the core, or is there something specific to mpm_event that isn't re-restarting properly?", "bug_id": 60487, "is_private": false, "id": 197082, "time": "2017-02-16T19:49:38Z", "creator": "apache@wheelhouse.org", "creation_time": "2017-02-16T19:49:38Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 60487, "text": "Howdy,\n\nOn our customers servers, both backtraces involve a signal to gracefully restart interrupting Apache while it is processing the configuration file in various places.\n\nWe've been able to replicate this when gracefully restarting under mpm_worker multiple times in a row with an extremely large httpd configuration (10k-20k vhosts+).\n\nI hope this helps!", "id": 197083, "time": "2017-02-16T20:10:29Z", "creator": "jacob.perkins@cpanel.net", "creation_time": "2017-02-16T20:10:29Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "apache@wheelhouse.org", "is_private": false, "count": 5, "id": 197084, "time": "2017-02-16T20:15:31Z", "bug_id": 60487, "creation_time": "2017-02-16T20:15:31Z", "text": "Jacob, is it alright if I contact you directly to discuss the issues you're seeing?  We're having two restart-related segfault problems, this is one and we haven't reported the other yet due to insufficient information -- it's much squirrelier.\n\nFrom what you describe, I have a hunch you're also seeing the other problem, and I'd like to compare notes without derailing this report if (as I suspect) it turns out to be a second, unrelated issue."}, {"count": 6, "tags": [], "bug_id": 60487, "attachment_id": null, "text": "Hi Jeff,\n\nAbsolutely. jacob.perkins@cpanel.net, or Perk on #freenode. I might be available a little later this afternoon, or tomorrow.\n\nThanks!", "id": 197086, "time": "2017-02-16T20:51:06Z", "creator": "jacob.perkins@cpanel.net", "creation_time": "2017-02-16T20:51:06Z", "is_private": false}, {"count": 7, "text": "(In reply to Eric Covener from comment #2)\n> \n> Maybe a good sanity check would be to look\n> for mpm_state == AP_MPMQ_STARTING when retained == NULL and no-op'ing it\n> altogether.  An even safer option might be to only handle the graceful\n> flavors w/ the new block, to avoid the chance a hard stop or hard restart is\n> ignored if we're missing something?\n\nI think we should avoid touching anything scoped/static to the mpm module (dso) in a signal handler, otherwise any signal delivered while the module is unloaded might raise the fault.\n\nThat is: mpm_state, shutdown_pending, restart_pending and retained.\n\nHow about allocating them (in a struct) from ap_pglobal?", "bug_id": 60487, "attachment_id": null, "id": 197088, "time": "2017-02-16T21:45:22Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-02-16T21:45:22Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 60487, "text": "(In reply to Yann Ylavic from comment #7)\n> (In reply to Eric Covener from comment #2)\n> > \n> > Maybe a good sanity check would be to look\n> > for mpm_state == AP_MPMQ_STARTING when retained == NULL and no-op'ing it\n> > altogether.  An even safer option might be to only handle the graceful\n> > flavors w/ the new block, to avoid the chance a hard stop or hard restart is\n> > ignored if we're missing something?\n> \n> I think we should avoid touching anything scoped/static to the mpm module\n> (dso) in a signal handler, otherwise any signal delivered while the module\n> is unloaded might raise the fault.\n> \n> That is: mpm_state, shutdown_pending, restart_pending and retained.\n> \n> How about allocating them (in a struct) from ap_pglobal?\n\nI assumed we wouldn't be able to enter the static functions that touch the static variables, but I guess better safe than sorry.", "id": 197089, "time": "2017-02-16T21:54:06Z", "creator": "covener@gmail.com", "creation_time": "2017-02-16T21:54:06Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "(In reply to Eric Covener from comment #8)\n> (In reply to Yann Ylavic from comment #7)\n> > (In reply to Eric Covener from comment #2)\n> > > \n> > > Maybe a good sanity check would be to look\n> > > for mpm_state == AP_MPMQ_STARTING when retained == NULL and no-op'ing it\n> > > altogether.  An even safer option might be to only handle the graceful\n> > > flavors w/ the new block, to avoid the chance a hard stop or hard restart is\n> > > ignored if we're missing something?\n> > \n> > I think we should avoid touching anything scoped/static to the mpm module\n> > (dso) in a signal handler, otherwise any signal delivered while the module\n> > is unloaded might raise the fault.\n> > \n> > That is: mpm_state, shutdown_pending, restart_pending and retained.\n> > \n> > How about allocating them (in a struct) from ap_pglobal?\n> \n> I assumed we wouldn't be able to enter the static functions that touch the\n> static variables, but I guess better safe than sorry.\n\nalthough safer still might be ignoring those signals until an MPM can come back up?", "id": 197090, "time": "2017-02-16T21:57:07Z", "bug_id": 60487, "creation_time": "2017-02-16T21:57:07Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 60487, "attachment_id": null, "text": "(In reply to Eric Covener from comment #9)\n> > I assumed we wouldn't be able to enter the static functions that touch the\n> > static variables, but I guess better safe than sorry.\n\nRight, though the signals handlers (which look very similar if not exactly the same for all *nix MPMs) and the associated globals could possibly live in a static (non DSO) place too.\n\n> \n> although safer still might be ignoring those signals until an MPM can come\n> back up?\n\nWe might miss a shutdown/restart while restarting (this is case case already currently since the _pending variables are reset in pre_config), but I think we could avoid that too.", "id": 197091, "time": "2017-02-16T22:18:30Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-02-16T22:18:30Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 60487, "is_private": false, "text": "After reading the source code at some length, I think I'm getting it now.  Just to see if I'm following along...\n\n- httpd goes through the config file twice in its main loop, once (ap_read_config) is a pre-scan to build up a list of modules, hooks, the config tree, etc, and a second time (ap_process_config_tree) to actually configure.\n\n- Registered pre_config hooks are called after ap_read_config finishes and before ap_process_config_tree.\n\n- The MPM's \"retained\" variable is initialized in its pre_config hook.\n\n- If a restart signal arrives anytime after the MPM has been loaded in ap_read_config and before the MPM's pre_config hook is called, its \"retained\" variable will never have been initialized.\n\n- The uninitialized \"retained\" variables is a \"lucky\" NULL (rather than purely undefined) due to being a static variable a dlopen()'d module.\n\n- The NULL value leads to this crash.\n\n- Jacob's case is exercising the crash because it involves a huge config file and the MPM directive is probably very near the top, maximizing the window during which signals will have this effect, possibly to many seconds.\n\n- My case is exercising the crash frequently because my environment causes two restart signals to arrive unusually close together under certain circumstances.\n\nIs all of that correct?\n\nThanks!", "id": 197132, "time": "2017-02-17T23:08:06Z", "creator": "apache@wheelhouse.org", "creation_time": "2017-02-17T23:08:06Z", "attachment_id": null}, {"attachment_id": 34764, "tags": [], "creator": "ylavic.dev@gmail.com", "is_private": false, "count": 12, "id": 197133, "time": "2017-02-17T23:32:54Z", "bug_id": 60487, "creation_time": "2017-02-17T23:32:54Z", "text": "Created attachment 34764\nStatic (common) signal handling for *nix MPMs\n\nThis patch seems to work for me.\n\nI could reproduce the issue (with it applied) by adding a sleep() in the main() loop."}, {"attachment_id": null, "tags": [], "creator": "covener@gmail.com", "text": "(In reply to Yann Ylavic from comment #12)\n> Created attachment 34764 [details]\n> Static (common) signal handling for *nix MPMs\n> \n> This patch seems to work for me.\n> \n> I could reproduce the issue (with it applied) by adding a sleep() in the\n> main() loop.\n\nLooks good, one caveat\nstatic unixd: sles12 and ubuntu\nshared unixd: RHEL7, my developer builds (and the commercial distro I maintain)\n\nSo w/o the removal of the signal handlers during reload I think we still need to be more careful about retained_data access", "count": 13, "id": 197149, "time": "2017-02-18T23:30:41Z", "bug_id": 60487, "creation_time": "2017-02-18T23:30:41Z", "is_private": false}, {"count": 14, "text": "(In reply to Eric Covener from comment #13)\n> \n> Looks good, one caveat\n> static unixd: sles12 and ubuntu\n> shared unixd: RHEL7, my developer builds (and the commercial distro I\n> maintain)\n\nHmm, this is about mod_unixd right?\nMy patch's helpers/handlers are in \"os/unix/unixd.c\", hence statically loaded no?\n\n(In reply to Yann Ylavic from comment #12)\n> \n> I could reproduce the issue (with it applied) by adding a sleep()\n\nI meant *without* the patch applied, i.e. no crash with the patch (even with dynamic mod_unixd).\n\n\nPS: I've got a v2 already (if v1 is acceptable), we could set handlers only once at startup now. I still need to test restarts with different MPMs (e.g. event<=>worker<=>prefork<=>motorz should work normally).", "bug_id": 60487, "attachment_id": null, "id": 197153, "time": "2017-02-19T19:16:40Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-02-19T19:16:40Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 197154, "time": "2017-02-19T19:27:06Z", "bug_id": 60487, "creation_time": "2017-02-19T19:27:06Z", "text": "> Hmm, this is about mod_unixd right?\n> My patch's helpers/handlers are in \"os/unix/unixd.c\", hence statically\n> loaded no?\n\nmy mistake. Seems like a good plan to me w/ the de-duplication"}, {"count": 16, "tags": [], "bug_id": 60487, "is_private": false, "text": "Committed to trunk (r1783849).", "id": 197177, "time": "2017-02-21T09:27:14Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-02-21T09:27:14Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "ylavic.dev@gmail.com", "is_private": false, "count": 17, "id": 199021, "time": "2017-06-02T11:00:35Z", "bug_id": 60487, "creation_time": "2017-06-02T11:00:35Z", "text": "Backported to 2.4.26 in r1797368."}, {"count": 18, "text": "*** Bug 60189 has been marked as a duplicate of this bug. ***", "bug_id": 60487, "is_private": false, "id": 199394, "time": "2017-06-25T12:41:23Z", "creator": "covener@gmail.com", "creation_time": "2017-06-25T12:41:23Z", "tags": [], "attachment_id": null}]
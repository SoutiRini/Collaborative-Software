[{"count": 0, "tags": [], "bug_id": 57544, "text": "\"uniwar-exec-18\" #59 daemon prio=5 os_prio=0 tid=0x000000000096a000 nid=0x58da runnable [0x000000004457c000]\n   java.lang.Thread.State: RUNNABLE\n        at org.apache.coyote.http11.AbstractInputBuffer.nextRequest(AbstractInputBuffer.java:298)\n        at org.apache.coyote.http11.AbstractNioInputBuffer.nextRequest(AbstractNioInputBuffer.java:150)\n        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1152)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)\n        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)\n        - locked <0x00000006771385a8> (a org.apache.tomcat.util.net.NioChannel)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)", "id": 180832, "time": "2015-02-06T17:36:06Z", "creator": "xavier.kral@gmail.com", "creation_time": "2015-02-06T17:36:06Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 57544, "text": "We have a dedicated self-managed server running Ubuntu with Java 8 and Tomcat. That's all. Since we upgraded from Tomcat 7 to Tomcat 8.0.18, the server CPU cores becomes maxed out after a dozen of hours. The server has a light load (5 requests per seconds). There are plenty of memory available which seem to exclude the possibility that the GC is taking all the CPU time.\n\nExample of normal CPU usage (Tomcat 7 and Tomcat 8 during first hours)\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND                           CURRENT TIME\nroot     21902  6.7 16.9 5131664 1391624 ?     Sl   Feb01 336:48 /usr/lib/jvm/jdk1.8.0_25/bin/java 09:48 Feb-5\n\nExample of ABNORMAL CPU usage, notice the 101% instead of 6% (Tomcat 8.0.18 after a dozen of hours)\nroot     22675  101 19.2 8339292 1574312 pts/0 Sl   Feb05 720:49 /usr/lib/jvm/jdk1.8.0_25/bin/java\n\n$java -version\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\nWhen doing a jstack, notice that 2 of the executor threads NEVER change, many other executor threads are added and removed as expected but these 2 RUNNABLE threads seem to be blocked in an infinite loop in AbstractInputBuffer.nextRequest(AbstractInputBuffer.java:298)\n$jstack 22675 | grep runnable\nABNORMAL==>\"uniwar-exec-18\" #59 daemon prio=5 os_prio=0 tid=0x000000000096a000 nid=0x58da runnable [0x000000004457c000]\nABNORMAL==>\"uniwar-exec-10\" #50 daemon prio=5 os_prio=0 tid=0x00007fb945175800 nid=0x58d1 runnable [0x0000000043c73000]\n\"http-nio-8080-Acceptor-0\" #40 daemon prio=5 os_prio=0 tid=0x00007fb955838000 nid=0x58c8 runnable [0x000000004336a000]\n\"http-nio-8080-ClientPoller-1\" #39 daemon prio=5 os_prio=0 tid=0x00007fb95598a000 nid=0x58c7 runnable [0x0000000043269000]\n\"http-nio-8080-ClientPoller-0\" #38 daemon prio=5 os_prio=0 tid=0x00007fb955989000 nid=0x58c6 runnable [0x0000000043168000]\n\"ObjectServerDaemon\" #35 daemon prio=5 os_prio=0 tid=0x0000000002d28000 nid=0x58c3 runnable [0x0000000042f66000]\n\"UniWarServerDaemon\" #34 daemon prio=5 os_prio=0 tid=0x0000000002d25800 nid=0x58c2 runnable [0x0000000042e65000]\n\"NioBlockingSelector.BlockPoller-1\" #15 daemon prio=5 os_prio=0 tid=0x00007fb95449f000 nid=0x58ad runnable [0x00000000404a9000]\n\"Service Thread\" #10 daemon prio=9 os_prio=0 tid=0x00007fb954127800 nid=0x58a9 runnable [0x0000000000000000]\n\"Signal Dispatcher\" #5 daemon prio=9 os_prio=0 tid=0x00007fb954107800 nid=0x58a4 runnable [0x0000000000000000]\n\"main\" #1 prio=5 os_prio=0 tid=0x000000000060c800 nid=0x5894 runnable [0x000000004078c000]\n\"VM Thread\" os_prio=0 tid=0x00007fb9540c6800 nid=0x58a0 runnable\n\"Gang worker#0 (Parallel GC Threads)\" os_prio=0 tid=0x000000000061d800 nid=0x5895 runnable\n\"Gang worker#1 (Parallel GC Threads)\" os_prio=0 tid=0x000000000061f800 nid=0x5896 runnable\n\"Gang worker#2 (Parallel GC Threads)\" os_prio=0 tid=0x0000000000621000 nid=0x5897 runnable\n\"Gang worker#3 (Parallel GC Threads)\" os_prio=0 tid=0x0000000000623000 nid=0x5898 runnable\n\"Gang worker#4 (Parallel GC Threads)\" os_prio=0 tid=0x00007fb954001800 nid=0x5899 runnable\n\"Gang worker#5 (Parallel GC Threads)\" os_prio=0 tid=0x00007fb954003800 nid=0x589a runnable\n\"Gang worker#6 (Parallel GC Threads)\" os_prio=0 tid=0x00007fb954005000 nid=0x589b runnable\n\"Gang worker#7 (Parallel GC Threads)\" os_prio=0 tid=0x00007fb954007000 nid=0x589c runnable\n\"Concurrent Mark-Sweep GC Thread\" os_prio=0 tid=0x00007fb954078000 nid=0x589f runnable\n\"Gang worker#0 (Parallel CMS Threads)\" os_prio=0 tid=0x00007fb954074800 nid=0x589d runnable\n\"Gang worker#1 (Parallel CMS Threads)\" os_prio=0 tid=0x00007fb954076000 nid=0x589e runnable\n\nThe command below is to exclude the possibility that the GC is overloaded.\n$jmap -heap 22675\nAttaching to process ID 22675, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.25-b02\n\nusing parallel threads in the new generation.\nusing thread-local object allocation.\nConcurrent Mark-Sweep GC\n\nHeap Configuration:\n   MinHeapFreeRatio         = 40\n   MaxHeapFreeRatio         = 70\n   MaxHeapSize              = 6442450944 (6144.0MB)\n   NewSize                  = 697892864 (665.5625MB)\n   MaxNewSize               = 697892864 (665.5625MB)\n   OldSize                  = 375848960 (358.4375MB)\n   NewRatio                 = 2\n   SurvivorRatio            = 8\n   MetaspaceSize            = 21807104 (20.796875MB)\n   CompressedClassSpaceSize = 1073741824 (1024.0MB)\n   MaxMetaspaceSize         = 17592186044415 MB\n   G1HeapRegionSize         = 0 (0.0MB)\n\nHeap Usage:\nNew Generation (Eden + 1 Survivor Space):\n   capacity = 628162560 (599.0625MB)\n   used     = 529591368 (505.0576858520508MB)\n   free     = 98571192 (94.00481414794922MB)\n   84.30801224447379% used\nEden Space:\n   capacity = 558432256 (532.5625MB)\n   used     = 514006808 (490.1950912475586MB)\n   free     = 44425448 (42.367408752441406MB)\n   92.04461283841025% used\nFrom Space:\n   capacity = 69730304 (66.5MB)\n   used     = 15584560 (14.862594604492188MB)\n   free     = 54145744 (51.63740539550781MB)\n   22.349766322544642% used\nTo Space:\n   capacity = 69730304 (66.5MB)\n   used     = 0 (0.0MB)\n   free     = 69730304 (66.5MB)\n   0.0% used\nconcurrent mark-sweep generation:\n   capacity = 556462080 (530.68359375MB)\n   used     = 11588848467912 MB\n   free     = 6294955703176142416 (6.003337577034133E12MB)\n   -1.131246122398795E12% used\n\n27262 interned Strings occupying 3141208 bytes.", "id": 180833, "time": "2015-02-06T17:49:32Z", "creator": "xavier.kral@gmail.com", "creation_time": "2015-02-06T17:49:32Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57544, "text": "Created attachment 32438\nTo configure the JVM JDK 1.8 running Tomcat 8.0.18", "id": 180834, "time": "2015-02-06T17:50:45Z", "creator": "xavier.kral@gmail.com", "creation_time": "2015-02-06T17:50:45Z", "is_private": false, "attachment_id": 32438}, {"count": 3, "tags": [], "bug_id": 57544, "is_private": false, "text": "Created attachment 32439\nMinimum configuration of the webapp that exhibits the issue", "id": 180835, "time": "2015-02-06T17:52:00Z", "creator": "xavier.kral@gmail.com", "creation_time": "2015-02-06T17:52:00Z", "attachment_id": 32439}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Yep. If you enter that loop with pos == 0 it is going to enter an infinite loop.\n\nThe loop doesn't need to be there anyway. System.arrayCopy() is smart enougth to handle the problem the loop is trying to avoid.", "id": 180836, "time": "2015-02-06T17:53:32Z", "bug_id": 57544, "creation_time": "2015-02-06T17:53:32Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 57544, "is_private": false, "text": "This has been fixed in trunk (9.0.x development), 8.0.x for 8.0.19 onwards and 7.0.x for 7.0.60 onwards.", "id": 180837, "time": "2015-02-06T18:03:54Z", "creator": "markt@apache.org", "creation_time": "2015-02-06T18:03:54Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "neet.musafir@gmail.com", "text": "hey mark, upgraded tomcat from 6.0. to  7.0.57 and now cpu sarts  spiking few hrs after tomcat startup....how can i verify if its hit by bug#57544..\n\nregards,ne", "id": 184607, "time": "2015-08-17T17:16:40Z", "bug_id": 57544, "creation_time": "2015-08-17T17:16:40Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "hauser@acm.org", "is_private": false, "id": 196017, "attachment_id": null, "bug_id": 57544, "creation_time": "2017-01-12T12:18:05Z", "time": "2017-01-12T12:18:05Z", "text": "see also Bug 60578"}, {"count": 8, "attachment_id": null, "creator": "markt@apache.org", "text": "*** Bug 60578 has been marked as a duplicate of this bug. ***", "id": 196021, "time": "2017-01-12T13:25:38Z", "bug_id": 57544, "creation_time": "2017-01-12T13:25:38Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "markt@apache.org", "text": "*** Bug 60581 has been marked as a duplicate of this bug. ***", "id": 196043, "attachment_id": null, "bug_id": 57544, "creation_time": "2017-01-12T17:34:54Z", "time": "2017-01-12T17:34:54Z", "is_private": false}]
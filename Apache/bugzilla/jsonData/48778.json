[{"count": 0, "tags": [], "bug_id": 48778, "attachment_id": null, "text": "Initially reported in http://marc.info/?l=log4j-dev&m=122893058812874&w=2\n\nThis reason for the disparity has not been determined.  I would suspect that passing an int as the parameter might trigger some more expensive localized formatting than the equivalent SLF4J call.  It would be interesting to retry the benchmark using a String instead of an int to see if the effect is dependent on the type of the parameter.  Any profiling would also be helpful to determine the source of the performance difference.", "id": 134696, "time": "2010-02-19T14:08:08Z", "creator": "carnold@apache.org", "creation_time": "2010-02-19T14:08:08Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 48778, "text": "Earlier benchmarks referenced in thread referenced in original bug report.\n\nhttp://marc.info/?l=log4j-dev&m=113719664927002&w=2\nhttp://marc.info/?l=log4j-dev&m=113753508714633&w=2\n\nI think these are more concerned about the performance difference between\n\nLogSF.info(logger,\"A {} rang out\", \"bell\");\n\nand\n\n\nLogMF.info(logger,\"A {0} rang out\", \"bell\");\n\n\nHowever, it would be good to review.", "id": 134697, "time": "2010-02-19T14:23:14Z", "creator": "carnold@apache.org", "creation_time": "2010-02-19T14:23:14Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 48778, "text": "The performance different does appear to be specific to requests that contain either a Number or a Date as a parameter.\n\nThe bottleneck fragment  was:\n\n                    if (arg0 instanceof String) {\n                        replacement = arg0.toString();\n                    } else if (arg0 instanceof Number) {\n                        replacement = NumberFormat.getInstance().format(arg0);\n                    } else if (arg0 instanceof Date) {\n                        replacement = DateFormat.getDateTimeInstance(\n                                DateFormat.SHORT,\n                                DateFormat.SHORT).format(arg0);\n                    } else {\n                        replacement = String.valueOf(arg0);\n                    }\n\nIf the formatted value was a Integer, the call to NumberFormat.getInstance() took 75% of the time in format(), while NumberFormat.format() took 16%.  All the other code in this section was negligible.\n\nCaching the result from NumberFormat.getInstance() eliminated the per-call hit for NumberFormat.getInstance() though it is still expensive the first time the formatter is obtained without any detectable per-call hit for the synchronization.\n\nThe call to NumberFormat.format() is roughly 5 times more expensive than the functionally equivalent call to String.valueOf().  The functions appear to return the same string for smaller integers, however they return different formatted values for doubles.  The committed code uses the cached NumberFormat if the parameter is a double or float and falls through to String.valueOf() for the other number types.  It is possible this results in LogMF not returning exactly the same formatted string as MessageFormat for some values or for some locales, but it seems like a reasonable optimization.\n\nDate's had a similar performance profile, the call to DateFormat.getDateTimeInstance() was 85% of time in format(), 12% of time was spent in DateFormat.format().  String.valueOf() does not return the same value as DateFormat or MessageFormatter, so any date type is handled by DateFormat. \n\nWhen recreated the original benchmark report before the changes, I got:\n\nLogMF (old): 3632\nLogMF (new): 501 \nSLF4J: 748\nLogSF: 720\n\nReplacing Integer x with String x:\n\nLogMF (old): 321\nLogMF (new): 272\nSLF4J: 510\nLogSF: 628\n\nReplacing Integer x with Date x:\n\nLogMF (old): 7212\nLogMF (new): 2340\nSLF4J: 834\nLogSF: 1067\n\nReplacing Integer x with Double x:\n\nLogMF (old): 4585\nLogMF (new): 1232\nSLF4J: 1001\nLogSF: 567\n\n \nnew = rev 922699\nold = rev 922698\n\n\nWhile there are other enhancements I expect to do on LogMF and LogSF shortly, caching NumberFormats and DateFormats gets LogMF comparable to SLF4J except for dates and doubles which should be rare enough that the hit is tolerable.  If it isn't, you can always use LogSF for those calls.", "id": 135325, "time": "2010-03-14T01:50:00Z", "creator": "carnold@apache.org", "creation_time": "2010-03-14T01:50:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48778, "text": "Hi dude,\n\nI find that this problem can be found in many other Apache Projects.\n\nNumberFormat.getInstance:\n ./hadoop-0.21.0/mapred/src/java/org/apache/hadoop/mapred/FileOutputFormat.java line: 285\n./pig-0.8.0/contrib/piggybank/java/src/main/java/org/apache/pig/piggybank/storage/MultiStorage.java line: 241\n./apache-oodt-0.1-incubating-src/workflow/src/main/java/org/apache/oodt/cas/workflow/lifecycle/WorkflowLifecycleManager.java  line: 146\n./apache-nutch-1.2/src/java/org/apache/nutch/util/TimingUtil.java   line: 44\n./apache-ofbiz-10.04/framework/webapp/src/org/ofbiz/webapp/taglib/FormatTag.java   line: 78\n\nDateFormat.getDateTimeInstance\n./hadoop-0.21.0/hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java   line:1520\n./jackrabbit-2.2.2/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventJournalImpl.java   line:356  It\u2019s in the critical section, so it\u2019s more serious\n\n./apache-ant-1.8.2/src/main/org/apache/tools/ant/taskdefs/Touch.java line:75\nit uses a factory to generate the date format, and each time a date format is created\n./apache-ant-1.8.2/src/main/org/apache/tools/ant/types/resources/selectors/Date.java  line: 141\n./apache-ant-1.8.2/src/main/org/apache/tools/ant/types/selectors/DateSelector.java line :214\n./apache-ant-1.8.2/src/main/org/apache/tools/ant/DefaultLogger.java  line:365\n./apache-lenya-2.0.3-src/externals/cocoon_2_1_x/src/blocks/profiler/java/org/apache/cocoon/generation/ProfilerGenerator.java line:191\n./apache-lenya-2.0.3-src/externals/cocoon_2_1_x/src/java/org/apache/cocoon/generation/StatusGenerator.java   line:255\n./apache-ofbiz-10.04/framework/base/src/org/ofbiz/base/util/UtilDateTime.java line:702\n./apache-ofbiz-10.04/framework/base/src/org/ofbiz/base/util/UtilFormatOut.java line:314\n./openwebbeans-1.0.0/webbeans-impl/src/main/java/org/apache/webbeans/util/ClassUtil.java line: 1598\n./apache-pivot-2.0-src/tutorials/src/org/apache/pivot/tutorials/stocktracker/StockTrackerWindow.java  line:363\n./apache-pivot-2.0-src/wtk-terra/src/org/apache/pivot/wtk/skin/terra/TerraFileBrowserSkin.java \nline:281\n\n\n(In reply to comment #0)\n> Initially reported in http://marc.info/?l=log4j-dev&m=122893058812874&w=2\n> \n> This reason for the disparity has not been determined.  I would suspect that\n> passing an int as the parameter might trigger some more expensive localized\n> formatting than the equivalent SLF4J call.  It would be interesting to retry\n> the benchmark using a String instead of an int to see if the effect is\n> dependent on the type of the parameter.  Any profiling would also be helpful to\n> determine the source of the performance difference.", "id": 143962, "time": "2011-02-03T14:46:02Z", "creator": "xiaoming@cs.wisc.edu", "creation_time": "2011-02-03T14:46:02Z", "is_private": false, "attachment_id": null}]
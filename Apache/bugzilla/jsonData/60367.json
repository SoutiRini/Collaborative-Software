[{"count": 0, "tags": [], "bug_id": 60367, "is_private": false, "id": 194958, "creation_time": "2016-11-13T23:10:37Z", "time": "2016-11-13T23:10:37Z", "creator": "6s4vpwuprk@snkmail.com", "text": "If I have a method in a Java class\npublic String doSomething(Boolean bValue, String sValue)\n\nand I call this method from a JSP using\n${myobject.doSomething(null, null)}\n\nthen the method is called with bValue being null, sValue being \"\".\n\nThis surprising behavior is caused by line 523 in http://svn.apache.org/repos/asf/tomcat/tc9.0.x/branches/gsoc-jaspic/java/org/apache/el/lang/ELSupport.java\n\nThe code there looks like this:\n        if (!COERCE_TO_ZERO) {\n            if (obj == null && !type.isPrimitive() &&\n                    !String.class.isAssignableFrom(type)) {\n                return null;\n            }\n        }\n\nIt isn't quite obvious to me why Strings are excluded from being returned as null while all other types are allowed to pass as null.\n\nFor me currently this is more than an academic question or just a remarkable oddity in Tomcat as I'm experiencing serious trouble implementing what I want when I'm unable to give a String parameter as null. Some methods explicitly expect to receive null in order to indicate something particular. It doesn't feel like good design if I have to write an own wrapper around all these cases with something like\n\npublic String doSomethingHack(Boolean bValue, String sValue)\n{\n   if (sValue!=null && sValue.isEmpty()) sValue=null;\n   ref.doSomething(bValue, sValue);\n}\n\n\nThere is no comment about why there is this hard-coded exclusion for one arbitrary type in line 523.\n\nPlease kindly review this and consider a more consistent solution.\nCOERCE_TO_ZERO should either work for all types or none, but there shouldn't be any specialties.\nI necessary provide separate configuration for Strings COERCE_TO_EMPTY_STRING although I would not consider this type of granularity good design.\n\nMaybe the current behavior was chosen in order to avoid NPEs for some other use cases, but these issues should be solved where values are read. The default behavior in ELSupport.java should be that all values pass through as given as long as types fit and unless configured otherwise.", "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "See https://java.net/jira/browse/EL_SPEC-18", "id": 194961, "time": "2016-11-14T08:58:04Z", "bug_id": 60367, "creation_time": "2016-11-14T08:58:04Z", "is_private": false}]
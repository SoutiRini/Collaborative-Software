[{"count": 0, "tags": [], "bug_id": 42772, "attachment_id": null, "id": 104858, "time": "2007-06-28T09:27:17Z", "creator": "hauser@acm.org", "creation_time": "2007-06-28T09:27:17Z", "is_private": false, "text": "A javamail service is used as an daemon via an /etc/init.d script.\nJavamail trace sends debug to stdout or stderr.\ninit.d scripts normally suppress stdout and stderr, but use things like\nRollingFileAppender.\n\nThere is \n  javax.mail.Session.setDebugOut(PrintStream arg0)\nmethod I could use to redirect the javamail debug output into log4j as well.\n\nPreferrably, I would in the class where where I setup the javamail session take\nthe logger, inspect its appenders and then have the session's DebugOut use that too.\n\nUnfortunately, it appears that the suggested method is missing.\n\nI see http://logging.apache.org/log4j/docs/faq.html#3.3 for multiple processes\nto the same file, in the current case, this appears to be an overkill since it\nis definitely the same process, most likely even the same thread."}, {"count": 1, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "text": "bill.shannon@sun.com from the javamail project:\nIn GlassFish there's a special OutputStream I wrote that takes the debug output\nand turns it into calls to the java.util.logging.Logger API.  It's not that hard\nto do.\n\nYou can also modify your init script to redirect stdout to a file when running\nyour program.\n", "id": 104861, "time": "2007-06-28T11:33:08Z", "bug_id": 42772, "creation_time": "2007-06-28T11:33:08Z", "is_private": false}, {"count": 2, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "text": "see\nhttps://glassfish.dev.java.net/source/browse/glassfish/appserv-core/src/java/com/sun/enterprise/naming/LogOutputStream.java?rev=1.4&view=markup\nor\nglassFish:appserv-core/src/java/com/sun/enterprise/naming/MailLogOutputStream.java\n", "id": 105018, "time": "2007-07-02T22:40:11Z", "bug_id": 42772, "creation_time": "2007-07-02T22:40:11Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 42772, "attachment_id": null, "id": 106990, "time": "2007-08-21T15:05:23Z", "creator": "carnold@apache.org", "creation_time": "2007-08-21T15:05:23Z", "is_private": false, "text": "It would be difficult to do for general use.  You would not want to directly pipe content to an Appender \nsince it would bypass the synchronization code that is in the event dispatching.  A better approach would \nbe to pipe an PrintStream and have it creating logging events that are then sent to a logger, but you would \nneed to be able to customize the target logger, the level for the event, when to create an event (once per \nline, once at stream closing, on particular keywords).  Nothing prevents you from writing that code (like \nthe Glassfish project did), but until the code is generally useful it shouldn't go in log4j itself. "}]
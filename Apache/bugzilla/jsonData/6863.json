[{"count": 0, "tags": [], "bug_id": 6863, "attachment_id": null, "id": 11453, "time": "2002-03-04T22:39:23Z", "creator": "sgarje@cccis.com", "creation_time": "2002-03-04T22:39:23Z", "is_private": false, "text": "Hi\nI am using the code shown below. The \"xmlFile\" is an argument of type File to \nthe method where this code is executed. Once this method completes I am calling \nxmlFile.delete (); The problem is that the file does not get deleted and the \nboolean returned by the xmlFile.delete method is false. I am guessing that \neither the render or the InputHandler are not closing the file stream, hence it \nis not closing the file. If I comment the call to this method where I do the \nXSL processing, I can delete the XML file successfully; so it is not related to \nfile permissions etc.\n\n\n Driver driver = new Driver();\n            driver.setRenderer(Driver.RENDER_PDF);\n\t\t        \n            File xslFile = new File (xslFileName);\n            InputHandler inputHandler = new XSLTInputHandler(xmlFile, xslFile);\n            XMLReader parser = inputHandler.getParser();   \n          \n            driver.setOutputStream(out);\t\t\t\n            driver.render(parser, inputHandler.getInputSource());\n            driver.reset();"}, {"count": 1, "tags": [], "bug_id": 6863, "attachment_id": null, "id": 11458, "time": "2002-03-05T00:05:23Z", "creator": "sgarje@cccis.com", "creation_time": "2002-03-05T00:05:23Z", "is_private": false, "text": "It appears that this is happening only on Windows (I am running Win2000).\nI deployed the exact same war file on Unix and the file got deleted fine and \nthe return value from the File.delete method was true. Also I added debug in my \ncode and found that I could delete the XML file fine on Windows just before the \nline where I call driver.render(parser, inputHandler.getInputSource());\nIf I call delete immediately after this call to render the delete does not \nsucceed.\n\nSince our deplyment platform is Unix I am lowering the severity."}, {"count": 2, "tags": [], "text": "When embedding the embedder code is responsible for closing streams.", "attachment_id": null, "id": 13739, "creator": "keiron@aftexsw.com", "time": "2002-04-16T09:17:13Z", "bug_id": 6863, "creation_time": "2002-04-16T09:17:13Z", "is_private": false}, {"count": 3, "tags": [], "creator": "sgarje@cccis.com", "is_private": false, "text": "Created attachment 1607\nSample code that I am using", "id": 13899, "time": "2002-04-17T20:22:42Z", "bug_id": 6863, "creation_time": "2002-04-17T20:22:42Z", "attachment_id": 1607}, {"count": 4, "tags": [], "bug_id": 6863, "text": "Created attachment 1608\nSample code that I am using", "id": 13902, "time": "2002-04-17T20:29:35Z", "creator": "sgarje@cccis.com", "creation_time": "2002-04-17T20:29:35Z", "is_private": false, "attachment_id": 1608}, {"count": 5, "tags": [], "text": "I attached my sample source Java code that I am using.I did not know that \nattaching it would actually send you an -email so you may have received the \nsample code in an earlier e-mail too.\nAs you can see I creating an XML file and passing it as an argument to my \nmethod called \"generatePDF\". I pass that File object as an argument to the \nconstructor of XSLTInputHandler, then I perform the FOP conversion. Then in the \nfinally clause of the \"print\" method I am deleting the XML file since I no \nlonger need it. I have been noticing that the \"delete\" method in the File class \nhas been returning true (successful) on Unix but has been returning false \n(Failed) on NT. Also the file itself is actually deleted on Unix but not \ndeleted on NT. I thought this could be happening because of threading that may \nbe taking place in the FOP library and hence introduced a sleep just before the \ndelete, did not help.\n\nI would appreciate it if you could let me know how to fix this proble.\nThanks", "is_private": false, "id": 13904, "creator": "sgarje@cccis.com", "time": "2002-04-17T20:37:30Z", "bug_id": 6863, "creation_time": "2002-04-17T20:37:30Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 6863, "attachment_id": null, "text": "As Keiron already stated, the caller is responsible for closing the stream. You \nhave to call out.close() after Driver.render()!.", "id": 13945, "time": "2002-04-18T05:46:45Z", "creator": "jeremias.maerki@outline.ch", "creation_time": "2002-04-18T05:46:45Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 6863, "attachment_id": null, "id": 13962, "time": "2002-04-18T13:41:57Z", "creator": "sgarje@cccis.com", "creation_time": "2002-04-18T13:41:57Z", "is_private": false, "text": "As I was trying to say, it is not the PDF file that the problem is with. The \nproblem is with the XML file. Anyway I found the following URL on the web and \nwill try that out.\n\nhttp://archive.covalent.net/xml/general/2000/05/0193.xml"}, {"count": 8, "tags": [], "bug_id": 6863, "attachment_id": null, "is_private": false, "id": 13965, "time": "2002-04-18T13:50:10Z", "creator": "jeremias.maerki@outline.ch", "creation_time": "2002-04-18T13:50:10Z", "text": "Sorry, this happens when a lot of people have problems with the OutputStream. \nReopen the bug if the problem does not go away when replacing the XML parser or \nxalan with a different version. I'll then try to investigate."}, {"count": 9, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "id": 156735, "time": "2012-04-01T13:52:01Z", "bug_id": 6863, "creation_time": "2012-04-01T13:52:01Z", "is_private": false, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs"}]
[{"count": 0, "text": " ", "creator": "mj.wilson.uk@googlemail.com", "is_private": false, "id": 117737, "time": "2008-06-16T13:14:00Z", "bug_id": 45217, "creation_time": "2008-06-16T13:14:00Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "mj.wilson.uk@googlemail.com", "text": "MethodGen mistakenly fills in LocalVariableTableGen from both LocalVariableTable and LocalVariableTypeTable.  In parsing LocalVariableTypeTable, it incorrectly reads the signatures with generics.  As a result, the LocalVariableTable is corrupted.\n\nHere is an example:\n\npublic class VariableTableBug\n{\n\n   public String getFirstItem( final List< String > list )\n   {\n      int index = 0;\n      String result = list.get( index );\n      return result;\n   }\n\n   public static void main( final String[] args ) throws Exception\n   {\n      // find the resource that is our class\n      Class< VariableTableBug > clazz = VariableTableBug.class;\n      String resource = clazz.getName().replace( '.', '/' ) + \".class\";\n      \n      // load it using BCEL\n      JavaClass javaClass = new ClassParser( clazz.getClassLoader().getResourceAsStream( resource ),\n                                             resource ).parse();\n      \n      // convert everything to a ClassGen\n      ClassGen classGen = new ClassGen( javaClass );\n      \n      // find them getFirstItem method\n      Method getFirstItemMethod = null;\n      for ( Method method : classGen.getMethods() )\n      {\n         if ( method.getName().equals( \"getFirstItem\" ) )\n         {\n            getFirstItemMethod = method;\n            break;\n         }\n      }\n      \n      // dump the LocalVariableTable attribute\n      System.out.println( \"LocalVariableTable of original\" );\n      System.out.println( \"------------------------------\" );\n      for ( LocalVariable localVariable : getFirstItemMethod.getLocalVariableTable().getLocalVariableTable() )\n      {\n         System.out.println( localVariable.getName() + \"\\t\" + localVariable.getIndex() + \"\\t\" + localVariable.getSignature() );\n      }\n      System.out.println();\n\n      // dump the LocalVariableTypeTable attribute\n      for ( Attribute attribute : getFirstItemMethod.getCode().getAttributes() )\n      {\n         if ( attribute instanceof LocalVariableTypeTable )\n         {\n            System.out.println( \"LocalVariableTypeTable of original\" );\n            System.out.println( \"----------------------------------\" );\n            for ( LocalVariable localVariable : ( (LocalVariableTypeTable) attribute ).getLocalVariableTypeTable() )\n            {\n               System.out.println( localVariable.getName() + \"\\t\" + localVariable.getIndex() + \"\\t\" + localVariable.getSignature() );\n            }\n         }\n      }\n      System.out.println();\n      \n      // now convert to a MethodGen\n      MethodGen methodGen = new MethodGen( getFirstItemMethod,\n                                           classGen.getClassName(),\n                                           classGen.getConstantPool() );\n      \n      // dump the LocalVariableTable\n      System.out.println( \"LocalVariableTable of MethodGen\" );\n      System.out.println( \"-------------------------------\" );\n      for ( LocalVariableGen localVariableGen : methodGen.getLocalVariables() )\n      {\n         System.out.println( localVariableGen.getName() + \"\\t\" + localVariableGen.getIndex() + \"\\t\" + localVariableGen.getType() );\n      }\n   }\n   \n}", "id": 117738, "time": "2008-06-16T13:15:52Z", "bug_id": 45217, "creation_time": "2008-06-16T13:15:52Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 45217, "text": "The issue is here, AFAICT, in the constructor of MethodGen:\n\n\n...\n                    } else if (a instanceof LocalVariableTable) {\n                        LocalVariable[] lv = ((LocalVariableTable) a).getLocalVariableTable();\n                        removeLocalVariables();\n                        // [snip]\n                    } else if (a instanceof LocalVariableTypeTable) {\n                        LocalVariable[] lv = ((LocalVariableTypeTable) a).getLocalVariableTypeTable();\n                        removeLocalVariables();\n...\n\nIt fills in the local variables from the LocalVariableTypeTable as well, but removes the variables declared in LocalVariableTable.  Since the LocalVariableTypeTable only includes variables with generics (or so it seems that Eclipse's compiler does that), the other variables are removed.  It should be fairly safe to remove that 'removeLocalVariables()' call.\n\nThe other part of the issue is Type.getType(String) not parsing the generic types correctly.  I'm not sure what the best thing to do is there, though.", "count": 2, "id": 117739, "time": "2008-06-16T13:22:09Z", "creator": "mj.wilson.uk@googlemail.com", "creation_time": "2008-06-16T13:22:09Z", "is_private": false}]
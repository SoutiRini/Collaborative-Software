[{"count": 0, "tags": [], "text": "Both Jetty (http://blogs.webtide.com/gregw/entry/jetty_websocket_server) and Glass fish (http://antwerkz.com/glassfish-web-sockets-sample/) have native support for Web Sockets.\n\nIt would be great if Tomcat provided native Web Socket compatibilities to avoid the need to run two servers", "attachment_id": null, "bug_id": 51181, "id": 146246, "time": "2011-05-10T13:28:23Z", "creator": "graeme.rocher@springsource.com", "creation_time": "2011-05-10T13:28:23Z", "is_private": false}, {"text": "A significant factor in enhancement prioritisation (for me at least) is user demand. I don't recall seeing much demand for this from the Tomcat user community.\n\nVoting for an issue is the clearest way to register your interest in a particular enhancement.", "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 1, "id": 146247, "time": "2011-05-10T13:32:03Z", "bug_id": 51181, "creation_time": "2011-05-10T13:32:03Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 51181, "text": "There is significant interest in this area from the Grails community, which uses Tomcat as the default container. Also some general citations from around the web:\n\n* Comments on this blog post from Tomcat users asking for Web Sockets\n\nhttp://www.tomcatexpert.com/blog/2010/06/29/apache-tomcat-7-has-been-released\n\n* Comments from users on InfoQ article announcing Tomcat 7 about Web Sockets\n\nhttp://www.infoq.com/news/2010/07/tomcat_7\n\n* Question from user on Tomcat mailing list\n\nhttp://old.nabble.com/Tomcat-vs.-web-sockets-td30454648.html\n\nCurrent examples of Java applications using Web Sockets on Cloud Foundry also rely on Node.js for Web Socket support\n\nObviously it is new technology, but it is growing fast and I would recommend planning a strategy for it soon (Jetty added Web Sockets in 2009, and GlassFish in 2010)", "id": 146248, "time": "2011-05-10T13:41:29Z", "creator": "graeme.rocher@springsource.com", "creation_time": "2011-05-10T13:41:29Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 51181, "text": "You also have to consider the fact that a lot of people are starting *new* projects that use websockets and the first thing you do when starting a new project is search for a server that will support it. I think people pass up using tomcat simply because there is no sign of it being implemented here whereas glassfish is a quick and easy alternative. The point is, even if it would be easier to use tomcat as a solution in some cases, its not even worth asking for it when there are viable alternatives. \n\nWebsockets are new and therefore the projects that use websockets are new. I'd be willing to bet fewer people are going to \"port\" their application to websockets than those who are going to start a new one that use websockets. If i'm right, Tomcat will be an afterthought until it gets put in (and it would explain the \"lack of interest\").\n\nIf you don't support websockets, tomcat will start losing serious ground.", "id": 146251, "time": "2011-05-10T19:38:12Z", "creator": "nikolasarmstrong@gmail.com", "creation_time": "2011-05-10T19:38:12Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "For the record, it's not \"HTML5\" Web Sockets.\n\nThe protocol is being defined by the IETF HyBi Working Group, and is currently approaching Last Call.\n\nSee <http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-07>", "attachment_id": null, "bug_id": 51181, "id": 146258, "time": "2011-05-11T08:01:29Z", "creator": "julian.reschke@gmx.de", "creation_time": "2011-05-11T08:01:29Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 51181, "text": "Gotcha. The two topics (HTML5 and Web Sockets) are normally discussed together in articles, blogs etc. hence my confusion.", "id": 146260, "time": "2011-05-11T08:28:53Z", "creator": "graeme.rocher@springsource.com", "creation_time": "2011-05-11T08:28:53Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Current thinking on this is that Tomcat would provide the SocketIO API in a similar manner to how Comet is supported. The underlying transports, e.g web sockets, will also be exposed if practical.", "id": 146456, "time": "2011-05-19T11:04:46Z", "bug_id": 51181, "creation_time": "2011-05-19T11:04:46Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "fhanik@apache.org", "is_private": false, "text": "true, web sockets are really nothing more than comet, with some additional packet info, and that could be deal with using an InputFilter", "id": 146475, "time": "2011-05-20T14:39:57Z", "bug_id": 51181, "creation_time": "2011-05-20T14:39:57Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "@Mark Thomas\n\"If practical\". Heh\n\n@Filip Hanik\nIt is not the same thing as Comet, clearly you've never actually done any development with Comet or Websockets. I can't have you polluting this thread with misinformation. The overhead in both server resources, latency, and throughput makes Comet laughable in comparison to websockets. Its an \"ok\" fallback solution for asynchronous communication but it's by no means on the same level as websockets.", "attachment_id": null, "id": 146477, "creator": "nikolasarmstrong@gmail.com", "time": "2011-05-20T15:34:44Z", "bug_id": 51181, "creation_time": "2011-05-20T15:34:44Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 51181, "text": "(In reply to comment #8)\n> @Filip Hanik\n> It is not the same thing as Comet, clearly you've never actually done any\n> development with Comet or Websockets. I can't have you polluting this thread\n> with misinformation. The overhead in both server resources, latency, and\n> throughput makes Comet laughable in comparison to websockets. Its an \"ok\"\n> fallback solution for asynchronous communication but it's by no means on the\n> same level as websockets.\n\nmisinformed, I like that. \n\nI was commenting from an implementation standpoint at the connector level.\nWe can piggy back on the low level comet notifications we have implemented in the endpoints.\n\nAt the processor level, we would need an inputfilter to handle package dissemination.\n\nand at the servlet level, provide new interfaces for DataPackets\n\nbefore you call people misinformed, read the source code of tomcat, read the websocket spec, and you'll arrive at the same conclusion.\n\nnow, go and inform yourself!!", "id": 146504, "time": "2011-05-20T22:20:21Z", "creator": "fhanik@apache.org", "creation_time": "2011-05-20T22:20:21Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 51181, "text": "> I can't have you polluting this thread with misinformation.\n\nMaybe you need a superinjunction. ;)", "id": 146525, "time": "2011-05-22T20:29:54Z", "creator": "bugzilla@pidster.com", "creation_time": "2011-05-22T20:29:54Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "antoine.roux@net-vitesse.com", "attachment_id": null, "text": "Hi,\nThis is definitely something I would love to see in Tomcat! Websockets will allow to build richer web application and all major browsers already support them.", "id": 146666, "time": "2011-05-26T20:07:48Z", "bug_id": 51181, "creation_time": "2011-05-26T20:07:48Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 51181, "text": "Please add Web Sockets to Tomcat.\n\nThe functionality provided is incredible and finally allows our applications to provide real time communication.\n\nInstead of resorting to running multiple servlet containers, we're switching off tomcat completely since there does not seem to be any sign of sockets coming any time soon.\n\nI understand user demand drives the functionality, but I think we can agree that web sockets are a dream for web applications.", "id": 147626, "time": "2011-06-30T02:23:31Z", "creator": "gootdude@gmail.com", "creation_time": "2011-06-30T02:23:31Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "text": "It might appear that there hasn't been much progress on this but there has been a lot going on behind the scenes.\n\n1. The HTTP connectors have been refactored to reduce duplication and inconsistenceies between them that should make it possible to implement WebSockets once for all three HTTP connectors rather than once for each connector. This was long overdue and it took rather a long time to unpick the various differences that had crept in over the years.\n\n2. I took a look at a SocketIO implementation and I have some initial code but the API doesn't translate that easily (at least I found it didn't) from JavaScript to Java. Therefore I'm not convinced at the moment that this is the right direction to go in.\n\nWhat would be very useful at this point is an idea of the API users would like to work with. I can make something up but it would be much better if this was user driven. Proposals can be attached to this Bugzilla issue.", "is_private": false, "bug_id": 51181, "id": 149049, "time": "2011-09-06T23:15:59Z", "creator": "markt@apache.org", "creation_time": "2011-09-06T23:15:59Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 149765, "time": "2011-09-26T13:06:20Z", "creator": "harikrishnadhas.k@capgemini.com", "creation_time": "2011-09-26T13:06:20Z", "is_private": false, "text": "I'm Eagerly looking out tomcat to implement the Web Socket...."}, {"count": 15, "tags": [], "bug_id": 51181, "text": "+1 for WebSockets support!", "id": 149792, "time": "2011-09-27T06:11:45Z", "creator": "mslinn@mslinn.com", "creation_time": "2011-09-27T06:11:45Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 150706, "time": "2011-10-18T10:00:11Z", "creator": "manuel_igop@yahoo.com", "creation_time": "2011-10-18T10:00:11Z", "is_private": false, "text": "+ 1 too. Greatly needed in my new projects."}, {"count": 17, "tags": [], "bug_id": 51181, "text": "See http://svn.apache.org/repos/asf/labs/monsoon/trunk/ too", "id": 151346, "time": "2011-11-09T21:13:06Z", "creator": "jfclere@gmail.com", "creation_time": "2011-11-09T21:13:06Z", "is_private": false, "attachment_id": null}, {"text": "Monsoon seems to have stalled somewhat", "tags": [], "creator": "bugzilla@pidster.com", "attachment_id": null, "count": 18, "id": 151363, "time": "2011-11-10T11:56:01Z", "bug_id": 51181, "creation_time": "2011-11-10T11:56:01Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 151546, "time": "2011-11-16T12:06:59Z", "creator": "sureshkmit@gmail.com", "creation_time": "2011-11-16T12:06:59Z", "is_private": false, "text": "+1, I'm looking into use it in our new product and I always prefer Tomcat."}, {"count": 20, "tags": [], "text": "+1", "is_private": false, "bug_id": 51181, "id": 152048, "time": "2011-12-07T10:11:37Z", "creator": "stein.morten.hugubakken@gmail.com", "creation_time": "2011-12-07T10:11:37Z", "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 51181, "attachment_id": null, "is_private": false, "id": 152375, "time": "2011-12-23T14:49:21Z", "creator": "roos@symentis.com", "creation_time": "2011-12-23T14:49:21Z", "text": "+1"}, {"count": 22, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 152600, "time": "2012-01-05T22:33:32Z", "creator": "goberman@msn.com", "creation_time": "2012-01-05T22:33:32Z", "is_private": false, "text": "Mark,\nIs there any estimate when WebSockets support will be implemented?\n\nAs far as API, I would not mind if it is somewhat similar to the Comet functionality. In fact it would be nice if the same Servlet instance could handle both WebSocket and Comet requests.\n\nSo it may looks something like:\n\npublic class WebFrameworkServlet extends HttpServlet implements WebSocketProcessor /*, CometProcessor*/ {\n\n\n  /*\n  // comet event processor\n  public void event(CometEvent event) throws IOException, ServletException {\n    HttpServletRequest request = event.getHttpServletRequest();\n    HttpServletResponse response = event.getHttpServletResponse();\n    if (event.getEventType() == CometEvent.EventType.BEGIN) {\n      ...\n    }\n    ...\n  }\n  */\n\n  // WebSocket event processor\n  public void event(WebSocketEvent event) throws IOException, ServletException {\n    WebSocketServletRequest request = event.getHttpServletRequest();\n    WebSocketServletResponse response = event.getHttpServletResponse();\n    // initial connection\n    if (event.getEventType() == WebSocketEvent.EventType.BEGIN) {\n      ...\n    }\n    // \n    if (event.getEventType() == WebSocketEvent.EventType.MESSAGE) {\n      // Get message\n      WebSocketMessage inboundMessage = request.getMessage();\n      // Send message back to the client\n      response.sendMessage(new WebSocketMessage(...));\n      ...\n    }\n    ...\n  }\n  ...\n}\n\nOne longstanding limitation to the Tomcat Comet API is the ability to specify \"maximum send queue size threshold\" to disconnect slow consumers when send backlog crosses a limit. I have requested this in the past with no luck. This is is absolutely critical for the production application. We had situations when a slow consumer would block IO thread dedicated to multiple clients eventually causing Tomcat run out of memory."}, {"count": 23, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 152618, "time": "2012-01-08T13:03:42Z", "creator": "markt@apache.org", "creation_time": "2012-01-08T13:03:42Z", "is_private": false, "text": "(In reply to comment #22)\n> Is there any estimate when WebSockets support will be implemented?\n\nNo.\n\nThe preparatory work of aligning the connectors is pretty much complete which will make implementation easier. There is some ongoing discussion in Servlet 3.1 EG on how Servlet 3.1 and Web Sockets will work together.\n\nI have some rough ideas implemented that I really should get around to sharing. Nag me (on the dev list) in a couple of weeks if I haven't done anything.\n\n> As far as API, I would not mind if it is somewhat similar to the Comet\n> functionality. In fact it would be nice if the same Servlet instance could\n> handle both WebSocket and Comet requests.\n\nAs long as it doesn't create additional complexities, that should be possible.\n\n> So it may looks something like:\n\nThanks for the API suggestion. It is good to see someone finally responding my request from September. Further input from other potential users welcome. Jetty have offered to work on a joint API - there is clearly some benefit in that.\n\n> One longstanding limitation to the Tomcat Comet API is the ability to specify\n> \"maximum send queue size threshold\" to disconnect slow consumers when send\n> backlog crosses a limit. I have requested this in the past with no luck. This\n> is is absolutely critical for the production application. We had situations\n> when a slow consumer would block IO thread dedicated to multiple clients\n> eventually causing Tomcat run out of memory.\n\nThat is really a separate issue. The best way to approach that is to create an enhancement request in Bugziila. Enhancement requests with test cases and patches tend to get looked at faster."}, {"count": 24, "tags": [], "bug_id": 51181, "is_private": false, "id": 152629, "attachment_id": null, "creator": "goberman@msn.com", "creation_time": "2012-01-08T22:38:44Z", "time": "2012-01-08T22:38:44Z", "text": "I actually played with Jetty WebSocket API last Friday and was able to embed it into Tomcat quite easily. The only issue is that it has to be on a separate port.\nAs I mentioned before, it would be a good selling point if Tomcat could handle WebSockets, Comet, and \"normal\" http requests from a single port.\n\nAs far as controlling client send queue, I have already requested it over a year ago: https://issues.apache.org/bugzilla/show_bug.cgi?id=50495. It was suggested that I propose a patch and the request was closed with \"will not fix\" status. I was given some pointers on how it works, but did not think that patching Tomcat source code is a good long term solution for us. I thought that now will be a good time to address it for both WebSockets and Tomcat Comet since the underlying plumbing is getting reworked anyway and may be shared. \nBy the way, Grizzly framework actually does have the ability to limit client send queue with a single API method call.\nThanks"}, {"count": 25, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 152650, "time": "2012-01-10T09:35:09Z", "creator": "bugzilla@pidster.com", "creation_time": "2012-01-10T09:35:09Z", "is_private": false, "text": "\n>   // WebSocket event processor\n>   public void event(WebSocketEvent event) throws IOException, ServletException\n> {\n>     WebSocketServletRequest request = event.getHttpServletRequest();\n>     WebSocketServletResponse response = event.getHttpServletResponse();\n>     // initial connection\n>     if (event.getEventType() == WebSocketEvent.EventType.BEGIN) {\n>       ...\n>     }\n>     // \n>     if (event.getEventType() == WebSocketEvent.EventType.MESSAGE) {\n>       // Get message\n>       WebSocketMessage inboundMessage = request.getMessage();\n>       // Send message back to the client\n>       response.sendMessage(new WebSocketMessage(...));\n\nThe server end probably also needs to be able to handle the receipt/issue of a WebSocketFrame (e.g. PING/PONG frames). It's possible to send a CLOSE event in between other frames and you might want to clean up before shutdown.\n\nSidenote: I think a Jetty & Tomcat collaboration would be pragmatic.\n\nIMHO extending javax.servlet.http.WebSocketServlet would be a good final outcome."}, {"count": 26, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 152906, "time": "2012-01-18T22:35:07Z", "creator": "markt@apache.org", "creation_time": "2012-01-18T22:35:07Z", "is_private": false, "text": "I dug out my old ideas and have been updating them. You can see how far I have got in [1]. Note that this is all very early days and pretty much everything is subject to change and a lot of the detail is missing. That said, I think the broad strokes are heading in the right direction.\n\nKey points are:\n- Limited connector (BIO/NIO/APR) specific code (thanks to the previous re-factoring)\n- Write apps by extending WebSocketServlet\n- Also interface to implement / base class to extend for reading / writing\n- Provide stream-based and message-based APIs (stream will be implemented first and then message-based with configurable buffers on top off the streaming API)\n- message-based API likely to be similar to Jetty's - will align to common API if at all possible\n- reading/writing will use blocking IO per message (much, much simpler to implement and only the NIO connector could do non-blocking - could possibly add non-blocking IO later if there is sufficient demand)\n\nAs soon as I have something that roughly works end to end (i.e. I can get the WebSocket equivalent of HelloWorld working) I'll commit this to trunk with the aim of back-porting it to 7.0.x once the integration points are stable. It looks as if the integration points are going to be few and well defined so they should be stable pretty quickly which bodes well for getting this into 7.0.x.\n\nThe message-based API isn't dissimilar to the Comet-style API proposed above but rather than a single call-back with different event types, there will be one call-back per event type (close, text message, binary message). Control messages will be handled at a lower level.\n\nOne caveat and I can't stress this enough. The devil will be in the detail and experience with the Servlet 3.0 async work has shown that what appears to be a complete, working implementation may need a major re-write to make it stable. It isn't beyond the realm of possibility that there is a huge logical flaw in the approach I have taken so far that necessitates ripping most of this up and starting again.\n\nFinally, there has been an awful lot of interest in this enhancement request but not much in the way of contributions. Hopefully as the code starts to get committed, contributions will be easier. Discussions on the patch are best held on the dev mailing list. I only wrote this progress report in BZ in case folks who are cc'd on the bug aren't on the dev list.\n\n[1] http://people.apache.org/~markt/patches/draft/2012-01-18-websocket.patch"}, {"count": 27, "tags": [], "text": "Thanks for the report!\n\nWill try to deal with embedded jetty until a first version is released.\n\nDefinitely a must-have feature in Tomcat.", "is_private": false, "id": 152988, "creator": "n.toublanc@gmail.com", "time": "2012-01-20T22:36:59Z", "bug_id": 51181, "creation_time": "2012-01-20T22:36:59Z", "attachment_id": null}, {"count": 28, "tags": [], "text": "An initial implementation has been added to trunk. Once the major TODOs have been addressed, it will be back-ported to 7.0.x.", "is_private": false, "bug_id": 51181, "id": 153339, "time": "2012-02-01T10:13:31Z", "creator": "markt@apache.org", "creation_time": "2012-02-01T10:13:31Z", "attachment_id": null}, {"count": 29, "tags": [], "creator": "johno@sulake.com", "is_private": false, "text": "Created attachment 28264\nOrigin and protocol client handshake TODOs\n\nThought it might be helpful to try implementing a few TODOs, please let me know whether or not you agree with the approach for origin and protocol.", "id": 153428, "time": "2012-02-04T01:48:20Z", "bug_id": 51181, "creation_time": "2012-02-04T01:48:20Z", "attachment_id": 28264}, {"count": 30, "tags": [], "bug_id": 51181, "text": "The origin changes look good. I'll incorporate them shortly.\n\nRegarding the changes to createWebSocketInbound, I understand passing the protocol but why pass the HttpServletRequest as well?\n\nRegarding the changes to the tests, I know we refer to them as unit tests but we frequently test more widely than that to provide greater confidence in the end to end processing chain. Unfortunately, that means we are going to need to write some (very basic) form of WebSocket client to test things.", "id": 153571, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2012-02-08T08:33:37Z", "time": "2012-02-08T08:33:37Z", "is_private": false}, {"count": 31, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 153583, "time": "2012-02-08T10:37:53Z", "creator": "johno@sulake.com", "creation_time": "2012-02-08T10:37:53Z", "is_private": false, "text": "Flexibility more than anything, the developer may require access to the request in order to determine / set the initial state of the socket or application. I will try and look into writing a very basic WebSocket client this week if you do not beat me to it."}, {"count": 32, "tags": [], "text": "PS. Oracle just put out JSR-356 for WebSockect:\nhttp://jcp.org/en/jsr/detail?id=356\nmight come in handy for this issue", "attachment_id": null, "id": 153638, "creator": "me@adamwalczak.info", "time": "2012-02-09T23:53:16Z", "bug_id": 51181, "creation_time": "2012-02-09T23:53:16Z", "is_private": false}, {"count": 33, "tags": [], "text": "(In reply to comment #31)\n> Flexibility more than anything, the developer may require access to the request\n> in order to determine / set the initial state of the socket or application.\n\n4.2.1.10 says \"Optionally, other header fields, such as those used to send cookies or request authentication to a server.\" Would just the header map be enough?\n\nGiven that these are potentially long running requests, keeping the original request object around might not be such a good idea. Would passing in a minimal or partial object copy be better?\n\nYou wouldn't want to be able to permit a write to the ServletOutputStream for example.", "is_private": false, "bug_id": 51181, "id": 153645, "time": "2012-02-10T09:45:41Z", "creator": "bugzilla@pidster.com", "creation_time": "2012-02-10T09:45:41Z", "attachment_id": null}, {"count": 34, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 153655, "time": "2012-02-10T11:20:39Z", "creator": "johno@sulake.com", "creation_time": "2012-02-10T11:20:39Z", "is_private": false, "text": "(In reply to comment #33)\n> Given that these are potentially long running requests, keeping the original\n> request object around might not be such a good idea. Would passing in a minimal\n> or partial object copy be better?\n> \n> You wouldn't want to be able to permit a write to the ServletOutputStream for\n> example.\n\nWell put, I see where you are coming from. Unmodifiable map / copy of the headers would be fine from my perspective, of course if someone else can think of any other possible scenarios please comment :)"}, {"count": 35, "tags": [], "text": "+1, Tomcat is an integral part of our system and Web Socket support will be awesome.", "is_private": false, "bug_id": 51181, "id": 153730, "time": "2012-02-13T13:53:52Z", "creator": "luc4sdreyer@gmail.com", "creation_time": "2012-02-13T13:53:52Z", "attachment_id": null}, {"count": 36, "tags": [], "bug_id": 51181, "attachment_id": 28342, "is_private": false, "id": 153845, "time": "2012-02-16T17:47:38Z", "creator": "johno@sulake.com", "creation_time": "2012-02-16T17:47:38Z", "text": "Created attachment 28342\nFragmentation control frames\n\nAttaching patch sent by Petr Praus (mailing list)."}, {"count": 37, "tags": [], "text": "I can see the possible requirement for access to the request headers when verifying the origin (and a few other processes). However, I'm leaning towards not implementing that now and adding it later if there is a demand for it. If we go that route I do think we just need prevent access to the request since the problems that would start if a reference to the request is retained are not pretty. I'd probably just wrap the request in a facade that exposed the headers in read-only form and nothing else.\n\nI'm now looking at the sub-protocol parts. The good news is that protocol names are token which makes parsing them simple (the approach used in the patch is fine - just not the way I would have done it). However, my reading of the specification is slightly different from the patch as implemented. There are two differences:\na) I see no requirement for the server to respect the clients preference order for sub-protocols. Therefore, we need to pass the complete list of requested sub-protocols to the user servlet for it to pick one\nb) The server is free to not select one of the sub-protocols. This is not an error state.\n\nHopefully, I'll add the protocol handling stuff later this evening.", "is_private": false, "bug_id": 51181, "id": 153854, "time": "2012-02-16T22:35:46Z", "creator": "markt@apache.org", "creation_time": "2012-02-16T22:35:46Z", "attachment_id": null}, {"count": 38, "tags": [], "bug_id": 51181, "text": "I am extremely reluctant to apply the current fragmentation patch. It relies on buffering individual fragments and - given the maximum fragment size - that is simply not going to scale. This is why the current API is built on streams and does not buffer unless the message based API is used.\n\nI'd like to fully explore the possibility of supporting fragments without using buffering before starting down that path.\n\nThe patch includes other fixes and refactorings. I'll take a look at those next - probably in the next few days.", "id": 153857, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2012-02-16T23:30:35Z", "time": "2012-02-16T23:30:35Z", "is_private": false}, {"count": 39, "tags": [], "bug_id": 51181, "is_private": false, "id": 153927, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2012-02-19T16:35:14Z", "time": "2012-02-19T16:35:14Z", "text": "Short update for folks not following the dev list.\n- added fragmented packet support\n- added *very* basic test client"}, {"count": 40, "tags": [], "text": "The bulk of the implementation is complete in trunk and should be at a stage where folks can take it out for a spin. Keep in mind it is far from final. One of things where feedback is required is the API so the sooner you start using it, the greater your chances of influencing the API. See the dev list for a more detailed TODO list if you want to help out.", "attachment_id": null, "id": 154064, "creator": "markt@apache.org", "time": "2012-02-23T12:42:40Z", "bug_id": 51181, "creation_time": "2012-02-23T12:42:40Z", "is_private": false}, {"count": 41, "tags": [], "bug_id": 51181, "text": "Created attachment 28396\nAutobahn fail threaddump\n\nThought it might be interesting to try out Autobahn with latest trunk (r1294541) on a couple of different platforms to see how things go. I noticed when running the testsuite there was some blocking, eventually I terminated the process.. have you experienced this behaviour Mark?\n\nhttp://www.hellface.com/Autobahnr1294110.zip\n\nSVN Revision: 1294541\n\nWindows 7 Ultimate 64-bit (6.1, Build 7601) Service Pack 1\njava version \"1.6.0_30\"\nJava(TM) SE Runtime Environment (build 1.6.0_30-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 20.5-b03, mixed mode)\n\nUbuntu 10.04.1 LTS\nLinux ubuntu-dev 2.6.32-24-generic #42-Ubuntu SMP Fri Aug 20 14:24:04 UTC 2010 i686 GNU/Linux\njava version \"1.6.0_21\"\nJava(TM) SE Runtime Environment (build 1.6.0_21-b06)\nJava HotSpot(TM) Server VM (build 17.0-b16, mixed mode)", "id": 154315, "time": "2012-02-28T11:43:52Z", "creator": "johno@sulake.com", "creation_time": "2012-02-28T11:43:52Z", "is_private": false, "attachment_id": 28396}, {"count": 42, "tags": [], "text": "(In reply to comment #41)\n> Thought it might be interesting to try out Autobahn with latest trunk\n> (r1294541) on a couple of different platforms to see how things go.\n\nTry reading the dev list.\n\nAutobahn passes fully for all three connectors (BIO, NIO and APR) on Windows and Linux. Things to note:\n- you'll need to use the message API, not the stream API\n- you'll need to increase the default buffer size to > 16M to handle the tests with larger payloads\n- python on Windows has a serious performance issue when sending lots of small packets. Tests that take ~10s on Linux can take 4-5 minutes on Windows.\n\nAll of the above has been reported on the dev list in the last week or so.", "attachment_id": null, "bug_id": 51181, "id": 154317, "time": "2012-02-28T11:56:35Z", "creator": "markt@apache.org", "creation_time": "2012-02-28T11:56:35Z", "is_private": false}, {"count": 43, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 154334, "time": "2012-02-28T17:29:47Z", "creator": "johno@sulake.com", "creation_time": "2012-02-28T17:29:47Z", "is_private": false, "text": "(In reply to comment #42)\n> (In reply to comment #41)\n> > Thought it might be interesting to try out Autobahn with latest trunk\n> > (r1294541) on a couple of different platforms to see how things go.\n> \n> Try reading the dev list.\n> \n> Autobahn passes fully for all three connectors (BIO, NIO and APR) on Windows\n> and Linux. Things to note:\n> - you'll need to use the message API, not the stream API\n> - you'll need to increase the default buffer size to > 16M to handle the tests\n> with larger payloads\n> - python on Windows has a serious performance issue when sending lots of small\n> packets. Tests that take ~10s on Linux can take 4-5 minutes on Windows.\n> \n> All of the above has been reported on the dev list in the last week or so.\n\nThanks for your fast response Mark.  I try and keep up with all of the websocket talk on the dev list, however, I may have missed a few messages.  I do recall some talk about buffer sizes but not seeing anything related to using message API vs stream API.  I am planning to look at some of the remaining TODOs which is why I setup Autobahn, additionally I thought it would be beneficial testing Tomcat websockets on different environments to ensure expected behaviour."}, {"count": 44, "tags": [], "text": "Created attachment 28407\nIntroduce status code constants\n\nPlease find attached proposal of introducing status code constants instead of using magic numbers everywhere, also contains some typo fixes.", "is_private": false, "bug_id": 51181, "id": 154373, "time": "2012-02-29T15:12:41Z", "creator": "johno@sulake.com", "creation_time": "2012-02-29T15:12:41Z", "attachment_id": 28407}, {"count": 45, "tags": [], "bug_id": 51181, "attachment_id": null, "is_private": false, "id": 154384, "time": "2012-02-29T20:56:34Z", "creator": "markt@apache.org", "creation_time": "2012-02-29T20:56:34Z", "text": "(In reply to comment #44)\n> Please find attached proposal of introducing status code constants instead of\n> using magic numbers everywhere, also contains some typo fixes.\n\nThanks. Patch applied with a few variations for consistency with the rest of the Tomcat code base."}, {"count": 46, "tags": [], "bug_id": 51181, "attachment_id": 28408, "id": 154412, "time": "2012-03-01T19:13:34Z", "creator": "johno@sulake.com", "creation_time": "2012-03-01T19:13:34Z", "is_private": false, "text": "Created attachment 28408\nOverrides for connection open and close\n\nI am currently working on an example for websockets. Please consider attached attachment for notifications when connection is opened / closed."}, {"count": 47, "tags": [], "bug_id": 51181, "attachment_id": null, "id": 154417, "time": "2012-03-02T01:57:32Z", "creator": "johno@sulake.com", "creation_time": "2012-03-02T01:57:32Z", "is_private": false, "text": "(In reply to comment #46)\n> Created attachment 28408 [details]\n> Overrides for connection open and close\n> \n> I am currently working on an example for websockets. Please consider attached\n> attachment for notifications when connection is opened / closed.\n\nonOpen is not quite in the right place as write can be called before the sockets / streams have been set (callback happens in setUpgradeOutbound..). Can we modify the UpgradeInbound interface to include onUpgradeComplete?"}, {"count": 48, "tags": [], "bug_id": 51181, "attachment_id": 28410, "is_private": false, "id": 154433, "time": "2012-03-02T12:53:06Z", "creator": "johno@sulake.com", "creation_time": "2012-03-02T12:53:06Z", "text": "Created attachment 28410\nImproved echo example\n\nPlease find attached proposal for improved echo example. Still working on a much more exciting example by the way!"}, {"count": 49, "tags": [], "text": "Created attachment 28411\nOverrides for connection open and close\n\nPlease find attached revised connection open and close overrides which should not cause NPE if write happens just after onOpen is called.", "is_private": false, "id": 154441, "creator": "johno@sulake.com", "time": "2012-03-02T15:39:30Z", "bug_id": 51181, "creation_time": "2012-03-02T15:39:30Z", "attachment_id": 28411}, {"count": 50, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "(In reply to comment #49)\n> Created attachment 28411 [details]\n> Overrides for connection open and close\n\nPatch applied (with some minor tweaks). Many thanks.\n\nI can see this evolving over time. We may need to change this to an approach (particularly for close) where the method intended to be overridden actually does the work and the developer has to call super.onClose() at an appropriate point. Alternatively, the can not call super.close() and take responsibility for sending the close message themselves. However, we can hold off on that refactoring until someone indicates they need it.", "id": 154450, "time": "2012-03-02T19:10:05Z", "bug_id": 51181, "creation_time": "2012-03-02T19:10:05Z", "attachment_id": null}, {"count": 51, "tags": [], "text": "(In reply to comment #48)\n> Created attachment 28410 [details]\n> Improved echo example\n\nPatch applied. Many thanks.", "is_private": false, "id": 154451, "creator": "markt@apache.org", "time": "2012-03-02T19:15:40Z", "bug_id": 51181, "creation_time": "2012-03-02T19:15:40Z", "attachment_id": null}, {"count": 52, "tags": [], "text": "Created attachment 28415\nConnection close not called on IOE\n\nI am able to continually produce this using Chrome 17.0.963.56 m and just closing the tab whilst the websocket connection is active. Please find attached fix proposal.", "attachment_id": 28415, "id": 154486, "creator": "johno@sulake.com", "time": "2012-03-04T12:12:58Z", "bug_id": 51181, "creation_time": "2012-03-04T12:12:58Z", "is_private": false}, {"count": 53, "tags": [], "bug_id": 51181, "is_private": false, "id": 154488, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2012-03-04T14:25:41Z", "time": "2012-03-04T14:25:41Z", "text": "(In reply to comment #52)\n> Created attachment 28415 [details]\n> Connection close not called on IOE\n\nI fixed this slightly differently in trunk, mainly because I wanted to avoid the nested try/catch blocks. Let us know if there is still an issue."}, {"count": 54, "tags": [], "text": "Created attachment 28416\nMultiplayer snake example\n\nPlease find attached patch for simple multiplayer snake example.", "is_private": false, "bug_id": 51181, "id": 154513, "time": "2012-03-05T00:48:11Z", "creator": "johno@sulake.com", "creation_time": "2012-03-05T00:48:11Z", "attachment_id": 28416}, {"count": 55, "tags": [], "text": "(In reply to comment #53)\n> (In reply to comment #52)\n> > Created attachment 28415 [details]\n> > Connection close not called on IOE\n> \n> I fixed this slightly differently in trunk, mainly because I wanted to avoid\n> the nested try/catch blocks. Let us know if there is still an issue.\n\nWorks as expected, thanks!", "attachment_id": null, "bug_id": 51181, "id": 154514, "time": "2012-03-05T00:51:03Z", "creator": "johno@sulake.com", "creation_time": "2012-03-05T00:51:03Z", "is_private": false}, {"count": 56, "tags": [], "bug_id": 51181, "text": "Created attachment 28420\nMultiplayer snake example", "id": 154536, "time": "2012-03-05T09:26:31Z", "creator": "johno@sulake.com", "creation_time": "2012-03-05T09:26:31Z", "is_private": false, "attachment_id": 28420}, {"count": 57, "tags": [], "bug_id": 51181, "text": "(In reply to comment #56)\n> Created attachment 28420 [details]\n> Multiplayer snake example\n\nBrilliant. Simply brilliant.\n\nI did clean up a few warnings and reduced some line lengths. I also removed the author tags since we no longer add those. You will get credit in the commit message and the change log.\n\nThe only niggle I could find is that a snake can cross over itself. Is that meant to be allowed?", "id": 154570, "time": "2012-03-06T15:15:27Z", "creator": "markt@apache.org", "creation_time": "2012-03-06T15:15:27Z", "is_private": false, "attachment_id": null}, {"count": 58, "tags": [], "text": "Created attachment 28426\nMultiplayer snake collision fix\n\nThanks for taking the time to fix the warnings, formatting and taking in the patch Mark. Please find attached patch which should fix the collision problems.", "attachment_id": 28426, "id": 154586, "creator": "johno@sulake.com", "time": "2012-03-06T21:54:46Z", "bug_id": 51181, "creation_time": "2012-03-06T21:54:46Z", "is_private": false}, {"count": 59, "attachment_id": null, "bug_id": 51181, "is_private": false, "id": 154588, "time": "2012-03-06T22:21:36Z", "creator": "markt@apache.org", "creation_time": "2012-03-06T22:21:36Z", "tags": [], "text": "(In reply to comment #58)\n> Created attachment 28426 [details]\n> Multiplayer snake collision fix\n> \n> Thanks for taking the time to fix the warnings, formatting and taking in the\n> patch Mark. Please find attached patch which should fix the collision problems.\n\nMany thanks for such a speedy response. I wasn't even sure it was a bug.\n\nAs an example, this really is fantastic. Your efforts are very much appreciated."}, {"count": 60, "tags": [], "text": "Created attachment 28457\nChat example collision fix and cleanup\n\nPlease find attached patch for simple chat example, more fixes to collision, repackaging of echo and some cleanup.", "is_private": false, "id": 154850, "creator": "johno@sulake.com", "time": "2012-03-12T21:59:38Z", "bug_id": 51181, "creation_time": "2012-03-12T21:59:38Z", "attachment_id": 28457}, {"count": 61, "tags": [], "bug_id": 51181, "attachment_id": null, "is_private": false, "id": 154963, "time": "2012-03-15T23:58:36Z", "creator": "markt@apache.org", "creation_time": "2012-03-15T23:58:36Z", "text": "WebSocket support has now been back-ported to 7.0.x and will be included in 7.0.27 onwards.\n\nTo prevent what is already a fairly lengthy issue becoming longer, bugs in the implementation, requests for new features, patches etc. should be provided via new bugzilla issues rather than re-opening this one."}, {"count": 62, "tags": [], "text": "Just a note:\nBackport of WebSockets support to Tomcat 6 is tracked separately as bug #52918", "is_private": false, "bug_id": 51181, "id": 154966, "time": "2012-03-16T00:54:29Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-03-16T00:54:29Z", "attachment_id": null}, {"count": 63, "tags": [], "bug_id": 51181, "is_private": false, "id": 166780, "attachment_id": null, "creator": "jh314159@googlemail.com", "creation_time": "2013-04-23T08:51:48Z", "time": "2013-04-23T08:51:48Z", "text": "Query - now JSR 356 has been finalised with a substantially different API to the one you have implemented here, will this API continue to be supported, or will it be removed in a near-future release?"}, {"count": 64, "tags": [], "bug_id": 51181, "text": "The plan is:\n1. Add the JSR 356 implementation to Tomcat 7\n2. Deprecate Tomcat's proprietary API in Tomcat 7 (it will still be supported for Tomcat 7)\n3. Remove Tomcat's proprietary API in Tomcat 8 onwards.\n\n3 has already been done. 1 & 2 will follow once Tomcat 8's JSR356 implementation has stabilised.", "id": 166781, "time": "2013-04-23T08:55:55Z", "creator": "markt@apache.org", "creation_time": "2013-04-23T08:55:55Z", "is_private": false, "attachment_id": null}, {"count": 65, "tags": [], "text": "(In reply to Mark Thomas from comment #64)\n> The plan is:\n> 1. Add the JSR 356 implementation to Tomcat 7\n> 2. Deprecate Tomcat's proprietary API in Tomcat 7 (it will still be\n> supported for Tomcat 7)\n> 3. Remove Tomcat's proprietary API in Tomcat 8 onwards.\n> \n> 3 has already been done. 1 & 2 will follow once Tomcat 8's JSR356\n> implementation has stabilised.\n\nFor a historical record,\nbackport of JSR 356 implementation to Tomcat 7\nand deprecation of Tomcat's proprietary API was done in Tomcat 7.0.43, released in 7.0.47. (Versions 7.0.43-.46 did not pass release vote).\n\nTo make use of JSR 356 in Tomcat 7, one has to run it with Java 7 or later.", "attachment_id": null, "bug_id": 51181, "id": 178039, "time": "2014-09-23T10:34:33Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-09-23T10:34:33Z", "is_private": false}]
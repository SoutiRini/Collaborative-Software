[{"count": 0, "tags": [], "bug_id": 59926, "is_private": false, "text": "Created attachment 34090\navoid serverCookie memery leak\n\ni have a test \n\n\nGetMethod getMethod = new GetMethod(\"http://127.0.0.1:8080/\");\nHeader h = new Header();\nh.setName(\"Cookie\");\nStringBuilder sb=new StringBuilder();\nfor(int i=0;i<2000;i++){\n\tsb.append(\"a=b;\");\n}\nh.setValue(sb.toString());\ngetMethod.addRequestHeader(h);\nnt statusCode = httpClient.executeMethod(getMethod);\n\n\nthere are larger number ServerCookie arrays is cached in heap.\n\nWe saw two issues in this case:\n\n1) the size of org.apache.tomcat.util.http.Cookies#scookies array never gets shrunk after recycle,  once it is dynamically resized. \n\n2) the number of org.apache.tomcat.util.http.ServerCookie object can be dramatically large, which might lead to memory leak. A maxHeaderSize of 8k has limit the number of ServerCookie object to no more than 2k, assuming each cookie is 4 bytes (e.g. 'a=b;'). This may have limited impact for a web application with low concurrency. However, for a heavily concurrent, NIO-based connector, this may have a  huge impact. Suppose a malicious client is sending 2k concurrent request, each sending 2k cookies, at tomcat side there will be 2k * 2k = 4m ServerCookie objects. Since the default maxConnection value is 10k for NIO, there can be at most 20m Server Cookies objects, and cannot be recycled because of 1).\n\n\n\nWe modify as follows:\n1) shrink the org.apache.tomcat.util.http.ServerCookie object array back to its initial size after recycling org.apache.tomcat.util.http.ServerCookies object.\n\n2) add a maxCookieCount configuration to limit the number of cookie to process. When exceeding the limit, throw exception just like the limit of head. The default value of maxCookieCount shall be unlimited to be compatible with current behavior, and configurable via server.xml\n\n3) limit the max size of org.apache.tomcat.util.http.Cookies#serverCookies array. We argue the growing strategy here that the number of ServerCookie object should have an upper limit. for example, if maxHeaderSize is 9k and cookie string is 'a=;b=;...', then the number of ServerCookie object should be no more than 3k, hence the growing from 2k -> 4k will be unnecessary.", "id": 192803, "time": "2016-08-02T11:22:51Z", "creator": "gehill_cn@sina.com", "creation_time": "2016-08-02T11:22:51Z", "attachment_id": 34090}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 192818, "time": "2016-08-02T14:47:18Z", "bug_id": 59926, "creation_time": "2016-08-02T14:47:18Z", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of bug 59904 ***"}]
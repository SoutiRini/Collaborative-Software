[{"count": 0, "tags": [], "text": "While trying to load jkjni.so, the following error appears in my  \ncatalina.out log file:  \n  \nMar 7, 2003 2:25:47 AM org.apache.commons.modeler.Registry loadRegistry  \nINFO: Loading registry information  \nMar 7, 2003 2:25:47 AM org.apache.commons.modeler.Registry getRegistry  \nINFO: Creating new Registry instance  \nMar 7, 2003 2:25:48 AM org.apache.commons.modeler.Registry getServer  \nINFO: Creating MBeanServer  \nMar 7, 2003 2:25:49 AM org.apache.coyote.http11.Http11Protocol init  \nINFO: Initializing Coyote HTTP/1.1 on port 8080  \nStarting service Tomcat-Standalone  \nApache Tomcat/4.1.21-LE-jdk14  \nMar 7, 2003 2:25:54 AM org.apache.coyote.http11.Http11Protocol start  \nINFO: Starting Coyote HTTP/1.1 on port 8080  \nMar 7, 2003 2:25:54 AM org.apache.jk.server.JkMain start  \nINFO: APR not loaded, disabling jni components: java.io.IOException:  \n/usr/apache2/lib/jkjni.so: /usr/apache2/lib/jkjni.so: undefined symbol: apr_md5_final  \n  \n  \nHere is my jk2.properties file:  \n# Set the desired handler list  \n#handler.list=apr,request,channelJni  \nhandler.list=apr,channelUnix,container  \n#  \n# Override the default port for the socketChannel  \nchannelUnix.file=/usr/tomcat/work/jk2.socket  \n# Default:   \n# channelUnix.file=${jkHome}/work/jk2.socket  \n# Just to check if the the config  is working  \nshm.file=${jkHome}/work/jk2.shm  \n  \n# In order to enable jni use any channelJni directive  \n# channelJni.disabled = 0  \n# And one of the following directives:  \n  \n#apr.NativeSo=/usr/apache2/modules/jkjni.so  \napr.NativeSo=/usr/apache2/lib/jkjni.so  \n  \n# If set to inprocess the mod_jk2 will Register natives itself  \n# This will enable the starting of the Tomcat from mod_jk2  \napr.jniModeSo=inprocess  \n  \nApache 2.0.44 was configured with --prefix=/usr/apache2 --enable-auth-digest  --enable-so  \n--with-mpm=worker  \n  \njk2 soure was configured --with-apxs2=/usr/apache2/bin/apxs.", "is_private": false, "id": 32640, "creation_time": "2003-03-07T08:23:40Z", "time": "2003-03-07T08:23:40Z", "creator": "alex14641@yahoo.com", "bug_id": 17762, "attachment_id": null}, {"count": 1, "tags": [], "creator": "cmanolache@yahoo.com", "attachment_id": null, "id": 33171, "time": "2003-03-14T01:14:02Z", "bug_id": 17762, "creation_time": "2003-03-14T01:14:02Z", "is_private": false, "text": "Works for me. I build with ant - didn't try the other build.\n\nMake sure libapr.so is in LD_LIBRARY_PATH and \n ldd libjkjni.so \nlists apr.so as a dependency."}, {"count": 2, "tags": [], "text": "I have the same problem. I want to use channelUnix but not the inprocess jni.\nI have RH8 httpd and http-devel (2.0.40) from rpms\nand the 4.1.24 tomcat binaries installed. I compiled the 4.1.24 connectors\nfrom the source tgz (worked after ln -s /usr/lib/libapr.so /usr/lib/libapr-0.so)\nNow it's not loading with the same error message as above. The symbol\nis from mod_jk2 and LD_PRELOAD=/usr/lib/httpd/modules/mod_jk2.so does not\nhelp since lot of stuff from apache isn't resolvable in mod_jk2.so.\n\nA short glance at the ChannelUn code tells me I need jni for channelUnix.\nIs that correct ?", "attachment_id": null, "id": 36096, "creator": "vasquez@mediales.net", "time": "2003-04-25T13:13:17Z", "bug_id": 17762, "creation_time": "2003-04-25T13:13:17Z", "is_private": false}, {"count": 3, "tags": [], "creator": "djm2@andrew.cmu.edu", "attachment_id": null, "text": "I'm having the exact same problem.  nm shows apr_md5_final() to be in \nlibaprutil, not libapr.  But, ldd jkjni.so does not show libaprutil to be a \ndependency.", "id": 36475, "time": "2003-05-01T22:41:11Z", "bug_id": 17762, "creation_time": "2003-05-01T22:41:11Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 17762, "attachment_id": null, "id": 38982, "time": "2003-06-17T18:51:44Z", "creator": "mdeggers@earthlink.net", "creation_time": "2003-06-17T18:51:44Z", "is_private": false, "text": "I am also having this problem.  My environment is:\n\nRedhat Linux 9 (kernel 2.4.20-9)\nj2sdk 1.4.1_03\nTomcat 4.1.24 binary\nApache 2.0.46 built from source with:\n     ./configure --enable-modules=all --enable-shared=most --enable-ssl=shared\n     CPPFLAGS=-I/usr/kerberos/include\n\nmod_jk2.so built from jakarta-tomcat-connectors-jk2-2.0.2-src\nchange to jk/native2 and run configure with:\n      ./configure --with-apxs2=/home/apache/bin/apxs \\\n                  --with-tomcat41=/home/tomcat\n\nld.so.conf has /home/apache/lib entered.  A partial listing of /sbin/ldconfig -v\nis shown below.\n\n/home/apache/lib:\n        jkjni.so -> libjkjni.so\n        libaprutil-0.so.0 -> libaprutil-0.so.0.9.3\n        libapr-0.so.0 -> libapr-0.so.0.9.3\n\nAn ldd for jkjni.so is shown below.\n\nldd /home/apache/lib/jkjni.so\n        libcrypt.so.1 => /lib/libcrypt.so.1 (0x40039000)\n        libapr-0.so.0 => /home/apache/lib/libapr-0.so.0 (0x40066000)\n        libpcre.so.0 => /lib/libpcre.so.0 (0x40083000)\n        libpcreposix.so.0 => /usr/lib/libpcreposix.so.0 (0x4008e000)\n        libc.so.6 => /lib/tls/libc.so.6 (0x42000000)\n        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x80000000)\n\nAn nm for libapr-0.so.0 run through grep apr_md5_final shows no match.  However\nan nm for libaprutil-0.so.0 run through grep apr_md5_final shows:\n\n00009248 T apr_md5_final"}, {"count": 5, "tags": [], "text": "After exploring the dependencies a bit, I came up with the following:\n\nTo build apr and aprutil with the proper dependencies, LDFLAGS was set to the\nfollowing:\n\nexport LDFLAGS=\"-lgdbm -lldap -lexpat -ldb\"\n\nApache 2.0.46 was then built to create apr and aprutil.  ldd on the two\nlibraries is shown below.\n\nldd /home/apache/lib/libapr-0.so.0.9.4\n        libdb-4.0.so => /lib/libdb-4.0.so (0x40036000)\n        libgdbm.so.2 => /usr/lib/libgdbm.so.2 (0x400de000)\n        libldap.so.2 => /usr/lib/libldap.so.2 (0x400e5000)\n        libexpat.so.0 => /usr/lib/libexpat.so.0 (0x40111000)\n        libc.so.6 => /lib/tls/libc.so.6 (0x42000000)\n        libpthread.so.0 => /lib/tls/libpthread.so.0 (0x40131000)\n        libsasl.so.7 => /usr/lib/libsasl.so.7 (0x4013f000)\n        libssl.so.4 => /lib/libssl.so.4 (0x4014a000)\n        libcrypto.so.4 => /lib/libcrypto.so.4 (0x4017f000)\n        liblber.so.2 => /usr/lib/liblber.so.2 (0x40271000)\n        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x80000000)\n        libdl.so.2 => /lib/libdl.so.2 (0x4027c000)\n        libcrypt.so.1 => /lib/libcrypt.so.1 (0x40280000)\n        libpam.so.0 => /lib/libpam.so.0 (0x402ad000)\n        libresolv.so.2 => /lib/libresolv.so.2 (0x402b5000)\n        libgssapi_krb5.so.2 => /usr/kerberos/lib/libgssapi_krb5.so.2(0x402c7000)\n        libkrb5.so.3 => /usr/kerberos/lib/libkrb5.so.3 (0x402db000)\n        libk5crypto.so.3 => /usr/kerberos/lib/libk5crypto.so.3 (0x40339000)\n        libcom_err.so.3 => /usr/kerberos/lib/libcom_err.so.3 (0x40349000)\n        libz.so.1 => /usr/lib/libz.so.1 (0x4034b000)\n\nldd /home/apache/lib/libaprutil-0.so.0.9.4\n        libdb-4.0.so => /lib/libdb-4.0.so (0x4002d000)\n        libgdbm.so.2 => /usr/lib/libgdbm.so.2 (0x400d5000)\n        libldap.so.2 => /usr/lib/libldap.so.2 (0x400dc000)\n        libexpat.so.0 => /usr/lib/libexpat.so.0 (0x40108000)\n        libc.so.6 => /lib/tls/libc.so.6 (0x42000000)\n        libpthread.so.0 => /lib/tls/libpthread.so.0 (0x40128000)\n        libsasl.so.7 => /usr/lib/libsasl.so.7 (0x40136000)\n        libssl.so.4 => /lib/libssl.so.4 (0x40141000)\n        libcrypto.so.4 => /lib/libcrypto.so.4 (0x40176000)\n        liblber.so.2 => /usr/lib/liblber.so.2 (0x40268000)\n        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x80000000)\n        libdl.so.2 => /lib/libdl.so.2 (0x40273000)\n        libcrypt.so.1 => /lib/libcrypt.so.1 (0x40277000)\n        libpam.so.0 => /lib/libpam.so.0 (0x402a4000)\n        libresolv.so.2 => /lib/libresolv.so.2 (0x402ac000)\n        libgssapi_krb5.so.2 => /usr/kerberos/lib/libgssapi_krb5.so.2(0x402be000)\n        libkrb5.so.3 => /usr/kerberos/lib/libkrb5.so.3 (0x402d2000)\n        libk5crypto.so.3 => /usr/kerberos/lib/libk5crypto.so.3 (0x40330000)\n        libcom_err.so.3 => /usr/kerberos/lib/libcom_err.so.3 (0x40340000)\n        libz.so.1 => /usr/lib/libz.so.1 (0x40342000)\n\nThe Makefile in:\n\njakarta-tomcat-connectors-jk2-2.0.2-src/jk/native2/server/apache2\n\nwas modified so that the JK_LDFLAGS reads as follows:\n\nJK_LDFLAGS=-L${APACHE2_LIBDIR} -lcrypt -lapr-0 -laprutil-0 -lpcre -lpcreposix\n\nCreation and installation of mod_jk2.so and jkjni.so proceeded as expected.  The\nsocket connection works as expected.\n\nWhen an out-of-process UNIX socket was attempted, the following error occured\nwhile starting up Tomcat.\n\nINFO: Starting Coyote HTTP/1.1 on port 8080\nJun 19, 2003 2:19:05 PM org.apache.jk.server.JkMain start\nINFO: APR not loaded, disabling jni components: java.io.IOException: initialize\nException during startup processing\njava.lang.reflect.InvocationTargetException\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:324)\nat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:203)\nCaused by: java.lang.UnsatisfiedLinkError: getJkEnv\nat org.apache.jk.apr.AprImpl.getJkEnv(Native Method)\nat org.apache.jk.common.JniHandler.initNative(JniHandler.java:132)\nat org.apache.jk.common.ChannelUn.init(ChannelUn.java:114)\nat org.apache.jk.server.JkMain.start(JkMain.java:351)\nat org.apache.jk.server.JkCoyoteHandler.start(JkCoyoteHandler.java:169)\nat org.apache.coyote.tomcat4.CoyoteConnector.start(CoyoteConnector.java:1141)\nat org.apache.catalina.core.StandardService.start(StandardService.java:506)\nat org.apache.catalina.core.StandardServer.start(StandardServer.java:2190)\nat org.apache.catalina.startup.Catalina.start(Catalina.java:512)\nat org.apache.catalina.startup.Catalina.execute(Catalina.java:400)\nat org.apache.catalina.startup.Catalina.process(Catalina.java:180)\n... 5 more\n\nAnd Tomcat dies.\n\nI guess the next thing to do is find where getJkEnv is and why it's not linked\nin appropriately.\n\nThis appears to be more and more like a build configuration issue coupled with\nRedhat 9 Linux rpm locations.", "attachment_id": null, "id": 39121, "creator": "mdeggers@earthlink.net", "time": "2003-06-19T21:34:43Z", "bug_id": 17762, "creation_time": "2003-06-19T21:34:43Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 17762, "is_private": false, "id": 48346, "time": "2003-12-01T16:39:20Z", "creator": "cschlaefcke@wms-network.de", "creation_time": "2003-12-01T16:39:20Z", "tags": [], "text": "when I modify the mkefile like described here I gt another error:\n\nlibjkjni.so: undefined symbol: gdbm_errno\n\nFor Info:\ntomcat 4.1.29\nj2sdk1.4.1_02\njk2_2.0.2\nkernel 2.4.5 (I know it\u00b4s rather old, but I cant get the admins to upgrade it)"}, {"count": 7, "tags": [], "text": "After a long time of not working with this, I decided to tackle the issue again.\n\nI'm now on Fedora Core 1, j2sdk 1.4.2_02, Tomcat 5.0.16, and Apache 2.0.48.\n\nI used the following flags before compiling Apache 2.0.48\n\nexport LDFLAGS=\"-lgdbm -lldap -lexpat -ldb -L/usr\"\nexport CPPFLAGS=\"-I/usr/kerberos/include -I/usr/openssl/include\"\n\nI used the following to configure Apache 2.0.48\n\n./configure --enable-ssl=shared --enable-modules=all --enable-mods-shared=most\n\nI then moved over to the connectors - source from:\n\njakarta-tomcat-connectors-jk2-2.0.2-src.tar.gz\n\nI ran the following configure command in\njakarta-tomcat-connectors-jk2-2.0.2-src/native/jk2:\n\n./configure --with-apxs2=/home/apache/bin/apxs \\\n            --with-tomcat41=/home/tomcat \\\n            --with-os-type=/usr/java/jre/lib/i386 \\\n            --with-jni \\\n            --with-pcre\n\nThe third line is new.\n\nOnce the configuration is run, the Makefile in \njakarta-tomcat-connectors-jk2-2.0.2-src/native/jk2/server/apache2 was altered.\n\nJK_LDFLAGS=-L${APACHE2_LIBDIR} -lcrypt -lapr-0 -lpcre -lpcreposix -laprutil-0\n\nIn particular, -laprutil-0 was added.\n\nAfter building and installing mod_jk2.so and jkjni.so, I was able to get the\nfollowing Apache 2.048 - Tomcat 5.0.16 \n\nhttpd - tomcat via IP sockets    works\nhttpd - tomcat via UNIX sockets  works\nhttpd - tomcat via in-process    loops with unable to find child nnnn in \n                                 httpd error_log\n\nThis has been mentioned on the Tomcat mailing lists, so I will search to see if\nthere is a solution.", "is_private": false, "id": 50150, "creator": "mdeggers@earthlink.net", "time": "2004-01-06T21:49:07Z", "bug_id": 17762, "creation_time": "2004-01-06T21:49:07Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "I think people should just avoid JNI for now. It doesn't give any performance\nboost anyway.", "is_private": false, "id": 52846, "creator": "remm@apache.org", "time": "2004-02-24T11:58:59Z", "bug_id": 17762, "creation_time": "2004-02-24T11:58:59Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "I tested SSI with Apache 2 very recently, and it mostly works (some warnings on\nstartup, but otherwise it works ok). See the configuration and tips in this\nother bug report. JNI will work only with multi threaded MPMs, never with multi\nprocess.\n\n*** This bug has been marked as a duplicate of 27167 ***", "is_private": false, "bug_id": 17762, "id": 53885, "time": "2004-03-11T17:46:36Z", "creator": "remm@apache.org", "creation_time": "2004-03-11T17:46:36Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "ken@kensystem.com", "attachment_id": null, "text": "(In reply to comment #8)\n> I think people should just avoid JNI for now. It doesn't give any performance\n> boost anyway.\n\nHuhh?!? Sorry, I just have to comment..\n\nPlease compare the performance (should I say penalty) of *not* using JNI... The\nlast time I tested (and also just now), shoveling long byte streams through\nServletResponse.getOutputStream() __completely___ brings the native apache\nserver to a grinding hault (full CPU usage, e.g. D-O-S). My test on a 2GHZ box\nof a file download via FileInputStream -> getOutputStream() (4096 buffer)\n*pinned* the CPU (the Apache process, specifically), yet could only sustain a\nmere 1-2 MBytes/second.\n\nWhen I compared jni performance a year or two ago (when I could get it to work),\nthis performance hit was marginal or negligible as I recall. And other JNI based\nservers (right now) also have no such performace hit.\n\nI concede that this isn't neccsarily the socket channels architecture's fault\n(perhaps it just need to be buffered/optimized on the mod_jk side?), but still...", "id": 76502, "time": "2005-06-17T19:47:41Z", "bug_id": 17762, "creation_time": "2005-06-17T19:47:41Z", "is_private": false}]
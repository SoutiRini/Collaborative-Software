[{"count": 0, "tags": [], "text": "I have two svg files to demonstrate the issue. When I try to open the first \nfile, Batik hangs during rendering process, and second file crashes VM.\n\nBoth happens when I use the stroke-dasharray property in style attribute. If I \nremove this property, both files are opening fine. In these files, the \ncoordinates used are very high. When i tried the same shapes with smaller \ncoordinates, files opened fine. \n\nfollowing are the 2 svgs.\n\nFile: Test1\n-------------------------------------------------------------------------------\n<?xml version='1.0' encoding='ISO-8859-1' ?>\n<svg id=\"svgAll\" width=\"900\" xmlns=\"http://www.w3.org/2000/svg\" height=\"600\" \nviewBox=\"0 0 9000000000 6000000000\" \nxmlns:cs=\"http://www.savagesoftware.com/dgn2svg\" xml:space=\"preserve\" \nxmlns:xlink=\"http://www.w3.org/1999/xlink\" text-rendering=\"optimizeSpeed\" image-\nrendering=\"optimizeSpeed\" shape-rendering=\"optimizeSpeed\" \npreserveAspectRatio=\"xMidYMid\">\n<style type=\"text/css\">\n<![CDATA[\n    .line { fill:none; stroke:red; stroke-width:1pt; stroke-dasharray:10,10 }\n]]>\n</style>\n<rect x=\"0\" y=\"0\" fill=\"#000000\" width=\"9000000000\" height=\"6000000000\"/>\n<defs/>\n<g>\n<line x1=\"100000000\" y1=\"200000000\" x2=\"4000000000\" y2=\"3000000000\"   \nclass=\"line\" />\n<path d=\"M300000000 400000000 5000000000 6000000000\" class=\"line\" />\n<path d=\"M300000000,300000000 A1000000000 1000000000 0 0 0 1500000000 \n1500000000\" class=\"line\" />\n</g>\n</svg>\n-------------------------------------------------------------------------------\n\nFile: Test2\n-------------------------------------------------------------------------------\n<?xml version='1.0' encoding='ISO-8859-1' ?>\n<!-- Generator: Savage Dgn2Svg Converter -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG \n20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\" [\n  <!ENTITY st31 \"stroke:#FF0000;stroke-width:142.64906666666667;stroke-\ndasharray:151.564633,267.467000\">\n]>\n<svg id=\"svgAll\" width=\"900\" xmlns=\"http://www.w3.org/2000/svg\" height=\"600\" \nviewBox=\"-1305267092.3 89202697.65 508486.13867 294213.7\" \nxmlns:cs=\"http://www.savagesoftware.com/dgn2svg\" xml:space=\"preserve\" \nxmlns:xlink=\"http://www.w3.org/1999/xlink\" text-rendering=\"optimizeSpeed\" image-\nrendering=\"optimizeSpeed\" shape-rendering=\"optimizeSpeed\" \npreserveAspectRatio=\"xMidYMid\">\n<rect x=\"-1305267092.3\" y=\"89202697.65\" fill=\"#000000\" width=\"508486.13867\" \nheight=\"294213.7\"/>\n<defs/>\n<g>\n<g id=\"ELA2_8\" class=\"Layer-1-55\">\n<path d=\"M-1304851927.4 89427116.57 A1940.7473267 698.6260632 0 0 0 -\n1304855793.6 89426789.689\" style=\"&st31;\"/>\n</g>\n</g>\n</svg>\n-------------------------------------------------------------------------------\n\nWhen VM crashed, I got a log file, which shows a stack overflow outside VM, \nduring StrokeShapePainter.getPaintedArea() procedure call. Below is the full \nerror dump..\n\nFile: error dump\n------------------------------------------------------------------------------\nAn unrecoverable stack overflow has occurred.\n\nAn unexpected exception has been detected in native code outside the VM.\nUnexpected Signal : EXCEPTION_STACK_OVERFLOW occurred at PC=0x6D137F36\nFunction=[Unknown.]\nLibrary=C:\\Program Files\\Java\\j2re1.4.1_01\\bin\\dcpr.dll\n\nNOTE: We are unable to locate the function name symbol for the error\n      just occurred. Please refer to release documentation for possible\n      reason and solutions.\n\n\nCurrent Java thread:\n\tat sun.dc.pr.PathDasher.appendCubic(Native Method)\n\tat java.awt.BasicStroke.createStrokedShape(BasicStroke.java:337)\n\tat org.apache.batik.gvt.StrokeShapePainter.getPaintedArea(Unknown \nSource)\n\tat org.apache.batik.gvt.StrokeShapePainter.getPaintedBounds2D(Unknown \nSource)\n\tat org.apache.batik.gvt.CompositeShapePainter.getPaintedBounds2D\n(Unknown Source)\n\tat org.apache.batik.gvt.ShapeNode.getPrimitiveBounds(Unknown Source)\n\tat \norg.apache.batik.gvt.AbstractGraphicsNode.getTransformedPrimitiveBounds(Unknown \nSource)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.getTransformedBounds\n(Unknown Source)\n\tat \norg.apache.batik.gvt.CompositeGraphicsNode.getTransformedPrimitiveBounds\n(Unknown Source)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.getTransformedBounds\n(Unknown Source)\n\tat \norg.apache.batik.gvt.CompositeGraphicsNode.getTransformedPrimitiveBounds\n(Unknown Source)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.getTransformedBounds\n(Unknown Source)\n\tat \norg.apache.batik.gvt.CompositeGraphicsNode.getTransformedPrimitiveBounds\n(Unknown Source)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.getTransformedBounds\n(Unknown Source)\n\tat org.apache.batik.gvt.CompositeGraphicsNode.getPrimitiveBounds\n(Unknown Source)\n\tat org.apache.batik.gvt.filter.GraphicsNodeRable8Bit.getBounds2D\n(Unknown Source)\n\tat org.apache.batik.gvt.filter.GraphicsNodeRable8Bit.createRendering\n(Unknown Source)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.renderGNR(Unknown \nSource)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.updateWorkingBuffers\n(Unknown Source)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.repaint(Unknown Source)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.repaint(Unknown Source)\n\tat org.apache.batik.swing.gvt.GVTTreeRenderer.run(Unknown Source)\n\nDynamic libraries:\n0x00400000 - 0x00406000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\javaw.exe\n0x77F80000 - 0x77FFD000 \tC:\\WINNT\\system32\\ntdll.dll\n0x7C2D0000 - 0x7C332000 \tC:\\WINNT\\system32\\ADVAPI32.dll\n0x7C570000 - 0x7C623000 \tC:\\WINNT\\system32\\KERNEL32.DLL\n0x77D30000 - 0x77DA1000 \tC:\\WINNT\\system32\\RPCRT4.DLL\n0x77E10000 - 0x77E75000 \tC:\\WINNT\\system32\\USER32.dll\n0x77F40000 - 0x77F7B000 \tC:\\WINNT\\system32\\GDI32.DLL\n0x78000000 - 0x78045000 \tC:\\WINNT\\system32\\MSVCRT.dll\n0x6D330000 - 0x6D45A000 \tC:\\Program Files\\Java\\j2re1.4.1_01\n\\bin\\client\\jvm.dll\n0x77570000 - 0x775A0000 \tC:\\WINNT\\system32\\WINMM.dll\n0x6D1D0000 - 0x6D1D7000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\hpi.dll\n0x6D300000 - 0x6D30D000 \tC:\\Program Files\\Java\\j2re1.4.1_01\n\\bin\\verify.dll\n0x6D210000 - 0x6D229000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\java.dll\n0x6D320000 - 0x6D32D000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\zip.dll\n0x6D000000 - 0x6D0FB000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\awt.dll\n0x77800000 - 0x7781E000 \tC:\\WINNT\\system32\\WINSPOOL.DRV\n0x76620000 - 0x76630000 \tC:\\WINNT\\system32\\MPR.DLL\n0x75E60000 - 0x75E7A000 \tC:\\WINNT\\system32\\IMM32.dll\n0x77A50000 - 0x77B3F000 \tC:\\WINNT\\system32\\ole32.dll\n0x6D180000 - 0x6D1D0000 \tC:\\Program Files\\Java\\j2re1.4.1_01\n\\bin\\fontmanager.dll\n0x72800000 - 0x72846000 \tC:\\WINNT\\system32\\ddraw.dll\n0x728A0000 - 0x728A6000 \tC:\\WINNT\\system32\\DCIMAN32.dll\n0x72D90000 - 0x72E03000 \tC:\\WINNT\\system32\\D3DIM.DLL\n0x1B7C0000 - 0x1B7CB000 \tC:\\Program Files\\Lotus\\Sametime \nClient\\ACTIVMON.dll\n0x6D2D0000 - 0x6D2DE000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\net.dll\n0x75050000 - 0x75058000 \tC:\\WINNT\\system32\\WSOCK32.dll\n0x75030000 - 0x75044000 \tC:\\WINNT\\system32\\WS2_32.DLL\n0x75020000 - 0x75028000 \tC:\\WINNT\\system32\\WS2HELP.DLL\n0x6D2E0000 - 0x6D2E8000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\nio.dll\n0x1BD00000 - 0x1BD09000 \tC:\\PROGRA~1\\MYWEBS~1\\bar\\1.bin\\mwsoeplg.dll\n0x782F0000 - 0x78535000 \tC:\\WINNT\\system32\\SHELL32.dll\n0x70A70000 - 0x70AD9000 \tC:\\WINNT\\system32\\SHLWAPI.dll\n0x71710000 - 0x71794000 \tC:\\WINNT\\system32\\COMCTL32.dll\n0x779B0000 - 0x77A4B000 \tC:\\WINNT\\system32\\OLEAUT32.dll\n0x77820000 - 0x77827000 \tC:\\WINNT\\system32\\VERSION.dll\n0x759B0000 - 0x759B6000 \tC:\\WINNT\\system32\\LZ32.DLL\n0x6D130000 - 0x6D152000 \tC:\\Program Files\\Java\\j2re1.4.1_01\\bin\\dcpr.dll\n0x77920000 - 0x77943000 \tC:\\WINNT\\system32\\imagehlp.dll\n0x72A00000 - 0x72A2D000 \tC:\\WINNT\\system32\\DBGHELP.dll\n0x690A0000 - 0x690AB000 \tC:\\WINNT\\system32\\PSAPI.DLL\n\nLocal Time = Tue Oct 19 17:59:50 2004\nElapsed Time = 7\n#\n# The exception above was detected in native code outside the VM\n#\n# Java VM: Java HotSpot(TM) Client VM (1.4.1_01-b01 mixed mode)\n#\n# An error report file has been saved as hs_err_pid1968.log.\n# Please refer to the file for further information.\n#\n-------------------------------------------------------------------------------", "is_private": false, "id": 65307, "creator": "girish.x.vengassery@verizon.com", "time": "2004-10-19T13:01:24Z", "bug_id": 31773, "creation_time": "2004-10-19T13:01:24Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Hi Girish,\n\n   There isn't much we can do to fix this problem as we simply use the\nJava2D library to do the stroking.  \n\n   However, I suspect the problem here is that your stroke-dasharray \nvalues are really tiny compaired to the size of your path (the first \nfile would involve ~1/2million dashes (each of which needs to be done as \ngeometry) the second file has a similar issue.  I suspect that if you \nwere to choose stroke-dasharray values more in keeping with the scale \nof the diagram you would have more luck.\n", "is_private": false, "id": 66047, "creator": "deweese@apache.org", "time": "2004-10-29T10:27:03Z", "bug_id": 31773, "creation_time": "2004-10-29T10:27:03Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "The documentation for <mapper> states: \n\"Note that Ant will not automatically convert / or \\ characters in the to and\nfrom attributes to the correct directory separator of your current platform. If\nyou need to specify this separator, use ${file.separator} instead.\"\n\nWe are using <mapper type=\"regex\"> to copy a directory structure that looks like\nthis:\n/Root/\n  /sub1/\n    /src/scripts/files..\n  /sub2/\n    /src/scripts/files..\n  /sub3/\n    /src/scripts/files..\n  /sub4/\n    /src/scripts/files..\n\nto this:\n/NewRoot/\n  /sub1/\n    /files..\n  /sub2/\n    /files..\n  /sub3/\n    /files..\n  /sub4/\n    /files..\n\nTo do it we are using <mapper> with <copy> like this:\n<copy todir=\"NewRoot\">\n  <mapper type=\"regexp\" \n    from=\"(.*?).src.scripts.(.*)\" \n    to=\"\\1${file.separator}\\2\"/> \n  <fileset dir=\"Root\">\n    <include name=\"**/src/scripts/*\"/>\n  </fileset>\n</copy>\n\nThe problem happens with the ${file.separator}, we expect the results as stated\nabove, what we are actually getting is this:\n/NewRoot/\n  /sub1/\n    /2\n  /sub2/\n    /2\n  /sub3/\n    /2\n  /sub4/\n    /2\n(the 2's are files)\nIf we modify the mapper's \"to\" regex to this:\n  to=\"\\1${file.separator}${file.separator}\\2\"\n\nThe results are what we expect.  I believe the problem lies in the handling of\nregular expressions and how ant is using substitution.  We are on a windows\nmachine, so the \"to\" regex (in the buggy case) will resolve to something like\nthis before sending the regular expression off to Java (using the standard Reg\nex handling with Java 1.4):\n  sub1\\\\2\n\nJava then interprets the 2 \"\\\"s to be a literal \"\\\" and ant is then left to map\neverything to the filename \"2\".\n\nLet me know if you need more information.", "is_private": false, "bug_id": 26901, "id": 52212, "time": "2004-02-12T22:46:49Z", "creator": "rxh@gers.com", "creation_time": "2004-02-12T22:46:49Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 26901, "attachment_id": null, "id": 52214, "creation_time": "2004-02-12T22:47:52Z", "time": "2004-02-12T22:47:52Z", "creator": "rxh@gers.com", "text": "I also verified that this is an issue with Ant 1.5.2", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "peter.reilly@corvil.com", "is_private": false, "id": 52230, "time": "2004-02-13T09:37:29Z", "bug_id": 26901, "creation_time": "2004-02-13T09:37:29Z", "tags": [], "text": "Blame billy for this.\nThe \\ was chosen as a directory separator for dos althought it had\nfor a number of years been used as a escape character in C and also\nin ed. The regular expressions in ed spread over the years to emacs, perl\nand python retaining \\ as an escape character.\n\nThe documentation for mapper is correct for most of the mapper types,\nbut not for the specific regex mapper.\n\nIn dos / may also be used as a directory separator so the following\nwill work in a platform independent (well dos, unix and mac) fashion:\n\n<copy todir=\"NewRoot\">\n  <mapper type=\"regexp\" \n    from=\"(.*?).src.scripts.(.*)\" \n    to=\"\\1/\\2\"/> \n  <fileset dir=\"Root\">\n    <include name=\"**/src/scripts/*\"/>\n  </fileset>\n</copy>\n\nHowever this does not work for the \"from\" field in a regex mapper\n"}, {"count": 3, "tags": [], "text": "<regexpmapper> now has a handledirchar attribute. It\nwill allow the '/' in the \"from\" attribute to\nmatch '\\' in file names. One needs to use '/' in\nthe to attribute.\n\nThe manual how has a note explaining the issue.", "is_private": false, "bug_id": 26901, "id": 68658, "time": "2004-12-17T15:58:16Z", "creator": "peterreilly@apache.org", "creation_time": "2004-12-17T15:58:16Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "gerhard.oettl@oesoft.at", "attachment_id": null, "id": 84105, "time": "2006-01-01T13:42:48Z", "bug_id": 38087, "creation_time": "2006-01-01T13:42:48Z", "is_private": false, "text": "This patch (re)implements the force-page-count property.\n\nI tried to implement it with as little changes to the\ncode as possible. Therefore some design issues and questions\nremain - see later.\n\nDescription:\nThe force-page-count property is handled by adding a method\nto the PageSequenceLayoutManger, because there are is a\nmethod that has all informations (static content, pagenumber,\n...) about creating a new page (makeNewPage).\nThe main problem was that the force-page-count property needs\nthe initial-page-number of the next page-sequence which does\nnot exist at this time.\nI solved this by preserving the current PageSequenceLayoutManger\nafter the end of the page-sequence. I used the Root object\nfor this because the last pagenumber of the sequence and other\ninformations are also handed over this object from one\npage-sequence to the other. At the beginning of the following\npage-sequence the (stored) previous PageSequenceLayoutManger\nis called with the now current PageSequence object to finish\nthis work.\n\nChanges to Root.java:\n- insert the variable previousPageSeqLM to store a\n  PageSequenceLayoutManger for later use\n  (and import the necessary class definition).\n\nChanges to PageSequenceLayoutManger.java:\n- split off the last part of activateLayout into a separate\n  method (finishLeayout) because i need the same functionality\n  after the force-page-count handling.\n- preserve the current PageSequenceLayoutManger object to the\n  Root object at the end of the finishLayout method.\n- implement the force-page-count propterty in the\n  checkForcePageCount method. This method needs the next\n  PageSequence object as parameter. To get the initial-page-number\n  property of this next page-sequence i copied the code from\n  PageSequence.initPageNumber.\n\nChanges to PageSequence.java:\n- call the checkForcePageCount method of the preserved previous\n  PageSequenceLayoutManger inside the startOfNode method\n  immediately before initPageNumber so that this method is\n  waware of possibly inserted pages of the previous page-sequence.\n- insert a getFocePageCount method to get the private variable.\n- insert a getInitialPageNumber method to get the private variable.\n\n\nOpen issues / questions:\n- i think it very likely that the previousPageSeqLM variable of\n  the Root class should be privat and there should be a\n  setPreviousPageSeqLM and a getPreviousPageSeqLM method to\n  hand the variable into and out of the object.\n- there was a second possiblity to implement this all\n  by using the AreaTreeHandler:\n  * instead of saving the PageSequenceLayoutManger object\n    at the end of the finishLayout method of the\n    PageSequenceLayoutManger it could be preserved at the\n    end of the endPageSequence method of the AreaTreeHandler.\n  * instead of calling the checkForcePageCount from the\n    startOfNode method of PageSequence it could be called\n    from the startPageSequence method of the AreaTreeHandler\n    after receiving the rootFObj.\n  * all other could be left nearly as with this patch with\n    the exception that the startingPageNumber of the PageSequence\n    has to be recalced after calling the checkForcePageCount\n    because it is already calced at this point and does not\n    know about possibly inserted pages from the\n    checkForcePageCount method before.\n  someone who has a more overall sight of the code has to\n  decide where it fits best.\n\n\n\n\nI know the force-page-count property is of low priority, but\nit would be nice to get feedback, if someone can spare time\nto have a look at this patch.\n\n\nI hope i was not too verbose ;-) and that my patch is more\nusefull than the review is time-consuming and that i dont\nviolate too much design guidelines.\n\n\nhappy new year\ngerhard"}, {"count": 1, "tags": [], "creator": "gerhard.oettl@oesoft.at", "attachment_id": 17303, "id": 84106, "time": "2006-01-01T13:44:39Z", "bug_id": 38087, "creation_time": "2006-01-01T13:44:39Z", "is_private": false, "text": "Created attachment 17303\nthe patch itself"}, {"count": 2, "tags": [], "bug_id": 38087, "attachment_id": 17304, "is_private": false, "id": 84107, "time": "2006-01-01T13:45:33Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2006-01-01T13:45:33Z", "text": "Created attachment 17304\nthis fo i used for testing (no automated test case)"}, {"count": 3, "tags": [], "bug_id": 38087, "text": "Gerhard,\n\nThanks for the patch. It looks fine.\n\nI am not quite happy with the fact that checkForcePageCount is called\nby the next page sequence. This is an interaction between page\nsequences, and it is better dealt with by the controlling structure,\nin this case AreaTreeHandler. In other words, I go with your\nsuggestion in the second *.\n\nI also note that the object that is passed to checkForcePageCount can\nbe narrowed down to Numeric nextPageSeq.getInitialPageNumber().\n\nThere is a little error in the last page sequence but one in your demo\nfile. It says that next is auto-even, which is not true.\n\nIf you make the change to the patch, I will be happy to commit it.\n\nSimon\n", "id": 84191, "time": "2006-01-03T22:23:49Z", "creator": "spepping@apache.org", "creation_time": "2006-01-03T22:23:49Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 38087, "text": "Created attachment 17329\npatch 2 (using area tree)\n\nad the now 2c)\nAt the time the checkForcePageCount is called from the\nAreaTreeHandler the initialPageNumber is already calced by the\nPageSequence without knowing about eventueally later added pages so \nit must be recalced. I did this by making the initPageNumber method\npublic. If this should stay private i have to add a public\nrecalcInitPageNumber method that does nothing than call the\nprivate initPageNumber method - at your decision.", "id": 84240, "time": "2006-01-04T23:59:27Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2006-01-04T23:59:27Z", "is_private": false, "attachment_id": 17329}, {"count": 5, "tags": [], "bug_id": 38087, "text": "Created attachment 17332\na better fo example file", "id": 84257, "time": "2006-01-05T12:14:49Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2006-01-05T12:14:49Z", "is_private": false, "attachment_id": 17332}, {"count": 6, "tags": [], "creator": "spepping@apache.org", "attachment_id": null, "id": 84313, "time": "2006-01-06T22:33:16Z", "bug_id": 38087, "creation_time": "2006-01-06T22:33:16Z", "is_private": false, "text": "Applied. I rearranged the calls somewhat. This is the resulting call hierarchy:\n\nPageSequence.startOfNode\n AreaTreeHandler.startPageSequence\n  PSLM.doForcePageCount (previous PS if not null)\n   PSLM.finishPage\n  PSLM.finishPageSequence (previous PS if not null)\n   Root.notifyPageSequenceFinished\n   AreaTreeHandler.notifyPageSequenceFinished\n  PageSequence.initPageNumber\n\nPageSequence.endOfNode\n AreaTreeHandler.endPageSequence\n  PSLM.activateLayout\n   PSLM.finishPage\n\nThanks for the patch.\n\nSimon\n"}, {"count": 7, "tags": [], "bug_id": 38087, "attachment_id": 17356, "text": "Created attachment 17356\ntestcase for force-page-count=\"auto\"", "id": 84322, "time": "2006-01-07T12:32:05Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2006-01-07T12:32:05Z", "is_private": false}, {"count": 8, "tags": [], "creator": "gerhard.oettl@oesoft.at", "attachment_id": 17357, "id": 84323, "time": "2006-01-07T12:34:35Z", "bug_id": 38087, "creation_time": "2006-01-07T12:34:35Z", "is_private": false, "text": "Created attachment 17357\ntestcase for all but auto\n\nI started with pagenumber 201 to allow to concatenate to the testcase for\nforce-page-count=\"auto\""}, {"count": 9, "tags": [], "bug_id": 38087, "attachment_id": null, "text": "Thanks for the fine test cases. Re noauto: Do you really expect 18 pages? I get\n17, and I think that is correct.\n", "id": 84414, "time": "2006-01-09T22:20:26Z", "creator": "spepping@apache.org", "creation_time": "2006-01-09T22:20:26Z", "is_private": false}, {"count": 10, "attachment_id": null, "bug_id": 38087, "is_private": false, "id": 84415, "time": "2006-01-10T00:38:39Z", "creator": "gerhard.oettl@oesoft.at", "creation_time": "2006-01-10T00:38:39Z", "tags": [], "text": "Yes i expect 17. I want to show the missing pageno 217 - a typical case of\nself-delusion. "}, {"count": 11, "tags": [], "creator": "spepping@apache.org", "text": "Committed the test cases. Thanks. Simon", "id": 84453, "time": "2006-01-10T21:21:47Z", "bug_id": 38087, "creation_time": "2006-01-10T21:21:47Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 38087, "attachment_id": null, "is_private": false, "id": 155762, "time": "2012-04-01T06:39:38Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:39:38Z", "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed"}]
[{"count": 0, "tags": [], "bug_id": 1792, "attachment_id": null, "id": 2494, "creation_time": "2001-05-16T23:55:19Z", "time": "2001-05-16T23:55:19Z", "creator": "carnold@houston.rr.com", "text": "The description of Element.getElementByTagName explicitly states that\nit does not attempt to match the self element.\n\ngetElementsByTagName \nReturns a NodeList of all descendant Elements with a given tag name, ...\n\nThe current implementation of Element.getElementsByTagName will match\nthe target element.  The current implementation of Document.getElementsByTagName\njust defers to getDocumentElement().getElementsByTagName() so if you fix\nthe first problem, you will break Document.getElementsByTagName since\nthe document element does participate.  To fix this I changed AbstractDocument, \nAbstractElement and moved the utility functions used to implement \ngetElementByTagName() in AbstractElement to AbstractParentNode so they\ncould be accessed from within both of the other classes.\n\nThe CVS diff for AbstractParentNode also include diffs reported in\nother bugs I have reported tonight.\n\n*****CVS exited normally with code 1*****\n\ncvs diff AbstractParentNode.java (in directory D:\\apache-xml\\xml-\nbatik\\sources\\org\\apache\\batik\\dom\\)\nIndex: AbstractParentNode.java\n===================================================================\nRCS file: /home/cvspublic/xml-\nbatik/sources/org/apache/batik/dom/AbstractParentNode.java,v\nretrieving revision 1.6\ndiff -r1.6 AbstractParentNode.java\n79a80\n>             Node ns;\n80a82,86\n>                 //\n>                 //  this has to be done before insertion\n>                 //    since it will point to the reference\n>                 //    node afterwards\n>                 ns = n.getNextSibling();\n82c88\n< \t\tn = n.getNextSibling();\n---\n> \t\tn = ns;\n183a190\n>             Node ns;\n184a192,195\n>                 //\n>                 //  this has to be done before append()\n>                 //     or nextSibling will point to the reference node\n>                 ns = n.getNextSibling();\n186c197\n< \t\tn = n.getNextSibling();\n---\n> \t\tn = ns;\n450c461\n< \t\n---\n> \n455c466\n< \t\n---\n> \n547,548c558,559\n< \t\t new Object[] { new Integer(o.getNodeType()),\n< \t\t\t\to.getNodeName() });\n---\n> \t\t new Object[] { new Integer(r.getNodeType()),\n> \t\t\t\tr.getNodeName() });\n653c664\n<             \n---\n> \n664c675\n<         private void readObject(ObjectInputStream s) \n---\n>         private void readObject(ObjectInputStream s)\n684c695\n<             } \n---\n>             }\n687a699,754\n> \n>     /**\n>      * An auxiliary method of getElementsByTagName.\n>      */\n>     protected static void getElementsByTagName(Node node, String name,\n>                                                Nodes list) {\n> \tif (node.getNodeType() == ELEMENT_NODE) {\n> \t    if (name.equals(\"*\") || name.equals(node.getNodeName())) {\n> \t\tlist.append(node);\n> \t    }\n> \t}\n> \tfor (Node n = node.getFirstChild();\n>              n != null;\n>              n = n.getNextSibling()) {\n> \t    getElementsByTagName(n, name, list);\n> \t}\n>     }\n> \n>     /**\n>      * An auxiliary method for getElementsByTagNameNS.\n>      */\n>     protected static void getElementsByTagNameNS(Node   node,\n> \t\t\t\t\t\t String ns,\n> \t\t\t\t\t\t String name,\n> \t\t\t\t\t\t Nodes  list) {\n> \tif (node.getNodeType() == ELEMENT_NODE) {\n> \t    if (stringMatches(ns, node.getNamespaceURI()) &&\n> \t\t(name.equals(\"*\") || name.equals(node.getLocalName()))) {\n> \t\tlist.append(node);\n> \t    }\n> \t}\n> \tfor (Node n = node.getFirstChild();\n>              n != null;\n>              n = n.getNextSibling()) {\n> \t    getElementsByTagNameNS(n, ns, name, list);\n> \t}\n>     }\n> \n>     /**\n>      * String matching for getElementsByTagNameNS function.\n>      */\n>     private static boolean stringMatches(String s1, String s2) {\n> \tif (s1 == null && s2 == null) {\n> \t    return true;\n> \t}\n> \tif (s1 == null || s2 == null) {\n> \t    return false;\n> \t}\n> \tif (s1.equals(\"*\")) {\n> \t    return true;\n> \t}\n> \treturn s1.equals(s2);\n>     }\n> \n> \n> \n\n*****CVS exited normally with code 1*****\n\n\ncvs diff AbstractElement.java (in directory D:\\apache-xml\\xml-\nbatik\\sources\\org\\apache\\batik\\dom\\)\nIndex: AbstractElement.java\n===================================================================\nRCS file: /home/cvspublic/xml-\nbatik/sources/org/apache/batik/dom/AbstractElement.java,v\nretrieving revision 1.8\ndiff -r1.8 AbstractElement.java\n192c192,194\n< \tgetElementsByTagName(this, name, result);\n---\n>         for(;n != null; n = n.getNextSibling()) {\n> \t    getElementsByTagName(n, name, result);\n>         }\n234,235c236,237\n<     public void setAttributeNS(String namespaceURI, \n< \t\t\t       String qualifiedName, \n---\n>     public void setAttributeNS(String namespaceURI,\n> \t\t\t       String qualifiedName,\n250c252\n<     public void removeAttributeNS(String namespaceURI, \n---\n>     public void removeAttributeNS(String namespaceURI,\n264c266\n<     public Attr getAttributeNodeNS(String namespaceURI, \n---\n>     public Attr getAttributeNodeNS(String namespaceURI,\n297c299,301\n< \tgetElementsByTagNameNS(this, namespaceURI, localName, result);\n---\n>         for(;n != null; n = n.getNextSibling()) {\n> \t    getElementsByTagNameNS(n, namespaceURI, localName, result);\n>         }\n308,359d311\n<     /**\n<      * An auxiliary method of getElementsByTagName.\n<      */\n<     protected static void getElementsByTagName(Node node, String name,\n<                                                Nodes list) {\n< \tif (node.getNodeType() == ELEMENT_NODE) {\n< \t    if (name.equals(\"*\") || name.equals(node.getNodeName())) {\n< \t\tlist.append(node);\n< \t    }\n< \t}\n< \tfor (Node n = node.getFirstChild();\n<              n != null;\n<              n = n.getNextSibling()) {\n< \t    getElementsByTagName(n, name, list);\n< \t}\n<     }\n< \n<     /**\n<      * An auxiliary method for getElementsByTagNameNS.\n<      */\n<     protected static void getElementsByTagNameNS(Node   node,\n< \t\t\t\t\t\t String ns,\n< \t\t\t\t\t\t String name,\n< \t\t\t\t\t\t Nodes  list) {\n< \tif (node.getNodeType() == ELEMENT_NODE) {\n< \t    if (stringMatches(ns, node.getNamespaceURI()) &&\n< \t\t(name.equals(\"*\") || name.equals(node.getLocalName()))) {\n< \t\tlist.append(node);\n< \t    }\n< \t}\n< \tfor (Node n = node.getFirstChild();\n<              n != null;\n<              n = n.getNextSibling()) {\n< \t    getElementsByTagNameNS(n, ns, name, list);\n< \t}\n<     }\n< \n<     /**\n<      * String matching for getElementsByTagNameNS function.\n<      */\n<     private static boolean stringMatches(String s1, String s2) {\n< \tif (s1 == null && s2 == null) {\n< \t    return true;\n< \t}\n< \tif (s1 == null || s2 == null) {\n< \t    return false;\n< \t}\n< \tif (s1.equals(\"*\")) {\n< \t    return true;\n< \t}\n< \treturn s1.equals(s2);\n<     }\n519c471\n< \t    \n---\n> \n524c476\n< \t    \n---\n> \n612c564\n<                                 (nsURI == null) \n---\n>                                 (nsURI == null)\n641c593\n< \t    \n---\n> \n699c651\n< \t\n---\n> \n707c659\n<     \n---\n> \n715c667\n< \t\n---\n> \n723c675\n< \t\n---\n> \n730c682\n<             \n---\n> \n743c695\n< \t\n---\n> \n766c718\n< \t\n---\n> \n768c720\n< \t\n---\n> \n773c725\n<                     \n---\n> \n782c734\n<          * Computes a hash code corresponding to the given strings. \n---\n>          * Computes a hash code corresponding to the given strings.\n796c748\n<         private void readObject(ObjectInputStream s) \n---\n>         private void readObject(ObjectInputStream s)\n818c770\n< \t\n---\n> \n823c775\n< \t\n---\n> \n828c780\n<         \n---\n> \n833c785\n< \t\n---\n> \n838c790\n< \t\n---\n> \n849c801\n<         \n---\n> \n\n*****CVS exited normally with code 1*****\n\ncvs diff AbstractDocument.java (in directory D:\\apache-xml\\xml-\nbatik\\sources\\org\\apache\\batik\\dom\\)\nIndex: AbstractDocument.java\n===================================================================\nRCS file: /home/cvspublic/xml-\nbatik/sources/org/apache/batik/dom/AbstractDocument.java,v\nretrieving revision 1.4\ndiff -r1.4 AbstractDocument.java\n192,194c192,194\n<     public NodeList getElementsByTagName(String tagname) {\n< \tElement e = getDocumentElement();\n< \tif (e == null) {\n---\n>     public NodeList getElementsByTagName(String name) {\n> \tNode n = getDocumentElement();\n> \tif (n == null || name == null) {\n197c197,199\n< \treturn e.getElementsByTagName(tagname);\n---\n> \tNodes result = new Nodes();\n>         getElementsByTagName(n, name, result);\n> \treturn result;\n218,219c220,221\n< \tElement e = getDocumentElement();\n< \tif (e == null) {\n---\n> \tNode n = getDocumentElement();\n> \tif (n == null || localName == null) {\n222c224,226\n< \treturn e.getElementsByTagNameNS(namespaceURI, localName);\n---\n> \tNodes result = new Nodes();\n>         getElementsByTagNameNS(n, namespaceURI, localName, result);\n> \treturn result;\n258,259c262,263\n<                                            int whatToShow, \n<                                            NodeFilter filter, \n---\n>                                            int whatToShow,\n>                                            NodeFilter filter,\n273,275c277,279\n<     public TreeWalker createTreeWalker(Node root, \n<                                        int whatToShow, \n<                                        NodeFilter filter, \n---\n>     public TreeWalker createTreeWalker(Node root,\n>                                        int whatToShow,\n>                                        NodeFilter filter,\n389c393\n<             \n---\n> \n397c401\n<     private void readObject(ObjectInputStream s) \n---\n>     private void readObject(ObjectInputStream s)\n400c404\n<         \n---\n> \n\n*****CVS exited normally with code 1*****", "is_private": false}]
[{"count": 0, "text": "The issue is based on user's report on the users mailing list,\n\"Security Manager Exception\"\nhttp://tomcat.markmail.org/thread/yckvcjov5yqlsgam\n\nStack trace: (Tomcat 7.0.54 running with Security Manager enabled)\n[[[\n2014-07-22 09:27:03,934 [http-bio-80-exec-64] ERROR org.apache.catalina.core.ContainerBase.[Catalina].[somehostname.mhsoftware.com].[/].[jsp]- Servlet.service() for servlet [jsp] in context with path [] threw exception [java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"getClassLoader\")] with root cause\njava.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"getClassLoader\")\n        at java.security.AccessControlContext.checkPermission(Unknown Source)\n        at java.security.AccessController.checkPermission(Unknown Source)\n        at java.lang.SecurityManager.checkPermission(Unknown Source)\n        at java.lang.ClassLoader.checkClassLoaderPermission(Unknown Source)\n        at java.lang.ClassLoader.getParent(Unknown Source)\n        at org.apache.juli.ClassLoaderLogManager.findProperty(ClassLoaderLogManager.java:295)\n        at org.apache.juli.ClassLoaderLogManager.getProperty(ClassLoaderLogManager.java:266)\n        at org.apache.juli.ClassLoaderLogManager.addLogger(ClassLoaderLogManager.java:144)\n        at java.util.logging.LogManager.demandLogger(Unknown Source)\n        at java.util.logging.Logger.demandLogger(Unknown Source)\n        at java.util.logging.Logger.getLogger(Unknown Source)\n        at com.sun.mail.util.MailLogger.<init>(MailLogger.java:115)\n        at javax.mail.Session.initLogger(Session.java:226)\n        at javax.mail.Session.<init>(Session.java:210)\n        at javax.mail.Session.getInstance(Session.java:247)\n        at com.MHSoftware.net.mail.MHMail.sendSMTP(MHMail.java:470)\n]]]\n\nNote that com.sun.* code uses standard java.util.logging API to get a logger.\n\nThe java.lang.ClassLoader.getParent() call requires a \"getClassLoader\" permission, but untrusted code should not have that one by default.\nSuch calls shall be wrapped by AccessController.doPrivileged() so that only the JULI jar permissions are checked instead of checking permissions of all code in the call chain.", "bug_id": 56776, "is_private": false, "id": 176710, "time": "2014-07-28T07:43:45Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-07-28T07:43:45Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I can't repeat this bug.\n\nSince the ClassLoaderLogManager is loaded by the System class loader it bypasses the security checks in all my attempts to recreate this.\n\nAbsent a test case that demonstrates this bug it will get resolved as WORKSFORME.", "id": 176933, "time": "2014-08-05T20:00:04Z", "bug_id": 56776, "creation_time": "2014-08-05T20:00:04Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56776, "attachment_id": null, "is_private": false, "id": 177283, "time": "2014-08-20T14:09:50Z", "creator": "gsexton@mhsoftware.com", "creation_time": "2014-08-20T14:09:50Z", "text": "I looked at this some more. The issue seems to be tied to having an empty logging.properties. If you're running under the security manager, with log4j, and you specify an empty java.util.logging.config.file, the error will happen. \n\nThe simplest solution is to not specify -Djava.util.logging.config.file=empty file on the command line.\n\nI can reproduce it in a simple test case."}, {"count": 3, "tags": [], "creator": "violetagg@apache.org", "attachment_id": null, "text": "Hi,\n\nI tried the following:\n- Configured log4j to output Tomcat's internal logging as described here [1]\n- Deleted the content of the logging.properties\n- Started Tomcat with security manager and -Djava.security.debug=all\n\nThe error that I received was:\n\naccess: access denied (java.io.FilePermission \\C:\\tc7.0.x\\output\\build\\lib\\\nlog4j.properties read)\njava.lang.Exception: Stack trace\n        at java.lang.Thread.dumpStack(Thread.java:1249)\n        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:364)\n        at java.security.AccessController.checkPermission(AccessController.java:549)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)\n        at java.lang.SecurityManager.checkRead(SecurityManager.java:871)\n        at sun.misc.URLClassPath.check(URLClassPath.java:416)\n        at sun.misc.URLClassPath.checkURL(URLClassPath.java:390)\n        at java.net.URLClassLoader.findResource(URLClassLoader.java:389)\n        at java.lang.ClassLoader.getResource(ClassLoader.java:1002)\n        at org.apache.log4j.helpers.Loader.getResource(Loader.java:110)\n        at org.apache.log4j.LogManager.<clinit>(LogManager.java:109)\n        at org.apache.log4j.Logger.getLogger(Logger.java:104)\n        at org.apache.juli.logging.impl.Log4JLogger.getLogger(Log4JLogger.java:262)\n        at org.apache.juli.logging.impl.Log4JLogger.<init>(Log4JLogger.java:108)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n        at org.apache.juli.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1025)\n        at org.apache.juli.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:844)\n        at org.apache.juli.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:541)\n        at org.apache.juli.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:292)\n        at org.apache.juli.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:269)\n        at org.apache.juli.logging.LogFactory.getLog(LogFactory.java:657)\n        at org.apache.catalina.startup.Catalina.<clinit>(Catalina.java:925)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n        at java.lang.Class.newInstance0(Class.java:355)\n        at java.lang.Class.newInstance(Class.java:308)\n        at org.apache.catalina.startup.Bootstrap.init(Bootstrap.java:238)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:425)\n\n\nThen I added the following to the catalina.policy:\n\ngrant codeBase \"file:${catalina.home}/bin/tomcat-juli.jar\" {\n        ...\n        permission java.io.FilePermission\n         \"${catalina.base}${file.separator}lib${file.separator}log4j.properties\", \"read\";\n        ...\n\nThen I restarted Tomcat and everything was OK.\n\n\nI cannot reproduce the exception.\n\nRegards\nVioleta\n\n[1] http://tomcat.apache.org/tomcat-7.0-doc/logging.html#Using_Log4j", "id": 177974, "time": "2014-09-19T13:14:10Z", "bug_id": 56776, "creation_time": "2014-09-19T13:14:10Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 56776, "text": "Given that two committers have tried to recreate this issue and failed, I am resolving this as WORKSFORME.\n\nIf you can re-create this with a clean install of the latest Tomcat 7 release then please feel free to re-open this and add the steps to reproduce it.", "id": 178056, "time": "2014-09-23T18:54:23Z", "creator": "markt@apache.org", "creation_time": "2014-09-23T18:54:23Z", "is_private": false, "attachment_id": null}]
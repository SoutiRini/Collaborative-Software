[{"count": 0, "tags": [], "creator": "timothy.l.jones@gmail.com", "is_private": false, "text": "For the same data and code, the output produced is different (although it seems to be functionally identical).\n\nOne difference is that the enclosed XML contains newlines for each row when produced by SXSSF, but no newlines when produced by XSSF. There are also other differences.\n\nFor larger files, this results in very different file sizes - the file produced by XSSF for 5800 rows of our data is 64% of the size of the file produces by SXSSF. This is significant - especially as SXSSF is the method preferred for larger files.\n\nIn the example provided below, the difference is that SXSSF produces a file that's 6 bytes smaller (the reverse of the difference we observed on larger date).\n\nAssuming an OutputStream output:\n\n\n            Workbook wb = new SXSSFWorkbook();\n            Sheet sh = wb.createSheet(\"Sheet\");\n            Row r1 = sh.createRow(1);\n            r1.createCell(1).setCellValue(\"One\");\n            r1.createCell(2).setCellValue(\"Two\");\n            Row r2 = sh.createRow(2);\n            r2.createCell(1).setCellValue(\"One\");\n            r2.createCell(2).setCellValue(\"Two\");\n            wb.write(output);  // 3318 bytes\n            wb.close();\n\n            \n\n\n            SXSSFWorkbook wb = new SXSSFWorkbook();\n            Sheet sh = wb.createSheet(\"Sheet\");\n            Row r1 = sh.createRow(1);\n            r1.createCell(1).setCellValue(\"One\");\n            r1.createCell(2).setCellValue(\"Two\");\n            Row r2 = sh.createRow(2);\n            r2.createCell(1).setCellValue(\"One\");\n            r2.createCell(2).setCellValue(\"Two\");\n            wb.write(output); // 3312 bytes\n            wb.dispose();\n            wb.close();\n\n\nObserved: The amount of data written to output are different - 3318 for XSSFWorkbook, and 3312 for SXSSFWorkbook.\n\nExpected: Identical files produced.\n\n(As an aside: I suspect some of the difference is due to SXSSF not using shared strings, although I can't see how to do that on a new workbook. Regardless, the whitespace changes still definitely exist, and it feels likely that there are other differences)", "id": 198486, "time": "2017-04-24T07:45:29Z", "bug_id": 61031, "creation_time": "2017-04-24T07:45:29Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 61031, "is_private": false, "text": "I tried the following to enable shared strings:\n\n            SXSSFWorkbook wb = new SXSSFWorkbook(\n                     new XSSFWorkbook(),1000,true,true);\n            Sheet sh = wb.createSheet(\"Sheet\");\n            Row r1 = sh.createRow(1);\n            r1.createCell(1).setCellValue(\"One\");\n            r1.createCell(2).setCellValue(\"Two\");\n            Row r2 = sh.createRow(2);\n            r2.createCell(1).setCellValue(\"One\");\n            r2.createCell(2).setCellValue(\"Two\");\n            wb.write(output);\n            wb.dispose();\n            wb.close();\n\nIt resulted in a file of 3321 bytes (a new size). There's definitely more going on here.", "id": 198489, "time": "2017-04-24T07:51:52Z", "creator": "timothy.l.jones@gmail.com", "creation_time": "2017-04-24T07:51:52Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "onealj@apache.org", "text": "POI inlines strings for SXSSF so that it doesn't have to maintain a shared strings table. This will make the output file larger.\n\nI'm not sure how SXSSF handles cell styles, but wouldn't be surprised if it also inlined those to eliminate the need to maintain a style table in memory.\n\nThere have been a couple discussions of adding an optional shared strings table for SXSSF (this would allow RTF strings).\n\nWe could probably strip newline characters from the XML output, but this would be a trivial savings in file size. After zip compression, it would be negligible. File size could be improved more easily by adjusting the zip file compression settings. The trade off there would be compression and expanding time.", "id": 198491, "time": "2017-04-24T08:08:16Z", "bug_id": 61031, "creation_time": "2017-04-24T08:08:16Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "creator": "onealj@apache.org", "text": "What file sizes are you measuring? The compressed zip or the raw XML?", "id": 198492, "time": "2017-04-24T08:10:23Z", "bug_id": 61031, "creation_time": "2017-04-24T08:10:23Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 61031, "text": "One thing that would be different between the file contents would be the last modified date, which is saved in the XML. We may also save rId's in any order, so long as the reference numbers are used correctly. If we stores these in an unsorted HashMap before serializing, we could make no guarantee of producing binary-identical files, though the information would be the same.", "id": 198493, "time": "2017-04-24T08:15:46Z", "creator": "onealj@apache.org", "creation_time": "2017-04-24T08:15:46Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 61031, "attachment_id": null, "is_private": false, "id": 198537, "time": "2017-04-26T06:22:29Z", "creator": "timothy.l.jones@gmail.com", "creation_time": "2017-04-26T06:22:29Z", "text": "I'm measuring the resulting compressed document, yes.\n\nMy main surprise was that the output was different (starting with the whitespace, and finishing with things like inline styles and string tables). \n\nSince this produces quite different file sizes for larger files, it could be added to the documentation, even if identical binary output is not practical. \n\nUsers of the XSSF and SXSSF classes would want to be aware that there's an additional tradeoff.\n\nThe ability to tune the level of compression would be a nice-to-have."}]
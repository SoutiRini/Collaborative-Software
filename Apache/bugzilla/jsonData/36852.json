[{"count": 0, "tags": [], "bug_id": 36852, "text": "If you create a context.xml for a webapp and include a nested <Loader> element\nwithin the <Context> element and the <Context> is set to privileged=\"true\", then\nthe classloaders are not set up correctly and the webapp cannot see any of the\nprivileged classes (i.e. org.catalina.*) For example, the manager webapp won't\nwork, giving a NoClassDefFoundError for org.apache.catalina.ContainerServlet\n\nI belive that the XML for the loader element is processed like this in\nContextRuleSet.begin() (around line 251):\n\n        // Look up the required parent class loader\n        ClassLoader parentClassLoader = null;\n        Object ojb = digester.peek();\n        if (ojb instanceof Container) {\n              parentClassLoader = ((Container)ojb).getParentClassLoader();\n        }\n        // Instantiate a new Loader implementation object\n        String className = loaderClass;\n        if (attributeName != null) {\n            String value = attributes.getValue(attributeName);\n            if (value != null)\n                className = value;\n        }\n        Class clazz = Class.forName(className);\n        Class types[] = { ClassLoader.class };\n        Object args[] = { parentClassLoader };\n        Constructor constructor = clazz.getDeclaredConstructor(types);\n        Loader loader = (Loader) constructor.newInstance(args);\n\n\n\nHowever, this is not retrieving the correct parent classloader for privileged\nwebapps. See the following code in StandardContext.start() (around line 3950):\n\n        if (getLoader() == null) {\n            ClassLoader parent = null;\n            if (getPrivileged()) {\n                if (log.isDebugEnabled())\n                    log.debug(\"Configuring privileged default Loader\");\n                parent = this.getClass().getClassLoader();\n            } else {\n                if (log.isDebugEnabled())\n                    log.debug(\"Configuring non-privileged default Loader\");\n                parent = getParentClassLoader();\n            }\n            WebappLoader webappLoader = new WebappLoader(parent);\n            webappLoader.setDelegate(getDelegate());\n            setLoader(webappLoader);\n        }\n\n\nIn the case where the <Loader> element was specified, getLoader() will return\nnon-null and this block will never be entered. However, when that loader was\ncreated in ContextRuleSet, only the \"non-privileged\" parent class was used (i.e.\nStandardContext.getParentClassLoader()) rather than the privileged classloader\nat the appropriate times (i.e. StandardContext.getClass().getClassLoader())", "id": 80577, "time": "2005-09-29T01:38:18Z", "creator": "junk.brinkley@gmail.com", "creation_time": "2005-09-29T01:38:18Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 36852, "attachment_id": null, "is_private": false, "id": 80619, "time": "2005-09-29T19:05:13Z", "creator": "junk.brinkley@gmail.com", "creation_time": "2005-09-29T19:05:13Z", "text": "Here is a suggested fix, which appears to fix the problem in my environment. It\nis in the method CreateLoaderRule.begin() ... my changes are flanked with the\ncomment //NEW:mdb:\n\n    public void begin(String namespace, String name, Attributes attributes)\n        throws Exception {\n\n        // Look up the required parent class loader\n        ClassLoader parentClassLoader = null;\n        Object ojb = digester.peek();\n        if (ojb instanceof Container) {\n            parentClassLoader = ((Container)ojb).getParentClassLoader();\n        }\n\n        //NEW:mdb: if the context is priviledged, set the classloader to\n        // the context's classloader...\n        if( ojb instanceof org.apache.catalina.Context &&\n            ((org.apache.catalina.Context)ojb).getPrivileged() )\n        {\n            parentClassLoader = ojb.getClass().getClassLoader();\n        }\n        //NEW:mdb:end change to test for privileged flag...\n"}, {"count": 2, "tags": [], "bug_id": 36852, "attachment_id": null, "is_private": false, "id": 82574, "time": "2005-11-16T19:35:17Z", "creator": "yoavs@computer.org", "creation_time": "2005-11-16T19:35:17Z", "text": "Matt's tested this fix for a few weeks now, said it looks fine in a message on\nthe dev list.  It seems reasonable to be as well, will apply."}, {"count": 3, "tags": [], "bug_id": 36852, "text": "Fixed for 5.5.13.", "id": 82579, "time": "2005-11-16T19:51:17Z", "creator": "yoavs@computer.org", "creation_time": "2005-11-16T19:51:17Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 36852, "attachment_id": null, "text": "I\u2019ve been developing using Eclipse and the Sysdeo plugin \n(http://www.sysdeo.com/eclipse/tomcatplugin) and I found that it worked fine \nright up until we started using tomcat 5.5.12.\n\nConsequently I picked up the source and started digging.\n\nI found that when the custom class loader runs using 5.5.9 the hierarchy of \nclass loaders is :\n\no       webappX (WebappClassloader)\n\no       Shared (StandardClassloader)\n\no       Common (StandardClassloader)\n\no       System (AppClassloader)\n\no       Bootstrap (ExtClassloader)\n\n \n\nBut when 5.5.12 (and up) are used it becomes:\n\no       webappX (WebappClassloader)\n\no       System (AppClassloader)\n\no       Bootstrap (ExtClassloader)\n\nConsequently the class loader stops working.\n\n \n\nI find that when my class loader  works as follows \u2026\n\n \n\n            public myDevLoader(ClassLoader parent) {\n\n                        super(parent);\n\n                        }\n\nwhich is equivalent to \u2026\n\n            public myDevLoader(ClassLoader parent) {\n\n                        super(ClassLoader.getSystemClassLoader());\n\n                        }\n\n \n\nThe devloader will not find the common and shared class loaders however if I \ndo the following\u2026.\n\n \n\n            public myDevLoader(ClassLoader parent) {\n\nsuper(Thread.currentThread().getContextClassLoader());\n\n            }\n\n \n\nThen the devloader works as it should.\n\n \n\n", "id": 88310, "time": "2006-04-20T08:54:16Z", "creator": "bmundin@aimltd.co.uk", "creation_time": "2006-04-20T08:54:16Z", "is_private": false}, {"attachment_id": 18144, "tags": [], "creator": "bmundin@aimltd.co.uk", "text": "Created attachment 18144\nA class loader which works in Tomcat 5.5.12\n\nThis attachment is a patch for the Sysdeo Eclipse plugin.\nIt includes the source and the configuration documents for Tomcat 5.5.12", "count": 5, "id": 88311, "time": "2006-04-20T08:57:46Z", "bug_id": 36852, "creation_time": "2006-04-20T08:57:46Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 36852, "attachment_id": null, "text": "I don't think this is fixed yet. When using the tomcat sysdeo plugin with\neclipse, neither the common or shared class loader is used.\n\nIf I mark the context as privileged, then the common is in the chain but not the\nshared.", "id": 89905, "time": "2006-06-07T18:28:01Z", "creator": "rengels@ix.netcom.com", "creation_time": "2006-06-07T18:28:01Z", "is_private": false}, {"count": 7, "tags": [], "text": "Created attachment 18673\nPatch for Sysdeo's DevLoader.java\n\nI tried to use the Sysdeo classloader to add maven dependencies to the webapp\ncontext, and I got stumped.\nNext, I found a glue in the javadoc for WebappClassLoader\nhttp://tomcat.apache.org/tomcat-5.5-doc/catalina/docs/api/org/apache/catalina/loader/WebappClassLoader.html\nthat puzzled me. Apparently, a Webapp classloader cannot contain the servlet\napi classes.\n\nThis patch solved the problem for me, but it's rather unelegant (it arbitrarily\nchecks the jar pathname, it should try and find the exact classes)\n\nRecompile with the following command from the server\\classes dir:\n\njavac -classpath\n.;..\\lib\\catalina.jar;..\\..\\common\\lib\\servlet-api.jar;%JRE_DIR%\\lib\\rt.jar\norg\\apache\\catalina\\loader\\DevLoader.java\n\nHope this helps\nAngelo Turetta", "is_private": false, "id": 91849, "creation_time": "2006-08-03T09:16:11Z", "time": "2006-08-03T09:16:11Z", "creator": "aturetta@bestunion.it", "bug_id": 36852, "attachment_id": 18673}, {"count": 8, "text": "\n\n*** This bug has been marked as a duplicate of 39704 ***", "bug_id": 36852, "is_private": false, "id": 92382, "time": "2006-08-22T02:02:38Z", "creator": "markt@apache.org", "creation_time": "2006-08-22T02:02:38Z", "tags": [], "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 35133, "attachment_id": null, "id": 75626, "creation_time": "2005-05-31T12:25:29Z", "time": "2005-05-31T12:25:29Z", "creator": "Filip.L_Ecluse@alcatel.be", "text": "When in non-gui mode, JMeter hangs after having completed a test plan, and it\nnever exits. This is due to the JMS Receiver thread, which never stops, because\nit is stuck into an endless receive() loop.\nMoreover, a lack of proper synchronization in the MessageAdmin class causes some\nmessage leaking when using multithreading.\n\nHere is a patch that solves the two bugs altogether.", "is_private": false}, {"count": 1, "tags": [], "creator": "Filip.L_Ecluse@alcatel.be", "attachment_id": 15225, "id": 75627, "time": "2005-05-31T12:27:43Z", "bug_id": 35133, "creation_time": "2005-05-31T12:27:43Z", "is_private": false, "text": "Created attachment 15225\nmodifications here will solve the bug"}, {"count": 2, "tags": [], "creator": "Filip.L_Ecluse@alcatel.be", "text": "Created attachment 15226\nmodifications here will solve the bug", "id": 75628, "time": "2005-05-31T12:28:26Z", "bug_id": 35133, "creation_time": "2005-05-31T12:28:26Z", "is_private": false, "attachment_id": 15226}, {"count": 3, "attachment_id": 15227, "bug_id": 35133, "text": "Created attachment 15227\nmodifications here will solve the bug", "id": 75629, "time": "2005-05-31T12:28:48Z", "creator": "Filip.L_Ecluse@alcatel.be", "creation_time": "2005-05-31T12:28:48Z", "tags": [], "is_private": false}, {"count": 4, "text": "thanks for patch, I will take a look and commit it.\n\npeter lin", "bug_id": 35133, "attachment_id": null, "id": 75632, "time": "2005-05-31T13:40:33Z", "creator": "woolfel@yahoo.com", "creation_time": "2005-05-31T13:40:33Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 35133, "text": "Hi Filip,\n\nThanks for your contribution!\n\nYou are absolutely right about the Thread that isn't being killed in the\nJMSSampler As I have focused mainly on the Graphical part until now, that\n(annoying, I can imagine) bug escaped me.\n\n\nCan you elaborate on the test that lead to a message leak?\n\nIf I look at the changes you made to the MessageAdmin, you made the following\nchanges\n        table.put(id, new PlaceHolder(request));\nto\n        synchronized (table) {\n            table.put(id, new PlaceHolder(request));\n        }\n\n        PlaceHolder holder = (PlaceHolder)table.get(id);\nto\n        PlaceHolder holder;\n        synchronized (table) {\n            holder = (PlaceHolder)table.get(id);\n        }\n\nAs far as I can see, there is no difference in synchronization.... The table is\na hashtable which methods are synchronized so they can only be executed by the\nowner of the lock on the hashtable-object. The same as in your solution. Am I\nmissing anything??\n", "id": 75676, "time": "2005-05-31T21:45:08Z", "creator": "m.blankestijn@hccnet.nl", "creation_time": "2005-05-31T21:45:08Z", "tags": [], "is_private": false}]
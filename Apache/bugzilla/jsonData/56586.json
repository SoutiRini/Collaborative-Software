[{"count": 0, "tags": [], "bug_id": 56586, "attachment_id": null, "text": "The initSQL is meant to initialize the JDBC connections.\n\nIf defaultAutoCommit == false and rollbackOnReturn == true the connection initialization will be rolled back causing the initialization to be lost for that connection.\n\nThis could be fixed by inserting:\n\nif ( !connection.getAutoCommit() ) connection.commit();\n\nafter line 375 in PooledConnection.java\n\nSorry for the lack of a proper diff, I have not built tomcat-jdbc from source.", "id": 175609, "time": "2014-06-02T20:25:50Z", "creator": "cservin@cromagnon.com", "creation_time": "2014-06-02T20:25:50Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 56586, "is_private": false, "text": "Are you executing DML statements in your initSQL?\n\nAre there drivers who allow rollbacks on session state changes?\n\nWeird.\n\nNote that you could always use a stored procedure that contains a COMMIT.", "id": 175643, "time": "2014-06-05T00:30:07Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-06-05T00:30:07Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "cservin@cromagnon.com", "attachment_id": null, "id": 175672, "time": "2014-06-05T13:58:58Z", "bug_id": 56586, "creation_time": "2014-06-05T13:58:58Z", "is_private": false, "text": "I am using postgresql and the problem originally showed up when the initSQL was executing a set search_path and a rollback was triggered by the first transaction.  To test/recreate the issue I did trigger the same problem with DML( an insert into a temp table, which then is rolled back).\n\nI was able to \"fix\" the issue in my case by adding a \";commit\" to the end of my actual initSQL, although this makes me nervous since you are supposed to use the Connections commit() method when using JDBC.\n\nThat solution seamed a little bit hackish to me so I posted this ticket."}, {"count": 3, "attachment_id": null, "creator": "chris@christopherschultz.net", "text": "Honestly, I'm surprised that \"SET search_path [..]\" will be affected by a rollback.\n\nI know it's no basis for comparison, but MySQL does not appear to behave this way:\n\nmysql> begin;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> set @foo := 'bar';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select @foo;\n+------+\n| @foo |\n+------+\n| bar  |\n+------+\n1 row in set (0.00 sec)\n\nmysql> rollback;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select @foo;\n+------+\n| @foo |\n+------+\n| bar  |\n+------+\n1 row in set (0.00 sec)\n\n\nI think this should be an /option/ that defaults to false because it will execute another query (COMMIT) on the server side. If most clients do not need it, there's no need to execute a COMMIT unless the application absolutely needs it.\n\nAny objections to an option rather than strict behavior?", "id": 175678, "time": "2014-06-05T14:55:45Z", "bug_id": 56586, "creation_time": "2014-06-05T14:55:45Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "creator": "cservin@cromagnon.com", "text": "It just seems like the connection initialization should persist for the life of the connection.  If I have some DML that initializes a connection, and it is returned to the pool, when I use that connection again it should still be initialized.  In this case it wasn't, and it became apparent when the wrong data was returned.\n\nAdding the \";commit\" worked as a solution for me it was just interesting to track down because I expected the initSQL to be permanent for the life of the connection.\n\nSince different people will have different initSQL commiting the initSQL seems correct to me, but I have know idea what most people would expect.\n\nNo objection to option, default, or leave it as is.  I just wanted to let people know what I found.", "id": 175679, "time": "2014-06-05T15:14:18Z", "bug_id": 56586, "creation_time": "2014-06-05T15:14:18Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "wclark@guidewire.com", "is_private": false, "text": "I agree with the filer.  Alternately, turn on autocommit when running the initialization SQL, then if configured to be off, turn it back off.", "id": 176657, "time": "2014-07-24T15:14:59Z", "bug_id": 56586, "creation_time": "2014-07-24T15:14:59Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 56586, "attachment_id": null, "text": "Thanks for the report gentlemen. Glad there is a workaround, the added \";commit\".\n\nIf it did do \n\nif ( !connection.getAutoCommit() ) connection.commit();\n\nwhat are the implications for other users?", "id": 176675, "time": "2014-07-24T22:18:07Z", "creator": "fhanik@apache.org", "creation_time": "2014-07-24T22:18:07Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 56586, "text": "I can't think of any issues with that unless someone was intentionally trying to lose their initSQL later on.", "count": 7, "id": 176678, "time": "2014-07-25T01:40:39Z", "creator": "cservin@cromagnon.com", "creation_time": "2014-07-25T01:40:39Z", "is_private": false}]
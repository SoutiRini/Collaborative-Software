[{"count": 0, "tags": [], "creator": "squasar@darkrainfall.org", "attachment_id": 24787, "text": "Created attachment 24787\nQuick patch to make things work again.\n\nPlease note: My actual OS is Mac OS X 10.6, not 10.4. Your OS dropdown could stand to have 10.6 and 10.5 as available options.\n\nSome heavy GDBing of a recurring Subversion crash revealed that apr_psprintf() doesn't appear to parse the %lld specifier format correctly, which causes it not to advance the va_list correctly, which causes it to crash in strlen() when it tries to handle a %s format after the %lld, because it's accessing the wrong pointer. The use of the %lld specifier is defined by APR_OFF_T_FMT on Darwin, making it an internal inconsistency. The check in configure.in on Darwin 10 which makes it use %lld appears to be fallacious; it's definitely unnecessary.\n\nThis is a regression inasmuch as it didn't happen in 1.3.8, but the underlying lack of support for the specifier was in 1.3.8 and still appears to be in HEAD.\n\nTo fix the issue immediately, do not use %lld as the APR_OFF_T_FMT. To fix it correctly, modify apr_vformatter() to parse the ll size specifier. (And the hh specifier as well).", "id": 133274, "time": "2010-01-02T13:38:17Z", "bug_id": 48476, "creation_time": "2010-01-02T13:38:17Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 25243\nCrude solution to the 'll' parsing problem", "is_private": false, "id": 135947, "creator": "hwright@apache.org", "time": "2010-04-07T21:34:58Z", "bug_id": 48476, "creation_time": "2010-04-07T21:34:58Z", "attachment_id": 25243}, {"count": 2, "tags": [], "bug_id": 48476, "attachment_id": null, "id": 135948, "time": "2010-04-07T21:40:17Z", "creator": "hwright@apache.org", "creation_time": "2010-04-07T21:40:17Z", "is_private": false, "text": "I independently uncovered this issue while trying to use APR 1.4.x with Subversion on OS X.  It turns out that we use this construct *a lot*, and this bug causes a number of segfaults.  We've had to explicitly disallow APR 1.4.x with Subversion, which is unfortunate.\n\nI've attached a patch which fixes the parsing problem, but it's a bit crude.  Hopefully this issue can be resolve soon, either by fixing the parser, or by not using the 'll' format specifier.\n\nThe thread wherein this is discussed is here:\nhttp://mail-archives.apache.org/mod_mbox/apr-dev/201003.mbox/%3Cb51ffb6f1003100926n22c1dd79id9696972b23a153a@mail.gmail.com%3E"}, {"count": 3, "tags": [], "bug_id": 48476, "attachment_id": null, "id": 135968, "time": "2010-04-08T16:26:37Z", "creator": "trawick@apache.org", "creation_time": "2010-04-08T16:26:37Z", "is_private": false, "text": "On Snow Leopard you must set the arch manually.  For example:\n\nCC=\"cc -arch i386\" ./configure ...\n\nAre you encountering any problems on Snow Leopard if you set the arch\n(either to 32-bit or 64-bit)?\n\n>Please note: My actual OS is Mac OS X 10.6, not 10.4. Your OS dropdown could\n>stand to have 10.6 and 10.5 as available options.\n\nA work item has been filed for infrastructure to resolve that."}, {"count": 4, "tags": [], "text": "(In reply to comment #3)\n> On Snow Leopard you must set the arch manually.  For example:\n> \n> CC=\"cc -arch i386\" ./configure ...\n> \n> Are you encountering any problems on Snow Leopard if you set the arch\n> (either to 32-bit or 64-bit)?\n\nForcing the arch is completely orthogonal to the this issue.  The facts are:\n\n1) configure is special cased to generate the format 'lld' for APR_OFF_T_FMT on Mac OS X.\n2) The format parser is broken, in that it does not recognize the format 'lld'\n\nThis means that we are putting somebody, somewhere in a potentially broken place.\n\nAll that being said, I don't get the error when configuring for 32-bit architecture on Snow Leopard, which is expected.  Instead, I get a bus error when attempting to dynamically load the apr_dbd_sqlite3.so driver file when running the tests.\n\nAs for the x86_64 arch, I still get the error, which also makes sense.", "is_private": false, "id": 136102, "creator": "hwright@apache.org", "time": "2010-04-13T15:44:11Z", "bug_id": 48476, "creation_time": "2010-04-13T15:44:11Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 48476, "attachment_id": null, "id": 139288, "time": "2010-08-20T13:07:13Z", "creator": "Christopher.D.Knight@nasa.gov", "creation_time": "2010-08-20T13:07:13Z", "is_private": false, "text": "As discussed on the apr list, %ll, on MacOSX (and I assume on other 64-bit operating systems) is not recognized as a valid % format. This behavior is incompatible with the libc printf/sprintf/... formatters and causes crashes, such as with the below example. My suggestion is to always consider %ll as a QUAD type, consider %l a QUAD if on 64-bit.\n\n---example---\n#include <apr.h>\n#include <apr_pools.h>\n#include <apr_strings.h>\n#include <stdio.h>\n\nint main(int argc, char **argv) {\n  apr_pool_t *pool = NULL;\n  char *s = \"hello world\"; u_int64_t v = 12345678;\n\n  apr_pool_initialize(); apr_pool_create(&(pool), NULL);\n  printf(\"%llu%s\", v, s); // works\n  char *f = apr_psprintf(pool, \"%llu%s\", v, s); // segfault on strlen\n  printf(\"%s\\n\", f);\n}\n\n---patch---\n\n--- apr_snprintf.c.old\t2010-08-20 10:03:41.000000000 -0700\n+++ apr_snprintf.c\t2010-08-20 10:01:42.000000000 -0700\n@@ -813,12 +813,7 @@\n              * Modifier check.  Note that if APR_INT64_T_FMT is \"d\",\n              * the first if condition is never true.\n              */\n-            if ((sizeof(APR_INT64_T_FMT) == 4 &&\n-                 fmt[0] == APR_INT64_T_FMT[0] &&\n-                 fmt[1] == APR_INT64_T_FMT[1]) ||\n-                (sizeof(APR_INT64_T_FMT) == 3 &&\n-                 fmt[0] == APR_INT64_T_FMT[0]) ||\n-                (sizeof(APR_INT64_T_FMT) > 4 &&\n+            if ((sizeof(APR_INT64_T_FMT) > 4 &&\n                  strncmp(fmt, APR_INT64_T_FMT, \n                          sizeof(APR_INT64_T_FMT) - 2) == 0)) {\n                 /* Need to account for trailing 'd' and null in sizeof() */\n@@ -830,7 +825,12 @@\n                 fmt++;\n             }\n             else if (*fmt == 'l') {\n-                var_type = IS_LONG;\n+\t\tif (fmt[1] == 'l') { // %ll[du] is always quad on 64- & 32-bit\n+\t\t    var_type = IS_QUAD;\n+\t\t    fmt++;\n+\t\t} else if (sizeof(APR_INT64_T_FMT) == 3) { // %l[du] is quad on 64-bit\n+\t\t    var_type = IS_QUAD;\n+\t\t} else var_type = IS_LONG;\n                 fmt++;\n             }\n             else if (*fmt == 'h') {"}, {"count": 6, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "I'd agree with making 'll' always present a long long int value, but that may\nor may not be 8 byte.  This would be platform dependent.\n\nOn win32, ll is the equivalent of i64, which is an 8 byte int.", "id": 139289, "time": "2010-08-20T13:50:24Z", "bug_id": 48476, "creation_time": "2010-08-20T13:50:24Z", "is_private": false}, {"count": 7, "tags": [], "creator": "Christopher.D.Knight@nasa.gov", "is_private": false, "id": 139290, "creation_time": "2010-08-20T13:58:32Z", "time": "2010-08-20T13:58:32Z", "bug_id": 48476, "text": "On which platforms is %ll *not* 8 bytes? (Which platforms has sizeof(long long int) != 8?)\n\nOn MacOSX 64-bit, sizeof(long long int) == 8 && sizeof (long int) == 8.", "attachment_id": null}, {"count": 8, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "Chris, that would be for autoconf to determine.\n\n128 bit long long ints on a native 64 bit word environment would not be unreasonabe.", "id": 139291, "time": "2010-08-20T14:03:24Z", "bug_id": 48476, "creation_time": "2010-08-20T14:03:24Z", "is_private": false}, {"count": 9, "tags": [], "creator": "Christopher.D.Knight@nasa.gov", "is_private": false, "id": 139292, "creation_time": "2010-08-20T14:19:35Z", "time": "2010-08-20T14:19:35Z", "bug_id": 48476, "text": "Of course 16-byte (128-bit) ints are in our future but a more significant re-write (adding another IS_* enum, adding code to convert to strin, etc.) will be needed to add support for such ints.\n\nIn the meantime, apr_psprintf is incompatible with the system printf in the worst, segfault-causing-kind-of way. \"The perfect being the enemy of the good.\"\n\nNote, also that the current code would incorrectly handle 128-byte ints. (%ll == IS_QUAD == apr_int64_t...)\n\nOf course, if there are 4-byte %ll's or 16-byte %ll's, I'm happy to help write the code to handle.", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 48476, "attachment_id": null, "id": 144831, "time": "2011-03-08T09:52:44Z", "creator": "hwright@apache.org", "creation_time": "2011-03-08T09:52:44Z", "is_private": false, "text": "There is now a corresponding Subversion issue which reflect the trouble this is causing for Subversion users on Mac OS X:\nhttp://subversion.tigris.org/issues/show_bug.cgi?id=3829"}, {"count": 11, "tags": [], "bug_id": 48476, "attachment_id": null, "id": 174218, "time": "2014-04-02T17:21:09Z", "creator": "steve_northover@hotmail.com", "creation_time": "2014-04-02T17:21:09Z", "is_private": false, "text": "Test adding a comment.  Sorry for the noise."}, {"count": 12, "tags": [], "bug_id": 48476, "text": "This is still true with version 1.5.2, %llu segfaults with this simple test:\n\nap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, \"big number: %llu, %s\", (long long unsigned) 1474074202886, \"some string\");", "id": 193972, "time": "2016-09-24T13:17:36Z", "creator": "franklamoureux@hotmail.com", "creation_time": "2016-09-24T13:17:36Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 38040, "text": "Consider\n\n---%<--- a.xml\n<project basedir=\".\" default=\"x\">\n    <target name=\"x\">\n        <property name=\"l\" value=\"error\"/>\n        <presetdef name=\"echo\">\n            <echo level=\"${l}\"/>\n        </presetdef>\n        <echo>This should be an \"error\".</echo>\n        <ant antfile=\"b.xml\" inheritall=\"false\" inheritrefs=\"false\"/>\n    </target>\n</project>\n---%<--- b.xml\n<project basedir=\".\" default=\"x\">\n    <target name=\"x\">\n        <echo>This should be a regular message.</echo>\n    </target>\n</project>\n---%<---\n\nNow run Ant (1.6.5 or dev) on a.xml:\n\n---%<---\nBuildfile: a.xml\n\nx:\nTrying to override old definition of task echo\nThis should be an \"error\".\n\nx:\n\nBUILD FAILED\na.xml:8: The following error occurred while executing this line:\nb.xml:3: ${l} is not a legal value for this attribute\n---%<---\n\nSame if you name the preset 'echol' and use <echol>...</> in a.xml and b.xml. Or\nyou can use the 'message' attribute and get output like this:\n\n---%<---\nBuildfile: a.xml\n\nx:\nTrying to override old definition of task echo\ndefault message\n\nx:\n${m}\n\nBUILD SUCCESSFUL\n---%<---\n\nThe problem here is that the preset is getting copied from one project to a\nsubproject, even when nothing else is. And of course the preset cannot work in\nthe subproject without the definitions it needs.\n\nI would expect that with inheritrefs=\"false\", the subproject would not receive\npresetdefs from the parent project. Maybe these are not technically \"references\"\nas far as Ant internals are concerned, but it is part of the environment, and it\nis getting copied.\n\nOr perhaps there should be some optional inheritdefs=\"false\" attribute to\nprevent automatic copying of special taskdefs, presetdefs, macrodefs, etc. from\nthe parent project to the subproject. Somehow it should be possible to make the\n<ant/> task work more or less like <exec executable=\"ant\" .../>, i.e. start the\nsubproject with a clean environment.", "id": 83988, "attachment_id": null, "creator": "jglick@apache.org", "creation_time": "2005-12-26T15:26:37Z", "time": "2005-12-26T15:26:37Z", "is_private": false}, {"count": 1, "tags": [], "text": "Found a workaround, though it is a bit exotic: replace\n\n        <presetdef name=\"echo\">\n            <echo level=\"${l}\"/>\n        </presetdef>\n\nwith\n\n        <macrodef name=\"def-echo\">\n            <attribute name=\"mval\"/>\n            <sequential>\n                <presetdef name=\"echo\">\n                    <echo message=\"@{mval}\"/>\n                </presetdef>\n            </sequential>\n        </macrodef>\n        <def-echo mval=\"${m}\"/>\n\nThis forces ${m} to be evaluated during the presetdef itself.", "is_private": false, "id": 83990, "creator": "jglick@apache.org", "time": "2005-12-26T17:18:18Z", "bug_id": 38040, "creation_time": "2005-12-26T17:18:18Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 38040, "is_private": false, "id": 83991, "attachment_id": null, "creator": "jglick@apache.org", "creation_time": "2005-12-26T17:52:04Z", "time": "2005-12-26T17:52:04Z", "text": "Documented this trick just in case anyone else runs into it. (rev #359077)"}]
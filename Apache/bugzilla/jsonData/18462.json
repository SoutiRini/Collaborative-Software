[{"count": 0, "tags": [], "creator": "nikolaymetchev@gmail.com", "attachment_id": null, "id": 34041, "time": "2003-03-28T12:35:32Z", "bug_id": 18462, "creation_time": "2003-03-28T12:35:32Z", "is_private": false, "text": "I am using Eclipse to do my development and I am running tomcat 4.1.24 from \nwithin eclipse. One of the nice features of eclipse is that anything you \ndisplay with System.out comes out in blue and anything you send to System.err \nis displayed in red. However when tomcat is running Catalina overrides \nSystem.err and makes it point to System.out. This is very inconvinient because \nits much harder to search for severe error messages in a list of millions of \ntrivial ones."}, {"count": 1, "tags": [], "bug_id": 18462, "text": "Created attachment 5946\n[PATCH] Remove SystemLogHandler in start()", "id": 35781, "time": "2003-04-22T13:08:05Z", "creator": "andrew.chapman@clicktools.com", "creation_time": "2003-04-22T13:08:05Z", "is_private": false, "attachment_id": 5946}, {"count": 2, "attachment_id": null, "creator": "andrew.chapman@clicktools.com", "is_private": false, "id": 35782, "time": "2003-04-22T13:09:35Z", "bug_id": 18462, "creation_time": "2003-04-22T13:09:35Z", "tags": [], "text": "Redirection of System.out and System.err in \norg.apache.catalina.startup.Catalina.start() prevents any other application \n(for instance an IDE) from redirecting System.out and System.err. It also \nredirects them to the same output (the standard system output stream) \npreventing any differentiation of the two streams.\n\nI cannot see any value in creating a custom SystemLogHandler in this instance \nthe attached patch removes the following code.\n\n>> SystemLogHandler log = new SystemLogHandler(System.out);\n>> System.setOut(log);\n>> System.setErr(log);\n\n"}, {"count": 3, "tags": [], "bug_id": 18462, "text": "Tomcat as a container is used in a number of different ways.\nSome use it with an IDE as you do, but there are many others who use\nit as a production web application server.\n\nThe redirection of System.out and System.err is there to support those\nwho run Tomcat as a production application server.  It does this so that\napplication code which generates output to stdout or stderr gets placed in\nthe appropriate tomcat log for the application.  This makes it easier to\ntrack down problems for a production application because all output generated\nby the application will be in the same log.\n\nYour patch is not acceptable because it would break this behaviour for\nthose who need it on a production server.\n\nYou might consider researching this further and submitting a patch\nthat will work for both cases.  Perhaps a test to not execute the code\nif Tomcat is running embedded.  Or a new attribute to disable this.\n\n", "id": 35801, "time": "2003-04-22T15:26:17Z", "creator": "glenn@apache.org", "creation_time": "2003-04-22T15:26:17Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "creator": "michael.eriksson@bauer-partner.de", "is_private": false, "id": 35806, "time": "2003-04-22T15:55:05Z", "bug_id": 18462, "creation_time": "2003-04-22T15:55:05Z", "tags": [], "text": "Personally I consider redirection of System.out/System.err in code a bad thing\nfor other reasons. The point is that when you use e.g. System.out, you\ndo so because you want it to appear on System.out/stdout/console or whatever\nterminology you favour. Thus, the application should never redirekt. Any\nand all redirektion should occur outside the application, e.g in a shell script\nor a bat file. (Yes, I realize that a lot of people confuse \"System.out\"\nand \"logging framework\", but that is really their problem.)"}, {"count": 5, "tags": [], "bug_id": 18462, "is_private": false, "text": "Users redirected System.out via the startup scripts in previous versions of \nTomcat and this seemed acceptable to all parties. You could leave the output \ngoing to the console or redirect it to a log file in the standalone \n(production) case, and additionally allow redirection when used within a \ncontainer app such as an IDE. This seemed to be the most comprehensive \nsolution, I personally think redirecting System.out from within the app is less \nflexible.\n\nI believe I understand the function of the SystemLogHandler, but think there is \na difference to the logging requirement and the System.out requirement.", "id": 35888, "time": "2003-04-23T12:48:24Z", "creator": "andrew.chapman@clicktools.com", "creation_time": "2003-04-23T12:48:24Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 18462, "is_private": false, "text": "Without the SysteLogHandler and the way it redirects System.out and System.err\nto the appropriate tomcat log debugging web application problems on a \nproduction server where you have 20-30 different web applications with\nmultiple virtual hosts is a nightmare.  There are too many supporting API's\nbeing used in web applicaitons which don't know they are running in a container\nand will print stack traces, etc. to System.out or System.err.  Having output\nfrom the same applicaiton in different logs, or output from multiple applications\nin the same log because they are printing to System.out or System.err is a pain.\n\nI will not make the change recommended by the patch.\n\nAs I said earlier\n\n\"You might consider researching this further and submitting a patch\nthat will work for both cases.  Perhaps a test to not execute the code\nif Tomcat is running embedded.  Or a new attribute to disable this.\"\n", "id": 35902, "time": "2003-04-23T15:22:05Z", "creator": "glenn@apache.org", "creation_time": "2003-04-23T15:22:05Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "andrew.chapman@clicktools.com", "attachment_id": null, "id": 35972, "time": "2003-04-24T11:22:45Z", "bug_id": 18462, "creation_time": "2003-04-24T11:22:45Z", "is_private": false, "text": "Okay points taken and understood.\n\nAlternatively what I would like to propose is adding an optional attribute to \nthe <Server> tag in server.xml. The attribute will be named \"noRedirect\" and \nwill take a boolean value. So the whole tag would look like:\n\nserver.xml\n...\n<Server port=\"8005\" shutdown=\"SHUTDOWN\" debug=\"0\" noRedirect=\"true\">\n...\n\nIf no attribute is set then the default is false (current behaviour). Setting \nthe attribute to \"true\" (as above) will mean that System.out and System.err are \nNOT redirected.\n\nSummary of changes:\n\norg.apache.catalina.Server\n--------------------------\nADD public void setNoRedirect(boolean noRedirect);\nADD public boolean getNoRedirect();\n\norg.apache.catalina.core.StandardServer\n---------------------------------------\nADD private boolean noRedirect = false;\nADD public void setNoRedirect(boolean noRedirect) {...}\nADD public boolean getNoRedirect() {...}\n\norg.apache.catalina.startup.Catalina\n------------------------------------\nCHANGE protected void start() {...\n\n<<        // Replace System.out and System.err with a custom PrintStream\n<<        SystemLogHandler log = new SystemLogHandler(System.out);\n<<        System.setOut(log);\n<<        System.setErr(log);\n\n>>        // Replace System.out and System.err with a custom PrintStream if the\n>>        // noRedirect switch is false (default)\n>>        if (server.getNoRedirect() == false) {\n>>          SystemLogHandler log = new SystemLogHandler(System.out);\n>>          System.setOut(log);\n>>          System.setErr(log);\n>>        }\n\n...}\n\nThis involves changing the Server interface however, which is not to be taken \nlightly. An alternative may be to leave the interface and just add the \nnoRedirect to StandardServer (as debug is currently), then check the server \nclass as follows:\n\n>>        // Replace System.out and System.err with a custom PrintStream if the\n>>        // using StandardServer and noRedirect switch is false (default)\n>>        if (server instanceof StandardServer) {\n>>          if (server.getNoRedirect() == false) {\n>>            SystemLogHandler log = new SystemLogHandler(System.out);\n>>            System.setOut(log);\n>>            System.setErr(log);\n>>          }\n>>        } else {\n>>          SystemLogHandler log = new SystemLogHandler(System.out);\n>>          System.setOut(log);\n>>          System.setErr(log);\n>>        }\n\nI think the change to Server is the most contentious aspect of this proposal. I \nhave a patch for the former implementation (with changes to Server). This is \nneater in some respects adding this functionality to all Server \nimplementations, but obviously \"breaking\" any existing implementations other \nthan StandardServer.\n\nI'll await comment and if acceptable I'll submit a patch."}, {"count": 8, "attachment_id": null, "creator": "nikolaymetchev@gmail.com", "is_private": false, "id": 35975, "time": "2003-04-24T12:00:38Z", "bug_id": 18462, "creation_time": "2003-04-24T12:00:38Z", "tags": [], "text": "Calling the attribute \"noRedirect\" will cause a lot of confusion because it may \nbe interpreted as all kinds of redirection such as HTTP redirection. A better \nname might be \"errorStreamRedirect\""}, {"count": 9, "tags": [], "text": "Yes you have a valid point. I don't particularly like the double negative \nnoRedirect=false either.\n\nI'll change the patch to use outputRedirect which by default will be true. So \nyou would use the following in server.xml to prevent the redirection:\n\nserver.xml\n...\n<Server port=\"8005\" shutdown=\"SHUTDOWN\" debug=\"0\" outputRedirect=\"false\">\n...\n", "is_private": false, "bug_id": 18462, "id": 36069, "time": "2003-04-25T10:05:32Z", "creator": "andrew.chapman@clicktools.com", "creation_time": "2003-04-25T10:05:32Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 18462, "attachment_id": 6008, "is_private": false, "id": 36070, "time": "2003-04-25T10:10:08Z", "creator": "andrew.chapman@clicktools.com", "creation_time": "2003-04-25T10:10:08Z", "text": "Created attachment 6008\n[PATCH] Add support for attribute in <server> tag of server.xml to allow switching of output redirect behaviour"}, {"count": 11, "tags": [], "bug_id": 18462, "attachment_id": null, "is_private": false, "id": 55791, "time": "2004-04-14T21:09:20Z", "creator": "markt@apache.org", "creation_time": "2004-04-14T21:09:20Z", "text": "Marking this an an enhancement.\n\nNot sure how much interest there is in the user community for this patch. A \nquick scan of the last 12 months of tomcat-user didn't highlight this as a \nrequirement although I might have missed something."}, {"count": 12, "tags": [], "bug_id": 18462, "text": "Moving from Tomcat 4/4.1.24 to Tomcat 7.\n\nMy concern is when Tomcat is installed on Windows: it is by default configured to log err and out to separate files.\n\nSteps to reproduce:\n1. Install apache-tomcat-6.0.30.exe with the Examples webapp.\n2. Launch Tomcat and navigate to\nhttp://localhost:8080/examples/jsp/simpletag/foo.jsp\n3. Look into logs/tomcat6-stdout.2011-01-10.log\nActual result: The file contains the following:\n===============================\n2011-01-10 23:33:27 Commons Daemon procrun stdout initialized\nDid you see me on the stderr window?\n\n\nDid you see me on the browser window as well?\n===============================\nExpected result: The \"Did you see me on the stderr window?\" message should have been printed into *stderr* log, not in *stdout* log.\n\nAt the same time the tomcat6-stderr.2011-01-10.log file contains a lot of text, printed by the logging subsystem. It is java.util.logging.ConsoleHandler that prints there.\n\nAs was noticed earlier, the culprit is Embedded#initStreams() (TC5.5,6,7) and Catalina#initStreams() (TC7).\n>>  // Replace System.out and System.err with a custom PrintStream\n>>  SystemLogHandler systemlog = new SystemLogHandler(System.out);\n>>  System.setOut(systemlog);\n>>  System.setErr(systemlog);\n\nInitialization of JULI happens before this redirection, and thus java.util.logging.ConsoleHandler prints to the original System.err.\n\nMy thoughts of this:\n1) SystemLogHandler can be enhanced to support separate out and err streams.\n2) If we do not fix this, then maybe configure commons-daemon to log both streams to the same file by default.\nIt is done by setting Stderr name in its configuration to be an empty string. -- See method redirectStdStreams() in prunsrv.c.\n3) It is worth being mentioned in the FAQ.\n4) This feature is not needed at all if no Context is configured with \"swallowOutput=true\". So maybe make it configurable and turn it off by default. The name for the configuration property might be \"redirectStreams\", like it is already used as the field name Embedded#redirectStreams.", "id": 143254, "time": "2011-01-10T18:39:36Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-01-10T18:39:36Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "text": "*** Bug 33606 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 143259, "creator": "knst.kolinko@gmail.com", "time": "2011-01-10T18:58:27Z", "bug_id": 18462, "creation_time": "2011-01-10T18:58:27Z", "is_private": false}, {"count": 14, "tags": [], "text": "Thanks to the way SystemLogHandler is written there is a really nice way to handle this whilst retaining the swallow output functionality.\n\nI have applied a patch to 7.0.x that will be in 7.0.7 onwards that does the following:\n- treats stdout and stderr separately\n- swallowOutput redirects both\n- console operation remains unchanged although catalina.sh can now be modified to log stderr and stdout separately if desired\n- when running as a windows server, stderr and stdout are logged separately by default", "is_private": false, "bug_id": 18462, "id": 143317, "time": "2011-01-12T19:58:15Z", "creator": "markt@apache.org", "creation_time": "2011-01-12T19:58:15Z", "attachment_id": null}]
[{"count": 0, "attachment_id": null, "bug_id": 39496, "text": "I believe I have found a bug in servlet mapping in recent versions of Tomcat.\nThe circumstances where this bug can be seen are quite convoluted but not uncommon:\n\n* A servlet mapping has been set up that matches requests for 'virtual' pages in\nthe root and any subdirectory\n* A Host element matching a domain name has been set up and mapped to the webapp\nfolder\n* The user browses to a 'virtual' file in a subdirectory, via the domain name\n* The subdirectory exists on the file system\n\nUnder these circumstances, Tomcat 5.5.16 and 5.5.17 return a 404 error when the\nservlet should have handled the request.\n\nSteps to reproduce:\n\n1. Create a hosts file entry to point a domain such as www.testdomain.com at the\nlocal machine.\n2. Download and unzip the binary distribution apache-tomcat-5.5.17.zip\n3. Add the following Host entry after the default localhost one in conf/server.xml\n\t<Host name=\"www.testdomain.com\" debug=\"0\" appBase=\"webapps\\test\"\n\t\t\tunpackWARs=\"true\" autoDeploy=\"true\">\n\t\t<Context path=\"\" docBase=\"\" debug=\"0\"/>\n\t</Host>\n4. Create a folder in webapps named \"test\". Also create \"test/subdir\",\n\"test/WEB-INF\" and \"test/WEB-INF/classes\"\n5. Add the following web.xml to WEB-INF.\n\t<?xml version=\"1.0\" ?>\n\t<!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application\n2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n\t<web-app>\n\t\t<servlet>\n\t\t\t<servlet-name>test</servlet-name>\n\t\t\t<servlet-class>TestServlet</servlet-class>\n\t\t\t<load-on-startup>1</load-on-startup>\n\t\t</servlet>\n\t\t<servlet-mapping>\n\t\t\t<servlet-name>test</servlet-name>\n\t\t\t<url-pattern>*.ser</url-pattern>\n\t\t</servlet-mapping>\n\t</web-app>\n6. Compile this code and put it in the classes folder.\n\timport java.io.IOException;\n\timport javax.servlet.ServletException;\n\timport javax.servlet.http.HttpServlet;\n\timport javax.servlet.http.HttpServletRequest;\n\timport javax.servlet.http.HttpServletResponse;\n\tpublic class TestServlet extends HttpServlet {\n\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\nthrows ServletException, IOException {\n\t\t\tresponse.getOutputStream().write(\"Servlet responded\".getBytes());\n\t\t}\n\t}\n7. Start Tomcat with startup.bat.\n8. Browse to the following URLs.\n\nhttp://localhost:8080/test/page.ser - OK\nhttp://localhost:8080/test/subdir/page.ser - OK\nhttp://localhost:8080/test/subdir2/page.ser - OK\nhttp://www.testdomain.com:8080/page.ser - OK\nhttp://www.testdomain.com:8080/subdir/page.ser - 404\nhttp://www.testdomain.com:8080/subdir2/page.ser - OK\n\nI have tested 5.5.17 Windows and Linux binary distributions, and 5.5.16 under\nWindows, which all fail. 5.5.12, 5.0.30 and 4.1.31 successfully return all the\nabove requests. I couldn't find 5.5.13-15 to test.", "id": 88846, "time": "2006-05-05T20:59:14Z", "creator": "davemorrissey@gmail.com", "creation_time": "2006-05-05T20:59:14Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 39496, "attachment_id": null, "id": 90631, "time": "2006-06-27T09:29:41Z", "creator": "wosc@wosc.de", "creation_time": "2006-06-27T09:29:41Z", "is_private": false, "text": "Hi,\n\nI think the underlying problem is this: Tomcat nowadays deploys *any* directory\ncontained in the Host's appBase as a webapp. This has nothing to do with\nlocalhost or not, which you can validate by using the same test-webapp described\nabove, but outside the \"webapps\"-Directory, e. g.\n\n<Host name=\"www.testdomain.com\" debug=\"0\" appBase=\"/tmp/test\"\n  unpackWARs=\"true\" autoDeploy=\"true\">\n    <Context path=\"\" docBase=\"\" debug=\"0\"/>\n    <Context path=\"/manager\" reloadable=\"true\" \n      docBase=\"/path/to/apache-tomcat-5.5.17/server/webapps/manager\"\nprivileged=\"true\"/>\n</Host>\n\nand then look at the webapps on this host. There is \"/\" and \"/subdir\", the\nlatter of which should not be there. This behaviour is the same if you use\nlocalhost instead of testdomain.com, the difference was caused by the fact that\nlocalhost has appBase=\"webapps\", which does not contain a directory \"subdir\", so\nthe virtual mappings can pass unhindered by erroneously deployed webapps.\n\n\nI dug through the sources and found that version 5.5.12 has these lines in\norg.apache.catalina.startup.HostConfig.deployDirectories()\n    // Make sure there is an application configuration directory\n    // This is needed if the Context appBase is the same as the\n    // web server document root to make sure only web applications\n    // are deployed and not directories for web space.\n    File webInf = new File(dir, \"/WEB-INF\");\n    if (!webInf.exists() || !webInf.isDirectory() ||\n        !webInf.canRead())\n        continue;\n\nI don't know when or why they were removed, but this clearly is the reason for\nthe new behaviour -- which I consider unwanted and wrong. Please do tell if\nthere is a rationale for auto-deploying *all* directories, regardless if they\nare, in fact, a webapp; I at least can't see a reason to do so.\n\nAs a workaround I suggest using an empty directory as the Host's appBase, and\nthen putting absolute paths as the Context's docBases. This way, there simply\nwon't *be* any extra subdirectories for Tomcat to deploy.\n\nWolfgang"}, {"count": 2, "tags": [], "bug_id": 39496, "attachment_id": null, "is_private": false, "id": 93558, "time": "2006-09-14T02:40:14Z", "creator": "markt@apache.org", "creation_time": "2006-09-14T02:40:14Z", "text": "This is a configuration error. appBase should not equal docBase. In this case\nyou need to make the following changes.\nwebapps\\test -> webapps\\ROOT\nappBase=\"webapps\\test\" -> appBase=\"webapps\"\npath=\"\" -> Not specified. Tomcat infers this\ndocBase=\"\" -> docBase=\"ROOT\"\n\nThat your configuration worked in previous versions was luck. It has never been\na supported use case.\n\nPlease follow up on the users mailing list if you require further support."}]
[{"count": 0, "tags": [], "bug_id": 21706, "text": "Normally escaping the dot ('.') character using a slash ('\\') should make the\nregular expression consider this dot as a normal character and not the regexp\nequivalent for \"any character\".\n\nThis seems to fail in some conditions, but can be fixed by surrounding the dot\nwith double quotes to make it considered as a string.\n\nI don't have time to make a lot of tests but the code below will produce the\nfollowing output with jdk1.3 and jakarta-regexp 1.2 or latest build as of July\n18th 2003, in this output the test number 5 should, in fact, not fail.\n\nYou can also see that test number 1 does not fail if dot character is surrounded\nwith double quotes.\n\n---- OUTPUT BEGIN ----\n[1]\tChecking\t\"john.doe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\ttrue\n\n[2]\tChecking\t\"john-doe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\ttrue\n\n[3]\tChecking\t\"john_doe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\ttrue\n\n[4]\tChecking\t\"johndoe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\ttrue\n\n[5]\tChecking\t\"john.doe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\tfalse\n\n[6]\tChecking\t\"john-doe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\ttrue\n\n[7]\tChecking\t\"john_doe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\ttrue\n\n[8]\tChecking\t\"johndoe@somehost.net\"\tagainst\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\t:\ttrue\n\n---- OUTPUT END ----\n\n\n---- CODE BEGIN ----\npackage retest;\n\nimport org.apache.regexp.*;\n\npublic class retest {\n\n  public static void main(String args[]){\n\n    // List of email addresses to check\n    String[] emailAddresses = new String[]{\n\t\"john.doe@somehost.net\",\n\t\"john-doe@somehost.net\",\n\t\"john_doe@somehost.net\",\n\t\"johndoe@somehost.net\"\n    };\n\n    // List of reg exp to use\n    String[] regExp = new String[]{\n\t\"^(.*<)?([a-zA-Z0-9_\\\".\\\"\\\\-])+@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]{2,4})+(>)?$\",\n\t\"^(.*<)?([a-zA-Z0-9_\\\\.\\\\-])+@(([a-zA-Z0-9\\\\-])+\\\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"\n    };\n\n    try{\n      int testCounter = 1;\n      for (int i = 0; i < regExp.length; i++) {\n\tRE emailRE = new RE(regExp[i]);\n\n\tfor (int j = 0; j < emailAddresses.length; j++) {\n\t  System.out.println(\"[\"+ (testCounter++) +\"]\\tChecking\\t\\\"\" + emailAddresses[j] +\n\t\t\t     \"\\\"\\tagainst\\t\\\"\" + regExp[i] + \"\\\"\\t:\\t\" +\n\t\t\t     emailRE.match(emailAddresses[j]));\n\t}\n      }\n    }\n    catch(Exception e){\n      System.out.println(e);\n    }\n  }\n}\n---- CODE END ----", "id": 40932, "time": "2003-07-18T12:32:05Z", "creator": "matthieu.recouly@laposte.net", "creation_time": "2003-07-18T12:32:05Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 21706, "is_private": false, "text": "Tried with CVS 20030827 (today), got:\n[1]     Checking        \"john.doe@somehost.net\" against\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"    \n:       true\n[2]     Checking        \"john-doe@somehost.net\" against\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"    \n:       true\n[3]     Checking        \"john_doe@somehost.net\" against\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"    \n:       true\n[4]     Checking        \"johndoe@somehost.net\"  against\n\"^(.*<)?([a-zA-Z0-9_\".\"\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"    \n:       true\n[5]     Checking        \"john.doe@somehost.net\" against\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"     \n:       true\n[6]     Checking        \"john-doe@somehost.net\" against\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"     \n:       true\n[7]     Checking        \"john_doe@somehost.net\" against\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"     \n:       true\n[8]     Checking        \"johndoe@somehost.net\"  against\n\"^(.*<)?([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+(>)?$\"     \n:       true\n\nSo I think it's working ok.\n\nNote about [a-zA-Z0-9_\".\"\\-] character class: it is the same as\n[a-zA-Z0-9_\".\\-], and it will match \" character and I guess that was not\ndesired. And, class [a-zA-Z0-9_\\.\\-] is same as [a-zA-Z0-9_.\\-]. You can verify\nthis by downloading latest CVS and modifying your program accordingly (run it\nagainst \"j\\\"o\\\"hn.doe@somehost.net\", \"joh\\\\n-doe@somehost.net\")\n", "id": 43368, "time": "2003-08-27T14:03:03Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-08-27T14:03:03Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 21706, "is_private": false, "text": "closed", "id": 43373, "time": "2003-08-27T14:12:38Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-08-27T14:12:38Z", "attachment_id": null}]
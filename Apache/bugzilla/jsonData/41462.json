[{"count": 0, "tags": [], "bug_id": 41462, "is_private": false, "text": "Overview Description: \n\nImplementation of c14n canonization method generates wrong canonical form of Xml\ndocument with latin characters.\n\nSteps to Reproduce:\n\nGenerate canonical form of Xml document witch contains latin characters using\nCanonicalizer20010315OmitComments class and compare it with canonical form\ngenerated with Stylus Studio 2007 or Microsoft.NET 2.0.\n\nActual Results:\n\nCanonicalizer20010315OmitComments class generates canonical form of Xml document\nwith latin characters encoded in a wrong way.\n\nThe problem is caused by wrong recognition if character is represented with one\nor many bytes in file \"CanonicalizerBase.java\" in method static final void\noutputTextToWriter(final String text, final OutputStream writer) in line 829\n(\"if ((c & 0x80) ==0)\")\n\nExample: \nlet c = 0x15B //(int)c gives 347, a character '&#347;'\nc & 0x80 == 0 is true so c is written to OutputStream as single byte 0x5B - '['\ncharacter (line 830). \n\nAs a result canonical form of input Xml document is generated in a wrong way.\nWrong canonical form causes interoperability problems in verifying digital\nsignature of files generated with libraries of other vendors.\n\nExpected Results:\n\nXml security libraries for Apache should generate correct canonical form of Xml\ndocuments which contains latin characters.", "id": 98511, "time": "2007-01-25T07:16:41Z", "creator": "karol.rewera@vsoft.pl", "creation_time": "2007-01-25T07:16:41Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41462, "is_private": false, "text": "This is a pretty awful bug.  This will block me from being able to deploy 1.4.0,\nwhich I need to deal with the race condition in the X509 code.\n\nHas anyone figured out a workaround for this bug yet?\n\nFrom looking at the code, I think the submitter has it right here.  This line he\nmentions below introduces the bug, and it was added in 1.4. \n\nA better option perhaps would be to achieve this optimization another way:  let\nHotspot do it for you.\n\nIn many cases, such as exactly this scenario here, you have a method that has a\nfrequently-executed conditional block at the top that uses a cheap, happy path\n(or short circuits).  However, Hotspot only inlines very short methods, so the\nmethod call is preserved. (Can JDK 6.0 do partial inlining?  I don't honestly\nknow).  So what some clever folks figured out is that if you factor out the\n'long path' into another method, then Hotspot will frequently inline the\nshort-circuit logic into the caller.  \n\n", "id": 99697, "time": "2007-02-22T12:53:53Z", "creator": "jdmarshall@gmail.com", "creation_time": "2007-02-22T12:53:53Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Fixed in SVN head, please check it.", "is_private": false, "id": 100214, "creator": "raul-info@r-bg.com", "time": "2007-03-09T06:02:01Z", "bug_id": 41462, "creation_time": "2007-03-09T06:02:01Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "raul-info@r-bg.com", "text": "*** Bug 41472 has been marked as a duplicate of this bug. ***", "id": 100217, "time": "2007-03-09T06:03:45Z", "bug_id": 41462, "creation_time": "2007-03-09T06:03:45Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "*** Bug 41846 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 100683, "creator": "sean.mullan@oracle.com", "time": "2007-03-20T09:47:14Z", "bug_id": 41462, "creation_time": "2007-03-20T09:47:14Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "Closing old bugs. Fixed in 1.4.1", "is_private": false, "id": 108402, "creator": "sean.mullan@oracle.com", "time": "2007-09-19T12:24:42Z", "bug_id": 41462, "creation_time": "2007-09-19T12:24:42Z", "attachment_id": null}]
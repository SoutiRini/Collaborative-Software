[{"count": 0, "tags": [], "bug_id": 43282, "attachment_id": null, "text": "Jacob Kjome in http://marc.info/?l=log4j-dev&m=118793327920353&w=2\n\nWhat does everyone think about releasing OSGi ready Log4j jars?  OSGi \nis quickly becoming popular.  In order for OSGi apps to depend on \nLog4j in an OSGi environment, certain MANIFEST.mf entries need to \nexist.  There's a Maven plugin that performs the OSGi packaging \ncalled the \"maven-bundle-plugin\".\n\n... (more follows)\n\nAlso the following discussion on users@maven on 27-Aug-2007 regarding\ncommons-logging's pom may be helpful:\nhttp://marc.info/?l=turbine-maven-user&m=118823947802801&w=2", "id": 107571, "time": "2007-08-31T13:56:18Z", "creator": "carnold@apache.org", "creation_time": "2007-08-31T13:56:18Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 43282, "attachment_id": null, "text": "If it is only a question of a slight change of the maven configuration file, could you please provide a patch :)\n\nWhat do the Apache Felix folks think of this?  Is the logging outside the OSGi container?", "id": 119272, "time": "2008-08-02T13:31:21Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T13:31:21Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 43282, "attachment_id": null, "text": "Committed for log4j in rev 685646.   Did not address companions.  May want to ask user@felix.apache.org for feedback.", "id": 119795, "time": "2008-08-13T12:29:01Z", "creator": "carnold@apache.org", "creation_time": "2008-08-13T12:29:01Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 43282, "text": "Unfortunately the new OSGi headers are broken, trying to install the Log4J bundle in Equinox yields the following error:\norg.osgi.framework.BundleException: Invalid manifest header Import-Package: \"com.sun.jdmk.comm;resolution:=\"optional\"\" : Cannot import a package more than once \"com.sun.jdmk.comm\"\n\nExamining the manifest confirms this and another problem in the Import-Package header:\n'com.sun.jdmk.comm;resolution:=optional' is specified twice\njavax.jmdns is a required package, even though it isn't a standard JDK package.\n\nI'm not sure if you wanted these exposed or not, but the Export-Package header is missing these packages:\norg.apache.log4j.lf5.*\norg.apache.log4j.chainsaw", "id": 136425, "time": "2010-04-26T20:46:37Z", "creator": "nojspam@losgibsons.us", "creation_time": "2010-04-26T20:46:37Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 43282, "text": "I noticed one other issue, the org.apache.log4j packages exported via the Export-Packages header are missing an explicit version number.", "id": 136783, "time": "2010-05-11T12:42:17Z", "creator": "cmuchins@us.ibm.com", "creation_time": "2010-05-11T12:42:17Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 43282, "text": "Thanks for the bug report, sorry about the delay in response.  I have not yet investigated the reported issue with log4j 1.2.16, but made an initial attempt to add OSGi metadata to log4j-extras and would appreciate your review.\n\nThere are two classes org.apache.log4j.xml.XSLTLayout and org.apache.log4j.varia.SoundAppender that are in packages also exported by log4j.  I looked into split packages, but it looked highly likely that I would get it wrong, so I've left those classes unaccessible.\n\nHere is the generated manifest for extras, do you see anything troubling?\n\n\nManifest-Version: 1.0\n\nExport-Package: org.apache.log4j.extras;uses:=\"javax.xml.parsers,org.w\n\n 3c.dom,org.xml.sax,org.apache.log4j.config,org.apache.log4j.or\",org.a\n\n pache.log4j.filter;uses:=\"org.apache.log4j.extras,org.w3c.dom,org.apa\n\n che.log4j.rule\",org.apache.log4j.rolling;uses:=\"org.apache.log4j.extr\n\n as,org.w3c.dom\",org.apache.log4j.rule\n\nBuilt-By: curta\n\nTool: Bnd-0.0.357\n\nBundle-Name: Apache Extras Companion for log4j 1.2.\n\nCreated-By: Apache Maven Bundle Plugin\n\nBundle-Vendor: Apache Software Foundation\n\nBuild-Jdk: 1.6.0_18\n\nBundle-Version: 1.1.0.SNAPSHOT\n\nBnd-LastModified: 1275709540450\n\nBundle-ManifestVersion: 2\n\nBundle-Description: This companion provides additional appenders, filt\n\n ers and  other capabilities for log4j 1.2.  Several of these were bac\n\n kported from  the abandoned log4j 1.3 development effort.\n\nBundle-License: http://www.apache.org/licenses/LICENSE-2.0.txt\n\nBundle-DocURL: http://logging.apache.org/log4j/companions/extras/index\n\n .html\n\nBundle-SymbolicName: log4j.apache-log4j-extras\n\nImport-Package: javax.xml.parsers,javax.xml.transform,javax.xml.transf\n\n orm.dom,javax.xml.transform.sax,javax.xml.transform.stream,org.apache\n\n .log4j.config,org.apache.log4j.extras,org.apache.log4j.filter,org.apa\n\n che.log4j.or,org.apache.log4j.rolling,org.apache.log4j.rule,org.w3c.d\n\n om,org.xml.sax,org.xml.sax.helpers\n\n\n\nName: org.apache.log4j\n\nImplementation-Vendor: Apache Software Foundation\n\nImplementation-Title: Apache Extras Companion for log4j 1.2.\n\nImplementation-Version: 1.1-SNAPSHOT", "id": 137368, "time": "2010-06-04T23:59:24Z", "creator": "carnold@apache.org", "creation_time": "2010-06-04T23:59:24Z", "is_private": false, "attachment_id": null}, {"count": 6, "text": "I've committed rev 953935 which results in a log4j.jar which can be installed and started in the Equinox OSGi framework supplied with Eclipse.\n\nFor future ref:\n\ncd /usr/lib/eclipse/plugins\njava -jar org.eclipse.osgi_---.jar -console\ninstall file:///home/.../log4j-1.2.17-SNAPSHOT.jar\nstart BUNDLE_FROM_PREVIOUS_STEP\n\n\nBased on a suggest from the 2008 exchange on user@felix, I added a DynamicImport-Package directive via the maven-jar-plugin.  Hopefully, that would allow resolving any user-supplied appender that was specified via a configuration file.\n\njavax.swing, com.ibm.uvm.tools and com.sun.jdmk.comm are explicitly blocked from being listed in the import list.  Swing is used by the obsolete log viewing tools still in the java, but not exported.  com.ibm.uvm.tools is dynamically loaded for some ancient VisualAge specific behavior.  com.sun.jdmk.comm provides an http service for JMX.  If needed, these classes can still be obtained via the DynamicImport-Package.\n\nI've listed three javax packages not included in Java SE 1.5 as optional.  The javax.jmdns is not zeroconf implementation and despite the package name is not from Sun or part of the Java Community Process.\n\nAll the other imported classes are either part of Java SE 1.5 or are exported by log4j.jar.\n\nThe maven-bundle-plugin has enough info that it could provide the version qualifier on the exported classes, but it doesn't.  I can bounce this off of users@felix, but is there a reason that you think that we should specify it?", "bug_id": 43282, "attachment_id": null, "id": 137588, "time": "2010-06-12T01:33:17Z", "creator": "carnold@apache.org", "creation_time": "2010-06-12T01:33:17Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 43282, "attachment_id": null, "text": "Specifying version numbers on export is a good practice in OSGi since it allows consumers to target specific versions of the package, which is often required when multiple versions of the same package exist within the same OSGi runtime.", "id": 137592, "time": "2010-06-12T09:13:41Z", "creator": "cmuchins@us.ibm.com", "creation_time": "2010-06-12T09:13:41Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 43282, "text": "Sorry for not responding earlier, but I forgot to add myself to the CC list.\n\nAnyway, I agree with Craig, we need a version number on all of the exported packages.  It will keep behavior predictable if a user accidentally (or, on purpose for some strange reason) loads multiple version of Log4J into an OSGi environment at once.\n\nAnother enhancement that you might consider is packaging the NT appender DLLs inside the bundle.  With headers like this:\n\nBundle-NativeCode: NTEventLogAppender.dll;osname=Win32;processor=x86,\n NTEventLogAppender.amd64.dll;osname=Win32;processor=x86-64,\n *\n\nOSGi is smart enough to unpack the necessary DLL from the bundle and load it on demand.\n\nIf 55K is too much bloat for the Log4J jar, then they could be packaged separately and added as a fragment bundle.\n\nWRT Log4J extras, again adding the version number for the exported packages is important.  In addition, you can handle the split packages problem gracefully if you make it a fragment bundle.  A fragment bundle will not function by itself in OSGi, but instead requires the log4j bundle to be loaded first.  Then the contents of the fragment bundle become accessible to the classloader provided by host bundle.  To do this you just add a header like so:\n\nFragment-Host: log4j;bundle-version=\"1.2.9\"\n\nThis would instruct the log4j extras bundle to attach itself to the log4j bundle if the version number of the parent bundle is greater than or equal to 1.2.9.", "id": 138371, "time": "2010-07-12T12:16:35Z", "creator": "nojspam@losgibsons.us", "creation_time": "2010-07-12T12:16:35Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 43282, "text": "Created attachment 25850\nLoader.java", "id": 138921, "time": "2010-08-05T16:01:25Z", "creator": "radiofreedenver@gmail.com", "creation_time": "2010-08-05T16:01:25Z", "is_private": false, "attachment_id": 25850}, {"count": 10, "tags": [], "bug_id": 43282, "attachment_id": 25851, "text": "Created attachment 25851\nLog4jActivator.java", "id": 138922, "time": "2010-08-05T16:02:53Z", "creator": "radiofreedenver@gmail.com", "creation_time": "2010-08-05T16:02:53Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 43282, "attachment_id": 25852, "text": "Created attachment 25852\nmanifest.bnd", "id": 138923, "time": "2010-08-05T16:10:00Z", "creator": "radiofreedenver@gmail.com", "creation_time": "2010-08-05T16:10:00Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 43282, "attachment_id": null, "text": "My team has created an OSGi friendly version of Log4j. Unfortunately, it's not as simple as adding the right headers to the manifest because there are classloader issues when using custom layouts or appenders.\n\nFortunately, the fixes were not too hard. The Loader.loadClass() method in org.apache.log4j.helpers had to be updated to use a bundle context class loader, if available, and a bundle activator class had to be created to provide access to the bundle context class loader.\n\nWe used the BND tool to generate the bundle with the appropriate manifest entries.\n\nI have attached the modified/new files for your review.", "id": 138924, "time": "2010-08-05T16:11:42Z", "creator": "radiofreedenver@gmail.com", "creation_time": "2010-08-05T16:11:42Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 43282, "text": "Any thoughts on how to write tests around this?  What specific things fail with the current class loader that would pass with the modified class loader?  Are there potential other approaches?", "count": 13, "id": 138941, "time": "2010-08-05T23:03:14Z", "creator": "carnold@apache.org", "creation_time": "2010-08-05T23:03:14Z", "is_private": false}, {"count": 14, "tags": [], "creator": "radiofreedenver@gmail.com", "attachment_id": null, "id": 138977, "time": "2010-08-07T21:53:24Z", "bug_id": 43282, "creation_time": "2010-08-07T21:53:24Z", "is_private": false, "text": "The specific situation that we had to address was logging via a customized JMSAppender that uses MDC parameters to set header properties in the JMS messages in order to simplify subscriber filtering. We also use a custom Layout class for simulations.\n\nWhen custom appenders or layout classes from a bundle are specified in the Log4j properties/xml file, there is no way to resolve them via Class.forName() in Loader.loadClass() because they aren't on the static class path, and the instantiation fails with a ClassNotFoundException. By modifying Loader.loadClass() to use the bundle context class loader, the OSGi runtime is given the chance to locate the classes in the bundle where they were loaded, and the creation of the logger succeeds.\n\nTesting should be fairly straightforward. You would need one or more custom layout and appender classes deployed in a bundle separate from the Log4j bundle. The unit tests would just create and use loggers using those classes. The tests would have to be deployed in a bundle. Knopflerfish and Felix provide JUnit integration to facilitate testing. I don't know about Equinox.\n\nWe haven't managed to identify any other approaches. Personally, I don't think there is any other way to make this work."}, {"count": 15, "tags": [], "bug_id": 43282, "text": "*** Bug 52018 has been marked as a duplicate of this bug. ***", "id": 150554, "time": "2011-10-14T04:39:46Z", "creator": "carnold@apache.org", "creation_time": "2011-10-14T04:39:46Z", "is_private": false, "attachment_id": null}]
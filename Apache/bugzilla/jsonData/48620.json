[{"count": 0, "tags": [], "bug_id": 48620, "text": "Created attachment 24889\nSource code for replicating the crash\n\nA C code is attached that reproduces a crash that we have observed.\n\nEssentially, a single bucket allocator is used to create two buckets. The two buckets are repeatedly split. In each iteration only the last bucket in the chain (for both buckets) is retained, others are destroyed.\n\nAt some point, we observe that the split overwrites some memory area belonging to an existing buffer leading to memory corruption.\n\nThe crash can be avoided by using a separate allocator for splitting t1 and t2 buckets. Our understanding was that a single allocator should do the job.\n\nKey steps \n\n1. create a memory pool\n2. create a bucket allocator\n\n3. create two heap buckets (t1, t2)\n\nfor i=1:40\n\nsplit t1 = t1, second_part\nsplit second_part = second_part, third_part\n\ndestroy(t1), destroy(second_part)\n\nset t1 = second_part\n\nsplit t2 = t2, second_part\ndestroy(t2)\n\nt2 = second_part\n\nend", "id": 133940, "time": "2010-01-26T06:46:31Z", "creator": "maggarwal@gmail.com", "creation_time": "2010-01-26T06:46:31Z", "is_private": false, "attachment_id": 24889}, {"count": 1, "attachment_id": null, "creator": "jorton@redhat.com", "text": "You are using apr_bucket_destroy() when apr_bucket_delete() is generally appropriate.\n\nUsing _destroy() in place of _delete() means that adjacent buckets may retain references to the destroyed bucket, which can lead to memory corruption.  Fixing this in your test case fixes the crash, so I expect it is the likely cause, though the test case is too complex to be sure.\n\nDoing a memset() on the data returned by a bucket read has undefined behaviour: it is const data and you are casting away that const.\n\nIf you can come up with a minimal test case which:\n\na) *does* check return values\nb) doesn't deliberately violate API constraints\n\nplease re-open.", "id": 140319, "time": "2010-09-30T05:19:50Z", "bug_id": 48620, "creation_time": "2010-09-30T05:19:50Z", "tags": [], "is_private": false}]
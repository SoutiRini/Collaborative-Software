[{"count": 0, "tags": [], "text": "Created attachment 29061\nmaster build file that replicates the problem when invoking the compile target\n\nOK, bare with me, it took a couple of attempts to try and write this so it comes out correct :P\n\n=== Brief ===\nWhen an imported file contains a target that has the same name as an existing target from the importing build file, the extensionOf=\"\" settings on the target are applied even though the target is ignored. The result is that Ant complains that the target has a circular dependency:\n\nBUILD FAILED\nCircular dependency: compile <- all.compile <- compile\n\nTwo build files (master and module) are attached that reproduce this problem.\n\n=== Full Story ===\nI have a master build file that has a bunch of high-level targets (clean, compile, release, etc...). I also have a number of \"module\" build files that contain targets of the same name. In the master, these are imported (not included) with a prefix to ensure the targets don't double up.\n\nSo in the master, I have a target declared as below, where \"all.compile\" is an extension point that also resides in the master:\n\n<target name=\"compile\" depends=\"all.compile\"/>\n\nIn the module build file I have a target declared like this:\n\n<target name=\"compile\" extensionOf=\"all.compile\">\n\nThe intention is that calling compile on the master will cause all the module compiles to run. Doing this results in the build failing with a circular dependency as per the error in the brief description. Running \"ant -v\" shows that when importing like this, ant will actually try and create two targets, one with the prefix as defined in the import statement, and the other without. The target without the prefix clashes with the one from the master, and results in the following output:\n\n\"Already defined in main or a previous import, ignore compile\"\n\nThat all makes sense and seems logical. The target is imported under the prefixed name anyway, so life is all good. However, it seems that even though the non-prefixed target is ignored, the \"extensionOf\" settings from the module are still being applied. \n\nI checked out the latest trunk from SVN and it looks (in ProjectHelper2) as if the check to see if there is a target name clash results in the target not being added to the context and thus ignored. However, failing that check does not stop the code at that point, and it proceeds on further. When it comes to extensionOf processing, there is not a similar check to see if the target was ignored, so the values of the attribute are applied, only they get attached by the target name, thus linking them to the target from the MASTER file.\n\nApologies, it's a bit difficult to explain concisely in text.\n\nTo me, it seems like there are two options to solve this (patch for one attached):\n  1. If the target is found to clash, stop processing it at that point\n  2. Further down, when the extensionOf attribute is processed, skip it if the target was meant to be discarded.\n\nI have attached a patch for the second option, as I wasn't sure if the decision not to end processing when finding a clash was deliberate or not and would have other flow on effects.\n\nCheers,\nTim", "is_private": false, "bug_id": 53550, "id": 160635, "time": "2012-07-14T10:22:33Z", "creator": "tpokorny@gmail.com", "creation_time": "2012-07-14T10:22:33Z", "attachment_id": 29061}, {"count": 1, "tags": [], "bug_id": 53550, "is_private": false, "id": 160636, "creation_time": "2012-07-14T10:24:03Z", "time": "2012-07-14T10:24:03Z", "creator": "tpokorny@gmail.com", "text": "Created attachment 29062\nmodule build file imported by master", "attachment_id": 29062}, {"count": 2, "attachment_id": 29063, "creator": "tpokorny@gmail.com", "is_private": false, "id": 160637, "time": "2012-07-14T10:24:44Z", "bug_id": 53550, "creation_time": "2012-07-14T10:24:44Z", "tags": [], "text": "Created attachment 29063\nPatch file to ignore extensionOf processing for skipped targets"}, {"count": 3, "attachment_id": null, "creator": "tpokorny@gmail.com", "is_private": false, "id": 160652, "time": "2012-07-15T14:16:11Z", "bug_id": 53550, "creation_time": "2012-07-15T14:16:11Z", "tags": [], "text": "Fail! Looking at it more closely without a screaming child now. The importing didn't work as I thought.\n\nThe patch will cause extensionOf not to be processed if the target is a duplicate, but because of the way a target with the prefixed name is added, it also means that the extensions are not applied to it. Fail. Working on an updated patch now."}, {"count": 4, "tags": [], "creator": "tpokorny@gmail.com", "attachment_id": 29066, "id": 160662, "time": "2012-07-16T01:20:39Z", "bug_id": 53550, "creation_time": "2012-07-16T01:20:39Z", "is_private": false, "text": "Created attachment 29066\n[PATCH] Updated patch file (second attempt)\n\nOK, so looking harder at the problem there is a simple one-line fix for the immediate issue. When importing, if the target overlaps with an existing one, at a point right before extension processing the internal Target object is replaced by a new one that has the prefixed name.\n\nAfter this, if the target has an extensionOf value, the basic information is bundled up and stored in the extension point stack for later processing, the the relevant target identified by name (as a String). However, when this happens, the original name of the target is used, even if the target has been \"replaced\" by a prefixed on. The second patch contains a one-line fix that gets the name of the target from the target itself, rather than a previous stored local variable, thus keeping things happy whether the target has been replaced with a prefixed-version or not.\n\nApologies. Too much typing for a one-line patch! :P"}, {"count": 5, "tags": [], "creator": "tpokorny@gmail.com", "attachment_id": 29067, "is_private": false, "id": 160663, "time": "2012-07-16T02:39:47Z", "bug_id": 53550, "creation_time": "2012-07-16T02:39:47Z", "text": "Created attachment 29067\n[PATCH] More complete solution with prefix resolution\n\nAnother patch file, but, please take a careful look at it first.\n\nThe previous patch just provides a one line solution that will work for imported build files. All good. But really I wanted to include files, not import them. When importing with a prefix, it seems that targets only use that prefix if their names clash with a target that already exists. Sounds sane and one of the fundamental import/include differences.\n\nI wanted all targets to have the prefixed name, however, switching to use include broke the build with a different error: the extension point from the master build file couldn't be found because it was looking it up under the prefixed name. So, this patch also fixes the core problem of this bug, but it goes further and adds some additional checks that make it work for imports as well.\n\nBasically, it passes the prefix name (if there is one) into the extension point info stack as a fourth element in the array. When the parser resolves the extension points name, if a fourth element is present, it knows that the target must have come from an include file and will first look up the point being extended on by its full, prefixed name, and then fall back to its non-prefixed version. This means that it'll resolve to an extension point in the local file in the first instance, and then out to one from the master if there isn't a local one.\n\nIt's a little distasteful as it adds an extra element to the extension info array that is or isn't present depending on whether the file is or isn't brought in as an include, but it works. I provide for you guys to hack/ignore/laugh at, whatever floats your boat :)"}, {"count": 6, "attachment_id": null, "creator": "nicolas.lalevee@hibnet.org", "is_private": false, "id": 161423, "time": "2012-08-15T10:45:16Z", "bug_id": 53550, "creation_time": "2012-08-15T10:45:16Z", "tags": [], "text": "The extension point name resolution is indeed improved with you patch. Patch applied. Thank you.\nThere is still some work to do though. Now we try the extension point which might be in the same file, and then the one in the root file. But there might be intermediate file in the import stack which we would to resolve the name against. We cannot do that yet since the ProjectHelper doesn't hold the prefix stacking."}]
[{"count": 0, "tags": [], "bug_id": 45396, "attachment_id": 22257, "is_private": false, "id": 118664, "time": "2008-07-14T20:47:05Z", "creator": "kent@netbsd.org", "creation_time": "2008-07-14T20:47:05Z", "text": "Created attachment 22257\nperformance comparison code\n\nEnvironment:\n Ubuntu Linux/amd64\n x86 jre 1.5.0_13-b05\n ant.jar in ant-1.7.1\n\nI'd like to use org.apache.tools.zip instead of java.util.zip because of the filename encoding problem of java.util.zip, and have a performance problem on org.apache.tools.zip.\n\nThe attached Java code compress 2 files (3MiB and 2MiB) with org.apache.zip and java.util.zip.  It shows org.apche.zip is 20x slower than java.util.zip.\n\nOutput:\n% java -cp .:ant-1.7.1.jar ZipPerformance -apache -jdk\n==> Benchmarking\nApache: 95832 [ms]\nJDK: 4717 [ms]"}, {"count": 1, "tags": [], "creator": "kent@netbsd.org", "text": "I looked the source code.\nWhen we call ZipOutputStream.write(byte[]) for a large byte array,\n\n* org.apache.tools.zip\n  call Deflater.setInput() once for the whole of the array\n\n* java.util.zip\n  call Deflater.setInput() multiple times.  One call handles a 512 byte chunk of the array.\n", "id": 118665, "time": "2008-07-14T21:36:21Z", "bug_id": 45396, "creation_time": "2008-07-14T21:36:21Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "text": "Created attachment 22263\nextended perfromance comparison code", "id": 118692, "time": "2008-07-15T23:16:18Z", "bug_id": 45396, "creation_time": "2008-07-15T23:16:18Z", "is_private": false, "attachment_id": 22263}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 118693, "time": "2008-07-15T23:21:31Z", "bug_id": 45396, "creation_time": "2008-07-15T23:21:31Z", "is_private": false, "text": "I've extended the test code which compressed two big files (2 and 3 MB) to cover the case of many small files (2000 files of 2 or 3 kB) and covered reading as well.\n\nThe big file compression case is actually worse on my machine (WinXP) where java.util.zip is more like 40 times faster.  OTOH Ant wins in the small file case.\n\nAnt is slower when reading the ZIPs, but the performance difference isn't as bad.\n\n==> Benchmarking big files\nApache write warmup done\nApache write: 147640 [ms]\nJDK write warmup done\nJDK write: 3219 [ms]\nApache read warmup done\nApache read: 453 [ms]\nJDK Warmup done\nJDK read: 125 [ms]\n==> Benchmarking small files\nApache write warmup done\nApache write: 4406 [ms]\nJDK write warmup done\nJDK write: 6531 [ms]\nApache read warmup done\nApache read: 1859 [ms]\nJDK Warmup done\nJDK read: 1312 [ms]\n\nI made the ocde compile on JDK 1.4 because I wanted to compare different JDKs.  In the end the differeneces were so small I didn't include them here (JDK6 was a bit faster for java.util.zip as well as in the Ant case).\n\nFor reference, this is against Ant's subversion revision 677166."}, {"count": 4, "tags": [], "bug_id": 45396, "attachment_id": null, "text": "same machine svn revision 677272:\n\n==> Benchmarking big files\nApache write warmup done\nApache write: 3407 [ms]\nJDK write warmup done\nJDK write: 3297 [ms]\nApache read warmup done\nApache read: 422 [ms]\nJDK Warmup done\nJDK read: 125 [ms]\n==> Benchmarking small files\nApache write warmup done\nApache write: 4438 [ms]\nJDK write warmup done\nJDK write: 6563 [ms]\nApache read warmup done\nApache read: 1844 [ms]\nJDK Warmup done\nJDK read: 1359 [ms]\n\nDeflater seems to copy its input around since I can see bigger memory consumption during the Ant code tests.  There is no hint in the Javadocs and I have no idea why chunking the original input should help - other than that it helps the native implementation of Sun's Deflater class.\n\nI've searched through the zlib and InfoZIP code base to find any reference to good byte chunk sizes to pass to the compression library and found that InfoZIP's zip will use between 2kB (SMALL_MEM) and 16 kB (LARGE_MEM).  I've changed the code to use 8kB blocks, which has the side effect of doing nothing when ZipOutputStream is used via <zip> and friends.\n\nAnt's tasks have always read the file content in 8kB chunks and written those blocks to the ZipOutputStream - so Ant's tasks have never seen the poor performance for big files.", "id": 118704, "time": "2008-07-16T06:06:07Z", "creator": "bodewig@apache.org", "creation_time": "2008-07-16T06:06:07Z", "is_private": false}, {"count": 5, "tags": [], "creator": "kent@netbsd.org", "attachment_id": null, "id": 118738, "time": "2008-07-16T18:53:12Z", "bug_id": 45396, "creation_time": "2008-07-16T18:53:12Z", "is_private": false, "text": "Thank you for the quick fix!\n"}]
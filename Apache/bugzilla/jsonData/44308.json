[{"count": 0, "tags": [], "bug_id": 44308, "is_private": false, "text": "Log4j comes with HierarchyDynamicMBean for managing Log4j by means of JMX.\n\nThis class has the following restrictions:\n- It can not be registered more than once at the same MBean server, this\n  is a critical restriction in J2EE Environments.\n- Only loggers specified in the Log4j configuration file can be configured.\n- The code is overly complex.\n\nSince these restrictions are by design I have implemented a more straight \nforward solution to this problem.\n\nLoggerManager:             Class with Methods for managing loggers\nLoggerManagerModelMBean:   Model MBean which makes LoggerManager methods\n                           available per JMX\nRollbackableLoggerManager: Extension to LoggerManager which records intial state\n                           for all changed loggers and offers a method to\n                           roll them back", "id": 113182, "time": "2008-01-28T06:17:55Z", "creator": "stefan.fleiter@web.de", "creation_time": "2008-01-28T06:17:55Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 21436\nPath to manage Loggers per JMX", "is_private": false, "bug_id": 44308, "id": 113183, "time": "2008-01-28T06:19:00Z", "creator": "stefan.fleiter@web.de", "creation_time": "2008-01-28T06:19:00Z", "attachment_id": 21436}, {"count": 2, "tags": [], "creator": "stefan.fleiter@web.de", "attachment_id": null, "text": "I forgot to mention that I would like to contribute this patch under the\nApache License, Version 2.0.", "id": 113185, "time": "2008-01-28T06:22:03Z", "bug_id": 44308, "creation_time": "2008-01-28T06:22:03Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 44308, "attachment_id": 21442, "id": 113259, "time": "2008-01-29T02:31:45Z", "creator": "stefan.fleiter@web.de", "creation_time": "2008-01-29T02:31:45Z", "is_private": false, "text": "Created attachment 21442\nRefactored patch to provide an AbstractModelMBean base class\n\nI have refactored the previous patch to provide a AbstractModelMBean base\nclass.\nThe code is more clean and concerns are separated.\nThe primary goal of the refactoring was to make LoggerManagerModelMBean easily\nextendable if anybody has further needs in this direction."}, {"count": 4, "tags": [], "bug_id": 44308, "attachment_id": null, "text": "Ok, I _finally_ had time to sit down and review this.  It does look quite\nsubstantial and generally well thought out.\n\nHere are my comments:\n\nRollbackableLoggerManager\n\tOrdering of rollback, should this be stack based instead?\n\tBe nice to indicate the size of the rollback state (number of undos) via jmx\n\tOperation to rollback just the most recent?\n\t\nLoggerManager\n\tgetLevelByName - stylistic, but should that method declare the RuntimeException?\n\tsince this class is designed for extension, should some thought be made towards\nmaking some of the methods final? (Effective Java)\n\tsetRootLogLevel - declaring throwing RuntimeException?\n\tgetConfiguredLoggers - is there an off-by-1 error there in th efor loop with\nthe ++i instead of i++  ?\n\t\nLoggerManagerModelMBean\n\t+        try {\n\t+            getDelegate().getClass().getMethod(\"rollbackLogConfiguration\", null);\n\t+            modelMBeanOperations.add(rollbackLogConfiguration);\n\t+        } catch (NoSuchMethodException expected) {\n\t+            // nothing to do\n\t+        }\n\tThis seems a bit of a hack! :)   Given RollbackableLoggerManager extends from\nLoggerManager, perhaps the same thought could be done to having a second\nRollbackableLoggerManagerModelMBean that has a doPostRegisterOtherSchtuff()\nstyle methods.\n\t\n\t\n\t", "id": 113557, "time": "2008-02-07T18:35:53Z", "creator": "psmith@apache.org", "creation_time": "2008-02-07T18:35:53Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 44308, "attachment_id": null, "id": 113562, "time": "2008-02-08T01:55:38Z", "creator": "stefan.fleiter@web.de", "creation_time": "2008-02-08T01:55:38Z", "is_private": false, "text": "(In reply to comment #4)\n\n> RollbackableLoggerManager\n> \tOrdering of rollback, should this be stack based instead?\n\nThe intention of Rollback was only to get Log4j in the state it was initially\nconfigured. Since Log4j itself does not offer such an operation I implemented\nthis myself.\nThe order of the modifications of the levels of the logger instances is\nnot important for this purpose since Log4j determines the effective Level\nwith every logging action.\nSince we do not set the effective level (which is not even possible) the order\nof the undo operations does not matter.\n\n> \tBe nice to indicate the size of the rollback state (number of undos)\n>       via jmx Operation to rollback just the most recent?\n\nI can add a method to show the size of the rollback information, no problem.\nThe undo information can be smaller than the modifications made\nsince only for the first change of a logger its' initial level is saved.\nI do not know if there is an advantage of doing partial undo.\nThe purpose of rollback was to have the possibility to change the log levels\nof production machines for a debugging session and to have a single operation\nwhich can undo all changes to get it in the same state as the other nodes.\n\nPartial undo would require a complete changed implementation of the \nRollbackableLoggerManager since I do only save the initial states.\nOne could do this with a MultiMap but I do not see a usecase for partial undo.\nWhat usecase did you think of?\n \t\n> LoggerManager\n> \tgetLevelByName - stylistic, but should that method declare the\n>       RuntimeException?\n\nIt's only for documentation purposes, if you prefer not to declare \nRuntimeExceptions I have no problems removing those declarations.\n\n> \tsince this class is designed for extension, should some thought be made \n>       towards making some of the methods final? (Effective Java)\n\nWhat methods have you thought of?\nWhen I start to think about this I could rename doSetLogLevel\nto setLogLevelInternal and call a doSetLogLevelInternal template method.\nThen one could make setLogLevelInternal final.\nBut even that is difficult because the extending class could wish to veto\nthe modification.\nI am not a big fan of the final keyword because there always is somebody\nwho wants to do something with your class you have never thought of.\n\nBut if you feel strongly for making some method(s) final I will do this.\n\n> \tsetRootLogLevel - declaring throwing RuntimeException?\n\nSee above, no problem removing the declaration.\n\n> \tgetConfiguredLoggers - is there an off-by-1 error there in the for loop \n>       with the ++i instead of i++  ?\n\nI hope I understand you correctly, but Java language specification 3 states\nexplicitly under 14.14.1.2, that the update part of the for statement (third\npart in parentheses) is executed after the body/statement.\nTherefor ++i and i++ have the same effect.\nI got used to prefer pre-increment to post-increment if there is no difference\nin their effects when programming C++.\nSo this can be changed but I do not see the mentioned off by one bug.\n\n\n> LoggerManagerModelMBean\n> \t+        try {\n> \t+            getDelegate().getClass().getMethod(\"rollbackLogConfiguration\",\nnull);\n> \t+            modelMBeanOperations.add(rollbackLogConfiguration);\n> \t+        } catch (NoSuchMethodException expected) {\n> \t+            // nothing to do\n> \t+        }\n> \tThis seems a bit of a hack! :)   Given RollbackableLoggerManager extends \n>       from LoggerManager, perhaps the same thought could be done to having a\n>       second RollbackableLoggerManagerModelMBean that has a \n>       doPostRegisterOtherSchtuff() style methods.\n\nYou got me there. :-)\nThat really is a hack.\nRollbackableLoggerManagerModelMBean could easily override\ncreateModelMBeanOperationInfos of LoggerManagerModelMBean which would\nnot register that method.\n\nThanks a lot for your kind review.\n"}, {"count": 6, "tags": [], "bug_id": 44308, "attachment_id": null, "is_private": false, "id": 114616, "time": "2008-03-13T19:11:47Z", "creator": "psmith@apache.org", "creation_time": "2008-03-13T19:11:47Z", "text": "(In reply to comment #5)\n> \n> > LoggerManagerModelMBean\n> > \t+        try {\n> > \t+            getDelegate().getClass().getMethod(\"rollbackLogConfiguration\",\n> null);\n> > \t+            modelMBeanOperations.add(rollbackLogConfiguration);\n> > \t+        } catch (NoSuchMethodException expected) {\n> > \t+            // nothing to do\n> > \t+        }\n> > \tThis seems a bit of a hack! :)   Given RollbackableLoggerManager extends \n> >       from LoggerManager, perhaps the same thought could be done to having a\n> >       second RollbackableLoggerManagerModelMBean that has a \n> >       doPostRegisterOtherSchtuff() style methods.\n> \n> You got me there. :-)\n> That really is a hack.\n> RollbackableLoggerManagerModelMBean could easily override\n> createModelMBeanOperationInfos of LoggerManagerModelMBean which would\n> not register that method.\n> \n> Thanks a lot for your kind review.\n\nStefan, do you a newer patch available that addresses this point?  I'd be up for applying this if this particular item was addressed.\n\nIf you were also interested, \n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=40246\n\nMay well also fit within this scope (and possibly easy to do?).  I couldn't get my local application to do the deRegister, perhaps you would have more success?\n\n\n\n\n"}, {"count": 7, "tags": [], "creator": "stefan.fleiter@web.de", "attachment_id": null, "text": "I will generate a new patch in week 14, sorry but my time is limited at the moment.\nBecuase of this I do not think that I will have the time to look at bug 40246.\n", "id": 114930, "time": "2008-03-24T15:17:57Z", "bug_id": 44308, "creation_time": "2008-03-24T15:17:57Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 44308, "attachment_id": null, "is_private": false, "id": 119279, "time": "2008-08-02T14:05:55Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T14:05:55Z", "text": "Awaiting newer patch."}, {"count": 9, "tags": [], "bug_id": 44308, "text": "Created attachment 23286\nPatch including RollbackableLoggerManagerModelMBean\n\nThis patch provides both a RollbackableLoggerManagerModelMBean class and the\npossibility to rollback the undo stack step by step.", "id": 125041, "time": "2009-02-21T14:04:40Z", "creator": "stefan.fleiter@web.de", "creation_time": "2009-02-21T14:04:40Z", "is_private": false, "attachment_id": 23286}, {"count": 10, "tags": [], "bug_id": 44308, "attachment_id": 23287, "text": "Created attachment 23287\nRollbackableLoggerManager#destroy now calls super.destroy", "id": 125042, "time": "2009-02-21T14:15:06Z", "creator": "stefan.fleiter@web.de", "creation_time": "2009-02-21T14:15:06Z", "is_private": false}, {"count": 11, "tags": [], "text": "Sorry it took so long.\nThe newest patch provides RollbackableLoggerManagerModelMBean as\nasked for in comment 6 and even the possibility to rollback step by\nstep through the loglevel history.\n\nPlease tell me if anything is still missing.\nI hope to be able to react faster tis time.", "attachment_id": null, "bug_id": 44308, "id": 125043, "time": "2009-02-21T14:21:04Z", "creator": "stefan.fleiter@web.de", "creation_time": "2009-02-21T14:21:04Z", "is_private": false}, {"count": 12, "tags": [], "text": "*** Bug 36860 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 44308, "id": 131051, "time": "2009-10-10T10:25:56Z", "creator": "carnold@apache.org", "creation_time": "2009-10-10T10:25:56Z", "attachment_id": null}]
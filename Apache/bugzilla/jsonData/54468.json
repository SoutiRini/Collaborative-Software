[{"attachment_id": 29882, "tags": [], "bug_id": 54468, "text": "Created attachment 29882\nPatch to replace MD5 with an EVP implementation of SHA1\n\nOpenSSL 1.0.1c strongly deprecated direct access to low level MD5/SHA hash \nfunctions when running in FIPS mode, in favor of the EVP API.  tcnative cannot\ntoggle FIPS mode when combined with this version, and must be ported to the\nhigher-level EVP digest api.\n\nSince it is entirely reasonable to drop MD5 altogether from an OpenSSL build,\nwhile I was patching this to use the EVP API for this ***non-cryptographic*** \nhash application (associating a ssl session key with an explict host:port, in \na fixed length key), I made the shift from MD5 to SHA1, as it should be expected \nto survive for a longer period of time than MD5.\n\nAnother alternative would be to hash with an even longer key, then fold segments\nof the hash with an xor into a smaller result size.  The only collision to be\navoided are each of the virtual host name:port combinations sharing the same\nsession cache.  But I saved that as an exercise for another day.\n\nIt turned out that SSL_vhost_algo_id() was unused; that implementation did not\neven match the implementation represented by the in-line code, and seemed more\nproductive to simply drop this stub entirely.", "count": 0, "id": 164795, "time": "2013-01-22T16:57:32Z", "creator": "wrowe@apache.org", "creation_time": "2013-01-22T16:57:32Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 54468, "attachment_id": null, "id": 164797, "time": "2013-01-22T18:26:55Z", "creator": "wrowe@apache.org", "creation_time": "2013-01-22T18:26:55Z", "is_private": false, "text": "Before you need to dig too deeply, mod_ssl solved this by adopting apr-util's \nmd5 hash instead of changing over to OpenSSL EVP.  tcnative doesn't yet consume \napr-util and I saw no reason to add complexity to the build."}, {"count": 2, "tags": [], "bug_id": 54468, "text": "In ssl_network.c:154, I'm not sure you wanted this:\n\n    sizeof(ctx->context_id)\n\nThe sizeof will likely return the word size on the machine instead of the maximum number of characters ctx->context_id can contain.\n\nI think the proper diff for that file is this:\n\n-                                   MD5_DIGEST_LENGTH);\n+                                   SHA_DIGEST_LENGTH);\n\nWithout this patch, what is the behavior? Does OpenSSL explode when you try to put it into FIPS mode? With this patch, does everything seem to work?", "id": 164800, "time": "2013-01-22T18:56:32Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-01-22T18:56:32Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 54468, "text": "You are suggesting C (C++) can morph the sizeof(str1) member when\nit is explicitly declared?  I think not...\n\nstruct {\n    char str1[5];\n    int  inta[4];\n}\n\nany more than it would be allowed to morph the sizeof(str1) here;\n\nunion {\n    char  str1[5];\n    int   inta[4];\n    ulong uv;\n}\n\nYou are confusing the sizeof operator with explicitly computing member offsets;\nssize_t mbroffset = ((char*) x.inta[0] - (char*) x.str1[0])\nwhich would, as you pointed out in comment #2, return something more like '8'\nsuch that inta remains int-aligned.\n\nIn any case, the reason for performing something like memcpy(x, sizeof(x)...\nis that construct isn't subject to being patched again.  The context_id member\ncan be changed again and again without mauling that code anymore.  I prefer the\npatch as submitted, for clarity.", "id": 164847, "time": "2013-01-23T19:52:09Z", "creator": "wrowe@apache.org", "creation_time": "2013-01-23T19:52:09Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "Straightforward server.xml config;\n<Listener SSLEngine=\"on\"\n          FIPSMode=\"on\"\n          className=\"org.apache.catalina.core.AprLifecycleListener\"/>\n\n\nSince 1.0.1c Catalina error log now reports\n  md5_dgst.c(74): OpenSSL internal error, assertion failed: Low level API call to digest MD5 forbidden in FIPS mode!\nand proceeds to exit before initialization can be completed.\n\nFrom OpenSSL 1.0.1c changelog;\n  *) Low level digest APIs are not approved in FIPS mode: any attempt\n     to use these will cause a fatal error. Applications that really want\n     to use them can use the private_* version instead.\n     [Steve Henson]\n\nand from OpenSSL docs since antiquity, warning that this would happen someday;\n  \"Applications should use the higher level functions EVP_DigestInit(3)\n   etc. instead of calling the hash functions directly.\"", "id": 164852, "time": "2013-01-23T20:15:38Z", "bug_id": 54468, "creation_time": "2013-01-23T20:15:38Z", "is_private": false}, {"count": 5, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 164853, "time": "2013-01-23T20:22:51Z", "bug_id": 54468, "creation_time": "2013-01-23T20:22:51Z", "is_private": false, "text": "Q. With this patch, does everything seem to work?\n\nA. Better still, it actual does successfully initialize the listeners and\n   correctly handle incoming SSL traffic, using the SHA1 key into the SSL\n   session cache for session reuse.  \n\nThanks for the initial patch review!\n\nI believe I still have commit and would be happy to commit this patch myself\nbut would appreciate a couple of eyeballs, particularly Mladen's review as he \nwrote the function in svn r300723 that this patch now does away with."}, {"count": 6, "tags": [], "bug_id": 54468, "attachment_id": null, "id": 164854, "time": "2013-01-23T20:28:10Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-01-23T20:28:10Z", "is_private": false, "text": "(In reply to comment #3)\n> You are suggesting C (C++) can morph the sizeof(str1) member when\n> it is explicitly declared?  I think not...\n\nI wasn't suggesting that. I was suggesting that sizeof(member) isn't what you want when you really want to pass the maximum size of the buffer. Your code only works because 8 (the number returned on my system when I call sizeof(unsigned char *)) is less than the actual size of the buffer which is actually SHA_DIGEST_LENGTH (decimal 20).\n\n> You are confusing the sizeof operator with explicitly computing member\n> offsets;\n\nNo, I'm not. You are confusing sizeof with strlen, which might cause a buffer overrun.\n\n> In any case, the reason for performing something like memcpy(x, sizeof(x)...\n> is that construct isn't subject to being patched again.  The context_id\n> member\n> can be changed again and again without mauling that code anymore.  I prefer\n> the\n> patch as submitted, for clarity.\n\nPlease look again. This is in the call to SSL_set_session_id_context which accepts a pointer to the session id and a number of bytes that can be read. Your number of bytes is wrong: it is too short."}, {"count": 7, "tags": [], "text": "I think you are confused?  ctx->context_id is not a pointer but a byte array.\nSee the declaration;\n\n    unsigned char   context_id[SHA_DIGEST_LENGTH];\n\ncontext_idis a member of the struct, *context_id is not a member of the struct.\n\nsizeof(ctx->context_id) is in fact 20.\n\nsizeof(&ctx->context_id) would in fact be 8 as you observe.", "attachment_id": null, "bug_id": 54468, "id": 164856, "time": "2013-01-23T20:46:14Z", "creator": "wrowe@apache.org", "creation_time": "2013-01-23T20:46:14Z", "is_private": false}, {"count": 8, "text": "(In reply to comment #7)\n> I think you are confused?  ctx->context_id is not a pointer but a byte array.\n\nEr...\n\n> See the declaration;\n> \n>     unsigned char   context_id[SHA_DIGEST_LENGTH];\n>\n> [...]\n>\n> sizeof(ctx->context_id) is in fact 20.\n> \n> sizeof(&ctx->context_id) would in fact be 8 as you observe.\n\nAah, I forgot that sizeof (specifically) can resolve that as a statically-sized array instead of returning the size of the pointer type. context_id is most definitely a pointer to \"unsigned char\" no matter what you say. sizeof is an aberration in this respect (and documented as such in Harrison & Steele).\n\nI still think you should use either SHA_DIGEST_LENGTH or even define yet another constant like TCN_DIGEST_LENGTH to be an alias of SHA_DIGEST_LENGTH. Using sizeof is misleading at best.", "bug_id": 54468, "attachment_id": null, "id": 164858, "time": "2013-01-24T00:56:12Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-01-24T00:56:12Z", "tags": [], "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 54468, "text": "(In reply to comment #8)\n> (In reply to comment #7)\n> > I think you are confused?  ctx->context_id is not a pointer but a byte array.\n\n> context_id is most definitely a pointer to \"unsigned char\" no matter what\n> you say.\n\nSorry, that's simply not true.  Although the C language automatically casts an array reference to a pointer where appropriate (and sometimes when not), they are semantically different.\n\n> sizeof is an aberration in this respect (and documented as such in\n> Harrison & Steele).\n\nIt is clearly not an aberration, but rather appropriate use of the sizeof operator (it is _not_ a function).  The only mistake I find in the patch is the unnecessary and misleading use of parentheses around the operand, which should only be used when the operand is a type, not a field; since sizeof is an operator, the parentheses are used as in a cast, and should not be used otherwise.\n\n> I still think you should use either SHA_DIGEST_LENGTH or even define yet\n> another constant like TCN_DIGEST_LENGTH to be an alias of SHA_DIGEST_LENGTH.\n> Using sizeof is misleading at best.\n\nAgain, I disagree; it is best to use sizeof referencing the target field here since if the field size changes to use a different constant, one does not need to hunt down the all the uses and change them; the revised size is picked up automatically by the sizeof operator.\n\n - Chuck", "id": 164859, "time": "2013-01-24T04:03:31Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2013-01-24T04:03:31Z", "tags": [], "is_private": false}, {"count": 10, "attachment_id": null, "creator": "wrowe@apache.org", "text": "Agreed with comment #9, the patch should be adjusted from sizeof(ctx->context_id)\nto read sizeof ctx->context_id, which might have avoided the 'promote to pointer'\nconfusion in the comment thread above.\n\nI would still want mladen's feedback on removing the never-used SSL_vhost_algo_id\nfunction he introduced in r300723 - I simply don't know tcnative versioning rules,\nso to be his review I've added him as an explicit cc.  See comment #5 above.\n\nIf anyone else can offer their thoughts on removing an exported-but-unused \nfunction, please share.  Thanks.", "id": 164867, "time": "2013-01-24T16:58:54Z", "bug_id": 54468, "creation_time": "2013-01-24T16:58:54Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 54468, "text": "SSL_vhost_algo_id can be removed since its unused.", "count": 11, "id": 164878, "time": "2013-01-25T06:14:59Z", "creator": "mturk@apache.org", "creation_time": "2013-01-25T06:14:59Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 54468, "text": "Patch applied, thanks.", "id": 164879, "time": "2013-01-25T06:30:33Z", "creator": "mturk@apache.org", "creation_time": "2013-01-25T06:30:33Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "text": "Thanks for the review Mladen.\n\nUsers tracking a version number for this bugfix should look at 1.1.26 or later.", "attachment_id": null, "bug_id": 54468, "id": 164880, "time": "2013-01-25T07:04:26Z", "creator": "wrowe@apache.org", "creation_time": "2013-01-25T07:04:26Z", "is_private": false}]
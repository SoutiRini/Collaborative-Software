[{"count": 0, "attachment_id": null, "bug_id": 6279, "text": "This ought to be easy to reproduce...if you go to a page secured by form-based \nauthentication in a webapp under catalina, you are displayed the login form. \nLog in, you see the page you asked for. Now click 'back' in the browser. You \nget the login form again. Resubmit the form.\n\nYou will end up at a tomcat 404 error page, explaining that the \nresource /some/path/to/j_security_check does not exist.\n\nIts not that unusual a thing for users to do, it seems; three out of four \ntesters spotted it in our site without being told to look for it.\n\nThe problem appears to be in \norg.apache.catalina.authenticator.FormAuthenticator.java . This /does/ get \ninvoked if the request is for j_security_check, by this code in \nAuthenticatorBase:\n\n if (requestURI.startsWith(contextPath) &&\n            requestURI.endsWith(Constants.FORM_ACTION)) {\n            if (!authenticate(hrequest, hresponse, config)) {\n ...etc\n\nHowever as soon as the code enters FormAuthenticator.authenticate it checks for \na non-null principal, and if it finds one, it returns immediately. Because \nthere is no check here that the uri requested matches j_security_check, the \nuser is taken directly to j_security_check, instead of reauthenticating or \nsending the user to the URL saved in the session.\n\nThe spec is silent on this situation. I would guess that if someone resubmits \nthey want to re-authenticate, potentially as someone else. The code could be \nfixed at the test in AuthenticatorBase, but this may have side effects if \nj_security_check is requested when using other forms of authenticator. It seems \nbest to patch FormAuthenticator.java, like so (changes marked 'BE'):\n\n    public boolean authenticate(HttpRequest request,\n                                HttpResponse response,\n                                LoginConfig config)\n        throws IOException {\n\n        // References to objects we will need later\n        HttpServletRequest hreq =\n          (HttpServletRequest) request.getRequest();\n        HttpServletResponse hres =\n          (HttpServletResponse) response.getResponse();\n        Session session = null;\n\n        // BE: moved three declarations and their comments to top\n\n        // Acquire references to objects we will need to evaluate\n        String contextPath = hreq.getContextPath();\n        String requestURI = hreq.getRequestURI();\n\n        // Is this the action request from the login page?\n        boolean loginAction =\n            requestURI.startsWith(contextPath) &&\n            requestURI.endsWith(Constants.FORM_ACTION);\n\n        // Have we already authenticated someone?\n        Principal principal = hreq.getUserPrincipal();\n\n        // BE: added check for loginAction\n        if (principal != null && !loginAction) {\n            if (debug >= 1)\n                log(\"Already authenticated '\" +\n                    principal.getName() + \"'\");\n            String ssoId = (String) request.getNote(Constants.REQ_SSOID_NOTE);\n            if (ssoId != null)\n                associate(ssoId, getSession(request, true));\n            return (true);\n        }\n\n        // Have we authenticated this user before but have caching disabled?\n        // BE: added check for loginAction - would have had same problem\n        if (!cache && !loginAction) {\n            session = getSession(request, true);\n            if (debug >= 1)\n                log(\"Checking for reauthenticate in session \" + session);\n            String username =\n                (String) session.getNote(Constants.SESS_USERNAME_NOTE);\n            String password =\n                (String) session.getNote(Constants.SESS_PASSWORD_NOTE);\n            if ((username != null) && (password != null)) {\n                if (debug >= 1)\n                    log(\"Reauthenticating username '\" + username + \"'\");\n                principal =\n                    context.getRealm().authenticate(username, password);\n                if (principal != null) {\n                    session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);\n                    register(request, response, principal,\n                             Constants.FORM_METHOD,\n                             username, password);\n                    return (true);\n                }\n                if (debug >= 1)\n                    log(\"Reauthentication failed, proceed normally\");\n            }\n        }\n\n        // Is this the re-submit of the original request URI after successful\n        // authentication?  If so, forward the *original* request instead.\n        // BE: will still have a problem here if someone directly requested the\n        // j_security_check page! Should really send an error response for\n        // that case.\n        if (matchRequest(request)) {\n            session = getSession(request, true);\n            if (debug >= 1)\n                log(\"Restore request from session '\" + session.getId() + \"'\");\n            principal = (Principal)\n                session.getNote(Constants.FORM_PRINCIPAL_NOTE);\n            register(request, response, principal, Constants.FORM_METHOD,\n                     (String) session.getNote(Constants.SESS_USERNAME_NOTE),\n                     (String) session.getNote(Constants.SESS_PASSWORD_NOTE));\n            String ssoId = (String) request.getNote(Constants.REQ_SSOID_NOTE);\n            if (ssoId != null)\n                associate(ssoId, session);\n            if (restoreRequest(request, session)) {\n                if (debug >= 1)\n                    log(\"Proceed to restored request\");\n                return (true);\n            } else {\n                if (debug >= 1)\n                    log(\"Restore of original request failed\");\n                hres.sendError(HttpServletResponse.SC_BAD_REQUEST);\n                return (false);\n            }\n        }\n\n        // Acquire references to objects we will need to evaluate\n        // BE: moved two declarations to start of method\n        response.setContext(request.getContext());\n\n        // Is this a request for the login page itself?  Test here to avoid\n        // displaying it twice (from the user's perspective) -- once because\n        // of the \"save and redirect\" and once because of the \"restore and\n        // redirect\" performed below.\n        String loginURI = contextPath + config.getLoginPage();\n        if (requestURI.equals(loginURI)) {\n            if (debug >= 1)\n                log(\"Requesting login page normally\");\n            return (true);      // Display the login page in the usual manner\n        }\n\n        // Is this a request for the error page itself?  Test here to avoid\n        // an endless loop (back to the login page) if the error page is\n        // within the protected area of our security constraint\n        String errorURI = contextPath + config.getErrorPage();\n        if (requestURI.equals(errorURI)) {\n            if (debug >= 1)\n                log(\"Requesting error page normally\");\n            return (true);      // Display the error page in the usual manner\n        }\n\n        // BE - declaration of loginAction moved to start of method\n        // Is this the action request from the login page?\n        // No -- Save this request and redirect to the form login page\n        if (!loginAction) {\n            session = getSession(request, true);\n            if (debug >= 1)\n                log(\"Save request in session '\" + session.getId() + \"'\");\n            saveRequest(request, session);\n            if (debug >= 1)\n                log(\"Redirect to login page '\" + loginURI + \"'\");\n            hres.sendRedirect(hres.encodeRedirectURL(loginURI));\n            return (false);\n        }\n\n        // Yes -- Validate the specified credentials and redirect\n        // to the error page if they are not correct\n        Realm realm = context.getRealm();\n        String username = hreq.getParameter(Constants.FORM_USERNAME);\n        String password = hreq.getParameter(Constants.FORM_PASSWORD);\n        if (debug >= 1)\n            log(\"Authenticating username '\" + username + \"'\");\n        principal = realm.authenticate(username, password);\n        if (principal == null) {\n            if (debug >= 1)\n                log(\"Redirect to error page '\" + errorURI + \"'\");\n            hres.sendRedirect(hres.encodeRedirectURL(errorURI));\n            return (false);\n        }\n\n        // Save the authenticated Principal in our session\n        if (debug >= 1)\n            log(\"Authentication of '\" + username + \"' was successful\");\n        if (session == null)\n            session = getSession(request, true);\n        session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);\n\n        // If we are not caching, save the username and password as well\n        if (!cache) {\n            session.setNote(Constants.SESS_USERNAME_NOTE, username);\n            session.setNote(Constants.SESS_PASSWORD_NOTE, password);\n        }\n\n        // Redirect the user to the original request URI (which will cause\n        // the original request to be restored)\n        requestURI = savedRequestURL(session);\n        if (debug >= 1)\n            log(\"Redirecting to original '\" + requestURI + \"'\");\n        if (requestURI == null)\n            hres.sendError(HttpServletResponse.SC_BAD_REQUEST,\n                           sm.getString(\"authenticator.formlogin\"));\n        else\n            hres.sendRedirect(hres.encodeRedirectURL(requestURI));\n        return (false);\n\n    }\n\nLooks like this could be tidied up considerably to decrease the number of \nloginAction checks, but hopefully the changes above will resolve the problem.", "id": 10399, "time": "2002-02-06T17:21:41Z", "creator": "Brian.Ewins@btinternet.com", "creation_time": "2002-02-06T17:21:41Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "4.0.2 still exhibits this behavior.  our testing has uncovered this problem too.\n jetty seems to do it just fine.  going back and resubmitting against jetty just\nproceeds as we would expect as the new user.", "is_private": false, "id": 10730, "creator": "glynis@hjsoft.com", "time": "2002-02-14T22:09:27Z", "bug_id": 6279, "creation_time": "2002-02-14T22:09:27Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "This bug still happens with 4.1.3 Beta\n", "is_private": false, "id": 17245, "creator": "bob@jadn.com", "time": "2002-06-06T00:10:23Z", "bug_id": 6279, "creation_time": "2002-06-06T00:10:23Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "I was the original submitter. Some of what I said was misplaced. Even if the\ncode was changed as I describe to allow users to log in again, it wouldnt work.\nThis is because the request is still for j_security_check. The request would now\nfail with an SC_BAD_REQUEST - exactly as you would get if you bookmarked the\nlogin page.\n\nThat issue - that the user has actually managed to log in, but we dont know what\npage to take them to - can not be solved portably across servlet engines under\nthe spec. Currently I get round it on tomcat by trapping the 400 error and\ntaking the user to an appropriate page, because there are few other places where\n400 errors are thrown (in the Certificate auth and WebDav code). When JSR 154\n(servlet 2.4) goes to public review (later this month, hopefully) I'm going to\nrequest that a specific exception is thrown in this case, to provide a portable\nway to trap the error.\n\n****WARNING****\n\nA further issue with the fix I posted is that the user changes within the same\nsession. This is a SECURITY HOLE. Details from one user may leak to a second\nuser through reuse of the session. The session must be closed and a new session\nopened if the user logs in with new credentials. ", "is_private": false, "id": 17303, "creation_time": "2002-06-06T09:37:46Z", "time": "2002-06-06T09:37:46Z", "creator": "Brian.Ewins@btinternet.com", "bug_id": 6279, "attachment_id": null}, {"count": 4, "tags": [], "creator": "Brian.Ewins@btinternet.com", "is_private": false, "text": "Created attachment 2181\ndiagram showing flowchart of problem", "id": 18558, "time": "2002-06-25T16:23:44Z", "bug_id": 6279, "creation_time": "2002-06-25T16:23:44Z", "attachment_id": 2181}, {"count": 5, "attachment_id": null, "bug_id": 6279, "text": "One reasonable solution to the problem is:\n\nPROBLEM:\n\"The request would now fail with an SC_BAD_REQUEST - exactly as you would get \nif you bookmarked the login page.\"\n\nSOLUTION: (in authenticate() of FormAuthenticator.java)\n        if (requestURI == null) requestURI =contextPath;  //try to default to \nwelcome page(s)", "id": 19561, "time": "2002-07-15T15:39:34Z", "creator": "d_q_wang@yahoo.com", "creation_time": "2002-07-15T15:39:34Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "bergeron@caradas.com", "is_private": false, "text": "This bug happens in version 4.0.3", "id": 21367, "time": "2002-08-20T12:42:59Z", "bug_id": 6279, "creation_time": "2002-08-20T12:42:59Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "jyri@eng.sun.com", "is_private": false, "text": "*** Bug 12549 has been marked as a duplicate of this bug. ***", "id": 25461, "time": "2002-11-01T03:00:49Z", "bug_id": 6279, "creation_time": "2002-11-01T03:00:49Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "rhoegg@isisnetworks.net", "attachment_id": null, "text": "This bug is still around in 4.1.12.\n\nBrian: The code you posted and the modification you posted afterward are\ndifficult to understand.  It is usually standard practice to post patches in\nunified diff format (diff -u).\n\nMy understanding of the problem is that:\n1. We want FormAuthenticator to mirror BasicAuthenticator as closely as possible\nfrom the user's perspective.\n2. In BASIC authentication, when a user successfully authenticates and presses\nthe \"back\" button, the user is returned to the page she was on before attempting\nto access a secured resource.  If the attempt to access the secured resource is\nthe very first page visited after opening a browser, then the \"Back\" button is\nunavailable.\n\nNumber 2 is not reproducible using FormAuthenticator because an extra request is\ngenerated (the request for the login page).  Therefore we must decide on a\ndesired behavior for this scenario.  Any takers?", "id": 25462, "time": "2002-11-01T03:19:13Z", "bug_id": 6279, "creation_time": "2002-11-01T03:19:13Z", "is_private": false}, {"count": 9, "tags": [], "creator": "Brian.Ewins@btinternet.com", "is_private": false, "text": ">This bug is still around in 4.1.12.\n\nAnd its still not cleared up in the servlet 2.4 spec. I posted a comment on the\nspec during the public review stage, and got this reply from Yutaka Yoshida:\n\n>>Thank you for the feedback and I'm sorry for being so late\n>>to get back to you. Issues you mentioned were actually\n>>brought up in the expert group, and we'll try to put them\n>>in to 2.4.\n>>\n>>again, thank you very much for the 'Suggested Resolution'\n\n(The resolutions I suggested were that either a specific exception would be\nthrown in this case, or that an additional standard parameter could be added to\nthe login forms to specify where the user should be taken when this bug occurs.\nAnother simple idea which involves no spec change is presented at the end of\nthis comment) Unfortunately, no change made it into the final draft.\n\n>It is usually standard practice to post patches in unified diff format (diff -u).\n\nI know - I really need to get into the habit of grabbing source and updating it\ninstead of just looking at cvs.apache.org :)\n\n>My understanding of the problem is that:\n>1. We want FormAuthenticator to mirror BasicAuthenticator as closely as \n> possible from the user's perspective.\n\nThat's what I'd like. One open concern is whether sessions should invalidate or\nnot when you provide new credentials. This isn't the case (to the best of my\nknowledge) with either BASIC or DIGEST auth.\n\n>2. In BASIC authentication, when a user successfully authenticates and presses\n>the \"back\" button, the user is returned to the page she was on before\n>attempting to access a secured resource.  If the attempt to access the secured\n>resource is the very first page visited after opening a browser, then the\n>\"Back\" button is unavailable.\n>\n>Number 2 is not reproducible using FormAuthenticator because an extra request\n>is generated (the request for the login page).  Therefore we must decide on \n>a desired behavior for this scenario.  Any takers?\"\n\nMy point is that you cant stop the user pressing the back button and seeing the\nlogin form. RFC 2616, Section 13.13 \"History Lists\":\n\n   History mechanisms and caches are different. In particular history\n   mechanisms SHOULD NOT try to show a semantically transparent view\n   of the current state of a resource. Rather, a history mechanism is\n   meant to show exactly what the user saw at the time when the \n   resource was retrieved.\n\nIn other words, showing the login form when you click back is /exactly/ what\nbrowsers are meant to do, and no amount of no-cache headers will help if the\nbrowser follows the spec.\n\nSo, we have to deal with what happens when the user misuses the login form. One\nthing that would help is if TC stopped using 'redirect' to take users to the\nlogin form, and used a 'forward' instead! (this isn't a spec violation). This\nwould mean the URL of the login form would /never/ appear in the browser. Users\ncould bookmark the login page if they wanted, but since the bookmark would be\nfor http://some/webapp/secure/resource instead of for\nhttp://some/webapp/login/page it wouldnt matter. \n\nThe change there is much smaller than the stuff I suggested before - just to\nchange the line:\n            hres.sendRedirect(hres.encodeRedirectURL(loginURI));\nto something like \n            hreq.getRequestDispatcher(loginURI).forward(hreq,hres);\n\nThe only remaining problem would be what happens when the user clicks the back\nbutton to see a login form. If we know we have used a forward instead of a\nredirect, it becomes possible for TC to guess the page they were trying to log\nin to from the REFERER header (since this will be the URL of the page that\ncaused the login screen to appear in the first place). Some users will be\nblocking referer headers, but its better than the errors TC throws out right now.\n\nThe final issue to be resolved would be what to do with a session if someone\nresubmits login credentials. My gut feeling is that if your principal changes\nyour session should be invalidated first, but this could be made an option in\nserver.xml. There is no spec to guide this issue.", "id": 25469, "time": "2002-11-01T10:47:53Z", "bug_id": 6279, "creation_time": "2002-11-01T10:47:53Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "Brian.Ewins@btinternet.com", "attachment_id": null, "text": "(sigh) Its never that simple is it...\n\nI grabbed the 4.1 code to make the last change I described and submit the patch.\nThe problem is that of course the internals of Catalina arent real servlet\nrequests so you can't forward them. \n\nThere is code in FormAuthenticator which does do the equivalent of a forward(),\nby copying values into the request and returning true (so that the next handler\nis invoked). Trying something like this breaks the contract of authenticate(),\nand will cause more problems because the caller of authenticate()\n(AuthenticatorBase()) appears to call authenticate() twice. I don't feel\ncomfortable with how intimate AuthenticatorBase needs to be with how\nFormAuthenticator works if I fix this; I'll try to put a working patch together\nat the weekend - a fix for this problem would be a good reason for us to upgrade\nto 4.1. If anyone has any comments on the suggested fix I'd appreciate them! ", "id": 25483, "time": "2002-11-01T15:41:39Z", "bug_id": 6279, "creation_time": "2002-11-01T15:41:39Z", "is_private": false}, {"count": 11, "tags": [], "creator": "rhoegg@isisnetworks.net", "attachment_id": null, "is_private": false, "id": 25487, "time": "2002-11-01T16:51:21Z", "bug_id": 6279, "creation_time": "2002-11-01T16:51:21Z", "text": ">In other words, showing the login form when you click back is /exactly/ what\n>browsers are meant to do, and no amount of no-cache headers will help if the\n>browser follows the spec.\n>\n>So, we have to deal with what happens when the user misuses the login form.\n\nI agree, and I think this means that we /can not/ replicate Basic\nAuthentication's behavior here.  We have to accept that Form Authentication\ndiffers in that it involves an extra page load on the client, thereby adding a\npage to the history.  This happens whether we use a redirect or a forward.\n\nThat said, I like the idea of giving the user the login form instead of the\nrequested page without a redirect.  Users can not bookmark a Basic\nAuthentication login form, they must bookmark secured resources.  This makes\nbookmarking work the same across Authenticator implementations.  Also, I think\nthe URI in the client for both items in the history will be the URI of the\nsecured resource.  So, pending some actual code to verify this, this might take\ncare of the back button issue as well.\n\nOn the session invalidation stuff, I think you're on to something.  You should\nprobably put it in another bug report as it can be addressed independently."}, {"count": 12, "tags": [], "creator": "rhoegg@isisnetworks.net", "text": "After looking through FormAuthenticator again I realized an error in my earlier\ncomments.  When a user bookmarks the login page or presses back to go one\nprevious in her history, the URI referenced is the one in the <form-login-page>\nelement.\n\nTo have the behavior I mentioned earlier we would need to change the redirect in\nthe authenticate() class to a RequestDispatcher.include().", "id": 25500, "time": "2002-11-01T23:59:37Z", "bug_id": 6279, "creation_time": "2002-11-01T23:59:37Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "Brian.Ewins@btinternet.com", "is_private": false, "text": "Created attachment 3797\nproposed fix", "id": 26059, "time": "2002-11-11T12:48:19Z", "bug_id": 6279, "creation_time": "2002-11-11T12:48:19Z", "attachment_id": 3797}, {"count": 14, "tags": [], "creator": "Brian.Ewins@btinternet.com", "is_private": false, "text": "Supplied a patch, tested with IE6, Mozilla and the admin webapp in the released\nTC 4.1.\n\nThe behaviour with this patch is that when you attempt to access a secure\nresource, you are forwarded to the login page. The login URL does not appear\nin the browser. Logging in with correct credentials works, clicking back \ndoes not bring up the login screen (to me this looks contrary to the \nspecced behaviour for user-agents, but it works).\n\nLogging in with incorrect credentials brings up the error page (the URL /is/\nshown here), clicking back takes you to the login page, if you correct your\ncredentials logging in works.\n\nThis means that -\n- bookmarking login pages is no longer a problem as the login URL is never displayed\n- clicking back to get to login pages never causes a problem - you never get to\nsee it unless its useful.\n\nSeems like a winner?", "id": 26060, "time": "2002-11-11T13:00:23Z", "bug_id": 6279, "creation_time": "2002-11-11T13:00:23Z", "attachment_id": null}, {"count": 15, "tags": [], "creator": "cpjunk@yeroc.ca", "attachment_id": null, "text": "That sounds great to me!", "id": 26217, "time": "2002-11-13T18:53:01Z", "bug_id": 6279, "creation_time": "2002-11-13T18:53:01Z", "is_private": false}, {"count": 16, "tags": [], "text": "More thoughts... caveat emptor: if the request is forwarded to the login page\neg with this patch, then it generally becomes impossible to use a static \nresource for that page. This is because relative URLs in the page for images \netc, as seen by the browser, will be relative to the secured resource, not\nthe login page. With static html this is awkward to fix.\n\nObviously this might cause some breakage, but the old behaviour is broken for\neveryone. This sprang to mind 'cos I was wondering if I could make it easier to\nget my patch accepted if I made it a customizable feature, as described in\nhttp://www.mail-archive.com/tomcat-dev@jakarta.apache.org/msg36852.html ? That\nway the old behaviour could be preserved for those who want it. I don't mind\nwhich is the default.\n\nBill Barker - if you're reading this, I'd be interested in seeing your \npatch (not in cvs yet?) so I can produce one that works the same way.", "is_private": false, "id": 26444, "creation_time": "2002-11-17T18:22:52Z", "time": "2002-11-17T18:22:52Z", "creator": "Brian.Ewins@btinternet.com", "bug_id": 6279, "attachment_id": null}, {"count": 17, "tags": [], "text": "Created attachment 4417\npatch making fix optional plus documentation of Authenticator valves", "is_private": false, "id": 29351, "creation_time": "2003-01-14T14:50:25Z", "time": "2003-01-14T14:50:25Z", "creator": "Brian.Ewins@btinternet.com", "bug_id": 6279, "attachment_id": 4417}, {"count": 18, "attachment_id": null, "bug_id": 6279, "is_private": false, "id": 29352, "time": "2003-01-14T14:58:58Z", "creator": "Brian.Ewins@btinternet.com", "creation_time": "2003-01-14T14:58:58Z", "tags": [], "text": "In the forlorn hope that this fix will get incorporated ;) , this latest patch\nmakes the forwarding behaviour that fixes the bug optional. You can demonstrate\nthis by adding this to the examples context in server.xml:\n<Valve className=\"org.apache.catalina.authenticator.FormAuthenticator\"\n\t    enableForwarding=\"true\" debug=\"10\"/>\n\nAnd trying the security sample,\nhttp://localhost:8080/examples/jsp/security/protected\n\nNB This patch doesn't change the default (broken) behaviour of tomcat, so\nhopefully that removes previous objections to the use of forwarding for the\nlogin page.\n\nIn order to sweeten the pill, the patch also documents this option and Bill\nBarker's proxyCaching fix, along with the other authentication valve options.\n\nC'mon guys you know you want it..."}, {"count": 19, "tags": [], "creator": "Brian.Ewins@btinternet.com", "is_private": false, "text": "Since people have emailed me directly several times to ask what happened to this\nbug, I did a bit of digging. There has been some recent discussion on tomcat-dev:\n\nThe 'authenticated but not authorized' case is discussed again here:\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listId=46&msgNo=58450\n\nAn alternate patch for the problem from Jeff Tulley, which also redirects to\nerror pages:\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listId=46&msgNo=58547\nRemy said of this one: \"I won't commit this to TC 4.1.x at this time; I'll give\nit a try in TC 5, and see how it works.\"\n\nRemy gives a good explanation of whats potentially wrong with the patches\nattached to this bug here:\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=46&msgId=716594\n\nHowever, Jeff's patch has been applied in TC5 - forwarding is now the default:\nhttp://cvs.apache.org/viewcvs.cgi/jakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/authenticator/FormAuthenticator.java.diff?r1=1.2&r2=1.3&diff_format=h\n\nSince the bug is fixed in TC5, and Remy has already indicated that it will not\nbe going into 4.1.x, I am closing this bug report as WONTFIX. I know other bugs\nwere marked as duplicates of this, so if anyone else on the cc list strenuously\nobjects please feel free to reopen it. ", "id": 42268, "time": "2003-08-06T15:39:15Z", "bug_id": 6279, "creation_time": "2003-08-06T15:39:15Z", "attachment_id": null}]
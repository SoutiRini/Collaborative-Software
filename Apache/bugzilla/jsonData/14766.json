[{"count": 0, "tags": [], "creator": "ja@it-practice.dk", "attachment_id": null, "is_private": false, "id": 26785, "time": "2002-11-22T13:18:33Z", "bug_id": 14766, "creation_time": "2002-11-22T13:18:33Z", "text": "I think it would be nice to have a redirecct valve - like the one provided below\n;-). \n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.catalina.HttpRequest;\nimport org.apache.catalina.HttpResponse;\nimport org.apache.catalina.Logger;\nimport org.apache.catalina.Request;\nimport org.apache.catalina.Response;\nimport org.apache.catalina.Valve;\nimport org.apache.catalina.ValveContext;\nimport org.apache.catalina.valves.ValveBase;\nimport org.apache.catalina.util.StringManager;\n\nimport org.apache.regexp.RE;\nimport org.apache.regexp.RESyntaxException;\n\n/**\n * Implementation of a Valve that performs redirection based on comparing the\n * appropriate request property (selected based on which subclass you choose\n * to configure into your Container's pipeline) against a set of regular\n * expressions configured for this Valve.\n * <p>\n * This valve is configured by setting the <code>pattern</code> and\n * <code>target</code> properties. The  <code>pattern</code> is a\n * expressions (in the syntax supported by the jakarta-regexp library) to\n * which the appropriate request property will be compared. This Valve may \n * be attached to any Container.\n *\n * @author \tJens Andersen (ja at it-practice.dk), Last edited by $Author$\n * @version\t$Revision$\n */\npublic class RedirectValve extends ValveBase implements Valve {\n\t//protected static StringManager sm =\nStringManager.getManager(\"dk.itp.catalina.valves\");\n\tprotected static StringManager sm =\nStringManager.getManager(\"org.apache.catalina.valves\");\n\t/**\n\t * Info string containing information about the implementation.\n\t */\n\tprivate static final String info = \"dk.itp.catalina.valves.RedirectValve/1.0\";\n\n\t/**\n\t * The pattern compiled which makes it useable for the PatterMatcher\n\t */\n\tprivate RE re;\t\n\n\n\t/**\n\t * The target represents the URI which the client is redirected to \n\t * if a match succed\n\t */\n\tprivate String target;\n\n\t\n\tprivate boolean debug = true;\n\t\n\t/**\n\t * Constructor for RedirectValve.\n\t */\n\tpublic RedirectValve() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Set the pattern which must be tested against\n\t * @param pattern - the pattern conforming to the Perl 5.0 syntax\n\t * @exception IllegalArgumentException if the pattern has invalid syntax\n\t */\n\tpublic void setPattern(String pattern){\n\t\ttry{\n\t\t\tre = new RE(pattern);\t\t\t\t\t\t\n\t\t}catch(RESyntaxException rese){\n\t\t\tthrow new IllegalArgumentException(sm.getString(\"redirectValve.syntax\",\npattern));\n\t\t}\n\t}\n\t\n\t/**\n\t * Set the target which the client request must be redirected to if the \n\t * incomming request and the pattern matches perfectly.\n\t * @param target - the redirect URI\n\t */\n\tpublic void setTarget(String target){\n\t\tthis.target = target;\t\t\t\t\t\n\t}\n    /**\n     * Extract the desired request property, and pass it (along with the\n     * specified request and response objects) to the protected\n     * <code>process()</code> method to perform the actual filtering.\n     * This method must be implemented by a concrete subclass.\n     *\n     * @param request The servlet request to be processed\n     * @param response The servlet response to be created\n     * @param context The valve context used to invoke the next valve\n     *  in the current processing pipeline\n     *\n     * @exception IOException if an input/output error occurs\n     * @exception ServletException if a servlet error occurs\n     */\n\tpublic void invoke(Request request, Response response, ValveContext context)\nthrows IOException, ServletException {\n        if(!(request instanceof HttpRequest) || !(response instanceof\nHttpResponse) || re == null){\n            context.invokeNext(request, response);\n            return;\n        }\n        \n        HttpRequest httprequest = (HttpRequest)request;\n        HttpResponse httpresponse = (HttpResponse)response;\n        \n        HttpServletRequest hreq = (HttpServletRequest)httprequest.getRequest();\n        HttpServletResponse hres = (HttpServletResponse)httpresponse.getResponse();\n        \n\t\tif(re.match(target)){\n\t\t\thres.sendRedirect(hres.encodeURL(target));\n\t\t\treturn;\n\t\t}else{\n\t\t\tcontext.invokeNext(request, response);\n            return;\n\t\t}\n\t}\n\t/**\n\t * Method which returns information about the valve\n\t * @see org.apache.catalina.Valve#getInfo()\n\t */\n\tpublic String getInfo() {\n        return info;\n\t}\n   \n   \tpublic String toString(){\n        StringBuffer sb = new StringBuffer(\"RedirectValve[\");\n        if(container != null)\n            sb.append(container.getName());\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}//RedirectValve"}, {"count": 1, "tags": [], "text": "The patch is incomplete and redirection to single URI is too limiting. To be useful, the feature needs to look more like mod_rewrite.", "attachment_id": null, "bug_id": 14766, "id": 142712, "time": "2010-12-14T18:32:35Z", "creator": "markt@apache.org", "creation_time": "2010-12-14T18:32:35Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 37182, "attachment_id": null, "text": "If exception implements toString() -method and it fails (e.g. \nNullPointerException), it causes Log4J to throw exception back to calling \napplication when such exception is tried to be traced.", "id": 81464, "time": "2005-10-20T14:47:07Z", "creator": "mr.kari.ikonen@gmail.com", "creation_time": "2005-10-20T14:47:07Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 37182, "attachment_id": null, "text": "Can you provide some sample-code?", "id": 95694, "time": "2006-11-11T13:36:42Z", "creator": "kay.abendroth@raxion.net", "creation_time": "2006-11-11T13:36:42Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 37182, "attachment_id": null, "text": "Well, issue doesn't really need any specific test code, but....\n\n--------------------------------\npackage org.kari.test;\n\nimport org.apache.log4j.BasicConfigurator;\nimport org.apache.log4j.Logger;\n\npublic class NullTest {\n\tprivate static final Logger LOG = Logger.getLogger(\"test\");  \n\n\tpublic static class Null {\n\t\tprivate String mNull;\n\t\t@Override\n\t\tpublic String toString()\n\t\t{\n\t\t\treturn mNull.toString();\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] pArgs) {\n        BasicConfigurator.configure();\n\t\tNull npe = new Null();\n\t\ttry {\n\t\t\tLOG.fatal(npe);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"NPE OCCURRED IN LOG4J!\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n--------------------------------\nOUTPUT:\n---------------------\nNPE OCCURRED IN LOG4J!\njava.lang.NullPointerException\n\tat org.kari.test.NullTest$Null.toString(NullTest.java:14)\n\tat org.apache.log4j.or.DefaultRenderer.doRender(DefaultRenderer.java:26)\n\tat org.apache.log4j.or.RendererMap.findAndRender(RendererMap.java:70)\n\tat \norg.apache.log4j.spi.LoggingEvent.getRenderedMessage(LoggingEvent.java:288)\n\tat \norg.apache.log4j.helpers.PatternParser$BasicPatternConverter.convert(PatternParser.java:395)\n\tat \norg.apache.log4j.helpers.PatternConverter.format(PatternConverter.java:56)\n\tat org.apache.log4j.PatternLayout.format(PatternLayout.java:495)\n\tat org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:292)\n\tat org.apache.log4j.WriterAppender.append(WriterAppender.java:150)\n\tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n\tat \norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n\tat org.apache.log4j.Category.callAppenders(Category.java:194)\n\tat org.apache.log4j.Category.forcedLog(Category.java:379)\n\tat org.apache.log4j.Category.fatal(Category.java:353)\n\tat org.kari.test.NullTest.main(NullTest.java:22)\n", "id": 96291, "time": "2006-11-28T10:42:09Z", "creator": "mr.kari.ikonen@gmail.com", "creation_time": "2006-11-28T10:42:09Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 37182, "attachment_id": null, "text": "\n  public void testToStringFail() {\n    Object o = new Object() {\n      public String toString() { throw new NullPointerException(); }\n    };\n    logger.debug(o);\n  }\n\n\nThis currently fails with:\n\njava.lang.NullPointerException\n\tat org.apache.log4j.CategoryTest$1.toString(CategoryTest.java:158)\n\tat org.apache.log4j.or.DefaultRenderer.doRender(DefaultRenderer.java:34)\n\tat org.apache.log4j.or.RendererMap.findAndRender(RendererMap.java:107)\n\tat org.apache.log4j.spi.LoggingEvent.getRenderedMessage(LoggingEvent.java:650)\n\tat\norg.apache.log4j.pattern.MessagePatternConverter.format(MessagePatternConverter.java:58)\n\tat\norg.apache.log4j.pattern.BridgePatternConverter.format(BridgePatternConverter.java:132)\n\tat org.apache.log4j.PatternLayout.format(PatternLayout.java:531)\n\tat org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:360)\n\tat org.apache.log4j.WriterAppender.append(WriterAppender.java:175)\n\tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:286)\n\tat\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:67)\n\tat org.apache.log4j.Category.callAppenders(Category.java:218)\n\tat org.apache.log4j.Category.forcedLog(Category.java:588)\n\tat org.apache.log4j.Category.debug(Category.java:284)\n\tat org.apache.log4j.CategoryTest.testToStringFail(CategoryTest.java:160)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\nWhat is the contract for Layout.format()?", "id": 98597, "time": "2007-01-26T20:02:27Z", "creator": "genman@noderunner.net", "creation_time": "2007-01-26T20:02:27Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 37182, "attachment_id": null, "text": "This is an issue with those classes which implement ObjectRenderer.  The DefaultRenderer (which is called here) just do a\n\n  return o.toString();\n\nand it would be reasonable to return some dummy value if o was null.  Just return \"null\" or null perhaps?\n\nAttributesRenderer and ThreadGroupRenderer do an instanceof, UTObjectRenderer just returns a parmeters, so this should be the only location which need patching.", "id": 118249, "time": "2008-07-03T13:09:05Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-07-03T13:09:05Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 37182, "text": "Created attachment 22346\nnull check before calling o.toString()", "id": 119259, "time": "2008-08-02T10:21:34Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T10:21:34Z", "is_private": false, "attachment_id": 22346}, {"count": 6, "attachment_id": null, "bug_id": 37182, "text": "The first patch would be appropriate if the problem were:\n\nlogger.info(null);\n\nHowever, that isn't the problem reported and control would not reach DefaultRenderer since LoggingEvent.getRenderedMessage would short circuit it.  \n\nThe problem is passing any object whose toString() method may result in either a RuntimeException or Error.  By far the most common message parameter is a String, but that is handled by a special case check in LoggingEvent.getRenderedMessage.  Adding the try/catch block in DefaultRenderer will add some overhead, but only in the uncommon case where the message isn't a String.  It isn't obvious what should be returned in that case, I have chosen to return the ex.toString() of the exception.  If you want something else, you could provide your own renderer (or make sure that your message object does not throw an exception).\n\nCommitted rev 683102.", "id": 119465, "time": "2008-08-05T21:17:35Z", "creator": "carnold@apache.org", "creation_time": "2008-08-05T21:17:35Z", "tags": [], "is_private": false}]
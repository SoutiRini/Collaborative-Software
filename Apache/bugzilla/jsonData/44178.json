[{"count": 0, "tags": [], "bug_id": 44178, "attachment_id": null, "text": "In org.apache.batik.util.CleanerThread we see:\n\n    public static ReferenceQueue getReferenceQueue() {\n        if ( queue == null ) {\n            synchronized (CleanerThread.class) {\n                queue = new ReferenceQueue();\n                thread = new CleanerThread();\n            }\n        }\n        return queue;\n    }\n\nThis method is not thread safe due to a race condition. The test for \"if (queue\n== null)\" needs to be inside the synchronized block, not outside of it. As\nwritten, it's possible for the initialization code to be executed more than once.\n\nFix: make the entire method synchronized, or add an additional test for \"if\n(queue == null)\" within the synchronized block (but see\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html for why\nthe variable needs to remain volatile).", "id": 112592, "time": "2008-01-07T09:33:12Z", "creator": "archie@dellroad.org", "creation_time": "2008-01-07T09:33:12Z", "is_private": false}, {"count": 1, "tags": [], "creator": "nejoom@elements.ac", "is_private": false, "text": "Synchronizing on the getReferenceQueue() method is IMHO correct.\n\nAlso changing line 104 from:\n                    ref = queue.remove();\n\nto:\n                    ref = getReferenceQueue().remove();\n\nSolves NullPointerExceptions being thrown in eclipse & tomcat after reloading the context.\n\nBecause this error is thrown in a while(true) { //clean references } loop, it overflows the log files.\n\nPlease fix.", "id": 129427, "time": "2009-08-03T23:53:25Z", "bug_id": 44178, "creation_time": "2009-08-03T23:53:25Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 44178, "attachment_id": null, "text": "Increasing importance given the potential race condition.\n\nThe fix seems fairly easy, should I try to create a patch based on the suggestions from the previous comments? (I just didn't yet because I'm not that confident on my Java foo on this particular scope...)", "id": 129432, "time": "2009-08-04T03:20:33Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-08-04T03:20:33Z", "is_private": false}, {"count": 3, "tags": [], "creator": "volker@pidoco.com", "is_private": false, "text": "We ran into the NullPointer issue on our live server this weekend, where batik wrote some 100GB of exceptions into our log until the disk was full and we had a downtime of half an hour to figure this out. Running a SaaS product, this is what we try to avoid...\n\nSince it seems quite easy to fix this, is there any chance of a next release including this bug fix? Or would you recommend to build batik on my own to include the bug fix? Is there any documentation on how to do this?\n\nThanks", "id": 147719, "time": "2011-07-04T09:48:47Z", "bug_id": 44178, "creation_time": "2011-07-04T09:48:47Z", "attachment_id": null}]
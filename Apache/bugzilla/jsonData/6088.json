[{"count": 0, "tags": [], "bug_id": 6088, "text": "I have a page with many custom tag instances (about fifty -- they are Struts tags for \ni18n) that \"bombs\" whenever I execute it under Tomcat 3.3 (but also under Tomcat \n3.3.1-dev).\n\nNotes:\n\n1) Tomcat 3.2.4 does not have this problem. I didn't test it with Tomcat 4.\n2) If I take out some of the tags (which ones is not important) the page works again.\n\nSource code is available on request, error dump is included here.\n\nMax\n\nThe error I get is the following:\n\nError: 500\n\nLocation: /ceveas/update/userform.jspInternal Servlet Error:\n \njava.lang.VerifyError: (class: update/userform_1, method: _jspService signature: \n(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V) \nIllegal target of jump or branch\n        at java.lang.Class.newInstance0(Native Method)\n        at java.lang.Class.newInstance(Class.java:237)\n        at org.apache.tomcat.facade.ServletHandler.getServlet(Unknown Source)\n        at org.apache.tomcat.facade.ServletHandler.preInit(Unknown Source)\n        at org.apache.tomcat.facade.ServletHandler.init(Unknown Source)\n        at org.apache.tomcat.facade.ServletHandler.service(Unknown Source)\n        at org.apache.tomcat.facade.RequestDispatcherImpl.doForward(Unknown Source)\n        at org.apache.tomcat.facade.RequestDispatcherImpl.forward(Unknown Source)\n        at \norg.apache.struts.action.ActionServlet.processActionForward(ActionServlet.java:1759)\n        at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1596)\n        at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:492)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java)\n        at org.apache.tomcat.facade.ServletHandler.doService(Unknown Source)\n        at org.apache.tomcat.core.Handler.invoke(Unknown Source)\n        at org.apache.tomcat.core.Handler.service(Unknown Source)\n        at org.apache.tomcat.facade.ServletHandler.service(Unknown Source)\n        at org.apache.tomcat.core.ContextManager.internalService(Unknown Source)\n        at org.apache.tomcat.core.ContextManager.service(Unknown Source)\n        at \norg.apache.tomcat.modules.server.Http10Interceptor.processConnection(Unknown Source)\n        at org.apache.tomcat.util.net.TcpWorkerThread.runIt(Unknown Source)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(Unknown \nSource)\n        at java.lang.Thread.run(Thread.java:484)", "id": 10008, "time": "2002-01-29T08:38:57Z", "creator": "maxmars@libero.it", "creation_time": "2002-01-29T08:38:57Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "william.barker@wilshire.com", "text": "I have several pages with twice as many tags on them, so it can't be a tag \nlimit.  You could try setting largeFile=\"true\" on JspInterceptor (and re-\ncompiling the JSP pages).\n\nSince Tomcat doesn't generate byte-code, it is hard to see how this can be a \nTomcat bug.  The byte-code is generated by either javac or jikes.  You could \ntry using the other one in the javaCompiler attribute.", "id": 10094, "time": "2002-01-30T22:58:32Z", "bug_id": 6088, "creation_time": "2002-01-30T22:58:32Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "Larry.Isaacs@sas.com", "attachment_id": null, "is_private": false, "id": 10116, "time": "2002-01-31T14:11:58Z", "bug_id": 6088, "creation_time": "2002-01-31T14:11:58Z", "text": "This is the typical error that occurs when the class file for a JSP gets too\nbig, i.e. > 64K.  I have yet to identify exactly what can not exceed 64K\n(my guess is a \"{...}\" block), but it is a limit imposed by the JVM.  All\nJasper based JSPs will reach this limit at some point when lots of tags are\nused.  Tomcat 3.3 will hit the limit first because of some extra Tag pooling\nsupport that it has.  The only way around it is to reduce the size of the JSP's\nclass file by simplifying the page.  Most likely we will need to \"WONTFIX\" this\none when Tomcat 3.3.1 Final is released.\n\nYou are welcome to attach a *simple* webapp containing the offending page so\nwe can confirm there isn't some other problem."}, {"count": 3, "tags": [], "creator": "Larry.Isaacs@sas.com", "text": "Assuming this is due to a JSP servlet class file hitting the JVM limitation.", "id": 12028, "time": "2002-03-19T23:29:59Z", "bug_id": 6088, "creation_time": "2002-03-19T23:29:59Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 6088, "attachment_id": null, "is_private": false, "id": 12386, "time": "2002-03-27T14:38:29Z", "creator": "ken.horn@clara.co.uk", "creation_time": "2002-03-27T14:38:29Z", "text": "The 64k limit, afaicr, is the 2 byte offset for a method in the class file\nformat. ie no method can use more that 64k of byte codes. Hit this previously on\nJasper from 3.1"}, {"count": 5, "tags": [], "creator": "jeff@socialchange.net.au", "text": "FYI, a workaround for this was added to Jasper2:\n\n[4.1.4] Generator:\n        Fix the limitation on the number of tags which can be used within a\n        single page, which was cause by the 64K bytecode limit for a sigle\n        method. Now Jasper generates separate methods for tag bodies when lots\n        of tags are used.\n\nhttp://jakarta.apache.org/builds/jakarta-tomcat-4.0/release/v4.1.7-beta/RELEASE-NOTES", "id": 20103, "time": "2002-07-24T06:49:28Z", "bug_id": 6088, "creation_time": "2002-07-24T06:49:28Z", "is_private": false, "attachment_id": null}]
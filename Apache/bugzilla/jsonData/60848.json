[{"count": 0, "attachment_id": null, "bug_id": 60848, "text": "The following formula works fine in POI (using version 3.15):\n\n=SUMPRODUCT(X17:X1048576,--(O17:O1048576>=30))\n\nHowever, reversing the order of the args, it fails with \"Invalid arg type\nfor SUMPRODUCT: (org.apache.poi.ss.formula.eval.ErrorEval)\":\n\n=SUMPRODUCT(--(O17:O1048576>=30),X17:X1048576)\n\nEither way works fine in Excel.\n\nAlso described at https://lists.apache.org/list.html?dev@poi.apache.org:2017-03", "id": 197609, "time": "2017-03-12T18:33:59Z", "creator": "mewalig@gmail.com", "creation_time": "2017-03-12T18:33:59Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 197804, "time": "2017-03-19T20:20:48Z", "bug_id": 60848, "creation_time": "2017-03-19T20:20:48Z", "is_private": false, "text": "Do you have a sample file/sample code or unit-test that reproduces the problem? This would make it a lot easier for developers to reproduce and work on a fix."}, {"count": 2, "tags": [], "bug_id": 60848, "attachment_id": null, "text": "It's as simple as evaluating a sumproduct whose first arg starts with --.\n\n--- Sample files ---\n bad.xlsx: in A3, set formula to\n     =SUMPRODUCT(--(B5:B20))\n\n--- Test results ---\nRunning the sample code below, you will get:\n  java sampleApp good.xlsx\n    <prints \"No error\">\n  java sampleApp bad.xlsx\n    <prints \"Invalid arg type for SUMPRODUCT:(org.apache.poi.ss.formula.eval.ErrorEval)\">\n\n--- Sample code ---\n\n    private static final String FILE_NAME = \"test.xlsx\";\n\n    public static void main(String[] args) {\n        try {\n            FileInputStream excelFile = new FileInputStream(new File(FILE_NAME));\n            Workbook workbook = new XSSFWorkbook(excelFile);\n\n            // get the cell with the offending formula (cell A3 in sheet 0)\n            Cell c = workbook.getSheetAt(0).getRow(2).getCell(0);\n\n            FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();\n\n            evaluator.evaluateFormulaCell(c);\n\n            System.out.println(\"No error\");\n        } catch(Exception e) {\n            System.out.println(\"There was an error\");\n            System.out.println(e.getMessage());\n        }\n    }", "id": 197870, "time": "2017-03-21T15:29:30Z", "creator": "mewalig@gmail.com", "creation_time": "2017-03-21T15:29:30Z", "is_private": false}, {"count": 3, "tags": [], "text": "Created attachment 34860\nbad.xlsx\n\nbad.xlsx as described in prior comment. It has no contents other than one formula in cell A3: =SUMPRODUCT(--(B5:B20))", "attachment_id": 34860, "bug_id": 60848, "id": 197871, "time": "2017-03-21T15:31:07Z", "creator": "mewalig@gmail.com", "creation_time": "2017-03-21T15:31:07Z", "is_private": false}, {"count": 4, "tags": [], "text": "Please ignore the reference to \"good.xlsx\" in comment 2. It was meant to be removed before it was sent.", "is_private": false, "id": 197872, "creation_time": "2017-03-21T15:33:50Z", "time": "2017-03-21T15:33:50Z", "creator": "mewalig@gmail.com", "bug_id": 60848, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60848, "attachment_id": null, "text": "Thanks for the simple test case.  This is deeper than just the SUMPRODUCT() function.  By the time it gets to evaluating the function, the argument has already evaluated to an error.\n\nThe problem is that the \"Unary Minus\" operator, \"-\", doesn't properly handle an array argument.  This is actually a problem with the underlying utility class OperandResolver, which needs to return an array instead of a single value when the input is an array for cases like this, but perhaps not for some other functions.\n\nThis will require some digging to fully define.  To start with, the unary functions should at least call a new operand static method that can return an array of values.  UnaryPlusEval has the same bug as UnaryMinusEval, although the plus and minus evaluation logic is slightly different according to the comments in the code.\n\nIt will take someone digging through the Excel function specs to see what other functions can silently operate on an array and return an array for use by array functions like SUMPRODUCT, and testing/checking the POI handling of each.\n\nPatches are always welcome.  If one of my users indicates we need this it will end up in my queue, but otherwise it's a bit too big for me to tackle at the moment.", "id": 197877, "time": "2017-03-21T17:57:50Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-03-21T17:57:50Z", "is_private": false}, {"count": 6, "tags": [], "creator": "mewalig@gmail.com", "attachment_id": null, "id": 197880, "time": "2017-03-21T18:20:50Z", "bug_id": 60848, "creation_time": "2017-03-21T18:20:50Z", "is_private": false, "text": "Thank you for the comment\n\nOut of curiosity, why is the processing wrt the first argument different from that wrt subsequent arguments? Note that if we do:\n   =SUMPRODUCT(A5:A20, --(B5:B20))\n\nthen even though the problematic argument is still there, it works just be relegating it to the position of argument 2 instead of argument 1.\n\nIs it possible to take whatever process is being applied to arguments 2+ and apply that to argument 1?"}, {"count": 7, "tags": [], "creator": "gwoolsey@apache.org", "attachment_id": null, "id": 197884, "time": "2017-03-21T18:49:28Z", "bug_id": 60848, "creation_time": "2017-03-21T18:49:28Z", "is_private": false, "text": "The current logic is completely dependent on the internal class type of of the first argument.  As I mentioned, the problem is with the unary negation operator (minus).  I haven't tested it, but I suspect the second argument is actually evaluating to a single value instead of an array, and projecting that across the first argument array, rather than taking the pairwise product of arrays of equal size.  There won't be a simple fix.  \n\nYou are welcome to check out the source code and play with it.  If you come up with a fix and unit test, we'd love to incorporate a patch."}, {"count": 8, "tags": [], "creator": "mewalig@gmail.com", "text": "I will try to take a look. the main (at least initial) limitation on my ability to do so is that I'm pretty unfamiliar with the Java build process (I'm mostly a C programmer and stick with emacs + cc + make). \n\nWill have to do some research on how to get code cycle times down for this kind of endeavor. Any suggestions much appreciated.", "id": 197885, "time": "2017-03-21T20:03:30Z", "bug_id": 60848, "creation_time": "2017-03-21T20:03:30Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "If any developers are interested in fixing this for a $ bounty, please send me a proposal at mewalig@gmail.com", "attachment_id": null, "bug_id": 60848, "id": 197895, "time": "2017-03-22T02:51:17Z", "creator": "mewalig@gmail.com", "creation_time": "2017-03-22T02:51:17Z", "is_private": false}, {"count": 10, "text": "the plot thickens.\n\nUsing the below example, when cell A3 is changed to be:\n    =SUMPRODUCT(--(B4:B6))\n\nthen, as before, evaluation of that throws an error.\n\nHowever, when cell A3 contains\n    =SUMPRODUCT(--(B3:B5))\n\nthen, unlike before, no error is thrown, but the resulting value is not correct and only appears to consider the cell B3.\n\nNot sure if this indicates two separate issues that need to be fixed, but it seems odd that one throws an error and the other does not just by moving the referenced range up or down a row.", "bug_id": 60848, "attachment_id": null, "id": 198467, "time": "2017-04-21T21:43:21Z", "creator": "mewalig@gmail.com", "creation_time": "2017-04-21T21:43:21Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 60848, "attachment_id": null, "text": "Looking at the syntax in https://msdn.microsoft.com/en-us/library/dd906358(v=office.12).aspx, then, assuming that \"Unary Minus\" is equivalent in the POI grammer as \"sign\" in the MSFT site's grammar, it seems possible that the grammar in POI should not be classifying the leading \"-\" as \"Unary Minus\", and instead should be classifying it as whatever in the POI grammar is equivalent to \"prefix-operator\".\n\nSee in particular the line that reads:\n\n  nospace-argument-expression = \"(\"  expression  \")\" / constant / prefix-operator argument-expression ...\n\n\nin other words, \"--(xx)\" should be parsed as\n\n\n  prefix-operator argument-expression\n                    |\n                  prefix-operator argument-expression\n                                    |\n                                  \"(\"  expression  \")\"\n\n\n(note that I've ignored the difference between nospace-argument-expression and argument-expression and treated them as equivalent for brevity)\n\nWould you agree that the expression should parsed differently, as shown above? I'm not familiar enough with how POI implemented the grammar to know whether there is some other way to deal with this which is different from how the MSFT site's grammar works... but I would think that the formula parsing is hairy enough that it would be optimal to use the exact same grammar as specified in the MSFT site. It might be a fundamental change to make, but there are a number of other formula-parsing bugs in POI that would likely be more easily addressed taking that approach.", "id": 198468, "time": "2017-04-21T21:57:56Z", "creator": "mewalig@gmail.com", "creation_time": "2017-04-21T21:57:56Z", "is_private": false}, {"count": 12, "tags": [], "text": "Calling all coders who want more money: who is willing to fix this bug for a bounty? \n\nI have to admit I am surprised that there hasn't been more attention being paid to what appears to be a fundamental problem in how this library parses formulas, which not only doesn't work, but also doesn't notify the user that it doesn't work, and instead just sends back bad data. If nothing else, there should be raised some Exception raised saying \"I can't calculate this correctly, so I'm returning an error\". Otherwise how can anyone take this library seriously for any \"real\" work?\n\nAlso, why is this bug's status set to \"NEEDINFO\"? We already have all the info needed to reproduce. I get it that the solution isn't found yet, but \"NEEDINFO\" makes it sound like it's not ready for a developer to look at, which is not the case.", "attachment_id": null, "bug_id": 60848, "id": 203614, "time": "2018-02-02T17:54:41Z", "creator": "mewalig@gmail.com", "creation_time": "2018-02-02T17:54:41Z", "is_private": false}]
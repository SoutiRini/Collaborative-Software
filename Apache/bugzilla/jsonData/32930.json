[{"count": 0, "tags": [], "bug_id": 32930, "text": "httpd 2.0 build has a 'regression' compared with httpd 1.3 build.\n\napxs for httpd 2.0 now has the --prefix=/your/required/install/location path\nvalue embedded in it in several places.\n\nThis means that if you do this during the httpd 2.0 build:\n\n$ configure --prefix=/your/required/install/location <other options for mod_'s>\n$ make\n$ make DESTDIR=/your/required/staging/location install\n\nand then try to run apxs from within the staging location when building, say,\nmod_jk as a DSO, the mod_'s build dies because apxs cannot run because it is not\nactually under the /your/required/install/location directory.\n\nThis makes it impossible to provide the mod_'s as DSO's in a binary distribution\non 'ourbuildhost' but distributed to users to simply unload on their 'runtimehost'.\n\nWith httpd 1.3 we were able to run apxs successfully from within the directory\n/your/required/staging/location/your/required/install/location, which resulted from:\n\n$ make install root=/your/required/staging/location\n\nThe custom 'config' based build of httpd 1.3 supports 'root' and apxs was 'root\naware' (probably due to implementation).\n\nThe 'configure' based build of httpd 2.0 supports 'DESTDIR' (due to configure)\nand apxs is not 'DESTDIR aware'.\n\nWe want to do this because the users' systems do not have build tools (ie gcc,\ngmake, autoconf, libtool, all that stuff) and cannot build httpd and mod_'s from\nsource.\n\nAnother reason we do this is so that installing httpd and mod_'s does not take\ntens of minutes (on large, fast system) to hour or more (on small system). We\ntake that hit at the 'factory' to make life easier for our users and support staff.", "id": 69190, "time": "2005-01-04T05:04:11Z", "creator": "johnk@nstc.nec.com.au", "creation_time": "2005-01-04T05:04:11Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 32930, "text": "As a possible work around to note for this bug: You can compile apache modules\nwithout using APXS.  Just compile them into a shared object, like a normal library.", "id": 69191, "time": "2005-01-04T05:19:17Z", "creator": "chip@force-elite.com", "creation_time": "2005-01-04T05:19:17Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 32930, "attachment_id": null, "text": "Software installed in a DESTDIR root should be be expected to work correctly\nuntil  relocated into the real $prefix.  It's really not worth increasing the\ncomplexity of the build system to cope with this obscure case.  You can munge it\nmanually if you really need be; it probably just needs the path to\nconfig_vars.mk fixing.  \n\nAlternatively, to generate the binary modules simply build them against the\nproperly installed httpd on the build host.\n", "id": 69216, "time": "2005-01-04T22:02:27Z", "creator": "jorton@redhat.com", "creation_time": "2005-01-04T22:02:27Z", "is_private": false}, {"count": 3, "tags": [], "text": "s/should be be/should not be/, of course ;)", "is_private": false, "id": 69217, "creator": "jorton@redhat.com", "time": "2005-01-04T22:03:08Z", "bug_id": 32930, "creation_time": "2005-01-04T22:03:08Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 32930, "text": "(In reply to comment #2)\n> You can munge it manually if you really need be; it probably just needs\n> the path to config_vars.mk fixing.\n\nI tried. The prefix path is embedded in a moderate number of places in the\nperl code of apxs. If I remember rightly, it is all through config_vars.mk\nitself. It became a losing proposition.\n\nThe next suggestion occurred to me also. It is very pragmatic (tick).\n\n> Alternatively, to generate the binary modules simply build them against\n> the properly installed httpd on the build host.\n\nThis has the 'down side' of requiring a 'prefix correct' installation of\na 'bootstrap version' what you are currently building (httpd) in place on\nthe build host.\nHowever after bootstrapping the host things should go smoothly until any\ntool in the 'prefix correct' installation and required by a build becomes\nout of date.\n\nUnfortunately for me doing this in our development shop has its problems.\nOh well.\n\n> ... not worth increasing the complexity of the build system to cope with\n> this obscure case.\n\nThe complexity would all be in apxs? It may simply consist of a 'destdir'\nvalue that is prepended to any value normally initialised to the '--prefix'\ndir when apxs perl code is generated by the build.\n\nThe destdir value could be provided by a command line option, and default\nto the empty string if not provided.\n\nWithout looking at all the apxs perl this idea could be all wrong, but it\nhas a shot.\n\nComment #1 is valid, but doesn't it mean that, on a mod_ by mod_ basis, you\nmust manually perform the work bundled in apxs?\n\nPresumably http://httpd.apache.org/docs-2.0/dso.html contains all I need to\nknow.\n\nDoes it mean the underlying lib???.so for the mod_??? must be prepared with\nlibtool rather than just ld? (this question displays ignorance of libtool)\n", "id": 69226, "attachment_id": null, "creator": "johnk@nstc.nec.com.au", "creation_time": "2005-01-05T07:35:28Z", "time": "2005-01-05T07:35:28Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 32930, "text": "Created attachment 20050\nPatch for apxs program's DESTDIR support for Apache httpd 2.2.4\n\nThe patch is completly backward compatible in case of DESTDIR environment\nvariable is not set.\n\nDESTDIR support can be easly used by setting the DESTDIR environment variable\nbefore calling the script. No libtool, or *.mk file modification is needed.\n\nSince it has no downside if it is not used, please include it in the next\napache releases.\n\nBest,\nAron Ujvari", "id": 102465, "time": "2007-04-26T06:59:01Z", "creator": "xanco@nikhok.hu", "creation_time": "2007-04-26T06:59:01Z", "is_private": false, "attachment_id": 20050}, {"count": 6, "tags": [], "creator": "archie@dellroad.org", "attachment_id": null, "is_private": false, "id": 128033, "time": "2009-06-17T14:11:29Z", "bug_id": 32930, "creation_time": "2009-06-17T14:11:29Z", "text": "Why won't you fix this bug?\n\nEvery Linux distribution that packages modules as RPMs (which is most of them) has to deal with this annoying bug, because as RPMs get built they install into temporary directories.\n\nBeing DESTDIR-aware is totally standard for programs that install things.\n\nStating that \"just don't use apxs\" is a valid workaround is equivalent to saying \"apxs is not useful\", which is not true. For example, it hides a bunch of platform-specific stuff.\n\nA valid patch has been provided.\n\nI don't get it."}, {"count": 7, "tags": [], "text": "Just to clarify my previous comment: I am referring to simply adding basic DESTDIR support, which is what the patch does. I don't really care if the installed stuff is usable within the temporary directory (that requirement is unreasonable IMHO).", "attachment_id": null, "bug_id": 32930, "id": 128034, "time": "2009-06-17T14:14:24Z", "creator": "archie@dellroad.org", "creation_time": "2009-06-17T14:14:24Z", "is_private": false}, {"count": 8, "tags": [], "creator": "wiml@omnigroup.com", "text": "I too spend a fair amount of time working around this deficiency in apxs.", "id": 158724, "time": "2012-05-01T20:20:13Z", "bug_id": 32930, "creation_time": "2012-05-01T20:20:13Z", "is_private": false, "attachment_id": null}]
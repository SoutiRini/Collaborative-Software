[{"count": 0, "tags": [], "creator": "chamibuddhika@gmail.com", "text": "Currently MBeanFactory doesn't have a method for creating a new StandardService MBean. This would become an issue for future enhancements of JMX support in Tomcat. As per discussions with Mark, this enhancement is suggested as a starting point for possible future enhancements in JMX support.", "id": 135869, "time": "2010-04-04T05:40:57Z", "bug_id": 49045, "creation_time": "2010-04-04T05:40:57Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "chamibuddhika@gmail.com", "text": "Created attachment 25228\nAdding createStandardService method to MBeanFactory\n\nThis initial version of the patch adds createStandarService method. However I am having some issues with the usage of the MBean with respect to MBeanFactory. In the case of MBeanFactory both the managed resource and the associated MBean are MBeanFactory instances. But only resource MBeanFactory object is properly populated with a reference to the Server in its container field. The associated MBean instance which gets registered in the MBean Server (created by JMX infrastructure) doesn't get populated with this field since it is being created using reflection in createMBean() method in ManagedBean class. \n\nNow when the MBean createStandardService method is invoked using JMX (which depends on container field being properly set - in this case the reference to the single Server instance) the MBean and not the managed resource is invoked causing a null pointer exception. The below code snippet in BaseModelBean causes the above behaviour.\n\n// Invoke the selected method on the appropriate object\nObject result = null;\ntry {\n    if( method.getDeclaringClass().isAssignableFrom( this.getClass()) ) {\n       result = method.invoke(this, params );\n    } else {\n       result = method.invoke(resource, params);\n    }\n}\n\nHere as can be seen the precedence is given to the MBean object instead of the associated resource object. Can somebody comment on the reason for the above logic? \n\nTo get the resource MBeanFactory instance invoked I have included a check as follows in the above condition which I think is not the way to go.\n \n if( method.getDeclaringClass().isAssignableFrom( this.getClass())\n         && !method.getDeclaringClass().equals(this.getClass()) ) {\n\nAny ideas on this issue?", "id": 135870, "time": "2010-04-04T06:24:32Z", "bug_id": 49045, "creation_time": "2010-04-04T06:24:32Z", "is_private": false, "attachment_id": 25228}, {"count": 2, "tags": [], "bug_id": 49045, "attachment_id": null, "text": "A couple of comments.\n\nYou should be targeting your patches at Tomcat 7 aka trunk. Please raise bugs against Tomcat 7 too.\n\nThe Factory can be associated with a Server or a Service. If it is associated with a Service it isn't valid to try adding another Service. That should probably throw an Exception.\n\nIf the Factory is associated with a Server then casting container to Server should work.\n\nWhy are you creating an Engine too? Only a Service should be created. Creating an Engine should be a separate method.\n\nI haven't looked at this in much detail but I'd be surprised if modifying the modeler code is necessary. I'd find a method on a bean that does work (eg the addAlias() method on a host) and see if anything is different about the way it is set up compared to the MBeanFactory.", "id": 135916, "time": "2010-04-06T21:32:20Z", "creator": "markt@apache.org", "creation_time": "2010-04-06T21:32:20Z", "is_private": false}, {"count": 3, "tags": [], "creator": "chamibuddhika@gmail.com", "attachment_id": null, "id": 135930, "time": "2010-04-07T11:45:01Z", "bug_id": 49045, "creation_time": "2010-04-07T11:45:01Z", "is_private": false, "text": "(In reply to comment #2)\nHi Mark,\n\n> You should be targeting your patches at Tomcat 7 aka trunk. Please raise bugs\n> against Tomcat 7 too.\n\nI will raise a bug for Tomcat 7 as well.\n\n> The Factory can be associated with a Server or a Service. If it is associated\n> with a Service it isn't valid to try adding another Service. That should\n> probably throw an Exception.\n\nHere what I was thinking was since technically a Server can contain more than one service that it would be possible to add another service to the server associated with the current service component in the MBeanFactory. I will change it to throw an exception.\n\n> Why are you creating an Engine too? Only a Service should be created. Creating\n> an Engine should be a separate method.\n\nPlease correct me if I am wrong here. Since one service is always mapped only to one Engine component it would be not possible to use an existing registered Engine component with the newly created service without any side effects. Hence the creation of a brand new engine within the new service. I saw this has been done in the removed codes using ServerFactory as well. Another option would be that user can seperately create an Engine component prior to Service creation and register it and then use it to create the new Service. I will add a separate method to create an Engine component in that case.\n\n> I haven't looked at this in much detail but I'd be surprised if modifying the\n> modeler code is necessary. I'd find a method on a bean that does work (eg the\n> addAlias() method on a host) and see if anything is different about the way it\n> is set up compared to the MBeanFactory.\n\nI will look in to this further. \n\nThanks"}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 135939, "time": "2010-04-07T19:20:00Z", "bug_id": 49045, "creation_time": "2010-04-07T19:20:00Z", "is_private": false, "text": "(In reply to comment #3)\n> I will raise a bug for Tomcat 7 as well.\nThat wasn't quite what I meant. I meant that this bug should be against Tomcat 7, not Tomcat 6. I'll move it.\n\n> Here what I was thinking was since technically a Server can contain more than\n> one service that it would be possible to add another service to the server\n> associated with the current service component in the MBeanFactory. I will\n> change it to throw an exception.\nThere are cases where there is a service with no server. Hence the exception is the better option.\n\n> Please correct me if I am wrong here. Since one service is always mapped only\n> to one Engine component it would be not possible to use an existing registered\n> Engine component with the newly created service without any side effects. Hence\n> the creation of a brand new engine within the new service. I saw this has been\n> done in the removed codes using ServerFactory as well. Another option would be\n> that user can seperately create an Engine component prior to Service creation\n> and register it and then use it to create the new Service. I will add a\n> separate method to create an Engine component in that case.\nYou are correct that there is a 1 to 1 mapping between service and engine. For simplicity, I'd still keep them separate."}, {"count": 5, "tags": [], "bug_id": 49045, "attachment_id": null, "text": "*** Bug 49062 has been marked as a duplicate of this bug. ***", "id": 135941, "time": "2010-04-07T19:20:19Z", "creator": "markt@apache.org", "creation_time": "2010-04-07T19:20:19Z", "is_private": false}, {"count": 6, "tags": [], "creator": "markt@apache.org", "text": "Ping. When do you expect to have an updated patch?", "id": 136069, "time": "2010-04-12T17:58:00Z", "bug_id": 49045, "creation_time": "2010-04-12T17:58:00Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 49045, "attachment_id": 25277, "text": "Created attachment 25277\nAdding createStandardService method to MBeanFactory\n\nSorry for the delay. I was busy summing up some other work. I have been looking more in to the issue of MBeanFactory.The issue was caused by the fact that MBeanFactory itself being a BaseModelBean unlike other normal classes such as StandardService etc. Although it extends BaseModelBean it doesn't utilise any of its inherited methods and it being a BaseModelBean is not leveraged in any other point in the sources. So I suggest removing 'is a' relationship between MBeanFactory and BaseModelBean and make MBeanFactory a normal class which can be managed using a BaseModelBean object. It solves the issue that both managed resource and the mbean being instances of the same class, a situation which is unique to MBeanFactory.\n\nIn this patch I have reversed the changes made to the modeler code in order to overcome the earlier issue. And additionally separate create method has been added to create an Engine component.", "id": 136085, "time": "2010-04-13T07:32:51Z", "creator": "chamibuddhika@gmail.com", "creation_time": "2010-04-13T07:32:51Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 49045, "text": "Thanks for the analysis and updated patch.\n\nAs I reviewed the patch I realised that a lot of the complexity was caused by trying to add Service and Engine separately. When considered along side the long term aim to merge Service and Engine and the short term goal to extend Lifecycle to cover MBean registration I now think you original idea to add the two togetehr is the right way to go.\n\nI have applied a patch based you your patches that does this and also cleans up some old methods from the descriptors.\n\nIn terms of what to do next, I'd suggest posting your ideas for the next steps to the dev list.", "count": 8, "id": 136133, "time": "2010-04-14T08:07:06Z", "creator": "markt@apache.org", "creation_time": "2010-04-14T08:07:06Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Any kind of container which runs Ant in-VM, such as the NetBeans IDE, that has\nits own SecurityManager already will need a way to intercept calls to\nSystem.setSecurityManager() made from Ant's Permissions class, since the VM can\nhave only one global SM at a time. Currently attempting to use <java\nfork=\"false\"> in any mode which uses Permissions (incl. failonerror=\"true\" in\nAnt 1.6.x and always in 1.7) will just break with a SecurityException when run\nin an embedded environment like this. Could be solved by providing a hook in Ant\nletting the container manage some of the permissions, e.g. delegating from the\nVM-wide master SM to a thread/threadgroup-specific SM provided by Ant.", "is_private": false, "id": 73029, "creator": "jglick@apache.org", "time": "2005-03-30T00:04:32Z", "bug_id": 34229, "creation_time": "2005-03-30T00:04:32Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 34229, "attachment_id": null, "text": "Cf. NetBeans bug:\n\nhttp://www.netbeans.org/issues/show_bug.cgi?id=47645", "id": 73030, "time": "2005-03-30T00:06:02Z", "creator": "jglick@apache.org", "creation_time": "2005-03-30T00:06:02Z", "is_private": false}, {"count": 2, "tags": [], "text": "Cf. Java #5101798.", "is_private": false, "id": 73158, "creator": "jglick@apache.org", "time": "2005-03-31T18:32:54Z", "bug_id": 34229, "creation_time": "2005-03-31T18:32:54Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "id": 73167, "time": "2005-04-01T00:00:25Z", "bug_id": 34229, "creation_time": "2005-04-01T00:00:25Z", "is_private": false, "text": "Alternatively, we could try and set the security manager, catch the exception\nand back off from the attempt, opting to fork the jvm instead. "}, {"count": 4, "tags": [], "text": "> Alternatively, we could try and set the security manager, catch the exception\n> and back off from the attempt, opting to fork the jvm instead. \nI know that this kind of \"catch a semi-expected exception and alter behaviour\"\nis used frequently in the code, but is there no other way?  I personally feel\nthat using exceptions as a flow control mechanism is a code smell.\n\nI'd prefer an adapter approach mentioned in the report\n\njust my opinion\nKev\n", "is_private": false, "id": 73178, "creator": "kevin.jackson@it.fts-vn.com", "time": "2005-04-01T04:01:32Z", "bug_id": 34229, "creation_time": "2005-04-01T04:01:32Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 34229, "attachment_id": null, "id": 73183, "time": "2005-04-01T12:01:03Z", "creator": "stevel@apache.org", "creation_time": "2005-04-01T12:01:03Z", "is_private": false, "text": "Maybe both: an override for containers that know what they are doing, a\nprobe+backoff for containers that dont do anything clever.\n\nJesse, what kind of control mechanism do you propose? "}, {"count": 6, "tags": [], "creator": "jglick@apache.org", "text": "Not sure yet. Maybe in Permissions:\n\npublic class Permissions {\n    // ...\n    /**\n     * For containers which wish to intercept\n     * {@link System.setSecurityManager} safely.\n     */\n    public interface SecurityManagerDelegator {\n        void registerSecurityManager(SecurityManager);\n        void unregisterSecurityManager();\n    }\n    public static void installSecurityManagerDelegator(SecurityManagerDelegator)\n{...}\n}\n\nIf P.iSMD were not called, Ant would do what it does now. If it were called,\nPermissions.{set,restore}SecurityManager would delegate to the new interface.\nThis would - I hope - permit a container to manage Ant's SM implementation\nintelligently, say by having the real global SM delegate to Ant's SM according\nto the current thread group. But I would need to try writing a real P.SMD\nimplementation, say for NetBeans, to confirm that it can really work.\n\nNote that the current code in Ant is not actually correct to begin with. You\nmight expect that the following script:\n\n<?xml version=\"1.0\"?>\n<project name=\"34229-demo\" default=\"x\">\n    <target name=\"x\">\n        <echo file=\"Pause.java\">\npublic class Pause {\n    public static void main(String[] args) throws Exception {\n        int status = Integer.parseInt(args[0]);\n        System.out.println(\"Will pause... (status: \" + status + \")\");\n        Thread.sleep(2000);\n        System.out.println(\"Done. (status: \" + status + \")\");\n        System.exit(status);\n    }\n}\n        </echo>\n        <javac srcdir=\".\" destdir=\".\" includes=\"Pause.java\"/>\n        <parallel>\n            <sequential>\n                <java fork=\"false\" classpath=\".\" failonerror=\"true\"\nclassname=\"Pause\">\n                    <arg value=\"0\"/>\n                </java>\n            </sequential>\n            <sequential>\n                <sleep milliseconds=\"1000\"/>\n                <java fork=\"false\" classpath=\".\" failonerror=\"true\"\nclassname=\"Pause\">\n                    <arg value=\"1\"/>\n                </java>\n            </sequential>\n        </parallel>\n        <echo>OK??</echo>\n    </target>\n</project>\n\nwould when run from the command line (Ant 1.6.2) print\n\nWill pause... (status: 0)\nWill pause... (status: 1)\nDone. (status: 0)\nDone. (status: 1)\nBUILD FAILED\n/tmp/build.xml:24: Java returned: 1\n\nsince the second process finishes second and with a nonzero error code which\nshould throw a BuildException.\n\nInstead, it prints only\n\nWill pause... (status: 0)\nWill pause... (status: 1)\nDone. (status: 0)\nDone. (status: 1)\n\nand then exits *Ant's* VM abruptly (with code 1). That is because the sequence\nof events is\n\n- System.sSM(MySM) for process #0 before it starts\n- System.sSM(MySM) for process #1 (overwriting #0's!) before it starts\n- System.exit(0) from #0, which is trapped and causes <java> to finish\n- System.sSM(null) (as stored by Permissions #0) after #0 finishes\n- System.exit(1) from #1, which is not trapped since there is no SM\n\nA contrived case, perhaps, but it shows that the logic in Permissions is wrong\nalready - it should be installing a multiplexing SM itself, and perhaps checking\nthe Thread of the caller.\n\nSwitching to forked mode as an option of last resort might be an option; perhaps\nit would be a reasonable hot fix for Ant 1.6.3 until we can do better. I guess\nExecuteJava would need to catch SecurityException from Permissions.sSM and\nswitch to calling Java.fork(...) or something like that, and a similar fix for\nJUnitTestRunner. The main problem is that running the app forked is not\ncompletely transparent to the user; besides a performance hit, there might be\nsome specific behavior which the user needs unforked mode for, and it might be\nconfusing to magically switch to forked mode in some environments.", "id": 73200, "time": "2005-04-01T22:17:35Z", "bug_id": 34229, "creation_time": "2005-04-01T22:17:35Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 34229, "attachment_id": null, "id": 129283, "time": "2009-07-30T06:43:23Z", "creator": "jglick@apache.org", "creation_time": "2009-07-30T06:43:23Z", "is_private": false, "text": "BTW this is currently worked around in NetBeans by switching <java> to forked mode in all cases. While I'm sure this causes problems for somebody somewhere, I haven't heard any complaints yet."}, {"count": 8, "tags": [], "text": "Hi all,\n\nI'm using Ant, embedded in my application. Unfortunately when a JAVA task is executed, I'm not able to maintain my SecurityManager, during the java task execution.\n\nInside of my SecMan I've got all my logics to check if you are authorized or not.\n\nGoing into code, I've seen that everything should work the Permissions instance is null but it's initialized during the checkConfiguration method of Java class.\n\nI think SecurityManagerDelegator could be the great solution, but I haven't seen anything in the code.\n\nHave you planned it? Or is there any other workaround (not fork=true ..)\n\nOf ocurse I can try to change by myself but I should change my ANT at every new release...\n\nThanks a lot!", "is_private": false, "id": 164750, "creator": "stocki.nail@gmail.com", "time": "2013-01-20T19:25:33Z", "bug_id": 34229, "creation_time": "2013-01-20T19:25:33Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 34229, "attachment_id": null, "text": "Hi all,\n\nI'm using Ant, embedded in my application. Unfortunately when a JAVA task is executed, I'm not able to maintain my SecurityManager, during the java task execution.\n\nInside of my SecMan I've got all my logics to check if you are authorized or not.\n\nGoing into code, I've seen that everything should work the Permissions instance is null but it's initialized during the checkConfiguration method of Java class.\n\nI think SecurityManagerDelegator could be the great solution, but I haven't seen anything in the code.\n\nHave you planned it? Or is there any other workaround (not fork=true ..)\n\nOf ocurse I can try to change by myself but I should change my ANT at every new release...\n\nThanks a lot!", "id": 164751, "time": "2013-01-20T19:27:47Z", "creator": "stocki.nail@gmail.com", "creation_time": "2013-01-20T19:27:47Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 34229, "attachment_id": null, "id": 164761, "time": "2013-01-21T15:30:23Z", "creator": "jglick@apache.org", "creation_time": "2013-01-21T15:30:23Z", "is_private": false, "text": "I am afraid there is no fix for this yet."}, {"count": 11, "tags": [], "text": "Thanks a lot Jesse.\n\nIn the meantime I changed my class so now works perfectly!\n\nCU", "is_private": false, "id": 164768, "creator": "stocki.nail@gmail.com", "time": "2013-01-21T19:19:17Z", "bug_id": 34229, "creation_time": "2013-01-21T19:19:17Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 6058, "is_private": false, "text": "Jasper generate java files in work subdirectories.\nThe resulting Java files is in a directory structure similar to the one of the \nJSP files. This is not consistent with the package declared in the java file \norg.apache.jsp.\n\nIt would be nice if :\n1 - org.apache.jsp package is created on disk\n2 - for a JSP file in a sudirectory (for instance /cal/cal1.jsp) the java file \nis generated with 'package org.apache.jsp.cal'", "id": 9962, "time": "2002-01-27T20:15:18Z", "creator": "bleroux@sysdeo.com", "creation_time": "2002-01-27T20:15:18Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 6058, "is_private": false, "text": "This is not behavior described in the spec, so reclassify as enhancement.", "id": 11195, "time": "2002-02-27T04:12:27Z", "creator": "remm@apache.org", "creation_time": "2002-02-27T04:12:27Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 6058, "is_private": false, "text": "Proposed changes to implement this enhancement :\n\n\nchanges to 3 classes in the jasper source.\n\n\n1- JasperLoader.java\n \nloadClass(string,boolean) method:\n \ni changed this:\n \n // Only load classes for this JSP page\n if( name.startsWith(Constants.JSP_PACKAGE_NAME + \".\" + className) ) {\n     String classFile = name.substring(Constants.JSP_PACKAGE_NAME.length()+1) +\n  \".class\";\n     byte [] cdata = loadClassDataFromFile(classFile);\n \ninto this:\n \n // Only load classes for this JSP page\n if( name.startsWith(Constants.JSP_PACKAGE_NAME)) {\n     byte [] cdata = loadClassDataFromFile(className +\".class\");\n\nso the test if it is a jsp page is only about the standaard jsp package name\nbut that should be good enough for everything.\nbesides that i use the internal classname (which is the real classname without\npackage or \".class\")\ninstead of computing it again. I really don't know why they do that because the\nreal class name\nis given with the constructor of JasperLoader..\n \n \n2- JspServlet.java\n \nthe loadJSP method:\n \nchanged this:\n \n           if( outURI.endsWith(\"/\") )\n                outURI = outURI + jspUri.substring(1,jspUri.lastIndexOf(\"/\")+1);\n            else\n                outURI = outURI + jspUri.substring(0,jspUri.lastIndexOf(\"/\")+1);;\n            outURL = new URL(outURI);\n \ninto this:\n \n           if( outURI.endsWith(\"/\") )\n                outURI = outURI + jspUri.substring(1,jspUri.lastIndexOf(\"/\")+1);\n            else\n                outURI = outURI + jspUri.substring(0,jspUri.lastIndexOf(\"/\")+1);;\n \n    StringBuffer sb = new StringBuffer(outURI.length());\n          StringTokenizer st = new StringTokenizer(outURI, \" \");\n          while(st.hasMoreTokens())\n          {\n           sb.append(st.nextToken());\n          }\n         outURI = sb.toString();\n \n            outURL = new URL(outURI);\n \nfor removing the spaces out of the output dir (so it is equal to the classpath,\nsee below)\n \n \nand this\n \n  jsw.servletClass = jsw.loader.loadClass(\n   Constants.JSP_PACKAGE_NAME + \".\" + ctxt.getServletClassName());\n \ninto this\n \n  jsw.servletClass = jsw.loader.loadClass(ctxt.getServletPackageName() + \".\" +\nctxt.getServletClassName());\n \nThis should be default anyway because the ctxt (context class) is defining\neverything so it should\nalso be used here. Default it will say: Constants.JSP_PACKAGE_NAME.\n \n \n3- JspEngineContext.java\n \nThis added to the constructor:\n \n        jspFile = jspFile.replace('\\\\', '/');\n        int index = jspFile.lastIndexOf('/');\n        if(index > 0)\n        {\n    String sPackageEnd = jspFile.substring(0, index);\n          sPackageEnd = sPackageEnd.replace('/', '.');\n          StringBuffer sb = new StringBuffer(sPackageEnd.length());\n          \n          if(!sPackageEnd.startsWith(\".\")) sb.append(\".\");\n          // filter out spaces\n          StringTokenizer st = new StringTokenizer(sPackageEnd, \" \");\n          while(st.hasMoreTokens())\n          {\n           sb.append(st.nextToken());\n          }\n          this.servletPackageName += sb.toString();\n        }\n \nso the servletPackageName wil be the default one + the subdirs where it is in.\n(i remove the spaces, any idee's what are more allowed in dirs but not in packages?)\n \n", "id": 11610, "time": "2002-03-09T16:14:45Z", "creator": "bleroux@sysdeo.com", "creation_time": "2002-03-09T16:14:45Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 6058, "is_private": false, "id": 35036, "attachment_id": null, "creator": "kin-man.chung@sun.com", "creation_time": "2003-04-11T23:23:25Z", "time": "2003-04-11T23:23:25Z", "text": "Fixed in TC5"}]
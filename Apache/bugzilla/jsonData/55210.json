[{"count": 0, "attachment_id": null, "creator": "nicholas@nicholaswilliams.net", "text": "According to the Javadoc for java.util.ServiceLoader (http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html):\n\n[quote]A service provider is identified by placing a provider-configuration file in the resource directory META-INF/services. The file's name is the fully-qualified binary name of the service's type. The file contains a list of fully-qualified binary names of concrete provider classes, one per line. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is '#' ('\\u0023', NUMBER SIGN); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.[/quote]\n\nHowever, based on the error below it appears that Tomcat does not abide by this requirement. The Log4j Core JAR for 2.0-beta8 will have a ServletContainerInitializer in it, and the provider-configuration file for this SCI contains a copyright statement. Tomcat barfs and fails to deploy the application due to this copyright statement.\n\nThis problem exists in both Tomcat 7 and Tomcat 8.\n\nSEVERE: The ServletContentInitializer [# Licensed to the Apache Software Foundation (ASF) under one or more] could not be created\njava.lang.ClassNotFoundException: # Licensed to the Apache Software Foundation (ASF) under one or more\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1465)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1310)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:339)\n\tat org.apache.catalina.startup.ContextConfig.getServletContainerInitializer(ContextConfig.java:1526)\n\tat org.apache.catalina.startup.ContextConfig.processServletContainerInitializers(ContextConfig.java:1436)\n\tat org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1174)\n\tat org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:814)\n\tat org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:321)\n\tat org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5100)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:698)\n\tat org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1491)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:491)\n\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)\n\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\n\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792)\n\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:468)\n\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:415)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:491)\n\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)\n\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\n\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792)\n\tat javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1465)\n\tat javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:75)\n\tat javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1306)\n\tat javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1398)\n\tat javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:827)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:491)\n\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)\n\tat sun.rmi.transport.Transport$1.run(Transport.java:177)\n\tat sun.rmi.transport.Transport$1.run(Transport.java:174)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.rmi.transport.Transport.serviceCall(Transport.java:173)\n\tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556)\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811)\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:724)", "id": 168355, "time": "2013-07-07T21:44:14Z", "bug_id": 55210, "creation_time": "2013-07-07T21:44:14Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "Looking at the code for ContextConfig, Tomcat also does not parse multiple SCIs in a provider-configuration file, which is another violation of the service provider standard.", "is_private": false, "id": 168356, "creation_time": "2013-07-07T21:48:11Z", "time": "2013-07-07T21:48:11Z", "creator": "nicholas@nicholaswilliams.net", "bug_id": 55210, "attachment_id": null}, {"count": 2, "text": "Created attachment 30564\nProposed patch that resolves this issue\n\nUpdated ContextConfig to 1) ignore comments (both whole-line comments and end-of-line comments) and 2) allow multiple SCIs in a single provider-configuration file.", "bug_id": 55210, "is_private": false, "id": 168359, "time": "2013-07-07T22:39:11Z", "creator": "nicholas@nicholaswilliams.net", "creation_time": "2013-07-07T22:39:11Z", "tags": [], "attachment_id": 30564}, {"count": 3, "tags": [], "text": "Thanks for the report and the patch. It was applied to trunk and 7.0.x and will be included in 7.0.43 onwards.", "is_private": false, "id": 168378, "creation_time": "2013-07-08T12:25:25Z", "time": "2013-07-08T12:25:25Z", "creator": "violetagg@apache.org", "bug_id": 55210, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 55210, "is_private": false, "id": 168382, "attachment_id": null, "creator": "nicholas@nicholaswilliams.net", "creation_time": "2013-07-08T16:57:44Z", "time": "2013-07-08T16:57:44Z", "text": "Excellent! Thanks for acting on it so quickly!"}]
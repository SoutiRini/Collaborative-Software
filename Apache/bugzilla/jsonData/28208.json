[{"count": 0, "tags": [], "text": "Copied Luca's Furini's PDF Renderer patch for justification from resolved bug \n28130", "is_private": false, "bug_id": 28208, "id": 55314, "time": "2004-04-05T14:05:41Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2004-04-05T14:05:41Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "bowditch_chris@hotmail.com", "is_private": false, "id": 55315, "attachment_id": 11135, "bug_id": 28208, "creation_time": "2004-04-05T14:06:14Z", "time": "2004-04-05T14:06:14Z", "text": "Created attachment 11135\nsuggested patch"}, {"count": 2, "tags": [], "creator": "bowditch_chris@hotmail.com", "attachment_id": 11136, "text": "Created attachment 11136\ntest fo file", "id": 55319, "time": "2004-04-05T14:08:02Z", "bug_id": 28208, "creation_time": "2004-04-05T14:08:02Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 28208, "text": "There is still a problem concerning the way the PDFRenderer behave when the \ntext of a line comes from different TLM (I'm going to attach a test fo file \nshowing this problem).\n\n[from PDFRenderer.renderText(), /*** comments added ***/]\n  ...\n  if (!textOpen || bl != prevWordY) {\n      /*** this is done for the first fragment ***/\n      /*** and it's OK                         ***/\n      closeText();\n\n      pdf.append(\"1 0 0 -1 \" + (rx / 1000f) + \" \" + (bl / 1000f) + \" Tm \"\n                 + (text.getTSadjust()/1000f) + \" Tw [\" + startText);\n      prevWordY = bl;\n      textOpen = true;\n  } else {\n      // express the space between words in thousandths of an em\n      int space = prevWordX - rx + prevWordWidth;\n      float emDiff = (float) space / (float) currentFontSize * 1000f;\n      // this prevents a problem in Acrobat Reader and other viewers\n      // where large numbers cause text to disappear or default to\n      // a limit\n      if (emDiff < -33000) {\n          /*** this would be OK, but it is not done ***/\n          closeText();\n\n          pdf.append(\"1 0 0 -1 \" + (rx / 1000f) + \" \" + (bl / 1000f) + \" Tm \"\n                     + (text.getTSadjust()/1000f) + \" Tw [\" + startText);\n          textOpen = true;\n      } else {\n          /*** this is done for the following fragments ***/\n          /*** and it is not correct because it uses the***/\n          /*** space adjustment of the first fragment!! ***/\n          pdf.append(Float.toString(emDiff));\n          pdf.append(\" \");\n          pdf.append(startText);\n      }\n  }\n  ...\n\nSo the resulting pdf code contains:\n  ... 4.869 Tw [(fragment 1) 0.0 (fragment 2)] TJ\n      \\------/\n         |\n         space adjustment for the FIRST fragment\ninstead of:\n  ... 4.869 Tw [(fragment 1)] TJ\n  ... 1.853 Tw [(fragment 2)] TJ\n\nI have tried to fix this commenting out the \"if\" and the \"else\" branch, so \nthat each fragment uses its own space adjustment, and it works.\nBut the comment says that the if was done to prevent a problem, so I fear that \nthat problem could arise againg, removing the if.\n\n    Luca", "id": 55376, "time": "2004-04-06T10:34:38Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-04-06T10:34:38Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 28208, "is_private": false, "text": "Created attachment 11151\nfo file having a line whose text comes from 2 different TextLMs", "id": 55377, "time": "2004-04-06T10:36:31Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-04-06T10:36:31Z", "attachment_id": 11151}, {"count": 5, "tags": [], "creator": "bowditch_chris@hotmail.com", "is_private": false, "id": 55392, "attachment_id": null, "bug_id": 28208, "creation_time": "2004-04-06T12:55:55Z", "time": "2004-04-06T12:55:55Z", "text": "Hi Luca,\n\nIm looking at your patch now. I tried removing the IF statement and the effect \nis one part line of text in your 2nd sample is flipped upside down!\n\nInstead I tried keeping the IF statement there, but setting the word spacing \nin both bits, e.g.\n\n            if (emDiff < -33000) {\n                closeText();\n\n                pdf.append(\"1 0 0 1 \" + (rx / 1000f) + \" \" + (bl / 1000f) + \" \nTm \"\n                           + (text.getTSadjust()/1000f) + \" Tw [\" + startText);\n                textOpen = true;\n            } else {\n                pdf.append(Float.toString(emDiff));\n                pdf.append(\" \" + (text.getTSadjust()/1000f) + \" Tw \");\n                pdf.append(startText);\n            }\n\nThis is closer, but the justification is very slightly out on the 2nd \nparagraph. Ill take another look later. Thanks for all your efforts\n\nChris"}, {"count": 6, "tags": [], "bug_id": 28208, "is_private": false, "text": "Hi\n\nThe text upside-down depends on a missing \"-\" that I forgot to correct in the \npatch:\n  [then branch of the if]\n  pdf.append(\"1 0 0 -1 \" + ...\n                    ^^\n\nNow I'm trying to understand what happens with your suggested change.\n\n    Luca\n", "id": 55434, "time": "2004-04-07T07:30:00Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-04-07T07:30:00Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "lfurini@cs.unibo.it", "attachment_id": null, "text": "Hi Chris, I'm here again.\n\nI have done some tests, and it seems to me that a second Tw operand inside the \narray\n  ... Tm 4 Tw [(first fragment ) 0 1 Tw (second fragment of text)] TJ\naffects EVERY space in the array, not only the ones in the following string.\n\nThis is quite counter-intuitive, but you can see this if you look at the pdfs \ngenereted in the two ways we proposed: with your patch it seems that the first \nspace in the second line (which belongs to the first fragment of text) is as \nlong as the other spaces (which belongs to the second fragment), while with \nmine it is visibly longer.\n\nOn this subject, I have a few doubts:\n- is this behaviour (spaces in a same line are sometimes different) \nacceptable? Surely it is easier, as the LineLM has to compute only one \nadjustment factor which every TextLMs involved in the line building uses.\n- if this is ok, then there are problems with fragments of text without spaces \n(this can happen with the last word before a linefeed treated as space, or the \nfirst after); maybe in these cases we could use letter spacing instead of word \nspacing.\n\nLuca", "id": 55452, "time": "2004-04-07T12:17:27Z", "bug_id": 28208, "creation_time": "2004-04-07T12:17:27Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 28208, "text": "Hi Luca,\n\nI had another look at your proposal and ive decided its probably okay to \ndelete the IF statement for emDiff < -33000. We are keeping the case that is \nsupposed to be the work around for the issue described in the comments. So in \ntheory we shouldnt hit the issue. Ive run a few test cases and the \njustification seems to work nicely.\n\nHowever there seems to be an outstanding issue of text-align-last. In your \ntest cases, setting text-align=\"justify\" does not justify the last line, but \nin examples\\fo\\basic\\simple.fo, the last lines are justified even though only \ntext-align=\"justify\" is specified.\n\nFor now, Im happy to apply your patch. Thanks", "id": 55457, "time": "2004-04-07T14:25:08Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2004-04-07T14:25:08Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 28208, "is_private": false, "id": 155538, "creation_time": "2012-04-01T06:27:03Z", "time": "2012-04-01T06:27:03Z", "creator": "gadams@apache.org", "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "attachment_id": null}]
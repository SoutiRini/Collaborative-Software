[{"count": 0, "tags": [], "bug_id": 3199, "attachment_id": null, "id": 4672, "time": "2001-08-21T05:04:03Z", "creator": "mats.bjornlund@capgemini.se", "creation_time": "2001-08-21T05:04:03Z", "is_private": false, "text": "I get OutOfMemoryError when I try to parse larger xml-files (2.4MB) with one \nxsd-file (10KB):\n\n\"Creating DOMParser object ...\nSetting Validation ON ...\n[Start parsing ...\nException in thread \"main\" java.lang.OutOfMemoryError\nat java.util.Hashtable.clone(Hashtable.java, Compiled Code)\nat org.apache.xerces.validators.common.XMLValidator$ValueStoreCache.star\ntElement(XMLValidator.java, Compiled Code)\nat org.apache.xerces.validators.common.XMLValidator.callStartElement(XML\nValidator.java, Compiled Code) at \norg.apache.xerces.framework.XMLDocumentScanner$ContentDispatcher.dispatch\n(XMLDocumentScanner.java, Compiled Code) at \norg.apache.xerces.framework.XMLDocumentScanner.parseSome\n(XMLDocumentScanner.java, Compiled Code) at \norg.apache.xerces.framework.XMLParser.parse(XMLParser.java, Compiled \nCode) at org.apache.xerces.framework.XMLParser.parse(XMLParser.java, Compiled \nCode) at Dparser.parse(Dparser.java, Compiled Code) at Dparser.main\n(Dparser.java, Compiled Code)\"\n\n\nWhen I parse small sized xml-files it works really fine. It complains on the \nright things etc, but for larger xml-files, I get this OutOfMemoryError. \n\n\nMy own written java file look like this:\n\"import org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.xml.sax.SAXException;\nimport java.io.IOException;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.SAXNotRecognizedException;\nimport org.xml.sax.SAXNotSupportedException;\n\npublic class Dparser implements ErrorHandler {\n   private String errOK = \"OK\";\n\n   /** Warning. */\n   public void warning(SAXParseException ex) {\n      System.err.println(\"[Warning] \"+\n                        getLocationString(ex)+\": \"+\n                        ex.getMessage());\n      errOK = \"\";\n   }\n\n   /** Error. */\n   public void error(SAXParseException ex) {\n      System.err.println(\"[Error] \"+\n                        getLocationString(ex)+\": \"+\n                        ex.getMessage());\n      errOK = \"\";\n   }\n\n   /** Fatal error. */\n   public void fatalError(SAXParseException ex) throws SAXException {\n      System.err.println(\"[Fatal Error] \"+\n                        getLocationString(ex)+\": \"+\n                        ex.getMessage());\n      errOK = \"\";\n      throw ex;\n   }\n\n   /** Returns a string of the location. */\n   private String getLocationString(SAXParseException ex) {\n      StringBuffer str = new StringBuffer();\n      String systemId = ex.getSystemId();\n      if (systemId != null) {\n         int index = systemId.lastIndexOf('/');\n         if (index != -1) \n            systemId = systemId.substring(index + 1);\n         str.append(systemId);\n      }\n      str.append(':');\n      str.append(ex.getLineNumber());\n      str.append(':');\n      str.append(ex.getColumnNumber());\n      return str.toString();\n   } // getLocationString(SAXParseException):String\n\n   private static void printUsage() {\n      System.out.println(\"Program:     Dparser\");\n      System.out.println(\"Description: Check if xml-file is wellformed and \nvalidate the schemas.\");\n      System.out.println(\"Syntax:      java \\\"Dparser\\\" [-v] <xmlfile>\");\n      System.out.println(\"             -v     No validation of the schemas are \ndone\");\n   }\n\n   /** Doing the parsing job for this class */\n   private void parse(String xmlFile, boolean validation) {\n      System.out.println(\"Creating DOMParser object ...\");\n      DOMParser parser = new DOMParser();\n      try {\n         parser.setErrorHandler(this); \n         if (validation) {\n            System.out.println(\"Setting Validation ON ...\");\n            parser.setFeature(\"http://xml.org/sax/features/validation\", true);\n         } else {\n            System.out.println(\"No validation will be done.\");\n         }\n         System.out.println(\"[Start parsing ...\");\n         parser.parse(xmlFile);\n         System.out.println(\"... parsing Done] \"+errOK);\n      } catch (SAXNotSupportedException e) {\n         System.out.println(\"ERROR: SAXNotSupportedException throwned !\");\n      } catch (SAXNotRecognizedException e) {\n         System.out.println(\"ERROR: SAXNotRecognizedException throwned !\");\n      } catch (SAXException se) {\n         System.out.println(\"Error: NOT WELLFORMED ! \\n[\");\n         se.printStackTrace();\n         System.out.println(\"] ERROR:\"+xmlFile+\" is NOT WELLFORMED !\");\n      } catch (IOException ioe) {\n         ioe.printStackTrace();\n      }\n      Document document = parser.getDocument();\n   }   \n\n   /** Main program. Validate the xml-file and also check the xsd-files */\n   public static void main(String [] args) {\n   /*   String xmlFile = \"xsdtest.xml\"; */\n      String xmlFile = \"\";\n      boolean validation = true;\n      if (args.length==0) {\n         Dparser.printUsage();\n         System.exit(0);\n      } else if (args.length == 1) {\n         xmlFile = args[0];\n      } else if (args.length == 2) { // Two parameters\n         if (args[0].equals(\"-v\") || args[0].equals(\"-V\")) {\n            validation = false;\n            xmlFile = args[1];\n         } else {\n            System.out.println(\"Error: Wrong parameter \\\"\"+args[0]+\"\\\".\\n\");\n            Dparser.printUsage();\n            System.exit(0);\n         }\n      } else {\n         System.out.println(\"Error. Wrong parameters. \\n\");\n         Dparser.printUsage();\n         System.exit(0);\n      }\n      Dparser p = new Dparser(); \n      p.parse(xmlFile, validation);\n   }\n}\"\n\n1. I use the DOM parser\n2. The memory is like this:\n\"AXP AF 092%> show work\nWorking Set (pagelets)  /Limit=10000  /Quota=250000  /Extent=250000\nAdjustment enabled      Authorized Quota=250000  Authorized Extent=250000\nWorking Set (8Kb pages) /Limit=625  /Quota=15625  /Extent=15625\nAuthorized Quota=15625  Authorized Extent=15625\"\n\nJava version:\n\"AXP AF 092%> java -version\njava version \"1.2.2-3\"\nClassic VM (build J2SDK.v.1.2.2-3:10/31/2000-08:52, native threads, jit_122)\nAXP AF 092%>\""}, {"count": 1, "tags": [], "creator": "mats.bjornlund@capgemini.se", "attachment_id": null, "id": 4673, "time": "2001-08-21T05:12:10Z", "bug_id": 3199, "creation_time": "2001-08-21T05:12:10Z", "is_private": false, "text": "To be able to use the files in the xerces.jar files I had to extract the files \nothervise the compiler couldent find the files in tha JAR-file. I tried to set \nCLASSPATH and also tried JAVA$CLASSPATH. I have also tried to use -classpath \noption parameter when compiling. Nothing worked, soo it ended up that I \nextracted all files. Then the compiler could find them when I dident worked \nagainst the JAR-file.\n\nI could then compile and parse small xml-files without any problems, BUT when I \nwork against larger files (2.4MB) then the OutOfMemory problem starts. And we \nhave xml-files that are as big as over 20MB. Soo for us it is critical that we \ncan run larger files."}, {"count": 2, "tags": [], "bug_id": 3199, "attachment_id": null, "id": 4721, "time": "2001-08-22T02:25:09Z", "creator": "mats.bjornlund@capgemini.se", "creation_time": "2001-08-22T02:25:09Z", "is_private": false, "text": "I can now parse the xml-file but I have to allocate ALOT of memory when \nstarting the program. To be able to parse a 2.4MB file I have to use 40-\n70MB \"ram\". That is alot, we have to handle 30MB files, soo that could be a \nproblem. Well, I shall now try to implement the SAX parser hoping that it is \nfaster and also spending much less memory. Parsing a 600KB file takes 40sec, \nbut parsing a 2.4MB file takes 3 minutes.\n\n/Mats\n"}]
[{"count": 0, "tags": [], "creator": "mail.twerner@googlemail.com", "attachment_id": null, "id": 135286, "time": "2010-03-11T21:37:15Z", "bug_id": 48894, "creation_time": "2010-03-11T21:37:15Z", "is_private": false, "text": "Please have a look at <http://svn.debian.org/viewsvn/pkg-java/trunk/ant/debian/patches/>. There is a patch 0010-fix-bus-error-in-gij.patch that fixes this problem. Please consider applying it.\n\nWhen you are at it: may you check the other patches, too? Maybe you can apply parts of it?"}, {"count": 1, "tags": [], "bug_id": 48894, "is_private": false, "text": "Created attachment 25117\n[PATCH] Fix bus overflow", "id": 135288, "time": "2010-03-11T22:19:43Z", "creator": "ludovic.claude@laposte.net", "creation_time": "2010-03-11T22:19:43Z", "attachment_id": 25117}, {"count": 2, "tags": [], "text": "The Bus overflow error is in gij, not in ant. Javadoc of FileChannel explicitly states:\n\nFewer than the requested number of bytes are transferred if this channel's file contains fewer than count bytes starting at the given position, or if the target channel is non-blocking and it has fewer than count bytes free in its output buffer.\n\nAnd also:\nThis method is potentially much more efficient than a simple loop that reads from this channel and writes to the target channel. Many operating systems can transfer bytes directly from the filesystem cache to the target channel without actually copying them. \n\nApplying this fix won't fix the bus overflow in gij, and may increase the requested copy buffer size to the entire file size. Again even if we did this, and an in-memory buffer is necessary, the actual buffer size used would be up to the FileChannel, and be the resposibility of the FileChannel.\n\nWill apply this patch, but please put the bus error bug in debian back where it belongs (gij).\n\ncommited in:\nhttp://svn.apache.org/viewvc?rev=922179&view=rev", "is_private": false, "bug_id": 48894, "id": 135295, "time": "2010-03-12T08:45:55Z", "creator": "jkf@apache.org", "creation_time": "2010-03-12T08:45:55Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 48894, "text": "The bug in gij is reported here: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=571532 and it contains some extra information.", "id": 135296, "time": "2010-03-12T08:51:26Z", "creator": "mail.twerner@googlemail.com", "creation_time": "2010-03-12T08:51:26Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "jkf@apache.org", "text": "also there the \"blame\" is put on ant\nant tries to mmap stdin (not true, ant does not mmap at all, the underlying implementation of FileChannel in the virtual machine does (strange though a file channel on stdin?) (or in case the code is compiled the corresponding  )\n\nFrom the bug report:\nIf ant mmap's a file that has only 1701 bytes, on an architecture with\npage size of 4906, then any access beyond the first page will cause a\nSIGBUS.\n\nant does not mmap, the native code behind the FileChannel implementation does.\n\nThe problem is that FileUtils.BUF_SIZE (8192)\nis currently bigger than page size (4096)...\n\nthe buf size in ant is larger than the page size, again responsibility of the implementation of the FileChannel, not the responsibility of ant.\n\nApparently there is a bug in gij or its libraries, ant may trigger that bug, but please issue the bug to gij again.\n\nAccording to the FileChannel documentation it is explicitly allowed to provide a larger count than the (remaining) size of the originating file. If gij and its libraries do not follow that contract it is a bug in gij, not in ant.", "id": 135297, "time": "2010-03-12T09:11:21Z", "bug_id": 48894, "creation_time": "2010-03-12T09:11:21Z", "is_private": false, "attachment_id": null}]
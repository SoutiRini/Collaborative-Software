[{"count": 0, "tags": [], "creator": "kpreisser@apache.org", "is_private": false, "text": "See thread on users list [1]:\n\nTomcat's current implementation of RemoteEndpoint.Async#sendText(String, SendHandler) can cause StackOverflowErrors (and seems to contradict Oracle's JavaDoc).\n\nIn Tomcat, Async#sendText(...) seems to implemented so that when it could send all of the data immediately, then it directly calls SendHandler#onResult(...); whereas when it couldn't send the data immediately, the SendHandler will be called from another thread.\n\nOracle's javadoc for RemoteEndpoint.Async says:\n\n\"The completion handlers for the asynchronous methods are always called with a different thread from that which initiated the send.\"\n\nNow, imagine the case that you want to send 10000 very small text messages to a client (very unlikely, but possibly could happen). With synchronous I/O (RemoteEndpoint.Basic), you would do this in this way:\n\n        RemoteEndpoint.Basic basic = session.getBasicRemote();\n        for (int i = 0; i < 10000; i++) {\n            basic.sendText(\"Hi, Count: \" + i);\n        }\n\nIn this case, there is no problem.\n\nNow imagine you want to do this asynchronously (using a Callback to be informed when sending is completed), then you could do it this way (e.g. put the following code in onOpen() method of Tomcat's EchoEndpoint example):\n\n        final AtomicInteger aint = new AtomicInteger();\n        final RemoteEndpoint.Async async = session.getAsyncRemote();\n        \n        SendHandler handler = new SendHandler() {\n            @Override\n            public void onResult(SendResult result) {\n                int nextVal = aint.incrementAndGet();\n                if (nextVal < 10000) {\n                    async.sendText(\"Hi, Count: \" + nextVal, this);\n                }\n            }\n        };\n        async.sendText(\"Hi, Count: \" + aint.get(), handler);\n\nThe problem here is that because the messages are very short, Tomcat will be able to send them immediately, calling the SendHandler#onResult() directly from Async.sendText(), which will eventually cause a StackOverflowError.\n\nI think if SendHandler#onResult() was always called from a different thread than the one which calls Async.send... (like the Javadoc says), then although the performance would probably be worse, StackOverflowErrors shouldn't occur.\n\n\n[1] http://markmail.org/message/gpxzdwtxtrpynvux", "id": 170884, "time": "2013-10-28T15:34:56Z", "bug_id": 55715, "creation_time": "2013-10-28T15:34:56Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Thanks for the report.\n\nThis has been fixed in trunk for 8.0.0-RC6 and 7.0.x for 7.0.48.", "is_private": false, "id": 170928, "creator": "markt@apache.org", "time": "2013-10-30T11:24:40Z", "bug_id": 55715, "creation_time": "2013-10-30T11:24:40Z", "attachment_id": null}]
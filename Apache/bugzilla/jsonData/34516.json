[{"count": 0, "tags": [], "text": "The problem:\n\nIf unit test .\\src\\GoogleHelperTest.java is running under ant junit task \n(http://ant.apache.org) or executed via classworlds \n(http://classworlds.codehaus.org) mechanizm (in all cases used custom class \nloader) JVM crashes. GoogleHelperTest uses JNI from .\\dll\\jacob.dll \n(http://danadler.com/jacob). \n\nWhere the problem? I don't know! It could be in dll or in custom classloader\nor in JVM.\n\nFor more info look at bugreport.txt in \nhttp://www.ispras.ru/~barancev/bugreport.zip", "attachment_id": null, "id": 73792, "creator": "sergg@kazbek.ispras.ru", "time": "2005-04-19T12:29:01Z", "bug_id": 34516, "creation_time": "2005-04-19T12:29:01Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 34516, "is_private": false, "id": 73793, "time": "2005-04-19T12:48:46Z", "creator": "stevel@apache.org", "creation_time": "2005-04-19T12:48:46Z", "tags": [], "text": "Sergey,\n\nI dont think this is something we can handle. JNI code means that native\nlibraries are loading, and if there is something wrong there, then the JVM is\nformally toast. Note also that JNI libs are outside what classloaders get up to;\nif a DLL is loaded in one classloader, that is the only lib instance that is\nloaded into that process, for the duration of that JVM. If tests are loading and\nunloading things, I can imagine stuff getting confused.\n\nMy recommendation is fork, dont worry about the possible performance hit. That\nway you can also be sure that different tests run with new DLLs loaded. There is\nalso some JVM system property you can set to point to the library location; no\nneed to copy the library into the PATH."}, {"count": 2, "tags": [], "creator": "ddevienne@lgc.com", "attachment_id": null, "text": "FYI, the JVM system property to set is \"java.library.path\". If jocab.dll has \nonly system dll dependencies, locating it using \"java.library.path\" is enough. \nYou need to resort to os-specific Path/LD_LIBRARY_PATH to resolve dependencies \nof the JNI dlls/sos only; And as Steve said, System.loadLibrary() 'transcends' \nclassloaders and is global for the whole VM. So just fork it ;-) --DD", "id": 73807, "time": "2005-04-19T15:42:49Z", "bug_id": 34516, "creation_time": "2005-04-19T15:42:49Z", "is_private": false}, {"count": 3, "tags": [], "creator": "stevel@apache.org", "is_private": false, "id": 73821, "creation_time": "2005-04-19T17:00:11Z", "time": "2005-04-19T17:00:11Z", "bug_id": 34516, "text": "I should add that if ever Java gets Open Sourced, replacing ::LoadLibrary with\n::LoadLibraryEx( LOAD_WITH_ALTERED_SEARCH_PATH) in the C/C++ bit would be enough\nto fix up the DLL loading to load  downward dependencies \n\nhttp://msdn.microsoft.com/library/en-us/dllproc/base/loadlibraryex.asp", "attachment_id": null}, {"count": 4, "tags": [], "creator": "mbenson@apache.org", "is_private": false, "id": 75532, "creation_time": "2005-05-27T20:55:28Z", "time": "2005-05-27T20:55:28Z", "bug_id": 34516, "text": "hard to categorize this one, I'll say fork WORKSFORME", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 34516, "attachment_id": 18836, "id": 93171, "time": "2006-09-07T20:27:18Z", "creator": "az_azday@yahoo.com", "creation_time": "2006-09-07T20:27:18Z", "is_private": false, "text": "Created attachment 18836\nEroor\n\nEroor"}, {"count": 6, "tags": [], "text": "what the hell was that?", "is_private": false, "id": 93172, "creator": "mbenson@apache.org", "time": "2006-09-07T20:29:59Z", "bug_id": 34516, "creation_time": "2006-09-07T20:29:59Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 34516, "attachment_id": 18836, "is_private": false, "id": 93748, "time": "2006-09-18T17:00:40Z", "creator": "az_azday@yahoo.com", "creation_time": "2006-09-18T17:00:40Z", "text": "Comment on attachment 18836\nEroor\n\nheloo"}]
[{"count": 0, "tags": [], "bug_id": 51027, "is_private": false, "text": "Currently my client is using Weblogic Platform along with log4j to do the logging for their added on system module.\n\nSo far we have been randomly hitted with Stuck threads in weblogic and Oracle support has highlighted that the issue to this is due to the deadlock with RollingFileAppender.\n\nIs there a fix to this?\n\nThanks\n\n\"[STUCK] ExecuteThread: '68' for queue: 'weblogic.kernel.Default (self-tuning)'\" daemon prio=7 tid=004b0cc0 nid=911 lwp_id=4390440 waiting for monitor entry [46a40000..46a40bd0]\nat org.apache.log4j.Category.callAppenders(Category.java:185)\n- waiting to lock <75980e20> (a org.apache.log4j.Logger)\nat org.apache.log4j.Category.forcedLog(Category.java:372)\nat org.apache.log4j.Category.info(Category.java:674)\nat com.starhub.bss.common.ta.TALogger.log(TALogger.java:110)\nat com.starhub.bss.spl.web.common.ProcessDefinitionBase.log(ProcessDefinitionBase.java:91)\nat com.starhub.bss.spl.web.instructionmanager.control.CtrlDBFormOrderImpl.printOrderDAO(CtrlDBFormOrderImpl.java:565)\nat com.starhub.bss.spl.web.instructionmanager.control.CtrlDBFormOrderImpl.getOrderXML(CtrlDBFormOrderImpl.java:303)\nat com.starhub.bss.spl.web.instructionmanager.control.CtrlDBFormOrderBean.getOrderXML(CtrlDBFormOrderBean.java:204)\nat sun.reflect.GeneratedMethodAccessor1032.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat com.bea.wli.knex.runtime.jcs.container.JcsProxy.invokeBeehiveControl(JcsProxy.java:666)\nat com.bea.wli.knex.runtime.jcs.container.JcsProxy.invoke(JcsProxy.java:433)\nat $Proxy202.getOrderXML(Unknown Source)\nat com.starhub.bss.eai.integration.web.billingprovision.BillingProvision.ctrlDBFormOrderGetOrderXML(BillingProvision.java:407)\nat sun.reflect.GeneratedMethodAccessor1031.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nat java.lang.reflect.Method.invoke(Method.java:585)\nat com.bea.wli.bpm.runtime.Perform.invoke(Perform.java:39)\nat com.bea.wli.bpm.runtime.Perform.execute(Perform.java:50)\nat com.bea.wli.bpm.runtime.Receive.messageDelivery(Receive.java:93)\nat com.bea.wli.bpm.runtime.ProcessState.processMessage(ProcessState.java:217)\nat com.bea.wli.bpm.runtime.ProcessState.dispatchRequest(ProcessState.java:241)\nat com.bea.wli.bpm.runtime.JpdContainer.dispatchProcessRequest(JpdContainer.java:1077)\nat com.bea.wli.bpm.runtime.JpdContainer.preInvoke(JpdContainer.java:1041)\nat com.bea.wli.knex.runtime.core.container.Invocable.invoke(Invocable.java:248)\nat com.bea.wli.bpm.runtime.JpdContainer.invoke(JpdContainer.java:814)\nat", "id": 145574, "time": "2011-04-06T02:50:15Z", "creator": "jazz_003@hotmail.com", "creation_time": "2011-04-06T02:50:15Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Support questions should go on log4j-users@apache.org.  There may be a bug in there, but there is not enough to determine what it is or where it lies.  Your thread dump was truncated.  The thread stack that was shown is expected when another thread is in the process of logging.  What is needed is to see the stack trace on the other thread which apparently holds a lock on logger.  If there is a call inversion, there could be a deadlock.\n\nIn addition, it is always good to report the version of log4j in use and whether the behavior occurs with the current release version and extra points if the current SVN head is tested.  Operating system and JVM can also be helpful.\n\nMarking as invalid, please post again on log4j-user with more info.", "is_private": false, "bug_id": 51027, "id": 145613, "time": "2011-04-07T01:02:47Z", "creator": "carnold@apache.org", "creation_time": "2011-04-07T01:02:47Z", "attachment_id": null}]
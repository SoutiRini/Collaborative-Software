[{"count": 0, "tags": [], "bug_id": 49990, "attachment_id": null, "id": 140116, "time": "2010-09-23T12:57:31Z", "creator": "fgaliegue@gmail.com", "creation_time": "2010-09-23T12:57:31Z", "is_private": false, "text": "In a virtual host definition, I have the following:\n\n----\nExpiresActive On\n\nExpiresDefault \"now\"\n[...]\nExpiresByType application/x-javascript \"access plus 1 month\"\n\n<Location \"/cockpit/d\">\n    ExpiresDefault \"now\"\n</Location>\n----\n\nThe problem here is that the ExpiresByType directive has \"sneaked\" into the the <Location> section. The documentation says: \"It overrides, for the specified MIME type only, any expiration date set by the ExpiresDefault  directive.\". However, it doesn't explicitly state that this override occurs _in all contexts_ (Location, Directory).\n\nThis can be particularly painful by times, if we want to use mod_expires in quite complex Web applications where the expiration policy for the same MIME types can differ depending on the location (here, /js/t.js wants to be cached, but /cockpit/d/t.js doesn't). And in fact, I believed that specifying ExpiresDefault in a Location section would override all previous ExpiresDefault and ExpiresByType - it only overrides ExpiresDefault, though.\n\nSo, there are two ways of modifying the behaviour:\n\n* either ExpiresDefault, when define inside a \"subsection\", _does_ override ExpiresByType as well;\n* or implement an ExpiresActive reset, which could allow one to write:\n\n<Location \"/cockpit/d\">\n    ExpiresActive reset\n    ExpiresDefault \"now\"\n</Location>\n\nwith the following behavior:\n  - if no ExpiresDefault or ExpiresByType exist in the subsection, obey the already existing ExpiresDefault and ExpiresByType directives;\n  - if ExpiresDefault is present, obsoletes existing ExpiresByType directives (along with overriding any existing ExpiresDefault directive as it does currently)."}]
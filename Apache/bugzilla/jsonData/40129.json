[{"count": 0, "tags": [], "bug_id": 40129, "text": "When one uses a the -D switch on the command line to set the \nbasedir property from outside, then relative paths are calculated\ndifferently from when basedir is simply assumed as \".\"\n\nThis behaviour only occurs when the path is prepended \nby ${basedir}. The paths are set by properties used in\na fileset. \n\nPlease see the little \"test case\" attached. It is a small\ndirectory structure:\n\nupdir-test\nupdir-test/res\nupdir-test/build\nupdir-test/build/node\n\nThere are two short build.xml files in the uppermost and \nthe lowest dir. They are identical (upper is symlink, actually).\n\nBoth scripts are supposed to have build/node as basedir, but \none lies two levels higher and gets the -Dbasedir=build/node \nargument.\n\nSo I suppose they should behave the same, but the one with \ncl argument fails. The test.sh script makes those calls as\na test. (Test was run under Linux.)", "id": 91665, "time": "2006-07-27T20:36:30Z", "creator": "florian.ebeling@gmail.com", "creation_time": "2006-07-27T20:36:30Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "florian.ebeling@gmail.com", "text": "Created attachment 18654\ntest case: dir structure, short build.xml + 1 symlink, shell script to call those", "id": 91666, "time": "2006-07-27T20:39:57Z", "bug_id": 40129, "creation_time": "2006-07-27T20:39:57Z", "is_private": false, "attachment_id": 18654}, {"count": 2, "tags": [], "bug_id": 40129, "text": "Interesting. I thought maybe it was from using property value and not property\nlocation bindings, but changing that shows the same problem\n\n<project name=\"dir-up-test\" default=\"all\">\n  <property name=\"super-super-fail\" location=\"${basedir}/../../res\" />\n  <property name=\"super-super-ok\" location=\"../../res\" />\n\n  <target name=\"print\">\n    <echo message=\"basedir:          ${basedir}\" />\n    <echo message=\"super-super-fail: ${super-super-fail}\" />\n    <echo message=\"super-super-ok:   ${super-super-ok}\" />\n  </target>\n\n  <target name=\"bug\">\n    <copy todir=\".\">\n      <fileset dir=\"${super-super-fail}\" />\n    </copy>\n  </target>\n\n  <target name=\"ok\">\n    <copy todir=\".\">\n      <fileset dir=\"${super-super-ok}\" />\n    </copy>\n  </target>\n\n  <target name=\"all\" depends=\"print,ok,bug\" />\n</project>\n\nC:\\Java\\Apache\\Ant\\incoming\\updir-test>ant -Dbasedir=build/node\nBuildfile: build.xml\n\nprint:\n     [echo] basedir:          build/node\n     [echo] super-super-fail: C:\\Java\\Apache\\Ant\\incoming\\updir-test\\build\\node\\\nres\n     [echo] super-super-ok:   C:\\Java\\Apache\\Ant\\incoming\\updir-test\\res\n\nok:\n\nbug:\n\nBUILD FAILED\nC:\\Java\\Apache\\Ant\\incoming\\updir-test\\build.xml:12: C:\\Java\\Apache\\Ant\\incoming\n\\updir-test\\build\\node\\res not found.\n\nTotal time: 0 seconds\n\nThat is, <property name=\"super-super-fail\" location=\"${basedir}/../../res\" />\n\nis resolving (incorrectly) to C:\\Java\\Apache\\Ant\\incoming\\updir-test\\build\\node\\res\n\nthoughts, anyone?", "id": 91690, "time": "2006-07-28T10:40:53Z", "creator": "stevel@apache.org", "creation_time": "2006-07-28T10:40:53Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 40129, "text": "Refer to the test.sh attached by \n\nCase 1:\n\ncd build/node\nant\n\nHere we don't pass the basedir property, so it is set by the Project class by\nparsing the build.xml\n\nCase 2:\ncd ../..\nant -Dbasedir=build/node\n\nHere basedir is passed using -D option. Properties passed using -D are JVM\nproperties and not Ant properties, i.e the JVM will set the system properties\nbefore it loads Ant MainClass.\n\nIt is by design that ant doesn't overwrite the properties already set, since JVM\ndoesn't do autoconvertion os strings to paths lkie ant, the basedir property is\nset to a TEXT valu of build/node.\n\nConsider\n<property name=\"xxxx\" location=\"yyyy\"/> here the absolute path of yyyy will be\nassigned to the property name xxxx, however since JVM doesn't know the specific\ntype of the property using -Dxxxx=yyyy won't translate the value to a absolute path.\n\nif basedir needs to be passed to ant using -D then make sure you set the value\nto the absolute path.\n", "id": 96906, "time": "2006-12-13T19:46:01Z", "creator": "hrishikesh.date@gmail.com", "creation_time": "2006-12-13T19:46:01Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 40129, "text": "(In reply to comment #3)\n> It is by design that ant doesn't overwrite the properties already set, since JVM\n> doesn't do autoconvertion os strings to paths lkie ant, the basedir property is\n> set to a TEXT valu of build/node.\n> \n> Consider\n> <property name=\"xxxx\" location=\"yyyy\"/> here the absolute path of yyyy will be\n> assigned to the property name xxxx, however since JVM doesn't know the specific\n> type of the property using -Dxxxx=yyyy won't translate the value to a absolute\npath.\n\nOk, then a runtime error, or at very least a warning \nis warranted. Because that means the properties namespace is\nalready polluted from an ant point of view, with an \nincompatible object. Since the basedir is the origin\nfrom which all operations are performed, but it can't be\ndetermined, the configuration should for sure considered broken.\n\n> if basedir needs to be passed to ant using -D then make sure you set the value\n> to the absolute path.\n\nHow comes _this_ makes a difference, all of a sudden?!\nDoes a leading slash change the rules you mentioned \nabove? \n\nThe distinction between \"location\" and string values isn't\nconvincing anyway, since all OSes used today use strings to\ndesignate files and directories. ", "id": 96909, "time": "2006-12-14T00:37:41Z", "creator": "florian.ebeling@gmail.com", "creation_time": "2006-12-14T00:37:41Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "text": "The code in ScriptingVariableVisitor#setScriptingVars is attempting to fix a\nlong-standing problem whereby tags within other tags cannot declare scripting\nvariables twice (due to the same Java scope) and yet tags that are scoped within\ndifferent parent tags *must* redeclare the variable.  This is handled by the\nfollowing snippet of code:\n\t\t    \n\t\t    Integer currentRange = (Integer) scriptVars.get(varName);\n\t\t    if (currentRange == null\n\t\t\t    || ownRange.compareTo(currentRange) > 0) {\n\t\t\tscriptVars.put(varName, ownRange);\n\t\t\tvec.add(varInfos[i]);\n\t\t    }\n\nThe problem with this code is that it ignores the fact that java scriptlets may\nhave defined explicit code blocks, limiting the visibility of a scripting\nvariable more than this particular piece of code can ever realize.  Because of\nthe need to handle this situation, all of our tags take an optional attribute\n\"declareVariables\" and have for many years.  The above snippet of code breaks\nvalid JSP's that have worked for us on the 4.0.x series of Tomcat.  Despite the\nfact that it is not considered good \"form\" to use significant Java code in\nJSP's, it is certainly allowed.  We have legacy applications that we cannot\nchange for various reasons.\n\nUnderstanding that there is a real problem to be solved here (which we solved a\ndifferent way), I'm wondering if I can suggest solving this dilemma by\nintroducing a new servlet initialization parameter to control whether the above\ncheck is done or not.  The default value could be true so that the check above\ncan continue to be done, but allowing us to override the configuration in\nweb.xml to turn this check off.\n\nAt this point, we have to drop back to the 4.0.x series of Tomcat to avoid this\nproblem.  We would very much like to use the new, better performing 4.1.x\nseries, but will have to wait until a reasonable solution can be found to this\nproblem.", "bug_id": 13081, "is_private": false, "id": 23544, "time": "2002-09-27T14:51:14Z", "creator": "craig.setera@kingland.com", "creation_time": "2002-09-27T14:51:14Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 23545, "time": "2002-09-27T14:57:44Z", "bug_id": 13081, "creation_time": "2002-09-27T14:57:44Z", "is_private": false, "text": "Quite frankly, this is more likely to get fixed by fixing the spec rather than\nfixing Tomcat. Of course, the spec / Jasper gurus have the final word.\nAnyway, if I were you, I'd plan to either stick with Jasper 1 (I would use TC\n4.1.12 + Jasper 1, as detailed in the 4.1.12 release notes, to get more\nreliability and performance) or fix my code (I think refactoring to get good\ncode can't hurt in the long run)."}, {"count": 2, "text": "Remy,\n\nThanks for the response.  I understand what you are getting at.  Unfortunately,\nalthough we would like to go strictly tags based, some of the platforms that we\nare trying to run on don't do tags very well... The extra generated code in the\nJSP servlets absolutely kills performance.  Until we can remove support for that\nplatform, we are stuck with a mix of Java scriplets and tags in some cases. \nThat is our reality.  \n\nI can take a look at using Jasper1 with 4.1.12, but unfortunately Jasper2 does\nsome nice new code generation that would further help our performance in the\ncases that we do tags.  We would like to be able to take advantage of that.\n\nAs for the spec, you can certainly argue this one either way.  I agree that\nclarification is probably necessary.  I would also say that I believe as long as\nJava scriptlets are allowed in the pages by spec, that the page generation\nshould not be allowed to do anything that would break because of that.", "bug_id": 13081, "is_private": false, "id": 23548, "time": "2002-09-27T15:12:54Z", "creator": "craig.setera@kingland.com", "creation_time": "2002-09-27T15:12:54Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "creator": "jan.luehe@sun.com", "attachment_id": null, "is_private": false, "id": 23695, "time": "2002-10-01T16:48:22Z", "bug_id": 13081, "creation_time": "2002-10-01T16:48:22Z", "text": "See evaluation of 13132 for additional information.\n"}, {"count": 4, "tags": [], "creator": "craig.setera@kingland.com", "is_private": false, "id": 23704, "creation_time": "2002-10-01T18:21:20Z", "time": "2002-10-01T18:21:20Z", "bug_id": 13081, "text": "This problem is mostly unrelated to bug 13132 referenced in the last comment. \nThis is extremely easy to reproduce and I believe still well within the scope of\nthe JSP specification.  Take for instance a very simple snippet of JSP code:\n\n<prefix:outerTag>\n<prefix:innerTag id=\"x\" />\n<prefix:innerTag id=\"x\" />\n</prefix:outerTag>\n\nThis snippet will work fine in 4.1.x, but with one minor modification the page\nwill no longer compile.\n\n<prefix:outerTag>\n<% if (true) { %>\n<prefix:innerTag id=\"x\" />\n<% } %>\n<prefix:innerTag id=\"x\" />\n</prefix:outerTag>\n\nWe have this in our pages.  Even in our pages that are made up almost entirely\nof tags, we have conditional statements like this.  We feel that they are\nREQUIRED because the overhead of the generated code required to invoke a tag is\ntoo high when compared to a simple conditional check such as this.  \n\nAs long as scriptlets are supported in JSP, this construct should be handled\ncorrectly by Jasper or at least be made to conditionally handle this situation\nvia a configuration mechanism as I suggest in the original bug comments.  I\nwould be more than willing to put together a patch for this configurable\nsupport, if it would be accepted by the development team.  Otherwise, it isn't\nworth my time to build a patch and be constantly out of sync with the base\nTomcat codebase.", "attachment_id": null}, {"count": 5, "tags": [], "text": "I do believe the problem stated in 13132 does apply to your situation. Remember\n13132 started out with this code fragment:\n\n<% if (condition) { %>\n<i18n:message key=\"some.key\" id=\"myID\"/>\n<% } else { %>\n<i18n:message key=\"some.other.key\" id=\"myID\"/>\n<% } \n%>\n\nwhich is exactly what you are trying to do. The purpose of the example I gave in\nthe evaluation of 13132 is to show that some developers may rely on AT_END\nvariables to be declared after the call to the tag handler's doEndTag() method,\nso that a nested tag may declare an AT_END variable of the same name, but with a\ndifferent type than an AT_END variable declared by the enclosing tag.\n\nWould the workaround that I suggested for bug 13132 work for you, i.e., do\nsomething like the following:\n\n<prefix:outerTag>\n<% if (true) { %>\n<prefix:innerTag id=\"x\" />\n<% } %>\n<prefix:innerTag id=\"y\" />\n</prefix:outerTag>\n\nI am little reluctant adding a configuration property for this, as it would not\nbe portable across containers.\n", "is_private": false, "bug_id": 13081, "id": 23715, "time": "2002-10-01T19:46:26Z", "creator": "jan.luehe@sun.com", "creation_time": "2002-10-01T19:46:26Z", "attachment_id": null}, {"count": 6, "text": "\n\n*** This bug has been marked as a duplicate of 13132 ***", "bug_id": 13081, "attachment_id": null, "id": 23844, "time": "2002-10-03T16:18:03Z", "creator": "jan.luehe@sun.com", "creation_time": "2002-10-03T16:18:03Z", "tags": [], "is_private": false}]
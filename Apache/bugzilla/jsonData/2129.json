[{"count": 0, "tags": [], "bug_id": 2129, "text": "This is a real weird one:\n \n(xerces 1.4.0 and CVS from 11-Jun-01, validation with sample program \ndom.DOMWriter, flags -v -f, seen on Linux 2.4.x/Java 1.3/gcc 2.95.2 \nand Solaris 8/Java 1.2.1)\n\nThe following document references two named types from a schema which is\ncomposed of two subschemata imported into the coupling schema. The validator  \nmixes up the types of the two namespaces, so a wrong validation result is \ndelivered. I'm not completely shure if my schemas are entirely correct\n(but who is ...), but in either case the behaviour of the parser is wrong \n(at least some clarifying error message would be expected instead of \nwrong results). \nI found in the schema:structures W3C recommendation that\na parser may ignore a second import, but close inspection\nof the (really hard to read) constraints shows that this only applies to\na second import of the same namespace, not a different one.\n\nHere are the results for the attached collection of schemas:\n   ame   wisa           expected                      seen\n------------------------------------------------------------------------\n    D     D      ame invalid, wisa valid      ame invalid, wisa invalid\n    D     T      ame invalid, wisa invalid    ame invalid, wisa valid\n    T     T      ame valid  , wisa invalid    ame valid  , wisa valid\n    T     D      ame valid  , wisa valid      ame valid  , wisa invalid\n------------------------------------------------------------------------\nIn all cases wisa:val is validated with the ame:valid restriction pattern. \nIf I exchange the order of the import statements, it's just the other way \nround. But if I declare the wisa:val type as a, say, fixed string, that \nstring correctly appears in the output (as all entries are correctly echoed \nto the output in this example). The severe thing here is that the types are\nmixed up although they have not only different namespaces, but also different\nnames !\nThe problem is stable when variying references (prefixing element or type\nreferences, varying default namespace).\n\n============== The document: ============================================\n<?xml version=\"1.0\"?>\n<imk2:root xmlns:imk2=\"http://www-imk.fzk.de/imk2/\"\n           xmlns:ame=\"http://www-imk.fzk.de/imk2/ame/\"    \n           xmlns:wisa=\"http://www-imk.fzk.de/imk2/wisa/\"    \n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://www-imk.fzk.de/imk2/ oh.xsd\">\n\n<!-- ame\"D\" is invalid content, wisa\"D\" is valid --> \n\n<ame:valid>D</ame:valid>\n<wisa:val>D</wisa:val>\n\n</imk2:root>\n================= The coupling schema oh.xsd =======================\n\n<?xml version=\"1.0\"?>\n<schema targetNamespace=\"http://www-imk.fzk.de/imk2/\"\n        xmlns:imk2=\"http://www-imk.fzk.de/imk2/\"\n        xmlns:wisa=\"http://www-imk.fzk.de/imk2/wisa/\"\n        xmlns:ame=\"http://www-imk.fzk.de/imk2/ame/\">     \n\n <import namespace=\"http://www-imk.fzk.de/imk2/ame/\"\n         schemaLocation=\"file:ame.xsd\"/>\n <import namespace=\"http://www-imk.fzk.de/imk2/wisa/\n         schemaLocation=\"file:wisa.xsd\"/>\n\n<element name=\"root\" type=\"imk2:rootType\"/>\n\n<complexType name=\"rootType\">\n  <sequence>\n     <element ref=\"ame:valid\"/>\n     <element ref=\"wisa:val\"/>\n  </sequence>\n</complexType>\n</schema>\n===================== Base schema ame.xsd ===========================\n<?xml version=\"1.0\"?>\n<schema targetNamespace=\"http://www-imk.fzk.de/imk2/ame/\"\n        xmlns:ame=\"http://www-imk.fzk.de/imk2/ame/\">\n\n<element name=\"valid\">\n<simpleType>\n  <restriction base=\"string\">\n     <pattern value=\"(T|F)\"/>\n  </restriction>\n</simpleType>\n</element>\n\n</schema>\n======================= Base schema wisa.xsd =======================\n<?xml version=\"1.0\"?>\n<schema targetNamespace=\"http://www-imk.fzk.de/imk2/wisa/\"\n        xmlns:wisa=\"http://www-imk.fzk.de/imk2/wisa/\">\n \n<element name=\"val\">\n  <simpleType>\n     <restriction base=\"string\">\n        <pattern value=\"(D|K)\"/>\n     </restriction>\n  </simpleType>\n</element>\n\n</schema>\n===================== end of example ====================================", "id": 2879, "time": "2001-06-12T05:37:51Z", "creator": "udo.grabowski@kit.edu", "creation_time": "2001-06-12T05:37:51Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Since there are many ways of coming upon type declarations during schema \ncompilation, we are careful not to handle an anonymous simpleType multiple \ntimes.  Unfortunately we were a little too careful--different anonymous types \nfrom different schemas could end up with the same name--and this caused the bug.", "attachment_id": null, "bug_id": 2129, "id": 2885, "time": "2001-06-12T12:06:10Z", "creator": "neilg@ca.ibm.com", "creation_time": "2001-06-12T12:06:10Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 2129, "attachment_id": null, "text": "Great ! It works ! One of the fastest BugBusters I've ever seen !\n", "id": 2912, "time": "2001-06-13T05:30:45Z", "creator": "udo.grabowski@kit.edu", "creation_time": "2001-06-13T05:30:45Z", "is_private": false}]
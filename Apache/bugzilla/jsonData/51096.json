[{"count": 0, "tags": [], "creator": "nam3l3ssa@freemail.hu", "attachment_id": null, "text": "Using multiple services in different jar files, then using a single jar file, eg.\n\nLet there be a service \"X\", and let there be providers Alpha,Beta,Gamma.\n\nA.jar contains provider Alpha\nB.jar contains provider Beta\n\nC.jar provides provides Gamma, and includes A.jar and B.jar as zipfilesets.\n\nI would except it to be possible to create C.jar in a way that the service descriptor files are merged, but this does not seem to be the case. With either of the jar task's manifest affecting options, the result is separate files in the archive, with the same filename.\n\nFrom what I have seen so far, only the \"duplicate\" property affects the resulting descrpitor files, but it does not have the option to merge, so it's of no use.\n\nWhen creating the jar file C.jar, there are (in case duplicate is not on \"preserve\") multiple entries of the same descriptor file, as the format allows this; however, the ServiceLoader only parses the first such file, causing failures in some of my applications.\n\nMy current workaround is simply to extract the jar files, manually rearrange the service descriptors, then repackage them.\n\nAm I doing someting wrong? Is it possible to alter the build file so the service descriptors are merged?", "id": 145912, "time": "2011-04-20T13:06:56Z", "bug_id": 51096, "creation_time": "2011-04-20T13:06:56Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 51096, "attachment_id": null, "text": "Since the zip format does permit same-named entries, are you sure that C.jar isn't still capable of providing multiple service provider implementations despite these actually being represented in different jar entries?", "id": 145913, "time": "2011-04-20T13:32:08Z", "creator": "mbenson@apache.org", "creation_time": "2011-04-20T13:32:08Z", "is_private": false}, {"count": 2, "tags": [], "creator": "nam3l3ssa@freemail.hu", "attachment_id": null, "text": "I'm practically sure, but I'll create a presentable test case as soon as I have some time.", "id": 145938, "time": "2011-04-21T17:47:10Z", "bug_id": 51096, "creation_time": "2011-04-21T17:47:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 51096, "attachment_id": null, "id": 145939, "time": "2011-04-21T18:02:18Z", "creator": "jglick@apache.org", "creation_time": "2011-04-21T18:02:18Z", "is_private": false, "text": "(In reply to comment #1)\n> Since the zip format does permit same-named entries, are you sure that C.jar\n> isn't still capable of providing multiple service provider implementations\n> despite these actually being represented in different jar entries?\n\nsun.misc.URLClassPath.JarLoader.getResource can only return one resource, since it is using JarFile.getJarEntry. Iterating all entries would be inefficient, and there is no method in JarFile to get multiple entries with the same name.\n\nProbably there is some way to write the script to concatenate META-INF/services/* entries from its inputs, but it does not sound easy. Maybe use a custom task - either a subclass of Zip which overrides zipFile and knows how to merge these entries, or set duplicate=add and then run a separate task to merge entries in the result.\n\nIn general it would be nice to have a helper type ResourceMerger, which you could pass to <zip>, <copy>, etc.; one impl could simply concatenate the incoming resources, but custom impls could perform more complex merges."}]
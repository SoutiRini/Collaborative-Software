[{"count": 0, "tags": [], "bug_id": 58577, "attachment_id": null, "text": "currently the JMXProxy when invoking an operation does this:\n\n ObjectName oname=new ObjectName( onameStr );\n        MBeanOperationInfo methodInfo = registry.getMethodInfo(oname,operation);\n        MBeanParameterInfo[] signature = methodInfo.getSignature();\n\nso it calls the registry for a method info for a specific bean and operation\n\nthat Registry does this:\n\n public MBeanOperationInfo getMethodInfo( ObjectName oname, String opName )\n    {\n        MBeanInfo info=null;\n        try {\n            info=server.getMBeanInfo(oname);\n        } catch (Exception e) {\n            log.info( \"Can't find metadata \" + oname );\n            return null;\n        }\n        MBeanOperationInfo attInfo[]=info.getOperations();\n        for( int i=0; i<attInfo.length; i++ ) {\n            if( opName.equals(attInfo[i].getName())) {\n                return attInfo[i];\n            }\n        }\n        return null;\n    }\n\n\nwhich is wrong because that just returns the first hit by name.\n\nI think at least the patch should be that that getMethodInfo gets a 3th argument which is the number of arguments it should have. Or better an array of Types where the parameters should map on. (but that can be in this scenario tricky because the caller site doesn't know the types)\n\nOr it should just return all a Array of MBeanOperationInfo of all hits for that name and let the caller handle it what it can use or call.", "id": 186224, "time": "2015-11-03T12:44:35Z", "creator": "jcompagner@apache.org", "creation_time": "2015-11-03T12:44:35Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Jasper's mappedfile=true option doesn't always generate static content with \none print statement per input line.  Jasper creates a new Node every time it \nsees a \"<\" in the input, so when template text contains an HTML tag in the \nmiddle of an input line, the resulting Java code is split across multiple \noutput lines (and in my opinion is therefore harder to read).\n\nThis can be fixed by checking the text after the \"<\" before moving on to the \nnext Node.  I will attach a patch that implements this.", "is_private": false, "id": 42444, "creator": "ecarmich@alumni.rice.edu", "time": "2003-08-09T01:27:36Z", "bug_id": 22266, "creation_time": "2003-08-09T01:27:36Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 22266, "attachment_id": 7704, "id": 42445, "time": "2003-08-09T01:30:31Z", "creator": "ecarmich@alumni.rice.edu", "creation_time": "2003-08-09T01:30:31Z", "is_private": false, "text": "Created attachment 7704\nProposed patch"}, {"count": 2, "tags": [], "bug_id": 22266, "text": "It looks that was what was originally intended, so it's likely another great\npatch :)\nI'll apply both of your patches.", "id": 42471, "time": "2003-08-09T19:22:29Z", "creator": "remm@apache.org", "creation_time": "2003-08-09T19:22:29Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 22266, "attachment_id": null, "id": 42639, "time": "2003-08-12T17:21:39Z", "creator": "kin-man.chung@sun.com", "creation_time": "2003-08-12T17:21:39Z", "is_private": false, "text": "I would have preferred that this optimization be done with a separate pass over\nthe parsed nodes, which combines contiguous template text nodes into one.  The\nlook-ahead used in this patch duplicates logic used in the other part of the\nParser (it also misses <jsp:text>, for instance), and may have some performance\nimpact.\n\nI'll leave this patch in for now, but may undo it when the separate optim pass\nis implemented later, unless Eric beats me to it!  :-)"}, {"count": 4, "tags": [], "creator": "ecarmich@alumni.rice.edu", "attachment_id": null, "id": 42651, "creation_time": "2003-08-13T02:09:27Z", "time": "2003-08-13T02:09:27Z", "bug_id": 22266, "text": "Unfortunately I've thrown out the actual numbers I got in the performance \ntesting I did (all on a 1 GHz Windows XP laptop), but the salient results were \nas follows:\n1) The patch made Tomcat faster at compiling and serving pages with a \npreponderance of HTML tags versus JSP tags (the lookahead does take some extra \ntime, but is more than made up if the lookahead results in one less node to be \ntraversed later).  With the patch in place, Tomcat compiled and served \nindex.html from the jsp-examples webapp (renamed to index.jsp, obviously) \nabout 9% faster than without the patch.\n2) On balance, however, the patch made Tomcat slower at compiling and serving \npages.  At least, when I tested against the jsp-examples webapp (with \nindex.jsp renamed back to index.html so it wasn't part of the test), time to \ncompile and serve was about 2% slower.\n3) I couldn't find any difference in serving compiled pages with the patch in \nplace (I thought there might be a small improvement because the patch shrinks \nthe .class files).\n\nBased on those numbers, I decided not to submit the patch as an option \nconfigurable separately from mappedfile, or as a non-configurable \nenhancement.  But since the mappedfile documentation said it was intended for \ndebugging, I thought the performance hit was acceptable.\n\nI didn't test your idea of a separate pass through the parsed nodes, but I did \ntest code that, when about to create a new TemplateText node, checked to see \nif the previous node was also a TemplateText node, and if so, just appended \nits text to the previous node's (the ideas being that anything that conserved \nnodes might improve performance, and that I didn't like duplicating logic from \nanother part of the Parser, either).  But that was noticeably slower (I've \nforgotten the numbers entirely) than the patch I submitted.\n\nAnyway, I submitted the patch as an enhancement, so I can't complain if it \ngets implemented differently or not at all.  The above is just to help folks \nmake an informed decision.", "is_private": false}, {"count": 5, "tags": [], "bug_id": 22266, "attachment_id": null, "id": 42694, "time": "2003-08-13T18:43:14Z", "creator": "kin-man.chung@sun.com", "creation_time": "2003-08-13T18:43:14Z", "is_private": false, "text": "There is no doubt that concatenating contiguous template texts into one improves\nthe runtime performance and I am not too worry about spending extra time during\ncompilation, since I believe web applications should be deployed precompiled.\n\nMy suggestion for a separate pass was motivated by the design principle to keep\nthe modules simple and direct.  The current compiler is made up of a number of\npasses, driven by the common data structure (Node and PageInof etc).  I'd like\nto keep Parser only doing the basic parsing, but leaves the optimizations to\nother passes.  Not only will it be easier for debugging and maintenance,\nswitching on and off such optimizations will also made easier.\n\nLike I said, this no big deal, so I'll leave the patch in for now.  Anyway,\nthanks for contributing to improve Jasper, and don't let slight disagreements\nlike this prevent you from making more contributions in the future."}, {"count": 6, "tags": [], "creator": "ecarmich@alumni.rice.edu", "attachment_id": null, "text": "It's just occurred to me that if the consolidation were done in a separate \npass, it would apply to JSPs in XML format as well.  So provided the \nperformance hit during compilation is acceptable (and I take your point that \nwebapps should be deployed precompiled), I agree a separate pass is the way to \ngo.\n\nBut if a performance hit during compilation is acceptable, is there any reason \nnot to do this consolidation even when mappedfile=\"false\"?  As you say, it \nshould improve runtime performance, and we always have JspUtil.CHUNKSIZE \n(which could be made a configurable parameter) to keep individual lines from \ngetting too long.  That was the only other downside that I found when I tested \nwith mappedfile=\"false\"-- very long template text sections were arguably even \nharder to follow all crammed into one output line than they were split at \nevery HTML tag.", "id": 43075, "time": "2003-08-21T06:00:21Z", "bug_id": 22266, "creation_time": "2003-08-21T06:00:21Z", "is_private": false}]
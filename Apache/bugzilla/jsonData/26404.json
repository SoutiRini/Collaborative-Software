[{"count": 0, "tags": [], "bug_id": 26404, "text": "Modern versions of jikes support -extdirs and -bootclasspath, yet ant doesn't\npass these options to jikes.  (I'm sorry I can't give the jikes version number\nwhere this behavior changed; I'm using jikes 1.18)\n\nIt gets worse: by default, ant puts rt.jar in the -classpath option submitted to\njikes after the classpath options specified by <classpath> elements of the\n<javac> task.\n\nThis can in certain cases lead to a compile which will fail with\nbuild.compiler=jikes but which succeeds with build.compiler=javac1.4, since with\njavac rt.jar will be implicitly part of the bootclasspath (since ant does not\nnormally pass a -bootclasspath option) and therefore will be read before those\njars listed as part of -classpath.\n\nSpecifically, in one of our projects, one of the (proprietary) jars we were\nusing contained an ancient implementation of javax.xml.parsers.SAXParser.  Our\ncode used a feature not present in this old implementation.  When we ran ant\nwith the javac1.4 compiler, all was fine, since rt.jar contains a newer\nimplementation of javax.xml.parsers.SAXParser.  With jikes, however, the build\nfailed since the proprietary jar was processed before rt.jar.\n\nWe have kludged this by modifying our <javac> task to say:\n\n    <javac debug=\"${build.debug}\" srcdir=\"${java.src}\"\n     nowarn=\"${build.compiler.nowarnings}\" destdir=\"${builddest}\">\n      <selector refid=\"non_test_java_src\" />\n      <classpath refid=\"non_test_classpath\" />\n      <compilerarg compiler=\"jikes\" line=\"-extdirs ${java.ext.dirs}\n-bootclasspath ${sun.boot.class.path}\" />\n    </javac>\n\nSuggestions for fixing this bug:\n1.  Implicitly, unless overridden by a bootclasspath option given to the <javac>\ntask, jikes compilation should assume a bootclasspath value of\n${sun.boot.class.path}.  Likewise, extdirs should default to ${java.ext.dirs}.\n2.  If it is important to support jikes versions that don't support -extdirs or\n-bootclasspath, then when constructing the classpath line to pass to jikes,\nbootclasspath should precede classpath in the constructed classpath.  If it's\nnot important to support old jikes versions, or if a \"jikesmodern\" compiler type\nis introduced, or if the jikes compiler adaptor can determine that it's dealing\nwith a modern jikes version some other way, then -bootclasspath and -extdirs\nshould be passed as you'd expect.\n\nBasically, I think that this bug and the other currently open jikes bug (-g:none\nbeing necessary to disable debugging information) are a consequence of modern\njikes versions behaving like the \"modern\" javac compiler, whereas old jikes\nversions behave like the \"classic\" javac compiler.  Either the jikes compiler\nadaptor should detect the jikes version (this should probably be overrideable\nwith  some magic property), or the jikes compiler type should be split in two,\nor support for older jikes versions should be dropped.", "id": 51116, "time": "2004-01-24T22:33:20Z", "creator": "Daniel.Martin@sungard.com", "creation_time": "2004-01-24T22:33:20Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 26404, "text": "Not exactly fixed the way you'd want it, but close.\n\njikes will now use -bootclasspath, -sourcepath, -extdirs and -g:options.\n\nIf you specify a bootclasspath, it will get used.  If you don't the adapter\nwill still implicitly add rt.jar to -classpath, we can't change that (backwards\ncompatibility).\n\n-extdirs and -bootclasspath will not be set to anything if you don't provide\nvalues for them.", "id": 72570, "time": "2005-03-17T11:04:00Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-17T11:04:00Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "chad_lavigne@yahoo.com", "attachment_id": 22533, "id": 120413, "time": "2008-09-06T10:09:21Z", "bug_id": 45753, "creation_time": "2008-09-06T10:09:21Z", "is_private": false, "text": "Created attachment 22533\nLogging filter to regulate log message bursts\n\nI've written a filter to regulate logging traffic bursts that I'd like to have considered for contribution.  It's useful for situations where you may want to limit the number of logging messages that are sent to an appender, i.e. when the database goes down you don't want 2 million e-mail logs taking out the mail server.  It looks like no further development is planned for 1.2 except for bug fixes and minor enhancements.  Is this feature small enough to be considered a minor enhancement or should I submit the filter for 2.0?\n\nThanks,\nChad"}, {"count": 1, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 121379, "time": "2008-10-09T17:09:14Z", "bug_id": 45753, "creation_time": "2008-10-09T17:09:14Z", "is_private": false, "text": "First, some picky things:\n\nThe license headers in the source code should conform to http://www.apache.org/legal/src-headers.html.  If you could fix the headers and resubmit.\n\n@author tags are no frowned upon in ASF since it may result in territoriality.  We haven't removed them from log4j, but we are avoiding adding new ones.\n\nMany methods are missing javadoc comments.\n\n---\n\nI guess the current AsyncAppender within blocking=false would be classified as a leaky-bucket where the leak rate is the sustainable rate of underlying appender.  It does have the advantage of summarizing the discard messages and reporting the highest error level that was not reported.  What are your thoughts on adding a configurable strategy for throttling on AsyncAppender?\n\nThe burst filter appears to discard events with no potential for summarizing or being informed of event loss.\n\nIt might be desirable to make this level aware, so you would apply this to DEBUG messages but INFO and higher might pass through unaffected.\n\nI'd likely collapse BurstFilter and TokenBucket and rename it TokenBucketFilter.\n\nTokenBucket.getToken()'s has an unexpected return value.  You'd expect that it would return true if there were available tokens, but it returns true if empty.\n"}, {"count": 2, "tags": [], "creator": "chad_lavigne@yahoo.com", "attachment_id": 23401, "id": 125724, "time": "2009-03-23T14:56:31Z", "bug_id": 45753, "creation_time": "2009-03-23T14:56:31Z", "is_private": false, "text": "Created attachment 23401\nUpdate to BurstFilter contribution\n\nThe attached code addresses the following issues mentioned by Curt.  \n\n1) License headers are fixed\n2) @Author tags removed\n3) JavaDoc comments added to all methods\n4) Filter is now level aware\n5) BurstFilter & TokenBucket have been condensed into one class\n6) TokenBucket.getToken() now returns false if empty \n\nI didn't rename the filter because I actually submitted this code about 2 years ago under the name TokenBucketFilter and it was requested at that time that I rename it to something like BurstFilter so that it would be implementation agnostic.  Let me know what the consensus is, I can certainly rename it if need be."}, {"count": 3, "tags": [], "bug_id": 45753, "is_private": false, "id": 125931, "creation_time": "2009-04-01T11:42:05Z", "time": "2009-04-01T11:42:05Z", "creator": "chad_lavigne@yahoo.com", "text": "Is there any feedback on this contribution?\n\n(In reply to comment #2)\n> Created an attachment (id=23401) [details]\n> Update to BurstFilter contribution\n> \n> The attached code addresses the following issues mentioned by Curt.  \n> \n> 1) License headers are fixed\n> 2) @Author tags removed\n> 3) JavaDoc comments added to all methods\n> 4) Filter is now level aware\n> 5) BurstFilter & TokenBucket have been condensed into one class\n> 6) TokenBucket.getToken() now returns false if empty \n> \n> I didn't rename the filter because I actually submitted this code about 2 years\n> ago under the name TokenBucketFilter and it was requested at that time that I\n> rename it to something like BurstFilter so that it would be implementation\n> agnostic.  Let me know what the consensus is, I can certainly rename it if need\n> be.", "attachment_id": null}, {"count": 4, "tags": [], "text": "I opened this issue quite a while ago and never received feedback after making the changes initially requested. I've found this filter useful on quite a few projects and each time I add it to a new one I find myself again wishing it was just part of the main log4j distribution.  Is there any chance that this filter will get added to the project or is it something the Log4J team just isn't interested in?", "attachment_id": null, "id": 149992, "creator": "chad_lavigne@yahoo.com", "time": "2011-09-30T18:40:29Z", "bug_id": 45753, "creation_time": "2011-09-30T18:40:29Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "Ralph.Goers@dslextreme.com", "is_private": false, "id": 150042, "time": "2011-10-02T02:33:15Z", "bug_id": 45753, "creation_time": "2011-10-02T02:33:15Z", "tags": [], "text": "I tried adding this to my Log4j 2.0 branch but am having some problems. It isn't passing the unit test. It seems to me that when the filter is called it does nothing until fillInterval has expired. Since the first until test runs right away it is successfully writing 110 records instead of 100.\n\nI'm also concerned with the synchronization as it could cause a bottleneck."}, {"count": 6, "tags": [], "bug_id": 45753, "is_private": false, "id": 150049, "creation_time": "2011-10-02T07:26:37Z", "time": "2011-10-02T07:26:37Z", "creator": "Ralph.Goers@dslextreme.com", "text": "I implemented a BurstFilter that behaves a bit differently that yours to the Log4j 2.0 experimental branch.  It will behave a bit differently than yours in that it only needs the interval and queue size. You can find it at https://svn.apache.org/repos/asf/logging/log4j/branches/BRANCH_2_0_EXPERIMENTAL/rgoers/log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java", "attachment_id": null}, {"count": 7, "attachment_id": null, "creator": "chad_lavigne@yahoo.com", "text": "Hi Ralph,\n\nThe unit test should work, although it's a little hard to read the results. You should see 100 of 110 info log statements print with the first test, then there's a second test that does 110 fatal log statements that should all print because they are fatals and finally you should see 30 new info logs print because the test waits 18 seconds and should then print 30 info statements (the burst recovery rate is 10 log statements every 6 seconds).  So, is the test printing all 110 info statements for you?  You see a line like this that has \"#110\" at the end?\n\nINFO  02-Oct-2011 12:23:27  main Logging 110 messages, should only see 100 logs\n# 110\n\nIt's a little tough to notice the statement number, but you shouldn't be seeing that, it the last info statement that prints should be #100, then you should see 110 fatals, then 30 infos.  Anyway, it would probably be better if we had an actual JUnit test that had asserts but I figured we didn't want to add a dependency on JUnit.  Is that true or would a JUnit test be preferred?\n\nAs for the synchronization, I think it's necessary to ensure that we don't exceed maxTokens, right?\n\n(In reply to comment #5)\n> I tried adding this to my Log4j 2.0 branch but am having some problems. It\n> isn't passing the unit test. It seems to me that when the filter is called it\n> does nothing until fillInterval has expired. Since the first until test runs\n> right away it is successfully writing 110 records instead of 100.\n> \n> I'm also concerned with the synchronization as it could cause a bottleneck.", "id": 150059, "time": "2011-10-02T17:34:16Z", "bug_id": 45753, "creation_time": "2011-10-02T17:34:16Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 45753, "attachment_id": null, "id": 150060, "time": "2011-10-02T17:42:04Z", "creator": "chad_lavigne@yahoo.com", "creation_time": "2011-10-02T17:42:04Z", "is_private": false, "text": "Thank you for adding this, I thought my contribution might be a lost cause. So it looks like this is basically the same filter except that you no longer define the fill amount, i.e. you say add tokens every 10 seconds but you don't say how many to add every 10 seconds, correct?  I like that simplification, but I do kind of like having the ability to configure the fill rate too. Maybe we could allow the fill rate to still be configured but just have a sensible default?\n\n(In reply to comment #6)\n> I implemented a BurstFilter that behaves a bit differently that yours to the\n> Log4j 2.0 experimental branch.  It will behave a bit differently than yours in\n> that it only needs the interval and queue size. You can find it at\n> https://svn.apache.org/repos/asf/logging/log4j/branches/BRANCH_2_0_EXPERIMENTAL/rgoers/log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java"}, {"count": 9, "tags": [], "bug_id": 45753, "attachment_id": null, "id": 150062, "time": "2011-10-02T19:52:01Z", "creator": "Ralph.Goers@dslextreme.com", "creation_time": "2011-10-02T19:52:01Z", "is_private": false, "text": "If you've looked at the code you will see that it is using a DelayQueue to control how many log entries can be written. From what I could tell in looking at your code your bucket was essentially a bucket with a fixed window and you remove x tokens every period making that the maximum that can be logged. With the DelayQueue items will expire after the maxBurst period opening up slots for that many new log events.  \n\nTo give an example, assuming I am understanding correctly, with your algorithm with a window size of 100, an interval of 6 and an amount of 10 you would see a maximum of 100 events in the first 6 seconds, 10 the next 6, 10 the next six, etc.  With the implementation I've used you will see 100 events the first 6 seconds but what happens after that is a bit variable. Say the records arrived as 10 the first second, 30 the second, 25 the third, 25 the fourth, 30 the fifth (20 are ignored), and 25 in the last second (all of which are ignored) then in the seventh second 10 new items would be allowed, 30 in the eighth, and 25 in the ninth, etc. It would be even more fluid than that since the granularity of items in the queue is a nanosecond.  \n\nSo although you don't specify how many can be added after the queue has filled, since the maximum number of items is specified and can never be exceeded and since the queue is constantly emptying as items expire, I wouldn't think it would be necessary to specify another number.  \n\nBy the way, yes I am using Junit for Log4j 2.0. I converted your test to log to a ListAppender instead of the console and that was when I couldn't get it to pass the tests. It may have been something I did wrong.\n\nI should emphasize that I didn't add this to Log4j 1.2 as I'm solely focused on building 2.0 and I thought this would make a nice addition. My version can't be added to Log4j 1.2 as the DelayQueue requires Java 5."}, {"count": 10, "tags": [], "bug_id": 45753, "attachment_id": null, "text": "I wonder if it would be easier for end users if the configuration was made with rate instead of burstInterval:\n\nfloat rate; // average number of log statements allowed per second\nint maxBurst; // maximum burst of log statements\n\nSo, if I have this right, internally:\n\nburstIntervalNanos = maxBurst / rate * NANOS_IN_SECONDS\n\nMaxBurst could be made optional with a default something like Math.max(10, 2*rate).", "id": 150067, "time": "2011-10-03T00:57:30Z", "creator": "john@vasileff.com", "creation_time": "2011-10-03T00:57:30Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 45753, "is_private": false, "id": 150068, "creation_time": "2011-10-03T02:16:01Z", "time": "2011-10-03T02:16:01Z", "creator": "Ralph.Goers@dslextreme.com", "text": "I agree and have made the suggested changes. If the max is left off it defaults to 10 times the rate.", "attachment_id": null}, {"count": 12, "tags": [], "creator": "john@vasileff.com", "attachment_id": null, "id": 150091, "time": "2011-10-03T17:53:02Z", "bug_id": 45753, "creation_time": "2011-10-03T17:53:02Z", "is_private": false, "text": "I took a look at BurstFilter and have a few thoughts:\n\n1) The calculation of burstInterval loses precision.  Better may be to store burstIntervalNanos with something like:\n\nthis.burstIntervalNanos = NANOS_IN_SECONDS * max / rate;\n\nCurrently with rate=16 and maxBurst=100, the burstInterval becomes 6L seconds instead of 6.25F seconds, so the effective rate is 100F/6 == 16.667.  A much worse scenario exists when bursting is disabled.  For example, rate=2 and maxBurst=1, the effective rate is infinite (burstInterval = 1/2 == 0).  More generally, burstInterval becomes 0 when rate > maxBurst.\n\n2) It may be valuable to define rate as a float to allow fractional rates.  One example is a job processor that logs trace(\"pending jobs: \" + queue.size()) whenever a job is processed.  The deployer may want to monitor load throughout the day, but no more frequently than once every 100s.  This could be accomplished with rate=0.01, max=1.\n\n3) It probably makes sense to restrict max to between 1 and 1k or something to avoid overflow errors and unnecessary memory/processing overhead.  And of course if burstIntervalNanos <= 0, filtering can be disabled."}, {"count": 13, "tags": [], "text": "John, I encourage you to open a separate Jira issue for Log4J 2 and submit a patch with how you'd like this to work and enhance the unit test as well. Bugzilla really is for Log4j 1.x.", "attachment_id": null, "id": 150101, "creator": "Ralph.Goers@dslextreme.com", "time": "2011-10-03T20:12:36Z", "bug_id": 45753, "creation_time": "2011-10-03T20:12:36Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 45753, "is_private": false, "id": 150104, "creation_time": "2011-10-03T22:25:21Z", "time": "2011-10-03T22:25:21Z", "creator": "john@vasileff.com", "text": "Ralph, I believe the bug fix for #1 is either as shown in comment 12 (nanos first) or comment 10 (use float for rate).  Items #2 and #3 are just ideas.  I'm not sure it makes sense for me to dig further into this since you are already on the 10 yard line, but if you still feel otherwise I'll try to provide a Jira patch when I find some time.\n\nHopefully the above discussion will help out if BurstFilter (in some form) is added to Log4j 1.x, but if I have further ideas I'll post elsewhere.", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 45753, "is_private": false, "id": 150821, "creation_time": "2011-10-21T13:51:52Z", "time": "2011-10-21T13:51:52Z", "creator": "Ralph.Goers@dslextreme.com", "text": "I modified BurstFilter in 2.0 as you suggested.", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "onealj@apache.org", "text": "As part of managing binary and source backwards compatibility, we have @Internal, @Deprecated (and @deprecated javadoc), annotations.\nWe usually keep deprecated features around for at least 2 final releases before removing, but sometimes never get around to removing the deprecated features.\nThis bug will try to better track the revisit of deprecated elements.\n\nFrom David North on the dev mailing list [1]:\n> * Use the @Deprecated annotation in addition to the JavaDoc tag (which\n> is useful for some IDEs anyway)\n> * Invent our own @Removal annotation to contain the date/POI version of\n> expected removal \n> \n> Then it would be easy to write a functional test which used reflection\n> to check all @Deprecated annotated elements had an @Removal too, and to\n> tell us when things come up as due to be removed. \n\nRelated: [2] finding the version when a feature was deprecated\n\n[1] http://apache-poi.1045710.n5.nabble.com/deprecated-handling-reloaded-tp5721071p5721078.html\n[2] http://apache-poi.1045710.n5.nabble.com/Finding-deprecated-methods-td5723416.html", "id": 192156, "time": "2016-07-05T21:50:58Z", "bug_id": 59804, "creation_time": "2016-07-05T21:50:58Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Added @Removal annotation class in r1751569.\n\nUsage:\n\n/**\n * @since POI 3.6\n * @deprecated POI 3.15 beta 3\n */\n@Removal(version=\"3.17\")\npublic class SomeDeprecatedClassOrMethod() { }", "attachment_id": null, "bug_id": 59804, "id": 192157, "time": "2016-07-05T23:27:54Z", "creator": "onealj@apache.org", "creation_time": "2016-07-05T23:27:54Z", "is_private": false}, {"count": 2, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "Todo: write code that uses reflection to find code that is overdue for removal, and build this into a unit test.", "id": 192842, "time": "2016-08-03T00:34:08Z", "bug_id": 59804, "creation_time": "2016-08-03T00:34:08Z", "is_private": false}, {"text": "Created attachment 34767\nFind @Deprecated and @Removal annotations with reflection\n\nThe ClassFinder class in the patch uses non-free code. Do we have something already in POI test scaffolding that could give us a list of every org.apache.poi class (bonus points if it can include the o.a.p junit test code)?\n\nIf not, is there an ASL-2.0-licensed version that does something similar? Otherwise, we'll need to rewrite these couple lines of recursive class finding via reflection from scratch.", "tags": [], "bug_id": 59804, "attachment_id": 34767, "count": 3, "id": 197160, "time": "2017-02-20T10:57:49Z", "creator": "onealj@apache.org", "creation_time": "2017-02-20T10:57:49Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 59804, "attachment_id": null, "text": "Doesn't the OOXMLLite code do something much like that only for the schema classes?", "id": 197161, "time": "2017-02-20T10:59:25Z", "creator": "apache@gagravarr.org", "creation_time": "2017-02-20T10:59:25Z", "is_private": false}, {"count": 5, "tags": [], "text": "(In reply to Nick Burch from comment #4)\n> Doesn't the OOXMLLite code do something much like that only for the schema\n> classes?\n\nProbably. The JDK, IDE, and JUnit also find all classes through recursive reflection, if OOXMLLite doesn't pan out.", "is_private": false, "bug_id": 59804, "id": 197162, "time": "2017-02-20T11:24:17Z", "creator": "onealj@apache.org", "creation_time": "2017-02-20T11:24:17Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 59804, "attachment_id": null, "id": 197163, "time": "2017-02-20T11:31:59Z", "creator": "onealj@apache.org", "creation_time": "2017-02-20T11:31:59Z", "is_private": false, "text": "https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/util/OOXMLLite.java?revision=1782114&view=markup#l200"}]
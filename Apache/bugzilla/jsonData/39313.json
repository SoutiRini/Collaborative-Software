[{"count": 0, "tags": [], "creator": "jerome.grandjanny@cea.fr", "attachment_id": null, "id": 88056, "time": "2006-04-14T12:44:50Z", "bug_id": 39313, "creation_time": "2006-04-14T12:44:50Z", "is_private": false, "text": "When you use RewriteOptions Inherit inside a VirtualHost or Directory which also has \nlocal rules, the global rules are added at the end of the local rules list. As a \nresult, local rules are first applied, and then, global rules are applied after local \nrules. Since rules ordering in important, you may want to apply global rules first, \nand then local rules.\n\nI propose a patch to fullfill this functionality :\n\n- I added a new parameter \"Before\" to the RewriteOptions directive. You can write the \nfollowing in a VirtualHost or Directory block in httpd.conf :\n\n   RewriteOptions Inherit Before\n\nwhich means that global rules will be applied before local rules. The default will \nstill be after.\n\nThis patch modifies modules/mappers/mod_rewrite.h as follows :\n\n# diff -c mod_rewrite.h.old mod_rewrite.h\n*** mod_rewrite.h.old   Fri Feb  4 21:21:18 2005\n--- mod_rewrite.h       Fri Apr 14 10:52:34 2006\n***************\n*** 138,143 ****\n--- 138,144 ----\n\n  #define OPTION_NONE                 1<<0\n  #define OPTION_INHERIT              1<<1\n+ #define OPTION_INHERIT_BEFORE       1<<2\n\n  #define CACHEMODE_TS                1<<0\n  #define CACHEMODE_TTL               1<<1\n\n\nAnd modifies modules/mappers/mod_rewrite.c as follows (based on 2.0.55) :\n\n# diff -c mod_rewrite.c.old mod_rewrite.c\n*** mod_rewrite.c.old   Wed May 25 20:05:05 2005\n--- mod_rewrite.c       Fri Apr 14 10:52:39 2006\n***************\n*** 212,223 ****\n          a->rewritelogfp    = overrides->rewritelogfp != NULL\n                               ? overrides->rewritelogfp\n                               : base->rewritelogfp;\n!         a->rewritemaps     = apr_array_append(p, overrides->rewritemaps,\n!                                               base->rewritemaps);\n!         a->rewriteconds    = apr_array_append(p, overrides->rewriteconds,\n!                                               base->rewriteconds);\n!         a->rewriterules    = apr_array_append(p, overrides->rewriterules,\n!                                               base->rewriterules);\n      }\n      else {\n          /*\n--- 212,233 ----\n          a->rewritelogfp    = overrides->rewritelogfp != NULL\n                               ? overrides->rewritelogfp\n                               : base->rewritelogfp;\n!         if (a->options & OPTION_INHERIT_BEFORE) {\n!             a->rewritemaps     = apr_array_append(p, base->rewritemaps,\n!                                                   overrides->rewritemaps);\n!             a->rewriteconds    = apr_array_append(p, base->rewriteconds,\n!                                                   overrides->rewriteconds);\n!             a->rewriterules    = apr_array_append(p, base->rewriterules,\n!                                                   overrides->rewriterules);\n!         }\n!         else {\n!             a->rewritemaps     = apr_array_append(p, overrides->rewritemaps,\n!                                                   base->rewritemaps);\n!             a->rewriteconds    = apr_array_append(p, overrides->rewriteconds,\n!                                                   base->rewriteconds);\n!             a->rewriterules    = apr_array_append(p, overrides->rewriterules,\n!                                                   base->rewriterules);\n!         }\n      }\n      else {\n          /*\n***************\n*** 289,298 ****\n                            : base->redirect_limit;\n\n      if (a->options & OPTION_INHERIT) {\n!         a->rewriteconds = apr_array_append(p, overrides->rewriteconds,\n!                                            base->rewriteconds);\n!         a->rewriterules = apr_array_append(p, overrides->rewriterules,\n!                                            base->rewriterules);\n      }\n      else {\n          a->rewriteconds = overrides->rewriteconds;\n--- 299,316 ----\n                            : base->redirect_limit;\n\n      if (a->options & OPTION_INHERIT) {\n!         if (a->options & OPTION_INHERIT_BEFORE) {\n!             a->rewriteconds = apr_array_append(p, base->rewriteconds,\n!                                                overrides->rewriteconds);\n!             a->rewriterules = apr_array_append(p, base->rewriterules,\n!                                                overrides->rewriterules);\n!         }\n!         else {\n!             a->rewriteconds = apr_array_append(p, overrides->rewriteconds,\n!                                                base->rewriteconds);\n!             a->rewriterules = apr_array_append(p, overrides->rewriterules,\n!                                                base->rewriterules);\n!         }\n      }\n      else {\n          a->rewriteconds = overrides->rewriteconds;\n***************\n*** 339,344 ****\n--- 357,365 ----\n          if (!strcasecmp(w, \"inherit\")) {\n              options |= OPTION_INHERIT;\n          }\n+         else if (!strcasecmp(w, \"before\")) {\n+             options |= OPTION_INHERIT_BEFORE;\n+         }\n          else if (!strncasecmp(w, \"MaxRedirects=\", 13)) {\n              limit = atoi(&w[13]);\n              if (limit <= 0) {"}, {"count": 1, "tags": [], "creator": "andersk@mit.edu", "attachment_id": null, "text": "Yes!! The current behavior is useless.\n\nSuppose I have a website (actually, I *do* have a website) whose URL is changing\nfrom http://old-server.example.com/ to http://new-server.example.com/, but\nstaying at the same physical filesystem path. At the top level, I tell\nmod_rewrite to redirect from old-server to new-server, using [L,R]. But I also\nhave a subdirectory /2006 with a wiki that invisibly rewrites\n/2006/wiki/Main_Page to /2006/w/index.php?title=Main_Page without a redirect.\n\nIf I just tell /2006 to use RewriteOptions inherit, with the current behavior we get\n  http://old-server.example.com/2006/wiki/Main_Page =>\n  http://old-server.example.com/2006/w/index.php?title=Main_Page =>\n  http://new-server.example.com/2006/w/index.php?title=Main_Page [L,R]\nwhich exposes the index.php mechanism to the user. What I need is\n  http://old-server.example.com/2006/wiki/Main_Page =>\n  http://new-server.example.com/2006/wiki/Main_Page [L,R]\nso that the user still sees the wiki/Main_Page URL. The only way I can get this\nnow is by duplicating the redirect across every subdirectory's .htaccess file.", "id": 94698, "time": "2006-10-10T15:33:48Z", "bug_id": 39313, "creation_time": "2006-10-10T15:33:48Z", "is_private": false}, {"count": 2, "tags": [], "text": "(In reply to comment #1)\n> Yes!! The current behavior is useless.\n> \n> Suppose I have a website (actually, I *do* have a website) whose URL is changing\n> from http://old-server.example.com/ to http://new-server.example.com/, but\n> staying at the same physical filesystem path. At the top level, I tell\n> mod_rewrite to redirect from old-server to new-server, using [L,R]. But I also\n> have a subdirectory /2006 with a wiki that invisibly rewrites\n> /2006/wiki/Main_Page to /2006/w/index.php?title=Main_Page without a redirect.\n> \n> If I just tell /2006 to use RewriteOptions inherit, with the current behavior\nwe get\n\nHave you checked what happens, if you do not set RewriteOptions Inherit and just\nplace the rewrite rule that transforms  http://old-server.example.com/ into\nhttp://new-server.example.com/ at the virtual host level?", "attachment_id": null, "bug_id": 39313, "id": 94700, "time": "2006-10-10T15:55:53Z", "creator": "rpluem@apache.org", "creation_time": "2006-10-10T15:55:53Z", "is_private": false}, {"count": 3, "tags": [], "text": "Ugh...this was marked NEEDINFO?  You don't need information from me, the patch\nis here!\n\nFor the server in question, I don't have access to the virtual host\nconfiguration.  If you really want me to test this, I could set up a server\nmyself.  But either way, that won't change the fact that the current behavior of\nRewriteOption Inherit in .htaccess is sometimes (and probably always) incorrect.", "attachment_id": null, "bug_id": 39313, "id": 98337, "time": "2007-01-21T16:37:48Z", "creator": "andersk@mit.edu", "creation_time": "2007-01-21T16:37:48Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 39313, "attachment_id": null, "id": 107575, "time": "2007-08-31T14:47:28Z", "creator": "andersk@mit.edu", "creation_time": "2007-08-31T14:47:28Z", "is_private": false, "text": "Will somebody please mark this bug as NEW again?  The patch is here, and the\ninformation requested is not relevant to anyone."}, {"count": 5, "attachment_id": null, "bug_id": 39313, "is_private": false, "id": 107586, "time": "2007-09-01T07:58:05Z", "creator": "noodl@apache.org", "creation_time": "2007-09-01T07:58:05Z", "tags": [], "text": "@Anders:\n - You didn't answer Ruediger's question\n - NEEDINFO is just that, the bug isn't closed\n - I expect that using the Include directive, or better yet a second vhost with the Redirect directive and \nappropriate wildcard ServerAlias, will be a better solution than extending RewriteOptions anyway."}, {"count": 6, "tags": [], "bug_id": 39313, "text": "Okay, fine; I just tried setting up a similar situation on my own server and\nputting a RewriteRule at the vhost level.  As I expected, the vhost rewrite\nrules are applied before the directory rewrite rules.  So what?  This is not a\ngeneral solution.  It only lets me use *two* nested levels of redirection\nproperly, *if* I have administrative access, and still only one level if I\ndon't.  I'm still screwed if can't change my vhost config or if I want three\nlevels instead.\n\nUsing Include would also be a kludge; it would require me to go manually\nmaintain the chain of directory inheritance when I shouldn't need to.\n\nUsing two separate vhosts is not a general solution either--say I'm moving a\nwiki (with internal redirect rules) from one directory to another instead of one\nhostname to another.\n\nSomething like J\u00e9r\u00f4me's patch would solve these problems in a much nicer way. \nCan we have a discussion about the merits of the patch, instead of demanding, of\nsomeone that isn't even the original reporter, an answer to an irrelevant question?", "id": 107591, "time": "2007-09-01T12:13:28Z", "creator": "andersk@mit.edu", "creation_time": "2007-09-01T12:13:28Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 39313, "is_private": false, "id": 107598, "time": "2007-09-02T00:32:41Z", "creator": "noodl@apache.org", "creation_time": "2007-09-02T00:32:41Z", "tags": [], "text": "(In reply to comment #6)\n> Can we have a discussion about the merits of the patch, instead of demanding, of\n> someone that isn't even the original reporter, an answer to an irrelevant question?\n\nThis isn't really a discussion forum, but I still think we need more information from you to figure out the \nissue. Perhaps you'd care to raise this issue on the users@ mailing list, and we can add any resolution from \nthere to this bug?"}, {"count": 8, "tags": [], "creator": "covener@gmail.com", "text": "thanks for the patch, committed to trunk in r1042255", "id": 142379, "time": "2010-12-04T17:34:38Z", "bug_id": 39313, "creation_time": "2010-12-04T17:34:38Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "creator": "sf@sfritsch.de", "text": "fixed in 2.4.1", "id": 154185, "time": "2012-02-26T16:40:05Z", "bug_id": 39313, "creation_time": "2012-02-26T16:40:05Z", "tags": [], "is_private": false}]
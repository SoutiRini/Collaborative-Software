[{"count": 0, "tags": [], "creator": "richard.hensley@mckesson.com", "text": "I have a cookie that has a value of \n\n42200@5f3074c56c674ef2b092a8722d7c2dfe@c2af4f71ba69af352dfd8dba77e4c355\n\nI use the following code to find it.\n\n            Cookie[] cookies = httpRequest.getCookies();\n            if (cookies != null)\n            {\n                for (Cookie cookie : cookies)\n                {\n                    if (KEY.equals(cookie.getName()))\n                    {\n                        cookieValue = cookie.getValue();\n                        break;\n                    }\n                }\n            }\n\nin 6.0.14, the variable cookieValue has the value of the cookie at the end of the loop.\n\nin 6.0.16, the variable cookieValue has the value of 42200 at the end of the loop.\n\nThis is preventing an upgrade to 6.0.16", "id": 114985, "attachment_id": null, "bug_id": 44679, "creation_time": "2008-03-26T08:40:15Z", "time": "2008-03-26T08:40:15Z", "is_private": false}, {"text": "THe @ is not valid for a v0 cookie, \nIn 6.0.17, Tomcat will automatically switch your cookie to v1 when you have an invalid value, hence making invalid cookies work.\n\nSo it's fixed, and will be placed in the next release\n\nA workaround for you today, is to do\ncookie.setVersion(1)\n", "tags": [], "bug_id": 44679, "is_private": false, "count": 1, "id": 114998, "time": "2008-03-26T15:43:09Z", "creator": "fhanik@apache.org", "creation_time": "2008-03-26T15:43:09Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 44679, "text": "Thanks for the quick reply and workaround. I will use it.", "id": 114999, "time": "2008-03-26T15:45:53Z", "creator": "richard.hensley@mckesson.com", "creation_time": "2008-03-26T15:45:53Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 44679, "text": "*** Bug 44685 has been marked as a duplicate of this bug. ***", "id": 115003, "time": "2008-03-26T20:04:26Z", "creator": "fhanik@apache.org", "creation_time": "2008-03-26T20:04:26Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 44679, "text": "*** Bug 44705 has been marked as a duplicate of this bug. ***", "id": 115088, "time": "2008-03-28T19:12:39Z", "creator": "fhanik@apache.org", "creation_time": "2008-03-28T19:12:39Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 44679, "text": "Bug 44705 has been listed as a duplicate of this bug - but I am unsure that this is the case ... \n\nAccording the the specification for version 0 (or Netscape) cookies (reference: http://wp.netscape.com/newsref/std/cookie_spec.html) - the NAME=VALUE portion of a cookie \"is a sequence of characters excluding semi-colon, comma and white space\". The issue that I have been experiencing with Tomcat 5.5.26 if the cookie NAME name contains a colon (\":\"), the portion of the name that prefixes the colon remains, but the value for the cookie is an empty string.\n\nSimply put - colons are valid characters for version 0 and version 1 (RFC 2109/RFC 2965) cookies.\n\nBelow is a reproducible example of the problem. It is important to note that the cookies are initially sent to the Web browser as version 1 cookies, however when the browser send the cookies back to Tomcat when a request is made, they only contain the NAME-VALUE component. Essentially, Tomcat has no way to inherently \"know\" what version of cookie has been sent.\n\nTomcat 5.5.25 and earlier:\n--------------------------\nHTTP request contains header:\nCookie: JSESSIONID=87C7E668C6C15E2556C0977F6EAA9F4C; NFIS:profile=lang=en;\nDACS:NFIS:NRCAN:dlewis=usjp1tigSqakP8BnWv\n\n* When the HttpServletRequest.getCookies() is called, a Cookie[] is returned:\nCookie: name=\"JSESSIONID\", value=\"J87C7E668C6C15E2556C0977F6EAA9F4C\"\nCookie: name=\"NFIS:profile\", value=\"lang:en\"\nCookie: name=\"DACS:NFIS:NRCAN:dlewis\", value=\"usjp1tigSqakP8BnWv\"\n\nTomcat 5.5.26:\n--------------\nHTTP request contains header:\nCookie: JSESSIONID=87C7E668C6C15E2556C0977F6EAA9F4C; NFIS:profile=lang=en;\nDACS:NFIS:NRCAN:dlewis=usjp1tigSqakP8BnWv\n\n* When the HttpServletRequest.getCookies() is called, a Cookie[] is returned:\nCookie: name=\"JSESSIONID\", value=\"J87C7E668C6C15E2556C0977F6EAA9F4C\"\nCookie: name=\"NFIS\", value=\"\"\nCookie: name=\"DACS\", value=\"\"\n\nThis issue \"breaks\" many of the cookies that we use with our applications. The\nonly solution (for now) is to use Tomcat 5.5.25.\n\n--- When is the next Tomcat 5.5.x slated for release?\n\n\n", "id": 115096, "time": "2008-03-29T22:13:51Z", "creator": "dlewis@pfc.cfs.nrcan.gc.ca", "creation_time": "2008-03-29T22:13:51Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 44679, "text": "(In reply to comment #5)\n> Simply put - colons are valid characters for version 0 and version 1 (RFC\n> 2109/RFC 2965) cookies.\n\nThis caught me out recently. Colons might not be explicitly mentioned in the cookie specs but the http spec does not allow them (nor a number of other characters) unless they are quoted - which Tomcat now does for cookies it issues and requires for cookies it receives.", "id": 115114, "time": "2008-03-30T13:10:25Z", "creator": "markt@apache.org", "creation_time": "2008-03-30T13:10:25Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 44679, "text": "servlet spec says\n\npublic void setValue(String newValue)\n\n    Assigns a new value to a cookie after the cookie is created. If you use a binary value, you may want to use BASE64 encoding.\n\n    With Version 0 cookies, values should not contain white space, brackets, parentheses, equals signs, commas, double quotes, slashes, question marks, at signs, colons, and semicolons. Empty values may not behave the same way on all browsers. ", "id": 115140, "time": "2008-03-31T07:28:42Z", "creator": "fhanik@apache.org", "creation_time": "2008-03-31T07:28:42Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "dlewis@pfc.cfs.nrcan.gc.ca", "is_private": false, "id": 115200, "attachment_id": null, "bug_id": 44679, "creation_time": "2008-04-01T12:06:32Z", "time": "2008-04-01T12:06:32Z", "text": "OK ... thanks!\n\nI see that at the bottom of section 2.2 of RFC 2616 (HTTP/1.1)\n\n   Many HTTP/1.1 header field values consist of words separated by LWS\n   or special characters. These special characters MUST be in a quoted\n   string to be used within a parameter value (as defined in section\n   3.6).\n\n       token          = 1*<any CHAR except CTLs or separators>\n       separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                      | \",\" | \";\" | \":\" | \"\\\" | <\">\n                      | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                      | \"{\" | \"}\" | SP | HT\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2.2"}, {"count": 9, "tags": [], "bug_id": 44679, "text": "*** Bug 44871 has been marked as a duplicate of this bug. ***", "id": 115858, "time": "2008-04-24T14:33:12Z", "creator": "fhanik@apache.org", "creation_time": "2008-04-24T14:33:12Z", "is_private": false, "attachment_id": null}, {"text": "*** Bug 44927 has been marked as a duplicate of this bug. ***", "tags": [], "bug_id": 44679, "is_private": false, "count": 10, "id": 116169, "time": "2008-05-02T12:55:33Z", "creator": "markt@apache.org", "creation_time": "2008-05-02T12:55:33Z", "attachment_id": null}, {"count": 11, "attachment_id": null, "bug_id": 44679, "text": "I just tried this with the latest code from the trunk in subversion, and it still fails.", "id": 116178, "time": "2008-05-02T14:30:58Z", "creator": "tmccune@yahoo-inc.com", "creation_time": "2008-05-02T14:30:58Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "tmccune@yahoo-inc.com", "is_private": false, "id": 116180, "attachment_id": null, "bug_id": 44679, "creation_time": "2008-05-02T14:33:09Z", "time": "2008-05-02T14:33:09Z", "text": "Sorry, I meant to add that comment to bug 44927."}, {"count": 13, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "*** Bug 45191 has been marked as a duplicate of this bug. ***", "id": 117621, "time": "2008-06-12T05:24:44Z", "bug_id": 44679, "creation_time": "2008-06-12T05:24:44Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 44679, "is_private": false, "text": "Users shouldnt have to (effectively) format a Cookies output themselves (by needing to add quotes to a Cookies value)...", "id": 117631, "time": "2008-06-12T09:00:11Z", "creator": "uffingtonhouse@yahoo.co.uk", "creation_time": "2008-06-12T09:00:11Z", "attachment_id": null}, {"count": 15, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "is_private": false, "id": 117651, "time": "2008-06-12T15:48:51Z", "bug_id": 44679, "creation_time": "2008-06-12T15:48:51Z", "text": "(In reply to comment #14)\n> Users shouldnt have to (effectively) format a Cookies output themselves (by\n> needing to add quotes to a Cookies value)...\n> \n\nyou don't, just call setVersion(1)\n\n"}, {"count": 16, "tags": [], "bug_id": 44679, "text": "*** Bug 44705 has been marked as a duplicate of this bug. ***", "id": 119192, "time": "2008-07-31T11:59:58Z", "creator": "markt@apache.org", "creation_time": "2008-07-31T11:59:58Z", "is_private": false, "attachment_id": null}, {"text": "*** Bug 44705 has been marked as a duplicate of this bug. ***", "tags": [], "bug_id": 44679, "is_private": false, "count": 17, "id": 119196, "time": "2008-07-31T13:09:11Z", "creator": "markt@apache.org", "creation_time": "2008-07-31T13:09:11Z", "attachment_id": null}, {"count": 18, "tags": [], "creator": "markt@apache.org", "text": "*** Bug 44705 has been marked as a duplicate of this bug. ***", "id": 119325, "attachment_id": null, "bug_id": 44679, "creation_time": "2008-08-03T05:56:18Z", "time": "2008-08-03T05:56:18Z", "is_private": false}, {"count": 19, "attachment_id": null, "bug_id": 44679, "is_private": false, "id": 121378, "time": "2008-10-09T17:07:29Z", "creator": "dlewis@pfc.cfs.nrcan.gc.ca", "creation_time": "2008-10-09T17:07:29Z", "tags": [], "text": "Can anyone confirm that this fix is included with the recent Tomcat 5.5.27 release?"}, {"count": 20, "tags": [], "creator": "tristan.tarrant@gmail.com", "text": "> > Users shouldnt have to (effectively) format a Cookies output themselves (by\n> > needing to add quotes to a Cookies value)...\n> > \n> \n> you don't, just call setVersion(1)\n\nI am using 6.0.18 and I believe the implementation is incorrect.\n\nI have a token which I am BASE64 encoding and adding to the response, but Tomcat says:\n\n\njava.lang.IllegalArgumentException: Control character in cookie value, consider BASE64 encoding your value\n\nBASE64 pads strings with = characters, which according to the above definition *are* control characters, so the recommendation is wrong.\n\nI am setting version 1 on the cookie.\n\nHere is my code:\n\nCookie cookie = new Cookie(COOKIENAME,new BASE64Encoder().encode(token.getBytes()));\ncookie.setVersion(1);\n\nresponse.addCookie(cookie);\n", "id": 121409, "attachment_id": null, "bug_id": 44679, "creation_time": "2008-10-10T08:10:04Z", "time": "2008-10-10T08:10:04Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 44679, "text": "what value does\nnew BASE64Encoder().encode(token.getBytes()))\n\nreturn?\n\n", "id": 121416, "time": "2008-10-10T09:19:40Z", "creator": "fhanik@apache.org", "creation_time": "2008-10-10T09:19:40Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 44679, "text": "simple wrappers to strip = and \\n (tweak to accurately use your own BASE64Encoder class)\n\n    public static String decodeBase64(String s) {\n        switch(s.length()%4) {\n            case 3:\n                s+= \"===\"; break;\n            case 2:\n                s+= \"==\"; break;\n            case 1:\n                s+= \"=\"; break;\n            default:\n        }\n        return new BASE64Encoder().decode(s.getBytes())););\n    }\n\n    public static String encodeBase64(String s) {\n        String encoded = BASE64Encoder().encode(s.getBytes())));\n        return encoded.replaceAll(\"[\\n=]\", \"\");\n    }\n", "id": 121418, "time": "2008-10-10T09:25:07Z", "creator": "funkman@joedog.org", "creation_time": "2008-10-10T09:25:07Z", "is_private": false, "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 44679, "text": "(In reply to comment #22)\n> simple wrappers to strip = and \\n (tweak to accurately use your own\n> BASE64Encoder class)\n\nWHAT ? I'm sorry but that is not an acceptable solution. What if the cookie is read by applications other than mine ? I have to tell them to strip and repad the token ? \n\nShouldn't a version 1 cookie be quoted, therefore protecting the \"=\" and therefore resulting in a valid cookie ?\n\nOtherwise the exception thrown by the following:\n\njava.lang.IllegalArgumentException: Control character in cookie value, consider BASE64 encoding your value\n        at org.apache.tomcat.util.http.ServerCookie.maybeQuote2(ServerCookie.java:365)\n        at org.apache.tomcat.util.http.ServerCookie.maybeQuote2(ServerCookie.java:358)\n        at org.apache.tomcat.util.http.ServerCookie.appendCookieValue(ServerCookie.java:268)\n\n\nis incorrect and confusing and should be changed. Should I file a different bug for this ?\n\n", "id": 121458, "time": "2008-10-12T23:57:00Z", "creator": "tristan.tarrant@gmail.com", "creation_time": "2008-10-12T23:57:00Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "creator": "markt@apache.org", "text": "To repeat Filip's question, what value does\n\nnew BASE64Encoder().encode(token.getBytes()))\n\nreturn?", "id": 121459, "time": "2008-10-13T00:11:41Z", "bug_id": 44679, "creation_time": "2008-10-13T00:11:41Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "text": "(In reply to comment #24)\n> To repeat Filip's question, what value does\n> \n> new BASE64Encoder().encode(token.getBytes()))\n> \n> return?\n> \n\nFor example\n\nFYeqC65bZGVSlPe4Q4iCRhXxOXZ4iN8QrOsQXhYV1bUOmipkRgc9H7cZ9DdQ66+UESCSg3feeMM=\n\nBASE64 uses the following characters:\n\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n\nand \"=\" as a padding character at the end. \nMy question: is the \"=\" (and the \"+\" in the middle of the above string) legal when quoted as a version 1 cookie ?\n\n", "is_private": false, "bug_id": 44679, "id": 121467, "time": "2008-10-13T05:09:06Z", "creator": "tristan.tarrant@gmail.com", "creation_time": "2008-10-13T05:09:06Z", "attachment_id": null}, {"count": 26, "attachment_id": null, "bug_id": 44679, "is_private": false, "id": 121469, "time": "2008-10-13T07:41:18Z", "creator": "markt@apache.org", "creation_time": "2008-10-13T07:41:18Z", "tags": [], "text": "That value works for me and is perfectly legal for a quoted version 1 cookie (as are all the characters you list)\n\nI don't see anything invalid in Tomcat's behaviour. You will be better served using the users list for further assistance. It would help to provide the value that is causing the error."}, {"count": 27, "tags": [], "bug_id": 44679, "is_private": false, "text": "Can anyone confirm that this fix is included with the recent Tomcat 5.5.27\nrelease?\n(In reply to comment #19)\n> Can anyone confirm that this fix is included with the recent Tomcat 5.5.27\n> release?\n> \n\nThe latest version of ServerCookie is NOT in 5.5.27, only in the 6.0.x branch.\n\nUnfortunately for me, the workaround of using cookie.setVersion(1) is not possible since the cookie is set by a third-party.  I wish I could call Google and ask them to fix things (they create the cookie), but I do not have that option.", "id": 122657, "time": "2008-11-19T15:35:46Z", "creator": "ivan_brusic@yahoo.com", "creation_time": "2008-11-19T15:35:46Z", "attachment_id": null}, {"count": 28, "tags": [], "creator": "dlewis@pfc.cfs.nrcan.gc.ca", "is_private": false, "id": 122658, "attachment_id": null, "bug_id": 44679, "creation_time": "2008-11-19T15:39:09Z", "time": "2008-11-19T15:39:09Z", "text": "(In reply to comment #27)\n> The latest version of ServerCookie is NOT in 5.5.27, only in the 6.0.x branch.\n> \n\nThanks for this information ..."}, {"count": 29, "attachment_id": null, "bug_id": 44679, "text": "1.)  HTTP/1.1 allows the usage of separator chars in cookie values\n\nIt is not true, that  the RFC2616 definition for the term \"token\" is restricting the allowed characters for cookies following the Netscape Cookie Definition (cookie 0; see http://web.archive.org/web/20070805052634/http://wp.netscape.com/newsref/std/cookie_spec.html)\n\nWhy:\nThe abstract term \"token\" is used for the definition of possible values for some HTTP headers defined in HTTP 1.1\n\ne.g. \nConnection = \"Connection\" \":\" 1#(connection-token)\nconnection-token  = token\n(http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14)\n\nThe cookie and the Set-Cookie HTTP header is not defined in Http/1.1. \n\nSo from the point of view of Http/1.1 Cookie and Set-Cookie are so called \"extension headers\" (see http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.1)\n\n       entity-header  = Allow                    ; Section 14.7\n                      | Content-Encoding         ; Section 14.11\n                      | Content-Language         ; Section 14.12\n                      | Content-Length           ; Section 14.13\n                      | Content-Location         ; Section 14.14\n                      | Content-MD5              ; Section 14.15\n                      | Content-Range            ; Section 14.16\n                      | Content-Type             ; Section 14.17\n                      | Expires                  ; Section 14.21\n                      | Last-Modified            ; Section 14.29\n                      | extension-header\n\n       extension-header = message-header\n\nSection 4.2 defines the syntax for the abstract term \"message-header\"\n\n       message-header = field-name \":\" [ field-value ]\n       field-name     = token\n       field-value    = *( field-content | LWS )\n       field-content  = <the OCTETs making up the field-value\n                        and consisting of either *TEXT or combinations\n                        of token, separators, and quoted-string>\n\nThe term \"TEXT\" is defined in Section 2.2 (Basic Rules; http://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2)\n\n        TEXT           = <any OCTET except CTLs,\n                        but including LWS>\n\n        OCTET          = <any 8-bit sequence of data>\n\n        CTL            = <any US-ASCII control character\n                        (octets 0 - 31) and DEL (127)>\n\n        LWS            = [CRLF] 1*( SP | HT )\n\n\n*********\nConclusion: HTTP/1.1 restricts possible values for cookies. Using CRT characters is not allowed. \n!!!!! It is definitely allowed to use separator characters !!!!!!\n**********\n\n2.) Servlet Spec does not allow separator chars as value for a cookie\n=====================================================================\nThe Servlet Specification is indifferent.\n\nThe description of the Cookie Constructor says\n    \n    public Cookie(java.lang.String name, java.lang.String value)\n\n    Constructs a cookie with a specified name and value.\n\n    The name must conform to RFC 2109. That means it can contain only ASCII \n    alphanumeric characters and cannot contain commas, semicolons, or white \n    space or begin with a $ character. The cookie's name cannot be changed \n    after creation.\n\n    The value can be anything the server chooses to send. Its value is probably \n    of interest only to the server. The cookie's value can be changed after \n    creation with the setValue method.\n\n    By default, cookies are created according to the Netscape cookie \n    specification. The version can be changed with the setVersion method.\n\n(see http://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/http/Cookie.html#Cookie(java.lang.String,%20java.lang.String)\n\nYou can read it? \"The value can be anything the server chooses to send\"\n\nYou are right, the comment of the Cookie.setValue(String) Method sounds different...\n\n    public void setValue(java.lang.String newValue)\n\n    Assigns a new value to a cookie after the cookie is created. If you use a \n    binary value, you may want to use BASE64 encoding.\n\n    With Version 0 cookies, values should not contain white space, brackets, \n    parentheses, equals signs, commas, double quotes, slashes, question marks, \n    at signs, colons, and semicolons. Empty values may not behave the same way\n    on all browsers.\n\n(see http://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/http/Cookie.html#setValue(java.lang.String) )\n\nIt seems that the writers of the setValue - Comment made the same mistake when interpreting HTTP/1.1. (see Top 1). But they say \"should\",... The proposal to use the BASE64 encoding for binary information is funny, cause a BASE64 encoded binary information can contain slash and the equal character, ... characters which should not be used for a cookie 0 value....\n\n3.) Your Work Around: Migrating cookies to version 1 Cookies, when they are containing special characters\n==================================================\n\nThis is one of the most horrible ways imaginable to handle this problem...\n\nRead what the Servlet Spec says in the setVersion() Comment...\n\n     public void setVersion(int v)\n\n     Sets the version of the cookie protocol this cookie complies with. Version \n     0 complies with the original Netscape cookie specification. Version 1 \n     complies with RFC 2109.\n\n     Since RFC 2109 is still somewhat new, consider version 1 as experimental; \n     do not use it yet on production sites.\n\n\nThere is written \"DO NOT USE IT YET (Version 1 Cookies) ON PRODUCTION SITES\".... \n\nFrom my point of view the justification (\"is still somewhat new\") is a little bit silly (RFC 2109 has been released Feb. 1997) but the conclusion is right in every case. (\"DO NOT USE ON PRODUCTION SITES\")\n\nIf you look outside the servlet spec, you will find there is already a new RFC (Cookie 2, RFC 2965). READ the chapter \"ABSTRACT\" on page 1...\n\n   Abstract\n   ...\n   The method described here differs from Netscape's Cookie\n   proposal [Netscape], but it can interoperate with HTTP/1.0 user\n   agents that use Netscape's method.  (See the HISTORICAL section.)\n\n   This document reflects implementation experience with RFC 2109 and\n   obsoletes it.\n\n\nIn plain text.... RFC 2109 is incompatible with the Netscape cookie spec. It is not possible to support both in one system... So RFC 2109 is not experimental... RFC 2109 was an experiment which failed....\n\n4.) Conclusion\n\n* The Migration to version 1  is definitely a bug.\nSee http://java.sun.com/webservices/docs/1.6/api/javax/servlet/http/Cookie.html\n    \u2026By default, cookies are created using Version 0 to ensure the best interoperability.\n* The newly implemented restriction concerning possible values for cookie0 can be argued with the second comments in the Cookie.setValue() method\u2026 You may say some parts of the Java-Servlet-Spec advise against the usage of separator characters\u2026.  But these characters are definitely allowed for cookie0 values in HTTP/1.1.  In previous versions it was no problem to use e.g. a Base64 encoded binary information as cookie value. (as recommended in the Servlet spec!).  From my point of view it is still a bug, that this is not possible any more. (tomcat 6.18 fixes also some security issues\u2026 The update makes troubles in existing applications\u2026 )\n-\uf0e0 So I will reopen the bug\u2026\n(I can live with it\u2026 I implemented my own Cookie0 Parser and our software does not use the Cookie-API any more\u2026 (we are implementing a security reverse proxy\u2026 and I have to handle cookies as they are defined\u2026 an even as they are used in widespread system\u2026 e.g. WebSphere uses \u201c:\u201d in its session cookie; a lot of applications are using BASE64 encoded strings). \n\nIf you need a fast Cookie0 parser I can contribute one\u2026. \n", "id": 124321, "time": "2009-01-23T08:34:14Z", "creator": "pvp@peterpichler.at", "creation_time": "2009-01-23T08:34:14Z", "tags": [], "is_private": false}, {"count": 30, "attachment_id": null, "bug_id": 44679, "is_private": false, "id": 124353, "time": "2009-01-25T01:32:37Z", "creator": "markt@apache.org", "creation_time": "2009-01-25T01:32:37Z", "tags": [], "text": "(In reply to comment #29)\n> 1.)  HTTP/1.1 allows the usage of separator chars in cookie values\n> \n> It is not true, that  the RFC2616 definition for the term \"token\" is\n> restricting the allowed characters for cookies following the Netscape Cookie\n> Definition (cookie 0; see\n> http://web.archive.org/web/20070805052634/http://wp.netscape.com/newsref/std/cookie_spec.html)\n\nThe cookie 0 spec has a number of ambiguities (eg %XX encoding is suggested but not supported by many (all?) browsers, the '=' character is not listed as one that must be quoted if used in a name or value despite the obvious issues this would cause, etc). The Tomcat treatment of v0 cookies is consistent with the v0 spec and takes a practical view of the various ambiguities that is consistent with the operation of major browsers.\n\nThe v1 spec (RFC2109) does restrict cookie values to token or quoted string.\n\n> 2.) Servlet Spec does not allow separator chars as value for a cookie\n> =====================================================================\n> The Servlet Specification is indifferent.\n\nThe servlet spec defers to the v0 and v1 specs with the additional statement that:\n>     With Version 0 cookies, values should not contain white space, brackets, \n>     parentheses, equals signs, commas, double quotes, slashes, question marks, \n>     at signs, colons, and semicolons. Empty values may not behave the same way\n>     on all browsers.\n\nThe should is enforced as it enables parsing to be unambiguous (see the = comment above).\n\n> 3.) Your Work Around: Migrating cookies to version 1 Cookies, when they are\n> containing special characters\n> ==================================================\n> \n> This is one of the most horrible ways imaginable to handle this problem...\n\nI, and I suspect a number of other committers, strongly disagree.\n\n> There is written \"DO NOT USE IT YET (Version 1 Cookies) ON PRODUCTION\n> SITES\".... \n> \n> From my point of view the justification (\"is still somewhat new\") is a little\n> bit silly (RFC 2109 has been released Feb. 1997) but the conclusion is right in\n> every case. (\"DO NOT USE ON PRODUCTION SITES\")\n\nThat statement should have been updated several spec versions ago. v1 cookies are widely supported and are a lot better than v0 in terms of a well defined spec.\n\n> If you look outside the servlet spec, you will find there is already a new RFC\n> (Cookie 2, RFC 2965). READ the chapter \"ABSTRACT\" on page 1...\n\nIf you read the Tomcat source you will see that the Tomcat developers are well aware of the various cookie specs.\n\n>    Abstract\n>    ...\n>    The method described here differs from Netscape's Cookie\n>    proposal [Netscape], but it can interoperate with HTTP/1.0 user\n>    agents that use Netscape's method.  (See the HISTORICAL section.)\n> \n>    This document reflects implementation experience with RFC 2109 and\n>    obsoletes it.\n> \n> \n> In plain text.... RFC 2109 is incompatible with the Netscape cookie spec. It is\n> not possible to support both in one system... So RFC 2109 is not\n> experimental... RFC 2109 was an experiment which failed....\n\nLast time I checked browser support for RFC 2965 was patchy. It would also help if the servlet spec referenced v2 cookies.\n\n> 4.) Conclusion\n> \n> * The Migration to version 1  is definitely a bug.\n\nWe know the auto conversion isn't spec compliant. That is why if you use strict servlet compliance, the automatic conversion doesn't happen.\n\nThe fundamental problem with cookies is a lack of a well defined specification that is correctly implemented by browsers. This situation is made worse by ambiguities in the v0 spec.\n\nThe changes made to Tomcat's cookie parsing were made to address a number of security concerns. These changes had to be made. These changes highlighted a number of browser issues and further changes were made to provide a solution that is secure and compatible with major browsers.\n\nAll the known issues are addressed in 6.0.18. There may interoperability issues with some systems as a result of Tomcat's stricter parsing. These will almost certainly need to be addressed on a case by case basis but where there is a case for adding functionality or a configuration option to Tomcat it will be considered (please create a separate bugzilla entry for any such proposed patches).\n\nAs has already been noted earlier in this bug, not all of the cookie changes have been ported to 5.5.x. I will create a new Bugzilla entry for 5.5.x to track that to make sure all the changes are ported, hopefully in time for the next 5.5.x release."}, {"count": 31, "tags": [], "creator": "pvp@peterpichler.at", "text": "1-3) \nBrowser Support for cookie values containing \"=\"\n================================================\nI have a lot of experience with using base64 encoded binary information in cookie values. We use it since at least three years with serval 100000 requests per hour from all brosers imaginabel. There is no browser or other HTTP component (Content-Switch, proxy,firewall,...)I know, which does not support the \"=\" character in cookie0 values. (if you know one except the newer versions of the tomcat servlet engine... please tell me)\n\nBeside... cookie0 spec allows \"=\" mark in cookie0 value... so it would be a problem of the browser, if this char would not be supported...\n\nAn \"=\" character in a cookie0 value does not produce an ambiguity\n=================================================================\nFrom the beginning to the first \"=\" mark it is the cookie name... The value starts at the first char after the \"=\" mark an ends when  an semicolon (;) appears (or at the end of the line). I see no problems to determinate a distinct interpretation of a cookie0 Header, if there is an equal mark character in its value. Please correct me, if I forgot anything... \n\nRFC2109\n=======\nIt is not ok to argue with RFC2109, when we are talking about version0 cookies...\n\nAs already mentioned... RFC2109 has been obsoleted by RFC 2965... So it make no sense to argue with this RFC in any case\n\nChapter Abstract first page of RFC2965\n!!!!\nThis document reflects implementation experience with RFC 2109 and obsoletes it.\n!!!!\n\nI agree... the basic problem is in the servlet spec\n===================================================\nYou are right... the basic problem is the servlet spec. They still refer the obsoleted Cookie1 RFC and ignore the actual spec RFC2965. \n(further inconsitancies should be corrected; like saying \"use base64 encoding for binary information\" in the first sentence\" and \"you should not use characters like ... slash, the equal mark,...\" in the next sentence...)\n\nI do not want to bother you... I want to help to improve the quality of the tomcat engine...\n\nI think tomcat should support cookie0 with all its features,... (It is a horror, that a .NET and a tomcat application can not share information with a base64 encoded cookie... not because .NET is so week... but because tomcat is not able to handle cookie0 values, containing a \"=\"). \n\nI will not reopen this bug again, cause I do not have new arguments. (I do not understand, why this bug has been closed.... but I do not have the time to play the reopen-close game...).\n\nPlease read again my arguments and think about reopening this bug...\n\nEspecially because you are trying to solve security issues, you should take care on backward compatibility... (when writing a new HTML-app its no problem, to URL-Encode cookie-values...)\n", "id": 124376, "time": "2009-01-26T12:06:15Z", "bug_id": 44679, "creation_time": "2009-01-26T12:06:15Z", "is_private": false, "attachment_id": null}, {"count": 32, "attachment_id": null, "bug_id": 44679, "text": "*** Bug 46603 has been marked as a duplicate of this bug. ***", "id": 124390, "time": "2009-01-27T03:04:35Z", "creator": "flavio.crispim@gmail.com", "creation_time": "2009-01-27T03:04:35Z", "tags": [], "is_private": false}, {"count": 33, "attachment_id": null, "bug_id": 44679, "text": "(In reply to comment #30)\n\n> \n> The cookie 0 spec has a number of ambiguities (eg %XX encoding is suggested but\n> not supported by many (all?) browsers, the '=' character is not listed as one\n> that must be quoted if used in a name or value despite the obvious issues this\n> would cause, etc). \n\n?? Which browser does not support URL-encoded (%XX encoding) cookie values. I know that IE 6. and 7, Firefox and Opera accecpt URL encoded Cookie values. And I do not know any browser, which does not support it... ???\n\nIt is not written explitly, but the definition \"NAME=VALUE\" says, that the Name Part ends with an equal mark... so it should be clear, that it is not possible to use an equal char for the name of a cookie...\n\nYou are right... within a cookie value it is not forbidden to use an equal mark by the cookie0 spec...\n\n> If you read the Tomcat source you will see that the Tomcat developers are well\n> aware of the various cookie specs.\n\nIf you aware of the various cookie specs you should know, that cookie1 is already obsoleted... and as the servlet spec says cookie0 is still state of the art... and brings the best interoperability.\n\n> We know the auto conversion isn't spec compliant. That is why if you use \n> strict servlet compliance, the automatic conversion doesn't happen.\n\nWhat is servlet spec compliance? There is one sentence in the set cookie comment (\"should not use... equal mark..., slash,..\") and there are at least two sentences saying the opposite...\n\nBecause you ignored them, I will repeat them...\n\nCookie Constructor:\n    The value can be anything the server chooses to send. Its value is probably \n    of interest only to the server....\n...\n\n(see\nhttp://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/http/Cookie.html#Cookie(java.lang.String,%20java.lang.String)\n\nCookie.setValue(...):\n    Assigns a new value to a cookie after the cookie is created. If you use a \n    binary value, you may want to use BASE64 encoding. \n\n(see http://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/http/Cookie.html#setValue(java.lang.String)\n\n\nI think you mentioned already, I am not an english native speaker... but I am sure there is a difference between \"should not\" and \"must not\". I do not know a definition for \"should\" and \"should not\" in the servlet spec... RFC 2119 (Key words for use in RFCs to Indicate Requirement Levels) gives a definition for the term \"SHOULD NOT\"...\n\n    4. SHOULD NOT   This phrase, or the phrase \"NOT RECOMMENDED\" mean that\n       there may exist valid reasons in particular circumstances when the\n       particular behavior is acceptable or even useful, but the full\n       implications should be understood and the case carefully weighed\n       before implementing any behavior described with this label.\n\nI think it is ok to use this RFC also for the interpretation of the servlet spec... If there is no differend definition for \"SHOULD NOT\" in the servlet-spec, it is not correct to say an equal mark in a cookie value is forbidden by the servlet spec... It is definitly NOT RECOMMENDED, but it is allowed....\n\n\n\n", "id": 124395, "time": "2009-01-27T07:12:07Z", "creator": "pvp@peterpichler.at", "creation_time": "2009-01-27T07:12:07Z", "tags": [], "is_private": false}, {"count": 34, "tags": [], "bug_id": 44679, "text": "I asked the JSR315(Servlet 3.0)-team for a clarification in the next servlet spec...\n\n>>> Peter Pichler 28.01.09 14.14 Uhr -> jsr-315-comments@jcp.org >>>\nHello!\n\nI want to inform you about ambiguousness in the current Servlet-Spec, which was not corrected in the published draft java-doc for Servlet 3.0.\n\nMy mail is motivated by a discussion with the tomcat developers (https://issues.apache.org/bugzilla/show_bug.cgi?id=44679#c29). \n\n!!! Maybe you find some time to post your point of view to this bug_report, which apache currently denies acceptance. Unofficially tomcat still has the status of a \u201creference implementation\u201d of the Servlet spec\u2026 so I think it makes sense to help them improving their quality!!!\n\nCookie-API and Cookie0 Spec / Discussion about changes made in tomcat 6.0.16-6.0.18:\n========================================\nCurrently there is a great discussion in the tomcat-bugzilla... (https://issues.apache.org/bugzilla/show_bug.cgi?id=44679#c29) There are different points of view, but most parties agree, that the problems are provoked by inconsistencies in the Servlet-Spec.\n \nProblematic part of the servlet-spec:\n> public Cookie(java.lang.String name, java.lang.String value)\n\n>    Constructs a cookie with a specified name and value.\n\n>    The name must conform to RFC 2109. That means it can contain only ASCII alphanumeric characters and cannot \n> contain commas, semicolons, or white space or begin with a $ character. The cookie's name cannot be changed after \n> creation.\n\n> The value can be anything the server chooses to send. Its value is probably of interest only to the server. \n> The cookie's value can be changed after creation with the setValue method. \n> ....\n\n>> public void setValue(java.lang.String newValue)\n\n >   Assigns a new value to a cookie after the cookie is created. \n \n > With Version 0 cookies, values should not contain white space, brackets, parentheses, equals signs, commas, double \n > quotes, slashes, question marks, at signs, colons, and semicolons. Empty values may not behave the same way on all \n > browsers.\n\nConstructor:\nThe sentence in the constructor \"The value can be anything the server chooses to send\" is definitely too much...\n\nsetValue:\nThe BASE64 charset contains the slash and the equal mark... So the spec recommends base64 for binary information in the first sentence... and says it is not recommended in the second sentence...\n\n__________\nProposal:\n======\n(REM You will have to translate following text from Austrian-English to real English... )\n\nConstructor:\n\nReplace: the text:\n\"The value can be anything the server chooses to send. Its value is probably of interest only to the server.\u201d\nby\n\"The allowed character set for cookie values depends on the cookie version used. (see setValue(...) for details)\"\n\nUse following text to explain Cookie.setValue(...) for Version 0\n\n\"Following characters may not be used for a cookie0 value: \n* RFC2616-CTL characters (ASCII 0-31 and 127; forbidden characters for extension HTTP headers)\n* Semi-colon, comma and white space (explicitly forbidden by the cookie0 draft)\nIf you use a binary value, you may want to use BASE64 encoding.\"\n\n_________________\nTwo further proposals for the next versions of the servlet-spec\n\nCookie1:\n======\nFact: Cookie1-RFC (Released: 1997) has been invalidated by Cookie2 (released 2000).\n\nSo the comment for Cookie.setVersion(...) is obsolete too and should be changed.\n\nReplace \n\n\u201cSince RFC 2109 is still somewhat new, consider version 1 as experimental; do not use it yet on production sites.\"\nby \n\"RFC 2109 (Cookie-1) has been obsoleted by RFC 2965 (Cookie-2); do not use it on production sites\".\n\nCookie2:\n======\nFrom my point of view the cookie2-Spec looks suitable. Of course browser support is week until now, but that can change quickly. The servlet spec should definitely support RFC2965 cookies.\n\nCookies and HttpOnly\n=================\nMicrosoft defined this cookie feature outside any RFC. (See http://msdn.microsoft.com/en-us/library/ms533046.aspx). It is a useful additional security feature for cookies also supported by Mozilla and Opera. Currently it is not possible to create HttpOnly Cookies using the servlet API.\n\nThe HttpOnly feature complicates the usage of malicious Client-Side-Cross-Side-Scripting within HTML application.\n\nSecurity Reviews of applications may claim to use this feature\u2026 and it is more work to argue against it, than to implement the cookie handling\u2026 \n\nYours sincerely\n\n\nPeter Pichler", "id": 124426, "time": "2009-01-28T05:29:45Z", "creator": "pvp@peterpichler.at", "creation_time": "2009-01-28T05:29:45Z", "is_private": false, "attachment_id": null}, {"text": "No matter what happens, the behavior of cookie processing will not change again in the 5.5 and 6.0 branches, I would veto that. Feel free to pursue that little crusade of yours for future releases.\n\nBTW: Tomcat is not the reference implementation of anything.", "tags": [], "bug_id": 44679, "is_private": false, "count": 35, "id": 124428, "time": "2009-01-28T06:34:35Z", "creator": "remm@apache.org", "creation_time": "2009-01-28T06:34:35Z", "attachment_id": null}, {"count": 36, "tags": [], "creator": "markt@apache.org", "text": "I have tried to keep my response as brief as possible.\n\nv0 cookies and '='\nI do not see anything in the v0 spec that indicates that '=' is not permitted in the cookie name - hence the ambiguity. I am open to revisiting this if it can be shown clearly that the v0 spec does not permit '=' in the cookie name.\n\nv1 cookies\nRegardless of one's views of the v1 spec, Tomcat has to support v1 cookies. I don't see any issues with Tomcat 6's v1 cookie handling in the text above but if I have missed something, please create a separate Bugzilla entry for it.\n\nv2 cookies\nThe servlet API only supports v0 and v1 cookies. I am all for adding v2 support but this would be better handled through the Expert Group (EG).\n\nServlet spec issues\nThis are best handled through the EG.\n\nhttpOnly\nThis is in the 3.0 servlet spec and will be supported in Tomcat 7. There are patches proposed to backport this to 6.0.x and 5.5.x but they need to be reviewed in light of the 3.0 spec changes to try and keep things consistent.\n\nStrict servlet compliance\nSee the specification section of\nhttp://tomcat.apache.org/tomcat-6.0-doc/config/systemprops.html\n\n%XX encoding in cookie headers\nI did some testing of this when looking at the cookie parsing some time ago and couldn't get it to work. My tests could have been bad. The wording in the v0 spec for %XX encoding is such that relying on any encoding scheme is going to be risky - this is one of the issues with the v0 spec.", "id": 124458, "attachment_id": null, "bug_id": 44679, "creation_time": "2009-01-29T02:04:16Z", "time": "2009-01-29T02:04:16Z", "is_private": false}, {"count": 37, "tags": [], "bug_id": 44679, "is_private": false, "text": "(In reply to comment #36)\n> I have tried to keep my response as brief as possible.\n> \n> v0 cookies and '='\n> I do not see anything in the v0 spec that indicates that '=' is not permitted\n> in the cookie name - hence the ambiguity. I am open to revisiting this if it\n> can be shown clearly that the v0 spec does not permit '=' in the cookie name.\n\nIt is an lack in the Netscape Draft... With good will it is possible to interpretate the draft like... \"it is clear, that it is not possible to have cookie names containing an equal mark, because the equal mark is the delimiter for the cookie name\"... for sure you can argue otherwise also... (Other forbidden characters are mentioned explicitly... so the cookie draft allows the equal mark for cookie names...) \n\nThe cookie draft can not be changed any more... so we have to look how to handle it... Because it is impossible to implement a Cookie-Handling allowing \"=\" in the cookie name... it makes no sense trying to support it...\n\n> v1 cookies\n> Regardless of one's views of the v1 spec, Tomcat has to support v1 cookies. I\n> don't see any issues with Tomcat 6's v1 cookie handling in the text above but\n> if I have missed something, please create a separate Bugzilla entry for it.\n\nYou are right, cause the servlet spec requires cookie1 support.... (but they say cookie1 is experimental and should not be used on production side... because of that - and because cookie1 is obsolete since more than 8 years - it may be clever to put not to much effort in the cookie1 support.... a private meaning... My topic is the cookie0 support... the cookie1 topic came up, cause others are arguing with cookie1 when talking about cookie0)\n\n\n> v2 cookies, httpOnly...\nYou are right... v2 Cookie-Support, HttpOnly-Support should be defined first in the  servlet-spec... \n\n> %XX encoding in cookie headers\n> I did some testing of this when looking at the cookie parsing some time ago and\n> couldn't get it to work. My tests could have been bad. The wording in the v0\n> spec for %XX encoding is such that relying on any encoding scheme is going to\n> be risky - this is one of the issues with the v0 spec.\n\nThis is what I do in applications with cookie values previously used base64 encoding.... (to eliminate slash and equal-mark... I use base64 and URL-Encoding after, because this produces shorter result strings) ... Until now it seems to work fine . If there are realy problems with this kind of work-around... it would be interesting for me... (but we are testing our software with serveral browsers and environments - and until now no problem has been reported)\n\n", "id": 124487, "time": "2009-01-29T10:13:12Z", "creator": "pvp@peterpichler.at", "creation_time": "2009-01-29T10:13:12Z", "attachment_id": null}, {"count": 38, "tags": [], "creator": "mattcoz@yahoo.com", "is_private": false, "id": 133100, "attachment_id": null, "bug_id": 44679, "creation_time": "2009-12-23T14:25:22Z", "time": "2009-12-23T14:25:22Z", "text": "I'm having the same issue as David Lewis, where my cookies have a colon in the name and therefore aren't being parsed correctly.  I've read through all the comments and I can't see anything that directly addresses the problem.  Even if I quote the name I get the same behavior.  Is this simply not supported in any way?  I never ran into this issue before because the app was running on an older version of Tomcat 5.5, and I just moved it along with another website to Tomcat 6.0.20.  I can change my code to use a different name, but I would like to be able to continue to use the cookies that are already stored in client browsers."}, {"text": "(In reply to comment #38)\nYou can always parse the cookie header yourself. Note Bugzilla isn't a support forum . If you need further assistance, please use the users list.", "tags": [], "bug_id": 44679, "is_private": false, "count": 39, "id": 133101, "time": "2009-12-23T14:43:05Z", "creator": "markt@apache.org", "creation_time": "2009-12-23T14:43:05Z", "attachment_id": null}, {"count": 40, "tags": [], "bug_id": 44679, "text": "I just discovered the org.apache.tomcat.util.http.ServerCookie.ALLOW_EQUALS_IN_VALUE system property that was introduced in Tomcat 6.0.24.  Looks like Mark has seen the light. :)  I just wanted to update this issue so everyone that needs this feature is aware of it.", "id": 133899, "time": "2010-01-25T11:50:45Z", "creator": "tmccune@yahoo-inc.com", "creation_time": "2010-01-25T11:50:45Z", "is_private": false, "attachment_id": null}, {"count": 41, "tags": [], "bug_id": 44679, "text": "*** Bug 49252 has been marked as a duplicate of this bug. ***", "id": 136653, "time": "2010-05-05T10:42:24Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-05-05T10:42:24Z", "is_private": false, "attachment_id": null}, {"count": 42, "tags": [], "text": "*** Bug 47429 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 44679, "id": 136662, "time": "2010-05-05T12:11:28Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-05-05T12:11:28Z", "attachment_id": null}, {"count": 43, "tags": [], "bug_id": 44679, "text": "*** Bug 46177 has been marked as a duplicate of this bug. ***", "id": 136664, "time": "2010-05-05T12:13:09Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-05-05T12:13:09Z", "is_private": false, "attachment_id": null}, {"count": 44, "tags": [], "creator": "Krystian.Nowak@gmail.com", "text": "Observing the comments here I would have to support it as being an interoperability issue between other, non Java platforms/languages.\nAs an example we can put here Resin as Java-PHP interop bridge:\nhttp://bugs.caucho.com/view.php?id=4767\n\nIt boils down to supporting array cookies (multidimensional arrays in fact) in PHP as described in:\nhttp://php.net/manual/en/language.variables.external.php#language.variables.external.cookies\nhttp://php.net/manual/en/function.setcookie.php#example-3780\nhttp://www.developertutorials.com/tutorials/php/articlename-050526-1149/\n\nOf course one can put one RFC against another, but fortunately, at least on different javax.servlet.http.Cookie implementations there are possible workarounds as in:\nhttp://java.net/jira/browse/GLASSFISH-10850?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel\nhttp://java.net/jira/browse/GLASSFISH-10945?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel\nadvising to use (in some implementations e.g. from javax.servlet-api-3.0.1) system property defining legacy/backward-compatibility mode:\n\"org.glassfish.web.rfc2109_cookie_names_enforced\" system property\n\nSo it seems that the subject still lives, is viable, important and cannot be just muted by \"parse the cookie header yourself\".\n\nCheers,\nKrystian", "id": 149531, "attachment_id": null, "bug_id": 44679, "creation_time": "2011-09-20T18:32:13Z", "time": "2011-09-20T18:32:13Z", "is_private": false}]
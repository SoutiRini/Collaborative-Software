[{"count": 0, "tags": [], "bug_id": 736, "attachment_id": null, "id": 888, "time": "2001-02-27T11:18:56Z", "creator": "dwasserm@randomwalk.com", "creation_time": "2001-02-27T11:18:56Z", "is_private": false, "text": "There are a bunch of bugs in DailyRollingFileAppender.\nI have a mostly fixed version, included below.\nSearch esp. for the token \"BUG FIX\".\nI changed the class name to AutoRollingFileAppender while fixing it.\n\nFeel free to contact me back about it: dwasserm@randomwalk.com\n-Dov Wasserman (dmw)\n\n\npackage org.apache.log4j;\n\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.io.FileWriter;\nimport java.io.File;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Calendar;\n\nimport org.apache.log4j.*;\nimport org.apache.log4j.helpers.OptionConverter;\nimport org.apache.log4j.helpers.QuietWriter;\nimport org.apache.log4j.helpers.CountingQuietWriter;\nimport org.apache.log4j.helpers.LogLog;\nimport org.apache.log4j.spi.LoggingEvent;\nimport org.apache.log4j.spi.ErrorCode;\n\n\npublic class AutoRollingFileAppender extends FileAppender {\n\n\n  // The code assumes that the following constants are in a increasing\n  // sequence.\n  static final int TOP_OF_TROUBLE=-1;\n  static final int TOP_OF_MINUTE = 0;\n  static final int TOP_OF_HOUR   = 1;\n  static final int HALF_DAY      = 2;\n  static final int TOP_OF_DAY    = 3;\n  static final int TOP_OF_WEEK   = 4;\n  static final int TOP_OF_MONTH  = 5;\n\n\n  /**  A string constant used in naming the option for setting the\n   *   filename pattern. Current value of this string constant is\n   *   <strong>datePattern</strong>.\n   */\n  static final public String DATE_PATTERN_OPTION = \"DatePattern\";\n\n  /** The date pattern. By default, the pattern is set to\n   *  \"'.'yyyy-MM-dd\", meaning daily rollover at midnight.\n   */\n  // **** BUG FIX\n  private String datePattern = \"'.'yyyy-MM-dd\"; // must be yyyy, not YYYY -dmw\n\n  /** The actual formatted filename that is currently being written to. */\n  private String scheduledFilename;\n\n  /** The timestamp when we shall next recompute the filename. */\n  private long nextCheck = System.currentTimeMillis () - 1;\n\n  Date now = new Date();\n  SimpleDateFormat sdf;\n  RollingCalendar rc = new RollingCalendar();\n  int checkPeriod = TOP_OF_TROUBLE;\n\n  /** The default constructor does nothing. */\n  public AutoRollingFileAppender() {\n  }\n\n  /** Instantiate a <code>AutoRollingFileAppender</code> and open the\n   *  file designated by <code>filename</code>. The opened filename will\n   *  become the ouput destination for this appender.\n   */\n  public AutoRollingFileAppender (Layout layout, String filename,\n\t\t\t\t   String datePattern) throws IOException {\n\tsuper(layout, filename, true);\n\tthis.datePattern = datePattern;\n\tactivateOptions();\n  }\n\n\n  public void activateOptions() {\n\tsuper.activateOptions();\n\tif(datePattern != null && fileName != null) {\n\t  now.setTime(System.currentTimeMillis());\n\t  sdf = new SimpleDateFormat(datePattern);\n\t  int type = computeCheckPeriod();\n\t  printPeriodicity(type);\n\t  rc.setType(type);\n\t  scheduledFilename = fileName+sdf.format(now);\n\t} else {\n\t  LogLog.error(\"Either Filename or DatePattern options are not set for \n[\"+\n\t\t   name+\"].\");\n\t}\n  }\n\n  void printPeriodicity(int type) {\n\tswitch(type) {\n\tcase TOP_OF_MINUTE:\n\t  LogLog.debug(\"Appender [\"+name+\"] to be rolled every minute.\");\n\t  break;\n\tcase TOP_OF_HOUR:\n\t  LogLog.debug(\"Appender [\"+name\n\t\t   +\"] to be rolled on top of every hour.\");\n\t  break;\n\tcase HALF_DAY:\n\t  LogLog.debug(\"Appender [\"+name\n\t\t   +\"] to be rolled at midday and midnight.\");\n\t  break;\n\tcase TOP_OF_DAY:\n\t  LogLog.debug(\"Appender [\"+name\n\t\t   +\"] to be rolled at midnight.\");\n\t  break;\n\tcase TOP_OF_WEEK:\n\t  LogLog.debug(\"Appender [\"+name\n\t\t   +\"] to be rolled at start of week.\");\n\t  break;\n\tcase TOP_OF_MONTH:\n\t  LogLog.debug(\"Appender [\"+name\n\t\t   +\"] to be rolled at start of every month.\");\n\t  break;\n\tdefault:\n\t  LogLog.warn(\"Unknown periodicity for appender [\"+name+\"].\");\n\t}\n  }\n\n\n      // **** BUG FIX (kludge)\n\tint computeCheckPeriod() {\n\t\treturn TOP_OF_DAY; // and top o' the morning to you, too!\n/********** BUGGY!!!! **********************/\n//\t\tRollingCalendar c = new RollingCalendar();\n//\t\t// set sate to 1970-01-01 00:00:00 GMT\n//\t\tDate epoch = new Date(0);\n//\t\tif (datePattern != null) {\n//\t\t\tfor(int i = TOP_OF_MINUTE; i <= TOP_OF_MONTH; i++) {\n//\t\t\t\tString r0 = sdf.format(epoch);\n//\t\t\t\tc.setType(i);\n//\t\t\t\tDate next = new \nDate(c.getNextCheckMillis(epoch));\n//\t\t\t\tString r1 = sdf.format(next);\n//\t\t\t\tSystem.out.println(\"Type = \"+i+\", r0 = \"+r0+\", \nr1 = \"+r1);\n//\t\t\t\tif (r0 != null && r1 != null && !r0.equals(r1)) \n{\n//\t\t\t\t\tSystem.out.println(\"Returning \" + i);\n//\t\t\t\t\treturn i;\n//\t\t\t\t}\n//\t\t\t}\n//\t\t}\n//\t\treturn TOP_OF_TROUBLE; // Deliberately head for trouble...\n\t}\n\n\n  /** Retuns the option names for this component,\n   *  namely {@link #DATE_PATTERN_OPTION} in\n   *  addition to the options of\n   *  {@link FileAppender#getOptionStrings FileAppender}.\n   */\n  public String[] getOptionStrings() {\n\treturn OptionConverter.concatanateArrays(super.getOptionStrings(),\n\t\t   new String[] {DATE_PATTERN_OPTION});\n  }\n\n\n// **** BUG FIX (the major one: added this method back in)\n\t/**  This method differentiates AutoRollingFileAppender from\n\t *   its super class.\n\t */\n\tprotected void subAppend(LoggingEvent event) {\n\t\tlong n = System.currentTimeMillis();\n\t\tif (n >= nextCheck) {\n\t\t\tnow.setTime(n);\n\t\t\tnextCheck = rc.getNextCheckMillis(now);\n\t\t\ttry {  rollOver();  }\n\t\t\tcatch(IOException ioe) {\n\t\t\t\tLogLog.error(\"rollOver() failed.\", ioe);\n\t\t\t}\n\t\t}\n\t\tsuper.subAppend(event);\n   }\n\n  /** Rollover the current file to a new file. */\n  void rollOver() throws IOException {\n\n\t/* Compute filename, but only if datePattern is specified */\n\tif (datePattern == null) {\n\t  errorHandler.error(\"Missing \"+DATE_PATTERN_OPTION+\n\t\t\t \" option in rollOver().\");\n\t  return;\n\t}\n\n\tString datedFilename = fileName+sdf.format(now);\n\tif (scheduledFilename.equals(datedFilename))\n\t  return;\n\n\t// close current file, and rename it to datedFilename\n\tthis.closeFile();\n\n\tFile target  = new File(scheduledFilename);\n\tif (target.exists()) {\n\t  target.delete();\n\t}\n\n\tFile file = new File(fileName);\n\tfile.renameTo(target);\n\tLogLog.debug(fileName +\" -> \"+ scheduledFilename);\n\n\ttry {\n\t  // This will also close the file. This is OK since multiple\n\t  // close operations are safe.\n\t  this.setFile(fileName, false);\n\t}\n\tcatch(IOException e) {\n\t  errorHandler.error(\"setFile(\"+fileName+\", false) call failed.\");\n\t}\n\tscheduledFilename = datedFilename;\n  }\n\n  /** Set the options for the {@link AutoRollingFileAppender}\n\t  instance.\n\n\t <p>The <b>DatePattern</b> takes a string in the same format as\n\t expected by {@link SimpleDateFormat}. This options determines the\n\t rollover schedule.\n\n\t <p>Be sure to refer to the options in the super classes {@link\n\t FileAppender}, {@link WriterAppender} and in particular the\n\t <b>Threshold</b> option in {@link AppenderSkeleton}.\n\n\t </ul>\n\t */\n\t public void setOption(String key, String value) {\n\t\tif(value == null) return;\n\t\tsuper.setOption(key, value);\n\t\tif(key.equalsIgnoreCase(DATE_PATTERN_OPTION)) {\n\t\t  datePattern = value;\n\t\t}\n\t}\n} // AutoRollingFileAppender\n\n/** RollingCalendar is a helper class to\n\tAutoRollingFileAppender. Using this class, it is easy to compute\n\tand access the next Millis()\n\n   It subclasses the standard {@link GregorianCalendar}-object, to\n   allow access to the protected function getTimeInMillis(), which it\n   then exports.\n\n   @author <a HREF=\"mailto:eirik.lygre@evita.no\">Eirik Lygre</a> */\n\nclass RollingCalendar extends GregorianCalendar {\n\n  int type = AutoRollingFileAppender.TOP_OF_TROUBLE;\n\n  void setType(int type) {\n\tthis.type = type;\n  }\n\n  public\n  long getNextCheckMillis(Date now) {\n\treturn getNextCheckDate(now).getTime();\n  }\n\n  public\n  Date getNextCheckDate(Date now) {\n\tthis.setTime(now);\n\n\tswitch(type) {\n\tcase AutoRollingFileAppender.TOP_OF_MINUTE:\n\tthis.set(Calendar.SECOND, 0);\n\tthis.set(Calendar.MILLISECOND, 0);\n\tthis.add(Calendar.MINUTE, 1);\n\tbreak;\n\tcase AutoRollingFileAppender.TOP_OF_HOUR:\n\tthis.set(Calendar.MINUTE, 0);\n\tthis.set(Calendar.SECOND, 0);\n\tthis.set(Calendar.MILLISECOND, 0);\n\tthis.add(Calendar.HOUR_OF_DAY, 1);\n\tbreak;\n\tcase AutoRollingFileAppender.HALF_DAY:\n\tthis.set(Calendar.MINUTE, 0);\n\tthis.set(Calendar.SECOND, 0);\n\tthis.set(Calendar.MILLISECOND, 0);\n\tint hour = get(Calendar.HOUR_OF_DAY);\n\tif(hour < 12) {\n\t  this.set(Calendar.HOUR_OF_DAY, 12);\n\t} else {\n\t  this.set(Calendar.HOUR_OF_DAY, 0);\n\t  this.add(Calendar.DAY_OF_MONTH, 1);\n\t}\n\tbreak;\n\tcase AutoRollingFileAppender.TOP_OF_DAY:\n\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\tthis.set(Calendar.MINUTE, 0);\n\tthis.set(Calendar.SECOND, 0);\n\tthis.set(Calendar.MILLISECOND, 0);\n\tthis.add(Calendar.DATE, 1);\n\tbreak;\n\tcase AutoRollingFileAppender.TOP_OF_WEEK:\n\tthis.set(Calendar.DAY_OF_WEEK, getFirstDayOfWeek());\n\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\tthis.set(Calendar.SECOND, 0);\n\tthis.set(Calendar.MILLISECOND, 0);\n\tthis.add(Calendar.WEEK_OF_YEAR, 1);\n\tbreak;\n\tcase AutoRollingFileAppender.TOP_OF_MONTH:\n\tthis.set(Calendar.DATE, 1);\n\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\tthis.set(Calendar.SECOND, 0);\n\tthis.set(Calendar.MILLISECOND, 0);\n\tthis.add(Calendar.MONTH, 1);\n\tbreak;\n\tdefault:\n\tthrow new IllegalStateException(\"Unknown periodicity type.\");\n\t}\n\treturn getTime();\n  }\n}\n\n\n--\n\"Outside of a dog, a book is man's best friend. \u00a0Inside a dog, it's too\ndark to read.\"\n-- Groucho Marx\n_______________________________________________________\n\nDov Wasserman \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Random Walk Computing, Inc.\n212.480.5820 x265 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11 Broadway, 7th Floor\ndwasserm@randomwalk.com \u00a0 New York, NY 10004\n_______________________________________________________"}, {"count": 1, "tags": [], "text": "\nThe subAppend method was dropped by mistake. I do not see why you changed the \ncomputePeriod method. What's wrong with it? (I think it's pretty solid myself.)  ", "attachment_id": null, "id": 961, "creator": "bugzilla@apache.org", "time": "2001-03-04T15:43:25Z", "bug_id": 736, "creation_time": "2001-03-04T15:43:25Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 71234, "time": "2005-02-19T10:36:42Z", "creator": "sbailliez@apache.org", "creation_time": "2005-02-19T10:36:42Z", "is_private": false, "text": "Jasper performance is abysmal when using jspc to precompiles jsps, or more \nespecially to generate the java files.\n\nI have a webapp with 450 jsps, jasper generates the java files in 12 minutes. \nIn comparison, javac compilation for those 450 generated java files is \nperformed in 1 minute.\n\nProfiling and debugging the code, it appears clearly that most of the time is \nspent doing the same parsing for static include directives over and over.\n\nTypically a page includes an init page which itself includes 2 init pages.\npage.jsp -> init.jsp -> { init-a.jsp, init-b.jsp, ... }\n\nFor each and every page, the parser always go down the tree without caching \nincludes and parse init.jsp, and so on. So basically the init.jsp is parsed \n450 times.\n\nThe Mark object is also pretty inefficient as it generates bazillions of \nobjects which are not so lightweight (via Mark.mark())."}, {"count": 1, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 71236, "time": "2005-02-19T11:53:34Z", "creator": "remm@apache.org", "creation_time": "2005-02-19T11:53:34Z", "is_private": false, "text": "Ok. Does this mean you have done some optimizations already (patches) ?\nDo you have test cases ? (JSPs which are particularly slow to compile)\n\nNote: This will looked at in 5.0.x (better to have a slow source generation than\na *broken* source generation)."}, {"count": 2, "tags": [], "text": "I'm currently hacking the jasper code to try to understand it as i'm not very \nfamiliar with the code and need to understand relations between objects and \nparticulary how nodes are attached to each other, how dependant files are \nadded and resolved, etc... it is a bit of obscure right now.\n\nI'm not sure yet what would be the best place to cache those include: \nParserController, Parser, .. and I think I need to make those Node classes \nmutable to get control over the parent and reset/set it easily.\n\nI guess that for anyone familiar with the code, the view is pretty clear, mine \nis not at the moment.\n\nMy current testcase is the liferay portal sources (www.liferay.com), it needs \na bit of doc to setup so it's not convenient for an independant testcase.\n\n(NB: If I reported against 5.5.7 it is a mistake and is indeed 5.0.x)", "attachment_id": null, "bug_id": 33650, "id": 71237, "time": "2005-02-19T12:09:25Z", "creator": "sbailliez@apache.org", "creation_time": "2005-02-19T12:09:25Z", "is_private": false}, {"count": 3, "tags": [], "text": "I made the \"mistake\". As I said, this will not be addressed (as in -1 = veto) in\n5.0.x.", "is_private": false, "bug_id": 33650, "id": 71238, "time": "2005-02-19T13:47:07Z", "creator": "remm@apache.org", "creation_time": "2005-02-19T13:47:07Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Ah ok, did not really understood it that way since I consider it is 'better to \nhave a slow source generation than a *broken* source generation' in any \nsituation and not just in 5.0.x :). Thus the qualification as 'enhancement'.\n\nNonetheless, I'm still trying to understand the code. I have made little \nprogress as I realized I needed to delta the dependencies that are added \nthrough the Compiler instance if I want to cache the includeDirective \nfragment. I still need to find how are the taglibs evaluated to generate the \njava code.\n\nAt this time it looks like I could dream sort of a 10x improvement if this \nsort of caching can be done.\n", "attachment_id": null, "id": 71239, "creator": "sbailliez@apache.org", "time": "2005-02-19T14:00:06Z", "bug_id": 33650, "creation_time": "2005-02-19T14:00:06Z", "is_private": false}, {"count": 5, "tags": [], "text": "My comment was indeed missing two words.\n\nBTW, regardless of what your profiler says, I don't think you can get 10x.\nHowever, now that the runtime performance is good, I'm interested in optimizing\ncompile times. One part has been done already by replacing the compiler by one\nwhich decreses I/O (although the main benefit was to get compilation on the JRE\ninstead of the JDK).", "attachment_id": null, "id": 71240, "creator": "remm@apache.org", "time": "2005-02-19T14:20:32Z", "bug_id": 33650, "creation_time": "2005-02-19T14:20:32Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 33650, "text": "The compilation process is an external compilation process with ant javac \ntask. I'm not using the internal one as for compilation within jspc it is \noften inappropriate and it is not flexible enough for file selection, \nclasspath, and jvm settings.\n\nI'm using this because many people tend to name jsp include with .jsp \nextensions and it will f* up blind attempt to compile from Jasper as they will \nbe generated to java and it is invalid code by essence.\n\nWorkaround process is usually.\n1. jspc (.jsp -> .java)\n2. delete generated static includes based on text content selectors (looking \nfor unevaluated taglibs syntax for example)\n3. javac everything\n\nI'm myself always recommending people to name their includes as jspf (or .inc) \nextensions as it is:\n- visually more convenient\n- Jasper does not choke on it\n- JSP editors will still understand the syntax (except for .inc)\n\nI would really like to enhance this Ant jspc task but this is in my mile long \ntodo list.\n\nAs for the speed up, I cannot see any reason why it should be 10x slower than \njava compilation (2-3s for a single jsp->java is huge). but really, all I'm \nmissing is the taglibs evaluation and the process apparently should be able to \nfly\n\nNB: For I/O it should not cost much to wrap BufferedOutputStream over the \nFileOutputStream. (I did not check if there was any change on this in cvs as I \nplaying with 5.0.30 sources) but really it is peanuts compared to the zillions \nof I/O from constant loading and parsing of includes and tlds.", "id": 71241, "time": "2005-02-19T14:47:25Z", "creator": "sbailliez@apache.org", "creation_time": "2005-02-19T14:47:25Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 71244, "time": "2005-02-19T17:01:06Z", "creator": "sbailliez@apache.org", "creation_time": "2005-02-19T17:01:06Z", "is_private": false, "text": "FYI, putting a simple hashmap to cache the TLDs TreeNode to avoid the DOM \nparsing of TLDs in TagLibraryInfoImpl for each and every JSP brings the timing \nto 8 minutes instead of 12 on my 'testcase'. A 30% improvement."}, {"count": 8, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 71245, "time": "2005-02-19T17:09:56Z", "creator": "remm@apache.org", "creation_time": "2005-02-19T17:09:56Z", "is_private": false, "text": "You still need to \"play nice\" with regular Jasper mode, when compilation occurs\non access. I would complain if there are memory leaks, and/or abusive memory\nusage ;)\n\nIf code generation times go down significantly, and since JDT is used to compile\n(fast and does very little I/O), I would assume it would encourage many people\nto not bother with precompilation (hence the need to avoid leaks and huge memory\nusage)."}, {"count": 9, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "(In reply to comment #7)\n> FYI, putting a simple hashmap to cache the TLDs TreeNode to avoid the DOM \n> parsing of TLDs in TagLibraryInfoImpl for each and every JSP brings the timing \n> to 8 minutes instead of 12 on my 'testcase'. A 30% improvement.\n\nNice improvement.", "id": 71246, "time": "2005-02-19T17:11:50Z", "bug_id": 33650, "creation_time": "2005-02-19T17:11:50Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 33650, "text": "> You still need to \"play nice\" with regular Jasper mode, when compilation\n> occurs on access. I would complain if there are memory leaks, and/or abusive\n> memory usage ;)\n\nI think the cache needs to be enabled only in command line mode (batch \ncompile). Otherwise it does not make much sense and it complicate things when \nyou are development mode.\n\n> I would assume it would encourage many people to not bother with\n> precompilation \n\nIt is totally different.\n\nPre-compiling your jsp is mostly a way to check that there is no syntax or \nconfiguration problems with your taglibs or jsp. You don't care much with a \npetstore webapp with 10 jsps that you can check manually at deployment time, \nbut with hundred of thems, it is not something you can afford.\n\nAssuming you have some QA dept or some automated robot to go through all your \nwebpages, that's also useless to deliver something that does not even compile. \nSo it's mostly a development thing and must be part of your process, and it \nshould be part of the daily build as well of course. \n\nSo if we can cut down this check from 12 to 1min, believe me I think some \npeople would love it.", "id": 71247, "time": "2005-02-19T18:04:39Z", "creator": "sbailliez@apache.org", "creation_time": "2005-02-19T18:04:39Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "I've made this item a candidate for the Summer of Code:\nhttp://wiki.apache.org/general/SummerOfCode2005.", "attachment_id": null, "bug_id": 33650, "id": 75694, "time": "2005-06-01T04:26:21Z", "creator": "yoavs@computer.org", "creation_time": "2005-06-01T04:26:21Z", "is_private": false}, {"count": 12, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "text": "I was just looking at it. :) Good thing, Yoav, I unfortunately spend my time \nswitching priorities due to the current nature of my work, so I hope someone \nwill take over, there sure is a nice opportunity.", "id": 75706, "time": "2005-06-01T09:03:35Z", "bug_id": 33650, "creation_time": "2005-06-01T09:03:35Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 33650, "text": "(In reply to comment #11)\n> I've made this item a candidate for the Summer of Code:\n> http://wiki.apache.org/general/SummerOfCode2005.\n\nI have applied to participate in this project during google summer of code.  If\nI am accepted or not I am still very interested in this issue.  I am a student\nintern at a company and during my time there I have been involved in development\nof a very large web application involving several hundred jsps.  I have\nencountered this issue during development / deployment and would enjoy learning\nmore about this issue and finding a clean optimized solution.  Any suggestions\non where to start?  Feel free to email me.\n", "id": 75787, "time": "2005-06-02T06:27:38Z", "creator": "ndestefano@poss.com", "creation_time": "2005-06-02T06:27:38Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 75793, "time": "2005-06-02T09:53:02Z", "creator": "remm@apache.org", "creation_time": "2005-06-02T09:53:02Z", "is_private": false, "text": "I have changed the summer project to a more general \"optimizing JSP compilation\nperformance\", as hopefully not all optimizations are going to be about caching\nstuff."}, {"attachment_id": null, "tags": [], "bug_id": 33650, "text": "(In reply to comment #11)\n> I've made this item a candidate for the Summer of Code:\n> http://wiki.apache.org/general/SummerOfCode2005.\n\n\nI followed this bugzilla from the SummerOfCode2005 link. This looks like an\ninteresting optimization. Is there any whitepaper/architecture document that I\ncan look at? I would surely enjoy taking up this challenge, contest or no contest.", "count": 15, "id": 76126, "time": "2005-06-07T10:44:27Z", "creator": "KetanPadegaonkar+apache-bugs@gmail.com", "creation_time": "2005-06-07T10:44:27Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 33650, "text": "another aspect to this: Bug 31645", "id": 77838, "time": "2005-07-30T11:09:39Z", "creator": "hauser@acm.org", "creation_time": "2005-07-30T11:09:39Z", "is_private": false, "attachment_id": null}, {"attachment_id": 16121, "tags": [], "bug_id": 33650, "text": "Created attachment 16121\nmodified Options targeted at jasper performance improvement", "count": 17, "id": 78727, "time": "2005-08-19T22:25:51Z", "creator": "xbgao@cs.ucf.edu", "creation_time": "2005-08-19T22:25:51Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 33650, "text": "Created attachment 16122\nmodified JspC targeted at jasper performance improvement", "id": 78728, "time": "2005-08-19T22:32:29Z", "creator": "xbgao@cs.ucf.edu", "creation_time": "2005-08-19T22:32:29Z", "is_private": false, "attachment_id": 16122}, {"count": 19, "tags": [], "creator": "xbgao@cs.ucf.edu", "attachment_id": 16123, "id": 78729, "time": "2005-08-19T22:37:54Z", "bug_id": 33650, "creation_time": "2005-08-19T22:37:54Z", "is_private": false, "text": "Created attachment 16123\nmodified EmbeddedServletOptions targeted at jasper performance improvement"}, {"count": 20, "tags": [], "text": "Created attachment 16124\nmodified TagLibraryInfoImpl targeted at jasper performance improvement", "is_private": false, "bug_id": 33650, "id": 78731, "time": "2005-08-19T22:38:35Z", "creator": "xbgao@cs.ucf.edu", "creation_time": "2005-08-19T22:38:35Z", "attachment_id": 16124}, {"count": 21, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 78732, "time": "2005-08-19T22:55:36Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-08-19T22:55:36Z", "is_private": false, "text": "(In reply to comment #17)\n> Created an attachment (id=16121) [edit]\n> modified Options targeted at jasper performance improvement\n\nYou should submit patches in diff format (\"cvs diff\").  It's too difficult to \nevaluate the patch when you just post the entire modified file."}, {"count": 22, "tags": [], "creator": "xbgao@cs.ucf.edu", "attachment_id": null, "id": 78745, "creation_time": "2005-08-20T04:12:20Z", "time": "2005-08-20T04:12:20Z", "bug_id": 33650, "text": "(In reply to comment #21)\n> (In reply to comment #17)\n> > Created an attachment (id=16121) [edit] [edit]\n> > modified Options targeted at jasper performance improvement\n> \n> You should submit patches in diff format (\"cvs diff\").  It's too difficult to \n> evaluate the patch when you just post the entire modified file.\n\nThank you. I will replace the format.", "is_private": false}, {"count": 23, "tags": [], "bug_id": 33650, "text": "Created attachment 16126\nproposed patches for Options.java, JspC.java, EmbeddedServletOptions.java and TagLibraryInfoImpl.java in cvs diff format\n\nThis patch is about caching the TreeNode tld in TagLibraryInfoImpl. Because the\nprofiling results show the repeating parsing of the same TLD has dominated the\nprecompilation process, this change would make the jasper works much better on\na large Ant build :-) (I would also submit the different profiling snapshots\nbefore and after the code changes). Here is what I basically did:\n\n1. Options.java: add two public functions in Options interface. One is\nisCacheTldXml(), and the other is Map getCachedTldXmlMap(). The parsed TLD\nXML data is cached in a Map(String uri, TreeNode tld).\n\n2. JspC.java: add switch \"-cacheTldXml\" and implement the two functions defined\n\nin Options. The cacheTldXml is defaulted to true but the users can set it.\n\n3. EmbeddedServletOptions.java: add boolean cacheTldXml and implement the two\nfunctions. As EmbeddedServletOptions is called by run-time compilation,\ncacheTldXml is set to false by default.\n\n4. TagLibraryInfoImpl.java: add an if-else clause in parseTld to distinguish\ncommand-line build and run-time build. If the CompilerContext is JspC, try to\nget the TreeNode from cache first; otherwise call parseXMLDocument to parse the\n\nTLD directly.", "id": 78746, "time": "2005-08-20T04:18:50Z", "creator": "xbgao@cs.ucf.edu", "creation_time": "2005-08-20T04:18:50Z", "is_private": false, "attachment_id": 16126}, {"count": 24, "tags": [], "creator": "xbgao@cs.ucf.edu", "attachment_id": 16127, "id": 78747, "creation_time": "2005-08-20T04:40:04Z", "time": "2005-08-20T04:40:04Z", "bug_id": 33650, "text": "Created attachment 16127\ncpu profiling snapshot by class (call tree) before the change\n\nThe testbed is the Liferay Portal Source (www.liferay.com). It is a quite big\nand 464 Java source files would be created. The build machine is a typical Dell\n4600 desktop with Fedora Core 4, 2.8GHz, 768M.\n\nBefore the patch, the TagLibraryInfoImpl class takes more than 50% CPU time.", "is_private": false}, {"count": 25, "tags": [], "bug_id": 33650, "attachment_id": 16128, "id": 78748, "time": "2005-08-20T04:46:54Z", "creator": "xbgao@cs.ucf.edu", "creation_time": "2005-08-20T04:46:54Z", "is_private": false, "text": "Created attachment 16128\ncpu profiling snapshot by class (call tree) after the change\n\nAfter the patch, the TagLibraryInfoImpl would take much less CPU time, less\nthan 5%.\n\nAs it's inconvenient to post the profiling snapshots here (one at a time), I\nwould post the rest of them on my personal website to show the differences.\nI'll post the URL when it's done."}, {"attachment_id": null, "tags": [], "bug_id": 33650, "text": "(In reply to comment #25)\n> Created an attachment (id=16128) [edit]\n> cpu profiling snapshot by class (call tree) after the change\n> After the patch, the TagLibraryInfoImpl would take much less CPU time, less\n> than 5%.\n> As it's inconvenient to post the profiling snapshots here (one at a time), I\n> would post the rest of them on my personal website to show the differences.\n> I'll post the URL when it's done.\n\nThe URL is http://www.cs.ucf.edu/~xbgao/jasper/jasper-33650.htm. It contains \n12 screenshots in total.", "count": 26, "id": 78767, "time": "2005-08-21T17:27:15Z", "creator": "xbgao@cs.ucf.edu", "creation_time": "2005-08-21T17:27:15Z", "is_private": false}, {"count": 27, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 78792, "time": "2005-08-22T10:20:40Z", "creator": "remm@apache.org", "creation_time": "2005-08-22T10:20:40Z", "is_private": false, "text": "Ok, I've looked at the patch, and I think it looks good. Some of it could maybe\nbe a bit more elegant (in particular, I think the instanceof should be replaced\nby the use the CacheTldXml flag).\n\nFor additional optimizations, I think there's room seeing if includes could be\ncached as well (I'm fairly certain a static include happy webapp behaves as\ndescribed by Stephane Bailliez in the original report), and of course optimizing\nhotspots (JspReader/Mark seems to be the biggest offender)."}, {"count": 28, "tags": [], "bug_id": 33650, "text": "Created attachment 16139\nModified patch\n\nSmall tweaks to make names more generic", "id": 78793, "time": "2005-08-22T10:44:41Z", "creator": "remm@apache.org", "creation_time": "2005-08-22T10:44:41Z", "is_private": false, "attachment_id": 16139}, {"count": 29, "tags": [], "text": "I do have a problem: with the patch, precompilation of the admin webapp fails,\nso I cannot apply it for the time being. There must be something wrong somewhere.", "attachment_id": null, "id": 78794, "creator": "remm@apache.org", "time": "2005-08-22T10:45:41Z", "bug_id": 33650, "creation_time": "2005-08-22T10:45:41Z", "is_private": false}, {"count": 30, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 78795, "time": "2005-08-22T11:01:42Z", "creator": "sbailliez@apache.org", "creation_time": "2005-08-22T11:01:42Z", "is_private": false, "text": "As the current code only caches the result of the xml parsing it should \ntranslates in roughly a 30% speedup for Liferay compilation.\n\nLiferay being static include happy, it is a good testcase as well. The xml \nparsing was the easy part :) As Remy mentions there is load of improvement in \nthere as the JSP parsing is obviously not very efficient.\n\nAs a side note, I'm nit-picking but I think it would be better to have a \nsingle method that returns the TreeNode. here I feel like they are 2 pieces of \ncode related to 'is cache in use'.\n\n1) getOptions().getCachedTldXmlMap() return the map or null\n2) if (ctxt.getServletContext() instanceof \norg.apache.jasper.servlet.JspCServletContext) is used to figure out if it \nshould look into the cache (why not checking if the map is null or not ?)\n\nI might be missing something, but this if is confusing me."}, {"count": 31, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 78796, "time": "2005-08-22T11:20:23Z", "creator": "remm@apache.org", "creation_time": "2005-08-22T11:20:23Z", "is_private": false, "text": "(In reply to comment #30)\n> As the current code only caches the result of the xml parsing it should \n> translates in roughly a 30% speedup for Liferay compilation.\n\nThere's weird stuff going on, though. Maybe I did something wrong when applying\nthe patch. Before trying to debug, I'll try to see if caching the TaglibInfoImpl\nworks better.\n\n> Liferay being static include happy, it is a good testcase as well. The xml \n> parsing was the easy part :) As Remy mentions there is load of improvement in \n> there as the JSP parsing is obviously not very efficient.\n> \n> As a side note, I'm nit-picking but I think it would be better to have a \n> single method that returns the TreeNode. here I feel like they are 2 pieces of \n> code related to 'is cache in use'.\n> \n> 1) getOptions().getCachedTldXmlMap() return the map or null\n> 2) if (ctxt.getServletContext() instanceof \n> org.apache.jasper.servlet.JspCServletContext) is used to figure out if it \n> should look into the cache (why not checking if the map is null or not ?)\n> \n> I might be missing something, but this if is confusing me.\n\nYes, it could be better. I assume the cache map will eventually be used for more\nthan TaglibInfoImpl."}, {"count": 32, "tags": [], "bug_id": 33650, "attachment_id": 16140, "id": 78798, "time": "2005-08-22T11:43:46Z", "creator": "remm@apache.org", "creation_time": "2005-08-22T11:43:46Z", "is_private": false, "text": "Created attachment 16140\nModified patch 2\n\nThis patch will cache TagLibraryInfoImpl objects rather than the XML objects."}, {"count": 33, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 78814, "time": "2005-08-22T16:16:39Z", "creator": "xbgao@cs.ucf.edu", "creation_time": "2005-08-22T16:16:39Z", "is_private": false, "text": "(In reply to comment #32)\n> Created an attachment (id=16140) [edit]\n> Modified patch 2\n> \n> This patch will cache TagLibraryInfoImpl objects rather than the XML objects.\n\nI looked at this patch, but I am afraid that the TagLibraryInfoImpl cannot be\ncached in Parser.java and JspDocumentParser.java in this simple way. In\nTagLibraryInfoImpl the individual CompilerContext is used for each jsp\nprecompilation specifically. I guess that's why it didn't work on the admin app\nprecompilation."}, {"count": 34, "tags": [], "creator": "xbgao@cs.ucf.edu", "attachment_id": null, "text": "(In reply to comment #30)\n> As the current code only caches the result of the xml parsing it should \n> translates in roughly a 30% speedup for Liferay compilation.\n> \n\nIn my testcase with liferay source package (more specifically, all jsp files\nunder portal-web/docroot), I could get more than 30% speedup. I did a series of\nexperiments and the results were:\n\n1. Dell Dimension 4600, 2.8GHz, 768M: time reduced from ~130s to ~65s.\n2. one cluster node, AMD Athlon(tm) Processor, 908MHz, 768M: time reduced from\n(12m + 50s) to (2m + 55s).\n\nIt depends on the machines but my cases show significant improvement.\n\n> Liferay being static include happy, it is a good testcase as well. The xml \n> parsing was the easy part :) As Remy mentions there is load of improvement in \n> there as the JSP parsing is obviously not very efficient.\n> \n> As a side note, I'm nit-picking but I think it would be better to have a \n> single method that returns the TreeNode. here I feel like they are 2 pieces of \n> code related to 'is cache in use'.\n> \n> 1) getOptions().getCachedTldXmlMap() return the map or null\n> 2) if (ctxt.getServletContext() instanceof \n> org.apache.jasper.servlet.JspCServletContext) is used to figure out if it \n> should look into the cache (why not checking if the map is null or not ?)\n> \n> I might be missing something, but this if is confusing me.\n\n", "id": 78820, "time": "2005-08-22T16:33:42Z", "bug_id": 33650, "creation_time": "2005-08-22T16:33:42Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 33650, "text": "(In reply to comment #33)\n> I looked at this patch, but I am afraid that the TagLibraryInfoImpl cannot be\n> cached in Parser.java and JspDocumentParser.java in this simple way. In\n> TagLibraryInfoImpl the individual CompilerContext is used for each jsp\n> precompilation specifically. I guess that's why it didn't work on the admin app\n> precompilation.\n\nNo, the latest patch I posted doesn't fail, for some reason (the first patch I\nattached before did, but it might have been a build clean issue or something, as\nthe problem disappeared magically).\n\nI know there's a compiler context field which might possibly cause issues. It\ncould be investigated if it really does.", "count": 35, "id": 78821, "time": "2005-08-22T16:34:23Z", "creator": "remm@apache.org", "creation_time": "2005-08-22T16:34:23Z", "is_private": false}, {"count": 36, "tags": [], "bug_id": 33650, "attachment_id": null, "id": 79207, "time": "2005-08-31T00:36:34Z", "creator": "remm@apache.org", "creation_time": "2005-08-31T00:36:34Z", "is_private": false, "text": "The TL info caching seems to work reasonably well, after review, so I'll commit\nit. The Options interface changes are not final."}, {"count": 37, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 123745, "time": "2009-01-04T13:16:59Z", "bug_id": 33650, "creation_time": "2009-01-04T13:16:59Z", "is_private": false, "text": "I do not see a reason to still keep this open.\n\nAll the discussed patches are already applied to the sources 3+ years ago and are in TC 5.5.12 and later, and that includes all versions of TC 6.0.\n\nThus I am resolving this as FIXED.\n\nIf anyone has examples that are still unacceptable slow to compile, and likes to profile the Jasper/JspC code, I think everyone will be interested."}]
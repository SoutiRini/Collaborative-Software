[{"count": 0, "attachment_id": null, "creator": "somme@slb.com", "is_private": false, "id": 101556, "time": "2007-04-10T07:09:26Z", "bug_id": 42079, "creation_time": "2007-04-10T07:09:26Z", "tags": [], "text": "Before I have used both LDAP and User/Group files for regulating access in\nquite a deep hierarchy of sub-directories. I have had no problems in adding\nor removing access in any combination that I want. However, now when I use\nSSLRequire (and client certificates) I seem to have no way to *add* access\nas I go down in my hierarchy. E.g.\n\n<Directory /htdocs/sub1>\n      SSLRequire       %{SSL_CLIENT_S_DN_C} eq \"US\"\n</Directory  \n\n<Directory /htdocs/sub1/sub2>\n      SSLRequire       %{SSL_CLIENT_S_DN_C} eq \"CA\"\n</Directory  \n\nA user with a \"CA\" certificate will not be able to access sub1/sub2/\nbecause he/she has no access in sub1/. I.e you can only *restrict* access\nas you go down in the hirarchy, you cannot *add* access.\n\nA similar issue was discussed in bug # 41911.\n\nI will call this a bug. Using LDAP or User/Group files this would be\nperfectly OK to access sub1/sub2/ but still have no access in sub1/.\n\nI have seen this problem reported in other mailing lists as well and\none guy suggested to test on REQUEST_URI in addition to the SSL* environment\nvariables. I tried this, but since the number if subdirectories I have\nis so big, the regular expression got too big (the httpd.conf parser could\nnot parse it).\n\nAny feedback is welcome.\nThanks."}, {"count": 1, "tags": [], "creator": "basant.kukreja@sun.com", "attachment_id": null, "id": 101585, "time": "2007-04-11T09:47:02Z", "bug_id": 42079, "creation_time": "2007-04-11T09:47:02Z", "is_private": false, "text": "As we discussed in 41911, you can achieve the objective by url rewriting.\nI still believe that if there is a restriction on subdir1 then subdir1/subdir2\ncan not bypass that restriction. It seems counter intuitive to me. I think that\nin most of the cases, rearranging the subdirectories and url rewriting will solve\nthe issue."}, {"count": 2, "attachment_id": null, "creator": "somme@slb.com", "is_private": false, "id": 101616, "time": "2007-04-12T08:01:07Z", "bug_id": 42079, "creation_time": "2007-04-12T08:01:07Z", "tags": [], "text": "(In reply to comment #1)\n> As we discussed in 41911, you can achieve the objective by url rewriting.\n> I still believe that if there is a restriction on subdir1 then subdir1/subdir2\n> can not bypass that restriction. It seems counter intuitive to me. I think that\n> in most of the cases, rearranging the subdirectories and url rewriting will solve\n> the issue.\n\n\nWell, what's intuitive for a person is always a subjective thing.\n\nI my case I have a structure that I have used for 10 years (!) where I want\nto migrate just the authentication protocol to using client certs (from the \nuse of LDAP and standard user/group authentication). It consists of thousands \nof subdirectories where today 462 subdirectories all need individual/unique \naccess rights (a combination of 275 individual users).\n\nTo me it is intuitive that I can use the same directory structure independent \nof authentication protocol. Using LDAP and/or user/group access had no \nlimitations.\n\nTo me it is also intuitive that you gain improved security by first restricting \n*all* access to the whole web server and then open up where you want. Using \nthe reverse approach you need to remember to restrict access to all nodes \nwhere you don't want access. People will tell you loudly if they don't get \nthe access they expect but they will never tell you if they have too much access.\n\nAny feedback is appreciated.\nThanks.\n\n\n"}, {"count": 3, "attachment_id": null, "creator": "basant.kukreja@sun.com", "text": ">To me it is also intuitive that you gain improved security by first restricting \n>*all* access to the whole web server and then open up where you want. \nDirectory container permissions works in reverse way that's why we observe this\nissue.\nI believe apache way of securing directories is inherited from unix file system\nsecurity. The philosophy is that that to enter a particular level, you need to\nhave permission to all levels above it.", "id": 101631, "time": "2007-04-12T11:53:12Z", "bug_id": 42079, "creation_time": "2007-04-12T11:53:12Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "creator": "somme@slb.com", "is_private": false, "id": 103176, "time": "2007-05-14T07:51:26Z", "bug_id": 42079, "creation_time": "2007-05-14T07:51:26Z", "tags": [], "text": "(In reply to comment #3)\n> >To me it is also intuitive that you gain improved security by first restricting \n> >*all* access to the whole web server and then open up where you want. \n> Directory container permissions works in reverse way that's why we observe this\n> issue.\n> I believe apache way of securing directories is inherited from unix file system\n> security. The philosophy is that that to enter a particular level, you need to\n> have permission to all levels above it.\n\nWell, I understand what you say about the UNIX file system but you cannot\nsay that this is 'The Apache way' since among the 3 different authentication\nschema that I have used, 'mod_ssl' is the only one enforcing this. As I have\nstated before in this thread, neither 'mod_auth' nor 'mod_ldap' enforces this.\nOn the contrary, a lot of the documentation I have seen describes *my* scenario.\n\n\n"}]
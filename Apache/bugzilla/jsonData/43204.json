[{"count": 0, "tags": [], "creator": "rbodkin+LISTS@gmail.com", "attachment_id": null, "id": 107184, "time": "2007-08-23T11:56:05Z", "bug_id": 43204, "creation_time": "2007-08-23T11:56:05Z", "is_private": false, "text": "I wrote a small enhancement to log4j that takes advantage of two useful Java\nAPIs: String.formatter to avoid creating garbage strings when a logger isn't\nenabled and the ability to use a management factory to programmatically get\nstack traces to avoid boilerplate code. I have implemented this as a decorator\n(LogFormatter). E.g.,\n\npublic static class MyClass {\n    public LogFormatter formatter = LogFormatter.get();\n\n    public void myMethod(int foo) {\n        formatter.debug(\"The value %d was received\", foo);\n        try {\n            something();\n        } catch (MyException e) {\n            formatter.error(e, \"Failure for %d\", foo);\n        }\n    }\n}\n\nSee attached code. Please feel free to reuse or incorporate this if you like any\nof these features."}, {"count": 1, "tags": [], "text": "Created attachment 20694\nAdded features", "is_private": false, "bug_id": 43204, "id": 107185, "time": "2007-08-23T11:58:06Z", "creator": "rbodkin+LISTS@gmail.com", "creation_time": "2007-08-23T11:58:06Z", "attachment_id": 20694}, {"count": 2, "tags": [], "bug_id": 43204, "is_private": false, "text": "Created attachment 20695\nSome initial tests. The other features have already been integration tested but those tests can be split out into unit tests.", "id": 107187, "time": "2007-08-23T11:59:23Z", "creator": "rbodkin+LISTS@gmail.com", "creation_time": "2007-08-23T11:59:23Z", "attachment_id": 20695}, {"count": 3, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 107196, "time": "2007-08-23T13:16:53Z", "bug_id": 43204, "creation_time": "2007-08-23T13:16:53Z", "is_private": false, "text": "Please review the LogMF and LogSF classes in the extras companion (http://svn.apache.org/repos/asf/\nlogging/log4j/companions/extras).  At one time there was a third parameterized logging wrapper LogF \nthat used java.util.formatter, but development of that was dropped as there didn't seem to be any interest.  \nSee http://svn.apache.org/viewvc/logging/sandbox/log4j/formatter/src/main/java/org/apache/log4j/\nformatter/?pathrev=532884."}, {"count": 4, "text": "It would be great to see formatting capabilities built-in to the core log4j\nlogger in the next major release, rather than having a wrapper. Failing that, I\nthink a wrapper that lets you make all the usual logger calls but supporting\nformatting is a lot more usable than a helper class with static methods. A\nwrapper could even be done with a subclass of Logger.\n\nNote that a key requirement for this is to not format strings unless the log is\nenabled for a given level. The code you pointed to in the companion will format\nstrings, generating garbage, even if the given logger is disabled. Creating\narrays of arguments is also probably another source of inefficiency (that could\nbe addressed by special cases for say 4 or fewer arguments).\n\nIt's also valuable to have exception logging with arguments for formatting.\n", "bug_id": 43204, "is_private": false, "id": 107202, "time": "2007-08-23T14:29:46Z", "creator": "rbodkin+LISTS@gmail.com", "creation_time": "2007-08-23T14:29:46Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "text": "The intent and my expecation is that the LogMF and LogSF classes do not format or require array creation  \nunless the request meets the threshold of the logger.  If they do not, it is a flaw in the implementation that \ncan be corrected.  The LogF class has been discontinued due to lack of interest and perhaps it did not \nappropriately defer formatting.\n", "is_private": false, "bug_id": 43204, "id": 107203, "time": "2007-08-23T14:44:12Z", "creator": "carnold@apache.org", "creation_time": "2007-08-23T14:44:12Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "rbodkin+LISTS@gmail.com", "attachment_id": null, "id": 107208, "time": "2007-08-23T18:34:53Z", "bug_id": 43204, "creation_time": "2007-08-23T18:34:53Z", "is_private": false, "text": "Ok, the issue I noted was indeed just with LogF. The others guard object\nconstruction appropriately. Thanks.\n"}, {"count": 7, "tags": [], "creator": "thorbjoern@gmail.com", "attachment_id": null, "id": 119271, "time": "2008-08-02T13:27:00Z", "bug_id": 43204, "creation_time": "2008-08-02T13:27:00Z", "is_private": false, "text": "If this result in log4j requiring an 5+ JVM, I do not think it should go in the 1.2.x release as it would break backwards compatability.\n\nI would also suggest using slf4j to do the logging with log4j as the backend as it provides the delayed log string construction with {}-markers.\n\nHence I suggest this bug to be a WONTFIX."}, {"count": 8, "tags": [], "text": "LogMF (or LogSF for the special case of migrating log4j 1.3 code) is a much better recommendation that slf4j if all the user is trying to do is to be able use parameterized messages.  It supports the syntax and all the capabilities of java.util.MessageFormatter.  The incompatible specification syntax used by log4j 1.3 and SLF4J was rationalized by a supposed performance advantage over java.util.MessageFormatter, however it was fairly trivial to accelerate the performance for the trivial cases so that LogMF is as fast or faster for the subset of cases supported by SLF4J formatting.\n\nAs LogMF and LogSF seem to address all the concerns of the original bug.  I'm going to mark this as a duplicate of 42783 which is the closest to the bug report backing the original development of LogMF.\n\n*** This bug has been marked as a duplicate of bug 42783 ***", "is_private": false, "bug_id": 43204, "id": 119566, "time": "2008-08-07T14:39:41Z", "creator": "carnold@apache.org", "creation_time": "2008-08-07T14:39:41Z", "attachment_id": null}]
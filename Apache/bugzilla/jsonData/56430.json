[{"count": 0, "tags": [], "text": "Chapter SRV.11.2 of the servlet specification defines...\n\n    A string beginning with a '*.' prefix is used as an extension mapping.\n\nhttp://download.oracle.com/otndocs/jcp/servlet-2.5-mrel2-eval-oth-JSpec/\n\nSo, this tells us, the url-pattern '*.jsp' forwards all requests ending with '.jsp' to the mapped servlet or filtes. With this, one might also assume that the url-pattern '*.my.txt' forwards all requests ending with 'my.txt' to the configured servlet or filters. But the latter does not work with Tomcat.\n\nI set up a tiny maven project, for illustrating the problem: https://bitbucket.org/benplocek/servlet-extension-mapping-test\n\nThis project contains a Servlet and a Filter, both mapped to '.my.html':\n\n  <servlet-mapping>\n    <servlet-name>MyServlet</servlet-name>\n    <url-pattern>*.my.html</url-pattern>\n  </servlet-mapping>\n\nWhen sending a request to /test.my.html Tomcat responds with a 404.\n\nI also deployed this app to Jetty 9.1.4 which behaves as expected: /test.my.html invokes the filter and also serves the servlet. Because of this I assume this is a bug in Tomcat.\n\nNote: Also applies to Tomcat 8.0.5.", "attachment_id": null, "bug_id": 56430, "id": 174705, "time": "2014-04-18T15:32:35Z", "creator": "smail@benjaminplocek.com", "creation_time": "2014-04-18T15:32:35Z", "is_private": false}, {"count": 1, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "This is probably a spec-clarification question, really: does * match a dot? Is it greedy-matching? If it behaves like a Perl-compatible RE \".*\" (or really any RE \".*\"), then what you'll match is \".txt\" and not \".my.txt\".\n\nI agree with you that Tomcat's behavior is \"surprising\", at least in this case.", "id": 174713, "time": "2014-04-18T19:41:14Z", "bug_id": 56430, "creation_time": "2014-04-18T19:41:14Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 56430, "text": "From Servlet 3.1-final.pdf\nCh. 12.1 Use of URL Paths (page #12-121 (\"141 of 240\"))\n\n[quote]\n3. If the last segment in the URL path contains an extension (e.g. .jsp), the servlet\ncontainer will try to match a servlet that handles requests for the extension. An\nextension is defined as the part of the last segment after the last \u2019.\u2019 character.\n[/quote]\n\nIn Servlet 2.5 spec that is chapter SRV.11.1", "id": 174714, "time": "2014-04-18T21:03:21Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-04-18T21:03:21Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 56430, "text": "Ok, but then it would be great, to get any kind of a feedback when deploying the application. When I use an invalid pattern like '/*.jsp' the server also complains. But when I use '*.my.txt' I get no hint that something is wrong.\n\nSo I end up with a servlet-/filter-mapping that does not have any effect.", "id": 174715, "time": "2014-04-18T21:10:58Z", "creator": "smail@benjaminplocek.com", "creation_time": "2014-04-18T21:10:58Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "Since this is at best an enhancement, it can be considered fixed in Tomcat 8 which includes a rewrite valve that can easily do this sort of matching.\n\nDocumentation available here: http://tomcat.apache.org/tomcat-8.0-doc/rewrite.html", "id": 174730, "time": "2014-04-20T10:14:42Z", "bug_id": 56430, "creation_time": "2014-04-20T10:14:42Z", "is_private": false}, {"count": 5, "tags": [], "creator": "karl@peterbauer.cc", "text": "I think both the Servlet spec and Tomcat's implementation are quite unfortunate. Patterns like '*.jsp' or '*.my.txt' closely resemble the venerable UNIX glob style pattern matching, and consequenty they should behave accordingly. For example, the UNIX command \"ls *.my.txt\" does match a file named \"test.my.txt\".", "id": 174774, "time": "2014-04-22T19:30:57Z", "bug_id": 56430, "creation_time": "2014-04-22T19:30:57Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 56430, "text": "Thanks for the further clarification, Konstantin. I stopped reading too soon. I see Tomcat as implementing the spec faithfully, here, so there is no bug. Marking INVALID.\n\nIf you'd like to request an enhancement, please REOPEN this bug and state your request.", "id": 174776, "time": "2014-04-22T19:40:47Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-04-22T19:40:47Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 56430, "text": "As an enhancement, it should be fine to say the rewrite valve should be used. It is a generic solution that can take care of any matching scenario, but it would be bad to add tiny proprietary extensions however.", "id": 174780, "time": "2014-04-22T20:49:31Z", "creator": "remm@apache.org", "creation_time": "2014-04-22T20:49:31Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 56430, "text": "Using the rewrite valve is not an enhancement. It's a workaround that doesn't work with Tomcat 7.\n\nPlease, read my comment #3. I now see why Tomcat doesn't support extension mappings including multiple dots. But hey, then please fix your code so that it is consistent.\n\nIn StandardContext.java you have a method validateURLPattern which is used at startup. For this method the String '*.my.txt' _is valid_, but when it comes to using this pattern, it does not have an effect, because the rest of the code seems to agree with your explanation and takes this pattern as invalid.\n\nSo, again, I REOPEN this issue and request this enhancement: Fix the check at startup, so that it is clear why the given filter mapping with multiple dots does not work. It's a pain, when you have to find out why your filter does not work and you don't even get a warning in your logs.", "id": 174784, "time": "2014-04-22T23:03:35Z", "creator": "smail@benjaminplocek.com", "creation_time": "2014-04-22T23:03:35Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 56430, "text": "I've extended the check for suspicious URL patterns to include *.a.b style patterns. The fix has been applied to 8.0.x for 8.0.6 onwards and to 7.0.x for 7.0.54 onwards.\n\nWhile we can't realistically detect every possible error that a user might make when specifying a pattern this is looks like it could be a common error and the test was simple to add.", "id": 174832, "time": "2014-04-24T08:32:43Z", "creator": "markt@apache.org", "creation_time": "2014-04-24T08:32:43Z", "is_private": false, "attachment_id": null}]
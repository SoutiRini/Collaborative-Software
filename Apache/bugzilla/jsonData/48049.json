[{"count": 0, "tags": [], "bug_id": 48049, "attachment_id": null, "id": 131361, "time": "2009-10-25T07:24:55Z", "creator": "qingyang.xu@qunar.com", "creation_time": "2009-10-25T07:24:55Z", "is_private": false, "text": "Below is the original implementation of destroySubcontext(Name name) method:\n\npublic void destroySubcontext(Name name)\n        throws NamingException {\n        \n        checkWritable();\n        \n        while ((!name.isEmpty()) && (name.get(0).length() == 0))\n            name = name.getSuffix(1);\n        if (name.isEmpty())\n            throw new NamingException\n                (sm.getString(\"namingContext.invalidName\"));\n        \n        NamingEntry entry = (NamingEntry) bindings.get(name.get(0));\n        \n        if (entry == null) {\n            throw new NameNotFoundException\n                (sm.getString(\"namingContext.nameNotBound\", name.get(0)));\n        }\n        \n        if (name.size() > 1) {\n            if (entry.type == NamingEntry.CONTEXT) {\n                ((Context) entry.value).unbind(name.getSuffix(1));\n            } else {\n                throw new NamingException\n                    (sm.getString(\"namingContext.contextExpected\"));\n            }\n        } else {\n            if (entry.type == NamingEntry.CONTEXT) {\n                ((Context) entry.value).close();\n                bindings.remove(name.get(0));\n            } else {\n                throw new NotContextException\n                    (sm.getString(\"namingContext.contextExpected\"));\n            }\n        }\n        \n    }\n\n\nHowever, the method invokes 'unbind' method rather than invokes itself recursively. \n\nif (name.size() > 1) {\n            if (entry.type == NamingEntry.CONTEXT) {\n                ((Context) entry.value).unbind(name.getSuffix(1));\n            } else {\n                throw new NamingException\n                    (sm.getString(\"namingContext.contextExpected\"));\n            }\n\nshould be: \n\nif (name.size() > 1) {\n            if (entry.type == NamingEntry.CONTEXT) {\n                ((Context) entry.value).destroySubcontext(name.getSuffix(1));\n            } else {\n                throw new NamingException\n                    (sm.getString(\"namingContext.contextExpected\"));\n            }"}, {"count": 1, "tags": [], "bug_id": 48049, "attachment_id": null, "id": 132217, "time": "2009-11-22T14:58:51Z", "creator": "markt@apache.org", "creation_time": "2009-11-22T14:58:51Z", "is_private": false, "text": "Thanks for the patch. It has been committed to trunk and proposed for 6.0.x and 5.5.x"}, {"count": 2, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 132857, "creation_time": "2009-12-16T03:38:25Z", "time": "2009-12-16T03:38:25Z", "bug_id": 48049, "text": "This has been fixed in 6.0.x and will be in 6.0.21 onwards.\n\nThanks again for the patch.", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48049, "attachment_id": null, "id": 133969, "time": "2010-01-27T00:39:10Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-01-27T00:39:10Z", "is_private": false, "text": "Fixed in 5.5, will be in 5.5.29 onwards. Thank you."}]
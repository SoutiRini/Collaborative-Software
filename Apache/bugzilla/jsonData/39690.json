[{"count": 0, "tags": [], "bug_id": 39690, "attachment_id": null, "text": "I had problems while using DBAppender in J2EE environment - to be conrete while\nusing Oracle OC4J 9.0.4.0.0. I have log4j-all-1.3alpha-8.jar in applib folder\nalong with log4j.xml configuration.\n\nProblems occurs when container starts and initializes my EAR - because in some\nof my libraries and as I found out either in third party libraries, there are\ndeclarations such as:\n\nprivate static Logger = LogFactory.getLog(\"SOMETHING\");\n\nThis means, that initialization of logger is done while class is loading into\nmemory and this can occur (and occurs) in initalization stage of EAR in container.\nFirst access to LogFactory triggers loading and initializing of Log4J library\nand configured appenders too. DBAppender then tries to find its datasource which\nlies in JNDI. But because it is in initialization stage, container refuses to\nsupply the datasource, because it is not available in JNDI tree yet.\nIt end with exception and DBAppender does try to initialize no more. Logging to\nthis appender is then disabled and nothing is logged.\n\nI solve this problem with extending your classes. I append my solution to this\nbug - but tell me please whether I havent't understand aim of this appender wrong.\n\nAs I know I'm not only one, who has problems with thad. Same problems occur\nwhile using JMS appender (and I think from the same reason).\n\n############## Extended Log4J DBAppender ################\n\npackage cz.corpus.f1.commons.log;\n\nimport org.apache.log4j.db.DBAppender;\nimport org.apache.log4j.db.ConnectionSource;\nimport org.apache.log4j.spi.LoggingEvent;\n\n/**\n * Modifies unwanted behaviour of DBAppenderu while initialization stage of Oracle.\n *\n * @author Jan Novotn\u00fd\n */\npublic class Log4JDBAppender extends DBAppender {\n    private boolean initializedProperly = false;\n\n    public void activateOptions() {\n        try {\n            //try to initalize appender with caution\n            System.out.println(\"Log4J - activating appender ... \");\n            super.activateOptions();\n            initializedProperly = true;\n        } catch (Throwable e) {\n            //ups .... we have to try in next occasion\n            System.out.println(\"Log4J - error in activating appender (this could\nbe ok): \" + e.getLocalizedMessage());\n        } finally {\n            // all nice and dandy on the eastern front\n            this.active = true;\n        }\n    }\n\n    protected void append(LoggingEvent event) {\n        ConnectionSource connectionSource = getConnectionSource();\n        //if the dialect is unknown it means, that initialization didn't\nfinished well - so we have to try again\n        if (!initializedProperly && connectionSource.getSQLDialectCode() !=\nConnectionSource.UNKNOWN_DIALECT) {\n            if (connectionSource instanceof Log4JJNDIConnectionSource) {\n                System.out.println(\"Log4J - reconfiguring connection source ... \");\n                connectionSource.activateOptions();\n            }\n            //we try to initialize appender too\n            System.out.println(\"Log4J - reconfiguring appender ... \");\n            activateOptions();\n        }\n        //if initalization finished well we could normally log - otherwise do\nnothing\n        if (initializedProperly) {\n            super.append(event);\n        } else System.out.println(\"Log4J - appender not initialized - event not\nlogged ...\");\n    }\n\n}\n\n############## Extended Log4J JNDI ConnectionSource ################\n\npackage cz.corpus.f1.commons.log;\n\nimport org.apache.log4j.db.JNDIConnectionSource;\n\n/**\n * Modifies unwanted behaviour of DBAppenderu while initialization stage of Oracle.\n *\n * @author Jan Novotn\u00fd\n */\npublic class Log4JJNDIConnectionSource extends JNDIConnectionSource {\n\n    /**\n     * @see org.apache.log4j.spi.OptionHandler#activateOptions()\n     */\n    public void activateOptions() {\n        try {\n            //try to initalize JNDI Connection Source with caution\n            System.out.println(\"LOG4J - Activate options - connection source ... \");\n            super.activateOptions();\n        } catch (Throwable e) {\n            //Ups ... it is possible that JNDI is not ready yet ... postopone\nthe initialization\n            System.out.println(\"LOG4J - Activate options - connection source ...\nfailed\");\n            e.printStackTrace(System.out);\n        }\n    }\n\n}", "id": 89610, "time": "2006-05-31T10:09:41Z", "creator": "jan.novotny@corpus.cz", "creation_time": "2006-05-31T10:09:41Z", "is_private": false}, {"count": 1, "tags": [], "text": "This is reported against 1.3alpha, but should also be the same problem in 1.2.\n\nWould a reasonable solution be that you rename the log4j configuration file to something not loaded automatically and then invoke the log4j configuration explicitly in your own code when things are set up correctly?\n\n", "attachment_id": null, "bug_id": 39690, "id": 118122, "time": "2008-06-30T12:50:21Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-06-30T12:50:21Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 39690, "is_private": false, "text": "Marking as NEEDINFO.", "id": 119263, "time": "2008-08-02T10:33:09Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T10:33:09Z", "attachment_id": null}]
[{"attachment_id": null, "tags": [], "bug_id": 30085, "is_private": false, "count": 0, "id": 60559, "time": "2004-07-13T18:34:09Z", "creator": "elilevine@gmail.com", "creation_time": "2004-07-13T18:34:09Z", "text": "Reproduceble on both Windows 2000 and Solaris.\n\nUse either classes12.zip (rename to classes12.jar) or ojdbc.jar from Oracle.\n\nPlace either of the jar files into both /common/lib and [webapp]/lib, configure\nwebapp to use org.apache.commons.dbcp.BasicDataSourceFactory in the context XML\nfile.\n\nGet blob from Oracle database via ResultSet.getBlob() and cast it to a\noracle.sql.BLOB. --> ClassCastException occures even though the blob in the\nResultSet is an oracle.sql.BLOB, as indicated by debugger.\n\nSolution: remove the Oracle JDBC jar from [webapps]/lib directory and everything\nworks fine.\n\nSeems to be an issue with Catalina's classloader."}, {"count": 1, "text": "Well, duh, what do you think DBCP will be using ?\nAnd since there's no delegation in the CL (by default), your webapp will use\nthat other class in /WEB-INF/lib.\n-> classcast", "creator": "remm@apache.org", "attachment_id": null, "id": 60560, "time": "2004-07-13T18:38:10Z", "bug_id": 30085, "creation_time": "2004-07-13T18:38:10Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 30085, "attachment_id": null, "id": 60562, "time": "2004-07-13T19:30:35Z", "creator": "elilevine@gmail.com", "creation_time": "2004-07-13T19:30:35Z", "is_private": false, "text": "DBCP uses classes from common/lib\nWebApp uses classes from WEB-INF/lib\n\nThose two are the same and I don't understand why a ClassCastException is\nthrown: I am casting to the right class."}, {"count": 3, "tags": [], "bug_id": 30085, "attachment_id": null, "id": 60570, "time": "2004-07-13T19:49:08Z", "creator": "elilevine@gmail.com", "creation_time": "2004-07-13T19:49:08Z", "is_private": false, "text": "Moreover, what is the reason that DBCP is using classes from /common/lib by\ndefault?  My webapp configures DBCP in the webapp's <context> -- seems to me\nthat the webapp's Oracle classes should be loaded instead."}, {"count": 4, "tags": [], "bug_id": 30085, "attachment_id": null, "id": 63732, "time": "2004-09-17T15:25:54Z", "creator": "agtcovert@gmail.com", "creation_time": "2004-09-17T15:25:54Z", "is_private": false, "text": "I've encountered this issue while doing some development with Oracle and Tomcat\nas well, and believe it is a valid issue:\n\n1)  My code will not compile without the Oracle jar file included in the\nproject; when you call stored procs, you have to say what kind of paramters\nyou're passing in and out, thus requiring jar file inclusion in the project.\n\n2) Tomcat needs the jar file to create the pooled connections.\n\n3) These are loaded with separate classloaders (for obvious reasons), and it\nshould be a supported configuration in Tomcat."}, {"attachment_id": null, "tags": [], "bug_id": 30085, "is_private": false, "count": 5, "id": 63735, "time": "2004-09-17T15:36:37Z", "creator": "yoavs@computer.org", "creation_time": "2004-09-17T15:36:37Z", "text": "First, I don't buy that you have to include the vendor-specific JAR in general \nto call stored procs: we call stored procs all the time using just the methods \nand types in the java.sql package.  To do otherwise of course ties you to the \nDB vendor and limits portability.  But I can see this being a requirement in a \nspecific case such as yours.\n\nTo the VM, oracle.sql.BLOB loaded in one classloader is different from \noracle.sql.BLOB loaded in another classloader.  This is a VM issue, not a \nTomcat one.  You can read more about in the JLS if you want.  Tomcat's \nClassLoader model (delegation and all) is dictated by the Servlet \nSpecification.  Things loaded in the common classloader cannot see things \nloaded in the WEB-INF classloaders, it's not our choice as Tomcat implementors, \nit's mandated by the Spec.\n\nHere's one workaround: if you must include the Oracle jar in WEB-INF/lib, put \nthe DBCP (and commons-pool) jars there as well, and configure your own \nconnection pooling instead of using Tomcat's.  This is trivial to do and \nensures greater portability for your app.\n\n"}, {"count": 6, "tags": [], "text": "I agree with most of the points you make; however, portability is a non-issue \nfor my client in this particular case, although I agree with the concept.\n\nI've gone into the code and attempted to use the Java types instead, but it \ndoesn't work when I need to pass a cursor to an Oracle stored proc, so it \ndoesn't look like I can decouple the two.  I do however, understand the issue \nmore clearly now, and hopefully anyone else who comes across this will too.", "attachment_id": null, "id": 63759, "creator": "agtcovert@gmail.com", "time": "2004-09-17T23:07:13Z", "bug_id": 30085, "creation_time": "2004-09-17T23:07:13Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "osman.ullah@gmail.com", "attachment_id": 32997, "id": 184517, "time": "2015-08-12T15:25:48Z", "bug_id": 58241, "creation_time": "2015-08-12T15:25:48Z", "is_private": false, "text": "Created attachment 32997\nJVM crash dump\n\nWe are seeing this JVM crash on almost a daily basis. I've attached a couple of crash dumps. The call stack seems to always be the same: \n\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nJ  org.apache.tomcat.jni.Socket.sendbb(JII)I\nJ  org.apache.coyote.http11.InternalAprOutputBuffer.flushBuffer()V\nJ  org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(Lorg/apache/tomcat/util/buf/ByteChunk;Lorg/apache/coyote/Response;)I\nJ  org.apache.tomcat.util.buf.ByteChunk.flushBuffer()V\nJ  org.apache.catalina.connector.CoyoteOutputStream.write(I)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeAMF3ByteArray([B)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeObject(Ljava/lang/Object;)V\nJ  org.granite.hibernate.HibernateExternalizer.writeExternal(Ljava/lang/Object;Ljava/io/ObjectOutput;)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeAMF3Object(Ljava/lang/Object;)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeObject(Ljava/lang/Object;)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeObject(Ljava/lang/Object;)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeObject(Ljava/lang/Object;)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeAMF3Object(Ljava/lang/Object;)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeObject(Ljava/lang/Object;)V\nJ  org.granite.messaging.amf.io.AMF3Serializer.writeObject(Ljava/lang/Object;)V\nJ  org.granite.gravity.AbstractChannel.runReceived(Lorg/granite/gravity/AsyncHttpContext;)Z\nJ  org.granite.gravity.AsyncChannelRunner.run()V\nJ  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V\nj  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5\nj  java.lang.Thread.run()V+11\nv  ~StubRoutines::call_stub"}, {"count": 1, "tags": [], "creator": "osman.ullah@gmail.com", "attachment_id": 32998, "id": 184518, "time": "2015-08-12T15:26:41Z", "bug_id": 58241, "creation_time": "2015-08-12T15:26:41Z", "is_private": false, "text": "Created attachment 32998\nJVM crash dump"}, {"count": 2, "tags": [], "creator": "osman.ullah@gmail.com", "text": "Created attachment 32999\nJVM crash dump", "id": 184519, "time": "2015-08-12T15:27:05Z", "bug_id": 58241, "creation_time": "2015-08-12T15:27:05Z", "is_private": false, "attachment_id": 32999}, {"count": 3, "tags": [], "text": "Please update to the latest Tomcat 7.0.x release and latest tc-native connector and retest.", "attachment_id": null, "bug_id": 58241, "id": 184521, "time": "2015-08-12T15:52:59Z", "creator": "markt@apache.org", "creation_time": "2015-08-12T15:52:59Z", "is_private": false}, {"count": 4, "tags": [], "creator": "osman.ullah@gmail.com", "attachment_id": null, "id": 184522, "time": "2015-08-12T16:23:53Z", "bug_id": 58241, "creation_time": "2015-08-12T16:23:53Z", "is_private": false, "text": "This is a production system, we cannot just upgrade without doing a significant amount of testing. Do you know if there is something in a newer release which would address this issue?"}, {"count": 5, "tags": [], "text": "The Tomcat project does not provide patches for issues in old releases, we only provide new releases so if a bug isn't reproducible on the latest stable release (i.e. 7.0.63 as I write this) then it isn't going to get looked at.\n\nIf a bug includes a test case then we can run it on the latest release and test it ourselves. For a bug like this where no test case is provided, the onus to test on the latest release is with the user reporting the bug.\n\nNote: In this particular case, you would need to test with the latest tc-native release (1.1.33 as I write this).\n\nHaving looked at this more closely this isn't a Tomcat bug. An instance of org.granite.messaging.amf.io.AMF3Serializer is using the OutputStream obtained from ServletResponse.getOutputStream() (and in one case the stack trace suggests it has somehow obtained direct access to the underlying OutputBuffer). If this OutputStream is used outside of the lifecycle of the associated Response things will go wrong. In the case of APR crashes are likely since there is an attempt to write to a socket that no longer exists. You'd see errors but not crashes if you switched to the NIO connector.\n\nNote there doe snot appear to be any need for you to be using APR/native since you are not using TLS. NIO should give comparable performance.", "attachment_id": null, "bug_id": 58241, "id": 184523, "time": "2015-08-12T17:48:53Z", "creator": "markt@apache.org", "creation_time": "2015-08-12T17:48:53Z", "is_private": false}, {"count": 6, "tags": [], "creator": "osman.ullah@gmail.com", "text": "Thanks for the information Mark. It gives us some things to investigate.", "id": 184526, "time": "2015-08-12T18:18:21Z", "bug_id": 58241, "creation_time": "2015-08-12T18:18:21Z", "is_private": false, "attachment_id": null}]
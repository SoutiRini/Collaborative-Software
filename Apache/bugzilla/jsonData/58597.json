[{"count": 0, "tags": [], "creator": "rmuir@apache.org", "attachment_id": null, "id": 186308, "time": "2015-11-07T23:06:01Z", "bug_id": 58597, "creation_time": "2015-11-07T23:06:01Z", "is_private": false, "text": "When running under securitymanager, this calls setAccessible() to violate access rules, and will lead to an exception like this:\n\n   > Throwable #1: org.apache.tika.exception.TikaException: Unexpected RuntimeException from org.apache.tika.parser.microsoft.ooxml.OOXMLParser@38ba0fca\n   > \tat __randomizedtesting.SeedInfo.seed([30F5D02182B6C2A6:BD8A17A749023F4A]:0)\n   > \tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:282)\n   > \tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)\n   > \tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:120)\n   > \tat org.apache.tika.Tika.parseToString(Tika.java:537)\n   > \tat org.elasticsearch.mapper.attachments.AttachmentMapper$1.run(AttachmentMapper.java:624)\n   > \tat org.elasticsearch.mapper.attachments.AttachmentMapper$1.run(AttachmentMapper.java:621)\n   > \tat java.security.AccessController.doPrivileged(Native Method)\n   > \tat org.elasticsearch.mapper.attachments.AttachmentMapper.parseWithTika(AttachmentMapper.java:621)\n   > \tat org.elasticsearch.mapper.attachments.VariousDocTests.assertParseable(VariousDocTests.java:127)\n   > \tat org.elasticsearch.mapper.attachments.VariousDocTests.testWordDocxDocument104(VariousDocTests.java:62)\n   > \tat java.lang.Thread.run(Thread.java:745)\n   > Caused by: org.apache.poi.POIXMLException: java.security.AccessControlException: access denied (\"java.lang.reflect.ReflectPermission\" \"suppressAccessChecks\")\n   > \tat org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:231)\n   > \tat org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:177)\n   > \tat org.apache.poi.xwpf.usermodel.XWPFDocument.<init>(XWPFDocument.java:119)\n   > \tat org.apache.poi.xwpf.extractor.XWPFWordExtractor.<init>(XWPFWordExtractor.java:58)\n   > \tat org.apache.poi.extractor.ExtractorFactory.createExtractor(ExtractorFactory.java:204)\n   > \tat org.apache.tika.parser.microsoft.ooxml.OOXMLExtractorFactory.parse(OOXMLExtractorFactory.java:86)\n   > \tat org.apache.tika.parser.microsoft.ooxml.OOXMLParser.parse(OOXMLParser.java:87)\n   > \tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)\n   > \t... 46 more\n   > Caused by: java.security.AccessControlException: access denied (\"java.lang.reflect.ReflectPermission\" \"suppressAccessChecks\")\n   > \tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)\n   > \tat java.security.AccessController.checkPermission(AccessController.java:884)\n   > \tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n   > \tat java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:128)\n   > \tat org.apache.poi.xwpf.usermodel.XWPFDocument.onDocumentRead(XWPFDocument.java:228)\n   > \t... 53 more\n\n\nCan this be avoided somehow? Thanks!"}, {"count": 1, "tags": [], "bug_id": 58597, "text": "Hi Robert,\nI found the problematics code part. In general, setAccessible should be added to POI's forbidden-apis, because libraries embedded in other projects should never ever violate Java Language constraints.\nI will check for other AccessibleObject#setAccesible.", "id": 186309, "time": "2015-11-07T23:07:58Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-07T23:07:58Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "id": 186310, "time": "2015-11-07T23:13:58Z", "bug_id": 58597, "creation_time": "2015-11-07T23:13:58Z", "is_private": false, "text": "I have no idea why we need reflection at all. We should just remove this. The target class is a POI-internal class, why not just make the problematic method public?"}, {"count": 3, "tags": [], "bug_id": 58597, "attachment_id": null, "text": "I reviewed the POI code: There are tons of this stuff inside.\nSome code parts also try to access stuff inside JVM's classes. This will break with Java 9, as setAccessible on classes from Java runtime will fail.\n\nI have no idea how to fix this mess. Giving up for now. The code does not even use AccessController.doPrivileged(), so one could limit the additional security permissions to POI's JAR files.", "id": 186311, "time": "2015-11-07T23:57:16Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-07T23:57:16Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 58597, "text": "FYI, I added some initial rules for reflection usage in r1713218, they are currently commented out to not break the build.", "id": 186315, "time": "2015-11-08T10:06:52Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-11-08T10:06:52Z", "is_private": false, "attachment_id": null}, {"id": 186316, "tags": [], "bug_id": 58597, "attachment_id": null, "count": 5, "text": "Thanks Dominik. I was about to do the same.\n\nAt least we should wrap all reflection usage with AccessController.doPrivileged(), as this allows to enable this type of reflection only for the POI JAR file and not your whole project.", "time": "2015-11-08T11:35:48Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-08T11:35:48Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58597, "attachment_id": null, "text": "I started to fix some of the setAccessible stuff. The first one was the mmap unmapper, which I copied from Lucene. See r1713350.", "id": 186336, "time": "2015-11-09T09:11:56Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-09T09:11:56Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 58597, "text": "Created attachment 33267\npatch\n\nFirst patch removing many useless setAccessible in POIs internal classes:\n\nIt adds getters marked with @Internal annotation. For the issue reported here, it is a bit more stupid, because you cannot make the method public, because it is protected by design. I added a public Accessor class with a static method that delegates. Maybe we shoud fix this in another way.\n\nWhat do others think?\n\nThere are more stuff like this, I just started. There are some of those in tests, which is easy to fix in a similar way (using Accessor class inside tests, just placed in right package).", "id": 186338, "time": "2015-11-09T11:38:18Z", "creator": "uwe@thetaphi.de", "creation_time": "2015-11-09T11:38:18Z", "is_private": false, "attachment_id": 33267}, {"count": 8, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "id": 186349, "time": "2015-11-10T23:20:29Z", "bug_id": 58597, "creation_time": "2015-11-10T23:20:29Z", "is_private": false, "text": "I will commit the patch tomorrow and proceed with more fixes like this. This should also fix the issue of Robert."}, {"count": 9, "tags": [], "creator": "uwe@thetaphi.de", "is_private": false, "text": "Created attachment 33270\nimproved patch\n\nNew patch that does not add a new class for the hack. I just added a static method in POIXMLDocumentPart to allow access to onDocumentRead, but clearly marked as @Internal.\n\nOn longer term the class structure and method acceibility should be reviewed. From looking at the code onDocument*() should all be public.\n\nI'll commit this now.", "id": 186350, "time": "2015-11-11T07:40:29Z", "bug_id": 58597, "creation_time": "2015-11-11T07:40:29Z", "attachment_id": 33270}, {"count": 10, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "text": "I committed this now. There are more setAccessible calls outside of test that are not yet wrapped. I will work on remving them in a similar way.\n\nThe root cause of this issue is now fixed, but the other problems must be solved too. Robert just did not see them lack of suitable test documents to trigger setAccessible calls.", "id": 186351, "time": "2015-11-11T07:43:19Z", "bug_id": 58597, "creation_time": "2015-11-11T07:43:19Z", "is_private": false}, {"count": 11, "text": "I removed all useless reflection in the remaining code:\n- For test cases I added helper methods to do the actual reflection inside a doPrivileged. This also checks that you only reflect on POI classes (package check).\n- Made some properties public with @Internal (where needed)\n- Wrapped remaining stuff with doPrivileged()\n\nI will open new issues for the following problems:\n- Under Java 9, the ooxml-lite generator code will definitely fail. My idea is to use a separate classloader that tracks all loaded classes instead of reflecting into the ClassLoader\n- The ZIP bomb detection will also fail in Java 9. The code should be refactored to wrap the zip file before opening a ZIPInputStream. This is not so easy, maybe somebody has an idea (I don't understand what's going on!!!)\n\nI'll close this issue.", "creator": "uwe@thetaphi.de", "is_private": false, "id": 186366, "time": "2015-11-11T19:26:28Z", "bug_id": 58597, "creation_time": "2015-11-11T19:26:28Z", "tags": [], "attachment_id": null}]
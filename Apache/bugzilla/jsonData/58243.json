[{"count": 0, "tags": [], "creator": "rguilbault@meditech.com", "text": "Created attachment 33000\nrotatelogs cpu spike process tress\n\noriginally reported at ApacheLounge: http://www.apachelounge.com/viewtopic.php?t=6707\n\nwhen using the -p parameter, e.g.:\n\nErrorLog \"|bin/rotatelogs.exe -p maint/MaintainLogs.bat -l logs/error.%Y%m%d.log 86400\"\n\nCustomLog \"|bin/rotatelogs.exe -p maint/MaintainLogs.bat -l logs/access.%Y%m%d.log 86400\" access \n\none instance of rotatelogs.exe will spike the CPU, caught in an infinite loop. after a bunch of whittling down, I've identified the cause of my issue resides in rotatelogs.c::post_rotate, here:\n\n    /* Collect any zombies from a previous run, but don't wait. */\n    while (apr_proc_wait_all_procs(&proc, NULL, NULL, APR_NOWAIT, pool) == APR_CHILD_DONE)\n        /* noop */;\n\nlooking at the implementation of said function, we see:\n\n        if (waithow != APR_WAIT) {\n            if (nChilds && nChilds == nActive) {\n                /* All child processes are running */\n                rv = APR_CHILD_NOTDONE;\n                proc->pid = -1;\n            }\n            else {\n                /* proc->pid contains the pid of the\n                 * exited processes\n                 */\n                rv = APR_CHILD_DONE;\n            }\n        }\n        if (nActive == 0) {\n            rv = APR_CHILD_DONE;\n            proc->pid = -1;\n        }\n        return rv;\n\nI would expect nActive == 0 on an initial startup, so I am confused why we're checking == APR_CHILD_DONE instead of != APR_CHILD_DONE, i.e. loop again if children exist.\n\nwith the original code, I got something like this:\n\nhttpd \n  |- rotatelogs (error) *cpu spike*\n  |- rotatelogs (access) no spike\n  |- httpd\n      |- rotatelogs (error) no spike\n\nswitching the code to != check yields:\n\nhttpd \n  |- rotatelogs (error) no spike\n  |- rotatelogs (access) no spike\n  |- httpd\n      |- rotatelogs (error) *cpu spike*\n      |- rotatelogs (access) no spike\n\nso there is still something amiss. I did trap out to verify that the return value when using != was APR_CHILD_NOTDONE and not some OS error.\n\nI am not setup to compile apr runtime so I cannot further trap out values for nChilds and nActive, but the only way we should be able to get APR_CHILD_NOTDONE would be if nChilds > 0.\n\nI've attached a screenshot of the process tree and it is perhaps worth noting that there exists a conhost child process.\n\nwe don't appear to do anything about the list of processes so I'm not entirely sure what the goal of this call to apr_proc_wait_all_procs is aiming to do, i.e. why it's in a while{} vs. an if{} or some such thing.", "id": 184558, "time": "2015-08-14T00:07:19Z", "bug_id": 58243, "creation_time": "2015-08-14T00:07:19Z", "is_private": false, "attachment_id": 33000}, {"count": 1, "tags": [], "bug_id": 58243, "attachment_id": null, "is_private": false, "id": 184559, "time": "2015-08-14T00:09:09Z", "creator": "rguilbault@meditech.com", "creation_time": "2015-08-14T00:09:09Z", "text": "note: this was first notice on a Windows 2008 R2 server, then subsequently a Windows 7 PC. originally, it was not a problem on my Windows 8.1 PC, but I can now reproduce here as well."}]
[{"count": 0, "tags": [], "creator": "hzdbyte@gmail.com", "attachment_id": null, "text": "If APR_ALLOCATOR_USES_MMAP is 0, then APR tries to use memory block allocated as pool_allocator for the first node too (in apr_pool_create_unmanaged_ex function).\n\nThen on pool allocator destruction it tries to free memory block for this node too, but as it was not allocated separately, MSVC CRT produces runtime error:\n\n---------------------------\nMicrosoft Visual C++ Debug Library\n---------------------------\nDebug Assertion Failed!\n\nProgram: ...\\app.exe\nFile: f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dbgheap.c\nLine: 1317\n\nExpression: _CrtIsValidHeapPointer(pUserData)\n\nFor information on how your program can cause an assertion\nfailure, see the Visual C++ documentation on asserts.\n\n(Press Retry to debug the application)\n\nStack trace:\n\n \tntdll.dll!_RtlpBreakPointHeap@4()  + 0x23 bytes\t\n \tntdll.dll!_RtlpValidateHeapEntry@12()  + 0x45da9 bytes\t\n \tntdll.dll!_RtlValidateHeap@12()  + 0x7a bytes\t\n>\tKernelBase.dll!_HeapValidate@12()  + 0x14 bytes\t\n \tmsvcr90d.dll!_CrtIsValidHeapPointer(const void * pUserData=0x03d95a08)  Line 2103\tC++\n \tmsvcr90d.dll!_free_dbg_nolock(void * pUserData=0x03d95a08, int nBlockUse=1)  Line 1317 + 0x9 bytes\tC++\n \tmsvcr90d.dll!_free_dbg(void * pUserData=0x03d95a08, int nBlockUse=1)  Line 1258 + 0xd bytes\tC++\n \tmsvcr90d.dll!free(void * pUserData=0x03d95a08)  Line 49 + 0xb bytes\tC++\n \tapp.exe!apr_allocator_destroy(apr_allocator_t * allocator=0x03d959a0)  Line 158 + 0xa bytes\tC\n \tapp.exe!apr_pool_destroy(apr_pool_t * pool=0x03d95a20)  Line 895\tC\n \tapp.exe!decaf::internal::AprPool::destroyPool()  Line 53\tC++\n \tapp.exe!decaf::internal::AprPool::~AprPool()  Line 34\tC++\n \tapp.exe!decaf::net::InetAddress::getLocalHost()  Line 175 + 0xab bytes\tC++\n \tapp.exe!activemq::util::IdGeneratorKernel::IdGeneratorKernel()  Line 60 + 0xc bytes\tC++\n \tapp.exe!activemq::util::IdGenerator::initialize()  Line 169 + 0x22 bytes\tC++\n \tapp.exe!activemq::library::ActiveMQCPP::initializeLibrary(int argc=0, char * * argv=0x00000000)  Line 67\tC++\n \tapp.exe!activemq::library::ActiveMQCPP::initializeLibrary()  Line 71 + 0x9 bytes\tC++\n \tapp.exe!RcServiceProcess::LibInitializer::Initialize()  Line 52 + 0x9 bytes\tC++\n \tapp.exe!RcServiceProcess::Initialize()  Line 100 + 0xe bytes\tC++\n \tapp.exe!RcServiceProcess::OnStart()  Line 271 + 0x8 bytes\tC++\n \tPTLibd.dll!PServiceProcess::ThreadEntry()  Line 1041 + 0x10 bytes\tC++\n \tPTLibd.dll!PServiceProcess::StaticThreadEntry(void * arg=0x03d455b8)  Line 1028\tC++\n \tmsvcr90d.dll!_callthreadstart()  Line 293 + 0xf bytes\tC\n \tmsvcr90d.dll!_threadstart(void * ptd=0x03d41730)  Line 277\tC\n \tkernel32.dll!@BaseThreadInitThunk@12()  + 0x12 bytes\t\n \tntdll.dll!___RtlUserThreadStart@8()  + 0x27 bytes\t\n \tntdll.dll!__RtlUserThreadStart@8()  + 0x1b bytes\t\n\nI've fixed this bug with such code:\n\n// BUGFIX: Free without malloc\n/*\n#if !APR_ALLOCATOR_USES_MMAP\n        if ((pool_allocator = malloc(MIN_ALLOC)) == NULL) {\n            if (abort_fn)\n                abort_fn(APR_ENOMEM);\n\n            return APR_ENOMEM;\n        }\n        memset(pool_allocator, 0, SIZEOF_ALLOCATOR_T);\n        pool_allocator->max_free_index = APR_ALLOCATOR_MAX_FREE_UNLIMITED;\n        node = (apr_memnode_t *)((char *)pool_allocator + SIZEOF_ALLOCATOR_T);\n        node->next  = NULL;\n        node->index = 1;\n        node->first_avail = (char *)node + APR_MEMNODE_T_SIZE;\n        node->endp = (char *)pool_allocator + MIN_ALLOC;\n#else\n*/\n        if (apr_allocator_create(&pool_allocator) != APR_SUCCESS) {\n            if (abort_fn)\n                abort_fn(APR_ENOMEM);\n\n            return APR_ENOMEM;\n        }\n        if ((node = allocator_alloc(pool_allocator,\n                                   MIN_ALLOC - APR_MEMNODE_T_SIZE)) == NULL) {\n            if (abort_fn)\n                abort_fn(APR_ENOMEM);\n\n            return APR_ENOMEM;\n        }\n//#endif\n\nSo we'll always allocate memory block for the node.", "id": 166849, "time": "2013-04-25T11:48:49Z", "bug_id": 54892, "creation_time": "2013-04-25T11:48:49Z", "is_private": false}, {"count": 1, "tags": [], "text": "Thanks. Committed as r1478934. This does not seem to affect 1.x", "is_private": false, "id": 167016, "creator": "sf@sfritsch.de", "time": "2013-05-03T19:28:37Z", "bug_id": 54892, "creation_time": "2013-05-03T19:28:37Z", "attachment_id": null}]
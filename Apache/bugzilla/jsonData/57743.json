[{"count": 0, "attachment_id": 32592, "creator": "pavel@semmle.com", "is_private": false, "id": 181997, "time": "2015-03-23T12:57:51Z", "bug_id": 57743, "creation_time": "2015-03-23T12:57:51Z", "tags": [], "text": "Created attachment 32592\nA patch against AbstractResourceSet.java, adding a call to gc() when it is destroyed.\n\nAs described in 56390, keeping jar files in a webapp folder open will prevent the application from being undeployed/redeployed on file systems which don't like open files to be deleted (in practice, that seems to mean Windows-based systems or NFS mounts).\n\nHaving observed the problem with tomcat 8.0.20, which is meant to contain the fix for 56390, I believe I have uncovered the root cause. Here's what happens, in my scenario:\n\n - A new .war is copied into $CATALINA_HOME/webapps; this is picked up by `HostConfig.checkResources()`, which decides to redeploy the app.\n\n - To do this, it first undeploys it (HostConfig.java:1250 in the TOMCAT_8_0_20 tag), and then attempts to delete the exploded war (line 1251).\n\n - In my case, the undeploy triggered a servlet's `destroy()` method, which triggered some class loading from WEB-INF/lib. Thus, the context's `WebResourceRoot` was used immediately before the attempt to delete the webapp folder, and opened a jar file.\n\n - Even though the `JarInputStreamWrapper` was properly closed, the handle to the jar remains open -- by design of `AbstractArchiveResource`, it is not closed immediately but with the next periodically scheduled call to `gc()`, as part of `StandardRoot.backgroundProcess()`.\n\nAs a result, when $CATALINA_HOME is on an NFS mount tomcat fails to delete the exploded webapp directory, and things go bad.\n\nThe attached patch fixes the problem in my testing; it simply changes `AbstractResourceSet.destroyInternal()` so that instead of doing nothing it calls `gc()`, which will close any jar files which no longer have open input streams. This seems like it's necessary to avoid a resource leak even on systems that allow the deletion of open files, since if I'm not mistaken after the context has been detached it will no longer receive `gc()` calls from the background process thread."}, {"text": "Thanks for the very clear bug report and analysis.\n\nBoth the analysis and patch look good so the patch has been applied to trunk and 8.0.x for 8.0.21 onwards.\n\nThanks again for your contribution.", "tags": [], "bug_id": 57743, "is_private": false, "count": 1, "id": 181999, "time": "2015-03-23T13:56:24Z", "creator": "markt@apache.org", "creation_time": "2015-03-23T13:56:24Z", "attachment_id": null}]
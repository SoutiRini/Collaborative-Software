[{"count": 0, "tags": [], "bug_id": 46015, "attachment_id": null, "text": "Just a suggestion...\n\nIt seems like the HSSFStyle API is designed more around the internals of the xls file format than around what a programmer would want to do when building a spreadsheet.\n\nFor example, I've been trying to figure out how to manage the global list of HSSFCellStyles and reuse existing ones where possible.  It seems like the easiest way to do this would be to build a reference style with all the settings you want for a particular cell and then enumerate over all the existing styles in the workbook to see if there's a match.\n\nIf so, would it not make sense to add the following methods to the HSSFCell class to automate that procedure and hide it from the user:\n\nHSSFCellStyle getNewStyle();\n\nProduce a temporary HSSFCellStyle, where you could set all the parameters you want, without attaching it to the workbook.\n\nvoid applyNewStyle(HSSFCellStyle style);\n\nScan all the styles in the workbook and if there's a match, apply the existing style to the cell.  If not, attach the new style to the workbook and apply it to the cell.\n\nIt certainly seems like that's what Excel does when you restyle a cell.  It certainly does not just apply the change to a global style that the cell shares with others, in applying the change to all the shared cells.\n\nDoes this sound reasonable?  I'd submit a patch if I understood the POI codebase better.", "id": 121570, "time": "2008-10-15T13:37:05Z", "creator": "ryampolsky@yahoo.com", "creation_time": "2008-10-15T13:37:05Z", "is_private": false}, {"count": 1, "tags": [], "text": "You can probably already do most of this, with a little bit of fiddling. HSSFCellStyle.cloneStyleFrom(style), HSSFWorkbook.getNumCellStyles() and HSSFWorkbook.getCellStyleAt(idx) should be most of what you need\n\nIf you do wrap this up in an easier to use structure for your use case, do please submit a patch", "is_private": false, "id": 121627, "creator": "apache@gagravarr.org", "time": "2008-10-16T07:45:53Z", "bug_id": 46015, "creation_time": "2008-10-16T07:45:53Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46015, "attachment_id": null, "id": 121632, "time": "2008-10-16T08:58:52Z", "creator": "ryampolsky@yahoo.com", "creation_time": "2008-10-16T08:58:52Z", "is_private": false, "text": "Yeah, the approach you outlined is essentially how I thought I'd do it for my app.  I had just noticed that I wasn't alone in this confusion and had thought that it would be nice if the project either provided this guidance in the documentation or, even better, wrapped this behavior into a standard interface that would make cell styles much easier to use for most applications.\n\nThis is my first Java project, so I don't feel qualified to submit a patch (yet).  I was hoping that bugzilla might be a semi-appropriate place to make suggestions.  If not, is there a better place to submit it?  And is my suggestion just wrong-headed in terms of the goals of the project?"}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 121636, "time": "2008-10-16T09:50:08Z", "bug_id": 46015, "creation_time": "2008-10-16T09:50:08Z", "is_private": false, "text": "(In reply to comment #2)\n> I had just noticed that I wasn't alone in this confusion and had thought\n> that it would be nice if the project either provided this guidance in the\n> documentation or, even better, wrapped this behavior into a standard interface\n> that would make cell styles much easier to use for most applications.\n\nBeing an open source, volunteer project, the available features and documentation track what people are willing and able to contribute\n\nIf you'd like to write the code for this, we'd be happy to accept it. If you just want to document the workaround, we'd again be happy to add that to the overall docs :)"}]
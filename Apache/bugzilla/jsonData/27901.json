[{"count": 0, "attachment_id": null, "bug_id": 27901, "is_private": false, "id": 54561, "time": "2004-03-24T11:50:37Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-03-24T11:50:37Z", "tags": [], "text": "The method remove() of the TextCharIterator class, defined private in the file \nfo/FOText.java, should remove the current character, pointed to by curIndex, \nbut its effect is to remove the one pointed to by the start index.\n\nThe fo file I am going to attach can be used to see the problem; there are two \nblock with the same text, but in the second one there are some extra spaces \nthat should be removed as white-space-collapse default value is true; instead \nof the extra spaces, the first character are removed.\n\nNow, the code is:\n\n  public void remove() {\n      if (start < ca.length) {\n          start++;\n      }\n  }\n\nA simple solution could be shifting the whole array of character every time \nremove is called, but that would not be very efficient, especially with big \narrays:\n\n  public void remove() {\n      if (start < ca.length) {\n          for (int i = curIndex - 1;\n               i > start;\n               ca[i] = ca[--i]) {\n              // nothing\n          }\n          start++;\n      }\n  }\n\nMaybe a better idea would be to store the indexes of the character to remove \n(a kind of \"black list\"), and to actually remove them when creating the \nTextLayouyManager.\nInstead of calling a single System.arraycopy, the TextLayoutManager \nconstructor should call a method of the FOText class, which would copy sub-\narray of consecutive \"good\" indexes between  two indexes in the black list (or \nbetween the array start and the first black index, or between the last black \nindex and the array end)."}, {"count": 1, "attachment_id": 10947, "bug_id": 27901, "text": "Created attachment 10947\nSample fo file to see the problem", "id": 54562, "time": "2004-03-24T11:51:29Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-03-24T11:51:29Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "Hi Luca,\n\nThanks, you're completely correct.  I've spent a lot of time trying to get this \nright, but obviously I'm not done yet.\n\nJust FYI, for a long time, we had a problem of a leading space remaining at the \nbeginning of the first FO-Text instance of the fo:block (During processing, the \nfo:block is chopped up into FOText instances.)  \n\nThe first thing to remember about the FOText instance is not all of the string \nneeds to be processed--we have leading spaces to remove for each instance:\n\n{ leading space }  the text is here\n\nOld process (which had the leading space bug), did this:\n1.) remove a space\n2.) arraycopy everything over one to the left (see [1] at the bottom)\n3.) repeat 1&2 until leading space gone (lots of arraycopy's's)\n\nWhat we were left with is as follows for the TextLayoutManager to use:\n\nValid text<--- invalid trailing chars --->\n^        ^                               ^\na        b                               c\n\na - 1st position of string to process (always at position 0) by Text LM\nb - \"length\" param to stop processing for Text LM\nc - (irrelevant) end of FOText char array (always remains the same after \nallocation).\n\nSo the TextLayoutManager would render from position 0 to a \"length\" value which \nwould point to the last valid value.\n\nMy new algorithm was also an attempt to get rid of all the arraycopy's.  So \ninstead of removing characters and shifting everything to the left, I just \nwanted to increment a start pointer.  So what TextLayoutManager renders is from \n(start character, natural end of char buffer of the FOText object.)\n\n{ leading space }  the text is here\n                   ^              ^\n                   a              b\n\na - start value\nb - natural end of char array  (i.e., array.length)\n\nBut my simple solution failed to take into account the need to remove spaces \n*within* the fragment, not just the leading spaces.  So, as you mention, \"the   \ntext is here\" would be rendered as \"e   text is here.\"\n\nI may need to bring back the old code, but I'd also like a hybrid approach.  \nExtra spaces between words are relatively rare compared to initial leading \nspaces (at least, that what my testing showed.)  I'd like to continue \nincrementing the start value until the first word occurs, *then* start with the \narraycopy's for the extra spaces between words.\n\nThis would mean:\n\n{ leading space }  the text is here  \n                   ^              ^  ^\n                   a              b  c\n\na - start value\nb - end value (couple of decrements from (c) below due to extra spaces between \nwords\nc - natural end of char array  (i.e., array.length)\n\nThat would involve re-creating the \"length\" (or \"end\") value in FOText, and \nusing it within TextLayoutManager.\n\nI'll look into this soon (but patches of course are welcome in case you're \nfaster than me! ;)\n\nThanks again (Grazie!), \nGlen\n\n[1] (line 159) http://cvs.apache.org/viewcvs.cgi/xml-\nfop/src/java/org/apache/fop/fo/FOText.java?r1=1.16&r2=1.17&diff_format=h", "attachment_id": null, "id": 54611, "creator": "glenmazza@yahoo.com", "time": "2004-03-24T22:49:56Z", "bug_id": 27901, "creation_time": "2004-03-24T22:49:56Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 27901, "text": "Hi,\nif I got everything right, I think the most oo way do this would be to use\njava.util.LinkedList:\n\nnew LinkedList(Arrays.asList(ca));\n\nThen you could also use the ListIterator provided by LinkedList and\ndelegate all calls to it.\n\nHope this helps,\nChristian", "id": 54661, "time": "2004-03-25T15:46:29Z", "creator": "sacl@gmx.de", "creation_time": "2004-03-25T15:46:29Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 27901, "attachment_id": null, "id": 54692, "time": "2004-03-25T22:49:22Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-03-25T22:49:22Z", "is_private": false, "text": "For this, I think we need to focus more on the fastest/most optimized solution \n(perhaps making a slight allowance for readability) rather than oo, because \nthis is a very critically-called portion of the code.  *All* text gets run \nthrough here, and this process occurs for approximately every line of the \noutput document.  (Perhaps not much of a bad thing, because with optimization, \nwhat you lose with oo elegance you sometimes make up with mathematical \nelegance!)\n\nGlen\n"}, {"count": 5, "tags": [], "text": "The advance if the LinkedList solution would be that remove/replace operations\nwould be very fast. It's only a replacement of two references, no arraycopy.\n\nE.g.\n\na -> b -> c\n\nis represented in the sun SDK implementation (only looked into 1.4.2)\n\na.previous = null\na.next = b\nb.previous = a\nb.next = c\nc.previous = b\nc.next = null\n\nRemoving b would be\n\na.next = c\nc.previous = a\n\nb is thrown away.\n\nThe drawback: Besides the LinkedList and its iterator which need to be\ngenerated, further 2*chrarray.length objects (length Characters from\nArrays.asList + length internally from the LinkedList which generates\nLinkedList.Entry instances) are needed.\n\nIf you prefer little construction overhead this is the wrong thing, if you focus\non fast removing/replacing I think this is the best solution.\n\nChristian Z.", "is_private": false, "id": 54714, "creator": "sacl@gmx.de", "time": "2004-03-26T07:55:36Z", "bug_id": 27901, "creation_time": "2004-03-26T07:55:36Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "lfurini@cs.unibo.it", "is_private": false, "text": "Hi again, this is my try:\n\n- added an ArrayList called \"blackList\" to the FOText class; when remove is \ncalled, the index of the character to be removed is stored in this list (and \nnothing else is done); the first element in this blackList is always -1, and \nthe last ca.length\n- added an int called \"length\" to the FOText class, to store the computed \nlength of the text, which is < ca.length if some characters are removed\n- created a new method for the FOText class, called \"compactText\"; it is \ncalled in the TextLayoutManager constructor, before modifying textArray; it \nmodifies the start and length variables of the FOText node\n- textArray is given a dimension of \"length\" (not ca.length) and then \narraycopy is called with the start and length computed before\n\nThe compactText method:\n1) starts examining the black list from the beginning\n2) founds two black indexes (position of char to be removed) which are not \nconsecutive, so that they define a range of \"good\" characters\n3) if this range is the first one found, nothing is done except updating start \nand length, else the range is shifted to the left, thus removing the \"bad\" \ncharacters\nand then 2) and 3) until the end of the blacklist is found\n\n |   Text is   here and  here.|  <- this is the ca array\n xxxx        xx         x     x  <- these are the bad indexes\n     --------  --------- -----   <- these are the ranges found beween\n                                    two not-consecutive bad indexes\n |   Text is here and here.   |  <- this is the compacted array\n     ^start                ^start+length\n\nIn this way every good character is shifted at most one time; two times, \nactually, as arraycopy is called with src = dest, and a temporary array is \ncreated; maybe the TextLayoutManager should use the blacklist to perform \narraycopy directly between ca and textArray, without compacting the FOText \narray?.\n\nI am going to attach the patch with these changes.\n\nBye\n    Luca", "id": 54722, "time": "2004-03-26T11:31:11Z", "bug_id": 27901, "creation_time": "2004-03-26T11:31:11Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "lfurini@cs.unibo.it", "attachment_id": 11006, "text": "Created attachment 11006\nproposed patch", "id": 54723, "time": "2004-03-26T11:32:16Z", "bug_id": 27901, "creation_time": "2004-03-26T11:32:16Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 27901, "attachment_id": 11007, "id": 54724, "time": "2004-03-26T11:32:50Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-03-26T11:32:50Z", "is_private": false, "text": "Created attachment 11007\nproposed patch"}, {"count": 9, "tags": [], "bug_id": 27901, "attachment_id": null, "id": 54727, "time": "2004-03-26T11:42:05Z", "creator": "sacl@gmx.de", "creation_time": "2004-03-26T11:42:05Z", "is_private": false, "text": "OK,\nseems I'm too late. :-)\nAnyway, yet another quite fast and simple approach. No extra objects -- only one\narraycopy.\n\nAlthough not really a patch I tried to make it as copy & paste friendly as possible.\n\nEvery nextChar call only shifts one char to the left. This method has one little\ndrawback): You have to ensure that the whole array was processed once\ncompletely, which is the normal case. If not (e.g. if there is a break statement\nin the while-loop) the array contains corrupted data, a bug which would be hard\nto find. Therefore I think the ca array should be encapsulated in the FOText\nclass -- what involves some refactoring (the same issue applies to the current\napproach). The getText method ensures that the array is processed once.\n\nHope this is useful\nChristian Z."}, {"count": 10, "tags": [], "creator": "sacl@gmx.de", "attachment_id": 11008, "text": "Created attachment 11008\nanother possible solution", "id": 54728, "time": "2004-03-26T11:43:53Z", "bug_id": 27901, "creation_time": "2004-03-26T11:43:53Z", "is_private": false}, {"count": 11, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "text": "Vielen Dank, Christian Z & Luca--this will be a fun weekend for me--I am\nfortunate to have TWO possible implementations to choose from.  I will study\nthem up. \n\nGlen", "id": 54734, "time": "2004-03-26T12:44:37Z", "bug_id": 27901, "creation_time": "2004-03-26T12:44:37Z", "is_private": false}, {"count": 12, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "text": "I hope to get back to this over the weekend--I was working the logging issue \nlast weekend.", "id": 55201, "time": "2004-04-02T22:05:17Z", "bug_id": 27901, "creation_time": "2004-04-02T22:05:17Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 27901, "attachment_id": null, "id": 55226, "time": "2004-04-03T20:01:49Z", "creator": "spepping@apache.org", "creation_time": "2004-04-03T20:01:49Z", "is_private": false, "text": "I like the idea of the black list. But it is not necessary to make it\nexplicit. It is possible to remove multiple white space characters in\na single loop. In the attached patch I have implemented this idea in\nthe constructor of FOText, so that FOText contains a text without\nmultiple spaces.\n\nThe attached test fo file demonstrates that it works well, except when\nthe block is split up in several FOs. In that case text disappears.  I\nhave checked that that does not happen in the FOText constructor and\nthat TextLayoutManager.textArray is also correct. In view of the fact\nthat the results are different whether the inlines have color or not,\nit may also be an error in the renderer.\n\nThe intermediate array caLong could be skipped if it were not\nnecessary to truncate ca to its exact length. This could be done if\nevery method and client would use node.length instead of\nnode.ca.length.\n"}, {"count": 14, "attachment_id": 11114, "bug_id": 27901, "is_private": false, "id": 55227, "time": "2004-04-03T20:03:01Z", "creator": "spepping@apache.org", "creation_time": "2004-04-03T20:03:01Z", "tags": [], "text": "Created attachment 11114\nmy patch"}, {"count": 15, "tags": [], "bug_id": 27901, "text": "Created attachment 11115\nAn fo file that shows the results of the patch", "id": 55228, "time": "2004-04-03T20:04:18Z", "creator": "spepping@apache.org", "creation_time": "2004-04-03T20:04:18Z", "is_private": false, "attachment_id": 11115}, {"count": 16, "tags": [], "text": "The BlackList method is not my favorite, because I suspect only a few percent of\nextra spaces found are between words--the extra complexity appears unwarranted.\n My debugging has indicated that 95%+ of extra spaces all appear at the\nbeginning of the FOText object, so it is best to just increment a start index\nfor those.  For the few percent of errant extra spaces between words, then an\narraycopy can be called, removing the spaces one-by-one.  (Keep in mind, one\nmonth ago we were doing an arraycopy for *every* space, even those at the\nbeginning of the string, so a 95% reduction in arraycopies is already a huge\nimprovement.)  Please advise if you've come to different conclusions--but the\ncomplexity doesn't appear necessary to me.  HOWEVER/Note:  I've only been\nworking with fo:blocks, not with fo:inlines, so my above reasoning may not be\nvalid when those are taken into consideration.\n\nAnyway, please check the latest solution applied.  Here I brought in the old\nsolution to solve the extra spaces problem, while keeping the new solution for\nthe more commonly occurring spaces at the front of fo:text.\n\nThe (commented-out) System.out.println's in the remove() method are useful for\nvisualizing the space removal, and indicate the following:\n\nRemoveA:  Newest method, that just increments the start index until a\nword is found.  No array copies needed here, very speedy.\n\nRemoveB and RemoveC:  The previous method, ideally just activated for the\nrelatively rare occurrences of extra spaces between words.  Unfortunately,\nRemoveB and RemoveC are called much more often (50% or so) than they should be \n(As stated above, I suspect < 10%), so more optimization may be needed here. \n(Perhaps an error in my logic of when RemoveA vs. RemoveB should be called.)\n\nComments most welcome.\n\nGlen", "attachment_id": null, "id": 55253, "creator": "glenmazza@yahoo.com", "time": "2004-04-04T06:41:40Z", "bug_id": 27901, "creation_time": "2004-04-04T06:41:40Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 27901, "attachment_id": null, "id": 115990, "time": "2008-04-28T15:02:34Z", "creator": "adelmelle@apache.org", "creation_time": "2008-04-28T15:02:34Z", "is_private": false, "text": "\nBug seems to be fixed in current trunk. \nBoth supplied fo-files seem to render as expected, so I'm closing this one."}, {"count": 18, "tags": [], "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "is_private": false, "id": 156317, "creator": "gadams@apache.org", "time": "2012-04-01T07:09:42Z", "bug_id": 27901, "creation_time": "2012-04-01T07:09:42Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 5413, "text": "I have two JSP pages testing scope of beans.\n\nPage 1:\n  Creates a bean instance and forwards the request to another\n  page (Page 2) to make a scope validity check.\nPage 2:\n  Consists of only scriplets, declarations, and JSP-comments.\n  In either case, if the test fails or passes, a call is \n  made to response.sendError(int,String).\n\nThe problem here seems to be since sendError commits the response,\nthe call to initOut will fail when calling response.getWriter();\nLooking at the code for initOut:\n\nprotected void initOut() throws IOException {\n    if (out == null) {\n        out = response.getWriter();\n        //System.out.println(\"JspWriterImpl: initOut: \" + this + \" \" +out);\n    }\n}\n\nIt would seem to make sense to make sure that the response isn't already\ncommitted as well before making the call to getWriter.\n\nNOTE:  This setup that I had, previously worked.  I don't think I'm doing\nanything incorrectly, but I could be wrong.  \n\nStacktrace:\n*******************************************************************\nStandardWrapperValve[jsp]: Servlet.service() for servlet jsp threw exception\njava.lang.IllegalStateException\n    at\norg.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:159)\n    at org.apache.jasper.runtime.JspWriterImpl.initOut(JspWriterImpl.java:166)\n    at\norg.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:158)\n    at org.apache.jasper.runtime.JspWriterImpl.flush(JspWriterImpl.java:205)\n    at\norg.apache.jasper.runtime.PageContextImpl.release(PageContextImpl.java:176)\n    at\norg.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(JspFactoryImpl.java:198)\n    at\norg.apache.jasper.runtime.JspFactoryImpl.access$0(JspFactoryImpl.java:197)\n    at\norg.apache.jasper.runtime.JspFactoryImpl$PrivilegedReleasePageContext.run(JspFactoryImpl.java:132)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at\norg.apache.jasper.runtime.JspFactoryImpl.releasePageContext(JspFactoryImpl.java:191)\n    at\norg.apache.jsp.ScopeResultXML$jsp._jspService(ScopeResultXML$jsp.java:137)\n    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:107)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n    at\norg.apache.jasper.servlet.JspServlet$JspServletWrapper.service(JspServlet.java:202)\n    at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:382)\n    at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:474)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n    at\norg.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:679)\n    at\norg.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:431)\n    at\norg.apache.catalina.core.ApplicationDispatcher.access$0(ApplicationDispatcher.java:359)\n    at\norg.apache.catalina.core.ApplicationDispatcher$PrivilegedForward.run(ApplicationDispatcher.java:130)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at\norg.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:347)\n    at\norg.apache.jasper.runtime.PageContextImpl.forward(PageContextImpl.java:413)\n    at\norg.apache.jsp.positivePageScopedObjectXML$jsp._jspService(positivePageScopedObjectXML$jsp.java:88)\n    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:107)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n    at\norg.apache.jasper.servlet.JspServlet$JspServletWrapper.service(JspServlet.java:202)\n    at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:382)\n    at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:474)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n    at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:247)\n    at\norg.apache.catalina.core.ApplicationFilterChain.access$0(ApplicationFilterChain.java:197)\n    at\norg.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:176)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:172)\n    at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:243)\n    at\norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\n    at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\n    at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n    at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:201)\n    at\norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\n    at\norg.apache.catalina.valves.CertificatesValve.invoke(CertificatesValve.java:246)\n    at\norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\n    at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\n    at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n    at\norg.apache.catalina.core.StandardContext.invoke(StandardContext.java:2343)\n    at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)\n    at\norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\n    at\norg.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:170)\n    at\norg.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\n.\n.\n.\n**********************************************************************", "id": 8894, "time": "2001-12-13T09:17:00Z", "creator": "Ryan.Lubke@Sun.COM", "creation_time": "2001-12-13T09:17:00Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "Ryan.Lubke@Sun.COM", "text": "Created attachment 896\nThe test(s) in question are the ScopedObject tests (page, request, session, and application)", "id": 8895, "time": "2001-12-13T09:19:28Z", "bug_id": 5413, "creation_time": "2001-12-13T09:19:28Z", "is_private": false, "attachment_id": 896}, {"count": 2, "tags": [], "bug_id": 5413, "attachment_id": null, "id": 8899, "time": "2001-12-13T12:12:42Z", "creator": "kin-man.chung@sun.com", "creation_time": "2001-12-13T12:12:42Z", "is_private": false, "text": "I knew I hadn't seen the last of the problems related to sendRedirect, and\nsendError!  :(\n\nThe root of the problem is jasper does not known that they are being called, so\nit is the user's responsibility to make sure that write or flush never got\ncalled again after a call to sendRedirect or sendError, including the write's or\nfluses generated by Jasper!  It is either that, or we'll have to change the\nServlet spec so that sendRedirect, and sendError never returns (i.e. they should\nthrow an exception of some sort).\n\nThere are limits to what Jasper can do to hide the problem.  This is one that it\ncan do nothing about.\n\nThe proposal to check if response has been committed in initOut would not work,\nbecause if getWriter is not called, \"out\" would be null, and you are going to\nget a NullPointerException later.  The fact is by the time it get to initOut, it\nis already too late.  Write should not have been called in the first place! \nShould we check if response is commited on every call to write?  That would be\nvery costly!\n\nHow can the user be sure that write never got called after sendError?  Make sure\nthat there is always a return after a call to sendError, and a return after a\ncall to methods that calls sendError (e.g. sendFail in the test), etc.  If you\nthink this is error-prone and too much to asked from the user, you are right,\nbut I already said the spec should be changed.\n\nI'll probably close this one as INVLAID (since the test can be rewritten to get\nit to work), or WONTFIX (since there is no fix); but I'll leave it open for a\ncouple of days, to let people argue it out."}, {"count": 3, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "id": 8902, "time": "2001-12-13T14:04:38Z", "bug_id": 5413, "creation_time": "2001-12-13T14:04:38Z", "is_private": false, "text": "On second look, I notice that the exception comes from flush called from\nrelease.  I put a fix a couple days ago not to call flush if response had been\ncommitted.  Looks like you are running with a version without my fix.  Anyway, I\nalso couldn't reproduce the problem here.\n\nMy \"fix\" does not stop write's from happening after call to sendError; so if the\nbuffer is full and autoFlush true, the problem would surface again.  So my\nadvice about inserting \"return\"'s is still valid.\n"}, {"count": 4, "tags": [], "bug_id": 5413, "attachment_id": null, "id": 8905, "time": "2001-12-13T14:40:07Z", "creator": "Ryan.Lubke@Sun.COM", "creation_time": "2001-12-13T14:40:07Z", "is_private": false, "text": "Tested with latest nightly (Dec 13) The tests pass."}]
[{"count": 0, "tags": [], "bug_id": 55576, "attachment_id": null, "text": "The ServletRequest interface provides two methods to iterate through request parameters:\n\nEnumeration<String> getParameterNames(), and\nMap<String, String[]> getParameterMap()\n\nUnfortunately, the underlying implementation in Tomcat is a HashMap, which fails to preserve the order of parameters as they are specified in the request.\n\nAn alternate implementation should be used to preserve request order.  LinkedHashMap, for example, is capable of preserving insertion order.\n\nThe Servlet Specification (v3.0) speaks only to the relative ordering of query string data and post body data. However, section 17.13.3 of the HTML specification (v4.01) titled \"Processing form data\", clearly states that \"control names/values are listed in the order they appear in the document.\"\n\nTherefore, I do not see a valid interpretation of either specification to rationalize Tomcat's implementation. To receive a request with an ordered list of parameters and represent them in an implementation that is guaranteed not to preserve this order is difficult to rationalize.", "id": 170198, "time": "2013-09-20T21:14:32Z", "creator": "corythearchitect@outlook.com", "creation_time": "2013-09-20T21:14:32Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 170225, "time": "2013-09-23T13:48:18Z", "bug_id": 55576, "creation_time": "2013-09-23T13:48:18Z", "tags": [], "text": "The Servlet specification does defer to W3C for all HTML matters.\n\nThe text quoted above regarding ordering only applies when application/x-www-form-urlencoded is being used. Strictly, it applies only to the order that the client provides the data. It could be argued that if the client is required to provide the parameters in order in this case then the getParamererXXX() methods should respect that order. Further, if the order needs to be maintained for this one case, it is easier to maintain it for all.\n\nHowever, there is nothing that I can see in either the Servlet or HTML specifications that strcitly requires the Servlet API to present the parameters in the same order as they were received.\n\nThere is no major performance difference (I am aware of) between HashMap and LinkedHahsMap so I am not against making this change but neither (at this point) do I really see the need for it. One concern I do have is that given that there is not a requirement for this, other containers may not implement it and that could cause portability issues.\n\nI am curious as to the use case that supports it. Can you elaborate on why it might be important for the parameters to be returned in the same order as they appear on the form."}, {"count": 2, "tags": [], "bug_id": 55576, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #1)\n> I am curious as to the use case that supports it. Can you elaborate on why\n> it might be important for the parameters to be returned in the same order as\n> they appear on the form.\n\nSomewhat related:\n\nhttp://host/resource?op=add&op=update&op=delete\n\nIf the application expects left-to-right ordering when fetching \"op\" (which IMO is reasonable) then the ordering of the values is quite important.\n\nIt seems like extending the above use case to parameters with different names would be reasonable, though I can't really envision a use case where the order of unknown request parameter names would be important.", "id": 170228, "time": "2013-09-23T15:08:45Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-09-23T15:08:45Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55576, "attachment_id": null, "is_private": false, "id": 170229, "time": "2013-09-23T16:10:06Z", "creator": "corythearchitect@outlook.com", "creation_time": "2013-09-23T16:10:06Z", "text": "Thomas, thank you for your rapid evaluation and response on this matter.\n\nThe general use case is the servicing of a request in which the order of parameter evaluation is significant.\n\nhttp://host/resource?country=CA&postalcode=N7T5R4\n\nLet's assume this is in context of a general infrastructure that evaluates each parameter in the order received (field validation being just one example of potential triggers). postalcode validation is dependent on the value of country.\n\nThe specific scenario I am currently dealing with is porting a web service implementation from ASP/IIS to Java/Tomcat. The Microsoft IRequestDictionary.QueryString implementation respects order of insertion, while Tomcat scrambles the order as a result of the backing HashMap collection. \n\nI respect your position that there is no explicit specification of the server-side evaluation of HTML parameters.  However, I also see no significance to the client-side specification of parameter order beyond the implication that the ordering is also significant to the processing server that consumes it. What other purpose could such an ordering possibly serve?\n\nAssuming equivalent performance, what portability issues could arise from a MORE determinate collection implementation? If anyone is currently relying on the iteration order of the existing HashMap implementation,\na) they are in for a surprise anyhow, and\nb) the ServletRequest interface, unfortunately, provides no guarantees, relying on the generic Map and Enumeration interfaces, both of which defer to the implementation for behaviour in this regard.\n\nThis decision could only be interpreted as an improvement in compliance (with the HTML specification)."}, {"count": 4, "tags": [], "bug_id": 55576, "text": "(In reply to corythearchitect from comment #3)\n> The general use case is the servicing of a request in which the order of\n> parameter evaluation is significant.\n> \n> http://host/resource?country=CA&postalcode=N7T5R4\n> \n> Let's assume this is in context of a general infrastructure that evaluates\n> each parameter in the order received (field validation being just one\n> example of potential triggers). postalcode validation is dependent on the\n> value of country.\n\nIsn't \"postalcode validation is dependens on the value of country\" part of your business logic? If so, you should always be fetching the country first, then the postalcode. Or are you building a system where the order of the parameters in the request dictates the way validation is performed?\n\nIn any case, I am +1 for changing HashMap->LinkedHashMap to preserve parameter ordering.", "id": 170230, "time": "2013-09-23T16:30:47Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-09-23T16:30:47Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 55576, "attachment_id": null, "text": "\"Or are you building a system where the order of the parameters in the request dictates the way validation is performed?\"\n\nEssentially, yes.", "id": 170232, "time": "2013-09-23T18:18:39Z", "creator": "corythearchitect@outlook.com", "creation_time": "2013-09-23T18:18:39Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 55576, "is_private": false, "text": "In my opinion this requirement and the use case are weak.\n\nIn the best case I'd try to avoid depending on any ordering in the application.\n\nBut if ordering is really required then I would encode the parameter values and parse them myself and not rely on some container specific feature.\nE.g.: ?ops=op1|op2|op3&something=else, or any other encoding that will work for my use case. With URL encoded value the syntax could be quite rich.\n\nOn the other hand replacing HashMap with LinkedHashMap will not cause performance degradation so I don't mind such change.", "id": 170236, "time": "2013-09-23T20:17:18Z", "creator": "mgrigorov@apache.org", "creation_time": "2013-09-23T20:17:18Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 55576, "text": "Fixed in 8.0.x for 8.0.0-RC4 and 7.0.x for 7.0.45.", "id": 170237, "time": "2013-09-23T21:06:13Z", "creator": "markt@apache.org", "creation_time": "2013-09-23T21:06:13Z", "is_private": false, "attachment_id": null}, {"count": 8, "attachment_id": null, "creator": "violetagg@apache.org", "is_private": false, "id": 170738, "time": "2013-10-22T08:02:13Z", "bug_id": 55576, "creation_time": "2013-10-22T08:02:13Z", "tags": [], "text": "*** Bug 55686 has been marked as a duplicate of this bug. ***"}]
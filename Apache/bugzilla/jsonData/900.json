[{"count": 0, "tags": [], "bug_id": 900, "attachment_id": null, "text": "We use the RollingFileAppender under Windows NT and simultaneously open the log \nfile in a log viewer.\nUnder these conditions, the appender no longer works because renaming a file \nthat has been opened is not permitted, possibly resulting in a loss of data.\nThere are not any problems under linux.\nWe have found a way of solving this and use this derived appender.\nIt is based on the idea that a rollover does not take place in case the file \nhas been opened by a second application.\nThis is tested through a renameTo using the original file name.We use the \nRollingFileAppender under Windows NT and simultaneously open the log file in a \nlog viewer.\nUnder these conditions, the appender no longer works because renaming a file \nthat has been opened is not permitted, possibly resulting in a loss of data.\nThere are not any problems under linux.\nWe have found a way of solving this and use this derived appender.\nIt is based on the idea that a rollover does not take place in case the file \nhas been opened by a second application.\nThis is tested through a renameTo using the original file name.\n\nOur derived appender class:\n\npackage org.apache.log4j;\n\nimport java.io.File;\nimport java.io.IOException;\n\n\npublic class RollingFileAppenderEx extends RollingFileAppender \n{\n  public\n  RollingFileAppenderEx() \n  {\n  \tsuper();\n  }\n  \n  public\n  synchronized\n  boolean canRename()\n  {\n  \tboolean bRet = false;\n  \tFile file;\n\ttry \n\t{\t\n\t\tfile = new File(fileName);\n\t\tthis.closeFile();\n\t\tbRet = file.renameTo(file);\n\t\tthis.setFile(fileName, true);\n\t}\n\tcatch(IOException e){}\n\treturn bRet;\n  }\n  \n  public\n  synchronized\n  void rollOver() \n  {\n  \tif (canRename() == true)\n\t{\n\t\tsuper.rollOver();\n\t}\t\t\n  }\n}", "id": 1067, "time": "2001-03-08T04:47:22Z", "creator": "ras@acotec.com", "creation_time": "2001-03-08T04:47:22Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 900, "text": "We have a related problem in that we have multiple output specifications all \nlogging to the same file.  We do this to have the layoutPattern distinct for \ndifferent major subsystems.  In this case, however, the RollingFileAppender \ndoes not \"roll\".\n\nIMO, ideal behavior would be for rolling behavior (for output specs to the same \nfile) to be in place, with the caveat that if the various output specs \nspecified different parameters for the rolling, which is selected is non-\ndeterministic.", "id": 52357, "time": "2004-02-16T15:59:11Z", "creator": "brian.thorstad@sas.com", "creation_time": "2004-02-16T15:59:11Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "ceki@apache.org", "text": "*** Bug 5211 has been marked as a duplicate of this bug. ***", "id": 58339, "time": "2004-05-28T17:38:40Z", "bug_id": 900, "creation_time": "2004-05-28T17:38:40Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "kupci2@yahoo.com", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of 29726 ***", "id": 71919, "time": "2005-03-07T20:08:45Z", "bug_id": 900, "creation_time": "2005-03-07T20:08:45Z", "attachment_id": null}]
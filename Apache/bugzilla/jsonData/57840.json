[{"count": 0, "tags": [], "creator": "daniel.livshen@intel.com", "attachment_id": 32671, "is_private": false, "id": 182527, "time": "2015-04-21T11:25:11Z", "bug_id": 57840, "creation_time": "2015-04-21T11:25:11Z", "text": "Created attachment 32671\nStructured reference support for POI\n\nAdded new support for the Structured Reference syntax that was introduced in MS Excel 2007. \nYou can find more information about structured references in : https://support.office.com/en-us/article/Using-structured-references-with-Excel-tables-F5ED2452-2337-4F71-BED3-C8AE6D2B276E\nThe new patch adds the ability of parsing structured references (Only works in XSSF as in HSSF you don't have tables) and converting it to normal (and well implemented) Area Reference.\nAlso added support for Indirect evaluations with structured references."}, {"count": 1, "attachment_id": null, "bug_id": 57840, "is_private": false, "id": 191436, "time": "2016-06-06T20:22:18Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-06T20:22:18Z", "tags": [], "text": "This is great, just what I needed for \n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=57721"}, {"count": 2, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "is_private": false, "id": 191442, "time": "2016-06-07T08:21:29Z", "bug_id": 57840, "creation_time": "2016-06-07T08:21:29Z", "text": "attachment 32671 has merge conflicts against the trunk. Additional work will be needed to bring this back to something that can be committed to the trunk.\n\nA few more unit tests are probably also needed for the new functionality that were added to make sure we don't break structured references in the future."}, {"count": 3, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": null, "is_private": false, "id": 191451, "time": "2016-06-07T16:23:43Z", "bug_id": 57840, "creation_time": "2016-06-07T16:23:43Z", "text": "I have this working against trunk, all tests pass, but no new tests yet.  I'll work on a patch today and tomorrow with tests and some tweaks to the original patch. For one, it had company network specific changes to build.xml that leaked into the patch (I've removed them). There is some code that could benefit from turning a series of constants into an Enum, and it performs very slowly for large workbooks/large tables.  I can see a couple of things that would be quick, small changes for some big gains.  Again, with tests.\n\nFirst, though, I have to test against 3.12, as a library I use (Vaadin Spreadsheet) doesn't like something that changed in the API between 3.12 and trunk, as that's where my POC has to work for my day job :)"}, {"count": 4, "tags": [], "text": "(In reply to GW from comment #3)\n> First, though, I have to test against 3.12, as a library I use (Vaadin\n> Spreadsheet) doesn't like something that changed in the API between 3.12 and\n> trunk, as that's where my POC has to work for my day job :)\n\nWe've tried reaching out to the Vaadin Spreadsheet folks a few times now, but never had any response. If you have contacts there, please ping them to get in touch! (IIRC it was conditional formatting stuff we were most recently interested in collaborating on)", "is_private": false, "bug_id": 57840, "id": 191468, "time": "2016-06-08T12:41:06Z", "creator": "apache@gagravarr.org", "creation_time": "2016-06-08T12:41:06Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": null, "id": 191470, "time": "2016-06-08T15:55:00Z", "bug_id": 57840, "creation_time": "2016-06-08T15:55:00Z", "is_private": false, "text": "(In reply to Nick Burch from comment #4)\n> (In reply to GW from comment #3)\n> > First, though, I have to test against 3.12, as a library I use (Vaadin\n> > Spreadsheet) doesn't like something that changed in the API between 3.12 and\n> > trunk, as that's where my POC has to work for my day job :)\n> \n> We've tried reaching out to the Vaadin Spreadsheet folks a few times now,\n> but never had any response. If you have contacts there, please ping them to\n> get in touch! (IIRC it was conditional formatting stuff we were most\n> recently interested in collaborating on)\n\nI will do that.  I'm lobbying to go all-in with POI and Vaadin Spreadsheet for the next big thing for my new gig.  I've been a user of POI for over 10 years, and Vaadin for 5.  If I get my way, we will be paying Vaadin customers and can have some say in product direction.\n\nFor example, I found a bug in their conditional formatting stuff yesterday :)  After I finish the patch unit tests, I'll be filing a bug for them about it.  It may relate to Excel Table structured reference syntax in the conditional formatting formula, in which case they definitely should be talking to this team!"}, {"count": 6, "tags": [], "text": "Created attachment 33927\nTrunk patch adding support for Structured References in formulas, with unit tests\n\nThe new patch (same date as comment) is against TRUNK, and contains new passing unit tests to exercise the new code and notice new bugs.\n\nThe original patch was missing some corner cases around special characters and escapes in table names, now covered by tests and handled by the code.\n\n(why does Excel allow named ranges and tables to start with a backslash!?)\n\nThere are new comments for some existing and some new code that is there to improve execution performance at the cost of static cached metadata - changes to the underlying OOXML objects may not be seen unless the cached data is reset.  There was already some of that, but it wasn't called out in the JavaDoc comments.  Not likely in normal use, as most uses are either building or reading, but not building, reading, modifying, then calculating again, but since the underlying objects are exposed through public setters, it can happen.", "is_private": false, "bug_id": 57840, "id": 191471, "time": "2016-06-08T20:27:42Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-08T20:27:42Z", "attachment_id": 33927}, {"count": 7, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191472, "time": "2016-06-09T02:33:41Z", "bug_id": 57840, "creation_time": "2016-06-09T02:33:41Z", "is_private": false, "text": "Thanks for the quick turn around Greg!\nI'm slowly reviewing what you have. I committed StructuredReferences.xlsx in r1747482.\nI also added svn:eol-style=native to all the files in your patch so the diffs are shorter when reviewing these changes on a different OS.\nThe import change on Match.java isn't needed.\n\n1. Could you change String Table.isStructuredReference to a compiled Pattern for performance?\n2. We're trying to move all junit3 tests to junit4 tests. Could you update TestStructuredReferences.java to use junit4 (org.junit.Test with @Test decorators, see TestXSSFFormulaParser.java for an example)\n3. The changes to XSSFRowShifter looks like formulas with structured references cannot be row-shifted. Is that correct? If so, could you either fix that in your patch or open a new bug that depends on bug 57840?\n4. Add a javadoc to XSSFWorkbook.getTable. This method rebuilds the table cache and returns a single item. If the cache isn't used elsewhere, then a non-caching linear search would be faster and use less memory."}, {"count": 8, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": 33932, "id": 191499, "time": "2016-06-09T16:27:55Z", "bug_id": 57840, "creation_time": "2016-06-09T16:27:55Z", "is_private": false, "text": "Created attachment 33932\nUpdated patch"}, {"count": 9, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": null, "is_private": false, "id": 191504, "time": "2016-06-09T16:37:31Z", "bug_id": 57840, "creation_time": "2016-06-09T16:37:31Z", "text": "(In reply to Javen O'Neal from comment #7)\n> Thanks for the quick turn around Greg!\n> I'm slowly reviewing what you have. I committed StructuredReferences.xlsx in\n> r1747482.\n> I also added svn:eol-style=native to all the files in your patch so the\n> diffs are shorter when reviewing these changes on a different OS.\n> The import change on Match.java isn't needed.\n> \n> 1. Could you change String Table.isStructuredReference to a compiled Pattern\n> for performance?\n> 2. We're trying to move all junit3 tests to junit4 tests. Could you update\n> TestStructuredReferences.java to use junit4 (org.junit.Test with @Test\n> decorators, see TestXSSFFormulaParser.java for an example)\n> 3. The changes to XSSFRowShifter looks like formulas with structured\n> references cannot be row-shifted. Is that correct? If so, could you either\n> fix that in your patch or open a new bug that depends on bug 57840?\n> 4. Add a javadoc to XSSFWorkbook.getTable. This method rebuilds the table\n> cache and returns a single item. If the cache isn't used elsewhere, then a\n> non-caching linear search would be faster and use less memory.\n\nUpdated attachment has the requested changes.  Thanks for the feedback, I've been a long time user but this is my first patch.  Here are responses to your questions and comments:\n\n1. Yes, changed.  I missed this from the original patch I started from, thanks.\n\n2. Done.  The example test I picked turned out to be one not yet updated :)\n\n3. Structured Reference syntax doesn't reference individual rows directly, so shifting things doesn't affect these.  See the MS documentation link in the initial description.  All structured reference syntax is to table columns and parts (#Data, #Headers, etc.)  Formula evaluation dynamically constructs a 3DArea for the reference based on the current Table definition (I'm only caching references to the XSSFTable objects, not their start/end cell definitions).  Since those objects already existed, my assumption was that inserting/deleting rows above a XSSFTable already updates the table start/end.  If that's not the case, that's an existing bug - I haven't tried it.\n\n4. Added JavaDoc"}, {"count": 10, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "is_private": false, "id": 191512, "time": "2016-06-10T00:22:36Z", "bug_id": 57840, "creation_time": "2016-06-10T00:22:36Z", "text": "To make it easier to get this to a trunk-eligible state, I've created xssf_structured_references branch [1] in r1747607 so you and others can contribute unit tests and improvements with smaller diffs against this branch. I've applied your changes from attachment 33932 in r1747612.\n\nWhen this is trunk-eligible, I'll merge this back with trunk.\n\n[1] https://svn.apache.org/viewvc/poi/branches/xssf_structured_references/"}, {"count": 11, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "is_private": false, "id": 191513, "time": "2016-06-10T01:09:59Z", "bug_id": 57840, "creation_time": "2016-06-10T01:09:59Z", "text": "Moved getTable cache from XSSFWorkbook to XSSFEvaluationWorkbook to reduce the frequency of problems with a stale cache in r1747615-r1747616."}, {"count": 12, "attachment_id": null, "bug_id": 57840, "is_private": false, "id": 191514, "time": "2016-06-10T01:24:02Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-10T01:24:02Z", "tags": [], "text": "(In reply to Javen O'Neal from comment #11)\n> Moved getTable cache from XSSFWorkbook to XSSFEvaluationWorkbook to reduce\n> the frequency of problems with a stale cache in r1747615-r1747616.\n\nThis kills performance - the reason I moved it to XSSFWorkbook in the first place was performance.\n\nParsing and evaluating formulas on a moderately sized workbook (one table with 6 columns and 50,00 rows, one computed column) and a sheet with a small table of formulas referencing the data table (VLOOKUPs mostly) took over an hour on a P5 with 2GB allocated to the VM.\n\nMoving it to XSSFWorkbook reduced this to 6 minutes, which is still awful, the the problem at that point was the auto-boxing of rownums in all the row methods in XSSFSheet (15% of total time spent in Integer.compareTo).  Lots of references via Google for performance tests with auto-boxing vs. primitives vs. explicitly referenced and retained primitive wrappers (Integer/Long).\n\nThe table lookup was performed hundreds of thousands of times, as every cell evaluation created a new instance of XSSFEvaluationWorkbook, causing the cache to be rebuilt.  Even just doing a linear search, if there are 3 or 4 tables, regardless of size, is hugely expensive because the XMLBeans package is terribly slow for repeated lookups.\n\nI tried to balance the inconvenience/problem of a stale cache with performance.\n\nI think, but haven't verified yet, that the real performance issue is that when evaluating all the cell formulas in a workbook, if multiple cells reference the same expression, the expression isn't cached, but recalculated over and over for all those cells.  This is probably worst with range functions, when a column of cells do the same VLOOKUP over and over with different inputs against the same range.  Especially if that range contains formula cells.\n\nAll that to say, moving this back is going to have an extreme performance cost, and the real issues are deep.  They probably deserve their own separate issues:\n\n1. formula evaluations that require access to XML elements/attributes\n2. XSSFSheet rownum auto-boxing\n3. Formula evaluation intermediate result caching\n\nEventually I'll try to capture just how many table lookups by name are done vs. how many formulas reference the table, to see how bad it is."}, {"attachment_id": null, "tags": [], "bug_id": 57840, "is_private": false, "count": 13, "id": 191515, "time": "2016-06-10T04:14:50Z", "creator": "onealj@apache.org", "creation_time": "2016-06-10T04:14:50Z", "text": "Could you generate and upload a workbook with either a lot of tables or large tables that demonstrates the performance problems?\n\nUnfortunately we don't have a meaningful way to track execution time in our continuous integration tests because of differing resources provided by the executors. Nonetheless, you could write a unit test that calculates the time spent evaluating structured references for A/B comparisons (such as the change from comment 11).\n\nAre tables being looked up on the XSSFWorkbook or the XSSFEvaluationWorkbook?"}, {"count": 14, "text": "Fixed behavior of [#Totals] when Table does not have a Totals row and [#This Row] and [@] when rowIndex is outside the table start and stop rows.\nAdded remaining unit tests for new functionality in r1747655.\n\nreintegrated xssf_structured_references branch to trunk in r1747657 and deleted branch in r1747657.\n\nWhat's remaining before this bug can be closed:\n* unit test for XSSFTable.findColumnIndex and getters added in [1]\n* unit test that demonstrates performance need to cache XSSFWorkbook.getTable(String name), either by decreasing the visibility of this method with @Internal or protected/package-private accessibility or by adding a method so that users can force a refresh of the cache if needed.\n* performance evaluation of any explicit boxing/unboxing to see if any speed increase can be gained without adding complexity to the code.\n* any other unit tests that I missed\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFTable.java?r1=1747657&r2=1747656&pathrev=1747657", "bug_id": 57840, "attachment_id": null, "id": 191516, "time": "2016-06-10T07:55:24Z", "creator": "onealj@apache.org", "creation_time": "2016-06-10T07:55:24Z", "tags": [], "is_private": false}, {"count": 15, "attachment_id": null, "bug_id": 57840, "is_private": false, "id": 191518, "time": "2016-06-10T08:45:49Z", "creator": "apache@gagravarr.org", "creation_time": "2016-06-10T08:45:49Z", "tags": [], "text": "We do have a stated policy that an evaluator will cache for performance, and it's up to you as a user to notify it / clear it / create a new one if you go changing cells after you create the evaluator - https://poi.apache.org/spreadsheet/eval.html#Performance\n\nCould we extend / follow that principle to help with the caching/performance?"}, {"count": 16, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191519, "time": "2016-06-10T08:54:22Z", "bug_id": 57840, "creation_time": "2016-06-10T08:54:22Z", "is_private": false, "text": "(In reply to Nick Burch from comment #15)\n> We do have a stated policy that an evaluator will cache for performance \nThe problem is that Greg stated  in comment 12 that there's a performance hit if caching isn't done in XSSFWorkbook, not XSSFEvaluationWorkbook. I am comfortable with single-use caching in XSSFEvaluationWorkbook, but uncomfortable with the same code in XSSFWorkbook."}, {"count": 17, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": null, "id": 191530, "time": "2016-06-10T16:54:00Z", "bug_id": 57840, "creation_time": "2016-06-10T16:54:00Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #16)\n> (In reply to Nick Burch from comment #15)\n> > We do have a stated policy that an evaluator will cache for performance \n> The problem is that Greg stated  in comment 12 that there's a performance\n> hit if caching isn't done in XSSFWorkbook, not XSSFEvaluationWorkbook. I am\n> comfortable with single-use caching in XSSFEvaluationWorkbook, but\n> uncomfortable with the same code in XSSFWorkbook.\n\nI would also prefer not to cache in XSSFWorkbook, but a new XSSFEvaluationWorkbook is created every time a cell is evaluated, rather than reusing the same instance for all cells in a calculation/evaluation run.\n\nIn fact, the main method in XSSFEvaluationWorkbook, getFormulaTokens(EvaluationCell), creates a new instance rather than using itself!  I don't see any shared state in that class or the parent class, so that seems a likely easy fix - just use itself in the call to FormulaParser.parse() rather than a new instance.\n\nSee attached patch-57840-reuse-XSSFEvaluationWorkbook.txt for the tiny fix.  Unit tests run a little faster with it for me, too."}, {"count": 18, "tags": [], "text": "Created attachment 33937\nfix to reuse XSSFEvaluationWorkbook inside itself", "attachment_id": 33937, "bug_id": 57840, "id": 191531, "time": "2016-06-10T16:55:11Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-10T16:55:11Z", "is_private": false}, {"count": 19, "text": "(In reply to Greg Woolsey from comment #18)\n> Created attachment 33937 [details]\n> fix to reuse XSSFEvaluationWorkbook inside itself\n\nApplied in r1747754.", "bug_id": 57840, "attachment_id": null, "id": 191534, "time": "2016-06-10T17:14:56Z", "creator": "onealj@apache.org", "creation_time": "2016-06-10T17:14:56Z", "tags": [], "is_private": false}, {"count": 20, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191536, "time": "2016-06-10T18:52:04Z", "bug_id": 57840, "creation_time": "2016-06-10T18:52:04Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #14)\n> What's remaining before this bug can be closed:\n> * unit test for XSSFTable.findColumnIndex and getters added in [1]\n\nApplied in r1747762 and r1747771."}, {"count": 21, "tags": [], "text": "(In reply to Javen O'Neal from comment #14)\n> What's remaining before this bug can be closed:\n> * performance evaluation of any explicit boxing/unboxing to see if any speed\n> increase can be gained without adding complexity to the code.\n\nI found adding the VM parameter \n\n-XX:AutoBoxCacheMax=1048704 \n\nimproved performance of my slow test by 12% (can't share it yet, waiting for approval of my sanitized version of proprietary data).\n\nThat's SpreadsheetVersion.EXCEL2007.getMaxRows() + 128 (-127>0 are also cached by Integer).\n\nThat forces Integer to cache all the values up to max rows.  Obviously don't do this unless are are also setting the VM heap size larger too.  Since POI already uses lots of memory for documents, this won't be a problem for people who need it.\n\nI think with that documentation note somewhere the autoboxing issue can be considered dealt with for now.", "attachment_id": null, "bug_id": 57840, "id": 191539, "time": "2016-06-10T20:37:36Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-10T20:37:36Z", "is_private": false}, {"count": 22, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191540, "time": "2016-06-10T20:59:34Z", "bug_id": 57840, "creation_time": "2016-06-10T20:59:34Z", "is_private": false, "text": "Doing some Google searching, it looks like using new Integer(int) rather than Integer.valueOf (the explicit version of implicit auto-boxing) may use more memory due to duplicated objects wrapping primitives, but is faster because it doesn't look up lookup cached values to save this memory.\n\nDid you notice any performance difference changing the boxing on the code relating to this bug?"}, {"count": 23, "tags": [], "bug_id": 57840, "is_private": false, "text": "(In reply to Javen O'Neal from comment #22)\n> Doing some Google searching, it looks like using new Integer(int) rather\n> than Integer.valueOf (the explicit version of implicit auto-boxing) may use\n> more memory due to duplicated objects wrapping primitives, but is faster\n> because it doesn't look up lookup cached values to save this memory.\n> \n> Did you notice any performance difference changing the boxing on the code\n> relating to this bug?\n\nSetting the Integer cache size, as noted above, helped significantly.  \n\nAttached is a patch to XSSFSheet and XSSFRow, to explicitly create new Integer instances everywhere ints were autoboxed for calls to the TreeMap instances in those classes.\n\nThis adds another 4% boost over just the cache setting, it turns out.\n\nThen there is the big winner so far, reducing my test time by > 30%: \n\ncache XSSFCEvaluationSheet refs so we can cache XSSFEvaluationCell refs in a HashMap, using a custom lightweight key object (int row/col fields, using good hash practice).\n\nHashMap lookups by direct row/column (which is what we have down in the function evaluators) is way, way faster than TreeMap lookups.\n\nFor my sample, with 7,274 formula cells, most of which include one or more VLOOKUP calls to a Structured Reference with 3,726 rows, this was a huge improvement.", "id": 191546, "time": "2016-06-11T00:47:53Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-11T00:47:53Z", "attachment_id": null}, {"text": "Created attachment 33938\navoid auto-boxing ints for row/column TreeTable lookups", "tags": [], "bug_id": 57840, "attachment_id": 33938, "count": 24, "id": 191547, "time": "2016-06-11T00:48:56Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-11T00:48:56Z", "is_private": false}, {"count": 25, "text": "Created attachment 33939\nre-use XSSFEvaluationWorkbook when expanding a shared formula", "bug_id": 57840, "is_private": false, "id": 191548, "time": "2016-06-11T00:50:54Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-11T00:50:54Z", "tags": [], "attachment_id": 33939}, {"count": 26, "text": "Created attachment 33940\ncache XSSFCellEvaluator instances and look up by hash key - much faster", "bug_id": 57840, "attachment_id": 33940, "id": 191549, "time": "2016-06-11T00:52:03Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-11T00:52:03Z", "tags": [], "is_private": false}, {"count": 27, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": null, "id": 191550, "time": "2016-06-11T01:05:39Z", "bug_id": 57840, "creation_time": "2016-06-11T01:05:39Z", "is_private": false, "text": "I broke out my improvements today into individual patch diffs for easier inspection and consumption.  The last is the biggest improvement, none are huge code changes.\n\nI'm still waiting for approval on my sanitized test data file.  Hopefully I can upload that tomorrow.  Currently takes 93 seconds still to evaluate all 7,274 formula cells.\n\nI wonder if it is worth having VLOOKUP and similar range functions track previously evaluated ranges, and if the same range shows up multiple times index or hash its values for future reference?  Hmm."}, {"count": 28, "text": "Applied attachments from comment 24, 25, and 26 in r1747837, r1747840, and r1747838, respectively to trunk.\n\nThanks for the thorough profiling and simple, standalone patches! Very easy to review.", "bug_id": 57840, "is_private": false, "id": 191551, "time": "2016-06-11T02:31:50Z", "creator": "onealj@apache.org", "creation_time": "2016-06-11T02:31:50Z", "tags": [], "attachment_id": null}, {"count": 29, "tags": [], "text": "Findbugs complained [1] about explicit boxing of the Integers and not typechecking before casting. Any way we can suppress these? This SO post [2] suggests either a edu.umd.cs.findbugs.annotations.SuppressWarnings annotation or adding filters to the findbugs configuration in build.xml.\n[1] https://builds.apache.org/job/POI/1336/findbugsResult/new/\n[2] http://stackoverflow.com/questions/1829904/is-there-a-way-to-ignore-a-single-findbugs-warning", "is_private": false, "id": 191553, "creation_time": "2016-06-11T03:19:33Z", "time": "2016-06-11T03:19:33Z", "creator": "onealj@apache.org", "bug_id": 57840, "attachment_id": null}, {"count": 30, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191554, "time": "2016-06-11T03:52:16Z", "bug_id": 57840, "creation_time": "2016-06-11T03:52:16Z", "is_private": false, "text": "Nevermind. I found https://svn.apache.org/viewvc/poi/trunk/src/resources/devtools/findbugs-filters.xml\nLooks like this is the place to do it."}, {"count": 31, "tags": [], "text": "Created attachment 33941\nadds a unit test file and method that make heavy use of structured reference formulas, for performance testing\n\nMy latest patch attachment, patch-57840-heavy-structured-ref-formula-use-test.tar.gz, has my sample file (got approval for the sanitized version) and a test method to loop through and evaluate all the formula cells.\n\nIt runs successfully, but still takes a while to process the 7,274 formula cells.\n\nmost have IF() calls that execute VLOOKUP() using a structured reference to a named table with over 3,700 rows in 8 columns.  This exercises things enough it can be profiled using Java Mission Control or other tools to help find the remaining code hot spots.  The test could be augmented with an upper bound timing test if desired, to fail if the eval run takes longer than say 5 minutes (my last run was 90 sec.).  That would flag big performance regressions, like introducing a code path that misses the evaluator caches.", "attachment_id": 33941, "id": 191555, "creation_time": "2016-06-11T06:30:48Z", "time": "2016-06-11T06:30:48Z", "creator": "greg.woolsey@gmail.com", "bug_id": 57840, "is_private": false}, {"count": 32, "tags": [], "bug_id": 57840, "attachment_id": 33942, "id": 191558, "time": "2016-06-11T07:58:56Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-11T07:58:56Z", "is_private": false, "text": "Created attachment 33942\nlazily cache the cell cache key hash\n\nLast one for now - I'm still unclear exactly why, but lazy calculating then storing the hash for the evaluation cell cache key speeds things up quite a bit (10-20%).  It looks like for some uses only equals() is used on a newly created key, so avoiding the hash calculation helps, while on others (the ones stored in the map?) hashcode() is called multiple times, so caching it once calculated saves time."}, {"count": 33, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191572, "time": "2016-06-11T11:46:20Z", "bug_id": 57840, "creation_time": "2016-06-11T11:46:20Z", "is_private": false, "text": "Applied to trunk.\ncomment 31   attachment 33941   r1747878\ncomment 32   attachment 33942   r1747881\n\nI disabled the stress test since it's a demonstration of performance, not functionality. Perhaps we should have an ant target for testing the performance of POI."}, {"count": 34, "tags": [], "text": "I may still be missing something, but why not just put the table cache on the XSSFWorkbook, provide an internal \"clear cache\" method, then have the table related methods on XSSFSheet and XSSFTable trigger the cache-clear when they've done something that would invalidate it?", "is_private": false, "bug_id": 57840, "id": 191573, "time": "2016-06-11T12:11:45Z", "creator": "apache@gagravarr.org", "creation_time": "2016-06-11T12:11:45Z", "attachment_id": null}, {"count": 35, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "is_private": false, "id": 191575, "time": "2016-06-11T12:38:46Z", "bug_id": 57840, "creation_time": "2016-06-11T12:38:46Z", "text": "I think Greg's attachment 33939 patch, applied in r1747840, solve most of the caching problems."}, {"count": 36, "attachment_id": null, "bug_id": 57840, "is_private": false, "id": 191576, "time": "2016-06-12T01:45:46Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-06-12T01:45:46Z", "tags": [], "text": "TL;DR: please comment non obvious performance hacks\n\n\nAs I usually delete all *ssf bug notifications, I wasn't aware of those autoboxing changes and after findbugs complaint about them, I changed them back to the state before the changes (i.e. as there were quite a lot of svn changes and I haven't checked the history, when going through the findbugs issues)\n\nAfter I've committed the autoboxing, I thought there might be something wrong, otherwise such simple issues would have been already removed.\nSo now the code for XSSFRow is reverted again and I've added the necessary ignore rules to the findbugs-filters, but for future modifications, it would be good if you add a comment, when doing something on purpose against usual optimizations, otherwise the next patch might throw out those lines again ..."}, {"count": 37, "tags": [], "bug_id": 57840, "attachment_id": null, "text": "(In reply to Andreas Beeker from comment #36)\n> TL;DR: please comment non obvious performance hacks\n> \nYes, I agree, I should have added comments.  I'm typically verbose, but got ahead of myself this time.  I didn't notice FindBugs in the mix, but regardless, I agree, especially on large distributed projects commenting every change is a good default rule.  Thanks for taking care of this one, and the reminder.", "id": 191577, "time": "2016-06-12T05:01:32Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-12T05:01:32Z", "is_private": false}, {"count": 38, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": null, "is_private": false, "id": 191646, "time": "2016-06-14T22:51:45Z", "bug_id": 57840, "creation_time": "2016-06-14T22:51:45Z", "text": "Anything else needed I can help with before this issue is resolved?  Table reference syntax works for all my samples, and performance is now vastly improved (although still not where I think it should be, but that's a different set of bugs and patches I'll file eventually).\n\nThe FindBugs issues have been addressed, as have unit tests.\n\nPerhaps we still need some comments as to why the explicit boxing is happening, so they don't get undone?"}, {"count": 39, "tags": [], "text": "(In reply to Greg Woolsey from comment #38)\n> Perhaps we still need some comments as to why the explicit boxing is happening,\n> so they don't get undone?\nApplied in r1748479.\n\nI kept this bug open in case you had anything else you discovered from your testing. I'll close it now.\nThese changes will be available in POI 3.15 beta 2, to be released in the next couple months.\n\nI'm assuming that general formula evaluation is faster as a whole with r1747840, not just structured references.\n\nIn future bugs, we should look at:\n * comment 5: get Vaadin Spreadsheet working with POI versions higher than 3.12.\n * comment 12: When evaluating multiple formulas in a sheet, cache the formula result of cells with the same expression\n * comment 21: add to POI documentation that \"-XX:AutoBoxCacheMax=1048704\" may improve performance of working with large worksheets (perhaps this is no longer true now that we're using explicit boxing).\n * comment 23: use HashMap instead of TreeMap to hold XSSFRows and XSSFCells in XSSFSheet and XSSFRows, respectively. Obviously this would make moving rows or getting all rows in a range extremely expensive.\n * comment 34: trigger a cache reset, either with an explicit public method or implicitly with an internal method (this could make regular workbook operations slower since any cell that is part of a table or any cell in a table that references a value that changes in the workbook). Several methods in XSSFTable still use caches that may contain stale data.\n * comment 38: continue to improve formula evaluation performance", "is_private": false, "id": 191652, "creation_time": "2016-06-15T02:16:01Z", "time": "2016-06-15T02:16:01Z", "creator": "onealj@apache.org", "bug_id": 57840, "attachment_id": null}, {"count": 40, "tags": [], "text": "(In reply to Javen O'Neal from comment #39)\nThanks.  I'm moving on to the Vaadin Spreadsheet side of things for my POC, as the POI feature set and performance are acceptable at this stage.  I'll likely file new issues/patches in the future if I get the project accepted.\n\nI've submitted Vaadin bug https://dev.vaadin.com/ticket/19952 with a very significant improvement to their current formula performance, especially related to conditional formatting.\n\nThey were creating a new evaluation context for every _cell_ evaluated.  And to do it, they were inserting a new row in an existing sheet, and modifying the first cell's formula.  The row # is in the middle of the data for one of my sample workbooks, and that whole scheme was an ugly hack.\n\nI showed them how they could evaluate a formula without a Cell using an existing WorkbookEvaluator, using code I found in the unit test framework.  That, along with the cached results it could now leverage, took my sample workbook from HOURS to marginally more time than the unit test I added to POI.  I also have a patch to use POI 3.15 that I hope they take.  But that has more in it, as they have some ugly code I couldn't bear to leave alone.  I want a real-looking API along with the updated compatibility.", "attachment_id": null, "id": 191653, "creation_time": "2016-06-15T02:54:41Z", "time": "2016-06-15T02:54:41Z", "creator": "greg.woolsey@gmail.com", "bug_id": 57840, "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 32975, "attachment_id": null, "text": "The xml formatter (needed for the junitreport task) adds for each testcase all \nant properties to a xmlfile. In a project with a substantial amount of ant \nproperties this can lead to a big file. Combined with a lot of testcases this \nresults in megabytes of property information that are all the same. Since i \ndon't know anybody who actually uses this information, it might be a good idea \nto make the generation of property information by the xml formatter optional. \n\nSomething like a 'includeProperties' property or a 'verbose' property could be \nnice. It would also make the processing of the junitreport task a lot faster. \n\nJust a small example: In our project, we added a custom formatter that does the \nsame as the default xml formatter but removes the properties. It brings the \noverall size of the test.xml files back from 17 meg to under 1 megabyte. Xslt \ntransformtion is ofcourse a lot faste", "id": 69295, "time": "2005-01-06T22:32:10Z", "creator": "janssk1@hotmail.com", "creation_time": "2005-01-06T22:32:10Z", "is_private": false}, {"count": 1, "tags": [], "creator": "kevin.jackson@it.fts-vn.com", "attachment_id": 14310, "id": 71153, "time": "2005-02-18T05:22:29Z", "bug_id": 32975, "creation_time": "2005-02-18T05:22:29Z", "is_private": false, "text": "Created attachment 14310\nprevents XMLJUnitFormatter from outputting properties unless the verbose flag is set\n\neg:\n\n<junit printsummary=\"yes\" fork=\"yes\" haltonfailure=\"no\">\n  <classpath>\n    <pathelement location=\"${build.dir}\" />\n    <pathelement location=\"${lib.dir}/junit/junit.jar\" />\n  </classpath>\n  <formatter type=\"xml\" usefFile=\"true\" verbose=\"false\"/>\n\t\t\t\n</junit>\n\n\ntested on WindowsXP with JDK1.5.0, using HEAD.\ttested with fork=\"yes\" and\nfork\"no\".  Under test, brought the file size of the XML generated down by 75%\n(from 8Kb -> 2Kb).  Sorry no JUnit tests for this (ironically I suppose)"}, {"count": 2, "tags": [], "bug_id": 32975, "attachment_id": null, "text": "On a quick look at the patch, I noticed one problem.\nThe interface \"JUnitResultFormatter\" has been extended\nwith one new method (setVerbose). As JUnitResultFormatter\nis a public interface, and is the way for 3'th party formatters\nto be added to ant, the change is not backward compatible.", "id": 71155, "time": "2005-02-18T10:30:33Z", "creator": "peterreilly@apache.org", "creation_time": "2005-02-18T10:30:33Z", "is_private": false}, {"count": 3, "tags": [], "creator": "kevin.jackson@it.fts-vn.com", "text": "Damn! Sorry about that.\n\nCan you suggest a way to refactor the code, I'd be willing to do the work, but I\ncan't see how to make this change right now (brain freeze).", "id": 71156, "time": "2005-02-18T10:42:01Z", "bug_id": 32975, "creation_time": "2005-02-18T10:42:01Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 32975, "attachment_id": null, "text": "I can think of using ant-types\n  <formatter usefile=\"yes\">\n      <junit.xmlformatter verbose=\"yes\"/>\n  </formatter>\n\nChange to Formatter.java:\n    private JUnitResultFormatter  byReflection;\n    public void add(JUnitResultFormatter byReflection) {\n        this.byReflection = byReflection;\n    }\n    \n    /**\n     * @since Ant 1.6\n     */\n    JUnitResultFormatter createFormatter(ClassLoader loader)\n        throws BuildException {\n        JUnitResultFormatter r = byReflection;\n        if (byReflection == null) {\n         ....\n         }\n                }\n\n        if (useFile && outFile != null) {\n            try {\n                out = new FileOutputStream(outFile);\n            } catch (java.io.IOException e) {\n                throw new BuildException(e);\n            }\n        }\n        r.setOutput(out);\n        return r;\n}\n* not tested completly *\n", "id": 71217, "time": "2005-02-18T19:08:17Z", "creator": "peterreilly@apache.org", "creation_time": "2005-02-18T19:08:17Z", "is_private": false}]
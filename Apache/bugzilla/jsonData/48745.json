[{"count": 0, "tags": [], "text": "Created attachment 24988\nGerman hyphenation file\n\nAs already known, the hyphenation library has some problems with patterns who contain numbers like 7 or 8. I realized that HyphenationTree.unpackValues(int) extracts the characters ( and ' for these values. They differ by exactly 16 character positions in ASCII table. Following code changes transforms these characters into the right ones:\n\n    protected String unpackValues(int k) {\n      StringBuilder buf = new StringBuilder();\n        byte v = this.vspace.get(k++);\n        while (v != 0) {\n            char c = (char)((v >>> 4) - 1 + '0');\n            if (!Character.isDigit(c)) {\n              /* #21219: Bug fixed which sometimes occurs. Just\n               * shift the ASCII position by a correction offset. */\n              c += 16;\n            }\n            buf.append(c);\n            c = (char)(v & 0x0f);\n            if (c == 0) {\n                break;\n            }\n            c = (char)(c - 1 + '0');\n            if (!Character.isDigit(c)) {\n              /* #21219: Bug fixed which sometimes occurs. Just\n               * shift the ASCII position by a correction offset. */\n              c += 16;\n            }\n            buf.append(c);\n            v = this.vspace.get(k++);\n        }\n        return buf.toString();\n    }\n\nBut there's another problem which could be experienced in languages with common occurences of these two digits in patterns. Please compare the hyphenation result of the German word, \"Flickenteppich\", (Pattern: .fli7ck8en7tep7pic8h) with OpenOffice's result. OpenOffice doesn't generate a hyphenation like \"Flick-enteppich\". But FOP does it, even with the cheap bug fix above. There's an explicit prohibition at this word's position by the concerning pattern. Other implementations of Liang's algorithm do notice this rule (see http://www.davidashen.net/texhyphj.html or LibHnj used by OpenOffice).\n\nMy question is: Is this issue known? If yes, are there any existing trackers concerning this bug? When will this be fixed?\n\nBest regards\n\n\nPAX", "is_private": false, "bug_id": 48745, "id": 134512, "time": "2010-02-15T12:10:06Z", "creator": "onkelpax-fop@yahoo.de", "creation_time": "2010-02-15T12:10:06Z", "attachment_id": 24988}, {"count": 1, "tags": [], "creator": "cvillegas@apache.org", "attachment_id": 24989, "is_private": false, "id": 134519, "time": "2010-02-15T15:17:32Z", "bug_id": 48745, "creation_time": "2010-02-15T15:17:32Z", "text": "Created attachment 24989\nfix unpacking of hyphenation pattern values\n\nThanks to PAX for pointing out the problem area. Not only unpackValues but getValues also needed a similar fix. The proper fix is to mask the lower 4 bits of the packed value after shifting.\nThe example mentioned in the report now works, I think."}, {"count": 2, "tags": [], "text": "resetting P2 open bugs to P3 pending further review", "is_private": false, "id": 157409, "creator": "gadams@apache.org", "time": "2012-04-07T01:42:36Z", "bug_id": 48745, "creation_time": "2012-04-07T01:42:36Z", "attachment_id": null}]
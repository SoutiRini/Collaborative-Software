[{"count": 0, "tags": [], "bug_id": 3561, "is_private": false, "text": "The following program demonstrates how ORO runs into an endless recursion and thus a stack overflow:--- SNIP ---import org.apache.oro.text.*;import org.apache.oro.text.regex.*;class OROTest {    public static void main(String [] args) throws MalformedPatternException {        String pat = \"'([^'\\\\\\\\]+|\\\\\\\\?)+'\";        PatternCompiler compiler = new Perl5Compiler();        Pattern pattern = compiler.compile(pat);        PatternMatcherInput input = new PatternMatcherInput(\"don't do that\");        PatternMatcher matcher = new Perl5Matcher();        matcher.contains(input, pattern);    }}--- SNIP ---Best regards,\tRobert Lichtenberger", "id": 5410, "time": "2001-09-12T00:28:29Z", "creator": "tanis@sport1.uibk.ac.at", "creation_time": "2001-09-12T00:28:29Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 3561, "attachment_id": 527, "is_private": false, "id": 5411, "time": "2001-09-12T00:38:25Z", "creator": "tanis@sport1.uibk.ac.at", "creation_time": "2001-09-12T00:38:25Z", "text": "Created attachment 527\nAlso works with the pattern inside this .java - file."}, {"count": 2, "tags": [], "bug_id": 3561, "attachment_id": null, "text": "The problem is really in the pattern, not so much in the matcher.  You are\nusing patterns that match the empty string, which will match an infinite number\nof times when used in conjunction with a repetition operator.  However, it\nis undesirable to repeatedly match the empty string as the result of the\nsame null matching construct, so we'll try to do\nsomething about this in a later version as we push toward Perl 5.6 \ncompatibility.  The solution for now is to be more careful about writing\npatterns (how you write a Perl pattern can have an enormous impact on its\nmatching efficiency in both Perl and jakarta-oro).  If you\nreally don't want to think about how the NFA represented by a Perl regular\nexpression is interpreted, then put the empty string matching constructs\nas far to the left as possible.  In other words, write\n\"'(\\\\\\\\?|[^'\\\\\\\\]+)+'\"\ninstead of\n\"'([^'\\\\\\\\]+|\\\\\\\\?)+'\"\n\nHowever, these two patterns do have slightly different meanings and you may\nhave to reduce the expression to a more efficient equivalent one (see\ndiscussion of \"first\" and \"forward\" and NFA reduction in Aho, Sethi, and\nUllman's \"Compilers: Principles, Techniques, and Tools\" or even \"Mastering\nRegular Expressions\" by Jeff Friedl)\n", "id": 5417, "time": "2001-09-12T06:55:03Z", "creator": "dfs@apache.org", "creation_time": "2001-09-12T06:55:03Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 3561, "is_private": false, "id": 5419, "attachment_id": null, "creator": "dfs@apache.org", "creation_time": "2001-09-12T07:47:47Z", "time": "2001-09-12T07:47:47Z", "text": "After further investigation, I have confirmed that Perl5.003_07 exhibits the\nexact same behavior.  Perl 5.6 does not.  Therefore, we will definitely\nchange the behavior as part of our Perl 5.6 compatibility initiative.\n"}, {"count": 4, "tags": [], "bug_id": 3561, "attachment_id": null, "text": "*** Bug 3744 has been marked as a duplicate of this bug. ***", "id": 5827, "time": "2001-09-20T07:35:32Z", "creator": "dfs@apache.org", "creation_time": "2001-09-20T07:35:32Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 3561, "attachment_id": null, "is_private": false, "id": 82242, "time": "2005-11-08T20:14:09Z", "creator": "dfs@apache.org", "creation_time": "2005-11-08T20:14:09Z", "text": "*** Bug 37382 has been marked as a duplicate of this bug. ***"}]
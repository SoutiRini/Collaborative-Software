[{"count": 0, "attachment_id": null, "creator": "pierrick.brihaye@free.fr", "is_private": false, "id": 61931, "time": "2004-08-13T07:29:35Z", "bug_id": 30643, "creation_time": "2004-08-13T07:29:35Z", "tags": [], "text": "Hi,\n\nThe org.apache.batik.gvt.font.UnicodeRange class isn't compliant with the CSS\nspecs :\n\nhttp://www.w3.org/TR/REC-CSS2/fonts.html#descdef-unicode-range\n\nIt looks like it is only capable of dealing with U+20A7, U+215? or U+AC00-D7FF\nsyntaxes. Useful comma separated ones are not taken into account.\n\nFurthermore, shouldn't org.apache.batik.gvt.font.KerningTable use it since Java\nis a strong typed language ?\n\npublic float getKerningValue(int glyphCode1, \n\t\t\t\t int glyphCode2,\n                                 UnicodeRange glyphUnicode1, \n\t\t\t\t UnicodeRange glyphUnicode2) {\n\nrather than the current :\n\npublic float getKerningValue(int glyphCode1, \n\t\t\t\t int glyphCode2,\n                                 String glyphUnicode1, \n\t\t\t\t String glyphUnicode2) {\n\nThe like for org.apache.batik.gvt.font.GVTFontFace, which misses a unicodeRange\nproperty as well as some of the attributes defined by the specs.\n\nThis can be discussed though...\n\nCheers,\n\np.b."}, {"count": 1, "tags": [], "bug_id": 30643, "attachment_id": null, "text": "The UnicodeRange class really only handles a single contigous range.\nThis is why the Kern class holds a list of them, and the kernBridge\nhandles parsing the comma seperated part of the unicode range class.\nI've added some documentation to make this clearer.\n\nAs far as the comment on using a unicode range vs a string for the\nglyphUnicode, I think you are missunderstanding the meaning of the\ncall.  You pass in the unicode string that the glyph corresponds to\nso a string is not really silly.  The only change you might make\nis to replace it with a single char or int (which is the first char\nin the string) since this is all that is used from the string for \nkern matching purposes.", "id": 62647, "time": "2004-08-28T16:57:11Z", "creator": "deweese@apache.org", "creation_time": "2004-08-28T16:57:11Z", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "pierrick.brihaye@free.fr", "is_private": false, "id": 62651, "time": "2004-08-28T17:54:22Z", "bug_id": 30643, "creation_time": "2004-08-28T17:54:22Z", "tags": [], "text": "Well,\n\n1) SVGKernElementBridge has one functionnal purpose : construct a Kern object.\nCurrently, it also parses the attributes in order to construct such an object.\n\n2) Kern has 3 purposes : see whether the glyphs match and get the adjustement\nvalue. Currently, it also maintains arrays of Unicode(sub)Ranges and GlyphCodes.\n\nI was just wondering why those classes maintain such arrays when a lot of things\ncould be done by a redesigned UnicodeRange class which would be able to :\n\n1) parse XML content in order to construct memory representations. On this\ntopic, I wonder what should been done with invalid content...\n2) manage \"sub-ranges\" itself\n3) do the useful job by its valuable \"contains\" method :-)\n\nNo offence : it's just a question of point of  about code design :-) But, true,\nthe \"UnicodeRange\" name looks to me somewhat misleading (I would have expected a\njava implementation of the CSS concept).\n\nAs for the call, I now more understand given your explanations. I just suggested\nit in order to enforce some constraints on the XML content.\n\nThanks for the response anyway.\n\nCheers,\n\np.b.\n\n\n\n"}]
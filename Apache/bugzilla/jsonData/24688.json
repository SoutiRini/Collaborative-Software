[{"count": 0, "tags": [], "creator": "jerry_dykstra@bankone.com", "attachment_id": null, "text": "We have written a custom jdbc appender which uses the LocationInfo object to \nretrieve the method name and the class name of the logging statement.  We are \nusing version 1.2.8 of log4j on a Websphere 4.x system.  If the stack trace \nshows compiled code, the method name in the LocationInfo is ending up to \nbe \"java\" and the class name contains the class, method name, and part of the \nfile name information.  Looking through the code in LocationInfo, it appears \nthat the problem is that the Websphere stack trace is formatted in an \nunexpected way.  It contains an additional set of parenthesis which the code in \ngetMethodName and getClassName is assuming is the start of the module name and \nline number, but actually is pointing to the words \"Compiled Code\".  I realize \nthat this is very Websphere specific, but I thought I would report it for \nothers who may encounter this problem.  The stack trace from Websphere looks \nlike this:\ncom.bankone.cca.library.exception.NotFoundException: Service transaction \nrecords not found\n\tat \ncom.bankone.cca.component.statement.service.impl.TransactionStatementRsMapper.ge\ntTransactionProductions(TransactionStatementRsMapper.java(Compiled Code))\n\tat \ncom.bankone.cca.component.statement.service.impl.TransactionStatementRsMapper.cr\neate(TransactionStatementRsMapper.java:46)\n\tat \ncom.bankone.cca.component.statement.service.impl.RetrieveTransactionStatementRsM\napper.getResponse(RetrieveTransactionStatementRsMapper.java:62)\n\tat \ncom.bankone.cca.component.statement.service.impl.StatementProcess.getServiceTran\nsactions(StatementProcess.java:572)\n\tat \ncom.bankone.cca.component.statement.service.StatementManager.getServiceTransacti\nons(StatementManager.java:323)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat \ncom.bankone.cca.component.statement.service.StatementTransactionManager.executeT\nransaction(StatementTransactionManager.java(Compiled Code))\n\tat \ncom.bankone.cca.component.statement.service.StatementTransactionManager.executeC\nurrentTransaction(StatementTransactionManager.java(Compiled Code))\n\tat \ncom.bankone.cca.struts.controller.statements.StatementsSelectAction.doExecute\n(StatementsSelectAction.java(Compiled Code))\n\tat com.bankone.cca.struts.controller.BaseAction.execute\n(BaseAction.java:77)\n\tat org.apache.struts.action.RequestProcessor.processActionPerform\n(RequestProcessor.java:480)\n\tat org.apache.struts.action.RequestProcessor.process\n(RequestProcessor.java:274)\n\tat org.apache.struts.action.ActionServlet.process\n(ActionServlet.java:1420)\n\tat org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:502)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java(Compiled \nCode))\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java(Compiled \nCode))\n\tat com.ibm.servlet.engine.webapp.StrictServletInstance.doService\n(ServletManager.java(Compiled Code))\n\tat com.ibm.servlet.engine.webapp.StrictLifecycleServlet._service\n(StrictLifecycleServlet.java(Compiled Code))\n\tat com.ibm.servlet.engine.webapp.IdleServletState.service\n(StrictLifecycleServlet.java(Compiled Code))\n\tat com.ibm.servlet.engine.webapp.StrictLifecycleServlet.service\n(StrictLifecycleServlet.java(Inlined Compiled Code))\n\tat com.ibm.servlet.engine.webapp.ServletInstance.service\n(ServletManager.java(Compiled Code))\n\tat com.ibm.servlet.engine.webapp.ValidServletReferenceState.dispatch\n(ServletManager.java(Compiled Code))\n\tat com.ibm.servlet.engine.webapp.ServletInstanceReference.dispatch\n(ServletManager.java(Inlined Compiled Code))\n\tat \ncom.ibm.servlet.engine.webapp.WebAppRequestDispatcher.handleWebAppDispatch\n(WebAppRequestDispatcher.java(Compiled Code))\n\tat com.ibm.servlet.engine.webapp.WebAppRequestDispatcher.dispatch\n(WebAppRequestDispatcher.java(Compiled Code))\n\tat com.ibm.servlet.engine.webapp.WebAppRequestDispatcher.forward\n(WebAppRequestDispatcher.java(Compiled Code))\n\tat com.ibm.servlet.engine.srt.WebAppInvoker.doForward\n(WebAppInvoker.java:134)\n\tat com.ibm.servlet.engine.srt.WebAppInvoker.handleInvocationHook\n(WebAppInvoker.java:239)\n\tat com.ibm.servlet.engine.invocation.CachedInvocation.handleInvocation\n(CachedInvocation.java:67)\n\tat com.ibm.servlet.engine.invocation.CacheableInvocationContext.invoke\n(CacheableInvocationContext.java:106)\n\tat com.ibm.servlet.engine.srp.ServletRequestProcessor.dispatchByURI\n(ServletRequestProcessor.java:154)\n\tat com.ibm.servlet.engine.oselistener.OSEListenerDispatcher.service\n(OSEListener.java:315)\n\tat com.ibm.servlet.engine.http11.HttpConnection.handleRequest\n(HttpConnection.java:60)\n\tat com.ibm.ws.http.HttpConnection.readAndHandleRequest\n(HttpConnection.java(Compiled Code))\n\tat com.ibm.ws.http.HttpConnection.run(HttpConnection.java(Compiled \nCode))\n\tat com.ibm.ws.util.CachedThread.run(ThreadPool.java:138)\n\n\nThe class name that is in LocationInfo ends up being \ncom.bankone.cca.component.statement.service.impl.TransactionStatementRsMapper.ge\ntTransactionProductions(TransactionStatementRsMapper", "id": 47315, "time": "2003-11-13T21:00:18Z", "bug_id": 24688, "creation_time": "2003-11-13T21:00:18Z", "is_private": false}, {"count": 1, "tags": [], "text": "Stab in the dark here, but would this be due to a call to a native library at \nthat point in the code?", "attachment_id": null, "bug_id": 24688, "id": 47316, "time": "2003-11-13T21:06:48Z", "creator": "paul.smith@lawlex.com.au", "creation_time": "2003-11-13T21:06:48Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 24688, "attachment_id": null, "text": "I believe that the Compiled Code has been JITted.", "id": 47317, "time": "2003-11-13T21:22:04Z", "creator": "jerry_dykstra@bankone.com", "creation_time": "2003-11-13T21:22:04Z", "is_private": false}, {"count": 3, "tags": [], "creator": "paul.smith@lawlex.com.au", "attachment_id": null, "is_private": false, "id": 47318, "time": "2003-11-13T21:27:43Z", "bug_id": 24688, "creation_time": "2003-11-13T21:27:43Z", "text": "Being compiled shouldn't affect that though. Actually I hawe seen the Sun JDK on \nLinux decide that it can't resolve some line numbers in a stack trace from time \nto time....\n\nI'll stake a look at the code and maybe try and come up with a test case."}, {"count": 4, "tags": [], "text": "Either way, this is not a log4j bug.", "attachment_id": null, "bug_id": 24688, "id": 68509, "time": "2004-12-14T21:16:44Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-14T21:16:44Z", "is_private": false}]
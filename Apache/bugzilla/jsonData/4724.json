[{"count": 0, "tags": [], "bug_id": 4724, "attachment_id": null, "id": 7669, "time": "2001-11-07T15:07:29Z", "creator": "davidw@apache.org", "creation_time": "2001-11-07T15:07:29Z", "is_private": false, "text": "web::putxfile: eval all file even in case of an error in one block"}, {"count": 1, "tags": [], "bug_id": 4724, "attachment_id": null, "id": 8807, "time": "2001-12-12T01:27:38Z", "creator": "davidw@apache.org", "creation_time": "2001-12-12T01:27:38Z", "is_private": false, "text": "If there is an error in the code, how is it expected to continue functioning? \nIt will most likely lead to more errors or incorrect output."}, {"count": 2, "tags": [], "bug_id": 4724, "attachment_id": null, "id": 11021, "time": "2002-02-21T12:34:03Z", "creator": "davidw@apache.org", "creation_time": "2002-02-21T12:34:03Z", "is_private": false, "text": "According to Ronnie Brunner:\n\n>         Decide what to do about attempting to catch blocks of code in\n>         'putx'.\n\nAfter thinking about it for a while, I tend to agree with David: let\nthe developer care. if he doesn't want a code block to crash, he's got\nto catch it and react properly {if {[catch {do somthing stupid}]}\n{web::put \"I'm sorry\"}}. -> putx should just normaly return as soon as\nthere is an uncaught error."}]
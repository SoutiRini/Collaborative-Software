[{"count": 0, "attachment_id": null, "bug_id": 14647, "is_private": false, "id": 26506, "time": "2002-11-18T19:35:30Z", "creator": "stafforj@core.afcc.com", "creation_time": "2002-11-18T19:35:30Z", "tags": [], "text": "apachectl does only a \"kill -0\" against the PID in the pid file when attempting\nto determine if the server is running. It does not check to see if the PID\nbelongs to a running httpd process. After a reboot, my web server did not start\nbecause the pid that the httpd process had before the reboot was in use by\nanother system process. I had to manually remove the httpd.pid file and then\nstart apache."}, {"count": 1, "tags": [], "bug_id": 14647, "attachment_id": null, "text": "\nI just got burned by this one.  I'm surprised it hasn't generated more attention.\n\nIn my case the apache instance (one of several) had been started at system\nstartup with a low numbered PID.  The server had crashed, leaving the pid file\nin place.  It's fairly unsurprising that on the subsequent startup another\nserver process was using the same low numbered PID.\n\nGiven several apache instances, it's not always going to be possible to rely on\nthe PID in the PIDFILE identifying a running httpd process.  Checking the\ncreation time of the PID file against the creation time of the identified\nprocess might be a good approach.\n\nWiping out PID files early in a boot sequence is probably a helpful workaround\nand will prevent most problems.  This is necessarily outside the scope of the\napache source code.\n\n", "id": 57683, "time": "2004-05-20T05:36:02Z", "creator": "andrew@scoop.co.nz", "creation_time": "2004-05-20T05:36:02Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 14647, "is_private": false, "id": 67345, "attachment_id": null, "creator": "jorton@redhat.com", "creation_time": "2004-11-22T15:56:48Z", "time": "2004-11-22T15:56:48Z", "text": "Determining the creation time of a process would be a portability nightmare.  I\nreally can't see what httpd behaviour it is desirable to change here.  It's\ngenerally desirable to do the do the kill(pid, 0) check at startup against the\nold pid.  And as Andrew says the general workaround is to put the pidfile\nsomewhere where your initscripts will delete it at boot.  rc.sysinit deletes\n/var/run/* with the Linux initscripts, for instance."}]
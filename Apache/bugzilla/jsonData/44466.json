[{"count": 0, "tags": [], "bug_id": 44466, "text": "XMLmind XMLEditor is using custom URI resolver for FOPFactory, for all resolved URIs it is returning \nSAXSource rather than StreamSource.\nBefore 1.3 and latest FOP changes, images were loaded properly, but with latest trunk of FOP I started \ngetting: [FOP Error] No ImagePreloader for ... and then Cannot open image (because URI was cached as \nwrong).\n\nAfter hours of digging I found out that URI resolver of XMLmind is returning always SAXSource, while src/java/org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext.java @ newSource \nexpects StreamSource. Also image loaders work only with ImageSource, that was created only from \nStreamSource, with generic Source they fail.\n\nI'm attaching patch for AbstractImageSessionContext.java that checks also for SAXSource and allows \nusing its inputSource's byte stream.\n\nThis makes XMLmind FOP addon again usable with latest FOP trunk.", "id": 113971, "attachment_id": null, "creator": "ono@java.pl", "creation_time": "2008-02-21T11:09:04Z", "time": "2008-02-21T11:09:04Z", "is_private": false}, {"count": 1, "tags": [], "creator": "ono@java.pl", "text": "Created attachment 21575\nPatch that detects if source is SAXSource and uses its stream.", "id": 113972, "time": "2008-02-21T11:10:16Z", "bug_id": 44466, "creation_time": "2008-02-21T11:10:16Z", "is_private": false, "attachment_id": 21575}, {"count": 2, "tags": [], "creator": "max@berger.name", "text": "Adam,\n\njust to verify: Does xmleditor ALWAYS resolve to a SAXSource? I can understand\nthis on  xml-formatted images (such as SVG and MathML), but also for PNG, JPEG,\netc.? \n\nBecause if that is the case then the real question is if this should be changed\nin xmleditor rather than xmlgraphics: a SAXSource for JPEG images makes no\nsense, where as support for SVG / MathML could be greatly simplified if the SAX\nsource is used directly. \n\nMax", "id": 114002, "time": "2008-02-21T23:28:07Z", "bug_id": 44466, "creation_time": "2008-02-21T23:28:07Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 44466, "text": "Yes XMLMind is ALWAYS resolving to SAXSource, this is done because of some good reason stated in the \nsource code :) I've forwarded this bug report to them.\n\nHowever I can understand this some regression in here anyhow, because with FOP 0.94 and XMLGraphics \n1.2 it was working fine even with this SAXSource, but now it doesn't. So IMHO now matter how the \nunderlaying code is written XMLGraphics shouldn't break with new release something that was working \nOK. (Also I think sthing is wrong with Java StreamSource & SAXSource inheritance, I'm not regular Java \nprogrammer though)", "id": 114004, "attachment_id": null, "creator": "ono@java.pl", "creation_time": "2008-02-22T01:14:48Z", "time": "2008-02-22T01:14:48Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 44466, "attachment_id": null, "text": "Thanks for the patch, Adam. I have taken a slightly different approach than\nyou've taken in your patch to also properly handle Readers in SAXSources, for\nexample. I extended the helper methods in ImageUtil so they cover SAXSource,\ntoo. Making use of that in AbstractImageSessionContext even helped simplify the\ncode. I've also added test cases for all sorts of scenarios (StreamSource,\nSAXSource, DOMSource) so we're sure that the image plug-ins can deal with\nwhatever Source subclass they want.\n\nChange in SVN:\nhttp://svn.apache.org/viewvc?rev=630423&view=rev", "id": 108927, "time": "2008-02-23T03:24:41Z", "creator": "jeremias@apache.org", "creation_time": "2008-02-23T03:24:41Z", "is_private": false}]
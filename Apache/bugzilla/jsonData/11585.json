[{"count": 0, "tags": [], "bug_id": 11585, "text": "If you are using the mulitline replacement like:\n\n<replace \n  file=\"${workdir}/ejb-basis/conf/default/jboss.jcml\" summary=\"true\">\n  <replacetoken><![CDATA[<!-- BINDADDRESS -->]]></replacetoken>\n  <replacevalue><![CDATA[<attribute\nname=\"BindAddress\">${jbossHostname}</attribute>]]></replacevalue>\n</replace>\n\nThe property jbossHostname is ignored.\n\nWhen you look at Replace.java you can see why in line 123-127:\n\n        public void addText(String val) {\n           buf.append(val);\n        }\n\nit should be replace with:\n        public void addText(String val) {\n           buf.append( project.replaceProperties( val ) );\n        }\n\nAnd usage of final would hurt here:\n        public void addText( final String val ) {\n           buf.append( project.replaceProperties( val ) );\n        }\n\nAfter this change the replace-multiline works as expected (at least as I\nexepected) ;).\n\nTake care,\n\nAndre", "id": 20837, "time": "2002-08-09T09:47:41Z", "creator": "andre.anneck@spmtechnologies.com", "creation_time": "2002-08-09T09:47:41Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 11585, "text": "aeh... I intended to say:\n\"Use of final keyword would _not_ hurt\" \nSorry for the lack of attention.\n", "id": 20841, "time": "2002-08-09T10:12:14Z", "creator": "andre.anneck@spmtechnologies.com", "creation_time": "2002-08-09T10:12:14Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 11585, "is_private": false, "text": "I would go for closing this bug report as a WONTFIX, because CDATA elements \nshould be left essentially untouched.\nThoughts ?", "id": 41848, "time": "2003-07-31T13:31:06Z", "creator": "antoine@apache.org", "creation_time": "2003-07-31T13:31:06Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "is_private": false, "id": 41849, "time": "2003-07-31T13:44:40Z", "bug_id": 11585, "creation_time": "2003-07-31T13:44:40Z", "text": "No, I think it is a bug. After all we don't know at the task level whether a\nCDATA section was used or not (nor should we). Consider this\n\n<project name=\"11585\" default=\"test\">\n  <target name=\"test\">\n    <property name=\"jbossHostname\" value=\"bar\"/>\n    <echo><![CDATA[<attribute\nname=\"BindAddress\">${jbossHostname}</attribute>]]></echo>\n  </target>\n</project>\n\nThe replacement happens here. The only question is whether to preserve the\ncurrent incorrect behaviour for backward compatibility and enable the correct\nbehaviour with an attribute or just fix it. I vote to just fix it."}, {"count": 4, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "is_private": false, "id": 41851, "time": "2003-07-31T14:02:36Z", "bug_id": 11585, "creation_time": "2003-07-31T14:02:36Z", "text": "In this case, this would be a bug in the core of ant, not just Replace.\nI am just not sure which class should handle this."}, {"count": 5, "attachment_id": null, "creator": "conor@apache.org", "text": "The problem is to decide where responsibility is. Currently not many tasks\naccept content in tags (but there are enough). Most of those do explicit\nreplacement. \n\nE.g. in <echo>\n\nmessage += getProject().replaceProperties(msg);\n\nI think it is wrong to expect each task to do that. I would move this into the\nProjectHelper.addText static method. It is a slight backward compatibility issue\nbut I think it would be a good change to make.", "id": 41852, "time": "2003-07-31T14:15:36Z", "bug_id": 11585, "creation_time": "2003-07-31T14:15:36Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": null, "is_private": false, "id": 41854, "time": "2003-07-31T14:21:17Z", "bug_id": 11585, "creation_time": "2003-07-31T14:21:17Z", "text": "Not quite, The addText() doc explicitely says that it\ndoes not do property replacement. This is usefully\nfor some tasks (? well..... I am not sure which), most\ntasks (echo, exit, input, sql, concat from a quick grep)\nuse getProject().replaceProperties(text) on the text.\n"}, {"text": "How about a new introspection point then, addReplacedText() or whatever. It\nwould cut out the needless duplication and mean people do not have to remember\nto do it - as someone has in this case :-) Dunno.", "tags": [], "bug_id": 11585, "is_private": false, "count": 7, "id": 41858, "time": "2003-07-31T14:46:48Z", "creator": "conor@apache.org", "creation_time": "2003-07-31T14:46:48Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 11585, "text": "I would prefer not to add a new introspection point and take a small risk with \nbackward compatibility.", "id": 41869, "time": "2003-07-31T16:03:55Z", "creator": "antoine@apache.org", "creation_time": "2003-07-31T16:03:55Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "creator": "stevel@apache.org", "text": "This is a troublespot. Most tasks that dont expand properties inline do it\nbecause they are broken. Moving to expansion runs the risk of breaking\nsomething. I remember how before I could fix <telnet> to expand, we had to\nchange property expansion ant-wide so that single $ signs werent being autostripped.\n\n1. Are there any use cases we can imagine where people dont want property expansion?\n\n2. Do any well known ant or third party tools do it?\n\n3. if we go to auto-expansion, and some third party task retains its\nreplaceProperties call, what are the consequences. \n\nPoint (3) worries me. We could break 3rd party tasks between ant versions.\nBetter, perhaps, to have a new introspection point.\n", "id": 41885, "time": "2003-07-31T18:37:34Z", "bug_id": 11585, "creation_time": "2003-07-31T18:37:34Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "is_private": false, "id": 41889, "time": "2003-07-31T18:54:52Z", "bug_id": 11585, "creation_time": "2003-07-31T18:54:52Z", "text": "OK - it sounds that the new introspection point is more reasonable.\nI can imagine a use case where one would not want auto expansion.\n\nIt would be if you are generating another build.xml file from your build.xml, \nand you have a task writexml\n<writexml><![CDATA[<echo>${build.dir}</echo>]]></writexml> \nthen precisely you do not want to expand this ${build.dir}\n"}, {"count": 11, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 41930, "time": "2003-08-01T06:36:09Z", "bug_id": 11585, "creation_time": "2003-08-01T06:36:09Z", "text": "Maybe we should be having this discussion on the dev list?\n\nAnyway, there are three potential problems I see if we change addText to\nauto-expand properties:\n\n(1) is what Antoine writes.  Even though I think it's unlikely, it can happen.\n\n(2) Tasks that perform property expansion themselves will now double-expand\n    properties.  If the value of a is ${b} (for whatever reason) then\n    <echo>${a}</echo> would suddenly resolve b if possible.  We would certainly\n    change all our own tasks, but what about third-party tasks.  I don't think\n    this is a high risk either, as the result will only change if b has been\n    set, but something to think of.\n\n(3) My most important issue:  If I write a task that is supposed to work with\n    Ant 1.5 as well as 1.6 and I want property expansion for nested text, I'll\n    either have to write two versions of it or detect Ant's version at run time\n    to know whether I need to expand the properties myself.  This is rather\n    ugly.\n\nIf we add a new introspection point we should probably give the new method\nprecedence over addText so that a task can have both - expand properties in\naddText and not do so in the new method.  That way you can easily have\nbackwards compatibility, even at the API level of our tasks."}, {"count": 12, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": 8724, "is_private": false, "id": 46244, "time": "2003-10-24T14:59:09Z", "bug_id": 11585, "creation_time": "2003-10-24T14:59:09Z", "text": "Created attachment 8724\npatch to provide new addExpandedText(String) introspection method"}, {"count": 13, "tags": [], "bug_id": 11585, "is_private": false, "text": "a couple of points.\n* We may as well make Andre's change anyway if we are going to support\n  replace properties for the replace inner task\n\n* I am not too sure it is a good idea to provide the new introspection\n  method. It may be better to get always do the replace properties\n  before addText(String) is called. An \"ugly\" solution to allow\n  thirdparty tasks to work for both ant 1.7 and before could be\n  to provide a \"ant.addtext.replaceproperties\" property.\n  \n  void addText(String x) {\n    if (getProject().getProperty(\"ant.addtext.replaceproperties\") == null) {\n        x = getProject().replaceProperties(x);\n    }\n    ...\n  }\n", "id": 46245, "time": "2003-10-24T15:21:31Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-10-24T15:21:31Z", "attachment_id": null}, {"count": 14, "attachment_id": null, "creator": "bodewig@apache.org", "text": "there is an option that controls expansion now.\n\nsvn revision 723790", "id": 123128, "time": "2008-12-05T09:04:18Z", "bug_id": 11585, "creation_time": "2008-12-05T09:04:18Z", "tags": [], "is_private": false}, {"text": "*** Bug 47155 has been marked as a duplicate of this bug. ***", "tags": [], "bug_id": 11585, "is_private": false, "count": 15, "id": 126833, "time": "2009-05-07T01:30:53Z", "creator": "bodewig@apache.org", "creation_time": "2009-05-07T01:30:53Z", "attachment_id": null}]
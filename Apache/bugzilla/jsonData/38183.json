[{"attachment_id": null, "tags": [], "bug_id": 38183, "text": "As discussed and promised some time ago, I finally managed to get everything\ntogether and submit a patch to remove Batik's mandatory dependency on\nSun-private classes in its codec classes. This patch introduces adapter classes\nto decouple the image decoding and encoding from the actual codec library used.\nThe \"internal codecs\" as I called them are moved to a new source directory\n(sources-internal-codec), so their compilation can be made optional in an IDE\nand in the Ant build. In addition to adapter classes handling image loading and\nsaving using these internal codecs, I've written implementations that use the\nImage I/O API that is available under JDK 1.4 (and later) and in GNU Classpath.\nPlease note: So far I have not done any tests with GNU Classpath (GCJ, IKVM or\nwhatever) for Batik.\n\nA few implementation notes:\n- I've not reimplemented every single feature in the various image transcoders\nfor the Image I/O API as is available for the internal codecs. Examples are\nGamma/Chromaticity handling and background color in PNG.\n- I've had endless loops in ImageIO.getImageWritersByMIMEType() and\nIIOMetadata.mergeTree() while trying to write TIFF images through the Image I/O\nAPI with the JAI Image I/O Tools in the classpath. (I think TIFF is only\nsupported by Image I/O under a Sun JDK if the JAI Image I/O Tools are available)\nThat means that there are probably a few bugs hidden in there. I didn't go too\ndeep in order not to lose too much time.\n- I've experienced problems handling metadata and encoding parameters when\nwriting JPEG images through Image I/O. The current code works for most use\ncases, though.\n- I created a new batik-codec.jar in the Ant build that contains the internal\ncodec classes. I hope I got the dependencies right there.\n\nIn addition to the above topic, the patch contains the following changes:\n- The TIFFTranscoder now supports specifying the compression method through a\nTranscoding hint (type String).\n- I've changed the code that prepares an XML parser to use JAXP in order to\nremove the mandatory dependency on Apache Xerces. I hope I did this the right way.\n\nBefore applying the patch it is ESSENTIAL to do local SVN copy operations\n(versioned copies) for the following files:\nsources/org/apache/batik/ext/awt/image/spi/*RegistryEntry.java (-->\nsources-internal-codec)\nsources/org/apache/batik/ext/awt/image/codec/**/* (--> sources-internal-codec)\nresources/org/apache/batik/ext/awt/image/codec/properties (-->\nsources-internal-codec)\n\nPlease see the status-log.txt file in the ZIP I'll attach. It shows how exactly\nI moved these classes (Watch for the \"+\").\n\nAttaching the patch in a minute...", "count": 0, "id": 84340, "time": "2006-01-08T17:42:33Z", "creator": "jeremias@apache.org", "creation_time": "2006-01-08T17:42:33Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 38183, "attachment_id": 17366, "is_private": false, "id": 84341, "time": "2006-01-08T17:44:32Z", "creator": "jeremias@apache.org", "creation_time": "2006-01-08T17:44:32Z", "text": "Created attachment 17366\nA ZIP containing the patch and the output of a \"svn status\" on my local working copy"}, {"count": 2, "tags": [], "bug_id": 38183, "attachment_id": null, "is_private": false, "id": 84342, "time": "2006-01-08T17:53:40Z", "creator": "jeremias@apache.org", "creation_time": "2006-01-08T17:53:40Z", "text": "Forgot to mention something:\nYou can forcibly disable the compilation of the Sun-dependant internal codecs if\nyou create a file (called \"build-local.properties\") in the same directory as\nbuild.xml and add the following line:\n\nsun-codecs.disabled=true\n\nYou can also use this file to enable debug information in the compiled classes\nwithout having to change build.xml if you add this line to the above file:\n\ndebug=true"}, {"count": 3, "tags": [], "creator": "green@spindazzle.org", "text": "Thanks for doing this!\n\nThe Classpath hackers will have to implement a few missing bits to get this\nworking now, including javax.imageio.plugins.jpeg.*. \nThis is part of the last 2% we need to implement for 1.4 API coverage.  See\nhttp://www.kaffe.org/%7Estuart/japi/htmlout/h-jdk14-classpath\nfor details.\n\nWhen do you think your patch may be available in a standard batik release?", "id": 84406, "time": "2006-01-09T19:30:09Z", "bug_id": 38183, "creation_time": "2006-01-09T19:30:09Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 38183, "attachment_id": null, "text": "Thanks!  a few comments:\n\n> The \"internal codecs\" as I called them are moved to a new source \n> directory (sources-internal-codec)\n\n   I will probably not do this, I will move them all into a common\npackage instead.\n\n>- I've not reimplemented every single feature in the various image \n> transcoders for the Image I/O API as is available for the internal \n> codecs. Examples are Gamma/Chromaticity handling and background \n> color in PNG.\n\n   Hmm, gamma handling _is_ important for PNG (especially on decode).  \nThis is why we moved from using the JDK decoder to our own local one. \nFortunately this is not the real problem area with the Batik\ncodecs - so I will see what can be done.\n\n   On Tiff it isn't the most important part.  It would be nice for\nsome use cases.\n\n> - I've experienced problems handling metadata and encoding parameters \n> when writing JPEG images through Image I/O. The current code works \n> for most use cases, though.\n\n   This is a little more troubling, what sorts of problems?\n\n> - The TIFFTranscoder now supports specifying the compression \n> method through a Transcoding hint (type String).\n\n   Sounds good!\n\n> - I've changed the code that prepares an XML parser to use JAXP in \n> order to remove the mandatory dependency on Apache Xerces. I hope \n> I did this the right way.\n\n    This also looks good.\n\n> You can forcibly disable the compilation of the Sun-dependant \n> internal codecs if you create a file (called \"build-local.properties\")\n\n    Is there any reason you didn't use 'build.properties' file?\nThis file is only used for 'local' mods anyways (otherwise you would\nput them in the ant file wouldn't you?).\n", "id": 84426, "time": "2006-01-10T12:42:59Z", "creator": "deweese@apache.org", "creation_time": "2006-01-10T12:42:59Z", "is_private": false}, {"count": 5, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 84427, "time": "2006-01-10T13:06:27Z", "bug_id": 38183, "creation_time": "2006-01-10T13:06:27Z", "is_private": false, "text": "(In reply to comment #4)\n> Thanks!  a few comments:\n> \n> > The \"internal codecs\" as I called them are moved to a new source \n> > directory (sources-internal-codec)\n> \n>    I will probably not do this, I will move them all into a common\n> package instead.\n\nOk, but that will make it more difficult to work with in an IDE. Now I can just\nremove the sources-internal-codec from the source dir list and work with Batik\nin a GNU-Classpath-compatible way. Sure, it's easy to keep the things apart in\nthe Ant build but having a clean separation helps a lot, especially in showing\nthe dependencies. I guess we're back to the same argument we had with XML\nGraphics Commons.\n\n> >- I've not reimplemented every single feature in the various image \n> > transcoders for the Image I/O API as is available for the internal \n> > codecs. Examples are Gamma/Chromaticity handling and background \n> > color in PNG.\n> \n>    Hmm, gamma handling _is_ important for PNG (especially on decode).  \n> This is why we moved from using the JDK decoder to our own local one. \n> Fortunately this is not the real problem area with the Batik\n> codecs - so I will see what can be done.\n\nI guessed as much. Thanks.\n\n>    On Tiff it isn't the most important part.  It would be nice for\n> some use cases.\n> \n> > - I've experienced problems handling metadata and encoding parameters \n> > when writing JPEG images through Image I/O. The current code works \n> > for most use cases, though.\n> \n>    This is a little more troubling, what sorts of problems?\n\nThe main problem is that the JPEG codec does not support setting the bitmap\nresolution through the standard metdata format. Image I/O has a good concept for\nhandling metadata but the implementation is a catastrophe. Other problems mostly\ninvolved IIOMetadata.setFromTree/mergeFromTree(). Settings get lost when merging\nand stuff like that. A lot of trial and error was necessary to get this far and\nI've found almost no helpful resources on the net.\n\n> > - The TIFFTranscoder now supports specifying the compression \n> > method through a Transcoding hint (type String).\n> \n>    Sounds good!\n> \n> > - I've changed the code that prepares an XML parser to use JAXP in \n> > order to remove the mandatory dependency on Apache Xerces. I hope \n> > I did this the right way.\n> \n>     This also looks good.\n> \n> > You can forcibly disable the compilation of the Sun-dependant \n> > internal codecs if you create a file (called \"build-local.properties\")\n> \n>     Is there any reason you didn't use 'build.properties' file?\n> This file is only used for 'local' mods anyways (otherwise you would\n> put them in the ant file wouldn't you?).\n\nI like to separate build.properties from build-local.properties, because that\nlatter is normally in the ignores list, so people can override their build\nsettings without accidentally committing their special settings to the\nrepository. A build.properties can help a lot for specifying default behaviour\nand serving as a template for a build-local.properties. See FOP where this is\ndone very cleanly.\n\nBTW, I'm very surprised about the amount of attention this patch already got.\nLooks like I picked something important. :-)"}, {"count": 6, "tags": [], "text": "Today, it suddenly dawned on me that it would be better if we actually started\nto populate XML Graphics Commons with this. After all, FOP now uses the codecs\ndirectly (read and write) and it would be good if we also decoupled these\nSun-dependent codecs from FOP. So why not just copy the codecs and add the\nImageWriters to Commons? I think I'll just do that. We have to start at some\npoint. :-)\n\nStill, the question remains about the placement of the sources. We will\ncertainly need a java-1.3 and a java-1.4 directory for the GraphicsConfiguration\nclasses coming from FOP. I think it would be good to place the codecs under\njava-sun-dep (as replacement for the \"sources-internal-codec\" suggested\nearlier). Thomas, I know you prefer to put everything under one tree but how\nopposed are you to such a (IMO) clean split?\n\nFor those who don't know what XML Graphics Commons is:\nhttp://wiki.apache.org/xmlgraphics/XmlGraphicsCommonComponents", "attachment_id": null, "bug_id": 38183, "id": 85696, "time": "2006-02-11T14:26:07Z", "creator": "jeremias@apache.org", "creation_time": "2006-02-11T14:26:07Z", "is_private": false}, {"count": 7, "tags": [], "creator": "deweese@apache.org", "attachment_id": null, "id": 85788, "time": "2006-02-15T01:52:39Z", "bug_id": 38183, "creation_time": "2006-02-15T01:52:39Z", "is_private": false, "text": "In reply to comment #6)\n> Today, it suddenly dawned on me that it would be better if we actually started\n> to populate XML Graphics Commons with this. After all, FOP now uses the codecs\n> directly (read and write) and it would be good if we also decoupled these\n> Sun-dependent codecs from FOP. So why not just copy the codecs and add the\n> ImageWriters to Commons? I think I'll just do that. We have to start at some\n> point. :-)\n\n   Well I have this mostly working in my local area.  I now have it\npassing the Batik regression tests... as long as it still uses the\n'original' readers and writers.\n\n> Still, the question remains about the placement of the sources. We will\n> certainly need a java-1.3 and a java-1.4 directory for the \nGraphicsConfiguration\n> classes coming from FOP. I think it would be good to place the codecs under\n> java-sun-dep (as replacement for the \"sources-internal-codec\" suggested\n> earlier). Thomas, I know you prefer to put everything under one tree but how\n> opposed are you to such a (IMO) clean split?\n\n   I don't understand the need to split these sources out...\n\n   What I did in my local repository is created codec/jpeg|png|tiff|jiio\npackages and the source for that codec goes in that package.  I've\nmodified the build so that when it can it builds everything (i.e.\non a \"sun\" JDK 1.4 and higher) Then the services class may reject \nsome at runtime (like because it can't 'link' the JIIO code under \njdk 1.3).\n\n> For those who don't know what XML Graphics Commons is:\n> http://wiki.apache.org/xmlgraphics/XmlGraphicsCommonComponents\n\n   Depending on what others think I would like to check in what\nI have (preferably to trunk, but I could spin a branch).  Since\nthe jiio stuff still isn't quite right (however it's close) I'd\nprobably comment them out of the services meta-inf file.\n\n   Even if we move everything to commons this can be easier\nonce everything is under SVN.\n\n   What do people think?"}, {"count": 8, "tags": [], "bug_id": 38183, "attachment_id": null, "text": "(In reply to comment #7)\n> In reply to comment #6)\n> > Today, it suddenly dawned on me that it would be better if we actually started\n> > to populate XML Graphics Commons with this. After all, FOP now uses the codecs\n> > directly (read and write) and it would be good if we also decoupled these\n> > Sun-dependent codecs from FOP. So why not just copy the codecs and add the\n> > ImageWriters to Commons? I think I'll just do that. We have to start at some\n> > point. :-)\n> \n>    Well I have this mostly working in my local area.  I now have it\n> passing the Batik regression tests... as long as it still uses the\n> 'original' readers and writers.\n\nIn that case, I'll wait with that and move on after you have committed the\npatch. One day I have to look at the Batik test system. I'm guilty of not\nrunning it before I posted the patch.\n\n> > Still, the question remains about the placement of the sources. We will\n> > certainly need a java-1.3 and a java-1.4 directory for the \n> GraphicsConfiguration\n> > classes coming from FOP. I think it would be good to place the codecs under\n> > java-sun-dep (as replacement for the \"sources-internal-codec\" suggested\n> > earlier). Thomas, I know you prefer to put everything under one tree but how\n> > opposed are you to such a (IMO) clean split?\n> \n>    I don't understand the need to split these sources out...\n> \n>    What I did in my local repository is created codec/jpeg|png|tiff|jiio\n> packages and the source for that codec goes in that package.  I've\n> modified the build so that when it can it builds everything (i.e.\n> on a \"sun\" JDK 1.4 and higher) Then the services class may reject \n> some at runtime (like because it can't 'link' the JIIO code under \n> jdk 1.3).\n\nYes, under Ant this is absolutely no problem. But setting this up in an IDE can\nbe difficult. You can only set include/exclude patterns for source directories\nin Eclipse since version 3.1. And that means something. It makes the whole thing\njust much easier for people actually working on Batik. How do you handle this?\nDo you always compile with the Ant script? I'd freak out because of the performance.\n\n> > For those who don't know what XML Graphics Commons is:\n> > http://wiki.apache.org/xmlgraphics/XmlGraphicsCommonComponents\n> \n>    Depending on what others think I would like to check in what\n> I have (preferably to trunk, but I could spin a branch).  Since\n> the jiio stuff still isn't quite right (however it's close) I'd\n> probably comment them out of the services meta-inf file.\n> \n>    Even if we move everything to commons this can be easier\n> once everything is under SVN.\n> \n>    What do people think?\n\nSounds good. I'll hold off then. It's not like I have no other things I can kill\nmy free/fun time with. :-)", "id": 85824, "time": "2006-02-15T19:22:16Z", "creator": "jeremias@apache.org", "creation_time": "2006-02-15T19:22:16Z", "is_private": false}, {"count": 9, "tags": [], "text": "(In reply to comment #8)\n\n> Yes, under Ant this is absolutely no problem. But setting this up in an \n> IDE can be difficult. You can only set include/exclude patterns for \n> source directories in Eclipse since version 3.1. And that means something. \n> It makes the whole thing just much easier for people actually working on \n> Batik. \n\n   Does it really?  How many people are running eclipse using gcj as\nthe eclipse compiler?  Can such a thing even be done?  I think this\nis the only place where anyone will \"feel the pain\" and even then\nthey just need to update to a recent version of Eclipse.\n\n> How do you handle this? Do you always compile with the Ant script? \n> I'd freak out because of the performance.\n\n   I'm not sure why you think performance is bad. A No-op compile \n(on a 2+yr old laptop) is 5sec, a full rebuild is 1min 22sec. That\nseems entirely reasonable to me (in most cases Squiggle takes several\ntimes longer to start than the compile takes).\n\n> Sounds good. I'll hold off then. It's not like I have no other things \n> I can kill my free/fun time with. :-)\n\n   So the code is in to switch the I/O all you need to do is\nmuck with the services file.\n", "attachment_id": null, "bug_id": 38183, "id": 85874, "time": "2006-02-17T12:04:04Z", "creator": "deweese@apache.org", "creation_time": "2006-02-17T12:04:04Z", "is_private": false}]
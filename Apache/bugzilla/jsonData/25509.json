[{"count": 0, "tags": [], "bug_id": 25509, "attachment_id": null, "is_private": false, "id": 49090, "time": "2003-12-14T08:50:18Z", "creator": "deepak@linuxquestions.net", "creation_time": "2003-12-14T08:50:18Z", "text": "In xml-security 1.5D2 version while trying to veryfy a soap message which is \nsigned previously is getting failed if it contains any SAML elements in the \nheader. Otherwise the verification is getting success. The sample java code for \nveyfication is given bello.It uses RSA algorithm.\n\n\nimport java.io.InputStream;\nimport java.security.cert.Certificate;\nimport java.security.cert.CertificateFactory;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.apache.axis.AxisFault;\nimport org.apache.axis.Message;\nimport org.apache.axis.MessageContext;\nimport org.apache.axis.handlers.BasicHandler;\nimport org.apache.axis.message.SOAPEnvelope;\nimport org.apache.log4j.Logger;\nimport org.apache.xml.security.signature.XMLSignature;\nimport org.apache.xml.security.utils.Constants;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\n\n/**\n * This adapter is used for verify the signature in the SOAP envelope\n * header using a pre distributed RSA based certificate   \n */\npublic class SignatureVerificationHandler extends BasicHandler {\n\n\t/** Name of the handler option used for configuring the certificate.\n\t *  This parameter is mandatory.\n\t*/\n\tpublic static final String CERTIFICATE_OPTION_NAME = \"soaCerificate\";\n\t/** Name of the handler option used for configuring the certificate.\n\t *  This parameter is mandatory.\n\t*/\n\tpublic static final String CERTIFICATE_TYPE_OPTION_NAME =\n\t\t\"soaCertificateType\";\n\t/** Certificate value **/\n\tprivate Certificate cert = null;\n\n\tpublic static final Logger myLogger =\n\t\tLogger.getLogger(WSSignatureVerificationAdapter.class);\n\n\t// Initializing the xml-security\n\tstatic {\n\t\torg.apache.xml.security.Init.init();\n\t}\n\n\t/** Certificate file is loaded and the certificate value and the public \nkey\n\t *  are extracted from the file  \n\t * \n\t*/\n\tpublic void init() {\n\n\t\tmyLogger.debug(\"Initializing WSSignatureVerificationAdapter\");\n\t\tList missingParams = new LinkedList();\n\t\t//Reading the certificate location option\n\t\tString certFile = (String) getOption(CERTIFICATE_OPTION_NAME);\n\t\tif (certFile == null) {\n\t\t\tmissingParams.add(CERTIFICATE_OPTION_NAME);\n\t\t}\n\t\tString certType = (String) getOption\n(CERTIFICATE_TYPE_OPTION_NAME);\n\t\tif (certType == null) {\n\t\t\tmissingParams.add(CERTIFICATE_TYPE_OPTION_NAME);\n\t\t}\n\t\t\n\t\t//If any of the options are missing throws Exception\n\t\tif (!missingParams.isEmpty()) {\n\t\t\tStringBuffer errMsgBuffer =\n\t\t\t\tnew StringBuffer(\"Following mandatory filed(s) \nare missing:\");\n\t\t\tIterator i = missingParams.iterator();\n\t\t\twhile (i.hasNext()) {\n\t\t\t\terrMsgBuffer.append(' ');\n\t\t\t\terrMsgBuffer.append((String) i.next());\n\t\t\t}\n\t\t\tString errMsg = errMsgBuffer.toString();\n\t\t\tmyLogger.fatal(errMsg);\n\t\t\tthrow new RuntimeException(errMsg);\n\t\t}\n\t\t\n\t\t//Loading the certificate \n\t\ttry {\n\t\t\tInputStream certis =\n\t\t\t\n\tWSSignatureVerificationAdapter.class.getResourceAsStream(\n\t\t\t\t\tcertFile);\n\n\t\t\tCertificateFactory cf = CertificateFactory.getInstance\n(certType);\n\t\t\tcert = cf.generateCertificate(certis);\n\t\t\tmyLogger.debug(\"Certificate loaded successfully\");\n\t\t\tmyLogger.debug(\n\t\t\t\t\"WSSignatureVerificationAdapter initialized \nsuccessfully\");\n\t\t} catch (Exception initExp) {\n\t\t\tString errMsg = \"Exception while reading Certificate\";\n\t\t\tmyLogger.fatal(errMsg, initExp);\n\t\t\tthrow new RuntimeException(errMsg, initExp);\n\t\t}\n\t}\n\t/** \n\t * Verify the SOAP request message with the public key in the \ncertificate  \n\t*/\n\tpublic void invoke(MessageContext msgContext) throws AxisFault {\n\n\t\tmyLogger.debug(\"invoke()d WSSignatureVerificationAdapter\");\n\n\t\t//Getting the SOAP message document\t  \n\t\tMessage message = msgContext.getRequestMessage();\n\t\tSOAPEnvelope soapEnvelope = message.getSOAPEnvelope();\n\t\tmyLogger.debug(\"SOAP Envelope got successfully\");\n\t\ttry {\n\t\t\t//convert to dom so that we can use for signature \nverification\n\t\t\tDocument doc = soapEnvelope.getAsDocument();\n\t\t\tElement sigElement = null;\n\t\t\tNodeList nodes =\n\t\t\t\tdoc.getElementsByTagNameNS(\n\t\t\t\t\tConstants.SignatureSpecNS,\n\t\t\t\t\tWSConstants.WS_XML_SECURITY_SIGN_TAG);\n\t\t\t\t\t\n\t\t\t//Getting the signature element and verifying\n\t\t\tif (nodes.getLength() != 0) {\n\t\t\t\tmyLogger.debug(\n\t\t\t\t\t\"Found \" + nodes.getLength() + \" \nSignature elements.\");\n\t\t\t\tsigElement = (Element) nodes.item(0);\n\t\t\t\tXMLSignature signature = new XMLSignature\n(sigElement, \"\");\n\t\t\t\tmyLogger.debug(\"The signature value got:\" + \nsignature.getSignedInfo().getCanonicalizationMethodURI());\n\t\t\t\t//If the signature is not valid one then \nthrowing an exception              \t\t   \n\t\t\t\tif (!signature.checkSignatureValue\n(cert.getPublicKey())) {\n\t\t\t\t\tString errMsg = \"The XML Signature is \nInvalid\";\n\t\t\t\t\tmyLogger.error(errMsg);\n\t\t\t\t\tthrow new AxisFault(errMsg);\n\t\t\t\t}\n\t\t\t} //The node.getLength is 0, so there is no signature\n\t\t\telse {\n\t\t\t\tString errMsg = \"The Request is not Signed\";\n\t\t\t\tmyLogger.error(errMsg);\n\t\t\t\tthrow new AxisFault(errMsg);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tmyLogger.error(\"Exception when verifying SOAPEnvelope\", \ne);\n\t\t\tAxisFault f;\n\t\t\tif (e instanceof AxisFault) {\n\t\t\t\tf = (AxisFault) e;\n\t\t\t} else {\n\t\t\t\tf = AxisFault.makeFault(e);\n\t\t\t}\n\t\t\tthrow f;\n\t\t}\n\t\t//The signature is valid so allowed to pass \n\t\tmyLogger.debug(\"The XML Signature is Valid\");\n\t\tmyLogger.debug(\"WSSignatureVerificationAdapter invoke()d \nsuccessfully\");\n\t}\n\n}"}, {"count": 1, "tags": [], "bug_id": 25509, "attachment_id": null, "id": 53215, "time": "2004-02-29T09:26:36Z", "creator": "berin@ozemail.com.au", "creation_time": "2004-02-29T09:26:36Z", "is_private": false, "text": "Would you be able to provide a copy of an XML file that is failing?  \n\nAlso some information on what processing the document goes through after signing\nwould be good.  Quite often these failures are due to \"pretty printing\" of a\ndocument post signature creation.\n\nThanks!\n\nCheers,\n     Berin\n"}, {"count": 2, "tags": [], "text": "More information needed, and reclaimed but not obtained.", "is_private": false, "bug_id": 25509, "id": 68962, "time": "2004-12-24T16:24:44Z", "creator": "raul-info@r-bg.com", "creation_time": "2004-12-24T16:24:44Z", "attachment_id": null}]
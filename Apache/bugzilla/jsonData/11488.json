[{"count": 0, "tags": [], "bug_id": 11488, "text": "Consider a tag <mytags:foo> with a required \"id\" attribute and two optional\nattributes \"bar\" and \"baz\".  The following usage pattern will incorrectly\nrecycle the same tag instance, but not set the attributes correctly:\n\n  <mytags:foo id=\"abc\" bar=\"123\"/>\n  <mytags:foo id=\"abc\" baz=\"456\"/>\n\nthe second usage will see both \"bar\" and \"baz\" set.  Only tag instances that\nhave the same sets of attributes should be reused -- in the above example, the\nattribute sets are different (id/bar versus id/baz) and reuse should not take place.\n\nInterestingly, changing the usage to:\n\n  <mytags:foo id=\"abc\" bar=\"123\"/>\n  <mytags:foo id=\"def\" baz=\"456\"/>\n\n(i.e. different values for \"id\") causes the tag instances not to be reused, so\nit appears that the reuse decision is being incorrectly made on attribute values\nrather than attribute names.", "id": 20676, "time": "2002-08-06T04:47:15Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2002-08-06T04:47:15Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 11488, "text": "Created attachment 2605\nGenerated servlet code", "id": 20721, "time": "2002-08-06T19:11:31Z", "creator": "jan.luehe@sun.com", "creation_time": "2002-08-06T19:11:31Z", "is_private": false, "attachment_id": 2605}, {"count": 2, "tags": [], "creator": "jan.luehe@sun.com", "attachment_id": null, "is_private": false, "id": 20722, "time": "2002-08-06T19:12:49Z", "bug_id": 11488, "creation_time": "2002-08-06T19:12:49Z", "text": "Craig,\n\nI'm afraid I'm unable to reproduce this.\n\nTag pooling in jasper 2 considers only attribute names, not values,\nwhen determining the appropriate tag handler pool.\n\nThe attached WAR file implements a custom tag (<mytags:foo>) which\nsimply prints out the values of its 'id', 'bar', and 'baz'\nattributes. When I visit reuse.jsp, I get this result, as expected:\n\n  id: abc bar: 123 baz: null \n  id: abc bar: null baz: 456 \n\nIn the generated servlet code (attached), we retrieve a tag handler for the\nfirst tag like this:\n\n  mytags.Foo _jspx_th_mytags_foo_0 = (mytags.Foo)\n_jspx_tagPool_mytags_foo_id_bar.get(mytags.Foo.class);\n      \nand a tag handler for the 2nd tag like this:\n\n  mytags.Foo _jspx_th_mytags_foo_1 = (mytags.Foo)\n_jspx_tagPool_mytags_foo_id_baz.get(mytags.Foo.class);\n    \nAs you can see, the name of the first tag handler pool contains\nthe attribute names of the first action ('id' and 'bar'),\nand the name of the second pool contains the attribute names of\nthe 2nd action ('id' and 'baz'). Attribute values are ignored.\n\nPerhaps you could send me a WAR file in which the problem exists?\n\n\nJan\n"}]
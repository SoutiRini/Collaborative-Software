[{"attachment_id": null, "tags": [], "creator": "bruno@distributedmatter.net", "is_private": false, "count": 0, "id": 196871, "time": "2017-02-09T12:32:56Z", "bug_id": 60717, "creation_time": "2017-02-09T12:32:56Z", "text": "There seems to be two main aspects to this problem:\n1. How mod_proxy_http handles a backend sending a TCP RST.\n2. How mod_proxy_http handles a 401 response code from the backend, especially in relation to a \"Expect: 100-continue\" in the request.\n\n\nThe test case is an Apache Httpd server (2.4.25) used as a front-end to a Jetty (9.3.16) server, using mod_proxy_http as a reverse proxy.\n\nThe mod_proxy configuration is as follows:\n\n    SetEnv HTTPS 1\n    <Location /test/>\n        ProxyPass http://localhost:8080/test/ retry=10\n        ProxyPassReverse http://localhost:8080/test/\n        RequestHeader set X-Forwarded-Proto \"https\" env=HTTPS\n        RequestHeader set X-Forwarded-Port 443 env=HTTPS\n    </Location>\n\n\t\nThe Jetty service is configured to use HTTP Basic authentication.\n\nWhen using Curl to send an external POST request using a wrong username/password, I get a 502 status code from Apache Httpd.\n\n\nHere is what is seen from the external client:\n\n> POST /test/ HTTP/1.1\n> Authorization: Basic ...\n> User-Agent: curl/...\n> Host: test.example.com\n> Accept: application/xml\n> Referer: https://test.example.com/test/\n> Content-Type: application/xml\n> Content-Length: 40220\n> Expect: 100-continue\n> \n< HTTP/1.1 100 Continue\n< HTTP/1.1 502 Bad Gateway\n< Date: Thu, 09 Feb 2017 11:27:03 GMT\n< Server: Apache/2.4.25\n< Content-Length: 232\n< Content-Type: text/html; charset=iso-8859-1\n* HTTP error before end of send, stop sending\n\n\n\nHere is what was sent between Apache Httpd and the Jetty server locally:\n\n\nA:    POST /test/ HTTP/1.1\nA:    Host: test.example.com\nA:    Authorization: Basic ....\nA:    User-Agent: curl/...\nA:    Accept: application/xml\nA:    Referer: https://test.example.com/test/\nA:    Content-Type: application/xml\nA:    Expect: 100-continue\nA:    X-Forwarded-Proto: https\nA:    X-Forwarded-Port: 443\nA:    X-Forwarded-For: ....\nA:    X-Forwarded-Host: ....\nA:    X-Forwarded-Server: ...\nA:    Connection: Keep-Alive\nA:    Content-Length: 40220\nA:    \nJ:    HTTP/1.1 401 Bad credentials\nJ:    X-Content-Type-Options: nosniff\nJ:    X-XSS-Protection: 1; mode=block\nJ:    Pragma: no-cache\nJ:    Strict-Transport-Security: max-age=31536000 ; includeSubDomains\nJ:    X-Frame-Options: SAMEORIGIN\nJ:    WWW-Authenticate: Basic realm=\"Realm\"\nJ:    Cache-Control: must-revalidate,no-cache,no-store\nJ:    Content-Length: 0\nJ:    Connection: close\nJ:    \nA:    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\nA:    ...\n\n\n\n\n\nHere is what the Wireshark packet summary looks like:\n\nNo.     Time           Destination Port Protocol Length Info\n      1 0.000000       8080             TCP      94     43646 ? 8080 [SYN] Seq=0 Win=65476 Len=0 MSS=65476 SACK_PERM=1 TSval=577106868 TSecr=0 WS=128\n      2 0.000084       43646            TCP      94     8080 ? 43646 [SYN, ACK] Seq=0 Ack=1 Win=65464 Len=0 MSS=65476 SACK_PERM=1 TSval=577106868 TSecr=577106868 WS=128\n      3 0.000168       8080             TCP      86     43646 ? 8080 [ACK] Seq=1 Ack=1 Win=65536 Len=0 TSval=577106868 TSecr=577106868\n      4 0.036775       8080             HTTP     642    POST /test/ HTTP/1.1 \n      5 0.036836       43646            TCP      86     8080 ? 43646 [ACK] Seq=1 Ack=557 Win=66688 Len=0 TSval=577106905 TSecr=577106905\n      6 0.039358       43646            HTTP     423    HTTP/1.1 401 Bad credentials \n      7 0.039562       43646            TCP      86     8080 ? 43646 [FIN, ACK] Seq=338 Ack=557 Win=66688 Len=0 TSval=577106908 TSecr=577106905\n      8 0.043988       8080             TCP      86     43646 ? 8080 [ACK] Seq=557 Ack=338 Win=66560 Len=0 TSval=577106912 TSecr=577106907\n      9 0.046297       8080             TCP      24662  [TCP segment of a reassembled PDU]\n     10 0.046390       43646            TCP      74     8080 ? 43646 [RST] Seq=339 Win=0 Len=0\n     11 0.047071       8080             TCP      86     43646 ? 8080 [RST, ACK] Seq=25133 Ack=339 Win=66560 Len=0 TSval=577106915 TSecr=577106908\n\n\n\n\nPart of the problem here is that Jetty almost immediately sends a TCP RST, after sending its 401 response (with a \"Connection: close\"), partly to prevent DOS attacks due to unauthenticated requests: https://github.com/eclipse/jetty.project/issues/651\n\n\nWhere I think there may be a problem on Apache Httpd's side. The original client sent an \"Expect: 100-continue\" header, and that was forwarded by mod_proxy. Yet, Jetty replied with a 401 response before getting any of the request's entity, and certainly before sending a 100 response.\nI believe in this case that mod_proxy should:\n- not send \"HTTP/1.1 100 Continue\" back to the client\n- not carry on with sending the request's entity to Jetty\n\nOn top of this, because Jetty sends a TCP RST, this causes mod_proxy to send a 502 back to the client, instead of the 401 (with headers) it already received from the backend.\n\nA consequence is that some clients that don't use pre-emptive HTTP Basic authentication (i.e. those that will only send the Authorization header when challenged with a 401 response) will just take this 502 response as a failure, instead of trying again with credentials.\n\n\nThere already are a couple of issues related to this:\n- bug 51867 concluded (rightly, I think) that the backend \"needs to consume the body of requests even if it does not need them\". However, in this case we're using \"Expect: 100-continue\" and the 401 response is sent before the request entity is sent.\n- bug 49405: although sending a TCP RST is indeed a bit abrupt, this is done after sending a full valid 401 response (with all headers, \"Content-Length: 0\", and \"Connection: close), before any request entity was sent to the backend. It should at least return that instead of 502 (especially w.r.t. 100-continue issue)."}]
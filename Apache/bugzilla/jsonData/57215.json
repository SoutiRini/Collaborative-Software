[{"count": 0, "tags": [], "bug_id": 57215, "attachment_id": null, "text": "After upgrading from 7.0.52 of Tomcat to 7.0.54 we found that our application was now returning 404 resource not found errors when the request uri starts with //.\neg. We have an embedded server created and started something like:\n\n org.apache.catalina.startup.Embedded embedded = new Embedded();\n org.apache.catalina.Engine engine engine = embedded.createEngine();\n engine.setName(\"\");\n embedded.setContainer(engine);\n embedded.addEngine(engine);\n\n ...\n\n String startPathContextRoot = \"c:\\website\\data\\startPath\";\n org.apache.catalina.Context startPathContext = embedded.createContext(\"/startPath\",startPathContextRoot);\n\n embedded.start()\n\nThen a request to http://host:port//startPath returns 404.\nWhereas at Tomcat 7.0.52 it returns what we would expect from a request to \nhttp://host:port/startPath.\nThe same behaviour is seen with requests to extended URLs eg:\n  http://host:port//startPath/anotherPath.\nwhere they end up at the servlet as expected with 7.0.53 and not with 7.0.54\n\nDebugging this a bit I found that the problem was introduced at 7.0.53 and by the changes under \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=56501\nwhich for Tomcat 7 were revision \nhttp://svn.apache.org/viewvc?view=revision&revision=1594028\nIf I run our app without these changes in at 7.0.54 then it works fine.\n\nLooking at the changes in the revision I saw some tests were added and so I tried adding some new tests to tomcat/trunk/test/org/apache/catalina/connector/TestRequest.java which I think example the problem:\n\n    @Test\n    public void testBug56501p() throws Exception {\n        doBug56501(\"/path\", \"//path\", \"/path\");\n    }\n\n    @Test\n    public void testBug56501q() throws Exception {\n        doBug56501(\"/path\", \"//path/\", \"/path\");\n    }\n\n    @Test\n    public void testBug56501r() throws Exception {\n        doBug56501(\"/path\", \"//path/bob\", \"/path\");\n    }\n\n    @Test\n    public void testBug56501s() throws Exception {\n        doBug56501(\"/path\", \"//path/bob/\", \"/path\");\n\nIf I run these at 7.0.53 they pass.\nand running at 7.0.54 they fail with:\n\nTestcase: testBug56501p took 0.307 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\nTestcase: testBug56501q took 0.275 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\nTestcase: testBug56501r took 0.246 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\nTestcase: testBug56501s took 0.32 sec\n\tFAILED\nexpected:</[path]> but was:</[]>\n\n\nI can try and create this with a simple servlet/setup if required if the test additions are not enough.\n\nDavid", "id": 179106, "time": "2014-11-14T23:18:32Z", "creator": "dcoles@uk.ibm.com", "creation_time": "2014-11-14T23:18:32Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 57215, "is_private": false, "text": "This is going to get messy.\n\nThe Javadoc for HttpServletRequest.getContextPath() says the container should not decode the returned value.\n\nWhere this gets 'interesting' is when the URI is not normalized and is encoded. For example, what gets returned for a request to \"%2Ffoo%2F%2E%2E%2Fpath\"?\n\nIs it:\n\"%2Fpath\" ?\n\"%2Ffoo%2F%2E%2E%2Fpath\" ?\n\nSomething else?\n\nWe know (from the mapper) how many '/' characters to include in the context path. The current approach of simply searching that many '/' characters down the request URI ignores issues of normalization and encoding. Doing that counting in a normalization and encoding aware manner is probably the answer but that is non-trivial to say the least.\n\nFixing this bug might not solve the problem you are seeing - particularly since the unit tests you provided are using the incorrect value for the expected context path. You should probably be using ServletContext.getContextPath().", "id": 179121, "time": "2014-11-15T16:37:11Z", "creator": "markt@apache.org", "creation_time": "2014-11-15T16:37:11Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57215, "text": "I have applied a fix to this to Tomcat 9. As I suspected it is a little messy. I'm goign to leave it afew days for folks to review and comment before I back-port it to 8.0.x and 7.0.x.", "id": 179153, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2014-11-17T07:41:07Z", "time": "2014-11-17T07:41:07Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 57215, "text": "(In reply to Mark Thomas from comment #1)\n> For example, what gets returned for a request to\n> \"%2Ffoo%2F%2E%2E%2Fpath\"?\n\nRFC7230 2.7.3. \"http and https URI Normalization and Comparison\" says about http and https URIs:\n\n   ...\n   such URIs are normalized and compared according to the\n   algorithm defined in Section 6 of [RFC3986]\n\n\nhttp://tools.ietf.org/html/rfc3986\nRFC3986 2.3. Unreserved Characters [1]\n\n   Characters that are allowed in a URI but do not have a reserved\n   purpose are called unreserved.  These include uppercase and lowercase\n   letters, decimal digits, hyphen, period, underscore, and tilde.\n\n      unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\n   URIs that differ in the replacement of an unreserved character with\n   its corresponding percent-encoded US-ASCII octet are equivalent: they\n   identify the same resource.  However, URI comparison implementations\n   do not always perform normalization prior to comparison (see Section\n   6).  For consistency, percent-encoded octets in the ranges of ALPHA\n   (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D), period (%2E),\n   underscore (%5F), or tilde (%7E) should not be created by URI\n   producers and, when found in a URI, should be decoded to their\n   corresponding unreserved characters by URI normalizers.\n\nRFC3986 6.2.2.2. Percent-Encoding Normalization\n\n   The percent-encoding mechanism (Section 2.1) is a frequent source of\n   variance among otherwise identical URIs.  In addition to the case\n   normalization issue noted above, some URI producers percent-encode\n   octets that do not require percent-encoding, resulting in URIs that\n   are equivalent to their non-encoded counterparts.  These URIs should\n   be normalized by decoding any percent-encoded octet that corresponds\n   to an unreserved character, as described in Section 2.3.\n\n\nSo it looks that RFC3986 says to url-decode the above listed \"unreserved\" characters before performing normalization, but only them.\n\n\"%2Ffoo%2F%2E%2E%2Fpath\" becomes \"%2Ffoo%2F..%2Fpath\" but nothing more as %2F is not decoded.\n\nIn regards to r1640083 the \"canonicalContextPath.equals(candidate)\" comparison looks fragile.", "id": 179179, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2014-11-19T00:37:05Z", "time": "2014-11-19T00:37:05Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 57215, "attachment_id": null, "text": "Worth noting here that we have the system property org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH\n\nRegarding the fragility of canonicalContextPath.equals(candidate), better suggestions welcome.", "id": 179184, "time": "2014-11-19T07:59:06Z", "creator": "markt@apache.org", "creation_time": "2014-11-19T07:59:06Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 57215, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #4)\n> \n> Regarding the fragility of canonicalContextPath.equals(candidate), better\n> suggestions welcome.\n\nThe code that was added to Request class is located far from the code that performs decoding and mapping (CoyoteAdapter) and one that performs URL-decoding (UDecoder) and it is hard to compare those and keep in sync.\n\nComparing the code highlighted an issue -> 1.\n\n1. Using UDecoder.URLDecode(candidate) + canonicalContextPath.equals(candidate) is broken, as URLDecode() without second argument uses ISO-8859-1 charset. The equals() may return false.\n\n2. Move the code to CoyoteAdapter.postParseRequest(). Evaluate the value there only once.\n\n3. In unexpected situations, error out (400) instead of falling through.\n\n4. Maybe add an utility methods to UDecoder to search for next decoded '/' in a ByteChunk?\n\n\n5. In CoyoteAdapter.postParseRequest() when decodedURI.getType() is not bytes (e.g. when requestURI is changed by RewriteValve), normalization is skipped. I think that it should not be skipped.", "id": 179417, "time": "2014-12-01T18:53:51Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-12-01T18:53:51Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 57215, "is_private": false, "text": "I've fixed the issue identified in 1.\n\nRegarding 2, that would cause the code to be executed for every request when it is only likely to be used for a small percentage.\n\n3 makes sense if we do 2 but I don't think 2 is the way to go.\n\n4 I'm neutral on.\n\n5 I believe that was a deliberate implementaion decision. I don'tthink we need to revisit it as part of this unless suggestion 2 is followed.\n\n\nThe key issue is whether or not to follow suggestion 2. I'm currently leaning towards not because of performance but am prepared to be convinced otherwise.", "id": 179419, "time": "2014-12-01T22:02:46Z", "creator": "markt@apache.org", "creation_time": "2014-12-01T22:02:46Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "chris@christopherschultz.net", "text": "Any reason not to have code available that does (2) but in a lazy way? That is, a utility method that can do the work to produce the result and also cache the value in the request in case it's requested again? Then, only call that utility method when the value is actually needed?", "count": 7, "id": 179420, "time": "2014-12-01T22:18:42Z", "bug_id": 57215, "creation_time": "2014-12-01T22:18:42Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 57215, "text": "(In reply to Konstantin Kolinko from comment #5)\n> 5. In CoyoteAdapter.postParseRequest() when decodedURI.getType() is not\n> bytes (e.g. when requestURI is changed by RewriteValve), normalization is\n> skipped. I think that it should not be skipped.\n\nSkipping url-decoding step is also wrong. If RewriteValve provides a non-encoded requestUri, it means that there is a bug in RewriteValve.\n\nWeb Application should assume that requestURI needs url-decoding. It cannot find out that url-decoding shall be skipped. Implementation of Request.getContextPath() in r1640083/r1642766 is an example of a victim of this bug. It always performs url-decoding.\n\n>> 3. In unexpected situations, error out (400) instead of falling through.\n>\n> 3 makes sense if we do 2 but I don't think 2 is the way to go.\n\nI do not like that Request.getContextPath() falls through to returning requestUri. It may result in security issues.", "id": 179437, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2014-12-02T09:33:01Z", "time": "2014-12-02T09:33:01Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 57215, "attachment_id": null, "text": "In theory issue 3 should never happen. Therefore, I have changed the code to throw an ISE rather than return the uri.", "id": 179708, "time": "2014-12-10T21:31:39Z", "creator": "markt@apache.org", "creation_time": "2014-12-10T21:31:39Z", "is_private": false}, {"count": 10, "tags": [], "text": "I've added some unit tests to trunk for 5 and made the necessary fixes so that they pass. I believe these fixes are now ready for back-port.", "is_private": false, "id": 179734, "creator": "markt@apache.org", "time": "2014-12-12T15:59:31Z", "bug_id": 57215, "creation_time": "2014-12-12T15:59:31Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 57215, "attachment_id": null, "text": "I have back-ported this fix to 8.0.x (for 8.0.16 onwards) and to 7.0.x (for 7.0.58 onwards).", "id": 179736, "time": "2014-12-12T16:42:58Z", "creator": "markt@apache.org", "creation_time": "2014-12-12T16:42:58Z", "is_private": false}]
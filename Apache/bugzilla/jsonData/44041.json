[{"count": 0, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "I am using Tomcat Sysdeo Plugin combined with their DevLoader.\nThis class extends Tomcat WebappClassLoader to add external repositories through:\nWebappClassLoader#addRepository\n\nUnder high load this exception occurs if a Servlet or JSP calls:\n\t\t\tClass clazz =\nThread.currentThread().getContextClassLoader().loadClass(\"<Class Name>\");\n\n\njava.lang.LinkageError: duplicate class definition:\ncom/ubikingenierie/bug/ClassLoadedDynamically\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat\norg.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:890)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1329)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1208)\n\tat com.ubikingenierie.servlet.BasicServlet.service(BasicServlet.java:27)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n\tat\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n\tat\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:544)\n\tat\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)\n\tat\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)\n\tat\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)\n\tat\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)\n\tat\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)\n\tat java.lang.Thread.run(Thread.java:595)\n\n\nPhilippe.\nhttp://www.ubik-ingenierie.com", "id": 111549, "time": "2007-12-07T13:55:58Z", "bug_id": 44041, "creation_time": "2007-12-07T13:55:58Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44041, "is_private": false, "text": "Created attachment 21244\nSample Project that contains the Servlet and a Test case\n\nThis project uses Tomcat Sysdeo DevLoader.\nTO use it, import the project DependentProject (next attachment) in Eclipse.\nTO use it, import the project BugTomcat5 in Eclipse.\nDefine classpath variable LIBRARIES that points to a folder containing:\n-commons-codec-1.3.jar\n-commons-httpclient-3.1.jar\n-commons-logging-1.0.4.jar\n-junit-3.8.jar\n-junitperf-1.8.jar\n-log4j-1.2.15.jar\nReference the config\\server-j2ee14.xml as Tomcat config file\nStart tomcat\nRun com.ubikingenierie.client.MultiThreadedTestClientSuite", "id": 111551, "time": "2007-12-07T14:02:42Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2007-12-07T14:02:42Z", "attachment_id": 21244}, {"count": 2, "tags": [], "bug_id": 44041, "attachment_id": 21245, "text": "Created attachment 21245\nThe dependent project that will be added by DevLoader as an externalrepository\n\nSee previous patch.\nYou just have to import in in the same Eclipse workspace as a project called\nDependentProject", "id": 111552, "time": "2007-12-07T14:04:05Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2007-12-07T14:04:05Z", "is_private": false}, {"count": 3, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": 21246, "is_private": false, "id": 111553, "time": "2007-12-07T14:05:18Z", "bug_id": 44041, "creation_time": "2007-12-07T14:05:18Z", "text": "Created attachment 21246\nTomcat Sysdeo DevLoader Last version\n\nYou can get this from:\nhttp://www.eclipsetotale.com/tomcatPlugin.html"}, {"count": 4, "tags": [], "bug_id": 44041, "is_private": false, "text": "I just forgot one thing:\nYou have to unpack DevLoader.zip in TOMCAT5_HOME/server/classes to make the\nDevLoader available to Tomcat.\nSee:\nhttp://www.eclipsetotale.com/tomcatPlugin.html\nAnd inside plugin see DevLoader.zip", "id": 111554, "time": "2007-12-07T14:07:23Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2007-12-07T14:07:23Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 44041, "text": "Their is a solution, add synchronized to loadClass(String name, boolean resolve)\nline 1238, but it is maybe an important contention point for you:\npublic synchronized Class loadClass(String name, boolean resolve)\n\nAlthough note that java.lang.ClassLoader has a synchronized method:\n    protected synchronized Class<?> loadClass(String name, boolean resolve)\n\nPhilippe.", "id": 111555, "time": "2007-12-07T14:22:40Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2007-12-07T14:22:40Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 44041, "text": "Thanks for the test case. I was able to reproduce this. A sync is required to\nfix it but a much smaller one than proposed.\n\nI have fixed trunk and proposed the fix for backport to 6.0.x and 5.5.x", "id": 111616, "time": "2007-12-10T14:28:21Z", "creator": "markt@apache.org", "creation_time": "2007-12-10T14:28:21Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 44041, "text": "Fixed in 5.5.x and will be included in 5.5.26 onwards.\nFixed in 6.0.x and will be included in 6.0.16 onwards.", "id": 112562, "time": "2008-01-06T15:19:16Z", "creator": "markt@apache.org", "creation_time": "2008-01-06T15:19:16Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 44041, "is_private": false, "text": "Are you sure it is OK to synchronize around the call to URLClassLoader.findClass?\n\nIf you have a page with 2 frames, each loading a JSP at the same time:\n\nThread T1 tries to load my.class.Foo\nThread T2 tries to load my.class.Foo\n\nT1 calls WebappClassLoader.loadClass\nT2 calls WebappClassLoader.loadClass\n\nWebappClassLoader determines it has not loaded the class for both threads (since there is no synchronization at this point).\n\nBoth T1 and T2 get to the synchronized block in findClass.\nThey get synchronized, but doing the wrong thing, and a LinkageError gets thrown.\n\nDon't you think that WebappClassLoader.loadClass(String, boolean) ought to be synchronized just like it is in java.lang.ClassLoader?\n\nI am actually running into this problem with Tomcat 5.5.27 (on a 4 core machine):\n\nCaused by: java.lang.LinkageError: loader (instance of  org/apache/catalina/loader/WebappClassLoader): attempted  duplicate class definition for name: \"org/apache/struts/taglib/tiles/PutTag\"\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:621)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n    at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n    at java.net.URLClassLoader.access$000(URLClassLoader.java:56)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n    at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:904)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1353)\n    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1232)\n    at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:125)\n    at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:63)\n    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) \n.... etc ....", "id": 124947, "time": "2009-02-18T12:03:38Z", "creator": "pipelare@gmail.com", "creation_time": "2009-02-18T12:03:38Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 44041, "text": "(In reply to comment #8)\n\nHi,\n\nWe also experienced this issue while using the Sysdeo plugin with DevLoader. It was resolved (for us) by synchronizing WebappClassLoader.loadClass.\n\nCheers.\n\n> Are you sure it is OK to synchronize around the call to\n> URLClassLoader.findClass?\n> \n> If you have a page with 2 frames, each loading a JSP at the same time:\n> \n> Thread T1 tries to load my.class.Foo\n> Thread T2 tries to load my.class.Foo\n> \n> T1 calls WebappClassLoader.loadClass\n> T2 calls WebappClassLoader.loadClass\n> \n> WebappClassLoader determines it has not loaded the class for both threads\n> (since there is no synchronization at this point).\n> \n> Both T1 and T2 get to the synchronized block in findClass.\n> They get synchronized, but doing the wrong thing, and a LinkageError gets\n> thrown.\n> \n> Don't you think that WebappClassLoader.loadClass(String, boolean) ought to be\n> synchronized just like it is in java.lang.ClassLoader?\n> \n> I am actually running into this problem with Tomcat 5.5.27 (on a 4 core\n> machine):\n> \n> Caused by: java.lang.LinkageError: loader (instance of \n> org/apache/catalina/loader/WebappClassLoader): attempted  duplicate class\n> definition for name: \"org/apache/struts/taglib/tiles/PutTag\"\n>     at java.lang.ClassLoader.defineClass1(Native Method)\n>     at java.lang.ClassLoader.defineClass(ClassLoader.java:621)\n>     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n>     at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n>     at java.net.URLClassLoader.access$000(URLClassLoader.java:56)\n>     at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n>     at java.security.AccessController.doPrivileged(Native Method)\n>     at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n>     at\n> org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:904)\n>     at\n> org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1353)\n>     at\n> org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1232)\n>     at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:125)\n>     at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:63)\n>     at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) \n> .... etc ....", "id": 126957, "time": "2009-05-12T08:58:56Z", "creator": "rcgeorge23@gmail.com", "creation_time": "2009-05-12T08:58:56Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 44041, "attachment_id": null, "is_private": false, "id": 126958, "time": "2009-05-12T09:07:56Z", "creator": "rcgeorge23@gmail.com", "creation_time": "2009-05-12T09:07:56Z", "text": "Just to add to that, we are using Tomcat 6.0.18, with Sysdeo 3.2.1. I realise there it may be a little heavy-handed synchronizing the whole method, but since this is only a patch intended for use in dev I don't see it as too much of an issue.\n\nCheers."}, {"count": 11, "tags": [], "bug_id": 44041, "attachment_id": null, "text": "Point taken re syncs and WebappClassLoader.loadClass(String, boolean)\nI have proposed a patch for 6.0.x and 5.5.x that adds that sync.", "id": 129750, "time": "2009-08-17T15:23:18Z", "creator": "markt@apache.org", "creation_time": "2009-08-17T15:23:18Z", "is_private": false}, {"count": 12, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "This has been fixed in 6.0.x (with a slightly different patch) and will be included in 6.0.21 onwards.", "id": 132084, "time": "2009-11-18T04:26:14Z", "bug_id": 44041, "creation_time": "2009-11-18T04:26:14Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 44041, "attachment_id": null, "is_private": false, "id": 135588, "time": "2010-03-24T14:09:56Z", "creator": "markt@apache.org", "creation_time": "2010-03-24T14:09:56Z", "text": "Further testing has identified issues under some circumstances. The final solution is being worked on for 7.0.x and when that is finalised it will be back-ported to 6.0.x and 5.5.x"}, {"count": 14, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 135643, "attachment_id": null, "bug_id": 44041, "creation_time": "2010-03-25T20:36:49Z", "time": "2010-03-25T20:36:49Z", "text": "Updated patch that uses synchronized(this) applied to 7.0.x and proposed for 5.5.x and 6.0.x"}, {"count": 15, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 136261, "time": "2010-04-20T11:20:17Z", "bug_id": 44041, "creation_time": "2010-04-20T11:20:17Z", "is_private": false, "text": "The issue was fixed in 5.5.x in r935947 and will be in 5.5.30 onwards.\n\nThe patch for 6.0.x mentioned in Comment 13 is tracked as bug 48903. As of now, it has been proposed for 6.0.x, but has not been applied yet."}, {"count": 16, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 136271, "time": "2010-04-20T13:15:13Z", "bug_id": 44041, "creation_time": "2010-04-20T13:15:13Z", "text": "Moving to 6 since this is fixed in 5."}, {"count": 17, "tags": [], "bug_id": 44041, "text": "Fixed in TC 6 by r941868. Will be part of 6.0.27.", "id": 136707, "time": "2010-05-06T15:21:03Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2010-05-06T15:21:03Z", "is_private": false, "attachment_id": null}]
[{"text": "I covered much of the background on this in the following mailing list thread:\n\nhttp://marc.theaimsgroup.com/?l=apache-httpd-dev&m=113986864730305&w=2\n\nThe usual firestorm of discussion broke out ... anyway, as I noted, it's\nimportant to me that even if I issue an ungraceful restart or shutdown that the\nMPM manages, if at all possible, to call apr_pool_destroy(pchild).  Otherwise,\nimportant cleanup functions that are registered against the pool don't get\ninvoked; in my case, that's the DB disconnection cleanups in mod_dbd/apr_dbd.\n\nTo summarize, on Linux, poll() doesn't immediately return with EBADF if another\nthread closes the socket descriptor, as described here:\n\nhttp://bugme.osdl.org/show_bug.cgi?id=546\n\nWhen a worker thread is running process_socket(), after handling the request it\nthen waits for the specified Keep-Alive period.  This is actually done inside\nthe apr_bucket_read() in ap_rgetline_core(); the apr_socket_recv() function runs\napr_wait_for_io_or_timeout(), which performs a poll() for the Keep-Alive period. \n\nWhen an ungraceful restart or shutdown message is received by the worker MPM, it\nuses close_worker_sockets() to close all the sockets the worker threads might be\npolling on.  On Solaris, for example, that has the side-effect of immediately\ncausing apr_wait_for_io_or_timeout() to return EBADF, which curtails all the\ncalling functions until process_socket() returns and the worker thread notices\nthe workers_may_exit flag and exits.  That in turn allows join_workers() to run\nto completion, after which clean_child_exit() can run the cleanups on the pchild\npool and all child memory pools.\n\nBut on Linux, the worker child process is stuck waiting for the Keep-Alive\nperiod for the polling to timeout, and during this period, the main httpd\nprocess often decides the child process is non-responsive, and sends SIGKILL. \nFor me, that means my important cleanup functions never run.\n\nThe attached patch is the simplest fix I've found; it turns out that by simply\nsignalling the worker threads with any signal is sufficient, because then poll()\nwakes up and returns EBADF (because the socket descriptor has been closed).  At\nfirst I assumed poll() would return EINTR, but luckily, that's not the case, so\nthe fix gets that much simpler.", "tags": [], "creator": "chrisd@apache.org", "is_private": false, "count": 0, "id": 86021, "time": "2006-02-21T17:27:01Z", "bug_id": 38737, "creation_time": "2006-02-21T17:27:01Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 17761\nsignals worker threads after closing their sockets", "attachment_id": 17761, "bug_id": 38737, "id": 86022, "time": "2006-02-21T17:27:52Z", "creator": "chrisd@apache.org", "creation_time": "2006-02-21T17:27:52Z", "is_private": false}, {"count": 2, "tags": [], "creator": "chrisd@apache.org", "attachment_id": 17762, "is_private": false, "id": 86023, "time": "2006-02-21T17:28:20Z", "bug_id": 38737, "creation_time": "2006-02-21T17:28:20Z", "text": "Created attachment 17762\nsame again for event MPM"}, {"count": 3, "tags": [], "creator": "chrisd@apache.org", "is_private": false, "text": "Comment on attachment 17762\nsame again for event MPM\n\nActually, this isn't needed because of the asynchronous polling on Keep-Alives.", "id": 86091, "time": "2006-02-22T18:07:52Z", "bug_id": 38737, "creation_time": "2006-02-22T18:07:52Z", "attachment_id": 17762}, {"count": 4, "tags": [], "creator": "chrisd@apache.org", "attachment_id": null, "is_private": false, "id": 89527, "time": "2006-05-26T18:35:47Z", "bug_id": 38737, "creation_time": "2006-05-26T18:35:47Z", "text": "Committed to 2.3 HEAD:\n\nhttp://svn.apache.org/viewvc?view=rev&revision=409715"}, {"count": 5, "tags": [], "bug_id": 38737, "attachment_id": 18355, "id": 89529, "time": "2006-05-26T20:17:31Z", "creator": "chrisd@apache.org", "creation_time": "2006-05-26T20:17:31Z", "is_private": false, "text": "Created attachment 18355\npatch for current 2.2.x branch"}]
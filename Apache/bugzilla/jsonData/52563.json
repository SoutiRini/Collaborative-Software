[{"count": 0, "tags": [], "bug_id": 52563, "is_private": false, "text": "In the get method of DirContextURLStreamHandler class, it seems that binding value with thread are not processed correctly. Now its value will be only returned if no binding value on the current thread context classloader and it has no parent classloader, think that the value will not be returned in most scenarios.\nThink that the code logic should be something like :\na. Check whether a value is binding on the current thread context classloader, if does then return.\nb. Check whether a value is binding with the current thread, if does then return.\nc. Check the classloader hierarchy to find a binding value.\n\n\npublic static DirContext get() { \n\n        DirContext result = null; \n\n        Thread currentThread = Thread.currentThread(); \n        ClassLoader currentCL = currentThread.getContextClassLoader(); \n\n        // Checking CL binding \n        result = clBindings.get(currentCL); \n        if (result != null) \n            return result; \n\n        // Checking thread biding \n        result = threadBindings.get(currentThread);\n\n        // Checking parent CL binding \n        currentCL = currentCL.getParent(); \n        while (currentCL != null) { \n            result = clBindings.get(currentCL); \n            if (result != null) \n                return result; \n            currentCL = currentCL.getParent(); \n        } \n\n        if (result == null) \n            throw new IllegalStateException(\"Illegal class loader binding\"); \n\n        return result; \n\n    }", "id": 153313, "time": "2012-01-31T03:02:24Z", "creator": "xhhsld@gmail.com", "creation_time": "2012-01-31T03:02:24Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 52563, "attachment_id": null, "text": "Had posted a message in the user list,\nhttp://tomcat.10.n6.nabble.com/Correct-behavior-while-checking-the-thread-binding-in-DirContextURLStreamHandler-td4345124.html", "id": 153314, "time": "2012-01-31T03:03:21Z", "creator": "xhhsld@gmail.com", "creation_time": "2012-01-31T03:03:21Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 52563, "is_private": false, "text": "As mentioned in the user list, this code seems to work just fine -- it's just slightly unclear while reading the code what is going on.\n\nIs there a legitimate bug, here?\n\nIf so, please clearly state the steps-to-reproduce.", "id": 153348, "time": "2012-02-01T21:52:59Z", "creator": "chris@christopherschultz.net", "creation_time": "2012-02-01T21:52:59Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 52563, "is_private": false, "id": 153461, "creation_time": "2012-02-05T07:47:26Z", "time": "2012-02-05T07:47:26Z", "creator": "xhhsld@gmail.com", "text": "I did not clarify it clearly, the issue occured in Geronimo, while I think that it is better to do some changes on Tomcat side, I mean the get method.\nOn Tomcat side, in the startInternal method of StandardContext, the execution order is something like :\na. resourcesStart() ---> Initial the resources variable\nb. load.start() ---> Bind the resources with the current classloader\nc. Some other initialization work, like servlet.onStartup, listener.start\nBut from the integration side, Geronimo has its own classloader creation and destorying, and it did not has the WebAppLoader thing. \nFrom the codes while invoking listenerStart/filterStart/loadOnStartup in StandardContext, bindThread method will be invoked and actually I found that Tomcat will also bind the context with the current method with the codes below :\nprotected ClassLoader bindThread() {\n......\nDirContextURLStreamHandler.bindThread(getResources());\n......\n}\nWhile that binding is 'always' ignored in the current DirContextURLStreamHandler.get() method.", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 52563, "attachment_id": null, "text": "The current behaviour is intention. See r287546", "id": 153469, "time": "2012-02-05T18:41:33Z", "creator": "markt@apache.org", "creation_time": "2012-02-05T18:41:33Z", "is_private": false}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Created attachment 28270\n2012-02-05_tc8_DirContextURLStreamHandler.patch\n\n(In reply to comment #4)\n> The current behaviour is intention. See r287546\n\nSo this behaviour was introduced 10 years ago and is well tested. Nobody ever complained about seeing IllegalStateException(\"Illegal class loader binding\") failure enough to change the code.\n\n(In reply to comment #0)\n> Think that the code logic should be something like :\n> a. Check whether a value is binding on the current thread context classloader,\n> if does then return.\n> b. Check whether a value is binding with the current thread, if does then\n> return.\n> c. Check the classloader hierarchy to find a binding value.\n>\n\nI am against a.,b.,c., because it changes current behaviour.\n\nI would be OK with a.,c.,b.. With a,c,b it will have the same behavour as the current code, but will handle an additional use case without throwing an ISE.\n\n-> patch against trunk attached\n\nBut I would like to see a valid use case for this new feature. Some sample code. Unused features are hard to maintain.\n\n\n> Geronimo has its own classloader creation and\n> destroying, and it did not has the WebAppLoader thing.\n\nMaybe a bug is there? It is hard to understand the whole picture from your short description in Comment 3.", "id": 153473, "time": "2012-02-05T19:21:58Z", "bug_id": 52563, "creation_time": "2012-02-05T19:21:58Z", "is_private": false, "attachment_id": 28270}, {"count": 6, "tags": [], "bug_id": 52563, "is_private": false, "text": "Thanks for your response. I copied the comment from the r287546\n--->\nUpdate the algortithm, weighting it towards trying the context CL association\n  first (since that's what is used now in Catalina). In some very special cases,\n  the thread binding will be checked, as well as the parent classloader.\n<---\nFrom the comment, I am thinking that it did not state that the initial purpose is to check the classloader hierarchy firstly, and then the thread binding. Also, from the code logic now, if it really means to check the classloader hierarchy firstly, why not put those codes in the end of the get method ?\nFrom another side, think that in most application server, including Tomcat, the context classloader should be the web application classloader, and it always has parent classloader, which may be library classloader or server runtime classloader, so the value binding on the thread will never have chance to be used, as it always throw an IllegalStateException.", "id": 153485, "time": "2012-02-06T03:07:32Z", "creator": "xhhsld@gmail.com", "creation_time": "2012-02-06T03:07:32Z", "attachment_id": null}]
[{"count": 0, "attachment_id": null, "creator": "jglick@apache.org", "is_private": false, "id": 165443, "time": "2013-02-22T17:24:27Z", "bug_id": 54601, "creation_time": "2013-02-22T17:24:27Z", "tags": [], "text": "See https://issues.jenkins-ci.org/browse/JENKINS-7702 and http://issues.gradle.org/browse/GRADLE-1245 for background. Reproduced in 6.0.36 though reported also in Tomcat 7.\n\nIf you set an environment variable $JAVA_OPTS (say, \u2018export JAVA_OPTS=-server\u2019) before running startup.sh, the Catalina JVM will include an environment variable JAVA_OPTS set to e.g. \u2018-server -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\u2019. (This is not true if you do _not_ set JAVA_OPTS yourself: catalina.sh will modify a local shell variable but it does not export it.)\n\nNormally this is harmless. But if the web application happens to fork an external process which happens to be one of the many Java applications that interpret $JAVA_OPTS when defined as JVM parameters, and that application uses java.util.logging at any point, then that application will generally crash because ClassLoaderLogManager is not in its classpath.\n\nIndeed we did not really want to be passing -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager to the subprocess. If the user decided to specify some JAVA_OPTS for Tomcat, we should either pass this var unmodified to the JVM, or not pass it at all.\n\nThe fix seems simple enough (patch format upon request): in catalina.sh, replace\n\nif [ -z \"$LOGGING_MANAGER\" ]; then\n  JAVA_OPTS=\"$JAVA_OPTS -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\"\nelse\n  JAVA_OPTS=\"$JAVA_OPTS $LOGGING_MANAGER\"\nfi\n\nwith\n\nif [ -z \"$LOGGING_MANAGER\" ]; then\n  LOGGING_MANAGER=-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\nfi\nCATALINA_JAVA_OPTS=\"$JAVA_OPTS $LOGGING_MANAGER\"\n\nand then replace subsequent references to $JAVA_OPTS with $CATALINA_JAVA_OPTS. Optionally also\n\nunset JAVA_OPTS\n\nsince any JVM options specified for the web server are likely to be inappropriate for other Java processes it spawns (though https://github.com/jenkinsci/gradle-plugin/pull/2 suggests otherwise).\n\nThe workaround in the web application is to sanitize the JAVA_OPTS environment variable before forking the subprocess, deleting the ClassLoaderLogManager configuration if found."}, {"count": 1, "tags": [], "text": "You are doing it wrong. The proper way to specify JAVA_OPTS value is to use a $CATALINA_BASE/bin/setenv.sh file.\nThere is no need to mark the variable for \"export\" there.\n\nThough I think it is easy to change catalina.sh here to avoid your issues, so I am marking it as an enhancement.", "attachment_id": null, "id": 165454, "creation_time": "2013-02-23T21:09:26Z", "time": "2013-02-23T21:09:26Z", "creator": "knst.kolinko@gmail.com", "bug_id": 54601, "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 29985\n2013-02-24_tc6_54601.patch\n\nPatch for Tomcat 6 - backport of r1449406", "attachment_id": 29985, "bug_id": 54601, "id": 165455, "time": "2013-02-23T21:44:14Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2013-02-23T21:44:14Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Fixed in 7.0 by r1449412 , will be in 7.0.38.\nProposed for 6.0.", "count": 3, "id": 165456, "time": "2013-02-23T21:51:56Z", "bug_id": 54601, "creation_time": "2013-02-23T21:51:56Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 54601, "is_private": false, "text": "This was fixed in Tomcat 6 in April 2013 by r1476739 and is included in 6.0.37.", "id": 171827, "time": "2013-12-19T10:45:28Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2013-12-19T10:45:28Z", "attachment_id": null}]
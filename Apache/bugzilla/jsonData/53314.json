[{"attachment_id": 28847, "tags": [], "creator": "peter.maher@poz.co.im", "text": "Created attachment 28847\nSample workbook with whole column named range\n\nWhere a workbook has a whole column cell reference (EG Sheet1!$A:$A) then creating an area reference will fail with the message \"Invalid Formula cell reference: 'Sheet1!$A'\"\n\nThe following code will fail for the sample attached:\n\n\n        FileInputStream fis = new FileInputStream(sampleSpreadsheet2.getFile().getAbsolutePath());\n        XSSFWorkbook wb = new XSSFWorkbook(fis);\n        int namedCellIdx = wb.getNameIndex(\"MyColumn\");\n        Name aNamedRange = wb.getNameAt(namedCellIdx);\n        AreaReference aref = new AreaReference(aNamedRange.getRefersToFormula());", "count": 0, "id": 159425, "time": "2012-05-29T06:53:54Z", "bug_id": 53314, "creation_time": "2012-05-29T06:53:54Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 53314, "text": "Also in the code snippet previously given, the following would fail after the assignment to aNamedRange:\n\nString sheetName = aNamedRange.getSheetName();", "id": 159426, "time": "2012-05-29T07:18:13Z", "creator": "peter.maher@poz.co.im", "creation_time": "2012-05-29T07:18:13Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 53314, "attachment_id": null, "text": "Just realised you posted this as a bug. Really, this is a user question and it should have been posted to the user list.\n\nAnyway, to repeat what I said, I do not think that it is possible to do what you want with Excel and, if it is an illegal operation, POI will not sidestep rules Excel enforces.\n\nI tried, using Excel, to create a named range using the formulae Sheet1!G and Sheet1!$G and in both cases, Excel generated an error. My advice would be to find an Excel users forum and ask how to create a named range that applies to a complete column there. If they know and can provide a formula that works, then we should be able to make POI do the same.\n\nI am going to change the status of the bug to NEEDINFO until you can find out how to perform this operation in Excel.", "id": 159456, "time": "2012-05-29T14:29:32Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2012-05-29T14:29:32Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 53314, "attachment_id": null, "id": 159463, "time": "2012-05-29T15:42:21Z", "creator": "peter.maher@poz.co.im", "creation_time": "2012-05-29T15:42:21Z", "is_private": false, "text": "Hi Mark B\n\nI think you have inadvertently honed in on the area of the problem in assuming that the range reference string which I was using was that which is contained in the exception - the salient point is that it isn't, POI is confused. (OK - brave statement since I don't know POI particularly well but I'd be happy to wager a small sum that this is a bug and not a user question!).\n\nWith a whole column range aNamedRange.getRefersToFormula() correctly returns the String \"Sheet1!$A:$A\" - The exception in new AreaReference(aNamedRange.getRefersToFormula()) says it has a problem with \"'Sheet1!$A'\" which highlights the mismatching that POI appears to be doing.\n\nHere is what to do in Excel (and the sample I uploaded was created in exactly this manner):\n\n* New Blank Workbook\n* Click on the header of column A so that the whole column is highlighted\n* Define a Name for this range called \"MyColumn\" (This should be for example Sheet1!$A:$A)\n* Put some data somewhere in column A so that the resultant AreaReference will be expected to contain something\n* Save as whatever.xlsx\n\nAmend my earlier code to refer to your saved workbook.  Execute code, bingo.\n\nAlso worth noting that multiple whole column range reference have the same problem (EG Sheet1!$A:$B).  Funnily enough whole row named ranges seem to work fine (EG =Sheet1!$5:$5), albeit I've only taken a cursory glance at those.\n\nThanks."}, {"count": 4, "tags": [], "text": "Thanks for the examples Peter.\n\nShould have the chance to play this afternoon to see if I cam make POI behave as Excel does. Will post if I make any progress.", "attachment_id": null, "bug_id": 53314, "id": 159490, "time": "2012-05-30T06:48:20Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2012-05-30T06:48:20Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 53314, "text": "That's great Mark, thanks.\n\nWhole rows also have problems although not the same exception at the same point:\n\nXSSFWorkbook wb = new XSSFWorkbook(fis);\nint namedCellIdx = wb.getNameIndex(\"MyRow\"); //EG Sheet1!$5:$5\nName aNamedRange = wb.getNameAt(namedCellIdx);\nString refersToFormula = aNamedRange.getRefersToFormula(); //Correct value returned\nAreaReference aref = new AreaReference(refersToFormula);\n//At this point aref.isSingleCell() == true, no matter how many cells on MyRow are populated\n//And first cell and last cell both have a formatAsString() value of \"Sheet1!$5\"\n\nI can raise a second bug for this if you think it is a separate issue, let me know.", "id": 159519, "time": "2012-05-30T10:11:28Z", "creator": "peter.maher@poz.co.im", "creation_time": "2012-05-30T10:11:28Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "Need to do some more digging, but I think the problem might lie in the constructor of the CellReference class as, and this is at first glance, it expects a cell reference to include both a column letter and row number. As far as it is concerned,only the sheet name is optional.\n\nRe the problem with rows and the AreaReference class it sounds as though that might be a separate issue but I will need to dig around further. Must admit that I am surprised that, and this is again at first glance, the same problem does not occur. Need to look at this more though.\n\nLooking like a good job I did not accept that wager!", "attachment_id": null, "bug_id": 53314, "id": 159526, "time": "2012-05-30T14:16:21Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2012-05-30T14:16:21Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 53314, "attachment_id": null, "id": 159533, "time": "2012-05-30T15:13:11Z", "creator": "peter.maher@poz.co.im", "creation_time": "2012-05-30T15:13:11Z", "is_private": false, "text": "Ta.\n\n.... you could look on it that the stake on the wager is the time it takes to fix the bug ;-)"}, {"count": 8, "tags": [], "bug_id": 53314, "text": "Peter,\n\nDo not know if I am missing something very obvious and would like to ask you to run a quick test for me please.\n\nWhen you call the getRefersToFormula() method on the Name object, then you would expect to get back a String that looks something like this - 'Sheet1!$A:$A' - if the whole of Column A on Sheet1 had been 'named' by the user. Then, if you pass this String to the constructor of the AreaReference class, you expect to see an exception thrown at that point.\n\nCan I ask you to run your code again but with a single addition? Strip the sheet name away from the reference before passing that String to the AreaReference class constructor. So, rather than pass this String 'Sheet1!$A:$A', make your code pass just this please '$A:$A'. My tests indicate that it is the presence of the sheet part that causes the exception to be thrown and I will need to dig around further to nail the problem down. For now, you might be able to run your application by stripping off the sheet part - for both rows and columns hopefully as I have not tested the former yet.", "id": 159546, "time": "2012-05-31T08:20:06Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2012-05-31T08:20:06Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 53314, "text": "Hi Mark\n\nYes your suggestion works ... with a limitation! (although this bit isn't critical for me currently as the workbooks I am working with are fairly small)\n\nIf you get all referenced cells of the new AreaReference - IE\nCellReference[] crefs = aref.getAllReferencedCells();\nThen crefs.length = 65536.  I was expecting 1048576.\n\nAlso crefs[i].sheetName == null should be expected given that reference passed in didn't include a sheet name, no big deal.\n\nSo your workaround will is fine so long as there is not data beyond row 65536.\n\nI've coded my own workaround for the timebeing - a bit of  a hack but basically getting the first and last actual rows of the Sheet so I change \"Sheet1!$A:$A\" to \"Sheet1!$A1:$A2345\" (Basically I didn't like that getAllReferencedCells() would return a huge array whilst I was only using about 1300 rows within the named column range).\n\nASIDE:  if aref.getAllReferencedCells() were to be used on a sheet with values in the first and last rows only it would reach an out of memory pretty soon if fixed for the 65536 limit (especially if the range contained multiple columns) - Therefore could probably do with a  new AP method to get all cells *actually* in use in an area rather than referenced by the area.  This would involve iterating over all the cells in the range so would be slower than getAllReferencedCells() but for sparsely populated ranges (typically whole column and whole row ranges) is a better option than running out of resources.", "id": 159553, "time": "2012-05-31T10:13:07Z", "creator": "peter.maher@poz.co.im", "creation_time": "2012-05-31T10:13:07Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 53314, "attachment_id": null, "is_private": false, "id": 159567, "time": "2012-05-31T15:53:47Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2012-05-31T15:53:47Z", "text": "Hello again Peter and thanks for your testing.\n\nThe reason why there are 'only' 65 odd thousand rows in a column is that the support for the OOXML format is not complete yet - at least the part that relates to the sort of operation you wish to perform is not. Yes, also the assumption is that you want ALL of the cells in the row or column and not just the ones that are or might be populated with data and this does have some attendant risks. Perhaps, it might be better to adopt the approach taken if you get an Iterator for the rows on a sheet or the cells on a row. There, as far as I am aware, you will only get the non null objects returned to you.\n\nMust admit that I got a hack very similar to your working but did not post it. Just as you did, I 'modified' the forumla returned by the call to getRefersToFormula() so that it pointed to the first cell on a row/column and the last cell on the row.column. The reason I did not post it was simple, the AreaReference could be created but it would return false if I called either the isWholeColumn() or isWholeRow() method. Comments in the source indicated that passing -1 as the index of the first cell on the row or column would trigger the AreaReference to 'see' the object as a whole row or column but I could not make that work at all.\n\nAs AreaReference can understand that A:A indicates a whole row and that only the inclusion of the sheet name seems to throw it, that is where I will concentrate for now. Will leave the bug open and post if I make any further progress."}, {"count": 11, "tags": [], "bug_id": 53314, "attachment_id": null, "text": "I tried to reproduce some of the issues discussed here but couldn't. Also the discussions are quite old and thus based on rather outdated versions of POI. Therefore I am closing this as WORKSFORME, please create new bug reports for anything that is still missing/incorrect now.", "id": 192684, "time": "2016-07-28T07:27:33Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-07-28T07:27:33Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 5637, "is_private": false, "id": 9224, "time": "2001-12-31T03:49:17Z", "creator": "avik.sengupta@dresdner-bank.com", "creation_time": "2001-12-31T03:49:17Z", "tags": [], "text": "If one wraps a testcase using a junit.extensions.TestSetup (the idea being to \nrun a set of setup routines only once for many fixtures) the \nXMLJunitResultFormatter throws an NPE if the setUp method of the TestSetup \nimplementation class throws an  AssertionFailedError (or indeed any other \nthrowable). \n\nThings are fine if the setUp method of a fixture (extending TestCase usually) \nthrows an Exception. Problems occur only on a TestSetup wrapper. Also, the \nPlainTextFormatter works fine, only the xml formatter complains. \n\nthe troublesome line is \"currentTest.setAttribute(ATTR_TIME,....\" in \"public \nvoid endTest(Test test) {\". Apparently currentTest is not populated when end \ntest is called in such a scenario. I could send a patch saying \"if \n(currentTest != null )......\" but dont know enuf about how Junit task to be \nsure that'll work, or thats all thats reqd. \n\n\n\n\n[aviks@ra test]$ ant all-test\nBuildfile: build.xml\n\nall-test:\n    [junit] Running AllTests\n\nBUILD FAILED\n\njava.lang.NullPointerException\n        at \norg.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.endTest\n(XMLJUnitResultFormatter.java:196)\n        at \norg.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.formatError\n(XMLJUnitResultFormatter.java:230)\n        at \norg.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.addFailure\n(XMLJUnitResultFormatter.java:207)\n        at \norg.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.addFailure\n(XMLJUnitResultFormatter.java:216)\n        at junit.framework.TestResult.addFailure(TestResult.java:46)\n        at junit.framework.TestResult.runProtected(TestResult.java:127)\n        at junit.extensions.TestSetup.run(TestSetup.java:23)\n        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run\n(JUnitTestRunner.java:231)\n        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM\n(JUnitTask.java:582)\n        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute\n(JUnitTask.java:403)        at \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute\n(JUnitTask.java:380)        at org.apache.tools.ant.Task.perform(Task.java:217)\n        at org.apache.tools.ant.Target.execute(Target.java:184)\n        at org.apache.tools.ant.Target.performTasks(Target.java:202)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:601)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:560)\n        at org.apache.tools.ant.Main.runBuild(Main.java:454)\n        at org.apache.tools.ant.Main.start(Main.java:153)\n        at org.apache.tools.ant.Main.main(Main.java:176)\n\nTotal time: 2 seconds"}, {"count": 1, "tags": [], "text": "Created attachment 964\nTest case for this bug, run \"ant single-test\" which works, but  \"ant all-test\" uses a TestSetup wrapper and fails", "attachment_id": 964, "bug_id": 5637, "id": 9225, "time": "2001-12-31T03:51:44Z", "creator": "avik.sengupta@dresdner-bank.com", "creation_time": "2001-12-31T03:51:44Z", "is_private": false}, {"count": 2, "tags": [], "text": "I've looked into this issue (downloading your attachment and have duplicated \nit).  JUnit's TestResult class (which is what TestCase's use to run with) calls \nstartTest right away, but the TestSetup class used in your example does not \n(TestSetup's run method calls setUp prior to calling startTest on the \nlistener).  I'm not sure if this is a JUnit flaw or not, but its certainly an \ninteresting and perhaps tricky issue.\nI've made a small patch:\n\n    public void endTest(Test test) {\n        Element currentTest = (Element) testElements.get(test);\n        if (currentTest == null) {                          // <-- NEW\n            startTest(test);                                // <-- NEW\n            currentTest = (Element) testElements.get(test); // <-- NEW\n        }                                                   // <-- NEW\n        Long l = (Long) testStarts.get(test);\n        currentTest.setAttribute(ATTR_TIME,\n                                 \"\"+((System.currentTimeMillis()-l.longValue())\n                                           / 1000.0));\n    }\n\nWhich caused the test to run (and fail) as expected with this in the XML \nresults:\n\n  <testcase name=\"unknown\" time=\"0.0\">\n    <failure message=\"Throw error in Global Setup\" type=\"junit.framework.Asserti\nonFailedError\">junit.framework.AssertionFailedError: Throw error in Global Setup\n\n        at AllTests$1.setUp(AllTests.java:19)\n        at junit.extensions.TestSetup$1.protect(TestSetup.java:18)\n        at junit.extensions.TestSetup.run(TestSetup.java:23)\n</failure>\n  </testcase>\n\nAlthough notice that the testcase name is \"unknown\".  Why is that?\n\nAnyway, if this patch seems harmless enough then I will apply it, but I want to \nget some other committer (Stephane?) feedback before doing so.\n", "attachment_id": null, "bug_id": 5637, "id": 9240, "time": "2001-12-31T17:07:15Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2001-12-31T17:07:15Z", "is_private": false}, {"count": 3, "tags": [], "creator": "sbailliez@apache.org", "text": "TestSetup does not call startTest nor endTest as far as I can see...\nIt makes sense since it is only a wrapper and not a testcase, so there's no \npoint in doing it otherwise it will send useless info to the listeners. Here it \njust adds a transparent layer.\n\nI think your patch is OK, however it would be nice to add a little comment in \nthe code to explain why it is necessary. Otherwise this can quickly be removed \nduring aggressive refactoring :-)\n\nNote that I hope to commit some code soon in the sandbox as a startpoint for a \nnew testrunner and formatter architecture. The testrunner is a remote one so it \nshould gives additional flexibility.", "id": 9294, "time": "2002-01-02T13:50:04Z", "bug_id": 5637, "creation_time": "2002-01-02T13:50:04Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 5637, "text": "Fixed to ensure that startElement is always called.", "count": 4, "id": 9365, "time": "2002-01-04T17:41:59Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-01-04T17:41:59Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "mhilpert@gmx.de", "attachment_id": null, "is_private": false, "id": 123218, "time": "2008-12-10T03:27:50Z", "bug_id": 46374, "creation_time": "2008-12-10T03:27:50Z", "text": "As posted as a FOP bug 46371 (https://issues.apache.org/bugzilla/show_bug.cgi?id=46371), this is rather a Batik issue:\n\nFonts used in SVG images need to be available in C:\\WINNT\\Fonts (or: OS font system). Due to font license restrictions, some fonts only are allowed to be available for our Java application and not OS wide. Therefore, I copied the TTF fonts in a custom directory which works well with Apache FOP. I tried to set a custom font configuration for the Java application via\n\njava -Dsun.awt.fontconfig ...\n\nand this basically works in a test application as I am able to create a Font object with the correct family name and sub name. But Batik seems to ignore this."}, {"count": 1, "tags": [], "bug_id": 46374, "attachment_id": null, "text": "It is true that currently Batik does not have a way for someone to\nprovide arbitrary fonts to Batik.  However we do support CSS @font-face\nto reference arbitrary TrueType fonts via URL.  See the following SVG\nfile for examples of how to accomplish this:\n\nhttp://svn.apache.org/viewvc/xmlgraphics/batik/trunk/samples/tests/spec/fonts/fontFace.svg?view=markup\n\nA  lso if you successfuly added the font to the AWT font list then Batik\nshould see and use it.  The Code Batik uses to know about 'system fonts'\n(where system here means the JVM) is:\n\n        GraphicsEnvironment env;\n        env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n        String[] fontNames = env.getAvailableFontFamilyNames();\n\n   If the fontNames array includes your font then Batik _will_\nuse it.  It's possible the name of the font Java see's isn't \nwhat you think it is which could cause problems as well.\n", "id": 123221, "time": "2008-12-10T05:48:44Z", "creator": "deweese@apache.org", "creation_time": "2008-12-10T05:48:44Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46374, "attachment_id": 23660, "text": "Created attachment 23660\nSample test case that should work.", "id": 127001, "time": "2009-05-13T21:24:57Z", "creator": "mactuitui@gmail.com", "creation_time": "2009-05-13T21:24:57Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 46374, "is_private": false, "text": "I am trying to embed a non-system font to a SVG file using the SVGGraphics2D class. \n\nBatik actually embeds a font, but a standard Java font one I think. The attachment gives a sample that should work but does not.", "id": 127002, "time": "2009-05-13T21:29:05Z", "creator": "mactuitui@gmail.com", "creation_time": "2009-05-13T21:29:05Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46374, "text": "I found at least one issue with font embedding. \n\nThe way Batik is storing the font usage information is storing the wrong font name, so it generates the glyphs using a default Dialog font when the desired font is not available system-wide.\n\nIn svggen.SVGFont.java:\n\n############\nprivate static Font createCommonSizeFont(Font font) {\n   Map attributes = new HashMap(font.getAttributes());\n   attributes.put(TextAttribute.SIZE, new Float(COMMON_FONT_SIZE));\n   // Remove Transform from font otherwise it will be applied twice.\n   attributes.remove(TextAttribute.TRANSFORM);\n   return new Font(attributes);\n}\n############\n\nThe last line that is calling the Font constructor actually fails silently if the \"font\" object is not a system font. This is called when creating the map of which characters are used by which font, so the String used to store the font family and weight correspond to the Dialog font used as a fallback.\n\nA simple way to solve this problem would be to use the deriveFont method instead:\n\n############\nprivate static Font createCommonSizeFont(Font font) {\n   Map attributes = new HashMap(font.getAttributes());\n   attributes.put(TextAttribute.SIZE, new Float(COMMON_FONT_SIZE));\n   // Remove Transform from font otherwise it will be applied twice.\n   attributes.remove(TextAttribute.TRANSFORM);\n   return font.deriveFont(attributes);\n}\n############\n\n(or maybe just a \n############\nprivate static Font createCommonSizeFont(Font font) {\n   return font.deriveFont(new Float(COMMON_FONT_SIZE));\n}\n############\nbut I am not sure about the transform you are removing)\n\nSince any generated SVG file contains the non-system font name and family, but uses the default shapes (see the previous attachment), I guess the fonts are stored in a different place, but the toSVG method is calling anyway createCommonSizeFont before generating the glyphs.\n\nWhy I am not commiting a patch is because I have not found yet where the xmlwriter is calling the toSVG method of SVGFont that is actually writing the glyph shapes. I am wondering when the method is actually called (non system fonts might be destroyed between the drawString call and the stream call).\n\nI hope this helps.", "id": 127003, "time": "2009-05-13T23:47:10Z", "creator": "mactuitui@gmail.com", "creation_time": "2009-05-13T23:47:10Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "cam@apache.org", "attachment_id": null, "is_private": false, "id": 127029, "time": "2009-05-14T18:40:23Z", "bug_id": 46374, "creation_time": "2009-05-14T18:40:23Z", "text": "Hi Alexis.\n\n(In reply to comment #4)\n> In svggen.SVGFont.java:\n> \n> ############\n> private static Font createCommonSizeFont(Font font) {\n>    Map attributes = new HashMap(font.getAttributes());\n>    attributes.put(TextAttribute.SIZE, new Float(COMMON_FONT_SIZE));\n>    // Remove Transform from font otherwise it will be applied twice.\n>    attributes.remove(TextAttribute.TRANSFORM);\n>    return new Font(attributes);\n> }\n> ############\n> \n> The last line that is calling the Font constructor actually fails silently if\n> the \"font\" object is not a system font. This is called when creating the map of\n> which characters are used by which font, so the String used to store the font\n> family and weight correspond to the Dialog font used as a fallback.\n\nMakes sense.\n\n> A simple way to solve this problem would be to use the deriveFont method\n> instead:\n> \n> ############\n> private static Font createCommonSizeFont(Font font) {\n>    Map attributes = new HashMap(font.getAttributes());\n>    attributes.put(TextAttribute.SIZE, new Float(COMMON_FONT_SIZE));\n>    // Remove Transform from font otherwise it will be applied twice.\n>    attributes.remove(TextAttribute.TRANSFORM);\n>    return font.deriveFont(attributes);\n> }\n> ############\n> \n> (or maybe just a \n> ############\n> private static Font createCommonSizeFont(Font font) {\n>    return font.deriveFont(new Float(COMMON_FONT_SIZE));\n> }\n> ############\n> but I am not sure about the transform you are removing)\n\nWhen using deriveFont(), all of the existing attributes are kept from the original Font, and only those present in the passed-in Map are overwritten.  So to remove the TRANSFORM attribute, you need to provide a map with a [TRANSFORM, null] entry in it:\n\n  private static Font createCommonSizeFont(Font font) {\n      Map attributes = new HashMap();\n      attributes.put(TextAttribute.SIZE, new Float(COMMON_FONT_SIZE));\n      attributes.put(TextAttribute.TRANSFORM, null);\n      return font.deriveFont(attributes);\n  }\n\n> Since any generated SVG file contains the non-system font name and family, but\n> uses the default shapes (see the previous attachment), I guess the fonts are\n> stored in a different place, but the toSVG method is calling anyway\n> createCommonSizeFont before generating the glyphs.\n> \n> Why I am not commiting a patch is because I have not found yet where the\n> xmlwriter is calling the toSVG method of SVGFont that is actually writing the\n> glyph shapes. I am wondering when the method is actually called (non system\n> fonts might be destroyed between the drawString call and the stream call).\n\nThe glyph shapes are extracted with the\n\n  gv.getGlyphOutline(0)\n\ncalls that are in SVGFont.toSVG().  Since they are called on a GlyphVector that was obtained from the common size font, that'd be why the wrong shapes were written out in the SVG.\n\n\nI've just committed the above change as r774981.  It makes your test case work, Alexis.\n\n\nM.H., are you able to test if this allows FOP to work with other fonts?"}, {"count": 6, "tags": [], "bug_id": 46374, "attachment_id": 28192, "text": "Created attachment 28192\npatch with proposal of fix for adding external fonts\n\nAttached a patch with a proposal for allowing external fonts to be used by batik.\nIt adds 2 extra methods to the useragent. UserAgentAdapter implements the default behavior.\n\nadded some extra changes to squiggle, allowing you to test this more easily, this is for me not necessary but nice to have.\n* added fonts preferences page\n** allow for configuring the default css font. (not yet happy about the layouting)\n** allow for configuring extra font directories\n*** these extra font directories are first checked before fallbacking to fonts known to the AWT graphics environment.", "id": 153052, "time": "2012-01-23T14:54:32Z", "creator": "Hugo.de.Almeida.Cocharro@inventivegroup.com", "creation_time": "2012-01-23T14:54:32Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 46374, "is_private": false, "text": "Created attachment 28193\nicon for font preference page", "id": 153053, "time": "2012-01-23T14:57:25Z", "creator": "Hugo.de.Almeida.Cocharro@inventivegroup.com", "creation_time": "2012-01-23T14:57:25Z", "attachment_id": 28193}, {"count": 8, "tags": [], "bug_id": 46374, "attachment_id": 28194, "text": "Created attachment 28194\nicon for font preference page", "id": 153054, "time": "2012-01-23T14:57:44Z", "creator": "Hugo.de.Almeida.Cocharro@inventivegroup.com", "creation_time": "2012-01-23T14:57:44Z", "is_private": false}]
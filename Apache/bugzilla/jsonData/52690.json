[{"count": 0, "tags": [], "text": "", "is_private": false, "id": 153855, "creator": "phil@spencer.es", "time": "2012-02-16T23:01:37Z", "bug_id": 52690, "creation_time": "2012-02-16T23:01:37Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "It is extremely important that the size of the decrypted data stream exactly matches that specified in the input stream. Failure to ensure this means that windows System.IO.Packaging.Package.Open() method will return an error when trying to open the decrypted document. In practice this means that MS Office will report that the file is corrupt\n\nJust reading to the end of the input stream is not sufficient because there are normally padding bytes that must be discarded\n\nCurrently Decryptor and/or its subclasses read and *discard* the required length\n\nIn order to be able to create valid documents from encrypted ones, this length must be made available so the output stream can be truncated\n\nI wlll submit my proposed patch when I have sown time to create it in the required format", "attachment_id": null, "bug_id": 52690, "id": 153856, "time": "2012-02-16T23:15:36Z", "creator": "phil@spencer.es", "creation_time": "2012-02-16T23:15:36Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 52690, "text": "I'm not quite clear on what you're trying to do, where the problem comes in, and why you're talking about .net APIs?\n\nCould you maybe provide some more detail (or even better a unit test) that explains what goes wrong, where and why?", "count": 2, "id": 153941, "time": "2012-02-20T11:09:03Z", "creator": "apache@gagravarr.org", "creation_time": "2012-02-20T11:09:03Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 52690, "is_private": false, "count": 3, "id": 153960, "time": "2012-02-20T21:52:28Z", "creator": "phil@spencer.es", "creation_time": "2012-02-20T21:52:28Z", "text": "Sorry, Buzilla and/or my browser lost my original description of the problem\n\nThe issue is that the classic POI 'myDecrypt' method below in general produces output files that are considered corrupt by Micrososft Office\n\nIf say you use MS Word to open a .docx file decrypted by this method you will get an error dialog saying the file is corrupt and asking if you would like attempt recovery (which incidentally will succeed)\n\nThe problem is that the output length is too long. Output must be truncated to the length specified in the input data stream and currently discarded for example in \"EcmaDecryptor>>getDataStream(DirectoryNode dir)\"\n\n This is the offending line\n\n 128:       long size = dis.readLong();\n\nThe solution is to save this length in an instance variable of the class Decryptor so that it is accessible to user written code (Decryptor>>getLength()). Then myDecrypt method can then be modified to work correctly.\n=====\n\tprivate void myDecrypt(String filename, String password) throws FileNotFoundException, IOException {\n\t\tFile inFile = new File(filename);\n\t\tFile outFile = new File(new File(filename).getParentFile(), \"Decrypted\" + new File(filename).getName());\n\n\t\tSystem.err.println(\"Attempting to decrypt \" + inFile.getAbsolutePath() + \" to \" + outFile.getAbsolutePath());\n\n\t\tPOIFSFileSystem filesystem = new POIFSFileSystem(new FileInputStream(inFile));\n\t\tEncryptionInfo info = new EncryptionInfo(filesystem);\n\t\tDecryptor d = Decryptor.getInstance(info);\n\n\t\ttry {\n\t\t\tif (!d.verifyPassword(password)) {\n\t\t\t\tthrow new RuntimeException(\"Unable to process: wrong password\");\n\t\t\t}\n\n\t\t\tInputStream dataStream = d.getDataStream(filesystem);\n\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\tbyte buf[] = new byte[1024];\n\t\t\tint len;\n\t\t\twhile ((len = dataStream.read(buf)) > 0)\n\t\t\t\tout.write(buf, 0, len);\n\t\t\tout.close();\n\t\t\tdataStream.close();\n\n\t\t} catch (GeneralSecurityException ex) {\n\t\t\tthrow new RuntimeException(\"Unable to process encrypted document\", ex);\n\t\t}\n\t\tSystem.err.println(\"Finished \" + inFile.getAbsolutePath());\n\t}"}, {"count": 4, "tags": [], "creator": "yegor@dinom.ru", "text": "Please attach a decrypted file so that we can test your code sample.\n\nYegor  \n\n(In reply to comment #3)\n> Sorry, Buzilla and/or my browser lost my original description of the problem\n> \n> The issue is that the classic POI 'myDecrypt' method below in general produces\n> output files that are considered corrupt by Micrososft Office\n> \n> If say you use MS Word to open a .docx file decrypted by this method you will\n> get an error dialog saying the file is corrupt and asking if you would like\n> attempt recovery (which incidentally will succeed)\n> \n> The problem is that the output length is too long. Output must be truncated to\n> the length specified in the input data stream and currently discarded for\n> example in \"EcmaDecryptor>>getDataStream(DirectoryNode dir)\"\n> \n>  This is the offending line\n> \n>  128:       long size = dis.readLong();\n> \n> The solution is to save this length in an instance variable of the class\n> Decryptor so that it is accessible to user written code\n> (Decryptor>>getLength()). Then myDecrypt method can then be modified to work\n> correctly.\n> =====\n>     private void myDecrypt(String filename, String password) throws\n> FileNotFoundException, IOException {\n>         File inFile = new File(filename);\n>         File outFile = new File(new File(filename).getParentFile(), \"Decrypted\"\n> + new File(filename).getName());\n> \n>         System.err.println(\"Attempting to decrypt \" + inFile.getAbsolutePath()\n> + \" to \" + outFile.getAbsolutePath());\n> \n>         POIFSFileSystem filesystem = new POIFSFileSystem(new\n> FileInputStream(inFile));\n>         EncryptionInfo info = new EncryptionInfo(filesystem);\n>         Decryptor d = Decryptor.getInstance(info);\n> \n>         try {\n>             if (!d.verifyPassword(password)) {\n>                 throw new RuntimeException(\"Unable to process: wrong\n> password\");\n>             }\n> \n>             InputStream dataStream = d.getDataStream(filesystem);\n> \n>             OutputStream out = new FileOutputStream(outFile);\n>             byte buf[] = new byte[1024];\n>             int len;\n>             while ((len = dataStream.read(buf)) > 0)\n>                 out.write(buf, 0, len);\n>             out.close();\n>             dataStream.close();\n> \n>         } catch (GeneralSecurityException ex) {\n>             throw new RuntimeException(\"Unable to process encrypted document\",\n> ex);\n>         }\n>         System.err.println(\"Finished \" + inFile.getAbsolutePath());\n>     }", "id": 154061, "time": "2012-02-23T12:06:04Z", "bug_id": 52690, "creation_time": "2012-02-23T12:06:04Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "is_private": false, "id": 154162, "time": "2012-02-26T09:03:41Z", "bug_id": 52690, "creation_time": "2012-02-26T09:03:41Z", "text": "As of r1293784, POI provides Decryptor#getLength() that returns length of the decrypted data stream. \n\nThe getLength() method must be called after Decryptor.getDataStream() where the length variable is initialized. An attempt to call getLength() prior to getDataStream() will result in IllegalStateException. \n\nRegards,\nYegor"}]
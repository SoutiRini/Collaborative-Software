[{"count": 0, "tags": [], "bug_id": 56977, "is_private": false, "id": 177820, "creation_time": "2014-09-12T16:52:31Z", "time": "2014-09-12T16:52:31Z", "creator": "bpkroth@gmail.com", "text": "Created attachment 32013\nA test PHP file to help in reproducing the crash.\n\nWe have an application (Moodle 2.6) that switches from sending \"Cache-Control: public\" to \"Cache-Control: private\" headers for the same content depending upon whether or not the user is logged in.\n\nThat application is served via a reverse proxy using mod_proxy/mod_proxy_http to backends running mod_php5/mod_xsendfile (among others).\n\nTraditionally we've also allowed the use of mod_disk_cache on the reverse proxy.\n\nRecently we also added mod_mem_cache *before* the mod_disk_cache confs so that highly requested content could be served more rapidly from the in memory cache:\n<IfModule mod_mem_cache.c>\nCacheEnable mem /\n</IfModule>\n<IfModule mod_disk_cache.c>\nCacheEnable disk /\n</IfModule>\n\nIt was discovered that for that content that switches between public and private Cache-Control headers, when the request is made for content that is in the cache (originally via public Cache-Control headers), but has expired so that a revalidation request is required, then the Apache process will segfault.\n\nBased on the backtrace from the coredump, it appears that the segfault is while mod_mem_cache is attempting to remove the now stale (since it now has Cache-Control: private) entry from the cache.\n\nIf we remove mod_mem_cache from the mix, then this does not occurr.  mod_disk_cache appropriately stores, serves, and then removes the cache entry as necessary.\n\nAttached are a test php script (proxycaching-index.php) and proxy coredump backtrace output (reverse-proxy-backtrace).\n\nIt was also reported to me, though I could not reproduce this other error case, that aside from segfaults, sometimes the mod_mem_cache configuration would just return \"garbage data\".  My guess would be that it returned partial data or data from an alternative Vary.\n\nAlso, I wasn't able to reliably reproduce this bug with content < MCacheMaxObjectSize or without the \"Accept-Ranges: bytes\" header.  I suspect that those aspects are also tied up in the issue.\n\nSo, to test this I did the following:\n- setup a reverse proxy with mod_mem_cache and mod_disk_cache (in that order).\n- place proxycaching-index.php in /proxycaching/ of a vhost.  Make sure $private = 0 at the top of the file\n- add \"XSendFile On\" in that backend vhost's .htacces (just a convinience for sending the file)\n- copy /usr/share/cups/data/default-testpage.pdf (or someother pdf) into /proxycaching/default-testpage.pdf.  It may or may not be important that the size of that file is > MCacheMaxObjectSize\n- run the following a few times to prime the cache in each worker mpm process with \"public content\":\n# curl -v -s -o /tmp/curl.out http://vhostaddress/proxycaching/index.php; file /tmp/curl.out; ls -l /tmp/curl.out\n- switch $private = 1 in the /proxycaching/index.php file\n# rerun the curl command a few times\n\nLet me know if you need any more details.\n\nThanks,\nBrian", "attachment_id": 32013}, {"count": 1, "tags": [], "bug_id": 56977, "text": "Created attachment 32014\nThe coredump backtrace output from the reverse proxy.", "id": 177821, "time": "2014-09-12T16:53:00Z", "creator": "bpkroth@gmail.com", "creation_time": "2014-09-12T16:53:00Z", "is_private": false, "attachment_id": 32014}, {"count": 2, "tags": [], "creator": "rpluem@apache.org", "text": "Honest opinion: Don't use mod_mem_cache. It does not speed up things compared to mod_disk_cache. mod_mem_cache's cache is not shared between different httpd processes. So you waste more memory for getting less performance. Given that you have enough memory in your server mod_disk_cache content is kept in the buffer caches by the OS. If you don't use SSL stuff is send via sendfile which moves stuff from the buffer caches to the socket directly inside the kernel. If you are using SSL stuff will need to be MMAP which is still very fast.", "id": 177824, "time": "2014-09-12T17:47:05Z", "bug_id": 56977, "creation_time": "2014-09-12T17:47:05Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 56977, "text": "(In reply to Ruediger Pluem from comment #2)\n> Honest opinion: Don't use mod_mem_cache. It does not speed up things\n> compared to mod_disk_cache. mod_mem_cache's cache is not shared between\n> different httpd processes. So you waste more memory for getting less\n> performance. Given that you have enough memory in your server mod_disk_cache\n> content is kept in the buffer caches by the OS. If you don't use SSL stuff\n> is send via sendfile which moves stuff from the buffer caches to the socket\n> directly inside the kernel. If you are using SSL stuff will need to be MMAP\n> which is still very fast.\n\nYeah, I don't disagree.  Under very high load there is a difference between mod_mem_cache and mod_disk_cache in so far as the latter requires some extra syscalls to the OS for file permissions and handles and the like, which can be particularly expensive in a VM environment, but that is kind of an edge case.", "id": 177825, "time": "2014-09-12T18:15:02Z", "creator": "bpkroth@gmail.com", "creation_time": "2014-09-12T18:15:02Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "(In reply to bpkroth from comment #1)\n> Created attachment 32014 [details]\n> The coredump backtrace output from the reverse proxy.\n\nI think this crash is the same as my recent question in dev@httpd thread \"mod_cache/mod_mem_cache questions\" about the difference between remove_url and remove_entity.", "id": 177826, "time": "2014-09-12T18:34:41Z", "bug_id": 56977, "creation_time": "2014-09-12T18:34:41Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "ylavic.dev@gmail.com", "is_private": false, "id": 177827, "time": "2014-09-12T18:59:57Z", "bug_id": 56977, "creation_time": "2014-09-12T18:59:57Z", "tags": [], "text": "(In reply to bpkroth from comment #3)\n> (In reply to Ruediger Pluem from comment #2)\n> > Honest opinion: Don't use mod_mem_cache. It does not speed up things\n> > compared to mod_disk_cache. mod_mem_cache's cache is not shared between\n> > different httpd processes. So you waste more memory for getting less\n> > performance. Given that you have enough memory in your server mod_disk_cache\n> > content is kept in the buffer caches by the OS. If you don't use SSL stuff\n> > is send via sendfile which moves stuff from the buffer caches to the socket\n> > directly inside the kernel. If you are using SSL stuff will need to be MMAP\n> > which is still very fast.\n> \n> Yeah, I don't disagree.  Under very high load there is a difference between\n> mod_mem_cache and mod_disk_cache in so far as the latter requires some extra\n> syscalls to the OS for file permissions and handles and the like, which can\n> be particularly expensive in a VM environment, but that is kind of an edge\n> case.\n\nA good alternative is also to use mod_disk_cache on a directory which a (mounted) ramdisk cache."}, {"count": 6, "tags": [], "bug_id": 56977, "attachment_id": null, "text": "(In reply to Yann Ylavic from comment #5)\n> (In reply to bpkroth from comment #3)\n> > (In reply to Ruediger Pluem from comment #2)\n> > > Honest opinion: Don't use mod_mem_cache. It does not speed up things\n> > > compared to mod_disk_cache. mod_mem_cache's cache is not shared between\n> > > different httpd processes. So you waste more memory for getting less\n> > > performance. Given that you have enough memory in your server mod_disk_cache\n> > > content is kept in the buffer caches by the OS. If you don't use SSL stuff\n> > > is send via sendfile which moves stuff from the buffer caches to the socket\n> > > directly inside the kernel. If you are using SSL stuff will need to be MMAP\n> > > which is still very fast.\n> > \n> > Yeah, I don't disagree.  Under very high load there is a difference between\n> > mod_mem_cache and mod_disk_cache in so far as the latter requires some extra\n> > syscalls to the OS for file permissions and handles and the like, which can\n> > be particularly expensive in a VM environment, but that is kind of an edge\n> > case.\n> \n> A good alternative is also to use mod_disk_cache on a directory which a\n> (mounted) ramdisk cache.\n\nThis is a little off topic from what the bug was actually about (errors in mod_mem_cache), but I'll bite.\n\nSomeone correct me if I'm wrong, but using tmpfs/ramdisk won't avoid your file open(), read()/sendfile(), write(), etc. syscalls from going through the OS to access the cache files instead of just staying in the Apache process space when doing cache lookups.  I believe that context switch is what accounts for the performance difference between mod_mem_cache and mod_disk_cache.\n\nAs Ruediger pointed out, if you have enough memory free, then the OS is already going to do a good job of caching the dirents, inode and data blocks in the page cache anyways, so you shouldn't be seeing any major read performance differences between mod_disk_cache and mod_mem_cache aside from those calls to do the lookups and get handles on the file.  Even write performance to the cache shouldn't be too bad given the OS will probably buffer that too and write it out to disk in the background.\n\nBut I guess the only way to know for sure would be to test it :)\n\n\nAll that said, you don't have to convince me not to use mod_mem_cache anymore.  Consider this just a heads up that it's broken in some more edge cases.  Perhaps a warning to all future users who run across it :)\n\nCheers,\nBrian", "id": 177828, "time": "2014-09-12T19:22:15Z", "creator": "bpkroth@gmail.com", "creation_time": "2014-09-12T19:22:15Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 59711, "attachment_id": 33952, "text": "Created attachment 33952\npatch to fix the issue\n\nThe complete details are provided here: http://www.mail-archive.com/dev%40apr.apache.org/msg26471.html\n\nIn short:\nfreeing _wenviron in apr_app.c and start.c will trigger another free from within the Visual Studio runtime when the application terminates at least since Visual Studio 2010 (presumably with VS 2008 and VS 2005 too). Hence testapp.exe raises a runtime exception.\n\nThe applied patch fixes the issue for me and is a revised version of the patch attached to the mailing list thread above (in addition to dropping the free-call it also removes the then unnecessary if-check and temp storage of the environment pointer.\n\npatch against apr 1.5.2 (but expected to work with any current version including 0.9.x and trunk)", "id": 191698, "time": "2016-06-15T20:30:27Z", "creator": "luke1410@gmx.de", "creation_time": "2016-06-15T20:30:27Z", "is_private": false}, {"count": 1, "tags": [], "text": "Some additional notes which might be of use:\nCorresponding code was added in r62861 - 01/29/2002 - wrowe\nLog:\nRejigger the API so we pass _DEBUG mode in Win32.  MSVCRT believes it\nis the master of it's own _environ, so let it continue to believe so.\n\nAttached a second patch with a proof-of-concept code change for the other approach to resolve the issue (presumably in a more future proof way).", "is_private": false, "id": 191700, "creator": "luke1410@gmx.de", "time": "2016-06-15T20:45:25Z", "bug_id": 59711, "creation_time": "2016-06-15T20:45:25Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 59711, "attachment_id": 33953, "text": "Created attachment 33953\nproof-of-concept patch for alternative approach", "id": 191701, "time": "2016-06-15T20:56:17Z", "creator": "luke1410@gmx.de", "creation_time": "2016-06-15T20:56:17Z", "is_private": false}, {"count": 3, "tags": [], "text": "Looks like the provided initial patch only resolves half of the problem. The double free is resolved, but the testapp.exe still crashes / triggers an exception if _environ is replaced with some content.\n\nThe problem for this case is that the runtime uninitialize-handling for the _environ-variable iterates over the separate elements and frees each separate element. However, since the APR code allocates a single block with apr_malloc_dbg the entire allocated memory is freed upon the first call already. Trying to access the second element's pointer then triggers a runtime access due to the access violation.\n\nHence to make the code work with the new handling in the VS runtime, we would have to rewrite the allocation handling in apr_app.c/start.c. This would be quite a code change which would exceed the code changes suggested/pointed out in the proof-of-concept patch. Hence, IMO fixing the issue with the alternative appraoch is more reasonable (especially since a rewrite of the allocation handling would most likely require different versions based on the different VS versions).", "is_private": false, "id": 191703, "creator": "luke1410@gmx.de", "time": "2016-06-15T22:47:16Z", "bug_id": 59711, "creation_time": "2016-06-15T22:47:16Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Looking at the code in start.c(In reply to Stefan from comment #3)\n> Looks like the provided initial patch only resolves half of the problem. The\n> double free is resolved, but the testapp.exe still crashes / triggers an\n> exception if _environ is replaced with some content.\n> \n> The problem for this case is that the runtime uninitialize-handling for the\n> _environ-variable iterates over the separate elements and frees each\n> separate element. However, since the APR code allocates a single block with\n> apr_malloc_dbg the entire allocated memory is freed upon the first call\n> already. Trying to access the second element's pointer then triggers a\n> runtime access due to the access violation.\n> \n> Hence to make the code work with the new handling in the VS runtime, we\n> would have to rewrite the allocation handling in apr_app.c/start.c. This\n> would be quite a code change which would exceed the code changes\n> suggested/pointed out in the proof-of-concept patch. Hence, IMO fixing the\n> issue with the alternative appraoch is more reasonable (especially since a\n> rewrite of the allocation handling would most likely require different\n> versions based on the different VS versions).\n\nLooking at the code in start.c suggests another approach, since there the allocation of the separate environment blocks looks correct. That code was added in 63011 at 02/18/2002 (also by wrowe). That makes me believe that the code in apr_app.c doesn't need to differentiate between different VS versions.\n\nHence copying over the same code in start.c to apr_app.c might be a third alternative to completely fix both issues (double free + incorrect memory allocation).", "attachment_id": null, "bug_id": 59711, "id": 191704, "time": "2016-06-15T23:07:24Z", "creator": "luke1410@gmx.de", "creation_time": "2016-06-15T23:07:24Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 59711, "attachment_id": null, "id": 191753, "time": "2016-06-17T15:54:33Z", "creator": "brian@opensecurityfoundation.org", "creation_time": "2016-06-17T15:54:33Z", "is_private": false, "text": "Is this user triggerable, meaning it could be used in a denial of service attack?"}, {"count": 6, "tags": [], "bug_id": 59711, "attachment_id": null, "id": 191754, "time": "2016-06-17T15:59:13Z", "creator": "wrowe@apache.org", "creation_time": "2016-06-17T15:59:13Z", "is_private": false, "text": "Yes, it is user triggered, if the user starts, and stops the program (as users\nare the ones who start, and stop programs) they will see this defect when\ncompiled on specific platforms.  So is the defect rm -rf / - that is a command\nthat users with escallated privilages may invoke.\n\nOf course it is not remotely exploitable, there is no side effect during the\noperation of any program, only upon clean shutdown of a program (more accurately,\nthe clean shutdown instead results in a segfault.)\n\nBinary condition, either the defect is encountered or it won't be encountered.\n\nThe right answer here is to build on a test/ case so we can slam this against\nthe entire array of VC compilers, which is the first item I'm addressing."}]
[{"count": 0, "tags": [], "bug_id": 52025, "attachment_id": null, "id": 150544, "time": "2011-10-13T21:19:49Z", "creator": "rick.bullotta@thingworx.com", "creation_time": "2011-10-13T21:19:49Z", "is_private": false, "text": "In Tomcat 6 and Tomcat 7.0.20 and earlier, JDBC drivers in a web app's classpath would automatically be loaded using the JDK's service provider mechanisms.  Starting with Tomcat 7.0.21, this no longer works.  I suspect is has something to do with the classloader that is in effect at the time of this initialization, but not certain. It is difficult to debug, because the actual loading occurs in a Sun class sun.misc.Service, for which source is very hard to find!"}, {"count": 1, "tags": [], "bug_id": 52025, "attachment_id": null, "id": 150545, "time": "2011-10-13T21:24:37Z", "creator": "markt@apache.org", "creation_time": "2011-10-13T21:24:37Z", "is_private": false, "text": "Try setting driverManagerProtection=\"false\" for the JreMemoryLeakPreventionListener in server.xml.\n\nIf I recall correctly, the service provider mechanism didn't work across multiple web applications with different drivers anyway."}, {"count": 2, "tags": [], "bug_id": 52025, "is_private": false, "text": "(In reply to comment #0)\n> would automatically be loaded using the JDK's service provider\n> mechanisms.\n\nCan you be more specific? Preferably with a step-by-step instruction on how to reproduce this.", "id": 150546, "time": "2011-10-13T21:26:09Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-13T21:26:09Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 52025, "attachment_id": null, "is_private": false, "id": 150547, "time": "2011-10-13T21:31:16Z", "creator": "rick.bullotta@thingworx.com", "creation_time": "2011-10-13T21:31:16Z", "text": "Mark, thanks for the quick feedback.  That does indeed seem to return it to the pre-7.0.21 behavior.  That said, I still think we'd have to call it a regression issue, since it changes previous behavior and would break existing apps.\n\nIt is an issue with the implementation of the JreMemoryLeakPreventionListener or just a changed behavior?"}, {"count": 4, "tags": [], "bug_id": 52025, "is_private": false, "id": 150548, "creation_time": "2011-10-13T21:32:06Z", "time": "2011-10-13T21:32:06Z", "creator": "rick.bullotta@thingworx.com", "text": "Mark, thanks for the quick feedback.  That does indeed seem to return it to the\npre-7.0.21 behavior.  That said, I still think we'd have to call it a\nregression issue, since it changes previous behavior and would break existing\napps.\n\nIt is an issue with the implementation of the JreMemoryLeakPreventionListener\nor just a changed behavior?\n\n(In reply to comment #1)\n> Try setting driverManagerProtection=\"false\" for the\n> JreMemoryLeakPreventionListener in server.xml.\n> If I recall correctly, the service provider mechanism didn't work across\n> multiple web applications with different drivers anyway.", "attachment_id": null}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 150549, "time": "2011-10-13T21:50:43Z", "bug_id": 52025, "creation_time": "2011-10-13T21:50:43Z", "is_private": false, "text": "I'll need to do some testing to see how well this actually worked before the change. I have my suspicions about possible failure modes I need to check.\n\nDepending on what the testing shows, this will / will not be treated as a regression but either way the docs will probably end up being updated."}, {"count": 6, "tags": [], "bug_id": 52025, "is_private": false, "text": "(In reply to comment #5)\n> I'll need to do some testing to see how well this actually worked before the\n> change. I have my suspicions about possible failure modes I need to check.\n> Depending on what the testing shows, this will / will not be treated as a\n> regression but either way the docs will probably end up being updated.\n\nI can reproduce fairly easily with the following scenario:\n\nDrop a couple JDBC drivers (any will do, MySQL connector and jTDS are two that we use) in the lib directly of a webapp.  When an attempt is made to get a JDBC connection, in the loadInitialDrivers of the DriverManager class, it will (one time) try to get a list of JDBC drivers using the Service Provider mechanism.  7.0.20 and earlier would load and find three drivers (the two in the webapp and one built into the JVM). 7.0.21 and later do not see the drivers in the webapp.  It uses the getCallerClassLoader() method to pass a classloader into the ServiceProvider stuff that is in sun.misc.Service. I'm guessing that the classloader here is obviously behaving differently - just not sure the mechanics, and it sound like you're very familiar with what's going on.\n\nLMK if you want us to test/try anything else.", "id": 150550, "time": "2011-10-13T22:01:25Z", "creator": "rick.bullotta@thingworx.com", "creation_time": "2011-10-13T22:01:25Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 150643, "time": "2011-10-16T20:14:52Z", "bug_id": 52025, "creation_time": "2011-10-16T20:14:52Z", "text": "I am closing this as INVALID as the Service Provider mechanism for DriverManager is - as I suspected - broken for servlet container environments. Given that it was a lottery if this ever worked before, that it now consistently doesn't work isn't really a regression.\n\nWhat I have done is updated the documentation to try and explain what is going on and how to work-around it. Basically, just assume the service provider mechanism isn't there and manually register (and deregister) the Driver.\n\nThe change for the updated docs is here:\nhttp://svn.apache.org/viewvc/tomcat/trunk/webapps/docs/jndi-datasource-examples-howto.xml?r1=1184919&r2=1184918&pathrev=1184919\n\nYou may find this presentation on memory leaks useful / interesting:\nhttp://people.apache.org/~markt/presentations/2010-11-04-Memory-Leaks-60mins.pdf"}, {"count": 8, "tags": [], "bug_id": 52025, "attachment_id": null, "id": 150661, "time": "2011-10-17T13:52:48Z", "creator": "rick.bullotta@thingworx.com", "creation_time": "2011-10-17T13:52:48Z", "is_private": false, "text": "Thanks, Mark.  Probably the reason they left the Service provider stuff in sun.misc!!!  We'll just go back to the ever-popular Class.forName, which (almost) always works...\n\n(In reply to comment #7)\n> I am closing this as INVALID as the Service Provider mechanism for\n> DriverManager is - as I suspected - broken for servlet container environments.\n> Given that it was a lottery if this ever worked before, that it now\n> consistently doesn't work isn't really a regression.\n> \n> What I have done is updated the documentation to try and explain what is going\n> on and how to work-around it. Basically, just assume the service provider\n> mechanism isn't there and manually register (and deregister) the Driver.\n> \n> The change for the updated docs is here:\n> http://svn.apache.org/viewvc/tomcat/trunk/webapps/docs/jndi-datasource-examples-howto.xml?r1=1184919&r2=1184918&pathrev=1184919\n> \n> You may find this presentation on memory leaks useful / interesting:\n> http://people.apache.org/~markt/presentations/2010-11-04-Memory-Leaks-60mins.pdf"}, {"count": 9, "tags": [], "bug_id": 52025, "is_private": false, "text": "(In reply to comment #7)\n> I am closing this as INVALID as the Service Provider mechanism for\n> DriverManager is - as I suspected - broken for servlet container environments.\n\nThe scan for service providers happens only once when DriverManager initializes. See DriverManager.getDrivers() / DriverManager.loadInitialDrivers(). (JDK 6u26)\n\n1. My understanding regarding DriverManager.getDrivers() call in JreMemoryLeakPreventionListener is that Service Provider mechanism should work if the class is visible to the JreMemoryLeakPreventionListener.\n\nThat is, it should work if the driver jar is in $CATALINA_BASE\\lib\n\nIt might be nice to mention it in the docs, because it might be useful for users, but I have not tested whether it actually works.\n\n\n2. I agree with Mark that for webapps it is broken at JRE level and cannot be fixed, thus INVALID. Even if you disable the listener, at most one webapp per JVM would be able to make use of it.", "id": 150662, "time": "2011-10-17T14:03:30Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-17T14:03:30Z", "attachment_id": null}, {"count": 10, "attachment_id": null, "bug_id": 52025, "is_private": false, "id": 150663, "time": "2011-10-17T14:15:46Z", "creator": "markt@apache.org", "creation_time": "2011-10-17T14:15:46Z", "tags": [], "text": "(In reply to comment #9)\n> 1. My understanding regarding DriverManager.getDrivers() call in\n> JreMemoryLeakPreventionListener is that Service Provider mechanism should work\n> if the class is visible to the JreMemoryLeakPreventionListener.\n> \n> That is, it should work if the driver jar is in $CATALINA_BASE\\lib\n> \n> It might be nice to mention it in the docs, because it might be useful for\n> users, but I have not tested whether it actually works.\n\nYes, it does work. I'll add that to the docs."}]
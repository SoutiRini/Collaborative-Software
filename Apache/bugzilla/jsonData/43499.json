[{"count": 0, "tags": [], "bug_id": 43499, "attachment_id": null, "id": 108713, "time": "2007-09-27T06:01:50Z", "creator": "forums02@38244.copi.ru", "creation_time": "2007-09-27T06:01:50Z", "is_private": false, "text": "In case the global mutex used in Win32 service and in usual application,\napr_global_mutex_create returns error \"Access denied\".\n\nThe problem exists because function CreateMutexW is called with NULL security\nattributes. NULL security attributes don't allow to use the mutex in different\nuser accounts.\n\nThe problem scenario is:\n1. Service starts as application with the LOCAL_SYSTEM user security rights.\n2. Service creates global mutex with the call \n    hMutex = CreateMutexW(NULL, FALSE, mutexkey);\n3. Usual application starts with the currently logged user security rights.\n4. Application tries to create global mutex with the call\n    hMutex = CreateMutexW(NULL, FALSE, mutexkey);\n5. The call to CreateMutexW fails. GetLastError returns error 5 \"Access denied\"\nbecause the service created mutex which does not allow other users to open it.\n\nThe function apr_proc_mutex_create in module \"locks\\win32\\proc_mutex.c\" could be\nmodified to create SECURITY_ATTRIBUTES structure before calling CreateMutexW."}, {"count": 1, "tags": [], "creator": "wrowe@apache.org", "text": "Typically not; no process other than the other-child, different user context\nshould have access to that lock.\n\nThe right thing is to pass that mutex handle to the child.  The only way to\ndo so, of course, is to Duplicate it across processes and pass the child\nthe identity of it's copy of the handle.  The httpd/server/mpm/winnt/mpm_winnt.c\ndoes so.  However, this was never abstracted into apr.\n\nClearly, some of the accessors used by mpm_winnt are going to need to be\nabstracted into apr for the 1.3 or 2.0 version.\n\nWidening the access to the created mutex as you suggest typically creates\ntoo many exploit patterns.", "id": 108714, "time": "2007-09-27T06:17:35Z", "bug_id": 43499, "creation_time": "2007-09-27T06:17:35Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 43499, "text": ">Typically not; no process other than the other-child, different user context\nshould have access to that lock.\n\nMy problem is that the service and the usual application have no parent/child\nrelations.\n\n>Widening the access to the created mutex as you suggest typically creates\ntoo many exploit patterns.\n\nThe current implementation creates user-wide mutexes, which could be used by all\nprocesses of that user. My implemetation creates PC-wide mutexes, which could be\nused by any processes.\nIs it possible to add additional flag, or function to support both variants?", "count": 2, "id": 108721, "time": "2007-09-27T06:52:49Z", "creator": "forums02@38244.copi.ru", "creation_time": "2007-09-27T06:52:49Z", "is_private": false}]
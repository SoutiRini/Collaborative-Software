[{"count": 0, "tags": [], "creator": "jorddims@hotmail.com", "text": "Excel saves these values differently depending on which other characters are in \nthe cell, which means if it only says(CASE 1):\n\n\u00dc\u00d6\u00c4\u00fc\u00f6\u00e4\n\nand you try to read the cell:\n\n\tHSSFCell cell = (HSSFCell)cellI.next();\n\tif(cell.getCellType() == HSSFCell.CELL_TYPE_STRING )\n\t{\tcell_value = cell.getStringCellValue();\t}\n\nThen the resulting String is comprised of chars, all with the integer value \n65533.\n\nOn the other hand, if you write other characters into the cell(CASE 2), \nsometimes they are read correctly.\n\nThis is because normally the chars(as read in hexidecimal values) are seperated \nby 00(CASE 2) chars, but somtimes not. And when they are not(CASE 1), the \nusermodel and eventmodel can't read them.\n\nI hope I missed out on something about character sets or what do I know, if \nnot, this is a nasty bug.", "id": 20468, "time": "2002-07-31T10:04:38Z", "bug_id": 11322, "creation_time": "2002-07-31T10:04:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 11322, "text": "What is the value of HSSFCell.getEncoding() on the Short.MAX_VALUE returning\ncells?  In the case where you have umlauts it should be 1 and HSSF should read\nit as 16-bit characters.  If not...that is a most nasty bug in 1.5.1.  \nGlen, correct me if I'm wrong.", "id": 20475, "time": "2002-07-31T12:41:03Z", "creator": "poi-support@buni.org", "creation_time": "2002-07-31T12:41:03Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 11322, "is_private": false, "text": "Hello again, I made the good old:\n\nSystem.out.println( \"encoding: \" + cell.getEncoding() ); \n\nand got the result for every single cell(well all 7 anyway):\n\nencoding: 0", "id": 20477, "time": "2002-07-31T12:58:33Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-07-31T12:58:33Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 11322, "attachment_id": null, "id": 20482, "time": "2002-07-31T13:10:11Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-07-31T13:10:11Z", "is_private": false, "text": "I may have left out an important piece of information:\n\nBasically, I:\nCreate my Excel sheets using HSSF on a weblogic\nDownload them\nChange the sheets\nUpload them\nRead them using HSSF.\n\nActually, if I DON'T make any changes, they are read just fine, but as soon as \nI press the save button in Excel, the format changes a bit, and HSSF is not \nable to read the cells with the characters with ascii values above 128.\n\nI use Microsoft Excel 2000.\n\n/Tom\n\nPS. this change is what I tried to explain in the initial bug report, except \nthen I didn't know excaclty what happened."}, {"count": 4, "tags": [], "bug_id": 11322, "text": "Correction, the cells are read ok, I meant it's the characters IN the cells \nthat are wrong.", "id": 20483, "time": "2002-07-31T13:11:36Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-07-31T13:11:36Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "poi-support@buni.org", "text": "eeenteresting...  So it sounds like Excel is not updating the encoding flag when\nit changes to 16 bit.  Can you attach to this bug\n\n1. A sheet created with Excel containing the characters\n2. An identical sheet created with HSSF containing those characters\n3. An sheet created with HSSF and modified with Excel containing those characters\n   (the broken case)\n\nAll 3 sheets should be identical.  This will help myself or someone else try and\nfigure out the problem.\n\nIf you'd like to give it a go, what we'll do is run\norg.apache.poi.hssf.BiffViewer on them and compare the results via \"diff\" (or\nwhatever the windoze equivilent is)\n\n-Andy", "id": 20499, "time": "2002-07-31T18:13:27Z", "bug_id": 11322, "creation_time": "2002-07-31T18:13:27Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 11322, "attachment_id": 2551, "text": "Created attachment 2551\nThe file made with HSSF and saved in excel", "id": 20512, "time": "2002-08-01T06:47:33Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-01T06:47:33Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 11322, "text": "Created attachment 2552\nThe file made with HSSF, has not been opened in excel, notice it is smaller.", "id": 20513, "time": "2002-08-01T06:48:32Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-01T06:48:32Z", "is_private": false, "attachment_id": 2552}, {"count": 8, "tags": [], "bug_id": 11322, "attachment_id": 2553, "text": "Created attachment 2553\nFile made with excel", "id": 20514, "time": "2002-08-01T06:49:00Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-01T06:49:00Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 11322, "attachment_id": null, "text": "I think what I've observed is that Excel 2000 treats fields like \n<\u00dcber>\nas normal text, but if there's a Trademark in there, excel changes from 8 to \nthe 16 bit flag, so \n<\u00dcber\u2122>\nwould be treated as 16 bit.\n\nWhereas HSSF reads both <\u00dcber>(Excel 8 bit) and <\u00dcber\u2122>(Excel 16 bit) as 16 bit \nfields, and so it reads out a REALLY big value for the \u00dc in <\u00dcber>(Excel 8 bit).\n\nCorrect?\n\n/Tom\n\nPS. hope HTML can show \"\u2122\"...if not, then it's supposed to be a trademark(ascii \n0153).", "id": 20519, "time": "2002-08-01T08:22:44Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-01T08:22:44Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 11322, "attachment_id": null, "text": "By the way, this bug also occurs in your latest releases.", "id": 20592, "time": "2002-08-02T06:22:26Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-02T06:22:26Z", "is_private": false}, {"count": 11, "tags": [], "creator": "jorddims@hotmail.com", "text": "QUESTION 1: Is there anyway for me to tell if there is any progress in \ntracking/fixing this bug?\n\nQUESTION 2: can I help speed up the process of fixing this bug in some way, \nmore then I allready have?", "id": 20653, "time": "2002-08-05T12:15:51Z", "bug_id": 11322, "creation_time": "2002-08-05T12:15:51Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 11322, "attachment_id": null, "text": "It would be nice if someone who cares would simply write:\nYes, my friend, we are working on this bug.\nor:\nNo we are not working on your bug, so stick it up your **s.\nBecause I'd like to know how YOU feel...!?\n\nThanks in advance,\n\n/Tom", "id": 21159, "time": "2002-08-16T13:13:56Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-16T13:13:56Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 11322, "attachment_id": null, "id": 21162, "time": "2002-08-16T14:11:43Z", "creator": "poi-support@buni.org", "creation_time": "2002-08-16T14:11:43Z", "is_private": false, "text": "One thing I relize I didn't ask for. .  Can you give me the source you used to\ngenerate the HSSF version?  If you can supply it in the form of a junit test it\nwould be perfect.  (I'd apply that in advance of fixing it!)\n\nThe fact that I haven't closed the bug or marked it as fixed implies that I will\nlook at it when I have time.  (If you'd like it fixed faster, I can give you a\nmailing address and you can contribute to paying my mortgage.)"}, {"count": 14, "tags": [], "bug_id": 11322, "text": "Thanks, that's all I wanted to know.\n\nThe source is very simple:\n\nHSSFWorkbook wb = new HSSFWorkbook();\nHSSFSheet sheet = wb.createSheet();\nwb.setSheetName( sheetcounter, sheetName );\nHSSFRow row = sheet.createRow((short)rowcounter);\nHSSFCell cell = row.createCell((short)0);\t\ncell.setEncoding( HSSFCell.ENCODING_UTF_16 );\ncell.setCellType( HSSFCell.CELL_TYPE_STRING );\ncell.setCellValue(iETI.getLanguage());\n/*multiple cells...*/\nbyte[] bytes = wb.getBytes();\nPOIFSFileSystem fs = new POIFSFileSystem();\nfs.createDocument(new ByteArrayInputStream(bytes), \"Workbook\");\nByteArrayOutputStream byteos = new ByteArrayOutputStream();\nfs.writeFilesystem(byteos);\nbyteos.close();\nreturn byteos;\n\nThe thing is, which I've explained, the error occurs when you write out the \nfile, manually change it, and read the file again with HSSF. Then the above \nmentioned errors occur. HSSF has propblems recognizing if the cells are saved \nas 8 or 16 bit, depending on if the characters in the cell are between ascii: 0-\n128 or 129-159 or 160-255.", "id": 21366, "time": "2002-08-20T11:40:27Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-20T11:40:27Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 11322, "attachment_id": null, "id": 21869, "time": "2002-08-28T07:10:46Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-28T07:10:46Z", "is_private": false, "text": "So basically, the error that should be fixed is the following, you have 3 \ndifferent ascii sets:\n\nA) 0-128\nB) 129-159\nC) 160-255\n\nCells containing A, should be read as an 8 bit cell.\nCells containing A & B should be read as 16 bit\nCells containing A & C should be read as 16 bit\nCells containing A & B & C should be read as 16 bit\nCells containing B & C should be read as 16 bit\n\nBut HSSF reads cells containing A & C as an 8 bit cell. Which is wrong, because \nExcel handles these as 16 bit."}, {"count": 16, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "text": "cool, can you submit a patch changing this behavior?  Start at\norg.apache.poi.hssf.record.SSTRecord", "id": 21891, "time": "2002-08-28T13:55:03Z", "bug_id": 11322, "creation_time": "2002-08-28T13:55:03Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 11322, "attachment_id": null, "text": "Hi Thomas and Andy,\n\nI have looked at a recent CVS snapshot.\n\nI do not believe that there is a problem when reading in the strings from the \nattached files. I have traced through the SSTDeserializer class using the \nBiffViewer and the source code attached below to read the workbook and have \nfound that I can correctly read all cells.\n\nBoth the 1st and last attachments above correctly read the Uber cell as 8bit \nand the tmUber as 16bit. It is only the second attachment where the Uber is \nread as 16bit. Interestingly the tm character is unicode \\u2122 rather than \nascii 0153 (which you mention in the bug report), I guess the character set \nthat the sheet was originally created in is something other that ISOLatin-1\n\nI postulate that the only problem here is the fact that a supposed 8bit string \nhas been written out as 16bit (ie the second attachment). As such we would need \nto look at the exact code that created the second attachment (The code that is \nattached to the bug doesnt have the values that were being allocated to the \ncell values). I think that the problem would become evident quickly.\n\nJason\n\n<source code>\nimport java.io.*;\nimport org.apache.poi.hssf.usermodel.*;\n\npublic class Tester {\n\n  public Tester() {\n    try {\n    HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(\"c:/at1.xls\"));\n    HSSFSheet sheet = wb.getSheetAt(0);\n    HSSFRow row = sheet.getRow(0);\n    for (int i=0; i<row.getPhysicalNumberOfCells();i++) {\n      HSSFCell cell = row.getCell((short)i);\n      System.out.println(\"Cell \"+i+\"=\"+cell.getStringCellValue());\n    }\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n  }\n  public static void main(String[] args) {\n    Tester tester1 = new Tester();\n  }\n}", "id": 21935, "time": "2002-08-28T23:30:51Z", "creator": "jheight@apache.org", "creation_time": "2002-08-28T23:30:51Z", "is_private": false}, {"count": 18, "tags": [], "creator": "jorddims@hotmail.com", "attachment_id": null, "text": "Just a quick comment:\n\nThank you very much for your help, I know I've been annoying, but being an end \nuser, I feel it is my duty. I appreciate how Andy carefully and fondly responds \nto every one of my blundering e-mails in particular.\n\nTo the point: \nI've run a few test programs myself and you're right Jason, it does write out \nthe correct values on NT, well, actually it writes out \u00d6&#9604;\u00cd&#9472;\u00b3\u00f7\u00f5, not \u00dc\u00d6\u00c4\u00fc\u00f6\u00e4, in \nmy cmdprompt, but I'm not picky. In the ascii table the values are the correct \nones.\nBUT, on my BEA WebLogic Application Server 6.1, the seperate \"case C\" chars are \nread as 65533, which is something I'll look into, and report back to you with \nif I find out what the ... is going on. Guess I'll begin with char sets.\n\nI really do appreciate the help, and the brilliant software. Who knows, maybe \nI'll contribute with something constructive yet.", "id": 21945, "time": "2002-08-29T07:45:19Z", "bug_id": 11322, "creation_time": "2002-08-29T07:45:19Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 11322, "attachment_id": null, "text": "By the way, I ALLWAYS set the value useUTF16-thing to true, but I'd like to \nknow where you decide what's READ, because it doesn't matter how you save it, \nExcel changes the format when you're playing around...\n\nI'm looking into it myself right now, the values are wrong when read from the \nBinary tree, so the next thing I'll try to figure out is if they're wrong when \nthey're put() into it. I'll need a bit more time for that though, since I have \nto read up on the filesystem.", "id": 21953, "time": "2002-08-29T10:13:14Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-29T10:13:14Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 11322, "attachment_id": null, "text": "What I've narrowed it down to, is that in the SSTDeserializer, when you call \nprocessString, and say:\n\nUnicodeString string = new UnicodeString(UnicodeString.sid,\n                                         (short) unicodeStringBuffer.length,\n                                         unicodeStringBuffer );\n\nString chars = string.getString();\nfor( int i = 0; i < chars.length(); i++ ) \n{\nSystem.out.print((int)chars.charAt(i) + \" \");\n}chars = null;\n\nthen if it is a there are chars between 160-255(keep in mind the bytes actually \nhave the int value -1 & -64), then they all get converted to the value 65533\n\nI don't know exactly where the conversion takes place, and I don't have time to \nlook any further today, but if you know, please tell me. I'd like to solve this \nbug.\n\nTomorrow I'll have a good look at the UnicodeString class.\n\n", "id": 21964, "time": "2002-08-29T13:54:08Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-29T13:54:08Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 11322, "attachment_id": null, "text": "wooops, decided to snoop around, just a little bit longer, and now I think I've \nlocated the error, so now I guess I just have to solve it.\n\nIn UnicodeString the field_2_optionflags is 0, and the toString conversion is \ncarried out in fillFields(byte [] data, short size), which results in the 65533 \nchars on my WebLogic server.\n\nPS. Sorry to anyone who feels I'm spamming their e-mail account.", "id": 21970, "time": "2002-08-29T14:12:46Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-29T14:12:46Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 11322, "text": "thanks you for your patience and insights, I've narrowed it down to one line \nnow, in the 1.5.1 class:\nUnicodeString\nin the function:\nfillFields\n\nthe line:\nfield_3_string = new String(data, 3, getCharCount());\n\nmakes a new String regardless of the ISO character set standard, and since I \nuse \"ISO-8859-1\" it doesn't work. Adding:\n\nfield_3_string = new String(data, 3, getCharCount(), \"ISO-8859-1\");\n\nmakes it work though, guess I'll have to make a few tests now, to see if \nanything else is messed up.\n\nThanks again,\n\nThomas", "id": 22019, "time": "2002-08-30T07:24:38Z", "creator": "jorddims@hotmail.com", "creation_time": "2002-08-30T07:24:38Z", "is_private": false, "attachment_id": null}, {"count": 23, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "is_private": false, "id": 27722, "time": "2002-12-12T12:12:12Z", "bug_id": 11322, "creation_time": "2002-12-12T12:12:12Z", "text": "Try this with a recent nightly build.  I think its fixed."}, {"count": 24, "tags": [], "creator": "avik@apache.org", "attachment_id": null, "is_private": false, "id": 28258, "time": "2002-12-25T17:59:38Z", "bug_id": 11322, "creation_time": "2002-12-25T17:59:38Z", "text": "Is it fixed? can i close this bug? Thomas?"}, {"count": 25, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "text": "no response", "id": 41283, "time": "2003-07-24T13:18:27Z", "bug_id": 11322, "creation_time": "2003-07-24T13:18:27Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "There are 30 places in the code where JSTL catches various exceptions and then \nthrows a JspTagException().  At this point the toString() method is called on \nthe original root cause exception to construct the JspTagException.  \nUnfortunately, the stack trace of the root cause exception is lost at this \npoint.  There have been times where the only way to figure out what when wrong \nis to see the original stack trace.  At these points, I've been forced to \ndebug the application and set break points down in JSTL code at the point the \ncatch occurs so that I can figure out what is the root cause of a problem.\n\nIt should be a simple thing to construct the JspTagException and pass the \noriginal exception as the second parameter to the JspTagException.  Our JSP \nerror page is smart enough to drill down through an exception's root cause \nhierarchy and log this information.\n\n\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\extra\\spath\\SPathTag.java\n(104,2):\tthrow new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\core\\ForEachSupport\n.java(407,21):                    throw new JspTagException(ex.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\core\\ForEachSupport\n.java(415,21):                    throw new JspTagException(ex.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\core\\ImportSupport.\njava(163,6):\t    throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\core\\ImportSupport.\njava(183,6):\t    throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\core\\RedirectSuppor\nt.java(153,6):\t    throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\core\\UrlSupport.jav\na(158,3):\t\tthrow new JspTagException(ex.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\BundleSupport.j\nava(137,3):\t\tthrow new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\FormatDateSuppo\nrt.java(199,3):\t\tthrow new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\FormatNumberSup\nport.java(234,3):\t\tthrow new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\MessageSupport.\njava(168,3):\t\tthrow new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\MessageSupport.\njava(223,3):\t\tthrow new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\ParseDateSuppor\nt.java(222,3):\t\tthrow new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\ParseNumberSupp\nort.java(200,3):\t\tthrow new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\RequestEncoding\nSupport.java(130,3):\t\tthrow new JspTagException(uee.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\fmt\\TimeZoneSupport\n.java(133,6):\t    throw new JspTagException(ioe.getMessage());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\sql\\DataSourceUtil.\njava(165,17):                throw new JspTagException(\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\sql\\DriverTag.java\n(134,6):\t    throw new JspTagException(\"Invalid driver class name: \" +\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\sql\\SetDataSourceTa\ngSupport.java(145,17):                throw new JspTagException(\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\sql\\TransactionTagS\nupport.java(156,6):\t    throw new JspTagException(\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\sql\\TransactionTagS\nupport.java(171,6):\t    throw new JspTagException(\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\xml\\ExprSupport.jav\na(107,6):\t    throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\xml\\ExprSupport.jav\na(109,6):\t    throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\xml\\ForEachTag.java\n(92,13):            throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\xml\\IfTag.java\n(95,13):            throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\xml\\SetTag.java\n(122,6):\t    throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\common\\xml\\WhenTag.java\n(95,13):            throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\el\\core\\IfTag.java(102,6):\n\t    throw new JspTagException(ex.toString());\n\\jakarta-\ntaglibs\\standard\\src\\org\\apache\\taglibs\\standard\\tag\\el\\core\\WhenTag.java\n(100,6):\t    throw new JspTagException(ex.toString());", "is_private": false, "bug_id": 16775, "id": 30678, "time": "2003-02-04T19:48:08Z", "creator": "hchiavettone@ariba.com", "creation_time": "2003-02-04T19:48:08Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "pierre.delisle@sun.com", "attachment_id": null, "is_private": false, "id": 30839, "time": "2003-02-06T19:04:44Z", "bug_id": 16775, "creation_time": "2003-02-06T19:04:44Z", "text": "First, some background information:\n\nUp until JSP 1.2, there were no JspTagException constructor \nthat accepted both a message and a root exception. This has been fixed\nin JSP 2.0 (but JSTL 1.0.x must run on JSP 1.2).\n\nThe JSTL spec has standardized on JspException because of this:\n  Chapter 2 - Conventions\n  When an action is required to throw an exception, there were two choices when\n  no root cause was involved: JspException or JspTagException. The\n  specification has now standardized on JspException everywhere in the spec\n  (instead of JspException in some places (with root cause), and\n  JspTagException in some others (no root cause)).\n\nThis being said, a closer look at all the JspTagExceptions thrown in the\nstandard taglib shows the following patterns:\n\n1. No root cause involved\n\n   There are cases where a JspTagException is thrown without any root cause\n   to be propagated. This is often the case in setter methods.\n   For example, in TransactionTagSupport:\n\n        } else {\n            throw new JspTagException(\n                Resources.getMessage(\"TRANSACTION_INVALID_ISOLATION\"));\n        }\n\n   There is nothing to fix here.\n\n2. doStartTag() and doEndTag()\n\n   These two methods of the Tag interface throw a JspException. \n   There are three subpatterns here:\n\n   2.1: No root cause involved\n     For example, in TransactionTagSupport:\n            ...\n            if (origIsolation == Connection.TRANSACTION_NONE) {\n                throw new JspTagException(\n                    Resources.getMessage(\"TRANSACTION_NO_SUPPORT\"));\n            }\n     Nothing to fix here.\n\n   2.2: IOException\n\n     Whenever the implementation needs to do some IO (e.g. access 'out', \n     send something on the response), there is\n     the risk of an IOException. For example,\n\n     in MessageSupport:\n            try {\n                pageContext.getOut().print(message);\n            } catch (IOException ioe) {\n                throw new JspTagException(ioe.getMessage());\n            }\n\n     in RedirectSupport:\n        try {\n            response.sendRedirect(result);\n        } catch (java.io.IOException ex) {\n            throw new JspTagException(ex.toString());\n        }\n\n     We could definitely do the following instead, to expose\n     the root cause:\n\n                throw new JspException(ioe.getMessage(), ioe);\n\n     However, please note that these rare IO exceptions\n     most likely point to a system problem whose trace\n     won't be of much use to the developer.\n\n   2.3: System software exceptions (e.g. SQLException, SAXPathException)\n     For example, in TransactionTagSupport:\n        ...\n        } catch (SQLException e) {\n            throw new JspTagException(\n                Resources.getMessage(\"ERROR_GET_CONNECTION\",\n                                     e.getMessage()));\n        } \n\n     We could definitely throw the following instead:\n            throw new JspException(\n                Resources.getMessage(\"ERROR_GET_CONNECTION\",\n                                     e.getMessage()), e);\n\n     However, please note that the root cause exception will simply\n     point into JDBC code (or SAXPath...), which won't be of much use to the \n     developer.\n\n3. interfaces specific to the 'standard' implementation\n\n   ConditionalTagSupport exposes method condition() which throws\n   a JspTagException.\n\n   Agree that it might have been better to expose a JspException to\n   allow a developer that subclasses ConditionalTagSupport to include\n   the root cause of an exception. This will be possible with JSTL 1.1\n   because JspTagException will support the constructor with both\n   message and root cause exception.\n\n\nAs you can see from the above analysis, there does not seem to be\nany situation where \"custom\" code is involved, and whose failure\n(root cause exception) would be important to propagate up the stack.\n\nWe used to have such a situation, and this has been fixed in \nbug 15495.\n\nOK, let's get practical now (hopefully, you're still reading :-)\n\nFor standard 1.0.3\n\nBecause we're very close to an official release of JSTL 1.0.3\nwe're not planning to change anything right now, unless\nyou feel there are specific instances where a root cause \nexception should be propagated up the stack (similar to the\nissue in bug 15495). Let us know quickly though, since we're \nquite close to releasing.\n\nFor standard 1.1 (which will require JSP 2.0)\n\nSince there's no harm in passing the exception to the new\nJSP 2.0 JspTagException constructor, we'll fix all occurrences\nwhere we throw a JspTagException and there is a root cause exception\navailable (even if we can't really see how it would help\nmost users).\n\nAnother thing we also noted is that we are not consistent in the way we\nreturn the message associated with an exception. We use both toString() and\ngetMessage(). toString() seems better because it gives the name\nof the Exception class in the string returned (usually helpful). \nWe will do a global fix for consistency.\n"}, {"count": 2, "tags": [], "creator": "hchiavettone@ariba.com", "attachment_id": null, "id": 30914, "time": "2003-02-07T19:54:39Z", "bug_id": 16775, "creation_time": "2003-02-07T19:54:39Z", "is_private": false, "text": "Yes I read the whole thing.  And to be honest, its been a while since I \nencountered the situation where the root cause was being swallowed.  After \nreading you analysis, I may have misrepresented the issue.  Ultimately, the \nissue is that somewhere in JSTL, an exception was caught, the \"message\" \nor \"toString\" of the exception was used to construct a new exception and the \nroot cause lost.  I'm not sure if your analysis covered the WhenTag's catching \nof the JspException and converting that to a JspTagException.  Or perhaps it \nthe pattern shown below which was causing me grief, since the root cause parse \nexception is lost when the ElException is thrown?:\n\n      catch (ParseException exc) {\n\tthrow new ELException \n\t  (formatParseException (pExpressionString,\n\t\t\t\t exc));\n      }\n"}, {"count": 3, "tags": [], "creator": "hchiavettone@ariba.com", "attachment_id": null, "id": 31888, "time": "2003-02-25T02:08:02Z", "bug_id": 16775, "creation_time": "2003-02-25T02:08:02Z", "is_private": false, "text": "After further review, the biggest problem is losing exception while evaluating \nexpression language parameter.  It seems there are several levels of try \ncatches occuring.  First an exception is thrown and caught and turned into a \nParseException, which is caught and turned into an ELException, which is \ncaught and turned into a JspException.  At the heart of things, I've lost the \noriginal exception (in this case an NPE in the getFamilyImageIcon() method \nwhich took a debugging session to find).  See the stack trace below:\n\njavax.servlet.jsp.JspException: An error occurred while evaluating custom \naction attribute \"value\" with value \"${design.familyImageIcon}\": An error \noccurred while getting property \"familyImageIcon\" from an instance of class \n<someclass>\n        at org.apache.taglibs.standard.lang.jstl.Evaluator.evaluate\n(Evaluator.java:140)\n        at \norg.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager.evaluate\n(ExpressionEvaluatorManager.java:112)\n        at org.apache.taglibs.standard.tag.el.core.ExpressionUtil.evalNotNull\n(ExpressionUtil.java:85)\n        at org.apache.taglibs.standard.tag.el.core.OutTag.evaluateExpressions\n(OutTag.java:137)\n        at org.apache.taglibs.standard.tag.el.core.OutTag.doStartTag\n(OutTag.java:95)\n...\n"}, {"count": 4, "text": "See bug 15873 for a description of this issue and how it\nrelates to the container being used.", "bug_id": 16775, "attachment_id": null, "id": 32045, "time": "2003-02-26T22:02:33Z", "creator": "pierre.delisle@sun.com", "creation_time": "2003-02-26T22:02:33Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "text": "Fixed in 1.1: \nConsistent use JspTagException:\n   - always include original exception when available\n   - use ex.toString() instead of getMessage()", "is_private": false, "bug_id": 16775, "id": 42096, "time": "2003-08-04T17:48:41Z", "creator": "pierre.delisle@sun.com", "creation_time": "2003-08-04T17:48:41Z", "attachment_id": null}]
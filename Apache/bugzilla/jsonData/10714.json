[{"count": 0, "tags": [], "creator": "ana.von.klopp@sun.com", "text": "To reproduce: \n\n1) Create a web module directory\n2) Create a JavaBean directly under WEB-INF/classes (i.e. don't create", "id": 19356, "time": "2002-07-11T20:50:01Z", "bug_id": 10714, "creation_time": "2002-07-11T20:50:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "ana.von.klopp@sun.com", "attachment_id": 2323, "id": 19357, "time": "2002-07-11T20:54:44Z", "bug_id": 10714, "creation_time": "2002-07-11T20:54:44Z", "is_private": false, "text": "Created attachment 2323\nWAR file of web app which reproduces the problem"}, {"count": 2, "tags": [], "bug_id": 10714, "is_private": false, "text": "Ooops, that got sumbitted on return in description text field. \n\nTo reproduce: \n\n1) Create a web module directory\n2) Create a JavaBean directly under WEB-INF/classes (don't create \n   a package under WEB-INF/classes)\n3) Create a JSP at the web module root which refers to the \n   bean with a useBean tag. \n4) The JSP does not compile. \n\nI have added an attachment containing a web module which reproduces \nthis problem. The web module contains identical JavaBeans\npkg.PackageBean and NoPackageBean in the WEB-INF/classes directory. \nIt contains identical PackageBeanJSP.jsp and NoPackageBeanJSP.jsp \nfiles at the root of the web module. NoPackageBeanJSP.jsp cannot\nbe run on the server. \n\nI marked this as normal, but I think it possibly has higher priority,\nbecause it's likely to fool new users of the server who are writing\ntheir first web app and are experimenting with the JSP spec (I \nhave seen this happen to people). In Netbeans, we use Tomcat as \nthe execution environment for web app development and it is \nparticularly important that people can write HelloWorld style \napplication as they begin to use the environment. \n\nAna\n", "id": 19358, "time": "2002-07-11T21:00:01Z", "creator": "ana.von.klopp@sun.com", "creation_time": "2002-07-11T21:00:01Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 10714, "attachment_id": null, "is_private": false, "id": 19360, "time": "2002-07-11T21:16:28Z", "creator": "william.barker@wilshire.com", "creation_time": "2002-07-11T21:16:28Z", "text": "You must specify:\n<%@ page import=\"NoPackageBean\" %>\n\nOtherwise the compiler will look in the same package as the JSP page."}, {"count": 4, "tags": [], "creator": "ana.von.klopp@sun.com", "is_private": false, "text": "This is not a very intuitive workaround. I doubt it that a \nbeginner user who finds that the bean that they tried to use\nis not available, and who understands the nature of the problem\nwill be able to figure out that adding an import statement would\ngoing to fix it. \n\nI think it's worth addressing this because it raises the bar of \nentry for the technology and I have seen people being stumped\nby this issue several times. I looked at the spec and it doesn't \nsay anything explicit about package names for Beans, though of \ncourse all the examples of beans have fully qualified names in \nthem. \n\nIt could be argued that this could be resolved by simply \nclarifying the spec, but it seems like a backwards argument to \nme: it's an argument on how the JSP should behave on the \nbasis of the default behaviour of servlets. But the intended\naudience of JSP includes page authors who are not necessarily\nfamiliar with servlets. I think it would be equally valid \nto argue that the JSP classloader should resolve this type \nof situation. Also, clarifying it at the level of the spec\nwon't help beginner web tier programmers, who typically won't\nread the spec. \n\nI guess the current behaviour of Tomcat is spec compliant\nanyway, and I'll take this to JSR 152. \n\nAna", "id": 19363, "time": "2002-07-11T22:24:22Z", "bug_id": 10714, "creation_time": "2002-07-11T22:24:22Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 10714, "attachment_id": null, "is_private": false, "id": 19368, "time": "2002-07-12T00:12:33Z", "creator": "ian779@darwinsys.com", "creation_time": "2002-07-12T00:12:33Z", "text": "The real problem is that, as of JDK1.4, you can no longer import afile that is not in a package. See http://java.sun.com/j2se/1.4/compatibility.html under Source Compatibility,item 8, second subitem: \"The compiler now rejects import statements that import a type from the unnamed namespace...\". This probably accounts forthe original bug report."}]
[{"count": 0, "tags": [], "creator": "jiaoyk@gmail.com", "text": "We have set CATALINA_PID in setenv.sh.\n\nAfter the machine is reboot, The PID file is still there and tomcat fails to start. \n\nThe error message is: \n\"Existing PID file found during start.\nTomcat appears to still be running with PID 3387. Start aborted.\"\n\nAfter checking, there is another process have the same PID: 3387.\n\nAfter checking the code catalina.sh, the following logic has issue:\n\n\n  if [ ! -z \"$CATALINA_PID\" ]; then\n    if [ -f \"$CATALINA_PID\" ]; then\n      if [ -s \"$CATALINA_PID\" ]; then\n        echo \"Existing PID file found during start.\"\n        if [ -r \"$CATALINA_PID\" ]; then\n          PID=`cat \"$CATALINA_PID\"`\n          ps -p $PID >/dev/null 2>&1\n          if [ $? -eq 0 ] ; then\n            echo \"Tomcat appears to still be running with PID $PID. Start aborted.\"\n            exit 1\n          else\n\n\nTomcat should not treat tomcat is still alive.\nThe script should work anyway.", "id": 182281, "time": "2015-04-09T08:48:31Z", "bug_id": 57801, "creation_time": "2015-04-09T08:48:31Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 57801, "attachment_id": null, "text": "Either you should integrate your Tomcat stop (and probably start) into your system shutdown/startup (rc scripts or whatever methodology your system uses) or you rely on doing it by hand.\n\nIn the latter case, Tomcat does not get any info about the system shutdown and can not react on it. Trying to find out whether the found process after reboot actually is a Tomcat process or something else is not the task of the start script.Integrating it will be error prone and hard to maintain cross platform.\n\nIf you start by hand and get the cited error, you need to check the other process (like you did) and if it is something else and Tomcat is not running, purge the old PID file.\n\nWe could probably make the message\n\n\"Existing PID file found during start.\nTomcat appears to still be running with PID 3387. Start aborted.\"\n\na bit better\n\n\"Existing PID file found during start.\nTomcat appears to still be running with PID 3387. Start aborted.\nIf the process with PID 3387 is not a Tomcat process, remove the PID file NAME_OF_PID_FILE_HERE and try again.\"", "id": 182282, "time": "2015-04-09T09:13:51Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-04-09T09:13:51Z", "is_private": false}, {"count": 2, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "I added the message\n\n\"If this process is not a Tomcat process, remove the PID file and try again.\"\n\nto the output. The name of the PID file is already being output earlier during the script run.\n\nAdded to trunk in r1672272, tc 8 in r1672273 (will be part of 8.0.22), tc 7 in r1672274 (will be part of 7.0.62) and proposed for TC 6.", "id": 182283, "time": "2015-04-09T09:43:30Z", "bug_id": 57801, "creation_time": "2015-04-09T09:43:30Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "text": "Also added \"ps\" output for the process with the PID in r1672284 (trunk), r1672285 (tc8) and r1672286 (tc7).", "id": 182284, "time": "2015-04-09T10:36:18Z", "bug_id": 57801, "creation_time": "2015-04-09T10:36:18Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 57801, "attachment_id": null, "text": "Thanks Rainer.\n\nIf the machine is shutdown by power off, the rc script may don't have chance to execute.\nAfter use ps to check if the PID is alive, could you also extract the path of the process, and compare it with the home path of tomcat? If the path is the same, the process should be tomcat, otherwise, it's other process. Then, the script could rm the PID file and continue to start.\n\nSometimes, the tomcat process is just hung up. could you provide a force start option? Even the tomcat process is there, just kill it and start anyway.", "id": 182302, "time": "2015-04-10T10:52:46Z", "creator": "jiaoyk@gmail.com", "creation_time": "2015-04-10T10:52:46Z", "is_private": false}, {"count": 5, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "text": "(In reply to jiaoyk from comment #4)\n> Thanks Rainer.\n> \n> If the machine is shutdown by power off, the rc script may don't have chance\n> to execute.\n\nOK, but that's a really exceptional case. Then you might have the same problem with lots of unix daemons. Either they ignore the PID file, or they don't start.\n\n> After use ps to check if the PID is alive, could you also extract the path\n> of the process, and compare it with the home path of tomcat? If the path is\n> the same, the process should be tomcat, otherwise, it's other process. Then,\n> the script could rm the PID file and continue to start.\n\nI doubt, that this is possible in a platform independent but maintainable way. The script is used on lots of platforms, like various Linuxes, BSD, Solaris, Cygwin, OS-X, and probably AIX, HP-UX, etc. etc.\n\nSome of these platforms do not provide the full process command using \"ps\" but they truncate it. IMHO there is no platform independent way to retrieve all process args, e.g. the -Dcatalina.base=... that the script sets. I don't plan to invest more into this, because it happens very rarely and the solution will be fragile. Automatic problem resolution needs to be robust, otherwise it triggers more problems than it solves.\n\nIf anyone likes to tackle this, patches will be welcome, but must be multi-platform.\n\n> Sometimes, the tomcat process is just hung up. could you provide a force\n> start option? Even the tomcat process is there, just kill it and start\n> anyway.\n\nWe could support the existing\"-force\" for \"start\" as well and let -force ignore any PID file problems. An existing other process is only one such problem. There are more cases where the script currently aborts. Do you think all these cases should be ignored with -force? Please have a look at \"abort\" in bin/catalina.sh.", "id": 182303, "time": "2015-04-10T11:23:13Z", "bug_id": 57801, "creation_time": "2015-04-10T11:23:13Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 57801, "attachment_id": null, "text": "(In reply to Rainer Jung from comment #5)\n> (In reply to jiaoyk from comment #4)\n> > Thanks Rainer.\n> > \n> > If the machine is shutdown by power off, the rc script may don't have chance\n> > to execute.\n> \n> OK, but that's a really exceptional case. Then you might have the same\n> problem with lots of unix daemons. Either they ignore the PID file, or they\n> don't start.\n\nOr they\n\na) Put the PID file in ephemeral storage (ramdisk)\nb) Put the PID file in /tmp, which should be emptied on boot\nc) Otherwise arrange to have their PID files removed on boot", "id": 182308, "time": "2015-04-10T15:03:30Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-04-10T15:03:30Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jiaoyk@gmail.com", "attachment_id": null, "text": "\nThanks Rainer and Christopher\n\nIt's not worth to set up a ramdisk to store the PID file.\nIf the PID file is stored in /tmp, the PID file may be rm-ed by someone.\n\nThe script should work in worst case even it's rare. The script should not depend on the last state, it should be stateless.\n\nThe key point is catalina.sh treat the wrong process to be tomcat process.\n\nDo we really need PID file to save the PID?\n\nIf we have issues with cross platform to verify the home path, maybe we could first get the home path of the tomcat and then use this path to grep the right PID in the result of ps(assuming the key commands in the following functions exist in multiple unix/linux like OS).\n\nMaybe we could get the PID of tomcat by some function like the following?\n\n\nfunction get_tomcat_pid()\n{\n  declare NORMALIZED=$(echo $CATALINA_HOME | tr -s / /)\n  declare NORMALIZED_PATH=$(readlink -f $CATALINA_HOME)\n  if [ \"$NORMALIZED\" != \"$NORMALIZED_PATH\" ]; then\n    NORMALIZED=$NORMALIZED_PATH\n  fi\n  if [ -z \"$NORMALIZED\" -a \"${NORMALIZED+x}\" = \"x\" ] ; then\n                \n                return 1\n  fi\n  \n  declare pid=`ps -ef | grep  $NORMALIZED | grep -v grep | awk '{print $2}'`\n  if [ -z \"$pid\" -a \"${pid+x}\" = \"x\" ] ; then\n               \n                return 1\n  fi\n  echo $pid\n}\n\n\nThanks for supporting the force start.\n\nThe \"abort\" cases  such as can't remove or write the PID file should be abort, it looks that it does't have permission. Maybe user use the wrong user to run the process.\n\nThe \"abort\" cases such as \"PID file found but no matching process was found. Stop aborted.\" , \"$CATALINA_PID was set but the specified file does not exist.\"  should be a warning.", "id": 182331, "time": "2015-04-13T10:39:11Z", "bug_id": 57801, "creation_time": "2015-04-13T10:39:11Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 57801, "attachment_id": null, "text": "(In reply to Rainer Jung from comment #3)\n> Also added \"ps\" output for the process with the PID in r1672284 (trunk),\n> r1672285 (tc8) and r1672286 (tc7).\n\nBackported to Tomcat 6 in r1678326 and will be in 6.0.44 onwards.", "id": 182896, "time": "2015-05-08T14:17:23Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-05-08T14:17:23Z", "is_private": false}, {"count": 9, "tags": [], "text": "This issue is as fixed as it is going to get.\n\nUsing /tmp is the way to. The OS will set appropriate permissions so only root and the user Tomcat is running as can delete the file.", "attachment_id": null, "bug_id": 57801, "id": 189365, "time": "2016-03-11T19:10:50Z", "creator": "markt@apache.org", "creation_time": "2016-03-11T19:10:50Z", "is_private": false}]
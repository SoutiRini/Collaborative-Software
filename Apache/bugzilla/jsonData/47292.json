[{"count": 0, "tags": [], "creator": "martin.sulak@nam.cz", "attachment_id": null, "id": 127525, "time": "2009-05-31T08:58:34Z", "bug_id": 47292, "creation_time": "2009-05-31T08:58:34Z", "is_private": false, "text": "It seems SessionMessages spread in multicast are processed by all nodes including sender.\n\nProblem timing:\n1) http request received\n2) session is created\n3) session_created message sent\n4) attribute added into session\n5) session_created received back\n6) new session createde with same session_id and stored into sessions map replacing original session with attributes\n7) http request is done\n8) deltarequest sent but for empty session from step 6\n\nMy quick fix:\n    \n    /**\n     * handle receive new session is created at other node (create backup - primary false)\n     * @param msg\n     * @param sender\n     */\n    protected void handleSESSION_CREATED(SessionMessage msg,Member sender) {\n\t// Bug fix begin\n\t\tif (sessions.containsKey(msg.getSessionID())) {\n\t\t\tlog.debug(\"Rejected session_created with duplicit id\");\n\t\t\treturn;\n\t\t}\n\t// Bug fix end\n\n\tcounterReceive_EVT_SESSION_CREATED++;\n        if (log.isDebugEnabled()) log.debug(sm.getString(\"deltaManager.receiveMessage.createNewSession\",getName(), msg.getSessionID()));\n        DeltaSession session = (DeltaSession) createEmptySession();\n        session.setManager(this);\n        session.setValid(true);\n        session.setPrimarySession(false);\n        session.setCreationTime(msg.getTimestamp());\n        // use container maxInactiveInterval so that session will expire correctly in case of primary transfer\n        session.setMaxInactiveInterval(getMaxInactiveInterval());\n        session.access();\n        if(notifySessionListenersOnReplication)\n            session.setId(msg.getSessionID());\n        else\n            session.setIdInternal(msg.getSessionID());\n        session.resetDeltaRequest();\n        session.endAccess();\n    }\n\nMy suggested fixes:\n\n1) in sender node drop SessionMessage sent back by network layer\nCheck worker id in SessionMessage, which is part of session_id.\n\n2) replace SESSION_CREATED functionality by DeltaRequest.\nIf SessionMessage with DeltaRequest is received with unknown session_id, create new session."}, {"count": 1, "tags": [], "text": "Sorry, I forgot to mention : the handleSESSION_CREATED method I modified is located in class org.apache.catalina.ha.session.DeltaManager.", "attachment_id": null, "bug_id": 47292, "id": 127531, "time": "2009-05-31T23:01:31Z", "creator": "martin.sulak@nam.cz", "creation_time": "2009-05-31T23:01:31Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 47292, "attachment_id": null, "text": "Martin, what does this mean\n\n>It seems SessionMessages spread in multicast are processed by all nodes\n>including sender.\n\nWe're not using multicast for sending messages.\nAre you saying that the sending node is receiving the SESSION_CREATED message?", "id": 127537, "time": "2009-06-01T10:09:35Z", "creator": "fhanik@apache.org", "creation_time": "2009-06-01T10:09:35Z", "is_private": false}, {"count": 3, "tags": [], "creator": "martin.sulak@nam.cz", "text": "> We're not using multicast for sending messages.\n\nSorry, I just guessed.\n\n> Are you saying that the sending node is receiving the SESSION_CREATED message?\n\nYes, handleSESSION_CREATED was actually called while processing the request. At least log file said so. To be sure with this I added some logging into this method. Session_id was identical to session created in this request.", "id": 127542, "time": "2009-06-01T22:16:48Z", "bug_id": 47292, "creation_time": "2009-06-01T22:16:48Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "id": 128645, "time": "2009-07-08T12:40:11Z", "bug_id": 47292, "creation_time": "2009-07-08T12:40:11Z", "is_private": false, "text": "Could you attach your configurations from your different nodes, we shouldn't be receiving our own sessions locally.\nso while the quick fix takes care of the problem, its not addressing the actual root cause."}, {"count": 5, "tags": [], "bug_id": 47292, "attachment_id": 23945, "text": "Created attachment 23945\nZipped configuration files\n\nHere are requested configuration files from tomcat/conf, conf1 for node1 and conf2 for node2. Both nodes are on the same machine.", "id": 128648, "time": "2009-07-08T13:56:55Z", "creator": "martin.sulak@nam.cz", "creation_time": "2009-07-08T13:56:55Z", "is_private": false}, {"count": 6, "tags": [], "creator": "martin.sulak@nam.cz", "attachment_id": null, "id": 128649, "time": "2009-07-08T14:02:13Z", "bug_id": 47292, "creation_time": "2009-07-08T14:02:13Z", "is_private": false, "text": "I've also another problem: First node have tcpListenPort = 4000 and second node 4001. Second node starts ok, but first node always write SEVERE: No session state send ... into catalina.out.\nAccording to catalina.out, both nodes are sending request to port 4000. So first node sends request to itself."}, {"count": 7, "tags": [], "bug_id": 47292, "attachment_id": null, "id": 128650, "creation_time": "2009-07-08T14:15:35Z", "time": "2009-07-08T14:15:35Z", "creator": "fhanik@apache.org", "text": "Sounds like you have some useful info in the logs, are you able to give us those too?\n\nthanks in advance", "is_private": false}, {"count": 8, "tags": [], "text": "Hello,\n\nIn node 2 session request was sent to node 1 and reply arrived in 105 ms.\n\n8.7.2009 22:13:02 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions\nWARNING: Manager [localhost#/inetgweb2], requesting session state from org.apache.catalina.tribes.membership.MemberImpl[tcp://{127, 0, 1, 1}:4000,{127, 0, 1, 1},4000, alive=482259865,id={77 104 -45 52 13 -18 77 -88 -123 -28 -35 -2 111 103 73 -108 }, payload={}, command={}, domain={}, ]. This operation will timeout if no session state has been received within 60 seconds.\n8.7.2009 22:13:02 org.apache.catalina.ha.session.DeltaManager waitForSendAllSessions\nINFO: Manager [localhost#/inetgweb2]; session state send at 8.7.09 22:13 received in 105 ms.\n\n----------------------------------------------------------------------\n\nIn node 1 session request was sent to node 1 again and reply did not arrive.\n\n8.7.2009 22:36:59 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions\nWARNING: Manager [localhost#/inetgweb2], requesting session state from org.apache.catalina.tribes.membership.MemberImpl[tcp://{127, 0, 1, 1}:4000,{127, 0, 1, 1},4000, alive=483696349,id={77 104 -45 52 13 -18 77 -88 -123 -28 -35 -2 111 103 7\n3 -108 }, payload={}, command={}, domain={}, ]. This operation will timeout if no session state has been received within 60 seconds.\n...\n8.7.2009 22:37:59 org.apache.catalina.ha.session.DeltaManager waitForSendAllSessions\nSEVERE: Manager [localhost#/inetgweb2]: No session state send at 8.7.09 22:36 received, timing out after 60\u00a0009 ms.\n8.7.2009 22:37:59 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions\nWARNING: Manager [localhost#/inetgweb2]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 8.7.09 22:36 message date 1.1.70 1:00\n\n----------------------------------------------------------------------\n\nMore interesting are logs about memberAdded events (on node1, tcplistenport=4000):\n\nINFO: Starting Servlet Engine: Apache Tomcat/6.0.18\n8.7.2009 22:34:52 org.apache.catalina.ha.tcp.SimpleTcpCluster start\nINFO: Cluster is about to start\n8.7.2009 22:34:52 org.apache.catalina.tribes.transport.ReceiverBase bind\nINFO: Receiver Server Socket bound to:/127.0.1.1:4000\n8.7.2009 22:34:52 org.apache.catalina.tribes.membership.McastServiceImpl setupSocket\nINFO: Setting cluster mcast soTimeout to 500\n8.7.2009 22:34:52 org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers\nINFO: Sleeping for 1000 milliseconds to establish cluster membership, start level:4\n8.7.2009 22:34:52 org.apache.catalina.ha.tcp.SimpleTcpCluster memberAdded\nINFO: Replication member added:org.apache.catalina.tribes.membership.MemberImpl[tcp://{127, 0, 1, 1}:4000,{127, 0, 1, 1},4000, alive=483569817,id={77 104 -45 52 13 -18 77 -88 -123 -28 -35 -2 111 103 73 -108 }, payload={}, command={}, domain={}, ]\n8.7.2009 22:34:52 org.apache.catalina.tribes.io.BufferPool getBufferPool\nINFO: Created a buffer pool with max size:104857600 bytes of type:org.apache.catalina.tribes.io.BufferPool15Impl\n8.7.2009 22:34:52 org.apache.catalina.ha.tcp.SimpleTcpCluster memberAdded\nINFO: Replication member added:org.apache.catalina.tribes.membership.MemberImpl[tcp://{127, 0, 1, 1}:4001,{127, 0, 1, 1},4001, alive=483264299,id={62 80 120 -81 31 -10 76 115 -123 78 5 44 -86 -85 -85 -59 }, payload={}, command={}, domain={}, ]\n8.7.2009 22:34:53 org.apache.catalina.ha.tcp.SimpleTcpCluster memberAdded\nINFO: Replication member added:org.apache.catalina.tribes.membership.MemberImpl[tcp://{127, 0, 1, 1}:4001,{127, 0, 1, 1},4001, alive=81647,id={-113 -69 -19 41 -24 -23 76 53 -89 -13 125 -49 95 -62 63 2 }, payload={}, command={}, domain={}, ]\n8.7.2009 22:34:53 org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers\nINFO: Done sleeping, membership established, start level:4\n8.7.2009 22:34:53 org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers\nINFO: Sleeping for 1000 milliseconds to establish cluster membership, start level:8\n8.7.2009 22:34:54 org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers\nINFO: Done sleeping, membership established, start level:8\n\n----------------------------------------------------------------------\n\nI'm not sure why there are two memberadded events for port 4001 - node2.\nHowever there should definitely not be memberadded for port 4000 - node1 itself, which is first event in log.\nThis is cause of both my bugs:\n\nAs I've seen in SimpleTcpCluster.java, session messages are sent to all members. This can explain my first bug.\nIn DeltaManager.findSessionMasterMember first member is in getAllClusterSessions.\nThis explains my second bug.", "attachment_id": null, "bug_id": 47292, "id": 128654, "time": "2009-07-08T22:12:15Z", "creator": "martin.sulak@nam.cz", "creation_time": "2009-07-08T22:12:15Z", "is_private": false}, {"count": 9, "tags": [], "creator": "martin.sulak@nam.cz", "attachment_id": null, "id": 128660, "time": "2009-07-09T03:24:00Z", "bug_id": 47292, "creation_time": "2009-07-09T03:24:00Z", "is_private": false, "text": "Now I'm closer to the \"route cause\".\n\nIt seems during McastServiceImpl.waitForMembers ping is received with same ip and port but with different uniqueid. The ip is 127.0.1.1 so it actually may be tomcat on another machine. Member is added for 127.0.1.1 because of different uniqueid.\n\nI resolved it in /etc/hosts by adding \"self\" ip address of the machine.\n\nIt seems cluster.tcpListenAddressip adress in server.xml is ignored and system API is used instead to determine host's ip."}, {"attachment_id": null, "tags": [], "bug_id": 47292, "text": "Seems like you've worked out your kinks, and also used some funky configs.\nThe configuration for tomcat 6 is documented here\nhttp://tomcat.apache.org/tomcat-6.0-doc/config/cluster-receiver.html", "count": 10, "id": 128676, "time": "2009-07-09T14:39:33Z", "creator": "fhanik@apache.org", "creation_time": "2009-07-09T14:39:33Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Testing current Tomcat trunk (Updated to revision 1713973)\n+ Tomcat Native 1.2.2\nUsing Java 8u66 (32-bit) on Windows 7, Firefox 42.0\n\nSteps to reproduce:\nConfigure Tomcat:\n1. Install Tomcat Native 1.2.2: copy tcnative-1.dll into ${catalina.home}/bin\n\n2. Install certificates for HTTPS connector.\nI am using certificates included in Tomcat test suite:\nCopy the following files from source directory test\\org\\apache\\tomcat\\util\\net\\  into ${catalina.home}/conf:\n\nlocalhost-cert.pem\nlocalhost-key.pem\n\n3. Configure a HTTPS connector with HTTP/2 support,\n\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\" >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig honorCipherOrder=\"false\" >\n            <Certificate certificateKeyFile=\"conf/localhost-key.pem\"\n                         certificateFile=\"conf/localhost-cert.pem\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n(It is the same as commented sample in server.xml, but certificateKeyFile and certificateFile were updated to match file names, s/-rsa-/-/ )\n\n4. Start Tomcat\ncatalina.bat start\n\nUse browser (Firefox) to access examples:\nhttps://localhost:8443/examples/servlets/servlet/RequestInfoExample\n\n\nObserved behaviour:\n-------------------\n1. Access log (logs/localhost_access_log.2015-11-12.txt) contains:\n\n127.0.0.1 - - [12/Nov/2015:12:03:10 +0300] \"GET /examples/servlets/servlet/RequestInfoExample null\" 200 730\n\n2. RequestInfoExample servlet prints the following line:\n\nProtocol: \tnull \n\nExpected behaviour:\n--------------------\n1. Do not print \"null\" in access log.\n2. Provide a non-null value for request.getProtocol()\n\n\nNotes:\n-------\n1) A HTTP 0.9 request [1] results in empty string for request.getProtocol(), so it is distinct from this \"null\".\n\nIt is good that they are different. I was concerned that a HTTP/2 request cannot be distinguished from HTTP 0.9 one.\n\n(Actually, I think we can drop support for HTTP 0.9 if it impedes us in any way).\n\nSteps to reproduce:\nConnect with telnet to port 8080 and type the following line:\nGET /examples/servlets/servlet/RequestInfoExample\n\nThe following line is written into access log:\n127.0.0.1 - - [12/Nov/2015:12:16:59 +0300] \"GET /examples/servlets/servlet/RequestInfoExample \" 200 726\n\n[1] https://wiki.apache.org/tomcat/Specifications#HTTP\n\n\n2) I expect that the value for request.getProtocol() will be defined by Servlet 4.0 specification. The format of access log is up for us to define.\n\n\n3) A web application may test for support of HTTP/1.1 features by asking for request.getProtocol().\n\nIt that is a concern, one can use fake \"HTTP/1.1\" as the value for request.getProtocol().\n\nOn a longer perspective it is better to provide a different string for HTTP/2 and update the application to recognize it. There has to be a way for an application to test for availability of HTTP/2 features.\n\n\n4) For a reference:\nHTTP/2 specification RFC7540 itself defines no way to transmit a version string both in requests and responses.\n\nch.8.1.2.3.  Request Pseudo-Header Fields:\n\n> HTTP/2 does not define a way to carry the version identifier that is\n> included in the HTTP/1.1 request line.\n\nch.8.1.2.4.  Response Pseudo-Header Fields:\n\n> HTTP/2 does not define a way to carry the version or reason phrase\n> that is included in an HTTP/1.1 status line.\n\n\nProtocol is identified by \"h2\", \"h2c\" strings when protocol is negotiated. (ch.3.1. HTTP/2 Version Identification)\n\n\nIn HTTP/1.1 specification RFC7230\nch 2.6. Protocol Versioning says:\n\n     HTTP-version  = HTTP-name \"/\" DIGIT \".\" DIGIT\n     HTTP-name     = %x48.54.54.50 ; \"HTTP\", case-sensitive\n\nSo \"HTTP/2.0\" is better than \"HTTP/2\", but \"HTTP/2\" is how the protocol names itself in the title of RFC7540.\n\n\n5) It may be a good idea to follow Apache HTTPD here.\n\nIn Apache HTTPD support for HTTP/2 was introduced a month ago in HTTPD 2.4.17 with an experimental mod_http2 module.\n\n(Warning: It is known that mod_http2 1.0.0 included with 2.4.17 may crash the server when processing certain requests, \nhttp://markmail.org/message/oadvmtwui23h6w32\n\"[users@httpd] Crash in http/2\" thread from 20 Oct 2015\n)\n\nChangelog for an updated \"2.4.18-dev\" build at Apache Lounge including mod_http2 1.0.3 [2] mentions:\n\n> *) 'HTTP/2.0' is written in log files when requests are served via mod_http2. \n\n[2] http://www.apachelounge.com/viewtopic.php?t=6842\n\nI have not tested whether that is actually \"HTTP/2.0\" yet. Looking at source code changes, it looks that the related change in httpd trunk is r1708319. If I am reading that correctly, I think it prints \"HTTP/2\", not \"HTTP/2.0\".\n\n\nAs such, we can make the value configurable between none, \"HTTP/1.1\", \"HTTP/2.0\", \"HTTP/2\". Personally, I prefer \"HTTP/2.0\".", "is_private": false, "id": 186369, "creation_time": "2015-11-12T10:12:25Z", "time": "2015-11-12T10:12:25Z", "creator": "knst.kolinko@gmail.com", "bug_id": 58605, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 58605, "attachment_id": null, "id": 186370, "time": "2015-11-12T12:43:23Z", "creator": "markt@apache.org", "creation_time": "2015-11-12T12:43:23Z", "is_private": false, "text": "HTTP/2.0 is what Firefox reports when you use FireBug with h2. That works for me. I've also fixed an issue with h2c where the initial upgrade request never appeared in the access logs."}, {"count": 2, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "By the way, HTTP/2 FAQ:\nhttps://http2.github.io/faq/#is-it-http20-or-http2\n\"Is it HTTP/2.0 or HTTP/2?\"", "id": 186441, "time": "2015-11-19T08:35:30Z", "bug_id": 58605, "creation_time": "2015-11-19T08:35:30Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 25526, "text": "Tomcat allways parses the query string parameters as iso-8859-1 url encoded.\nIf the page that submits the data has UTF-8 encoding like:\n<%@ page contentType=\"text/html;charset=utf-8\"%>\n\nAnd even have the SetCharacterEncodingFilter set to UTF-8 in the web.xml\n\n<filter>\n  <filter-name>SetCharacterEncoding</filter-name>\n  <filter-class>filters.SetCharacterEncodingFilter</filter-class>\n  <init-param>\n    <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n  </init-param>\n  <init-param>\n    <param-name>ignore</param-name>\n    <param-value>false</param-value>\n  </init-param>\n</filter>\n<filter-mapping>\n  <filter-name>SetCharacterEncoding</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n\nYou have to do the following trick in the page that handles the request to get\nthe correct encoding:\n\nString param = new\nString(request.getParameter(\"param\").getBytes(\"iso-8859-1\"),\"utf-8\");\n\nChanging to POST works ok.", "id": 49120, "time": "2003-12-15T08:23:30Z", "creator": "pkor@exodus.gr", "creation_time": "2003-12-15T08:23:30Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "The Coyote HTTP/1.1 connector has a URIEncoding attribute which defaults to \nISO-8859-1.\nThe parameters class (o.a.t.u.http.Parameters) has a QueryStringEncoding field \nwhich defaults to the URIEncoding. It must be set before the parameters are \nparsed to have an effect.", "attachment_id": null, "bug_id": 25526, "id": 59907, "time": "2004-06-25T22:55:40Z", "creator": "markt@apache.org", "creation_time": "2004-06-25T22:55:40Z", "is_private": false}, {"count": 2, "tags": [], "creator": "scott@atlassian.com", "attachment_id": null, "id": 59915, "time": "2004-06-26T02:31:59Z", "bug_id": 25526, "creation_time": "2004-06-26T02:31:59Z", "is_private": false, "text": "So - if I do request.setCharacterEncoding() before I get the query parameters, then this will work?\n\nThis was closed as fixed.  Does this mean that this was a bug, and is now fixed?  From what you \nmention, the workaround is Tomcat specific, whereas this seems to be a bug with Tomcat not dealing \nwith the spec properly?"}, {"count": 3, "tags": [], "bug_id": 25526, "attachment_id": null, "id": 59950, "time": "2004-06-27T16:51:52Z", "creator": "markt@apache.org", "creation_time": "2004-06-27T16:51:52Z", "is_private": false, "text": "Depending on other settings (see below) yes it should. This has cropped up a \nnumber of times. I have put together some standard text which covers this area \nand have included it below.\n\nREQUESTS\n========\n\nThere are a number of situations where there may be a requirement to use non-\nUS ASCII characters in a URI. These include:\n- Parameters in the query string\n- Servlet paths\n\nThere is a standard for encoding URIs (http://www.w3.org/International/O-URL-\ncode.html) but this standard is not consistently followed by clients. This \ncauses a number of problems.\n\nThe functionality provided by Tomcat (4 and 5) to handle this less than ideal \nsituation is described below.\n\n1. The Coyote HTTP/1.1 connector has a useBodyEncodingForURI attribute which \nif set to true will use the request body encoding to decode the URI query \nparameters.\n  - The default value is true for TC4 (breaks spec but gives consistent \nbehaviour across TC4 versions)\n  - The default value is false for TC5 (spec compliant but there may be \nmigration issues for some apps)\n2. The Coyote HTTP/1.1 connector has a URIEncoding attribute which defaults to \nISO-8859-1.\n3. The parameters class (o.a.t.u.http.Parameters) has a QueryStringEncoding \nfield which defaults to the URIEncoding. It must be set before the parameters \nare parsed to have an effect.\n\nThings to note regarding the servlet API:\n1. HttpServletRequest.setCharacterEncoding() normally only applies to the \nrequest body NOT the URI.\n2. HttpServletRequest.getPathInfo() is decoded by the web container.\n3. HttpServletRequest.getRequestURI() is not decoded by container.\n\nOther tips:\n1. Use POST with forms to return parameters as the parameters are then part of \nthe request body.\n\n\nRESPONSES\n=========\n\nHTML META tags are ignored by Tomcat. You may use <%@ page pagEncoding=\"...\" %\n> for JSPs."}, {"count": 4, "tags": [], "creator": "anton@atlassian.com", "attachment_id": null, "id": 60325, "time": "2004-07-09T02:03:35Z", "bug_id": 25526, "creation_time": "2004-07-09T02:03:35Z", "is_private": false, "text": "Sorry - but I am still confused: in your comment, in point number 1 you say that\nthere is useBodyEncodingForURI parameter for Cayote that for TC4 defaults to true. \n\nIn the second point you say that Cayote has URIEncoding parameter which is set\nto ISO-8859-1 and in the third point you mention that the URIEncoding parameter\nis used to parse the URL parameters (by default).\n\nFrom you points I do not understand what is the purpose of the\nuseBodyEncodingForURI and when is it used by Tomcat?\n\nIn TC4, the behaviour that we are seeing is that the URL parameters are parsed\nusing ISO-8859-1 even of the request.setCharacterEncoding() is called with \"UTF-8\".\n\nIs there a way to configure Tomcat 4 and 5 (hopefully without calling\nTomcat/Cayote specific methods on objects at runtime) which will force the URL\nParameters to be parsed using the encoding of the body?\n\nThe reason I am after this, is that sometimes there is a need to send a browser\nredirect passing parameters. A redirect always results in a GET HTTP request\nfrom the browser. I would prefer not to use the session to store the parameters.\n\nThanks for all your help and information!"}, {"count": 5, "tags": [], "creator": "markt@apache.org", "text": "Bugzilla is not a forum for support questions. Please ask questions such as \nthis on tomcat user.", "id": 60375, "time": "2004-07-09T17:38:59Z", "bug_id": 25526, "creation_time": "2004-07-09T17:38:59Z", "is_private": false, "attachment_id": null}]
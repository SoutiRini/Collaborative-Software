[{"count": 0, "tags": [], "creator": "prasen@bea.com", "text": "Here is a simple example:\n  <target name=\"smart.jspc\">\n    <apply executable=\"java\" parallel=\"false\">\n      <arg value=\"weblogic.jspc\"/>\n      <arg line=\"-d ${classes} -docroot ${webapp}\"/>\n      <arg line=\"-compiler ${JAVACOMPILER}\"/>\n      <fileset dir=\"${src}\" includes=\"${webapp}/**/*.jsp\"/>\n      <mapper type=\"glob\" from=\"*.jsp\" to=\"*.class\"/>\n    </apply>  \n  </target>\n\nIt works okay, but is very expensive as each and every time it gets invoked, a \nnew JVM is booted. And I have over couple of hundred jsps to compile. It would \nbe lot faster if we could support another attribute like target in apply. In \nthat case the above task would look like this:\n\n  <target name=\"smart.jspc\">\n    <apply target=\"single.jspc\" outdatedfileproperty=\"outdatedFile\" \nparallel=\"false\">\n    </apply>  \n  </target>\n\n  <target name=\"single.jspc\" depends=\"console.rel.property\">\n      <java classname=\"weblogic.jspc\" >\n        <arg line=\"-d ${classes} -docroot ${webapp}\"/>\n        <arg line=\"${JAVACOMPILER}\"/>\n        <arg line=\"${outdatedFile}\"/>\n      </java>\n  </target>", "id": 10268, "time": "2002-02-03T21:16:47Z", "bug_id": 6204, "creation_time": "2002-02-03T21:16:47Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 6204, "text": "Why not use <wljspc> for this particular purpose?  Also, in the nightly builds \nis a <jspc> task that might be worth trying (there are noted issues with this \ntask currently though).", "id": 10270, "time": "2002-02-03T21:29:48Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-02-03T21:29:48Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "prasen@bea.com", "attachment_id": null, "is_private": false, "id": 10271, "time": "2002-02-03T21:42:48Z", "bug_id": 6204, "creation_time": "2002-02-03T21:42:48Z", "text": "Actually that is not the point. I can easily get away with the current problem \nby setting <apply parallel=true> in which case there will only be one JVM call. \nI am sure we can have an alternative solution for every problem, but I thought \nthat it would be a nice feature to have, specially when it is was so easy to do \nin MAKE.  I have encountered this problem many times in the past but in \ndifferent circumstances. Similar problem exists for xslt compilers, or even some \nhome grown java applications which take data in one form and generate the output \nin other form."}, {"count": 3, "tags": [], "creator": "jakarta@ehatchersolutions.com", "attachment_id": null, "is_private": false, "id": 10274, "time": "2002-02-03T23:06:25Z", "bug_id": 6204, "creation_time": "2002-02-03T23:06:25Z", "text": "Then post use-cases for the specific cases you're trying to implement.  It is \nvery unlikely that you'll get that kind of change made to <apply> without \nsomething more concrete to base it upon, but you'll likely hear that in such \ninstances a custom Ant task should be written as a wrapper instead.  I'm going \nto mark this as INVALID, but feel free to re-open with other use-cases."}, {"count": 4, "tags": [], "text": "As an additional note this style of task and it's cousin the foreach task has \nbeen rejected from ant-dev core a few times. However there are a few \nimplementations that have been posted to mailing list that may be useful to you\n", "is_private": false, "id": 10284, "creator": "donaldp@apache.org", "time": "2002-02-04T07:43:05Z", "bug_id": 6204, "creation_time": "2002-02-04T07:43:05Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "steve_l@iseran.com", "text": "I want to add one more point to the original poster\n\nThe reason we dont have a <javaon> is because we want you to write an ant task \nto do the same thing. This will give you\n -reusability\n -meaningful parameter names\n -the opportunity to implement dependency checking\n -the opportunity to implement mappers that work 100% of the time; your \nexample mapper doesnt handle JSP pages with spaces in the names or pages named \nafter reserved words. \n\nThis may seem extra effort, but the result will not only benefit you, it will \nbenefit everyone else who uses the task. As you observed, make makes what you \nwant to do easy, but that is all it offers in terms of program invocation, and \nleaves you with makefiles that are a dog to maintain. Ant, on the other hand, \nencourages the creation and use of re-usable tasks to simplify build files and \ncode reuse.\n\nFor the jsp example, why not work with us to integrate weblogic JSP into the \n<jspc> task as another factory. ", "id": 10311, "time": "2002-02-04T18:14:21Z", "bug_id": 6204, "creation_time": "2002-02-04T18:14:21Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 6204, "attachment_id": null, "text": "weblogic.jspc is just one example. Another example: We have a proprietary xml \nfile which defines all the logmessages and then we run a java programm to create \nthe LoggerClasses. Lets say domainLog.xml -> DomainLogger.java. \n\nI understand that we can always write a java task to do what apply does, but \nspecially for java. But we cannot/shouldnot ship the java task-classes with our \nproduct. So it creates another set of problems, as to where to put these ant \ntask classes. Just for these reasons sometimes it is a pain to write your own \ntask. \n\nAnd as you said yourself, that the result will not only benefit me but others \ntoo, so why not create a core-task like that. Am I the only one who finds it \nuseful ? If that is true, then I guess I dont have any choice. ", "id": 10313, "time": "2002-02-04T18:31:16Z", "creator": "prasen@bea.com", "creation_time": "2002-02-04T18:31:16Z", "is_private": false}, {"count": 7, "tags": [], "text": "Ummm... why would it be a problem where to put these classes?  Certainly you \nhave code you ship, and code you do not ship segregated somehow.  That \nparticular problem is certainly nothing Ant can solve!  Certainly <javaon> \nwould be useful in many situations, but it also goes around one of the \nprinciples the ant-dev team is trying to accomplish - keep Ant from becoming a \nscripting language and let it stay declarative. It is very simple to create a \nTask wrapper for almost any Java code, only a few lines of code could \naccomplish what you're after.", "is_private": false, "id": 10321, "creator": "jakarta@ehatchersolutions.com", "time": "2002-02-04T19:09:34Z", "bug_id": 6204, "creation_time": "2002-02-04T19:09:34Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "prasen@bea.com", "attachment_id": null, "is_private": false, "id": 10326, "time": "2002-02-04T19:38:22Z", "bug_id": 6204, "creation_time": "2002-02-04T19:38:22Z", "text": "I dont see the reason behind so much of resistance in adding such a simple task \nas this, if it makes life simpler. I guess my arguments were not that \nconvincing. Ok I give up!!!"}, {"count": 9, "attachment_id": null, "bug_id": 6204, "is_private": false, "id": 10329, "time": "2002-02-04T19:44:35Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-02-04T19:44:35Z", "tags": [], "text": "Read the archives of ant-dev.  This issue has been hammered through *many* \ntimes... you're coming in to it asking for something that has been shot down \nover and over again.  If you had convinced us that what you were trying to do \nwas impossible or really really difficult without that feature it would have \nbeen taken much more seriously without a doubt."}]
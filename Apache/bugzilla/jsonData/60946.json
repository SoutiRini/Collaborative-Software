[{"count": 0, "text": "If you can have an affirmative test like:\n\n<Location />\n    Require env is_good_request\n</Location>\n\nyou should also be able to have:\n\n<Location />\n    Require not env is_bad_request\n</Location>\n\nbut apparently this isn't allowed.  It results in the error:\n\nMar 28 14:04:49 mail httpd[2964]: AH00526: Syntax error on line 81 of /etc/httpd/conf.d/mod_setenvif.conf:\nMar 28 14:04:49 mail httpd[2964]: negative Require directive has no effect in <RequireAny> directive\n\nwhich for many is a meaningless message.\n\nGetting security right should be as painless and straightforward as possible.  Unfortunately, that's not the case here.\n\nI had to instead do:\n\n<Location />\n    <RequireAll>\n        Require all granted\n        Require not env is_bad_request\n    </RequireAll>\n</Location>\n\nbut this, again, is less than obvious.  So I ended up rewriting my configuration as a positive assertion, but that too is awkward:\n\nSetEnvIfExpr true is_good_request=1\n\nBrowserMatch \"^the beast$\" !is_good_request\n...\n\nSetEnvIf GEOIP_COUNTRY_CODE CN !is_good_request\n...\n\nSetEnvIf GEOIP_ISP \"OHV Hosting\" !is_good_request\n...\n\n<Location />\n    Require env is_good_request\n</Location>\n\ninstead.  So no matter how you try to write it as a workaround, it's going to have some warts.", "bug_id": 60946, "attachment_id": null, "id": 198095, "time": "2017-03-31T00:51:35Z", "creator": "philipp@redfish-solutions.com", "creation_time": "2017-03-31T00:51:35Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 60946, "attachment_id": null, "text": "See also bug 53069.", "id": 198096, "time": "2017-03-31T00:55:31Z", "creator": "philipp@redfish-solutions.com", "creation_time": "2017-03-31T00:55:31Z", "is_private": false}, {"text": "When dealing with negative condition, corresponding code has the following comment:\n\n            /* For negated directives, if the original result was denied\n             * then the new result is neutral since we can not grant\n             * access simply because authorization was not rejected.\n             */\n\n(see http://svn.apache.org/viewvc/httpd/httpd/trunk/modules/aaa/mod_authz_core.c?revision=1756038&view=markup&sortby=date#l792)\n\nSo, this done on purpose.", "tags": [], "bug_id": 60946, "is_private": false, "count": 2, "id": 198109, "time": "2017-03-31T17:01:39Z", "creator": "christophe.jaillet@wanadoo.fr", "creation_time": "2017-03-31T17:01:39Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "philipp@redfish-solutions.com", "attachment_id": null, "is_private": false, "id": 198110, "time": "2017-03-31T18:02:17Z", "bug_id": 60946, "creation_time": "2017-03-31T18:02:17Z", "text": "(In reply to Christophe JAILLET from comment #2)\n \n> So, this done on purpose.\n\nOkay, so it's a feature and not a bug.  ;-)\n\nIt's still counter-intuitive and more than a little confusing.\n\nSecurity should be made simple-stupid, because after you've been hacked is not the time to finally understand what your rules _really_ meant."}, {"count": 4, "tags": [], "creator": "jchampion@apache.org", "attachment_id": null, "text": "Yeah, this is a case where the design seems conceptually sound but the end user experience is not.\n\nI am agreed that we should not, from an architectural perspective, allow access to a resource if there are no modules positively indicating that authorization is granted. But from a user perspective, I'd argue that many people intend for\n\n    Require not env disallowed\n\nto *be* a positive declaration: \"Allow anyone who isn't explicitly disallowed.\" We should let users express this in a way that doesn't require five lines of boolean logic.\n\n(Well, I suppose we do, but it's not nearly as easy to parse:\n\n    Require expr \"-z %{reqenv:disallowed}\"\n\nIt's not intuitive that this check, which is effectively checking for the absence of something, is considered positive authorization, but `Require not` isn't.)\n\n<idle thoughts>\nDoes part of the confusion stem from the fact that we are <RequireAny> by default instead of <RequireAll>? Switching that alone might make some things more intuitive.\n</idle thoughts>", "id": 198111, "time": "2017-03-31T18:15:36Z", "bug_id": 60946, "creation_time": "2017-03-31T18:15:36Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 60946, "is_private": false, "text": "(In reply to Jacob Champion from comment #4)\n\n> <idle thoughts>\n> Does part of the confusion stem from the fact that we are <RequireAny> by\n> default instead of <RequireAll>? Switching that alone might make some things\n> more intuitive.\n> </idle thoughts>\n\nExcept that when one things of traditional mandatory access controls like ACLs and such, you execute the rules until you get your first conclusive match...  which is what <RequireAny> does.\n\nSo changing over to <RequireAll> would be changing one violation of The Principle of Least Astonishment for another... more of a lateral move than a forward one.", "id": 198112, "time": "2017-03-31T18:31:40Z", "creator": "philipp@redfish-solutions.com", "creation_time": "2017-03-31T18:31:40Z", "attachment_id": null}, {"count": 6, "text": "(In reply to Philip Prindeville from comment #5)\n> (In reply to Jacob Champion from comment #4)\n> \n> > <idle thoughts>\n> > Does part of the confusion stem from the fact that we are <RequireAny> by\n> > default instead of <RequireAll>? Switching that alone might make some things\n> > more intuitive.\n> > </idle thoughts>\n> \n> Except that when one things of traditional mandatory access controls like\n> ACLs and such, you execute the rules until you get your first conclusive\n> match...  which is what <RequireAny> does.\n\nWhile that might be true -- and I'm not convinced that's an accurate description of all MAC systems -- we're not using an ACL (or a MAC) authorization system here. It's a very flexible (perhaps too flexible), multi-paradigm system, and I would argue that you're just as likely to see role-based authz with some of the more advanced authorization modules.\n\nPerhaps the best thing to agree on is that any behavior might be \"astonishing\" to some, and we should try to do what is least astonishing to the widest possible range of users.\n\nAnyway: there's a good chance that this is neither here nor there. Maybe all we need to do is review what directives are considered neutral/success/failure in the authz system.", "bug_id": 60946, "is_private": false, "id": 198119, "time": "2017-03-31T18:58:55Z", "creator": "jchampion@apache.org", "creation_time": "2017-03-31T18:58:55Z", "tags": [], "attachment_id": null}, {"count": 7, "text": "(In reply to Jacob Champion from comment #6)\n\n> While that might be true -- and I'm not convinced that's an accurate\n> description of all MAC systems -- we're not using an ACL (or a MAC)\n> authorization system here. It's a very flexible (perhaps too flexible),\n> multi-paradigm system, and I would argue that you're just as likely to see\n> role-based authz with some of the more advanced authorization modules.\n\nYes, sorry.  I was thinking specifically of the case where you're controlling your decision based on IP address, host port, or some derivation of that (like GeoIP).\n\n> Perhaps the best thing to agree on is that any behavior might be\n> \"astonishing\" to some, and we should try to do what is least astonishing to\n> the widest possible range of users.\n\nI can subscribe to that.\n\n> Anyway: there's a good chance that this is neither here nor there. Maybe all\n> we need to do is review what directives are considered\n> neutral/success/failure in the authz system.\n\nSomeone explain to me again what the point of \"neutral\" is?\n\nI've always thought that success == !failure and vice versa.", "bug_id": 60946, "attachment_id": null, "id": 198121, "time": "2017-03-31T19:59:35Z", "creator": "philipp@redfish-solutions.com", "creation_time": "2017-03-31T19:59:35Z", "tags": [], "is_private": false}]
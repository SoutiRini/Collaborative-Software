[{"count": 0, "text": "The bug reported below in Internet2 also seems to be appearing in Apache's XML Security (I think Java 1.4.3).  (I'm assuming Internet2 is something different and that this bug just happens to be in both places and I needed to report it here?)  I assumed it was user error until I found this link.  Although the XML encrypted file can be decrypted in Java, it will not decrypt in .Net. .Net raises this error: \"[CryptographicException: Unable to retrieve the decryption key.]\" Seems to mess up the parsing. By manually editing the encrypted document (moving X509Data inside the Encrypted Key element, and wrapping the X509Data element in a second KeyInfo element), all becomes well, so it appears to be the same type of problem as the Internet2 bug.  Not sure if this is in Signature (mostly ds: elements) or in Encryption (I was encrypting and wrapping a symmetric key in the X.509 public key of the recipient).\n\n\nhttps://bugs.internet2.edu/jira/browse/CPPXT-31\nIn other words, it's sending this: \nEncryptedData \n    KeyInfo \n        EncryptedKey \n        X509Data (with SP's key) \nThe correct nesting is this: \nEncryptedData \n    KeyInfo \n        EncryptedKey \n            KeyInfo \n                X509Data (with SP's key) \n\n\n\nHere is the part of my code that raises the problem.\n  KeyInfo keyInfo = new KeyInfo(document);  \n  X509Data x509dat = new X509Data(document);\n  x509dat.addCertificate(cert);                //cert is an X509Certificate\n  keyInfo.add(encryptedKey);                   //encryptedKey contains an AES \n  symmetric key\n  keyInfo.add(x509dat);\n  encryptedDataElement.setKeyInfo(keyInfo);    //encryptedDataElement is\n                                               //EncryptedData", "bug_id": 47695, "attachment_id": null, "id": 129698, "time": "2009-08-14T16:25:42Z", "creator": "rjohnsog@gmu.edu", "creation_time": "2009-08-14T16:25:42Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "coheigea@apache.org", "attachment_id": null, "is_private": false, "id": 129735, "time": "2009-08-17T02:51:56Z", "bug_id": 47695, "creation_time": "2009-08-17T02:51:56Z", "text": "\nI don't get it...how is this a bug in XML Security? To get a structure like \n\nEncryptedData \n    KeyInfo \n        EncryptedKey \n            KeyInfo \n                X509Data (with SP's key) \n\nyou should be using two KeyInfo objects, something like this:\n\n  KeyInfo keyInfo = new KeyInfo(document);  \n  X509Data x509dat = new X509Data(document);\n  x509dat.addCertificate(cert);   \n  keyInfo.add(x509dat);\n  encryptedKey.add(keyInfo);\n             \n  keyInfo = new KeyInfo(document);\n  keyInfo.add(encryptedKey);                  \n  encryptedDataElement.setKeyInfo(keyInfo); \n\nColm."}, {"count": 2, "text": "Thank you very much!  Your suggestion allowed me to generate the correct structure (replaced \"keyInfo.add(encryptedKey)\" with \"encryptedDataElement.setKeyInfo(keyInfo)\", for anyone using this solution in the future).  I really appreciate the help.\n\nPer your question, what led me to post this as a bug rather than somewhere else requesting syntactical help was that, from my understanding of the referenced post, he was indicating that the following is invalid XML and thus XML Security should never allow it to be generated, nor should it decrypt this structure.  Since .Net failed to decrypt this but Apache did decrypt it, I assumed there was a problem.  I am a novice to all of this, but it did seem logical that perhaps an error or a different (syntactically legal?) structure should have been generated in the encrypted document (rather than generating apparently invalid XML syntax).\n\nEncryptedData \n    KeyInfo \n        EncryptedKey \n        X509Data\n\nI will mark this as Resolved, assuming that my deductions above are incorrect.  Thanks again for the help.", "bug_id": 47695, "is_private": false, "id": 129751, "time": "2009-08-17T16:03:38Z", "creator": "rjohnsog@gmu.edu", "creation_time": "2009-08-17T16:03:38Z", "tags": [], "attachment_id": null}]
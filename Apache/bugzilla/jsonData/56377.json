[{"count": 0, "tags": [], "bug_id": 56377, "attachment_id": 31498, "id": 174417, "time": "2014-04-09T14:15:39Z", "creator": "spuyo84@gmail.com", "creation_time": "2014-04-09T14:15:39Z", "is_private": false, "text": "Created attachment 31498\nSnippet\n\n* Quick overview:\n\nWhen you try to add a date into a cell, and you use a date with customized format. \nFor instance: \n\n\"yyyy-MM-dd HH:mm:ss \\\"GMT\\\"\" (this adds always a fixed timezone value to the date) \n\nIt means that you want to keep the cell as a date cell (no string cell), but only display in it the extra \"GMT\". When you want to autosize this column, the output width is shorter than the content, and then '#' characters are displayed. (see the attached xls file)\n\n* How to reproduce the issue: \n\nTo reproduce it just execute the \"generate()\" method of the attached code snippet, and create the xls file with the byte array returned value.\n\n* Note: I reproduced the issue with org.apache.poi.xssf.usermodel.XSSFSheet and org.apache.poi.ss.usermodel.Sheet"}, {"id": 174418, "tags": [], "bug_id": 56377, "attachment_id": 31499, "count": 1, "text": "Created attachment 31499\noutput xls file", "time": "2014-04-09T14:16:34Z", "creator": "spuyo84@gmail.com", "creation_time": "2014-04-09T14:16:34Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56377, "attachment_id": 31500, "id": 174419, "time": "2014-04-09T14:18:35Z", "creator": "spuyo84@gmail.com", "creation_time": "2014-04-09T14:18:35Z", "is_private": false, "text": "Created attachment 31500\nGenerated width"}, {"count": 3, "tags": [], "creator": "spuyo84@gmail.com", "text": "Created attachment 31501\nWidth after doubleclicking the column header", "id": 174420, "time": "2014-04-09T14:20:32Z", "bug_id": 56377, "creation_time": "2014-04-09T14:20:32Z", "is_private": false, "attachment_id": 31501}, {"count": 4, "tags": [], "bug_id": 56377, "attachment_id": null, "text": "I notice that your problematic cell is using the Calibri font\n\nHave you made sure that you have the Calibri font installed on your machine, *AND* available to Java? \n\nPOI uses the Java font code to work out how big each letter needs to be, when calculating the sizing, and that requires the right fonts to be present to get a precise value. Without the right font, Java picks a \"nearby\" one which doesn't always size out the same. See the bottom of the warning at\nhttp://poi.apache.org/spreadsheet/quick-guide.html#Autofit", "id": 175782, "time": "2014-06-12T09:27:47Z", "creator": "apache@gagravarr.org", "creation_time": "2014-06-12T09:27:47Z", "is_private": false}, {"count": 5, "tags": [], "creator": "holger.schackmann@kpmg.lu", "text": "I'm using the Calibri font in a similar sample. I've checked that the font is available to Java.\n\nHowever, columns with a date format or with an accounting format are not sufficiently resized using Sheet.autoSizeColumn().\n\nI also noticed the following: If I manually change the cell format to \"General\" in the resulting xls, the column width is sufficient. Hence I would guess that the autoSizeColumn() method does only consider the unformatted value of a cell.", "id": 175785, "time": "2014-06-12T10:22:51Z", "bug_id": 56377, "creation_time": "2014-06-12T10:22:51Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 56377, "attachment_id": null, "text": "(In reply to Holger from comment #5)\n> Hence I\n> would guess that the autoSizeColumn() method does only consider the\n> unformatted value of a cell.\n\nThat's incorrect - it very much does consider the formatted value of the cell. See line 156 of SheetUtil for it in action: http://svn.apache.org/repos/asf/poi/trunk/src/java/org/apache/poi/ss/util/SheetUtil.java\n\nIf you call DataFormatter.formatCell directly, do you get the correct string value back? If there was a problem with that, it might explain it.", "id": 176065, "time": "2014-06-26T14:53:22Z", "creator": "apache@gagravarr.org", "creation_time": "2014-06-26T14:53:22Z", "is_private": false}, {"count": 7, "tags": [], "creator": "spuyo84@gmail.com", "text": "I have debugged and I found the following:\n\nThis is the stack trace after calling the autoSizeColumn method:\n\n1. org.apache.poi.xssf.usermodel.XSSFSheet.autoSizeColumn(int, boolean): line 386 --> calls the getColumnWidth\n2. org.apache.poi.ss.util.SheetUtil.getColumnWidth(Sheet, int, boolean): line 203 --> Creates a default DataFormatter and then gets the cell.\n3. org.apache.poi.xssf.usermodel.XSSFRow.getCell(int, MissingCellPolicy): line 204 --> Gets a cell with the following string value 41816.59016799769\n\nThis value is generated here: \n\n3.1: when we set the date of the date like this.\t\t\nGMT_CALENDAR.setTime(new Date());\ncell.setCellValue(GMT_CALENDAR);\n3.2: org.apache.poi.xssf.usermodel.XSSFCell.setCellValue(Calendar): line 630 --> converts to numeric excel date\n3.3: org.apache.poi.xssf.usermodel.XSSFCell.setCellValue(double): line 238 --> gets the string value of this number\n\n4. org.apache.poi.ss.util.SheetUtil.getCellWidth(Cell, int, DataFormatter, boolean): line 156 --> For the CellType numeric gets the string value 41816.59016799769\n5. org.apache.poi.ss.util.SheetUtil.getCellWidth(Cell, int, DataFormatter, boolean): line 164 --> Add \"0\" to this value\n6. org.apache.poi.ss.util.SheetUtil.getCellWidth(Cell, int, DataFormatter, boolean): line 183 --> Calculates the width value: (layout.getBounds().getWidth() / colspan) / defaultCharWidth) + cell.getCellStyle().getIndention(). \n((96.7158203125 / 1)/5) + 0 = 19.34\n\nIf I put this numeric value (41816.590167997690) in excel and we make it fit with the content and then I check the column width, I get this 19.34 value.\nThe expected width should be 22px, for the formatted data: '2014-06-26 14:41:12 GMT'.\n\nSo it's not using the same format I set to the date, It's using a numeric default format for date and then gets the width for that.", "id": 176069, "time": "2014-06-26T15:22:57Z", "bug_id": 56377, "creation_time": "2014-06-26T15:22:57Z", "is_private": false, "attachment_id": null}]
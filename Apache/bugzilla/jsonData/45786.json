[{"count": 0, "tags": [], "bug_id": 45786, "attachment_id": null, "id": 120547, "time": "2008-09-11T14:19:34Z", "creator": "leszek.szarlej@sabre.com", "creation_time": "2008-09-11T14:19:34Z", "is_private": false, "text": "Hello,\n\nI am experiencing problem due to Ant\u2019s \u201cunable to delete directory\u201d error.\n\nI am running builds on NAS storage (NFS) inside ClearCase snapshot view directory on RedHat 5 OS.\n\nAnt\u2019s delete task fails because directory is not empty, however it doesn\u2019t contain any file after the build has failed:\n\n \n\nSystem calls with exception ENOTEMPTY:\n\n14939 unlink(\"/nfs_mount/project1/views/test1/vobs/test1/bb/Deploy\") = -1 EISDIR (Is a directory)\n\n14939 rmdir(\"/nfs_mount/project1/views/test1/vobs/test1/bb/Deploy\") = -1 ENOTEMPTY (Directory not empty)\n\n14939 gettimeofday({1220420751, 309536}, NULL) \n\n \n\nI modified Ant\u2019s Delete.java source, adding a line that drops content of a directory before delete attempt.\n\nAnt\u2019s output confirmed our predictions (hidden .nfsxxxxx file)\n\n \n\n2008-09-03 08:36:12,495 [Thread-14] INFO  ScriptRunner     -    [delete] ### Content of /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy: [.nfs0000000001291e4e000000c5]\n\n2008-09-03 08:36:11,881 [Thread-13] WARN  ScriptRunner     - /nfs_mount/project1/views/test1/vobs/test1/bb/base/build.xml:315: Unable to delete directory /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy\n\n \n\nBecause the hidden .nfs file doesn\u2019t exist when build crashes, I told ant to sleep 6 minutes after first failed attempt of deleting directory. When ant stopped streaming messages I found what is the directory that it couldn\u2019t delete:\n\n[delete] ### Content of /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy: [.nfs0000000001dfe6d2000000c9]\n\n \n\nWhile ant was sleeping I checked that directory:\n\nbash-3.2# ls -la /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy\n\ntotal 2168\n\ndrwxr-xr-x  2 cimaster wmbs    4096 Sep  3  2008 .\n\ndrwxr-xr-x 54 cimaster wmbs    4096 Sep  3  2008 ..\n\n-rw-r--r--  1 cimaster wmbs 2203627 Sep  3  2008 .nfs0000000001dfe6d2000000c9\n\n \n\n..I checked what process has this file opened:\n\n \n\nbash-3.2# lsof /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy/.nfs0000000001dfe6d2000000c9\n\nCOMMAND   PID     USER   FD   TYPE DEVICE    SIZE     NODE NAME\n\njava    17808 cimaster  mem    REG   0,30 2203627 31450834 /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy/.nfs0000000001dfe6d2000000c9\n\njava    17808 cimaster   42r   REG   0,30 2203627 31450834 /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy/.nfs0000000001dfe6d2000000c9\n\n \n\nand found process number 17808\n\ncimaster 17808 17807 10 15:30 ?        00:00:25 /usr/java/jdk1.6.0_07/jre/bin/java -Xms512m -Xmx1024m -XX:MaxPermSize=256m -classpath /tmp/cc/ant/lib/ant-launcher.jar -Dant.home=/tmp/cc/ant -Dant.library.dir=/tmp/cc/ant/lib org.apache.tools.ant.launch.Launcher -cp :/lib/jdepend-2.9/lib/jdepend-2.9.jar:/lib/jdepend-2.9/lib/jdepend-2.9.jar:/lib/jdepend-2.9/lib/jdepend-2.9.jar -v -logger net.sourceforge.cruisecontrol.builders.AntProgressLogger -listener org.apache.tools.ant.XmlLogger -DXmlLogger.file=log.xml -lib /tmp/cc/lib/cruisecontrol-antprogresslogger.jar -Dcclastbuildtimestamp=20080901000000 -Dcvstimestamp=2008-09-03 20:30:39 GMT -Dbuildforced=true -Dcclastgoodbuildtimestamp=20080901000000 -Dcctimestamp=20080903153039 -Dclearcasenow=03-September-2008.15:30:39 -Dlabel=build.1 -Dprojectname=Merchant_Svcs -Dclearcaselastbuild=01-September-2008.00:00:00 -Dlastbuildsuccessful=false -buildfile /nfs_mount/project1/views/test1/vobs/test1/bb/build.xml target\n\n \n\nso it is an ant process, it means that ant keeps handle do this file itself and that is why it can\u2019t delete it ?\n\nIf it is true, this file should disappear when ant process crashes after second deletion attempt. I waited for 6 minutes period to end. When ant crashed, I listed content of that directory:\n\nbash-3.2$ ls -la /nfs_mount/project1/views/test1/vobs/test1/bb/Deploy\n\ntotal 8\n\ndrwxr-xr-x  2 cimaster wmbs 4096 Sep  3  2008 .\n\ndrwxr-xr-x 54 cimaster wmbs 4096 Sep  3  2008 ..\n\n \n\nThe file doesn\u2019t exist anymore. Looking on hidden .nfs file size, I found that this file is a copy of some jar file (which is deleted) inside that directory. \n\n \n\nTested on many Ant versions and many jdk versions. When I execute build on local storage, build goes fine. Thanks for any help in debugging this issue.\n\n \n\nLeszek"}, {"count": 1, "tags": [], "text": "can you extract a simple test that fails but (preferable) doesn't involve clearcase?\n\nI don't think Ant's Java code created that file and much less expect it to keep the file open, but I'm neither familiar with clearcase nor the way Ant interacts with it.\n\nWhen there is the .nfs* file Ant would probably try to delete it but fail (is there any log talking about that?) if not, then File.list() on the directory doesn't mention the file at all.\n\n", "attachment_id": null, "bug_id": 45786, "id": 120657, "time": "2008-09-16T01:50:02Z", "creator": "bodewig@apache.org", "creation_time": "2008-09-16T01:50:02Z", "is_private": false}, {"count": 2, "tags": [], "creator": "jkf@apache.org", "attachment_id": null, "text": "This is general behavior of NFS based file systems, under normal unix filesystems a file is referenced by either the file system or by an process or both. The reference from the file system can be removed, the reference to the already deleted file from the running process remains open. (This process can still read and/or write this file.) In case of an NFS file system a dummy entry is created in the same directory. The open process has no handles on the machine the file is located. To avoid the file being deleted while handles are still open this .nfs entry is created. (removing this .nfs file, will just cause a new .nfs file to be created as long as the process is running.)\n\nThe solution therefore is to close the open file handle to this jar file before trying to delete the directory.\n\n- When / why is this jar file opened ant?\n\n- When should this jar file be released by ant?\n\nIn case the first question is answered with from the start (classpath provided to ant when starting) there is nothing we can do.\nIn case the jar file is opened later we can see if it is possible to close the classloader used to open the jar file. This may lead to the possible to delete the file.\n\n", "id": 121678, "time": "2008-10-19T04:21:53Z", "bug_id": 45786, "creation_time": "2008-10-19T04:21:53Z", "is_private": false}, {"count": 3, "tags": [], "creator": "jmcnally@apache.org", "attachment_id": null, "is_private": false, "id": 149928, "time": "2011-09-28T22:11:56Z", "bug_id": 45786, "creation_time": "2011-09-28T22:11:56Z", "text": "The problem with deleting directories on NFS is likely not specific to ant. The following code will exhibit the problem\n\npublic static boolean deleteDir(File dir) {\n\nif (dir.isDirectory()) {\n    String[] children = dir.list();\n\n    for (int i = 0; i < children.length; i++) {\n        boolean success = deleteDir(new File(dir, children[i]));\n        if (!success) {  \n            return false;\n        }\n    }\n}\n\nreturn dir.delete(); // this will not delete a directory containing .nfs files\n\n}\n\nI've found that replacing the return statement above with the following code allows the delete to proceed to completion:\n\nboolean isDeleted = dir.delete();\nif (!isDeleted && dir.exists()) {\n    // Directories mounted on NFS volumes may have lingering .nfsXXXX files\n    // if no streams are open, it is likely from stale objects\n    System.gc();\n    try {\n        Thread.sleep(100);\n    } catch (InterruptedException e) {\n        //ignored\n    }\n    isDeleted = dir.delete();\n}\nreturn isDeleted;\n\n\nNot the most satisfying solution, but it works.  In this case there doesn't seem to be any code directly making use of the files which were deleted.  But maybe the dir.list() code used to loop over and clear the directory has some stale objects which must be GC'ed before the directory will delete.  The slight delay also improves the likelihood the .nfs files are removed, but is not a substitute for the GC."}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "This looks a lot like the code in FileUtils#tryHardToDelete, should be possible to refactor all code that deletes trees to use that.  I'll give it a try.", "id": 149941, "time": "2011-09-29T13:01:05Z", "bug_id": 45786, "creation_time": "2011-09-29T13:01:05Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 45786, "attachment_id": null, "id": 149945, "time": "2011-09-29T13:42:11Z", "creator": "bodewig@apache.org", "creation_time": "2011-09-29T13:42:11Z", "is_private": false, "text": "could anybody please give svn revision 1177305 a try?\n\n<delete> has a new performGCOnFailedDelete that defaults to true on Windows and\nmay help in the NFS case when set to true as well."}, {"count": 6, "tags": [], "bug_id": 45786, "is_private": false, "text": "I'll simply assume performGCOnFailedDelete works.  Please reopen if it doesn't help.", "id": 153341, "time": "2012-02-01T12:42:05Z", "creator": "bodewig@apache.org", "creation_time": "2012-02-01T12:42:05Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 34318, "attachment_id": null, "text": "I think it would be more helpful if JavaClass.dump(*OutputStream)\ndidnt call close as the caller may not be finished with the stream.\n\nOnly for JavaClass.dump(File) does BCEL \"own\" the OutputStream.\n\nIt also looks like the caller should provide an extra finally {... os.close() }\nas JavaClass.dump may not close the stream in the event of an error.\n\nFor a concrete example: When writing a JAR using JarOutputStream \nthe stream shouldnt be closed till multiple classes have been written. \nSo the real stream has to be wrapped with a Filter/Proxy that ignores close.\n\nThis problem also appears for ClassParser.\n\nMany thanks for your excellent code.", "id": 73323, "time": "2005-04-06T03:15:23Z", "creator": "sam@redspr.com", "creation_time": "2005-04-06T03:15:23Z", "is_private": false}, {"count": 1, "tags": [], "creator": "dbrosius@mebigfatguy.com", "text": "Agreed, The fact that the stream is created in the constructor is a bad idea \nas well. I'll look into reworking this area.", "id": 73326, "time": "2005-04-06T04:20:02Z", "bug_id": 34318, "creation_time": "2005-04-06T04:20:02Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "dbrosius@mebigfatguy.com", "text": "JavaClass and ClassParser now only close streams that they explicitly open. \nAlso move the creating of streams in ClassParser from the constructor to \nparse, so that the lifetime of the stream can be explicitly controlled thru \ntry/finally.", "id": 73433, "time": "2005-04-08T05:01:44Z", "bug_id": 34318, "creation_time": "2005-04-08T05:01:44Z", "is_private": false, "attachment_id": null}]
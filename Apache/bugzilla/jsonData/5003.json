[{"count": 0, "tags": [], "text": "Exec command stays waiting for output and error streams to be closed even when \nexecuted command already finished.\n\nThis bug prevents Ant from execution of processes, that are not closing out and \nerr stream correctly on Windows.\n\nSmall example is java class only executing its argument:\n    public static void main (String args[]) throws Exception {\n        Runtime.getRuntime().exec(args[0]);\n        System.out.println(\"finished\");\n    }\n\nand build.xml containing something like this:\n        <exec executable=\"java\" >\n            <arg line=\" -cp . test rmid\"/>\n        </exec>\n\nThis task starts rmid using test class, writes \"finished\" and stays hanged on \nWindows.\nThe same code on Linux(Solaris) starts rmid, writes \"finshed\" and realy \nfinishes.\n\nMain problem is waiting for error and output stream to be closed in \norg.apache.tools.ant.taskdefs.PumpStreamHandler method stop() code             \ninputThread.join(); and errorThread.join();\n\nOutput with Full thread dump of blocked exec task is:\nBuildfile: build.xml\n\ntest:\n     [exec] finished\nFull thread dump:\n\n\"Thread-1\" daemon prio=5 tid=0x8b8ad48 nid=0x604 runnable [0x8f2f000..0x8f2fdbc]\n        at java.io.FileInputStream.readBytes(Native Method)\n        at java.io.FileInputStream.read(FileInputStream.java:166)\n        at org.apache.tools.ant.taskdefs.StreamPumper.run(StreamPumper.java:99)\n        at java.lang.Thread.run(Thread.java:484)\n\n\"Thread-0\" daemon prio=5 tid=0x8b3da98 nid=0x57c runnable [0x8eef000..0x8eefdbc]\n        at java.io.FileInputStream.readBytes(Native Method)\n        at java.io.FileInputStream.read(FileInputStream.java:183)\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:186)\n        at java.io.BufferedInputStream.read1(BufferedInputStream.java:225)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:280)\n        at java.io.FilterInputStream.read(FilterInputStream.java:93)\n        at org.apache.tools.ant.taskdefs.StreamPumper.run(StreamPumper.java:99)\n        at java.lang.Thread.run(Thread.java:484)\n\n\"Signal Dispatcher\" daemon prio=10 tid=0x960620 nid=0x670 waiting on monitor \n[0..0]\n\n\"Finalizer\" daemon prio=9 tid=0x95c880 nid=0x4e8 waiting on monitor \n[0x8daf000..0x8dafdbc]\n        at java.lang.Object.wait(Native Method)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:108)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:123)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:162)\n\n\"Reference Handler\" daemon prio=10 tid=0x8af0368 nid=0x4fc waiting on monitor \n[0x8d6f000..0x8d6fdbc]\n        at java.lang.Object.wait(Native Method)\n        at java.lang.Object.wait(Object.java:420)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:110)\n\n\"main\" prio=5 tid=0x284950 nid=0x60c waiting on monitor [0x6f000..0x6fc34]\n        at java.lang.Object.wait(Native Method)\n        at java.lang.Thread.join(Thread.java:930)\n        at java.lang.Thread.join(Thread.java:983)\n        at org.apache.tools.ant.taskdefs.PumpStreamHandler.stop\n(PumpStreamHandler.java:111)\n        at org.apache.tools.ant.taskdefs.LogStreamHandler.stop\n(LogStreamHandler.java:85)\n        at org.apache.tools.ant.taskdefs.Execute.execute(Execute.java:397)\n        at org.apache.tools.ant.taskdefs.ExecTask.runExecute(ExecTask.java:250)\n        at org.apache.tools.ant.taskdefs.ExecTask.runExec(ExecTask.java:279)\n        at org.apache.tools.ant.taskdefs.ExecTask.execute(ExecTask.java:177)\n        at org.apache.tools.ant.Task.perform(Task.java:217)\n        at org.apache.tools.ant.Target.execute(Target.java:184)\n        at org.apache.tools.ant.Target.performTasks(Target.java:202)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:601)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:560)\n        at org.apache.tools.ant.Main.runBuild(Main.java:454)\n        at org.apache.tools.ant.Main.start(Main.java:153)\n        at org.apache.tools.ant.Main.main(Main.java:176)\n\n\"VM Thread\" prio=5 tid=0x8b5e1c0 nid=0x3c8 runnable\n\n\"VM Periodic Task Thread\" prio=10 tid=0x95f320 nid=0x558 waiting on monitor\n\"Suspend Checker Thread\" prio=10 tid=0x95fc70 nid=0x608 runnable", "attachment_id": null, "id": 8145, "creator": "adam.sotona@sun.com", "time": "2001-11-21T08:22:32Z", "bug_id": 5003, "creation_time": "2001-11-21T08:22:32Z", "is_private": false}, {"count": 1, "attachment_id": 860, "creator": "adam.sotona@sun.com", "is_private": false, "id": 8529, "time": "2001-12-03T07:25:37Z", "bug_id": 5003, "creation_time": "2001-12-03T07:25:37Z", "tags": [], "text": "Created attachment 860\nsuggested fix of org.apache.tools.ant.taskdefs.PumpStreamHandler"}, {"count": 2, "tags": [], "bug_id": 5003, "attachment_id": null, "id": 8530, "time": "2001-12-03T07:28:54Z", "creator": "adam.sotona@sun.com", "creation_time": "2001-12-03T07:28:54Z", "is_private": false, "text": "this bug prevents Ant from running on Windows and I found no workaround"}, {"count": 3, "tags": [], "bug_id": 5003, "text": "This is an interesting problem, and not one I have seen myself, despite my \nextensive use of ant on NT. I wonder if it is showing some interesting side \neffects of the call to exec() inside the sub process.\n\nWhatever, your supplied path [NB, please use diff -u in future] would seem to \nensure ant continues, and given that the stop() method is called after the \nprocess has terminated naturally or been killed by the watchdog should not \naffect the sub process.\n\nHowever, it runs the risk of leaking threads. This may not seem much on a \nsingle ant run, but in an ant-in-gui or automated build system thread leakage \ncan become an issue. Not as much a one as the build blocking, but still an \nissue.\n\nI think therefore that for a patch like this to go into the build, it has to \nprint out big warning messages to the effect that something is wrong with the \nclient app. Also we need to see if anyone else has replicated the problem\n\n\n\n\n\n", "id": 8537, "time": "2001-12-03T12:05:04Z", "creator": "steve_l@iseran.com", "creation_time": "2001-12-03T12:05:04Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 5003, "attachment_id": 868, "text": "Created attachment 868\nanother proposal how to fix this bug by implementing interruptable read", "id": 8566, "time": "2001-12-04T04:02:59Z", "creator": "adam.sotona@sun.com", "creation_time": "2001-12-04T04:02:59Z", "is_private": false}, {"count": 5, "tags": [], "creator": "adam.sotona@sun.com", "attachment_id": 996, "id": 9549, "time": "2002-01-11T06:15:59Z", "bug_id": 5003, "creation_time": "2002-01-11T06:15:59Z", "is_private": false, "text": "Created attachment 996\nAnother more powerfull patch, because bug still ocures in several cases"}, {"count": 6, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "id": 19600, "time": "2002-07-16T14:04:09Z", "bug_id": 5003, "creation_time": "2002-07-16T14:04:09Z", "is_private": false, "text": "This one has been here forever and I'm wondering if it is not related in some \nway to #10345 and #8510. Adam, out of curiosity do you have a testcase for \nthis ?"}, {"count": 7, "tags": [], "creator": "sbailliez@apache.org", "text": "Oops stupid question. the testcase is here...having a look.", "id": 19607, "time": "2002-07-16T14:16:52Z", "bug_id": 5003, "creation_time": "2002-07-16T14:16:52Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "nawkboy@yahoo.com", "text": "The patch (id=996J) did stop problems I had with execute hanging.  \nUnfortunately the patch also causes the output of my cvs log command to be \nprematurely truncated.  Before applying the patch, my code would hang the \nsecond time I executed a CVS log command but all of the output made it to my \nclient code's input buffer.\n\nI made the additional following change:\nThe patch to PumpStreamHandler makes changes like:\n\nwhile (inputThread.isAlive()) {\n\tinputThread.interrupt();\n\tinputThread.join(TIMEOUT);\n}\n\nI changed these to instead be:\n\t\t\nif (inputThread.isAlive()) {\n\tinputThread.join(TIMEOUT);\n\twhile (inputThread.isAlive()) {\n\t\tinputThread.interrupt();\n\t\tinputThread.join(TIMEOUT);\n\t}\n}\n\nFrom reading the previous patches this seems to have been the intent of Adam \nSotona all along.  He started out with something similar to this and then lost \nthe initial wait in the later version.\n\nImmediately interupting the thread is more likely to cause premature closing of \nthe thread.  Thereby preventing the client code from obtaining all the output \nof the executed command.  (cvs log in my case)  At least with my additional \nchange there is a better chance all the output is pushed into the client's \ninput buffer.", "id": 21345, "time": "2002-08-20T00:08:21Z", "bug_id": 5003, "creation_time": "2002-08-20T00:08:21Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 5003, "attachment_id": null, "id": 23493, "time": "2002-09-26T23:52:50Z", "creator": "JimWright@quick.cz", "creation_time": "2002-09-26T23:52:50Z", "is_private": false, "text": "Am I correct in thinking that a call to Process.waitFor() would work, except\nthat StreamPumper does not know about such things? The complication\nis that the command may not finish if you do not read the output streams but\nI am still wondering whether more fundamental changes might eventually be\nworthwhile e.g. Ant 2. StreamPumper looks to me like it might be mostly avoided.\n\nStill, the latest proposed fix looks like it would work.\n"}, {"count": 10, "tags": [], "bug_id": 5003, "attachment_id": null, "text": "I no longer think StreamPumper is likely to be avoided\nbut it is a shame that it is not dead simple.\n\nMy own software that encountered the same problem under\nwindoze relied on Process.waitFor(). The nearest thing I have\nto an ant task can now detect and interrupt a thread processing a\nstream that is never closed. Sorry I don't have time right\nnow to look into this possibility in the ant case.", "id": 23798, "time": "2002-10-03T00:10:57Z", "creator": "JimWright@quick.cz", "creation_time": "2002-10-03T00:10:57Z", "is_private": false}, {"count": 11, "tags": [], "text": "Assigning back to ant-dev as Stephane is now jetsetting about", "attachment_id": null, "bug_id": 5003, "id": 29583, "time": "2003-01-17T02:27:31Z", "creator": "conor@apache.org", "creation_time": "2003-01-17T02:27:31Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 5003, "attachment_id": null, "text": "Adam, would you like to try the latest CVS version of ant, where <exec/> seems to be implemented by a \ndifferent class org.apache.tools.ant.taskdefs.ExecTask if I read properly the \ndefaults.properties file.\nThe code is quite different from the code of the old exec task.", "id": 30595, "time": "2003-02-03T21:23:02Z", "creator": "levylambert@tiscali-dsl.de", "creation_time": "2003-02-03T21:23:02Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 5003, "attachment_id": null, "text": "It works for me with :\n\njava version \"1.4.1_01\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.1_01-b01)\nJava HotSpot(TM) Client VM (build 1.4.1_01-b01, mixed mode)\n\non \n\nWin 2K, Service Pack 2\n\nHowever, I wonder whether what is really happening is not that rmid has been \nfixed to close its stdout and stderr properly.\n\nI tried also with cvs log (which I am doing over ssh), and did not reproduce the \nproblem.\n\nSo the next question is :\nhow can one create a test class or a shell or Perl script or C program which \ndoes not close properly its stdin/stderr streams, so that the problem can be \n\"lab studied\" ?\n\nWithout a possibility to reproduce the problem, this should be closed as WONTFIX \nor WORKSFORME.", "id": 38322, "time": "2003-06-04T08:55:09Z", "creator": "levylambert@tiscali-dsl.de", "creation_time": "2003-06-04T08:55:09Z", "is_private": false}, {"count": 14, "tags": [], "text": "Hi, I mark this bug as resolved for ant 1.6 since nobody has voiced remarks.", "attachment_id": null, "id": 39122, "creator": "levylambert@tiscali-dsl.de", "time": "2003-06-19T21:35:29Z", "bug_id": 5003, "creation_time": "2003-06-19T21:35:29Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 5003, "attachment_id": null, "text": "bug is still present in 1.6 aand it cause problems for NetBeans 4.0 execution\n(NetBeans 4.0 build system is now based on Ant).\nSee bug: http://www.netbeans.org/issues/show_bug.cgi?id=49489\n\nsimple case I've described before is still reproducible but better try to\nexecute notepad instead of rmid:\n\n    public static void main(String args[]) throws Exception {\n        Runtime.getRuntime().exec(\"notepad\");\n        System.out.println(\"finished\");\n    }\n", "id": 64153, "time": "2004-09-24T07:52:06Z", "creator": "adam.sotona@sun.com", "creation_time": "2004-09-24T07:52:06Z", "is_private": false}, {"count": 16, "tags": [], "text": "Hi Adam,\nI do not follow your example with notepad.\nThe Runtime.getRuntime().exec(\"notepad\") will not\nreturn until the notepad process stops.\n\n", "attachment_id": null, "id": 67796, "creator": "peterreilly@apache.org", "time": "2004-12-02T18:09:02Z", "bug_id": 5003, "creation_time": "2004-12-02T18:09:02Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 5003, "attachment_id": null, "id": 67811, "time": "2004-12-02T19:52:51Z", "creator": "adam.sotona@sun.com", "creation_time": "2004-12-02T19:52:51Z", "is_private": false, "text": "Hi Peter,\nI do follow, the exec method starts the process and returns. Did you tried that ?\n\nBTW: part of the Runtime.exec javadoc:\n \"Executes the specified string command in a separate process.\""}, {"count": 18, "attachment_id": null, "creator": "stevel@apache.org", "text": "Notepad is special; it is a GUI app. If you look at how windows execs guis, it\ndoes *odd* things, things that only make sense from a historical perspective.\n\n\ntry on a command line app instead of notepad.", "id": 67820, "time": "2004-12-02T21:17:52Z", "bug_id": 5003, "creation_time": "2004-12-02T21:17:52Z", "tags": [], "is_private": false}, {"count": 19, "tags": [], "creator": "peterreilly@apache.org", "text": "Adam, I still do not follow.\nAnt exec is not the same as just calling process.exec().\nIt's job is to start the process and handle it's input\nand output <file descriptors|handles> and wait for it to finish.\n\nOne can use the \"spawn\" attribute to spawn off the process and\nnot care about it.\n\nnote, the notepad program is not the issue the follows also\nworks in unix:\n\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            Runtime.getRuntime().exec(\"emacs\");\n            System.out.println(\"finished\");\n            Thread.sleep(10 * 1000);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n\nThe parent process of the emacs process is the java program, and when it\ndies, the parent process becomes the init process.", "id": 67870, "time": "2004-12-03T12:03:32Z", "bug_id": 5003, "creation_time": "2004-12-03T12:03:32Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "creator": "adam.sotona@sun.com", "attachment_id": null, "text": "so once again:\n- this bug occures on Windows only\n\n- if you just execute emacs from Java on Linux - the Java process finishes - OK\n- if you'll do it using Ant - it finishes - OK\n- if you execute notepad (or whatever you want) on Windows - the Java process\nfinishes - again correct behavior\n- but if you'll do it through Ant on Windows it will wait till ALL executed\nprocesses close their streams and that's not correct\n\neverything was already described here and several patches were proposed\n\nyou just need to cut the streams pumping when the process dies on Windows after\nsome timeout - that's all", "id": 67932, "time": "2004-12-04T18:29:34Z", "bug_id": 5003, "creation_time": "2004-12-04T18:29:34Z", "is_private": false}, {"count": 21, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": 13680, "text": "Created attachment 13680\nbuild file showing the problem\n\nJust do ant in the directory with the build file\nIt makes a src directory, and populates it with two java files\nThe files are compiles, and an exec is run \"java -cp classes CallHello\"\nOn unix, the build finishes just after the \"finished\" message from CallHello\nOn windows, the build finishes about 19 seconds after the \"finished\" message", "id": 68100, "time": "2004-12-08T12:06:45Z", "bug_id": 5003, "creation_time": "2004-12-08T12:06:45Z", "is_private": false}, {"count": 22, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "id": 68102, "time": "2004-12-08T12:11:25Z", "bug_id": 5003, "creation_time": "2004-12-08T12:11:25Z", "is_private": false, "text": "Ok, I see what you are saying now.\nOn windows child processes keep the std and std outout file handles of\nthe master process (or at least Runtime#exec() is implemented in this\nway), on Unix this does not happen.\n\nThis means that one can start a master process from ant. This master\nprocess can create a number of child processes. The master process\nthen terminates, but the child processes of the master process are\nstill running. On Unix, the exec task while end at this time, but\non windows this will not happen, in fact the exec task will wait until\nall the children of the master process have terminated - this is *not* good,\nespecially for something like rmid.\n\nI have added an attachment that shows the problem."}, {"count": 23, "tags": [], "text": "I am reassigning this bug to the whole ant community, because I do not have any\nspecial solution (I think my name was in there since 2003, at a time when the\nissue was inactive).", "is_private": false, "id": 69009, "creator": "antoine@apache.org", "time": "2004-12-27T11:41:22Z", "bug_id": 5003, "creation_time": "2004-12-27T11:41:22Z", "attachment_id": null}, {"count": 24, "attachment_id": null, "bug_id": 5003, "text": "*** Bug 28135 has been marked as a duplicate of this bug. ***", "id": 83165, "time": "2005-12-03T05:18:46Z", "creator": "dockerysean@gmail.com", "creation_time": "2005-12-03T05:18:46Z", "tags": [], "is_private": false}, {"count": 25, "tags": [], "text": "*** Bug 37787 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 94856, "creator": "peterreilly@apache.org", "time": "2006-10-16T07:59:37Z", "bug_id": 5003, "creation_time": "2006-10-16T07:59:37Z", "is_private": false}, {"count": 26, "attachment_id": null, "creator": "jkf@apache.org", "text": "*** Bug 42534 has been marked as a duplicate of this bug. ***", "id": 104966, "time": "2007-07-01T02:05:33Z", "bug_id": 5003, "creation_time": "2007-07-01T02:05:33Z", "tags": [], "is_private": false}, {"count": 27, "tags": [], "bug_id": 5003, "text": "Created attachment 22009\nINTERVIEW  EVALUATION FORM", "id": 116997, "time": "2008-05-27T03:27:47Z", "creator": "narendra939@yahoo.co.in", "creation_time": "2008-05-27T03:27:47Z", "is_private": false, "attachment_id": 22009}, {"count": 28, "tags": [], "text": "Comment on attachment 22009\nINTERVIEW  EVALUATION FORM\n\nthis has nothing to do with the bug; marking as obsolete.", "is_private": false, "bug_id": 5003, "id": 117011, "time": "2008-05-27T07:36:09Z", "creator": "stevel@apache.org", "creation_time": "2008-05-27T07:36:09Z", "attachment_id": 22009}, {"count": 29, "tags": [], "bug_id": 5003, "text": "a loooooooooooooooong time, I know.\n\nAnt's code has changed a bit, so some extra work has become necessary.  That\nother classes are now using StreamPumper as well didn't help either.\n\nWith the original patch (even if adapted) several unit tests of Ant would hang\nand never return - I guess this has been true seven years ago as well.\n\nOne major problem I faced was that available() returns 0 on a closed stream\non some VMs (it did on Suns 1.4.2 for Windows, for example) and thus the\navailable trick doesn't work unless you are sure you are going to interrupt\nthe thread running StreamPumper eventually.\n\nI've also noticed that the approach using available impacts performance considerably, so I've restricted it to the platform (Windows) where it is needed (like the original patch did, but for a different reason).\n\nsvn revision 711860", "id": 122244, "time": "2008-11-06T06:34:25Z", "creator": "bodewig@apache.org", "creation_time": "2008-11-06T06:34:25Z", "is_private": false, "attachment_id": null}, {"count": 30, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 126841, "time": "2009-05-07T02:27:32Z", "bug_id": 5003, "creation_time": "2009-05-07T02:27:32Z", "is_private": false, "text": "*** Bug 46805 has been marked as a duplicate of this bug. ***"}, {"count": 31, "tags": [], "bug_id": 5003, "attachment_id": null, "id": 126845, "time": "2009-05-07T02:43:24Z", "creator": "s.franke@bebbosoft.de", "creation_time": "2009-05-07T02:43:24Z", "is_private": false, "text": "I just want to mention my fix which is posted at bug 46805. (sorry for creating a duplicate)\n\nThis bug is caused by closing unowned streams:\n\n new XyzStream() --> close it\n getXyzStream() --> don't close it, close/destroy the underlying object"}, {"count": 32, "attachment_id": null, "bug_id": 5003, "text": "reopened since an unresolved bug is merged into this.", "id": 126846, "time": "2009-05-07T02:45:37Z", "creator": "s.franke@bebbosoft.de", "creation_time": "2009-05-07T02:45:37Z", "tags": [], "is_private": false}, {"count": 33, "tags": [], "bug_id": 5003, "attachment_id": null, "id": 126937, "time": "2009-05-11T06:39:55Z", "creator": "bodewig@apache.org", "creation_time": "2009-05-11T06:39:55Z", "is_private": false, "text": "if there really is an issue caused by closing the streams than bug 46805 is no duplicate of bug 5003"}, {"count": 34, "tags": [], "creator": "mail4spam@inbox.ru", "text": "Using Ant 1.8.2 I still reproduce the error.", "id": 149984, "time": "2011-09-30T14:23:19Z", "bug_id": 5003, "creation_time": "2011-09-30T14:23:19Z", "is_private": false, "attachment_id": null}, {"count": 35, "tags": [], "text": "(In reply to comment #34)\n> Using Ant 1.8.2 I still reproduce the error.\n\nHow?", "attachment_id": null, "bug_id": 5003, "id": 149985, "time": "2011-09-30T15:17:36Z", "creator": "bodewig@apache.org", "creation_time": "2011-09-30T15:17:36Z", "is_private": false}, {"count": 36, "attachment_id": 28364, "bug_id": 5003, "text": "Created attachment 28364\npatch to StreamPumper.run to make it responsive to interrupts\n\nI ran into the same issue and was able to get the ant JVM unstuck by modifying the org.apache.tools.ant.taskdefs.StreamPumper.run() to make it more responsive to interrupt conditions. \n\nPlease see my diff to /ant-trunk/org/apache/tools/ant/taskdefs/StreamPumper.java and let me know if addreses any pending issues.", "id": 154042, "time": "2012-02-22T20:19:22Z", "creator": "kelapure@gmail.com", "creation_time": "2012-02-22T20:19:22Z", "tags": [], "is_private": false}, {"count": 37, "tags": [], "text": "Created attachment 28365\nrevised earlier patch slightly ... does the write more efficiently\n\nrevised earlier patch", "attachment_id": 28365, "id": 154043, "creator": "kelapure@gmail.com", "time": "2012-02-22T20:46:06Z", "bug_id": 5003, "creation_time": "2012-02-22T20:46:06Z", "is_private": false}, {"count": 38, "tags": [], "bug_id": 5003, "text": "I had something like this in some of my code.\n\nI found process.join() was returning, but my joins on the workers reading the input streams were not. \n\nyou could assume if the process has been dead, or has been dead a certain amount of time, you no longer care about the data on the streams. I ran into something like this when killing an external process. In my case, the choice is easy. I am forcibly terminating it. I don't care about the streams. Basically you get a reference to the streams while the process is still alive. And then at any point after it's dead, (or should be) you close the streams. This worked like a charm for me. I could do this where I join the process as well, instead of where I kill it.\n\nSo....\n\n\n\tOutputStream outputStream = process.getOutputStream();\n\tInputStream inputStream = process.getInputStream();\n\tInputStream errorStream = process.getErrorStream();\n\n\tprocess.destroy();\n\n\n\ttry\n\t{\n\t\toutputStream.flush();\n\t}\n\tcatch(IOException e)\n\t{\n\t}\n\n\ttry\n\t{\n\t\toutputStream.close();\n\t}\n\tcatch(IOException e)\n\t{\n\t}\n\n\ttry\n\t{\n\t\terrorStream.close();\n\t}\n\tcatch(IOException e)\n\t{\n\t}\n\n\ttry\n\t{\n\t\tinputStream.close();\n\t}\n\tcatch(IOException e)\n\t{\n\t}", "id": 166553, "time": "2013-04-12T17:48:28Z", "creator": "jameswartell@gmail.com", "creation_time": "2013-04-12T17:48:28Z", "is_private": false, "attachment_id": null}, {"count": 39, "tags": [], "text": "Ha. Strike that. Sometimes the calls to close() still deadlock in a native method.", "attachment_id": null, "bug_id": 5003, "id": 166792, "time": "2013-04-23T16:26:57Z", "creator": "jameswartell@gmail.com", "creation_time": "2013-04-23T16:26:57Z", "is_private": false}]
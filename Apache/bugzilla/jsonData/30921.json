[{"count": 0, "tags": [], "bug_id": 30921, "attachment_id": null, "text": "Quotes entered in the classpath can screw up execution of the ant.bat file under\nwin2k (possibly other oses)...\n\nFor example, QuickTime tends to quote it's classpath entry. Doing so causes\nant.bat to screw up particularly if the path has a space in it.", "id": 62661, "time": "2004-08-29T04:34:13Z", "creator": "hannosaj@yahoo.com.au", "creation_time": "2004-08-29T04:34:13Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 30921, "text": "\"Unset your system CLASSPATH\" is probably the most-chanted mantra in Ant lore.  \nIn my opinion everything Java could benefit from following this advice.  As \nsuch I am inclined to close this as WONTFIX and will probably do so assuming no \none changes my mind in the next few days.\n\nThanks,\nMatt", "id": 62782, "time": "2004-08-30T13:42:51Z", "creator": "mbenson@apache.org", "creation_time": "2004-08-30T13:42:51Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 30921, "text": "I have a solution, at least for my case which is:\nCLASSPATH=\"C:\\Program Files\\junit3.8.1\\junit.jar\"\n\nThe solution was to modify the first line of :runAnt from:\n\nif not \"%CLASSPATH%\"==\"\" goto runAntWithClasspath\n\nto:\n\nif not %CLASSPATH%==\"\" goto runAntWithClasspath\n\nI thought that this solution would not work when there were other classpath\nelements with quotation marks around them.  I set my classpath to:\nCLASSPATH=\"C:\\Program Files\\junit3.8.1\\junit.jar\";\"\"\n\nEven after that change, the wrapper batch file did not complain.  If other\npeople can confirm that this change does not cause problems, this change could\nbe patched in to solve this problem.", "id": 69289, "time": "2005-01-06T21:06:10Z", "creator": "brantgurganus2001@cherokeescouting.org", "creation_time": "2005-01-06T21:06:10Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "jkf@apache.org", "attachment_id": null, "id": 69293, "time": "2005-01-06T22:12:39Z", "bug_id": 30921, "creation_time": "2005-01-06T22:12:39Z", "is_private": false, "text": "This would break ant if no classpath is set at all, as then also the java\ncommand being called would have to be stripped from the quotes, which would in\nturn take the first of the ant opts as classpath if the classpath is not set at all.\n\nTrying with\n\n    BLAH set to: | some text | \"some text\" |  \"\"   | not set | text  |\ntest performed   |           |             |       |         |       |\n-----------------+-----------+-------------+-------+---------+-------+\n%BLAH%==\"\"       |   error   |    false    | true  |  false  | false |\n-----------------+-----------+-------------+-------+---------+-------+\n\"%BLAH%\"==\"\"     |   false   |    error    | false |  false  | false |\n-----------------+-----------+-------------+-------+---------+-------+\n\"\"%BLAH%\"\"==\"\"\"\" |   error   |    false    | false |  false  | false |\n-----------------+-----------+-------------+-------+---------+-------+\n\nshows that the check is completely bogus and that the batch script either fails\nor runs ant with the classpath, unless the -noclasspath option was given."}, {"count": 4, "tags": [], "text": "\nif defined CLASSPATH goto runAntWithClassPath would be the real check, but...\n\nstill we would need to check if the CLASSPATH already has quotes or not, and\napply quotes if the CLASSPATH contains spaces and does not contain quotes yet.\n\nso the solution could as well be to not use quotes setting the CLASSPATH\n\nset CLASSPATH=C:\\Program Files\\junit3.8.1\\junit.jar", "attachment_id": null, "bug_id": 30921, "id": 69294, "time": "2005-01-06T22:23:48Z", "creator": "jkf@apache.org", "creation_time": "2005-01-06T22:23:48Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 30921, "attachment_id": null, "text": "There is a smarter fix to lines like\nIF \"%VARIABLE%\"==\"\" ... \n\na.) do *not* use IF DEFINED, since this will break execution on Win98\nwhich doesn't support \"DEFINED\"\n\nb.) reverse the test, using a simple uninterpreted character, eg. '_'\nthat is unlikely to apear isolated at the start of the String.\nExample:\n\n  IF _==%VARIABLE%_\n\nRationale: for command.com and its ugly brothers, there has to be\nsomething nonspacey before and after the ==. \nThe sollution would work in all cases with just one exception:\n- VARIABLE=_ some other text, which should be reasonably uncommon\nfor paths aund file names.", "id": 69320, "time": "2005-01-07T01:55:00Z", "creator": "shalmaneser@ePost.de", "creation_time": "2005-01-07T01:55:00Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jkf@apache.org", "text": "in that case it would be better to plainly remove the check as\n%BLAH%_ == _ is false if BLAH is not set. (i.e. your check would always return\nfalse)\n\nIt still feels shaky what happens when ant is called in the java command though.", "id": 69330, "time": "2005-01-07T10:57:56Z", "bug_id": 30921, "creation_time": "2005-01-07T10:57:56Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 30921, "attachment_id": null, "id": 69349, "time": "2005-01-07T14:12:07Z", "creator": "stevel@apache.org", "creation_time": "2005-01-07T14:12:07Z", "is_private": false, "text": "Maybe we should be ruthless and in Ant1.7 make an end-of-life declaration for\nWin9x support.\n\nNone of the developers runs it (as far as I know), so it doesnt get tested well.\nIt isnt a real OS, and frankly, nobody should use it as a dev platform. \n\nAn EOL declaration would mean batch scripts wont support it any more (we leave\nthe old one 'ant98' around for legacy users, and bugreps in the scripts wont get\nfixed. Bugs in the Java side will be addressed on case-by-case basis. \n\nThe perl and python launchers will work..."}, {"count": 8, "tags": [], "bug_id": 30921, "attachment_id": null, "text": "Still the space / quote problems also exist on win XP", "id": 69350, "time": "2005-01-07T14:16:35Z", "creator": "jkf@apache.org", "creation_time": "2005-01-07T14:16:35Z", "is_private": false}, {"count": 9, "tags": [], "text": "Depends on the objectives. Despite the lore Matt mentioned,\nthere are people relying on setting the classpath, so the\ncommitters might want to keep this just for the sake of\nbackward compatibility.\n\nbtw.: didn't you mean to say 'true'?\n\nExtending your table:\n    BLAH set to: | some text | \"some text\" |  \"\"   | not set | text  | _ text |\ntest performed   |           |             |       |         |       |        |\n-----------------+-----------+-------------+-------+---------+-------+--------+\n%BLAH%_==_       |   error   |    false    | false |  true   | false | error  |\n-----------------+-----------+-------------+-------+---------+-------+--------+\n_==%BLAH%_       | false(*)  |    false    | false |  true   | false | error  |\n-----------------+-----------+-------------+-------+---------+-------+--------+\n\n(*) in\n     IF _==%BLAH%_ ECHO Hi There\n\nThis would be ok, since the interpreter sees:\n\n     IF _==some text_ ECHO Hi There\n\nand stops interpretation after evaluating _==some to false\n\nbut in \n     IF NOT _==%BLAH%_ ECHO Hi There\n\nthis breaks, because the interpreter now tries to execute\n\n     text_\n\nas a command.\nOnly problem here is the special role of the _ here, but I trust\nthat pathes are rarely starting with underscore + blank.\n\n\nAnyway, this would work the same way regardless, wether there are \nquotes in the content of BLAH or not.\n\nAs for the classpath argument in the java commandline:\nThere shouldn't be any problems with quotes in it,\nas long as there's an even count, and you don't expect\nthe 'missquoted' entries to be found by the JVM.\nBrents example confirms, that there are no problems\nwith spaces in a file name on the classpath, if properly quoted.\n\nRemember, that there might be quotes, regardless wether\nthere are spaces to protect or not.\n\nSo I would recommend: \n- either let it the way it is,\n- or fix the if the way described above.\n\nThomas\n\nP.S.: I volonteer to do the patch, if somebody else\ncommits.", "attachment_id": null, "bug_id": 30921, "id": 69351, "time": "2005-01-07T14:18:52Z", "creator": "shalmaneser@ePost.de", "creation_time": "2005-01-07T14:18:52Z", "is_private": false}, {"count": 10, "attachment_id": null, "bug_id": 30921, "text": "OK, dropping Win98 means, we could go for the much\nsafer\n   \n   IF DEFINED\n\nthen. ", "id": 69353, "time": "2005-01-07T14:47:04Z", "creator": "shalmaneser@ePost.de", "creation_time": "2005-01-07T14:47:04Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "text": "Why is everyone reacting ignoring the suspected next problem that will be hit \nif the check is removed? The problem of starting java with ant call and a set\nclasspath when the classpath contains spaces? (If the answer would be then put\nquotes around the classpath if it contains space, for exactly the same reason\nthe answer could be then don't put quotes around the classpath.)\n\nAs said getting rid of the check would completely do the trick, as any check\neither gives an error in an \"valid\" situation and returns false in all other\nvalid cases.\nCurrently ant always is called on windows XP with an empty classpath if the\nclasspath is not set\n\nI have tried several patches, on the test and the line after it, the best result\nso far was without any test at all (as the test would either sometimes give an\nerror, or would only return false.\n\n\nif %BLAH%_ == _ echo true with BLAH not set returns an emtpy line on my system,\nnot true, at least when run from the command line.\nWhen run from an batch file it will return true argh.\n\necho %BLAH%_ for an undefined BLAH gives %BLAH%_ as response, therefore %BLAH%_\nis not equal to _\n\nthat would mean the extended table reads:\n    BLAH set to: | some text | \"some text\" |  \"\"   | not set | text  | _ text |\ntest performed   |           |             |       |         |       |        |\n-----------------+-----------+-------------+-------+---------+-------+--------+\n%BLAH%_==_       |   error   |    false    | false |  true   | false | error  |\n-----------------+-----------+-------------+-------+---------+-------+--------+\n_==%BLAH%_       | false(*)  |    false    | false |  true   | false | error  |\n-----------------+-----------+-------------+-------+---------+-------+--------+\nnot _==%BLAH%_   |   error   |    true     | true  |  false  | true  |false(2)|\n-----------------+-----------+-------------+-------+---------+-------+--------+\n(2) should have returned true though! \n(3) the goal probably was to get the opposite here.\n\nso also here either error or the result is always the same, or deviates from the\nsame only if it shouldn't have deviated.\n\nbtw. is it possible to have an if defined in an batch script for win9x as long\nas it isn't executed?", "attachment_id": null, "bug_id": 30921, "id": 69356, "time": "2005-01-07T15:01:34Z", "creator": "jkf@apache.org", "creation_time": "2005-01-07T15:01:34Z", "is_private": false}, {"count": 12, "tags": [], "creator": "jkf@apache.org", "text": "As from batch files the check does return true the following comment is not valid.\n\n> so also here either error or the result is always the same, or deviates from the\n> same only if it shouldn't have deviated.\n\nI have instrumented ant to show what is added to the classpath if the check is\nremoved:\nwhile giving the command\nant test\n\nwith the line (as present currently)\n\"%_JAVACMD%\" %ANT_OPTS% -classpath \"%ANT_HOME%\\lib\\ant-launcher.jar\"\n\"-Dant.home=%ANT_HOME%\" org.apache.tools.ant.launch.Launcher %ANT_ARGS% -cp\n\"%CLASSPATH%\" %ANT_CMD_LINE_ARGS%\n\nCLASSPATH set to | passed to ant          | added to classpath by ant\n<not set>        | -cp \"\" test            | nothing added (not even empty dir)\n\"some path\"      | -cp \"\"some path\"\" test | C:\\ant\\dist\\some (1)\nsome path        | -cp \"some path\" test   | C:\\ant\\dist\\some path\n\n(1) in this case the word path is interpreted as the first target, instead of\nbeing part of the classpath.\n\nwith the modified line\n\"%_JAVACMD%\" %ANT_OPTS% -classpath \"%ANT_HOME%\\lib\\ant-launcher.jar\"\n\"-Dant.home=%ANT_HOME%\" org.apache.tools.ant.launch.Launcher %ANT_ARGS% -cp\n%CLASSPATH% %ANT_CMD_LINE_ARGS%\n\nCLASSPATH set to | passed to ant          | added to classpath by ant\n<not set>        | -cp test               | C:\\ant\\dist\\test (2)\n\"some path\"      | -cp \"some path\" test   | C:\\ant\\dist\\some path\nsome path        | -cp some path test     | C:\\ant\\dist\\some (3)\n\n(2) note that the check was removed test was the specified target.\n(3) note that path was removed from the claspath but added as target.\n\nSo we can see that indeed the next problem when removing or replacing the test\nwould be how to recognise where the classpath ends, either when \" are used in\nthe CLASSPATH and the batch script adds \" or when no \" are used in the CLASSPATH\nand the batch script doesn't add \".\n\nIt currently works if the CLASSPATH does not contain \" even when the CLASSPATH\ncontains spaces.\nRemoving the quotes from the call would break this.\n\nwhen looking at the environment variables defined per default in windows XP none\nof them contain quotes especially all other paths including the normal PATH and\nthe HOMEPATH variables are surrounded by \".\n\nIt may be possible to fix this by combining a solution in the ant scripts with\nan solution in the Launcher.java, but it wouldn't be easy.", "id": 69360, "time": "2005-01-07T16:03:12Z", "bug_id": 30921, "creation_time": "2005-01-07T16:03:12Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": null, "bug_id": 30921, "text": "(In reply to comment #12)\nCorrection:\n\n> when looking at the environment variables defined per default in windows XP none\n> of them contain quotes especially all other paths including the normal PATH and\n> the HOMEPATH variables are NOT surrounded by \".\n \n", "id": 69371, "time": "2005-01-07T18:01:06Z", "creator": "jkf@apache.org", "creation_time": "2005-01-07T18:01:06Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 30921, "text": "The following entry as been added to install.html:\n\n\"The ant.bat script makes use of three environment variables - ANT_HOME,\nCLASSPATH and JAVA_HOME. Ensure that if these variables are set, they do not\nhave quotes (either ' or \") and they do not end with \\ or with /.\"\n\nAs Martijn says, it is impossible to deal with CLASSPATH containing\nspaces and quotes in ant.bat.\n\nMarking as WONTFIX", "id": 94595, "time": "2006-10-06T09:12:34Z", "creator": "peterreilly@apache.org", "creation_time": "2006-10-06T09:12:34Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "This problem is seen to happen in Tomcat 5.5.20 and 6.0.16\nas well as SJAS81/82PE.  In some cases when the issue occurs one will see:\n\nSEVERE: Servlet.service() for servlet default threw exception\njava.io.IOException: Bad file number\n        at java.io.FileInputStream.readBytes(Native Method)\n        at java.io.FileInputStream.read(FileInputStream.java:194)\n        at java.io.BufferedInputStream.read1(BufferedInputStream.java:254)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:313)\n        at java.io.FilterInputStream.read(FilterInputStream.java:90)\n        at org.apache.catalina.servlets.DefaultServlet.copyRange(DefaultServlet.java:1993)\n        at org.apache.catalina.servlets.DefaultServlet.copy(DefaultServlet.java:1739)\n        at org.apache.catalina.servlets.DefaultServlet.serveResource(DefaultServlet.java:824)\n\nIt has currently only been reproduced on a Sparc T1 machine.\n\nRoot cause:\n\nAn optimization in org.apache.catalina.servlets.DefaultServlet copy (CacheEntry, InputStream, ServletOutputStream) was introduced in tomcat 5.5.  This optimization is getting the binary content into a byte buffer from the cache and writes directly to ServletOutputStream using ServletOutputStream's write method.  The ServletOutputStream implementation also uses its its own buffering for writing the byte buffer, while writing bytes using write(b, off, len) is not guaranteed to be in order.  In a highly threaded environment ServletOutputStream's write method gets accessed by multiple threads, so ServletOutputStream's write method may sometimes get called while the previous thread's writing of the byte buffer is not yet finished or its own buffer is not yet flushed, which results in corrupted output.\n\nFix:\n\nThe fix is to remove this optimization.  Said removal is expected to result in a negligible performance impact.  We would still be using cache entries and the copying of cache contents to ServletOutputStream would be done using BufferedInputStream which remains efficient.\n\nHere is the diff for the fix as applied to Sun's Appserver:\n\nIndex: DefaultServlet.java\n===================================================================\nRCS file: /m/jws/appserv-webtier/src_imported/jakarta-tomcat-catalina/catalina/s\nrc/share/org/apache/catalina/servlets/DefaultServlet.java,v\nretrieving revision 1.6\ndiff -u -r1.6 DefaultServlet.java\n--- DefaultServlet.java 1 Nov 2004 19:40:13 -0000       1.6\n+++ DefaultServlet.java 18 Jul 2008 12:02:47 -0000\n@@ -1758,14 +1758,7 @@\n         IOException exception = null;\n         InputStream resourceInputStream = null;\n\n-        // Optimization: If the binary content has already been loaded, send\n-        // it directly\n         if (cacheEntry.resource != null) {\n-            byte buffer[] = cacheEntry.resource.getContent();\n-            if (buffer != null) {\n-                ostream.write(buffer, 0, buffer.length);\n-                return;\n-            }\n             resourceInputStream = cacheEntry.resource.streamContent();\n         } else {\n             resourceInputStream = is;", "is_private": false, "id": 119623, "creator": "christopher.donaldson@sun.com", "time": "2008-08-08T12:11:27Z", "bug_id": 45601, "creation_time": "2008-08-08T12:11:27Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 45601, "text": "(In reply to comment #0)\n> This problem is seen to happen in Tomcat 5.5.20 and 6.0.16\n\nThe line numbers quoted in the stack trace do not match either of the Tomcat versions above, nor could I find a Tomcat 5.5.x or 6.0.x version that they did match. I tried using the patch to identify an offset but that didn't work either. In short, it is very difficult to work out what exactly this stack trace represents.\n\n> In a highly threaded environment\n> ServletOutputStream's write method gets accessed by multiple threads, so\n> ServletOutputStream's write method may sometimes get called while the previous\n> thread's writing of the byte buffer is not yet finished or its own buffer is\n> not yet flushed, which results in corrupted output.\n\nEvery response has its own ServletOutputStream. Since a response is handled by a single thread, I don't see how a threading issue can exist here unless response objects are being re-used across requests by the application. That would be an application bug.\n\n> The fix is to remove this optimization.\n\nThe stack trace shows reading from a File. The optimisation the patch removes copies the data directly from the cache without any file reading. I can't see how the proposed fix relates to the stack trace.\n\nFurther, removal of the optimisation makes it more likely that the content will be read from the file. Given that the stack trace is related to reading data from a file I would expect the proposed patch to make any error more likely not less likely.\n\nA Google search suggests that a lack of OS resources could also be a cause of this error. Given that the environment is highly threaded, and taking this to also mean highly loaded, this looks more like a JVM/OS issue to me.\n\nTherefore I am closing this as invalid as I can't see anything in the code that Tomcat is doing incorrectly. That said, I do have a nagging doubt I am missing the obvious so if I am, feel free to re-open and point it out.", "id": 119648, "time": "2008-08-09T09:29:02Z", "creator": "markt@apache.org", "creation_time": "2008-08-09T09:29:02Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "*** Bug 48760 has been marked as a duplicate of this bug. ***", "id": 134617, "time": "2010-02-17T22:07:35Z", "bug_id": 45601, "creation_time": "2010-02-17T22:07:35Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 45601, "attachment_id": null, "is_private": false, "id": 134618, "time": "2010-02-17T22:23:24Z", "creator": "markt@apache.org", "creation_time": "2010-02-17T22:23:24Z", "text": "If you see this error then the users list is the best place to figure out what is going wrong.\n\nI'm quite happy to apply a patch to fix a problem I can't reproduce providing that:\n- there is a logical explanation for a) why the problem is occurring and b) how the patch addresses it\n- the patch is confirmed to fix the issue in an environment where the issue can be produced\n- the patch isn't going to cause a regression for other use cases\n\nIf the discussion on the users list can provide satisfactory answers to all of the above points feel free to re-open this issue."}]
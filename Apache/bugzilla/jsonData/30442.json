[{"count": 0, "attachment_id": null, "bug_id": 30442, "text": "Here's my suggestion to make the rdbms store faster by reducing the number of \ntimes the database needs to be accessed when modifying child bindings or \nproperties.  If you have any questions let me know.\nTara\n\nI will attempt to attach the modified files.", "id": 61474, "time": "2004-08-02T23:53:36Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-02T23:53:36Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 30442, "text": "Created attachment 12303\nObject Node, modified to track which bindings are added/removed", "id": 61475, "time": "2004-08-02T23:54:38Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-02T23:54:38Z", "is_private": false, "attachment_id": 12303}, {"count": 2, "tags": [], "bug_id": 30442, "text": "Created attachment 12304\nNodeRevisionDescriptor, modified to track which properties are added/removed", "id": 61476, "time": "2004-08-02T23:55:47Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-02T23:55:47Z", "is_private": false, "attachment_id": 12304}, {"attachment_id": 12305, "tags": [], "bug_id": 30442, "is_private": false, "count": 3, "id": 61477, "time": "2004-08-02T23:57:33Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-02T23:57:33Z", "text": "Created attachment 12305\nStandardRDBMSAdapter, only inserts/deletes bindings or properties which have been updated."}, {"attachment_id": null, "tags": [], "bug_id": 30442, "is_private": false, "count": 4, "id": 61488, "time": "2004-08-03T12:20:43Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-03T12:20:43Z", "text": "I will have a loot at it"}, {"count": 5, "tags": [], "text": "First of all thanks for the contribution :)\n\nMy comments after review:\n\n(1) For the future, please contribute patch files rather than complete ones.\nThis makes life much easier. You can create them e.g. with cvs diff -uw fileName\n\n(2) In NodeRevisionDescriptor you need to take into account the namespace as\nwell. E.g. \n\nupdatedProps.add(property.getName()); \n\nshould rather be \n\nupdatedProps.add(getNamespacedPropertyName(property.getNamespace(),\n                                                    property.getName());\n\n(3) In StandardRDBMSAdapter fields updates and updatedBindings for sure can not\nbe global variables. The whole adapter will be used by multiple concurrent\nthreads. Why aren't local ones sufficient in the first place?\n\n(4) In StandardRDBMSAdapter method createRevisionDescriptor: If the descriptor\nis created can there by any updated properties?\n\n(5) In StandardRDBMSAdapter method removeRevisionDescriptor and clearBinding:\nCould you explain? Why not delete all properties / bindings? Why rely on that\nglobal variable?", "is_private": false, "bug_id": 30442, "id": 61492, "time": "2004-08-03T12:49:17Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-03T12:49:17Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "tara.talbott@pnl.gov", "is_private": false, "text": "1) Ok, I will attach the new diffs.  \n2)  To do it the way you suggest (updatedProps.add(getNamespacedPropertyName\n(property.getNamespace(),property.getName());)complicates things a little \nbecause the getNamespacedProperyName() method combines the property name and \nnamespace into one string and you can't separate them back out. This causes a \nproblem because the database stores them in separate fields.  I was able to \nuse the properties table to retrieve the name and namespace, but I'm not sure \nthis is the most efficient way to do this.    \n\n3) Local variables didn't seem to be sufficient because \nRemoveRevisionDescriptors doesn't have access to the revisiondescriptor to get \nthe list of updated properties.  However if we use the solution Jim mentioned, \nto combine delete and create inside store then it could be a local variable. \n5) I was deleting just some of the properties/bindings because if you delete \nall properties then you must reinsert all of the properties or you lose the \nproperties that you don't reinsert.  I did this because if an object has 100 \nchildren and you wish to add/update one child, it is much more efficient to \ndelete that one binding (if it exists) and reinsert it than to delete and \nreinsert all 100.  But if we combine create and remove in store then we \nshouldn't need to be selective about which we delete in \nremoverevisiondescriptor.\n\n\n\nI also caught a small problem in ObjectNode in the constructor where bindings \nwere being passed in but I wasn't placing them in the updated list.\n", "id": 61504, "time": "2004-08-03T21:57:05Z", "bug_id": 30442, "creation_time": "2004-08-03T21:57:05Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 30442, "attachment_id": 12317, "id": 61505, "time": "2004-08-03T22:00:03Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-03T22:00:03Z", "is_private": false, "text": "Created attachment 12317\nDiffs for ObjectNode, NodeRevisionDescriptor, StandardRDBMSAdapter"}, {"count": 8, "tags": [], "creator": "ozeigermann@apache.org", "is_private": false, "text": "First of all, your contribution really is appreciated. I am just particular\npicky about the details as your patch concerns the very core the Slide kernel\nand the database store. I hope you understand that...\n\nAs I am wondering whether the the binding optimization really significantly adds\nto performance in the first place, I would propose to restrict ourselves to the\nproperties first. \n\nI would propose to store the properties in NodeRevisionDescriptor along with the\ncomposed namspace/name in a map. The only modification in StandardRDBMSAdapter\nwould then be method storeRevisionDescriptor. There you iterate over the deleted\nproperties and delete from with a delete statement. This should be ok as I would\nnot expect them to be too many. Then you iterate over the updated properties and\n- instead of doing a delete followed by an insert - you do an UPDATE which of\ncourse would be much faster.\n\nHow does that sound? I will add a proposal based on yours (Tara's) myself. Could\nyou review it and tell me if you are satisfied with it?", "id": 61528, "time": "2004-08-04T08:35:56Z", "bug_id": 30442, "creation_time": "2004-08-04T08:35:56Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "Created attachment 12323\nPatch for StandardRDBMSAdapter", "attachment_id": 12323, "bug_id": 30442, "id": 61532, "time": "2004-08-04T10:59:01Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-04T10:59:01Z", "is_private": false}, {"count": 10, "tags": [], "text": "Created attachment 12324\nPatch for NodeRevisionDescriptor", "attachment_id": 12324, "bug_id": 30442, "id": 61533, "time": "2004-08-04T11:00:15Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-04T11:00:15Z", "is_private": false}, {"count": 11, "tags": [], "text": "Your patches look find to me. I do agree that an update is better than an \ndelete/insert. \n\nEven if its not in Slide 2.1 I hope you will optimize bindings as well because \nwhen storing/removing a large number of objects from the database I think it \ndoes make a difference.  However properties is probably more important to \noptimize first.\n\nThanks,\nTara", "attachment_id": null, "bug_id": 30442, "id": 61547, "time": "2004-08-04T15:38:27Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-04T15:38:27Z", "is_private": false}, {"count": 12, "tags": [], "text": "I take back my comment about the patch being completely fine.  I tried testing \nit and my mysql server(v. 4.0.20) didn't like the 'from' part of the update \nstatement. Here is what I changed the update statement to for it to work.\n\nOn line 1258  \"update PROPERTIES p, VERSION_HISTORY vh, URI u set \nPROPERTY_VALUE = ?, PROPERTY_TYPE = ?, IS_PROTECTED = ? where p.VERSION_ID = \nvh.VERSION_ID and vh.URI_ID = u.URI_ID AND u.URI_STRING = ? AND \np.PROPERTY_NAME = ? AND p.PROPERTY_NAMESPACE = ? and vh.REVISION_NO = ?\"\n\nTara", "is_private": false, "bug_id": 30442, "id": 61549, "time": "2004-08-04T16:34:28Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-04T16:34:28Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "I only tested this with MS SQLServer. I guess other DB ports must do without\nthis optimization until someone contributes patches for them as well. For now we\nat least have your MySQL port :)", "attachment_id": null, "bug_id": 30442, "id": 61556, "time": "2004-08-04T19:07:00Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-04T19:07:00Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 30442, "attachment_id": null, "id": 61565, "time": "2004-08-04T22:19:05Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-04T22:19:05Z", "is_private": false, "text": "It would be interesting to know how other DBMSs handle the 'FROM' clause of \nthe UPDATE statement.  Mysql doesn't seem to support it, so is mysql just a \nspecial case?  And using the modified update statement I submitted above I \nactually saw a considerable slowdown in mysql 4.0.20, but if I changed the \nupdate to a delete/insert I saw an improvement over no optimization.  I'm \ncurious to hear how this performs on other systems. \nOliver was asking about speed improvements so here is what I saw when I \nchanged the update to a delete/insert. Below I attached some results that I \nsaw when I timed 100 proppatches and got the average time. Each row is a \nseparate run, and the times stayed pretty stable. All the times below are in \nmilliseconds so you can see that the improvement isn't huge, but times several \nthousand properties, the improvement adds up.  And the more properties you \nhave per node the more results you should see.\nAre these results enough to bother about?\nTara\n\nAverages of 100 single proppatches on nodes with about 14 properties\t\nAvg NoOptimizaion     Avg w/ Opt    Improvement\n27\t\t\t24\t\t3\n27\t\t\t23\t\t4\n27\t\t\t22\t\t5\n28\t\t\t22\t\t6\n26\t\t\t21\t\t5\n26\t\t\t22\t\t4\n25\t\t\t21\t\t4\n26\t\t\t21\t\t5\n\t\t\tAvg Improvement\t4.5\n\nAverages of 100 single proppatches on nodes with about 24 properties\t\nAvg No Opt\t     Avg Opt\t     Improvement\n28\t\t\t24\t\t4\n28\t\t\t23\t\t5\n28\t\t\t24\t\t4\n29\t\t\t22\t\t7\n28\t\t\t22\t\t6\n28\t\t\t22\t\t6\n30\t\t\t22\t\t8\n30\t\t\t22\t\t8\n\t\t\tAvg Improvement\t6\n"}, {"count": 15, "tags": [], "text": "This complex update statement is non-standard and probably different in the\nsupported RDBMS'. We would need a version for each of them. \n\nConcerning speed improvement: Does your proppatch really take 25 miliseconds\nonly? The whole WebDAV request? Hard to believe... If this is the methods call\nto save the descriptor only I wouldn't be too surprised. But then as somebody\npointed out some time before. Most of the time a requests takes is consumed\ninside Slide, not inside the DB which is pretty extraordinary and surprising. On\nthe other hand it might be a better approach to concentrate on performance\nimprovements inside the Slide kernel and the WebDAV layer?\n\nWhat do you think?", "attachment_id": null, "id": 61568, "creator": "ozeigermann@apache.org", "time": "2004-08-05T06:48:59Z", "bug_id": 30442, "creation_time": "2004-08-05T06:48:59Z", "is_private": false}, {"count": 16, "tags": [], "text": "It seems to me like we should have a basic update statement that would work \nfor any RDBMS, then extend that for specific versions if there is a more \nefficient way to do it.\n\nConcerning speed improvement: Yes, my proppatch really does take an average of \nabout 25 milliseconds for the whole webdav request. Some took a little longer, \nsome took a little less. These results are after the revisiondescriptor has \nbeen cached and slide is writing to a mysql database on the local machine.  It \ndoes take longer if the revisiondescriptor hasn't been cached yet, but for \nconsistency I used the timings from runs after it had been cached.\n I was using a test client (also on local machine) which does multiple webdav \nrequests, but I also tried a manual proppatch through the command line webdav \nclient and saw similar times. My statements for timing were in the client code \nboth times.  I'm pretty sure that the proppatch is performing correctly \nbecause the property is being added/changed and when I watch the requests and \nresponses on the network they are all going through.\nWhat kind of times were you expecting to see?\n\nI agree that we should definitely optimize inside the slide kernel and webdav \nlayer as well, but shouldn't we cut down in all areas we can?  It doesn't make \nsense to me to rewrite properties/bindings that haven't been modified.  If we \noptimize on the both sides we should get even more improvement.\nTara", "is_private": false, "bug_id": 30442, "id": 61610, "time": "2004-08-05T21:05:40Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-05T21:05:40Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 30442, "attachment_id": null, "id": 61611, "time": "2004-08-05T21:25:53Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-05T21:25:53Z", "is_private": false, "text": "AFAIK there is no generic update statement like our that works for all RDBMS. \n\nConcerning timing. What executing times does the Slide server report? Mine\nreports something closer to 250 or even 500 ms.\n\n"}, {"count": 18, "tags": [], "bug_id": 30442, "attachment_id": null, "id": 61614, "time": "2004-08-05T21:53:08Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-05T21:53:08Z", "is_private": false, "text": "Here are my server times from 5 different prop patches on the same resource. \nAll different properties, all new properties, just basic vanilla slide. The \nfirst request is slower because it is caching, but the others are about the \nsame times I've been seeing.  \nCould your caching or logging settings be different? Or it could possibly just \nbe computer speed, mine is newer and pretty fast.\nTara\n\nhttp-8080-Processor25, 05-Aug-2004 14:41:56, unauthenticated, PROPPATCH, \n207 \"Mu\nlti-Status\", 171 ms, /files/test\nhttp-8080-Processor25, 05-Aug-2004 14:43:51, unauthenticated, PROPPATCH, \n207 \"Mu\nlti-Status\", 31 ms, /files/test\nhttp-8080-Processor24, 05-Aug-2004 14:43:57, unauthenticated, PROPPATCH, \n207 \"Mu\nlti-Status\", 16 ms, /files/test\nhttp-8080-Processor25, 05-Aug-2004 14:44:02, unauthenticated, PROPPATCH, \n207 \"Mu\nlti-Status\", 16 ms, /files/test\nhttp-8080-Processor24, 05-Aug-2004 14:44:07, unauthenticated, PROPPATCH, \n207 \"Mu\nlti-Status\", 31 ms, /files/test"}, {"count": 19, "attachment_id": null, "bug_id": 30442, "text": "It is certainly that your computer is newer...\n\nOK, what shall we do now? You say for MySQL it is faster to use a delete\nfollowed by an insert. Could you submit the code as a patch agains\nMySqlRDBMSAdapter? What about MySQL 4.1? Is it the same there?", "id": 61624, "time": "2004-08-06T06:29:32Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-06T06:29:32Z", "tags": [], "is_private": false}, {"count": 20, "attachment_id": null, "bug_id": 30442, "text": "Just want to add that the speed difference *could* be related to which database\nyou're using. I haven't spent time investigating why, but using Oracle for a\ndatabase was orders of magnitude slower for me than MySQL. Again, I don't know\nwhy, but I thought I'd point it out.", "id": 61625, "time": "2004-08-06T06:53:18Z", "creator": "masonjm@ah.org", "creation_time": "2004-08-06T06:53:18Z", "tags": [], "is_private": false}, {"count": 21, "tags": [], "text": "Concerning speed: My DB is MS SQL Server somewhere on a remote server, Tara's is\nMySQL 4.0 on a local machine", "is_private": false, "bug_id": 30442, "id": 61627, "time": "2004-08-06T08:38:25Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-06T08:38:25Z", "attachment_id": null}, {"count": 22, "attachment_id": 12355, "bug_id": 30442, "text": "Created attachment 12355\nPatches for MySqlRDBMSAdapter and MySql41RDBMSAdapter", "id": 61639, "time": "2004-08-06T16:49:41Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-06T16:49:41Z", "tags": [], "is_private": false}, {"count": 23, "tags": [], "bug_id": 30442, "text": "Thanks for the patch! As we do not have ports to other databases I would suggest\nthat this feature does not go into 2.1 but will be scheduled for 2.2. Tara, is\nthat ok for you? Or do you urgently need with the 2.1 release?", "id": 61650, "time": "2004-08-06T20:29:04Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-06T20:29:04Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "text": "2.2 should be fine.  Thanks! :)\nTara", "is_private": false, "bug_id": 30442, "id": 61652, "time": "2004-08-06T20:31:41Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-08-06T20:31:41Z", "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 30442, "attachment_id": null, "is_private": false, "id": 61653, "time": "2004-08-06T20:36:02Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-06T20:36:02Z", "text": "OK, then I will commit it into CVS as soon as the release branch for 2.1 has\nbeen created. I suppose this will be on next Monday..."}, {"count": 26, "tags": [], "text": "OK, commited all patches.", "is_private": false, "bug_id": 30442, "id": 61744, "time": "2004-08-10T10:16:02Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-08-10T10:16:02Z", "attachment_id": null}, {"count": 27, "tags": [], "text": "Created attachment 12792\nReviewed version of ObjectNode", "is_private": false, "bug_id": 30442, "id": 63858, "time": "2004-09-20T10:08:01Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-09-20T10:08:01Z", "attachment_id": 12792}, {"count": 28, "tags": [], "text": "Created attachment 12793\nReviewed patch for StandardRDBMSAdapter", "attachment_id": 12793, "bug_id": 30442, "id": 63859, "time": "2004-09-20T10:10:21Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-09-20T10:10:21Z", "is_private": false}, {"count": 29, "tags": [], "text": "Created attachment 12794\nReviewed patch for MySqlRDBMSAdapter", "is_private": false, "id": 63861, "creator": "ozeigermann@apache.org", "time": "2004-09-20T10:12:52Z", "bug_id": 30442, "creation_time": "2004-09-20T10:12:52Z", "attachment_id": 12794}, {"count": 30, "tags": [], "bug_id": 30442, "attachment_id": null, "is_private": false, "id": 63862, "time": "2004-09-20T10:13:42Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-09-20T10:13:42Z", "text": "I have just added reviewed patches for inspection. Tara, what do you think about\nthem? Note that this will only work for MySQL 4.0 for now..."}, {"count": 31, "tags": [], "text": "Sorry, forgot to mention, this second set of patches is to take care of that\nonly children that have been changed are written back to the database.", "attachment_id": null, "bug_id": 30442, "id": 63863, "time": "2004-09-20T10:14:53Z", "creator": "ozeigermann@apache.org", "creation_time": "2004-09-20T10:14:53Z", "is_private": false}, {"count": 32, "attachment_id": null, "bug_id": 30442, "text": "I checked the new patches and they seem correct.  Although around line 138/139 \nwhen inserting the updated bindings, I wonder if it might be faster to iterate \nthrough just the updated bindings instead of all the bindings.  Just a \nthought. \nThanks for reviewing them Oliver.\nTara", "id": 63893, "time": "2004-09-20T17:14:56Z", "creator": "tara.talbott@pnl.gov", "creation_time": "2004-09-20T17:14:56Z", "tags": [], "is_private": false}, {"count": 33, "tags": [], "text": "Applied patches. Tara, not quite sure what you refer to in line 138/139? Which\nfile are you talking about?", "is_private": false, "id": 63929, "creator": "ozeigermann@apache.org", "time": "2004-09-20T22:50:09Z", "bug_id": 30442, "creation_time": "2004-09-20T22:50:09Z", "attachment_id": null}, {"count": 34, "tags": [], "creator": "tara.talbott@pnl.gov", "attachment_id": null, "text": "I was talking about the following section of the StandardRDBMSAdapter patch.  \nIt is right before the updated bindings are reinserted. \n\n@@ -138,6 +139,8 @@\n             Enumeration bindings = object.enumerateBindings();\n             while (bindings.hasMoreElements()) {\n                 ObjectNode.Binding binding = (ObjectNode.Binding) \nbindings.nextElement();\n+              //Only insert the binding if it has been updated\n+\t\t\t  if(updatedBindings.contains(binding.getUuri())){\n                 try {\n                     statement =\n                         connection.prepareStatement(\n", "id": 63930, "time": "2004-09-20T22:57:59Z", "bug_id": 30442, "creation_time": "2004-09-20T22:57:59Z", "is_private": false}, {"count": 35, "tags": [], "creator": "ozeigermann@apache.org", "is_private": false, "text": "Ahh, now I see. This would not work though, as you would still have to check the\nactual children list if it is present there. This, however, is a Vector which\nwould be a fairly slow thing to do. The reason for the check is that\nupdatedBindings contains changed *and* deleted. Additionally, only the names of\nthe updated bindings is stored. So, what you have done seems just fine to me...", "id": 63949, "time": "2004-09-21T08:20:03Z", "bug_id": 30442, "creation_time": "2004-09-21T08:20:03Z", "attachment_id": null}]
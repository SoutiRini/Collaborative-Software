[{"count": 0, "tags": [], "bug_id": 46846, "attachment_id": null, "is_private": false, "id": 125533, "time": "2009-03-13T02:22:43Z", "creator": "aaacmc@mail.ru", "creation_time": "2009-03-13T02:22:43Z", "text": "Application reads some template XLS, fills it with data, customizes styles and saves to output file.\n\nWhen file opened by excel or open office all contents looks fine. But when file saved from excel with another name and then reopened contents became quite a mess, because of styles (i think they excenged randomly one with other). Same actions with open office produces absolutely normal file, so only msoffice is affected."}, {"count": 1, "tags": [], "bug_id": 46846, "is_private": false, "text": "Can you attach the template file and sample code to reproduce the behavior? \n\nYegor", "id": 125539, "time": "2009-03-13T04:37:19Z", "creator": "yegor@dinom.ru", "creation_time": "2009-03-13T04:37:19Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Created attachment 23381\nFull example (style mess after \"open\"-\"save as\")\n\nFull example", "attachment_id": 23381, "id": 125545, "creator": "aaacmc@mail.ru", "time": "2009-03-13T07:23:48Z", "bug_id": 46846, "creation_time": "2009-03-13T07:23:48Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 46846, "attachment_id": null, "is_private": false, "id": 125546, "time": "2009-03-13T07:25:15Z", "creator": "aaacmc@mail.ru", "creation_time": "2009-03-13T07:25:15Z", "text": "After data filled in the template, sheet copied cell-by-cell to the new workbook (actually some templates concatenated together). To archive authenticity cells copied with styles. Styles copied with following functions.\nI suggest that this is source of a problem\n\n\npublic static boolean fontsEquals(HSSFFont font1, HSSFFont font2) {\n\t\treturn (font1.getItalic() == font2.getItalic())\n\t\t\t&& (font1.getStrikeout() == font2.getStrikeout())\n\t\t\t&& (font1.getBoldweight() == font2.getBoldweight())\n\t\t\t&& (font1.getFontHeightInPoints() == font2.getFontHeightInPoints())\n\t\t\t&& (font1.getColor() == font2.getColor())\n\t\t\t&& (font1.getFontName() != null && font1.getFontName().equals(font2.getFontName()))\n\t\t\t&& (font1.getTypeOffset() == font2.getTypeOffset())\n\t\t\t&& (font1.getUnderline() == font2.getUnderline());\n\t}\n\n\tpublic static HSSFFont copyFontTo(HSSFFont sourceFont, HSSFWorkbook targetWb) {\n\t\tif (sourceFont == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (short i = 0; i < targetWb.getNumberOfFonts(); ++i) {\n\t\t\tHSSFFont font = targetWb.getFontAt(i);\n\t\t\tif (fontsEquals(font, sourceFont)) {\n\t\t\t\treturn font;\n\t\t\t}\n\t\t}\n\t\tHSSFFont targetFont = targetWb.createFont();\n\t\ttargetFont.setBoldweight(sourceFont.getBoldweight());\n\t\ttargetFont.setColor(sourceFont.getColor());\n\t\ttargetFont.setFontHeightInPoints(sourceFont.getFontHeightInPoints());\n\t\ttargetFont.setFontName(sourceFont.getFontName());\n\t\ttargetFont.setItalic(sourceFont.getItalic());\n\t\ttargetFont.setStrikeout(sourceFont.getStrikeout());\n\t\ttargetFont.setTypeOffset(sourceFont.getTypeOffset());\n\t\ttargetFont.setUnderline(sourceFont.getUnderline());\n\t\treturn targetFont;\n\t}\n\n\tpublic static boolean styleEquals(\tHSSFWorkbook wb1,\n\t\t\t\t\t\t\t\t\t\tHSSFCellStyle style1,\n\t\t\t\t\t\t\t\t\t\tHSSFWorkbook wb2,\n\t\t\t\t\t\t\t\t\t\tHSSFCellStyle style2) {\n\t\treturn (style1.getAlignment() == style2.getAlignment())\n\t\t\t&& (style1.getBorderBottom() == style2.getBorderBottom())\n\t\t\t&& (style1.getBorderTop() == style2.getBorderTop())\n\t\t\t&& (style1.getBorderLeft() == style2.getBorderLeft())\n\t\t\t&& (style1.getBorderRight() == style2.getBorderRight())\n\t\t\t&& (fontsEquals(style1.getFont(wb1), style2.getFont(wb2)))\n\t\t\t&& (style1.getFillBackgroundColor() == style2.getFillBackgroundColor())\n\t\t\t&& (style1.getFillForegroundColor() == style2.getFillForegroundColor())\n\t\t\t&& (style1.getIndention() == style2.getIndention())\n\t\t\t&& (style1.getRotation() == style2.getRotation())\n\t\t\t&& (style1.getVerticalAlignment() == style2.getVerticalAlignment())\n\t\t\t&& (style1.getWrapText() == style2.getWrapText());\n\t}\n\n\tpublic static HSSFCellStyle copyStyleTo(HSSFWorkbook sourceWb,\n\t\t\t\t\t\t\t\t\t\t\tHSSFCellStyle sourceStyle,\n\t\t\t\t\t\t\t\t\t\t\tHSSFWorkbook targetWb) {\n\t\tif (sourceStyle == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (short i = 0; i < targetWb.getNumCellStyles(); ++i) {\n\t\t\tHSSFCellStyle style = targetWb.getCellStyleAt(i);\n\t\t\tif (styleEquals(sourceWb, sourceStyle, targetWb, style)) {\n\t\t\t\treturn style;\n\t\t\t}\n\t\t}\n\n\t\tHSSFCellStyle targetStyle = targetWb.createCellStyle();\n\t\ttargetStyle.setAlignment(sourceStyle.getAlignment());\n\t\ttargetStyle.setBorderBottom(sourceStyle.getBorderBottom());\n\t\ttargetStyle.setBorderTop(sourceStyle.getBorderTop());\n\t\ttargetStyle.setBorderLeft(sourceStyle.getBorderLeft());\n\t\ttargetStyle.setBorderRight(sourceStyle.getBorderRight());\n\t\tHSSFFont targetFont = copyFontTo(sourceStyle.getFont(sourceWb), targetWb);\n\t\tif (targetFont != null) {\n\t\t\ttargetStyle.setFont(targetFont);\n\t\t}\n\t\ttargetStyle.setFillBackgroundColor(sourceStyle.getFillBackgroundColor());\n\t\ttargetStyle.setFillForegroundColor(sourceStyle.getFillForegroundColor());\n\t\ttargetStyle.setIndention(sourceStyle.getIndention());\n\t\ttargetStyle.setRotation(sourceStyle.getRotation());\n\t\ttargetStyle.setVerticalAlignment(sourceStyle.getVerticalAlignment());\n\t\ttargetStyle.setWrapText(sourceStyle.getWrapText());\n\t\treturn targetStyle;\n\t}"}, {"count": 4, "tags": [], "bug_id": 46846, "attachment_id": null, "id": 125581, "time": "2009-03-16T08:19:07Z", "creator": "yegor@dinom.ru", "creation_time": "2009-03-16T08:19:07Z", "is_private": false, "text": "I confirmed the trouble. For an unknown reason Excel inserts an extra font record and it shifts the font indexes. I'm not sure if it is a problem of POI or another weird feature of Excel. Your code looks good and should work just fine. \n\nInterestingly, if I create all styles and fonts in advance then everything is OK and fonts survive across read / write. See a modified version of your program where copyStyles is called before creating the output. Hope this \"workaround\" helps you.\n\nRegards,\nYegor"}, {"count": 5, "tags": [], "bug_id": 46846, "attachment_id": 23387, "is_private": false, "id": 125582, "time": "2009-03-16T08:20:41Z", "creator": "yegor@dinom.ru", "creation_time": "2009-03-16T08:20:41Z", "text": "Created attachment 23387\na workaround"}]
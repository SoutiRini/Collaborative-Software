[{"count": 0, "tags": [], "creator": "mbm@ptc.com", "text": "Because imported targets are only qualified by their owning project name when a\ntarget by that name has already been defined, it can result in a non-existent\ntarget error in certain contexts.\n\nIf project B & C both import A, and both A & B define target x, and B.x defines\nA.x as its depends, it will fail due to a non-existent A.x target for C, unless\nC also defines it.\n\n<project name=\"A\">\n   <target name=\"x\"/>\n</project>\n\n<project name=\"B\">\n   <import file=\"A.xml\"/>\n   <target name=\"x\" depends=\"A.x\"/>\n</project>\n\n<project name=\"C\">\n   <import file=\"A.xml\"/>\n   <import file=\"B.xml\"/>\n</project>\n\nSucceeds:\n   ant -f A.xml x\n   ant -f B.xml x\n\nFails:\n   ant -f C.xml x\n\nBUILD FAILED\nTarget `A.x' does not exist in this project. It is used from target `B.x'.", "id": 55929, "time": "2004-04-17T00:40:06Z", "bug_id": 28444, "creation_time": "2004-04-17T00:40:06Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 28444, "text": "Mike:  I have been playing around with similar concepts for days... however, in \nthis case, knowing that B imports A, C would merely import B.  Or, had you \nimported B before A, thus defining x first, all would have been well.  OR, had \nC defined x, that would have been okay too.  I also thought it might be nice if \nthere were a way to specify that imported targets would always be added with \ntheir \"super\" name, but I am undecided whether it's an entirely good idea... \nguess we'll see if Peter or anyone else has an opinion on this one...", "count": 1, "id": 55951, "time": "2004-04-17T19:32:20Z", "creator": "mbenson@apache.org", "creation_time": "2004-04-17T19:32:20Z", "is_private": false}, {"count": 2, "text": "I am aware that there are work arounds for the simple scenario that I provided,\nsuch as managing the order of the imports and redefining the target in the file\nwhere the problem arises.  Redefining targets merely to ensure consistent names\nis undesirable and in a complex hierarchy of imports, managing the order might\nnot be a solution at all.\n\nIn any case, the inconsistency would not need to be managed if Ant always\nqualified the target name with the name of the project, whenever it \"could\" be\nneeded.", "bug_id": 28444, "attachment_id": null, "id": 55988, "time": "2004-04-18T19:51:49Z", "creator": "mbm@ptc.com", "creation_time": "2004-04-18T19:51:49Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "ddevienne@lgc.com", "text": "ALAS, what you guys are describing results from the use of the project names to \nprefix the targets. I was SQUARELY against such a bad practice, which breaks \nencapsulation.\n\nWith the model I proposed, no renaming took place, unless explicitly specified \nby the importER build, and the prefix used is local/private to the importER \nbuild. And I mean really private, i.e. somebody else importing that importER \nbuild never sees the prefixes used.\n\nThis removes all ambiguities one build file at a time, without affecting \nanybody potentially using/importing that build down the line.\n\nAt least I think this would have been a better scheme ;-) You guys are welcome \nto find edge cases that shows it wouldn't have ;-))). --DD", "id": 56021, "time": "2004-04-19T14:16:28Z", "bug_id": 28444, "creation_time": "2004-04-19T14:16:28Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 28444, "attachment_id": null, "id": 56024, "time": "2004-04-19T14:40:42Z", "creator": "eeaston@ptc.com", "creation_time": "2004-04-19T14:40:42Z", "is_private": false, "text": "I really don't think that allowing developers to qualify targets with their \ndeclaring project names is \"bad practice.\"  Most languages that support a \nnotion of override give you this fine degree of control.  Obviously, using a \nfully qualified target (<project>.<target>) when the unqualified one is \nsufficient isn't recommended (polymorphism is good).  But not leaving a \ndeveloper with a consistent mechanism to ensure that the base/overridable \ntarget is always called in certain cases is a problem.\n\nI'm not certain that we have to always make all targets referencable with the \nproject name.  I'm sure this has performance implications.  So as DD suggests \nan import attribute that allows the importER to control the behavior sounds \nreasonable."}, {"count": 5, "tags": [], "bug_id": 28444, "attachment_id": null, "text": "I'm not sure given the last post my point came across. I'm not against using \nusing a prefix to resolve conflicts between imported targets and/or with the \nlocal importER's targets. I'm against using the importEE's project name as the \nprefix.\n\nI can't import two build files (without modifying them) with the 'common' \nproject name for examples. And it opens the door to weird edge cases in import. \nWhat I propose is that the import prefix be made optional (no need for it if \nthere are no conflicts), and when necessary to disambiguate conflicts, the \nimportER decide what prefixes to use in its OWN build script, and that \nadditionally the prefixes used are completely private to the importER, i.e. an \nimplementation detail to the importER.\n\nAnyways, this battle was already lost, and the current behavior is here to \nstay. Not that it's that bad really, just poor design in my book. But hey, I'm \nsurely wrong since I've been overriden by everyone. --DD", "id": 56025, "time": "2004-04-19T14:48:26Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-04-19T14:48:26Z", "is_private": false}, {"count": 6, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 56029, "time": "2004-04-19T15:03:12Z", "bug_id": 28444, "creation_time": "2004-04-19T15:03:12Z", "is_private": false, "text": "Dominique, when you can, could you find the relevant thread?  I'd like to see \nwhat the con arguments were; seems to me it's still not too late to add one or \nmore attributes to <import> to modify the current behavior..."}, {"count": 7, "tags": [], "text": "Dominique, I think I was bouching for a different approach (XSLT like) at the \ntime which also lost. In any case, under the current approach I tend to agree \nwith you.\n\nWhat I would suggest we can do now is the following:\n\n1) Add a new optional attribute (e.g., \"as\") which declares a local (private) \nname for the import. The value of this attribute is the only name available to\nrefer to the imported targets.\n\n <import file=\"A.xml\" as=\"myLocalA\"/>\n\n2) The default value for the \"as\" attribute is the name of the <project/> in \nthe imported file. (That provides backward compatibility with the current \nbehaviour).\n\nNot sure if this simple rules are enough. I would really would like to keep it \nas simple as possible. And most of all avoid aliasing (i.e., the same target \nbeing accessible by two or more different full names.\n", "attachment_id": null, "id": 56089, "creation_time": "2004-04-20T13:24:03Z", "time": "2004-04-20T13:24:03Z", "creator": "j_a_fernandez@yahoo.com", "bug_id": 28444, "is_private": false}, {"count": 8, "tags": [], "creator": "ah08010-apache@yahoo.com", "attachment_id": null, "text": "Adding an \"optional if no conflict\" prefix is insufficient. My scenario is a tad\ndifferent: I've got a 'framework' buildfile that imports local rules. I require\nthe local rules to define certain targets, so I know that e.g.\n\"local_rules.clean\" exists (if it doesn't exist, an abort is desirable\nbehavior). There is also a automatically generated portion in a separate file. I\nknow what the filename/projectname is, so that's fine. \n\nBut when developing a new target-set, not all of the local rules files or\nframework files may be totally up-to-date. This only becomes irksome when one\ncomponent, that *KNOWS* someproject.sometarget exists, explodes because\n\"someproject.sometarget\" is not defined--although \"sometarget\" is.\n\nI don't know how the internals of import work, but I cannot imagine that adding\ntwo namespace entries is a performance consideration of any kind. Please make\nthis behavior consistent.", "id": 70306, "time": "2005-02-01T17:34:18Z", "bug_id": 28444, "creation_time": "2005-02-01T17:34:18Z", "is_private": false}, {"count": 9, "text": "I never liked the target renaming stuff - it seems a bit strange.\nBe that as it may, the current behaviour is a bit silly - i.e. inconsistent.\nThe target gets renamed if there another target of the same name, but\nnot otherwise - how can one write a proper reusable import file using the\nrename feature in this case?\n\nThe fix will have a small overhead - the target object needs to be\ncloned and given a a new name, whereas the current code just renames the\ntarget object.", "bug_id": 28444, "attachment_id": null, "id": 74811, "time": "2005-05-12T16:24:47Z", "creator": "peterreilly@apache.org", "creation_time": "2005-05-12T16:24:47Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 28444, "text": "I also support fixing this.  However, instead of cloning the entire target,\ncouldn't we:\n\na) unconditionally rename the imported target\nb) if the target has NOT been overridden, create a new target that depends on\nthe imported target\n\n?\n-Matt", "id": 74814, "time": "2005-05-12T17:34:18Z", "creator": "mbenson@apache.org", "creation_time": "2005-05-12T17:34:18Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 28444, "text": "+1\n\nThat is similar to what I do in my preprocessor.", "count": 11, "id": 74816, "time": "2005-05-12T17:47:47Z", "creator": "alexeys@inventigo.com", "creation_time": "2005-05-12T17:47:47Z", "is_private": false}, {"count": 12, "tags": [], "text": "Fix checked into cvs HEAD.\nThe      \"ant -f C.xml x\" test will now work.", "is_private": false, "id": 74957, "creation_time": "2005-05-17T12:54:20Z", "time": "2005-05-17T12:54:20Z", "creator": "peterreilly@apache.org", "bug_id": 28444, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 13847, "attachment_id": null, "id": 24987, "time": "2002-10-22T12:27:53Z", "creator": "chris@antognini.ch", "creation_time": "2002-10-22T12:27:53Z", "is_private": false, "text": "When the attribute \"label\" is specified, the option \"-r\" is added to the \ncommand get. Notice that the command get defines the option \"-v\" for this \npurpose. When the label is a \"normal\" description (e.g. TEST_1) this isn't a \nproblem, but sometimes (according to the label itself) when the label begins \nwith a number (e.g. 01_01) it doesn't work!\n\nTo fix the problem I modified line 265 of Pvcs.java (in package \norg.apache.tools.ant.taskdefs.optional.pvcs).\n\nOLD> commandLine.createArgument().setValue(\"-r\" + getLabel());\nNEW> commandLine.createArgument().setValue(\"-v\" + getLabel());"}, {"count": 1, "tags": [], "bug_id": 13847, "is_private": false, "text": "Created attachment 3563\ncode containing the fix", "id": 24988, "time": "2002-10-22T12:29:46Z", "creator": "chris@antognini.ch", "creation_time": "2002-10-22T12:29:46Z", "attachment_id": 3563}, {"count": 2, "tags": [], "bug_id": 13847, "attachment_id": null, "id": 24994, "time": "2002-10-22T15:18:12Z", "creator": "snewton@io.com", "creation_time": "2002-10-22T15:18:12Z", "is_private": false, "text": "As it happens, this particular problem only manifests itself \"when the label\nbegins with a number (e.g. 01_01)\", because the -r option, given a number will\ntry to pull the revision numbered so.  The PVCS documentation futher specifies,\n\"if version_label begins with a digit, precede it with a backslash.\"\n\nThis change would introduce a certain backwards-incompatible change for build\nfiles where the label attribute is used to specify label/revision\nnumber/promotion group interchangeably as allowed by the -r option.\n\nSince there is a workaround for this problem, and because it would break\nbackwards compatibility, we should be careful about applying this patch."}, {"count": 3, "tags": [], "bug_id": 13847, "attachment_id": null, "id": 24998, "time": "2002-10-22T16:50:47Z", "creator": "chris@antognini.ch", "creation_time": "2002-10-22T16:50:47Z", "is_private": false, "text": "Since the name of the attribute is \"label\", with this attribute only labels \nshould be specified and therefore the option \"-v\" should be used.\n\nWith the attribute \"promotiongroup\" the correct option (i.e. \"-g\") is already \nused.\n\nOf course for the option \"-r\" a new attribute named \"revision\" could be added."}, {"count": 4, "tags": [], "bug_id": 13847, "attachment_id": null, "id": 25049, "time": "2002-10-23T15:37:11Z", "creator": "snewton@io.com", "creation_time": "2002-10-23T15:37:11Z", "is_private": false, "text": "The proposed change would be fine if it could be tweaked to preserve\nbackwards-compatibility.  Although imperfectly named the label attribute is\nunfortunately now expected to behave according to the semantics of the -r option\nto GET. This means that there are build files that depend on the label being\nable to specify a version number and/or a label, and if the label begins with a\nnumber that it must be escaped with a backslash.\n\nChanging the label attribute to use -v while introducing a new, differently\nnamed attribute to handle the old behavior is not a step to take without\nconsideration for backwards compatibility with existing build files.\n\nA possible middle way would be to introduce the revision attribute as a synonym\nfor label in the next release and make a note in the documentation that in a\nfuture revision the behavior of the label task may change.  This would allow\nsome time for migration of existing build files, plus feedback from others using\nthis who might have concerns or contributions."}, {"count": 5, "tags": [], "bug_id": 13847, "attachment_id": null, "id": 25089, "time": "2002-10-23T23:34:35Z", "creator": "sbailliez@apache.org", "creation_time": "2002-10-23T23:34:35Z", "is_private": false, "text": "Point taken for the label/revision. Thanks for your input Steve.\nIf someone wants to make and test a setRevision() and a revised setLabel() \nwith a warning and a tweak for the life of the next release he's welcome."}, {"count": 6, "tags": [], "text": "*** Bug 13251 has been marked as a duplicate of this bug. ***", "attachment_id": null, "bug_id": 13847, "id": 25120, "time": "2002-10-24T11:15:31Z", "creator": "sbailliez@apache.org", "creation_time": "2002-10-24T11:15:31Z", "is_private": false}, {"count": 7, "tags": [], "text": "In implementing the setRevision() and setLabel() the question comes up -- what\nhappens if both a revision and label are specified?  The GET command, in my\ntests,  will take whichever is specified last on the command line.  If a build\nfile has both label and version attributes, which should take precedence, or\nwould we flag that as an error.\n", "attachment_id": null, "bug_id": 13847, "id": 25209, "time": "2002-10-25T22:11:33Z", "creator": "snewton@io.com", "creation_time": "2002-10-25T22:11:33Z", "is_private": false}, {"count": 8, "tags": [], "text": "Ah good that you do it. I was working on it but this was a blind work since I \ndo not know PVCS. It's probably not necessary to flag an error if you do both, \npvcs exe will probably do it for you.\nIf not it's up to the user to specify it correctly I guess. What is the sense \nof specifying a promotion group, a label and a revision in the same command ?\n\nwhat about:\nif (promotiongroup){\n}\nif (label){\n}\nif (revision){\n}", "is_private": false, "id": 25210, "creator": "sbailliez@apache.org", "time": "2002-10-25T22:22:11Z", "bug_id": 13847, "creation_time": "2002-10-25T22:22:11Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "Although I never use promotion groups (i.e. I only use labels) on my opinion \nit makes no sense to specify more than one of this options. Therefore only one \nof the 3 attributes should be specified for a specific task. Since the user \nshould know how pvcs works, no error is required... but welcome ;-)", "is_private": false, "bug_id": 13847, "id": 25213, "time": "2002-10-25T22:56:26Z", "creator": "chris@antognini.ch", "creation_time": "2002-10-25T22:56:26Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 13847, "attachment_id": null, "id": 25214, "time": "2002-10-25T23:03:55Z", "creator": "sbailliez@apache.org", "creation_time": "2002-10-25T23:03:55Z", "is_private": false, "text": "Does the PVCS command issue an error or not ? If yes. No need to duplicate \nIMHO."}, {"count": 11, "tags": [], "bug_id": 13847, "attachment_id": null, "is_private": false, "id": 25215, "time": "2002-10-25T23:11:43Z", "creator": "snewton@io.com", "creation_time": "2002-10-25T23:11:43Z", "text": "No, pvcs does not issue an error, it simply uses whatever parameter was\nspecified last on the command line.  A test I did looked like this, where label\nREVISION_0_0_9 corresponds to file revision 1.2\n\nrevision, then label, gets the label:\n\nget -r1.0 -vREVISION_0_0_9\n\"P:\\pvcs\\develop\\dev_db\\archives\\dev_snewton\\SandwichShop\"\\build.xml_v\nPVCS Version Manager (get) v6.8.00 (Build 128) for Windows NT/80x86\nCopyright 1985-2001 MERANT.  All rights reserved.\nbuild.xml <- P:\\pvcs\\develop\\dev_db\\archives\\dev_snewton\\SandwichShop\\build.xml_v\nrev 1.2\n\nlabel, then revision, gets the revision:\n\nget -vREVISION_0_0_9 -r1.0\n\"P:\\pvcs\\develop\\dev_db\\archives\\dev_snewton\\SandwichShop\"\\build.xml_v\nPVCS Version Manager (get) v6.8.00 (Build 128) for Windows NT/80x86\nCopyright 1985-2001 MERANT.  All rights reserved.\nbuild.xml <- P:\\pvcs\\develop\\dev_db\\archives\\dev_snewton\\SandwichShop\\build.xml_v\nrev 1.0\n\nIn other words, it depends on the order of the parameters!"}, {"attachment_id": 3638, "tags": [], "bug_id": 13847, "is_private": false, "count": 12, "id": 25290, "time": "2002-10-28T22:11:03Z", "creator": "snewton@io.com", "creation_time": "2002-10-28T22:11:03Z", "text": "Created attachment 3638\nAdded a revision attribute, a synonym for label in this patch"}, {"count": 13, "tags": [], "text": "I've committed the patch attached by Steven. I guess I am a little concerned by\n\"but in a future release the behavior of the label attribute will change to use\nthe -v option of GET\"\n\nThis sounds like a backward compatability break. Is it? I'm not sure. If so, is\nthere anyway to achieve a backward compatible change for this.\n\nIf you could checkout the patch and test it and let me know if this issue is\nresolved, that would be good. I've committed to 1.6 for now.", "is_private": false, "id": 30555, "creator": "conor@apache.org", "time": "2003-02-03T14:12:19Z", "bug_id": 13847, "creation_time": "2003-02-03T14:12:19Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "Conor writes, \"This sounds like a backward compatability break.\" in his prior\ncomment.  That's very true, however it's not clear to me how to avoid it. In\nPVCS, using the -r option will work differently given different values, treating\nit as a label unless it starts with a number, when it attempts to treat it as a\nrevision number. It's broken in that if you create a label that starts with a\ndigit, which is allowed, PVCS attempts to use that as a revision number.  We can\n\"fix\" Ant by using the -l option for PVCS, which always interprets the value as\na label, but then we'd need to find a way to allow people to specify a revision.\n\nI know that as a general rule, Ant maintainers try to avoid breaking backwards\ncompatibility, and I strongly support that, but I am trying to find a way to\nresolve Christian's bug. So the path would be to make the migration gradual, by\nfirst introducing a new attribute that means what it says, then later, changing\nthe old attribute to mean what it really says.\n\nWe could just document the pvcs task to specificially mention that if the label\nbegins with a digit, it must be escaped, but that seems half-baked.  I'm open to\nsuggestions from the ant committers.", "is_private": false, "bug_id": 13847, "id": 30598, "time": "2003-02-03T21:49:09Z", "creator": "snewton@io.com", "creation_time": "2003-02-03T21:49:09Z", "attachment_id": null}, {"count": 15, "tags": [], "text": "I completely agree with Steven's comments. \nSoon or later backward compatibility should be broken to solve it.\n", "is_private": false, "id": 30603, "creator": "chris@antognini.ch", "time": "2003-02-03T22:56:27Z", "bug_id": 13847, "creation_time": "2003-02-03T22:56:27Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 13847, "attachment_id": null, "text": "You can solve it, without breaking backward compatibility.\n\n1. you need two new optional attributes:\nrevision - only files marked with this revision are extracted (using \"-r\"-option) \nbackwardcompatible - default yes; if set to no ... (see description below) \n\n2. you need to adapt the version attribute:\n- by default it will behave as before (using \"-r\"-option)\n- if the \"backwardcompatible\"-attribute is set to no=false=off the version\nattributes' value will be really interpreted as version-label, i.e. using the\n\"-v\"-option\n\n(Alternatively you might consider using a numeric value instead of a boolean for\nsuch backward-compatibility workarounds. This would enable you not only to\ndiscern between two incompatible development-states of a given task. But this\nwould get way more complicated, i.e. I wouldn't really consider it an option\nunless there evolves a concept to handle this for ant as a whole. And even then\nthis alternative still seems overly complicated and dangerous if thought thru.)", "id": 38721, "time": "2003-06-11T13:03:13Z", "creator": "joerg.buchberger@pruftechnik-rv.com", "creation_time": "2003-06-11T13:03:13Z", "is_private": false}]
[{"attachment_id": null, "tags": [], "creator": "bckfnn@worldonline.dk", "is_private": false, "count": 0, "id": 49974, "time": "2004-01-02T23:00:06Z", "bug_id": 25873, "creation_time": "2004-01-02T23:00:06Z", "text": "This patch disable the code generation of the property maker classes and \ninstead creates instances of the base maker types and configures them with \nsetter methods.\n\nThe patch is *not* intended to be committed as is, but as meant as \ninspiration.\n\nIn addition to the stated change of property maker classes, the patch also\ncontain many of the bug fixes I've submitted recently."}, {"attachment_id": 9777, "tags": [], "creator": "bckfnn@worldonline.dk", "is_private": false, "count": 1, "id": 49975, "time": "2004-01-02T23:01:04Z", "bug_id": 25873, "creation_time": "2004-01-02T23:01:04Z", "text": "Created attachment 9777\nA unified diff against HEAD"}, {"attachment_id": null, "tags": [], "creator": "glenmazza@yahoo.com", "text": "You should have no complaints from anyone on reducing the amount of automatic \ncode generation we use.\n \nBut just to confirm though, *not only* would the generation of the 250 or so \nMaker classes we have, one for each property, be stopped--but also, we would no \nlonger be having those classes at all either, correct?  (I.e., FOP 1.0 goes \ndown from 915 classes or so to roughly 700?)--That would be fantastic!\n\nAlso, leaving out the time saving as a result of moving off Strings, etc., \ni.e., all the time benefits of the previous huge patch, what is the performance \nloss/gain as a result of *this* change?  (Hopefully) negligable?\n\nThanks,\nGlen", "count": 2, "id": 49977, "time": "2004-01-02T23:16:27Z", "bug_id": 25873, "creation_time": "2004-01-02T23:16:27Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 25873, "attachment_id": null, "text": "Never mind--I was typing this up while you were typing up your FOP-DEV email.  \nThanks for the explanations.", "id": 49979, "time": "2004-01-02T23:23:10Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-01-02T23:23:10Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 25873, "attachment_id": null, "is_private": false, "id": 50651, "time": "2004-01-16T16:58:18Z", "creator": "bckfnn@worldonline.dk", "creation_time": "2004-01-16T16:58:18Z", "text": "A new revision of the patch where the functionality of corresponding and \ncompound properties are placed in seperate files. As a result, the main \nProperty.Maker class becomes smaller and easier to understand.\n\nPerformance is 4.5% faster with this patch, mostly due to the caching of the \ndefault values of subproperties. The main path through the code is shorter for \nnon-compound properties and the same for compound properties and properties \nwith corresponding.\n\nFunctionally the patch is neutral, so the it gets the same result. There are \nsome places in the patch marked with TODO where a solution to minor bugs in the \nexisting code has been added as comments.\n\nWith this revision I think the patch is ready to go in."}, {"count": 5, "tags": [], "creator": "bckfnn@worldonline.dk", "attachment_id": 9981, "id": 50656, "time": "2004-01-16T17:57:17Z", "bug_id": 25873, "creation_time": "2004-01-16T17:57:17Z", "is_private": false, "text": "Created attachment 9981\nA unified diff against HEAD"}, {"count": 6, "tags": [], "text": "Please give me a couple of days to comment--say 48 hours.  My initial thoughts \nare \"I like what I see\", esp. since appeared to you appeared to unnest the \nProperty.Maker, which looks good, but I'd like to study the code further.  \nEverything looks good though.\n\n[Sorry for the delays this week--I was held up on other things--also was \nsending some emails to W3C trying to understand which properties can be \nspecified to which FO.  See http://lists.w3.org/Archives/Public/xsl-\neditors/2004JanMar/]\n\nOne difference we have, I can work on, is that I'm not yet ready to get rid of \nall those interfaces.  The current interface implementation is awful and \nuseless--code-generated, separated into 45 different files, not visible while \none is coding, etc., etc.  \n\nI'd like to have them retained, but put into (1) file, actually, just added to \nthe Constants interface (as inner interfaces), say adding about 600 lines in \nthat interface for them all.  (I can modify the XSLT code to accomplish that.)  \nWe get rid of those 45 files, and they will be no longer autogenerated with \neach build (but, as with the current Constants.java, we retain the XSLT to re-\ngenerate it when we like.)\n\nReason why?  I *think*, over the long-term, it is much more programmer-friendly \nbecause many/most developers use IDE's with code-complete.  I.E., you type in \nthe property value interface name, hit the \".\", and then you automatically see \nthe 5-7 values relevant for that property.  This saves the programmer the \nheadache of looking at the spec each time for which prop values you need to \ncode against, or trying to recall from a huge Constants list the actual values \nyou need, and also making sure all the property options have been coded \nagainst.  I think it will be a nice sanity-saver for coders.  If not, we can \nalways excise them later from Constants.java.\n\nThoughts on this?\n\nThe only other issue right now--not necessarily related to your patch--is that \nI'd like us, where possible, to start abstracting the propertyList away from \nthe Layout and Renderers, possibly also the Area Tree.  (This was an idea \noriginally put forth by Victor a few weeks back, to general agreement on the \nlist.)  FObj already has a getProperty() function which just wraps its internal \npropertyList.getProperty()--and it's already used in a dozen or so places.  \nInstead of layoutManager calling prop = propList.getProperty() left and right, \nit will be prop = fObj.getProperty().  This will give us some freedom in how we \nimplement properties without needing to make changes to other parts of our code \n(i.e., we can even get rid of propertyList.)\n\nThanks,\nGlen\n", "attachment_id": null, "id": 50673, "creator": "glenmazza@yahoo.com", "time": "2004-01-17T01:05:04Z", "bug_id": 25873, "creation_time": "2004-01-17T01:05:04Z", "is_private": false}, {"count": 7, "tags": [], "text": "Finn,\n\nYou have a change that doesn't appear relevant to this bug in \nInlineStackingLayoutManager.java:\n\nIndex: src/java/org/apache/fop/layoutmgr/InlineStackingLayoutManager.java\n===================================================================\n@@ -292,6 +292,10 @@\n             // Reset state variables\n             clearPrevIPD(); // Clear stored prev content dimensions\n         }\n+        // I don't have a clue if this is right.\n+        if (childLC == null) {\n+            childLC = new LayoutContext(lc);\n+        }\n \n         // We only do this loop more than once if a childLM returns\n         // a null BreakPoss, meaning it has nothing (more) to layout.\n\n\n--------------------------------\n\nShould we skip this change?\n\nThanks,\nGlen", "attachment_id": null, "id": 50797, "creator": "glenmazza@yahoo.com", "time": "2004-01-20T02:03:07Z", "bug_id": 25873, "creation_time": "2004-01-20T02:03:07Z", "is_private": false}, {"attachment_id": 10016, "tags": [], "creator": "glenmazza@yahoo.com", "text": "Created attachment 10016\ncurrent status of patch (down to about 4900 lines from 6200).", "count": 8, "id": 50798, "time": "2004-01-20T02:05:47Z", "bug_id": 25873, "creation_time": "2004-01-20T02:05:47Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "bckfnn@worldonline.dk", "is_private": false, "count": 9, "id": 50799, "time": "2004-01-20T07:33:42Z", "bug_id": 25873, "creation_time": "2004-01-20T07:33:42Z", "text": "Glen, yes please skip that change to InlineStakingLM. The change avoid a NPE \nwhen generating the docbook example I've used for timing but I have never \nanalysed the problem so I doubt the change is the correct fix."}, {"attachment_id": null, "tags": [], "creator": "bckfnn@worldonline.dk", "is_private": false, "count": 10, "id": 50950, "time": "2004-01-22T09:10:33Z", "bug_id": 25873, "creation_time": "2004-01-22T09:10:33Z", "text": "Applied.\n\nFuther comments from xml-dev:\n   http://marc.theaimsgroup.com/?l=fop-dev&m=107308498806385&w=2\n   http://marc.theaimsgroup.com/?l=fop-dev&m=107445625709662&w=2\n   http://marc.theaimsgroup.com/?l=fop-dev&m=107434372324847&w=2\n"}, {"count": 11, "tags": [], "bug_id": 25873, "attachment_id": null, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 155570, "time": "2012-04-01T06:28:13Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:28:13Z", "is_private": false}]
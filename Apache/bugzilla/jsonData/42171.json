[{"count": 0, "tags": [], "creator": "ray@itasoftware.com", "attachment_id": null, "is_private": false, "id": 101932, "time": "2007-04-19T06:10:13Z", "bug_id": 42171, "creation_time": "2007-04-19T06:10:13Z", "text": "When shutting down and then restarting a SocketHubReceiver, it can start two connector threads to the \nsame server.  This can result in multiple active connections, which causes messages to be recorded by \nthe receiver twice.  I will attach code that reproduces this bug.\n\nWhen the current connection is shut down, and Exception occurs that triggers the creation of a new \nconnection that ignore the fact that a new Connector was already created by the restart.  Both \nConnectors can succeed.\n\nRemoveing the follwing code that ignores existing Connectors when the Exception is thrown stops this \nbehavior:\n\n<pre>\n      // we clear the connector object here\n      // so that it actually does reconnect if the\n      // remote socket dies.\n      connector = null;\n</pre>\n\nMy reading of the code leads me to believe that this line was put in before connections were started in \nThreads and is not necessary.  If I am incorrect, then a more serious rewriting of the class is needed to \nhandle the destruction of the existing Threads before a new one is created."}, {"count": 1, "tags": [], "creator": "ray@itasoftware.com", "attachment_id": 19999, "is_private": false, "id": 101933, "time": "2007-04-19T06:11:37Z", "bug_id": 42171, "creation_time": "2007-04-19T06:11:37Z", "text": "Created attachment 19999\nCode to reproduce the bug"}, {"count": 2, "tags": [], "bug_id": 42171, "is_private": false, "text": "Moving to chainsaw as it involves a receiver.", "id": 107114, "time": "2007-08-22T20:05:44Z", "creator": "carnold@apache.org", "creation_time": "2007-08-22T20:05:44Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42171, "is_private": false, "text": "I have seen this behaviour in ChainSaw within the last month, and as the original poster indicated after some use.  I am using ZeroConf to configure, and rerunning the programs doing the logging.\n\n", "id": 118233, "time": "2008-07-03T03:57:12Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-07-03T03:57:12Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 42171, "is_private": false, "text": "tried the sample source code which does exhibit the bug locally (thanks!).\n\nWill use that to debug what's going on, the SocketHubReceiver.shutdown() should interupt and cancel the thread, but it's obviously not.", "id": 118273, "time": "2008-07-03T21:33:20Z", "creator": "psmith@apache.org", "creation_time": "2008-07-03T21:33:20Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 42171, "attachment_id": null, "id": 119200, "time": "2008-07-31T15:17:33Z", "creator": "psmith@apache.org", "creation_time": "2008-07-31T15:17:33Z", "is_private": false, "text": "I thought I'd pose an update on this, I've had very little time (to be honest, distracted with some iPhone development), but as I mentioned I can reproduce this, yet when I step debug through I can see the synchronization points working and the behaviour doesn't present itself.\n\nSo there's some sort of race condition here I can't see.  I'm probably staring right at it, but i can't see what it is.  The only other condition I can think of is that running in compiled mode there may be a variable state that isn't marked as transient that the 'other' thread can't see changes in, but I tried changing the 'active' property of the SocketHubReceiver to volatile but that didn't seem to fix it either.\n\nAny ideas, I'm open to suggestions.  This would be hellishly annoying I have to say, so I really want to fix this one."}, {"count": 6, "tags": [], "bug_id": 42171, "is_private": false, "text": "Glad to see some activity on this.  It's been quite some time since I looked at this, but I reread the code to refresh my memory.  Here's the flow that causes the multiple SocketNodes, which then log duplicate messages\n\nshutdown()\n    active=false\n    socket.close()\n    socket=null\n    connector.interrupted=true\n    connector=null\n\nactivateOptions()\n    active=true\n    fireConnector()\n        connector=new Connector() [because active=true (fron activateOptions) && connector=null (from shutdown)]\n\nsocketClosedEvent() (from an Exception in the original SocketNode, cause by closing its socket)\n    connector=null\n    fireConnector()\n        connector=new Connector() [because active=true (fron activateOptions) && connector=null (from socketClosedEvent)]\n\n\nAs far as I can tell, the intent is that when the shutdown() causes a socketClosedEvent(), active==false and fireConnector() will not create a new connector.  However, because the activateOptions() call happens in between, active==true when socketClosedEvent() is called and we get a new connector that lives in parallel with the one cerated by activateOptions().\n\nThe quick fix I posted before will fix this case, but I think that it will break the automatic restarting that happens when there is a problem with the socket.  I belive that the easiest real fix would be to remove the SocketHubReceiver from the original SocketNode's listenerList when shutdown() is called so that socketClosedEvent() will not be called.  The main code change would be to keep a handle to the SocketNode when it is created, so that inside shutdown(), the the receiver can call removeSocketNodeEventListener(this) before it calls socket.close().  I don't have a setup right now to test this, but I believe this will fix the problem and leave restarting intact.\n\nHowever, I think that even that solution is a little gross because it's really just a workaround for the fact that there isn't a way to shutdown a SocketNode normally (and it doesn't work if there are multiple listeners).  I think the best solution wuld be to add a shutdown() to the SocketNode and not touch the socket directly after the SocketNode has been created.  This way it could notify all listeners of the \"normal shutdown\" event (maybe just socketEventClosed(null)).  Because I don't know anything about the codebase as a whole, I can't say how disruptive of a change this would be.\n\nHope that's some help.  Sorry I don't have patches for you (or even tested approaches), but I don't have the code checked out or an environment set up.  I'll see if I can get the code running and write a fix, but I wanted to post in case someone else wanted to give it a try in the meantime.\n", "id": 120085, "time": "2008-08-25T20:54:53Z", "creator": "ray@itasoftware.com", "creation_time": "2008-08-25T20:54:53Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 42171, "is_private": false, "id": 120086, "time": "2008-08-25T21:09:52Z", "creator": "psmith@apache.org", "creation_time": "2008-08-25T21:09:52Z", "tags": [], "text": "I sat down with my Principal Engineer last week over a beer (we actually needed a second beer) and we went over the code.  He's an incredibly bright guy but he got stumped on this one too.\n\nWe both agreed that basically the design was broken. I'm thinking a total design rethink on SocketHubReceiver might be a better outcome than a fix mainly because trying to debug this just showed how confusing this interaction between objects is.\n\nStill, if someone does magically solve this I'm happy to receive any patches.  I'm going to go over ray@'s comments to see if I can derive a change for that.  I'll make sure there's enough beer in the work fridge though... :)"}, {"count": 8, "tags": [], "creator": "ray@itasoftware.com", "attachment_id": 22481, "is_private": false, "id": 120087, "time": "2008-08-25T21:22:42Z", "bug_id": 42171, "creation_time": "2008-08-25T21:22:42Z", "text": "Created attachment 22481\npatch for bug\n\nWell, looking at this got me motivated, so I got everything running and wrote a patch.  It's pretty much a minimal patch, so it's not the most elegant thing.  It should probably be cleaned up by somebody who knows this code better than me.\n\nAnyway, the patch basically has three parts:\n - add a close() method to SocketNode, which is used for normal shutdown: this closes the undelying socket \n - in SocketHubReceiver, keep track of the SocketNode, not the socket\n - interpret socketClosedEvent(null) as a normal shutdown: no restart needed\n\nThis corrects the problem and should leave the auto-restarting in place for unexpected socket closing."}, {"count": 9, "tags": [], "creator": "ray@itasoftware.com", "attachment_id": null, "is_private": false, "id": 120089, "time": "2008-08-25T21:45:36Z", "bug_id": 42171, "creation_time": "2008-08-25T21:45:36Z", "text": "Guess our messages crossed.  But yeah, having now worked in the code a little, I agree that it's a little shetchy.  I don't think there's anything inherently wrong with the design, just that there was no way to signify a \"normal\" socket close (it always shows up as an Exception).  It'd probably be worth the time to think through what should happen in that case, because the patch I added basically just treats all exceptions as expected when you try to close the socket.\n\nProbably also worth double checking the locking.  I didn't look at it in detail, but a couple parts look odd at first glance.\n\nAnyway, if that patch pans out, feel free to have the beer delivered to my fridge :) Never hurts to have a few extras."}, {"count": 10, "tags": [], "creator": "psmith@apache.org", "attachment_id": null, "is_private": false, "id": 120306, "time": "2008-09-02T23:51:04Z", "bug_id": 42171, "creation_time": "2008-09-02T23:51:04Z", "text": "Hey, I just tried to take the latest patch that ray@ posted but I can't seem to apply it cleanly to the log4j-receivers project.  Took me a bit longer than it should have (8 month old baby, lack of sleep) to realise the 2nd modified file in the patch is actually for the log4j project, not for log4j-receivers (SocketNode is part of log4j.\n\nthis makes me wonder exactly where you generated the patch from..?  for example, my local copy of SocketHubReceiver.java from the log4j-receivers project has a setSocket method that looks like this:\n\n    connector = null;\n    socket = newSocket;\n    SocketNode13 node = new SocketNode13(socket, this);\n    node.addSocketNodeEventListener(this);\n\nyet your patch refers to using SocketNode.  ?  I may just be sleep deprived here.\n"}, {"count": 11, "tags": [], "bug_id": 42171, "is_private": false, "text": "I pulled to code from:\nhttp://svn.apache.org/repos/asf/logging/log4j/\n\nI now see that I should have pulled it from:\nhttp://svn.apache.org/repos/asf/logging/log4j/companions/receivers/\n\nLooks like it's basically the same code, though, so it shouldn't be a problem to move it over once I get everything checked out properly.  I'll probably have a chance sometime this week.", "id": 120310, "time": "2008-09-03T06:03:01Z", "creator": "ray@itasoftware.com", "creation_time": "2008-09-03T06:03:01Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "ray@itasoftware.com", "attachment_id": 22523, "is_private": false, "id": 120327, "time": "2008-09-03T20:25:43Z", "bug_id": 42171, "creation_time": "2008-09-03T20:25:43Z", "text": "Created attachment 22523\ncorrected patch\n\nBasically the same patch as before, but starting from the correct code (I think)."}, {"count": 13, "tags": [], "creator": "psmith@apache.org", "attachment_id": null, "text": "Confirmed this new patch is working for me.  I'll just do a quick code review and commit I think.", "id": 120328, "time": "2008-09-03T20:30:52Z", "bug_id": 42171, "creation_time": "2008-09-03T20:30:52Z", "is_private": false}, {"count": 14, "tags": [], "creator": "psmith@apache.org", "attachment_id": null, "text": "Checked in as part of revision 691872.\n\nMany thanks ray@!  ", "id": 120330, "time": "2008-09-03T21:57:54Z", "bug_id": 42171, "creation_time": "2008-09-03T21:57:54Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "jrivard@gmail.com", "is_private": false, "text": "Changes to tomcat 8.0.29-30 break applications that modify attributes on the HttpSession object on the initial root context url request, and possibly other places.  This behavior change is partially described in bug 58660.\n\nBehaviors seen:\n\nIn 8.0.28, a request to the application context \"/context\" would result in a redirect to \"/context/\".  This handling was handed in a way that was invisible to the application code.  \n\nIn 8.0.29, this request is processed and the application generates a response.\n\nIn 8.0.30, this request is processed by the application, but generates a 302 to \"/context/\"\n\n8.0.29-30 both break my application in similar but distinct ways.  The cause is that the application processes the initial request in a filter, modifies the session object, and then issues a redirect to itself.  Because the JSESSION cookie path is set to \"/context/\" and not \"/context\", the session seen on the subsequent handling of the redirect does not have access to the same session object as on the first request.  In a real application that depends on similar behavior this breaks the application in significant ways.\n\nAnother way to think of this is that it shouldn't be possible for the application to access an HttpSession that doesn't match the browser's session cookie.  As of 8.0.30 this implied contract is broken because on the initial request to the \"/context\" url, application code has access to an effectively bogus HttpSession instance.\n\nI have created a test application that shows the different behaviors:\n\nhttps://github.com/jrivard/tomcat-root-redir-test\n\nThe behavior can be reverted to the 8.0.28 style by setting the context parameter mapperContextRootRedirectEnabled=true.\n\nI recommend the default of this setting - or some other equivalent - be changed to false.  \n\nThis issue can also be corrected by changing the context parameter sessionCookiePathUsesTrailingSlash=false, however this has a potentially negative security impact so I don't think this default should be changed.\n\nIn any case, the default behavior for this execution path should not be changing  on point releases.  My understanding is there is a similar issue in the 7.x and 9.x branch but I haven't tested them.", "id": 187109, "time": "2015-12-24T05:42:18Z", "bug_id": 58765, "creation_time": "2015-12-24T05:42:18Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 58765, "attachment_id": null, "text": "1. Behaviour can change between minor versions. Actually you are asking for such a change.\n\nThe old behaviour was not removed. You can opt-in for the old behaviour by setting mapperContextRootRedirectEnabled=\"true\" either on your own web application or globally in conf/context.xml file.\n\n2. Relying on mapperContextRootRedirectEnabled=\"true\" is bad.\n\n1) It is a Tomcat-specific feature.\n\n2) It is application responsibility to process requests. Relying on Tomcat here is wrong. E.g. it is incompatible with RemoteIpValve.\n\nhttp://tomcat.apache.org/tomcat-8.0-doc/config/valve.html#Remote_IP_Valve\n\nYou filter calls sendRedirect(). You have to change that call to correctly process requests to the root of web application (getServletPath() is \"\" and getPathInfo() is null) by appending '/' to the request URI.\n\n\nThe code to test for this condition looks like the following:\n\n  if (request.getServletPath().length() == 0 && request.getPathInfo() == null)\n\nThe code to append '/' to requestURI looks like the following:\n\n  StringBuilder location = new StringBuilder(requestURI);\n  location.append('/');\n  if (request.getQueryString() != null) {\n      location.append('?');\n      location.append(request.getQueryString());\n  }\n  response.sendRedirect(response.encodeRedirectURL(location.toString()));\n\n\nNote, that handling such URIs by yourself will improve the network latency of your application.\n\nOld behaviour:\nstep 1: request to /test, responds with redirect to /test/\nstep 2: request to /test/, your filter responds with redirect to /test/?value=random\nstep 3: request to /test/?value=random\n\nNow you can send the correct redirect on step 1, skipping step 2 and omitting one 302 response round trip.\n\n\n\nBTW, the following filter mapping in your WEB-INF/web.xml is wrong:\n\n  <url-pattern>*</url-pattern>\n\nI guess you meant '/*' here.\n\nThe '*' pattern does not end with '/*'. Thus it has to be used as exact match, not as a prefix match. See chapter 12.2 Specification of Mappings of the Servlet 3.1 specification.", "id": 187115, "time": "2015-12-24T13:00:31Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-12-24T13:00:31Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 58765, "text": "Fixed in 8.0.x (for 8.0.31 onwards) and 7.0.x (for 7.0.68 onwards).\n\nThe default was also changed in trunk and 6.0.x but no release had been made with the previous default so this bug did not affect any release of those branches.", "count": 2, "id": 187163, "time": "2015-12-28T08:42:44Z", "creator": "markt@apache.org", "creation_time": "2015-12-28T08:42:44Z", "is_private": false}]
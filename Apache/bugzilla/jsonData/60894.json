[{"count": 0, "attachment_id": null, "creator": "ijabz@fastmail.fm", "is_private": false, "id": 197859, "time": "2017-03-21T09:00:31Z", "bug_id": 60894, "creation_time": "2017-03-21T09:00:31Z", "tags": [], "text": "My application creates a spreadsheet, this can be rather large (upto 500,000 rows, each row spread over six sheets, each with about 20 columns).\n\nI use Apache Poi and moved to using SXSSFWorkBook as writes data to temporary files so that memory used is not proportional to size of the final spreadsheet and this works wells.\n\nBut the spreadsheet represents metadata changed, and when metadata has changed I want to add a comment to the cell showing the old value. I got this working for small spreadsheets but it always fails with heap memory errors when attempted for large files.\n\nIt seems all Comments are stored in memory rather than stored in temporary files like the rows themselves.\n \nIn the code below Worksheet is my own wrapper class, I only create one DrawingPatriach class per sheet, but it looks like I have to create an anchor and RichTextString  for each comment I need.\n\nprivate void addCellComment(Row r, Cell c, Worksheet sheet, String value)\n{\n    String formattedValue    =  value.replace('\\u0000', '\\n');\n    int    rowCount         =  value.split(\"\\\\\\\\u000\").length;\n    ClientAnchor anchor = factory.createClientAnchor();\n    anchor.setCol1(c.getColumnIndex());\n    anchor.setCol2(c.getColumnIndex()+2);\n    anchor.setRow1(r.getRowNum());\n    anchor.setRow2(r.getRowNum()+rowCount);\n\n    Drawing drawing = sheet.getDrawing();\n    Comment comment = drawing.createCellComment(anchor);\n    RichTextString str = factory.createRichTextString(formattedValue);\n    comment.setString(str);\n    c.setCellComment(comment);\n}"}]
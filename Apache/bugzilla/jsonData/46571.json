[{"count": 0, "attachment_id": null, "creator": "krzysztof.madejski@agora.pl", "is_private": false, "id": 124219, "time": "2009-01-21T00:41:33Z", "bug_id": 46571, "creation_time": "2009-01-21T00:41:33Z", "tags": [], "text": "I'm using version 1.1.16 of Tomcat Native, with apr-1.3.3 with port-c patch,  Apache Tomcat 6.0.18 on Solaris 5.10 Generic_127127-11 sun4v sparc SUNW,Sun-Fire-T200. When using HTTP/1.1 connector (without shared thread pool) I get read timeout on the client that uses persistant connection pool for sending requests. It happens after several request send, sometimes after 1 second, sometimes after 1 minute of sending requests. Read timeout on the client application is set to reasonable value (5 seconds) and responses are quick enough (max. 50 milisecs). After the read timeout occurs, I cannot receive response from the server on the opened connections, the client was using. Java trace dump shows several waits like this:\n\n\"http-8041-5\" daemon prio=3 tid=0x00a3b000 nid=0x3e in Object.wait() [0xdc07f000..0xdc07fbf0]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0xfac00068> (a org.apache.tomcat.util.net.AprEndpoint$Worker)\n        at java.lang.Object.wait(Object.java:485)\n        at org.apache.tomcat.util.net.AprEndpoint$Worker.await(AprEndpoint.java:1465)\n        - locked <0xfac00068> (a org.apache.tomcat.util.net.AprEndpoint$Worker)\n        at org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1490)\n        at java.lang.Thread.run(Thread.java:619)\n \nWhen I disable Native on the Tomcat everything works fine."}, {"count": 1, "tags": [], "bug_id": 46571, "text": "Which compiler did you use to build APR and Tomcat Native?", "id": 124244, "time": "2009-01-21T13:00:24Z", "creator": "markt@apache.org", "creation_time": "2009-01-21T13:00:24Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46571, "attachment_id": null, "text": "We are using gcc 3.4.6 on solaris 10\n", "id": 124650, "time": "2009-02-04T01:51:32Z", "creator": "krzysztof.madejski@agora.pl", "creation_time": "2009-02-04T01:51:32Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 46571, "text": "A similar but not identical case:\n\nSolaris 10 Generic_138889-03 on x86 (occurs on both 32/64 bit hardware)\nTomcat 6.0.18\nTomcat Native 1.1.16\nAPR 1.3.3\nApache 2.2.11\nUsing mod_proxy_ajp and AjpAprProtocol\n\nAll tools compiled with GCC 3.4.3\n\nmod_proxy_ajp times out waiting for tomcat to respond with:\nThe timeout specified has expired: ajp_ilink_receive() can't receive header\n\nThis occurs intermittently while loading a JSP consisting of:\n <%=System.currentTimeMillis()%>\n\nI've proxied the AJP port, and can see the request being issued from mod_proxy_ajp, but no response is generated. I've added an AccessLogValve, but the requests that timeout are not logged.\n\nSwitching from AjpAprProtocol to AjpProtocol works around the problem, as Tomcat Native is no longer in use.\n\nSounds like polling is broken on Solaris. \n\nI am available to assist anyone with investigation/debugging - please let me know how I can help. ", "id": 124764, "time": "2009-02-10T12:39:25Z", "creator": "scott@severtson.us", "creation_time": "2009-02-10T12:39:25Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46571, "text": "Upgrading to APR 1.3.7 does not solve the problem\nHow we could we help to solve this issue", "id": 129470, "time": "2009-08-05T02:13:40Z", "creator": "krzysztof.madejski@agora.pl", "creation_time": "2009-08-05T02:13:40Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 46571, "attachment_id": null, "text": "There have been reports of a variety of issues when compiling with gcc. Nearly all of them were resolved by compiling with the Sun Studio compiler.", "id": 129471, "time": "2009-08-05T02:47:58Z", "creator": "markt@apache.org", "creation_time": "2009-08-05T02:47:58Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 46571, "text": "Also making binaries using Sun Studio 12.1 does not solve the problem.", "id": 129578, "time": "2009-08-09T12:38:10Z", "creator": "krzysztof.madejski@agora.pl", "creation_time": "2009-08-09T12:38:10Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 129591, "time": "2009-08-10T00:48:00Z", "bug_id": 46571, "creation_time": "2009-08-10T00:48:00Z", "text": "Thanks for testing. The test case looks pretty simple. Someone with access to a Solaris box (not me at present) will take a look."}, {"count": 8, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "This could be a duplicate of APR bug 47645.\n\n(https://issues.apache.org/bugzilla/show_bug.cgi?id=47645)\n\nCan anyone who can reproduce this issue retry with the APR patch posted to 47645?  Thanks a bunch!", "id": 129843, "time": "2009-08-21T12:21:23Z", "bug_id": 46571, "creation_time": "2009-08-21T12:21:23Z", "is_private": false}, {"count": 9, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "is_private": false, "id": 130826, "time": "2009-10-02T10:22:11Z", "bug_id": 46571, "creation_time": "2009-10-02T10:22:11Z", "text": "The tcnative connector depends an the native APR libraries. A new version (1.3.9) of APR has been released, that should fix this problem.\n\nAs far as we understand the problem happens due to poll events being swallowed by APR. It only applies to Solaris 10 and beyond. Earlier versions of Solaris and other platforms do not have the relevant event port mechanism. It also only happens when using APR 1.1 and later. Earlier versions of APR do not support event ports.\n\nThe solution is to upgrade systems meeting the above conditions to APR version 1.3.9 or later. The tcnative library itself does not need to be recompiled after the APR libraries have been updated, except when another branch of APR (changing between versions 1.x) is chosen for update."}, {"count": 10, "tags": [], "bug_id": 46571, "text": "We can also use apr_poll_method_defname() to detect, whether the event \"port\" mechanism is used in the existing APR lib and then check for the right minimum version. This can be done in an m4 macro during configure, like we do today, but also in java/org/apache/tomcat/jni/Library.java during tcnative initialization.\n\nBoth ways are useful:\n\n- configure to detect the problem early\n- runtime init to detect in case compile APR and runtime APR are not the same\n\nOpen question: should the library only warn but still start in case \"port\" is used and the loaded APR version is to old, or should it refrain from starting. I vote for not starting then, because if \"port\" is returned by apr_poll_method_defname() we know we are on a platform with the problem and we should expect it to happen under load. If it happens it is very hard to analyze what's going on. So better tell people, that the versions they are using are simply not right.", "id": 130827, "time": "2009-10-02T10:44:34Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2009-10-02T10:44:34Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 46571, "attachment_id": null, "text": "The first release of APR with apr_poll_method_defname() will also have this fix.  (That isn't in APR 1.3.x.)", "id": 130829, "time": "2009-10-02T11:10:24Z", "creator": "trawick@apache.org", "creation_time": "2009-10-02T11:10:24Z", "is_private": false}, {"count": 12, "tags": [], "creator": "jfclere@gmail.com", "attachment_id": null, "id": 143114, "creation_time": "2011-01-06T05:21:44Z", "time": "2011-01-06T05:21:44Z", "bug_id": 46571, "text": "./native/srclib/VERSIONS tells:\n- APR 1.3.9, http://apr.apache.org", "is_private": false}]
[{"count": 0, "tags": [], "text": "There is the method comment(String text) in the class org.w3c.css.sac.DocumentHandler, which is called by the CSS Parser every time a comment is found.\n\nBut this is happening at the wrong time!\nLets consider the following CSS:\n\n=== CSS START ===\n* {\n  color: #ff0000;\n  /* comment  1 */\n}\n/* comment  2 */\n=== CSS END ===\n\nI'm using an implementation of DocumentHandler that has got a log() method, which can output every method call on the DocumentHandler. So this is the output for the CSS stated above:\n\n=== startDocument ===\nstartSelector [ * ]\n  property color := RGBCOLOR INT 255, COMMA, INT 0, COMMA, INT 0\n    /* comment  1 */\n    /* comment  2 */\nendSelector [ * ]\n___ endDocument ___\n\nAs you can see, \"comment 2\" is reported before endSelector() is called.\nIn the right way, the output is supposed to be:\n\n=== startDocument ===\nstartSelector [ * ]\n  property color := RGBCOLOR INT 255, COMMA, INT 0, COMMA, INT 0\n    /* comment  1 */\nendSelector [ * ]\n    /* comment  2 */\n___ endDocument ___\n\n\nI think the bug is in the Parser method parseStyleDeclaration(boolean inSheet).\nThere, it is checked in a switch-case statement if \"current\" is a right curly brace (}). So at this moment the right curly brace was detected, and now any further parsing/scanning action should only be after the Parser has called the method endSelector() on the DocumentHandler.\n\nBut instead, it's followed by the statement nextIgnoreSpaces(), that goes on parsing/scanning the input and so comments are detected and reported to the DocumentHandler. And only afterwards endSelector() is called on the DocumentHandler.\n\n\nVery likely, this causes other problems with method calls on DocumentHandler as well, because parseStyleDeclaration(boolean inSheet) is used by the following Parser methods: \n protected void parseRuleSet();\n protected void parsePageRule();\n protected void parseFontFaceRule();\n protected void parseStyleDeclarationInternal();", "attachment_id": null, "id": 119975, "creator": "mathias.schaeffner@googlemail.com", "time": "2008-08-21T05:09:07Z", "bug_id": 45663, "creation_time": "2008-08-21T05:09:07Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45663, "text": "Has anyone investigated this bug yet?\nCan anyone confirm this misbehavior?\n\nIs there a Batik developer, who'd like to fix that issue?\n\nI'm using the Batik CSS Parser and my application requires correct parsing of comments included in the CSS file.\nSo I really appreciate any work about this.", "id": 125589, "attachment_id": null, "creator": "mathias.schaeffner@googlemail.com", "creation_time": "2009-03-16T15:27:53Z", "time": "2009-03-16T15:27:53Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45663, "text": "(In reply to comment #1)\n> I'm using the Batik CSS Parser and my application requires correct parsing of\n> comments included in the CSS file.\n\nTo be honest, relying on correct comment parsing seems overall a risky decision in the first place. I believe other implementations have suffered (or may still suffer) from similar issues -- although can't currently remember which one(s) in particular, I have some diffuse memories on this... But of course this is a bug and should be fixed.\n\n\n> So I really appreciate any work about this.\n\nPatches are always welcome! :-)  Given your detailed report, I'd inclusively say you might potentially be the right person to propose a fix: Why not checkout the trunk code [1] and and rehearse an attempt to correct this? ;-)\n\n\n[1] http://xmlgraphics.apache.org/batik/download.cgi#Subversion+repository", "id": 125592, "attachment_id": null, "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-03-17T04:39:21Z", "time": "2009-03-17T04:39:21Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 45663, "attachment_id": null, "id": 125621, "time": "2009-03-18T20:47:30Z", "creator": "cam@apache.org", "creation_time": "2009-03-18T20:47:30Z", "is_private": false, "text": "(In reply to comment #1)\n> Has anyone investigated this bug yet?\n> Can anyone confirm this misbehavior?\n\nIf you could supply a short test case (standalone program) that exhibits the problem, that would be helpful for testing.\n\nI think the solution could be to make parseStyleDeclaration(boolean) not consuming the \"}\" token, and for parseRuleSet() (and the others you identify) to be responsible for consuming it."}]
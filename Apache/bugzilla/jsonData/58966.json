[{"count": 0, "tags": [], "bug_id": 58966, "attachment_id": null, "id": 188185, "time": "2016-02-03T15:52:54Z", "creator": "jmclej@gmail.com", "creation_time": "2016-02-03T15:52:54Z", "is_private": false, "text": "Hello,\nI am having a problem with retrieving the right data from excel:\nI have the cell D5 that contains the formula \"=3000000/D10\" and D10 cell contains the formula \"=1.41973/1.2939\".\nWhen I read this cell within VBA macro like this : Worksheets(\"My sheet\").Cells(5, 4), I get 2734111.41555084 but when I read it via POI in Java:\nXSSFSheet sheet = workbook.getSheetAt(1);\nfinal Iterator<Row> rowIterator = sheet.iterator();\nCell cell;\nwhile (rowIterator.hasNext()) {\n\tfinal Row row = rowIterator.next();\n...\n\tcell = row.getCell(col, Row.RETURN_BLANK_AS_NULL);\n...\n}\ncell contains here 2734111.4155508447 (see the extra 47), which is wrong.\nIndeed, when I type in a calculator 3000000/(1.41973/1.2939), the result is 2734111.4155508441745965782226198 ()\nI expect to get the same result as VBA gives.\nRegards,"}, {"count": 1, "tags": [], "text": "The number stored in the file is rarely what Excel shows. To get the value that Excel shows, as a String, you must use something like DataFormatter to apply the formatting rules to the raw cell value", "attachment_id": null, "bug_id": 58966, "id": 188186, "time": "2016-02-03T16:09:40Z", "creator": "apache@gagravarr.org", "creation_time": "2016-02-03T16:09:40Z", "is_private": false}, {"count": 2, "tags": [], "creator": "jmclej@gmail.com", "attachment_id": null, "text": "Independently of what Excel shows, there is definitely a problem with POI as 2734111.4155508441745965782226198 cannot be rounded to 2734111.4155508447 if you look closely at the first number (...844174 cannot give ...8447)", "id": 188187, "time": "2016-02-03T16:25:04Z", "bug_id": 58966, "creation_time": "2016-02-03T16:25:04Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58966, "text": "(In reply to jmclej from comment #2)\n> (...844174 cannot give ...8447)\n\nSure it can. You're thinking of base 10 rounding, while the computer does base 2 rounding. The binary representation of ...844174 and ...8447 might be adjacent, depending on how the floats are stored, what arithmetic is used to calculate the values, the rounding errors that are accumulated along the way, etc. Even simple 3*(1.0/3) could give an answer like 1.000000000007 or 0.9999999999994, which doesn't round to the correct answer", "id": 188188, "time": "2016-02-03T16:33:38Z", "creator": "onealj@apache.org", "creation_time": "2016-02-03T16:33:38Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "jmclej@gmail.com", "attachment_id": null, "text": "(In reply to Nick Burch from comment #1)\n> The number stored in the file is rarely what Excel shows. To get the value\n> that Excel shows, as a String, you must use something like DataFormatter to\n> apply the formatting rules to the raw cell value\n\nIn VBA, I have :\nDim MyVal As Double\nMyVal = Worksheets(\"My sheet\").Cells(5, 4)\nAnd I am talking about the number I see in the file into which I print MyVal without transformation or that I look at MyVal in the VBA spy window.\nSo I am expecting to get the same number via POI without the need to apply any DataFormatter in Java, which I couldn't know which it is anyway as I am using the default behavior of VBA. POI should reproduce the default behavior of Excel as well.", "id": 188195, "time": "2016-02-03T17:38:48Z", "bug_id": 58966, "creation_time": "2016-02-03T17:38:48Z", "is_private": false}, {"count": 5, "tags": [], "text": "(In reply to jmclej from comment #4)\n> (In reply to Nick Burch from comment #1)\n> > The number stored in the file is rarely what Excel shows.\n\n> POI should reproduce the default behavior\n> of Excel as well.\n\nRe-read Nick's comment. POI does have rhe samw behavior as Excel when you use the DataFormatter class.\nhttps://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/DataFormatter.html", "attachment_id": null, "id": 188196, "creator": "onealj@apache.org", "time": "2016-02-03T19:06:49Z", "bug_id": 58966, "creation_time": "2016-02-03T19:06:49Z", "is_private": false}, {"count": 6, "tags": [], "text": "Ok, Indeed, I didn't get that DataFormatter was provided by POI.\nBut when I am doing this now :\nXSSFSheet sheet = workbook.getSheetAt(1);\nfinal Iterator<Row> rowIterator = sheet.iterator();\nCell cell;\nwhile (rowIterator.hasNext()) {\n\tfinal Row row = rowIterator.next();\n...\n\tcell = row.getCell(col, Row.RETURN_BLANK_AS_NULL);\n\tDataFormatter df = new DataFormatter();//same with DataFormatter(true)\n\torg.apache.poi.ss.usermodel.CellValue cv = evaluator.evaluate(cell);\n\tString val = df.formatCellValue(cell, evaluator);\n...\n}\nI still get val that is equal to 2734111.4155508447\nIn https://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/DataFormatter.html, it says that the default format for decimal numbers is \"#.##########\", but it I can't reproduce that. Or should I use a different code than the one above to use DataFormatter ?\nI also tried (new java.text.DecimalFormat(\"#.##########\")).format(cell.getNumericCellValue()) but it gives also 2734111.4155508447 instead of 2734111.41555084 on Excel.", "attachment_id": null, "id": 188208, "creator": "jmclej@gmail.com", "time": "2016-02-04T10:19:58Z", "bug_id": 58966, "creation_time": "2016-02-04T10:19:58Z", "is_private": false}, {"count": 7, "tags": [], "text": "I forgot to declare and define evaluator :\nfinal FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();", "attachment_id": null, "id": 188209, "creator": "jmclej@gmail.com", "time": "2016-02-04T10:26:40Z", "bug_id": 58966, "creation_time": "2016-02-04T10:26:40Z", "is_private": false}, {"count": 8, "tags": [], "creator": "jmclej@gmail.com", "attachment_id": null, "text": "Also, workbook is of type XSSFWorkbook. Can it have an effect on my issue ?", "id": 188210, "time": "2016-02-04T11:26:56Z", "bug_id": 58966, "creation_time": "2016-02-04T11:26:56Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 58966, "text": "Sorry about the different small comments, I am trying to give as much relevant information as possible...\nSo I must say that I read a xlsm file.", "id": 188211, "time": "2016-02-04T11:30:00Z", "creator": "jmclej@gmail.com", "creation_time": "2016-02-04T11:30:00Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "text": "(In reply to jmclej from comment #8)\n> Also, workbook is of type XSSFWorkbook. Can it have an effect on my issue ?\n\nI have tried using WorkBook instead of XSSFWorkbook with WorkbookFactory.create method but it still gives me the same result.", "attachment_id": null, "id": 188212, "creator": "jmclej@gmail.com", "time": "2016-02-04T11:41:14Z", "bug_id": 58966, "creation_time": "2016-02-04T11:41:14Z", "is_private": false}, {"count": 11, "tags": [], "creator": "jmclej@gmail.com", "attachment_id": null, "text": "Additional info : I am using Excel 2013", "id": 188225, "time": "2016-02-04T16:26:06Z", "bug_id": 58966, "creation_time": "2016-02-04T16:26:06Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 58966, "attachment_id": null, "id": 188226, "time": "2016-02-04T17:02:32Z", "creator": "jmclej@gmail.com", "creation_time": "2016-02-04T17:02:32Z", "is_private": false, "text": "Version of poi : 3.10.1"}, {"count": 13, "attachment_id": null, "bug_id": 58966, "text": "> text.DecimalFormat(\"#.##########\"))\n>               2734111.4155508447\n\nLooks like the DataFormatter is working as expected. The number of digits is conaistenr with the format string.\n\nWe could add another 2 # characters to the format string, but someone would need to prove that every version of Excel on all platforms use the longer format string for any number or formula. I'm guessing that the default format string was chosen to be the length it is for a good reason, and wasn't selected at random.\n\nUntil then, if you need your code to return exactly the same value as Excel, you'll need to specify a custom format string.\n\nIf you have usage questions, please use the POI Users mailing list [1].\n\n[1] https://poi.apache.org/mailinglists.html", "id": 188230, "time": "2016-02-04T17:43:56Z", "creator": "onealj@apache.org", "creation_time": "2016-02-04T17:43:56Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 58966, "attachment_id": null, "id": 188246, "time": "2016-02-05T14:21:58Z", "creator": "jmclej@gmail.com", "creation_time": "2016-02-05T14:21:58Z", "is_private": false, "text": "When you read this for instance : https://support.microsoft.com/en-us/kb/269370\nWe understand that Excel never gives more than 15 digits, so neither should POI, whatever the format put with more than 15 '#'. It should only add non-significative zeros.\nBut in my case POI gives 17 digits (2734111.4155508447) instead of the 15 that I am talking about (2734111.41555084)."}, {"count": 15, "tags": [], "bug_id": 58966, "text": "More authoritatively, [1] which specifies\n\n> Feature            Maximum limit\n> Number precision   15 digits\n\n[1] https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3", "id": 188253, "time": "2016-02-05T18:25:18Z", "creator": "onealj@apache.org", "creation_time": "2016-02-05T18:25:18Z", "is_private": false, "attachment_id": null}, {"count": 16, "attachment_id": null, "bug_id": 58966, "text": "Hello,\nNow that the bug has been prooved, how does it work? On which version can we expect to have the correction and do we have an idea when it will be delivered ?\nThanks for your work,", "id": 188304, "time": "2016-02-09T14:54:32Z", "creator": "jmclej@gmail.com", "creation_time": "2016-02-09T14:54:32Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "Refer to http://poi.apache.org/who.html\n\nPlease always remember: nobody is paid to work on POI, the team is a bunch of volunteers who look at things in their free time. Because of that developers might choose to work on things based on a different priority than yours! Especially the quality and maturity of bug reports will affect if somebody decides to look at it. So the best way to help a bug report see progress is to provide more information if available or supply patches together with unit-tests.", "id": 188306, "time": "2016-02-09T16:15:49Z", "bug_id": 58966, "creation_time": "2016-02-09T16:15:49Z", "is_private": false}]
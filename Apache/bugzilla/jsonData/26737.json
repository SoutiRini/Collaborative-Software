[{"count": 0, "tags": [], "bug_id": 26737, "attachment_id": null, "is_private": false, "id": 51852, "time": "2004-02-06T21:07:41Z", "creator": "kovesp@sympatico.ca", "creation_time": "2004-02-06T21:07:41Z", "text": "I have produced a situation in which the following piece of code towards the \nbeginning of DirectoryScanner.scanDir throws the exception:\n\n        String[] newfiles = dir.list();\n\n        if (newfiles == null) {\n            /*\n             * two reasons are mentioned in the API docs for File.list\n             * (1) dir is not a directory. This is impossible as\n             *     we wouldn't get here in this case.\n             * (2) an IO error occurred (why doesn't it throw an exception\n             *     then???)\n             */\n            throw new BuildException(\"IO error scanning directory \"\n                                     + dir.getAbsolutePath());\n        }\n\nNote that (1), alas, is not true. If the directory name is like this:\n   \"some/directory \"  [ note space on the end ]\nand \n   \"some/directory\"   [ note no space ]\nis a valid direcotory then this exception is thrown. \n\nPerhaps you trim the string before testing for existance? Both \nFile.isDirectory and File.exists return false for the string with the trailing \nspace.\n\nIt would be nice if you checked for this condition (i.e., leading or triling \nspace). The trailing space is very easy to produce if a directory name or \ncomponenet thereof is loaded from a file and very difficult diagnose from just \nthe IOError thrown. The only reason I managed to find it was that (1) I looked \nat the source (2) had previous encounters with the vagaries of File.list."}, {"count": 1, "tags": [], "text": "So how do you create such a situation where a File instance that is not a valid\ndirectory gets passed to the scanDir method?  Wich task do you use to trigger\nthe problem?", "attachment_id": null, "id": 52052, "creator": "bodewig@apache.org", "time": "2004-02-10T12:43:29Z", "bug_id": 26737, "creation_time": "2004-02-10T12:43:29Z", "is_private": false}, {"count": 2, "tags": [], "creator": "kovesp@sympatico.ca", "text": "<property name=\"prod.img.dir\" location=\"${productionImage.dir}/\n${release.ProductionImage}\"/>\n\n     <copy todir=\"${build.top.level}\" preservelastmodified=\"yes\">\n         <fileset dir=\"${prod.img.dir}\">\n            <exclude name=\"DeliveredCode/**\"/>\n            <exclude name=\"HorizonCode/.project\"/>\n            <exclude name=\"HorizonCode/.classpath\"/>\n                <exclude name=\"HorizonCode/horizon16/build.xml\"/>\n            <exclude name=\"HorizonCode/horizon16/release.properties\"/>\n         </fileset>\n      </copy>\n\nrelease.ProductionImage was read from a \"release.properties\" file:\n\nrelease.ProductionImage=2004_01_30_Production\n\nand the developer inadvertently inserted a space at the end of the line so the \nvalue was \"2004_01_30_Production \".\n\nNormaly my build.xml checks all such items for validity, but I forgot to do \nthis in this case. The copy task was executed with the above value resulting \nin the exception (the productionImage.dir had a valid value).\n\nThis is on \"Apache Ant version 1.5.3 compiled on April 9 2003\" and java \nversion \"1.3.1_08\", however I checked the current 1.6 code base and it still \ncontains the fragment I cited. I can't easily test this build.xml on 1.6 \nbecause it uses some custom tasks of mine that are dependent of 1.5.3.\n\nBTW: Mid-last year I put forward a proposal for adding a mapper to zipfilesets \nand selectors and a contentmapper to zipgroupfilesets (a contentmapper \ntransforms names of zip entries as they are transferred from the input zips to \nthe target zips). I implemented this as a custom task based on the core zip \ntask (hence the incompatibility with anything but 1.5.3). \n\nI tried to offer this implementation for inclusion, but was totally unablae to \nelicit any response at all (not even go away, don't bother us...). Did I \ntransgress etiquette in some way?", "id": 52058, "attachment_id": null, "bug_id": 26737, "creation_time": "2004-02-10T15:27:51Z", "time": "2004-02-10T15:27:51Z", "is_private": false}, {"count": 3, "tags": [], "text": "Well, the code is still there, but you simply cannot call it with a dir that\ndoesn't exist from within Ant.  Given that the method is protected, I'll soon\ncommit a patch that guards against it.\n\nI've tried the appended buildfile and my build simply failed with \n\nBUILD FAILED\n/tmp/copytest.xml:13: /tmp/a  not found.\n\nSo the dir \"a \" never reaches the method.\n\nAs for your proposal, please retry if you don't get an answer.  Sometimes - all\ntoo often I'll admit - people are too busy to read everything.  This is even more\ntrue if the chunk that has to be read and digested is large.  Things get filed\nfor \"later\" in everybody's inbox and I'm sure you know that \"later\" almost always\nmeans never.  The only cure against this is consistent nagging.", "attachment_id": null, "bug_id": 26737, "id": 52134, "time": "2004-02-11T15:37:27Z", "creator": "bodewig@apache.org", "creation_time": "2004-02-11T15:37:27Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 26737, "attachment_id": 10318, "text": "Created attachment 10318\nsample build file with a \"sane\" build failure", "id": 52135, "time": "2004-02-11T15:38:52Z", "creator": "bodewig@apache.org", "creation_time": "2004-02-11T15:38:52Z", "is_private": false}, {"count": 5, "tags": [], "text": "OK, I haven't checked the 1.5.x versions, but the trailing slash on the directory\nname in a fileset shouldn't cause a problem in 1.6.0.\n\nAlso, scanDir now explicitly checks its dir argument.", "attachment_id": null, "bug_id": 26737, "id": 52136, "time": "2004-02-11T16:11:23Z", "creator": "bodewig@apache.org", "creation_time": "2004-02-11T16:11:23Z", "is_private": false}, {"count": 6, "tags": [], "text": "Thanks Stefan.\n\nBTW, I know of at least one more situation where File.list() returns null (at \nleast on Unix). This is when the directory exists, but the current user does \nnot have at least r-x permissions to it.", "attachment_id": null, "id": 52173, "creator": "kovesp@sympatico.ca", "time": "2004-02-12T02:32:26Z", "bug_id": 26737, "creation_time": "2004-02-12T02:32:26Z", "is_private": false}]
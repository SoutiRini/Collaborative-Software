[{"count": 0, "tags": [], "bug_id": 51596, "attachment_id": 27338, "is_private": false, "id": 148318, "time": "2011-08-01T15:17:59Z", "creator": "med1985@gmail.com", "creation_time": "2011-08-01T15:17:59Z", "text": "Created attachment 27338\nCleanup and tests\n\nThis patch cleans up and adds some high level tests for the Glyf subsetting in TTFFile."}, {"count": 1, "tags": [], "text": "Thanks for this work. Glyph is written with 'ph', not with 'f'.", "is_private": false, "id": 148323, "creator": "spepping@apache.org", "time": "2011-08-01T18:52:11Z", "bug_id": 51596, "creation_time": "2011-08-01T18:52:11Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Hi Simon,\nYeah, Glyf refers to the table within a TrueType font, not a glyph. I've discerned the difference between the two by spelling the table-name as it is represented in the font, as \"glyf\".\n\nHope that makes sense\n\nMehdi", "attachment_id": null, "bug_id": 51596, "id": 148325, "time": "2011-08-01T19:25:37Z", "creator": "med1985@gmail.com", "creation_time": "2011-08-01T19:25:37Z", "is_private": false}, {"count": 3, "tags": [], "text": "Thanks for your explanation.\n\nThe title suggests that the patch cleans up something; it does not; it implements a redesign.\n\nWithout knowing much detail about Glyf tables, I was a bit surprised about the method names GlyfFlags.offsetToNextComposedGlyf(int flags) and GlyfFlags.moreComposites(int flags). At first sight it suggests that there is some hidden iterator. After some more thought, I assume that flags contains pointers to data in the table, and that these allow one to calculate the extent of this glyf; if that is so, then offsetToNextComposedGlyf may be better called extentOfComposedGlyf.\n\nOtherwise the design seems fine, but I am not able to judge about the correctness of the code.", "attachment_id": null, "bug_id": 51596, "id": 148350, "time": "2011-08-03T08:03:11Z", "creator": "spepping@apache.org", "creation_time": "2011-08-03T08:03:11Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 51596, "attachment_id": null, "is_private": false, "id": 148351, "time": "2011-08-03T08:40:41Z", "creator": "med1985@gmail.com", "creation_time": "2011-08-03T08:40:41Z", "text": "Hi Simon,\nI guess it's best to address each of these, individually:\n\n>The title suggests that the patch cleans up something; it does not; it\n>implements a redesign.\n\nWell, I guess so, the reason I call it clean up is because previously there was a lot of duplicated code, magic numbers, poorly named variables... all the big names. I started it with the intention of not changing the working code, but as I got into it, it seemed that there the old code was iterating over the whole of the subset glyph list several times... A job that could have been made simpler through recursion. I didn't redesign it, because if I were to do so, I would have changed FontFileReader by removing the write method, and remapping the glyphs when the glyph data is extracted from \"glyf\". (see the TODO)\n\n>Without knowing much detail about Glyf tables, I was a bit surprised about the\n>method names GlyfFlags.offsetToNextComposedGlyf(int flags)...\n\nOk, for this you have to read the TTF spec. But, the flags represent the properties and parameters of the composed glyph and, depending on which flags are set, the number of bytes until the next glyph data.. That method returns the offset to the next composed by reading which flags are set, and which aren't. Since none of the glyph parameters are changed, we just want the offset to the next composed glyph.\n\n> GlyfFlags.moreComposites(int flags)\n\nThis analyses the flags, checks whether the current data is the last glyph in the \"glyf\" data we are reading. It is simply used to control the do-while loop.\n\nHope that helps, the glyf table spec can be found at: http://www.microsoft.com/typography/otspec/glyf.htm\n\nI think this change more is more consistent with the spec, since composite glyphs can be recursive, it seemed prudent to me to clean-up/redesign the code to match that."}, {"count": 5, "tags": [], "creator": "med1985@gmail.com", "attachment_id": 27345, "id": 148355, "time": "2011-08-03T10:47:20Z", "bug_id": 51596, "creation_time": "2011-08-03T10:47:20Z", "is_private": false, "text": "Created attachment 27345\nGlyf Table\n\nAdded javadocs to GlyfFlags and changed the method name to make it less ambiguous."}, {"count": 6, "text": "Thanks for your explanations. Note that I will not commit this patch. I will leave that to committers who are more knowledgable about fonts.", "bug_id": 51596, "attachment_id": null, "id": 148359, "time": "2011-08-03T17:06:10Z", "creator": "spepping@apache.org", "creation_time": "2011-08-03T17:06:10Z", "tags": [], "is_private": false}, {"count": 7, "text": "So a test was possible after all, this is great news. I've applied the patch with minor modifications to make the test run consistently on (hopefully) all JVMs. (I replaced two HashMap with TreeMap.)\n\nThanks!\nVincent", "bug_id": 51596, "attachment_id": null, "id": 148490, "time": "2011-08-08T17:52:07Z", "creator": "vhennebert@gmail.com", "creation_time": "2011-08-08T17:52:07Z", "tags": [], "is_private": false}]
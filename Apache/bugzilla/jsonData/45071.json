[{"count": 0, "attachment_id": 21992, "bug_id": 45071, "is_private": false, "id": 116936, "time": "2008-05-23T13:34:29Z", "creator": "alex@planet-barclay.com", "creation_time": "2008-05-23T13:34:29Z", "tags": [], "text": "Created attachment 21992\nPatch to alter APR sendfile thread timeout behavior\n\nThe APR connector currently sets a TTL on the socket in its poller loop. Unfortunately this TTL is based on soTimeout and refers to the entire download.\n\nThis manifests itself during large file downloads (our app is around 5-10MB). The Poll.maintain(...) fires and the socket gets closed mid-transfer.\n\nThe attached patch changes this behavior such that the TTL is reset on socket activity. This now means that inactivity of 20 secs (the default from server.xml (connectionTimeout) applies to each write. So long as the client is taking data, albeit slowly, the transfer will be allowed to continue."}, {"attachment_id": 21993, "tags": [], "bug_id": 45071, "text": "Created attachment 21993\nA better version of the patch\n\nThe first patch I attached contained this fix and another one. This patch is now correct.", "count": 1, "id": 116937, "time": "2008-05-23T13:39:14Z", "creator": "alex@planet-barclay.com", "creation_time": "2008-05-23T13:39:14Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45071, "attachment_id": null, "is_private": false, "id": 116954, "time": "2008-05-25T08:24:12Z", "creator": "remm@apache.org", "creation_time": "2008-05-25T08:24:12Z", "text": "This should be fixed in the native code."}, {"count": 3, "tags": [], "bug_id": 45071, "attachment_id": null, "text": "(In reply to comment #1)\n> Created an attachment (id=21993) [details]\n> A better version of the patch\n> \n> The first patch I attached contained this fix and another one. This patch is\n> now correct.\n\nI reviewed this patch, and it should work. It implies that maintain() cannot work with poll(false), while using maintain is more or less mandatory. If not fixing the native code, poll(false) needs to be removed.", "id": 116957, "time": "2008-05-25T09:33:36Z", "creator": "remm@apache.org", "creation_time": "2008-05-25T09:33:36Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 45071, "attachment_id": null, "text": "Fixed in tomcat-native: http://svn.apache.org/viewvc?rev=660175&view=rev", "id": 116976, "time": "2008-05-26T08:58:23Z", "creator": "remm@apache.org", "creation_time": "2008-05-26T08:58:23Z", "is_private": false}, {"count": 5, "tags": [], "creator": "alex@planet-barclay.com", "attachment_id": null, "text": "We didn't quite fix this, instead we uncovered an underlying issue.\n\nIn do_remove the list of descriptors is shuffled down as a descriptor is removed. Unfortunately the socket_ttl array was forgotten. This manifests itself as a truncated downloads on a seemingly random basis. What's actually happening is as a descriptor is removed the next higher descriptor inherits its TTL which could be close to expiry.\n\nIt would probably have been better to hold both the ttl and socket descriptor in a structure in a single array but this fix is only one line.\n\n", "id": 117143, "time": "2008-05-29T10:41:49Z", "bug_id": 45071, "creation_time": "2008-05-29T10:41:49Z", "is_private": false}, {"attachment_id": 22034, "tags": [], "bug_id": 45071, "text": "Created attachment 22034\nMake sure that the socket_ttl array is moved down as the socket_set array is\n\nI've been testing this for a couple of days and haven't seen any more sendfile truncation. Hopefully this is the last part.", "count": 6, "id": 117144, "time": "2008-05-29T10:44:17Z", "creator": "alex@planet-barclay.com", "creation_time": "2008-05-29T10:44:17Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 45071, "attachment_id": null, "id": 117145, "time": "2008-05-29T11:09:22Z", "creator": "mturk@apache.org", "creation_time": "2008-05-29T11:09:22Z", "is_private": false, "text": "Commited. Thanks!"}]
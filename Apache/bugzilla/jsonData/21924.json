[{"count": 0, "tags": [], "creator": "wboyce@panix.com", "attachment_id": null, "text": "I belive that I have found a bug in the <c:import> tag in Standard 1.0.3.  \nFeel free to tell me that I'm wrong, but please explain why.\n\nI have a web application with JSPs that include other JSPs using the \n<c:import> tag.  I am using Orion 2.0.2 as my application server.\n\nI deploy this application on two web sites, one of which is in English and the \nother of which is in Korean.  For historical reasons, I need to serve the \npages on the English site using ISO-8859-1.  However, I serve the pages on the \nKorean site using UTF-8.  In order to faciliate serving the pages using ISO-\n8859-1 on the English site and using UTF-8 on the Korean site, none of the JSP \npages specify a content type or a charset.  Instead, I specify the default \ncharset in the Orion configuration.  Setting the default charset in the Orion \nconfiguration causes Orion to use that charset when creating Writer and Reader \ninstances, enabling my application to both send pages to the browser and \nreceive request parameters from the browser using the specified charset.\n\nHere is what happens when Orion is configured to use UTF-8 as the default \ncharset and I attempt to import a relative JSP page using <c:import \nurl=\"/the/relative/page.jsp\">.  Because the page is local, <c:import> follows \nsome shortcut logic that avoids the creation of a URL and handles the import \nby passing a response wrapper to the local request dispatcher.  Calling the \nrequest dispatcher passes control to Orion.  A few cycles later, Orion calls \ngetOutputStream on the response wrapper and wraps the output stream in a \nWriter that uses UTF-8.  The imported JSP writes to this Writer.  Once the \nimported JSP returns, <c:import> invokes getString on the response wrapper.  \nIf Orion had called getWriter on the response wrapper, then no character/byte \ntranslation would have taken place, and the encoding of the Writer would have \nbeen irrelevant.  But since Orion called getOutputStream on the response \nwrapper, the wrapper only has access to the bytes written to the stream, and \nthe getString method must decode them back into characters in order to \nconstruct a String to return.  Here is where things go wrong.  Although the \ncharacters from the imported JSP were encoded using UTF-8, because the \n<c:import> tag has no charEncoding attribute, the getString method decodes \nthem as ISO-8859-1, and of course, they are incorrect.\n\nThis behavior seems inconsistent with the way that <c:import> would work if it \ndid not use the request dispatcher.  If I wrote <c:import \nurl=\"http://www.myserver.com/the/relative/page.jsp\">, then <c:import> would \nnote the content encoding of the resource and instantiate an appropriate \nReader.  I think that it would make sense for the response wrapper that \n<c:import> passes to the response wrapper to pay attention to any calls to its \nsetContentType method and use that information when decoding the bytes from \nthe output stream.", "id": 41621, "time": "2003-07-28T05:26:55Z", "bug_id": 21924, "creation_time": "2003-07-28T05:26:55Z", "is_private": false}, {"count": 1, "tags": [], "creator": "t5jtjj502@sneakemail.com", "attachment_id": null, "text": ">Although the \n>characters from the imported JSP were encoded using UTF-8, because the \n><c:import> tag has no charEncoding attribute, the getString method decodes \n>them as ISO-8859-1, and of course, they are incorrect.\n\nHi Wills,\n\nSorry if I didn't understand correctly your problem, but have you tried to set\nthe charEncoding attribute to UTF-8? If so, did it work this way?\n\nFelipe\n", "id": 43143, "time": "2003-08-22T05:05:48Z", "bug_id": 21924, "creation_time": "2003-08-22T05:05:48Z", "is_private": false}, {"count": 2, "tags": [], "creator": "pierre.delisle@sun.com", "attachment_id": null, "text": "My head hurts, but I finally think I understand your problem :-)\n\nOrion uses the OutputStream of c:import's ResponseWrapper and you'd\nlike the following two things to happen:\n\n   1. calling setContentType() on the ResponseWrapper should not be ignored\n   2. getString() on the ResponseWrapper should take into consideration\n      the contentType that may have been set by (1).\n\nHowever, the JSTL spec is quite clear in section 7.4 that \nrelative URLs in the same context are processed in the\nsame way as the include action of the JSP spec.\n\nAnd the JSP spec clearly states that:\n\n  An included page cannot change the response status code or set headers. \n  This precludes invoking methods like setCookie. Attempts to invoke \n  these methods will be ignored.\n\nA quick look at Jasper in Tomcat shows that the ResponseWrapper used\nin a <jsp:include> action even throws an exception if getOutputStream()\nis called. We should probably do that as well in JSTL for <c:import> \nof a relative URL to be consistent with <jsp:include>.\n\nAt any rate, I don't think there is anything we can do for the problem\nyou've stated in this bug report. If you think otherwise, we'll be\nhappy to consider your counter arguments.", "id": 50568, "time": "2004-01-14T21:18:58Z", "bug_id": 21924, "creation_time": "2004-01-14T21:18:58Z", "is_private": false}]
[{"attachment_id": null, "tags": [], "bug_id": 61676, "text": "The new option \"HttpProtocolOptions Strict\" prevents requests with an unescaped whitespace such as:\n\n   GET /Hallo Welt HTTP/1.0\n\nor also   \n\n   GET /index.php?paramHallo Welt HTTP/1.0\n      \nWith an error message of: AH03448: HTTP Request Line; Excess whitespace (disallowed by HttpProtocolOptions Strict\n\nFor my understanding, setting \"HttpProtocolOptions = Unsafe\" should bring back the old behaviour but it seems like the URL parser is unable to handle the extra whitespace:\n\nAH03449: HTTP Request Line; Extraneous text found 'HTTP/1.0' (perhaps whitespace was injected?)\n\nBased on the comment in Bug 60738 https://bz.apache.org/bugzilla/show_bug.cgi?id=60783#c2, the Unsafe flag should *not* turn of whitespace checking and all and keep with the original policy error as quoted above. If still allowed with Unsafe, it should be properly handled by the next layers.", "count": 0, "id": 201713, "time": "2017-10-27T10:01:48Z", "creator": "mail@oliwel.de", "creation_time": "2017-10-27T10:01:48Z", "is_private": false}, {"count": 1, "text": "By default, the parser finds extra whitespace after Welt, not before it. This\npart can be permitted with Unsafe.\n\nBut when you get farther, you still have a totally unexpected token since \"Welt\" is interpreted as the version as the protocol uses spaces for\ndelimeters.\n\nI don't think even under Unsafe we want to hunt around and try to sort\nout that the next token looks more like an HTTP version.  Invalid and\nmalicious share too much.", "creator": "covener@gmail.com", "is_private": false, "id": 201720, "time": "2017-10-27T11:16:41Z", "bug_id": 61676, "creation_time": "2017-10-27T11:16:41Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "creator": "mail@oliwel.de", "is_private": false, "text": "As I already wrote myself, I can understand to NOT fix it but then the whitespace should already be rejected at the parser level and not pass thru this stage.", "id": 201723, "time": "2017-10-27T11:22:10Z", "bug_id": 61676, "creation_time": "2017-10-27T11:22:10Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "covener@gmail.com", "text": "(In reply to Oliver Welter from comment #2)\n> As I already wrote myself, I can understand to NOT fix it but then the\n> whitespace should already be rejected at the parser level and not pass thru\n> this stage.\n\nSorry, but i don't see how altering it further for this one doomed set of\ninput really helps. I don't think the externals are good here, but to me\nignoring leading/trailing whitespace is one thing (unsafe) but throwing\naway or merging tokens is another entirely (doomed).  The errors are\nsimply reported as they're encountered, left to right.", "id": 201724, "time": "2017-10-27T11:37:18Z", "bug_id": 61676, "creation_time": "2017-10-27T11:37:18Z", "is_private": false, "attachment_id": null}]
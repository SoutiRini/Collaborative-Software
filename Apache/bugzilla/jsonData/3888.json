[{"count": 0, "tags": [], "creator": "jon@latchkey.com", "attachment_id": null, "id": 6211, "time": "2001-09-30T11:39:19Z", "bug_id": 3888, "creation_time": "2001-09-30T11:39:19Z", "is_private": false, "text": "Every once and a while I will get this...\n\nWebappClassLoader:   Resource \n'/WEB-INF/classes/org/tigris/scarab/screens/Default.class' was modified; \nDate is now: Sun Sep 30 10:09:30 PDT 2001 Was: Sun Sep 30\n 10:07:31 PDT 2001\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\n...\n\nHere is the log file...\n\n2001-09-30 10:07:49 invoker: init\n2001-09-30 10:07:49 scarab: init\n2001-09-30 10:09:35 StandardContext[/scarab]: Reloading this Context \nhas started\n2001-09-30 10:09:37 StandardManager[/scarab]: Stopping\n2001-09-30 10:09:37 StandardManager[/scarab]: Unloading persisted \nsessions\n2001-09-30 10:09:37 StandardManager[/scarab]: Saving persisted \nsessions to SESSI\nONS.ser\n2001-09-30 10:09:37 StandardManager[/scarab]: Unloading 1 sessions\n2001-09-30 10:09:37 StandardManager[/scarab]: writeObject() storing \nsession 8544\nC68035258287B9D54201D235D0F2\n2001-09-30 10:09:37 StandardManager[/scarab]: Expiring 1 persisted \nsessions\n2001-09-30 10:09:37 StandardManager[/scarab]: Unloading complete\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploying class \nrepositories to work\ndirectory /Users/jon/checkout/scarab/target/work/localhost/scarab\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/activation-1.\n0.1.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib\n/activation-1.0.1.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/commons-colle\nctions.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/\nlib/commons-collections.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/commons-email\n-0.1-dev.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-IN\nF/lib/commons-email-0.1-dev.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/commons-util-\n0.1-dev.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF\n/lib/commons-util-0.1-dev.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/ecs-1.4.1.jar\n to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/ec\ns-1.\n4.1.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/flux-3.0-dev.\njar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/flu\nx-3.0-dev.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/fulcrum-1.0.j\nar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/ful\nc\nrum-1.0.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/jakarta-regex\np-1.3-dev.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-I\nNF/lib/jakarta-regexp-1.3-dev.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/jdbc2_0-stdex\nt.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/j\ndbc2_0-stdext.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/junit-3.7.jar\n to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/jun\nit-\n3.7.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/log4j-1.1.jar\n to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/log\n4j-\n1.1.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/lucene.jar to\n \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/luc\nene.ja\nr\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/mail-1.2.jar\nto \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/m\nail-1.\n2.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/mm.mysql-2.0.\n4.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/m\nm.mysql-2.0.4.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/torque-1.0.ja\nr to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/tor\nqu\ne-1.0.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/turbine-3.0-d\nev.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/\nturbine-3.0-dev.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/velocity-1.2-\ndev.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib\n/velocity-1.2-dev.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/village-1.5.2\n.jar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/vi\nllage-1.5.2.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Deploy JAR \n/WEB-INF/lib/xerces-1.3.0.\njar to \n/Users/jon/checkout/scarab/target/./bin/../webapps/scarab/WEB-INF/lib/xer\nces-1.3.0.jar\n2001-09-30 10:09:37 WebappLoader[/scarab]: Reloading checks are \nenabled for this\n Context\n2001-09-30 10:09:37 StandardWrapper[/scarab:default]: Loading \ncontainer servlet\ndefault\n2001-09-30 10:09:37 default: init\n2001-09-30 10:09:37 StandardWrapper[/scarab:invoker]: Loading \ncontainer servlet\ninvoker\n2001-09-30 10:09:37 invoker: init\n2001-09-30 10:09:37 scarab: init\n2001-09-30 10:09:42 StandardManager[/scarab]: Starting\n2001-09-30 10:09:42 StandardManager[/scarab]: Force random number \ninitialization\n starting\n2001-09-30 10:09:42 StandardManager[/scarab]: Seeding random \nnumber generator cl\nass java.security.SecureRandom\n2001-09-30 10:09:42 StandardManager[/scarab]: Seeding of random \nnumber generator\n has been completed\n2001-09-30 10:09:42 StandardManager[/scarab]: Force random number \ninitialization\n completed\n2001-09-30 10:09:42 StandardManager[/scarab]: Start: Loading persisted \nsessions\n2001-09-30 10:09:42 StandardManager[/scarab]: Loading persisted \nsessions from SE\nSSIONS.ser\n2001-09-30 10:09:42 StandardManager[/scarab]: Creating custom object \ninput strea\nm for class loader WebappClassLoader\n  available:\n    Extension[org.apache.commons.collections, \nimplementationVendor=Apache Softwa\nre Foundation, implementationVersion=1.1-dev, \nspecificationVendor=Apache Softwar\ne Foundation, specificationVersion=1.0]\n    Extension[@name@, implementationVendor=Apache Software \nFoundation, implement\nationVersion=0.1-dev, specificationVendor=Apache Software Foundation, \nspecificat\nionVersion=1.0]\n    Extension[@name@, implementationVendor=Apache Software \nFoundation, implement\nationVersion=0.1-dev, specificationVendor=Apache Software Foundation, \nspecificat\nionVersion=1.0]\n    Extension[javax.mail, implementationVendor=Sun Microsystems, Inc., \nimplement\nationVendorId=com.sun, implementationVersion=1.2, \nspecificationVendor=Sun Micros\nystems, Inc., specificationVersion=1.2]\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n  required:\n----------> Parent Classloader:\nStandardClassLoader\n  available:\n  delegate: false\n  repositories:\n    file:/Users/jon/checkout/scarab/target/lib/naming-factory.jar\n  required:\n----------> Parent Classloader:\nStandardClassLoader\n  available:\n  delegate: false\n  repositories:\n    file:/Users/jon/checkout/scarab/target/common/lib/crimson.jar\n    file:/Users/jon/checkout/scarab/target/common/lib/jaxp.jar\n    file:/Users/jon/checkout/scarab/target/common/lib/naming-common.jar\n    \nfile:/Users/jon/checkout/scarab/target/common/lib/naming-resources.jar\n    file:/Users/jon/checkout/scarab/target/common/lib/servlet.jar\n  required:\n----------> Parent Classloader:\nsun.misc.Launcher$AppClassLoader@33056f\n\n\n\n2001-09-30 10:09:42 StandardManager[/scarab]: Loading 1 persisted \nsessions\n2001-09-30 10:09:42 StandardManager[/scarab]: readObject() loading \nsession 8544C\n68035258287B9D54201D235D0F2\n2001-09-30 10:09:42 StandardManager[/scarab]: Finish: Loading \npersisted sessions\n2001-09-30 10:09:42 StandardContext[/scarab]: Reloading this Context is \ncomplete\nd"}, {"count": 1, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 6212, "creation_time": "2001-09-30T11:40:04Z", "time": "2001-09-30T11:40:04Z", "creator": "jon@latchkey.com", "text": "According to Remy, this one isn't going to be easy to fix because it is so \nhard to duplicate. I'm putting it in the system in the hopes that others may \nhelp duplicate this error.", "is_private": false}, {"count": 2, "tags": [], "creator": "pier@betaversion.org", "attachment_id": null, "id": 6467, "time": "2001-10-08T11:38:48Z", "bug_id": 3888, "creation_time": "2001-10-08T11:38:48Z", "is_private": false, "text": "I am going to check out this bug against Mac OS X 10.1 in the next few days."}, {"count": 3, "tags": [], "bug_id": 3888, "is_private": false, "text": "Aftre more studying, it's extremely unlikely it's a Mac OS X specific problem \n(so reassigning to tomcat-dev). OTOH, it could be a case of static abuse (not \nJon's fault, but maybe in one of the library used).\n\nI've added some info in the release notes. Maybe they would apply to your \nsituation:\n\n<quote>\nSome shared libraries (many are part of the JDK) keep references to objects\ninstantiated by the web application. To avoid class loading related problems\n(ClassCastExceptions, messages indicating that the classloader \nis stopped, ...), the shared libraries state should be reinitialized.\n\nSomething which could help is to avoid putting classes which would be \nreferenced by a shared static field in the web application classloader, \nand put them in the shared classloader instead (the JARs should be put in the \n\"lib\" folder, and classes should be put in the \"classes\" folder).\n</quote>\n\nHere, a candidate to cause trouble may be the JDBC driver (which gets \nregistered in a static field in the system CL).\n\nThere are no workarounds, except:\n- Reset the affected static field(s) on destroy() (once the problem has been \nisolated)\n- Move away the libraries and put them in a shared loader", "id": 6531, "time": "2001-10-10T01:02:01Z", "creator": "remm@apache.org", "creation_time": "2001-10-10T01:02:01Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "After much investigation, I think it should come from a \"user error\", caused by \nthe libraries used (more details on what may cause this in the release notes).", "attachment_id": null, "id": 6668, "creation_time": "2001-10-12T19:32:37Z", "time": "2001-10-12T19:32:37Z", "creator": "remm@apache.org", "bug_id": 3888, "is_private": false}, {"count": 5, "attachment_id": null, "creator": "lixxx153@umn.edu", "is_private": false, "id": 22690, "time": "2002-09-11T15:53:26Z", "bug_id": 3888, "creation_time": "2002-09-11T15:53:26Z", "tags": [], "text": "I couldn't find details about this bug in any release notes. Could you tell me\nwhich release note I should look into? Or copy the details here so that it is\neasier to find.\n\nThanks."}, {"count": 6, "tags": [], "creator": "mvdijken@madocke.nl", "attachment_id": null, "id": 24254, "time": "2002-10-10T08:19:06Z", "bug_id": 3888, "creation_time": "2002-10-10T08:19:06Z", "is_private": false, "text": "Getting this error on FreeBSD with Tomcat 4.0.3. Can't really tell why this is\ngoing on. I have four webapps running. Three websites of our clients and the\ndefault webapp. I can give many more details about this situation if you'd like,\nbut I can't really tell what is significant in this situation, so please let me\nknow what kind of details you need. I'd like to have it noted that in\ncatalina.out, about a 1/4 of the entire 65000 line log file consists of\nWebappClassLoader: Lifecycle error : CL stopped. "}, {"count": 7, "tags": [], "text": "I cannot add more than what I already wrote in that report. I am convinced\n(until actually proven wrong) that this is a user or application error.", "is_private": false, "bug_id": 3888, "id": 24255, "time": "2002-10-10T08:24:42Z", "creator": "remm@apache.org", "creation_time": "2002-10-10T08:24:42Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Hey Remy,\n\nYou say it is a user error. The only reasonable user error I can find, is that\nthe placing of our lib files might leave something to question. Let me explain:\n\nWe have one big web application. A Content Management System we're developing.\nWhenever we build a project using this Content Management System, we use the\nlatest stable release of the thing. Since new versions of libraries we have not\ncreated come out all the time, we have the libraries in our web application\nalso. This so that when we build our project, we have those versions of certain\nlibraries that are compatible with our project. \n\nThis does mean, that when we use for example log4j on one server, we do not\nplace it in $Tomcat/common/lib or $tomcat/lib but in every web-app's WEB-INF/lib\ndirectory. \n\nAs said, I know this is not a usage that the Tomcat documentation promotes. I do\nhowever feel, that IF this is the reason Tomcat's classloaders are crashing,\nthis should not be possible to happen.\n\nIf this is NOT the user error you're talking about, then please explain what you\ndo mean. I've read the servlet spec, and read the tomcat documentation. If I\ndon't know, that means a whole hell of a lot of people don't know either.", "attachment_id": null, "id": 24258, "creation_time": "2002-10-10T09:51:32Z", "time": "2002-10-10T09:51:32Z", "creator": "mvdijken@madocke.nl", "bug_id": 3888, "is_private": false}, {"count": 9, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 24264, "time": "2002-10-10T11:36:25Z", "bug_id": 3888, "creation_time": "2002-10-10T11:36:25Z", "is_private": false, "text": "About the library placement, you're free to do whatever you want, and we're not\npromoting that you move it somewhere else.\n\nYou have to make sure that the lifecycle of the object you create and resources\nyou allocate (threads for example) are synced with the webapp lifecycle. When\nthere's a restart you have to destroy all leftover objects, and recreate them\nwhen the webapp is initialized again.\nYou get the errors when some object which was loaded by the old webapp\nclassloader  tries to run code."}, {"count": 10, "tags": [], "bug_id": 3888, "is_private": false, "text": ">You get the errors when some object which was loaded by the old \n> webapp classloader  tries to run code.\n\nAh...this is the first time you have specified when the error occurs. Now, if \nthe classloader has been properly destroyed (generally you need to set it \nto be null), why is the old code even able to run? Since the old code is \nloaded in the now null classloader, then the JVM should not allow that \ncode to run. Maybe there is classloader caching going on (ie: the \nreference to the old classloader is not being properly destoryed)?\n\nAlso, I still say this is a bug in Tomcat's classloader system because I \nhave been doing servlet development for years (this bug is now more \nthan a year old) with several different servlet containers and have never \nseen this bug. In fact, it didn't start happening until I had started using that \nversion of Tomcat 4.\n\nAlso, I still see this bug still happens all the time for me...even with the \n4.0.6 version of Tomcat.\n\nRemy, something is broken and it isn't user error.\n\n-jon", "id": 24297, "time": "2002-10-10T17:28:47Z", "creator": "jon@latchkey.com", "creation_time": "2002-10-10T17:28:47Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 24298, "creation_time": "2002-10-10T17:37:34Z", "time": "2002-10-10T17:37:34Z", "creator": "remm@apache.org", "text": "Hhmm, sorry, but I can't force finalization of objects, and the VM will indeed\nallow code to continue running (which is normal since the old CL is not actually\ndestroyed). The old CL will not get finalized either since the objects in\nquestion still reference it through their classdef.\n\nWaiting for your patch to fix it (and I'll be handling some other issues\nmeanwhile) :)", "is_private": false}, {"count": 12, "tags": [], "text": "Well, that is the problem...the old CL is not destroyed. Why is it not set to \nnull?\n\n-jon\n", "is_private": false, "bug_id": 3888, "id": 24302, "time": "2002-10-10T17:55:52Z", "creator": "jon@latchkey.com", "creation_time": "2002-10-10T17:55:52Z", "attachment_id": null}, {"count": 13, "attachment_id": null, "creator": "remm@apache.org", "is_private": false, "id": 24304, "time": "2002-10-10T17:59:44Z", "bug_id": 3888, "creation_time": "2002-10-10T17:59:44Z", "tags": [], "text": "Catalina replaces the pointer from the old loader to the new one, removes\nsessions and things. However, you could have a thread or some other component\nholding the pointer to the objects, and preventing finalization.\nBasically, if you can find some component in Catalina holding a pointer to\neither one of the old object/classes/classloader, then the bug is valid.\nOtherwise, it's not."}, {"count": 14, "tags": [], "creator": "jon@latchkey.com", "attachment_id": null, "id": 24305, "time": "2002-10-10T18:10:30Z", "bug_id": 3888, "creation_time": "2002-10-10T18:10:30Z", "is_private": false, "text": "If you null out the classloader, then all of the pointers become invalid \nbecause the classloader is the top pointer. Again, the problem is the fact \nthat you don't null out the classloader.\n\nI would like you to ask on jsr-053 if any other vendors have this problem. I \nbet you some beers at my nightclub that they don't. This is a tomcat \nspecific problem.\n\n-jon\n"}, {"count": 15, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 24316, "time": "2002-10-10T20:35:50Z", "bug_id": 3888, "creation_time": "2002-10-10T20:35:50Z", "is_private": false, "text": "I'll need some help finding out where I should null it out (WebappLoader.stop()\nshould be doing that, and the CL is also removed from the bindings table). Sorry\nJon, I'm just too stupid to figure it out :-("}, {"count": 16, "attachment_id": null, "creator": "mvdijken@madocke.nl", "is_private": false, "id": 24343, "time": "2002-10-11T07:39:15Z", "bug_id": 3888, "creation_time": "2002-10-11T07:39:15Z", "tags": [], "text": "There there, Remy, hush now:) \nNow see what you've done Jon? You've made him upset! That won't help him fix the\nproblem and we both want the problem fixed don't we?:)\n\nOK without the BS: I've talked a little with Remy over private mail yesterday,\nand with a friend of mine. In our server we'd forgotten to remove the examples\nwebapp. If there ever was a webapp which causes problems it's that bugger. I\nremoved it, and am getting a lot less errors. I still however did get some CL\nerrors overnight... A lot less, but they still exist. \n\nNow here's a question for you Remy, I have no webapps left that are set to\nreloadable. Examples was the only one. You say this bug happens when a\nclassloader is replaced by a new classloader. Why is the classloader replaced in\nthe first place? Because of an attempt to conserve memory usage or something?\n\nFurthermore, I think Jon is correct to say that when the Classloader is stopped,\nit doesn't truly matter whether or not anything within this classloader had\nreferences to anything within this classloader itself. These references must be\nbroken by VM. Otherwise the whole concept of the singleton (which has a static\nreference to an instance of itself) is an instant memory leak. So, if this holds\ntrue, it must mean, that something within a classloader holds a reference to\nsomething in another classloader (I think this is the point you're trying to\nmake Remy?) Now, the only code I use from within my webapps, is the Servlet API\nclasses, which is in the common classloader I believe, and I use a resource pool\nwith mysql connections. However, I am fairly certain that I keep no connections\nopen. Jon, you're getting this problem as well, do you use Tomcat's resource\npooling? Maybe that's where we should start fishing. Anyway, let me know what\nyou think about this novel I've just written:)"}, {"count": 17, "tags": [], "creator": "jon@latchkey.com", "attachment_id": null, "is_private": false, "id": 24344, "time": "2002-10-11T07:52:43Z", "bug_id": 3888, "creation_time": "2002-10-11T07:52:43Z", "text": "I think that part of the problem might be that when the classloader is \ndumped, there is a few cases where objects within the classloader are \nnot first nulled out. I sent Remy a patch which I have not heard back from \nhim on. It is worth a try at least.\n\nAlso, I don't have any of the example webapp's...and I can't tell where \nScarab might be messing up because it is a very complex application \n(Scarab has already uncovered about 4-5 odd bugs in Tomcat so far...).\n\nI also don't see how putting jar files in different locations should be a \nrequirement of the user (ala Remy's claim of \"user\" error).\n\n-jon\n"}, {"count": 18, "attachment_id": null, "creator": "hoju@visi.com", "is_private": false, "id": 24390, "time": "2002-10-12T05:18:51Z", "bug_id": 3888, "creation_time": "2002-10-12T05:18:51Z", "tags": [], "text": "Would the fact that Tomcat is not nulling out the classloader fully upon \napplication stop/remove/undeploy be the reason that the log4j jar in my \nwebapp's WEB-INF/lib directory is being locked even after a \nstop/remove/undeploy?  I only get this behavior with log4j.  All other \nresources are let go.\n\nIf this bug *is* the reason the log4j jar is being locked until after a full \nTomcat shutdown, then it resolves a question that the Log4j developers and I \nhave been asking about where the problem lies with the locked log4j jar file.  \nIf the culprit is Tomcat, then, I guess, we'd just wait for this bug to be \nfixed.  If it is not, then I'd like to know that so we can direct our attention \nto finding the problem in Log4j.\n\nthanks,\n\nJake"}, {"count": 19, "tags": [], "creator": "carsten@acompany.co.uk", "attachment_id": null, "id": 24861, "time": "2002-10-18T14:36:21Z", "bug_id": 3888, "creation_time": "2002-10-18T14:36:21Z", "is_private": false, "text": "Hi.\n\nI experienced the same problem and have been trying to find out something about\nit. What I did is I modified the\norg.apache.catalina.loader.WebappClassLoader.java and provoke an Exception in\nit. Actually there are two places where this 'error' can occur, but in my case\nit happens while trying to load a class.\n\nSo my debug part starts in line 1304 (tomcat 4.1.12) and looks like:\npublic Class loadClass(String name, boolean resolve)\n    throws ClassNotFoundException {\n\n    if (debug >= 2)\n        log(\"loadClass(\" + name + \", \" + resolve + \")\");\n    Class clazz = null;\n\n    String test = null;\n\n    // Don't load classes if class loader is stopped\n    if (!started) {\n        log(\"###CLASS[\" + name + \"]### Lifecycle error : CL stopped\");\n        try {\n          test.length();\n        }\n        catch(Exception e) {\n          e.printStackTrace();\n        }\n    ...\n\nWhen the error occurs (strangely not on the first touch of a jar package,\ninstead only every after the first) it produces (in my case) the following output:\n\nWebappClassLoader: ###CLASS[org.apache.log4j.helpers.NullEnumeration]###\nLifecycle error : CL stopped\njava.lang.NullPointerException\n        at\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1317)\n        at\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1274)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:322)\n        at org.apache.log4j.Category.getAllAppenders(Category.java:394)\n        at\norg.apache.velocity.runtime.log.SimpleLog4JLogSystem.shutdown(SimpleLog4JLogSystem.java:200)\n        at\norg.apache.velocity.runtime.log.SimpleLog4JLogSystem.finalize(SimpleLog4JLogSystem.java:194)\n        at java.lang.ref.Finalizer.invokeFinalizeMethod(Native Method)\n        at java.lang.ref.Finalizer.runFinalizer(Finalizer.java:83)\n        at java.lang.ref.Finalizer.access$100(Finalizer.java:14)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:160)\n\nSo it looks like that the Finalizer calls (in my case) velocity's\nSimpleLog4JLogSystem's finalize method which it self calls Log4J's Category's\ngetAllAppenders method calls. This uses the static method from NullEnumeration\nto return an instance variable. The problem is that this instance\nis created by new NullEnumeration() so I guess that then this class has to be\nfound with the help of catalina's WebappClassLoader.\n\nPlease find here an extract:\n\npublic class NullEnumeration implements Enumeration {\n  private static final NullEnumeration instance = new NullEnumeration();\n...\n  public static NullEnumeration getInstance() {\n    return instance;\n  }\n...\n\nPerhaps this NullEnumeration should be instantiated once in Log4J's init\nprocedure in order to have an instance already loaded in memory and the class\nalready resolved or velocity should not try to close all appenders in its\nfinalize. In my case I have a start-up servlet in my webapp which now contains\nthe following line in it's init method:\n\nlogger.debug(\"Log4J instance now in memory: \" +\norg.apache.log4j.helpers.NullEnumeration.getInstance());\n\nAnd this works fine for me... So I am not an expert, but I hope that helps\neverybody to sort out their problems because after all I don't think that this\nis a proper bug. Due to the fact that is my first active part, comments and\ncritics of this posts are very welcome.\n\nBest regards\nCarsten Woelk\n"}, {"count": 20, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 24869, "time": "2002-10-18T17:28:35Z", "bug_id": 3888, "creation_time": "2002-10-18T17:28:35Z", "is_private": false, "text": "If that is effectively the cause of the error, maybe log4j or Velocity could\ntake care of the needed instanciation."}, {"count": 21, "tags": [], "creator": "jon@latchkey.com", "attachment_id": null, "id": 24875, "time": "2002-10-18T18:47:30Z", "bug_id": 3888, "creation_time": "2002-10-18T18:47:30Z", "is_private": false, "text": "added ceki for his input."}, {"count": 22, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 24924, "creation_time": "2002-10-20T20:13:27Z", "time": "2002-10-20T20:13:27Z", "creator": "ceki@apache.org", "text": "\nIndeed, Mark Womack and I have conversed with Jacob Kjome about log4j.jar being \nlocked. Jacob supplied a test case reproducing the problem which I found to be \nsomewhat complicated. I would very much like to see a simpler test case to \naddress the bug dicovered by Jacob.\n\nAs for the problem reported by Carsten Woelk, as far as I can tell,  \n\npublic class X {\n  private static final X instance = new X();\n...\n  public static X getInstance() {\n    return instance;\n  }\n\nis just a classical pattern. What is unsafe with it?", "is_private": false}, {"count": 23, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 24928, "creation_time": "2002-10-20T23:05:00Z", "time": "2002-10-20T23:05:00Z", "creator": "hoju@visi.com", "text": "Hi Ceki,\n\nDid you check out the testcase that Mark Womack created.  Was that one not \nsimplified enough?\n\nhttp://marc.theaimsgroup.com/?l=log4j-dev&m=103371229121352&w=2\n\nLook at the bottom of that message and you'll see a zip file containing a \nwebapp to try out.\n\nNote that some of the stuff in this message is a bit dated.  I tested Mark's \nfindings and found that both the static and non-static test resulted in the \nlog4j jar being locked and after testing again, Mark found that result as \nwell.  Other than that, you can follow Mark's instructions on testing the app \nunder Tomcat.\n\nOne thing to think about is whether commons-logging is getting a handle on \nlog4j.  It really shouldn't because the parent classloader shouldn't be able to \nsee the webapp classloaders, but I'm beginning to wonder if I can make that \nassumption?  The isssue could be either Tomcat not nulling out some objects in \nthe classloader before Tomcat stops and app or commons-logging gaining a handle \non log4j and not letting go until server shutdown or maybe a combination of \nboth.\n\nSo far, the only viable solution I see is to use a RepositorySelector and keep \nlog4j in one of the parent classloaders.  That shouldn't be necessary, though.  \nAnyone have any bright ideas?\n\nJake", "is_private": false}, {"count": 24, "tags": [], "bug_id": 3888, "is_private": false, "text": "\nMark's message does not include source code for Log4jApplicationWatch and \nLog4jInit classes. Moreover, Mark reported that he could not reproduce the \nstatic-reference-jar-locking problem.\n \nI need a simple test case, with source code, capabable of reproducing the \nproblem. Is that too much to ask for? \n\nCeki\n\nps: Mark CCed for reference.", "id": 24937, "time": "2002-10-21T08:33:53Z", "creator": "ceki@apache.org", "creation_time": "2002-10-21T08:33:53Z", "attachment_id": null}, {"count": 25, "tags": [], "creator": "hoju@visi.com", "attachment_id": 3561, "id": 24971, "time": "2002-10-22T02:53:25Z", "bug_id": 3888, "creation_time": "2002-10-22T02:53:25Z", "is_private": false, "text": "Created attachment 3561\nsample webapp to test log4j jar being locked even after Tomcat manager remove"}, {"count": 26, "tags": [], "creator": "hoju@visi.com", "attachment_id": null, "is_private": false, "id": 24972, "time": "2002-10-22T03:05:03Z", "bug_id": 3888, "creation_time": "2002-10-22T03:05:03Z", "text": "The testcase I just uploaded provides Mark's testcase and includes a simplified \nversion of my Log4jInit servlet.  Logging is done via both a console appender \nand a FileAppender.  The file appender is set up with a dynamic variable which \npoints to where to write the file.  As long as you install the app with the \npath \"/locktest\", you will find the file \"main.log\" in WEB-INF/logs of this \nwebapp.  No need to configure anything.  It is all set up and ready to run.\n\nAll source code including the classes that Mark didn't provide source to are \nprovided (I decompiled his classes.  I'm sure he doesn't mind).  All source \nresides in the root of the webapp as well as the .jsp files which are what you \nneed to run to see logging output.  There is also a \"running.txt\" file which \ndescribes the URL to use to install/remove the webapp.  Modify those example \nURL's to point to the \"log4j_locktest\" directory, which is the root of the \nwebapp, on your system.\n\nMake sure this is installed *outside* of Tomcat's \"webapps\" directory.  Any \nother place on your file system is appropriate.\n\nAny questions, let me know.\n\nJake"}, {"count": 27, "attachment_id": null, "creator": "hoju@visi.com", "is_private": false, "id": 24973, "time": "2002-10-22T03:09:15Z", "bug_id": 3888, "creation_time": "2002-10-22T03:09:15Z", "tags": [], "text": "Sorry for the spam,\n\nForgot to mention to put a recent version of log4j.jar in WEB-INF/lib before \ninstalling this in Tomcat.\n\nYou should notice after the removal of the webapp that the log file is able to \nbe deleted and the static_test.jar is able to be deleted.  However the \nlog4j.jar is locked until you shutdown Tomcat.  That is the problem we are \ntrying to solve.\n\nJake"}, {"count": 28, "tags": [], "creator": "ceki@apache.org", "attachment_id": 3567, "is_private": false, "id": 24992, "time": "2002-10-22T15:03:59Z", "bug_id": 3888, "creation_time": "2002-10-22T15:03:59Z", "text": "Created attachment 3567\nSee the README file."}, {"count": 29, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "is_private": false, "id": 24993, "time": "2002-10-22T15:10:53Z", "bug_id": 3888, "creation_time": "2002-10-22T15:10:53Z", "text": "I added a new tarball lock.tar.gz as an attachement. It contains a README file \nexplaining its usage. \n\nMy preliminary conclusion is that there is indeed an undesired interaction \nbetween log4j and Tomcat when the DOMConfigurator is used but not otherwise. \n\nThe problem has been reduced to log4j/DOMConfigurator.\n\nI don't think the indetified bug is directly linked to the bug reported by Jon. \nJon are you using the DOMConfigurator?"}, {"count": 30, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 25000, "creation_time": "2002-10-22T17:39:14Z", "time": "2002-10-22T17:39:14Z", "creator": "jon@latchkey.com", "text": "I don't believe so. All of my log4j configuration is done with properties \nfiles.", "is_private": false}, {"count": 31, "tags": [], "text": "Created attachment 3569\nA new version of log4j that solves the log4j.jar locking problem.", "attachment_id": 3569, "id": 25001, "creation_time": "2002-10-22T17:41:53Z", "time": "2002-10-22T17:41:53Z", "creator": "ceki@apache.org", "bug_id": 3888, "is_private": false}, {"count": 32, "tags": [], "text": "I don't really want to further spam the discussion, but I'd just like it noted\nthat after removing the examples webapp from my Tomcat, I've not experienced any\nproblems any more. I DO use log4j, maybe a slightly older version, but I still\ndo use it. I have not experienced any CL errors any more.", "attachment_id": null, "id": 25025, "creation_time": "2002-10-23T07:36:35Z", "time": "2002-10-23T07:36:35Z", "creator": "mvdijken@madocke.nl", "bug_id": 3888, "is_private": false}, {"count": 33, "tags": [], "bug_id": 3888, "is_private": false, "text": "Created attachment 3657\nant buld of a webapp reproducing the CL error....requires libraries in next attachment...", "id": 25361, "time": "2002-10-30T06:47:37Z", "creator": "hoju@visi.com", "creation_time": "2002-10-30T06:47:37Z", "attachment_id": 3657}, {"count": 34, "tags": [], "text": "Ok, well, as it turns out, the second attachment seems too big for Bugzilla to \nhandle.  It is moderately large, but not that big; about 2,386k.\n\nHere is a link to it:\nftp://ftp.visi.com/users/hoju/pub/barracuda-libs.zip\n\nHere is a link to the Ant build, for good measure:\nftp://ftp.visi.com/users/hoju/pub/barracuda-pages.sample_test.zip\n\nInstructions on what everything is and how to use it is in a README.txt file in \nthe root directory of the ant build in barracuda-pages.sample_test.zip.\n\nBasically, extract barracuda-pages.sample_test.zip to any directory and extract \nbarracuda-libs.zip to $CATALINA_HOME.  It will put the jar files where they \nneed to go.  Again, more instructions are in the README.txt and they detail \nwhat libraries go where.\n\nThis setup is meant to be a completely reproduceable test showing the \n\"...CL stopped\" error.  It runs the first time the app is installed, but after \nremoval and then another install, trying to pull up a dynamic page causes a \njava.lang.ClassNotFoundException and the \"...CL stopped\" error shows up in the \nstdout.log.\n\nA similar configuration, but with a few of the libraries copied to WEB-INF/lib \nmakes everything work flawlessly no matter how many install/remove cycles are \ndone.\n\nStep-by-step instructions are in README.txt of the Ant build.\n\nlet me know if you have any questions or difficulties.\n\nJake", "is_private": false, "bug_id": 3888, "id": 25363, "time": "2002-10-30T07:25:03Z", "creator": "hoju@visi.com", "creation_time": "2002-10-30T07:25:03Z", "attachment_id": null}, {"count": 35, "tags": [], "bug_id": 3888, "is_private": false, "text": "Just wanted to note that I updated the libraries at the ftp addresses that I \nmentioned in my previous comment.\n\nYou can follow the instructions like normal, but if you want to see it working, \nyou only have to copy barracuda-core.jar to WEB-INF/lib.  all other jars can \nstay where they are.  With barracuda-core.jar in WEB-INF/lib, the \"...CL \nstopped\" error doesn't ever happen, even after multiple remove/install cycles.\n\nOh, and Ceki asked me before whether the testcase was meant to show problems \nwith log4j.  Just to clarify, this is *not* a log4j issue as far as I can tell.\n\nJake", "id": 25456, "time": "2002-11-01T01:53:47Z", "creator": "hoju@visi.com", "creation_time": "2002-11-01T01:53:47Z", "attachment_id": null}, {"count": 36, "tags": [], "creator": "chrisforbis@yahoo.com", "attachment_id": null, "is_private": false, "id": 27504, "time": "2002-12-06T20:38:08Z", "bug_id": 3888, "creation_time": "2002-12-06T20:38:08Z", "text": "I just wanted to add a little on this bug.  I have a large webapplication that \nruns in tomcat 4.0.3 and 4.1 fine, but if I go to run in on JBoss (with tomcat \ninside jboss) I get this error ALL the time.  It happeneds as soon as tomcat \nreloads my web app (when jboss figures out my web.xml was touched and tells \ntomcat to reload my app).\n\nJust figured I would add this because it might be anotehr thing worth testing.\nI will look into it a little more myself, but wanted to let people know what I \nhave seen."}, {"count": 37, "tags": [], "text": "I can confirm that this still occurs with 4.1.12 and Scarab.", "is_private": false, "bug_id": 3888, "id": 27529, "time": "2002-12-08T22:02:27Z", "creator": "jon@latchkey.com", "creation_time": "2002-12-08T22:02:27Z", "attachment_id": null}, {"count": 38, "tags": [], "text": "I also confirm that it occurs with Tomcat 4.0.3 and 4.1.12. I don't use log4j. \nMy platform is a PC with Windows NT 4.\nIt seems to happen only when the webapp is restarted (because of a class or \nproperty file changed)\n\nI'll try to track what has been done when it happens", "is_private": false, "bug_id": 3888, "id": 27554, "time": "2002-12-09T17:23:39Z", "creator": "bmaras@sopragroup.com", "creation_time": "2002-12-09T17:23:39Z", "attachment_id": null}, {"count": 39, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 27590, "creation_time": "2002-12-10T13:11:26Z", "time": "2002-12-10T13:11:26Z", "creator": "bmaras@sopragroup.com", "text": "I tried to remove the directory \"examples\" of Tomcat, as suggested in this \nthread : same behaviour\n\nIt seems like the lifecycle error occurs each time a .properties file is \nmodified\n\nHope this helps", "is_private": false}, {"count": 40, "tags": [], "creator": "jon@latchkey.com", "attachment_id": null, "is_private": false, "id": 28085, "time": "2002-12-20T05:02:59Z", "bug_id": 3888, "creation_time": "2002-12-20T05:02:59Z", "text": "I can now say that I most commonly see this error when I double compile. \n\nIn other words, I will re-compile and it will cause a classloader change. \nThen, if I re-compile once more before loading the servlet, I will see this \nerror.\n\nI also see this error happen more often when the files that change are not \n.class files. Say for example, I have a resource bundle .properties file in \nmy classpath that requires a change...for example:\n\nWebappClassLoader:   Resource '/WEB-INF/classes/\nScarabBundle.properties' was modified; Date is now: Thu Dec 19 \n20:57:57 PST 2002 Was: Thu Dec 19 20:09:44 PST 2002\nWebappClassLoader:   Resource '/WEB-INF/classes/org/tigris/scarab/\nom/Issue.class' was modified; Date is now: Thu Dec 19 20:59:04 PST \n2002 Was: Thu Dec 19 20:10:42 PST 2002\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\nWebappClassLoader: Lifecycle error : CL stopped\n\nAnyway, maybe that is more hints."}, {"count": 41, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 28086, "creation_time": "2002-12-20T05:03:43Z", "time": "2002-12-20T05:03:43Z", "creator": "jon@latchkey.com", "text": "adding remy to this issue since he is the only one out there that can fix it.", "is_private": false}, {"count": 42, "tags": [], "bug_id": 3888, "is_private": false, "text": "\nNote sure if this is still being investigated or not but I noticed some pretty\nbad behavior related to this bug under Tomcat-5.  The symptom is triggered the\nsame way for both Tomcat-4.1.x and tomcat-5 (with slight differences...read on).\n However, after getting the lifecycle error under Tomcat4, the context continues\nto work.  After gettting the error under Tomcat5, the context quits working. \nThe manager app reports it as not being started.\n\nHere is how I reproduce the problem...\n\n1.  Start Tomcat (4 or 5)\n2.  Use the catalina-ant task to install/remove my app.  I go through the\nfollowing separate steps...\n    ant catalina-install\n    ant catalina-remove catalina-install\n    ant catalina-remove catalina-install\n    ant catalina-remove superclean catalina-install\n\nThe first 3 separate steps result in the context starting just fine.  However,\nafter the fourth step, the context fails to start.  Note that \"superclean\"\ncleans up everything forcing a full clean rebuild.\n\nI actually am not getting the \"INFO: Lifecycle error : CL stopped\" error unless\nI do Log4j configuration.  However, I've somewhat ruled out Log4j as the culprit\nbecause, although I don't get said error printed out when I don't explicitly\nconfigure Log4j, I get the same behavior of the context not starting after the\n4th step in either case.  Doing the configure must just trigger the code that\nactually prints out that debugging where that same debugging code isn't\ntriggered otherwise.\n\nBelow is what is printed out in stdout.log in Tomcat5 when I do Log4j\nconfiguration.  Notice that, somewhat curiously, the number of classloader\nerrors matches the number of times that the app was installed/removed (not\nincluding the initial install).  Also note that I end up with an\n\"java.lang.IncompatibleClassChangeError:\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl\" error in Tomcat5 where in\nTomcat4, I get   \"javax.xml.parsers.FactoryConfigurationError: Provider\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl not found\" ...\n\n\nStarting service Tomcat-Standalone\nApache Tomcat/5.0\nConfiguring GlobalOR from File: WEB-INF/object-repository.xml\nEnhydra Java Application Server\nCopyright 1997-2000 Lutris Technologies, Inc.\nAll rights reserved.\nConfiguring GlobalOR from File: WEB-INF/object-repository.xml\nEnhydra Java Application Server\nCopyright 1997-2000 Lutris Technologies, Inc.\nAll rights reserved.\nConfiguring GlobalOR from File: WEB-INF/object-repository.xml\nEnhydra Java Application Server\nCopyright 1997-2000 Lutris Technologies, Inc.\nAll rights reserved.\nFeb 23, 2003 9:00:25 PM org.apache.catalina.loader.WebappClassLoader\nfindResourceInternal\nINFO: Lifecycle error : CL stopped\njava.lang.IncompatibleClassChangeError:\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1199)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1159)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:93)\n\tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:172)\n\tat\njavax.xml.parsers.DocumentBuilderFactory.newInstance(DocumentBuilderFactory.java:93)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:644)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:616)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:584)\n\tat org.apache.log4j.xml.XMLWatchdog.doOnChange(DOMConfigurator.java:815)\n\tat org.apache.log4j.helpers.FileWatchdog.checkAndConfigure(FileWatchdog.java:80)\n\tat org.apache.log4j.helpers.FileWatchdog.run(FileWatchdog.java:99)\nFeb 23, 2003 9:00:25 PM org.apache.catalina.loader.WebappClassLoader\nfindResourceInternal\nINFO: Lifecycle error : CL stopped\njava.lang.IncompatibleClassChangeError:\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1199)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1159)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:93)\n\tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:172)\n\tat\njavax.xml.parsers.DocumentBuilderFactory.newInstance(DocumentBuilderFactory.java:93)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:644)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:616)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:584)\n\tat org.apache.log4j.xml.XMLWatchdog.doOnChange(DOMConfigurator.java:815)\n\tat org.apache.log4j.helpers.FileWatchdog.checkAndConfigure(FileWatchdog.java:80)\n\tat org.apache.log4j.helpers.FileWatchdog.run(FileWatchdog.java:99)\nFeb 23, 2003 9:00:26 PM org.apache.catalina.loader.WebappClassLoader\nfindResourceInternal\nINFO: Lifecycle error : CL stopped\njava.lang.IncompatibleClassChangeError:\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1199)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1159)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:93)\n\tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:172)\n\tat\njavax.xml.parsers.DocumentBuilderFactory.newInstance(DocumentBuilderFactory.java:93)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:644)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:616)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:584)\n\tat org.apache.log4j.xml.XMLWatchdog.doOnChange(DOMConfigurator.java:815)\n\tat org.apache.log4j.helpers.FileWatchdog.checkAndConfigure(FileWatchdog.java:80)\n\tat org.apache.log4j.helpers.FileWatchdog.run(FileWatchdog.java:99)\nConfiguring GlobalOR from File: WEB-INF/object-repository.xml\nEnhydra Java Application Server\nCopyright 1997-2000 Lutris Technologies, Inc.\nAll rights reserved.\nConfiguring GlobalOR from File: WEB-INF/object-repository.xml\nEnhydra Java Application Server\nCopyright 1997-2000 Lutris Technologies, Inc.\nAll rights reserved.\n\n\nBTW, I am using Log4j-1.2.8 in WEB-INF/lib and have removed the Xerces that\ncomes with Barracuda in favor of Xerces-1.4.4 in common/endorsed because,\ncurrently, XMLC-2.1 (xmlc.enhydra.org) requires that version of Xerces.  I have\nnoticed no issues with this setup other than when I do a clean build after\nhaving installed the app in Tomcat.  Removing the app, then doing a clean build,\nand then installing it again is when I get the bad behavior...and, of course,\nworse behavior in Tomcat5.\n\nSo, does this help?  Any new ideas on why this might be happening?  Any fixes in\nthe works?\n\nJake", "id": 31833, "time": "2003-02-24T04:14:15Z", "creator": "hoju@visi.com", "creation_time": "2003-02-24T04:14:15Z", "attachment_id": null}, {"count": 43, "tags": [], "creator": "scott@attask.com", "attachment_id": null, "id": 31874, "time": "2003-02-24T18:58:29Z", "bug_id": 3888, "creation_time": "2003-02-24T18:58:29Z", "is_private": false, "text": "ClassLoader stopped on java.lang.DoubleI'm using OS X Server (latest rev), jav 1.3.1 and Tomcat 4.1.18. We have a thread that runs once/day. It will run for maybe a day or two successfully, but then the ClassLoader gives the following:WebappClassLoader: Lifecycle error : CL stoppedjava.lang.NoClassDefFoundError: java/lang/Double        at com.attask.AtProjects.setProj_invoiceAmount(AtProjects.java:1049)        at com.attask.AtProjects.populateFromResultSet(AtProjects.java:1210)        at com.attask.AtListBean.createListItem(AtListBean.java:238)        at com.attask.AtListBean.setList(AtListBean.java:127)        at com.attask.AtListBean.setList(AtListBean.java:67)        at com.attask.AtThreadRecalcTimelines.run(AtThreadRecalcTimelines.java:55)        at com.attask.AtThread.run(AtThread.java:101)This wreaks havoc on the data. Interesting that java.lang.NoClassDefFoundError is in the same package as java.lang.Double, but Double could not be found.-Scott"}, {"count": 44, "tags": [], "text": "Just to chime in on this ticket, we ran into this exception today as well.  \nAlthough it wasn't with log4j or anything else.  It occured during a load test \non the server.  It doesn't appear we ran out of Heap or Stack.  Our -Xmx/ms \nsettings were our norm for a buffer during the test.\n\nThe only simularity is that we do run all of the JAR's out of the application \nWEB-INF/lib path.  There was no new jars/classes installed during this test.  \nWe were not using JSP's during this load test, rather just using Tomcat as a \nservlet engine for now.  Although I think we may still have reloadable=\"true\" \non it.\n\nWe had this exception occur while trying to perform some encryption within our \napplication, using the SunJCE provider.\n\nWebappClassLoader: Lifecycle error : CL stopped\njava.security.NoSuchAlgorithmException: Algorithm DES not available\n        at javax.crypto.SunJCE_b.a(DashoA6275)\n        at javax.crypto.SecretKeyFactory.getInstance(DashoA6275)\n        at com.metro1.encryption.CryptFactory.decryptKey(CryptFactory.java:155)\n        at com.metro1.encryption.CryptFactory.<init>(CryptFactory.java:124)\n        ... rest of the stack.\n\n\nIs there anything that I can set in my server to give more information if we \ncan reproduce this more regularly, other than during the load test?\n\nI'm going to have our QA department turn of reloadable first.  If it \ncontinues, I'll have them move the encryption JAR's into common/lib and see if \nthat resolves anything.", "is_private": false, "bug_id": 3888, "id": 36769, "time": "2003-05-06T18:28:05Z", "creator": "curtis.paris@metro1.com", "creation_time": "2003-05-06T18:28:05Z", "attachment_id": null}, {"count": 45, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 36774, "time": "2003-05-06T20:47:13Z", "bug_id": 3888, "creation_time": "2003-05-06T20:47:13Z", "text": "Your comments more or less prove that this bug is invalid (your classes are\nreferenced from a shared static object, and thus remain loaded after the webapp\nreload). I will not attempt to close, resolve, or look further into this report,\nwhich is an application problem, not a Tomcat bug."}, {"count": 46, "tags": [], "text": "Remy,\n\nHow does the \"applications WEB-INF/lib\" consitute a \"(your classes are\nreferenced from a shared static object, and thus remain loaded after the webapp\nreload)\"?????\n\nFeel free to keep your head buried in the sand, however, this is a Tomcat\nproblem as I have never seen this problem before I used Tomcat or with any other\ncontainers.\n\nThe way I currently duplicate it (using Scarab) is that it happens *every single\ntime* after exactly 3 classloader reloads. I suspect it is that there is a\nmemory leak with reloading which fills the memory up after 3 reloads and the JVM\nblows up.", "attachment_id": null, "id": 36775, "creation_time": "2003-05-06T20:53:47Z", "time": "2003-05-06T20:53:47Z", "creator": "jon@latchkey.com", "bug_id": 3888, "is_private": false}, {"count": 47, "tags": [], "creator": "scott@attask.com", "attachment_id": null, "id": 36776, "time": "2003-05-06T21:03:59Z", "bug_id": 3888, "creation_time": "2003-05-06T21:03:59Z", "is_private": false, "text": "Agreed, this is a tomcat bug.\nWe are getting this error using 4.1.18 and jdk 1.4.1 the classloader is failing on java.lang.Double."}, {"count": 48, "attachment_id": null, "creator": "eric_schwarzenbach@classwell.com", "is_private": false, "id": 38848, "time": "2003-06-13T23:10:27Z", "bug_id": 3888, "creation_time": "2003-06-13T23:10:27Z", "tags": [], "text": "I'm seeing this error with Tomcat 4.1.24 (LE jdk14), but under what seems a\nsomewhat different circumstance from what I'm seeing described here.\n\nI have a servlet that performs a rather lengthy action (from doPost())--it takes\nseveral minutes to complete. If I update the class while the doPost() is still\nin the midst of processing, I see my servlet's destroy method called, then see\nits init method called as it is reloaded. However the doPost method appears to\ncontinue to run, judging by the output. It completes its task normally and\nsuccessfully, except that this \"WebappClassLoader: Lifecycle error : CL stopped\"\nerror keeps occuring.\n\nI thought that destroy() was not supposed to be called until the service()\nmethod has exited, which definitely has not happened in my case.\n\nThe reason I ran into this is I was testing the ability to take this servlet out\nof service without risking interrupting current tasks..."}, {"count": 49, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 38853, "time": "2003-06-14T07:49:46Z", "bug_id": 3888, "creation_time": "2003-06-14T07:49:46Z", "is_private": false, "text": "Well, there's a timeout (basically, it will wait for 50ms 10 times, and then\ngive up and proceed with the stop; so in your case, I'd say it's not enough). I\nthink the number of retry attempts could be made to be configurable (hacking the\ncode is very simple - look in o.a.c.core.StandardWrapper.unload()). If you try\nto run code on the discarded CL after the webapp has been reloaded, you'll get\nthe log messages, it's normal."}, {"count": 50, "tags": [], "creator": "eric_schwarzenbach@classwell.com", "attachment_id": null, "is_private": false, "id": 38927, "time": "2003-06-16T15:21:20Z", "bug_id": 3888, "creation_time": "2003-06-16T15:21:20Z", "text": "I noticed the mention of a timeout in the serlvet docs. I take it this timeout \nisn't explicitly configurable (except by hacking) in Tomcat?\n\nThis behavior seems kind of unclean... If it's going to time out shouldn't the \nengine kill the thread(s) rather than letting it(them) continue to run and \nthrow errors? (Incidentally I realized my post() didn't totally run to \ncompletion...in the middle of one of the last steps it throws a \njava.lang.NoClassDefFoundError: java/lang/reflect/InvocationTargetException\nattempting to instantiate a object via pluggable factory-style method.)\n\nI could write my own synchronization between destroy() and service() but it \nseems like the kind of functionality that the framework should provide. \n"}, {"count": 51, "tags": [], "bug_id": 3888, "attachment_id": null, "id": 45208, "creation_time": "2003-10-07T14:32:04Z", "time": "2003-10-07T14:32:04Z", "creator": "npabis@astercity.net", "text": "In 4.1.27 the bug still bites.\nIf someone wants to replicate the bug, try using jcoverage.\nWhen the library was in WEB-INF/lib the bug occured.\nWhen I moved the jar to TOMCAT/commons/lib everything was ok.\n\nAnyway, thanks to Martin van Dijken and Remy Maucherat for insightful comments,\nthat helped me to find workaround.", "is_private": false}, {"count": 52, "tags": [], "text": "Another way to reporduce it is to use swarmcache.\nhttps://sourceforge.net/projects/swarmcache/\n\nOn stop of a context it can occure that Tomcat\nthrows this exception.\n\njava.lang.NoClassDefFoundError: org/javagroups/stack/NakReceiverWindow$Entry\nat org.javagroups.stack.NakReceiverWindow.add(NakReceiverWindow.java:199)\nat org.javagroups.protocols.pbcast.NAKACK.handleMessage(NAKACK.java:357)\nat org.javagroups.protocols.pbcast.NAKACK.up(NAKACK.java:223)\nat org.javagroups.stack.UpHandler.run(Protocol.java:50)", "is_private": false, "bug_id": 3888, "id": 45218, "time": "2003-10-07T16:37:41Z", "creator": "A.Schild@neatech.ch", "creation_time": "2003-10-07T16:37:41Z", "attachment_id": null}, {"count": 53, "tags": [], "text": "*** Bug 24847 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 3888, "id": 47959, "time": "2003-11-23T17:00:55Z", "creator": "medthomas@ntlworld.com", "creation_time": "2003-11-23T17:00:55Z", "attachment_id": null}, {"count": 54, "tags": [], "creator": "dmachak@tibco.com", "is_private": false, "id": 53051, "attachment_id": null, "bug_id": 3888, "creation_time": "2004-02-26T19:41:24Z", "time": "2004-02-26T19:41:24Z", "text": "We have been seeing this same problem with 4.1.29. A jar file was still locked\nafter doing an undeploy. As a work-around, we found that if this jar file were\nexpanded into the WEB-INF/classes directory, the the undeploy was successful. \n\nIt seems that this points to a problem with the ClassLoader closing the jar\nfile. Perhaps an exception during undeploy is causing the closing of the jar\nfile to be bypassed."}, {"count": 55, "tags": [], "creator": "hoju@visi.com", "attachment_id": null, "id": 53085, "time": "2004-02-27T05:37:26Z", "bug_id": 3888, "creation_time": "2004-02-27T05:37:26Z", "is_private": false, "text": "Hi Dan,\n\nIf you are seeing a jar that is locked, it means that some thread is still has a\nhandle to some resource in that jar (or the thread is created from a class in\nthe jar).  The fact that this isn't happening when you put the jar in\nWEB-INF/classes should be obvious.  The jar was never loaded from\nWEB-INF/classes.  Plain classes are loaded there, not jars.\n\nYou need to make sure what is still holding a handle to a resource in that jar\nand make sure it gets shut down at webapp shutdown.  Remy is correct in saying\nthat most of the issues here are due to user error, not a problem in Tomcat. \nThat is not to say that this is necessarily true in all cases, but certainly most.\n\nJake"}, {"count": 56, "tags": [], "creator": "dmachak@tibco.com", "attachment_id": null, "id": 53151, "time": "2004-02-27T17:31:15Z", "bug_id": 3888, "creation_time": "2004-02-27T17:31:15Z", "is_private": false, "text": "Hi Jacob,\nI think you misunderstood what I was saying. We expanded the jar file into\nWEB-INF/classes. That is, \"jar -xf my.jar\". We then removed the jar file from\nWEB-INF/lib. Therefore, any resources that were previously being loaded from the\njar file would now be getting loaded from the classes directory. However,\nwhereas the jar file would be locked after undeploy in the previous case, we now\nsee undeploy happen successfully when the jar file is expanded. If it were any\nof our threads holding a resource open, it still would have it open in the\nclasses directory. The only difference we should have seen were that individual\nfiles would have been locked.\n\nWe arrived at this point after having eliminated several cases where our threads\nwere holding resources open. We've now verified this by getting a thread dump on\nthreads still around after the undeploy. Also, we have no problem in running the\nexact same scenario in WebLogic.\n\nWe're still investigating the problem and should have more info from a profiling\ntool pretty soon."}, {"count": 57, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 72811, "time": "2005-03-24T23:57:10Z", "bug_id": 3888, "creation_time": "2005-03-24T23:57:10Z", "text": "I have reviewed the multiple issues raised in this bug report and believe they\nare all either resolved or invalid. Siince the original report is actually a\nduplicate, that is how this bug will be resolved.\n\nA summary follows:\n\nIssue 1\nWebappClassLoader: Lifecycle error : CL stopped\nAs Remy commented (#13) \"...Basically, if you can find some component in\nCatalina holding a pointer to either one of the old object/classes/classloader,\nthen the bug is valid. Otherwise, it's not.\"\nAlthough there was no evidence of this in this bug report see Bug 20758 for a\ndetailed examination of where this was happening.\n\nIssue 2\nlog4j jar locking. As per Ceki's comment (#28), this has been fixed in log4j.\n\nOther issues\nA variety of libraries and applciations using shared static objects.\n\n*** This bug has been marked as a duplicate of 20758 ***"}]
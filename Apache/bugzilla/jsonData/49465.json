[{"count": 0, "tags": [], "creator": "Clement_Pellerin@ibi.com", "attachment_id": 25614, "id": 137746, "creation_time": "2010-06-18T14:17:40Z", "time": "2010-06-18T14:17:40Z", "bug_id": 49465, "text": "Created attachment 25614\nsource code patch and new junit\n\nThe constructor of XMLCipher is private which makes it impossible to subclass XMLCipher. Furthermore, much of the work to construct the XMLCipher instance is located in the getInstance() or getProviderInstance() methods. That would force a subclass to duplicate that code once again.\n\nThe goal of this effort is to experiment with per KeyInfo KeyResolvers to resolve the Key Encryption Key dynamically based on the EncryptedKey/KeyInfo carried in the message. The junit in attachment shows how to achieve it through subclassing. This might not be the most obvious use of the API, but at least it proves that it can be done. It has the advantage that none of the API changes are controversial.\n\nThe solution involves:\n- Making the XMLCipher constructor protected. Callers must still call one of the getInstance() or getProviderInstance() methods.\n- pushing all the construction code in getInstance() and getProviderInstance() into the real constructor.\n- relaxing the requirement that provider must not be null. Passing null for the provider in getProviderInstance() gives the same result as using the equivalent getInstance() method.\n- Adding createKeyInfo() and createEncryptedKeyResolver() factory methods in XMLCipher.\n- Changing XMLCipher to use the new factory methods when creating internal KeyInfo or EncryptedKeyResolver objects.\n- Adding the method createXMLCipher() to EncryptedKeyResolver.\n- Also added some test to @return keywords that were empty in XMLCipher", "is_private": false}, {"count": 1, "tags": [], "text": "I only skimmed the patch but it seems to me a much simpler approach would be to add a new overloaded XMLCipher.init method that takes a KeyResolver instead of a Key. Did you consider that solution?", "attachment_id": null, "id": 140333, "creator": "sean.mullan@oracle.com", "time": "2010-09-30T14:58:04Z", "bug_id": 49465, "creation_time": "2010-09-30T14:58:04Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 49465, "text": "I agree subclassing does not fit the design of the static factory methods XMLCipher.getInstance(). There is bound to be a better solution if we can consider more visible changes to the API.\n\nYour suggestion is promising but not sufficient in itself.\n\nThe essence of the problem occurs in EncryptedKeyResolver.engineLookupAndResolveSecretKey():\n\t        XMLCipher cipher = XMLCipher.getInstance();\n\t        cipher.init(XMLCipher.UNWRAP_MODE, _kek);\nThis XMLCipher object is created internally.\nThe user does not control its options.\nWe need to attach the KeyResolvers from the outer XMLCipher into this one.\nUsually this is done by registering the KeyResolvers globally.\nThe whole point of my effort is to allow different KeyResolvers on\ndifferent XMLCipher objects so this is not applicable.\n\nAn elegant solution would be to pass a context around but\nwe are not designing JSR-106 from scratch here.\n\nA possible solution would be to pass the outer XMLCipher in the\nEncryptedKeyResolver when it is created in XMLCipher.decryptToByteArray()\nThis is the code that needs modifications:\n\t\t    ki.registerInternalKeyResolver(\n\t\t        new EncryptedKeyResolver(\n                            encryptedData.getEncryptionMethod().getAlgorithm(), \n                            _kek));\nThen we could pass the outer XMLCipher KeyResolvers to the inner XMLCipher\ninside EncryptedKeyResolver.\n\nThis is a simplified view since XMLCipher does not hold\nthe KeyResolvers directly. Instead, the KeyResolvers are added\nto KeyInfo with the call KeyInfo.registerInternalKeyResolver().\n\nWhatever the final solution becomes, I still think the clean up of\nthe XMLCipher constructor and getInstance() methods stands on its own\n(if we keep the constructor private).\n\nLet's continue the discussion to discover what could be the\nbest solution with reasonable changes to the public API.", "id": 140338, "time": "2010-09-30T16:54:39Z", "creator": "Clement_Pellerin@ibi.com", "creation_time": "2010-09-30T16:54:39Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 49465, "text": "\nThanks for the patch....I committed some of the changes you suggested for XMLCipher, namely cleaning up the constructor and getInstance methods, as well as various spelling corrections for the Javadoc. \n\nAuthor: coheigea\nDate: Tue Oct 12 16:24:15 2010\nNew Revision: 1021829\n\nURL: http://svn.apache.org/viewvc?rev=1021829&view=rev\nLog:\nCommitted some of the improvements to XMLCipher as suggested in BUG 49465 -  impossible to subclass XMLCipher.\n\nModified:\n   santuario/trunk/CHANGELOG.txt\n   santuario/trunk/src/org/apache/xml/security/encryption/XMLCipher.java\n\n\nThanks,\n\nColm.", "id": 140702, "time": "2010-10-12T12:30:29Z", "creator": "coheigea@apache.org", "creation_time": "2010-10-12T12:30:29Z", "is_private": false, "attachment_id": null}]
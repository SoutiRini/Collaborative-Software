[{"count": 0, "tags": [], "bug_id": 8275, "attachment_id": null, "text": "The snapshot is from 2002-04-15.  While reading JAR files, Catalina's\nContextConfig.start() method calls the tldScan() method, which is attempting to\ncreate files within a temporary directory at $CATALINA_BASE/temp/ (a directory\nwhich AFAIK does not exist by default).  In a secure configuration, the unix\nuser which Catalina runs at has no permission to write directly to\n$CATALINA_BASE directory, and thus cannot create the temporary directory.  This\nhoses the web application bound to that context.\n\nIMHO, Catalina shouldn't reference tag library descriptors -- I was under the\nimpression that those were JSP-specific, in which case wouldn't they be the\ndomain of Jasper?  Perhaps the Servlet spec. makes this impossible...\n\nI'm also a bit curious as to where the directory name \"temp\" is coming from.  I\ntook my last snapshot on 2002-01-24, and didn't see any reference to it while\nlooking through the delta.\n\nHere's the associated stack trace from Catalina's log file:\n\n2002-04-18 12:47:14 ContextConfig[/scarab] Exception processing JAR at resource\npath /WEB-INF/lib/commons-fileupload-0.1-dev.jar\njavax.servlet.ServletException: Exception processing JAR at resource path\n/WEB-INF/lib/commons-fileupload-0.1-dev.jar\n        at\norg.apache.catalina.startup.ContextConfig.tldScanJar(ContextConfig.java,\nCompiled Code)\n        at org.apache.catalina.startup.ContextConfig.tldScan(ContextConfig.java,\nCompiled Code)\n        at org.apache.catalina.startup.ContextConfig.start(ContextConfig.java,\nCompiled Code)\n        at\norg.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java,\nCompiled Code)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardContext.start(StandardContext.java,\nCompiled Code)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardHost.start(StandardHost.java,\nCompiled Code)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardService.start(StandardService.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java,\nCompiled Code)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java, Compiled Code)\n        at org.apache.catalina.startup.Catalina.execute(Catalina.java, Compiled\nCode)\n        at org.apache.catalina.startup.Catalina.process(Catalina.java, Compiled\nCode)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java, Compiled Code)\n----- Root Cause -----\njava.io.IOException: No such file or directory\n        at java.io.UnixFileSystem.createFileExclusively(Native Method)\n        at java.io.File.checkAndCreate(File.java, Compiled Code)\n        at java.io.File.createTempFile(File.java, Compiled Code)\n        at java.io.File.createTempFile(File.java, Compiled Code)\n        at sun.net.www.protocol.jar.URLJarFile$1.run(URLJarFile.java, Compiled Code)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at sun.net.www.protocol.jar.URLJarFile.retrieve(URLJarFile.java,\nCompiled Code)\n        at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java,\nCompiled Code)\n        at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java,\nCompiled Code)\n        at\nsun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java,\nCompiled Code)\n        at\nsun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java,\nCompiled Code)\n        at\norg.apache.catalina.startup.ContextConfig.tldScanJar(ContextConfig.java,\nCompiled Code)\n        at org.apache.catalina.startup.ContextConfig.tldScan(ContextConfig.java,\nCompiled Code)\n        at org.apache.catalina.startup.ContextConfig.start(ContextConfig.java,\nCompiled Code)\n        at\norg.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java,\nCompiled Code)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardContext.start(StandardContext.java,\nCompiled Code)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardHost.start(StandardHost.java,\nCompiled Code)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardService.start(StandardService.java,\nCompiled Code)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java,\nCompiled Code)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java, Compiled Code)\n        at org.apache.catalina.startup.Catalina.execute(Catalina.java, Compiled\nCode)\n        at org.apache.catalina.startup.Catalina.process(Catalina.java, Compiled\nCode)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java, Compiled Code)", "id": 14008, "time": "2002-04-18T20:51:21Z", "creator": "dlr@finemaltcoding.com", "creation_time": "2002-04-18T20:51:21Z", "is_private": false}, {"count": 1, "tags": [], "creator": "remm@apache.org", "text": "a) The temp directory does exist by default.\nb) The TLDs can declare listeners, so Catalina has to parse them (of course, I \nwish this particular feature in the spec wouldn't exist).", "id": 14012, "time": "2002-04-18T20:59:29Z", "bug_id": 8275, "creation_time": "2002-04-18T20:59:29Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "dlr@finemaltcoding.com", "text": "Hi Remy, enjoyed your WebDav talk at JavaOne.\n\na) If CATALINA_BASE != CATALINA_HOME, there is no guarantee that a temp\ndirectory is pre-existing.  Since you mention that it _should_ exist, is it\nrequired by the servlet spec, or created by Catalina at run-time?  It is not a\nreasonable expectation that the user which the Catalina process runs as has\npermission to create sub-directories in the root of the CATALINA_BASE directory.\n If this is just the Way Things Are, please suggest a place for me to document\nthis requirement to avoid future confusion.\n\nb) Bummer, que sera.\n", "id": 14015, "time": "2002-04-18T21:58:02Z", "bug_id": 8275, "creation_time": "2002-04-18T21:58:02Z", "is_private": false, "attachment_id": null}, {"count": 3, "text": "It doesn't look like a bad feature to me overall. I agree it should be \ndocumented somewhere (don't remember where, though).", "bug_id": 8275, "attachment_id": null, "id": 14016, "time": "2002-04-18T22:10:31Z", "creator": "remm@apache.org", "creation_time": "2002-04-18T22:10:31Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "remm@apache.org", "text": "Actually, the need for the 'temp' directory is already mentioned in \nthe 'RUNNING.txt' document. So unless there's some stale information somewhere \nelse, it looks good to me.\n(worksforme since the documentation looks ok)", "id": 14031, "time": "2002-04-18T23:38:22Z", "bug_id": 8275, "creation_time": "2002-04-18T23:38:22Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "dlr@finemaltcoding.com", "attachment_id": null, "id": 14033, "time": "2002-04-18T23:53:56Z", "bug_id": 8275, "creation_time": "2002-04-18T23:53:56Z", "is_private": false, "text": "I see, so that's where it was hiding.  ;-)\n\nI can't guess why this issue wasn't encountered with our snapshot from\n2002/01/24, but Glenn's CVS log for revision 1.4 of RUNNING.txt (2001/12/26)\nprovides a reasonable explanation:\n\nJVM Temporary Directory (java.io.tmpdir property) security patch\n----------------------------------------------------------------\n\nThe java.io.File.createTempFile() methods use the property\njava.io.tmpdir for the location of the directory where the JVM\nplaces temporary files.  If this property doesn't exist,\n/tmp or /var/tmp gets used on unix systems or c:\\\\temp on WIN32 systems.\n\nThis default directory is the same directory that all applications\ncan use for temporary files.  Sharing the same system temporary\ndirectory between Tomcat and other applications could be a security\nrisk if sensitive data is stored there by other applications.\n\nIf you run Tomcat with the SecurityManager enabled you would have to\ngrant Tomcat a FilePermission with read, write, and delete for the\ntemporary directory.\n\nThis series of patches enables the use of a temporary directory\nlocated at $CATALINA_BASE/temp so that Tomcat's use of the temporary\ndirectory is isolated from the rest of the system.\n"}]
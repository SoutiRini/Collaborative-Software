[{"count": 0, "tags": [], "creator": "lisa.huber@fmr.com", "attachment_id": null, "id": 64349, "time": "2004-09-28T20:39:18Z", "bug_id": 31458, "creation_time": "2004-09-28T20:39:18Z", "is_private": false, "text": "Regarding Bugzilla Bug 24107  \n   \"DailyRollingFileAppender sharing target File in multiple EARS\" \n\nWe are encountering this in a WebSphere clustered environment so that while we \nDO have 4 separate JVMs, they are cloned under WAS, which uses the multiple \nJVMs for load balancing.  This bug would indicate that if you are running in a \nload balanced environment with multiple servers, then the \nDailyRollingFileAppender will not work.\n\nThanks for your consideration in re-opening bug 24107 or looking into this \nvariation of that bug."}, {"count": 1, "tags": [], "creator": "sean.mullins@gmail.com", "attachment_id": null, "id": 69236, "time": "2005-01-05T12:51:06Z", "bug_id": 31458, "creation_time": "2005-01-05T12:51:06Z", "is_private": false, "text": "I'm also seing this in 1.2.8 with iPlanet app server.\nIt would seem that most production environments would run with an app server\nconfigured to use 2 or more VMs. If the DailyRollingFileAppender can't be used\nin such an environment, I think something else needs to be provided that can."}, {"count": 2, "text": "I ran into this problem as well. We are running WebSphere 4 on an AIX server \nand we have logging in both the Web Container and EJB container writing to the \nsame log files and one JVM would roll over and the other would continue to log \nto the old file because the file handle was still open to the original file \neven though it had been renamed. \n\nWe got around the problem by overriding the DailyRollingFileAppender with our \nown that includes a check in the rollover method to check if the \nscheduledFilename file already exists.  If it does then close the file and \nreset the file \n\nthis.closeFile();\nthis.setFile(fileName, true, false, this.bufferSize);\nscheduledFilename = datedFilename;\nreturn;\t  \n\nWe've been running like this for 1.5 years and no issues.\n", "bug_id": 31458, "attachment_id": null, "id": 72003, "time": "2005-03-08T20:41:30Z", "creator": "maqito@msn.com", "creation_time": "2005-03-08T20:41:30Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 31458, "attachment_id": null, "text": "We are experiencing this issue too. I've looked at the sources of\nDailyRollingFileAppender.java and I think this can easily be fixed by changing\nthe rollOver method. Instead of the following code:\n\n  File target  = new File(scheduledFilename);\n  if (target.exists()) {\n    target.delete();\n  }\n\n  File file = new File(fileName);\n  boolean result = file.renameTo(target);\n  if(result) {\n    LogLog.debug(fileName +\" -> \"+ scheduledFilename);\n  } else {\n    LogLog.error(\"Failed to rename [\"+fileName+\"] to [\"+scheduledFilename+\"].\");\n  }\n\nThe following code:\n\n  File target  = new File(scheduledFilename);\n  if (!target.exists()) {\n    File file = new File(fileName);\n    boolean result = file.renameTo(target);\n    if(result) {\n      LogLog.debug(fileName +\" -> \"+ scheduledFilename);\n    } else {\n      LogLog.error(\"Failed to rename [\"+fileName+\"] to [\"+scheduledFilename+\"].\");\n    }\n  }\n\nMaybe behind an option so that the user can choose for the (old) delete\nbehaviour and the new behaviour.\n\nWill this be incorporated in a future version of Log4J?", "id": 73439, "time": "2005-04-08T11:40:48Z", "creator": "peter@ibuildings.nl", "creation_time": "2005-04-08T11:40:48Z", "is_private": false}, {"count": 4, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "id": 73446, "time": "2005-04-08T14:48:59Z", "bug_id": 31458, "creation_time": "2005-04-08T14:48:59Z", "is_private": false, "text": "\nIf I understand correctly, you have several JVMs writing to the same log file. Is \nthat correct?\n\nMoreover, when that same log file is rolled over by different tJVMs, they clobber \nthe new log file. Is that also correct?\n\n"}, {"count": 5, "tags": [], "creator": "peter@ibuildings.nl", "attachment_id": null, "id": 73447, "time": "2005-04-08T15:15:04Z", "bug_id": 31458, "creation_time": "2005-04-08T15:15:04Z", "is_private": false, "text": "Yes, several JVMs use the same log file (and unfortunately I don't see a way to\nconfigure each individual JVM to use another log file because I can't configure\nthe instances individually, I can only say use x instances).\n\nAbout the clobbering, the JVMs will happily use the same log file in parallel.\nBut only when the rolling happens the file gets corrupted because they all try\nto rename the file at once or delete the new file because it already exists. The\nfile that gets corrupt is the log file of the previous day."}, {"count": 6, "tags": [], "text": "(In reply to comment #3)\n> We are experiencing this issue too. I've looked at the sources of\n> DailyRollingFileAppender.java and I think this can easily be fixed by changing\n> the rollOver method. Instead of the following code:\n> \n>   File target  = new File(scheduledFilename);\n>   if (target.exists()) {\n>     target.delete();\n>   }\n> \n>   File file = new File(fileName);\n>   boolean result = file.renameTo(target);\n>   if(result) {\n>     LogLog.debug(fileName +\" -> \"+ scheduledFilename);\n>   } else {\n>     LogLog.error(\"Failed to rename [\"+fileName+\"] to [\"+scheduledFilename+\"].\");\n>   }\n> \n> The following code:\n> \n>   File target  = new File(scheduledFilename);\n>   if (!target.exists()) {\n>     File file = new File(fileName);\n>     boolean result = file.renameTo(target);\n>     if(result) {\n>       LogLog.debug(fileName +\" -> \"+ scheduledFilename);\n>     } else {\n>       LogLog.error(\"Failed to rename [\"+fileName+\"] to [\"+scheduledFilename+\"].\");\n>     }\n>   }\n> \n> Maybe behind an option so that the user can choose for the (old) delete\n> behaviour and the new behaviour.\n> \n> Will this be incorporated in a future version of Log4J?\n\nBut still there is a problem since when the new file descriptor is opened, the\nappend varaible is set to \"false\". Image 3 JVMs writing in the same log file,\nonly the last JVM opening the file will \"win\" the file and kick out any thing\nthat the other 2 JVMs will write. The new file need to be opened with append = true!\n\nIn the new version of RollingFileAppender in CVS (DailyRollingFileAppender is\ndeprecated) the bollean append is set in the constructor by default to \"true\"\nand the method getAppend() is used to retrieve the value whenever needed.\n\nFor the moment if you have still the problem as me, here is my class to fix it:\n\npackage org.apache.log4j;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport org.apache.log4j.helpers.LogLog;\n\npublic class DailyRollingFileAppenderFix extends DailyRollingFileAppender {\n\n    /**\n     * Need this method since it computes the private variable scheduledFilename.\n     *\n     * @see DailyRollingFileAppender\n     */\n    public void activateOptions() {\n        super.activateOptions();\n        String datePattern = getDatePattern();\n        if (datePattern != null && fileName != null) {\n            now.setTime(System.currentTimeMillis());\n            sdf = new SimpleDateFormat(datePattern);\n            int type = computeCheckPeriod();\n            printPeriodicity(type);\n            rc.setType(type);\n            File file = new File(fileName);\n            scheduledFilename = fileName + sdf.format(new\nDate(file.lastModified()));\n\n        } else {\n            LogLog.error(\"Either File or DatePattern options are not set for\nappender [\" + name + \"].\");\n        }\n    }\n\n    void rollOver() throws IOException {\n        String datePattern = getDatePattern();\n        if (datePattern == null) {\n            errorHandler.error(\"Missing DatePattern option in rollOver().\");\n            return;\n        }\n        String datedFilename = fileName + sdf.format(now);\n        if (scheduledFilename.equals(datedFilename)) {\n            return;\n        }\n        this.closeFile();\n        File target = new File(scheduledFilename);\n        if (!target.exists()) {\n            File file = new File(fileName);\n            boolean result = file.renameTo(target);\n            if (result) {\n                LogLog.debug(fileName + \" -> \" + scheduledFilename);\n            } else {\n                LogLog.error(\"Failed to rename [\" + fileName + \"] to [\" +\nscheduledFilename + \"].\");\n            }\n        }\n        try {\n        // FIX - Set append to true due to multiple JVM opening multiple\n        // file descriptor with the same file name.\n        // Currently not in the version 1.2.13 (Rev. 353962 of\nDailyRollingFileAppender)\n            setFile(fileName, true, this.bufferedIO, this.bufferSize);\n        } catch (IOException _ex) {\n            super.errorHandler.error(\"setFile(\" + fileName + \", false) call\nfailed.\");\n        }\n        scheduledFilename = datedFilename;\n    }\n\n    private String scheduledFilename;\n}\n\n", "is_private": false, "bug_id": 31458, "id": 83419, "time": "2005-12-08T15:36:25Z", "creator": "ma.brothier@gmail.com", "creation_time": "2005-12-08T15:36:25Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 107059, "time": "2007-08-22T14:35:12Z", "bug_id": 31458, "creation_time": "2007-08-22T14:35:12Z", "is_private": false, "text": "Marking as invalid since it appears that multiple VMs are writing to the same file which can not be \nsupported."}]
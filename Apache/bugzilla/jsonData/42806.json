[{"count": 0, "tags": [], "bug_id": 42806, "is_private": false, "text": "Following some discussions [1] on the list regarding the apr_atomic\nimplementation, this patchset tries to address some of the problems\nby reorganizing the various backends.\n\nAlmost all points raised in [1] are addressed, in special, the unsafe\nmixing of mutex and asm (direct) backed atomics. For example, the\napr_atomic_casptr function which was only mutex backed and is used\nby the worker and event mpms in httpd.\n\nThe patchs still needs more wide testing, but any comments or feedback\nwould be greatly appreciated.\n\n1. http://mail-archives.apache.org/mod_mbox/apr-\ndev/200610.mbox/%3C20061020153547.GA21975@p15097255.pureserver.info%3E", "id": 105044, "time": "2007-07-03T18:11:44Z", "creator": "davi@apache.org", "creation_time": "2007-07-03T18:11:44Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "davi@apache.org", "attachment_id": 20437, "id": 105045, "time": "2007-07-03T18:17:58Z", "bug_id": 42806, "creation_time": "2007-07-03T18:17:58Z", "is_private": false, "text": "Created attachment 20437\ngeneric mutex backed implementation of apr_atomic operations\n\nThe generic implementation is used when no specialized implementation\nfits the defined criterias, or when the user forces the choice."}, {"count": 2, "text": "Created attachment 20438\ncompiler provided atomic builtins\n\nGiven a modern compiler, this patch provides fast atomic operations on various\nplatforms (alpha, ia32, ia64, powerpc, etc).\n\nTested on:\n\n2x Pentium D, Ubuntu 7.04, gcc 4.1.2\n16x Itanium II, RHEL 5, gcc 4.1.1", "creator": "davi@apache.org", "is_private": false, "id": 105046, "time": "2007-07-03T18:23:06Z", "bug_id": 42806, "creation_time": "2007-07-03T18:23:06Z", "tags": [], "attachment_id": 20438}, {"count": 3, "tags": [], "creator": "davi@apache.org", "attachment_id": 20439, "id": 105047, "time": "2007-07-03T18:24:40Z", "bug_id": 42806, "creation_time": "2007-07-03T18:24:40Z", "is_private": false, "text": "Created attachment 20439\nia32 atomics\n\nia32 (x86 and x86_64) atomic operations, plus apr_atomic_casptr"}, {"count": 4, "tags": [], "bug_id": 42806, "attachment_id": 20440, "text": "Created attachment 20440\nsolaris atomic operations\n\nTested on a Solaris 10 zone, i386.", "id": 105048, "time": "2007-07-03T18:25:25Z", "creator": "davi@apache.org", "creation_time": "2007-07-03T18:25:25Z", "is_private": false}, {"count": 5, "text": "Created attachment 20441\npowerpc atomic operations\n\nTested on a PowerPC G4 (macbook).", "bug_id": 42806, "attachment_id": 20441, "id": 105049, "time": "2007-07-03T18:26:02Z", "creator": "davi@apache.org", "creation_time": "2007-07-03T18:26:02Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "davi@apache.org", "is_private": false, "text": "Just a quick note that I'll address the issues with volatile, memory barriers\nand such, once the initial patches have been committed.", "id": 105050, "time": "2007-07-03T20:10:11Z", "bug_id": 42806, "creation_time": "2007-07-03T20:10:11Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "davi@apache.org", "text": "Patches committed to trunk, revisions: 553289, 553290, 553291, 553292 and 553293.\n\nhttp://svn.apache.org/viewvc?view=rev&revision=553289\nhttp://svn.apache.org/viewvc?view=rev&revision=553290\nhttp://svn.apache.org/viewvc?view=rev&revision=553291\nhttp://svn.apache.org/viewvc?view=rev&revision=553292\nhttp://svn.apache.org/viewvc?view=rev&revision=553293", "count": 7, "id": 105070, "time": "2007-07-04T11:29:00Z", "bug_id": 42806, "creation_time": "2007-07-04T11:29:00Z", "is_private": false}, {"count": 8, "tags": [], "creator": "davi@apache.org", "attachment_id": 20456, "id": 105104, "time": "2007-07-05T12:13:13Z", "bug_id": 42806, "creation_time": "2007-07-05T12:13:13Z", "is_private": false, "text": "Created attachment 20456\nremove volatile from apr_atomic_* prototypes\n\nThis patch get rid of the \"volatile\" qualifier in the apr_atomic functions\nprototypes. As APR claims to provide proper memory barriers, the \"volatile\"\nqualifier is unnecessary, since the use of memory barriers already implies\nordering constraints on memory operations.\n\nAlso a bogus const qualifier for the third argument of apr_atomic_casptr is\nremoved."}, {"count": 9, "tags": [], "bug_id": 42806, "is_private": false, "id": 105105, "attachment_id": 20457, "creator": "davi@apache.org", "creation_time": "2007-07-05T12:14:38Z", "time": "2007-07-05T12:14:38Z", "text": "Created attachment 20457\nmutex implementation volatile qualifier removal\n\nRemove the volatile qualifiers for the mutex backed implementation of\napr_atomic. The mutex primitives act as memory barriers, synchronizing\nmemory access with respect to other threads. The removal of the volatile\nqualifiers also speeds up, a little bit, non-threaded builds of APR."}, {"count": 10, "tags": [], "bug_id": 42806, "attachment_id": 20458, "id": 105106, "time": "2007-07-05T12:15:29Z", "creator": "davi@apache.org", "creation_time": "2007-07-05T12:15:29Z", "is_private": false, "text": "Created attachment 20458\nbuiltins implementation volatile qualifier removal\n\nRemove the volatile qualifiers for the atomic builtins backed implementation\nof apr_atomic. These builtins, except __sync_lock_test_and_set, are considered\na full barrier. Also use a full memory barrier on the read32/set32 functions\nto force strong memory ordering."}, {"count": 11, "tags": [], "bug_id": 42806, "attachment_id": 20459, "is_private": false, "id": 105107, "time": "2007-07-05T12:16:19Z", "creator": "davi@apache.org", "creation_time": "2007-07-05T12:16:19Z", "text": "Created attachment 20459\nia32 implementation volatile qualifier removal\n\nRemove volatile qualifiers and issue memory barriers where appropriate to\nprevent reordering."}, {"count": 12, "tags": [], "creator": "davi@apache.org", "attachment_id": 20460, "id": 105108, "time": "2007-07-05T12:17:00Z", "bug_id": 42806, "creation_time": "2007-07-05T12:17:00Z", "is_private": false, "text": "Created attachment 20460\nppc implementation volatile qualifier removal\n\nRemove volatile qualifiers and issue memory barriers where appropriate to\nprevent reordering."}, {"count": 13, "tags": [], "creator": "davi@apache.org", "attachment_id": 20461, "is_private": false, "id": 105109, "time": "2007-07-05T12:20:08Z", "bug_id": 42806, "creation_time": "2007-07-05T12:20:08Z", "text": "Created attachment 20461\nsolaris implementation volatile qualifier removal\n\nRemove volatile qualifiers and issue memory barriers where appropriate to\nprevent reordering. The solaris atomic man page says:\n\n\"The membar_consumer() function arranges for all loads issued before this point\n\nin the code to be completed before any subsequent loads.\"\n\nand\n\n\"The membar_producer() function arranges for all stores issued before this\npoint\nin the code to reach global visibility before any stores that follow.\"\n\nTODO: the other function may still need explicit memory barriers."}, {"count": 14, "tags": [], "bug_id": 42806, "is_private": false, "id": 105110, "attachment_id": 20462, "creator": "davi@apache.org", "creation_time": "2007-07-05T12:20:49Z", "time": "2007-07-05T12:20:49Z", "text": "Created attachment 20462\nwin32 implementation volatile qualifier removal\n\nRemove volatile qualifiers. The WIN32 Interlocked* functions by default\nprovide full memory barrier semantics."}, {"count": 15, "tags": [], "bug_id": 42806, "is_private": false, "text": "Created attachment 20463\nnetware implementation volatile qualifier removal\n\nRemove volatile qualifiers, and regarding to memory barriers, the Novell\ndeveloper kit documentation \"NDK: Libraries for C (LibC), Volume 2; Section I,\nGeneral C Services; Atomic Functions\", says:\n\n\"An atomic function is guaranteed to complete its memory operation before any\nother processor or bus agent can access the same memory.\"\n\nSo I presume that the atomic functions issues memory barriers.", "id": 105111, "time": "2007-07-05T12:22:32Z", "creator": "davi@apache.org", "creation_time": "2007-07-05T12:22:32Z", "attachment_id": 20463}, {"count": 16, "tags": [], "bug_id": 42806, "is_private": false, "id": 105112, "creation_time": "2007-07-05T12:23:24Z", "time": "2007-07-05T12:23:24Z", "creator": "davi@apache.org", "text": "Created attachment 20464\nos390 implementation volatile qualifier removal", "attachment_id": 20464}, {"count": 17, "tags": [], "bug_id": 42806, "attachment_id": 20465, "text": "Created attachment 20465\nremove volatile usage on the atomic test code", "id": 105113, "time": "2007-07-05T12:24:08Z", "creator": "davi@apache.org", "creation_time": "2007-07-05T12:24:08Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 42806, "attachment_id": 20466, "text": "Created attachment 20466\napr_atomic_xchgptr implementation\n\nAs requested by Curt Arnold, for the log4cxx project, implement\napr_atomic_xchgptr\nthat atomically exchanges a pair of pointer values.", "id": 105114, "time": "2007-07-05T12:26:23Z", "creator": "davi@apache.org", "creation_time": "2007-07-05T12:26:23Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 42806, "is_private": false, "text": "Created attachment 20468\napr_atomic_xchgptr implementation (+ppc)\n\nI forgot to refresh the patch. Only the OS/390 stub is intentionally missing.", "id": 105119, "time": "2007-07-05T14:22:09Z", "creator": "davi@apache.org", "creation_time": "2007-07-05T14:22:09Z", "attachment_id": 20468}, {"count": 20, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 105129, "time": "2007-07-06T00:17:51Z", "bug_id": 42806, "creation_time": "2007-07-06T00:17:51Z", "is_private": false, "text": "This stuff should really be on dev@apr now.\n\nIs removing the volatile qualifier a backwards-compat break? (see\nhttp://apr.apache.org/versioning.html)"}, {"count": 21, "tags": [], "creator": "davi@apache.org", "attachment_id": null, "id": 105145, "time": "2007-07-06T07:58:04Z", "bug_id": 42806, "creation_time": "2007-07-06T07:58:04Z", "is_private": false, "text": "(In reply to comment #20)\n> This stuff should really be on dev@apr now.\n\nJust finishing a few things up before posting (z/Architecture).\n\n> Is removing the volatile qualifier a backwards-compat break? (see\n> http://apr.apache.org/versioning.html)\n\nNo. It's a ABI break, the patches are intended only for trunk (1.3.0+).\n"}, {"count": 22, "text": "As pointed to me by Paul Querna, an ABI break between 1.2.x and 1.3.x\nis not permitted and since I can't guarantee that it won't break the ABI\nfor th various supported compilers, I'll only move forward the barrier\nrelated patches. Volatile removal is left for later (2.+).", "bug_id": 42806, "attachment_id": null, "id": 105146, "time": "2007-07-06T09:00:59Z", "creator": "davi@apache.org", "creation_time": "2007-07-06T09:00:59Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 62009, "text": "I am currently investigating a problem (Apache/2.4.29 with mod_http2 v1.10.12) related to worker MPM that leads to excessive termination and starting of processes, sometimes also up to the termination of all httpd processes, thus to the outage of the entire proxy. An outage occurs in connection with the log entry \"scoreboard is full, not at MaxRequestWorkers\".\n\nIt looks as if the behavior is caused by mod_http2.\n\n# Reproduction\n\nThe behavior can be aggravated if few processes are started, I use following settings\n\nServerLimit 4\nStartServers 1\nMaxRequestWorkers 12\nMinSpareThreads 3\nMaxSpareThreads 6\nThreadsPerChild 3\n\nAfter a restart, a large number of simultaneous requests (I generate 100 simultaneous requests) must be made. This is done so often (mostly 2-4 times with a pause in the middle of each bulk) until httpd has 4 child processes. Then you stop so that httpd becomes idle. Let's name this state \"idle-4-proc\". \n\nThe misbehavior is now manifested by the fact that excess processes are not killed. Actually, there should only be a maximum of 2 processes (MaxSpareThreads 6).\n\nIf in this state another bulk of requests is sent off, httpd begins to stop and start processes like crazy. Now, sending some other bulks sometimes (not always) lead to the already mentioned \"scoreboard is full\" error.\n\n# Analysis\n\nI could find out following\n\n## httpd without mod_http2\n\nIf httpd is built without mod_http2, the main process recognizes in idle-4-proc state that too many processes are available and signals by means of AP_MPM_PODX_GRACEFUL that a process must be terminated. One of the child processes reads AP_MPM_PODX_GRACEFUL from the POD, sends the signal SIGHUP, which is intercepted by the listener thread. The listener thread then sends SIGTERM to its PID to terminate all worker threads. In this way, the surplus processes are terminated cleanly.\n\n## httpd with mod_http2\n\nHowever, if httpd is build with mod_http2 the listener thread does not receive SIGHUP and therefore cannot send SIGTERM to the worker threads. As a result, the child process is not terminated, httpd continues to send AP_MPM_PODX_GRACEFUL and all child processes end up in an inconsistent state (marked as terminated, but not really terminated). When requests now arrive, all listener threads (of semi-terminated child processes) recognize that they have to terminate and so they finally send SIGTERM to its PID. This causes the misbehavior of httpd, which now starts too many new child processes.\n\nThe problem that listener threads does not receive SIGHUP seems to be that the signal is caught by an h2-worker. This can be confirmed by attaching to an child-process before idle-4-proc state and then sending off the bulks: one can see that it is an h2-worker thread (instead of the listener thread) that \"handles\" SIGHUP in worker.c:dummy_signal_handler().\n\n# Workaround\n\nThe problem can be workaround-ed by blocking SIGHUP for each h2-worker, for example by adding\n\n    sigset_t sig_mask;\n\n    sigemptyset(&sig_mask);\n    sigaddset(&sig_mask, SIGHUP);\n#if defined(SIGPROCMASK_SETS_THREAD_MASK)\n    sigprocmask(SIG_BLOCK, &sig_mask, NULL);\n#else\n    pthread_sigmask(SIG_BLOCK, &sig_mask, NULL);\n#endif\n\n\nin h2_workers.c:slot_run(). Doing so, I can observe same behavior as like with httpd without mod_http2.\n\nI'd appreciate it if someone could confirm the misbehavior and my analysis.\n\nThanks, Armin", "id": 203318, "time": "2018-01-17T13:57:54Z", "creator": "a.abfalterer@gmail.com", "creation_time": "2018-01-17T13:57:54Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 62009, "is_private": false, "count": 1, "id": 203322, "time": "2018-01-17T16:59:56Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2018-01-17T16:59:56Z", "text": "Thanks Armin for the detailed report.\n\nFor MPM worker and event, all signals should be blocked by default for all threads, then som specific threads unblock dedicated signals for their own wakeup (like SIGHUP for the listener thread).\n\nThe general blocking is done by apr_setup_signal_thread() from child_main(), that is at the very beginning of the child process when it's still single threaded. This should be inherited by further threads, unless we should really call sigprocmask() here instead of pthread_sigmask(), irrespective of SIGPROCMASK_SETS_THREAD_MASK, or (more exactly) especially if PTHREAD_SIGMASK_DOES_NOT_SET_PROC_MASK for a single threaded process.\nThat doesn't seem to have caused issues w/o mod_http2 so far, so probably not the good track.\n\nSo it looks like mod_http2 is special w.r.t. threads, but I don't hink the right fix is to play with the mask of each possible thread created there (or outside the MPM), that'd be a nightmare for maintenance. I'd rather we find out what's special on the mod_http2 side..."}, {"count": 2, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Created attachment 35683\nBlock signals before child_init() hooks\n\nEric found the why on dev@, mod_http2 creates threads in its child_init() hook, before the MPM blocks signals.\n\nArmin, does this patch work for you?", "id": 203324, "time": "2018-01-17T17:27:33Z", "bug_id": 62009, "creation_time": "2018-01-17T17:27:33Z", "is_private": false, "attachment_id": 35683}, {"count": 3, "tags": [], "creator": "a.abfalterer@gmail.com", "text": "Yann, by applying the patch surplus processes are terminated immediately, great!\n\nWhat I still can observe is that httpd under load forks too many children. With my stated configuration (\"ServerLimit 4\") and under load (concurrency of 256 clients) httpd sometimes forks up to 11 children. However, after the load the number of processes gets back to normal. Not sure if the \"scoreboard is full\" error cannot still occur.", "id": 203332, "time": "2018-01-18T12:44:22Z", "bug_id": 62009, "creation_time": "2018-01-18T12:44:22Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "a.abfalterer@gmail.com", "attachment_id": null, "text": "(In reply to Armin Abfalterer from comment #3)\n> What I still can observe is that httpd under load forks too many children.\n> With my stated configuration (\"ServerLimit 4\") and under load (concurrency\n> of 256 clients) httpd sometimes forks up to 11 children.\n\nSorry, there were 11 children with a different configuration. With the above mentioned it was a maximum of 5.", "id": 203338, "time": "2018-01-18T13:12:38Z", "bug_id": 62009, "creation_time": "2018-01-18T13:12:38Z", "is_private": false}, {"count": 5, "tags": [], "text": "(In reply to Armin Abfalterer from comment #4)\n> (In reply to Armin Abfalterer from comment #3)\n> > What I still can observe is that httpd under load forks too many children.\n> > With my stated configuration (\"ServerLimit 4\") and under load (concurrency\n> > of 256 clients) httpd sometimes forks up to 11 children.\n> \n> Sorry, there were 11 children with a different configuration. With the above\n> mentioned it was a maximum of 5.\n\nChildren that are in the process of exiting aren't counted against the limits.", "is_private": false, "bug_id": 62009, "id": 203339, "time": "2018-01-18T13:18:55Z", "creator": "covener@gmail.com", "creation_time": "2018-01-18T13:18:55Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "(In reply to Armin Abfalterer from comment #3)\n> Yann, by applying the patch surplus processes are terminated immediately,\n> great!\n\nNice, will commit it and propose a backport for 2.4.x.\n\n\n> Not sure if the\n> \"scoreboard is full\" error cannot still occur.\n\nI think it can, we made improvements in the event MPM lately for a better reuse of scoreboard entries on graceful stop/restart, but AFAIK not in the worker MPM.\nI think there is a workaround for this though, I'm mainly copying a comment I made in another PR regarding this:\n\nYou probably want to \"oversize\" ServerLimit w.r.t. MaxRequestWorkers and ThreadsPerChild, such that there is room in the scoreboard for gracefully restarting processes (without interfering with the new generation ones).\nThis relaxes the usual/strict \"MaxRequestWorkers = ServerLimit *\nThreadsPerChild\" formula to take reloads into account. For example, if\nMaxRequestWorkers should be 1000 (adapt to your needs), something like\nThreadLimit = ThreadsPerChild = 50 and ServerLimit = 50 (instead of 20) leaves room for 2.5 simultaneous reloads, or one/two reload and some\nMaxConnectionsPerChild/MaxSpareThreads kicking at the same time.\nYMMV...\n\n(In reply to Yann Ylavic from comment #1)\n> Thanks Armin for the detailed report.\n\nI think i didn't insist enough there, that's a really great report and analysis that nailed an issue which possibly bites httpd since a while now for some configurations, not only http2 (not negligible today) but also probably mod_watchdog or any (third-party) that also make use of threads in children processes.\nWe may have worked around this issue with some (heavier) MPM fixes/optimizations, mod_http2 changes, and/or configuration advides (MaxRequestsPerChild 0, large MaxSpareThreads...), but that didn't completely close the door.\nGood thing that it is now, thanks (again) a bunch Armin!", "is_private": false, "bug_id": 62009, "id": 203341, "time": "2018-01-18T13:58:31Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2018-01-18T13:58:31Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 62009, "text": "Committed to trunk in r1821504, and proposed for backport to 2.4.x.", "id": 203345, "time": "2018-01-18T15:04:10Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2018-01-18T15:04:10Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 62009, "attachment_id": null, "id": 203346, "time": "2018-01-18T16:09:28Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2018-01-18T16:09:28Z", "is_private": false, "text": "Backported to 2.4.x in r1821517, will be in upcoming 2.4.30."}, {"count": 9, "tags": [], "creator": "a.abfalterer@gmail.com", "text": "Yann, I say thank you very much, it was going incredibly fast! Thanks also for the \"oversizing ServerLimit\" hint.", "id": 203353, "time": "2018-01-19T08:00:59Z", "bug_id": 62009, "creation_time": "2018-01-19T08:00:59Z", "is_private": false, "attachment_id": null}]
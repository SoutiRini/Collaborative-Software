[{"text": "It appears that when mod_disk_cache reads server side includes to create its final cached web page, it sometimes corrupts the included file.\n\nI'm speculating that the issue may be that the included file is getting DEFLATEd and Apache is intermittently forgetting to ungzip it prior to putting it into the final, parent page (which is then cached).\n\nDetails: The parent web page is called \"index.shtml\" and the child file is getting included like this:\n<!--#include virtual=\"/dir/include/my_html_file.html\" -->\n\nEverything else on the page looks fine but where the my_html_file.html should be we see binary output in the source code like this:\n\u0003\u00ed\\\u00e9n\u00dbH\u0012\u00fe\u009d\u00dc|\u00e1]\u00e5\u00e2u?-\u000eS\u00ecA\u00bd\u00a1!\u0178\u00c4o\u00ff\u203aI\u00c5\u00c7s\u00d8\u00df\u001f'\u00b1\"\u2019\u00ff\u000e \u00bc\u00f1*dL\u0003X\u00faIp\u001aV.n\u00a7\u0152 \u00a9\u00e4\u0001\u00c9b\u00aeH&\u00d9\u02c6\u00f0\u02dc\u0004I\n\nIf I restart Apache, the problem remains. But the problem goes away if I delete the cache on the web server. So the cache must have gotten corrupted. I can refresh the page many times after that and the page is fine. \n\nLoadModule deflate_module modules/mod_deflate.so\nDeflateCompressionLevel 1\nDeflateMemLevel 9\nDeflateWindowSize 15\nSetEnvIfNoCase Request_URI \\\n\\.(?:gif|jpe?g|png|ico)$ no-gzip dont-vary\n#Header append Vary User-Agent env=!dont-vary\n\n\nLoadModule disk_cache_module modules/mod_disk_cache.so\nCacheRoot /var/httpd/proxy/\nCacheEnable disk /\nCacheDisable /i\nCacheMaxFileSize 500000\nCacheMinFileSize 1000\nCacheDirLevels 2\nCacheDirLength 2\nCacheIgnoreCacheControl Off\nCacheIgnoreNoLastMod On\nCacheIgnoreHeaders Set-Cookie\nCacheLastModifiedFactor 0.1\nCacheMaxExpire 172800\nCacheDefaultExpire 86400\n\nServer version: Apache/2.2.3\nServer built:   Nov 10 2009 09:06:10\nOS: RedHat EL 5 Linux 2.6.18-164.6.1.el5 #1 SMP Tue Oct 27 11:28:30 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux", "tags": [], "creator": "gmillikan@t1shopper.com", "attachment_id": null, "count": 0, "id": 137337, "time": "2010-06-03T17:35:33Z", "bug_id": 49385, "creation_time": "2010-06-03T17:35:33Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 25523\nShows the corrupted page", "attachment_id": 25523, "id": 137339, "creator": "gmillikan@t1shopper.com", "time": "2010-06-03T17:37:12Z", "bug_id": 49385, "creation_time": "2010-06-03T17:37:12Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 49385, "text": "Created attachment 25524\nShows the source code of the web page which is corrupted.", "id": 137340, "time": "2010-06-03T17:38:06Z", "creator": "gmillikan@t1shopper.com", "creation_time": "2010-06-03T17:38:06Z", "is_private": false, "attachment_id": 25524}, {"count": 3, "text": "I'm guessing mod_disk_cache has cached an independent gzipped version of the included file. Then when it goes to include that file into the final parent file, it's reading the gzipped version out of the cache instead of picking up the original, non-gzipped file. It doesn't realized it's gzipped and just throws it into the parent. Lastly it gzip's the whole thing. This would cause the included child file to get double gizpped. When the web browser gets the whole page it's only going to unzip once of course. Because the included file was gzipped twice, we still get binary output where the included file should have been.", "bug_id": 49385, "attachment_id": null, "id": 137364, "time": "2010-06-04T12:58:15Z", "creator": "gmillikan@t1shopper.com", "creation_time": "2010-06-04T12:58:15Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "creator": "gmillikan@t1shopper.com", "text": "Changing status to \"major\" because this bug results in a major loss of function under certain circumstances.", "id": 137415, "time": "2010-06-07T14:03:28Z", "bug_id": 49385, "creation_time": "2010-06-07T14:03:28Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 49385, "attachment_id": null, "id": 138195, "time": "2010-07-05T19:34:10Z", "creator": "gmillikan@t1shopper.com", "creation_time": "2010-07-05T19:34:10Z", "is_private": false, "text": "What can I do to help move this along?  Cash?  Beer?  It's been a month since this issues was discovered.."}, {"count": 6, "tags": [], "text": "It appears that maybe setting CacheIgnoreNoLastMod to Off helps reduce the frequency however how this might help remedy the situation is illogical.", "attachment_id": null, "id": 145757, "creator": "gmillikan@t1shopper.com", "time": "2011-04-13T14:58:09Z", "bug_id": 49385, "creation_time": "2011-04-13T14:58:09Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 49385, "attachment_id": null, "id": 145758, "time": "2011-04-13T15:04:47Z", "creator": "gmillikan@t1shopper.com", "creation_time": "2011-04-13T15:04:47Z", "is_private": false, "text": "FYI this bug might be related to:\n\nBug 41200\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=41200\n\nBug 41362\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=41362"}, {"count": 8, "attachment_id": null, "creator": "arthurg.work@gmail.com", "is_private": false, "id": 202892, "time": "2017-12-23T11:30:47Z", "bug_id": 49385, "creation_time": "2017-12-23T11:30:47Z", "tags": [], "text": "Wow, 7 years on and this bug still exists in Apache!\n\nThanks Geoff for posting your experience as it helped us in the end.\n\nTo replicate this bug in Apache 2.2.15 I did the following:\n1. Create two web files x.html and y.shtml which has x.html as a virtual include.\n2. Open up both files in a separate tab in a browser, x.html as it is and y.shtml with some random query string e.g. y.shtml?a=b\n3. rm -fr all the mod_cache artefacts and restart Apache.\n4. In the browser force refresh x.html (is there a bug with Apache with the very first request producing a blank page?)\n5. In the browser force fresh x.html again.\n6. In the browser switch to the other tab and force refresh y.shtml?a=b.\n7. Edit the URL and delete the query string then force refresh y.shtml and you should see a gzipped version of x.html appear as content in the web page.\n\nThis bug is unfortunate and really nasty to end users and web admins alike. Unfortunately I'm forced to use Apache 2.2.x and mod_cache was looking promising until I encountered this issue. With Apache 2.4.x you can use CACHE before DEFLATE.\n\nI also found httpdcacheclean to be broken leaving thousands of tmp files lying around in the root cache folder and it was not properly deleting stale cache artefacts. \n\nOther issues I've had with mod_cache is with wrapper scripts e.g. controller.php will always return the last cached artefact which could belong to someone else.\n\nAt first glance mod_cache appears to be a golden chalice but unless your web site is fairly basic then it can easily become quite a headache."}, {"count": 9, "tags": [], "text": "So today, 2.2.15 is not fixed with no work around.  Neither is 2.4.x but workaround is cache before deflate which is better than nothing but still not best because ideally we want to cache compressed content.\n\nSince bug hasn't been fixed after all these years I suggest best practice is stop using server side includes (SSI).  Apache documentation below should be updated to say it is deprecated.\n\nhttp://httpd.apache.org/docs/current/mod/mod_include.html\n\nPS. On a personal note, SSI was my first foray into service side scripting in 1999 when the web was younger, Apache was at version 1.2.5 and SSI was an amazingly effective way of getting headers and footers into webpages. I was at WebCom, one of the world's first web hosts and the dot com bubble was in full swing.  MySpace wasn't a thought yet.  Apache was (and continued to be!) a remarkable piece of software carrying the much of the Internet. The Apache Foundation, Brian Behlendorf and many others who did early work and continue for the good of everyone have my respect & deep gratitude. \n\nhttps://web.archive.org/web/19980204133618/http://www.webcom.com:80/\n\nhttps://web.archive.org/web/19980128114019/http://www.apache.org:80/", "is_private": false, "id": 202896, "creator": "gmillikan@t1shopper.com", "time": "2017-12-23T17:55:48Z", "bug_id": 49385, "creation_time": "2017-12-23T17:55:48Z", "attachment_id": null}, {"count": 10, "attachment_id": null, "creator": "covener@gmail.com", "text": "Seems like there are a number of potential workarounds a ways short of deprecating SSI.  For example, the paths used for the virtual includes could be skipped for compression and/or caching by simple config.\n\nbug wise:\n\nmy guess as to the connection to mod_cache: mod_deflate won't ever directly work on subrequests (the included file), but if the response for the included file ends up in the cache even w/ proper metadata, it will gladly be replayed.\n\nOne potential kludge would be to zap Accept-Encoding in the subrequest that\nretrieves the included files, so it would not find the gziped form in the cache.. Probably non-controversial if opt-in.", "id": 202897, "time": "2017-12-23T18:27:03Z", "bug_id": 49385, "creation_time": "2017-12-23T18:27:03Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 49385, "text": "Thx Eric.  Agreed, might be rash to deprecate.  Untested config to skip compression on SSI directories something like:\n\nSetEnvIf Request_URI ^/server/side/include/directory/ no-gzip=1\n\nor\n\nSetEnvIfNoCase Request_URI ^/server/side/include/directory/ no-gzip dont-vary", "id": 202901, "time": "2017-12-23T22:07:02Z", "creator": "gmillikan@t1shopper.com", "creation_time": "2017-12-23T22:07:02Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": null, "creator": "arthurg.work@gmail.com", "text": "My website is the product of 20 years of deoptimisation and is one of the top 10 in Australia without SEO influence. I believe the organisation I work for will probably still need Apache SSIs for a while to come (which are not that different in concept to includes used by other languages), so please don't depreciate them.\n\nI introduced mod_cache (actually mod_disk_cache over a 1Gb tmpfs) as a \"thin cache\" with a cache expiry age of 15 seconds over AWS EFS storage, and excluding this SSI issue (and a few other issues) it worked extremely well at smoothing out the large volumes of requests we get, which made our old girl of a website very responsive.\n\nIntroducing a config exception for SSI's is just not going to work for us.\n\nAlso, if you are going to tinker with Accept Encoding and the like just be wary that some CDNs only cache content based on a narrow set of criteria of which having a basic Vary: Accept-Encoding / Content-Encoding: gzip in the response is often one of them.", "id": 202902, "time": "2017-12-24T09:21:33Z", "bug_id": 49385, "creation_time": "2017-12-24T09:21:33Z", "tags": [], "is_private": false}]
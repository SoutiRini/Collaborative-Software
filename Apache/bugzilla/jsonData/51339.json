[{"count": 0, "tags": [], "creator": "ml@consol.ae", "text": "Created attachment 27130\nquick start\n\nHi.\nWe have a problem with different results from excel and POI calculation. Problem is connected with floating points and rounding.\n\nIm attaching a quick start which reproduce that problem. We are suming 12 rows, multiply it by 50% and then rounding. In excel sheet we have 275,62 in POI 275,61.\n\n(With sum we get some floating points like 0,499999995 etc.)\n\nWe have a lot of calculation and data precision is very important for us. So there is huge ddiference with 0,62 and 0.61.\nI saw that #46156 cover similar problem but i can reproduce it also for HSSF implementation (which uses NumberToTextConverter).\n\nAny clues how we can fast fix this without touching excel file ?", "id": 146953, "time": "2011-06-08T09:12:39Z", "bug_id": 51339, "creation_time": "2011-06-08T09:12:39Z", "is_private": false, "attachment_id": 27130}, {"count": 1, "tags": [], "bug_id": 51339, "attachment_id": null, "is_private": false, "id": 146954, "time": "2011-06-08T11:27:12Z", "creator": "apache@gagravarr.org", "creation_time": "2011-06-08T11:27:12Z", "text": "As discussed in bug #46156 both Excel and POI use floating points internally for everything. Excel tries to hide this from you, but it's still there\n\nIt's possible that excel and poi use slightly different precision floating point numbers\n\nI'd suggest you start by breaking your problem down, and checking all the intermediate results in both excel and poi. When do they start to diverge? In excel, make sure you set your cells to show as many digits as possible, so you can see what's really there (instead of what excel pretends!)"}, {"count": 2, "tags": [], "bug_id": 51339, "is_private": false, "id": 146955, "attachment_id": null, "creator": "ml@consol.ae", "creation_time": "2011-06-08T11:34:05Z", "time": "2011-06-08T11:34:05Z", "text": "Yeah i know that i can fix this by modifing an excel formulas but this is not the case. If excel is hiding it for me, why POI cant just do the same ?\nI already broke a problem down and provided a simple sumimg which shows this buggy effect."}, {"count": 3, "tags": [], "bug_id": 51339, "is_private": false, "id": 146956, "attachment_id": null, "creator": "apache@gagravarr.org", "creation_time": "2011-06-08T11:55:57Z", "time": "2011-06-08T11:55:57Z", "text": "Could you please use this problem file to identify where the error comes in? A difference of 0.01 on only a few operations seems rather large\n\nYou'll likely want to get excel to store some of the intermediate parts of your formula so you can look at them, figure out what the values really are (not what excel displays!), and then compare that with what poi calculates. Where does this large error creep in?\n\nPOI will happily format a numeric cell as text with the same rules as excel, see DataFormatter. This won't help if POI and Excel disagree on the underlying numeric value though!"}, {"count": 4, "tags": [], "bug_id": 51339, "is_private": false, "id": 146957, "attachment_id": null, "creator": "yegor@dinom.ru", "creation_time": "2011-06-08T12:02:34Z", "time": "2011-06-08T12:02:34Z", "text": "Firstly, you didn't provide enough information to research the problem. The attached file contains a Maven project which actually consists of the following code:\n\n      InputStream is = new FileInputStream(\"c:\\\\excelbugs\\\\bug.xlsm\");\n      XSSFWorkbook wb = new XSSFWorkbook(is);\n      FormulaEvaluator poiEvaluator = wb.getCreationHelper().createFormulaEvaluator();\n      CellValue cellValue = poiEvaluator.evaluate(wb.getSheet(\"Sheet1\").getRow(0).getCell(2));\n      System.out.println(\"Value is \" + cellValue.getNumberValue());\n\nIf you assert results from a file, please attach that file too.\n\nSecondly, it is not a bug in POI, rather a way it performs the floating-number math.\n\nPOI performs strict 'Double' arithmetics while Excel seems to use a mixed BigDecimal / Double. By 'mixed' I mean that for most formulas Excel uses 'double' math and for some formulas it *may* use BigDecimal, in particular, for financial functions. \n\nHow do you assert the results? In Excel you see 275,62 which is a formatted value. The evaluator returns 275,61 with some trailing flowing points. How do you compare these two values?  \n\nHint: To get a formatted value in Java you should call DataFormatter#formatCellValue(Cell cell). \n\nYegor\n\n(In reply to comment #2)\n> Yeah i know that i can fix this by modifing an excel formulas but this is not\n> the case. If excel is hiding it for me, why POI cant just do the same ?\n> I already broke a problem down and provided a simple sumimg which shows this\n> buggy effect."}, {"count": 5, "tags": [], "bug_id": 51339, "is_private": false, "id": 146969, "attachment_id": null, "creator": "ml@consol.ae", "creation_time": "2011-06-08T18:13:55Z", "time": "2011-06-08T18:13:55Z", "text": "Thanks for your comments.\n\nSo im doing an assertion in following way. I created a visual basic script which simply do the CSV dump. Values in csv are the same as in excel. Then i load this cvs in java and simply assert it with values from POI. I debug it and when poi read excel before calculation this values does not have any floating points). \nI can't use DataFormatter for wrong calculated value it wont do ,62 from ,61. \n\nI also found a problwm with round function. Specialy round half up. I saw that POI is using MathX.round method for rounding. Here is a code:\n\n    public static double round(double n, int p) {\n        double retval;\n\n        if (Double.isNaN(n) || Double.isInfinite(n)) {\n            retval = Double.NaN;\n        }\n        else {\n            if (p != 0) {\n                double temp = Math.pow(10, p);\n                retval = Math.round(n*temp)/temp;\n            }\n            else {\n                retval = Math.round(n);\n            }\n        }\n\n        return retval;\n    }\n\nUnfortunetly we have different results in excel and POI when we have 5 in the end. Take a look at following examples:\n\nround(2162.615, 2) -> 2162.61\nround(262.615, 2) -> 262.62\n\nIn first case round down in second round up. Excel always do a round up. To fix it we can change implementation of this function to:\n\nBigDecimal temp = new BigDecimal(String.valueOf(n)).setScale(p, RoundingMode.HALF_UP);\nretval = temp .doubleValue();"}, {"count": 6, "tags": [], "bug_id": 51339, "is_private": false, "id": 146973, "attachment_id": null, "creator": "apache@gagravarr.org", "creation_time": "2011-06-08T19:47:42Z", "time": "2011-06-08T19:47:42Z", "text": "You still seem to be talking about display values. Before we can discuss those, we need to worry about the underlying raw values. If they're wrong, it doesn't matter how we round things for user facing display, as rounding the wrong thing is unlikely to ever work!\n\nPlease start looking at the values Excel actually stores and computes with, rather than what it happens to choose to display to you. Do they match POI? If not, at what point in your calculation chain does it diverge?\n\nOnly once we have the correct floating point values is it time to discuss how they get rounded to user facing numbers."}, {"count": 7, "attachment_id": null, "bug_id": 51339, "text": "I think there's a misunderstanding - its not about displayed values, but about the rounding function implementation of POI.\n\nThe ROUND(...) function of Excel uses the rounding mode HALF_UP, also known as 'arithmetic rounding' (see http://support.microsoft.com/kb/196652/EN-US).\n\nThe issue is: The current POI implementation does not do arithmetic rounding (Michal pasted the code in a previous comment), im citing the critical part again: \n\n...\nif (p != 0) {\n                double temp = Math.pow(10, p);         // NOT CORRECT ARITHMETIC\n                retval = Math.round(n*temp)/temp;    // ROUNDING\n...\n\nThis must be replaced with the previously suggested code using BigDecimal, to get a correct 'arithmetic rounding' as Excel uses:\n\nretval = java.math.BigDecimal.valueOf(2162.615).setScale(2, java.math.RoundingMode.HALF_UP).doubleValue()\n\nCheers,\nMarcel", "id": 146984, "time": "2011-06-09T08:26:00Z", "creator": "marcel.may.de@gmail.com", "creation_time": "2011-06-09T08:26:00Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "creator": "marcel.may.de@gmail.com", "text": "Created attachment 27151\nPatch fixing rounding issue, including a test case (test case fails with current POI rounding)", "id": 147038, "time": "2011-06-12T07:41:18Z", "bug_id": 51339, "creation_time": "2011-06-12T07:41:18Z", "is_private": false, "attachment_id": 27151}, {"count": 9, "tags": [], "creator": "yegor@dinom.ru", "text": "Good catch! Applied in r1135079.\n\nRegards,\nYegor\n\n(In reply to comment #8)\n> Created attachment 27151 [details]\n> Patch fixing rounding issue, including a test case (test case fails with\n> current POI rounding)", "id": 147050, "time": "2011-06-13T10:37:36Z", "bug_id": 51339, "creation_time": "2011-06-13T10:37:36Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "yegor@dinom.ru", "text": "Michal,\n\nPlease test your code against the latest build from trunk. Nightly builds can be downloaded from here: http://encore.torchbox.com/poi-cvs-build/\n\nYegor", "id": 147051, "time": "2011-06-13T10:40:57Z", "bug_id": 51339, "creation_time": "2011-06-13T10:40:57Z", "is_private": false, "attachment_id": null}]
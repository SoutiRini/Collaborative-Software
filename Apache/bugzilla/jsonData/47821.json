[{"count": 0, "attachment_id": null, "bug_id": 47821, "is_private": false, "id": 130304, "time": "2009-09-11T04:25:53Z", "creator": "johan_corveleyn@hotmail.com", "creation_time": "2009-09-11T04:25:53Z", "tags": [], "text": "From \"man touch\" on Solaris 10:\n\n    A user with write access to a file, but who is not the owner\n    of the file or a super-user, can change the modification and\n    access times of that file only to the current time. Attempts\n    to set a specific time with touch will result in an error.\n\nI.e., if you don't own a file, following works in Solaris:\n    $ touch thefile   # sets current time -> ok\nBut the following doesn't:\n    $ touch -t 200909111155 thefile   # sets a given time -> not ok\n\nSo, I'd expect ant's touch task, without datetime argument, to also work in this case. However it doesn't. Also, it doesn't signal an error about the failure to set the modification time.\n\nLooking into the source code, I found that ultimately, the touch task (without datetime argument) calls thefile.setLastModified(System.currentTimeMillis()). This is probably equivalent to calling touch with a given datetime argument (namely the current time), which doesn't work."}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "text": "As you've found yourself, Ant is using the Java API and not the native Unix touch command.  Inside the Java API there is no alternative to File.setLoastModified(long).\n\nHonestly I have no idea how that method is implemented inside the Java class library.  It may be smart enough to recognize the current timestamp and then invoke a different system call than it uses when asked for a different timestamp, but I doubt it.\n\nAnyway, if the Java class lib isn't doing the \"correct\" thing for you here, there isn't anything we can do from the Ant side.\n\nI'd recommend you use the exec task and explicitly invoke the touch command for your case.", "id": 130361, "time": "2009-09-14T03:05:45Z", "bug_id": 47821, "creation_time": "2009-09-14T03:05:45Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 47821, "is_private": false, "id": 130366, "time": "2009-09-14T04:43:18Z", "creator": "johan_corveleyn@hotmail.com", "creation_time": "2009-09-14T04:43:18Z", "tags": [], "text": "I understand this is difficult to do, and cannot be done without using platform-specific Runtime.exec code. It's a pity that the Java api doesn't offer you a way to do this. \n\nBut isn't there a way you could do the following, in the touch task, when no datetime argument is given?\n* Try setLastModified(System.currentTimeMillis())\n* If that fails (i.e. returns false), and the platform is unix, try a Runtime.exec of touch?\n\nAt the very least, touch should raise an error when it fails to set the timestamp. File.setLastModified returns a boolean to indicate whether or not it succeeded. This return value is currently ignored. Can you use that return value to raise an error if needed? \n\nMaybe this could also be documented in the manual for the touch task?\n\nSome background: in our build environment, this issue has caused serious problems after we switched from Linux to Solaris, and it was hard to find out what exactly went wrong. We used the copy task to deploy a new build to a JavaWebStart server. By default, the copy task only copies newer files, if they already exist on the target location. Because the touch failed, sometimes old files (which needed to be redeployed) were not copied. It took us quite some time to figure out why it failed, and to replace all touch tasks with <exec ... />."}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "starting with svn revision 957442 Ant logs a warning message.\n\nI'll add a few words to the manual page.", "id": 137866, "time": "2010-06-24T03:41:20Z", "bug_id": 47821, "creation_time": "2010-06-24T03:41:20Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 47821, "is_private": false, "id": 137867, "time": "2010-06-24T03:54:38Z", "creator": "bodewig@apache.org", "creation_time": "2010-06-24T03:54:38Z", "tags": [], "text": "I've documented the limitations with svn revision 957444\n\nI've opted for a warning rather than an exception since I was too afraid of\nbreaking existing builds - in particular since we've hidden the\nsetLastModified invocation under several layers of void methods and I really\ndon't feel good about hunting down all callers to ensure they know how to\nhandle exceptions thrown from there."}]
[{"count": 0, "tags": [], "creator": "joekislos@gmail.com", "attachment_id": null, "text": "If a servlet has finished it's init(ServletConfig), and is now ready to handle\nrequests, if you tell the tomcat manager to reload the context containing that\nservlet (EG: w3m http://localhost:8080/manager/reload?path=/ServletRestartTest),\nand you access that servlet via GET or POST (EG: w3m\nhttp://localhost:8080/ServletRestartTest/ServletRestartTest) while the destroy()\nmethod on the servlet is still executing, the GET or POST request will fail with\na 404 error after the destroy() method has been completed.  This is always\nreproducible with my attached test case.  I believe this may be the root cause\nof the issue described in #42518 which is described as an \"Intermittent 404\". \nWith this test case, it is always reproducible, and not intermittent.", "id": 109661, "time": "2007-10-23T09:43:12Z", "bug_id": 43683, "creation_time": "2007-10-23T09:43:12Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 43683, "text": "Attached is a context file and a test servlet.  This servlet has alot of sleeps,\nand prints a bunch of debug which will make it clear what is going on\nwhen the servlet is being reloaded.  This problem is reproducible even without\nany sleep statements in the servlet.\n\nTo setup the test do this:\nextract the apache-tomcat 6.0.14 binary distro\ncd conf\ncd Catalina\nmkdir localhost\ncd localhost\ncp ../../../webapps/host-manager/manager.xml .  (This sets up the manager\nservlet for you)\nDrop the ServletRestartTest.xml into this directory\ncd ../..\nedit the tomcat-users.xml and paste in: (this lets you access the manager\nservlet with username tomcat password tomcat)\n<role rolename=\"manager\"/>\n<user username=\"tomcat\" password=\"tomcat\" roles=\"manager\"/>\ncd ../webapps\nextract the war file\ncd ../bin\n./catalina.sh run (this runs tomcat printing the stdio to the console)\n\n\nTo reproduce with this test case:\n1. Visit this URL: http://localhost:8080/ServletRestartTest/ServletRestartTest\n   You should get:\nServletRestartTest - Servlet is in the RUNNING state\n2. Visit this URL: http://localhost:8080/manager/reload?path=/ServletRestartTest\n3. Then immediately reload the original url\n(http://localhost:8080/ServletRestartTest/ServletRestartTest)\n4. You will then receive the 404 error approximately 5 seconds later:\n\nHTTP Status 404 - Servlet ServletRestartTest is not available\n\ntype Status report\n\nmessage Servlet ServletRestartTest is not available\n\ndescription The requested resource (Servlet ServletRestartTest is not available)\nis not available.\nApache Tomcat/6.0.14\n\n\n\nOptionally you may use the apachebench program to see that you will get many\n404s, depending on how many requests come in:\nReplace step 3 with: ab -c 10 -n 10\nhttp://localhost:8080/ServletRestartTest/ServletRestartTest\nYou will see that all 10 requests fail with non-200 responses:\n\nThis is ApacheBench, Version 2.0.40-dev <$Revision: 1.146 $> apache-2.0\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nCopyright 2006 The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient).....done\n\n\nServer Software:        Apache-Coyote/1.1\nServer Hostname:        localhost\nServer Port:            8080\n\nDocument Path:          /ServletRestartTest/ServletRestartTest\nDocument Length:        1081 bytes\n\nConcurrency Level:      10\nTime taken for tests:   5.49371 seconds\nComplete requests:      10\nFailed requests:        0\nWrite errors:           0\nNon-2xx responses:      10\nTotal transferred:      12850 bytes\nHTML transferred:       10810 bytes\nRequests per second:    1.98 [#/sec] (mean)\nTime per request:       5049.371 [ms] (mean)\nTime per request:       504.937 [ms] (mean, across all concurrent requests)\nTransfer rate:          2.38 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       1\nProcessing:  5026 5043   6.4   5045    5048\nWaiting:     5026 5038   8.0   5038    5048\nTotal:       5027 5043   6.1   5045    5048\n\nPercentage of the requests served within a certain time (ms)\n  50%   5045\n  66%   5045\n  75%   5046\n  80%   5048\n  90%   5048\n  95%   5048\n  98%   5048\n  99%   5048\n 100%   5048 (longest request)\n\n", "id": 109662, "time": "2007-10-23T09:44:03Z", "creator": "joekislos@gmail.com", "creation_time": "2007-10-23T09:44:03Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 43683, "attachment_id": 21025, "id": 109663, "time": "2007-10-23T09:45:10Z", "creator": "joekislos@gmail.com", "creation_time": "2007-10-23T09:45:10Z", "is_private": false, "text": "Created attachment 21025\nThe ServletRestartTest file you need to extract"}, {"count": 3, "tags": [], "bug_id": 43683, "text": "This is how I envision the reload function working:\n\n1) The servlet is happily handling GET/POST requests\n2) reload is requested from the manager servlet\n3) All new requests should be put into a queue, and wait to be serviced\n4) If there are any 'currently active requests', tomcat should wait up to\nStandardContext.unloadDelay seconds waiting for these requests to finish\n5) Any requests that finish should be sent to the browser and finished up\n6) When unloadDelay has been exceeded, or all currently active requests are\ncompleted, destroy() should be called on the servlet\n7) Wait until destroy() has finished\n8) Clean up the context, and switch the classloader to the new classloader\n9) If there are any requests in the queue, start the servlet, call\ninit(ServletConfig) on the servlet\n10) wait for init(ServletConfig) to complete\n11) All new requests should nolonger be put into queue, and should be serviced\nby the servlet\n12) All requests which are in queue, should now be released and processed\nagainst the new servlet\n\nLooking at the code in StandardContext, I can see this is probably what it\nsupposed to happen (it tries to pause incoming requests)... it just doesn't\nquite work.  What we see is that if a request comes in while the servlet is\nbeing destroyed, it will get a 404 from the servlet when the destroy() method\ncompletes (EG: not right away!).  I looked at the code very reasonably\nthoroughly in tomcat 5.5 (more thoroughly than I am looking at it right now) and\nI seem to remember discovering that it was the start() context method that was\nactually destroying the waiting request.  But I can't vouch for that, it was\nprobably a year ago :)  \n\nIt is worth noting that if you send in a SECOND request while the servlet is\nbeing destroyed, that request *IS* handled properly... However... you can't send\nthat second request in TOO quickly after the first.  If they all come in at the\nsame time (see the apache bench testcase), they will *all* fail.  However even\nif you're doing it reasonably quickly from firefox, the second request will come\nthrough correctly.  I should also note that we had a patch for tomcat 4.1 which\nmade the reload() function work the way described above (it was a rather minor\nchange), however the patch is useless against tomcat 5 and greater, since the\nstart/stop code has been rewritten.  \n", "id": 109664, "time": "2007-10-23T09:48:04Z", "creator": "joekislos@gmail.com", "creation_time": "2007-10-23T09:48:04Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "joekislos@gmail.com", "attachment_id": 21026, "id": 109665, "time": "2007-10-23T09:49:45Z", "bug_id": 43683, "creation_time": "2007-10-23T09:49:45Z", "is_private": false, "text": "Created attachment 21026\nThe Context file for the ServletRestartTest"}, {"count": 5, "tags": [], "bug_id": 43683, "text": "Thanks for the test case. The problem was that the wrapper originally allocated to the request is stopped as part of the reload.\n\nI have committed a fix to trunk and proposed it for 6.0.x.", "id": 115692, "time": "2008-04-17T15:05:32Z", "creator": "markt@apache.org", "creation_time": "2008-04-17T15:05:32Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "This has been fixed for 6.0.x and will be in 6.0.17 onwards.", "attachment_id": null, "id": 116104, "creator": "markt@apache.org", "time": "2008-05-01T10:27:40Z", "bug_id": 43683, "creation_time": "2008-05-01T10:27:40Z", "is_private": false}, {"count": 7, "text": "Sorry for the delay testing the fix... It's been a busy couple of weeks.\n\nSo I checked out the code from svn trunk today (05-22-08) and tested it.  With the test case I provided, everything was good... However when I tested it with a more thorough test case (EG: a real web application :) ), i ran into some crashes implying I was using an the OLD classloader.  \n\nIt seems like the Thread that is calling the init() function has the *wrong* classloader attached to it (EG: the old servlet's class loader, instead of the new one).  I've narrowed down the issue (this... took some time :) ) and have a new test case for you.\n\nJust replace the ServletRestartTest.war file with this new one (and re-extract it).  There are now two classes, the ServletRestartTest servlet itself, and another class (it happens to be blank) that I will try to load using the Classloader.\n\nDo the same test as before... run:\nab -c 10 -n 100 http://localhost:8080/ServletRestartTest/ServletRestartTest\n\nthen query the reload by going to this url at the same time:\nhttp://localhost:8080/manager/reload?path=/ServletRestartTest\n\nYou'll see this:\n[...]\nservicing completed\nservicing completed\ndestroy starting\ndestroy completed\ninit starting\nMay 22, 2008 7:02:13 PM org.apache.catalina.loader.WebappClassLoader loadClass\nINFO: Illegal access: this web application instance has been stopped already.  Could not load OtherClass.  The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact.\njava.lang.IllegalStateException\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1273)\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233)\n        at ServletRestartTest.init(ServletRestartTest.java:24)\n        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1161)\n        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:806)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:183)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\n        at java.lang.Thread.run(Thread.java:595)\ninit completed\nstarting servicing\n[...]\n\nLet me know if I can be of any further assistance\n", "creator": "joekislos@gmail.com", "attachment_id": null, "id": 116911, "time": "2008-05-22T16:12:38Z", "bug_id": 43683, "creation_time": "2008-05-22T16:12:38Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 43683, "attachment_id": 21990, "id": 116912, "time": "2008-05-22T16:14:32Z", "creator": "joekislos@gmail.com", "creation_time": "2008-05-22T16:14:32Z", "is_private": false, "text": "Created attachment 21990\nTestcase 2 - ServletRestartTest.war"}, {"count": 9, "tags": [], "bug_id": 43683, "text": "Thanks for your efforts on the test case. It made things so much easier to investigate. I have committed a fix to trunk that addresses this and proposed it for 6.0.x\nhttp://svn.apache.org/viewvc?rev=661074&view=rev\n\nIf you are able to test my fix that would be very helpful.", "id": 117092, "time": "2008-05-28T13:49:54Z", "creator": "markt@apache.org", "creation_time": "2008-05-28T13:49:54Z", "is_private": false, "attachment_id": null}, {"count": 10, "attachment_id": null, "bug_id": 43683, "is_private": false, "id": 117420, "time": "2008-06-05T19:46:01Z", "creator": "joekislos@gmail.com", "creation_time": "2008-06-05T19:46:01Z", "tags": [], "text": "Well thanks for the compliment on the test cases... These issues are very important to us, so I'm *extremely* grateful you're spending time looking into them.  But I'm sorry to report that my test case for this next one isn't as good :)\n\nSo first, your fix with the classloader issues seems to have fixed up that problem.  \n\nHowever, if I use the 2nd testcase, and do:\nab -c 10 -n 60 http://localhost:8080/ServletRestartTest2/ServletRestartTest\n\nthen reload the context:\nhttp://localhost:8080/ServletRestartTest2/ServletRestartTest\n\nI am still getting some non 200 requests:\n\nComplete requests:      60\nFailed requests:        11\n   (Connect: 0, Length: 11, Exceptions: 0)\nWrite errors:           0\nNon-2xx responses:      11\n\nI swear I didn't this before... So maybe I'm crazy... But maybe I was distracted last time by trying to track down the classloader testcase.  If I try to do the tests from my browser... they *usually* work just fine.  But sometimes, I'll get the 404 in my browser too.  I would just say it's a race condition as to when I reload the context, but can't quite put my finger on it.  It seems like once it gets one 404... every time I try it after that (until I restart tomcat) it'll get the 404 on reload.  *sigh*  Sorry I can't be more helpful.  Can you tell me if you are still seeing non-200s with the apache bench test?  It seems like maybe you fixed one path where you can get a 404, but maybe there's another.  It looks like requests that come in right after the destroy finishes, but before the init starts that are getting the 404s now.\n\nSo I did find a *second* issue, which is also intermittent, and may have been introduced by your first fix (although I don't know).  I've spent the past two days (well, a couple hours yesterday and a few hours today) trying to get a narrow testcase for you.  I've got one, and I'll attach it as ServletRestartTest3.  In your browser, you need to open Three tabs\n1:http://localhost:8080/manager/reload?path=/ServletRestartTest3\n2:http://localhost:8080/ServletRestartTest3/ServletRestartTest\n3:http://localhost:8080/ServletRestartTest3/ServletRestartTest\n\nYou need to start tomcat, then reload tab 2, then 1, then 3\n\nThis is what happens (sometimes!)\n\nthe servlet will init()\nthen the servlet will destroy()\nbut while the destroy is running, it will service the request for tab 2 on the same servlet\nthe destroy() will finish\nthe servlet will init()\nthe servlet will service tab 3.\n\nUnfortunately, what it's doing is serving a request (tab #2) *while* it's in the middle of destroying the context.  Bad bad bad :(  In the testcase I have rigged up it will cause a nullpointer exception in tab #2 when that happens:\n\njava.lang.NullPointerException\n\tServletRestartTest.doGet(ServletRestartTest.java:43)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:617)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n\nYou'll see this on your tomcat console:\n\ninit starting\n[GC [DefNew: 960K->64K(960K), 0.0029550 secs] 4176K->3426K(5056K), 0.0029980 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] \nJun 5, 2008 10:13:07 PM org.apache.catalina.core.StandardContext reload\nINFO: Reloading this Context has started\ninit completed\ndestroy starting\nstarting servicing\ndestroy completed\n[GC [DefNew: 960K->64K(960K), 0.0034250 secs] 4322K->3539K(5056K), 0.0034690 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC [DefNew: 960K->64K(960K), 0.0019920 secs] 4435K->3623K(5056K), 0.0020690 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] \ninit starting\ninit completed\nstarting servicing\nservicing completed\n\nIf you can't get it to happen first try, reload tab #1, which will shutdown the context... Then do tab #2, #1, #3.  It may take you a few times to get it to happen.  It's intermittent :(  You'll see that Testcase #3 has a very tight loop at the init().  I tried a sleep(5000), and it was *significantly* more difficult to get the problem to happen.  With the 5 second tight loop, it's much easier (although still not consistent).\n\nLet me know if there's anything I can do to help\n"}, {"count": 11, "tags": [], "bug_id": 43683, "text": "Created attachment 22084\nTestcase 3 - ServletRestartTest.war", "id": 117421, "time": "2008-06-05T19:47:16Z", "creator": "joekislos@gmail.com", "creation_time": "2008-06-05T19:47:16Z", "is_private": false, "attachment_id": 22084}, {"count": 12, "tags": [], "bug_id": 43683, "attachment_id": null, "id": 117478, "time": "2008-06-08T04:51:26Z", "creator": "markt@apache.org", "creation_time": "2008-06-08T04:51:26Z", "is_private": false, "text": "The classloader fix has been applied to 6.0.x and will be in 6.0.17. I'll take a look at the remaining issues."}, {"count": 13, "attachment_id": null, "creator": "markt@apache.org", "text": "I do have some progress to report.\n\nThe issues you are seeing with test case 2 are due to the context.reload() calling context.stop() followed by context.start()\n\ncontext.start() unregisters and re-registers the context with JMX. Whilst the context is unregistered it does not appear in the mapper so the request is mapped to the ROOT webapp and a 404 results. I am currently looking for the least ugly hack around this issue.\n\nAt first glance test case 3 is a separate issue which I will look at once I have test case 2 working properly.", "id": 117586, "time": "2008-06-11T15:08:34Z", "bug_id": 43683, "creation_time": "2008-06-11T15:08:34Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 43683, "attachment_id": null, "id": 117678, "time": "2008-06-13T13:44:28Z", "creator": "markt@apache.org", "creation_time": "2008-06-13T13:44:28Z", "is_private": false, "text": "I have committed another patch to trunk and proposed it for 6.0.x that fixes another source of 404s on reload. The patch is:\n\nhttp://svn.apache.org/viewvc?rev=667644&view=rev\n\nWith this patch I can't get any 404s with test case 2. On to test case 3..."}, {"count": 15, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 117682, "time": "2008-06-13T14:03:11Z", "bug_id": 43683, "creation_time": "2008-06-13T14:03:11Z", "is_private": false, "text": "I can't reproduce the problem you had with case 3.\n\nHave you set the unloadDelay on the context? I have set mine to 20000 (20 seconds) for this bug to make sure that the servlet is given a chance to destroy() cleanly."}, {"count": 16, "tags": [], "creator": "joekislos@gmail.com", "attachment_id": null, "text": "The Reloading looks like it works well now.  Thanks!\n\nAs for case #3... Yes I can still get that to happen.  I thought maybe it was easier for me to reproduce because my laptop had dual core.  I booted nosmp and I was still able to get it to happen (infact, I think it may have been easier).\n\nYes, there is a setting for the 20 second timeout... but it's not hitting that.  It's pretty much immediately blazing into servicing the request even though the destroy is in progress.  The Destroy starting you see in my previous message and the starting servicing come basically at the same time.  I think the key is to get the request on window 3 in before window 2 is finished causing the servlet to start.\n\nIt doesn't happen every time... And it may be easier to recreate on a slower machine...  it certainly appears easier to recreate when I replaced the init() sleep(5000) with a CPU bound loop\n\nLet me know if you can get it to happen... and if not I'll see what I can do for a better testcase.\n\nThanks again\n ", "id": 117834, "time": "2008-06-19T14:15:02Z", "bug_id": 43683, "creation_time": "2008-06-19T14:15:02Z", "is_private": false}, {"count": 17, "attachment_id": null, "creator": "markt@apache.org", "text": "Sorry, I still can't repeat the issue with test case 3. I have tried on a couple of different machines.", "id": 117879, "time": "2008-06-21T10:51:47Z", "bug_id": 43683, "creation_time": "2008-06-21T10:51:47Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "bug_id": 43683, "text": "Well that's frustrating :)  I've done some work on it today to try to narrow down when it happens.\n\nI've written a java program that will make the required calls to the URLs in parallel to cause the issue.  I wrapped it in a loop, and it happened the first time I ran it!  Then I ran it again, and let it run for 2 hours without it happening once.\n\nThen I restarted tomcat, and it happened first time!\n\nSo it seems to happen a lot *more* when tomcat has first started... but still not every time.  I'm using Sun's 1.5.0_15 jvm if that somehow makes a difference.\n\nSo I am attaching a unix shell script that will start+stop tomcat between each test run, and my java program that does the URL calling.  You may need to tweak a couple variables to make this work on your machine:\n\nTestServiceDuringDestroy.sh: \n  TOMCAT_BIN_DIR - Set this to where the catalina.sh script is\n\nTestServiceDuringDestroy.java:\n  TESTCASE3_URL - Put the url to testcase3 (the one that spins cpu during init)\n  RESTART_TOMCAT_URL - Put the url to restart that servlet\n  RESTART_TOMCAT_BASIC_AUTH - Put in the basic authentication credentials for the manager servlet in format username:password\n\nWith those changes... I think that will get it going for you.  The theory here is:\nwhile (true) {\n start tomcat\n Request the servlet\n Restart the servlet\n Request the servlet\n stop tomcat\n}\n\nWhen the testcase fails you'll see something like this:\n\nUsing CATALINA_BASE:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_HOME:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_TMPDIR: /var/tmp/tomcat/apache-tomcat-6.0.16/temp\nUsing JRE_HOME:       /usr/local/java\nSleeping for tomcat to start\nTestcase Call 1: Requesting URL\nRestart call: Requesting URL\nTestcase Call 2: Requesting URL\nTestcase Call 1: IOException in URL request\njava.io.IOException: Server returned HTTP response code: 500 for URL: http://localhost:8080/ServletRestartTest3/ServletRestartTest\n        at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1174)\n        at WebRequestThread.run(WebRequestThread.java:28)\nUsing CATALINA_BASE:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_HOME:   /var/tmp/tomcat/apache-tomcat-6.0.16\nUsing CATALINA_TMPDIR: /var/tmp/tomcat/apache-tomcat-6.0.16/temp\nUsing JRE_HOME:       /usr/local/java\nSleeping for tomcat to stop\n\n\n---\nIn the cases where it tomcat succeeds, I see this on the server side:\nINFO: Waiting for 1 instance(s) to be deallocated\n\nI do not see that when my testcase fails.\n\nFWIW, I am using a apache-tomcat-6.0.16 binary installation, and I dropped in lib/* and bin/*.jar from a newly compiled trunk svn checkout from yesterday (06-24-08)\n\nGood luck!\n", "id": 117973, "time": "2008-06-25T08:32:23Z", "creator": "joekislos@gmail.com", "creation_time": "2008-06-25T08:32:23Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 43683, "attachment_id": 22176, "id": 117974, "time": "2008-06-25T08:32:58Z", "creator": "joekislos@gmail.com", "creation_time": "2008-06-25T08:32:58Z", "is_private": false, "text": "Created attachment 22176\nTest Harness #4"}, {"count": 20, "tags": [], "bug_id": 43683, "attachment_id": null, "id": 118026, "time": "2008-06-26T12:57:53Z", "creator": "markt@apache.org", "creation_time": "2008-06-26T12:57:53Z", "is_private": false, "text": "The patch for test case 2 has been applied to 6.0.x and will be in 6.0.17 onwards. I'm still looking at test case 3."}, {"count": 21, "tags": [], "bug_id": 43683, "attachment_id": null, "id": 118048, "time": "2008-06-26T15:48:59Z", "creator": "markt@apache.org", "creation_time": "2008-06-26T15:48:59Z", "is_private": false, "text": "The good news is I can now repeat test case 3 and have found the root cause.\n\nThere is a synchronisation issue with StandardWrapper. In short, one thread can enter allocate() and before countAllocated is incremented, another thread can enter unload().\n\nThe bad news is that I suspect the fix might not be pleasant. allocate() is on the critical path so just synchronising allocate() would likely be bad from a performance point of view. I haven't really thought about this much yet, so I am hoping there is a better fix to be found. I'll have a think about a solution for this over the next few days. Hopefully I'll have something next week. In the meantime, any suggestions are welcome."}, {"count": 22, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 118081, "time": "2008-06-27T14:45:55Z", "bug_id": 43683, "creation_time": "2008-06-27T14:45:55Z", "tags": [], "text": "I have committed a fix for test case 3 to trunk, It isn't perfect but it should be enough to fix the issue you are seeing. For the record, I could only get test case 3 to fail by using a debugger to control the execution sequence of the threads.\n\nThe patch is http://svn.apache.org/viewvc?rev=672397&view=rev\n\nAny testing feedback would be appreciated.\n\nThe patch has been proposed for 6.0.x"}, {"count": 23, "tags": [], "creator": "markt@apache.org", "text": "The patch for test case #3 has been applied to trunk.\n\nWhilst the fix isn't perfect is should be extremely difficult (verging on impossible) to reproduce this issue under normal usage.\n\nIf you have a test case that still demonstrates this issue with the latest patches, please feel free to re-open this bug.", "id": 118277, "time": "2008-07-04T00:28:31Z", "bug_id": 43683, "creation_time": "2008-07-04T00:28:31Z", "is_private": false, "attachment_id": null}, {"count": 24, "text": "*** Bug 42518 has been marked as a duplicate of this bug. ***", "creator": "markt@apache.org", "is_private": false, "id": 122142, "time": "2008-11-03T06:30:13Z", "bug_id": 43683, "creation_time": "2008-11-03T06:30:13Z", "tags": [], "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 55132, "attachment_id": null, "text": "Recently Oracle released Java 7 update 25 to work around a serious frame injection bug in the Javadocs as produced by JDK's javadoc tool. This also applies to IBM J9 and JRockit.\n\nThe problem is: There is no public available bugfix release for Java 6 or Java 5 (which are also affected by the security issue). You can download 1.6.0_45 for MacOSX provided by Apple.\n\nAny project that is on an older Java version (e.g. 1.5 or 1.6) and builds the release candidates using the \"official supported\" Java version will produce Javadocs that can no longer be published on the internet, because it would bring any webserver administrator into trouble and may do harm to the company (e.g., the ASF). ASF no longer allows to publish new javadocs with the frame injection bug anymore (see mail to all committers) and enforces all PMCs to \"patch\" their web site.\n\nThe Oracle patch tool is officially not ASF compliant (License-wise, see https://issues.apache.org/jira/browse/LEGAL-171), so cannot be include into official builds. But we still want to patch our javadocs directly after generating them.\n\nFor Maven I provided a \"replacement pather with ASF license), see https://jira.codehaus.org/browse/MJAVADOC-370 - Maven will release a new version ASAP.\n\nFor ANT, the Apache Lucene project has a ANT macro that can be called directly after the <javadoc/> call (https://issues.apache.org/jira/browse/LUCENE-5072), looks like that:\n\n  <!--\n    Patch frame injection bugs in javadoc generated files - see CVE-2013-1571, http://www.kb.cert.org/vuls/id/225657\n    \n    Feel free to use this macro in your own Ant build file. This macro works together with the javadoc task on Ant\n    and should be invoked directly after its execution to patch broken javadocs, e.g.:\n      <patch-javadoc dir=\"...\" docencoding=\"UTF-8\"/>\n    Please make sure that the docencoding parameter uses the same charset like javadoc's docencoding. Default\n    is the platform default encoding (like the javadoc task).\n    The specified dir is the destination directory of the javadoc task.\n  -->\n  <macrodef name=\"patch-javadoc\">\n    <attribute name=\"dir\"/>\n    <attribute name=\"docencoding\" default=\"${file.encoding}\"/>\n    <sequential>\n      <replace encoding=\"@{docencoding}\" summary=\"true\" taskname=\"patch-javadoc\">\n        <restrict>\n          <fileset dir=\"@{dir}\" casesensitive=\"false\" includes=\"**/index.html,**/index.htm,**/toc.html,**/toc.htm\"/>\n          <!-- TODO: add encoding=\"@{docencoding}\" to contains check, when we are on ANT 1.9.0: -->\n          <not><contains text=\"function validURL(url) {\" casesensitive=\"true\" /></not>\n        </restrict>\n        <replacetoken><![CDATA[function loadFrames() {]]></replacetoken>\n        <replacevalue expandProperties=\"false\"><![CDATA[if (targetPage != \"\" && !validURL(targetPage))\n        targetPage = \"undefined\";\n    function validURL(url) {\n        var pos = url.indexOf(\".html\");\n        if (pos == -1 || pos != url.length - 5)\n            return false;\n        var allowNumber = false;\n        var allowSep = false;\n        var seenDot = false;\n        for (var i = 0; i < url.length - 5; i++) {\n            var ch = url.charAt(i);\n            if ('a' <= ch && ch <= 'z' ||\n                    'A' <= ch && ch <= 'Z' ||\n                    ch == '$' ||\n                    ch == '_') {\n                allowNumber = true;\n                allowSep = true;\n            } else if ('0' <= ch && ch <= '9'\n                    || ch == '-') {\n                if (!allowNumber)\n                     return false;\n            } else if (ch == '/' || ch == '.') {\n                if (!allowSep)\n                    return false;\n                allowNumber = false;\n                allowSep = false;\n                if (ch == '.')\n                     seenDot = true;\n                if (ch == '/' && seenDot)\n                     return false;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n    function loadFrames() {]]></replacevalue>\n      </replace>\n    </sequential>\n  </macrodef>\n\nIt would be good to modify the ANT javadoc task to do this transformation internally directly after calling the javadoc executable. The similar patch, as used in Maven, could be ported 1:1 to Ant (replace plexus-utils with DirectoryScanner and IOUtil/FileUtils by the ANT equivalents): https://jira.codehaus.org/secure/attachment/63558/MJAVADOC-370.patch\n\nWe tested this approach with various JVMs, it correctly detects the buggy javascript and patches for Oracle JDK 1.5.0_22, 1.6.0_32, 1.6.0_35, 1.7.0_21, 1.8.0-ea-b93, also Oracle JRockit and IBM J9 version 6 and 7. Oracle JDK 1.7.0_25 (and Apple JDK 1.6.0_45) will correctly not be touched. Same applies for pre-1.5 JVMs as those dont have Javascript that's vulnerable, so patch will ignore them.\n\nUnfortunately, fixing ANT to do this would not help all projects, because in contrast to Maven, the build.xml writer cannot decide which \"javadoc-plugin\" is to be used, it depends on the Ant version installed on user's machine. So In Lucene we will stay for a while with the current manual Ant macro, but it would still be good to support patching by default with later Ant versions. On the other hand, anybody who is afraid of publishing vulnerable javadoc can always use <antversion/> to fail the build...", "id": 167992, "time": "2013-06-24T12:25:19Z", "creator": "uwe@thetaphi.de", "creation_time": "2013-06-24T12:25:19Z", "is_private": false}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "text": "I'll look into it\n\nFirst of all I'll add a FAQ entry pointing over here for the macrodef - and add the macro to the javadoc manual page as well.\n\nPorting the Maven patch over should be pretty easy, the DirectoryScanner API looks quite compatible to Ant's DirectoryScanner - I wonder why ;-)", "id": 167997, "time": "2013-06-24T13:29:30Z", "bug_id": 55132, "creation_time": "2013-06-24T13:29:30Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "id": 167998, "time": "2013-06-24T14:38:22Z", "bug_id": 55132, "creation_time": "2013-06-24T14:38:22Z", "is_private": false, "text": "Thanks for the link inside the manual, maybe post the whole macro there?\n\nIn my browser, the link does nothing... (Chrome)"}, {"count": 3, "attachment_id": null, "bug_id": 55132, "text": "Uwe, could you please look over svn revision 1496083 - this is a port of your Maven patch.\n\nThe problem with the link seems to be it is opened inside the frame - I'll modify the page to open it in a new window/tab.", "id": 167999, "time": "2013-06-24T15:16:33Z", "creator": "bodewig@apache.org", "creation_time": "2013-06-24T15:16:33Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "text": "manual page should be fixed as well", "id": 168000, "time": "2013-06-24T15:29:24Z", "bug_id": 55132, "creation_time": "2013-06-24T15:29:24Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 55132, "attachment_id": null, "text": "Are you sure that this works correct on windows?\n\nfixData = FileUtils.readFully(new InputStreamReader(in, \"US-ASCII\")).trim()\n  .replace(\"\\r\\n\", StringUtils.LINE_SEP)\n  .replace(\"\\n\", StringUtils.LINE_SEP);\n\nOn Windows and if the text file is also windows format this would replace \\r\\n to \\r\\n (ok, no change), the second replace would replace the first \\n again into \\r\\n, so you would get \\r\\r\\n.\n\nOn Linux it works correctly, maybe this is why you did not get it.\n\nI checked this morning the Replace task, it does it correctly:\nfixData = FileUtils.readFully(new InputStreamReader(in, \"US-ASCII\")).trim()\n  .replace(\"\\r\\n\", \"\\n\")\n  .replace(\"\\n\", StringUtils.LINE_SEP);\n\nAlso please note that String.replace uses a regular expression!!! So its better to also use patchContent() to replace the line feeds.", "id": 168001, "time": "2013-06-24T15:31:13Z", "creator": "uwe@thetaphi.de", "creation_time": "2013-06-24T15:31:13Z", "is_private": false}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 168002, "time": "2013-06-24T15:51:47Z", "bug_id": 55132, "creation_time": "2013-06-24T15:51:47Z", "is_private": false, "text": "good catch - should be fixed with svn revision 1496104"}, {"count": 7, "tags": [], "bug_id": 55132, "attachment_id": null, "text": "Hi Stefan,\n\nworks fine. I built the release and ran it on our Lucene checkout. I can confirm, it works fine, it prints the message that it patched 1 file per javadocs run (with vulnerable JDK). With 1.7.0_25 no line was printed.\n\nIn both cases, the Lucene-own macro patcher did not find any vulnerability anymore - so it is also compatible with build.xml files that use the quick fix macro.\n\nI also checked the index.html output, the file is patched correctly and the line feeds on windows look correct.\n\nThanks!\nUwe", "id": 168003, "time": "2013-06-24T16:17:38Z", "creator": "uwe@thetaphi.de", "creation_time": "2013-06-24T16:17:38Z", "is_private": false}, {"count": 8, "tags": [], "creator": "uwe@thetaphi.de", "attachment_id": null, "id": 168005, "time": "2013-06-24T17:48:34Z", "bug_id": 55132, "creation_time": "2013-06-24T17:48:34Z", "is_private": false, "text": "One thing:\nWe have a chicken-egg or also known as bootstrap problem (same applied to the maven javadoc plugin release, I pointed that out on the mailing list): The Javadocs generated for the new ANT version with the internal fixer will have the bug, because ANT does not build the javadocs with the version it currently compiles. So theoretically to prevent buggy javadocs, Ant's build.xml file should contain the macro to fix manually."}, {"count": 9, "tags": [], "bug_id": 55132, "attachment_id": null, "text": "In Ant's case the chicken-egg problem is less of a problem as Ant bootstraps itself.  In fact you do build Javadocs with the version you've just compiled - or at least you can and will do so during the release process.", "id": 168006, "time": "2013-06-24T18:21:29Z", "creator": "bodewig@apache.org", "creation_time": "2013-06-24T18:21:29Z", "is_private": false}, {"count": 10, "tags": [], "creator": "uwe@thetaphi.de", "text": "Hi Stefan,\n\ni modified our ANT-based macro that patches Javadocs a little bit:\nI removed the <restrict/> and made the <non><contains/></not> be part of the fileset. So it should work with older ANT versions that dont understand <restrict/>.\n\nHere the code, maybe you can update the documentation page of the javadoc task on the ANT website:\n\n  <!--\n    Patch frame injection bugs in javadoc generated files - see CVE-2013-1571, http://www.kb.cert.org/vuls/id/225657\n    \n    Feel free to use this macro in your own Ant build file. This macro works together with the javadoc task on Ant\n    and should be invoked directly after its execution to patch broken javadocs, e.g.:\n      <patch-javadoc dir=\"...\" docencoding=\"UTF-8\"/>\n    Please make sure that the docencoding parameter uses the same charset like javadoc's docencoding. Default\n    is the platform default encoding (like the javadoc task).\n    The specified dir is the destination directory of the javadoc task.\n  -->\n  <macrodef name=\"patch-javadoc\">\n    <attribute name=\"dir\"/>\n    <attribute name=\"docencoding\" default=\"${file.encoding}\"/>\n    <sequential>\n      <replace encoding=\"@{docencoding}\" summary=\"true\" taskname=\"patch-javadoc\">\n        <fileset dir=\"@{dir}\" casesensitive=\"false\" includes=\"**/index.html,**/index.htm,**/toc.html,**/toc.htm\">\n          <!-- TODO: add encoding=\"@{docencoding}\" to contains check, when we are on ANT 1.9.0: -->\n          <not><contains text=\"function validURL(url) {\" casesensitive=\"true\" /></not>\n        </fileset>\n        <replacetoken><![CDATA[function loadFrames() {]]></replacetoken>\n        <replacevalue expandProperties=\"false\"><![CDATA[if (targetPage != \"\" && !validURL(targetPage))\n        targetPage = \"undefined\";\n    function validURL(url) {\n        var pos = url.indexOf(\".html\");\n        if (pos == -1 || pos != url.length - 5)\n            return false;\n        var allowNumber = false;\n        var allowSep = false;\n        var seenDot = false;\n        for (var i = 0; i < url.length - 5; i++) {\n            var ch = url.charAt(i);\n            if ('a' <= ch && ch <= 'z' ||\n                    'A' <= ch && ch <= 'Z' ||\n                    ch == '$' ||\n                    ch == '_') {\n                allowNumber = true;\n                allowSep = true;\n            } else if ('0' <= ch && ch <= '9'\n                    || ch == '-') {\n                if (!allowNumber)\n                     return false;\n            } else if (ch == '/' || ch == '.') {\n                if (!allowSep)\n                    return false;\n                allowNumber = false;\n                allowSep = false;\n                if (ch == '.')\n                     seenDot = true;\n                if (ch == '/' && seenDot)\n                     return false;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n    function loadFrames() {]]></replacevalue>\n      </replace>\n    </sequential>\n  </macrodef>", "id": 168094, "time": "2013-06-27T09:58:26Z", "bug_id": 55132, "creation_time": "2013-06-27T09:58:26Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "bodewig@apache.org", "text": "yes, done, thanks", "id": 168095, "time": "2013-06-27T11:32:30Z", "bug_id": 55132, "creation_time": "2013-06-27T11:32:30Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 55132, "attachment_id": null, "text": "Ant 1.9.2 containing your fix has just been released.", "id": 168563, "time": "2013-07-12T14:04:45Z", "creator": "bodewig@apache.org", "creation_time": "2013-07-12T14:04:45Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 5078, "is_private": false, "text": "org.apache.catalina.connector.http.HttpRequestStream.close() method is too \nstrict - it does not allow to close the stream twice. The problem is that many \nthird party code close the stream several times (for example, Sun's JAXB)... I \ncan eliminate it in my code, but not in others'.\n\npublic void close()\n        throws IOException {\n\n\n//////////////  this is too strict\n// can we simply return?\n        if (closed)\n            throw new IOException(sm.getString(\"requestStream.close.closed\"));\n\n        if (chunk) {\n\n            while (!endChunk) {\n                int b = read();\n                if (b < 0)\n                    break;\n            }\n\n        } else {\n\n            if (http11 && (length > 0)) {\n                while (count < length) {\n                    int b = read();\n                    if (b < 0)\n                        break;\n                }\n            }\n\n        }\n\n        closed = true;\n\n    }\n\nThank you.", "id": 8251, "time": "2001-11-26T01:31:17Z", "creator": "alex1979_18@yahoo.com", "creation_time": "2001-11-26T01:31:17Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 5078, "is_private": false, "id": 8266, "attachment_id": null, "creator": "remm@apache.org", "creation_time": "2001-11-26T08:54:53Z", "time": "2001-11-26T08:54:53Z", "text": "Actually, there are a few cases where Tomcat is not strict enough, according to \nthe servlet spec.\nAnyway, I think the applications should be fixed, or at least coded in a more \nrobust way. I'll leave the bug as NEW at the moment, to get some more input, \nbut it's likely it'll get resolved as WONTFIX."}, {"count": 2, "tags": [], "creator": "remm@apache.org", "text": "As stated before, that won't be fixed. The current stream is actually not strict\nenough in some cases.", "id": 8652, "time": "2001-12-05T16:27:59Z", "bug_id": 5078, "creation_time": "2001-12-05T16:27:59Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 5078, "attachment_id": null, "is_private": false, "id": 9473, "time": "2002-01-08T16:28:36Z", "creator": "wdroste@momenta.com", "creation_time": "2002-01-08T16:28:36Z", "text": "I'm trying to use chunked encoding to transfer xml data to a custom XML-Rpc \nserver.  This on W2k w/ Tomcat 4.0.1 final and JAXP 1.1.  Below is the \nexception, it works without fail as long as I don't use chunked encoding.  I'm \nsimply passing the inputstream into the JAX parser.  I noticed that crimson and \ncatalina both do a close.  I don't know which is correct but I know this works \nas long as I don't do chunked encoding.\n\n    public void doPost(HttpServletRequest req, \n\t\t       HttpServletResponse res)\n\tthrows ServletException, IOException \n    {\n\t// Check to see if there is a header for\n\t// a particular encoding for the response.\n\tString encoding = req.getHeader(\"ResponseEncoding\");\n\tif (encoding == null || encoding.equals(\"\"))\n\t    res.setContentType(\"text/xml;charset=UTF-8\");\n\telse\n\t    res.setContentType(\"text/xml;charset=\"+encoding);\n\n\t// Run Server Method the response will be written\n\tsrv.run(new InputSource(req.getInputStream()),encoding,res.getWriter());\n    }\n\n\nThanks,\nWill\n\njava.io.IOException: Cannot close the same input stream twice\n        at org.apache.catalina.connector.http.HttpRequestStream.close(HttpReques\ntStream.java:158)\n        at java.io.PushbackInputStream.close(PushbackInputStream.java:306)\n        at org.apache.crimson.parser.XmlReader$BaseReader.close(XmlReader.java:5\n95)\n        at org.apache.crimson.parser.XmlReader$Utf8Reader.read(XmlReader.java:64\n7)\n        at org.apache.crimson.parser.XmlReader.read(XmlReader.java:487)\n        at org.apache.crimson.parser.InputEntity.fillbuf(InputEntity.java:1006)\n        at org.apache.crimson.parser.InputEntity.peek(InputEntity.java:841)\n        at org.apache.crimson.parser.Parser2.peek(Parser2.java:2927)\n        at org.apache.crimson.parser.Parser2.maybeXmlDecl(Parser2.java:999)\n        at org.apache.crimson.parser.Parser2.parseInternal(Parser2.java:485)\n        at org.apache.crimson.parser.Parser2.parse(Parser2.java:304)\n        at org.apache.crimson.parser.XMLReaderImpl.parse(XMLReaderImpl.java:433)\n\n        at com.momenta.xmlrpc.UnMarshaller.parse(UnMarshaller.java:107)\n        at com.momenta.xmlrpc.Server$Worker.run(Server.java:85)\n        at com.momenta.xmlrpc.Server.run(Server.java:52)\n        at com.momenta.servlet.XMLRpcServer.doPost(XMLRpcServer.java:164)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:760)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.catalina.servlets.InvokerServlet.serveRequest(InvokerServl\net.java:446)\n        at org.apache.catalina.servlets.InvokerServlet.doPost(InvokerServlet.jav\na:216)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:760)\n"}, {"count": 4, "tags": [], "creator": "remm@apache.org", "text": "This is an application bug, so we won't put a workaround for it.\nPlease use a working XML parser instead.", "id": 9481, "time": "2002-01-09T02:51:34Z", "bug_id": 5078, "creation_time": "2002-01-09T02:51:34Z", "is_private": false, "attachment_id": null}]
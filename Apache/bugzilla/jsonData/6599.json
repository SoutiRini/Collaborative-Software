[{"count": 0, "tags": [], "bug_id": 6599, "attachment_id": null, "text": "Documentation states that fork is needed since javadoc calls System.exit. This is not accurate.  \nA simple Security Manager can be installed at runtime that checks for \"exitVM\" inside of \n\"checkPermission\".  This would allow Ant to maintain control of System.exit() until it was ready \nto exit.  This would also alleviate the need for the fork.  We are doing this now, on-site, due to the \nfact that we build about 10 different javadoc packages per build.  This enhancement should speed \nup the process and reduce the overhead.", "id": 10979, "time": "2002-02-20T23:00:52Z", "creator": "malachi@eoti.org", "creation_time": "2002-02-20T23:00:52Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 6599, "text": "I've changed the title for better redability, and now I'd like to point you to \nbug id#6323, which is kind of related (this is a special case).\n\n1. we know that you can do it with a security manager\n2. we even have a security manager in the source, built for java1.2 and above\n3. but when you are already running in a security manager (like under an IDE) \nthere is trouble\n4. and there is more trouble related to system packages being in a different \nsecurity manager.\n\nyour fix, checkpermission, is a 1.2+ solution, we still have to support stuff \nin 1.1. and IDE hosted execution, and so cant make the change ourselves. I am \nglad it works for you.\n\nI am tempted to file this, with reluctance, as 'LATER'. I use reluctance as it \nis a symptom of a larger problem, to wit, we cant catch System.exit() calls in \nnon-forked <java> tasks. but I wont as we may be able to treat javadoc as a \nspecial case and get away with adding the fork parameter, default=true.\n\nCould you submit your patches as a diff -u attachment to this bugrep. That way \nwe can always point people at the solution, which may work on a case by case \nbasis. ", "id": 10984, "time": "2002-02-20T23:23:55Z", "creator": "steve_l@iseran.com", "creation_time": "2002-02-20T23:23:55Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 6599, "is_private": false, "id": 10986, "attachment_id": null, "creator": "malachi@eoti.org", "creation_time": "2002-02-21T00:16:12Z", "time": "2002-02-21T00:16:12Z", "text": "Perhaps I misspoke.  I am currently in the process of moving our build from in-house tools to Ant.  The \nin-house tools used this solution -- I have not patched the javadoc task source.\n\nI tend to agree \nthat it is a symptom of a bigger problem.  I don't think the System.exit issue would only arise from \njavadoc -- it is just the most obvious.\n\nDue to the lack of a patch to diff, do you still want example \ncode uploaded?"}, {"count": 3, "tags": [], "bug_id": 6599, "is_private": false, "id": 10988, "attachment_id": null, "creator": "malachi@eoti.org", "creation_time": "2002-02-21T01:13:27Z", "time": "2002-02-21T01:13:27Z", "text": "I just noticed org.apache.tools.ant.util.optional.NoExitSecurityManager\n\nPerhaps \nthat could be enabled via the fork=false or allowexit=false?"}, {"count": 4, "tags": [], "bug_id": 6599, "is_private": false, "id": 10989, "creation_time": "2002-02-21T01:48:21Z", "time": "2002-02-21T01:48:21Z", "creator": "steve_l@iseran.com", "text": "like I said: there has been some experimentation with this but it was \ntroublesome; certainly enough to stop use using the manager on normal <java> \ncode. It may be that javadoc is tractable; you will have to experiment \nyourself. Note that that security manager is only built if java1.2+ is around; \nyou should find it using reflection. ", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 6599, "text": "*** Bug 15550 has been marked as a duplicate of this bug. ***", "id": 72500, "time": "2005-03-16T16:47:29Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-16T16:47:29Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 6599, "is_private": false, "text": "by now we've added quite a few features on top of the task that a non-forking version really would be pretty dificult to do.", "id": 122470, "time": "2008-11-14T06:11:51Z", "creator": "bodewig@apache.org", "creation_time": "2008-11-14T06:11:51Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 6599, "text": "We can't just call one of the overloads of com.sun.tools.javadoc.Main.execute? It is only .main(String...) which calls System.exit. Obviously you could not pass maxmemory (-J-Xmx), but I think all other cmdline params would be OK.", "id": 122484, "time": "2008-11-14T07:41:05Z", "creator": "jglick@apache.org", "creation_time": "2008-11-14T07:41:05Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 6599, "attachment_id": null, "text": "I'm not familiar with these executes methods at all, and honestly I don't really enjoy calling into com.sun classes too much.\n\nIf you want to take a stab, please reopen the issue.", "id": 122490, "time": "2008-11-14T08:08:23Z", "creator": "bodewig@apache.org", "creation_time": "2008-11-14T08:08:23Z", "is_private": false}, {"count": 9, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "is_private": false, "id": 122492, "time": "2008-11-14T08:22:20Z", "bug_id": 6599, "creation_time": "2008-11-14T08:22:20Z", "text": "Well, we already call com.sun.tools.javac.Main, so it would be pretty analogous. Although com.sun.** classes are not part of the Java platform definition, Sun makes an effort to retain compatibility in them (unlike sun.** classes which are truly private).\n\nI don't personally see a compelling need for this enhancement. It could speed up projects that call <javadoc> many times on small data sets, which is probably unusual. (There is a NetBeans build target that actually does just this, but it is hardly in the critical path of an average developer of that codebase.) If there is interest nonetheless, it would probably not be hard to do."}]
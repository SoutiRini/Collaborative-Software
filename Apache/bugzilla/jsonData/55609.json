[{"count": 0, "tags": [], "bug_id": 55609, "text": "The implementation of iteration for a forEach tag over an integer range builds an array of all the Integer objects in the range, and then obtains an iterator via Arrays.asList(...).iterator().  The unnecessarily consumes a large amount of heap space when the value of \"end\" is large.\n\nThe method in this comment about performance is basically correct from a *time* perspective, but completely ignores *space* considerations.\n\nThe patch to iterate over an integer range without undue heap space follows.\n\nFor JSTL 1.1.1 in src/org/apache/taglibs/standard/tag/common/core/ForEachSupport.java:\n\n// Begin added by AO Industries, Inc.\nimport java.util.NoSuchElementException;\n// End added by AO Industries, Inc.\n\n\n\n    private ForEachIterator beginEndForEachIterator() {\n// Begin removed by AO Industries, Inc.\n//        /*\n//         * To plug into existing support, we need to keep 'begin', 'end',\n//         * and 'step' as they are.  So we'll simply create an Integer[]\n//         * from 0 to 'end', inclusive, and let the existing implementation\n//         * handle the subsetting and stepping operations.  (Other than\n//         * localizing the cost of creating this Integer[] to the start\n//         * of the operation instead of spreading it out over the lifetime\n//         * of the iteration, this implementation isn't worse than one that\n//         * created new Integers() as needed from next().  Such an adapter\n//         * to ForEachIterator could easily be written but, like I said,\n//         * wouldn't provide much benefit.)\n//         */\n//        Integer[] ia = new Integer[end + 1];\n//        for (int i = 0; i <= end; i++)\n//            ia[i] = new Integer(i);\n//        return new SimpleForEachIterator(Arrays.asList(ia).iterator());\n// End removed by AO Industries, Inc.\n\n// Begin added by AO Industries, Inc.\n        // This implementation does not require heap space in proportion to the number of iterations.\n        return new SimpleForEachIterator(\n            new Iterator() {\n                private final int end = ForEachSupport.this.end;\n                private int next = 0;\n\n                public boolean hasNext() {\n                    return next <= end;\n                }\n\n                public Object next() {\n                    if(next > end) throw new NoSuchElementException();\n                    return Integer.valueOf(next++);\n                }\n\n                public void remove() {\n                    throw new UnsupportedOperationException();\n                }\n            }\n        );\n// End added by AO Industries, Inc.\n    }", "id": 170341, "time": "2013-09-28T22:04:21Z", "creator": "support@aoindustries.com", "creation_time": "2013-09-28T22:04:21Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 55609, "text": "One observation: Integer.valueOf was added in Java 1.5, so we'll need to stick with new Integer(next++) in the iterator.\n\n- Thanks!!!", "id": 170342, "time": "2013-09-28T22:14:38Z", "creator": "support@aoindustries.com", "creation_time": "2013-09-28T22:14:38Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 55609, "attachment_id": null, "id": 170343, "creation_time": "2013-09-29T00:39:07Z", "time": "2013-09-29T00:39:07Z", "creator": "support@aoindustries.com", "text": "I've been looking into this further.  This enhancement has already been made in the 1.2 series of standard taglib.  I hope you will still add it to any future release of the 1.1 series.", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55609, "attachment_id": null, "text": "This has already been fixed in trunk and will be included in 1.2.0.RC2.\nLeaving open for 1.1 but a new release of that branch is unlikely.", "id": 170348, "time": "2013-09-29T17:30:51Z", "creator": "jboynes@apache.org", "creation_time": "2013-09-29T17:30:51Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "jboynes@apache.org", "text": "Closing as 1.2.1 is released and no new release of 1.1 is likely.", "id": 179428, "time": "2014-12-02T05:17:53Z", "bug_id": 55609, "creation_time": "2014-12-02T05:17:53Z", "tags": [], "is_private": false}]
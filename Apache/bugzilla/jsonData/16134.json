[{"count": 0, "tags": [], "text": "When following conditions are met, mod_deflate (as a filter) does not \npropagate EOS to the upper level and leads to WRONG REQUEST (HTTP 400) \nresponce.\n1. enable mod_dav, mod_dav_fs, mod_deflate\n2. compression is enabled for both - input and output\n3. client sends PROPFIND HTTP/1.1 request with Content-Encoding: gzip header \nand a properly gzip'ed xml content.\n\nExample of httpd.conf:\n###httpd.conf BEGIN\n... skipped all common options ...\n\nLoadModule deflate_module modules/mod_deflate.so\nNameVirtualHost localhost:80\nNameVirtualHost localhost:801\n<VirtualHost localhost:80>\n</VirtualHost>\n<VirtualHost localhost:801>\n    DAVLockDB logs/DavLock\n    <Directory \"D:/apa2_0_43_15JAN03/Debug/htdocs\">\n      SetInputFilter DEFLATE\n      SetOutputFilter DEFLATE\n      DAV On\n      <Limit PUT POST DELETE PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK>\n        AuthName             \"Foo\"\n        AuthType             Basic\n        AuthUserFile         logs/passw\n        Require user dmitri\n      </Limit>\n    </Directory>\n</VirtualHost>\n\n###httpd.conf END\n\nMy investigation showed that the trouble is in xml_util.c and mod_delate.c \nfiles. First requires data until a len=0 (normal condition) or len<0 (error) \nreturned while the second never returns EOS and as a result len is never 0.\n\nSee mod_deflate.c:662:\n            /* If we actually see the EOS, that means we screwed up! */\n            if (APR_BUCKET_IS_EOS(bkt)) {\n                return APR_EGENERAL;\n            }\n\nI propose a patch that works:\n\n--- mod_deflate.c~\t2003-01-03 02:12:36.000000000 +0300\n+++ mod_deflate.c\t2003-01-15 23:15:38.000000000 +0300\n@@ -648,6 +648,15 @@\n         apr_brigade_cleanup(ctx->bb);\n     }\n \n+    if (APR_BUCKET_IS_EOS(APR_BRIGADE_FIRST(ctx->bb))) {\n+        apr_bucket *eos;\n+\n+        apr_brigade_cleanup(ctx->bb);\n+        eos = apr_bucket_eos_create(f->c->bucket_alloc);\n+        APR_BRIGADE_INSERT_TAIL(bb, eos); \n+        return APR_SUCCESS;\n+\t}\n+\n     if (APR_BRIGADE_EMPTY(ctx->proc_bb)) {\n         rv = ap_get_brigade(f->next, ctx->bb, mode, block, readbytes);\n \n\nI'm not sure that it's absolutely correct and it needs to be reviewed by \nsomebody who knows Apache2 architecture better.", "is_private": false, "id": 29457, "creator": "dd@cron.ru", "time": "2003-01-15T20:19:16Z", "bug_id": 16134, "creation_time": "2003-01-15T20:19:16Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Once again the proposed patch agains the most recent version of mod_deflate.c:\n\n--- mod_deflate.c~\t2003-01-03 02:12:36.000000000 +0300\n+++ mod_deflate.c\t2003-01-15 23:31:04.000000000 +0300\n@@ -557,7 +557,7 @@\n     int zRC;\n     apr_status_t rv;\n     deflate_filter_config *c;\n-\n+\n     /* just get out of the way of things we don't want. */\n     if (mode != AP_MODE_READBYTES) {\n         return ap_get_brigade(f->next, bb, mode, block, readbytes);\n@@ -655,6 +655,15 @@\n             return rv;\n         }\n \n+\t\tif (APR_BUCKET_IS_EOS(APR_BRIGADE_FIRST(ctx->bb))) {\n+\t\t\tapr_bucket *eos;\n+\n+\t\t\tapr_brigade_cleanup(ctx->bb);\n+\t\t\teos = apr_bucket_eos_create(f->c->bucket_alloc);\n+\t\t\tAPR_BRIGADE_INSERT_TAIL(bb, eos); \n+\t\t\treturn APR_SUCCESS;\n+\t\t}\n+\n         APR_BRIGADE_FOREACH(bkt, ctx->bb) {\n             const char *data;\n             apr_size_t len;\n", "attachment_id": null, "id": 29465, "creator": "dd@cron.ru", "time": "2003-01-15T20:35:56Z", "bug_id": 16134, "creation_time": "2003-01-15T20:35:56Z", "is_private": false}, {"count": 2, "tags": [], "text": "Changed how ap_xml_parse_input works in server/util_xml.c r1.22 so that it realizes when EOS is sent.  I've proposed this to be backported to the next stable release.\n\nThanks for using Apache HTTP Server!", "attachment_id": null, "bug_id": 16134, "id": 31405, "time": "2003-02-17T06:16:30Z", "creator": "jerenkrantz@apache.org", "creation_time": "2003-02-17T06:16:30Z", "is_private": false}]
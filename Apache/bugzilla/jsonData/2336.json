[{"attachment_id": null, "tags": [], "bug_id": 2336, "text": "Using JDK 1.3.1 on Win2K and SAX 2.0 (also with SAX 1.x).\n\nSteps to reproduce:\n\n1. run against the file: http://www.geocities.com/ascii_text/sax_example.xml\n2. as the file is parsed, a the character array/buffer of size 16384 is passed\n   to the characters method in the implementation class\n3. the offset value passed to the characters method is moved along to match \n   text contained within the elements\n4. what happens if text value is partly in one buffer and partly in the next\n   buffer?  only part of the text value is given\n\nFor example, in the file referenced above, we have the following xml snippet:\n\n\"...\n    <column>\n      <column_name>COLUMN_5</column_name>\n      <column_value>VALUE_5</column_value>\n    </column>\n...\"\n\nIt turns out that as the file is processed, the current buffer contains:\n\n\"...\n    <column>\n      <column_name>CO\" [END OF BUFFER]\n\nand the next buffer contains:\n\n[BEGINNING OF BUFFER]\"LUMN_5</column_name>\n      <column_value>VALUE_5</column_value>\n    </column>\n...\"\n\nThe corresponding buffer-related values passed to the characters \nmethod are as follows.  \n\n* For the current buffer:\n\nOFFSET: 16382\nLENGTH: 2\nCHARACTER ARRAY LENGTH: 16384\n\n* For the next buffer:\n\nOFFSET: 0\nLENGTH: 6\nCHARACTER ARRAY LENGTH: 16384\n\nWe can see that the text value COLUMN_5 is chopped into \"CO\" and \"LUMN_5\"\nand the reason is that the first part of the value (\"CO\") lies in one\nbuffer and the second part (\"LUMN_5\") lies in the next buffer.\n\nAs a result of all this, the characters value reported is incorrect.\n\nThis doesn't happen for every buffer; in fact, it took an xml file\n45,000 lines long to get the problem to show up.  But for large xml\nfiles, it almost always happens to me.  This is a serious problem\nbecause it prevents me from using and testing large data sets.\n\nPlease e-mail me if there is a work-around or if I am mis-using\nthe API.\n\nI was unable to find another reference to this problem, but I\nwould be surprised if others haven't encountered it.", "count": 0, "id": 3277, "time": "2001-06-26T12:56:19Z", "creator": "ascii_text@yahoo.com", "creation_time": "2001-06-26T12:56:19Z", "is_private": false}, {"count": 1, "tags": [], "text": "See sax.DocumentHandler.characters(...):\n     * <p>The Parser will call this method to report each chunk of\n     * character data.  SAX parsers may return all contiguous character\n     * data in a single chunk, or they may split it into several\n     * chunks; however, all of the characters in any single event\n     * must come from the same external entity, so that the Locator\n     * provides useful information.</p>\nSpliting characters() is not a bug. It is up to an application to combine it \ninto a single chunk.", "is_private": false, "id": 3278, "creator": "elena@apache.org", "time": "2001-06-26T13:08:46Z", "bug_id": 2336, "creation_time": "2001-06-26T13:08:46Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 2336, "attachment_id": null, "id": 3279, "time": "2001-06-26T13:29:46Z", "creator": "ascii_text@yahoo.com", "creation_time": "2001-06-26T13:29:46Z", "is_private": false, "text": "\nThank you, Elena.  I'm an idiot (RTFM).\n\nI did some more checking around and also found this \"bug\" reported\non the Sun bug tracker.\n\nSee below:\n\nhttp://developer.java.sun.com/developer/bugParade/bugs/4404579.html\n\nHowever, in my defense, I'll say that it is certainly a \"gotcha\".  \nFor instance, every example program I've ever seen just does \nsomething like the following, which is what got me into trouble:\n\n   public void characters(char character_array[], int offset, int length) \n      throws SAXException\n   {\n      String element_value = new String(character_array, offset, length);\n\n       ...\n\n"}]
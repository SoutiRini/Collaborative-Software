[{"count": 0, "tags": [], "bug_id": 11429, "attachment_id": null, "id": 20619, "time": "2002-08-02T17:22:41Z", "creator": "mmunz@apelon.com", "creation_time": "2002-08-02T17:22:41Z", "is_private": false, "text": "win2k.  This is a batch file issue.  ant (the sh script) works fine under \ncygwin.  ant.bat, however, has the following restriction. \n\nIf the directory structure is deep, lcp.bat, while compiling the variable \nLOCALCLASSPATH, will throw an error that reads \"The input line is too long.\" .  \nThis effectively prevents one from using ant via the batch file.\n\nto reproduce:  \n\nInstall ant in a \"deep\" directory. The following is the path that I use to \nreproduce the error.\n\nD:\\Matt\\apelon\\projects\\official\\AppServerExploration\\apelon-ohm\\emr-\nsoftware\\subprojects\\jboss-integrate\\output\\jboss-versions\\7-2-2002\\jboss-\nall\\tools\n\nsolutions:\n\nNone that I'm aware of -- I'm unfamiliar with the details of batch file syntax.\n\nworkarounds:\n\ninstall ant in a \"shallow\" directory like \"d:\\ant\".  This is not always \npossible (for an example, see the JBoss project's use of ant), which is why \nI've posted this defect."}, {"count": 1, "tags": [], "bug_id": 11429, "attachment_id": null, "is_private": false, "id": 21011, "time": "2002-08-14T09:29:10Z", "creator": "sbailliez@apache.org", "creation_time": "2002-08-14T09:29:10Z", "text": "What is your suggestion to fix an os limitation ?"}, {"count": 2, "tags": [], "bug_id": 11429, "attachment_id": null, "id": 21021, "time": "2002-08-14T13:35:27Z", "creator": "mmunz@apelon.com", "creation_time": "2002-08-14T13:35:27Z", "is_private": false, "text": "Thanks for taking a look at this.\n\n> What is your suggestion to fix an os limitation ?\n\nAt a minimum proper error reporting and documentation.  The home directory \nstring could be checked and an error message along the lines of \"Ant must \nreside in a directory X characters long or shorter to run properly\" issued at \nant startup.\n\nA similar comment should be added in the installation instructions for ant.\n\nBy publishing the implicit limitations of a product, you help encourage \"design \nby contract\" -- don't let your application give the impression it can do \nsomething it can't.  All operating systems, software, hardware, people, \neverything has limitations.  For example, Java does not have multiple \ninheritance -- this does not prevent one from writing correct programs.  A good \nuser interface manages the limitations of the system so that the user can focus \non their work without distractions.  Whether you'd like to think about it or \nnot, ant.bat has a very real user interface that has a particular defect, as \ndescribed in this report.\n\nThat having been said, please note that there are two different invocation \nmethods for ant on w2k -- 1) using ant.bat, or 2) using java invocation (with \nthe proper classpath, of course)\n\nIt is possible to run ant from a \"deep\" directory using method #2 -- I do it \nevery day by necessity.\n\nLet me issue a disclaimer:\n\n>> I'm unfamiliar with the details of batch file syntax.\n\nThat having been said, it seems to me that the issue here is that lcp.bat \nbuilds up a classpath variable that exceeds the maximum size for the operating \nsystem.  As such, I'd imagine that this defect could be replicated in \na \"shallow\" directory by filling ant's jars directory with many files, or a few \nfiles with long file names.\n\nThere are many ways to build up a java classpath.  lcp.bat is not the only \none.  Perhaps by substituting lcp.bat with another mechanism, you will resolve \nthis problem.\n\nI'm sorry that I don't have the solution to this problem myself -- I'm just not \na .bat hacker...  Thanks again for looking at this issue.\n\n\n\n \n\n"}, {"count": 3, "tags": [], "bug_id": 11429, "attachment_id": null, "id": 21024, "time": "2002-08-14T13:54:50Z", "creator": "sbailliez@apache.org", "creation_time": "2002-08-14T13:54:50Z", "is_private": false, "text": "I don't see how to replicate common sense about OS limitation that we don't \nknow will help in any way. Command line length is different even among some \nunix.\n\nFor me it is the same as requesting a warning in the docs about not being able \nto store a 128bit integer into a 32bit one...kind of weird.\n\nSeriously, assuming I can fix this to build classpath in relative, you will \ncome back to me because the input line is too long when you have 50000 jars in \nyour classpath... Do you think it is worth wasting time to replicate the \ndocumentation of your operating system to the java manual because you want to \nencourage 'design by contract' so you don't want to read the contract of the os \nyou're running so you want another full contract ?\n\n"}, {"count": 4, "tags": [], "bug_id": 11429, "attachment_id": null, "id": 21030, "time": "2002-08-14T14:40:08Z", "creator": "mmunz@apelon.com", "creation_time": "2002-08-14T14:40:08Z", "is_private": false, "text": "\nI don't have a lot of time to spend on this topic, so I would appreciate it if \nyou would please carefully re-read my prior comments.  I think you'll find the \nanswers to your questions there.\n\n>I don't see how to replicate common sense about OS limitation that we don't \n>know will help in any way. \n\nI assume this refers to my request for documentation, at a minimum.\n\n>> By publishing the implicit limitations of a product, you help \n>> encourage \"design \n>> by contract\" -- don't let your application give the impression it can do \n>> something it can't.  \n\nWhat you call common sense, in this case, I call an implicit limitation.  It is \nnot common sense for me, because if I use invocation method #2, the application \nworks fine.  The problem is not with the OS, it is with ant.bat.\n\n>>... please note that there are two different invocation \n>>methods for ant on w2k -- 1) using ant.bat, or 2) using java invocation (with \n>>the proper classpath, of course)\n\n>>It is possible to run ant from a \"deep\" directory using method #2 -- I do it \n>>every day by necessity.\n\n> Command line length is different even among some \n> unix.\n\nThe classpath does not need to be specified in the commandline or in a system \nvariable.  It can be specified in a file, too.  Please read the documentation \nfor java.exe.\n\n>> There are many ways to build up a java classpath.  lcp.bat is not the only \n>> one.  Perhaps by substituting lcp.bat with another mechanism, you will \n>> resolve this problem.\n\n> For me it is the same as requesting a warning in the docs about not being \n> able to store a 128bit integer into a 32bit one...kind of weird.\n\nYou are entitled to your opinion.  This is in conflict with my understanding of \nthe Java Platform on W2k.  The programs I write do not use lcp.bat.  They do \nnot have this defect.  I see nothing that relates the function of lcp.bat to \nprogramming language fundamentals like memory allocation.\n\n> Seriously, assuming I can fix this to build classpath in relative, you will \n> come back to me because the input line is too long when you have 50000 jars \n> in \n> your classpath... \n\nIt is possible to have a classpath of any length.  Please read the \ndocumentation for java.exe, and see my comments above.\n\n> you will \n> come back to me because the input line is too long when you have 50000 jars \n> in your classpath... \n\nI will not do this.  I promise.  I am a real programmer trying to do real \nwork.  really.\n\n> Do you think it is worth wasting time to replicate the \n> documentation of your operating system to the java manual because you want to \n> encourage 'design by contract' so you don't want to read the contract of the \n> os you're running so you want another full contract ?\n\nNothing is worth wasting time.  Life is too short.  It is not wasting time to \nprovide a useful piece of information to the documentation.  In the time we \nhave spent writing these comments, this could have been done several times.\n\nIMO a user should *never* have to read the source code to understand why a \ngiven program errs.  We are not talking about a segmentation fault or a memory \nleak here.  This is a problem with a known and finite set of causes.  \n\nI'm not trying to give anyone a hard time here.  ANT is very likely the most \nuseful, versatile, and creative program I have seen in quite a while.  This is \nOpen Source - fix the defect / don't fix it / ignore me / do what you'd like.\n\nI am honestly just glad that anyone is actually addressing this issue in any \nfashion.  Thanks again.\n\n"}, {"count": 5, "tags": [], "text": "I saw the following in one of the comments to this bug:\n\n> The classpath does not need to be specified in the commandline or in a system \n> variable.  It can be specified in a file, too.  Please read the documentation \n> for java.exe.\n\nI looked at the documentation for java.exe for JDK 1.2 through 1.4 at\nhttp://java.sun.com/j2se and I find no reference to reading classpath from a\nfile. There is a way to read it from a jar file's META-INF directory if java.exe\n-jar is used.\n\nIs this classpath file feature specific to a particular vendor's Java\nimplementation? If so, we are back to the same problem: launching a Java problem\nusing environment variables or a -classpath argument.\n\nI have run into this same problem on Windows 2000, NT, and XP and it is even\nworse of 95, 98, and ME. Unfortunately, since I have not seen any support for a\nclasspath file, I took a different approach to this problem: I created a\nbootstrap class that reads properties from the a properties file and then uses\nRuntime.exec() to create a child JVM with all of the application system\nproperties, classpath, etc. It is a bit heavyweight of a solution, but it seems\nto work on Sun and most other Java implementations.\n\nIf some of this is usuable, I am willing to port a more streamlined version of\nthis bootstrappping mechanism (i.e. using classloading to replace the\nRuntime.exec()). The code is in the jakarta-common-sandbox/daemons project. It\ncontains sample scripts that launch (of all things) Ant. The nightly builds for\nthis code are at:\n\nhttp://jakarta.apache.org/builds/jakarta-commons/nightly/commons-daemon/\n", "attachment_id": null, "id": 21032, "creator": "patrick.luby@planamesa.com", "time": "2002-08-14T15:10:03Z", "bug_id": 11429, "creation_time": "2002-08-14T15:10:03Z", "is_private": false}, {"count": 6, "tags": [], "creator": "ddevienne@lgc.com", "attachment_id": null, "id": 21034, "creation_time": "2002-08-14T15:24:14Z", "time": "2002-08-14T15:24:14Z", "bug_id": 11429, "text": "For different reasons, I hacked up java.exe (the windows java launcher program \nfor the Windows JDK. Simple C program that comes with the source of the JDK \nfrom the Sun Java Community Program) to support (like javac.exe) reading \ncommand line options from files, using the 'java.exe @options.txt' notation \n(actually, real command line options can be mingled with @file option files). \nIt's a lightweight solution, since adds almost nothing to the startup time (no \nforking of another process, or worse the startup of another VM), albeit not a \nvery clean one. This is just for information to anyone who would plan to do \nsomething similar that it's possible. Regards, --DD", "is_private": false}, {"count": 7, "tags": [], "text": "Matt,\n\nUnless what you think I did read your comments.\n\nI also took the time like Patrick to browse all docs from different versions \nand to be sure I downloaded the source code of the JDK and checked in java.c.\nI see nothing close to the @argfile of javac.\n\nWhere did you see this ?\n\nLike Patrick says it all could be avoided with a bootstrap but Rome was not \nbuilt in a day...seriously if everyone could think about everything in just \nevery possibility without any cost I'm fine. However my brain is limited and \nI'm sorry to say that you must be part of the 'acceptable risk' as I have never \nseen anyone working with a 14th level of directory but then again if we can \nmake it through the 25th within an acceptable timeframe/cost. ok.\n\n", "is_private": false, "id": 21036, "creator": "sbailliez@apache.org", "time": "2002-08-14T15:42:51Z", "bug_id": 11429, "creation_time": "2002-08-14T15:42:51Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Indeed java.exe does *not* support @file out of the box, and javac.exe supports \nit only because Javac.java does, i.e. the VM was bootstrapped already, the \nJavac.main(args) was called, and implemented reading additional options from \n@file entries on the command line. To add such support to java.exe, hack it up \nlike I did. More often that not, though, keeping a clean classpath is a better \noptions, or also take advantage of the Class-Path attribute of JARs when \npossible. --DD", "attachment_id": null, "id": 21038, "creator": "ddevienne@lgc.com", "time": "2002-08-14T16:04:03Z", "bug_id": 11429, "creation_time": "2002-08-14T16:04:03Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 11429, "attachment_id": null, "id": 21039, "time": "2002-08-14T16:09:40Z", "creator": "stevel@apache.org", "creation_time": "2002-08-14T16:09:40Z", "is_private": false, "text": "there are two other ways to run ant on win2k that avoid this problem\n\na) cygwin.\nb) perl. \n\nI also note that the installing ant docs do say for win9x that:\n\"It is recommended, therefore, that Ant be installed in a short path, such as\nC:\\Ant.\"\n\nwe could extend this with a note about spaces and deep dir trees being trouble,\nthough of course I still believe that keeping ant in SCM and the dir hierarchy\nthat can entail is a good thing.\n\n\n-----\n\nI like patrick's idea about a boot loader. To an extent, ant often gets used a\nbit like that; if we could have an ultraskinny bootloader that could take an\nant-ish declaration of a program (imagine an <java> decl and nothing else),\nthings would be very cool. \n"}, {"count": 10, "tags": [], "creator": "patrick.luby@planamesa.com", "attachment_id": null, "id": 21043, "creation_time": "2002-08-14T16:44:12Z", "time": "2002-08-14T16:44:12Z", "bug_id": 11429, "text": "I plan on posting a proposal for the bootstrapper on ant-dev in the coming\nweeks. The commons-daemon bootstrapper is actually overkill for Ant. Instead, I\nwould limit the bootstrapper to the following:\n\n1. reading a properties file in Ant's bin directory and pushing those properties\n   into system properties\n\n2. constructing the Ant classpath in a classloader, classloading Ant's Main\n   class, and then invoking Main.main() via reflection.\n\nIn essence, item 1 moves all of the Jikes, Cyghome, etc. system properties from\nthe script into the bootstrapper and item 2 moves all of the classpath setting\nfrom the script into the bootstrapper.\n\nBy moving script code into Java code, Ant will be able to handle spaces in paths\nand classpaths/system properties of arbitrary length. The bootstrapper always\ngives Windows 95, 98, and ME support without having to set %ANT_HOME%.", "is_private": false}, {"count": 11, "tags": [], "text": "I apologize for my hasty reference to java.exe having a file list capability.  \nI assumed that since javac supported it, java.exe would too.  \n\nThere have been several good suggestions so far.  Patrick's bootstrapping idea \nseems quite reasonable to me -- sounds like there's some code already written \ntoo.  In fact it sounds like there are some other wins in useability outside of \nthis issue, which make it worthwhile on its own.  \n\nLet me expand on a suggestion that Stephanie mentioned.  Modify lcp.bat to \ngenerate relative classpath pathnames instead of absolute ones.\n\nabsolute classpath:\n\n\"C:\\programs\\ant\\lib\\jar1.jar;C:\\programs\\ant\\lib\\jar1.jar;...\"\n\nrelative classpath:\n\n\".\\lib\\jar1.jar;.\\lib\\jar1.jar;...\"\n\nThis is a selfish reccomendation.  It will fix my problem, but perhaps not for \nothers in some *really* extreme cases -- It is however, a practical solution, \nand likely an easy modification.\n\nAs for the documentation issue.  If you guys want to clearly define the \ndirectory depth limitation, then I can take that to the JBoss guys and \nsay, \"Look -- you're putting ant in the wrong place.  The ant docs clearly \nstate that ant should be no more than X chars deep in the path.\"\n\nIMO, their directory structure, although easy to understand, gets too deep.  \nThey're using ANT like an embedded module instead of as a stand-alone \napplication.  I think that's fine, but they should be aware of the \nimplications.  \n\nI don't want to take this off-topic, I just want to give some perspective on my \nsituation.\n\nAs for using the jar manifest to specify the classpath, this IMO is best \nregarded as a last-ditch option, as it makes debugging difficult.  I have \nalready had problems with ant-related jars creating a \"hidden\" classpath \nthrough the manifest that was undesired.\n\nThanks again for all the thoughtful comments.\n\n\n\n\n", "attachment_id": null, "id": 21045, "creator": "mmunz@apelon.com", "time": "2002-08-14T16:53:08Z", "bug_id": 11429, "creation_time": "2002-08-14T16:53:08Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 11429, "attachment_id": null, "is_private": false, "id": 21048, "time": "2002-08-14T17:04:25Z", "creator": "patrick.luby@planamesa.com", "creation_time": "2002-08-14T17:04:25Z", "text": "There is one problem with your suggestion. You cannot make the paths relative to\n\".\" as that will only work when the \".\" is equal to \"%ANT_HOME%\". Instead, you\nwould have to use \"%0\" in front of each path. This is because Ant is usually\nexecuted with the current working directory set to where the buildfile is, not\nwhere Ant is. As a result, you are still stuck with the long paths as, in many\ncases, %0 is not much shorter or even different from %ANT_HOME%."}, {"count": 13, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "id": 39607, "creation_time": "2003-06-29T20:12:10Z", "time": "2003-06-29T20:12:10Z", "bug_id": 11429, "text": "it would be great if the .bat file could test how much environment space is left\nand warn the user if it is getting tight or even better increase it itself!\n\nI tried to increase the environment value as per the above URL, but\nunfortunately, this didn't help.\n\nWhen calling out of emacs, I even got:\n<<ComSpec=C:\\WINNT\\system32\\cmd.exe/e:32768\nerror: the program C:\\WINNT\\system32\\cmd.exe\\e:32768 could not be found.>>\n\nso, I also wrote my own little ant.bat with the line\nC:\\cygwin\\bin\\sh.exe %ANT_HOME%\\bin\\ant %*", "is_private": false}, {"count": 14, "tags": [], "bug_id": 11429, "attachment_id": null, "is_private": false, "id": 39618, "time": "2003-06-30T05:37:44Z", "creator": "hauser@acm.org", "creation_time": "2003-06-30T05:37:44Z", "text": "Just FYI: \n\nls $ANT_HOME/lib/*.jar | wc -m\n2496 fails\n648 still is o.k."}, {"count": 15, "text": "Ant now has a launch program which minimizes the use of environment variables.\nThe directory depth should no longer be a problem.", "creator": "conor@apache.org", "attachment_id": null, "id": 40308, "time": "2003-07-10T03:47:29Z", "bug_id": 11429, "creation_time": "2003-07-10T03:47:29Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "bug_id": 11429, "attachment_id": null, "is_private": false, "id": 172668, "time": "2014-01-24T10:29:27Z", "creator": "marypablate@outlook.com", "creation_time": "2014-01-24T10:29:27Z", "text": "Use Long Path Tool for such problems, it works good I will say..."}]
[{"count": 0, "tags": [], "bug_id": 23950, "text": "I believe that the Context.listBindings(...) methods should return an\nEnumeration that returns resolved Objects, not references.  The current\nimplementation does not make an effort to resolve References to Objects prior to\nreturning the Binding.  It also should hold Exceptions until the enumeration has\nbeen fully traversed.  A possible patch is noted below (verified against 1.4,\nspot-checked for pre-1.4).\n\n\nIndex: NamingContextBindingsEnumeration.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/NamingContextBindingsEnumeration.java,v\nretrieving revision 1.1\ndiff -u -r1.1 NamingContextBindingsEnumeration.java\n--- NamingContextBindingsEnumeration.java\t2 Nov 2000 06:14:16 -0000\t1.1\n+++ NamingContextBindingsEnumeration.java\t20 Oct 2003 14:58:28 -0000\n@@ -67,9 +67,12 @@\n import java.util.Hashtable;\n import java.util.Vector;\n import java.util.Enumeration;\n+import javax.naming.CompositeName;\n+import javax.naming.Context;\n import javax.naming.NamingException;\n import javax.naming.NamingEnumeration;\n import javax.naming.Binding;\n+import javax.naming.spi.NamingManager;\n \n /**\n  * Naming enumeration implementation.\n@@ -85,13 +88,17 @@\n     // ----------------------------------------------------------- Constructors\n \n \n-    public NamingContextBindingsEnumeration(Vector entries) {\n+    public NamingContextBindingsEnumeration(Vector entries, Context ctx,\nHashtable env) {\n         enum = entries.elements();\n+\t\tthis.ctx = ctx;\n+\t\tthis.env = env;\n     }\n \n \n-    public NamingContextBindingsEnumeration(Enumeration enum) {\n+    public NamingContextBindingsEnumeration(Enumeration enum, Context ctx,\nHashtable env) {\n         this.enum = enum;\n+\t\tthis.ctx = ctx;\n+\t\tthis.env = env;\n     }\n \n \n@@ -103,6 +110,11 @@\n      */\n     protected Enumeration enum;\n \n+    private Hashtable env;\n+    private Context ctx;\n+    private Binding next;\n+    private Exception trouble;\n+    private boolean runtimeExc;\n \n     // --------------------------------------------------------- Public Methods\n \n@@ -110,9 +122,10 @@\n     /**\n      * Retrieves the next element in the enumeration.\n      */\n-    public Object next()\n-        throws NamingException {\n-        return nextElement();\n+    public Object next() {\n+\t\tObject ret = next;\n+\t\tnext = null;\n+\t\treturn ret;\n     }\n \n \n@@ -121,7 +134,35 @@\n      */\n     public boolean hasMore()\n         throws NamingException {\n-        return enum.hasMoreElements();\n+\t\tif (next != null) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (enum.hasMoreElements()) {\n+\t\t\ttry {\n+\t\t\t\tNamingEntry entry = (NamingEntry)enum.nextElement();\n+\t\t\t\tString name = entry.name;\n+\t\t\t\tObject obj = NamingManager.getObjectInstance(entry.value, new\nCompositeName(name), ctx, env);\n+\t\t\t\tnext = new Binding(name, entry.value.getClass().getName(), obj, true);\n+\t\t\t\treturn true;\n+\t\t\t} catch (NamingException e) {\n+\t\t\t\ttrouble = e;\n+\t\t\t} catch (RuntimeException e) {\n+\t\t\t\ttrouble = e;\n+\t\t\t\truntimeExc = true;\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tNamingException ne = new NamingException();\n+\t\t\t\tne.setRootCause(e);\n+\t\t\t\ttrouble = ne;\n+\t\t\t}\n+\t\t}\n+\t\tif (trouble != null) {\n+\t\t\tif (runtimeExc) {\n+\t\t\t\tthrow (RuntimeException)trouble;\n+\t\t\t} else {\n+\t\t\t\tthrow (NamingException)trouble;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n     }\n \n \n@@ -133,16 +174,17 @@\n     }\n \n \n-    public boolean hasMoreElements() {\n-        return enum.hasMoreElements();\n-    }\n-\n-\n-    public Object nextElement() {\n-        NamingEntry entry = (NamingEntry) enum.nextElement();\n-        return new Binding(entry.name, entry.value.getClass().getName(), \n-                           entry.value, true);\n-    }\n+\tpublic boolean hasMoreElements() {\n+\t\ttry {\n+\t\t\treturn hasMore();\n+\t\t} catch (NamingException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tpublic Object nextElement() {\n+\t\treturn next();\n+\t}\n \n \n }\nIndex: NamingContext.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/NamingContext.java,v\nretrieving revision 1.8\ndiff -u -r1.8 NamingContext.java\n--- NamingContext.java\t8 Nov 2001 21:02:04 -0000\t1.8\n+++ NamingContext.java\t20 Oct 2003 14:58:38 -0000\n@@ -429,7 +429,7 @@\n         while ((!name.isEmpty()) && (name.get(0).length() == 0))\n             name = name.getSuffix(1);\n         if (name.isEmpty()) {\n-            return new NamingContextBindingsEnumeration(bindings.elements());\n+            return new NamingContextBindingsEnumeration(bindings.elements(),\nthis, env);\n         }\n         \n         NamingEntry entry = (NamingEntry) bindings.get(name.get(0));\nIndex: resources/FileDirContext.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/resources/FileDirContext.java,v\nretrieving revision 1.15\ndiff -u -r1.15 FileDirContext.java\n--- resources/FileDirContext.java\t6 Nov 2002 09:57:17 -0000\t1.15\n+++ resources/FileDirContext.java\t20 Oct 2003 14:59:01 -0000\n@@ -389,7 +389,7 @@\n \n         Vector entries = list(file);\n \n-        return new NamingContextBindingsEnumeration(entries);\n+        return new NamingContextBindingsEnumeration(entries, this, env);\n \n     }\n \nIndex: resources/WARDirContext.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/naming/resources/WARDirContext.java,v\nretrieving revision 1.5\ndiff -u -r1.5 WARDirContext.java\n--- resources/WARDirContext.java\t28 Feb 2002 07:04:36 -0000\t1.5\n+++ resources/WARDirContext.java\t20 Oct 2003 14:59:10 -0000\n@@ -374,12 +374,12 @@\n     public NamingEnumeration listBindings(Name name)\n         throws NamingException {\n         if (name.isEmpty())\n-            return new NamingContextBindingsEnumeration(list(entries));\n+            return new NamingContextBindingsEnumeration(list(entries), this, env);\n         Entry entry = treeLookup(name);\n         if (entry == null)\n             throw new NamingException\n                 (sm.getString(\"resources.notFound\", name));\n-        return new NamingContextBindingsEnumeration(list(entry));\n+        return new NamingContextBindingsEnumeration(list(entry), this, env);\n     }", "id": 45942, "time": "2003-10-20T17:56:35Z", "creator": "emiller@planalytics.com", "creation_time": "2003-10-20T17:56:35Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "I have tested list() and listBindings() for NamingContext and FileDirContext and\ndo not see anything in the values returned to suggest that the values returned\ndo not conform to the Context.list() and Context.listBindings() interface.\n\nGiven that the behaviour is as expected, I see no need to apply the suggested\npatch. If you have a test case that does demonstrate a problem, please provide\nit. Without any such test case no further action will be taken on this issue\nwhich will be marked as invalid.\n\nAlso, it should be noted that the patch as is has a problem in that next() can\nno longer be called consecutively. A call to hasMore() is required before next()\ncan be called.", "id": 84101, "time": "2005-12-31T19:13:13Z", "bug_id": 23950, "creation_time": "2005-12-31T19:13:13Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 23950, "is_private": false, "text": "Created attachment 17315\nPossible patch to address this issue\n\nHere is an updated (and less ambitious) patch that should address the\nlistBinding issue noted.", "id": 84164, "time": "2006-01-03T16:34:49Z", "creator": "emiller@planalytics.com", "creation_time": "2006-01-03T16:34:49Z", "attachment_id": 17315}, {"count": 3, "text": "Created attachment 17316\nserver.xml snippet to support test case", "bug_id": 23950, "is_private": false, "id": 84165, "time": "2006-01-03T16:35:45Z", "creator": "emiller@planalytics.com", "creation_time": "2006-01-03T16:35:45Z", "tags": [], "attachment_id": 17316}, {"count": 4, "tags": [], "creator": "emiller@planalytics.com", "attachment_id": 17317, "text": "Created attachment 17317\njar file containing test ObjectFactory and Object classes and sources", "id": 84166, "time": "2006-01-03T16:37:04Z", "bug_id": 23950, "creation_time": "2006-01-03T16:37:04Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 23950, "text": "Created attachment 17318\nJSP to support test case", "id": 84167, "time": "2006-01-03T16:37:39Z", "creator": "emiller@planalytics.com", "creation_time": "2006-01-03T16:37:39Z", "is_private": false, "attachment_id": 17318}, {"count": 6, "tags": [], "bug_id": 23950, "text": "Sorry about the lack of clarification on this one.  The problem seems to arise \nwhen using a custom ObjectFactory.  To reproduce the problem:\n\nplace uploaded JSP into webapp\nplace uploaded (ObjectFactory) jar file in WEB-INF/lib\nedit server.xml to uploaded snippet:\n\n<Resource name=\"list/foo\" type=\"TestObject\"/>\n<ResourceParams name=\"list/foo\">\n  \n<parameter><name>factory</name><value>factory.TestObjectFactory</value></paramet\ner>\n</ResourceParams>\n\n<Environment name=\"list/num\" type=\"java.lang.Integer\" value=\"42\"/>\n\nThe JSP verifies that the listBinding method return an appropriate class type \nfor the foo object in the list Context.  The current implementation returns an \ninstance of org.apache.naming.ResourceRef instead of TestObject.  The \nlistBindings method seems to work fine for primitives defined as Environment \nobjects.\n\nThe patch included is against the latest branch of Tomcat (I'm not sure how the \nnaming subpackage is distributed and whether the changes can apply to less \nrecent versions).  In an effort to maintain pre-1.4 compatibility some \ncompromises are made in the exception handling of the nextElement and next \nmethods -- it would be preferable for it use a 1.4 nested Exception.\n\nI hope this helps.  Thanks!", "id": 84168, "time": "2006-01-03T16:46:50Z", "creator": "emiller@planalytics.com", "creation_time": "2006-01-03T16:46:50Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 23950, "attachment_id": null, "text": "Thanks for the clarification and a special thanks for the test case.\n\nI think I can see what the problem is. Have a quick read of section 5.1.5 of\nthis link first http://java.sun.com/j2se/1.4.2/docs/guide/jndi/spec/jndi/jndi.5.html\n\nSome of the objects being returned, including those created by a custom\nObjectFactory are References. To quote part of the doc referenced above \"When\nthe result of an operation such as Context.lookup() or Binding.getObject() is a\nReference object, JNDI attempts to convert the reference into the object that it\nrepresents before returning it to the client.\"\n\nAs far as I can see, there is no code in Binding.getObject() that will do this.\nTomcat implements it's own Context and there is code in NamingContext.lookup()\nthat resolves references (aka external links). It isn't completely clear to me\nright now where this lookup should occur in the case of Context.listBindings()\nbut as far as I can tell, if we add a <code>if (entry.value instanceof\nReference)</code> test in NamingContextBindingsEnumeration and resolve any\nReferences we find it should fix the problem. I'll work on a patch to do this.", "id": 84193, "time": "2006-01-03T22:41:11Z", "creator": "markt@apache.org", "creation_time": "2006-01-03T22:41:11Z", "is_private": false}, {"count": 8, "tags": [], "creator": "emiller@planalytics.com", "attachment_id": null, "text": "Upon further investigation it seems like the resolution from Reference to \nObject should always be handled by NamingContext.  This allows NamingContext to \nreplace its internally stored Reference with the resolved Object, which would \nnot happen if resolution was managed directly by \nNamingContextBindingsEnumeration (including my patch).  If it is not \nimplemented this way then Objects with the same name returned from listBindings\n(...) may not equal those returned by lookup(...).  I don't know if this is \ncontractually required by the JNDI SPI but it seems safer to ensure equality.", "id": 84205, "time": "2006-01-04T14:41:33Z", "bug_id": 23950, "creation_time": "2006-01-04T14:41:33Z", "is_private": false}, {"count": 9, "text": "I have applied a fix for this to TC4 and TC5 that uses NamingContext.lookup() to\nresolve references.\n\nSee http://marc.theaimsgroup.com/?l=tomcat-dev&m=113649730824960&w=2\n", "bug_id": 23950, "is_private": false, "id": 84286, "time": "2006-01-05T22:44:20Z", "creator": "markt@apache.org", "creation_time": "2006-01-05T22:44:20Z", "tags": [], "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "software+apache-httpd@kd6lvw.ampr.org", "text": "After scanning the source for mod_proxy, I saw no command to fix either the outbound IP address or TCP port number used in the backend outbound request.  Being able to set these values may be of concern when it comes to certain system FIREWALL designs for multi-homed hosts (including those virtually multi-homed due to possessing multiple IP addresses per interface).\n\nCommand: ProxyAddress <address/hostname>\nContext: server config, virtual host, \"<Proxy>\" section (including proxymatch)\nDefault: unspecified address (0.0.0.0 for IPv4; \"::/128\" for IPv6)\nStatus:  Extension\n\nThe command may appear multiple times within the same context as long as it is specifying a different address family than the other instances.\n\n- If the parameter is [0-9.] only, it is an IPv4 address.\n- If the parameter contains a \":\", it is an IPv6 address.\n- Otherwise, it is a hostname.\n\nA hostname may specify ONLY one address per address family, but may have multiple address families (i.e. both an \"A\" and \"AAAA\" record for IPv4+IPv6).  It is an error to specify a hostname that resolves to more than one address in the same address family.\n\nWhether the TCP port number should also be settable I shall leave to the maintainers to decide.  Whether this may be done with the above command (to parallel the \"Listen\" command) or a separate \"ProxyPort\" command, I also leave open.\n\nThis command is meant to correspond to like commands in other server products:  \"query-source[-v6]\" for BIND/named, or \"bindaddress[v6]\" for INN/innfeed.  It is an address used when the server needs to act as a client.", "id": 115536, "time": "2008-04-10T20:21:26Z", "bug_id": 44806, "creation_time": "2008-04-10T20:21:26Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 44806, "attachment_id": null, "id": 117174, "time": "2008-05-30T02:05:48Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-05-30T02:05:48Z", "is_private": false, "text": "*** Bug 42013 has been marked as a duplicate of this bug. ***"}, {"text": "Created attachment 22038\npatch for ProxyBindAddress [addr:port+range]\n\nA quite simple minded patch to bind to a particular address and port range\nit does\n1) bind to a give address:port+range\ne.g\nProxyBindAddress 0.0.0.0:11111+10\nbinds to 0.0.0.0 at 11111 to 11120\n\nor binds to any address given (without range and port)\nProxyBindAddress 0.0.0.0\n\nIt tries the ports sequentially until the range is exhausted for each request.\nthis is probably not optimal. - please do suggest if you know any other way of doing this.\n\nAs of now, it returns 404 rather than 503. this can be changed easily but needs modification all mod_proxy_*.c files that call ap_proxy_connect_backend", "tags": [], "bug_id": 44806, "attachment_id": 22038, "count": 2, "id": 117179, "time": "2008-05-30T07:48:50Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-05-30T07:48:50Z", "is_private": false}, {"text": "Created attachment 22039\nSlightly better, staggers the starting index so that the number of tries for bind is less", "tags": [], "bug_id": 44806, "attachment_id": 22039, "count": 3, "id": 117181, "time": "2008-05-30T09:33:09Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-05-30T09:33:09Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 44806, "attachment_id": null, "text": "Interesting patch (looking at the revised one - 0933PST).  I had not considered a port range in my suggestion, but I note the other report did, but lacks setting the IP address.\n\nParsing failure:  IPv6\n+++ modules/proxy/mod_proxy.c\t(working copy)\n@@ -1706,6 +1709,33 @@\n+    port = ap_strstr_c(arg, \":\");\n\nNote that this will catch an IPv6 address literal mid-stream as \":\" is a valid character for the literal.  \"%\" is used as the port separator in IPv6 literals.  Alternatively, use a \"strrchr()\"-type function - which returns the LAST occurance of \":\" - which still might be part of the IPv6 literal if ONLY the literal is specified (i.e. no port range at all).\n\nSince IPv6 literals have more than one colon, strchr() != strrchr() would be a valid test to detect them.\n\n+    port = ap_strstr_c(arg, \":\");\n>    if (port != strrchr(arg, \":\") port = ap_strstr_c(arg, \"%\");  //fixed?\n\nQ:  Missing parameter?\n+++ modules/proxy/mod_proxy.c\t(working copy)\n@@ -1706,6 +1709,33 @@\n+    if (!port) {\n+        psf->bind_addr = arg;\n+        psf->bind_port = 0;\n+        psf->bind_range = 1; /* when port=0, bind should not fail */\n+        return NULL;\n+    }\n\nShouldn't \"psf->bindopt_set = 1;\" also be set here too?  Else the IP address or hostname will be ignored.  I assume that \"apr_sockaddr_info_get()\" will resolve hostnames to addresses.  (see \"rewrite\" below)\n\n\"psf->bind_idx\" is not set in this case either.  However, it's used in proxy_util.c even when port is left at \"0+1\".  I note that the effective \"mod 1\" makes it useless - but using undeclared variables is messy.  It looks as if this is to round-robin the ports, but what if all are in use?  \"All ports in use\" appears to return DECLINED.  Should we have a queue of waiting outbound requests, subject to the proxy timeout value?  (Maybe this is handled elsewhere in Apache?).\n\n\n+++ modules/proxy/proxy_util.c\n@@ -2349,6 +2349,35 @@\n+                ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"proxy: %s: can not bound to %s:%d+%d\",\n\nLanguage issue:  \"cannot bind to\"\n\nAlso, what's with using \"%d\" for values that are inherently unsigned (\"%u\" should be used).  Port values and address families range 0-65535; no negative values.  Technically, the variables should be unsigned ints.\n\n\nRewrite - for efficiency:\n+++ modules/proxy/mod_proxy.c\t(working copy)\n@@ -1706,6 +1709,33 @@\n...\n+    if (!port) {\n+        psf->bind_addr = arg;\n+        psf->bind_port = 0;\n-\n-\n+*   } else {\n+        psf->bind_addr = apr_pstrndup(parms->pool, arg, port-arg);\n+        range = ap_strstr_c(port, \"+\");\n+        if (!range)\n+            return \"ProxyBindAddress format is <addr>:<port>+<range>\";\n+*       psf->bind_port = atoi(++port);\n+*       psf->bind_range = atoi(++range);   // Should this be atoi()+1 ???\n>    }\n+    psf->bind_idx = 0;\n+\n+    psf->bindopt_set = 1;\n+    return NULL;\n\nUsing \"++\" instead of \"+1\" may be more efficient for some compilers that don't realize that the added value is only a constant of 1.  OPtimizing compilers should realize this, but some may not.\n\nNo error checking on parameters yet.  \"addr:port+0\" would be accepted but isn't valid - since that currently returns a \"mod 0\" -> division by zero operation.  Bump range to be \"atoi()+1\" to avoid this, but check for >=65536, which would be the same as setting the port to zero.\n\nAlso note that with this implementation, each proxy request has to resolve the hostname part.  Granted, it's cached, but shouldn't this be done once - while parsing the configuration.  Strange things could happen if the DNS data changes.", "id": 117184, "time": "2008-05-30T10:33:54Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-05-30T10:33:54Z", "is_private": false}, {"count": 5, "tags": [], "creator": "rahul.g.nair@gmail.com", "attachment_id": 22040, "text": "Created attachment 22040\nupdated patch\n\nThanks for the detailed review,\nthe new patch incorporates the suggested changes as below,\n1) new Format for ProxyBindAddress \n      ProxyBindAddress [addr] [port]+[range]\ne.g\n      ProxyBindAddress 0.0.0.0 11111+10\n(avoid the issue of : in ipv6)\n\n2) cache the host part of the address\n3) set bind_idx and bindopt_set correctly in all cases\n4) validate params", "id": 117190, "time": "2008-05-30T12:01:39Z", "bug_id": 44806, "creation_time": "2008-05-30T12:01:39Z", "is_private": false}, {"count": 6, "tags": [], "creator": "software+apache-httpd@kd6lvw.ampr.org", "text": "Looking further at IPv6:  apr_parse_addr_port() does most of the parsing already - and it seems that IPv6 literals need to be enclosed in brackets (\"[]\").  The only thing that it doesn't handle is the +# at the end of this (for the range) - so we would need to strip that off first.  Using this routine would probably be better as that way, parsing would be done in a consistent manner.  It also checks that the port is in the range 1-65535.\n\nIf not, then in the section reading:\n+    if (!port) {\n+        psf->bind_addr = arg;\n\nshouldn't the arg also be duplicated?\n+        psf->bind_addr = apr_pstrndup(parms->pool, arg, strlen(arg));\n...or is it already in the pool?\n\nTherefore, the command parsing part of the patch becomes:\n@@ -1706,6 +1709,45 @@\n     return NULL;\n }\n \n+static const char*\n+    set_proxy_bindaddr(cmd_parms *parms, void *dummy, const char *arg)\n+{\n+    char *host, *range, *scope_id;\n+    apr_port_t port; \n+    apr_status_t rv;\n+    unsigned int x;\n+    \n+    range = ap_strstr_c(arg, \"+\");\n+    if (range) *range++ = 0;\n+    x = range ? atoi(range) + 1 : 1;\n+\n+    if ((x < 1) || (x > 65534))\n+        return \"ProxyBindAddress:  Invalid range - format is <addr>:<port>+<range>\";\n+\n+    rv = apr_parse_addr_port(&host, &scope_id, &port, arg, parms->pool);\n+\n+    if (rv != APR_SUCCESS)\n+        return \"ProxyBindAddress:  Invalid address or port - format is <addr>:<port>+<range>\";\n+\n+    if (range && port)\n+        return \"ProxyBindAddress:  Range requires valid port - format is <addr>:<port>+<range>\";\n+\n+    if (scope_id)\n+        return \"ProxyBindAddress:  IPv6 Scope not valid here - format is <addr>:<port>+<range>\";\n+\n+    proxy_server_conf *psf =\n+        ap_get_module_config(parms->server->module_config, &proxy_module);\n+\n+    if (!psf) return \"ProxyBindAddress:  Cannot allocate memory for internal structure\";\n+\n+    psf->bind_idx = 0;\n+    psf->bind_addr = host;\n+    psf->bind_port = (int) port;  // maybe unsigned int?\n+    psf->bind_range = x;\n+    psf->bindopt_set = 1;\n+    return NULL;\n+}\n+\n static const char *add_member(cmd_parms *cmd, void *dummy, const char *arg)\n {\n     server_rec *s = cmd->server;\n", "id": 117192, "time": "2008-05-30T12:35:46Z", "bug_id": 44806, "creation_time": "2008-05-30T12:35:46Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 44806, "attachment_id": null, "id": 117193, "time": "2008-05-30T14:06:10Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-05-30T14:06:10Z", "is_private": false, "text": "Revision of Specification (for Manual) - based on my last parse routine:\n\nCommand: ProxyBindAddress [<hostname/address-literal>:]<port>[+<range>]\nContext: server config, virtual host, \"<Proxy>\" section (including <ProxyMatch>)\nDefault: Address: unspecified address (0.0.0.0 for IPv4; \"::/128\" for IPv6)\n         Port: unspecified port (0 => use any port available - OS choice)\n         Range:  0 (use only the port specified, if any)\nStatus:  Extension\n\nSpecifying a hostname or an address-literal shall bind all outbound proxy requests to the IP address(es) specified or resolved.  DNS resolution is attempted at the time the proxy request is made, so if a hostname maps to multiple addresses, the address used may vary across requests.  If DNS resolution fails, the proxy request will fail.  As noted elsewhere, since IPv6 address literals contain colons, they must appear in brackets.\n\nSpecifying a non-zero port locks in that port as the one used, or if a range is specified, the first one used.  Specifying an optional range indicates how many consecutive port numbers beyond the first may be used.  Specifying a range of \"+0\" means that only the specified port is used.\n\nExamples:\n  ProxyBindAddress 192.0.2.1:10000+10\n\nThis sets the IP address to the IPv4 address of 192.0.2.1\nThere are 11 valid ports for this range:  10000-10010\n\n  ProxyBindAddress [2001:df8::1]:49151+9\n\nThis sets the IP address to the IPv6 address of 2001:df8::1\nThere are 11 valid ports for this range:  49151-49160\n\nNotes:\n\nIn the current implementation, it is not possible to specify separate port ranges for different addresses or address families.  It is also considered an error to specify an interface with an IPv6 address (\"%\" parameter).  Specifying port 0 with a range is invalid.  Specifying an address literal also locks the proxy server into the address family the literal belongs to.  Therefore, only a hostname produces an address family independent assignment assuming that both DNS A and AAAA records exist for the name.\n\n-------------------------------------------------------------\nErrata to parsing routine:\n\n1)  Boundary condition - Check value - promote \">\" to \">=\":\n+    if ((x < 1) || (x >= 65534)) ...\nSpecifying port \"1+65534\" in effect specifies all ports.  One should specify port 0 instead.\n\n2)  Boundary condition - Value wraparound.\nAdd code to check for port range wraparound as only 0-65535 is valid:\n+    if ((port + x) > 65535)\n+        return \"ProxyBindAddress:  Invalid port+range - port-wraparound to 0\";\ninsert before \"if (scope_id)\".\n\n\nTo Rahul:  You seem to have an off-by-one issue with the range in your parsing routine.  In your latest version (noon today), you also seem to \"psf->bindopt_set = 1\" and overwrite some other variables before all your error checking is done.  I think you'll find my parser (with errors above corrected) is cleaner."}, {"count": 8, "attachment_id": null, "bug_id": 44806, "text": "OOps:  Documentation change:\n\nThere are 10 valid ports for this range:  49151-49160\n\n...Not 11.\n\n", "id": 117194, "time": "2008-05-30T14:10:11Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-05-30T14:10:11Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 44806, "attachment_id": 22051, "id": 117237, "time": "2008-06-02T03:14:18Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-06-02T03:14:18Z", "is_private": false, "text": "Created attachment 22051\nUpdated patch according to comments from D.Stussy\n\nSome updates:\n    If a single port is specified with out a range, only one client request at a time can happen. All other requests will be denied. This is not a sane scenario. So I have not allowed this in configuration parsing.\n\n    Rather than checking the value of range and port separately, I have checked validity of port+range. This makes more sense (IMO and according to D.Stussy's later update)\n\n    The looked up address is cached while parsing."}, {"count": 10, "tags": [], "bug_id": 44806, "attachment_id": null, "text": "RE: Comment #9 version:\n\n1)  \"Range\" value:  Checking for (r < 1) needs to be done(*).  It's possible that an admin could specify \"ip:port+-range\" and get a negative value.  Noting that a range of zero is \"not useful,\" perhaps we need to set a minimum value for the range parameter?  In current parsing, not specifying a range at all does default it to a single port.  The question is:  What is a suitable default?  I'm thinking that it could be one of the following:\n - A fixed number, perhaps 8.\n - Some value derived from the \"MaxClients\" or \"Min/MaxSpareServers\" directive.\n - Some value derived from the Proxy Balancer code.\nWe need only check the lower value for \"r\" as the \"port+r\" code will check the upper value.  For the \"port+r\" comparison, do we have a \"MAX_PORT\" definition available (from an included file) so we don't have to hard-code the value?\n\n* - Checking \"r\" against the minimum also will take care of cases where the admin specified non-digit values for the range (which atoi() converts to zero).  However, if the port remains as zero, a range value of zero (internally, 1) is appropriate.  Patch snippet below.\n\n\n2)  \"Address\" value:  In the latest version, we're storing the address(es) returned by the apr_sockaddr_info_get() function.  By itself, I don't have a problem with that and thought that something like that should be done.  However, there are two issues with the step:\n\na)  We're fixing an address, but haven't checked to see if it was the ONLY address that the hostname resolved to.  In my original suggestion, we would need to make certain that DNS resolution produces a unique address (for a given address family).  I'm willing to DROP THAT REQUIREMENT, but then we must note in the documentation that should a hostname resolve to more than one address, all addresses returned may be used.  Dropping the uniqueness requirement per AF does make the parsing code simpler.  (If dropped, I think parsing might be finished.)\n\nb)  Should there be multiple addresses because there's multiple address families (e.g. IPv4 and IPv6), we need to try an address in the same family as the destination.  It would be a problem if we store the IPv6 address (as first) and try to reach an IPv4-only site when we ignore the IPv4 address available for the hostname we're binding to because we're not looping through the alternatives.  Apr_sockaddr_info_get() is returning ALL matching addresses, but in proxy_util.c, it looks as if we're using only the first one and not checking to see if we have a reachable address family combination of source and destination, and when not, trying another address/AF combination.  Since at a point before the patch, we've already set \"backend_addr\" (the destination) and have \"backend_addr->family\" available, I think we need to compare these:\n\n+                local_addr = conf->bind_addr;\n>> if (backend_addr->family != local_addr->family) { /* connection won't work */\n      TRY ANOTHER ADDRESS from bind_addr, if available.\nWe may need another loop beyond the port+range loop.  Inner loop or outer is your choice, but I think an inner loop is more efficient.\n\nc)  Should we pass the port value to apr_sockaddr_info_get()?  I don't think it makes a difference, but if I remember getaddrinfo() correctly (called 2 routines deep from here), it may - in that it allows us to filter out certain returns of information.  (Cf. - bug reported for INN 2.4.3 that was returning each IP address 3 times - http://groups.google.com/group/news.software.nntp/browse_thread/thread/260a927ec3f5686c/bf6d6d2854dfb0ae?#bf6d6d2854dfb0ae ).  I note that the fix for the INN bug is already in the Apache code, but maybe the port number is also needed to avoid the duplication issue?\n\n\nPARSING code changes suggested (double \"++\" for changes):\n\n++ #define MIN_RANGE 8\t       /* value subject to discussion */\n++ #define MAX_PORTS 65535\t/* may be defined from an include file */\n\t/* perhaps use \"UINT16_MAX\" from <stdint.h> ??? */\n\t/* perhaps use \"USHRT_MAX\"  from <limits.h> ??? */\n\n+    if((apr_parse_addr_port(&host, &scope_id, &port, addr, parms->pool)\n+                != APR_SUCCESS)\n+            || scope_id               /* we dont know how to use scope_id */\n+            || (!port && range)       /* only a combo [port+range] is valid */\n++           || (port && (!range || (r < MIN_RANGE)))  /* or an invalid portnumber (p+r) */\n++           || ((port + r) > MAX_PORTS) /* or a range that wraps around zero */\n+      )\n+        return \"ProxyBindAddress:  Invalid address -\"\n+               \" format is <addr>[:<port>+<range>]\";\n+\n+    /* Preparse the address */\n+    apr_sockaddr_info_get(&(psf->bind_addr), host, APR_UNSPEC, 0, 0, parms->pool);\n+\n+    psf->bind_port = port;\n+    /* If there didn't exist a port then there was no range either. so we have the\n+     * starting value 0 for r when no port was specified.*/\n++   psf->bind_range = min( port ? MIN_RANGE : 1, r + 1 );\n+    psf->bind_idx = 0;\n+    psf->bindopt_set = 1;\n+    return NULL;\n\n\nFrom proxy_util.c:\n+                    conf->bind_idx = i + 1;\n+                    break;\n+                } else {\n+                    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"proxy: %s: not bound to %s%u\",\n+                            proxy_function, conf->bind_addr, local_addr->port, NULL);\n+                }\n\nThe ELSE isn't necessary, on account of the break.  It will be optimized out.", "id": 117270, "time": "2008-06-02T14:37:56Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-06-02T14:37:56Z", "is_private": false}, {"count": 11, "tags": [], "creator": "software+apache-httpd@kd6lvw.ampr.org", "attachment_id": null, "text": "Fix the multiple address & address family match issue:\n\nmodules/proxy/proxy_util.c\t(working copy)\n+        if (conf->bindopt_set) {\n+            const int idx = conf->bind_idx;\n+            const int range = conf->bind_range;\n+            const int start = conf->bind_port;\n+            for(int i = 0; i < range; ++i) { /* loop until we can bind correctly*/\n+                int port = start + ((idx + i) % range);\n+                ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"proxy: %s: trying to bind to %s:%u\",\n+                        proxy_function, conf->bind_addr,port, NULL);\n+\n++\t\t for (local_addr = conf->bind_addr; local_addr ; local_addr = local_addr->next) {\n+\n++\t\t     if (local_addr->family != backend_addr->family) continue;\n+\n+                    local_addr->sa.sin.sin_port = htons(port);\n+                    local_addr->port = port;\n+\n+                    if ((rv = apr_socket_bind(newsock, local_addr)) == APR_SUCCESS) {\n+                        ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"proxy: %s: bound to %s:%u\",\n+                                proxy_function, conf->bind_addr, local_addr->port, NULL);\n+                        conf->bind_idx = i + 1;\n++                       goto escape;\t/* break from TWO loops */\n++                   } \n+                    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"proxy: %s: not bound to %s%u\",\n+                            proxy_function, conf->bind_addr, local_addr->port, NULL);\n+                }\n+            }\n+            if (rv != APR_SUCCESS) {\n+                ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"proxy: %s: can not bind to %s:%u+%u\",\n+                        proxy_function,conf->bind_addr, conf->bind_port, conf->bind_range, NULL);\n+                return DECLINED;\n+            }\n+        }\n++escape:\n\nInstead of the goto, one could add \"&& (rv != APR_SUCCESS)\" to the conditional of both loops.", "id": 117271, "time": "2008-06-02T15:06:44Z", "bug_id": 44806, "creation_time": "2008-06-02T15:06:44Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 44806, "attachment_id": null, "id": 117272, "time": "2008-06-02T15:17:25Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-06-02T15:17:25Z", "is_private": false, "text": "Parser - afterthought:\n\n++   psf->bind_range = min( port ? MIN_RANGE : 1, r + 1 );\n should be:\n++   psf->bind_range = port ? min( MIN_RANGE, r + 1 ) : 1;\n\nIf port == 0, r == 0 also, so we don't have to evaluate \"min(1,1)\"."}, {"text": "(In reply to comment #10)\n> 1)  \"Range\" value:  Checking for (r < 1) needs to be done(*).  It's possible\n> that an admin could specify \"ip:port+-range\" and get a negative value.  Noting\n> that a range of zero is \"not useful,\" perhaps we need to set a minimum value\n> for the range parameter?  In current parsing, not specifying a range at all\n> does default it to a single port.  The question is:  What is a suitable\n> default?  I'm thinking that it could be one of the following:\n\nMy thinking is that if the admin did not specify a range, and a port is given, then it is a configuration error, as there is a good chance that the admin did not understand the implications of restricting the port to a single value. (Note that Admin can still force the issue by setting port+0 as range if he wants it.)\n\nOn the other hand, if a port was not specified, then the system selects a free port for us so a second try is not needed any more. This is the reason bind_range is set to 1 in this case.\n\n \n> 2)  \"Address\" value:  In the latest version, we're storing the address(es)\n> returned by the apr_sockaddr_info_get() function.  By itself, I don't have a\n> problem with that and thought that something like that should be done. \n> However, there are two issues with the step:\n> \n> a)  We're fixing an address, but haven't checked to see if it was the ONLY\n> address that the hostname resolved to.  In my original suggestion, we would\n> need to make certain that DNS resolution produces a unique address (for a given\n> address family).  I'm willing to DROP THAT REQUIREMENT, but then we must note\n> in the documentation that should a hostname resolve to more than one address,\n> all addresses returned may be used.  Dropping the uniqueness requirement per AF\n> does make the parsing code simpler.  (If dropped, I think parsing might be\n> finished.)\n> \n> b)  Should there be multiple addresses because there's multiple address\n> families (e.g. IPv4 and IPv6), we need to try an address in the same family as\n> the destination.  It would be a problem if we store the IPv6 address (as first)\n> and try to reach an IPv4-only site when we ignore the IPv4 address available\n> for the hostname we're binding to because we're not looping through the\n> alternatives.  Apr_sockaddr_info_get() is returning ALL matching addresses, but\n> in proxy_util.c, it looks as if we're using only the first one and not checking\n> to see if we have a reachable address family combination of source and\n> destination, and when not, trying another address/AF combination.  Since at a\n> point before the patch, we've already set \"backend_addr\" (the destination) and\n> have \"backend_addr->family\" available, I think we need to compare these:\n> \n> +                local_addr = conf->bind_addr;\n> >> if (backend_addr->family != local_addr->family) { /* connection won't work */\n>       TRY ANOTHER ADDRESS from bind_addr, if available.\n> We may need another loop beyond the port+range loop.  Inner loop or outer is\n> your choice, but I think an inner loop is more efficient.\n> \n> c)  Should we pass the port value to apr_sockaddr_info_get()?  I don't think it\n> makes a difference, but if I remember getaddrinfo() correctly (called 2\n> routines deep from here), it may - in that it allows us to filter out certain\n> returns of information.  (Cf. - bug reported for INN 2.4.3 that was returning\n> each IP address 3 times -\n> http://groups.google.com/group/news.software.nntp/browse_thread/thread/260a927ec3f5686c/bf6d6d2854dfb0ae?#bf6d6d2854dfb0ae\n> ).  I note that the fix for the INN bug is already in the Apache code, but\n> maybe the port number is also needed to avoid the duplication issue?\n\nFrom that post, it seems the fix is to specify the protocol? how is specifying port useful?\n\n[snip]\n> +\n> +    psf->bind_port = port;\n> +    /* If there didn't exist a port then there was no range either. so we have\n> the\n> +     * starting value 0 for r when no port was specified.*/\n> ++   psf->bind_range = min( port ? MIN_RANGE : 1, r + 1 );\n\nsee above (top) explanation, I dont think we should use a MIN_RANGE (if at all, we should check the range value, and if less than MIN_RANGE, warn the user.)\n\n> +    psf->bind_idx = 0;\n> +    psf->bindopt_set = 1;\n> +    return NULL;\n> \n", "tags": [], "bug_id": 44806, "attachment_id": null, "count": 13, "id": 117274, "time": "2008-06-02T22:40:57Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-06-02T22:40:57Z", "is_private": false}, {"count": 14, "tags": [], "creator": "rahul.g.nair@gmail.com", "text": "(In reply to comment #12)\n> Parser - afterthought:\n> \n> ++   psf->bind_range = min( port ? MIN_RANGE : 1, r + 1 );\n>  should be:\n> ++   psf->bind_range = port ? min( MIN_RANGE, r + 1 ) : 1;\n> \n> If port == 0, r == 0 also, so we don't have to evaluate \"min(1,1)\".\n> \n\nthe value r starts with '0' and does not change if port was not specified\nso you dont need to check 'port? : xxxx : 1 , the value would be r+1 == 1\n", "id": 117276, "time": "2008-06-02T23:20:59Z", "bug_id": 44806, "creation_time": "2008-06-02T23:20:59Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "rahul.g.nair@gmail.com", "attachment_id": 22058, "text": "Created attachment 22058\nUpdated patch as suggested\n\nChecks address families to get a usable address.", "id": 117278, "time": "2008-06-03T00:19:25Z", "bug_id": 44806, "creation_time": "2008-06-03T00:19:25Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 44806, "attachment_id": null, "text": "RE: Comment #13\n\n1)  \"port value to apr_sockaddr_info_get()?\"  I don't know if it's significant or not for most admins - but it is one of the input values, so perhaps there is a reason that hasn't revealed itself to us:  It's passed to find_addresses() which passes it to call_resolver() which uses it with the AIX OS to set/modify the \"servname\" parameter to getaddrinfo().  I don't use AIX, but it appears significant to that OS.  Therefore, for portability, it should be passed.\n\nOne thing that I did notice:  If we're allocating a ProxyBindAddress address list where one already exists (e.g. server reconfiguration via signal HUP), we should free any existing list before assigning a new value in the parser:\n\n  if (psf->bind_addr != NULL) freeaddrinfo(psf->bind_addr);\n\nOtherwise, we could cause a slow memory leak over time.  Reading getaddrinfo()'s man page reminded me of this.\n\n2)  If you want to specifically allow the \"ip:port+0\" case, then MIN_RANGE may be set to equal 0.  I took your comment that setting the range so that only a single port was available as \"not sane\" to mean that you felt such should not be allowed.  I suggested a value of 8 so that there would always be a minimum of 8 worker ports available.  We still need to reject negative values for \"r\", so checking (r < some_value) still needs to be there.\n\nRE: Comment #14\n\nIt's still faster to evaluate \"1\" over \"r+1\" even if they yield the same result (of 1) because r = 0.", "id": 117281, "time": "2008-06-03T00:44:15Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-06-03T00:44:15Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 44806, "attachment_id": null, "text": "RE:  Comment #15 - patch:\n\nCode in modules/proxy/proxy_util.c\t(working copy)\n@@ -2349,6 +2373,21 @@\n\nDoes NOT cycle through all the addresses.  It tries the first address of the matching address family in the list, and if that fails, it fails the whole attempt.  It does not try other addresses in the same address family (e.g. multi-homed host, virtual hosts, etc.).  One address may work where another one fails due to interface, firewall, or routing table considerations.\n\nTry this:\n@@ -2349,6 +2373,19 @@\n                      \"proxy: %s: fam %d socket created to connect to %s\",\n                      proxy_function, backend_addr->family, worker->hostname);\n \n+        if (conf->bindopt_set) {\n+            for(apr_sockaddr_t *addr = conf->bind_addr; addr; addr = addr->next) {\n+                if (addr->family != backend_addr->family) continue;\n+                if (bind_to_addr(newsock, laddr, proxy_function, conf, s) == APR_SUCCESS)\n+                    break;\n+                ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"proxy: %s: can not bind to %s:%u+%u\",\n+                        proxy_function,conf->bind_addr, conf->bind_port, conf->bind_range, NULL);\n+            }\n+            if (!addr)\n+                return DECLINED;\n+            }\n+        }\n+\n         /* make the connection out of the socket */\n         rv = apr_socket_connect(newsock, backend_addr);\n ", "id": 117282, "time": "2008-06-03T01:04:31Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-06-03T01:04:31Z", "is_private": false}, {"text": "> 1)  \"port value to apr_sockaddr_info_get()?\"  I don't know if it's significant\n> or not for most admins - but it is one of the input values, so perhaps there is\n> a reason that hasn't revealed itself to us:  It's passed to find_addresses()\n> which passes it to call_resolver() which uses it with the AIX OS to set/modify\n> the \"servname\" parameter to getaddrinfo().  I don't use AIX, but it appears\n> significant to that OS.  Therefore, for portability, it should be passed.\n\nThe port we have is only one of the values going to be used (unless the range is set to 0) so I dont think it is correct to pass it.\n\nFrom apr_sockaddr_info_get, it is used to work around a problem with AIX which\nrefuses a service \"0\" and the solution is to set it to \"1\". this hints that the port name is not important (read the comments above that line too.)\n\n> One thing that I did notice:  If we're allocating a ProxyBindAddress address\n> list where one already exists (e.g. server reconfiguration via signal HUP), we\n> should free any existing list before assigning a new value in the parser:\n> \n>   if (psf->bind_addr != NULL) freeaddrinfo(psf->bind_addr);\n> \n> Otherwise, we could cause a slow memory leak over time.  Reading\n> getaddrinfo()'s man page reminded me of this.\n\nok\n \n> 2)  If you want to specifically allow the \"ip:port+0\" case, then MIN_RANGE may\n> be set to equal 0.  I took your comment that setting the range so that only a\n> single port was available as \"not sane\" to mean that you felt such should not\n> be allowed.\n\nIt is not sane, so using a warning just like when MaxClients set to too low :)\n\n>  I suggested a value of 8 so that there would always be a minimum\n> of 8 worker ports available.  We still need to reject negative values for \"r\",\n> so checking (r < some_value) still needs to be there.\n\nThis is there in the patch (r < 0)\n\n\n> RE: Comment #14\n> \n> It's still faster to evaluate \"1\" over \"r+1\" even if they yield the same result\n> (of 1) because r = 0.\n\nin your case, you have a ternery embedded, I suspect the cost would be the same in that case :)\n\n", "tags": [], "bug_id": 44806, "attachment_id": null, "count": 18, "id": 117283, "time": "2008-06-03T01:43:37Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-06-03T01:43:37Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 44806, "attachment_id": null, "id": 117284, "time": "2008-06-03T01:48:09Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-06-03T01:48:09Z", "is_private": false, "text": "> >   if (psf->bind_addr != NULL) freeaddrinfo(psf->bind_addr);\n> > \n> > Otherwise, we could cause a slow memory leak over time.  Reading\n> > getaddrinfo()'s man page reminded me of this.\n> \n\ncall_resolver seems to be doing a freeaddrinfo on the original address list, and\nreturning back a duplicated list allocated from the pool. So I guess freeaddrinfo is incorrect in the pool-alloced mem.\n"}, {"count": 20, "tags": [], "creator": "software+apache-httpd@kd6lvw.ampr.org", "text": "One last thing that I noticed:\n\napr_sockaddr_info_get(&(psf->bind_addr), ...\n\nIf NO DNS records matched, psf->bind_addr would be set to NULL, and we should probably issue an error - and KEEP any prior list we happen to have (but I don't think we will have a prior list - wouldn't the [prior] config pool be released before the re-read?).  Should a second occurance of this command in the same context be flagged as an error or just overwrite the first occurance?\n\nCode:\n...\n+    /* Preparse the address */\n+    apr_sockaddr_info_get(&(psf->bind_addr), host, APR_UNSPEC, port, 0, parms->pool);\n++   if (psf->bind_addr == NULL)\n++       return \"ProxyBindAddress:  Hostname did not resolve\";\n++  /* If an address literal was specified, that should have resolved. */\n+\n+    psf->bind_port = port;\n...\n\nEven if it's unnecessary, I don't see any harm in passing \"port\" to the resolver.  Granted that if non-zero, it is lowest numbered port to use, but zero vs. non-zero uses could be significant in the future.  You've questioned why pass it?  I say why not?\n\n> call_resolver seems to be doing a freeaddrinfo ...\n\nApr_sockaddr_info_get() sets it to NULL before call_resolver ever sees it.  However, you seem to be correct in that the getaddrinfo() list does seem to be freed.  We should release the copy of it allocated to the pool, as we may have a memory leak - but it appears that such gets released only when the pool is terminated as there's no way to release individual items allocated from a pool.  If we know that the prior pool has already been released when the parser is called, then I don't see a problem.  (I wish I were more familiar with Apache's overall design.)", "id": 117311, "time": "2008-06-03T12:29:33Z", "bug_id": 44806, "creation_time": "2008-06-03T12:29:33Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "creator": "rahul.g.nair@gmail.com", "attachment_id": 22068, "text": "Created attachment 22068\nupdates\n\n1) pass port to info_get\n2) look for addr resolution error or !addr", "id": 117322, "time": "2008-06-04T00:24:30Z", "bug_id": 44806, "creation_time": "2008-06-04T00:24:30Z", "is_private": false}, {"text": "Created attachment 22074\nPARTIAL patch - used during debugging.\n\nRE:  Patch at comment #21\n\nmodules/proxy/mod_proxy.c\nParser:  Boundary condition.  If we're defining PORT_MAX_PORTS as 65536 (0x00010000), then \"(ports+r) >= ...\" on line 1741 is the error condition we need to check for.  Add an equals sign.\n\nmodules/proxy/proxy_util.c\n@@ -2349,6 +2373,20 @@  Non-critical issue (cosmetic):\nNote:  In your design, you're reporting the error of a failure to bind for the first address only when all fail, while in my version in comment #17, moving the ap_log_error() call inside the loop (and after the break) will report EACH address that fails, even if some address succeeds.  We also don't need to keep the status in \"rv\" as \"addr\" will be set on success and NULL on failure.  Difference:\n\nYour version:  Reports the error only if all addresses & ports fail.\nMy version:  Reports an error for each address where all ports fail.\n\nThis issue does not affect the operation of the function, but depending on what the admin is doing (production vs. testing a configuration), it may be useful to have a log entry for each address failing as opposed to merely reporting the first.\n\nIf you want to keep the error message outside of the loop (as the inner function \"bind_to_addr()\" has sufficient debug statements, perhaps the message should read:\n\n+                ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"proxy: %s: All addresses and ports in range specified failed to bind\",\n+                        proxy_function, NULL);\n--------------\nAs adjusted, I attempted to install the patch and run it.  I found the following problems when patching against a stock version 2.2.8:\n\n+++ modules/proxy/mod_proxy.c\t(working copy)\n@@ -35,6 +35,12 @@\nPatch was rejected.  I manually inserted it.  Trailing text did not match.\n\nAll other items did install, but some had different line offsets.\n\nCompilation errors:\nMy C compiler did not like the declarations inside the for() loops\nmodules/proxy/proxy_util.c: 2275:  \"int i\"\nmodules/proxy/proxy_util.c: 2378:  \"apr_sockaddr_t *addr\"\nMoving those declarations outside of the loops onto their own line worked.\n\nWith those two changes, all compiles without error and without warnings.\n\nOperation:\nProxyBindAddress allowed in main server configuration.\nProxyBindAddress allowed inside VirtualHost configuration.\nProxyBindAddress allowed inside <IfModule mod_proxy.c> configuration.\nProxyBindAddress NOT allowed inside <Proxy \"*\"> configuration - acceptable, but unexpected.\n\nConfigured it with a hostname only resolving to one IPv4 and one IPv6 address.\nDid NOT see any binding attempts in logs.\nSaw ONLY \"[error] proxy: HTTP: All addresses and ports in range specified failed to bind\"\nRemoved address-family comparison; added AF to debug string; recompiled.\n\nStill saw it.  Inserted a debug-log entry and found conf->bind_addr is NULL.  Set port options in the config file - different options for the main configuration and a virtual host that has proxy service, but found that at the time of the call, port+range = \"0+0\" - NOT the same as set.\n\nAre we certain that the configuration pointer value used when proxying is the same configuration pointer value that was used during configuration - i.e. same memory address?\n\nLive log file:\n[Wed Jun 04 22:31:30 2008] [debug] mod_proxy.c(855): Running scheme http handler (attempt 0)\n[Wed Jun 04 22:31:30 2008] [debug] mod_proxy_http.c(1822): proxy: HTTP: serving URL http://lasvegas.en.craigslist.org/robots.txt\n[Wed Jun 04 22:31:30 2008] [debug] proxy_util.c(1855): proxy: HTTP: has acquired connection for (*)\n[Wed Jun 04 22:31:30 2008] [debug] proxy_util.c(1916): proxy: connecting http://lasvegas.en.craigslist.org/robots.txt to lasvegas.en.craigslist.org:80\n[Wed Jun 04 22:31:31 2008] [debug] proxy_util.c(2015): proxy: connected /robots.txt to lasvegas.en.craigslist.org:80\n[Wed Jun 04 22:31:31 2008] [debug] proxy_util.c(2197): proxy: HTTP: fam 2 socket created to connect to *\n[Wed Jun 04 22:31:31 2008] [debug] proxy_util.c(2204): ProxyBindAddress: conf->bind_addr is NULL, port=0, range=0 (0825BCD8)\n[Wed Jun 04 22:31:31 2008] [error] proxy: HTTP: All addresses and ports in range specified failed to bind\n\nJust in case I made any accidental changes, I've included my differences, complete with DEBUGGING statements that should be removed before the final version is released and incorporated into the mainstream program.\n\nFile:  modules/proxy/mod_proxy.h - patch same as proposed, and therefore excluded.", "tags": [], "bug_id": 44806, "attachment_id": 22074, "count": 22, "id": 117350, "time": "2008-06-04T15:54:49Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-06-04T15:54:49Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 44806, "attachment_id": null, "id": 117361, "time": "2008-06-05T02:54:47Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-06-05T02:54:47Z", "is_private": false, "text": "> \n> modules/proxy/mod_proxy.c\n> Parser:  Boundary condition.  If we're defining PORT_MAX_PORTS as 65536\n> (0x00010000), then \"(ports+r) >= ...\" on line 1741 is the error condition we\n> need to check for.  Add an equals sign.\n\nok\n \n> modules/proxy/proxy_util.c\n> @@ -2349,6 +2373,20 @@  Non-critical issue (cosmetic):\n> Note:  In your design, you're reporting the error of a failure to bind for the\n> first address only when all fail, while in my version in comment #17, moving\n> the ap_log_error() call inside the loop (and after the break) will report EACH\n> address that fails, even if some address succeeds.  We also don't need to keep\n> the status in \"rv\" as \"addr\" will be set on success and NULL on failure. \n> Difference:\n> \n> Your version:  Reports the error only if all addresses & ports fail.\n> My version:  Reports an error for each address where all ports fail.\n \nActually if you check my version of bind_to_addr, you will see that I am printing a log on each time an attempt is made to bind, with a log that reports when a binding is successful. I think there is no loss of information in my case too. (Any address that was tried but did not result in a bind is a failed attempt.)\n\n> As adjusted, I attempted to install the patch and run it.  I found the\n> following problems when patching against a stock version 2.2.8:\n> \n> +++ modules/proxy/mod_proxy.c   (working copy)\n> @@ -35,6 +35,12 @@\n> Patch was rejected.  I manually inserted it.  Trailing text did not match.\n> \n> All other items did install, but some had different line offsets.\n\nMy diffs were against 2.3 trunk. since this is valid in trunk also we should change the version to trunk ?\n\n> Compilation errors:\n> My C compiler did not like the declarations inside the for() loops\n> modules/proxy/proxy_util.c: 2275:  \"int i\"\n> modules/proxy/proxy_util.c: 2378:  \"apr_sockaddr_t *addr\"\n> Moving those declarations outside of the loops onto their own line worked.\n\nok\n\n> Operation:\n> ProxyBindAddress allowed in main server configuration.\n> ProxyBindAddress allowed inside VirtualHost configuration.\n> ProxyBindAddress allowed inside <IfModule mod_proxy.c> configuration.\n> ProxyBindAddress NOT allowed inside <Proxy \"*\"> configuration - acceptable, but\n> unexpected.\n> \n> Configured it with a hostname only resolving to one IPv4 and one IPv6 address.\n> Did NOT see any binding attempts in logs.\n> Saw ONLY \"[error] proxy: HTTP: All addresses and ports in range specified\n> failed to bind\"\n> Removed address-family comparison; added AF to debug string; recompiled.\n> \n> Still saw it.  Inserted a debug-log entry and found conf->bind_addr is NULL. \n> Set port options in the config file - different options for the main\n> configuration and a virtual host that has proxy service, but found that at the\n> time of the call, port+range = \"0+0\" - NOT the same as set.\n\n> Are we certain that the configuration pointer value used when proxying is the\n> same configuration pointer value that was used during configuration - i.e. same\n> memory address?\n\nThat is interesting, In my testing, it seems to work fine? could you check this against a 2.3 trunk checkout?\n\n> Just in case I made any accidental changes, I've included my differences,\n> complete with DEBUGGING statements that should be removed before the final\n> version is released and incorporated into the mainstream program.\n> \n> File:  modules/proxy/mod_proxy.h - patch same as proposed, and therefore\n> excluded.\n\n"}, {"count": 24, "tags": [], "bug_id": 44806, "attachment_id": null, "text": "1)  If it works for you in the current source tree (v 2.3-prerelease), then so be it.  I found my way to \"http://svn.apache.org/repos/asf/httpd/httpd/trunk/\" but saw no way to download a current snapshot at once as an archive.  Is there someone else who can test it?  We should have someone else look at this anyway.\n\n2)  Looking back at the code and the manual, I'm wondering if we should also try to implement a version at the proxy worker level (via the ProxyPass or PorxySet commands).  That is, different workers and different backend sites could have different settings than the main configuration.  Maybe it should only be allowed in \"balancer\" declarations.  I have not looked into how feasible this is - and maybe it should be opened as a separate feature request.  Your option.\n\n3)  Documentation - Revision for syntax:\n\nCommand: ProxyBindAddress (hostname|address-literal)[:port+range]\nContext: server config, virtual host", "id": 117413, "time": "2008-06-05T13:59:05Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-06-05T13:59:05Z", "is_private": false}, {"count": 25, "tags": [], "creator": "rahul.g.nair@gmail.com", "text": "Adding a proxypass like directive at worker level (I assume you are refering to allowing interface selection to be based on url) is probably better. I will take a look at how it can be done.\n", "id": 117459, "time": "2008-06-07T02:51:28Z", "bug_id": 44806, "creation_time": "2008-06-07T02:51:28Z", "is_private": false, "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 44806, "attachment_id": null, "id": 117474, "time": "2008-06-07T18:07:23Z", "creator": "software+apache-httpd@kd6lvw.ampr.org", "creation_time": "2008-06-07T18:07:23Z", "is_private": false, "text": "RE: comment #25\n\n...Or a <proxy balancer:...> section too, if possible.\n\nLet's publish the final version of our patch in the meantime as that would be the default if no proxy-worker-specific choice is made."}, {"count": 27, "tags": [], "creator": "software+apache-httpd@kd6lvw.ampr.org", "text": "Created attachment 22134\nFinal Patch - basic \"ProxyBindAddress\" command\n\nI believe that this is the final version of the patch for the basic command - without allowing this to be set on a per proxy-worker basis.  Does everyone agree?", "id": 117762, "time": "2008-06-17T11:19:43Z", "bug_id": 44806, "creation_time": "2008-06-17T11:19:43Z", "is_private": false, "attachment_id": 22134}, {"count": 28, "tags": [], "creator": "software+apache-httpd@kd6lvw.ampr.org", "text": "Not having heard anything, I'm going to close the enhancement as resolved.  Should anyone want to take this further, such as to allow this to be settable by various proxy-worker threads, then please \"clone the bug\" and continue.  Meanwhile, let's commit this to the current distribution version.", "id": 117957, "time": "2008-06-24T22:22:20Z", "bug_id": 44806, "creation_time": "2008-06-24T22:22:20Z", "is_private": false, "attachment_id": null}, {"count": 29, "tags": [], "creator": "rahul.g.nair@gmail.com", "text": "Proxy/Balancer Worker specific configuration added as a new bug at\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=45405\n", "id": 118695, "time": "2008-07-16T00:34:43Z", "bug_id": 44806, "creation_time": "2008-07-16T00:34:43Z", "is_private": false, "attachment_id": null}]
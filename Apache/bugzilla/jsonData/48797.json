[{"count": 0, "tags": [], "bug_id": 48797, "attachment_id": 25038, "text": "Created attachment 25038\nThe patch\n\nHi,\n\nI attach a patch (got with \"svn diff\") to reduce the size of ps and eps files generated with a PSGraphics2D. I put very simples macros and gave the possibility to disable clipping.\n\nBest regards,\n\nCalixte", "id": 134783, "time": "2010-02-22T18:35:10Z", "creator": "calixte.denizet@ac-rennes.fr", "creation_time": "2010-02-22T18:35:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 48797, "text": "(In reply to comment #0)\n> Created an attachment (id=25038) [details]\n> The patch\n[...]\n> I attach a patch (got with \"svn diff\") to reduce the size of ps and eps files\n> generated with a PSGraphics2D. I put very simples macros [...]\n\nGreat! :-)  I guess it's better to state that this was already somehow discussed in the mailing list (bug's URL set to the specific thread).\n\nI'm also slightly rephrasing the summary and adding metadata to reflect a patch (which was already lightly reviewed) being available.\n\n\n> and gave the\n> possibility to disable clipping.\n\nWill this require some sort of documentation aside from the JavaDoc?\n\n\n> Best regards,\n> \n> Calixte\n\nThanks,\n Helder", "id": 134797, "time": "2010-02-22T21:35:26Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2010-02-22T21:35:26Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Thanks for your patch, Calixte. To produce smaller PS files, your patch makes perfect sense. However, I'm wondering if we should not make it configurable whether the standard commands or the short macros should be used. When debugging PostScript I find it desirable not to have to memorize all the one or two letter commands. Also, having the full commands in the Java source code would also improve readability. I'm thinking about a translation method in PSGenerator that converts the full commands to short ones if that is enabled (probably true by default). Something like this:\n\npublic String command(String postscriptCommand);\n\nwhen compact mode enabled:\ncommand(\"setlinejoin\") --> \"LJ\"\nwhen compact mode disabled:\ncommand(\"setlinejoin\") --> \"setlinejoin\"\n\nSo before we apply Calixte's patch, I'd like to ask around for opinions on this.", "attachment_id": null, "id": 135418, "creator": "jeremias@apache.org", "time": "2010-03-18T10:20:40Z", "bug_id": 48797, "creation_time": "2010-03-18T10:20:40Z", "is_private": false}, {"count": 3, "tags": [], "creator": "bowditch_chris@hotmail.com", "attachment_id": null, "text": "Hi All,\n\nI agree with Jeremias. This change should be optional, because the shorthands make the Postscript difficult to read and debug.\n\nThanks,\n\nChris", "id": 135427, "time": "2010-03-18T12:23:34Z", "bug_id": 48797, "creation_time": "2010-03-18T12:23:34Z", "is_private": false}, {"count": 4, "tags": [], "creator": "calixte.denizet@ac-rennes.fr", "attachment_id": null, "text": "Hello all,\n\nI agree with Jeremias too.\n\nCalixte", "id": 135428, "time": "2010-03-18T12:31:50Z", "bug_id": 48797, "creation_time": "2010-03-18T12:31:50Z", "is_private": false}, {"count": 5, "text": "Jeremias,\n\nsince you ask for it, here are my 2cts:\n\nyes, the switch you mention makes sense, but I'd prefer it the other way round: Default should be smallest size, and the longer option could be \"debug\" or \"verbose\". Why? Because most people don't manually debug PostScript, but want to send it to their printer.\n\nMax", "bug_id": 48797, "attachment_id": null, "id": 135429, "time": "2010-03-18T13:25:58Z", "creator": "max@berger.name", "creation_time": "2010-03-18T13:25:58Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "Patch applied with modifications: http://svn.apache.org/viewvc?view=revision&revision=924840\n\nThank you all for your quick comments. Since there were already 3 positive comments on this, I've added the option more or less as proposed.\nMax, we were actually on the same page (compact shall be default).\n\nThanks, Calixte, for getting the ball rolling.", "attachment_id": null, "bug_id": 48797, "id": 135432, "time": "2010-03-18T15:08:49Z", "creator": "jeremias@apache.org", "creation_time": "2010-03-18T15:08:49Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 48797, "attachment_id": null, "id": 135433, "time": "2010-03-18T15:21:21Z", "creator": "calixte.denizet@ac-rennes.fr", "creation_time": "2010-03-18T15:21:21Z", "is_private": false, "text": "Jeremias,\n\nYou should put a setter in EPSTranscoder and PSTranscoder to enable or to disable the clipping (since the method disableClipping is available in AbstractPSDocumentGraphics2D). When clipping is disabled, I can divide by 2 the size of the generated ps,eps.\n\nThanks a lot...\n\nCalixte"}, {"count": 8, "tags": [], "bug_id": 48797, "attachment_id": null, "text": "Calixte, do you want to send a patch? Maybe a clever refactoring of PDFGraphics2D could actually improve things in a better way. Currently, the clipping shape is established for every shape operation which is why this probably has such a big effect on file size. The \"disableClipping\" is just a work-around but is not really fixing the problem, it would seem.\n\n(In reply to comment #7)\n> Jeremias,\n> \n> You should put a setter in EPSTranscoder and PSTranscoder to enable or to\n> disable the clipping (since the method disableClipping is available in\n> AbstractPSDocumentGraphics2D). When clipping is disabled, I can divide by 2 the\n> size of the generated ps,eps.\n> \n> Thanks a lot...\n> \n> Calixte", "id": 135436, "time": "2010-03-18T15:36:37Z", "creator": "jeremias@apache.org", "creation_time": "2010-03-18T15:36:37Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 48797, "attachment_id": null, "id": 135437, "time": "2010-03-18T16:45:14Z", "creator": "calixte.denizet@ac-rennes.fr", "creation_time": "2010-03-18T16:45:14Z", "is_private": false, "text": "(In reply to comment #8)\n> Calixte, do you want to send a patch? Maybe a clever refactoring of\n> PDFGraphics2D could actually improve things in a better way. Currently, the\n> clipping shape is established for every shape operation which is why this\n> probably has such a big effect on file size. The \"disableClipping\" is just a\n> work-around but is not really fixing the problem, it would seem.\n> \n\nI'm not sure that \"disableClipping\" is just a workaround... that depends of what you draw. In my case, the clipping shape is determinated as the bounding box of my datas, so I know that what I draw is always included in the clipping shape, so no need to check and to consume resources !\n\nI agree with you when you don't really know what you draw : a solution could be to make the clipping on the Java side and to send the \"clipped\" object to the PS writer. If you want I can work on this solution and send you a patch, it could be an interesting feature... I'll look at PDFGraphics2D..."}]
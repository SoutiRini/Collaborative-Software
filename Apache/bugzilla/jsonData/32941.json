[{"count": 0, "tags": [], "bug_id": 32941, "attachment_id": null, "text": "Generally ThreadDeath should be passed through all catch statements, so that the\nthread can terminate cleanly; not simply reported, or wrapped in another\nexception. Of course finally blocks can and should still run to do necessary\ncleanup.\n\nI observed one case where a forked Java process was being run (from the NetBeans\nIDE), and sending Thread.stop() (to forcibly halt the build process) resulted in\na BuildException being reported, which is not desirable.", "id": 69214, "time": "2005-01-04T21:23:23Z", "creator": "jglick@apache.org", "creation_time": "2005-01-04T21:23:23Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 32941, "attachment_id": 13886, "text": "Created attachment 13886\nSimple patch to rethrow ThreadDeath", "id": 69215, "time": "2005-01-04T21:24:04Z", "creator": "jglick@apache.org", "creation_time": "2005-01-04T21:24:04Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 32941, "attachment_id": null, "is_private": false, "id": 69273, "time": "2005-01-06T16:36:56Z", "creator": "jkf@apache.org", "creation_time": "2005-01-06T16:36:56Z", "text": "Actually there are 119 other places where Throwable is caught (includes test\ncode though)\nI suspect in > 90% of the cases a \"mere\" Exception instead of Throwable would do.\nApart from the ThreadDeath it seems also unwise to continue after a\nVirtualMachineError. Sometimes it would probably even be more appropriate to not\nchatching at all (as when doing a new on a class with an empty constructor in a\nmandatory part of ant)"}, {"count": 3, "tags": [], "bug_id": 32941, "is_private": false, "id": 69322, "attachment_id": null, "creator": "jglick@apache.org", "creation_time": "2005-01-07T02:09:33Z", "time": "2005-01-07T02:09:33Z", "text": "Yes, there are probably a lot of places where the catch clause is unnecessarily\ngeneral... e.g. if something throws an OutOfMemoryError, do you *really* want to\ncatch that and rethrow it? Probably just makes things worse."}, {"count": 4, "tags": [], "bug_id": 32941, "attachment_id": null, "is_private": false, "id": 69348, "time": "2005-01-07T14:06:36Z", "creator": "stevel@apache.org", "creation_time": "2005-01-07T14:06:36Z", "text": "well maybe we should have a static filter function that gets called on throwables\n\ncatch(Throwable t) {\n Project.rethrowNotForCatching(t);\n ...\n\n}\n\nrethrowNotForCatching would use instanceof tests to decide what to do.\n\nThis may seem somewhat bad form but with the logic in one place we can tune it.\nI have used this technique in other projects. "}, {"count": 5, "tags": [], "bug_id": 32941, "attachment_id": null, "id": 73022, "time": "2005-03-29T22:07:13Z", "creator": "jglick@apache.org", "creation_time": "2005-03-29T22:07:13Z", "is_private": false, "text": "For now, just dealing with the particular case of ExecuteJava.execute(), since\nthis is a place where the active Ant thread is likely to be waiting for a\nsignificant amount of time:\n\n  wait();\n\nand where a ThreadDeath is likely to be sent to if the main thread is halted.\nThere are certainly other places where Throwable is caught where it should not\nbe, but I don't have time to fix all of them now."}, {"count": 6, "tags": [], "creator": "jglick@apache.org", "is_private": false, "text": "Checking in src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java;\n/home/cvs/ant/src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java,v  <-- \nExecuteJava.java\nnew revision: 1.50; previous revision: 1.49\ndone\n\n\nChecking in src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java;\n/home/cvs/ant/src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java,v  <-- \nExecuteJava.java\nnew revision: 1.38.2.7; previous revision: 1.38.2.6\ndone\n", "id": 73024, "time": "2005-03-29T22:40:12Z", "bug_id": 32941, "creation_time": "2005-03-29T22:40:12Z", "attachment_id": null}]
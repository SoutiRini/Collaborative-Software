[{"count": 0, "tags": [], "creator": "tzachi.strugo@behalf.com", "attachment_id": null, "id": 199401, "time": "2017-06-25T12:48:10Z", "bug_id": 61217, "creation_time": "2017-06-25T12:48:10Z", "is_private": false, "text": "IdentityOutputFilter not write all bytes in case the response was increased in servlet filter\n\nscenario:\n1. Add filter servlet that changed the content of the response(increase the size).\n2. add controller that create response with header content-type\n\nExample:\n  originalResponse message - 'Example of response to request-1'\n  modify response - 'Example of response to cmVxdWVzdC0x' \n\nthe size of original is 33 \nthe size of the modify is 36\n\nThe response of the servlet will be only 33 chars from the modify response: \n'Example of response to cmVxdWVzd'\n\nThe reason is that response initialize IdentityOutputFilter with content length of the original.\nthe doWrite method get byte chunk but it remove the bytes that bigger than \nin case response contains Content-Length header the IdentityOutputFilter will try to write buffer. \n\n if (result > remaining) {\n                    // The chunk is longer than the number of bytes remaining\n                    // in the body; changing the chunk length to the number\n                    // of bytes remaining\n                    chunk.setBytes(chunk.getBytes(), chunk.getStart(),\n                                   (int) remaining);\n                    result = (int) remaining;\n                    remaining = 0;\n                }"}, {"count": 1, "tags": [], "text": "Version 8.0.33 is over a year old, and many changes have been implemented since then.  Please try your test with the current level (8.0.44) and see if the problem still exists.", "attachment_id": null, "id": 199402, "creation_time": "2017-06-25T15:37:09Z", "time": "2017-06-25T15:37:09Z", "creator": "chuck.caldarale@unisys.com", "bug_id": 61217, "is_private": false}, {"count": 2, "tags": [], "text": "What sets the Content-Length header to 33?", "is_private": false, "bug_id": 61217, "id": 199405, "time": "2017-06-25T19:21:21Z", "creator": "markt@apache.org", "creation_time": "2017-06-25T19:21:21Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Guys thank you for the quick response! \n\nChuck,\nbefore i opened the bug i saw source code of version 44 and IdentityOutputFilter class have the same logic as 33. \ni will try to run it with 8.0.44.  \n\nMark,\n\nit is a good question.\n\nbut before i answer that i want to share the info that i am running embedded tomcat version 8.0.33 via spring boot. \n\nas you can see from below stack trace spring invoke my controller and flush the response right after that.\nso IdentityOutputFilter initialize at that point.\n\nThen the thread return back to my filter that responsible to modify it and write it again. \nresponse.getOriginalResponse().getWriter().write(modifyResponseContent);\nThe IdentityOutputFilter instance is already initialized with remaining of the original response.\n\nStackTrace:\nhttp-nio-9999-exec-5@12102\" daemon prio=5 tid=0x19 nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n\t  at org.apache.coyote.http11.filters.IdentityOutputFilter.setResponse(IdentityOutputFilter.java:118)\n\t  at org.apache.coyote.http11.AbstractOutputBuffer.addActiveFilter(AbstractOutputBuffer.java:200)\n\t  at org.apache.coyote.http11.AbstractHttp11Processor.prepareResponse(AbstractHttp11Processor.java:1492)\n\t  at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:739)\n\t  at org.apache.coyote.Response.action(Response.java:179)\n\t  at org.apache.coyote.Response.sendHeaders(Response.java:350)\n\t  at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:335)\n\t  at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:317)\n\t  at org.apache.catalina.connector.Response.flushBuffer(Response.java:496)\n\t  at org.apache.catalina.connector.ResponseFacade.flushBuffer(ResponseFacade.java:318)\n\t  at javax.servlet.ServletResponseWrapper.flushBuffer(ServletResponseWrapper.java:176)\n\t  at com.zazma.bewebapp.filter.ResponseWrapper.flushBuffer(ResponseWrapper.java:70)\n\t  at org.springframework.http.server.ServletServerHttpResponse.flush(ServletServerHttpResponse.java:96)\n\t  at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:206)\n\t  at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81)\n\nQuestions:\n1. In case the controller return JSON (without header Content-Length)it execute ChunkedOutputFilter. \n\t1.1 what is the different between dose output filter?\n\t1.2 why in IdentityOutputFilter ignore the bytes that bigger than remaining\n\t\t\t// The chunk is longer than the number of bytes remaining\n            // in the body; changing the chunk length to the number\n            // of bytes remaining\n            chunk.setBytes(chunk.getBytes(), chunk.getStart(),\n                                (int) remaining);", "attachment_id": null, "id": 199418, "creation_time": "2017-06-26T11:38:45Z", "time": "2017-06-26T11:38:45Z", "creator": "tzachi.strugo@behalf.com", "bug_id": 61217, "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 199435, "time": "2017-06-26T16:49:52Z", "bug_id": 61217, "creation_time": "2017-06-26T16:49:52Z", "is_private": false, "text": "When the response is flushed, the HTTP headers are written to the client. At that point, if a content-length is set, that content-length is fixed.\n\nIf you don't want this behaviour, wrap the response and prevent the application setting the content-length header. This will cause a switch to chunked encoding.\n\nNote that the only spec compliant way to modify the output is to wrap the response and handle all the changes in the wrapped response. This can get quite tricky, quite quickly."}]
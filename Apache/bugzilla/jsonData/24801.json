[{"count": 0, "attachment_id": null, "bug_id": 24801, "text": "The following *is* true with Apache 2.0.47 on Windows.  It *may* well be true \non other platforms as well -- I've not done sufficient testing to say for \ncertain.\n\nApache crashes when the number of distinct users authenticating against LDAP \nexceeds the setting used for LDAPCacheEntries.  This does not always occur on \nfirst exceeding this cache size, but in my experience it will invariably occur \nafter a few occurences of exceeding the cache size.\n\nA little debugging strongly suggests that there is an issue with the code which \nremoves old entries from the cache in this case.\n\nThe workaround is either to use a value of 0 for LDAPCacheEntries, i.e. disable \nthe cache, or use a value that is larger than your user population plus some \nsafety factor.  The safety factor is necessary in that it appears to be \npossible to have more than one entry for a given user in the cache.  This \nappears to occur when one request is using the user entry when another request \nfor authenticating the same user comes in.\n\nThis issue is masked by bug #24800 and cannot be reached until you work around \nit.", "id": 47582, "time": "2003-11-18T22:36:21Z", "creator": "jessh@ptc.com", "creation_time": "2003-11-18T22:36:21Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "P.S.  I believe this issue might may still be masked by an undersized shared\nmemory block even though bug #24800 appears to be fixed in 2.0.49.\n\nFor instance with:\n\n  LDAPCacheEntries 2150\n  # Next line was necessary last I checked as 0 caused issues with active cache\n  LDAPOpCacheEntries  1\n  LDAPSharedCacheSize 865000\n  LDAPSharedCacheFile logs/mod_ldap_cache\n\nI get a child process crash one I get to somewhere between 2151 and 2155\ndistinct users.\n\nFinally, I'm pretty sure I verified that this issue exists on Solaris and AIX as\nwell -- but I clearly forgot to note it here.", "attachment_id": null, "id": 57843, "creator": "jessh@ptc.com", "time": "2004-05-21T17:00:25Z", "bug_id": 24801, "creation_time": "2004-05-21T17:00:25Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 24801, "text": "Trying to look at this now, although I'm not that familiar with the cache code.\nDo you have an example of a stacktrace where the crash is occuring?\n\nI'm trying to work out why the problem would be in cache cleanup rather than in\nadding to the cache - maybe it's an edge case somewhere in the cleanup?\n", "id": 57853, "time": "2004-05-21T18:10:29Z", "creator": "minfrin@sharp.fm", "creation_time": "2004-05-21T18:10:29Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "is_private": false, "id": 57866, "time": "2004-05-21T20:27:33Z", "bug_id": 24801, "creation_time": "2004-05-21T20:27:33Z", "text": "It's a long-standing bug that the shared memory caching code does not check for\nthe apr_rmm_*alloc functions returning NULL, so it will of course die horribly\nif the rmm segment fills up and the code tries to allocate more:\n\nreturn (void *)apr_rmm_addr_get(cache->rmm_addr, apr_rmm_calloc(cache->rmm_addr,\nsize));\n"}, {"count": 4, "tags": [], "creator": "jessh@ptc.com", "attachment_id": null, "text": "That is a separate bug -- which I believe has been fixed in/by 2.0.49 -- at\nleast my test case for it no longer failed there.\n\nThis bug is about the case where the physical shared memory bytes are sufficient\nbut the specified logical cache size (i.e. # of entries) is not.\n\nIn this case, the cache should simply purge older entries.  Instead it crashes\n(attempting to do this).  I've been meaning to generate a stack trace, but have\nnot managed yet.", "id": 57869, "time": "2004-05-21T20:43:56Z", "bug_id": 24801, "creation_time": "2004-05-21T20:43:56Z", "is_private": false}, {"count": 5, "tags": [], "creator": "minfrin@sharp.fm", "is_private": false, "id": 57893, "creation_time": "2004-05-22T02:06:29Z", "time": "2004-05-22T02:06:29Z", "bug_id": 24801, "text": "Created attachment 11633\nAdd checking for NULL in *_rmm_* functions", "attachment_id": 11633}, {"count": 6, "attachment_id": null, "bug_id": 24801, "is_private": false, "id": 57894, "time": "2004-05-22T02:06:57Z", "creator": "minfrin@sharp.fm", "creation_time": "2004-05-22T02:06:57Z", "tags": [], "text": "Does this patch make any difference for you?\n"}, {"count": 7, "tags": [], "creator": "minfrin@apache.org", "attachment_id": null, "text": "In util_ald_cache_insert(), it attempts to add an item to the cache. There is no\ncheck for whether the cache is full, because it is assumed that on the edge case\n(of the very last cache entry being allocated) util_ald_cache_purge() will run,\nwhich again is assumed to bring down the cache size.\n\nSo in this case, it looks like util_ald_cache_purge() is not bringing down the\ncache size, so on the next entry we overflow.\n\nTry this patch and see if it makes a difference - it checks for overflow before\nwe add, not after. The purge code is probably still broken, but at least we\nwon't segfault.", "id": 57896, "time": "2004-05-22T02:43:20Z", "bug_id": 24801, "creation_time": "2004-05-22T02:43:20Z", "is_private": false}, {"count": 8, "tags": [], "creator": "minfrin@apache.org", "attachment_id": 11634, "text": "Created attachment 11634\nAdd sanity check so that we don't overflow if purge fails for any reason", "id": 57897, "time": "2004-05-22T02:44:19Z", "bug_id": 24801, "creation_time": "2004-05-22T02:44:19Z", "is_private": false}, {"count": 9, "tags": [], "creator": "minfrin@sharp.fm", "attachment_id": null, "id": 57941, "creation_time": "2004-05-23T22:29:34Z", "time": "2004-05-23T22:29:34Z", "bug_id": 24801, "text": "Just committed the above patches to the v2.1.0-dev tree, as they stomp on the\nsegfaults.\n\nThe cache problem remains however, if the cache sizes at set to 1, mod_auth_ldap\nstarts returning auth failures.\n", "is_private": false}, {"count": 10, "tags": [], "bug_id": 24801, "text": "I applied the patch provided to 2.0.49 sources (the latest I had readily\navailable) and get a crash with the following traceback (on Windows).  Note this\nwas for user 2161 with a cache size of 2150.  Also note that this executable\nalso includes the latest patches for util_ldap.c [for authenticated LDAP server\naccess] and mod_auth_ldap.c [for avoiding double-escaping with Microsoft's LDAP\nSDK].\n\nutil_ldap_dn_compare_node_compare(void * 0x00815b98, void * 0x04d4de80) line 91\n+ 12 bytes\nutil_ald_cache_fetch(util_ald_cache * 0x00d8008c, void * 0x04d4de80) line 351 +\n17 bytes\nutil_ldap_cache_checkuserid(request_rec * 0x6fb51341, util_ldap_connection_t *\n0x007dd1e8, const char * 0x0078ced0, const char * 0x007799c8, int 7991832, char\n* * 0x00000002, const char * 0x00000000, const char * 0x04d4def0, const char * *\n0x007dee59, const char * * * 0x04d4dee4) line 766 + 22 bytes\nmod_auth_ldap_check_user_id(request_rec * 0x6ff10e5f) line 334\nap_run_check_user_id(request_rec * 0x007dd1e8) line 69 + 31 bytes\nap_process_request_internal(request_rec * 0x6ff0d6f8) line 193 + 6 bytes\nap_process_request(request_rec * 0x007dd1e8) line 245\nap_process_http_connection(conn_rec * 0x6ff0423f) line 250 + 6 bytes\nap_run_process_connection(conn_rec * 0x007c8ab8) line 42 + 31 bytes\nap_process_connection(conn_rec * 0x007c8ab8, void * 0x007c89e8) line 175 + 6 bytes\nworker_main(long 2013300156) line 718\nMSVCRT! 780085bc()\nKERNEL32! 7c581af6()\n\nOnce I let this process die a new child process is created and the test set (of\n2500 users) works fine.\n\nFor testing this sort of thing, I recommend just exporting a single user (with\npassword) from LDAP and using this export as a template to programmatically\ncreate many users all the same attributes except for the user name.  You can\nthen use a simple program, script, or even Ant to attempt to fetch an\nauthenticated resource on behalf of each user in turn.", "id": 57985, "time": "2004-05-24T20:07:26Z", "creator": "jessh@ptc.com", "creation_time": "2004-05-24T20:07:26Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 24801, "attachment_id": null, "id": 58070, "time": "2004-05-25T17:54:57Z", "creator": "minfrin@sharp.fm", "creation_time": "2004-05-25T17:54:57Z", "is_private": false, "text": "Patches to fix segfaults in the cache code were applied to v2.1.0-dev and\nv2.0.50-dev. Testing this by reducing the cache sizes to a size of 1 show that\nthe segfaults are gone, but the mod_auth_ldap module is returning an auth fail\nwhen it shouldn't, and the cache gets full and stays full.\n\nI have created a new bug report for this: 29207.\n\n\n*** This bug has been marked as a duplicate of 29207 ***"}, {"count": 12, "tags": [], "bug_id": 24801, "attachment_id": null, "id": 60372, "time": "2004-07-09T16:14:33Z", "creator": "jessh@ptc.com", "creation_time": "2004-07-09T16:14:33Z", "is_private": false, "text": "> Note that the last time I tested the cache entry overflow it still\n> crashed when I through 2500 unique user login attempts at a 2150\n> entry cache.  This is more representative of our real use cases\n> than 5 unique users against a single user entry cache or the like\n> and I've not had a chance to (or much interest in) testing this\n> particular case.\n\nI've built an Apache 2.0.50 from sources for Windows (to get HTTPS support, of\ncourse, plus tiny extensions to mod_deflate and sockopt -- which is missing\nsend-buffer-size configurability on Windows) and re-ran the test noted above.\n\nI get a 100% repeatable crash at around user 2160, i.e. the buffer overflow is\n*not* fixed, at least not on Windows.  [I can test Solaris and AIX when I get\nthose binaries built.]\n\nIn short, this bug is *not* fixed in 2.0.50."}, {"count": 13, "tags": [], "bug_id": 24801, "attachment_id": 12817, "text": "Created attachment 12817\nFix to util_ald_cache_purge() to relink lists properly", "id": 63992, "time": "2004-09-21T16:51:07Z", "creator": "jessh@ptc.com", "creation_time": "2004-09-21T16:51:07Z", "is_private": false}, {"count": 14, "tags": [], "creator": "jessh@ptc.com", "attachment_id": null, "is_private": false, "id": 63993, "time": "2004-09-21T16:54:32Z", "bug_id": 24801, "creation_time": "2004-09-21T16:54:32Z", "text": "As per the last comment, I have found the problem behind this bug:\nutil_ald_cache_purge() simply never relinked the linked list entries during\ncache purge.  Instead it freed various elements in the linked list without\nupdating any linked list pointers, thus begging for trouble as the memory is\nreused, etc...\n\nAlso, I know this has been resolved as \"duplicate\", but the fix I have found\nproves that the problem was not limited to \"duplicate\"' bug 29207.  I am thus\nreopening this until someone commits my patch."}, {"count": 15, "attachment_id": null, "bug_id": 24801, "is_private": false, "id": 64373, "time": "2004-09-29T17:52:40Z", "creator": "bnicholes@apache.org", "creation_time": "2004-09-29T17:52:40Z", "tags": [], "text": "The final patch for this bug that fixes the util_ald_cache_purge()relink \nproblem has been backported and posted.  See \ndist/httpd/patches/apply_to_2.0.52."}, {"count": 16, "attachment_id": null, "bug_id": 24801, "is_private": false, "id": 64528, "time": "2004-10-03T16:17:46Z", "creator": "minfrin@apache.org", "creation_time": "2004-10-03T16:17:46Z", "tags": [], "text": "*** Bug 29207 has been marked as a duplicate of this bug. ***"}]
[{"count": 0, "tags": [], "creator": "b.eicki@gmx.net", "is_private": false, "text": "If I try to expand a rather huge zip file (in my case 42910 files, 783359kb \nuncompressed, 66906kb compressed) using the unzip task I get a \n\njava.lang.OutOfMemoryError: requested 37904 bytes for Chuck::new. Out of swap \nspace?\n\nMy Java Options (Jdk 1.5.0_08 / Jdk 1.6_01) are\n\nANT_OPTS=-XX:NewRatio=2 -Xms512m -Xmx1024m -verbose:gc -XX:+PrintGCDetails\n\non a windows xp pro 32-bit system with a total of 2 GB memory available.\nThe problem now seems that this operation does not need much memory from the \nheap, so only one gc happens\n\n[GC [DefNew: 139776K->17472K(157248K), 0.1300398 secs] 139776K->29555K(506816K),\n 0.1301295 secs]\n\nwhile the memory usage given by the windows task manager for the java process \nconstantly increases towards 1GB before the process terminates.\nIf I reduce either Xms or increase NewRatio more gc happen and the memory usage \nas shown by the task manager never increases to more than 400 MB. At each gc it \ndrops to 200 MB or less.\nDecreasing Xms or increasing NewRatio is obviously a valid workaround for me, \nbut nevertheless it is some kind of a memory leak here.\n\nI even tried to find a cause for this (native) memory leak and it seems to be \nwithin org.apache.tools.zip.ZipFile. For me it seems that \"new Inflater(true)\"\ncauses this problem (though changing it simply to false will of course not \nwork), because the problem still occurs if you comment out \"extractFile\" method \nin Expand.java such that nothing is really done except opening up input streams \nfrom the ZipFile for a number of ZipEntry objects.\n\nSo maybe this is in its core not a bug of ant, but a bug of the native java \nimplementation for windows.", "id": 104521, "time": "2007-06-19T06:33:21Z", "bug_id": 42696, "creation_time": "2007-06-19T06:33:21Z", "attachment_id": null}, {"attachment_id": 24269, "tags": [], "bug_id": 42696, "is_private": false, "count": 1, "id": 130421, "time": "2009-09-15T10:45:53Z", "creator": "schlosna@gmail.com", "creation_time": "2009-09-15T10:45:53Z", "text": "Created attachment 24269\nClose zip entry input streams\n\nI am encountering a similar issue using the unzip task on IBM AIX using Ant 1.6.5 and Java 1.5 and 1.6. The error I see is: \"java.lang.OutOfMemoryError: ZIP004:OutOfMemoryError, MEM_ERROR in inflateInit2\". We are performing several unzip tasks, including extracting a large WAR (~200MB) from a large EAR (~500MB). We are using ANT_OPTS=\"-Xms384M -Xmx1024M\"\n\nI looked into the org.apache.tools.ant.taskdefs.Expand.expandFile(FileUtils, File, File) code and it does not appear to be closing the input stream (and in turn the java.util.zip.Inflater instance for the returned java.util.zip.InflaterInputStream) for the zip entry, so I'm wondering if this is part of the problem. I've attached a patch to close each zip input stream."}, {"count": 2, "tags": [], "text": "a modified version of the patch went into svn revision 815599 - it would be great if you could verify this fixed the original problem as well.\n\nSo far I expected the ZipFile code to be the cultprit, in particular I assumed the internal bookkeeping was too much for an archive that big.", "attachment_id": null, "id": 130434, "creator": "bodewig@apache.org", "time": "2009-09-15T21:13:52Z", "bug_id": 42696, "creation_time": "2009-09-15T21:13:52Z", "is_private": false}, {"count": 3, "tags": [], "creator": "michael.ebinger@allianz.de", "text": "Stefan your Bugfix doesnt work for me. I get still an java.lang.OutOfMemoryError on a jar file with 27MB and 15.000 entries.\nIt disappears when inserting an trace.\nlog(\"expand \"+ze.getName(), Project.MSG_INFO);\nbefore the try block.", "id": 132667, "time": "2009-12-08T01:52:18Z", "bug_id": 42696, "creation_time": "2009-12-08T01:52:18Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 42696, "attachment_id": null, "id": 132696, "time": "2009-12-09T09:40:44Z", "creator": "bodewig@apache.org", "creation_time": "2009-12-09T09:40:44Z", "is_private": false, "text": "(In reply to comment #3)\n> Stefan your Bugfix doesnt work for me. I get still an\n> java.lang.OutOfMemoryError on a jar file with 27MB and 15.000 entries.\n> It disappears when inserting an trace.\n> log(\"expand \"+ze.getName(), Project.MSG_INFO);\n> before the try block.\n\nThe log statement probably creates more temporary objects and adds pressure to the garbage collector, thus making the problem go away.\n\nFrom the original description and David's analysis it seems as if java.util.zip.InflaterInputStream wasnt releasing all resources, even once closed.\n\nOf course we can always add a debug statement if it helps avoiding the problem.  svn revision 888888 (cool revision number, isn't it?)"}, {"count": 5, "tags": [], "bug_id": 42696, "is_private": false, "id": 147890, "attachment_id": 27282, "creator": "melhaj@murex.com", "creation_time": "2011-07-13T11:30:47Z", "time": "2011-07-13T11:30:47Z", "text": "Created attachment 27282\na patch to rg/apache/tools/zip/ZipFile.java to end the inflater when the InflaterInputStream is closed\n\nThe OutOfMemoryError still happens with the head version. Although the fix to this bug was a call to the close() of the zip file input stream after each expand, the Inflater's native end() is never called, and thus memory is never released. This is because we are not using the InflaterInputStream's default Inflater, we are passing a new instance (you can check that InflaterInputStream at close ends the inflater only if it is the default inflater, and not passed from outside). I have patched ZipFile (check attached) to explicitly end the inflater when the input stream is closed, and the problem is resolved"}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "text": "Thanks, patch applied as svn revision 1146020 \n\nIt turns out that Harmony's code will invoke end(), but OpenJDK's does not.\n\nI've also opened https://issues.apache.org/jira/browse/COMPRESS-139 and will port your patch to commons-compress as well.  Thanks!\n\nBTW, if you want your full name to appear in the contributors list, jsut drop my a note.", "id": 147896, "time": "2011-07-13T13:46:26Z", "bug_id": 42696, "creation_time": "2011-07-13T13:46:26Z", "is_private": false, "attachment_id": null}]
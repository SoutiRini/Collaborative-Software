[{"count": 0, "tags": [], "creator": "mcrocker@markcrocker.com", "attachment_id": null, "is_private": false, "id": 33247, "time": "2003-03-16T01:42:56Z", "bug_id": 18031, "creation_time": "2003-03-16T01:42:56Z", "text": "I have discovered a class file that has multiple CONSTANT_Class entries in the\nConstantPool that point to the same CONSTANT_Utf8 class name string.  The\nConstantPoolGen.lookupClass(String) method seems to return the index for the\nLAST of the two CONSTANT_Class entries instead of the first.  Details are\navailable from:\nhttp://www.markcrocker.com/~mcrocker/Computer/Purifier/wrongClassrefIssue.shtml\n\nThis is a problem because I am attempting to create pure Java J2ME preverifier\n(The Purifier: http://www.markcrocker.com/~mcrocker/Computer/Purifier/). \nIdeally, it should produce the same StackMaps as SUN's preverifier.  However, in\nthe case of this unusual class, it cannot because it uses BCEL and BCEL's\nlookupClass produces a different index than SUN's preverifier for the particular\nclass that happens to have two possible indecies."}, {"count": 1, "tags": [], "creator": "mcrocker@markcrocker.com", "attachment_id": null, "is_private": false, "id": 33661, "time": "2003-03-23T20:02:08Z", "bug_id": 18031, "creation_time": "2003-03-23T20:02:08Z", "text": "\nThe fix is quite simple.  Basically, the class_table is stored in a HashMap. \nHashMaps assume that there is only one entry per key, which is not the case in\nthese bizarre obfuscated classes.  The solution is to check to see if the key\nexists already before put'ing another one.  This explains why BCEL's\nConstantPoolGen.lookupClass(String) was always finding the LAST case, rather\nthan the first.  The fix is:\n\noriginal line 118:\n\tclass_table.put(u8Bytes, new Index(i));\n\nsuggested replacement:\n\n\tString u8Bytes = u8.getBytes();\n\tif (!class_table.containsKey(u8Bytes)) {\n\t\tclass_table.put(u8Bytes, new Index(i));\n\t}\n\nNote that this problem occurs with ALL of the HashMaps that are used to store\nnon-trivial types in the ConstantPoolGen class.  This fix should be applied to\nall of those cases as well.\n"}, {"count": 2, "tags": [], "bug_id": 18031, "text": "\nOops, sorry.  Previous comment had a typo.  Should have been:\n\noriginal line 118:\n\tclass_table.put(u8.getBytes(), new Index(i));\n", "id": 33662, "time": "2003-03-23T20:40:27Z", "creator": "mcrocker@markcrocker.com", "creation_time": "2003-03-23T20:40:27Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "dbrosius@mebigfatguy.com", "attachment_id": null, "is_private": false, "id": 71062, "time": "2005-02-16T07:40:54Z", "bug_id": 18031, "creation_time": "2005-02-16T07:40:54Z", "text": "Of course, the same could be said for addClass_, but then that would go \nagainst the seemingly explicit wishes of the client code. I think I would vote \nfor requiring the client code to filter the passed in array of Constants.\n\n  public ConstantPoolGen(Constant[] cs) {\n  }"}, {"count": 4, "tags": [], "bug_id": 18031, "attachment_id": null, "id": 86367, "creation_time": "2006-03-02T03:14:50Z", "time": "2006-03-02T03:14:50Z", "creator": "tcurdt@apache.org", "text": "So what do we do about this? Mark as WONTFIX?", "is_private": false}, {"count": 5, "text": "i could go either way. the suggested fix probably won't hurt anything.", "bug_id": 18031, "attachment_id": null, "id": 86592, "time": "2006-03-08T06:41:01Z", "creator": "dbrosius@apache.org", "creation_time": "2006-03-08T06:41:01Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 18031, "attachment_id": null, "text": "I've applied that pattern to all maps in that class (or should be do that in other classes as well?).\nPlease cross-check.", "id": 86675, "time": "2006-03-10T13:03:31Z", "creator": "tcurdt@apache.org", "creation_time": "2006-03-10T13:03:31Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 58519, "attachment_id": null, "id": 185844, "time": "2015-10-22T10:49:42Z", "creator": "kaszaq+bz.apache.org@gmail.com", "creation_time": "2015-10-22T10:49:42Z", "is_private": false, "text": "Hi,\nRecently I had catalina log grow in few seconds to enormous sizes, partially due to problems with mentioned method. Instead of creating and declared ClassNotFoundException it throws \"java.lang.IllegalStateException: Can't overwrite cause\".\n\nLooking into the code  I found here: http://grepcode.com/file/repo1.maven.org/maven2/org.apache.tomcat/tomcat-catalina/8.0.23/org/apache/catalina/loader/WebappClassLoaderBase.java#WebappClassLoaderBase.checkStateForClassLoading%28java.lang.String%29\n\n1309    protected void checkStateForClassLoading(String className) throws ClassNotFoundException {\n1310        // It is not permitted to load new classes once the web application has\n1311        // been stopped.\n1312        try {\n1313            checkStateForResourceLoading(className);\n1314        } catch (IllegalStateException ise) {\n1315            ClassNotFoundException cnfe = new ClassNotFoundException();\n1316            cnfe.initCause(ise);\n1317            throw cnfe;\n1318        }\n1319    }\n\nI belive the problem is caused by setting initcause on created class when constructor\nnew ClassNotFoundException()\n\nhas explicty stated:\n\n71     public ClassNotFoundException() {\n72         super((Throwable)null);  // Disallow initCause\n73     }\n\nWhich during initCause is producing mentioned exception:\n\n454     public synchronized Throwable initCause(Throwable cause) {\n455         if (this.cause != this)\n456             throw new IllegalStateException(\"Can't overwrite cause with \" +\n457                                             Objects.toString(cause, \"a null\"), this);\n458         if (cause == this)\n459             throw new IllegalArgumentException(\"Self-causation not permitted\", this);\n460         this.cause = cause;\n461         return this;\n462     }"}, {"count": 1, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "text": "Ack.\n\n1) Tomcat side.\n\n> 1314        } catch (IllegalStateException ise) {\n> 1315            ClassNotFoundException cnfe = new ClassNotFoundException();\n> 1316            cnfe.initCause(ise);\n> 1317            throw cnfe;\n> 1318        }\n\ninitCause() usually is used for compatibility for 1.3 and earlier versions of java that did not have a Throwable(Throwable cause) constructor. There is no ClassNotFoundException(Throwable) constructor, but there is (String, Throwable) one.\n\nCalling initCause() here is a recent code, introduced in r1596004 (17 months ago) with additional refactoring in r1640087.\n\n> \n> I belive the problem is caused by setting initcause on created class when\n> constructor\n> new ClassNotFoundException()\n> \n> has explicty stated:\n> \n> 71     public ClassNotFoundException() {\n> 72         super((Throwable)null);  // Disallow initCause\n> 73     }\n\nThe above nasty trick in JRE is old. E.g. 5u20 already has it...\n\n\n\n2) The trigger for this behaviour is a bug in your own web application.\n\nYou cannot load classes when the web application (and its class loader) has already been stopped.\n\nIf you need help with fixing this bug in your application, ask on the users mailing list. Don't forget to provide version numbers and full stack trace.\n\nhttp://tomcat.apache.org/lists.html#tomcat-users\nhttp://markmail.org/message/ntwrtxeke4agdexj", "id": 185846, "time": "2015-10-22T11:48:11Z", "bug_id": 58519, "creation_time": "2015-10-22T11:48:11Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 58519, "attachment_id": null, "text": "No need, thanks. Trigger of this was inside hazelcast library.\n\nHazelcast that loads class for itself called a function on ClassLoader which was expected to throw ClassNotFoundException in case of any problem. I believe that if ClassLoader would throw expected ClassNotFoundException the problem would not occur.\n\nHowever I am considering to report this to them as well as RuntimeException from any method should not cause the entire Hazelcast cluster to collapse - which is exactly what have happened because of the bug reported here and badly handling of runtime exceptions in Hazelcast.\n\nThe problem was caused by deploy of new version of application when the previous was was not undeployed correctly by Tomcat.", "id": 185855, "time": "2015-10-22T20:02:06Z", "creator": "kaszaq+bz.apache.org@gmail.com", "creation_time": "2015-10-22T20:02:06Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "markt@apache.org", "text": "Thanks for the report.\n\nThis has been fixed in trunk and 8.0.x for 8.0.29 onwards.", "id": 185911, "time": "2015-10-24T13:57:03Z", "bug_id": 58519, "creation_time": "2015-10-24T13:57:03Z", "tags": [], "is_private": false}]
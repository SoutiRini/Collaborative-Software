[{"attachment_id": 30053, "tags": [], "creator": "nicholas@nicholaswilliams.net", "text": "Created attachment 30053\nPatch to implement improvement suggestion\n\nCurrently o.a.tomcat.jni.Library uses System#loadLibrary(String) to load the APR/native library. This is hard-coded and unchangeable. Therefore, the only ways to get the library loaded are:\n\n1) Add the library file to the system library path.\n2) Customize the system library path AT STARTUP (you can't change the system library path at runtime without using reflection to clear the library path cache).\n\nHowever, it would be very nice if the native library could be loaded without 1 or 2. This would enable loading it from a location determined at runtime OR loading it with a Java startup property without customizing the system library path.\n\nI propose a new system property org.apache.tomcat.jni.Library.LIBRARY_FILE that enables specification of the APR/native library file, which would be loaded with System#load(String). In the absence of this property, o.a.tomcat.jni.Library would look for the library using the traditional logic. This way you could specify the library location at startup from the command line:\n\n-Dorg.apache.tomcat.jni.Library.LIBRARY_FILE=/path/to/tcnative.lib.file\n\nOR at runtime when, for example, using an Embedded Tomcat (before Tomcat#start() is called, of course):\n\nSystem.setProperty(Library.LIBRARY_FILE_PROPERTY, \"/path/to/tcnative.lib.file\");\n\nI have attached a patch that implements this proposal. I can successfully load the library manually, load it with traditional logic, or not load it at all (if no property and library not on the path).\n\nIt would be great if this could also be back-ported to Tomcat 7.0.", "count": 0, "id": 165851, "time": "2013-03-15T03:28:09Z", "bug_id": 54700, "creation_time": "2013-03-15T03:28:09Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 54700, "attachment_id": null, "id": 173907, "time": "2014-03-18T19:36:31Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-03-18T19:36:31Z", "is_private": false, "text": "I'm curious what the user case is for \"manually loading\" the library. Under what conditions would you not know its location prior to JVM launch?"}, {"count": 2, "tags": [], "bug_id": 54700, "is_private": false, "text": "My specific use case:\n\nWe're creating a lightweight application that runs using an embedded Tomcat instance. We want to ship one JAR that does everything for any* OS. This means embedding the .dll/.so4/.jnilib files in the JAR and, while starting up the embedded Tomcat from the main method, discovering the OS and picking the correct APR/native library file to copy to the temp directory and point Tomcat to.\n\n* \"Any\" means Windows, Max OS X, RedHat/CentOS, SuSE/OpenSUSE, Debian/Ubuntu.", "id": 173908, "time": "2014-03-18T19:54:40Z", "creator": "nicholas@nicholaswilliams.net", "creation_time": "2014-03-18T19:54:40Z", "attachment_id": null}, {"count": 3, "text": "So your Java application is actually a self-deployer that puts files in certain places and then launches Tomcat in an embedded fashion? Don't you know where you are going to put your libraries, even if you don't know what OS you are on (e.g. ./libs or TMPDIR/myapp)? Are you launching from a script or expecting people to double-click directly on a .JAR file, so your first opportunity for inspecting anything is in the Java code itself?\n\nI'm not saying that this feature wouldn't be useful, but I'm not yet convinced its necessary.", "bug_id": 54700, "attachment_id": null, "id": 173910, "time": "2014-03-18T20:01:30Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-03-18T20:01:30Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "nicholas@nicholaswilliams.net", "attachment_id": null, "text": "Again in our very specific use case, this application is launching as a WebStart. That means it must be able to run either if the browser automatically launches it OR if the user double-clicks the JAR from wherever they downloaded it to. It uses a temporary folder for any tasks that strictly require a real file system. It cleans up after itself before it completes shutdown by deleting all the files it created.", "id": 173912, "time": "2014-03-18T20:09:32Z", "bug_id": 54700, "creation_time": "2014-03-18T20:09:32Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 54700, "text": "(In reply to Nick Williams from comment #4)\n> Again in our very specific use case, this application is launching as a\n> WebStart.\n\nIt would seem like this scenario argues strongly against trying to use native libraries at all, and instead stick to pure Java.  Given all the platform-specific dependencies that tomcat-native has, you'd be avoiding a ton of potential issues.", "id": 173916, "time": "2014-03-18T20:52:03Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2014-03-18T20:52:03Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "text": "If there are 2 workers, and first has 10 members, second has 2 members.\n\nin ./native/common/jk_lb_worker.c:find_best_byvalue\nConsider the following scenario.\n1.first worker has handled 6 requests, next_offset=6.\n2.now there comes a request redirecting to second worker, next_offset jumps to 1.\n3.next request redirect to first worker will be assigned to the second member,\nthe other member will never be used.", "bug_id": 44147, "is_private": false, "id": 112246, "time": "2007-12-27T22:09:19Z", "creator": "zealot0630@gmail.com", "creation_time": "2007-12-27T22:09:19Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "zealot0630@gmail.com", "text": "Created attachment 21325\nThe patch to fix this problem", "id": 112247, "time": "2007-12-27T22:11:24Z", "bug_id": 44147, "creation_time": "2007-12-27T22:11:24Z", "is_private": false, "attachment_id": 21325}, {"count": 2, "tags": [], "bug_id": 44147, "attachment_id": null, "id": 112358, "time": "2007-12-31T11:38:46Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2007-12-31T11:38:46Z", "is_private": false, "text": "Thank you for reporting the problem. Your patch has been applied in a slightly\nmodified form and will be released as part of version 1.2.27:\n\nhttp://svn.apache.org/viewvc?rev=607768&view=rev\n\nSince we released 1.2.26 only a week ago, it might take 2-4 months until 1.2.27.\n\nPlease note: the problem you describe is not a serious one. Although the code\nwas not really correct, it will be hard to observe this problem in reality. The\nalgorithm will always search through all available members of a load balancer in\norder to find the member with the least load. next_offset is *only* really\nuseful when one uses the busyness algorithm for balancing (which is not the\ndefault).\n\nIf one uses busyness, and the load is low, it is likely, that several workers\nhave the same load value (=busyness), most likely the value 0. Let's assume for\nsimplicity, that all members always have busyness 0. Without next_offset, we\nwould then always choose the first member of a balancer. That would be OK,\nbecause whenever we have to choose a member, there would be no load at all. But\nstill it would be counterintuitive to always choose the same member with a load\nbalancer. So next_offset rotates the starting point of the search loop in order\nto make the decision between members of the same load status a little more balanced.\n\nIt would be even more correct, to put next_offset into the shared memory data of\nthe lb, to make it shared between all processes. I decided to *not* do that,\nbecause there is a tradeoff between the additional overhead of a shared memory\nvolatile on the one hand and slightly better balancing for busyness+prefork+low\nload on the other hand."}]
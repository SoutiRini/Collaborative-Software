[{"count": 0, "tags": [], "creator": "arnauldvm@gmail.com", "attachment_id": null, "text": "The DailyRollingFileAppender (DRFA) tries to rename the log file during roll over. \nHowever, when the rename fails, it ends up overwriting the log file, hence\nloosing information.  In particular, on Windows, the file rename can fail if\nanother thread has the file open.\n\nThis problem was found in 1.2.8 and still exists in 1.2.15.\n\nThe problem was already described in bug 29726, but at that time the solution\nwas left to 1.3. Then it was again addressed in bug 41735, but only for\nRollingFileAppender (RFA). I also talked about it on log4j-user ML\n(http://mail-archives.apache.org/mod_mbox/logging-log4j-user/200709.mbox/%3cc8485ef10709040538k2074c3aag644f7b19a3a41e81@mail.gmail.com%3e).\n\nI created a unit test that reproduces the problem (and also tests RFA), and made\na patch to solve this problem.\n\nThe problem was reproduced with both log4j 1.2.9 & 1.2.15 in the following\nconfigurations (all combinations):\n - Win XP SP1, Win XP SP2, Win 2K3\n - JDK 1.4.2_03-b02, 1.5.0_10-b03, 1.6.0_02-b06\n - JUnit 3.8.1\n\nThe following patch applies on 1.2.15 and addresses the issue:\n(I tested it in all the above configurations.)\n\nIndex: DailyRollingFileAppender.java\n===================================================================\n--- DailyRollingFileAppender.java\t(revision 572567)\n+++ DailyRollingFileAppender.java\t(working copy)\n@@ -319,16 +319,19 @@\n \n     File file = new File(fileName);\n     boolean result = file.renameTo(target);\n+    boolean continueToAppend = false;\n     if(result) {\n       LogLog.debug(fileName +\" -> \"+ scheduledFilename);\n     } else {\n-      LogLog.error(\"Failed to rename [\"+fileName+\"] to [\"+scheduledFilename+\"].\");\n+      //   if file rename failed, reopen file with append = true\n+      LogLog.warn(\"Failed to rename [\"+fileName+\"] to [\"+scheduledFilename+\"].\");\n+      continueToAppend = true;\n     }\n \n     try {\n       // This will also close the file. This is OK since multiple\n       // close operations are safe.\n-      this.setFile(fileName, false, this.bufferedIO, this.bufferSize);\n+      this.setFile(fileName, continueToAppend, this.bufferedIO, this.bufferSize);\n     }\n     catch(IOException e) {\n       errorHandler.error(\"setFile(\"+fileName+\", false) call failed.\");", "id": 108105, "time": "2007-09-13T01:07:45Z", "bug_id": 43374, "creation_time": "2007-09-13T01:07:45Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 20806\nPatch solving the issue", "attachment_id": 20806, "id": 108106, "creator": "arnauldvm@gmail.com", "time": "2007-09-13T01:08:42Z", "bug_id": 43374, "creation_time": "2007-09-13T01:08:42Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 43374, "text": "Created attachment 20807\nUnit test reproducing the bug", "id": 108107, "time": "2007-09-13T01:12:36Z", "creator": "arnauldvm@gmail.com", "creation_time": "2007-09-13T01:12:36Z", "is_private": false, "attachment_id": 20807}, {"count": 3, "tags": [], "bug_id": 43374, "attachment_id": 20809, "id": 108112, "time": "2007-09-13T02:19:58Z", "creator": "arnauldvm@gmail.com", "creation_time": "2007-09-13T02:19:58Z", "is_private": false, "text": "Created attachment 20809\nPatch solving the issue\n\n(Cleaner version of the patch)"}, {"count": 4, "tags": [], "bug_id": 43374, "attachment_id": null, "id": 108384, "time": "2007-09-19T11:36:54Z", "creator": "carnold@apache.org", "creation_time": "2007-09-19T11:36:54Z", "is_private": false, "text": "Committed changes in rev 577413.\n\nI could not come up with a scenario where it would be undesirable to append to\nthe base log file name, so instead of calculating whether to append based on\nrename failure, I just hard-coded it to append.  I created a much simpler test\nto add to the existing DRFATestCase that fails with the old code.\n\nChanged the bug title since the DRFA is expected to delete files, but not to\nlose messages.\n"}, {"count": 5, "attachment_id": null, "bug_id": 43374, "is_private": false, "id": 141649, "time": "2010-11-12T02:04:35Z", "creator": "gujrathi1@avaya.com", "creation_time": "2010-11-12T02:04:35Z", "tags": [], "text": "There is a similar bug 44932, which is reported for log4j version 1.2.15. Does this fix also address the issue mentioned in the bug 44932? There is an issue we have for our application where in rare scenarios, the rollover files are getting deleted and our application starts writing to a single log file which then grows to over 50GB. We are using log4j version 1.2.15.\nSo I am not sure if we should move to the latest version 1.2.16 which has this fix or whether the due to issue mentioned in 44932 (which is still open), the application will continue to behave erratically at times."}, {"count": 6, "tags": [], "creator": "bouliz@hotmail.com", "is_private": false, "text": "(In reply to comment #5)\n> There is a similar bug 44932, which is reported for log4j version 1.2.15. Does\n> this fix also address the issue mentioned in the bug 44932? There is an issue\n> we have for our application where in rare scenarios, the rollover files are\n> getting deleted and our application starts writing to a single log file which\n> then grows to over 50GB. We are using log4j version 1.2.15.\n> So I am not sure if we should move to the latest version 1.2.16 which has this\n> fix or whether the due to issue mentioned in 44932 (which is still open), the\n> application will continue to behave erratically at times.\n\nWe have the same problem ! I think it could be solve issue 44932 but im not sure.", "id": 141682, "time": "2010-11-12T15:54:44Z", "bug_id": 43374, "creation_time": "2010-11-12T15:54:44Z", "attachment_id": null}]
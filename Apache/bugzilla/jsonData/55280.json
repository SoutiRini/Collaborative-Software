[{"count": 0, "tags": [], "bug_id": 55280, "attachment_id": null, "id": 168662, "time": "2013-07-19T10:25:35Z", "creator": "poipp2013@proplant.de", "creation_time": "2013-07-19T10:25:35Z", "is_private": false, "text": "The problem can be reproduced by the following test case:\n\n            Workbook w = new XSSFWorkbook();\n            Sheet s = w.createSheet();\n            for (int row = 0; row < 5000; ++row)\n                s.addMergedRegion(new CellRangeAddress(row, row, 0, 3));\n\n            s.shiftRows(0, 4999, 1);        // takes 15 minutes\n\nshiftRows() takes 15 minutes because it shifts all merged regions, which is done be removing and re-adding merged regions one by one. Especially the implicit calls to Sheet.removeMergedRegion(idx) are slow.\nThus working with a lot of merged regions is limited because a (maybe implicit) shift of the merged regions will block the application.\n\nAn approach to solve the problem may be to implement (and use internally) a method which removes multiple merged regions at once, e.g.\n\nSheet.removeMergedRegions(int[] ids)\n\nThis can be implemented much more efficient than calling removeMergedRegion(id) for each single id.\n\nRegards\n\nOlaf"}, {"count": 1, "text": "If you are able to work up a patch, we'd be happy to review it\n\nAlso, does this same problem affect HSSF too? If not, it might be worth looking at the HSSF logic to see if we can crib from that. If it does, we'll want to try to fix both if possible.", "creator": "apache@gagravarr.org", "is_private": false, "id": 168663, "time": "2013-07-19T11:19:32Z", "bug_id": 55280, "creation_time": "2013-07-19T11:19:32Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "creator": "poipp2013@proplant.de", "attachment_id": null, "text": "We migrated from HSSF to XSSF and did not notice the problem with HSSF.\n\nI tried the following code to do a faster remove from outside POI. It is copied and changed from XSSFSheet.removeMergedRegion(int):\n\n----------------------\n    public static void removeMergedRegions(XSSFSheet sheet, HashSet<Integer> indices) {\n        if (indices.size() == 0)\n            return;\n\n        CTWorksheet worksheet = getCTWorksheet(sheet);     // via reflection\n        CTMergeCells ctMergeCells = worksheet.getMergeCells();\n\n        CTMergeCell[] mergeCellsArray = new CTMergeCell[ctMergeCells.sizeOfMergeCellArray() - indices.size()];\n        int d = 0;\n        for (int i = 0 ; i < ctMergeCells.sizeOfMergeCellArray() ; i++) {\n            if (! indices.contains(i)) {\n                mergeCellsArray[d++] = ctMergeCells.getMergeCellArray(i);\n            }\n        }\n        if(mergeCellsArray.length > 0){\n            ctMergeCells.setMergeCellArray(mergeCellsArray);\n        } else{\n            worksheet.unsetMergeCells();\n        }\n    }\n--------------------\nIt worked so far, but it doesn't fix the internal usages of removeMergedRegion. At this point we decided to use a workaround (different excel output).", "id": 168664, "time": "2013-07-19T12:34:32Z", "bug_id": 55280, "creation_time": "2013-07-19T12:34:32Z", "is_private": false}, {"count": 3, "text": "(In reply to proplant from comment #2)\n> We migrated from HSSF to XSSF and did not notice the problem with HSSF.\n\nOK, in that case it is most likely related to how we drive xmlbeans.\n\n\n> It worked so far, but it doesn't fix the internal usages of\n> removeMergedRegion. At this point we decided to use a workaround (different\n> excel output).\n\nIf you do have a chance to work this up into a full patch, that'd be great!", "bug_id": 55280, "attachment_id": null, "id": 168665, "time": "2013-07-19T12:37:20Z", "creator": "apache@gagravarr.org", "creation_time": "2013-07-19T12:37:20Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "poipp2013@proplant.de", "attachment_id": null, "text": "(In reply to Nick Burch from comment #3)\n> (In reply to proplant from comment #2)\n> If you do have a chance to work this up into a full patch, that'd be great!\n\nI dont know. Which steps do I have to take?\nUntil now I only downloaded the source.zip.", "id": 168668, "time": "2013-07-19T13:48:10Z", "bug_id": 55280, "creation_time": "2013-07-19T13:48:10Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 55280, "text": "http://poi.apache.org/guidelines.html has some information. Your best bet though would probably be to ask on the dev list. We have added several new committers recently, who have gone through the process of learning how to submit patches, so there are plenty of people about who can offer you advice on how to do it!", "id": 168719, "time": "2013-07-22T21:11:04Z", "creator": "apache@gagravarr.org", "creation_time": "2013-07-22T21:11:04Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 55280, "text": "Using dynaTrace to analyze where the time is actually spent here, I saw the following top time consumers:\n\nMethod\tExec Sum\tBreakdown\tClass\ncount(Xobj, QName, QNameSet)\t7.84s\tCPU: 78 %, Sync: 0 %, Wait: 0 %, Suspension: 0 %, I/O: 22 %\torg.apache.xmlbeans.impl.store.Locale\nremove_element(QName, int)\t6.84s\tCPU: 78 %, Sync: 0 %, Wait: 0 %, Suspension: 0 %, I/O: 22 %\torg.apache.xmlbeans.impl.store.Xobj\nget_locale()\t5.37s\tCPU: 78 %, Sync: 0 %, Wait: 0 %, Suspension: 0 %, I/O: 22 %\torg.apache.xmlbeans.impl.store.Xobj\nfind_element_user(QName, int)\t3.95s\tCPU: 78 %, Sync: 0 %, Wait: 0 %, Suspension: 0 %, I/O: 22 %\torg.apache.xmlbeans.impl.store.Xobj\n\nSo on top initially is not remove(), but actually count(), i.e. one of the size-methods.\n\nDrilling down into the details showed that the calls to count() are mainly done because XSSFSheet.removeMergedRegion() calls sizeOfMergeCellArray() many times but this call is quite costly in XMLBeans!\n\nRemoving the calls cut the time nearly in half from 29 to 15 seconds for 1500 merged regions.\n\nI commited this small change as r1621631, this made the most time-consuming method now actually remove_element() followed by getMergeCellArray().\n\nBy introducing a bulk-remove method XSSFSheet.removeMergedRegions(Set<Integer>) as outlined below, the time needed to shift is reduced to around 800ms for the shifting with 5000 merged regions, which I think should suffice for almost all  use cases.\n\nThe second set of changes is committed as r1621633.", "id": 177477, "time": "2014-08-31T20:26:05Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2014-08-31T20:26:05Z", "is_private": false, "attachment_id": null}, {"attachment_id": 31960, "tags": [], "creator": "yaniv@kundas.net", "text": "Created attachment 31960\n55280-2\n\nFurther enhancement of performance by:\n- replacing calls to xmlbeans getMergeCellArray(i) methods with direct array access\n- replacing manual array copy with System.arraycopy", "count": 7, "id": 177507, "time": "2014-09-03T10:25:23Z", "bug_id": 55280, "creation_time": "2014-09-03T10:25:23Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 55280, "text": "Comment on attachment 31960\n55280-2\n\nObsoleted by https://issues.apache.org/bugzilla/attachment.cgi?id=32020&action=diff\nfrom issue 56854: https://issues.apache.org/bugzilla/show_bug.cgi?id=56854", "id": 177918, "time": "2014-09-17T06:50:52Z", "creator": "yaniv@kundas.net", "creation_time": "2014-09-17T06:50:52Z", "is_private": false, "attachment_id": 31960}]
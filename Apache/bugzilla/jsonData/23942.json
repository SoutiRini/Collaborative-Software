[{"count": 0, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": null, "text": "It would be nice to have a local property\nas described in\nhttp://marc.theaimsgroup.com/?l=ant-dev&m=106664032815130&w=2", "id": 45930, "time": "2003-10-20T15:45:35Z", "bug_id": 23942, "creation_time": "2003-10-20T15:45:35Z", "is_private": false}, {"attachment_id": 8631, "tags": [], "creator": "peter.reilly@corvil.com", "text": "Created attachment 8631\nDiff against HEAD for local property", "count": 1, "id": 45931, "time": "2003-10-20T15:47:21Z", "bug_id": 23942, "creation_time": "2003-10-20T15:47:21Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 8632\nthe local task", "attachment_id": 8632, "bug_id": 23942, "id": 45932, "time": "2003-10-20T15:48:29Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-10-20T15:48:29Z", "is_private": false}, {"count": 3, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": null, "text": "I have posted the patches, one\nthing to work on is the possible\ninheritances of local properties to\nantcall and ant.\n", "id": 45933, "time": "2003-10-20T15:51:03Z", "bug_id": 23942, "creation_time": "2003-10-20T15:51:03Z", "is_private": false}, {"count": 4, "text": "Created attachment 8652\nAllow ant/antcall to inherit local properties, provide optional attribute", "bug_id": 23942, "attachment_id": 8652, "id": 45979, "time": "2003-10-21T11:16:04Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-10-21T11:16:04Z", "tags": [], "is_private": false}, {"count": 5, "text": "This functionality would be especially useful in concert with macrodefs.", "bug_id": 23942, "is_private": false, "id": 47369, "time": "2003-11-14T18:42:44Z", "creator": "cj@syntheticplayground.com", "creation_time": "2003-11-14T18:42:44Z", "tags": [], "attachment_id": null}, {"count": 6, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": 9164, "id": 47551, "time": "2003-11-18T15:14:46Z", "bug_id": 23942, "creation_time": "2003-11-18T15:14:46Z", "is_private": false, "text": "Created attachment 9164\nUpdate to the local patch"}, {"count": 7, "tags": [], "text": "Made a new patch against the current cvs.\nChanges:\n  * do not allow local properties to override user properties\n  * add local properties to the symbols exported to script\n  * add a <local/> element to macrodef to allow it to\n    specify use of a local property in place of a\n    attribute\n", "is_private": false, "bug_id": 23942, "id": 47552, "time": "2003-11-18T15:19:17Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-11-18T15:19:17Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Just wanted to mention that the patch (9164) fails on defaults.properties when\npatching against the 1.6 Branch.  Version 1.154 is used to patch against, but it\nisn't tagged with the ANT_16_BRANCH tag and the one on the 1.6 branch doesn't\ndefine the \"nice\" task so <patch> returns an error for it and skips applying the\npatch.  Everything else seems to work ok.\n\nOh, one other thing.  In order to compile Local.java, I had to modify the\nfollowing from this:\nPropertyHelper.getPropertyHelper(\n            getProject()).addLocalProperty(name, value);\n\nto this:\nPropertyHelper.getPropertyHelper(\n            getProject()).addLocalProperty(name, value, false);\n\nThe reason is that Local seems to have been built against the older patch (8631\nor 8652) where the addLocalProperty() method took a String and an Object, but\nnot also a boolean as the newest patch adds.\n\nAfter all that, I built the modified 1.6 Branch and tested my <macrodef> that\nsets a property, but uses <local> to keep the property local.  It works great!!!!\n\nIs this going to get in soon?  It would be nice to play with a more officially\napplied patch and get other users to test it out before a 1.6beta3 release.\n\nJake", "is_private": false, "bug_id": 23942, "id": 47944, "time": "2003-11-23T06:38:52Z", "creator": "hoju@visi.com", "creation_time": "2003-11-23T06:38:52Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "Created attachment 9263\nPatch against ant_1_6 head and cvs head", "is_private": false, "bug_id": 23942, "id": 48003, "time": "2003-11-24T13:26:09Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-11-24T13:26:09Z", "attachment_id": 9263}, {"count": 10, "tags": [], "creator": "peter.reilly@corvil.com", "text": "As per Jake's report (thanks) made a new patch:\n * which works against cvs head and ANT_16_BRANCH head\n * modified addLocalProperty back to be (String, Object) so\n   that Local.java should work without modifification.\n", "id": 48005, "time": "2003-11-24T13:29:47Z", "bug_id": 23942, "creation_time": "2003-11-24T13:29:47Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "What are the current plans for <local>?", "is_private": false, "bug_id": 23942, "id": 50978, "time": "2004-01-22T16:21:53Z", "creator": "mbenson@apache.org", "creation_time": "2004-01-22T16:21:53Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 23942, "is_private": false, "text": "I am leaving this at the moment until 1.6 settles down a\nbit. I will update the patch soon.", "id": 50990, "time": "2004-01-22T18:44:23Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-01-22T18:44:23Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 23942, "is_private": false, "text": "*** Bug 21721 has been marked as a duplicate of this bug. ***", "id": 59787, "time": "2004-06-23T17:49:22Z", "creator": "mbenson@apache.org", "creation_time": "2004-06-23T17:49:22Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 23942, "is_private": false, "text": "*** Bug 31586 has been marked as a duplicate of this bug. ***", "id": 64779, "time": "2004-10-07T19:34:19Z", "creator": "stevel@apache.org", "creation_time": "2004-10-07T19:34:19Z", "attachment_id": null}, {"attachment_id": 12994, "tags": [], "creator": "peterreilly@apache.org", "text": "Created attachment 12994\nupdate of local patch, allow local properties to hide user properties", "count": 15, "id": 64814, "time": "2004-10-08T09:01:33Z", "bug_id": 23942, "creation_time": "2004-10-08T09:01:33Z", "is_private": false}, {"count": 16, "tags": [], "creator": "j_a_fernandez@yahoo.com", "text": "People, I think I have a much more clean solution to the isue of complex\nmacros and its necessary properties that does not affect the core of ANT at \nall.\nIt is a complete local solution to macrodef without spillovers. I cannot post \nit nor commit it until tonight since it is in my machine at home.\n\nThe basic approach is something I proposed here some time ago. Providing a \n<let> element in <macrodef> which defined guaranteed unique names for \nproperties. The syntax is very simple:\n\n<macrodef name=\"checkCondition\">\n <let name=\"isTrue\">\n <element name=\"cond\">\n <sequential>\n   <condition property=\"@{isTrue}\" value=\"Hurray!!!\">\n     <cond/>\n   </condition>\n   <echo if=\"@{isTrue}\">The condition is true: ${@{isTrue}}</echo>\n   <echo unless=\"@{isTrue}\">The condition is false</echo>\n <sequential>\n</macro>\n\nThe macro above will be used as follows:\n\n <checkCondition>\n   <cond>\n    <available file=\"${myfile}/>\n   </cond>\n </checkCondition>\n\nAnd it will print whether the condition is true or not.\n\nAs you can see from the style of writing, <let/> just defines an attribute\n( @{..} syntax) whose value is a name guaranteed to be unique within the JVM.\nYou can use this name as the name for a property, or whatever else.\n\nEverytime you execute the macro, a new value is assigned to the let attribute\nand you can have as many as you want. This is all the machinery you need to\nwrite as complicated <macros> as you want, using recurtion or whatever.\nAnd since it does not touch and does not rely on changes to the CORE there \nare no possible BC issues. \n\nSo let me submit my proposal tonight and we can talk about any misgivings\non the particulars.\n", "id": 64819, "time": "2004-10-08T10:52:35Z", "bug_id": 23942, "creation_time": "2004-10-08T10:52:35Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "text": "That brings us back to the properties pollution debate, does it not?", "is_private": false, "bug_id": 23942, "id": 64836, "time": "2004-10-08T16:07:26Z", "creator": "mbenson@apache.org", "creation_time": "2004-10-08T16:07:26Z", "attachment_id": null}, {"count": 18, "tags": [], "creator": "j_a_fernandez@yahoo.com", "text": "Created attachment 13000\nMacrodef <let> element to use for local properties", "id": 64855, "time": "2004-10-09T00:53:26Z", "bug_id": 23942, "creation_time": "2004-10-09T00:53:26Z", "is_private": false, "attachment_id": 13000}, {"count": 19, "tags": [], "text": "I have just uploaded my changes to macrodef to provide the <let> syntax\nfor generating new names for properties. I have not made changes to the\nmanual pages nor testcases (that was why I had not submit them before).\nIn any case take a look and let me know what you think.\n", "is_private": false, "bug_id": 23942, "id": 64856, "time": "2004-10-09T00:57:28Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-10-09T00:57:28Z", "attachment_id": null}, {"count": 20, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": 13157, "id": 65375, "time": "2004-10-20T18:18:28Z", "bug_id": 23942, "creation_time": "2004-10-20T18:18:28Z", "is_private": false, "text": "Created attachment 13157\nNew patch - remove containers, need special container, fix threading"}, {"count": 21, "tags": [], "text": "Created attachment 13158\nThe local property container - <let>", "is_private": false, "bug_id": 23942, "id": 65376, "time": "2004-10-20T18:19:56Z", "creator": "peterreilly@apache.org", "creation_time": "2004-10-20T18:19:56Z", "attachment_id": 13158}, {"count": 22, "text": "I have uploaded a new patch and a new task <let>.\nThis patch still uses the Local java file.\nThis patch changes the method used to declare local properties.\nThey are now in a separate container - <let> and declared\nwith <localproperty>\n\n<let>\n  <localproperty name=\"local\" value=\"a local property\"/>\n  <echo>local is ${local}</echo>\n</let>\n", "bug_id": 23942, "attachment_id": null, "id": 65377, "time": "2004-10-20T18:23:24Z", "creator": "peterreilly@apache.org", "creation_time": "2004-10-20T18:23:24Z", "tags": [], "is_private": false}, {"count": 23, "tags": [], "text": "Are Dominique and I alone in our distaste for the <let> name?", "is_private": false, "bug_id": 23942, "id": 65379, "time": "2004-10-20T19:26:49Z", "creator": "mbenson@apache.org", "creation_time": "2004-10-20T19:26:49Z", "attachment_id": null}, {"count": 24, "tags": [], "text": "After you mentioned it, I also do not like <let>. Can we use an implicit current scope?", "is_private": false, "bug_id": 23942, "id": 65380, "time": "2004-10-20T20:03:55Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-10-20T20:03:55Z", "attachment_id": null}, {"count": 25, "tags": [], "text": "Now that's funny.  That's what Peter originally wanted.  I don't like that \neither, personally.", "is_private": false, "bug_id": 23942, "id": 65388, "time": "2004-10-20T21:16:56Z", "creator": "mbenson@apache.org", "creation_time": "2004-10-20T21:16:56Z", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 23942, "attachment_id": null, "id": 65394, "time": "2004-10-20T21:51:46Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-10-20T21:51:46Z", "is_private": false, "text": "Why not to make <let> more useful then. For example:\n\n<local properties=\"name1,name2,...\">\n  <property name=\"name1\" value=\"XXX\"/>\n</local>\n\nAt least in this case it defines local properties."}, {"count": 27, "tags": [], "text": "Personally I think I like the \"declare a scope and then declare only the \nproperties that persist beyond that scope\" more than \"declare a scope and its \nlocal properties.\"  I think it's more likely you may use three intermediate \nproperties to arrive at one result than vice-versa.\n\n$0.03", "is_private": false, "bug_id": 23942, "id": 65395, "time": "2004-10-20T22:07:01Z", "creator": "mbenson@apache.org", "creation_time": "2004-10-20T22:07:01Z", "attachment_id": null}, {"count": 28, "tags": [], "text": "Well since I used <let> to define something completely different which I may \nwant to preserve. I may also want a different name for this new context \ndeclaration. Some ideas may be: <block/> or <local> or yes <scope>.\n\nSorry, Dominique if I misunderstood you naming issue to refer to mine <let> \nrather than Peter's. I still think that <let> is fine for mine :-)\n", "attachment_id": null, "bug_id": 23942, "id": 65402, "time": "2004-10-21T00:25:28Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-10-21T00:25:28Z", "is_private": false}, {"count": 29, "text": "As I said before, I would prefer an implicit local property container - target\nand any task container.\n\nIf there is to be an explicit local property container, I do not care what name\nit is, <localpropertyscope> is probally the best name.\n\nlet is used in emacs lisp for example:\n  (let* ((type-and-name (jdok-extract-type-and-name declaration))\n         (arglist       (jdok-extract-arglist       declaration))\n         (throws        (jdok-extract-throws        declaration))\n         (type          (car type-and-name))\n         (name          (cdr type-and-name)))\n    (if (or type name arglist throws)\n        (vector type name arglist throws))))\n\nbut it is probally a little confusing as let is also used in\nother languages like basic.\n\n", "bug_id": 23942, "attachment_id": null, "id": 65425, "time": "2004-10-21T10:57:54Z", "creator": "peterreilly@apache.org", "creation_time": "2004-10-21T10:57:54Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "creator": "mbenson@apache.org", "text": "I also should have made the distinction between Jose's and Peter's <let>s.  And \nI can accept Jose's assertion that <let> is appropriate enough a name for his.\n\nTo continue in my search for feedback on the idea of declaring only those \nproperties which persist beyond the theoretical local scope, let me throw this \nstatement out:\n\nIf an explicit TaskContainer is used for local properties, it makes sense to \ndeclare the properties that are NOT local; if scope is made implicit to the \nnearest enclosing TaskContainer, it makes sense to declare which properties ARE \nlocal.  Opinions?!  ;)", "count": 30, "id": 65444, "time": "2004-10-21T14:36:54Z", "bug_id": 23942, "creation_time": "2004-10-21T14:36:54Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "j_a_fernandez@yahoo.com", "text": "<macrodef name=\"A\">\n ....\n <property name=\"fooA\" .../>\n ....\n</macrodef>\n\n<macrodef name=\"B\">\n ...\n <localpropertyscope>\n   <localproperty name=\"fooB\" value=\"XB\"/>\n   <A/>\n <localpropertyscope>\n ...\n</macrodef>\n\n <B/>\n <echo message=\"${fooA}\"/>\n\nWhat should be the correct answer. Assume that <B/> does not know about <A>'s \nimplementation.\n\nWhy should that be the correct answer. \nWould like to hear from those advacating for default local and default global.\n", "count": 31, "id": 65449, "time": "2004-10-21T15:29:00Z", "bug_id": 23942, "creation_time": "2004-10-21T15:29:00Z", "is_private": false}, {"count": 32, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "id": 65452, "time": "2004-10-21T16:36:25Z", "bug_id": 23942, "creation_time": "2004-10-21T16:36:25Z", "is_private": false, "text": "The localscope patch uses dynamic scoping (like lisp) and not static scoping \n(like C) so the result of calling \n <B/>\n <echo message=\"${fooA}\"/>\n\nis whatever A is set fooA to. fooA is a global property - it has not\nbeen shaddowed by a local property.\nAnother example is:\n\n  <target name=\"j\">\n    <macrodef name=\"A\">\n      <sequential>\n        <property name=\"fooA\" value=\"splatto\"/>\n        <property name=\"fooB\" value=\"splatto\"/>\n      </sequential>\n    </macrodef>\n\n    <macrodef name=\"B\">\n      <sequential>\n        <localpropertyscope>\n          <localproperty name=\"fooB\" value=\"XB\"/>\n          <A/>\n        </localpropertyscope>\n      </sequential>\n    </macrodef>\n    \n    <B/>\n    <echo message=\"fooA is ${fooA}\"/>\n    <echo message=\"fooB is ${fooB}\"/>\n  </target>\n\nWhich will generate:\nfooA is splatto\nfooB is ${fooB}\n\nthe use of fooB in macroA will find the local property decalared\nin macroB and attempt to set it (as properties can only be\nset once, this will not succeed), and not create a global property fooB.\n\n\n"}, {"count": 33, "tags": [], "text": "I am advocating an explicit scope block with properties defaulting to local \nscope, so my answer to Jose's setup would be no output; i.e. fooA is not set.", "is_private": false, "bug_id": 23942, "id": 65453, "time": "2004-10-21T16:40:23Z", "creator": "mbenson@apache.org", "creation_time": "2004-10-21T16:40:23Z", "attachment_id": null}, {"count": 34, "tags": [], "text": "\nMatt, how many builds will that break? Notice that <A/> may have come from \nsome other antlib and hence expects nothing about local scopes. It may be \nsetting a property for some other macro in that antlib. On the other hand <b/> \nknows nothing about the private communication (implementation detail) between \nthose macros. But it needs a local scope for its own properties. So even if \nthere is no name collisions we break the code in <a/>.\n\nBTW, one of the problems I have with all this shadowing is that for a project \nto be correct now I need to know the details of the implementations of all the \nmacros in use, because I may shadow by accident a name used by someone else. \nIn some 3rd party antlib that I do not know about.\n\nOf course my proposal did not have that problem ;-) Although I recognized that \nname collisions were there already in ANT. Can that be solved with a scope ? \nHummmm.....\n", "is_private": false, "bug_id": 23942, "id": 65455, "time": "2004-10-21T17:45:18Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-10-21T17:45:18Z", "attachment_id": null}, {"count": 35, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 65458, "time": "2004-10-21T18:00:48Z", "bug_id": 23942, "creation_time": "2004-10-21T18:00:48Z", "is_private": false, "text": "But by that example, if you call <A> expecting it to set fooA, and you are the \nauthor of <B>, you would know you must declare that fooA transcend the scope \nimposed upon it by the accident of its \"lineage\"... ;)"}, {"count": 36, "tags": [], "text": "\nTrue, if I wrote the macro, but if I am using something from an antlib, lets \nsay: <A/> and <moreA/>. Two tasks defined in an antlib. I shouldn't need to \nknow whether they are macros, tasks in beanshell, java or whatever. I should \nbe able to just use them. Now, this two tasks happen to communicate with each \nother. For example, <A/> will test some condition and <moreA/> will use this \nresult to do something clever. I should not need to know that, the only thing \nI should know is that I must call <A/> before I call <moreA/>.\n\nBut just because I decided to call <A/> inside my <B/> then the whole thing \nfalls appart. :-(\n\nNow, my comment about scopes, was that maybe in \"A\" I could say scope=\"antlib\"\nand that will make the scope of the property that of the antlib, which means \nthat only things defined on that \"antlib\" will see it. Now that would give\na lot of abstraction power. But it is yet another hurdle for any proper \nimplementation. Notice that this would have to work not only for macros but \nalso for regular tasks with some additional API that allows specifying the \nscope when I call Project.setNewProperty().\n", "is_private": false, "bug_id": 23942, "id": 65496, "time": "2004-10-22T12:03:24Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-10-22T12:03:24Z", "attachment_id": null}, {"count": 37, "tags": [], "text": "Jose, I do not see the problem with your example.\n<A/> uses a property (say X) to export some output - therefore it\nmust be a condition of the user of <A/> to know this.\n<B/> declares X to be local and then calls <A/>, <B/> may now use\nthe output of <A/> without effecting other users of <A/>.\n\nSo for example:\n<A/>\n<B/>\n<MoreA/>\nMoreA will use X as set by <A/> and not by the <A/> called\nby <B/>\n", "is_private": false, "bug_id": 23942, "id": 65700, "time": "2004-10-26T08:49:25Z", "creator": "peterreilly@apache.org", "creation_time": "2004-10-26T08:49:25Z", "attachment_id": null}, {"count": 38, "tags": [], "creator": "peterreilly@apache.org", "text": "Created attachment 13220\nnew patch - fold local properties into properties, Project.getProperties() now works as expected", "id": 65701, "time": "2004-10-26T08:52:03Z", "bug_id": 23942, "creation_time": "2004-10-26T08:52:03Z", "is_private": false, "attachment_id": 13220}, {"count": 39, "tags": [], "creator": "j_a_fernandez@yahoo.com", "text": "This idea that everyone must know \"ALL\" the details about \"ANY\" software \nmodule that we refer to in our code, is a dead one in softwareland except for \nANT. One of the keys of building reusable software is that I must be able to \nbuild backboxes and only know about relevant input/outputs.\n\nThe other one, is to be able to compose modules toguether and then hide their \ncommunication details (blackbox it) and create a new module that way.\nWehave not even scratched the surface on what can be done with ANTLIBS and \nmacrodefs. To expect users to need to know about every usage or communication \nall the way down the stack makes for very bad reusability.\n\nThis is an inherit problem in ANT at the moment, but one that we should try to \nsolve, if we want ANTLIBS to be really successful.\n\n", "id": 65710, "time": "2004-10-26T11:59:29Z", "bug_id": 23942, "creation_time": "2004-10-26T11:59:29Z", "is_private": false, "attachment_id": null}, {"attachment_id": 20688, "tags": [], "creator": "peterreilly@apache.org", "text": "Created attachment 20688\nNew patch against trunk using new PropertyHelper delegates\n\nThis is a new patch.\nMain differences from previous:\n  1) it does not leak memory (hopefully)\n  2) copy of the stack has is only done in <parrallel> and not\n     for each and every new thread.\n  3) the local properties will not be inherited in sub-projects\n  4) stack design has improved and code is easier to follow\n  5) use separate java files for each class\n  6) use new PropertyHelper delegates\n\nThis patch has local properties per scope - target element, sequential element\nand macrodef.", "count": 40, "id": 107019, "time": "2007-08-22T02:15:11Z", "bug_id": 23942, "creation_time": "2007-08-22T02:15:11Z", "is_private": false}, {"count": 41, "tags": [], "text": "I applied this most recent patch locally when it was first added, but there was still a memory leak; i.e. when I run 'ant test' with the patches applied, I get OOMEs.  If, however, I comment out the local property scope of targets only, these are avoided.  Also, I can run trivial exercises of the local properties with no problems.  This leads me to believe that the remaining problems are probably related to scope cloning in new projects, since that would be the main place one would kick off more and more target instances during a test run IIUC.  I post this for informational purposes in case anyone else has time to look into this as well.", "attachment_id": null, "bug_id": 23942, "id": 118144, "time": "2008-06-30T15:33:54Z", "creator": "mbenson@apache.org", "creation_time": "2008-06-30T15:33:54Z", "is_private": false}, {"count": 42, "tags": [], "text": "Spoke too soon.  My test run neared completion, but finally died with an OOME despite my having commented out the local property scope from Target.  I am at a loss.  I presume the design of this patch, particularly the decoupling of LocalPropertyStack and LocalProperties, was intended to bypass the Googlable problem of ThreadLocal values being of the same class that declares the ThreadLocal and thus being self-referential.  Somehow the current patch still doesn't work, unfortunately.", "is_private": false, "bug_id": 23942, "id": 118145, "time": "2008-06-30T15:37:17Z", "creator": "mbenson@apache.org", "creation_time": "2008-06-30T15:37:17Z", "attachment_id": null}, {"count": 43, "tags": [], "bug_id": 23942, "text": "Okay, tossed the heap dump into the Eclipse MAT, which right off told me there were LocalProperties objects clinging to Project objects, which is why the patch worked fine in a normal build but broke during test runs because of the number of Projects and LocalProperties objects being kicked around.  For example, setting junit.fork=true and junit.forkmode=perTest did away with the problem nicely.  For the life of me, however, I couldn't see any reason why the LocalProperties or LocalPropertyStack objects needed a reference to the owning Project, so I removed it from each class.  The only thing it was being used for was to ensure there was a single LP per Project, so I simply made the LP constructor private.  With my modifications, these changes are now working like a charm.\n\nAhem... are there any objections to my adding my slightly modified version of Peter's last patch to the svn trunk?", "id": 118198, "time": "2008-07-02T10:58:29Z", "creator": "mbenson@apache.org", "creation_time": "2008-07-02T10:58:29Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "ddevienne@gmail.com", "text": "Is there in impact in performance?\n\nI remember a thread where property access was already much slower than in 1.6 (or 1.5, I don't recall), so I'd like to know the overhead of the local properties patch on performance of accessing properties. Some builds have several thousands property accesses.\n\nAssuming 1.7.1 is coming from a separate branch, I'm OK for a commit into the trunk. You may want to ask this on the dev list though.\n\n--DD", "count": 44, "id": 118199, "time": "2008-07-02T11:49:36Z", "bug_id": 23942, "creation_time": "2008-07-02T11:49:36Z", "is_private": false}, {"count": 45, "tags": [], "text": "Yeah, what I found was right before Peter made some changes to some of my inefficient code.  :)  Now I'm returning the favor!  ;)  Then we also scaled back the synchronization in PropertyHelper recently, so hopefully the performance issues should be mitigated by now.  Guess I will shoot something to dev@ant to make sure nobody misses his opportunity to object.", "is_private": false, "bug_id": 23942, "id": 118200, "time": "2008-07-02T12:26:01Z", "creator": "mbenson@apache.org", "creation_time": "2008-07-02T12:26:01Z", "attachment_id": null}, {"attachment_id": 22210, "tags": [], "creator": "ddevienne@gmail.com", "text": "Created attachment 22210\ncompiled TimerListener\n\nMy target/task timer build listener. Put jar in classpath, and use -listener net.sf.antics.TimerListener on the Ant command line to activate. --DD", "count": 46, "id": 118202, "time": "2008-07-02T14:29:22Z", "bug_id": 23942, "creation_time": "2008-07-02T14:29:22Z", "is_private": false}, {"count": 47, "tags": [], "text": "Committed revision 676095.", "attachment_id": null, "bug_id": 23942, "id": 118587, "time": "2008-07-11T16:05:54Z", "creator": "mbenson@apache.org", "creation_time": "2008-07-11T16:05:54Z", "is_private": false}]
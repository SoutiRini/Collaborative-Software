[{"count": 0, "tags": [], "bug_id": 3146, "attachment_id": null, "id": 4604, "time": "2001-08-16T06:57:25Z", "creator": "paul.hettl@mindmatics.de", "creation_time": "2001-08-16T06:57:25Z", "is_private": false, "text": "When creating a selection list with the input taglib the order of elements gets \nmixtes up. this is a problem in case of e.g. Month selection list.\n\nmy workaround is: use two ArrayList object for values and lables:\n\ninput.tld change: \n\n<attribute>\n\t<name>optionLabels</name>\n\t<required>true</required>\n\t<rtexprvalue>true</rtexprvalue>\n    </attribute>\n    <attribute>\n\t<name>optionValues</name>\n\t<required>true</required>\n\t<rtexprvalue>true</rtexprvalue>\n    </attribute>\n\n\ncode change:\n\n    private ArrayList optionLabels ;        // the lables\n    private ArrayList optionValues ;        // the submitted values\n    public void setOptionValues(ArrayList x) {\n        optionValues = x;\n    }\n    public void setOptionLabels(ArrayList x) {\n        optionLabels = x;\n    }\n\n in doStart():\n\n // changed:\n            //\n            if ( optionLabels.size() != optionValues.size() ){\n                throw new JspException(\n                            \"option keys and option values must be of equal \nsize\");\n            }\n            HashMap options = new HashMap();\n            ListIterator lIter = optionLabels.listIterator();\n            int j = 0;\n\n            while ( lIter.hasNext() ) {\n                Object  key = (Object) lIter.next();\n                Object  value = (Object)  optionValues.get( j);\n                j++;\n                options.put( key, value);\n\n            }\n\n            // actually print the <option> tags\n            if (options.size() > 0 ) {\n            //if (options != null) {\n                Iterator i = optionLabels.iterator();"}, {"count": 1, "tags": [], "creator": "bayern@essentially.net", "is_private": false, "id": 4605, "creation_time": "2001-08-16T07:22:46Z", "time": "2001-08-16T07:22:46Z", "bug_id": 3146, "text": "Order isn't intended to be preserved; you can use a TreeMap if you want an\nordering against a Comparable, and you can also write a Map using a back-end\nVector if you want to preserve order of entry.  The key is to simplify the page\nauthor's usage; using two separate Lists won't necessarily do that.\n\nThanks for the suggestion.  Do you have another suggested mechanism that won't\ncomplicate usage?", "attachment_id": null}]
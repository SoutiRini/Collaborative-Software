[{"count": 0, "tags": [], "bug_id": 44857, "attachment_id": null, "id": 115786, "time": "2008-04-23T00:19:04Z", "creator": "trejkaz@trypticon.org", "creation_time": "2008-04-23T00:19:04Z", "is_private": false, "text": "There is a particular test Excel file which we have unit tests for, which isn't working in POI 3.0.1 or 3.0.2 (although it's working in our custom 3.0.1 branch, I can't figure out why.)\n\nThe file itself is complicated but I have managed to \nSimple test exhibiting the problem:\n\n    public void testEscher() throws Exception\n    {\n        byte[] data = FileUtils.readFileToByteArray(new File(\"D:\\\\temp\\\\container.dat\"));\n        EscherContainerRecord record = new EscherContainerRecord();\n        record.fillFields(data, 0, new DefaultEscherRecordFactory());\n    }\n\nThis throws:\n\njava.lang.OutOfMemoryError: Java heap space\n\tat org.apache.poi.ddf.UnknownEscherRecord.fillFields(UnknownEscherRecord.java:76)\n\tat org.apache.poi.ddf.EscherContainerRecord.fillFields(EscherContainerRecord.java:56)\n\tat org.apache.poi.ddf.EscherContainerRecord.fillFields(EscherContainerRecord.java:56)\n\n\nI tracked it down to an EscherMetafileBlip underneath EscherBSERecord.  EscherBSERecord is assuming that getRecordSize() will be consistent with its own bytesRemaining value and this is not the case -- there are supposed to be 1125 bytes after the header but field_5_cbSave is only 163.\n\nBut from there I can't say whether it's a trivial fix or not.  The code in our real unit test asserts an MD5 for the uncompressed metafile -- if I rewrite EscherMetafileBlip to read the whole thing then it avoids the exception but the MD5 still fails.  Problem is, I don't know whether the MD5 was wrong the whole time, due to some other obscure bug.\n\nSomeone who knows more about EscherMetafileBlip would probably be able to say whether the simple and obvious fix is applicable here."}, {"count": 1, "tags": [], "bug_id": 44857, "attachment_id": 21846, "id": 115787, "time": "2008-04-23T00:19:53Z", "creator": "trejkaz@trypticon.org", "creation_time": "2008-04-23T00:19:53Z", "is_private": false, "text": "Created attachment 21846\ncontainer.dat\n\nHere's the container record by itself, should be better for testing as the real thing contains quite a bit more rubbish..."}, {"count": 2, "tags": [], "text": "Created attachment 21847\nproposed fix, but probably dodgy\n\nAttaching proposed fix.  Results in consistency, but like I said my MD5 from before is different. :-/\n\nIt could be that my previous test was wrong.\n\nBut why would it declare the stored size as only 10% of the available space?  It's almost as if the thing isn't actually compressed and yet the size field is still recording the compressed size, but that would be ludicrous.  Maybe all the extra space is simply padding?\n\nAnd the real mystery, how could our local branch of 3.0.1 work, when 3.0.1 itself does not, and yet this file has not changed?  Did the record reading code previously use the bytesRemaining return value instead of getRecordSize()?", "is_private": false, "id": 115788, "creator": "trejkaz@trypticon.org", "time": "2008-04-23T00:27:17Z", "bug_id": 44857, "creation_time": "2008-04-23T00:27:17Z", "attachment_id": 21847}, {"count": 3, "tags": [], "bug_id": 44857, "is_private": false, "text": "Thanks for the patch, file and testcase, patch applied to trunk\n\nIn terms of what has changed, \"svn log\" and \"svn blame\" are probably your friends here :)", "id": 115923, "time": "2008-04-27T10:59:24Z", "creator": "apache@gagravarr.org", "creation_time": "2008-04-27T10:59:24Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 46052, "attachment_id": null, "text": "The SetLocaleSupport class has a static initializer block which invokes DateFormat.getAvailableLocales() and NumberFormat.getAvailableLocales(). These operations crawl through all the Jar files on the classpath, and can take several seconds.\n\nAnything to make this run faster would be helpful. Alternatively, maybe we could substitute our own list of Locales so that it wouldn't need search the classpath, when performance is an issue.", "id": 121747, "time": "2008-10-21T14:05:33Z", "creator": "piepera@pragmatics.com", "creation_time": "2008-10-21T14:05:33Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 46052, "text": "Maybe some kind of notion of a pluggable DateLocaleFactory and NumberLocaleFactory (insert better names). Seems doable.", "id": 128710, "time": "2009-07-10T00:48:31Z", "creator": "bayard@apache.org", "creation_time": "2009-07-10T00:48:31Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46052, "text": "Java6 introduced the java.util.spi.LocaleServiceProvider mechanism as a pluggable mechanism for supporting additional Locales which requires searching the classpath for LocaleServiceProvider implementations when supporting getAvailableLocales(). Prior to 1.6 there was no extension mechanism and getAvailableLocales() only returned the pre-defined Locales supported by the JVM.\n\nThe matching algorithm described by LocaleServiceProvider is the same as that defined in the JSTL specification 9.3.2 LocaleLookup. We might be able to resolve this issue by switching to the JVM's implementation.", "id": 143027, "time": "2011-01-01T14:40:29Z", "creator": "jboynes@apache.org", "creation_time": "2011-01-01T14:40:29Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 27134, "attachment_id": null, "text": "*** Overview ***\nIn mod_ldap (util_ldap.c), during util_ldap_cache_checkuserid, ldap connection\nmay be rebound to the checked user dn and still be known to be bound to its\noriginal dn or anonymous. Reuse of these connections may later lead to\nunexpected authentication failures. These problem are particularly annoying with\nan ldap server that refuse anonymous connection or in which users has no rights\nto read other users entry. This may also has some security problem since the\nconnection pool may contain bound connection marked as anonymous one.\n\n*** Symptoms ***\nThese problems are usually reported as no more good authentication after a\nfailed or even successful previous authentication. Usually the following or a\nsimilar error is logged:\n\nauth_ldap authenticate: user <username> authentication failed; URI <URI> [User\nnot found][No such object]\n\n*** Test case ***\nTo easily trigger such problem, configure an ldap server that give access to the\nusers entry only using an non-anonymous bound connection. Configure users to\nhave no access to other user entry (you are now in the worst case). use the\nmod_auth_ldap with the following configuration on given URI:\n\n    AuthType Basic\n    AuthName \"LDAP authentication\"\n    AuthLDAPEnabled on\n    AuthLDAPBindDN <dn of the only ldap account that have access to all user entry>\n    AuthLDAPBindPassword <password for this account>\n    AuthLDAPURL <appropriate ldap url>\n    AuthLDAPAuthoritative on\n\nThan try to access this URI using good and wrong authentication. Access to this\nURI will quickly became fuzzy and the message above will be reported for valid\nuser with good and bad password.\n\n*** Explanation ***\nHere are the auth_util related steps involved in a mod_auth_ldap authentication:\n\n1) mod_auth_ldap_check_user_id() gets called to check user authentication\n2) mod_auth_ldap_check_user_id() retrieve a cached connection from\nutil_ldap_connection_find()\n3) util_ldap_connection_find() search for a connection matching the host, port,\nbinddn/bindpw required by util_ldap_connection_find() which have taken these\nfrom your httpd configuration\n4) if a matching connection is found, it is returned as is, else a non-matching\nconnection is set to be unbound and is returned\n5) mod_auth_ldap_check_user_id() provide the retrieved connection to \nutil_ldap_cache_checkuserid() with the username/password provide by the user and\nthe filter provide in your configuration\n6) util_ldap_cache_checkuserid() check the user cache for a previous successful\nauthentication of this user, if found, no use of the ldap connection is done\n7) if none are found, the ldap connection is open using\nutil_ldap_connection_open() which means bind the connection if it is currently\nknown to be unbound using the binddn/bindpw previously stored by\nutil_ldap_connection_find(), and set it to be known bound, else do nothing !\n8) search the ldap server for the dn of the user based on the provided filter\n9) if one and only one record is return, retrieve the provided dn.\n10) rebind the connection to the user dn using the provided user password to\nknow if the user password is correct. This is done using, a direct call to an\nldap api function called ldap_simple_bind_s(). The known to be bound and binddn\nof the util_ldap connection structure use for connection caching are not updated\nby this call which lead to the problem.\n11) later, on return from  util_ldap_cache_checkuserid,\nmod_auth_ldap_check_user_id release as is the connection to the cache using a\nmisnamed function called util_ldap_connection_close.\n12) if an error has been reported and only if this error is LDAP_SERVER_DOWN,\nthe connection will be unbound (and some retries will be done), avoiding the\nproblem when no server has answer (funny, no?)\n\nHas you should have understand, in step 10, the connection is rebound to another\nuser without updating cache information and in step 11, this rebound connection\nis released to the cache.\n\n*** Solution ***\nTo solve this issue, there is two options:\n1) Synchronize the cache information of the provided connection with its new\nrequired binding, setting it to unbound and use util_ldap_connection_open() to\nrebound the connection properly which ensure correct util_ldap cache usage\n2) Retrieve another connection from cache for the user authentication using\nutil_ldap_connection_find().\n\nChoosing between these option is choosing between keeping the 'search user'\nconnection bound to the AuthLDAPBindDN opposed to using only one connection for\nauthentication.\n\nI have seen a patch that use option two, but I am afraid that this patch does\nnot properly release the first connection to the cache using\nutil_ldap_connection_close.", "id": 52719, "time": "2004-02-21T14:17:13Z", "creator": "dgl@softec.lu", "creation_time": "2004-02-21T14:17:13Z", "is_private": false}, {"count": 1, "tags": [], "creator": "dgl@softec.lu", "attachment_id": 10470, "id": 52721, "time": "2004-02-21T14:23:27Z", "bug_id": 27134, "creation_time": "2004-02-21T14:23:27Z", "is_private": false, "text": "Created attachment 10470\nPatch using option one in the solution explained above"}, {"count": 2, "tags": [], "text": "*** Patch ***\nFor my part, I have choose option one, which is using only one connection for\nboth search and authentication, leave a connection bound to the authenticated\nuser on the cache.\n\nThe attached unified patch has been done against the latest public released,\nwhich is at the time of this writing version 2.0.48. I have also manually check\n the head of development (version 2.1.x), and it should apply too.\n\nI have no more time right known to test this patch thoroughly. It is in\nproduction on our server since it was written and I will keep this bug report\ninformed of any further problem we may encounter.\n", "attachment_id": null, "bug_id": 27134, "id": 52723, "time": "2004-02-21T14:29:42Z", "creator": "dgl@softec.lu", "creation_time": "2004-02-21T14:29:42Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 27134, "attachment_id": null, "text": "There is other discussions on these issues in bug 17599 (which provide a\nprobably wrong patch using option two describe above) and bug 21787 which\nprovide a similar solution to this one by always marking the ldap connection\nunbound after authentication even if it was bound to the authenticated user.", "id": 52730, "time": "2004-02-21T15:16:56Z", "creator": "dgl@softec.lu", "creation_time": "2004-02-21T15:16:56Z", "is_private": false}, {"count": 4, "tags": [], "creator": "dgl@softec.lu", "text": "Bug 24683 may seems also related", "id": 52734, "time": "2004-02-21T15:31:21Z", "bug_id": 27134, "creation_time": "2004-02-21T15:31:21Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 27134, "attachment_id": null, "text": "We tried to use the patch attached id=10470, and found that while it gave\ncorrect results, the number of open connections to the LDAP server increased\nlinearly over time. We started hitting limits on the LDAP server on open\nconnections.\n\nThis may be a generic flaw in mod_ldap, in that there is no bounds I can see on\nthe number of cached connections or how long they may be held open. In this\ncase, it doesn't appear that the open connections served much of a function.\n\nWe ended up using a patch suggested in comments to\nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=17274\n\nOn Apache 2.0.49 this was:\n\n$ diff mod_auth_ldap.c~  mod_auth_ldap.c\n329c329\n<     util_ldap_connection_close(ldc);\n---\n>     util_ldap_connection_destroy(ldc);\n\nBut this may defeat connection caching entirely. I don't claim to understand the\ncode in detail.\n\n\n", "id": 56041, "time": "2004-04-19T19:28:37Z", "creator": "atlunde@panix.com", "creation_time": "2004-04-19T19:28:37Z", "is_private": false}, {"count": 6, "tags": [], "creator": "dgl@softec.lu", "attachment_id": 11296, "id": 56139, "time": "2004-04-20T22:09:25Z", "bug_id": 27134, "creation_time": "2004-04-20T22:09:25Z", "is_private": false, "text": "Created attachment 11296\nCumulatiive patch that fix the issue of the increasing connections to the LDAP server describe above"}, {"count": 7, "tags": [], "bug_id": 27134, "attachment_id": null, "text": "The previous patch provide a fix to excessive locking done during connection\nsearching in the connection cache. This correction is also available in the\nversion 1.23 of util_ldap.c in the CVS tree. This patch contains also the\nprevious patch related to connection rebind and is appliable to the latest\nstable release to date (2.0.49).", "id": 56140, "time": "2004-04-20T22:13:55Z", "creator": "dgl@softec.lu", "creation_time": "2004-04-20T22:13:55Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 27134, "attachment_id": null, "text": "I did a series of tests using 2.0.49 with each of:\n\n1) util_ldap.c from cvs version 1.24\n\n2) util_ldap.c patched with 11296 \n\n3) util_ldap.c patched with 10470 and the change to util_ldap_connection_destroy\n\nI did tests with one data set that stepped through 11 usernames in nearly serial\norder, and another that was more of a random walk across the same usernames.\nBoth data sets included some pseudo-random failures.\n\nIt can be summarized as follows:\n\n1) the CVS code left 10 sockets in use at the end of the test until I HUPed the\nserver. It reached that near level pretty quickly and then stayed there.\n\nThe authentication results of the CVS code were entirely unreliable.\n\nFor the serial test, 34 good, 69 bad. (\"good\" is test cases the expected result)\nFor the random test, 410 good, 394 bad.\n\n(Would you suggest combining CVS with another patch?)\n\nThe versions 2) and 3) both returned 100% good results\n\nVersion (3) promptly closed all connections (as expected)\n\nVersion (2) on the serial test left 9 sockets in use at the end; \non the random test left 4 sockets in use at the end\nBoth test data sets showed some reuse of sockets.\n", "id": 56443, "time": "2004-04-26T22:40:10Z", "creator": "atlunde@panix.com", "creation_time": "2004-04-26T22:40:10Z", "is_private": false}, {"count": 9, "tags": [], "creator": "atlunde@panix.com", "text": "I'm adding this note to document some further tests on patch 11296.\n\nE-mail correspondence with Denis Gervalle, suggested I should test \nthe effects of the number of processes. (All my tests are on \nLinux running the prefork model.)\n\nI did the tests above with the default settings of\n\nStartServers         5\nMinSpareServers      5\nMaxSpareServers     10\nMaxClients         150\nMaxRequestsPerChild  0\n\nFor comparison, I set up a low process number test with:\n\nStartServers         1\nMinSpareServers      1\nMaxSpareServers     1\nMaxClients         150\nMaxRequestsPerChild  0\n\nand high process number test with:\n\nStartServers         10\nMinSpareServers      10\nMaxSpareServers     20\nMaxClients         150\nMaxRequestsPerChild  0\n\nI ran the serial and random test data against these two new\nconfigurations under 2.0.49 with patch 11296\n\nAll the test results were correct; they differed in socket usage.\n\nThe \"low process\" config left 1 socket open to the LDAP server at the\nend of both data sets.\n\nThe \"high process\" config left 15 sockets open at the end of the serial\ndata set and 13 sockets open at the end of the random data set.\n\nCombined with the test above, this seems to indicate that 11296 is\nholding sockets between requests on the order of one per process. This\nrate of usage looks fairly stable over time. It goes up and down in\ntests, but there's no long-term upward trend as there had been with\n10470.\n\nIn all my tests I'm getting a log message \n\n[debug] util_ldap.c(1139): LDAP cache: Unable to init \nShared Cache: no file\n\nwhich I guess indicates there's no shared state among processes. \nI've tried to explicitly specify a cache file writable by the \nweb server, but it does not seem to have any effect.\n", "id": 57291, "time": "2004-05-12T17:54:43Z", "bug_id": 27134, "creation_time": "2004-05-12T17:54:43Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "minfrin@sharp.fm", "attachment_id": null, "id": 57743, "time": "2004-05-20T22:53:29Z", "bug_id": 27134, "creation_time": "2004-05-20T22:53:29Z", "is_private": false, "text": "Please try the patch at http://nagoya.apache.org/bugzilla/show_bug.cgi?id=27748\nand tell me if it fixes this problem. This patch has been applied to v2.1.0-dev,\nand awaits backporting to v2.0.50-dev.\n\nThis is specifically in reference to the auth failures described.\n"}, {"count": 11, "tags": [], "creator": "minfrin@sharp.fm", "text": "\n\n*** This bug has been marked as a duplicate of 27748 ***", "id": 57815, "time": "2004-05-21T15:30:28Z", "bug_id": 27134, "creation_time": "2004-05-21T15:30:28Z", "is_private": false, "attachment_id": null}, {"count": 12, "text": "I repeated my test set up with the roll-up patch 11618 from bug 27748\n\nThe results look good.\n\nI'm now getting no unexpected authentication results, and socket usage looks\nsimilar to Denis Gervalle's previous patch.\n\nI still have the warning \"LDAP cache: Unable to init \nShared Cache: no file\", but I suppose that's a different issue.", "bug_id": 27134, "attachment_id": null, "id": 57986, "time": "2004-05-24T20:20:46Z", "creator": "atlunde@panix.com", "creation_time": "2004-05-24T20:20:46Z", "tags": [], "is_private": false}]
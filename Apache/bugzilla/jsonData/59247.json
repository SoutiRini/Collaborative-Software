[{"count": 0, "tags": [], "creator": "csutherl@apache.org", "attachment_id": 33707, "is_private": false, "id": 189783, "time": "2016-03-29T14:58:42Z", "bug_id": 59247, "creation_time": "2016-03-29T14:58:42Z", "text": "Created attachment 33707\npolicy patch proposal\n\nWhen using the IBM JDK and the security manager the following warnings are logged:\n\nWARNING [localhost-startStop-1] org.apache.juli.ClassLoaderLogManager.readConfiguration Reading logging.properties is not permitted in some context. See \"per context logging\" in the default catalina.policy file.\nWARNING [localhost-startStop-1] org.apache.juli.ClassLoaderLogManager.readConfiguration Original error was: Access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.catalina.loader\")\n\nI do not observe any negative effects of this warning, however I am only doing minimal testing and would like someone to review it to validate whether or not it is an issue. I assume that something not being able to load the logging.properties means that it isn't logging either.\n\nIt looks like adding the permission to the catalina.policy resolves the warning. I am attaching the patch which seems to work for me along with a few other files for review. Note that this does not seem to occur on trunk (though it does throw some warnings also), but it does on tomcat8 and previous versions. Also note that the added permission in the patch proposal does not exist in trunk, so I'm not sure if it is the way to go or not."}, {"count": 1, "text": "Created attachment 33708\nMore files from testing\n\nIn this attachment I've included the catalina.out logs from the tomcat8 tests using IBM Java 7 and 8, tomcat9 catalina.out from IBM Java 8, and the java -version output from each java version.", "bug_id": 59247, "is_private": false, "id": 189784, "time": "2016-03-29T15:01:17Z", "creator": "csutherl@apache.org", "creation_time": "2016-03-29T15:01:17Z", "tags": [], "attachment_id": 33708}, {"count": 2, "tags": [], "creator": "csutherl@apache.org", "text": "Created attachment 33709\njava.security.debug stack trace\n\nI forgot to include the stack trace in the previous tarball.", "id": 189786, "attachment_id": 33709, "bug_id": 59247, "creation_time": "2016-03-29T15:11:22Z", "time": "2016-03-29T15:11:22Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 59247, "is_private": false, "text": "There's nothing about the webapp in the stacktrace, so it shouldn't be added in that section, which is the most sensitive.\n\nThe permission can be added to the following section instead:\ngrant codeBase \"file:${catalina.home}/bin/tomcat-juli.jar\" {\n\nCan you verify it works ?", "id": 189842, "time": "2016-03-30T18:32:08Z", "creator": "remm@apache.org", "creation_time": "2016-03-30T18:32:08Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 59247, "text": "Yes, testing confirms that adding the permission to the tomcat-juli.jar section resolves the issue as well.", "id": 189844, "time": "2016-03-30T18:50:08Z", "creator": "csutherl@apache.org", "creation_time": "2016-03-30T18:50:08Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 189845, "attachment_id": null, "bug_id": 59247, "creation_time": "2016-03-30T19:18:42Z", "time": "2016-03-30T19:18:42Z", "text": "Ok, so it will be in 9M5, 8.5.1, 8.0.34, 7.0.69 and 6.0.46, since it likely applies to all the branches."}, {"count": 6, "tags": [], "bug_id": 59247, "text": "Created attachment 33712\nstack trace for tomcat6 denial\n\nI accidentally neglected to test tomcat6 earlier, but the addition to the policy isn't quite enough for it. Tomcat7+ works with the addition. Here is the stack trace from the additional exception.", "id": 189846, "time": "2016-03-30T19:47:37Z", "creator": "csutherl@apache.org", "creation_time": "2016-03-30T19:47:37Z", "is_private": false, "attachment_id": 33712}, {"count": 7, "tags": [], "creator": "csutherl@apache.org", "attachment_id": 33713, "is_private": false, "id": 189847, "time": "2016-03-30T19:48:54Z", "bug_id": 59247, "creation_time": "2016-03-30T19:48:54Z", "text": "Created attachment 33713\npatch proposal to resolve the tomcat6 denial\n\nAnd here is a patch that seemingly resolves the issue for review. It looks like the examples webapp wants to use a class in o.a.catalina and it's getting denied. I added a section for the examples webapp much like the manager and host-manager section and put the permission there. Hopefully I did it correctly :)"}, {"count": 8, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "From \"java.security.debug stack trace\" attachment,\n\n[[[\njava.lang.Exception: Stack trace\n\tat java.security.AccessController.throwACE(AccessController.java:144)\n\tat java.security.AccessController.checkPermissionHelper(AccessController.java:217)\n\tat java.security.AccessController.checkPermission(AccessController.java:349)\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:562)\n\tat java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1655)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:322)\n\tat java.lang.ClassLoader.loadClassHelper(ClassLoader.java:836)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:823)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:803)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findResource(WebappClassLoaderBase.java:903)\n\tat org.apache.juli.ClassLoaderLogManager.readConfiguration(ClassLoaderLogManager.java:429)\n\tat org.apache.juli.ClassLoaderLogManager$2.run(ClassLoaderLogManager.java:402)\n\tat org.apache.juli.ClassLoaderLogManager$2.run(ClassLoaderLogManager.java:398)\n\tat java.security.AccessController.doPrivileged(AccessController.java:594)\n\tat org.apache.juli.ClassLoaderLogManager.getClassLoaderInfo(ClassLoaderLogManager.java:398)\n\tat org.apache.juli.ClassLoaderLogManager.getLogger(ClassLoaderLogManager.java:230)\n\tat java.util.logging.LogManager.demandLogger(LogManager.java:562)\n\tat java.util.logging.Logger.demandLogger(Logger.java:466)\n\tat java.util.logging.Logger.getLogger(Logger.java:513)\n\tat org.apache.juli.logging.DirectJDKLog.<init>(DirectJDKLog.java:68)\n\tat org.apache.juli.logging.DirectJDKLog.getInstance(DirectJDKLog.java:188)\n\tat org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:115)\n\tat org.apache.juli.logging.LogFactory.getLog(LogFactory.java:206)\n\tat org.apache.catalina.core.ContainerBase.getLogger(ContainerBase.java:363)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5143)\n]]]\n\nThe line WebappClassLoaderBase.java:903 where it happens is\n\n>         ResourceEntry entry = resourceEntries.get(path);\n\nso IBM JDK refuses WebappClassLoaderBase's right to load class from the same package and from the same classloader.\n\nThis is rather odd behaviour. Isn't it a bug in IBM JDK?\n\nAnother thing is that I do not understand is why stacktrace goes into sun.misc.Launcher$AppClassLoader. The ResourceEntry class shall be loaded by URLClassLoader() -- the one that loads classes from ${catalina.home}/lib/*.jar -- created by o.a.c.startup.ClassLoaderFactory during bootstrap time.\n\nMaybe it tries to load something else besides that class, or this is a call to a parent classloader,\n\n\nI think that while allowing \"accessClassInPackage.org.apache.catalina.loader\" permit to tomcat-juli.jar is rather safe, this permit does not have enough grounds. (Formally: -1)\n\nI think that this can be solved by preloading the org.apache.catalina.loader.ResourceEntry class.\n\na. In an existing version of Tomcat the class can be preloaded by adding its name to \"classesToInitialize\" attribute of a JreMemoryLeakPreventionListener configured in server.xml\n\nb. Permanent solution is to preload the class via org.apache.catalina.security.SecurityClassLoad class, like many others.\n\n\n[1] http://tomcat.apache.org/tomcat-8.0-doc/config/listeners.html#JRE_Memory_Leak_Prevention_Listener_-_org.apache.catalina.core.JreMemoryLeakPreventionListener", "id": 189848, "attachment_id": null, "bug_id": 59247, "creation_time": "2016-03-30T20:02:14Z", "time": "2016-03-30T20:02:14Z", "is_private": false}, {"count": 9, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 189850, "attachment_id": null, "bug_id": 59247, "creation_time": "2016-03-30T20:50:21Z", "time": "2016-03-30T20:50:21Z", "text": "Evidently there's a \"bug\" somewhere if only the IBM JDK does this. However, since this is only added to JULI, adding it is probably not a big issue [which is why I did it], so having a workaround sounds acceptable to me.\n\nI will challenge your veto on the grounds that it doesn't cause any harm. Let's see if someone seconds it."}, {"count": 10, "tags": [], "bug_id": 59247, "text": "It looks like I should also note that this issue does affect tomcat6, tomcat7, and tomcat8 on IBM Java 7 and IBM Java 8. \n\nThere are multiple warnings in tomcat6 (the RuntimePermission denial for accessClassInPackage.org.apache.catalina in the examples webapp, which I provided another patch suggestion for after this was fixed initially, and accessClassInPackage.org.apache.catalina.loader) plus messages regarding the deprecation of Manager.setMaxInactiveInterval()), tomcat7 and tomcat8 have the same warning regarding the RuntimePermission denial of accessClassInPackage.org.apache.catalina.loader, and tomcat9 seems unaffected (doesn't log the warning other than warnings about logging.properties in the webapps).", "id": 190008, "attachment_id": null, "creator": "csutherl@apache.org", "creation_time": "2016-04-06T12:00:57Z", "time": "2016-04-06T12:00:57Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 59247, "text": "(In reply to Coty Sutherland from comment #7)\n> Created attachment 33713 [details]\n> patch proposal to resolve the tomcat6 denial\n> \n> And here is a patch that seemingly resolves the issue for review. It looks\n> like the examples webapp wants to use a class in o.a.catalina and it's\n> getting denied. I added a section for the examples webapp much like the\n> manager and host-manager section and put the permission there. Hopefully I\n> did it correctly :)\n\nComment on this Tomcat 6 patch:\n\nThe issue:\n\n> WARNING: WebappClassLoader.findClassInternal(chat.ChatServlet) security exception: Access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.org.apache.catalina\")\n\n1. I am -1 on adding this permission by default. If you are security conscious, you should not have the examples webapp installed. This is mentioned in \"Security Considerations\" page (available in Tomcat 7 and later documentation). [1]\n\nThis issue is originally known as bug 48218 and was resolved by package name change in Tomcat 7.\n\n\n\n2. It is worth adding this configuration fragment as commented-out example in catalina.policy.\n\n[1] https://tomcat.apache.org/tomcat-7.0-doc/security-howto.html#Examples", "id": 190010, "time": "2016-04-06T12:10:21Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2016-04-06T12:10:21Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 59247, "is_private": false, "text": "That makes perfect sense to me. You already have to do some configuration things to use the security manager, so adding it as a comment in the policy (like the ones for the manager and host-manager apps) and then noting that in docs is a good solution I think. I only offered it because it seemingly resolved the issue and wanted feedback from you folks on whether or not it made sense.", "id": 190011, "time": "2016-04-06T12:20:31Z", "creator": "csutherl@apache.org", "creation_time": "2016-04-06T12:20:31Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 59247, "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #11)\n\nCan you demonstrate that no actual webapps besides the example could be affected by the issue ? This would effectively make the workaround rather useless.", "id": 190012, "time": "2016-04-06T12:22:44Z", "creator": "remm@apache.org", "creation_time": "2016-04-06T12:22:44Z", "attachment_id": null}, {"id": 190013, "tags": [], "bug_id": 59247, "is_private": false, "count": 14, "text": "(In reply to Remy Maucherat from comment #13)\n> (In reply to Konstantin Kolinko from comment #11)\n> \n> Can you demonstrate that no actual webapps besides the example could be\n> affected by the issue ? This would effectively make the workaround rather\n> useless.\n\nThis is originally known as bug 48218. It affects the web applications using Comet API.\n\nIn the examples webapp it affects the ChatServlet servlet only -- the servlet fails to load, but the rest of web application functions correctly.\n\nIt was solved by moving the Comet API classes into a separate package in Tomcat 7 and adding permission for that separate package - r833510.", "time": "2016-04-06T12:32:14Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2016-04-06T12:32:14Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 59247, "attachment_id": null, "text": "(In reply to Remy Maucherat from comment #9)\n> Evidently there's a \"bug\" somewhere if only the IBM JDK does this. However,\n> since this is only added to JULI, adding it is probably not a big issue\n> [which is why I did it], so having a workaround sounds acceptable to me.\n> \n> I will challenge your veto on the grounds that it doesn't cause any harm.\n> Let's see if someone seconds it.\n\nRegarding the tomcat 9 patch (juli issue):\n\n1. Allowing \"accessClassInPackage.org.apache.catalina.loader\" to any web application, as proposed by original patch, is not good.\n\nA web application should not have reflective access to WebappClassLoader.\n\n2. Adding this permission for tomcat-juli.jar, as implemented by r1737149, implies that the call chain does not have web application code in it.\n\nIf it has only Tomcat code in it, it means that this solves this specific use case. It is not some generic feature available to web applications.\n\n3. Preloading a class is how we solved similar issues in the past.\n\nPersonally, I think that preloading a class provides better life cycle for the Class. The class is explicitly loaded by System classloader. The WebappClassLoader is not involved.\n\nIf the class uses logging, it will use configuration provided by System classloader, not one provided by TCCL.\n\n\nThe trick with preloading is that you need to know what class needs to be loaded. Adding a permission is easier, as this is what java.security.debug logging shows you, but it is harder to evaluate the consequences.\n\nFrom 2. I do not see much consequences (as web application code is not in the call chain), but I do not see much benefits either.\n\n\nPreloading the class can be tested by adding the class name to the \"classesToInitialize\" attribute of a JreMemoryLeakPreventionListener in server.xml [2]\n\n[2] http://tomcat.apache.org/tomcat-6.0-doc/config/listeners.html", "id": 190014, "time": "2016-04-06T12:58:42Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2016-04-06T12:58:42Z", "is_private": false}, {"text": "For starters, I will revert the workaround from trunk and 8.5 since it doesn't apply.\n\nAbout preloading, ok, but it's a code change for a workaround. I don't see why classloading access by JULI is bad, after all it is toying with the classloader as is.", "tags": [], "bug_id": 59247, "is_private": false, "count": 16, "id": 190015, "time": "2016-04-06T13:04:20Z", "creator": "remm@apache.org", "creation_time": "2016-04-06T13:04:20Z", "attachment_id": null}, {"count": 17, "text": "(In reply to Remy Maucherat from comment #16)\n> For starters, I will revert the workaround from trunk and 8.5 since it\n> doesn't apply.\n> \n> About preloading, ok, but it's a code change for a workaround. I don't see\n> why classloading access by JULI is bad, after all it is toying with the\n> classloader as is.\n\nRegarding this particular accessClassInPackage permission - I guess that I am still under impression of CVE-2010-1622 [3] that used to manipulate the classloader. Though that particular attack vector was closed by r966292 / r966750.\n\n[3] http://www.securityfocus.com/archive/1/511877", "bug_id": 59247, "is_private": false, "id": 190016, "time": "2016-04-06T13:30:27Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2016-04-06T13:30:27Z", "tags": [], "attachment_id": null}, {"count": 18, "tags": [], "creator": "remm@apache.org", "attachment_id": 33735, "is_private": false, "id": 190031, "time": "2016-04-06T21:59:23Z", "bug_id": 59247, "creation_time": "2016-04-06T21:59:23Z", "text": "Created attachment 33735\nOther patch\n\nBased on preloading ResourceEntry\n\nCoty, can you check that this patch actually works as well with Tomcat 8 ?"}, {"count": 19, "text": "Remy,\n\nI just tested that patch with tomcat-8.0.x/trunk (and tomcat-7.0.x/trunk) and it looks good to me.", "bug_id": 59247, "is_private": false, "id": 190044, "time": "2016-04-07T13:05:09Z", "creator": "csutherl@apache.org", "creation_time": "2016-04-07T13:05:09Z", "tags": [], "attachment_id": null}]
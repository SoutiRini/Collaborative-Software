[{"count": 0, "attachment_id": null, "bug_id": 8645, "text": "This might or might not be Tomcat's problem, however I've found no \ndocumentation of this problem anywhere on the web, and Tomcat is severly \naffected. If Tomcat is behaving according to plan, then this bug report can be \nseen more as \"for information purposes\".\n\nMicrosoft's \"Services for UNIX v2.0\" http://www.microsoft.com/windows2000/sfu/ \nincludes an NFS server amongst other things. This server has a big problem \nwith last modification times of files. \n\nMy setup is a Windows 2000 Server with Services for UNIX, sharing some folders \nusing NFS to a Redhat Linux 7.2 box where I'm running tomcat on the NFS file \nsystem. \n\nIt seems the NFS server sets the modification time twice for every update to \nthe file. First when the NFS write is done to memory, and second when the \nchange is flushed out to disk. I have verified that the second modification \ndate change happens when I see a change in the NTFS file system. \n\nConsider the following shell excercise where we can see the modification date \nchanging twice just using some normal shell tools:\n\n$ pwd \n/home/martin\n\n$ mount | grep /home/martin\nwinserv:/user_folders/martin on /home/martin type nfs (rw,hard,addr=10.8.0.2)\n\n$ date ; echo \"foo\" >> bar ; ls --full-time bar\nTue Apr 30 09:42:21 BST 2002\n-rw-rw-r--    1 martin   dev             4 Tue Apr 30 09:42:21 2002 bar\n\n$ date ; ls --full-time bar\nTue Apr 30 09:42:31 BST 2002\n-rw-rw-r--    1 martin   dev             4 Tue Apr 30 09:42:23 2002 bar\n\n\nIn words what we see is that the file gets a new modification time when I do \nthe echo to the file. And roughly ten seconds later when I look at it again. \nThe modification time has changed again (after that it stays as is). The \nsecond change is always around 2 seconds later.\n\nNeedless to say this has quite significant impacts on applications like \nTomcat, where the modificaion time is used to determine reloads. The behaviour \nI'm seeing in Tomcat is along the lines of:\n\nA) .jsp gets compiled to .java that gets compiled to .class\n2002-04-30 09:03:12 - Ctx() : Compiling: /index.jsp to index_0\n\nB) A dependency graph is built inside Tomcat using \norg.apache.tomcat.util.Dependecy and org.apache.tomcat.util.DependManager. The \ndependencies seems to be:\nROOT context -> .jsp\nROOT context -> .java \nROOT context -> .class\n\nC) At a later request the DependManager will validate the dependencies and \nfinds the the .class file to have changed. (DependManager contains logging, \nbut it is not possible to turn on without editing the class):\nDependManager: Found expired file index_1.class\nDependManager: ShouldReload5 E=true C=false\n\nD) This triggers an invalidation of the whole dependency graph (my guess) that \nultimatelly triggers the reload of the context:\n2002-04-30 09:05:58 - ContextManager: Removing context \nmartin.www.ioboxgroup.com.developer.taglab.com:/ROOT\n2002-04-30 09:05:58 - Ctx() : Remove mapping\n2002-04-30 09:05:58 - Ctx() : Remove mapping /index.jsp\n2002-04-30 09:05:58 - ContextManager: Adding context 127.0.0.1:/ROOT\n\nMy webapps doesn't handle this reload very well, so this was a problem for me. \n\nPossible fixes:\n\n1) Stop using crap Microsoft solutions.\n\n2) Convince Microsoft to fix this problem (why does the phrase \"move a \nmountain\" spring to mind?)\n\n3) Make the Dependency class tolerant for \"minor changes\" in the modification \ndate. By testing I have concluded that the second update to the modification \ndate seems to always be around 2 seconds after the first. The solution I've \nimplemented locally allows for a 4 second change without doing a reload. This \nhas of course the unwanted side effect that if I update say a JSP two times \nwithin 4 seconds, the server might not notice the second change. Arguably this \nis a fix for the symptoms and not the cause, and hence is probably nothing we \nwould like to see in the Tomcat code base.\n\n4) Should a change in the .class file really trigger a reload of the whole \ncontext? In the DependManager there is a concept of files being \"local\" or \nnot \"local\". A change in a local is seemed to not be a reason to invalidate \nthe whole Dependency manager. I am not sure I have all the facts about \nthe \"local\" concept, but perhaps the .class file should be considered local, \nand hence not trigger context reloads?\n\nThanks,\nMartin Algesten\n\nBelow is a diff of my current fix 3). I don't believe we want this in the code \nbase but for reference:\n\n$ diff -u Dependency.java-2002-04-29 Dependency.java\n--- Dependency.java-2002-04-29  Mon Apr 29 19:30:17 2002\n+++ Dependency.java     Mon Apr 29 19:30:49 2002\n@@ -163,7 +163,26 @@\n      *  be called to force a check for this particular dependency.\n      */\n     public boolean checkExpiry() {\n-       if( lastModified < origin.lastModified() ) {\n+\n+        // Fix for broken Microsoft NFS, where the modification date\n+        // gets set twice on a modification/creation of a file. First\n+        // just after it has been updated and then again after approximatelly\n+        // 2 seconds.\n+\n+        long o = origin.lastModified();\n+\n+        long t = o - lastModified;\n+\n+        // if the update was made in less that 4 seconds, then we ignore it\n+        // and update our internal timestamp.\n+        if ( t < 4000 ) {\n+\n+          lastModified = o;\n+          return false;\n+\n+        }\n+\n+       if( lastModified < o ) {\n            expired=true;\n            return true;\n        }", "id": 15105, "time": "2002-04-30T09:32:52Z", "creator": "puckman@taglab.com", "creation_time": "2002-04-30T09:32:52Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "creator": "bojan@binarix.com", "is_private": false, "id": 15109, "time": "2002-04-30T11:21:24Z", "bug_id": 8645, "creation_time": "2002-04-30T11:21:24Z", "tags": [], "text": "Although I'd personally vote for solution 1 :-), have you tried running Samba\nmount instead? Something like:\n\nmount -t smbfs //winserv/martin /home/martin -o username= (blah, blah...)\n\nYou might have to fiddle with permissions a bit, but I think it can be done.\n\nBojan"}, {"count": 2, "tags": [], "bug_id": 8645, "text": "I haven't seen any strong evidence that autofs and samba would play well \ntogether. NIS, autofs and NFS is a very well proven concept in comparison.", "id": 15110, "time": "2002-04-30T11:48:01Z", "creator": "puckman@taglab.com", "creation_time": "2002-04-30T11:48:01Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 8645, "text": "Obviously not with Microsoft NFS ;-)\n\nWhat do you need autofs in this scenario for?\n\nBojan", "id": 15112, "time": "2002-04-30T12:18:54Z", "creator": "bojan@binarix.com", "creation_time": "2002-04-30T12:18:54Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 8645, "attachment_id": null, "text": "To have a unified home directory no matter if I'm using the Linux development \nserver or a Windows desktop. This helps us having centralised backups etc etc. \nautofs helps with this and centralised home directories is a Good Thing (TM). \nHmmm are we off scope now?", "id": 15115, "time": "2002-04-30T13:01:08Z", "creator": "puckman@taglab.com", "creation_time": "2002-04-30T13:01:08Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 8645, "attachment_id": null, "text": "I guess we are off scope, but I don't think it matters - we're trying to resolve\nyou problem, right?\n\nFirst, the real reason why I don't like the patch. A quick search through Tomcat\nsources reveals that the method lastModified() gets called in a number of\ndifferent places, from different code and always relies on the fact that the\ntimestamp of the file has changed (correctly). So, you would potentially be\nfixing a lot more instances. And then there is of course Ant, Velocity and other\nJakarta software that would have to do the same to satisfy a buggy piece of\nsoftware. Sometimes that's the only option (for instance a buggy ZIP\nimplementation in JDK, screwing class reloads from .jar files) since it is core\npart of the system and cannot be avoided. But this scenario isn't one of those\nthings (although I appreciate that it is important to you).\n\nIn solution to your problem, why not have the home directories on a Linux box -\nthen you can have a decent SMB and NFS on the same machine. I have searched the\nweb for smbfs + autofs and even found a HOWTO. I agree when you say that it is\nan unproven concept, but so is Microsoft NFS.\n\nBojan", "id": 15203, "time": "2002-04-30T22:23:20Z", "creator": "bojan@binarix.com", "creation_time": "2002-04-30T22:23:20Z", "is_private": false}, {"count": 6, "attachment_id": null, "creator": "puckman@taglab.com", "is_private": false, "id": 15224, "time": "2002-05-01T07:32:23Z", "bug_id": 8645, "creation_time": "2002-05-01T07:32:23Z", "tags": [], "text": "If I could switch to Linux as our fileserver easily, I would. However a \nsignificant investment (for a small company like ours) has already been made \nin our infrastructure in terms of both hardware and more importantly man \nhours. We might still buy a new Linux box as a file server, but we want to \nknow the exact implications of the current situation before rushing to a \ndecision.\n\nAs I said in my original letter, the fix 3) I've implemented is probably not \nwhat we want to have in any codebase. However I'm now more thinking about \nnumber 4).\n\nIs it reasonable that a change in the modification time of a generated .class \nfile invalidates the whole context? I guess from a paranoid point of view, if \nthe class file changes, then something serious have happened, and thus some \nserious action should be taken. But what would the implications be if it only \nresulted in a reload of that particular JSP and not the whole context?"}, {"count": 7, "tags": [], "creator": "bojan@binarix.com", "is_private": false, "text": "My understanding is that ReloadInterceptor is in charge of context reloading.\nThere is an option in there by the name of 'fullReload', which is on by default.\nSo, if you flick this to 'false', you might get what you want.\n\nBe warned, the code is marked buggy in ReloadInterceptor.java...\n\nBojan", "id": 15233, "time": "2002-05-01T11:31:46Z", "bug_id": 8645, "creation_time": "2002-05-01T11:31:46Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 8645, "text": "I've tried that with 3.3a with no success, will give it a go with 3.3.1...", "id": 15238, "time": "2002-05-01T12:56:54Z", "creator": "puckman@taglab.com", "creation_time": "2002-05-01T12:56:54Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 8645, "is_private": false, "id": 15463, "creation_time": "2002-05-04T00:40:35Z", "time": "2002-05-04T00:40:35Z", "creator": "bojan@binarix.com", "text": "I'm marking this WONTFIX for now. Maybe if there is a patch along the lines of\n4), we can rehash this some time later.\n\nBojan", "attachment_id": null}]
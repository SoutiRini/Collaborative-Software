[{"count": 0, "tags": [], "bug_id": 4406, "text": "Some java compilers, such as Jikes have very unique arguments that are not\nappropriate to other java compilers.\n\nDiane Holt suggested the following on ant-user@jakarta.apache.org:\n-----------------------------------------------------------------------\nHow about a nested <flags> element that takes a \"compiler\" and \"args\"\nattribute, and only uses those that are for the compiler currently being\nused? For example:\n\n  <flags compiler=\"jikes\" args=\"+Z\"/>\n  <flags compiler=\"modern\" args=\"-g:lines\"/>\n-----------------------------------------------------------------------\n\nI have coded up a patch per her proposal, for your consideration.\n\nThanks!\n-Steve-\n\nHere are the cvs diff's for the patch:\n\nIndex: src/main/org/apache/tools/ant/taskdefs/Javac.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/Javac.java,v\nretrieving revision 1.70\ndiff -u -b -B -r1.70 Javac.java\n--- src/main/org/apache/tools/ant/taskdefs/Javac.java   2001/09/30 13:21:53 1.70\n+++ src/main/org/apache/tools/ant/taskdefs/Javac.java   2001/10/24 22:50:07\n@@ -62,6 +62,8 @@\n import org.apache.tools.ant.taskdefs.compilers.*;\n\n import java.io.File;\n+import java.util.Enumeration;\n+import java.util.Vector;\n\n /**\n  * Task to compile Java source files. This task can take the following\n@@ -119,6 +121,7 @@\n     private boolean nowarn = false;\n     private String memoryInitialSize;\n     private String memoryMaximumSize;\n+   private Vector compilerSpecificFlags = new Vector();\n\n     protected boolean failOnError = true;\n     protected File[] compileList = new File[0];\n@@ -514,33 +517,8 @@\n\n         // compile the source files\n\n-        String compiler = project.getProperty(\"build.compiler\");\n+        String compiler = this.determineCompiler();\n\n-        if (fork) {\n-            if (compiler != null) {\n-                if (isJdkCompiler(compiler)) {\n-                    log(\"Since fork is true, ignoring build.compiler setting.\",\n-                        Project.MSG_WARN);\n-                    compiler = \"extJavac\";\n-                }\n-                else {\n-                    log(\"Since build.compiler setting isn't classic or modern,\nignoring fork setting.\", Project.MSG_WARN);\n-                }\n-            }\n-            else {\n-                compiler = \"extJavac\";\n-            }\n-        }\n-\n-        if (compiler == null) {\n-            if (Project.getJavaVersion() != Project.JAVA_1_1 &&\n-                Project.getJavaVersion() != Project.JAVA_1_2) {\n-                compiler = \"modern\";\n-            } else {\n-                compiler = \"classic\";\n-            }\n-        }\n-\n         if (compileList.length > 0) {\n\n             CompilerAdapter adapter = CompilerAdapterFactory.getCompiler(\n@@ -608,4 +586,79 @@\n             \"javac1.4\".equals(compiler);\n     }\n\n+   private String determineCompiler() {\n+        String compiler = project.getProperty(\"build.compiler\");\n+\n+        if (fork) {\n+            if (compiler != null) {\n+                if (isJdkCompiler(compiler)) {\n+                    log(\"Since fork is true, ignoring build.compiler setting.\",\n+                        Project.MSG_WARN);\n+                    compiler = \"extJavac\";\n+                }\n+                else {\n+                    log(\"Since build.compiler setting isn't classic or modern,\nignoring fork setting.\", Project.MSG_WARN);\n+                }\n+            }\n+            else {\n+                compiler = \"extJavac\";\n+            }\n+        }\n+\n+        if (compiler == null) {\n+            if (Project.getJavaVersion() != Project.JAVA_1_1 &&\n+                Project.getJavaVersion() != Project.JAVA_1_2) {\n+                compiler = \"modern\";\n+            } else {\n+                compiler = \"classic\";\n+            }\n+        }\n+       return(compiler);\n+   }\n+\n+   public Flags createFlags() {\n+       Flags newFlags = new Flags();\n+       compilerSpecificFlags.add(newFlags);\n+       return(newFlags);\n+   }\n+\n+   public String getFlagsForCurrentCompiler() {\n+        String compiler = this.determineCompiler();\n+       Enumeration e = this.compilerSpecificFlags.elements();\n+\n+       while(e.hasMoreElements()) {\n+           Flags flag = (Flags)e.nextElement();\n+           String targetCompiler = flag.getCompiler();\n+\n+           if((targetCompiler != null) && (targetCompiler.equals(compiler))) {\n+               return(flag.getArgs());\n+           }\n+       }\n+       return(null);\n+   }\n+\n+   static public class Flags extends DataType {\n+       private String compiler = null;\n+       private String args = null;\n+\n+       public Flags() {\n+           super();\n+       }\n+\n+       public void setCompiler(String targetCompiler) {\n+           this.compiler = targetCompiler;\n+       }\n+\n+       public String getCompiler() {\n+           return(this.compiler);\n+       }\n+\n+       public void setArgs(String targetArgs) {\n+           this.args = targetArgs;\n+       }\n+\n+       public String getArgs() {\n+           return(this.args);\n+       }\n+   }\n }\nIndex:\nsrc/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java,v\nretrieving revision 1.9\ndiff -u -b -B -r1.9 DefaultCompilerAdapter.java\n---\nsrc/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java   \n2001/09/30 13:21:54 1.9\n+++\nsrc/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java   \n2001/10/24 22:50:07\n@@ -310,8 +310,21 @@\n         if (verbose) {\n             cmd.createArgument().setValue(\"-verbose\");\n         }\n+\n+        handleCompilerSpecificFlags(cmd);\n         return cmd;\n     }\n+\n+   /**\n+    * handleCompilerSpecificFlags\n+    **/\n+   protected Commandline handleCompilerSpecificFlags(Commandline cmd) {\n+       String flagsForThisCompiler = attributes.getFlagsForCurrentCompiler();\n+       if (flagsForThisCompiler != null) {\n+           cmd.createArgument().setValue(flagsForThisCompiler);\n+       }\n+       return(cmd);\n+   }\n\n     /**\n      * Does the command line argument processing common to classic and\nIndex: src/main/org/apache/tools/ant/taskdefs/compilers/Gcj.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/compilers/Gcj.java,v\nretrieving revision 1.3\ndiff -u -b -B -r1.3 Gcj.java\n--- src/main/org/apache/tools/ant/taskdefs/compilers/Gcj.java   2001/10/12\n08:14:08 1.3\n+++ src/main/org/apache/tools/ant/taskdefs/compilers/Gcj.java   2001/10/24\n22:50:07\n@@ -76,6 +76,7 @@\n         Commandline cmd;\n         attributes.log(\"Using gcj compiler\", Project.MSG_VERBOSE);\n         cmd = setupGCJCommand();\n+       handleCompilerSpecificFlags(cmd);\n\n         int firstFileName = cmd.size();\n         logAndAddFilesToCompile(cmd);\nIndex: src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java,v\nretrieving revision 1.2\ndiff -u -b -B -r1.2 Jikes.java\n--- src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java 2001/08/18\n14:59:39 1.2\n+++ src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java 2001/10/24\n22:50:07\n@@ -208,6 +209,8 @@\n         if (fullDependProperty != null &&\nProject.toBoolean(fullDependProperty)) {\n             cmd.createArgument().setValue(\"+F\");\n         }\n+\n+       handleCompilerSpecificFlags(cmd);\n\n         int firstFileName = cmd.size();\n         logAndAddFilesToCompile(cmd);\nIndex: src/main/org/apache/tools/ant/taskdefs/compilers/Jvc.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/compilers/Jvc.java,v\nretrieving revision 1.2\ndiff -u -b -B -r1.2 Jvc.java\n--- src/main/org/apache/tools/ant/taskdefs/compilers/Jvc.java   2001/01/26\n08:43:02 1.2\n+++ src/main/org/apache/tools/ant/taskdefs/compilers/Jvc.java   2001/10/24\n22:50:07\n@@ -129,6 +129,8 @@\n             cmd.createArgument().setValue(\"/verbose\");\n         }\n\n+       handleCompilerSpecificFlags(cmd);\n+\n         int firstFileName = cmd.size();\n         logAndAddFilesToCompile(cmd);\n\nIndex: src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java,v\nretrieving revision 1.1\ndiff -u -b -B -r1.1 Kjc.java\n--- src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java   2001/08/01\n15:54:24 1.1\n+++ src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java   2001/10/24\n22:50:07\n@@ -75,6 +75,7 @@\n     public boolean execute() throws BuildException {\n         attributes.log(\"Using kjc compiler\", Project.MSG_VERBOSE);\n         Commandline cmd = setupKjcCommand();\n+       handleCompilerSpecificFlags(cmd);\n\n         try {\n             Class c = Class.forName(\"at.dms.kjc.Main\");", "id": 7117, "time": "2001-10-24T16:23:38Z", "creator": "anderson@berbee.com", "creation_time": "2001-10-24T16:23:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 718\ncvs diff -u output of the proposed patch", "attachment_id": 718, "bug_id": 4406, "id": 7118, "time": "2001-10-24T16:25:10Z", "creator": "anderson@berbee.com", "creation_time": "2001-10-24T16:25:10Z", "is_private": false}, {"count": 2, "tags": [], "creator": "anderson@berbee.com", "attachment_id": null, "text": "Sorry about duplicating the patch file in the original comments.  This is my\nfirst bugzilla submission, and I didn't know I could attach the file later.\n\nThanks!\n-Steve-", "id": 7119, "time": "2001-10-24T16:27:24Z", "bug_id": 4406, "creation_time": "2001-10-24T16:27:24Z", "is_private": false}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 7533, "time": "2001-11-05T07:31:19Z", "bug_id": 4406, "creation_time": "2001-11-05T07:31:19Z", "text": "I've committed a more flexible (IMHO) approach for nightly build 2001-11-06.\n\nBased on your ideas, I have added a <compilerarg> child element that takes\nadvantage of the command line argument class already present in Ant's core."}, {"count": 4, "tags": [], "bug_id": 4406, "attachment_id": null, "text": "*** Bug 1847 has been marked as a duplicate of this bug. ***", "id": 7792, "time": "2001-11-12T12:00:53Z", "creator": "umagesh@rediffmail.com", "creation_time": "2001-11-12T12:00:53Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 4406, "attachment_id": null, "id": 12283, "time": "2002-03-25T10:40:39Z", "creator": "bodewig@apache.org", "creation_time": "2002-03-25T10:40:39Z", "is_private": false, "text": "just as a heads up: to make <javac> more consistent, <compilerarg>'s\nattribute has been renamed from \"implementation\" to \"compiler\" in nightly build\n2002-03-26."}, {"count": 6, "tags": [], "bug_id": 4406, "attachment_id": null, "id": 13471, "time": "2002-04-13T20:45:22Z", "creator": "andda715@student.liu.se", "creation_time": "2002-04-13T20:45:22Z", "is_private": false, "text": "*** Bug 8054 has been marked as a duplicate of this bug. ***"}]
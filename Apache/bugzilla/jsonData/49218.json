[{"count": 0, "tags": [], "text": "I have added the test for it in r939253\n\nThe tests in TestStandardContextResources are currently failing, and thus are wrapped with if(false) until a solution is found.\n\nI debugged the context.getResource(\"/resourceB.jsp\") call in the second test and I see that the following exception is caught and silently swallowed in o.a.c.core.ApplicationContext#getResource():\n\njava.lang.IllegalStateException: zip file closed\n at java.util.jar.JarFile.getMetaInfEntryNames(Native Method)\n at java.util.jar.JarFile.maybeInstantiateVerifier(JarFile.java:277)\n at java.util.jar.JarFile.getInputStream(JarFile.java:381)\n at org.apache.naming.resources.WARDirContext$WARResource.streamContent(WARDirContext.java:951)\n at org.apache.naming.resources.ProxyDirContext.cacheLoad(ProxyDirContext.java:1578)\n at org.apache.naming.resources.ProxyDirContext.cacheLookup(ProxyDirContext.java:1458)\n at org.apache.naming.resources.ProxyDirContext.lookup(ProxyDirContext.java:292)\n at org.apache.catalina.core.ApplicationContext.getResource(ApplicationContext.java:506)\n\n\n\n\nBesides the above, I have the following concerns related to resources support:\n\n1. The JavaDoc for ServletContext#getResourcePaths() in the Servlet 3.0 specification shows, that this method should list the resources from the JAR files as well.\n\nI cannot test it now, but I think that that is not implemented yet. A test for this could be added to TestStandardContextResources.java\n\nWhat is not clear to me there is what happens when the resource is present both in web application and in the resources JAR - should it be listed twice, or once only? I do not see much harm from listing it twice.\n\n\n2. BaseDirContext#addResourcesJar():\n\nThe jarFile.getEntry(\"/\"); call there returns null.\n\nActually it is not needed there at all, because the second argument to the WARDirContext constructor is essentially ignored, because warDirContext.loadEntries() reinitializes the WARDirContext#entries field.\n\n\n3. BaseDirContext\n\nIn all places where (\"META-INF/resources/\" + name) is used there is an \"else\"  branch where \"META-INF/resources/\" prefix is not added.\n\nI think it is an error, though it does not matter much because the main branch is usually executed. E.g., in #listBindings():\n\n  if (altDirContext instanceof BaseDirContext)\n      bindings = ((BaseDirContext) altDirContext).doListBindings(\n            \"META-INF/resources/\" + name);\n  else {\n   try {\n      bindings = altDirContext.listBindings(name);\n   } catch (NamingException ne) {\n      // Ignore\n   }\n }\n\nIf the altDirContext field were declared as List<BaseDirContext>, the code could be simplified.\n\n\n4. As of now, resource JARs are considered only if they are web fragments. That is if they contain META-INF/web-fragment.xml and the main web.xml has metadata-complete=\"false\".\n\nI think that this is the correct implementation, based on the security and backwards compatibility considerations, but I do not see where the Servlet 3.0 spec explicitly says about these requirements. Is it implied from what is said in ch.8.2? I think it could be more explicit in the spec.", "is_private": false, "id": 136514, "creator": "knst.kolinko@gmail.com", "time": "2010-04-29T07:21:16Z", "bug_id": 49218, "creation_time": "2010-04-29T07:21:16Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "Re: \"zip file closed\"\n\nThanks to Peter Ro\u00dfbach, I found that webapp-3.0-fragments webapp fails only when it is run in a testcase.  If it is deployed on a standalone Tomcat 7 instance, it works.\n\nAfter some thought I found the cause: the test runs successfully if I add JreMemoryLeakPreventionListener to the configuration.\n\nIt sounds a bit weird, but so it is.  My speculation is that we somewhere close the JarFile/ZipFile explicitly. The system-wide caching, that is turned off by JreMemoryLeakPreventionListener, caches a JarFile when it is accessed through URL. Explicitly closing the file closes the file in the cache, making it unusable. \nI debugged it a bit, and the place where the JAR is closed is WebappClassLoader#closeJARs() that is called as soon as web application startup is completed.\n\n\nAs of now, I resolve this by adding JreMemoryLeakPreventionListener to the testcase configuration.  Are there other ways to resolve this, e.g. to somehow change how the resource JARs are handled?", "id": 136551, "time": "2010-04-29T23:45:59Z", "bug_id": 49218, "creation_time": "2010-04-29T23:45:59Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 49218, "attachment_id": 25384, "text": "Created attachment 25384\n\"Not found\" Resource Example with to fragments", "id": 136569, "time": "2010-04-30T07:44:34Z", "creator": "pr@objektpark.de", "creation_time": "2010-04-30T07:44:34Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 49218, "attachment_id": null, "id": 136570, "time": "2010-04-30T07:53:40Z", "creator": "pr@objektpark.de", "creation_time": "2010-04-30T07:53:40Z", "is_private": false, "text": "I have build a standalone war that still have the not found problem! Arrg!\n\nI have build two fragments: servlet30/WEB-INF/lib/hello2.jar\nMETA-INF/\nMETA-INF/MANIFEST.MF\napi/\napi/HelloApiServlet.class\napi/ServletSetupListener.class\nMETA-INF/resources/\nMETA-INF/resources/A/\nMETA-INF/resources/A/resourceB.jsp\nMETA-INF/resources/hello.jsp\nMETA-INF/resources/hello.txt\nMETA-INF/resources/resourceB.jsp\nMETA-INF/web-fragment.xml\n<!-- has an order constraint deployed after \"other\"-fragment -->\n and other.jar\n\nMETA-INF/\nMETA-INF/MANIFEST.MF\nannotation/\nannotation/GetResourceServlet.class\nMETA-INF/resources/\nMETA-INF/resources/folder/\nMETA-INF/resources/folder/resourceC.jsp\nMETA-INF/resources/folder/resourceD.jsp\nMETA-INF/resources/resourceA.jsp\nMETA-INF/resources/resourceB.jsp\nMETA-INF/web-fragment.xml\n\ndir:\ndaVinci:servlet30 peter$ tree *\nMETA-INF\n|-- MANIFEST.MF\n`-- context.xml\nWEB-INF\n|-- classes\n|   |-- annotation\n|   |   |-- GetResourceServlet.class\n|   |   |-- HelloBean.class\n|   |   |-- HelloFilter.class\n|   |   |-- HelloServlet.class\n|   |   |-- LogApplicationLifeCycleListener.class\n|   |   |-- LogRequestListener.class\n|   |   `-- ParamServlet.class\n|   `-- api\n|-- lib\n|   |-- hello2.jar\n|   `-- over.jar\n`-- web.xml\nfolder\n|-- resourceC.jsp\n`-- resourceE.jsp\nindex.jsp \nresourceA.jsp\n\n\nI can't access hello.jsp or hello.txt, but can access resourceB.jsp...\n\nVery strange!"}, {"count": 4, "tags": [], "bug_id": 49218, "attachment_id": null, "id": 136573, "time": "2010-04-30T08:12:09Z", "creator": "pr@objektpark.de", "creation_time": "2010-04-30T08:12:09Z", "is_private": false, "text": "Have checkin second resource2.jar and update testcase TestStandardContextResources to failed again!\n\nSorry..."}, {"count": 5, "tags": [], "bug_id": 49218, "text": "(In reply to comment #4)\nTestStandardContextResources calling resourceF.jsp in r939650 checks for wrong value. It should look for \"resourceF.jsp in resources.jar\".\n\nBesides that, it really uncovered a bug. The test fails because of the following:\n\n5. In BaseDirContext#lookup():\naltDirContext.lookup(\"META-INF/resources/\" + name) does not return null, but throws a NamingException, which aborts the for( : altDirContexts) cycle.\n\nSo, either lookup for resourceF.jsp or for resourceF.jsp will fail, depending on the order in altDirContexts (the spec says that the order is arbitrary).\n\n\n6. Also in BaseDirContext#lookup():\ndoLookup(name) call is also documented to throw NamingException.\nEither it does not throw it and the doLookup method signature has to be updated (or at least add a JavaDoc there), or the code is broken.", "id": 136585, "time": "2010-05-01T08:13:02Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-05-01T08:13:02Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 49218, "attachment_id": null, "text": "\n(In reply to comment #5)\n> (In reply to comment #4)\n> TestStandardContextResources calling resourceF.jsp in r939650 checks for wrong\n> value. It should look for \"resourceF.jsp in resources.jar\".\nFix with 940405. Sorry!\n\n> \n> Besides that, it really uncovered a bug. The test fails because of the\n> following:\n> \n> 5. In BaseDirContext#lookup():\n> altDirContext.lookup(\"META-INF/resources/\" + name) does not return null, but\n> throws a NamingException, which aborts the for( : altDirContexts) cycle.\nOk, look at listBindings. We can ignore the sub Exceptions.\nFixed!\n\n> \n> So, either lookup for resourceF.jsp or for resourceF.jsp will fail, depending\n> on the order in altDirContexts (the spec says that the order is arbitrary).\n> \n> \n> 6. Also in BaseDirContext#lookup():\n> doLookup(name) call is also documented to throw NamingException.\n> Either it does not throw it and the doLookup method signature has to be updated\n> (or at least add a JavaDoc there), or the code is broken.\n+1 .. Go ahead to fix doLookup(name)!", "id": 136600, "time": "2010-05-03T05:48:36Z", "creator": "pr@objektpark.de", "creation_time": "2010-05-03T05:48:36Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 49218, "attachment_id": null, "id": 136805, "time": "2010-05-12T07:10:21Z", "creator": "markt@apache.org", "creation_time": "2010-05-12T07:10:21Z", "is_private": false, "text": "The remaining issue has been fixed in trunk and will be included in 7.0.0 onwards."}]
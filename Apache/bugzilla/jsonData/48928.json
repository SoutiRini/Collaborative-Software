[{"count": 0, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 25140, "text": "Created attachment 25140\n2010-03-17_tc6_CatalinaSecurityManager.patch\n\nWhile looking again at those AccessControlException exceptions\nthat are cured by preloading classes in SecurityClassLoad classes\nof Catalina and Jasper,\n\ne.g. bug 48581, bug 48580, bug 48438, bug 48323\n\nI thought of a solution that disables package access check in\nsun.misc.Launcher$AppClassLoader.loadClass()\n\nI am attaching the patch.\n\nThe patch is for tc6.0.x. It implements a new class, o.a.c.security.CatalinaSecurityManager, modifies build.xml to pack it into bootstrap.jar, and modifies *.bat/*.sh scripts and SecurityClassLoad classes to make use of it.\n\nIt allows to get rid of all preloading in SecurityClassLoad classes of catalina and jasper, except one call in Jasper that is still necessary.\n\n\nWhile package access protection in loadClass() is removed,\nI know that the package access protection is certainly still present in the following cases:\n- ClassLoader.defineClass() (e.g. bug 48218  still happens in 6.0)\n- When trying to use reflection, as implemented in java.lang.Class.checkMemberAccess()\n\nAs of now, I do not see any harm in what this patch does.\nComments are welcome.\n\n\n\nI tested it running Sun JRE 6u18 on Windows with Tomcat examples and other sample applications (changes to catalina.sh are not tested). All runs well, without AccessControlException (except the expected ones from ChatServlet - described in bug 48218).", "id": 135396, "time": "2010-03-17T08:55:25Z", "bug_id": 48928, "creation_time": "2010-03-17T08:55:25Z", "is_private": false}, {"count": 1, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 25141, "is_private": false, "id": 135397, "time": "2010-03-17T10:28:06Z", "bug_id": 48928, "creation_time": "2010-03-17T10:28:06Z", "text": "Created attachment 25141\n2010-03-17_tc6_CatalinaSecurityManager_v2.patch\n\n- Added check of the method name in CatalinaSecurityManager.\n- Added property read permission to catalina.policy. The org.apache.coyote.Constants class might fail to initialize without it."}, {"count": 2, "tags": [], "bug_id": 48928, "attachment_id": null, "id": 135401, "time": "2010-03-17T17:05:47Z", "creator": "sebb@apache.org", "creation_time": "2010-03-17T17:05:47Z", "is_private": false, "text": "This will also affect any instructions for running Tomcat as a service with security enabled.\n\nNot sure where this is documented - if anywhere.\n\nThere is a command-file for installing Tomcat as a service (bin/service.bat) but this does not currently support enabling the security manager."}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 187523, "time": "2016-01-09T21:20:55Z", "bug_id": 48928, "creation_time": "2016-01-09T21:20:55Z", "is_private": false, "text": "Closing as WONTFIX. I think there is no much interest in this feature.\n\nIn theory, heavy relying on this SecurityManager implementation will conflict with use of 3rd party security managers (e.g. RMISecurityManager as an example, though actually the RMISecurityManager is @deprecated since Java 8).\n\nAlso this solution does not look stable. It is more like a proof-of-concept.\n\n\nCurrent solution that is available to users to workaround the situation when Tomcat cannot load a system class due to SecurityManager is:\n\n- Add the class name to \"classesToInitialize\" of org.apache.catalina.core.JreMemoryLeakPreventionListener\nconfigured in server.xml.\n\n(I remind that the long-term solution is to patch Tomcat (by filing an item into Bugzilla) so that the class is preloaded by one of these classes:\n\n- org.apache.catalina.security.SecurityClassLoad\n- org.apache.jasper.security.SecurityClassLoad\n)\n\nThe \"classesToInitialize\" attribute was added to JreMemoryLeakPreventionListener by the fix to bug 51862 and is available in all current versions, since 6.0.34 (released 2011-12-05)."}]
[{"text": "SXSSFWorkbook creates a temporary file for each sheet. The FileHandle to this temporary file is closed during the call to workbook.write. This is no problem as long as the number of sheets is lower than the process' openfilehandle limit. Here's some code to reproduce:\n\n    public static void main(String[] args) throws IOException {\n        Workbook wb = new SXSSFWorkbook();\n        for (int i = 0; i < 10000; i++) {\n            Sheet sheet = wb.createSheet(\"sheet_\" + i);\n\n            //manipulate current sheet\n        }\n\n        FileOutputStream fileOut = new FileOutputStream(\"workbook.xlsx\");\n        wb.write(fileOut);\n        fileOut.close();\n    }\n\nDepending on the current openfilehandel limit, this code will fail.\n\nAfter manipulateion of the current sheet, it should not be neccessary to keep the filehandle open. I tried to close the handle manually by adding\n\n            ((SXSSFSheet) sheet).getWorksheetXMLInputStream().close();\n\njust before the end of the \"sheet loop\". Note that an side effect of getWorksheetXMLInputStream is to close the writer FileHandle.\nUnfortunately the final call to \n\n        wb.write(fileOut);\n\ntries to call flush again:\n\nException in thread \"main\" java.io.IOException: Stream closed\n\tat java.io.BufferedWriter.ensureOpen(BufferedWriter.java:116)\n\tat java.io.BufferedWriter.flushBuffer(BufferedWriter.java:126)\n\tat java.io.BufferedWriter.flush(BufferedWriter.java:253)\n\tat org.apache.poi.xssf.streaming.SheetDataWriter.close(SheetDataWriter.java:97)\n\tat org.apache.poi.xssf.streaming.SXSSFSheet.getWorksheetXMLInputStream(SXSSFSheet.java:86)\n\tat org.apache.poi.xssf.streaming.SXSSFWorkbook.injectData(SXSSFWorkbook.java:353)\n\tat org.apache.poi.xssf.streaming.SXSSFWorkbook.write(SXSSFWorkbook.java:891)\n\tat com.gfk.ait.convertserver.xml2excel.xlsx.Xml2XlsxConverter.main(Xml2XlsxConverter.java:56)\n\nIf i debug-eleminate the final calls to SheetDataWriter.close (as they have been closed before), the code works and the resulting xlsx document is valid.\n\nA call getWorksheetXMLInputStream should try to close the _writer stream only once.\nThe interface should provide a clean method to release the filehandle.", "tags": [], "bug_id": 58420, "is_private": false, "count": 0, "id": 185288, "time": "2015-09-16T10:44:40Z", "creator": "newsScott@gmx.de", "creation_time": "2015-09-16T10:44:40Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 58420, "attachment_id": null, "is_private": false, "id": 185515, "time": "2015-09-28T19:03:26Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-09-28T19:03:26Z", "text": "Creating such a big workbook is probably a bit out of the normal use of POI, I'm not sure if we should invest time to add complexity only to handle such extreme cases when a simple raise of the ulimit will make it work for you as well. Is there a reason why you cannot simply set the max open files on your machine to a higher value?"}, {"count": 2, "tags": [], "bug_id": 58420, "attachment_id": null, "is_private": false, "id": 189408, "time": "2016-03-12T15:40:33Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-03-12T15:40:33Z", "text": "As there was no response I am closing this for now, the required changes seem quite risky and only very few people will work with such big files. \n\nA simple workaround is to raise the maximum number of file-handles in these cases."}]
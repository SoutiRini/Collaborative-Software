[{"count": 0, "tags": [], "creator": "vidhya@siptech.co.in", "text": "Hi,\n\nHerewith I am submitting the enhanced code of  Replace task .The existing\nreplace\ntask  has the functionality to replace all occurrences of the string specified\nin\nthe 'token' attribute .\n The enhanced code adds the following functionality's. \n 1.'firstoccurence' can be true/false ,default value is false. Only the first\noccurrence of the string gets replaced . \n 2. 'lastoccurence' can be true /false  ,default value is false. Only the\nlastoccurence of the string gets replaced . \n3.'nthoccurence' attribute takes an integer  value  If the int value is 4 , the\nfourth occurrence of the  string gets replaced \n4. 'fromline ' and ' toline' attributes applies the replace task functionality\nto a specified portion of the file. \n   e.g.; if fromline ='4' and toline='7' , the replacement occurs only between\nline 4 and 7 . \n\nPlease find the enhanced code given below.  \n\n---------------------------\nCode ...\n\nprivate boolean firstoccurence = false;\nprivate boolean lastoccurence = false;\nprivate int nthoccurence=0;\nprivate int fromline= 0;\nprivate int toline = 0;\n\n\nprivate void processFile(File src) throws BuildException {\n\n\t.\n\t.\n\t.\n\t//reads a part of the file specified by\n\t// fromline and toline into foundpart\n\tStringBuffer part1=new StringBuffer();\n        StringBuffer foundpart=new StringBuffer();\n        StringBuffer part2 = new StringBuffer();\n        StringBuffer fullbuf= new StringBuffer();\n        String tmpstr= new String();\n        String nstring= new String();\n\n        /* if from and to lines are specified*/\n        if(fromline!=0 && toline!=0){\n            if(i!=fromline){\n            \tfor(i=1; i<fromline;i++){\n            \t    tmpstr=(String)br.readLine();\n              \t    part1.append(tmpstr).append(\"\\n\");\n              \t}\n            }\n            for(i=fromline;i<=toline;i++){\n            \ttmpstr=(String)br.readLine();\n            \tif(tmpstr==null)break;\n            \tfoundpart.append(tmpstr).append(\"\\n\");\n            }\n           /*contains the string between the lines from and to*/\n\n       \tnstring = foundpart.toString();\n       \twhile(true){\n\t    tmpstr=br.readLine();\n            if(tmpstr==null) break;\n            part2.append(tmpstr).append(\"\\n\");\n        }\n\n    }\n\n\tif(fromline!=0 && toline!=0)\n            nstring=stringReplace(nstring,tok,val);\n        else\n            newString = stringReplace(newString, tok, val);\n\n        if (replacefilters.size() > 0) {\n            if (fromline !=0 && toline!=0)\n               nstring=processReplacefilters(nstring,src.getPath());\n            else\n               newString = processReplacefilters(newString, src.getPath());\n         }\n\n\n\n         if(fromline!=0 && toline!=0){\n   \t     if(part1!=null) newString=part1.toString()+nstring.toString();\n             else newString=nstring.toString();\n             if(part2!=null) newString+=part2.toString();\n         }\n\n\t.\n\t.\n\t.\n}\n\n\n\npublic void setFirstOccurence(boolean firstoccurence){\n    this.firstoccurence= firstoccurence;\n}\n\npublic void setLastOccurence(boolean lastoccurence){\n   this.lastoccurence=lastoccurence;\n}\n\npublic void setNthoccurence(int nthoccurence){\n    this.nthoccurence= nthoccurence;\n}\n\npublic void setFromLine(int fromline){\n    this.fromline = fromline;\n}\n\npublic void setToLine(int toline){\n    this.toline= toline;\n}\n\nprivate String stringReplace(String str, String str1, String str2) {\n\n    StringBuffer ret = new StringBuffer();\n    int start = 0;\n    int found = str.indexOf(str1);\n    int count=1;\n    int lfound=str.lastIndexOf(str1);\n\n    while (found >= 0) {\n\tappendString(ret,str.substring(start,found));\n        //replaces the first occurence if firstoccurence is true and count\n        //is equal to one.\n        if(firstoccurence && count == 1) {\n            appendString(ret,str2);\n            //breaks the loop only if firstoccurence attribute is specified\n            //as true and nthoccurence is zero or not specified and also\n            //if lastoccurence is false\n            if(firstoccurence && !lastoccurence && nthoccurence == 0) {\n                start = found + str1.length();\n                break;\n            }\n        }else if(nthoccurence == count) {\n            //replaces the nth occurence if nth occurence and count\n           //is equal.\n\n\t    appendString(ret,str2);\n            if(!firstoccurence && !lastoccurence && nthoccurence != 0) {\n\t        start = found + str1.length();\n                break;\n            }\n\n\t}else if(!firstoccurence && !lastoccurence && nthoccurence == 0) {\n            //if no attributes firstoccurence, lastoccurence &\n            //nth occurence is specified then it replaces all token with the\n            //specified value.\n           appendString(ret,str2);\n\t}else {\n            //breaks the loop only if lastoccurence attribute is specified\n            //as true and nthoccurence is zero or not specified and also\n            //if firstoccurence is false\n            if(!firstoccurence && lastoccurence && nthoccurence == 0) {\n                appendString(ret,str.substring(found,lfound));\n                appendString(ret,str2);\n                start = lfound + str1.length();\n                break;\n            }else if(lfound == found && lastoccurence) {\n                //replaces the last occurence\n                appendString(ret,str2);\n            }else {\n                appendString(ret,str1);\n            }\n        }\n\n        // search again\n        start = found + str1.length();\n        found = str.indexOf(str1, start);\n        ++replaceCount;\n        count++;\n    }\n\n    if(str.length() > start) {\n        appendString(ret,str.substring(start, str.length()));\n    }\n\n    return ret.toString();\n\n}\n\n//newly added\nprivate void appendString(StringBuffer sb, String str) {\n    if(str != null) {\n        sb.append(str);\n    }\n\n}\n\n-------------------------------------------------------------\n\n\nThanks and regards \nC.S.Vidhya \nSIP Technologies and Exports Ltd. Chennai, India", "id": 31910, "time": "2003-02-25T14:04:25Z", "bug_id": 17372, "creation_time": "2003-02-25T14:04:25Z", "is_private": false, "attachment_id": null}]
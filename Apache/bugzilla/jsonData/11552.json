[{"count": 0, "tags": [], "creator": "david.shanahan@daijob.com", "attachment_id": null, "id": 20774, "time": "2002-08-08T10:33:17Z", "bug_id": 11552, "creation_time": "2002-08-08T10:33:17Z", "is_private": false, "text": "Iteration tags do not resynchronize scripting variables after doAfterBody()\n(as per JSP10.1.2.4)\n\nLooking at the generated code, scripting variables are sychronized only \nonce at the start of the loop."}, {"count": 1, "tags": [], "creator": "david.shanahan@daijob.com", "text": "Created attachment 2646\nWeb application that can be used to re-create the problem", "id": 20775, "time": "2002-08-08T10:34:50Z", "bug_id": 11552, "creation_time": "2002-08-08T10:34:50Z", "is_private": false, "attachment_id": 2646}, {"count": 2, "tags": [], "bug_id": 11552, "attachment_id": null, "text": "Tags that implement BodyTag work OK with one exception. If they return \nTag.EVAL_BODY_INCLUDE in doStartTag() then the scripting variables will\nnot be synchronized on the first loop.\n", "id": 20785, "time": "2002-08-08T13:23:24Z", "creator": "david.shanahan@daijob.com", "creation_time": "2002-08-08T13:23:24Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 11552, "attachment_id": 2652, "text": "Created attachment 2652\nuntested patch (sorry) that will synch. at the start of the \"do\" loop. I think this should be correct. (patch against head)", "id": 20786, "time": "2002-08-08T13:26:31Z", "creator": "david.shanahan@daijob.com", "creation_time": "2002-08-08T13:26:31Z", "is_private": false}, {"count": 4, "tags": [], "creator": "david.shanahan@daijob.com", "text": "Created attachment 2653\nuntested patch (sorry) that will synch. at the start of the \"do\" loop. I think this should be correct. (patch against tomcat 4)", "id": 20788, "time": "2002-08-08T13:27:00Z", "bug_id": 11552, "creation_time": "2002-08-08T13:27:00Z", "is_private": false, "attachment_id": 2653}, {"count": 5, "tags": [], "creator": "david.shanahan@daijob.com", "attachment_id": 2706, "id": 21009, "time": "2002-08-14T08:03:25Z", "bug_id": 11552, "creation_time": "2002-08-14T08:03:25Z", "is_private": false, "text": "Created attachment 2706\npatch for tomcat_4_branch. previously uploaded copy contined garbage."}, {"count": 6, "tags": [], "creator": "jan.luehe@sun.com", "text": "David,\n\nI don't agree with your assessment that if BodyTag.doStartTag()\nreturns EVAL_BODY_INCLUDE, scripting variables will not be\nsynchronized at all for the first iteration.\n\nFor example, the following JSP code fragment:\n\n  <mytags:body>\n    This is my body\n  </mytags:body>\n\nwhere <mytags:body> refers to a custom tag extending BodyTagSupport\nand exposing 3 scripting variables: \"varNested\" (with NESTED scope),\n\"varAtBegin\" (with AT_BEGIN scope), and \"varAtEnd\" (with AT_END\nscope), yields the following servlet code fragment:\n\n  int _jspx_eval_mytags_body_0 = _jspx_th_mytags_body_0.doStartTag();\n  if (_jspx_eval_mytags_body_0 != Tag.SKIP_BODY) {\n    if (_jspx_eval_mytags_body_0 != Tag.EVAL_BODY_INCLUDE) {\n      out = pageContext.pushBody();\n      _jspx_th_mytags_body_0.setBodyContent((BodyContent) out);\n      _jspx_th_mytags_body_0.doInitBody();\n      varAtBegin = (java.lang.String) pageContext.findAttribute(\"varAtBegin\");\n      varNested = (java.lang.String) pageContext.findAttribute(\"varNested\");\n    }\n    do {\n      out.write(\"\\n  This is my body\\n\");\n      int evalDoAfterBody = _jspx_th_mytags_body_0.doAfterBody();\n      varAtBegin = (java.lang.String) pageContext.findAttribute(\"varAtBegin\");\n      varNested = (java.lang.String) pageContext.findAttribute(\"varNested\");\n      if (evalDoAfterBody != BodyTag.EVAL_BODY_AGAIN)\n        break;\n    } while (true);\n    if (_jspx_eval_mytags_body_0 != Tag.EVAL_BODY_INCLUDE)\n      out = pageContext.popBody();\n  }\n  if (_jspx_th_mytags_body_0.doEndTag() == Tag.SKIP_PAGE)\n    return;\n  varAtBegin = (java.lang.String) pageContext.findAttribute(\"varAtBegin\");\n  varAtEnd = (java.lang.String) pageContext.findAttribute(\"varAtEnd\");\n        \nAs you can see, the variables with NESTED and AT_BEGIN scopes are\nsynchronized after the call to doInitBody(), and then again inside the\ndo-while loop after the call to doAfterBody(). This is compliant with the spec.\n\nYour proposed patch would remove the synchronization after\ndoInitBody(), and add synchronization (inside the do-while loop)\nbefore the call to doAfterBody(), as follows:\n\n  int _jspx_eval_mytags_body_0 = _jspx_th_mytags_body_0.doStartTag();\n  if (_jspx_eval_mytags_body_0 != Tag.SKIP_BODY) {\n    if (_jspx_eval_mytags_body_0 != Tag.EVAL_BODY_INCLUDE) {\n      out = pageContext.pushBody();\n      _jspx_th_mytags_body_0.setBodyContent((BodyContent) out);\n      _jspx_th_mytags_body_0.doInitBody();\n    }\n    do {\n      varAtBegin = (java.lang.String) pageContext.findAttribute(\"varAtBegin\");\n      varNested = (java.lang.String) pageContext.findAttribute(\"varNested\");\n      out.write(\"\\n  This is my body\\n\");\n      int evalDoAfterBody = _jspx_th_mytags_body_0.doAfterBody();\n      varAtBegin = (java.lang.String) pageContext.findAttribute(\"varAtBegin\");\n      varNested = (java.lang.String) pageContext.findAttribute(\"varNested\");\n      if (evalDoAfterBody != BodyTag.EVAL_BODY_AGAIN)\n        break;\n    } while (true);\n    if (_jspx_eval_mytags_body_0 != Tag.EVAL_BODY_INCLUDE)\n      out = pageContext.popBody();\n  }\n  if (_jspx_th_mytags_body_0.doEndTag() == Tag.SKIP_PAGE)\n    return;\n  varAtBegin = (java.lang.String) pageContext.findAttribute(\"varAtBegin\");\n  varAtEnd = (java.lang.String) pageContext.findAttribute(\"varAtEnd\");\n\n\n-------------------------------------------------------------------------------\nHowever, your remark about missing synchronization of IterationTag\nscripting variables after a call to doAfterBody (inside the do-while\nloop) is correct. I think this is a problem with the spec. According\nto JSP.10.5.9 (\"VariableInfo\"), NESTED scripting variables are\nsynchronized after doInitBody and doAfterBody for a tag handler\nimplementing BodyTag, and after doStartTag otherwise, and AT_BEGIN\nvariables are synchronized after doInitBody, doAfterBody, and doEndTag\nfor a tag handler implementing BodyTag, and doStartTag and doEndTag\notherwise.\n\nNo mentioning of tag handlers implementing IterationTag. However, as\nyou pointed out, synchronization should take place after the\ninvocation of IterationTag.doAfterBody() (according to JSP.10.1.2.4).\n\nI am going to seek clarification for this from the JSP spec leads and\nwill let you know the outcome.\n\nJan", "id": 21054, "time": "2002-08-14T18:45:56Z", "bug_id": 11552, "creation_time": "2002-08-14T18:45:56Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 11552, "attachment_id": null, "text": "\nThanks. \n\nBy the way if BodyTag.doStartTag() returns EVAL_BODY_INCLUDE then\nscripting variables won't be synchronized for the first iteration.\nI tried it.\n\nTake a look at the if statement.\n\n> if (_jspx_eval_mytags_body_0 != Tag.EVAL_BODY_INCLUDE) {\n\nThis will be false, so setting up the body content will be \nskipped (correct) AND synchronizing the variables will ALSO \nbe skipped (incorrect).\n\nIn this case the first time the variable would be synchronized would be\nafter doAfterBody(). On the first iteration of the loop this would probably\nthrow a NullPointerException if you tried to use varAtBegin or varNested\ninside the body of the tag.\n", "id": 21069, "time": "2002-08-15T03:35:36Z", "creator": "david.shanahan@daijob.com", "creation_time": "2002-08-15T03:35:36Z", "is_private": false}, {"count": 8, "tags": [], "creator": "jan.luehe@sun.com", "attachment_id": null, "id": 21768, "time": "2002-08-27T00:03:57Z", "bug_id": 11552, "creation_time": "2002-08-27T00:03:57Z", "is_private": false, "text": "Fixed.\n\nAT_BEGIN and NESTED scripting vars now get synchronized after\nIterationTag.doAfterBody() (they used to get synchronized after doAfterBody()\nonly if the tag handler implemented BodyTag, which was in violation of the\nspec).\n\nThey continue to be synchronized after doInitBody() only if the tag handler\nimplements BodyTag.\n\nDavid wrote:\n\n> In This Case The First Time The Variable Would Be Synchronized Would Be\n> After Doafterbody(). On The First Iteration Of The Loop This Would Probably\n> Throw A Nullpointerexception If You Tried To Use Varatbegin Or Varnested\n> Inside The Body Of The Tag.\n\nIn that case it would be the page author's responsibility to check the scripting\nvars for null, knowing that the scripting vars will be set only after the first\nbody evaluation. I don't think it would make any sense to synchronize a\nscripting var at the start of the loop, since the scoped variable to synchronize\nwith may not even exist at that point of the tag execution (it may only get\ndefined by IteratorTag.doAfterBody()).\n\n\n"}, {"count": 9, "tags": [], "bug_id": 11552, "attachment_id": null, "text": "\nThis still occurs in Tomcat 4.1.10, for:\n * IterationTag (s) \n * BodyTag (s) that return EVAL_BODY_INCLUDE from doStartTag\n\n \n", "id": 23207, "time": "2002-09-21T18:53:16Z", "creator": "david.shanahan@daijob.com", "creation_time": "2002-09-21T18:53:16Z", "is_private": false}, {"count": 10, "tags": [], "creator": "remm@apache.org", "text": "It is fixed in 4.1.11. Please do not reopen a bug before checking the CVS HEAD\n(if you cannot do that, do not reopen the bug until the next release). Thanks.", "id": 23220, "time": "2002-09-22T09:41:22Z", "bug_id": 11552, "creation_time": "2002-09-22T09:41:22Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 11552, "attachment_id": null, "text": "As of Tomcat 4.1.11, AT_BEGIN and NESTED scripting variables are\nsynchronized after doStart(), unless their tag handler implements\nBodyTag, in which case they are synchronized after doInitBody().\n\nIn addition, if the tag handler implements IterationTag, AT_BEGIN and\nNESTED variables are synchronized after doAfterBody().\n\nIn addition, AT_BEGIN and AT_END variables are always synchronized\nafter doEnd().\n\nThis fixes your problem.\n\n\n\n\n", "id": 23259, "time": "2002-09-23T17:35:51Z", "creator": "jan.luehe@sun.com", "creation_time": "2002-09-23T17:35:51Z", "is_private": false}, {"count": 12, "tags": [], "creator": "drnathanshaw@yahoo.com", "attachment_id": null, "id": 27353, "time": "2002-12-03T20:19:13Z", "bug_id": 11552, "creation_time": "2002-12-03T20:19:13Z", "is_private": false, "text": "Can someone please clarify the design here for me?  I've been trying to \nupgrade from Tomcat 4.0.4 to 4.1.12 and can't get around a problem that looks \nrelated to this bug.\n\nSay I have a custom tag which extends BodyTagSupport (and therefore implements \nBodyTag), returns EVAL_BODY_INCLUDE from doStartTag, and provides a NESTED \nscripting variable varNested.  I'd like to evaluate it in the body of the tag \nlike this: \n\n<mytags:body>\n   This is my body.\n   <%= varNested%>\n</mytags:body>\n\nIn Tomcat 4.0.4 this code works just fine.  On the first and only evaluation \nof the body, the scripting variable has been set by the tag handler.   In \nTomcat 4.1.12, the variable is not initialized until doAfterBody which is too \nlate for my purposes.  Here's the code fragment:\n\n      if (_jspx_eval_mytags_body_0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {\n        java.lang.String varNested = null;\n        if (_jspx_eval_mytags_body_0 != \njavax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {\n          javax.servlet.jsp.tagext.BodyContent _bc = pageContext.pushBody();\n          _bc.clear();\n          out = _bc;\n          _jspx_th_mytags_body_0.setBodyContent(_bc);\n          _jspx_th_mytags_body_0.doInitBody();\n          varNested = (java.lang.String) pageContext.findAttribute\n(\"varNested\");\n        }\n        do {\n          out.write(\"\\r\\n   This is my body.\\r\\n   \");\n          out.print( varNested);\n          out.write(\"\\r\\n\");\n          int evalDoAfterBody = _jspx_th_mytags_body_0.doAfterBody();\n          varNested = (java.lang.String) pageContext.findAttribute\n(\"varNested\");\n          if (evalDoAfterBody != \njavax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)\n            break;\n        } while (true);\n        if (_jspx_eval_mytags_body_0 != \njavax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE)\n          out = pageContext.popBody();\n      }\n\nWhat am I missing?\nNathan"}]
[{"count": 0, "tags": [], "bug_id": 1726, "attachment_id": null, "is_private": false, "id": 2415, "time": "2001-05-11T11:42:19Z", "creator": "alexander.ruehl@nist.gov", "creation_time": "2001-05-11T11:42:19Z", "text": "Xerces: 1.3.0 and 1.3.1\nJava: jre 1.1 and jdk 1.3\nSubject: strange processing of the \"all\"-construct of XML-Schema in Xerces\n\nThe following XML Schema part declares a box element with a,b,c subelements in \narbitrary order:\n\n  <element name=\"box\">\n   <complexType>\n    <all>\n     <element name=\"a\" type='string'/>\n     <element name=\"b\" type='string'/>\n     <element name=\"c\" type='string'/>\n    </all>\n   </complexType>\n  </element>\n\nThe following XML part which uses the schema contains an error according to it:\n\n  <box>\n   <a>1</a>\n   <b>1</b>\n   <c>1</c>\n   <c>1</c>\n  </box>\n\nWhen this file is checked with the XML parser and activated schema parsing and \nerror output (taken from SaxCount.java), it outputs:\n\n  ...\n  The content of element type \"box\" must match \"((a,b,c)|(a,c,b)|(b,a,c)|(b,c,a)\n|(c,b,a)|(c,a,b))\".\n  ...\n\nSo it seems that it translates the \"all\"-construct into a corresponding DTD \nconstruct which lists all possible combinations.\nThis might be ok for 3 elements, but with just a few more (let's have \nadditional elements <d>, <e>, <f>, <g>, <h>) it results in:\n\n  Exception in thread \"main\" java.lang.OutOfMemoryError\n        at org.apache.xerces.validators.common.CMStateSet.<init>(Compiled Code)\n        at org.apache.xerces.validators.common.CMNode.lastPos(Compiled Code)\n        at org.apache.xerces.validators.common.DFAContentModel.calcFollowList\n(Compiled Code)\n        ...\n        at org.apache.xerces.validators.common.DFAContentModel.calcFollowList\n(Compiled Code)\n        at\n\t...\n        at\n        at sax.SAXCount.print(SAXCount.java:155)\n        at sax.SAXCount.main(Compiled Code)\n  ...\n\nAfter a look at the code it seems that the parser produces an awful lot of \nnodes (8! = over 40,000 combinations) and thus overflows memory.\n\nHow comes that the presence of 8 elments in arbitrary order is not checked by a \nsimple 8 item array (for example) instead of building thousands of nodes?"}, {"count": 1, "text": "There is a new implementation of ALL in xerces-J 1.4.\n\nStrict limitations on ALL in the Schema Structures specification permit the \nimplementation to treat ALL as a special case.  Without those limitations, it \nwould have to be handled as a choice of a number of sequences as described.", "creator": "zongaro@ca.ibm.com", "is_private": false, "id": 2620, "time": "2001-05-23T10:48:10Z", "bug_id": 1726, "creation_time": "2001-05-23T10:48:10Z", "tags": [], "attachment_id": null}]
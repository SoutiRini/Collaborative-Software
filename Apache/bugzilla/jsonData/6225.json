[{"count": 0, "attachment_id": null, "bug_id": 6225, "is_private": false, "id": 10305, "time": "2002-02-04T16:40:48Z", "creator": "mrezaei@starpoint.com", "creation_time": "2002-02-04T16:40:48Z", "tags": [], "text": "/*\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 1999 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution, if\n *    any, must include the following acknowlegement:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowlegement may appear in the software itself,\n *    if and wherever such third-party acknowlegements normally appear.\n *\n * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written\n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\"\n *    nor may \"Apache\" appear in their names without prior written\n *    permission of the Apache Group.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\n\npackage org.apache.tools.ant.taskdefs;\n\nimport org.apache.tools.ant.*;\nimport org.apache.tools.ant.types.*;\nimport org.apache.tools.ant.util.*;\n\nimport java.io.*;\nimport java.util.*;\n\n/**\n * A consolidated concatenate task. Concatenates one or more files\n * to a destination file. It takes a path (not a fileset, therefore\n * it's ordered). It can optionally append to an existing destination\n * file. It also supports filters like the copy task.</p>\n *\n *       <concatenate toFile=\"wl_server/my_ejb_sql.txt\" append=\"true\">\n *           <src>\n *               <path location=\"${wlconfigDir}/base.config.xml\"/>\n *               <path location=\"${ejbTemp}/ejb.config.xml\"/>\n *               <fileset dir=\"wl_server\">\n *                   <include name=\"my.config.xml\"/>\n *               </fileset>\n *           </src>\n *           <filterset begintoken=\"%\" endtoken=\"%\" id=\"config.filters\">\n *               <filter token=\"WL_SERVER\" value=\"${wl.server}\"/>\n *               <filter token=\"PROJECT_NAME\" value=\"repeg\"/>\n *               <filter token=\"PROJECT_HOME\" value=\"${project.home}\"/>\n *               <filter token=\"LOCAL_CONFIG_DIR\" value=\"${local.config.dir}\"/>\n *               <filter token=\"ORACLE_SID\" value=\"${oracle.sid}\"/>\n *               <filter token=\"WEBLOGIC_PORT_BASE\" value=\"${weblogic.port}\"/>\n *           </filterset>\n *       </concatenate>\n *\n *\n * <p>This implementation is based on the Copy task in Ant 1.4.1</p>\n *\n * @author Mohammad Rezaei\n */\npublic class Concatenate extends Task {\n    protected File file = null;     // the source file \n    protected File destFile = null; // the destination file \n    protected Path src;\n\n    protected boolean filtering = false;\n    protected boolean append = false;\n    protected int verbosity = Project.MSG_VERBOSE;\n\n\n    private Vector filterSets = new Vector();\n\n    /**\n     * Sets a single source file to copy.\n     */\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n    /**\n     * Sets the destination file.\n     */\n    public void setTofile(File destFile) {\n        this.destFile = destFile;\n    }\n\n    /**\n     * Create a nested filterset\n     */\n    public FilterSet createFilterSet() {\n        FilterSet filterSet = new FilterSet();\n        filterSets.addElement(filterSet);\n        return filterSet;\n    }\n    \n\n    /**\n     * Get the filtersets being applied to this operation.\n     *\n     * @return a vector of FilterSet objects\n     */\n    protected Vector getFilterSets() {\n        return filterSets;\n    }\n    \n    /**\n     * Sets filtering.\n     */\n    public void setFiltering(boolean filtering) {\n        this.filtering = filtering;\n    }\n\n    /**\n     * Append to the existing file\n     */\n    public void setAppend(boolean append) {\n        this.append = append;\n    }\n\n\n    /**\n     * Used to force listing of all names of copied files.\n     */\n    public void setVerbose(boolean verbose) {\n        if (verbose) {\n            this.verbosity = Project.MSG_INFO;\n        } else {\n            this.verbosity = Project.MSG_VERBOSE;\n        } \n    } \n\n\n    /**\n     * Create a nested <src ...> element for multiple source path\n     * support.\n     *\n     * @return a nested src element.\n     */\n    public Path createSrc() {\n        if (src == null) {\n            src = new Path(project);\n        }\n        return src.createPath();\n    }\n\n\n    /**\n     * Performs the concatenate operation.\n     */\n    public void execute() throws BuildException {\n        // make sure we don't have an illegal set of options\n        validateAttributes();   \n        // Get the list of path components in canonical form\n        String[] elems = src.list();\n        String toFile = destFile.getPath();\n        FilterSetCollection filters = new FilterSetCollection();\n        if (filtering) {\n            filters.addFilterSet(project.getGlobalFilterSet());\n        }\n        for (Enumeration filterEnum = filterSets.elements();\nfilterEnum.hasMoreElements();) {\n            filters.addFilterSet((FilterSet)filterEnum.nextElement());\n        }\n        try\n        {\n            if (append) log(\"Appending to \"+toFile, verbosity);\n            else log(\"Writing to \"+toFile, verbosity);\n            if (filters != null && filters.hasFilters())\n            {\n                BufferedWriter writer = new BufferedWriter(new\nFileWriter(toFile, append));\n                for( int i=0; i < elems.length; i++ )\n                {\n                    String fromFile = elems[i];\n                    log(\"Concatenating \" + fromFile + \" with filters\", verbosity);\n                    concatenateWithFilter(fromFile, writer, filters);\n                }\n                writer.close();\n            }\n            else\n            {\n                FileOutputStream out = new FileOutputStream(toFile, append);\n                for( int i=0; i < elems.length; i++ )\n                {\n                    String fromFile = elems[i];\n                    log(\"Concatenating \" + fromFile, verbosity);\n                    concatenate(fromFile, out);\n                }\n                out.close();\n            }\n        }\n        catch(IOException e)\n        {\n            throw new BuildException(\"Unexpected io exception:\n\"+e.getClass().getName()+\": \"+e.getMessage());\n        }\n\n    }\n\n//************************************************************************\n//  protected and private methods\n//************************************************************************\n\n    /**\n     * Ensure we have a consistent and legal set of attributes, and set\n     * any internal flags necessary based on different combinations \n     * of attributes.\n     */\n    protected void validateAttributes() throws BuildException {\n        if (src == null) {\n            throw new BuildException(\"Specify at least one source file.\");\n        }\n\n        if (destFile == null) {\n            throw new BuildException(\"destfile must be set.\");\n        }\n\n\n    }\n\n    protected void concatenateWithFilter(String fromFile, BufferedWriter writer,\nFilterSetCollection filters)\n        throws IOException\n    {\n        BufferedReader in = new BufferedReader(new FileReader(fromFile));\n\n        int length;\n        String newline = null;\n        String line = in.readLine();\n        while (line != null) {\n            if (line.length() == 0) {\n                writer.newLine();\n            } else {\n                newline = filters.replaceTokens(line);\n                writer.write(newline);\n                writer.newLine();\n            }\n            line = in.readLine();\n        }\n        in.close();\n    }\n    \n    protected void concatenate(String fromFile, OutputStream out)\n        throws IOException\n    {\n        FileInputStream in = new FileInputStream(fromFile);\n\n        byte[] buffer = new byte[8 * 1024];\n        int count = 0;\n        do {\n            out.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n\n        in.close();\n    }\n\n}"}, {"count": 1, "tags": [], "text": "Created attachment 1126\nsame as the description.. just as an attachment", "is_private": false, "bug_id": 6225, "id": 10306, "time": "2002-02-04T16:45:41Z", "creator": "mrezaei@starpoint.com", "creation_time": "2002-02-04T16:45:41Z", "attachment_id": 1126}, {"count": 2, "tags": [], "bug_id": 6225, "is_private": false, "text": "Created attachment 1128\nHTML documentation for docs/manual/CoreTasks", "id": 10314, "time": "2002-02-04T18:41:57Z", "creator": "mrezaei@starpoint.com", "creation_time": "2002-02-04T18:41:57Z", "attachment_id": 1128}, {"count": 3, "attachment_id": null, "bug_id": 6225, "is_private": false, "id": 12674, "time": "2002-04-02T14:06:56Z", "creator": "bodewig@apache.org", "creation_time": "2002-04-02T14:06:56Z", "tags": [], "text": "Nightly build 2002-04-03 contains a concat task that supports filesets and\nfilelists.  Please take a look at it - I assume you needed support paths instead\nof filesets to get a specific order of files, this is where filelist kicks in.\n\nIf anything is missing from this task, feel free to file yet another enhancement\nrequest."}]
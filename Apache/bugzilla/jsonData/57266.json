[{"count": 0, "tags": [], "bug_id": 57266, "attachment_id": null, "text": "Hi \nI have to test some procedures  for a particulare Database whose jdbc driver only supports the executeQuery() method  for CallableStatement object.\n\nI saw the source code of the class org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler  and it uses the execute() method like below\n            } else if (CALLABLE.equals(_queryType)) {\n                CallableStatement cstmt = getCallableStatement(conn);\n                int out[]=setArguments(cstmt);\n                // A CallableStatement can return more than 1 ResultSets\n                // plus a number of update counts.\n                boolean hasResultSet = cstmt.execute();\nIs it possible to improve the callable in a way that the user can choose which of the 2 methods to use?\nThanks \n\nAndrea", "id": 179300, "time": "2014-11-26T11:46:56Z", "creator": "andrea.coloru@ingdirect.it", "creation_time": "2014-11-26T11:46:56Z", "is_private": false}, {"count": 1, "tags": [], "creator": "sebb@apache.org", "text": "Actually there are 3 execute methods:\n\nboolean java.sql.PreparedStatement.execute()\nResultSet java.sql.PreparedStatement.executeQuery()\nint java.sql.PreparedStatement.executeUpdate()\n\nIt's not trivial to determine whether an SQL statement is a Query or an Update.\n[Nor should JMeter have to make this determination.]\nSo the user will need to specify whether to use executeQuery() or executeUpdate().\n\nHaving said that, JMeter already supports PREPARED_SELECT and PREPARED_UPDATE.\n\nHave you tried using PREPARED_QUERY?", "id": 179305, "time": "2014-11-26T19:56:38Z", "bug_id": 57266, "creation_time": "2014-11-26T19:56:38Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57266, "attachment_id": null, "text": "Thanks for the quick response.\nUnfortunatly  if I use Prepared statement in place of CallableStatement  I obtain a ClassCastException :ScPreparedStatement cannot be cast to java.sql.CallableStatement.\nThe reason of this Exception I think probably resides in the fact that PreaparedStatement doesn't support INOUT and OUT parameters  and all the stored procedures I have to test have at least an Output Parameter.\nFor this reason I proposed To you to insert into the dropDown list of the \"Query Type:\" the choice of the Callable by execute and Callable by executeQuery.\nI understand that mine is a  particular request but i decided to submit it  as this could make the  sampler JDBC Sampler more flessibile.\n\nThanks in advance.", "id": 179321, "time": "2014-11-27T09:30:44Z", "creator": "andrea.coloru@ingdirect.it", "creation_time": "2014-11-27T09:30:44Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 57266, "attachment_id": null, "id": 179334, "time": "2014-11-27T15:56:08Z", "creator": "sebb@apache.org", "creation_time": "2014-11-27T15:56:08Z", "is_private": false, "text": "(In reply to Sebb from comment #1)\n<snip/>\n> Having said that, JMeter already supports PREPARED_SELECT and\n> PREPARED_UPDATE.\n> \n> Have you tried using PREPARED_QUERY?\n\nOops - that should be PREPARED_SELECT"}, {"count": 4, "tags": [], "bug_id": 57266, "attachment_id": null, "id": 179335, "time": "2014-11-27T16:31:12Z", "creator": "sebb@apache.org", "creation_time": "2014-11-27T16:31:12Z", "is_private": false, "text": "I see now.\nThe CallableStatement interface is needed in order to register (IN)OUT parameters, but the JMeter code does not create a CallableStatement for PREPARED_(SELECT|UPDATE) sample types.\n\nAs you suggest, one possible solution is to add CALLABLE_SELECT and CALLABLE_UPDATE Query Types.\n\nGiven that output parameters cannot be registered for a PreparedStatement, I wonder if JMeter should try and create a CallableStatement if any (IN)OUT types have been specified. This would be another way to solve your issue.\n\nAt present - as you have found - this causes a class cast error.\nIt seems very unlikely that any test plans would rely on this behaviour, so it should not cause an incompatible change.\n\n\n\nBy the way, which JDBC driver does not support execute()?"}, {"count": 5, "tags": [], "creator": "andrea.coloru@ingdirect.it", "text": "Hi \nThe driver is proprietary for the system.\nUnfortunately I cannot tell you more info because of my firm security policies.\n\nwhat can i do is to show you a sample code that we use to call stored procedures with the driver:\n\nCallableStatement statement = null;\nstatement = connection.prepareCall(\"{call procedure_name(?,?,?)}\");\nstatement.setString(1, (String) \"paramin\");\nstatement.setString(2, (String) \"paramin2\");\nstatement.registerOutParameter(3, Types.VARCHAR);\nResultset resultSet = statement.executeQuery();\n\nAs You can see there is nothing special  except the executeQuery in place of execute.\n\nRegards", "id": 179344, "time": "2014-11-28T10:05:36Z", "bug_id": 57266, "creation_time": "2014-11-28T10:05:36Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "sebb@apache.org", "text": "OK, thanks.\n\nIt may be worth filing a bug report with the JDBC supplier.\nAFAIK, the execute() method is not optional.\n\nWhat does the driver do when you call execute() ?\nDoes it throw an Exception?\n\n\nDoes it support executeUpdate()?", "count": 6, "id": 179356, "time": "2014-11-29T00:06:22Z", "bug_id": 57266, "creation_time": "2014-11-29T00:06:22Z", "is_private": false}, {"count": 7, "tags": [], "creator": "andrea.coloru@ingdirect.it", "text": "When I tried to use the execute() in place of execute Query I obtained thi sqlException (taken direclty from jmeter output): Response message: java.sql.SQLException: Not supported for anything other than Aggregate Message Service Class. Use executeQuery().\n\nI didn't understand the mening of the First message, however I have to test with executeQuery()  because it is the \"official\" method used by developers to call our backend .\n\nmany thanks", "id": 179395, "time": "2014-12-01T08:10:18Z", "bug_id": 57266, "creation_time": "2014-12-01T08:10:18Z", "is_private": false, "attachment_id": null}]
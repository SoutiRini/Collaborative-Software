[{"count": 0, "tags": [], "text": "Hi,\n\n  our environment is (I know, some are old ...):\n\nApache 2.2.21\nmod_jk-1.2.40\nTomcat 7.0.42\n\nWe have found that the numbers for \"Con\", the current number of backend connections\" is growing steadily, well over any sensible number.\n\nThe following configuration seems to trigger the behavior:\n\nworker.template.type=ajp13\nworker.template.lbfactor=1\nworker.template.prepost_timeout=15000\nworker.template.connect_timeout=15000\nworker.template.ping_timeout=15000\nworker.template.ping_mode=A\nworker.template.connection_ping_interval=180\nworker.template.retries=3\nworker.template.connection_pool_timeout=30\n\nWithout setting the timeout values, the displayed number of backend connections looks to be stable.\n\nThe behavior seems to have started between mod_jk-1.2.32 and mod_jk-1.2.37. Looking at the code, I can see some heavy redo of the handling of the \"connected\" counter. I suspect a \"connected--\" is missing, but hard to say where.\n\nCheers\nMartin", "is_private": false, "id": 176288, "creator": "knobi@knobisoft.de", "time": "2014-07-08T10:04:35Z", "bug_id": 56703, "creation_time": "2014-07-08T10:04:35Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 31913\nPatch to fix connection statistics", "is_private": false, "id": 177134, "creator": "knobi@knobisoft.de", "time": "2014-08-13T13:16:42Z", "bug_id": 56703, "creation_time": "2014-08-13T13:16:42Z", "attachment_id": 31913}, {"count": 2, "tags": [], "bug_id": 56703, "attachment_id": null, "id": 177135, "time": "2014-08-13T13:18:08Z", "creator": "knobi@knobisoft.de", "creation_time": "2014-08-13T13:18:08Z", "is_private": false, "text": "After some guessing and playing around, I think I have isolated my \"failure case\".\n\nNecessary condition is than \"connection_pool_timeout\" is enabled in mod_jk:\n\nworker.template.connect_timeout=15000\n\nand that the backend Tomcats(s) are using a \"connectionTimeout\" on the AJP connector:\n\n    <Connector port=\"9397\" protocol=\"AJP/1.3\"\n\t\tconnectionTimeout=\"30000\"\n\t\tmaxThreads=\"300\"\n\t\tminSpareThreads=\"10\"\n\t\tredirectPort=\"8443\" />\n\n\nGiven the \"right\" timing, one can find the following in \"mod_jk.log\":\n\n###########\n[Wed Aug 13 14:21:05.827 2014] [22249:139749745399552] [info] ajp_send_request::jk_ajp_common.c (1608): (lpsdm75-2) failed sending request, socket 27 is not connected any more (errno=0, connected=2)\n[Wed Aug 13 14:21:05.827 2014] [22249:139749745399552] [info] ajp_send_request::jk_ajp_common.c (1681): (lpsdm75-2) all endpoints are disconnected, detected by connect check (1), cping (0), send (0)\n###########\n\nI assume, that in this case the backend has closed the connection due to the connctionTimeout and mod_jk still has to find out about it.\n\nThe code around line 1608 does this:\n\n##########\n        if (jk_is_socket_connected(ae->sd, l) == JK_FALSE) {\n            ae->last_errno = errno;\n            jk_log(l, JK_LOG_INFO,\n                   \"(%s) failed sending request, \"\n                   \"socket %d is not connected any more (errno=%d, connected=%d)\",\n                   ae->worker->name, ae->sd, ae->last_errno, ae->worker->s->connected);\n            ajp_abort_endpoint(ae, JK_FALSE, l);\n            err = JK_TRUE;\n            err_conn++;\n        }\n##########\n\nIf \"jk_is_socket_connected\" decides that the socket is no longer connected, it closes the socket, but can of course not decrement the \"connected\" counter. As a result, the statistics are never decaying for the workers.\n\nAdding \"ae->worker->s->connected--\" below \"ajp_abort_endpoint\" fixes the issue for me.\n\nA patch is included. In addition to the \"fix\", it also enables the logging in line 1608 and some other logging in the maintenance loop."}, {"attachment_id": 31914, "tags": [], "bug_id": 56703, "text": "Created attachment 31914\nRebased patch to SVN r1617727\n\nSorry, but previous version was against wrong base :-(", "count": 3, "id": 177136, "time": "2014-08-13T13:25:38Z", "creator": "knobi@knobisoft.de", "creation_time": "2014-08-13T13:25:38Z", "is_private": false}, {"count": 4, "text": "Thanks for the analysis. I will double check latest next week and then likely apply if noone else does it before. If you don't get any more responses here, please ping again.", "bug_id": 56703, "attachment_id": null, "id": 177147, "time": "2014-08-13T18:00:50Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2014-08-13T18:00:50Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "Hi Martin,\n\nyour analysis helped me finding the likely real root cause and fix a few more places by adusting the connection counter decrement in ajp_abort_endpoint().\n\nI applied the resulting fix in r1618000.\n\nDo you have any chance to test this? Would you need me to roll a dev (snapshot) tarball, or do you know how to build mod_jk from a svn checkout?\n\nThe problem always is not to decrement to often such that the counter gets skewed to the other side. I think the fix I did now should be safe.\n\nThanks again for finding the right root cause and for (hopefully) testing this fix.\n\nIf testing goes well, this will e part of 1.2.41.", "id": 177165, "time": "2014-08-14T17:50:27Z", "bug_id": 56703, "creation_time": "2014-08-14T17:50:27Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "knobi@knobisoft.de", "text": "Hi Rainer,\n\n good you double checked. I applied my previous fix to a productive system and found that while it reduced the growth by 80-90 %, there was still something missing.\n\n So, I found that [in my case] the remaining cases were happening in \"ajp_connection_tcp_get_message\" when the calls to \"jk_tcp_socket_recvfull\" were returning JK_SOCKET_EOF. So adding the \"connected--\" in those places cured the problem for good.\n\n I then looked at the remaining case when abort_endpoint was called with \"shutdown == JK_FALSE\". That is in \"ajp_connection_tcp_send_message\" when \"jk_tcp_socket_sendfull\" returns an error. So in my opinion \"connection--\" is warranted here also.\n\n But that would mean that commit r1334399 was the wrong fix to the going negative problem. Hmm...\n\n Now looking at r1618000, you have decoupled the checks for \"valid socket\" and \"perform shutdown\" in abort_endpoint and decrement the connection counter regardless of the shutdown setting. That will definitely fix the growth problem.\n\n But will it also fix the going negative thing? Looking at pre r1334399, a superfluous decrement could happen when abort_endpoint was called with an \"invalidated\" . Do you this could happen?\n\n Anyway, I will try to test on my high volume setup.\n\nMartin", "id": 177182, "time": "2014-08-15T09:54:09Z", "bug_id": 56703, "creation_time": "2014-08-15T09:54:09Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 56703, "attachment_id": null, "is_private": false, "id": 177186, "time": "2014-08-15T17:00:49Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2014-08-15T17:00:49Z", "text": "Hi Martin,\n\nyes I think r1334399 was a bit to much. There are cases where ajp_abort_endpoint() is called with shutdown==JK_FALSE because the shutdown already happened in code lower down. That code doesn't adjust the connected counter, so we have to do it. That part was correct before r1334399, wrong between r1334399 and r1618000 and should be OK after my commit r1618000.\n\nThe other case was when the socket \"sd\" was already INVALID. In that case my code inspection told me that we should not adjust the connected counter, so here r1334399 was right and r1618000 still is right in not adjusting connected when sd is INVALID.\n\nI do hope that your production proves us right.\n\nI see no risk of running the patch in production, because apart from the connected counter nothing has changed. So only your monitoring/status page display will change. The full 1.2.41 dev has a few more changes/fixes, but they should be low risk and I'm not aware of new problems.\n\nThanks for the cooperation. Looking forward for your production results.\n\nRegards,\n\nRainer"}, {"attachment_id": null, "tags": [], "bug_id": 56703, "text": "Hi Rainer,\n\n in order to minimize risk, I applied your changes on top of 1.2.40 as used by the high-volume/productive setup. So far (long weekend plus the working hours of today) the results are good, but not perfect:\n\n- the \"connected\" counter does no longer grow without bounds and decays back to 0 if a tomcat is idle for a sufficiently long time\n- unfortunately I have observer one worker, where the counter turned negative \"-1\". It only happened once in my setup, and I do not care to much about that effect. Others might of course care more.\n\n\n Either we:\n\n- ignore it, or\n- debug it, or\n- do the \"connected--\" only if \"connected > 0\"\n\n I am willing to help, but there are limits to the extend of experimenting I am allowed to do on the productive setup\n\nCheers\nMartin", "count": 8, "id": 177255, "time": "2014-08-18T15:29:22Z", "creator": "knobi@knobisoft.de", "creation_time": "2014-08-18T15:29:22Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 56703, "text": "I can reproduce another case of inflated connection count: if idle Apache children are stopped, their connetion count isn't decremented.\n\nNeed to check, whether/how we can hook into the destruction of children (maybe pool cleanup or similar).", "count": 9, "id": 180140, "time": "2015-01-04T10:00:58Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-01-04T10:00:58Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 56703, "attachment_id": null, "is_private": false, "id": 180153, "time": "2015-01-05T11:49:28Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-01-05T11:49:28Z", "text": "I have improved the implementation of the connected counter in two ways now:\n\n- using atomics so that we don't miss any increments or decrements under high load (r1649506)\n\n- adding a shutdown handler for Apache child processes, that closes and decrements any connection held by a child process (r1649503). Such process shut downs can happen e.g. by a normal process termination because of e.g. MaxSpareThreads or MaxConnectionsPerChild in the Apache config.\n\nClosing this now, can be reopened it the next release proves to still not count correctly."}]
[{"count": 0, "tags": [], "text": "Trying to write data into opened xls-sheet from local disc is detected by a java.io.FileNotFoundException.\n\nTrying to write on a opened xls-sheet form a net-mounted drive fails.\nData is overwritten.", "attachment_id": null, "id": 114043, "creator": "eider@fh-bingen.de", "time": "2008-02-27T04:07:55Z", "bug_id": 44498, "creation_time": "2008-02-27T04:07:55Z", "is_private": false}, {"count": 1, "tags": [], "text": "The functionality you are describing seems to be outside of POI.\n\nI can get a similar exception to the one you are describing to be thrown from java.io.FileOutputStream.open():\njava.io.FileNotFoundException: \\\\192.168.1.13\\share\\temp\\netExcelFile.xls (The process cannot access the file because it is being used by another process)\nand\njava.io.FileNotFoundException: c:\\temp\\localExcelFile.xls (The process cannot access the file because it is being used by another process)\n\nI did a few tests, and I get the same error regardless of whether the the file is on local disk, or on a network share.  (For reference, I am using Sun JDK 1.4 on WinXP.  The local drive was NTFS, the share was SMB.  I called CreateFile() from the locking process with parameter dwShareMode = FILE_SHARE_READ).\nJust to be sure I checked the JDK(6) source, and there seems to be no evidence there of differing behaviour for shares vs local files.\n\nMy guess is that the differing behaviour is caused by whatever application has the file open.  I tried running the same java code with Excel 2007 holding the files open, but in _neither_ case was an exception thrown.  Java could write to either file even though Excel had them open.  Which application are you using?\n\nFrom what I can see, java doesn't provide any easy way to detect if another process has locked a file.  I found that a call to CreateFile( , FILE_ALL_ACCESS, 0, , , , ) reliably detects whether another app (including Excel) has the file open.  You could try some native code like the following:\n\n-- FileLockChecker.java:\npackage example.io;\nclass FileLockChecker {\n\tpublic static boolean attemptFullAccess(File f) { ... }\n\tprivate static boolean attemptFullAccess0(String fileName);\n}\n-- FileLockChecker.c:\nJNIEXPORT boolean JNICALL Java_example_io_FileLockChecker_attemptFullAccess0\n(JNIEnv *env, jclass, jstring jstrFileName) {\n\n  // convert java string to char*\n\tint len = env->GetStringUTFLength(jstrFileName);\n\tjboolean isCopy;\n\tconst char* tempStr = env->GetStringUTFChars(jstrFileName, &isCopy);\n\tchar fileName[MAX_PATH+1];\n\tstrcpy(fileName, tempStr);\n\tif(isCopy == JNI_TRUE) {\n\t\tenv->ReleaseStringUTFChars(jstrFileName, tempStr);\n\t}\n\n  HANDLE hf = CreateFile(fileName, FILE_ALL_ACCESS, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n  if(hf == INVALID_HANDLE_VALUE) {\n    return JNI_FALSE\n  }\n  CloseHandle(hf);\n\treturn JNI_TRUE;\n}\n\n--  --  --  --\n\nHope this helps somewhat.", "attachment_id": null, "id": 114091, "creator": "josh@apache.org", "time": "2008-02-28T01:36:40Z", "bug_id": 44498, "creation_time": "2008-02-28T01:36:40Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "dave@plaudit.com", "is_private": false, "text": "I am using jboss 4.2.2 which as tomcat 6 embedded in it.\n\nIn tomcat you can specify a Resources class in context.xml. 'Resources' is used to lookup resources (html, css, etc.). (more info on Resources at http://tomcat.apache.org/tomcat-5.5-doc/config/resources.html)\n\nNormally when your Resources class is called to lookup resourecs the thread's classloader (Thread.currentThread.getClassLoader()) is set to the classloader of the webapp as expected. Early on in a httpservletrequest tomcat runs through some rules that are in the method internalMapWrapper of org.apache.tomcat.util.http.mapper.Mapper (eg. looks to see if its a welcomefile request, requesting a directory, etc.). When these rules are ran the thread's classloader is NOT set to the webapp's classloader.\n\nThis inconsistency in the thread's classloader when running \"Resources\" can should be fixed.\n\nFor me this caused random 404 responses. I received \"random\" 404 responses because lookup calls to Resources class are cached by ProxyDirContxt. ProxyDirContext wraps your \"Resourcse\" class. My Resources uses classes from the webapps classloader.  Because of the inconsistency in the classloader my Resources would sometimes say the resource doesn't exist, and in other does exist -- depending no where the lookup takes place. The result of the lookup would then be cached for something like 500ms.\n\nAs a temporarly solution i have overrode isCached() to always return false. This causes ProxyDirContext to never cache the results.\n\nWhen Resources lookup is done by org.apache.tomcat.util.http.mapper.Mapper.internalMapWrapper(...), Thread.currentThread.getClassLoader() should return the classloader of the webapp.\n\nThanks", "id": 118846, "time": "2008-07-20T15:27:17Z", "bug_id": 45442, "creation_time": "2008-07-20T15:27:17Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "There's no requirement to do that. Given the annoyance of doing it, we won't do it. You're relying on behaviors which have never existed here.", "id": 118847, "time": "2008-07-20T15:43:01Z", "bug_id": 45442, "creation_time": "2008-07-20T15:43:01Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "dave@plaudit.com", "is_private": false, "text": "booooooooo :-P\nDo you know where in the code it switches the classloader to the webapp's classloader?\n\nIf you tell me that and I create a patch would there be a chance of it being accepted?", "id": 118871, "time": "2008-07-21T05:14:27Z", "bug_id": 45442, "creation_time": "2008-07-21T05:14:27Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "I don't see why it would be mandatory to set the context CL simply to lookup \"static\" resources. This is done only for resolution through a URL (like jndi:/WEB-INF/web.xml). You should be able to know with which context your resources are associated, so be able to set the classloader if you really need it.", "id": 118970, "time": "2008-07-24T06:17:29Z", "bug_id": 45442, "creation_time": "2008-07-24T06:17:29Z", "attachment_id": null}]
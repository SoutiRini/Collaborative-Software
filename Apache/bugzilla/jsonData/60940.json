[{"count": 0, "tags": [], "bug_id": 60940, "attachment_id": null, "id": 198076, "time": "2017-03-30T05:34:08Z", "creator": "vw_alucard@t-online.de", "creation_time": "2017-03-30T05:34:08Z", "is_private": false, "text": "Hi all,\n\nwhen I try to run my JSF 2.2 application which uses Richfaces on a Tomcat 8 with \"unpackWARs=false\" some parts of Richfaces/JSF will not be loaded during startup. This is caused by a different behavior of the classloader when the app cannot be unpacked by the server. \n\nDuring JSF startup is searches for all Jar files which include a \"META-INF/\" folder. This is done by calling getResources(\"META-INF/\") on the classloader. In all found resources it searches for taglibs and faces config extensions. The problem now is, that the calssloader returns a different number of resources when the app is unpacked and when the app is deployed a zip file. \n\nThis is caused by a the way the classloader deals with JarWarRessources. When the app is unpacked the server uses direct jar file access und searches in the zip file for the folder. In this case every jar with a \"META-INF/\" folder is found. When the app is a war file which cannot be unpacked by the server the \"JarWarRessourceSet\" uses a \"JarInputStream\" to read and cache the jar files content. But this input stream skips the \"META-INF/\" folder by default:\n\nJarFileInputStream.java\n\n...\n\n    public JarInputStream(InputStream in, boolean verify) throws IOException {\n        super(in);\n        this.doVerify = verify;\n\n        // This implementation assumes the META-INF/MANIFEST.MF entry\n        // should be either the first or the second entry (when preceded\n        // by the dir META-INF/). It skips the META-INF/ and then\n        // \"consumes\" the MANIFEST.MF to initialize the Manifest object.\n        JarEntry e = (JarEntry)super.getNextEntry();\n        if (e != null && e.getName().equalsIgnoreCase(\"META-INF/\"))\n            e = (JarEntry)super.getNextEntry();\n        first = checkManifest(e);\n    }\n\n... \n\nThis will cause the issues with the app because some parts(taglibs and faces config extensions) cannot be loaded. \n\nYou can reproduce the issue with the richfaces sample project which can be generated via maven:\n\nmvn archetype:generate -DarchetypeGroupId=org.richfaces.archetypes -DarchetypeArtifactId=richfaces-archetype-simpleapp -DarchetypeVersion=4.5.17.Final -DgroupId=org.docs.richfaces -DartifactId=new_project\n\nReplace the sample projects pom by this one (sorry I'm not able to upload files from this workstation):\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.docs.richfaces</groupId>\n    <artifactId>new_project</artifactId>\n    <name>RichFaces 4 Application</name>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <url>http://jboss.org/richfaces</url>\n\n    <repositories>\n        <!-- You should seriously consider using a repository manager or declare repositories in your settings.xml.\n        See http://www.sonatype.com/people/2009/02/why-putting-repositories-in-your-poms-is-a-bad-idea/   -->\n        <repository>\n            <id>jboss-public-repository-group</id>\n            <name>JBoss Public Maven Repository Group</name>\n            <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>\n            <layout>default</layout>\n            <releases>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>jboss-public-repository-group</id>\n            <name>JBoss Public Maven Repository Group</name>\n            <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>\n            <layout>default</layout>\n            <releases>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n                <updatePolicy>never</updatePolicy>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>1.6</maven.compiler.source>\n        <maven.compiler.target>1.6</maven.compiler.target>\n        <!-- Setting this property using archetype-metadata.xml requiredPorperty\n            so that generated project uses correct version of richfaces.\n        -->\n        <org.richfaces.version>4.5.17.Final</org.richfaces.version>\n        <version.jsp-api>2.1</version.jsp-api>\n        <version.jstl-api>1.2</version.jstl-api>\n        <version.servlet-api>3.0.1</version.servlet-api>\n        <version.el-api>2.2</version.el-api>\n    </properties>\n\n    <build>\n        <finalName>new_project</finalName>\n        <plugins>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>2.3.2</version>\n            </plugin>\n            <plugin>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>2.3</version>\n                <configuration>\n                    <warName>${project.artifactId}</warName>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.richfaces</groupId>\n                <artifactId>richfaces-cache-bom</artifactId>\n                <type>pom</type>\n                <version>${org.richfaces.version}</version>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.richfaces</groupId>\n                <artifactId>richfaces-build</artifactId>\n                <type>pom</type>\n                <version>${org.richfaces.version}</version>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.richfaces</groupId>\n            <artifactId>richfaces</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>javax.faces</groupId>\n            <artifactId>javax.faces-api</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish</groupId>\n            <artifactId>javax.faces</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>${version.servlet-api}</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet.jsp</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.el</groupId>\n            <artifactId>el-api</artifactId>\n            <version>${version.el-api}</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet.jsp.jstl</groupId>\n            <artifactId>jstl-api</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>net.sf.ehcache</groupId>\n            <artifactId>ehcache</artifactId>\n        </dependency>\n    </dependencies>\n\n    <profiles>\n        <profile>\n            <id>jee6</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-war-plugin</artifactId>\n                        <configuration>\n                            <webappDirectory>${project.build.directory}/${project.build.finalName}-jee6</webappDirectory>\n                            <classifier>jee6</classifier>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n\n            <dependencies>\n                <dependency>\n                    <groupId>javax.faces</groupId>\n                    <artifactId>javax.faces-api</artifactId>\n                    <scope>provided</scope>\n                </dependency>\n                <dependency>\n                    <groupId>org.glassfish</groupId>\n                    <artifactId>javax.faces</artifactId>\n                    <scope>provided</scope>\n                </dependency>\n                <dependency>\n                    <groupId>javax.transaction</groupId>\n                    <artifactId>jta</artifactId>\n                    <version>1.1</version>\n                    <scope>provided</scope>\n                </dependency>\n            </dependencies>\n        </profile>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-war-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>jee6</id>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>war</goal>\n                                </goals>\n\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>\n\n\nSet \" <Host appBase=\"webapps\" autoDeploy=\"false\" name=\"localhost\" unpackWARs=\"false\">\" in the server.xml of the tomcat. \n\n1) copy the applications war file to the webapps folder and start the tomcat. When accessing the index.xhtml you can see that richfaces is not loaded correctly. \n\n2) copy a the unzipped war file to the webapps folder an start the server.When accessing the index.xhtml you can see that richfaces is loaded correctly. \n\nTo make the difference more clear you can add a \"<a4j:log/>\" to the index.xhtml. \n\nRegards,\nVincent"}, {"count": 1, "tags": [], "bug_id": 60940, "attachment_id": null, "id": 198152, "time": "2017-04-04T14:12:25Z", "creator": "markt@apache.org", "creation_time": "2017-04-04T14:12:25Z", "is_private": false, "text": "Thanks for the report and the test case.\n\nThis has been fixed in:\n- trunk for 9.0.0.M20 onwards\n- 8.5.x for 8.5.14 onwards\n- 8.0.x for 8.0.44 onwards\n\n7.0.x is not affected"}]
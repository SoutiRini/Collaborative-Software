[{"count": 0, "tags": [], "bug_id": 34941, "attachment_id": null, "is_private": false, "id": 74944, "time": "2005-05-17T02:12:09Z", "creator": "scohen@apache.org", "creation_time": "2005-05-17T02:12:09Z", "text": "Given the following task call\n\n<ftp action = \"get\" \n       ...\n       preservelastmodified=\"true\"\n       newer=\"true\">\n   <fileset.../>\n</ftp>\n\nIf this is executed a second time, all files included in the fileset will be\nretrieved regardless of whether or not they have changed on the server in the\nintervening time interval.\n\nThis is because the underlying uptodate logic is returning false if the source\nand destination timestamps are equal.  Logically, it should be true.  Logically,\nany file where the local file's timestamp is greater than or equal to the remote\nfile's timestamp is up to date.  Any file whose local timestamp is less than its\nremote file's timestamp is not.  But that's not the current implementation.\n\nA similar issue exists on put.\n\nThe fix is easy to implement and I will do it, but I want to give the community\na chance to comment before implementing.  There may be a use case for the\nexisting functionality that I am not understanding, or there may be an important\nbackward compatibility issue that I am missing."}, {"count": 1, "tags": [], "bug_id": 34941, "attachment_id": null, "is_private": false, "id": 75036, "time": "2005-05-19T01:13:32Z", "creator": "stevel@apache.org", "creation_time": "2005-05-19T01:13:32Z", "text": "Is this also the cause of a problem I'm seeing, namely that ftp put of a set of\nfiles to a unix localhost is always updating, even when they havent changed?\nEverything works properly when uploading to a local DOS box?\n\nsource: \ncore/dist> ls -al *.sha1\n-rw-r--r--  1 slo users 41 2005-05-18 23:45 diary-core-0.1alpha-src.tar.gz.sha1\n-rw-r--r--  1 slo users 41 2005-05-18 23:45 diary-core-0.1alpha-src.zip.sha1\n-rw-r--r--  1 slo users 41 2005-05-18 23:45 diary-core-0.1alpha.tar.gz.sha1\n-rw-r--r--  1 slo users 41 2005-05-18 23:45 diary-core-0.1alpha.zip.sha1\n\ndest:\ntemp/upload> ls -al *.sha1\n-rw-r--r--  1 slo users 41 2005-05-19 00:07 diary-core-0.1alpha-src.tar.gz.sha1\n-rw-r--r--  1 slo users 41 2005-05-19 00:07 diary-core-0.1alpha-src.zip.sha1\n-rw-r--r--  1 slo users 41 2005-05-19 00:07 diary-core-0.1alpha.tar.gz.sha1\n-rw-r--r--  1 slo users 41 2005-05-19 00:07 diary-core-0.1alpha.zip.sha1\n\n      [ftp] Opening FTP connection to k2\n      [ftp] connected\n      [ftp] logging in to FTP server\n      [ftp] login succeeded\n      [ftp] changing the remote directory\n      [ftp] sending files\n      [ftp] checking date for diary-core-0.1alpha-src.tar.gz\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.tar.gz\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.tar.gz\ncopied to k2\n      [ftp] checking date for diary-core-0.1alpha-src.tar.gz.sha1\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.tar.gz.sha1\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.tar.gz.sha1\ncopied to k2\n      [ftp] checking date for diary-core-0.1alpha-src.zip\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.zip\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.zip\ncopied to k2\n      [ftp] checking date for diary-core-0.1alpha-src.zip.sha1\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.zip.sha1\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha-src.zip.sha1\ncopied to k2\n      [ftp] checking date for diary-core-0.1alpha.tar.gz\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.tar.gz\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.tar.gz\ncopied to k2\n      [ftp] checking date for diary-core-0.1alpha.tar.gz.sha1\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.tar.gz.sha1\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.tar.gz.sha1\ncopied to k2\n      [ftp] checking date for diary-core-0.1alpha.zip\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.zip\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.zip copied to k2\n      [ftp] checking date for diary-core-0.1alpha.zip.sha1\n      [ftp] transferring\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.zip.sha1\n      [ftp] File\n/home/slo/Projects/AntBook/app2/diary/core/dist/diary-core-0.1alpha.zip.sha1\ncopied to k2\n      [ftp] 8 files sent\n      [ftp] disconnecting\n\n\n\n"}, {"count": 2, "tags": [], "creator": "scohen@apache.org", "attachment_id": null, "text": "It would seem you problem would not be fixed by the change I want to make.  That\nchange is simply to change this:\n\n       if (this.action == SEND_FILES) {\n           return remoteTimestamp + timeDiffMillis > localTimestamp;\n       } else {\n           return localTimestamp > remoteTimestamp + timeDiffMillis;\n       }\n\nto this:\n\n       if (this.action == SEND_FILES) {\n           return remoteTimestamp + timeDiffMillis >= localTimestamp;\n       } else {\n           return localTimestamp >= remoteTimestamp + timeDiffMillis;\n       }\n\nIt would fix the problem of equal timestamps updating, but not the problem I see\nhere which is where the source is older than the destination but still updates.\n\nHowever, to truly understand what is going on, can you supply the actual ant\ntarget where this is happening with all the <ftp> attributes you are using?", "id": 75038, "time": "2005-05-19T02:51:15Z", "bug_id": 34941, "creation_time": "2005-05-19T02:51:15Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 34941, "is_private": false, "id": 75039, "attachment_id": null, "creator": "scohen@apache.org", "creation_time": "2005-05-19T03:04:22Z", "time": "2005-05-19T03:04:22Z", "text": "Wait a minute, Steve.  Now I REALLY want to see your <ftp> call parameters.  Are\nyou using the new defaultDateFormatConfig attribute?  Does an FTP listing from\nthese directories look exactly like these ls listings?  \n\nBecause, if it does, we are looking at one of these newfangled UNIX ftp servers\nwith all-numeric date formats.  This is something new, something that\ncommons-net 1.4.0 addresses but 1.2.2 does not.  1.2.2 (and the default\nconfiguration in 1.4.0) assumed that all unix ftp servers listings looked like this:\n\n-rw-r--r--  1 slo users 41 May 18 23:45 diary-core-0.1alpha-src.tar.gz.sha1\n\nYou must use the defaultDateFormatConfig=\"yyyy-MM-dd HH:mm\" attribute to handle\nthe numeric format you are showing if that's the way your FTP server does it. \nActually, this makes a lot of sense.  If your server FTP listings look like that\nthe default parser will fail to parse them, so your destination will show NO\nfiles existing and hence everything will get copied.  "}, {"count": 4, "tags": [], "bug_id": 34941, "is_private": false, "id": 75045, "creation_time": "2005-05-19T10:02:20Z", "time": "2005-05-19T10:02:20Z", "creator": "scohen@apache.org", "text": "Change outlined above was made on HEAD.  Files with equal timestamps are now\nconsidered up to date.", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 34941, "is_private": false, "id": 75048, "attachment_id": null, "creator": "stevel@apache.org", "creation_time": "2005-05-19T10:55:39Z", "time": "2005-05-19T10:55:39Z", "text": "Server is Suse 9.2pro with vsftpd; It's at home (and turned off) so I cant get a\nlisting now. The target is \n\n  <ftp server=\"${unix.ftp.server}\" \n    userid=\"${unix.ftp.user}\"\n    password=\"${unix.ftp.password}\"\n    verbose=\"true\"\n    action=\"put\"\n    depends=\"true\"\n    systemTypeKey=\"UNIX\"\n    preservelastmodified=\"true\"\n    remotedir=\"${unix.ftp.dir}\">\n      <fileset refid=\"ftp.upload.fileset\"/>\n    </ftp>"}, {"count": 6, "tags": [], "bug_id": 34941, "attachment_id": null, "is_private": false, "id": 75092, "time": "2005-05-20T01:39:03Z", "creator": "scohen@apache.org", "creation_time": "2005-05-20T01:39:03Z", "text": "Also marking version to 1.6.4 \nAll right, Steve.  I would say that you have a bug.  The problem is NOT\n\n1) the same as this bug  (this bug concerns the case of equal timestamps, not\ncases where an older file is copied over a newer one, which is what you have).\n\n2) caused by an all-numeric date format on the new server, which would have been\na problem that 1.4.0 could have fixed, with the right parameters.\n\nThe only thing that's the least bit fishy in your config is that \npreservelastmodified=\"true\"  .  You might want to try it without that since the\ndocs say it only works for gets.  But it shouldn't cause puts to break.  That\nwould still be a bug.\n\nSo I would recommend logging this as a new bug.\n\nI've also marked it as target milestone 1.6.4 since I put it in their at Antoine\n's urging.\n\n"}, {"count": 7, "tags": [], "bug_id": 34941, "attachment_id": null, "id": 75188, "creation_time": "2005-05-22T00:15:35Z", "time": "2005-05-22T00:15:35Z", "creator": "scohen@apache.org", "text": "I previously stated that I think that your problem results from a new bug.  I no\nlonger think so.  It's not a bug.\n\nFirst of all the preserveLastModified is documented as only apply to gets, not\nputs, as I previously stated, but that is irrelevant.\n\nMore importantly, you must consider timestamp resolution differences between\nyour local machine and the ftp server.  Even if they are on the same box,\ncommons-net-ftp, since it must work through directory listing formats, is\nrestricted to what is displayed by an FTP listing, typically, HH:mm.  Whereas\nyour local file system more than likely provides second resolution.  Therefore,\neven if serverTimeZoneConfig is specified, the timediffmillis attribute must\nalso be specified, not to account for the time zone differences but to account\nfor the granularity difference.  A value of 60000 must be set here.\n\nI'm not sure I'm happy with this situation, but with the fix I've checked in the\ntask is now performing as currently documented.  The timediffmillis attribute is\nbecoming more of a messy \"slush fund\" as it handles both time zone differences\nand timestamp granularity issues.  Using time zones is much better than using\ntimediffmillis to handle this (since you can let java \"do the math\", and more\nimportantly, because it understands daylight savings time, which timediffmillis\ndoes not.)  The only good use left for timediffmillis is to handle granularity\nissues.  I think we should think about deprecating timediffmillis in favor of an\nattribute that takes some predefined granularity constants such as\n\"MINUTE_GRANULARITY\", etc. which the task can translate into milliseconds.", "is_private": false}]
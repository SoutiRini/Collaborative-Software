[{"count": 0, "text": "Created attachment 23212\nSimple war file illustrating the problem\n\nI have a web application running in Tomcat 5.5.27 with JDK 1.5.0_16-b02\non Windows XP SP3. log4j-1.2.15.jar and commons-logging-1.1.1.jar are\ninstalled in WEB-INF/lib and there is a context.xml file in META-INF.\n\nWhen packaged as a war file this combination reliably produces the\nexception shown below in the Tomcat console under the following\ncircumstances:\n\n1. deploy the war file (e.g. using Tomcat HTTP manager)\n\n2. stop and restart tomcat\n\n3. undeploy the war file\n\n4. deploy the war file\n\n\nNote that to demonstrate this it is necessary to have both a context.xml\nfile in META-INF and commons-logging-1.1.1.jar in WEB-INF/lib. Also, the\nproblem disappears if you downgrade to commons-logging-1.0.4. Otherwise\nthe contents of the application don't seem to matter, and can be\ndemonstrated in an application containing no classes or other libraries.\n\nThe only other thing I've found to have an effect is the *name* of the\napplication. \"commons-logging-test\" exhibits the problem, but in at\nleast one test renaming the same application to start with a letter\nlater in the alphabet did not (possibly to do with the order\napplications are loaded)?\n\nNote that the problem goes away if I set system property\n  org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES\nto false. However having had PermGen memory exhaustion problems in the past I am loathe to do this, and would also prefer to work Tomcat in its default configuration as far as possible.\n\nSimple war file attached in the hope that this will help pinpoint the problem.\n\nThanks, John.\n\n\n===\n\n29-Jan-2009 21:07:43 org.apache.catalina.startup.HostConfig deployWAR\nINFO: Deploying web application archive commons-logging-test.war\n29-Jan-2009 21:07:43 org.apache.catalina.core.StandardContext processTlds\nSEVERE: Error reading tld listeners java.lang.NullPointerException\njava.lang.NullPointerException\n        at org.apache.log4j.Category.isEnabledFor(Category.java:749)\n        at\norg.apache.commons.logging.impl.Log4JLogger.isTraceEnabled(Log4JLogg\nr.java:333)\n        at\norg.apache.catalina.startup.TldConfig.tldScanResourcePaths(TldConfig\njava:581)\n        at\norg.apache.catalina.startup.TldConfig.execute(TldConfig.java:282)\n        at\norg.apache.catalina.core.StandardContext.processTlds(StandardContext\njava:4307)\n        at\norg.apache.catalina.core.StandardContext.start(StandardContext.java:\n144)\n        at\norg.apache.catalina.core.ContainerBase.addChildInternal(ContainerBas\n.java:760)\n        at\norg.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:7\n0)\n        at\norg.apache.catalina.core.StandardHost.addChild(StandardHost.java:544\n\n        at\norg.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:831\n\n        at\norg.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:51\n)\n        at\norg.apache.catalina.startup.HostConfig.check(HostConfig.java:1232)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl\njava:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcce\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at\norg.apache.commons.modeler.BaseModelMBean.invoke(BaseModelMBean.java\n458)\n        at\ncom.sun.jmx.mbeanserver.DynamicMetaDataImpl.invoke(DynamicMetaDataIm\nl.java:213)\n        at\ncom.sun.jmx.mbeanserver.MetaDataImpl.invoke(MetaDataImpl.java:220)\n        at\ncom.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(Default\nBeanServerInterceptor.java:815)\n        at\ncom.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:78\n)\n        at\norg.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java\n1397)\n        at\norg.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.jav\n:635)\n        at\norg.apache.catalina.manager.ManagerServlet.doPut(ManagerServlet.java\n424)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:650)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(App\nicationFilterChain.java:269)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(Application\nilterChain.java:188)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapper\nalve.java:213)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContext\nalve.java:172)\n        at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(Authentic\ntorBase.java:525)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.\nava:127)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.\nava:117)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineVa\nve.java:108)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.ja\na:174)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.jav\n:875)\n        at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.\nrocessConnection(Http11BaseProtocol.java:665)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndp\nint.java:528)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFo\nlowerWorkerThread.java:81)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(Thread\nool.java:689)\n        at java.lang.Thread.run(Thread.java:595)", "bug_id": 46645, "attachment_id": 23212, "id": 124568, "time": "2009-01-31T14:45:16Z", "creator": "j.g.holman@qmul.ac.uk", "creation_time": "2009-01-31T14:45:16Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 46645, "text": "org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES=true (the default) is provided to work around memory leak issues in applications and third party libraries. While well written code shouldn't need it, experience has shown that it fixes more issues than it creates - hence the default.\n\nThe down side of this feature is that it can cause issues since it nulls out various internal fields and code may well react badly to this.\n\nIt should be safe to set this to false providing your app and the libraries you use don't leak memory. You can always check this with a profiler.\n", "id": 124572, "time": "2009-01-31T17:39:17Z", "creator": "markt@apache.org", "creation_time": "2009-01-31T17:39:17Z", "is_private": false, "attachment_id": null}]
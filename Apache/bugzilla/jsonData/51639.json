[{"count": 0, "text": "Created attachment 27364\nsource fo and desired pdf\n\n1) Create fo:block with 2 fo:inline elements. First one contains some characters, second one includes spaces only.\n\n2) Set different line heights for those. Line height of first fo:inline element is smaller then second one.\n\n3) PDF will not take into a count line height of second fo:inline element.\n\nSimple test file is attached", "creator": "alexey.hlyavich@duallab.com", "is_private": false, "id": 148509, "time": "2011-08-09T15:23:54Z", "bug_id": 51639, "creation_time": "2011-08-09T15:23:54Z", "tags": [], "attachment_id": 27364}, {"count": 1, "tags": [], "text": "Thanks for your bug report. I believe the attached FO file is rendered in accordance with the XSL-FO Recommendation.\n\nThe line-height property specified on an fo:inline element has an effect only if the line-stacking-strategy on the parent fo:block has been set to 'line-height', which is not the case here.\n\nFOP does not support that strategy, but even if it did, the result would probably not be what you expect as the second fo:inline would not generate any area. Indeed, it is ending a line and since its white-space-treatment property has been left to the default value, the white space it contains will be discarded.\n\nTo achieve the desired effect you probably want to play with the font-size property on the fo:inline elements, but a quick test shows that the size of the second inline will be taken into account only if it contains non-white space glyphs. Even a non-breakable space doesn't work.\n\nI think this is a bug, so I'm leaving this issue open and re-phrased accordingly.", "attachment_id": null, "id": 149176, "creator": "vhennebert@gmail.com", "time": "2011-09-12T14:08:22Z", "bug_id": 51639, "creation_time": "2011-09-12T14:08:22Z", "is_private": false}, {"count": 2, "text": "Hi Vincent,\n\nThank you very much for explanation. I offer a solution of this problem:\n\nHeight of each line is computed in LineLayoutManager.makeLineBreakPosition(...) by choosing the largest value from all KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If we add attribute alignmentContent to class KnuthGlue we'll have the possibility to assign glue elements line height and then possibility to choose the largest value of line height from both all KnuthInlineBox.alignmentContent.lineHeight and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n\nCan you proove that it is the idea FOP needs? If it is I'll start implementation of this.\n\nKind Regards,\nAlexey", "creator": "alexey.hlyavich@duallab.com", "is_private": false, "id": 149896, "time": "2011-09-28T10:08:53Z", "bug_id": 51639, "creation_time": "2011-09-28T10:08:53Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 51639, "attachment_id": null, "id": 150201, "time": "2011-10-05T17:26:10Z", "creator": "vhennebert@gmail.com", "creation_time": "2011-10-05T17:26:10Z", "is_private": false, "text": "(In reply to comment #2)\n\nHi Alexey,\n\nI'm not too familiar with inline-level layout but, yes, its does indeed seem like what we want is to get the height of KnuthGlue instances in addition to KnuthInlineBox. I suppose AlignmentContext instances would be passed the same way as for KnuthInlineBox.\n\nThere may be undesirable side effects I can't think of right now. Obviously this would have to be made only for KnuthGlue instances that are actually derived from white space characters.\n\nHTH,\nVincent"}, {"count": 4, "tags": [], "bug_id": 51639, "attachment_id": null, "id": 150239, "time": "2011-10-06T00:35:39Z", "creator": "gadams@apache.org", "creation_time": "2011-10-06T00:35:39Z", "is_private": false, "text": "(In reply to comment #2)\n> Hi Vincent,\n> \n> Thank you very much for explanation. I offer a solution of this problem:\n> \n> Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> by choosing the largest value from all\n> KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> to assign glue elements line height and then possibility to choose the largest\n> value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> \n> Can you proove that it is the idea FOP needs? If it is I'll start\n> implementation of this.\n> \n> Kind Regards,\n> Alexey\n\ni would not agree with this approach; the correct approach is to use one of the following Unicode space characters:\n\nU+2001 EM QUAD\nU+2003 EM SPACE\n\nthe EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n\nthese would generate Knuth boxes (not glue) of the desired width and height, and scale to the font size so as to affect line height;\n\nif there is any modification to FOP to resolve this issue, then it should be to have FOP synthesize at least these (and perhaps a few other) 'spacing' space characters in case the selected font does not contain a mapping for them;\n\nsince these 'spacing' space characters generate inline boxes, they are treated just like any other character; as such they are *not* treated as whitespace for the purpose of collapsing, glue behavior, etc\n\nregards,\nglenn"}, {"count": 5, "text": "(In reply to comment #4)\n> (In reply to comment #2)\n> > Hi Vincent,\n> > \n> > Thank you very much for explanation. I offer a solution of this problem:\n> > \n> > Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> > by choosing the largest value from all\n> > KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> > we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> > to assign glue elements line height and then possibility to choose the largest\n> > value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> > and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> > \n> > Can you proove that it is the idea FOP needs? If it is I'll start\n> > implementation of this.\n> > \n> > Kind Regards,\n> > Alexey\n> \n> i would not agree with this approach; the correct approach is to use one of the\n> following Unicode space characters:\n> \n> U+2001 EM QUAD\n> U+2003 EM SPACE\n> \n> the EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n> \n> these would generate Knuth boxes (not glue) of the desired width and height,\n> and scale to the font size so as to affect line height;\n> \n> if there is any modification to FOP to resolve this issue, then it should be to\n> have FOP synthesize at least these (and perhaps a few other) 'spacing' space\n> characters in case the selected font does not contain a mapping for them;\n> \n> since these 'spacing' space characters generate inline boxes, they are treated\n> just like any other character; as such they are *not* treated as whitespace for\n> the purpose of collapsing, glue behavior, etc\n> \n> regards,\n> glenn\n\nHi Glenn,\n\nI could't understand your idea why adding alignmentContent attribute to glue elements can break the processing of 'spacing' space characters. We just have the aim to store information about line-height in inline elements, that contain spaces only, I mean U+0020. In this case inline boxes are not generated, and we would like to have possibility to get line height from glue element. In case of other 'spacing' space characters logic would stay as it was, because glue elements would have absolutely identical alignmentContent attribute as box elements in one fo:inline.\n\nI explained my point. Could you explain yours?\n\nKind regards,\nAlexey", "creator": "alexey.hlyavich@duallab.com", "is_private": false, "id": 150248, "time": "2011-10-06T09:06:20Z", "bug_id": 51639, "creation_time": "2011-10-06T09:06:20Z", "tags": [], "attachment_id": null}, {"count": 6, "tags": [], "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > (In reply to comment #2)\n> > > Hi Vincent,\n> > > \n> > > Thank you very much for explanation. I offer a solution of this problem:\n> > > \n> > > Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> > > by choosing the largest value from all\n> > > KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> > > we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> > > to assign glue elements line height and then possibility to choose the largest\n> > > value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> > > and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> > > \n> > > Can you proove that it is the idea FOP needs? If it is I'll start\n> > > implementation of this.\n> > > \n> > > Kind Regards,\n> > > Alexey\n> > \n> > i would not agree with this approach; the correct approach is to use one of the\n> > following Unicode space characters:\n> > \n> > U+2001 EM QUAD\n> > U+2003 EM SPACE\n> > \n> > the EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n> > \n> > these would generate Knuth boxes (not glue) of the desired width and height,\n> > and scale to the font size so as to affect line height;\n> > \n> > if there is any modification to FOP to resolve this issue, then it should be to\n> > have FOP synthesize at least these (and perhaps a few other) 'spacing' space\n> > characters in case the selected font does not contain a mapping for them;\n> > \n> > since these 'spacing' space characters generate inline boxes, they are treated\n> > just like any other character; as such they are *not* treated as whitespace for\n> > the purpose of collapsing, glue behavior, etc\n> > \n> > regards,\n> > glenn\n> \n> Hi Glenn,\n> \n> I could't understand your idea why adding alignmentContent attribute to glue\n> elements can break the processing of 'spacing' space characters. We just have\n> the aim to store information about line-height in inline elements, that contain\n> spaces only, I mean U+0020. In this case inline boxes are not generated, and we\n> would like to have possibility to get line height from glue element. In case of\n> other 'spacing' space characters logic would stay as it was, because glue\n> elements would have absolutely identical alignmentContent attribute as box\n> elements in one fo:inline.\n> \n> I explained my point. Could you explain yours?\n> \n> Kind regards,\n> Alexey\n\ni am disagreeing with you that glue should have a height;\n\nwhat you are trying to do is to assign a height to whitespace characters tha map to glue; the correct way to do that is to use a character that maps to a knuth box, not knuth glue; and the way you do that is using EM QUAD or EN QUAD characters;\n\nglue should have *NO* height, as that is fundamental change to the Knuth algorithm, so, no thank you - please use EM|EN QUAD", "attachment_id": null, "id": 150251, "creator": "gadams@apache.org", "time": "2011-10-06T10:45:45Z", "bug_id": 51639, "creation_time": "2011-10-06T10:45:45Z", "is_private": false}, {"count": 7, "tags": [], "creator": "alexey.hlyavich@duallab.com", "attachment_id": 27711, "text": "Created attachment 27711\nExample .fo and .pdf files.", "id": 150261, "time": "2011-10-06T14:10:04Z", "bug_id": 51639, "creation_time": "2011-10-06T14:10:04Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 51639, "attachment_id": null, "id": 150262, "time": "2011-10-06T14:10:33Z", "creator": "alexey.hlyavich@duallab.com", "creation_time": "2011-10-06T14:10:33Z", "is_private": false, "text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > (In reply to comment #4)\n> > > (In reply to comment #2)\n> > > > Hi Vincent,\n> > > > \n> > > > Thank you very much for explanation. I offer a solution of this problem:\n> > > > \n> > > > Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> > > > by choosing the largest value from all\n> > > > KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> > > > we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> > > > to assign glue elements line height and then possibility to choose the largest\n> > > > value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> > > > and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> > > > \n> > > > Can you proove that it is the idea FOP needs? If it is I'll start\n> > > > implementation of this.\n> > > > \n> > > > Kind Regards,\n> > > > Alexey\n> > > \n> > > i would not agree with this approach; the correct approach is to use one of the\n> > > following Unicode space characters:\n> > > \n> > > U+2001 EM QUAD\n> > > U+2003 EM SPACE\n> > > \n> > > the EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n> > > \n> > > these would generate Knuth boxes (not glue) of the desired width and height,\n> > > and scale to the font size so as to affect line height;\n> > > \n> > > if there is any modification to FOP to resolve this issue, then it should be to\n> > > have FOP synthesize at least these (and perhaps a few other) 'spacing' space\n> > > characters in case the selected font does not contain a mapping for them;\n> > > \n> > > since these 'spacing' space characters generate inline boxes, they are treated\n> > > just like any other character; as such they are *not* treated as whitespace for\n> > > the purpose of collapsing, glue behavior, etc\n> > > \n> > > regards,\n> > > glenn\n> > \n> > Hi Glenn,\n> > \n> > I could't understand your idea why adding alignmentContent attribute to glue\n> > elements can break the processing of 'spacing' space characters. We just have\n> > the aim to store information about line-height in inline elements, that contain\n> > spaces only, I mean U+0020. In this case inline boxes are not generated, and we\n> > would like to have possibility to get line height from glue element. In case of\n> > other 'spacing' space characters logic would stay as it was, because glue\n> > elements would have absolutely identical alignmentContent attribute as box\n> > elements in one fo:inline.\n> > \n> > I explained my point. Could you explain yours?\n> > \n> > Kind regards,\n> > Alexey\n> \n> i am disagreeing with you that glue should have a height;\n> \n> what you are trying to do is to assign a height to whitespace characters tha\n> map to glue; the correct way to do that is to use a character that maps to a\n> knuth box, not knuth glue; and the way you do that is using EM QUAD or EN QUAD\n> characters;\n> \n> glue should have *NO* height, as that is fundamental change to the Knuth\n> algorithm, so, no thank you - please use EM|EN QUAD\n\nI've understood your position and tried to use space characters you've advised for my aims and got a result, that is attached.\n\nBoth U+2001 EM QUAD and U+2003 EM SPACE are mapped to aux.box element, which has attribute alignmentContent = null. Furthermore lot's of well-known text editors such as MS Word or Adobe Indesign let the customer set font size and line height to simple spaces and set them in pdf like U+0020.\n\nBut if you still disagree with me I offer to modify FOP in the following way: if fo:inline contains spaces only then zero width box element should be added to the sequence. What can you say about it?"}, {"attachment_id": null, "tags": [], "bug_id": 51639, "is_private": false, "count": 9, "id": 150295, "time": "2011-10-07T10:41:51Z", "creator": "gadams@apache.org", "creation_time": "2011-10-07T10:41:51Z", "text": "(In reply to comment #8)\n> (In reply to comment #6)\n> > (In reply to comment #5)\n> > > (In reply to comment #4)\n> > > > (In reply to comment #2)\n> > > > > Hi Vincent,\n> > > > > \n> > > > > Thank you very much for explanation. I offer a solution of this problem:\n> > > > > \n> > > > > Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> > > > > by choosing the largest value from all\n> > > > > KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> > > > > we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> > > > > to assign glue elements line height and then possibility to choose the largest\n> > > > > value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> > > > > and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> > > > > \n> > > > > Can you proove that it is the idea FOP needs? If it is I'll start\n> > > > > implementation of this.\n> > > > > \n> > > > > Kind Regards,\n> > > > > Alexey\n> > > > \n> > > > i would not agree with this approach; the correct approach is to use one of the\n> > > > following Unicode space characters:\n> > > > \n> > > > U+2001 EM QUAD\n> > > > U+2003 EM SPACE\n> > > > \n> > > > the EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n> > > > \n> > > > these would generate Knuth boxes (not glue) of the desired width and height,\n> > > > and scale to the font size so as to affect line height;\n> > > > \n> > > > if there is any modification to FOP to resolve this issue, then it should be to\n> > > > have FOP synthesize at least these (and perhaps a few other) 'spacing' space\n> > > > characters in case the selected font does not contain a mapping for them;\n> > > > \n> > > > since these 'spacing' space characters generate inline boxes, they are treated\n> > > > just like any other character; as such they are *not* treated as whitespace for\n> > > > the purpose of collapsing, glue behavior, etc\n> > > > \n> > > > regards,\n> > > > glenn\n> > > \n> > > Hi Glenn,\n> > > \n> > > I could't understand your idea why adding alignmentContent attribute to glue\n> > > elements can break the processing of 'spacing' space characters. We just have\n> > > the aim to store information about line-height in inline elements, that contain\n> > > spaces only, I mean U+0020. In this case inline boxes are not generated, and we\n> > > would like to have possibility to get line height from glue element. In case of\n> > > other 'spacing' space characters logic would stay as it was, because glue\n> > > elements would have absolutely identical alignmentContent attribute as box\n> > > elements in one fo:inline.\n> > > \n> > > I explained my point. Could you explain yours?\n> > > \n> > > Kind regards,\n> > > Alexey\n> > \n> > i am disagreeing with you that glue should have a height;\n> > \n> > what you are trying to do is to assign a height to whitespace characters tha\n> > map to glue; the correct way to do that is to use a character that maps to a\n> > knuth box, not knuth glue; and the way you do that is using EM QUAD or EN QUAD\n> > characters;\n> > \n> > glue should have *NO* height, as that is fundamental change to the Knuth\n> > algorithm, so, no thank you - please use EM|EN QUAD\n> \n> I've understood your position and tried to use space characters you've advised\n> for my aims and got a result, that is attached.\n> \n> Both U+2001 EM QUAD and U+2003 EM SPACE are mapped to aux.box element, which\n> has attribute alignmentContent = null. Furthermore lot's of well-known text\n> editors such as MS Word or Adobe Indesign let the customer set font size and\n> line height to simple spaces and set them in pdf like U+0020.\n> \n> But if you still disagree with me I offer to modify FOP in the following way:\n> if fo:inline contains spaces only then zero width box element should be added\n> to the sequence. What can you say about it?\n\nMy position is and will remain that whitespace characters (that map to glue) SHALL NEVER generate a box. The correct solution is to use EM|EN QUAD or other spacing characters that map to a box in a font. If necessary, FOP can be modified to synthesize this mapping in the absence of a specific cmap entry for the character in a font. I would support such a modification."}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n> (In reply to comment #8)\n> > (In reply to comment #6)\n> > > (In reply to comment #5)\n> > > > (In reply to comment #4)\n> > > > > (In reply to comment #2)\n> > > > > > Hi Vincent,\n> > > > > > \n> > > > > > Thank you very much for explanation. I offer a solution of this problem:\n> > > > > > \n> > > > > > Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> > > > > > by choosing the largest value from all\n> > > > > > KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> > > > > > we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> > > > > > to assign glue elements line height and then possibility to choose the largest\n> > > > > > value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> > > > > > and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> > > > > > \n> > > > > > Can you proove that it is the idea FOP needs? If it is I'll start\n> > > > > > implementation of this.\n> > > > > > \n> > > > > > Kind Regards,\n> > > > > > Alexey\n> > > > > \n> > > > > i would not agree with this approach; the correct approach is to use one of the\n> > > > > following Unicode space characters:\n> > > > > \n> > > > > U+2001 EM QUAD\n> > > > > U+2003 EM SPACE\n> > > > > \n> > > > > the EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n> > > > > \n> > > > > these would generate Knuth boxes (not glue) of the desired width and height,\n> > > > > and scale to the font size so as to affect line height;\n> > > > > \n> > > > > if there is any modification to FOP to resolve this issue, then it should be to\n> > > > > have FOP synthesize at least these (and perhaps a few other) 'spacing' space\n> > > > > characters in case the selected font does not contain a mapping for them;\n> > > > > \n> > > > > since these 'spacing' space characters generate inline boxes, they are treated\n> > > > > just like any other character; as such they are *not* treated as whitespace for\n> > > > > the purpose of collapsing, glue behavior, etc\n> > > > > \n> > > > > regards,\n> > > > > glenn\n> > > > \n> > > > Hi Glenn,\n> > > > \n> > > > I could't understand your idea why adding alignmentContent attribute to glue\n> > > > elements can break the processing of 'spacing' space characters. We just have\n> > > > the aim to store information about line-height in inline elements, that contain\n> > > > spaces only, I mean U+0020. In this case inline boxes are not generated, and we\n> > > > would like to have possibility to get line height from glue element. In case of\n> > > > other 'spacing' space characters logic would stay as it was, because glue\n> > > > elements would have absolutely identical alignmentContent attribute as box\n> > > > elements in one fo:inline.\n> > > > \n> > > > I explained my point. Could you explain yours?\n> > > > \n> > > > Kind regards,\n> > > > Alexey\n> > > \n> > > i am disagreeing with you that glue should have a height;\n> > > \n> > > what you are trying to do is to assign a height to whitespace characters tha\n> > > map to glue; the correct way to do that is to use a character that maps to a\n> > > knuth box, not knuth glue; and the way you do that is using EM QUAD or EN QUAD\n> > > characters;\n> > > \n> > > glue should have *NO* height, as that is fundamental change to the Knuth\n> > > algorithm, so, no thank you - please use EM|EN QUAD\n> > \n> > I've understood your position and tried to use space characters you've advised\n> > for my aims and got a result, that is attached.\n> > \n> > Both U+2001 EM QUAD and U+2003 EM SPACE are mapped to aux.box element, which\n> > has attribute alignmentContent = null. Furthermore lot's of well-known text\n> > editors such as MS Word or Adobe Indesign let the customer set font size and\n> > line height to simple spaces and set them in pdf like U+0020.\n> > \n> > But if you still disagree with me I offer to modify FOP in the following way:\n> > if fo:inline contains spaces only then zero width box element should be added\n> > to the sequence. What can you say about it?\n> \n> My position is and will remain that whitespace characters (that map to glue)\n> SHALL NEVER generate a box. The correct solution is to use EM|EN QUAD or other\n> spacing characters that map to a box in a font. If necessary, FOP can be\n> modified to synthesize this mapping in the absence of a specific cmap entry for\n> the character in a font. I would support such a modification.\nI don't think Aleksev was talking about making glue into boxes he was\nsimply suggesting giving them a height (alignmentContext). This is \ncompletely outside of the Knuth algorithm and has nothing to do with it. \nThis information is not currently used by the Knuth algorithm and there\nis no proposal here I can see to make the algorithm use it. Attaching\nnon Knuth algorithm related information to the Knuth elements is simply\na convenient way to hold on to some stuff required for line building in\nthis case. \nIt's too long ago since I wrote this code for me to assess if the \nproposal is in compliance with the FO spec but I can't see it being\n'contrary to the Knuth algorithm' as the data we are talking about is \nnot being used by it and its presence or absence will not change the \noutcome of the algorithm.", "is_private": false, "id": 150301, "creator": "manuel@apache.org", "time": "2011-10-07T11:21:39Z", "bug_id": 51639, "creation_time": "2011-10-07T11:21:39Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 51639, "is_private": false, "count": 11, "id": 150311, "time": "2011-10-07T14:01:21Z", "creator": "gadams@apache.org", "creation_time": "2011-10-07T14:01:21Z", "text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > (In reply to comment #8)\n> > > (In reply to comment #6)\n> > > > (In reply to comment #5)\n> > > > > (In reply to comment #4)\n> > > > > > (In reply to comment #2)\n> > > > > > > Hi Vincent,\n> > > > > > > \n> > > > > > > Thank you very much for explanation. I offer a solution of this problem:\n> > > > > > > \n> > > > > > > Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> > > > > > > by choosing the largest value from all\n> > > > > > > KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> > > > > > > we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> > > > > > > to assign glue elements line height and then possibility to choose the largest\n> > > > > > > value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> > > > > > > and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> > > > > > > \n> > > > > > > Can you proove that it is the idea FOP needs? If it is I'll start\n> > > > > > > implementation of this.\n> > > > > > > \n> > > > > > > Kind Regards,\n> > > > > > > Alexey\n> > > > > > \n> > > > > > i would not agree with this approach; the correct approach is to use one of the\n> > > > > > following Unicode space characters:\n> > > > > > \n> > > > > > U+2001 EM QUAD\n> > > > > > U+2003 EM SPACE\n> > > > > > \n> > > > > > the EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n> > > > > > \n> > > > > > these would generate Knuth boxes (not glue) of the desired width and height,\n> > > > > > and scale to the font size so as to affect line height;\n> > > > > > \n> > > > > > if there is any modification to FOP to resolve this issue, then it should be to\n> > > > > > have FOP synthesize at least these (and perhaps a few other) 'spacing' space\n> > > > > > characters in case the selected font does not contain a mapping for them;\n> > > > > > \n> > > > > > since these 'spacing' space characters generate inline boxes, they are treated\n> > > > > > just like any other character; as such they are *not* treated as whitespace for\n> > > > > > the purpose of collapsing, glue behavior, etc\n> > > > > > \n> > > > > > regards,\n> > > > > > glenn\n> > > > > \n> > > > > Hi Glenn,\n> > > > > \n> > > > > I could't understand your idea why adding alignmentContent attribute to glue\n> > > > > elements can break the processing of 'spacing' space characters. We just have\n> > > > > the aim to store information about line-height in inline elements, that contain\n> > > > > spaces only, I mean U+0020. In this case inline boxes are not generated, and we\n> > > > > would like to have possibility to get line height from glue element. In case of\n> > > > > other 'spacing' space characters logic would stay as it was, because glue\n> > > > > elements would have absolutely identical alignmentContent attribute as box\n> > > > > elements in one fo:inline.\n> > > > > \n> > > > > I explained my point. Could you explain yours?\n> > > > > \n> > > > > Kind regards,\n> > > > > Alexey\n> > > > \n> > > > i am disagreeing with you that glue should have a height;\n> > > > \n> > > > what you are trying to do is to assign a height to whitespace characters tha\n> > > > map to glue; the correct way to do that is to use a character that maps to a\n> > > > knuth box, not knuth glue; and the way you do that is using EM QUAD or EN QUAD\n> > > > characters;\n> > > > \n> > > > glue should have *NO* height, as that is fundamental change to the Knuth\n> > > > algorithm, so, no thank you - please use EM|EN QUAD\n> > > \n> > > I've understood your position and tried to use space characters you've advised\n> > > for my aims and got a result, that is attached.\n> > > \n> > > Both U+2001 EM QUAD and U+2003 EM SPACE are mapped to aux.box element, which\n> > > has attribute alignmentContent = null. Furthermore lot's of well-known text\n> > > editors such as MS Word or Adobe Indesign let the customer set font size and\n> > > line height to simple spaces and set them in pdf like U+0020.\n> > > \n> > > But if you still disagree with me I offer to modify FOP in the following way:\n> > > if fo:inline contains spaces only then zero width box element should be added\n> > > to the sequence. What can you say about it?\n> > \n> > My position is and will remain that whitespace characters (that map to glue)\n> > SHALL NEVER generate a box. The correct solution is to use EM|EN QUAD or other\n> > spacing characters that map to a box in a font. If necessary, FOP can be\n> > modified to synthesize this mapping in the absence of a specific cmap entry for\n> > the character in a font. I would support such a modification.\n> I don't think Aleksev was talking about making glue into boxes he was\n> simply suggesting giving them a height (alignmentContext). This is \n> completely outside of the Knuth algorithm and has nothing to do with it.\n\nI understand, and that is why I oppose it. Glue does not  have height. Changing it to have height amounts to a fundamental change in the Knuth algorithm. If you want width and height, you need a Knuth box. Whitespace maps to glue, not boxes; therefore, it does not have height.\n\nIf you want height, you need a box.\n\n> This information is not currently used by the Knuth algorithm and there\n> is no proposal here I can see to make the algorithm use it. Attaching\n> non Knuth algorithm related information to the Knuth elements is simply\n> a convenient way to hold on to some stuff required for line building in\n> this case. \n> It's too long ago since I wrote this code for me to assess if the \n> proposal is in compliance with the FO spec but I can't see it being\n> 'contrary to the Knuth algorithm' as the data we are talking about is \n> not being used by it and its presence or absence will not change the \n> outcome of the algorithm.\n\nTo repeat, the correct way to deal with this issue is to use a character that maps to a box, and not to change the fundamental semantics of the line break algorithm by assigning height to glue."}, {"count": 12, "tags": [], "bug_id": 51639, "attachment_id": null, "id": 150313, "time": "2011-10-07T14:04:52Z", "creator": "gadams@apache.org", "creation_time": "2011-10-07T14:04:52Z", "is_private": false, "text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > (In reply to comment #8)\n> > > (In reply to comment #6)\n> > > > (In reply to comment #5)\n> > > > > (In reply to comment #4)\n> > > > > > (In reply to comment #2)\n> > > > > > > Hi Vincent,\n> > > > > > > \n> > > > > > > Thank you very much for explanation. I offer a solution of this problem:\n> > > > > > > \n> > > > > > > Height of each line is computed in LineLayoutManager.makeLineBreakPosition(...)\n> > > > > > > by choosing the largest value from all\n> > > > > > > KnuthInlineBox.alignmentContent.lineHeight values belonging to current line. If\n> > > > > > > we add attribute alignmentContent to class KnuthGlue we'll have the possibility\n> > > > > > > to assign glue elements line height and then possibility to choose the largest\n> > > > > > > value of line height from both all KnuthInlineBox.alignmentContent.lineHeight\n> > > > > > > and all KnuthGlue.alignmentContent.lineHeight values belonging to current line.\n> > > > > > > \n> > > > > > > Can you proove that it is the idea FOP needs? If it is I'll start\n> > > > > > > implementation of this.\n> > > > > > > \n> > > > > > > Kind Regards,\n> > > > > > > Alexey\n> > > > > > \n> > > > > > i would not agree with this approach; the correct approach is to use one of the\n> > > > > > following Unicode space characters:\n> > > > > > \n> > > > > > U+2001 EM QUAD\n> > > > > > U+2003 EM SPACE\n> > > > > > \n> > > > > > the EM QUAD is 1 'em' high and 1'em' wide; while the EM SPACE is 1 'em' wide\n> > > > > > \n> > > > > > these would generate Knuth boxes (not glue) of the desired width and height,\n> > > > > > and scale to the font size so as to affect line height;\n> > > > > > \n> > > > > > if there is any modification to FOP to resolve this issue, then it should be to\n> > > > > > have FOP synthesize at least these (and perhaps a few other) 'spacing' space\n> > > > > > characters in case the selected font does not contain a mapping for them;\n> > > > > > \n> > > > > > since these 'spacing' space characters generate inline boxes, they are treated\n> > > > > > just like any other character; as such they are *not* treated as whitespace for\n> > > > > > the purpose of collapsing, glue behavior, etc\n> > > > > > \n> > > > > > regards,\n> > > > > > glenn\n> > > > > \n> > > > > Hi Glenn,\n> > > > > \n> > > > > I could't understand your idea why adding alignmentContent attribute to glue\n> > > > > elements can break the processing of 'spacing' space characters. We just have\n> > > > > the aim to store information about line-height in inline elements, that contain\n> > > > > spaces only, I mean U+0020. In this case inline boxes are not generated, and we\n> > > > > would like to have possibility to get line height from glue element. In case of\n> > > > > other 'spacing' space characters logic would stay as it was, because glue\n> > > > > elements would have absolutely identical alignmentContent attribute as box\n> > > > > elements in one fo:inline.\n> > > > > \n> > > > > I explained my point. Could you explain yours?\n> > > > > \n> > > > > Kind regards,\n> > > > > Alexey\n> > > > \n> > > > i am disagreeing with you that glue should have a height;\n> > > > \n> > > > what you are trying to do is to assign a height to whitespace characters tha\n> > > > map to glue; the correct way to do that is to use a character that maps to a\n> > > > knuth box, not knuth glue; and the way you do that is using EM QUAD or EN QUAD\n> > > > characters;\n> > > > \n> > > > glue should have *NO* height, as that is fundamental change to the Knuth\n> > > > algorithm, so, no thank you - please use EM|EN QUAD\n> > > \n> > > I've understood your position and tried to use space characters you've advised\n> > > for my aims and got a result, that is attached.\n> > > \n> > > Both U+2001 EM QUAD and U+2003 EM SPACE are mapped to aux.box element, which\n> > > has attribute alignmentContent = null. Furthermore lot's of well-known text\n> > > editors such as MS Word or Adobe Indesign let the customer set font size and\n> > > line height to simple spaces and set them in pdf like U+0020.\n> > > \n> > > But if you still disagree with me I offer to modify FOP in the following way:\n> > > if fo:inline contains spaces only then zero width box element should be added\n> > > to the sequence. What can you say about it?\n> > \n> > My position is and will remain that whitespace characters (that map to glue)\n> > SHALL NEVER generate a box. The correct solution is to use EM|EN QUAD or other\n> > spacing characters that map to a box in a font. If necessary, FOP can be\n> > modified to synthesize this mapping in the absence of a specific cmap entry for\n> > the character in a font. I would support such a modification.\n> I don't think Aleksev was talking about making glue into boxes he was\n> simply suggesting giving them a height (alignmentContext). This is \n> completely outside of the Knuth algorithm and has nothing to do with it. \n> This information is not currently used by the Knuth algorithm and there\n> is no proposal here I can see to make the algorithm use it. Attaching\n> non Knuth algorithm related information to the Knuth elements is simply\n> a convenient way to hold on to some stuff required for line building in\n> this case. \n> It's too long ago since I wrote this code for me to assess if the \n> proposal is in compliance with the FO spec but I can't see it being\n> 'contrary to the Knuth algorithm' as the data we are talking about is \n> not being used by it and its presence or absence will not change the \n> outcome of the algorithm.\n\nOne more point. If someone can demonstrate that XSL-FO would assign height to an inline that contains only XML whitespace, then I would be willing to alter my position."}, {"count": 13, "tags": [], "text": "(In reply to comment #10)\n<snip/>\n> I don't think Aleksev was talking about making glue into boxes he was\n> simply suggesting giving them a height (alignmentContext). This is \n> completely outside of the Knuth algorithm and has nothing to do with it. \n> This information is not currently used by the Knuth algorithm and there\n> is no proposal here I can see to make the algorithm use it. Attaching\n> non Knuth algorithm related information to the Knuth elements is simply\n> a convenient way to hold on to some stuff required for line building in\n> this case. \n> It's too long ago since I wrote this code for me to assess if the \n> proposal is in compliance with the FO spec but I can't see it being\n> 'contrary to the Knuth algorithm' as the data we are talking about is \n> not being used by it and its presence or absence will not change the \n> outcome of the algorithm.\n\nI would agree with that. Knuth elements are one-dimensional only, and in the present case this dimension applies to the inline-progression-direction. That is, for Western scripts and the default settings, the line width.\n\nWhat we are talking about here is the line height, and as described in Section 4.6, \"Inline-areas\" of the XSL-FO 1.1 Recommendation, \"An inline-area with inline-area children has a content-rectangle which extends from its dominant baseline [...] by its text-depth in the block-progression-direction, and in the opposite direction by its text-altitude\".\n\nSo even if an fo:inline only contains white space characters, it would still have a height calculated from the font-size that applies to it.\n\nMy concern with adding an AlignmentContext to KnuthGlue elements is that it may cause regressions regarding line stacking in some cases. I don't know this area of the code very well so cannot predict all the implications of such a change. That said, it's just a matter of increasing the test coverage and experimenting.\n\nVincent", "is_private": false, "id": 150502, "creator": "vhennebert@gmail.com", "time": "2011-10-12T18:41:50Z", "bug_id": 51639, "creation_time": "2011-10-12T18:41:50Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 51639, "attachment_id": null, "id": 157352, "time": "2012-04-07T01:41:48Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:41:48Z", "is_private": false, "text": "resetting P2 open bugs to P3 pending further review"}, {"count": 15, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "i've reviewed this, and the originally reported bug is not a bug, for the following reasons:\n\n(1) line-stacking-strategy defaults to max-height, which means the allocation rectangle of the line area is the maximum-line-rectangle as defined in XSL-FO 1.1, Section 4.5;\n\n(2) specifying line-area on an inline only affects the expanded-rectangle of the inline area, which is used only when line-stacking-strategy is line-height;\n\n(3) the line-height line stacking strategy is not currently supported by XSL-FO;\n\nif you would like to submit a patch that adds support for the line-height line stacking strategy, i will apply it asap\n\nin the mean time, i'm moving this to resolved+invalid", "id": 158293, "time": "2012-04-23T05:53:49Z", "bug_id": 51639, "creation_time": "2012-04-23T05:53:49Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 51639, "attachment_id": null, "id": 158516, "time": "2012-04-30T00:11:07Z", "creator": "gadams@apache.org", "creation_time": "2012-04-30T00:11:07Z", "is_private": false, "text": "batch transition resolved+invalid to closed+invalid"}]
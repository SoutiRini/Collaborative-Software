[{"count": 0, "tags": [], "creator": "apache@eeaston.com", "text": "If you run a java command in process using <java ... failonerror=\"false\"> and do\nnot provide permissions, then the tasks never defines a perm object. \nSubsequently, Permissions$SM is not installed and if the java program invokes\nSystem.exit, it kills the VM instead of being cought and resulting in an\nExitException being tossed out of the task execute.\n\nHowever, when failonerror is set to true, if perm==null, a new default\nPermissions object is defined.  The side effect of doing this is that the\nPermissions object installs a security manager that traps RuntimePermission\nexitVM checks ant tosses ExitExceptions.  So if the java program calls\nSystem.exit it doesn't kill the VM. \n\nIn short, you don't get protection against a VM exit when you don't declare\nfailonerror=\"true\".   Since these two concepts are completely distinct, the task\nshould be updated to ensure that the the security manager is either always\ninstalled or never installed regardless of the failonerror value.\n\nIf the choice is to always define a default Permissions when perm is null, then\nJava.executejava could explicitly trap the ExitException and rethrow it if\nfailonerror=true and the status code is non-zero or smother it otherwise.\n\nA build file snippet compares the behavior with and without failonerror:\n<project ...>\n   <!-- make a TryToExit class that just calls System.exit(1); in it's main:\n public class TryToExit { public static void main(String[] args) {\nSystem.exit(1); } }\n   -->\n\n   <target name=\"invoke1\">\n      <echo message=\"About to invoke with failonerror=false\"/>\n      <java classname=\"TryToExit\"/> <!-- VM exit will cause process to abort\nwithout ant's consent -->\n      <echo message=\"TryToExit returned\"/>\n   </target>\n\n   <target name=\"invoke2\">\n      <echo message=\"About to invoke with failonerror=true\"/>\n      <java classname=\"TryToExit\"/> <!-- VM exit will cause process to abort\nwithout ant's consent -->\n      <echo message=\"TryToExit returned\"/>\n   </target>\n</project>\n\nant invoke1 results in output of:\n\n---- ant invoke1 output ---\nUsing default logger\nBuildfile: build.xml\n\ninvoke1:\n     [echo] About to invoke with failonerror=false\n---------------------------\n\n\n---- ant invoke2 output ---\nUsing default logger\nBuildfile: build.xml\n\ninvoke2:\n     [echo] About to invoke with failonerror=true\n\nBUILD FAILED\nd:\\temp\\build.xml:14: Java returned: 1\n---------------------------", "id": 70390, "time": "2005-02-02T17:19:26Z", "bug_id": 33361, "creation_time": "2005-02-02T17:19:26Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "stevel@apache.org", "is_private": false, "text": "The reason the security stuff only went in when failonerror was true was\nbackwards compatibility; once a security manager is in place, things behave\ndifferently.\n\nThere is nothing to stop you adding your own <permissions> entry inside to get\nthe behaviour you want; the failonerror thing is just a shortcut, you indicating\nthe code exits with system.exit.\n\nI know this is somewhat unsatisfactory, and am leaving this bug open.", "id": 70396, "time": "2005-02-02T18:28:01Z", "bug_id": 33361, "creation_time": "2005-02-02T18:28:01Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "jkf@apache.org", "is_private": false, "id": 72412, "attachment_id": null, "bug_id": 33361, "creation_time": "2005-03-14T21:14:48Z", "time": "2005-03-14T21:14:48Z", "text": "The protection is now also added when failonerror=\"false\"."}, {"attachment_id": null, "tags": [], "bug_id": 33361, "is_private": false, "count": 3, "id": 73026, "time": "2005-03-29T23:43:37Z", "creator": "jglick@apache.org", "creation_time": "2005-03-29T23:43:37Z", "text": "This is rather unfortunate as it eliminates one of the only (admittedly poor)\nworkarounds for\n\nhttp://www.netbeans.org/issues/show_bug.cgi?id=47645\n\nand makes the bug be triggered on any <java fork=\"false\">. The basic problem is\nthat Ant should not be setting a global security manager without consulting an\nembedding environment first. I will file a separate bug for that when I get a\nchance."}]
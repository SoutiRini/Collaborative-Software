[{"attachment_id": null, "tags": [], "bug_id": 43497, "is_private": false, "count": 0, "id": 108684, "time": "2007-09-26T19:03:43Z", "creator": "mraible@apache.org", "creation_time": "2007-09-26T19:03:43Z", "text": "JSP's Expression Language does not XML-escape it's content by default. While\n<c:out> and ${fn:escapeXml(string)} can be used, I think it's a nice option to\nallow turning on escaping by default - in Tomcat's web.xml. This is similar to\nthe \"trimSpaces\" option that Tomcat added before it was part of the JSP spec.\n\nRelated: http://raibledesigns.com/rd/entry/java_web_frameworks_and_xss\n\nI'll attach a patch to make this possible."}, {"count": 1, "tags": [], "creator": "mraible@apache.org", "attachment_id": 20891, "is_private": false, "id": 108685, "time": "2007-09-26T19:04:34Z", "bug_id": 43497, "creation_time": "2007-09-26T19:04:34Z", "text": "Created attachment 20891\nPatch to add the ability to escape the rendered output of JSP's EL by default"}, {"count": 2, "tags": [], "bug_id": 43497, "attachment_id": null, "is_private": false, "id": 120242, "time": "2008-08-31T10:34:16Z", "creator": "markt@apache.org", "creation_time": "2008-08-31T10:34:16Z", "text": "*** Bug 45652 has been marked as a duplicate of this bug. ***"}, {"attachment_id": null, "tags": [], "creator": "icoloma@gmail.com", "is_private": false, "count": 3, "id": 140856, "time": "2010-10-20T10:48:11Z", "bug_id": 43497, "creation_time": "2010-10-20T10:48:11Z", "text": "Any chance this bug receives some attention? Any application on Tomcat is susceptible of XSS attacks, and it should be easy to fix.\nKeeping the current behavior as default is reasonable, but please provide some flag to switch. Right now I have to keep my own separate patch jar, and merge into Tomcat."}, {"count": 4, "tags": [], "text": "If you don't want to patch Tomcat, here is a custom ELResolver that XML-escapes EL values.  You just have to add a servlet context listener to web.xml to configure it in your web application.\n\nhttp://pukkaone.github.com/2011/01/03/jsp-cross-site-scripting-elresolver.html", "is_private": false, "bug_id": 43497, "id": 144603, "time": "2011-02-27T13:49:50Z", "creator": "pukkaone@gmail.com", "creation_time": "2011-02-27T13:49:50Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "It is not as simple as this patch suggests.\n\nThe necessary escaping to prevent XSS varies by context [1]. The necessary context information is not available to Tomcat so Tomcat is unable to ensure that the correct escaping is applied.\n\nThere are several possible approaches to solve this issue but none of them can be currently applied to Tomcat:\n1. Provide methods to do this in the framework being used and expect/require developers to set the context appropriately.\n2. Use a framework that is sufficiently strict that the context is always known and the necessary escaping can be applied automatically.\n3. Modify the EL spec to allow the context to be supplied. At this point the escaping may as well be automatically applied as well.\n\nOption 3 could be implemented in Tomcat if the EL spec was changed. That would be Tomcat 8 at the earliest.\n\n[1] http://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet", "attachment_id": null, "id": 144699, "creation_time": "2011-03-03T07:14:32Z", "time": "2011-03-03T07:14:32Z", "creator": "markt@apache.org", "bug_id": 43497, "is_private": false}, {"count": 6, "tags": [], "creator": "icoloma@gmail.com", "attachment_id": null, "text": "I disagree. 99% of the XSS injection cases are described in the mentioned link as RULE #1: escape HTML. Even worse, 99% of these cases could be implemented by simply escaping &lt; or any UTF-8 equivalent (some of the escaped characters proposed in the link, like &gt; do not have any known exploits in modern browsers).\n\nWe are talking about any use of ${user.name}, ${post.contents}, ${comment}. These are by far the most common use case. Other cases:\n\n* Cases where sanitizing is NOT desired: you can always fallback to &lt;c:out>\n* A command-line flag can be used to disable sanitizing altogether.\n* Cases where extra processing is desired (like attribute escaping): for these cases the programmer can invoke extra functions.\n\nI have to say, I have not found a single case where attribute escaping (or javascript for that matter) was required. I don't mind sanitizing these by hand, but this patch would make 99% of Tomcat applications safer by default.", "id": 144700, "time": "2011-03-03T07:46:15Z", "bug_id": 43497, "creation_time": "2011-03-03T07:46:15Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 5729, "is_private": false, "id": 9433, "time": "2002-01-07T15:16:10Z", "creator": "bill.wilkinson@sun.com", "creation_time": "2002-01-07T15:16:10Z", "tags": [], "text": "In the process of doing some benchmarking of JSP vs. ASP and other platforms, I \nhave run into some anomalies in the way Tomcat (version 4.0.1 final, running \nstandalone on port 8080, on a Sun Netra using Solaris) behaves under load.\n\nThe following pretty long-winded description was partly for the benefit of my \nmanager, so he'd understand what I ran into.  I hope that, long as it is, it \nmight be of benefit in possibly reproducing the problem and/or results.\n\nThe JSP page involved was truly tiny.  To wit:\n\n<HTML><BODY>\nThe time is <%= (new java.util.Date()).toString() %>\n</BODY></HTML>\n\nReally.  That's all.\n\nWithout further ado, the rest of my report.  It is immediately followed by a \ncopy of the \"annotatedLogs.txt\" that is referred to in the report.\n\n************** FILE: JspReport.html ****************\n\n<HTML>\n<HEAD>\n<TITLE>JSP Testing</TITLE>\n</HEAD>\n<BODY>\n<FONT SIZE=4><P>Testing procedures:</P></FONT>\n<FONT Size=2>\n<P>We use \"WebCat,\" which is a tool that will repeatedly hit a given URL with \nany (reasonable) number of simultaneous users (accomplished by spawning a \nnumber of threads, each of which simply repeats the given HTTP request as soon \nas it receives all the data from the prior request).</P>\n\n<P>A typical &quot;run&quot; of one of our tests takes one minute.  During the \nfirst ten seconds, no results are measured (this is done so that the server can \n&quot;come up to speed&quot;\u2014presumably any compilations or caching will be \naccomplished during this time).  For the next 50 seconds, the tool captures the \nresults of each &quot;hit&quot; on the web server.  The &quot;performance&quot; \nnumber we are most interested in\u2014and the one we always report\u2014is the total \nnumber of page hits during those 50 seconds and, consequently, the average \nnumber of &quot;hits per second&quot; that the Web server manages to \ndeliver.</P>\n\n<P>A typical &quot;set&quot; of tests of a given URL consists of doing all the \nabove with a varying number of &quot;threads.&quot; Empirical tests have shown \nus that some pages will exhibit noticeable overall performance differences only \nbetween one and two or one and four threads whereas other pages will show \nmeasurable differences up to as many as 20 or 30 threads.  So, as a matter of \ncourse, we test with:</P>\n<UL><LI>1 Client Thread\n<LI>2 Client Threads\n<LI><P>4 Client Threads\n<LI><P>7 Client Threads\n<LI><P>10 Client Threads\n<LI><P>20 Client Threads\n<LI><P>30 Client Threads\n<LI><P>40 Client Threads\n<LI>50 Client Threads</UL>\n\n<P>Not surprisingly, in the case of the Tomcat web server (running standalone, \nat least) this results in the web server starting a like number of threads.</P>\n\n<P>To give an example, here are the results we get from Tomcat as it serves up \nsome JSP pages that do <I>not</I> involve any access to a database.  As noted, \nthe numbers in the top row indicate the number of clients that are \n&quot;simultaneously&quot; (within the limits of the multi-threaded driver \nprogram, the capabilities of the network, and the socket mechanisms on both \nends) &quot;hitting&quot; the web server. Numbers in other cells indicate the \nnumber of &quot;hits&quot; (pages) per second that the Web server is responding \nwith.</P>\n</FONT>\n<P ALIGN=\"LEFT\"><TABLE BORDER CELLSPACING=1 BORDERCOLOR=\"#000000\" CELLPADDING=9 \nWIDTH=607>\n<TR><TD WIDTH=\"17%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>  Clients:</P>\n\n<P>Test name:</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>1</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>2</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>4</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>7</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>10</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>20</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>30</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>40</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>50</FONT></TD>\n</TR>\n<TR><TD WIDTH=\"17%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>SUJ1</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>189</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>284</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>371</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>63</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>37</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>35</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>35</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>34</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>33</FONT></TD>\n</TR>\n<TR><TD WIDTH=\"17%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>SUJ2</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>26</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>31</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>34</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>34</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>35</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>35</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>34</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>33</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>33</FONT></TD>\n</TR>\n<TR><TD WIDTH=\"17%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>SUJ3N</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>36</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>53</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>61</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>60</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>58</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>55</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>55</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>49</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>48</FONT></TD>\n</TR>\n<TR><TD WIDTH=\"17%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>SUJ3W</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>27</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>42</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>50</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>45</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>49</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>52</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>49</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>48</FONT></TD>\n<TD WIDTH=\"9%\" VALIGN=\"TOP\">\n<FONT SIZE=2><P>45</FONT></TD>\n</TR>\n</TABLE>\n</P>\n<FONT SIZE=2>\n<P>And that data already shows one of the anomalies I keep seeing.  </P>\n<HR>\n<P><FONT Size=4>What the tests are doing.</Font></P>\n\n<P>SUJ1 [SUn hardware, Jsp platform, test 1] is a bare bones, one line of Java \ncode, page.  Specifically, it consists of &lt;%= (new Date( ) ).toString( ) %\n&gt; and nothing more.</P>\n\n<P>SUJ2 contains no actual Java code, at all.  Instead, it is just roughly 5K \nbytes of HTML that has been given a &quot;.jsp&quot; file name in order to \n(presumably) force it through the JSP server. </P>\n\n<P>SUJ3N and SUJ3W simulate database access and usage.  They use a 2D array \n(or, in the case of Java, and array of arrays) to emulate the rows and columns \nof data one would retrieve from a database query.  These tests perform a \nvariety of manipulations on the data, including formatting the data (e.g., \nnumbers, currency, etc.) for HTML display.  Both tests work from the same data \nand do the same work.  The only difference is that SUJ3N (&quot;N&quot; for \nNowrite) does <I>not</I> write its results back to the client and SUJ3W \n(&quot;W&quot;rite) does.  [In other words, any observed difference in time \nbetween pairs of results here could be presumed to be the overhead of sending \ndata from Java to the web server and thence on to the client.]</P>\n\n<P>Those tests are ordered roughly in order of expected complexity and server \nperformance.  Indeed, on other servers the ordering has been shown to be \ncorrect.  </P>\n\n<HR>\n<P><FONT Size=4>The anomalies</FONT></P>\n\n<P>But Tomcat shows some strange results.  With 10 or more simultaneous \nclients, Tomcat performs worse on the two simple tests than it does on either \nof the two more complex ones.  In point of fact, when test SUJ1 is repeated, it \nwill often perform worse than any other test, even when serving only one or two \nsimultaneous clients.  On the other hand, on a very few occasions I saw it \nstart off &quot;slow&quot; and then &quot;jump&quot; up to much higher \nperformance, just as it jumps down to much lower performance in the numbers \nshown above.  I\u2019m sorry I don\u2019t have a &quot;catalina&quot; log to show what \nthe server was doing at that time [I inadvertently erased it], but please \nbelieve me that it shows nothing obvious.</P>\n\n<P>I have attached a file named &quot;AnnotatedLogs.txt&quot;.  This file is \nactually a combination of three files, intermixed so that the lines in the \nfinal result appear in chronological order, as best as I can make them.  In \naddition, my annotations are added (they occur between lines of dollar signs, \nto make it clear they are not part of the original files).</P>\n\n<P>Which lines come from which original files is easy to determine:  All the \nlines from <BR>\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;catalina_log.2001-12-24.txt&quot;<BR>\nbegin with a date and time stamp (indeed, with &quot;2001-12-24&quot;).  All \nother lines, except the annotations, come from the Webcat logs.</P>\n<P>The results shown in this annotated log are fairly reproducible.  The \nsudden \"hit\" that drops the server performance way down almost always occurs by \nthe time the stress program is hitting the server with 30 clients.  Other \nthings noted in that annotated log are not as consistently reproducible, but \nI've seen all the \"numbers\" occur more than 2 or 3 times.\n\n</FONT>\n</BODY>\n</HTML>\n**************** END OF FILE ********************\n\n\n********** file: AnnotatedLogs.txt *********************\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nTomcat was started up as a stand-alone server at roughly\n13:10, as reflected by these first lines from the \n\"catalina\" log:\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n\n2001-12-24 13:10:02 HttpConnector Opening server socket on all host IP addresses\n2001-12-24 13:10:12 HttpConnector Opening server socket on all host IP addresses\n2001-12-24 13:10:18 HttpConnector[8080] Starting background thread\n2001-12-24 13:10:18 HttpProcessor[8080][0] Starting background thread\n2001-12-24 13:10:18 HttpProcessor[8080][1] Starting background thread\n2001-12-24 13:10:18 HttpProcessor[8080][2] Starting background thread\n2001-12-24 13:10:18 HttpProcessor[8080][3] Starting background thread\n2001-12-24 13:10:18 HttpProcessor[8080][4] Starting background thread\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nThen, at just before 13:13, the stress tool was started,\n\"hitting\" Tomcat with repeated requests for the SUJ1 JSP\ntest (yes, yes, it's name \"Minimal.jsp\" here...bad naming).\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\nRun [/BM/Minimal.jsp] \nTest run with 1 users: [13:13]\n           Pages Requested,      10240,     204.80,  10240,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,      10240,     204.80,  10240,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 2 users:  [13:14]\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nNote that the test with 1 client had no errors.\nWith two clients, though, we get 30 HTTP errors.\nGranted, as a percentage of the pages requested\nthat is \"noise\", but it does seem to indicate that\nthe system is already having trouble.\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n           Pages Requested,      14040,     280.80,  14040,\n                 1 Errored,         30,       0.60,     30,\n                 1 Fetched,      14010,     280.20,  14010,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 4 users:  [13:15]\n\n2001-12-24 13:15:39 HttpProcessor[8080][5] Starting background thread\n2001-12-24 13:15:39 HttpProcessor[8080][6] Starting background thread\n2001-12-24 13:15:39 HttpProcessor[8080][7] Starting background thread\n2001-12-24 13:15:39 HttpProcessor[8080][8] Starting background thread\n\n           Pages Requested,      18285,     365.70,  18285,\n                 1 Errored,          4,       0.08,      4,\n                 1 Fetched,      18281,     365.62,  18281,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 7 users:  [13:16]\n           Pages Requested,      20398,     407.96,  20398,\n                 1 Errored,          6,       0.12,      6,\n                 1 Fetched,      20392,     407.84,  20392,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 10 users:  [13:17]\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nThis run probably actually started at about 13:16:55,\nso the SocketException noted here probably occurred\nafter quite a few pages had been successfully server up.\nThis would explain the moderate Pages Fetched value \nwe see, in comparison to the much lower number in the\nnext sub-run.\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n2001-12-24 13:17:01 HttpConnector[8080] accept: \njava.net.SocketException: Software caused connection abort\nat java.net.PlainSocketImpl.socketAccept(Native Method)\nat java.net.PlainSocketImpl.accept(PlainSocketImpl.java:344)\nat java.net.ServerSocket.implAccept(ServerSocket.java:441)\nat java.net.ServerSocket.accept(ServerSocket.java:412)\nat org.apache.catalina.connector.http.HttpConnector.run(HttpConnector.java:979)\nat java.lang.Thread.run(Thread.java:539)\n2001-12-24 13:17:01 HttpConnector[8080] Opening server socket on all host IP \naddresses\n2001-12-24 13:17:01 HttpProcessor[8080][9] Starting background thread\n2001-12-24 13:17:05 HttpProcessor[8080][10] Starting background thread\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nWhy do we need 11 threads (0 to 10) to service 10 clients?\nOr 21 threads to service 20 clients?  Is that because Tomcat\nhas \"forgotten\" about the thread that caused the connection\nabort, just above?\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n\n           Pages Requested,       5580,     111.60,   5580,\n                 1 Errored,          3,       0.06,      3,\n                 1 Fetched,       5577,     111.54,   5577,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 20 users:  [13:18]\n\n2001-12-24 13:18:04 HttpProcessor[8080][11] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][12] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][13] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][14] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][15] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][16] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][17] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][18] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][19] Starting background thread\n2001-12-24 13:18:04 HttpProcessor[8080][20] Starting background thread\n\n           Pages Requested,       1893,      37.86,   1893,\n                 1 Errored,          1,       0.02,      1,\n                 1 Fetched,       1892,      37.84,   1892,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 30 users:  [13:19]\n\n2001-12-24 13:19:07 HttpProcessor[8080][21] Starting background thread\n2001-12-24 13:19:09 HttpProcessor[8080][22] Starting background thread\n2001-12-24 13:19:09 HttpProcessor[8080][23] Starting background thread\n2001-12-24 13:19:09 HttpProcessor[8080][24] Starting background thread\n2001-12-24 13:19:09 HttpProcessor[8080][25] Starting background thread\n2001-12-24 13:19:09 HttpProcessor[8080][26] Starting background thread\n2001-12-24 13:19:09 HttpProcessor[8080][27] Starting background thread\n2001-12-24 13:19:11 HttpProcessor[8080][28] Starting background thread\n2001-12-24 13:19:11 HttpProcessor[8080][29] Starting background thread\n2001-12-24 13:19:11 HttpProcessor[8080][30] Starting background thread\n\n           Pages Requested,       1883,      37.66,   1883,\n                 1 Errored,          2,       0.04,      2,\n                 1 Fetched,       1881,      37.62,   1881,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 40 users:  [13:20]\n\n2001-12-24 13:20:13 HttpProcessor[8080][31] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][32] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][33] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][34] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][35] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][36] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][37] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][38] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][39] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][40] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][41] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][42] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][43] Starting background thread\n2001-12-24 13:20:13 HttpProcessor[8080][44] Starting background thread\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nAnd why do we have 45 threads, here, to service 40 clients?\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n           Pages Requested,       1741,      34.82,   1741,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,       1741,      34.82,   1741,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 50 users:  [13:21]\n\n2001-12-24 13:21:16 HttpProcessor[8080][45] Starting background thread\n2001-12-24 13:21:16 HttpProcessor[8080][46] Starting background thread\n2001-12-24 13:21:16 HttpProcessor[8080][47] Starting background thread\n2001-12-24 13:21:16 HttpProcessor[8080][48] Starting background thread\n2001-12-24 13:21:16 HttpProcessor[8080][49] Starting background thread\n2001-12-24 13:21:22 HttpProcessor[8080][50] Starting background thread\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nEspecially since now we are back to needing 51 threads \nto service 50 clients?\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n           Pages Requested,       1861,      37.22,   1861,\n                 1 Errored,          2,       0.04,      2,\n                 1 Fetched,       1859,      37.18,   1859,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nAt this point, I paused a few minutes to examine the numbers and scratch\nmy head.  Then I started a second run, identical to the first one.  I got\nthese results:\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\nRun B: started 13:26\nRun [/BM/Minimal.jsp] \nTest run with 1 users: [13:26]\n           Pages Requested,       1263,      25.26,   1263,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,       1263,      25.26,   1263,\n                Pages Read,       1263,      25.26,   1263,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 2 users:  [13:27]\n           Pages Requested,       1127,      22.54,   1127,\n                 1 Errored,          1,       0.02,      1,\n                 1 Fetched,       1126,      22.52,   1126,\n                Pages Read,       1126,      22.52,   1126,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 4 users:  [13:28]\n           Pages Requested,        970,      19.40,    970,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,        970,      19.40,    970,\n                Pages Read,        970,      19.40,    970,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 7 users:  [13:29]\n           Pages Requested,        868,      17.36,    868,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,        868,      17.36,    868,\n                Pages Read,        868,      17.36,    868,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 10 users:  [13:30]\n           Pages Requested,        714,      14.28,    714,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,        714,      14.28,    714,\n                Pages Read,        714,      14.28,    714,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 20 users:  [13:31]\n           Pages Requested,        584,      11.68,    584,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,        584,      11.68,    584,\n                Pages Read,        584,      11.68,    584,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 30 users:  [13:32]\n           Pages Requested,        477,       9.54,    477,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,        477,       9.54,    477,\n                Pages Read,        477,       9.54,    477,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 40 users:  [13:33]\n           Pages Requested,        379,       7.58,    379,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,        379,       7.58,    379,\n                Pages Read,        379,       7.58,    379,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \nTest run with 50 users:  [13:34]\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nUp to here, we have been running with the same 51 threads\n(0 to 50) that were created from the first \"run\" of set of\ntests.  But then, all of a sudden roughly half way through\nthis test with 50 clients, Tomcat seems to decide it needs\nmore threads.\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n2001-12-24 13:34:26 HttpProcessor[8080][51] Starting background thread\n2001-12-24 13:34:26 HttpProcessor[8080][52] Starting background thread\n2001-12-24 13:34:26 HttpProcessor[8080][53] Starting background thread\n2001-12-24 13:34:26 HttpProcessor[8080][54] Starting background thread\n2001-12-24 13:34:26 HttpProcessor[8080][55] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][56] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][57] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][58] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][59] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][60] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][61] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][62] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][63] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][64] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][65] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][66] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][67] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][68] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][69] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][70] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][71] Starting background thread\n2001-12-24 13:34:28 HttpProcessor[8080][72] Starting background thread\n2001-12-24 13:34:30 HttpProcessor[8080][73] Starting background thread\n2001-12-24 13:34:30 HttpProcessor[8080][74] Starting background thread\n2001-12-24 13:34:30 HttpConnector[8080] No processor available, rejecting this \nconnection\n2001-12-24 13:34:30 HttpConnector[8080] No processor available, rejecting this \nconnection\n2001-12-24 13:34:30 HttpConnector[8080] No processor available, rejecting this \nconnection\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nIt runs out of threads, presumably.  It rejects connections.\nAND YET we see no HTTP errors in the log??\nI guess a rejected connection doesn't register to the stress\ntool as an error...it just tries again.\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n           Pages Requested,        202,       4.04,    202,\n                 1 Errored,          0,       0.00,      0,\n                 1 Fetched,        202,       4.04,    202,\n                Pages Read,        202,       4.04,    202,\n        Avg Bytes per Page,        303,       6.06,    303,\n\"*****************************\" \n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nNevertheless, look at the ABYSMAL number of pages per second\nbeing served up by Tomcat at this point!  FOUR per second!\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n**************** END OF FILE ********************"}, {"count": 1, "tags": [], "bug_id": 5729, "attachment_id": null, "text": "Thanks for the report. I'm using ab for load testing, but I'm usually doing very\nfocused testing to get the performance of the engine and solate hotspots (like,\ntesting the connector only, testing static file serving, etc). I personally\nalready know very well the hotspots in the standalone connector (which I'm\nrewriting at the moment) and other things like the static file serving.\nKin-Man probably has similar insights on Jasper internals.\nThe benchmark is way too generic to be of any use for development, as it is\ntesting all the components put on top of each other.\n\nThe problem with running out of processors is a bug (which I could never\nreproduce with 10s of ab runs with a concurrency of 50) which should be filed\nseparately (after removing the comments in bold, of course).", "id": 9441, "time": "2002-01-08T03:41:27Z", "creator": "remm@apache.org", "creation_time": "2002-01-08T03:41:27Z", "is_private": false}]
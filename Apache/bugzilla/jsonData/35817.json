[{"attachment_id": null, "tags": [], "bug_id": 35817, "text": "It would be interesting to have a failonwarning attribute allowing to check if\njavadoc generates warning or not. Javadoc normally just complains with warning\nfor many javadoc problems what prohibit to use ant to ensure that the code\ncontains well written javadoc.", "count": 0, "id": 77494, "time": "2005-07-21T17:49:06Z", "creator": "mguillemot@yahoo.fr", "creation_time": "2005-07-21T17:49:06Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 35817, "is_private": false, "count": 1, "id": 90706, "time": "2006-06-28T03:29:41Z", "creator": "karlkras@us.ibm.com", "creation_time": "2006-06-28T03:29:41Z", "text": "HERE HERE! I second this request. I'm faced with this need for my project right\nnow and was surprised to find that it wasn't available... would seem to be a\nrather simple but useful addition, eh? but this has been sitting here for quite\na while now. :("}, {"count": 2, "tags": [], "bug_id": 35817, "attachment_id": null, "is_private": false, "id": 90724, "time": "2006-06-28T15:01:51Z", "creator": "mbenson@apache.org", "creation_time": "2006-06-28T15:01:51Z", "text": "This is really not possible with Sun javadoc, without clumsy output grepping. \nAnt simply calls the available javadoc tool of the JDK present (most often Sun\nI'd wager).  What we could plan for, however, is to hope, push, or contribute to\nApache Harmony so that its Javadoc tool will be written in Java (no reason why\nit shouldn't), then borrow its code to generate Javadocs in Java.  Then Ant will\nbe able to have more control over warnings, etc. and can satisfy this request.\n\nIMHO"}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> This is really not possible with Sun javadoc, without clumsy output grepping. \n> Ant simply calls the available javadoc tool of the JDK present (most often Sun\n> I'd wager).  \nAgreed, however it would appear that the javadoc task is already doing the\ngrepping for the error condition (failonerror) so I would think doing something\nsimilar for the warning condition during this same process would be relatively\nsimple.", "is_private": false, "id": 90725, "creator": "karlkras@us.ibm.com", "time": "2006-06-28T15:14:30Z", "bug_id": 35817, "creation_time": "2006-06-28T15:14:30Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Unless you've actually looked at the source that's not a leap I would make.\n\nThe javadoc tak is actually forking a new VM to run the javadoc tool, so it can\nvery easily check the return status of the forked process to determine if it\n\"failed\" or not.\n\nTo the best of my recollection the output from the forked process is not being\nexamined in any way.", "attachment_id": null, "id": 90727, "creator": "carej@us.ibm.com", "time": "2006-06-28T15:21:41Z", "bug_id": 35817, "creation_time": "2006-06-28T15:21:41Z", "is_private": false}, {"count": 5, "text": "(In reply to comment #4)\n> Unless you've actually looked at the source that's not a leap I would make.\n> \n> The javadoc tak is actually forking a new VM to run the javadoc tool, so it can\n> very easily check the return status of the forked process to determine if it\n> \"failed\" or not.\n\nI'm not going to pretend to know how the task does what it does because, no, I\nhaven't seen the code. But my leap wouldn't seem so far fetched. From what I can\ntell, both errors and warnings in javadoc are directed to stderr and one is\nignored (warning) while the other is optionally reported. So I admit to making\nan assumption that something must be conditionally checking the stderr output\nfor the error conditions if the user indicates failonerror. If not... well, this\nis how I would approach the task.\n", "creator": "karlkras@us.ibm.com", "is_private": false, "id": 90728, "time": "2006-06-28T15:35:12Z", "bug_id": 35817, "creation_time": "2006-06-28T15:35:12Z", "tags": [], "attachment_id": null}, {"count": 6, "tags": [], "text": "Javadoc is invoked as an external process, ultimately through Java's Process\nAPIs.  The stdout of that process is logged at INFO level; its stderr is logged\nat WARN level.  There is some slight manipulation, and hence inspection, of the\ncontent of these streams, but this is extremely minimal and is probably already\npushing our luck coding expectations of structured output from an externally\ncalled, and continually evolving, tool.  failonerror is, as Jeff surmises,\naccomplished with a simple inspection of the return code of the forked process.\n I still think a license-friendly Java implementation is the best thing to\nhope/wait/strive for.", "attachment_id": null, "id": 90731, "creator": "mbenson@apache.org", "time": "2006-06-28T16:08:07Z", "bug_id": 35817, "creation_time": "2006-06-28T16:08:07Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 35817, "text": "Oh... I see now. The failure determination check is done specifically on the\nprocess execution result code, no sniffing of message content... forgot that I\ncould simply download the code and look at it! Having to shoehorn the ability to\ndo conditional evaluations on the output would appear a bit difficult using this\nframework. Guess I'll chew on this a bit.\nSorry for the wasted bandwidth.", "id": 90738, "time": "2006-06-28T19:35:58Z", "creator": "karlkras@us.ibm.com", "creation_time": "2006-06-28T19:35:58Z", "is_private": false, "attachment_id": null}, {"count": 8, "text": "There is an RFE open for allowing the <javadoc> task to set a property if\nwarnings are found; you could then simply <fail> afterwards if set.\n\n*** This bug has been marked as a duplicate of 37728 ***", "creator": "jglick@apache.org", "attachment_id": null, "id": 97464, "time": "2006-12-29T16:43:46Z", "bug_id": 35817, "creation_time": "2006-12-29T16:43:46Z", "tags": [], "is_private": false}]
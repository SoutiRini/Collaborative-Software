[{"count": 0, "tags": [], "bug_id": 55323, "is_private": false, "id": 168884, "creation_time": "2013-07-29T08:08:29Z", "time": "2013-07-29T08:08:29Z", "creator": "simon.klinkert@gmail.com", "text": "Created attachment 30643\nre-escaping patch for ap_sub_req_method_uri\n\nI'm observing a httpd/mod_webdav problem. When I try to upload or download a file and the file name contains the special character '%' (for example 'file%#12file'), then I get 400 and 403 errors every time.\n\nAfter some debugging with dtrace and gdb, I assume the httpd unescapes the uri in ap_process_request_internal() more than once.\n\nTake a look at this stack trace:\n\n      httpd`ap_unescape_url\n      httpd`ap_process_request_internal+0x107\n      httpd`ap_sub_req_method_uri+0xdd\n      httpd`ap_sub_req_lookup_uri+0x27\n      mod_rewrite.so`lookup_variable+0x984\n      mod_rewrite.so`do_expand+0xd2e\n\tsplitout_queryargs\n      mod_rewrite.so`apply_rewrite_list+0x354\n      mod_rewrite.so`hook_uri2file+0x4f1\n      httpd`ap_run_translate_name+0x2e\n      httpd`ap_process_request_internal+0x2f5\n      httpd`ap_process_request+0x165\n      httpd`ap_process_http_connection+0x123\n      httpd`ap_run_process_connection+0x2e\n      httpd`child_main+0x493\n      httpd`make_child+0x115\n      httpd`startup_children+0x3d\n      httpd`ap_mpm_run+0x90a\n      httpd`main+0x9af\n      httpd`_start+0x83\n\nThere are two calls of ap_process_request_internal() and thus two uri unescapes (ap_unescape_url()).\n\nI'm not really familiar with the httpd code, but I guess a possible fix could re-escape the already unescaped uri in ap_sub_req_method_uri() before calling the internal request handler.\n\nA little patch seems to be working for me. WebDav uploads and downloads for the file 'file%#12file' are now possible. I tested the version 2.2.20 but the 2.5 code looks broken as well.", "attachment_id": 30643}, {"count": 1, "tags": [], "bug_id": 55323, "is_private": false, "text": "That looks too general, your symptom is that you pass file%#12file into a rewriterule (-U check?) and it needs to be encoded at that point, but the patch would re-escape  anyone who sent in a properly escaped URL.", "id": 168900, "time": "2013-07-29T11:17:41Z", "creator": "covener@gmail.com", "creation_time": "2013-07-29T11:17:41Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 55323, "attachment_id": null, "text": "(In reply to Eric Covener from comment #1)\n> That looks too general, your symptom is that you pass file%#12file into a\n> rewriterule (-U check?) and it needs to be encoded at that point, but the\n> patch would re-escape  anyone who sent in a properly escaped URL.\n\nFirst of all, thanks for your feedback!\n\nHow do I encode the uri at \"that point\"?\n\nThere is no -U involved. My rewrite rule looks like this:\n\nRewriteRule ^(/.*)? %{LA-U:ENV:storage_path}$1 [L]\n\nIn addition, I do not really see why this should be too general. The function ap_sub_req_method_uri does already a re-escaping if new_uri does not start with '/'. Why is that bad for the other case?", "id": 168903, "time": "2013-07-29T12:30:12Z", "creator": "simon.klinkert@gmail.com", "creation_time": "2013-07-29T12:30:12Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55323, "text": "(In reply to Simon Klinkert from comment #2)\n> (In reply to Eric Covener from comment #1)\n> > That looks too general, your symptom is that you pass file%#12file into a\n> > rewriterule (-U check?) and it needs to be encoded at that point, but the\n> > patch would re-escape  anyone who sent in a properly escaped URL.\n> \n> First of all, thanks for your feedback!\n> \n> How do I encode the uri at \"that point\"?\n> \n> There is no -U involved. My rewrite rule looks like this:\n> \n> RewriteRule ^(/.*)? %{LA-U:ENV:storage_path}$1 [L]\n\n$1 has captured a URL-escaped string. I think you can re-escabe it with the [B] flag, or pull the unescaped version out of %{THE_REQUEST} in a rewritecond.\n\n> In addition, I do not really see why this should be too general. The\n> function ap_sub_req_method_uri does already a re-escaping if new_uri does\n> not start with '/'. Why is that bad for the other case?\n\nSorry, did not look to closely and not too familiar with it. Was just concerned generally about the scope of the change.", "id": 168904, "time": "2013-07-29T12:43:14Z", "creator": "covener@gmail.com", "creation_time": "2013-07-29T12:43:14Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 55323, "is_private": false, "id": 168905, "creation_time": "2013-07-29T12:49:17Z", "time": "2013-07-29T12:49:17Z", "creator": "covener@gmail.com", "text": "> $1 has captured a URL-escaped string. I think you can re-escabe it with the\n> [B] flag, or pull the unescaped version out of %{THE_REQUEST} in a\n> rewritecond.\n\nDuh, I mean: $1 has captured an un-escaped", "attachment_id": null}, {"count": 5, "tags": [], "creator": "simon.klinkert@gmail.com", "is_private": false, "text": "(In reply to Eric Covener from comment #4)\n> > $1 has captured a URL-escaped string. I think you can re-escabe it with the\n> > [B] flag, or pull the unescaped version out of %{THE_REQUEST} in a\n> > rewritecond.\n> \n> Duh, I mean: $1 has captured an un-escaped\n\nThe [B] flag didn't work for me (it has no effect), but I've no idea why. I will give it some further investigation later on.\n\n%{THE_REQUEST} might work, but that's rather a workaround than a real fix.", "id": 168909, "time": "2013-07-29T14:24:20Z", "bug_id": 55323, "creation_time": "2013-07-29T14:24:20Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 55323, "text": "Ok, I think the [B] flag doesn't work because there is no way to reach the backreference code path in function do_expand in my case. From the log files I can see that the double unescaping happens while we do a variable lookup for LA-U:ENV:storage_path. The variable lookup/subrequest is triggered by function do_expand as well. Maybe it's easier to understand if you take a look at my initially posted stack trace.\n\nI think it's still ok to change the unescaping behavior in the sub request handler.", "id": 169132, "time": "2013-08-05T13:17:16Z", "creator": "simon.klinkert@gmail.com", "creation_time": "2013-08-05T13:17:16Z", "is_private": false, "attachment_id": null}]
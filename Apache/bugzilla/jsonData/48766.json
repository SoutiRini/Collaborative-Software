[{"count": 0, "tags": [], "bug_id": 48766, "attachment_id": null, "id": 134651, "time": "2010-02-18T14:29:33Z", "creator": "vhennebert@gmail.com", "creation_time": "2010-02-18T14:29:33Z", "is_private": false, "text": "The method o.a.f.fonts.Font.getKernValue expects two Unicode code points and returns the amount of kerning between the two corresponding glyphs. However, the implementation for Type 1 fonts interprets the two integers as character codes in the font's internal encoding (see o.a.f.fonts.type1.AFMFile.java). Those usually have nothing to do with Unicode code points.\n\nMoreover, trying to get kerning between two characters is inherently wrong: kerning applies to glyphs and not characters. A font may have several glyph variants for a same character, and kerning is likely to be different for each variant."}, {"count": 1, "tags": [], "bug_id": 48766, "attachment_id": 25016, "text": "Created attachment 25016\nSample FO file showing the issue\n\nThis sample file uses the Nimbus Sans L font available on most Unix systems and downloadable here:\nhttp://sourceforge.net/projects/gs-fonts/\n\nThe AFM file gives the same kerning between 'Y' and all the accented variants of the 'A' letter. Yet kerning is applied only between 'Y' and non-accented 'A'.", "id": 134652, "time": "2010-02-18T14:34:29Z", "creator": "vhennebert@gmail.com", "creation_time": "2010-02-18T14:34:29Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 48766, "text": "Created attachment 25017\nPDF result; the right borders should be aligned", "id": 134653, "time": "2010-02-18T14:35:42Z", "creator": "vhennebert@gmail.com", "creation_time": "2010-02-18T14:35:42Z", "is_private": false, "attachment_id": 25017}, {"text": "Currently, kerning only works for characters within the main single-byte encoding. The implementation uses character codes, not Unicode values, for kerning pairs. That feature didn't make the transition from a single single-byte encoding to multiple single-byte encodings. Type1Loader and especially AFMFile will probably need to be improved to support kerning for all available glyphs.", "tags": [], "bug_id": 48766, "attachment_id": null, "count": 3, "id": 134659, "time": "2010-02-18T15:15:25Z", "creator": "jeremias@apache.org", "creation_time": "2010-02-18T15:15:25Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 48766, "attachment_id": null, "id": 134662, "time": "2010-02-18T15:41:09Z", "creator": "vhennebert@gmail.com", "creation_time": "2010-02-18T15:41:09Z", "is_private": false, "text": "(In reply to comment #3)\n> Currently, kerning only works for characters within the main single-byte\n> encoding.\n\nNo, kerning doesn't work at all. Like I said the layout engine expects Unicode code points while the font uses character codes. It's only a chance if they are the same. Basically, for Adobe Standard Encoding, only the characters (and not even all) from the Basic Latin range (U+0000\u2013U+007F). Try \u201cYA\u201d vs \u201cY\u00c6\u201d, or \u201cFo\u201d vs \u201cF\u00f8\u201d (kerning should be the same). All in Nimbus Sans L's base encoding.\n\n\n> The implementation uses character codes, not Unicode values, for\n> kerning pairs. That feature didn't make the transition from a single\n> single-byte encoding to multiple single-byte encodings. Type1Loader and\n> especially AFMFile will probably need to be improved to support kerning for all\n> available glyphs."}, {"count": 5, "tags": [], "bug_id": 48766, "attachment_id": 25018, "id": 134663, "time": "2010-02-18T16:10:06Z", "creator": "jeremias@apache.org", "creation_time": "2010-02-18T16:10:06Z", "is_private": false, "text": "Created attachment 25018\nScreenshot from OpenOffice Writer\n\nI've just tested with Nimbus Sans L (V 1.05) and kerning works just fine for those combinations for which there is data in the AFM, with PDF and PS. The AFM I have doesn't have kerning info for \u201cY\u00c6\u201d or \u201cF\u00f8\u201d. Maybe you just expect characters like \"A\" and \"\u00c6\" to be equivalent, but I don't remember any mention in any of the Type1-related specs where it is listed which glyphs are interchangeable concerning kerning. Take \"AY\" and \"\u00c6Y\": this combination can definitely not be the same as the font shapes are quite different.\n\nNot even OpenOffice does this kind of kerning, not even with Arial or any other font I've checked. So IMO, it's a bit much to say it \"doesn't work at all\"."}, {"count": 6, "tags": [], "bug_id": 48766, "text": "(In reply to comment #5)\n> Created an attachment (id=25018) [details]\n> Screenshot from OpenOffice Writer\n> \n> I've just tested with Nimbus Sans L (V 1.05) and kerning works just fine for\n> those combinations for which there is data in the AFM, with PDF and PS. The AFM\n> I have doesn't have kerning info for \u201cY\u00c6\u201d or \u201cF\u00f8\u201d.\n\nThen please download the font from the link above.\n\n\n> Maybe you just expect\n> characters like \"A\" and \"\u00c6\" to be equivalent, but I don't remember any mention\n> in any of the Type1-related specs where it is listed which glyphs are\n> interchangeable concerning kerning. Take \"AY\" and \"\u00c6Y\": this combination can\n> definitely not be the same as the font shapes are quite different.\n> \n> Not even OpenOffice does this kind of kerning, not even with Arial or any other\n> font I've checked. So IMO, it's a bit much to say it \"doesn't work at all\".\n\nSo where is the code that makes the conversion between Unicode code points as provided by the layout engine and the character codes as stored in the font's kerning map?", "id": 134702, "time": "2010-02-19T15:23:57Z", "creator": "vhennebert@gmail.com", "creation_time": "2010-02-19T15:23:57Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 48766, "text": "Ah, I see, they added many more kerning pairs from version 1.05 to 1.06 of Nimbus Sans L.\n\nThe code that builds the kerning map from the AFM file is AFMFile.createXKerningMapEncoded(). So, as mentioned before, the problem is that this method is only aware of the primary single-byte encoding. I can't deal with the supplemental encodings in which characters like \"\u00c6\" will be found. You can see how the character codes are derived from the multiple encodings in SingleByteFont.mapChar()/mapUnencodedChar(). Maybe it makes sense to just keep the kerning pairs with their glyph names (rather than building the map based on character codes) and store the whole map in SingleByteFont. But that may also be a bit slower. HTH", "id": 134703, "time": "2010-02-19T15:48:02Z", "creator": "jeremias@apache.org", "creation_time": "2010-02-19T15:48:02Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 48766, "text": "resetting P2 open bugs to P3 pending further review", "id": 157569, "time": "2012-04-07T01:44:44Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:44:44Z", "is_private": false, "attachment_id": null}]
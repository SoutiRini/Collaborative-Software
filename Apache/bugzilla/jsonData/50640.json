[{"count": 0, "tags": [], "creator": "gerard-borst@hotmail.com", "text": "Created attachment 26540\nproposed patch\n\nIn my SSL Implementation for z/OS the keystore is in the RACF Database with it's own inputstream and isn't a file as is assumed in the AbstractEndpoiint class in setKeystorefile.\n\nIn my humble opinion there shouldn't be an assumption about an implementation in AbstractEndpoint. \n\nThe absolute path to the keystore is also calculated in getStore in org.apache.tomcat.util.net.jsse.JSSESocketFactory:\n\nkeyStoreFile = new File(System.getProperty(\n             Constants.CATALINA_BASE_PROP), path);\n\nIs it maybe possible to remove the calculation of the absolute path in AbstractEndpoint as I propose in my patch?", "id": 143592, "time": "2011-01-24T09:34:23Z", "bug_id": 50640, "creation_time": "2011-01-24T09:34:23Z", "is_private": false, "attachment_id": 26540}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 143721, "time": "2011-01-27T12:40:00Z", "bug_id": 50640, "creation_time": "2011-01-27T12:40:00Z", "tags": [], "text": "The keystoreFile and truststoreFile attributes are intended to point to files. Given that, converting them to an absolute path in the setters seems reasonable.\n\nWhilst the BIO JSSE implementation does double check that an absolute path has been provided, the NIO JSSE implementation does not. I am more inclined to remove the double check from the BIO implementation than I am to duplicate it in NIO."}, {"count": 2, "text": "Although I understand it won't be fixed I still will try to clarify my opinion.\n\n1. I have made an SSL implementation with a RACFInputstream. RACF is the security store on IBM z/OS and also stores the certificates.\n2. In java.security.KeyStore there isn't a reference to a file but to an InputStream\n3. Think about smart cards as a simple example.\n\nAn AbstractEndpoint shouldn't have a reference to an implementation. But if it isn't changed it is not that bad, it's just annoying and not correct.I will simply strip the path of the keyStoreFile in the implementation.", "creator": "gerard-borst@hotmail.com", "is_private": false, "id": 143833, "time": "2011-01-31T14:36:29Z", "bug_id": 50640, "creation_time": "2011-01-31T14:36:29Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 50640, "text": "You should not be re-using an attribute intended for a file for something else. Generally, that approach will make your solution fragile.\n\nI have added a test case to Tomcat 7 that demonstrates how a custom SSL implementation can use custom attributes. If you have have further questions on how to implement this, the users list is the place to ask them.", "id": 144179, "time": "2011-02-11T07:10:20Z", "creator": "markt@apache.org", "creation_time": "2011-02-11T07:10:20Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 50640, "is_private": false, "count": 4, "id": 144281, "time": "2011-02-14T23:22:34Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-02-14T23:22:34Z", "text": "(In reply to comment #3)\n> I have added a test case to Tomcat 7 that demonstrates how a custom SSL\n> implementation can use custom attributes.\n\nFor reference: that is r1069766 and the sample class is TesterBug50640SslImpl."}]
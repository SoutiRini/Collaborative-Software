[{"count": 0, "tags": [], "text": "On a heavily loaded server tomcat 5.0.30 sometimes hangs. I observed in the the\nthreads trace that almost all threads hanging like this:\n\"TP-Processor296\" daemon prio=1 tid=0x081fbe28 nid=0x13a5 waiting on condition\n[0x7720b000..0x7720b658]\n        at sun.util.calendar.ZoneInfo.getOffsets(ZoneInfo.java:215)\n        at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:2006)\n        at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:1971)\n        at java.util.Calendar.setTimeInMillis(Calendar.java:1066)\n        at java.util.GregorianCalendar.<init>(GregorianCalendar.java:576)\n        at java.util.Calendar.createCalendar(Calendar.java:968)\n        at java.util.Calendar.getInstance(Calendar.java:954)\n        at java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:503)\n        at java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:446)\n        at org.apache.coyote.tomcat5.CoyoteRequest.<init>(CoyoteRequest.java:152)\n        at\norg.apache.coyote.tomcat5.CoyoteConnector.createRequest(CoyoteConnector.java:1230)\n        at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:131)\n        at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:300)\n        at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:374)\n        at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:743)\n        at\norg.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:675)\n        at org.apache.jk.common.SocketConnection.runIt(ChannelSocket.java:866)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)\n\nI don't know why this happens, but a quick look at the source seems to reveal that \n    protected SimpleDateFormat formats[] = {\n        new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", Locale.US),\n        new SimpleDateFormat(\"EEEEEE, dd-MMM-yy HH:mm:ss zzz\", Locale.US),\n        new SimpleDateFormat(\"EEE MMMM d HH:mm:ss yyyy\", Locale.US)\n    };\nisn't used any longer in getDateHeader(), because that method uses\nFastHttpDateFormat which has its own formats[].\nIf that's the case, could you please fix it and release an update?", "attachment_id": null, "id": 84311, "creator": "boris@folgmann.de", "time": "2006-01-06T19:38:59Z", "bug_id": 38167, "creation_time": "2006-01-06T19:38:59Z", "is_private": false}, {"count": 1, "tags": [], "text": "I wouldn't hold my breath waiting for a 5.0 release.  This looks like a simple\nenough patch where you should be able to fairly easily use your own customized\nversion, and then hopefully update to a Tomcat 5.5 release if/when your time\npermits.\n\nI'm leaving the issue open without checking to verify it, I'll just believe you\nit exists.  If another developer wants to put out a 5.0.31 build, they should\nfix this.", "attachment_id": null, "id": 87944, "creator": "yoavs@computer.org", "time": "2006-04-13T18:47:37Z", "bug_id": 38167, "creation_time": "2006-04-13T18:47:37Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 38167, "attachment_id": null, "is_private": false, "id": 97231, "time": "2006-12-24T17:51:01Z", "creator": "yoavs@computer.org", "creation_time": "2006-12-24T17:51:01Z", "text": "Nearly a year later, I guess no one's interested.  I went so far as trying to\nreproduce this with a heavily loaded (stress testing) Tomcat 5.5.20 server, to\nno avail.  I hesitate to remove the protected formats[] because subclasses\n(customized extensions of Coyote by users) may be using it -- that's why it's\nprotected after all."}]
[{"count": 0, "tags": [], "bug_id": 57367, "attachment_id": 32304, "text": "Created attachment 32304\nProposed patch that implements the feature enhancement\n\nWhen you get a class loop that causes a stack overflow exception in JAR scanning, the class names are currently listed, but not the location from which each class was loaded.  If a class is unexpectedly found in more than one location (which will often be the source of this problem), then one has to search every possible JAR to figure out the root cause.\n\nIt would really help understand these problems if the location from which each class was loaded was included in the error report.\n\nI will attach a proposed patch that adds this.", "id": 179848, "time": "2014-12-18T18:39:27Z", "creator": "eddie.kuns@gmail.com", "creation_time": "2014-12-18T18:39:27Z", "is_private": false}, {"count": 1, "tags": [], "creator": "eddie.kuns@gmail.com", "is_private": false, "text": "The provided patch adds three pieces of information to the current error report:\n\n1) It adds the URL from which each class was loaded, and\n2) If the problem is a class loop, e.g., A.class extends B.class which extends A.class, then the error report will now explicitly say it's a loop.\n3) If the full list of classes is not provided, then \"->...\" is added to make it clear that the full list is too long and is not provided.\n\nWe ran into this when a JAR was in an unexpected place (and an old version of that JAR to boot).  Just knowing the classes involved isn't enough!", "id": 179850, "time": "2014-12-18T18:45:25Z", "bug_id": 57367, "creation_time": "2014-12-18T18:45:25Z", "attachment_id": null}]
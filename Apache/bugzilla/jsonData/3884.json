[{"count": 0, "tags": [], "text": "Tomcat only keeps one instance of a servlet implementing SingleThreadModel\nresulting in very low performance since all requests to the servlet are\nserialized.\n\nA pool of instances should be kept to allow multiple requests accessing\nthe same servlet simultaneously without breaking the SingleThreadModel\nsemantics.\n\nSee bug 3851 for test cases.", "is_private": false, "id": 6199, "creator": "mats.lofkvist@polopoly.com", "time": "2001-09-29T04:59:45Z", "bug_id": 3884, "creation_time": "2001-09-29T04:59:45Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Anyone who wants to propose a patch for this is welcome to do so.  It should be\nfairly localized in the org.apache.catalina.core.StandardWrapper class.\n\nIn general, IMHO, SingleThreadModel is not a good idea and should not be\nencouraged.\n", "is_private": false, "id": 6248, "creator": "craig.mcclanahan@sun.com", "time": "2001-10-01T13:10:45Z", "bug_id": 3884, "creation_time": "2001-10-01T13:10:45Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "jon@latchkey.com", "attachment_id": null, "id": 6250, "creation_time": "2001-10-01T13:40:36Z", "time": "2001-10-01T13:40:36Z", "bug_id": 3884, "text": "Also, I get my way in JSR-053, it will be deprecated in the next servlet api \nrelease.", "is_private": false}, {"count": 3, "tags": [], "bug_id": 3884, "attachment_id": null, "is_private": false, "id": 6262, "time": "2001-10-02T00:26:55Z", "creator": "mats.lofkvist@polopoly.com", "creation_time": "2001-10-02T00:26:55Z", "text": "I would appreciate if you could explain why it is not a good idea to\nuse SingleThreadModel (or point me to a reference explaining it).\n\nPlease separate arguments against the functionality (making sure\na single instance of a servlet is only used for a single request\nat a time, which I need) and the implementation (using implementation\nof an interface to declare the single thread behaviour is needed,\nwhich I don't care that much about).\n"}, {"count": 4, "tags": [], "bug_id": 3884, "attachment_id": null, "text": "NOTE:  Tomcat 4 *does* obey the spec requirements related to SingleThreadModel\n(only one request at a time per instance).  It just does not pool them.\n==============================================================================\n\nThe \"promise\" of SingleThreadModel, especially if you are a new developer that\nis unfamiliar with multithread environments, is that you don't have to worry\nabout threads at all.  But this is completely untrue if your application uses\nsessions - it is still very easy to have multiple threads talking to the same\nsession at the same time.  Consider some of the ways that this can happen:\n\n* UI with multiple frames (the browser will make simultaneous requests).\n\n* UI with dynamically created images (simultaneous requests for the same\n  reason that frames cause them).\n\n* User starts a long transaction, presses STOP, then goes somewhere else.\n\nIn each case, the expectation that the developer doesn't have to worry about\nthreads is not met.  If they don't synchronize use of their session attribute\nvariables appropriately, they are still going to have problems.\n\nIronically, pooling of SingleThreadModel instances (if it were implemented) also\nviolates another expectation that developers are used to in non-STM servlets -\nthat there is only one instance of a particular servlet per <servlet>\ndefinition.  In web apps, it is common to use instance variables to share\napplication-wide things (like connection pools and hit counters) across all\nusers of that servlet.  But this doesn't work in an STM servlet that really is\npooled.\n\nFurther, good multithreading design patterns encourage you to minimize the need\nfor locking (typically implemented with synchronization in Java) - and, when you\ndo lock, you should lock on the smallest unit that is possible.  Locking the\nentire service() method, which is what STM does, is far too heavyweight.  An\nexample of this comes from the implementation (inside Tomcat) of the HttpSession\ninterface, where you have methods like getAttribute() and setAttribute() that\nneed to lock the internal HashMap containing those attributes.  However, instead\nof synchronizing on the entire session object (which is similar to what STM does\non the entire servlet), the internal code locks *only* on the attributes\ncollection:\n\n  public void setAttribute(String name, Object value) {\n    ...\n    synchronized (attributes) {\n      ...\n      attributes.put(name, value);\n      ...\n    }\n    ...\n  }\n\nso that no other calls to the session that are happening at the same time from\nother threads (like getId() or setMaxInactiveInterval()) are affected by these\nlocks.  This approach maximizes the concurrency - and applications should use\nsimilar design patterns for similar reasons.  Otherwise, you are needlessly\nslowing down your application even if pools of STM servlets are available.\n\nFinally, there don't seem to be any compelling use cases for SingleThreadModel\nthat cannot be solved using multithread design techniques -- usually, the only\nthing you need to do is utilize local variables instead of instance variables\nfor per-request state information.  So why go to the effort of teaching people\ntwo design patterns instead of one?  \n\nI've followed mailing lists like TOMCAT-USER and SERVLET-INTEREST for several\nyears, and I have seen far too many developers code themselves into corners\nbased on mistaken assumptions about how SingleThreadModel works.  I'd rather not\nencourage it - but if someone wants to propose a patch to enable this, that's OK\ntoo (as long as it complies with the spec requirements).\n", "id": 6274, "time": "2001-10-02T08:50:31Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-10-02T08:50:31Z", "is_private": false}, {"count": 5, "tags": [], "text": "First, let me clarify that my arguments are mainly\nfor the servlet SingleThreadModel interface, the JSP\n'isThreadSafe=\"false\"' declaration I can do without.\n\n\nIt seems like you have two major arguments,\n\n1: many users don't understand how STM works and\n\n2: it doesn't solve any real problems.\n\n\nThe first one is a documentation and education problem imho.\n(Maybe removing the JSP 'isThreadSafe=\"false\"' declaration\npartially solves this problem. No doubt naming it 'isThreadSafe'\nhas contributed to the confusion.)\n\nNote also that the assumption that there exists only one instance\nof a (non-STM) servlet is broken anyway in any real world\ninstallation using more than one web server and servlet engine.\n\n\nFor the second one, we have a servlet library providing different\nkinds of functionality for JSPs using our product. The servlet\nlibrary is a small tree of classes. The functionality provided\nconsists of both methods and members. The JSPs extends a servlet\nto import the wanted functionality.\n\nSingleThreadModel is used to make this scheme work when\na servlet implements members with request specific data.\n\nThese members can be replaced with access methods, but for\nall but the most trivial cases the access method now\nneeds to store the computed information in the request scope\ninstead (this is just an optimization for read-only data,\nbut absolutely necessary for read-write data).\n\nStoring the data in members simplifies the code internally\nbut the main reason we use it is that it provides a simpler API\nfor our clients (implementing JSPs). Adding members adds\nimplicit objects that can be used directly in the JSP just as the\ndefault implicit objects ('request', 'response', 'out' etc).\nThis is a much more seamless extension of a standard JSP than\npossible with access methods.\n", "is_private": false, "id": 6302, "creator": "mats.lofkvist@polopoly.com", "time": "2001-10-03T04:59:51Z", "bug_id": 3884, "creation_time": "2001-10-03T04:59:51Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 3884, "attachment_id": null, "id": 6317, "time": "2001-10-03T09:09:30Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-10-03T09:09:30Z", "is_private": false, "text": "If you (or anyone else) would like STM pooling support added, please submit a\npatch to make it so.\n"}, {"count": 7, "tags": [], "bug_id": 3884, "attachment_id": null, "is_private": false, "id": 6331, "time": "2001-10-03T14:55:03Z", "creator": "bojan@binarix.com", "creation_time": "2001-10-03T14:55:03Z", "text": "I'll just add a bit of text from JSDK 2.0 (a.k.a. Servlet API 2.0) in regards to\nSingleThreadModel:\n\n----------------------------------\nIn essence, if the servlet implements this interface, the servlet will be thread\nsafe.\n----------------------------------\n\nI have started at around that time with JServ and life was wonderful. All I\nneeded to do was to implement SingleThreadModel and not worry about anything\nelse ever again. Right?\n\nThat's where the whole thing with SingleThreadModel is actually wrong. It gives\npeople a false promise of something that is far more complicated than\nimplementing one interface. Java already has threading support, no need to\nreinvent. After thinking about all the implications that people mentioned\nrelated to SingleThreadModel, I agree with Jon - it was a bad idea in the first\nplace (although I didn't get it for some time Jon :-) \n\nAs for pool support, let me quote JSDK 2.0 again:\n\n----------------------------------\nThis guarantee is ensured by maintaining a pool of servlet instances for each\nsuch servlet, and dispatching each service call to a free servlet.\n----------------------------------\n\nAnd compare that to Servlet API 2.2:\n\n----------------------------------\nThe servlet container can make this guarantee by synchronizing access to a\nsingle instance of the servlet, or by maintaining a pool of servlet instances\nand dispatching each new request to a free servlet.\n----------------------------------\n\nI think someone out there realized that the pool thing does not solve the actual\nproblem of thread safety, complicates the code and increases the memory usage of\nthe container, so they said: let's make it simple. It does seem like someone was\nsending a message to container providers, doesn't it?\n\nMy point here is: I also have code relying on SingleThreadModel, and I'll have\nto rewrite. But I think it's time well spent."}, {"count": 8, "tags": [], "bug_id": 3884, "attachment_id": null, "is_private": false, "id": 9448, "time": "2002-01-08T04:45:22Z", "creator": "remm@apache.org", "creation_time": "2002-01-08T04:45:22Z", "text": "Changing resolution."}, {"count": 9, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 9449, "time": "2002-01-08T04:47:15Z", "bug_id": 3884, "creation_time": "2002-01-08T04:47:15Z", "is_private": false, "text": "TC 4 (both branches) now implements an instance pool for STM."}, {"count": 10, "tags": [], "bug_id": 3884, "attachment_id": null, "id": 40949, "time": "2003-07-18T22:12:35Z", "creator": "jmm@sublogic.com", "creation_time": "2003-07-18T22:12:35Z", "is_private": false, "text": "With 4.1.24, I make a simple isThreadSafe=\"false\" jsp with only:\ntry {\n    System.out.println(\"Before sleep, instance is \"+this+\" time \nis \"+System.currentTimeMillis());\n    Thread.sleep(60*1000);\n    System.out.println(\"After sleep, instance is \"+this+\" time \nis \"+System.currentTimeMillis());\n} catch(InterruptedException ex) {}\n\n\nand at the moment, it serializes, as hitting it w/ 2 browsers leads to:\n\nBefore sleep, instance is org.apache.jsp.sleep_jsp@1b66b06 time is 1058566078026\nAfter sleep, instance is org.apache.jsp.sleep_jsp@1b66b06 time is 1058566138034\nBefore sleep, instance is org.apache.jsp.sleep_jsp@1b66b06 time is 1058566138034\nAfter sleep, instance is org.apache.jsp.sleep_jsp@1b66b06 time is 1058566198042\n"}, {"count": 11, "tags": [], "text": "What you're using is a STM JSP, which is not the same as a servlet since its\ninvoked through a non STM wrapper servlet: the JasperServlet. Pooling cannot be\nimplemented in that case (unless adding a pool in the JasperServlet itself, but\nit would be yet another horrible hack inside Jasper, so I'm -1 for it).\n\nIf you want to get the same behavior as with a regular STM servlet, you have to\nprecompile your JSP (and map it in web.xml), in which case Catalina will\nidentify your servlet as STM and pool it.\n\nI'm reverting to the old resolution.", "is_private": false, "id": 40950, "creator": "remm@apache.org", "time": "2003-07-18T22:19:53Z", "bug_id": 3884, "creation_time": "2003-07-18T22:19:53Z", "attachment_id": null}]
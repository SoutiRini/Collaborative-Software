[{"count": 0, "tags": [], "creator": "bfj@teamonline.dk", "text": "Created attachment 29775\nStacktrace\n\nThis only happends sometimes, and is hard to reproduce.\n\nAfter undeploying and deploying a webapp, sometimes the webapp show an exception at the jps's. \n\nI've traced it down to ManagerBase.java - generateSessionId() method. It looks like the sessionIdGenerator is null. \n\nAttached stacktrace", "id": 164124, "time": "2012-12-17T08:56:06Z", "bug_id": 54315, "creation_time": "2012-12-17T08:56:06Z", "is_private": false, "attachment_id": 29775}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "text": "Hmm. An NPE there means that a session manager is being used that either has not been started or has been stopped. Given it is hard to reproduce we will probably have to resort to code analysis to determine what is goin on. I have a few ideas but before I start looking harder it would be useful to have a few more details.\n\n1. Have you ever seen this issue after a normal start or is it only on a restart?\n\n2. When the NPE appears, does it happen on every request from then on or does it happen to just a few requests during the restart?\n\n3. If the answer to 2) is every request does a context restart fix it?", "id": 164301, "time": "2012-12-31T23:41:17Z", "bug_id": 54315, "creation_time": "2012-12-31T23:41:17Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "creator": "bfj@teamonline.dk", "text": "Hi Mark (and others),\n\n1. I have never seen this after startup of tomcat, only when undeploying/deploying a webapp.\n\n2. Yes, it happends on all requests.\n\n3. No, a context restart does not fix it, only a restart of the tomcat fixes it.", "id": 164312, "time": "2013-01-02T06:39:21Z", "bug_id": 54315, "creation_time": "2013-01-02T06:39:21Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I'm still not exactly sure what is going on here but it looks like something is going wrong with the undeploy. There have been some fixes related to failed undeploys since 7.0.29 so it would be helpful if you could test with 7.0.34. In the meantime, I'll keep digging.", "id": 164367, "time": "2013-01-03T21:46:29Z", "bug_id": 54315, "creation_time": "2013-01-03T21:46:29Z", "is_private": false}, {"count": 4, "tags": [], "text": "I've found and fixed one place where undeploy could go wrong (filters throwing exceptions on destroy) and I have fixed that in trunk and 7.0.x for 7.0.35.\n\nI'm not sure that is what is going on here though although it is probably something very like that. I'd expect to see something in the logs during the undeploy to indicate what has gone wrong.", "is_private": false, "bug_id": 54315, "id": 164368, "time": "2013-01-03T22:28:18Z", "creator": "markt@apache.org", "creation_time": "2013-01-03T22:28:18Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "markt@apache.org", "text": "We need to track what is going on. Please add the following to you logging.properties and then provide the section of the logs that shows the undeploy/deploy when the error occurs.\n\norg.apache.catalina.util.LifecycleBase.level = FINE\n\nNote: This will slow down Tomcat start and stop but it should have minimal impact on normal running.", "id": 164369, "time": "2013-01-03T22:45:39Z", "bug_id": 54315, "creation_time": "2013-01-03T22:45:39Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "It has been three weeks without any further information provided. If the information has not been provided by the time of the next 7.0.x release then this issue will be closed as WONTFIX.", "is_private": false, "bug_id": 54315, "id": 164863, "time": "2013-01-24T08:59:46Z", "creator": "markt@apache.org", "creation_time": "2013-01-24T08:59:46Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "(In reply to Mark Thomas from comment #6)\n> It has been three weeks without any further information provided. If the\n> information has not been provided by the time of the next 7.0.x release then\n> this issue will be closed as WONTFIX.\n\nHi,\nI have the same error and I get it quite often.\nI use Tomcat 7.0.50 on a 64 bit machine.\n\nI have this log4j properties config, if you tell me how to change it to log the error I can provide the logs.\n\n# configure the daily rolling file appender\nlog4j.rootLogger=FINE, RollingAppender\n\n# Set the priority for each package  \nlog4j.logger.org.apache.catalina.util.LifecycleBase=FINE, RollingAppender  \n\n\nlog4j.appender.RollingAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.RollingAppender.File=../logs/ApplicationWeb.log\nlog4j.appender.RollingAppender.DatePattern='.'yyyy-MM-dd\nlog4j.appender.RollingAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RollingAppender.layout.ConversionPattern=[%p] %d %c %M - %m%n\n\n\nThe staccktrace of the error I get is:\n\njava.lang.NullPointerException\n\torg.apache.catalina.session.ManagerBase.generateSessionId(ManagerBase.java:807)\n\torg.apache.catalina.session.ManagerBase.createSession(ManagerBase.java:653)\n\torg.apache.catalina.connector.Request.doGetSession(Request.java:2956)\n\torg.apache.catalina.connector.Request.getSession(Request.java:2320)\n\torg.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:899)\n\torg.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:911)\n\tcom.abovo.gc.plata.filter.AuthenticationFilter.doFilter(AuthenticationFilter.java:47)", "is_private": false, "bug_id": 54315, "id": 173513, "time": "2014-02-27T13:21:15Z", "creator": "loreattore@gmail.com", "creation_time": "2014-02-27T13:21:15Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 54315, "attachment_id": null, "id": 173514, "time": "2014-02-27T13:24:29Z", "creator": "loreattore@gmail.com", "creation_time": "2014-02-27T13:24:29Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #6)\n> It has been three weeks without any further information provided. If the\n> information has not been provided by the time of the next 7.0.x release then\n> this issue will be closed as WONTFIX.\n\nHi,\nI have the same error and I get it quite often.\nI use Tomcat 7.0.50 on a 64 bit machine.\n\nI have this log4j properties config, if you tell me how to change it to log the error I can provide the logs.\n\n# configure the daily rolling file appender\nlog4j.rootLogger=FINE, RollingAppender\n\n# Set the priority for each package  \nlog4j.logger.org.apache.catalina.util.LifecycleBase=FINE, RollingAppender  \n\n\nlog4j.appender.RollingAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.RollingAppender.File=../logs/ApplicationWeb.log\nlog4j.appender.RollingAppender.DatePattern='.'yyyy-MM-dd\nlog4j.appender.RollingAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RollingAppender.layout.ConversionPattern=[%p] %d %c %M - %m%n\n\n\nThe staccktrace of the error I get is:\n\njava.lang.NullPointerException\n\torg.apache.catalina.session.ManagerBase.generateSessionId(ManagerBase.java:807)\n\torg.apache.catalina.session.ManagerBase.createSession(ManagerBase.java:653)\n\torg.apache.catalina.connector.Request.doGetSession(Request.java:2956)\n\torg.apache.catalina.connector.Request.getSession(Request.java:2320)\n\torg.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:899)\n\torg.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:911)\n\tcom.abovo.gc.plata.filter.AuthenticationFilter.doFilter(AuthenticationFilter.java:47)"}, {"count": 9, "tags": [], "text": "It is extremely rude to add someone to a cc list for a bug without their permission. Repeat offenders will be blocked from further use of the ASF Bugzilla system.", "is_private": false, "bug_id": 54315, "id": 173516, "time": "2014-02-27T13:30:12Z", "creator": "markt@apache.org", "creation_time": "2014-02-27T13:30:12Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 54315, "attachment_id": null, "text": "This is either an application bug or a bug in com.abovo.gc.plata.filter.AuthenticationFilter that is retaining and using a reference to a request object from a previous request rather than using the request object for the current request.\n\nThis is not a bug in Apache Tomcat.\n\nFurther assistance is available from the Apache Tomcat users mailing list.", "id": 173517, "time": "2014-02-27T13:37:11Z", "creator": "markt@apache.org", "creation_time": "2014-02-27T13:37:11Z", "is_private": false}, {"count": 11, "tags": [], "creator": "loreattore@gmail.com", "attachment_id": null, "id": 173518, "time": "2014-02-27T13:47:49Z", "bug_id": 54315, "creation_time": "2014-02-27T13:47:49Z", "is_private": false, "text": "Sorry,\n\nI tought that you could be interested in the opportunity to have some debug about the presumed error.\nI will keep investigate it."}, {"count": 12, "tags": [], "text": "Lorenzo's thread on users@ for Tomcat 7.0.50:\nhttp://marc.info/?t=139351186000004&r=1&w=2\n\n\nJust some guesses\n\n1. This should not happen, because StandardWrapperValve.invoke() takes care of it.\n\nIf web application is being stopped while some requests are still being processed, Tomcat logs the following message is logged like the following:\n\n[[[\n05-Mar-2014 19:59:33.701 INFO [localhost-startStop-1] org.apache.catalina.core.StandardWrapper.unload Waiting for 1 instance(s) to be deallocated for Servlet [jsp]\n05-Mar-2014 19:59:34.701 INFO [localhost-startStop-1] org.apache.catalina.core.StandardWrapper.unload Waiting for 1 instance(s) to be deallocated for Servlet [jsp]\n]]]\n\nIf such errors are logged,\nit is explainable that other errors may follow.\n\nNote though that the messages are logged at INFO level. Sometimes logs are configured to skip those.\n\nNote that\n1) StandardContext.stopInternal() stops its wrappers (=children) before all other subcomponents\n2) The issue is reported as occurring in a filter. Invoking the filter chain is performed in StandardWrapperValve.invoke()  in between wrapper.allocate() and wrapper.deallocate() calls.  As such, it should be protected by the same allocation counter that protects the servlet that is being called here.\n\n\n2. In StandardWrapper.allocate()\nI think the following code:\n[[[\n        if (unloading)\n            throw new ServletException\n              (sm.getString(\"standardWrapper.unloading\", getName()));\n]]]\nwould better be copied inside synchronized (this) {} block below.\n\nThe 'unloading' field may change while we are waiting to get into synchronized block.  That is if there is the following sequence of events:\n\nTH1: in StandardWrapper.allocate() checks for unloading\nTH1: in StandardWrapper.allocate() waits for synchronized block\nTH2: executes StandardWrapper.unload()\nTH1: in StandardWrapper.allocate() obtains the monitor and allocates a servlet\nExpected: TH1 should not be able to allocate one, as unloading has already happened.\n\n\n3. I think the o.a.c.core.StandardContext.paused field would better be marked volatile.\n\nThe redeployment happens in background thread, but the field is read in CoyoteAdapter.postParseRequest() in a request processing thread. It might read a stale value.\n\n(It would not cause this NullPointerException as reported here. It can cause \"503 Unavailable\" response from StandardWrapperValve.invoke() or ServletException(\"standardWrapper.unloading\") from StandardWrapper.allocate()).\n\n\n4. In StandardWrapper.invoke() the check for \"if (!context.getState().isAvailable())\" is done before \"wrapper.allocate()\" call.\n\nThere is small time window between those checks.\n(It would not cause this NullPointerException as reported here. It can cause ServletException(\"standardWrapper.unloading\") from StandardWrapper.allocate()).\n\nAnyway, in this case I do not see how it could be done better.\nThe LifecycleBase.state field is already marked as 'volatile'. Asking for it twice seems like a waste. The checks in allocate() should protect here/\n\n========\n\nResume:\nfor 1.: Beware if logging is configured to skip INFO messages.\n\nOf course, if context is stopped before request processing on it completes, some things are expected to fail. Tomcat waits here, the timeout is configurable. It is a tradeoff. An infinite wait is usually undesirable.\n\nSee \"unloadDelay\" setting on Context. The default value is 2 seconds.\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/context.html\n\nfor 2. and 3.: These can be improved.\n\nfor 4.: OK, nothing to do.", "is_private": false, "bug_id": 54315, "id": 173650, "time": "2014-03-05T23:18:59Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-03-05T23:18:59Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "re 2, I don't see how this could lead to the constant NPE issue the OP reported unless deployment failed.\n\nAlso re 2, unloading would benefit from being volatile. Adding a check for unloading in loadServlet() should address the issue of allocation occurring after unloading has started.\n\n1, 3 & 4. Agreed.\n\nI have applied the robustness improvements to 8.0.x for 8.0.4 and 7.0.x for 7.0.53.\n\nI still haven't see any evidence that there is a Tomcat bug here such as an explanation of how any of the reported problems can occur that doesn't involve an application and/or library retaining a reference it shouldn't. Therefore, I am returning this bug to the invalid state.", "is_private": false, "bug_id": 54315, "id": 173683, "time": "2014-03-07T14:10:17Z", "creator": "markt@apache.org", "creation_time": "2014-03-07T14:10:17Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "Created attachment 31375\nthe logs when I get the null pointer", "is_private": false, "bug_id": 54315, "id": 173684, "time": "2014-03-07T14:25:13Z", "creator": "loreattore@gmail.com", "creation_time": "2014-03-07T14:25:13Z", "attachment_id": 31375}, {"count": 15, "tags": [], "creator": "loreattore@gmail.com", "text": "Created attachment 31376\nthe logs when the server is redeployed successfully", "id": 173685, "time": "2014-03-07T14:25:58Z", "bug_id": 54315, "creation_time": "2014-03-07T14:25:58Z", "is_private": false, "attachment_id": 31376}, {"count": 16, "attachment_id": null, "creator": "loreattore@gmail.com", "text": "I added some logs with at the INFO level.\nI hope you can gather some information from it.", "id": 173686, "time": "2014-03-07T14:26:52Z", "bug_id": 54315, "creation_time": "2014-03-07T14:26:52Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "bug_id": 54315, "is_private": false, "text": "(In reply to Mark Thomas from comment #13)\n> re 2, I don't see how this could lead to the constant NPE issue the OP\n> reported unless deployment failed.\n> \n\nI said:\n> TH1: in StandardWrapper.allocate() checks for unloading\n> TH1: in StandardWrapper.allocate() waits for synchronized block\n> TH2: executes StandardWrapper.unload()\n> TH1: in StandardWrapper.allocate() obtains the monitor and allocates a servlet\n> Expected: TH1 should not be able to allocate one, as unloading has\n> already happened.\n\nI mean that it continues this way:\n\nTH2 continues shutting down the context, as it thinks that all wrappers are unloaded and no request processing is happening at this moment.\n\nIn StandardContext.stopInternal() TH2 has done \"children[i].stop();\" and the next steps that it does are:\n\n* filterStop();\n* ((Lifecycle) manager).stop();\n\nIn ManagerBase.stopInternal() it does \"this.sessionIdGenerator = null;\".\n\n\nTH1: It goes on with request processing and encounters that the session manager has been stopped and manager.sessionIdGenerator is null.\n\nThis is just a theory, I have not tested it.", "id": 173698, "time": "2014-03-07T22:34:55Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-03-07T22:34:55Z", "attachment_id": null}, {"count": 18, "tags": [], "text": "(In reply to Konstantin Kolinko from comment #17)\n> (In reply to Mark Thomas from comment #13)\n> > re 2, I don't see how this could lead to the constant NPE issue the OP\n> > reported unless deployment failed.\n\n\n> I mean that it continues this way:\n> \n> TH2 continues shutting down the context, as it thinks that all wrappers are\n> unloaded and no request processing is happening at this moment.\n> \n> In StandardContext.stopInternal() TH2 has done \"children[i].stop();\" and the\n> next steps that it does are:\n> \n> * filterStop();\n> * ((Lifecycle) manager).stop();\n> \n> In ManagerBase.stopInternal() it does \"this.sessionIdGenerator = null;\".\n> \n> \n> TH1: It goes on with request processing and encounters that the session\n> manager has been stopped and manager.sessionIdGenerator is null.\n> \n> This is just a theory, I have not tested it.\n\nThat would explain a small number of NPEs. I don't see how it could result in all future requests resulting in NPEs as reported by the OP.", "is_private": false, "bug_id": 54315, "id": 173722, "time": "2014-03-10T09:05:51Z", "creator": "markt@apache.org", "creation_time": "2014-03-10T09:05:51Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "gerhajns@de.ina.com", "attachment_id": null, "text": "Description:\nI'm using the HSSF classes to create an index with lucene. The implementation of\nmy spider is using the URLConnection.getInputStream to read the excel data\nthrough http. The POIFSFileSystem has some problems with slow InputStream over\nhttp protocol so that the RawDataBlock class throws an exception, if the\ninputstream doesn't receive continous.\n\nPlatforms:\nThis problem occurs on all our WindowsNT/W2K workstations and servers with Java\nSDK 1.3.x/1.4.x. I'm using lucene 1.2 and POI 1.5 or POI 1.8-dev.\n\nThing about a solution:\nPlease create a wrapper around the stream.read (line 87, RawDataBlock class,\nPOI-version 1.8-dev) method so that the RawDataBlock constructor has now\nproblems with asynchronous InputStreams like HTTP-Streams.\n\nHere is my draft proposal for a solution:\n\n      public int read(byte[] bf)\n        throws IOException\n      {\n          // We had to revert to byte per byte reading to keep\n          // with slow network connections on one hand, without\n          // missing the end-of-file.\n          // THIS IS A BLOCKING BLOCK READ!!!\n          int i = 0;\n          int b = 4611;\n          while ( i < bf.length )\n          {\n              b = is.read();\n              if ( b == -1 ) \n                  break;\n              bf[i++] = (byte) b;\n          }\n          if ( i == 0 && b == -1 )\n              return -1;\n          return i;\n      }\n\nregards\nJens", "id": 24253, "time": "2002-10-10T07:41:15Z", "bug_id": 13478, "creation_time": "2002-10-10T07:41:15Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 24259, "time": "2002-10-10T11:02:38Z", "creator": "poi-support@buni.org", "creation_time": "2002-10-10T11:02:38Z", "is_private": false, "text": "Changed version to 2.0-dev as this is a feature.  Also if you're actually using\n1.5....upgrade to 1.5.1.  Glad you're doing this for Lucene.  I kept meaning to\nbut haven't gotten around to it.\n\nOkay, so why can't you use BufferedInputStream?  If that doesn't work create a\n\"BlockingInputStream\" which takes an InputStream and a timeout as input.  I'll\ncommit it to util."}, {"count": 2, "text": "This is our the complete \"BlockingInputStream\", because BufferedInputStream\ndoesn't work with our ExcelReader:\n\n\n  public class SafePOIStream\n      extends InputStream\n  {\n      protected InputStream is;\n\n      public SafePOIStream(InputStream is)\n      {\n          this.is = is;\n      }\n\n      public int available()\n        throws IOException\n      {\n          return is.available();\n      }\n\n      public void close()\n        throws IOException\n      {\n          is.close();\n      }\n\n      public void mark(int readLimit)\n      {\n          is.mark(readLimit);\n      }\n\n      public boolean markSupported()\n      {\n          return is.markSupported();\n      }\n\n      public int read()\n        throws IOException\n      {\n          return is.read();\n      }\n\n      public int read(byte[] bf)\n        throws IOException\n      {\n          // We had to revert to byte per byte reading to keep\n          // with slow network connections on one hand, without\n          // missing the end-of-file.\n          // THIS IS A BLOCKING BLOCK READ!!!\n          int i = 0;\n          int b = 4611;\n          while ( i < bf.length )\n          {\n              b = is.read();\n              if ( b == -1 ) \n                  break;\n              bf[i++] = (byte) b;\n          }\n          if ( i == 0 && b == -1 )\n              return -1;\n          return i;\n      }\n\n      public int read(byte[] bf, int s, int l)\n        throws IOException\n      {\n          return is.read(bf, s, l);\n      }\n\n      public void reset()\n        throws IOException\n      {\n          is.reset();\n      }\n\n      public long skip(long n)\n        throws IOException\n      {\n          return is.skip(n);\n      }\n    }\n", "creator": "gerhajns@de.ina.com", "attachment_id": null, "id": 24271, "time": "2002-10-10T14:09:46Z", "bug_id": 13478, "creation_time": "2002-10-10T14:09:46Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 13478, "text": "please attach it as a file (click create attachment) it is increadibly difficult\nto get files out via cut/paste from here without them being total garbage. \nPlease also attach a unit test for this.  I'd prefer it be called\nBlockingInputStream and be attached in a directory preserving archive relative\nto jakarta-poi.  the package should be org.apache.poi.util.  ", "id": 24275, "time": "2002-10-10T15:02:53Z", "creator": "poi-support@buni.org", "creation_time": "2002-10-10T15:02:53Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "Created attachment 3422\nThere is the BlockingInputStream wrapper.", "creator": "gerhajns@de.ina.com", "attachment_id": 3422, "id": 24332, "time": "2002-10-11T05:30:46Z", "bug_id": 13478, "creation_time": "2002-10-11T05:30:46Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 33364, "time": "2003-03-18T18:33:39Z", "creator": "avik@apache.org", "creation_time": "2003-03-18T18:33:39Z", "is_private": false, "text": "*** Bug 18117 has been marked as a duplicate of this bug. ***"}, {"count": 6, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 33367, "time": "2003-03-18T19:01:06Z", "creator": "avik@apache.org", "creation_time": "2003-03-18T19:01:06Z", "is_private": false, "text": "added BlockingInputStream to poi/util. "}, {"count": 7, "text": "Created attachment 5412\ntar.bz2 with patch and RawDataBlock.java", "creator": "sys@yahoo.com", "attachment_id": 5412, "id": 33369, "time": "2003-03-18T19:27:34Z", "bug_id": 13478, "creation_time": "2003-03-18T19:27:34Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 33371, "time": "2003-03-18T19:28:04Z", "creator": "sys@yahoo.com", "creation_time": "2003-03-18T19:28:04Z", "is_private": false, "text": "I disagree with the above solution.\n\nBufferedInputStream does not work because it is also not guaranteed to return\n512 bytes on each read (what RawDataBlock excepts).\n\nThe above solution remedies the situation by providing the user with an \nalternate InputStream that that guarantees it is able to return the properly \nsized block of data. The BlockingInputStream supplied, does not time out.\n\nI feel the real problem is that RawDataBlock should be more tolerant in it's \nuse of InputStreams. RawDataBlock should repeat reads until the desired chuck \nof data base been read. If too many failed reads, then RawDataBlock should \nthrow error as it does now.\n\nI have attached above my proposed solution. Patch file and RawDataBlock.java"}, {"count": 9, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 33400, "time": "2003-03-19T08:11:27Z", "creator": "nestefan@de.ina.com", "creation_time": "2003-03-19T08:11:27Z", "is_private": false, "text": "Hi, I'm a collegue of Jens. Just wanted to confirm Tonies comment:\nThe SafePOIStream is our work arround, which is enough to make POI\nwork in our project. A fix to RawDataBlock and whatever else was\nsimply beyond our work scope. For reasons I haven't figures I cannot\ndownload the attachment, is there a different way to obtain it?\nBTW the BlockingInputStream has proven to help also in other cases\nof slow input, so it might still worth to have arround."}, {"count": 10, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 33417, "time": "2003-03-19T09:09:16Z", "creator": "avik@apache.org", "creation_time": "2003-03-19T09:09:16Z", "is_private": false, "text": "I am not convinced from a \"seperation of concerns\" point of view that this\nfunctionality belongs to RawDataBlock. I would much rather have timouts etc\noutside of that class, hence my liking for a BlockingInputStream. Better to have\ntimeouts added there. \n\nI would go so far as to suggest that if this is an important issue, we should\nchange the signature of POIfs to accept a blocking input stream only. Tho this\nis an extreme suggestion, i find it cleaner than having RawDataBlock retry stuff. \n\nThoughts, folks?"}, {"count": 11, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "text": "\"A fix to RawDataBlock and whatever else was\nsimply beyond our work scope\"  - you'll go far in opensource with this attitude\n;-) -- EVERYTHING we do is beyond our work scope.", "id": 33444, "time": "2003-03-19T13:29:54Z", "bug_id": 13478, "creation_time": "2003-03-19T13:29:54Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 33445, "time": "2003-03-19T13:31:23Z", "creator": "poi-support@buni.org", "creation_time": "2003-03-19T13:31:23Z", "is_private": false, "text": "Thought:  Hope BlockingInputStream times out.  I'd rather see the changes to\nRawDataBlock than require someone to wrap every input stream.  If it should be\nrequired then it should be an alteration of RawDataBlock..."}, {"count": 13, "tags": [], "bug_id": 13478, "text": "Any other opinion on this? I'm still only half convinced, would like to hear\nopinion of others. ", "id": 33720, "time": "2003-03-24T21:44:38Z", "creator": "avik@apache.org", "creation_time": "2003-03-24T21:44:38Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "nestefan@de.ina.com", "attachment_id": null, "text": "The decision where to handle the timeout depends on how you look at\nRawDataBlock. If you really see RawDataBlock as a low level communication layer\nit should care itself, if not something else should handle the problem. \n\nSeparation of concerns is an argument, since in a high speed environment one\nmight want not use the BlockingInputStream for efficency reasons whereas over\nnet-sockets it seems to be necessary all the time. One could think of tuning\nparameters (like timeouts) which  could be made configurable on the actual speed\nof a connection.\n\nOn the other hand the guarantee to deliver 512 bytes is entirely incompatible\nwith the (documented) contract of jdk InputStream since this makes no guarantees\nhow many bytes are returned. In that respect RawDataBlock is based on a wrong\nassumption of API and should handle the problem.\n\nSee, I haven't made up my mind myself yet, just 2 Euro Cents.", "id": 33734, "time": "2003-03-25T08:27:02Z", "bug_id": 13478, "creation_time": "2003-03-25T08:27:02Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 35085, "time": "2003-04-14T04:58:29Z", "creator": "chris@sixlegs.com", "creation_time": "2003-04-14T04:58:29Z", "is_private": false, "text": "I actually just wrote about this very topic in my blog:\nhttp://sixlegs.com/blog/java/inputstreams-suck.html\n\nIn my testing I discovered this bug in POI, which I use quite a bit. I think it\nis a (severe) bug in RawDataBlock. The contract for InputStream clearly states\nthat the call may return less than the number of requested bytes. Any method\nthat needs a certain number of bytes should therefore loop until it has the\ntotal amount.\n\nI don't think performance considerations have any validity here, because:\n\na) read(byte[], int, int) blocks anyway, since it *is* guaranteed to return at\nleast one byte or -1 for end of file.\n\nb) You're not going to be doing anything useful until you finish loading the\ndata. If you are, you should be loading in a separate thread anyway (which is\nalso where you could handle timeouts).\n\nChris"}, {"count": 16, "text": "I've seen lots of comments regarding this bug but no decision yet.\nI still believe fixing RawDataBlock is the correct thing to do.\nBut perhaps we could put this to rest and get a vote or an executive decision \nby someone?\n", "creator": "sys@yahoo.com", "attachment_id": null, "id": 35445, "time": "2003-04-17T16:48:54Z", "bug_id": 13478, "creation_time": "2003-04-17T16:48:54Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "bug_id": 13478, "text": "propose a vote on the poi-dev list..  We'll vote on it (preface with [VOTE])...\nonly committer votes are binding but there is no rule about calling a vote AFAIK", "id": 35449, "time": "2003-04-17T17:04:24Z", "creator": "poi-support@buni.org", "creation_time": "2003-04-17T17:04:24Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "creator": "chris@sixlegs.com", "attachment_id": 5879, "text": "Created attachment 5879\nPatch block read functions to loop until correct amount is read, or EOF", "id": 35455, "time": "2003-04-17T17:42:21Z", "bug_id": 13478, "creation_time": "2003-04-17T17:42:21Z", "is_private": false}, {"count": 19, "tags": [], "creator": "chris@sixlegs.com", "attachment_id": null, "text": "The above patch changes DocumentBlock, HeaderBlockReader, and RawDataBlock.\nInstead of directly calling in.read(data), they now call readFully in a new\nIOUtils class. readFully simply loops, trying to read the full block of data\n(i.e. 512 bytes). I've tested the resulting jar and it solves my problems with\nslow input streams.\n\nI tried to create a testcase but I'm having trouble with the ant build. \"ant\ntest\" complains of unknown junit2 task, and \"./build.bat\" says it is missing\ncentipede-user-input.\n", "id": 35460, "time": "2003-04-17T17:50:54Z", "bug_id": 13478, "creation_time": "2003-04-17T17:50:54Z", "is_private": false}, {"count": 20, "tags": [], "creator": "dmui@apache.org", "attachment_id": null, "text": "run: \n\nbuild test\n", "id": 35465, "time": "2003-04-17T18:09:43Z", "bug_id": 13478, "creation_time": "2003-04-17T18:09:43Z", "is_private": false}, {"count": 21, "tags": [], "creator": "chris@sixlegs.com", "attachment_id": 5883, "text": "Created attachment 5883\nThanks :-) Here's a new patch with a testcase.", "id": 35466, "time": "2003-04-17T18:28:09Z", "bug_id": 13478, "creation_time": "2003-04-17T18:28:09Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 38219, "time": "2003-06-03T00:20:56Z", "creator": "chris@sixlegs.com", "creation_time": "2003-06-03T00:20:56Z", "is_private": false, "text": "*** Bug 15807 has been marked as a duplicate of this bug. ***"}, {"count": 23, "tags": [], "bug_id": 13478, "text": "why is this bug still open?\nthere's been lots of suggestions and at least 2 working patches\n\ncould someone with committer level access please select either mine or chris's \npatch and put this bug to rest? it really cant take more than 10 mins to do.", "id": 38816, "time": "2003-06-13T19:08:54Z", "creator": "sys@yahoo.com", "creation_time": "2003-06-13T19:08:54Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "text": "Explain to me why you can't just pass in a BufferedInputStream (which is blocking)?", "id": 38820, "time": "2003-06-13T19:58:59Z", "bug_id": 13478, "creation_time": "2003-06-13T19:58:59Z", "is_private": false}, {"count": 25, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 38821, "time": "2003-06-13T20:19:27Z", "creator": "chris@sixlegs.com", "creation_time": "2003-06-13T20:19:27Z", "is_private": false, "text": "BufferedInputStream is not blocking. From the javadoc:\n\n\"This iterated read continues until one of the following conditions becomes true:\n    * The specified number of bytes have been read,\n    * The read method of the underlying stream returns -1, indicating end-of-file\n    * The available method of the underlying stream returns zero, indicating\nthat further input requests would block.\"\n\nFurthermore, even if this did work, it should not be up to the user to supply a\nBufferedInputStream. The POI methods are documented as taking an InputStream,\nbut fail when given a valid (albeit \"slow\") InputStream. The fix is simple--just\nloop until you have the data you need (i.e. my patch).\n"}, {"count": 26, "tags": [], "bug_id": 13478, "text": "are you asking about BufferedInputStream or BlockingInputStream?\n\nBufferedInputStream is not guaranteed to return enough bytes to fill your \nbuffer so it will not return 512 bytes if you're using tcp/ip as input stream.\nI've tried this, it doesnt work.\n\n\nBlockingInputStream as proposed by Jens does not time out, and you yourself\n(Andrew) agreed that it is undesirable for each user to have to wrap their \ninput streams manually for RawDataBlock to work correctly. If that's required, \nthen the changes should be made to RawDataBlock\n\n\nChris's proposal actually does not time out either, but it at least \nencapsulates the problem so that the end user will not have to wrap every \ninput stream.\n\nTime out is especially important for tcp/ip streams that may be lost.\nIf you look at my patch (it's above as a tar.bz2 attachment and also inlined \nbelow), my solution attempts to read until the desired 512 bytes is available, \nbut if it finds zero data on over 100 consecutive reads, it gives up and \nreturns so that the application will not be stalled.\n\n\n\ninlined patch for my fix:\n\n\n\n\nIndex: RawDataBlock.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\npoi/src/java/org/apache/poi/poifs/storage/RawDataBlock.java,v\nretrieving revision 1.2\ndiff -u -r1.2 RawDataBlock.java\n--- RawDataBlock.java\t15 Mar 2002 02:47:56 -0000\t1.2\n+++ RawDataBlock.java\t18 Mar 2003 19:16:04 -0000\n@@ -62,18 +62,39 @@\n /**\n  * A big block created from an InputStream, holding the raw data\n  *\n- * @author Marc Johnson (mjohnson at apache dot org\n+ * @author Marc Johnson (mjohnson at apache dot org)\n+ * @author Tony Chao (sys at yahoo dot com)\n  */\n \n public class RawDataBlock\n     implements ListManagedBlock\n {\n+    /**\n+     * Number of consecutive failed reads before giving up.\n+     * (currently set to 5)\n+     */\n+    public static int  RETRY_COUNT = 5;\n+\n+    /**\n+     * Number of milliseconds to sleep before retrying a failed read.\n+     * (currently set to 100)\n+     */\n+    public static long RETRY_WAIT  = 100;\n+    \n     private byte[]  _data;\n     private boolean _eof;\n \n     /**\n-     * Constructor RawDataBlock\n-     *\n+     * Constructor RawDataBlock.\n+     * \n+     * Reads up to POIFSConstants.BIG_BLOCK_SIZE # of bytes and creates\n+     * RawDataBlock from data read. If inputstream is not ready for read\n+     * (e.g. read() returns 0), sleep briefly (RETRY_WAIT ms), and retry\n+     * up to RETRY_COUNT consecutive times. This permits using various\n+     * types of inputstreams (ServletInputStream, ByteArrayInputStream, etc)\n+     * as input, but still exits gracefully (as opposed to waiting forever)\n+     * if inputstream is unavailable.\n+     * \n      * @param stream the InputStream from which the data will be read\n      *\n      * @exception IOException on I/O errors, and if an insufficient\n@@ -84,8 +105,23 @@\n         throws IOException\n     {\n         _data = new byte[ POIFSConstants.BIG_BLOCK_SIZE ];\n-        int count = stream.read(_data);\n+        int read = stream.read(_data);\n+        int count = read;\n+        int failcount = 0;\n \n+        while (read >= 0 &&\n+               count < POIFSConstants.BIG_BLOCK_SIZE &&\n+               failcount < RETRY_COUNT)\n+        {\n+            read = stream.read(_data, count, _data.length-count);\n+            count = (read >= 0) ? (count+read) : -1;\n+            failcount = (read > 0) ? 0 : (failcount+1);\n+            if (read==0) {\n+                try {\n+                    Thread.sleep(RETRY_WAIT);\n+                } catch (InterruptedException e) {}\n+            }\n+        }\n         if (count == -1)\n         {\n             _eof = true;", "id": 38823, "time": "2003-06-13T20:30:20Z", "creator": "sys@yahoo.com", "creation_time": "2003-06-13T20:30:20Z", "is_private": false, "attachment_id": null}, {"count": 27, "text": "oops\ntypo\n\ni meant that my patch re-reads up to 5 connsecutive reads of zero\nbut waits 100 milliseconds in between each read", "creator": "sys@yahoo.com", "attachment_id": null, "id": 38824, "time": "2003-06-13T20:41:19Z", "bug_id": 13478, "creation_time": "2003-06-13T20:41:19Z", "tags": [], "is_private": false}, {"count": 28, "tags": [], "creator": "chris@sixlegs.com", "attachment_id": null, "text": "Tony, I don't think your patch is correct. It assumes that InputStream.read can\nreturn zero, and bases the retrying/timeout on that fact.\n\nInputStream.read will actually only ever return zero of that is the number of\nbytes requested. Otherwise it will return -1 (EOF), a value greater than zero (#\nbytes read), or throw an exception.\n\nI believe that in the case of an HTTP timeout your stream will return -1, or at\nleast throw an exception, so my patch should work for you (maybe you can try it).\n", "id": 38825, "time": "2003-06-13T20:42:09Z", "bug_id": 13478, "creation_time": "2003-06-13T20:42:09Z", "is_private": false}, {"count": 29, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 38827, "time": "2003-06-13T21:27:57Z", "creator": "sys@yahoo.com", "creation_time": "2003-06-13T21:27:57Z", "is_private": false, "text": "Chris:\n\nyou're correct in that according to the javadocs, InputStream.read()\nsays:\n\"If len is zero, then no bytes are read and 0 is returned; otherwise, there is \nan attempt to read at least one byte. If no byte is available because the \nstream is at end of file, the value -1 is returned; otherwise, at least one \nbyte is read and stored into b.\"\n\nhowever, the javadoc from BufferedInputStream.read() says:\n\"This iterated read continues until one of the following conditions becomes \ntrue:\n    * The specified number of bytes have been read,\n    * The read method of the underlying stream returns -1, indicating end-of-\nfile\n    * The available method of the underlying stream returns zero, indicating\nthat further input requests would block.\"\n\n\nI believe InputStream.Available() will return 0 where as InputStream.read() \nwill return >0\n\nThis would in turn imply BufferedInputStream.read() could return 0 even if \nlen!=0\n\nPerhaps you're right and the timeout loop is unncessary, but even so, my\ncode should still work at least as well as yours.\n"}, {"count": 30, "tags": [], "creator": "sys@yahoo.com", "attachment_id": null, "text": "also..to clarify\n\nmy code does NOT throw an exception if the http stream times out.\nmy code will simply give up on trying to read more and return what it was able \nto read so far.\n\n", "id": 38828, "time": "2003-06-13T21:29:59Z", "bug_id": 13478, "creation_time": "2003-06-13T21:29:59Z", "is_private": false}, {"count": 31, "tags": [], "creator": "chris@sixlegs.com", "attachment_id": null, "text": ">> I believe InputStream.Available() will return 0 where as InputStream.read() \n                       \n>> will return >0                 \n\nThis is true.                                                                     \n                                                                               \n                    \n>> This would in turn imply BufferedInputStream.read() could return 0 even if  \n                       \n>> len!=0\n\nNope, BufferedInputStream must adhere to the InputStream contract. It says it\ndoes too: \"This method implements the general contract of the corresponding read\nmethod of the InputStream class.\"\n\nThe checking of available only occures after the initial read of the underlying\nstream. The first read is done w/o checking available: \"If the first read on the\nunderlying stream returns -1 to indicate end-of-file then this method returns\n-1. Otherwise this method returns the number of bytes actually read.\"\n\nSo, it is impossible for BufferedInputStream (or any correctly implemented\nInputStream) to return zero unless len == 0.\n\nChris\n", "id": 38834, "time": "2003-06-13T21:36:25Z", "bug_id": 13478, "creation_time": "2003-06-13T21:36:25Z", "is_private": false}, {"count": 32, "tags": [], "bug_id": 13478, "text": "ok agreed.\nthen that make mine and chris's patch equivalent.\n\nwe just need a committer to make the patch and close this bug.\neither patch will do.\nhaving to manually wrap each inputStream sucks.\n\nchris has nice test classes written up.\ntake chris's.\n\nbut please make the patch and close this bug.\nthis bug has been open for too long IMO.", "id": 38835, "time": "2003-06-13T21:44:19Z", "creator": "sys@yahoo.com", "creation_time": "2003-06-13T21:44:19Z", "is_private": false, "attachment_id": null}, {"count": 33, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 38849, "time": "2003-06-13T23:11:50Z", "creator": "poi-support@buni.org", "creation_time": "2003-06-13T23:11:50Z", "is_private": false, "text": "Lets move the discussion onto the list.  I suspect most of the committers are now just \nconfused.  I know I sure as heck am."}, {"count": 34, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "text": "okay...lets apply this.  Chris convinced me.  He seems to be pretty with it.  I\nstill don't understand why BufferedInputStream doesn't work...but what do I know.", "id": 41292, "time": "2003-07-24T13:38:58Z", "bug_id": 13478, "creation_time": "2003-07-24T13:38:58Z", "is_private": false}, {"count": 35, "tags": [], "bug_id": 13478, "text": "Applied, but i need help with the testcase here. \n\nThere is one file src/testcases/org/apache/poi/poifs/filesystem/SlowInputStream.java\n\nHowever, its not a junit testcase, nor does it seem to have a main method.\nChris, can u help me here? How's one supposed to test it. \n\nAll existing tescases pass, so am keeping this in for the moment. ", "id": 41897, "time": "2003-07-31T19:45:07Z", "creator": "avik@apache.org", "creation_time": "2003-07-31T19:45:07Z", "is_private": false, "attachment_id": null}, {"count": 36, "tags": [], "bug_id": 13478, "text": "It's a helper class. In addition to the bug fix, the patch modifies one of the\nexisting testcases to use it. I'll close the bug but let me know if you need any\nmore info.", "id": 41900, "time": "2003-07-31T20:11:18Z", "creator": "chris@sixlegs.com", "creation_time": "2003-07-31T20:11:18Z", "is_private": false, "attachment_id": null}, {"count": 37, "tags": [], "creator": "avik@apache.org", "attachment_id": null, "text": "Sorry, just noticed that TestDocument.java has been patched at line 107 to read\nfrom SlowInputStream rather than ByteArrayInputStream\n\n  -        document = new POIFSDocument(\"foo\", new ByteArrayInputStream(array));\n  +        document = new POIFSDocument(\"foo\", new SlowInputStream(new\nByteArrayInputStream(array)));\n\n\nShouldnt we be testing both, rather replacing the existing test.. slightly\nconfused here :( ", "id": 41901, "time": "2003-07-31T20:13:06Z", "bug_id": 13478, "creation_time": "2003-07-31T20:13:06Z", "is_private": false}, {"count": 38, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 41902, "time": "2003-07-31T20:17:10Z", "creator": "chris@sixlegs.com", "creation_time": "2003-07-31T20:17:10Z", "is_private": false, "text": "If you want to duplicate the testcase that's fine, it just seemed like overkill\nto me. There's already plenty of tests that read in a file via\nByteArrayInputStream. Also, this will probably all be irrelevant in 3.0..."}, {"count": 39, "tags": [], "bug_id": 13478, "text": "First: My english is bad & I'm new in Java\n\nI'm working with Poi, great thing... but i have the same error now, and found \nthis bug report. I wanted to install one of this patches but i don't know how! \nI'm using:\npoi-bin-2.0-pre3-20030728\neclipse\nwin NT\n\nI can't open this files to patch the .jar file. Can someone help me? sorry for \nthis newbi question\n\ngreets\nfred", "id": 44463, "time": "2003-09-22T19:32:23Z", "creator": "xxx@jokerbase.com", "creation_time": "2003-09-22T19:32:23Z", "is_private": false, "attachment_id": null}, {"count": 40, "tags": [], "creator": "chris@sixlegs.com", "attachment_id": null, "text": "*** Bug 24211 has been marked as a duplicate of this bug. ***", "id": 46429, "time": "2003-10-29T10:22:38Z", "bug_id": 13478, "creation_time": "2003-10-29T10:22:38Z", "is_private": false}, {"count": 41, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 105183, "time": "2007-07-08T05:04:15Z", "creator": "paulk@asert.com.au", "creation_time": "2007-07-08T05:04:15Z", "is_private": false, "text": "It doesn't look like the code in RawDataBlock has been changed to cater for the\nerror mentioned here. If you are reading from a file system that happens to\ncache data in blocks of a multiple of 512, then everything will work fine - and\nthe error checking code should never be called. If you read the spreadsheet from\na jar, from a socket, from a web server stream etc., then the error handling\ncode will prematurely throw the exception. It seems the correct way to fix this\nwould be just to remove the erroneous error checking code:\n\n    public RawDataBlock(InputStream stream) throws IOException\n    {\n        _data = new byte[512];\n        int count = IOUtils.readFully(stream, _data);\n        _eof = count == -1;\n    }\n\nAnd let IOUtils do its job. Let mme know if you want this as a patch.\nTested against 3.0.1-FINAL.\n\n"}, {"count": 42, "text": "I should have added that WebTest has been shipping with a patched POI containing\nthe suggested fix in my last comment since April 2006. WebTest is in widespread\nuse, so this should have had quite a bit of testing, but I am not sure how many\nWebTest users use the Excel testing capabilities - I have personally been\ninvolved with a few but I only have exposure to a fraction of the WebTest user\nbase. We hope to be able to use a standard version of POI rather than a patched\none so that we can make WebTest deployment to a maven repository simpler.\n", "creator": "paulk@asert.com.au", "attachment_id": null, "id": 105184, "time": "2007-07-08T05:33:03Z", "bug_id": 13478, "creation_time": "2007-07-08T05:33:03Z", "tags": [], "is_private": false}, {"count": 43, "tags": [], "bug_id": 13478, "attachment_id": null, "id": 105186, "time": "2007-07-08T06:50:49Z", "creator": "poi-support@buni.org", "creation_time": "2007-07-08T06:50:49Z", "is_private": false, "text": "Please don't reopen this and/or change the release.  Instead create a new bug,\npreface it with patch and target it.  Don't tease \"if you want my patch and you\nlove me\", just attach :-).  \n\n-Andy"}]
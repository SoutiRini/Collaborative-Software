[{"count": 0, "tags": [], "text": "MemoryLeakProtection in the Tomcat wiki says: \"Sun bug 6916498 - An exception can keep a classloader in memory if the stack trace that was recorded when it was created contains a reference to one of its classes.\" This bug may be considered an acceptable performance tradeoff, so detection and mitigation in the meantime is in my opinion desirable.\n\nThe leak is caused by a reference cycle that is only partially visible to the garbage collector. The method fillInStackTrace() can be called on an Exception object to alter its stacktrace, but to effectively break the cycle the method call chain up to that point must be clean of any classes that shouldn't be retained.\n\nThe attached test code contains two versions of the algorithm, for Java 1.6 and 1.7. The 1.6 version is intended to be effective only when loaded by a shared classloader, the 1.7 version should be effective even if loaded by a webapp classloader.\n\nThe methods are intended to be called before or during webapp unloading/reloading on Exception objects stored in static variables.\n\nPlease review to see if I've made any mistakes and consider for enhancement :)", "is_private": false, "bug_id": 53935, "id": 162418, "time": "2012-09-26T15:19:40Z", "creator": "timo.kinnunen@gmail.com", "creation_time": "2012-09-26T15:19:40Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 162480, "time": "2012-10-01T08:02:24Z", "bug_id": 53935, "creation_time": "2012-10-01T08:02:24Z", "text": "\n\n*** This bug has been marked as a duplicate of bug 53936 ***"}]
[{"count": 0, "attachment_id": 21906, "bug_id": 44922, "text": "Created attachment 21906\nRewriteLog\n\nThe problem, superficially:\n\nIf multiple RewriteRules within a .htaccess file match, extra copies of PATH_INFO may accumulate at the end of the URI (depending on whether or not the substitutions include appropriate backreferences to the matched string).\n\nBecause there are many configurations that will be somehow affected by this problem, there is no simple cause and effect. I have provided one example below.\n\n\nIn more depth:\n\nThis is my best guess from looking at the mod_rewrite source.\n\nWhen using mod_rewrite in a per-directory context, r->path_info is appended to ctx->uri prior to *each* RewriteRule. If a RewriteRule does not match, this is discarded and has no effect. If a RewriteRule does match, however, the entire substitution is incorporated into r->filename.\n\nThis means that subsequent rules will get a \"tailgating\" copy of PATH_INFO. If more rules match then this can get worse.\n\nNow, each matching rule will either include (and possibly modify) the PATH_INFO portion in the substituion, or will leave it out - in either case it doesn't make sense for further rules to have it re-appended.\n\nThis is the code that does the appending:\n\n        if (r->path_info && *r->path_info) {\n            rewritelog((r, 3, ctx->perdir, \"add path info postfix: %s -> %s%s\",\n                        ctx->uri, ctx->uri, r->path_info));\n            ctx->uri = apr_pstrcat(r->pool, ctx->uri, r->path_info, NULL);\n        }\n\n(This agrees with the RewriteLog)\n\n\nTested on:\n\nLinux (multiple boxes); Apache versions 2.2.8, 2.2.3, 2.0.61\n\nI think this problem has been reported before (see http://archive.apache.org/gnats/7879 which claims it was fixed in 2.0.30... but it's still happening)\n\n\nExample:\n\nHere's an example of an affected configuration. This comes from a .htaccess file placed in DocumentRoot. It is supposed to replace all underscores in a URI with hyphens.\n\nRewriteEngine On\nRewriteBase /\nRewriteRule ^(.*)_(.*)$ $1-$2 [N]\n\nMake a request for \"/_f_o_o_\" and it will be correctly rewritten to \"/-f-o-o-\". (That's because PATH_INFO is empty.)\n\nMake a request for \"/_f_o_o_/bar\" and it will be rewritten to \"/-f-o-o-/bar/bar/bar/bar\". (That is, unless you happen to have a _f_o_o_ directory, in which case PATH_INFO will be empty and the rewriting will work as desired.)\n\nNote that there are five underscores but only four copies of PATH_INFO - this is because the first time the rule matches, appending PATH_INFO is correct behaviour because r->filename does not include it.\n\nMake a request for \"/foo/b_ar\" and an infinite loop will ensue, since every time an underscore is replaced, a new one will be appended prior to the next rule.\n\nSee the attached RewriteLog, which contains rewrite information for the first two requests.\n\nAs I have said, there are many ways to be affected by this problem - the above method may have a simple workaround, but there will be more complex cases where workarounds are difficult.\n\n\nThoughts on solution:\n\nOnce a substitution is made, PATH_INFO is essentially rendered invalid: it will contain something not consistent with the URI. It would be quite easy to set r->path_info to an empty string if any rule matched, and that should solve the problem. Otherwise, a flag could be added (to rewrite_ctx perhaps) indicating whether or not any rules have matched yet.", "id": 116138, "time": "2008-05-02T06:57:04Z", "creator": "budzynowski@gmail.com", "creation_time": "2008-05-02T06:57:04Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "budzynowski@gmail.com", "attachment_id": null, "text": "\nI know this problem is a bit tricky to get one's head around, but after three months I think it's time to make some noise again.\n\nI think the reason this bug wasn't reported ages ago is because people simply attribute it to the mysteries of mod_rewrite. But this behaviour is beyond mysterious - it's illogical and totally undocumented, and I'm certain that this behaviour was not intended by those who designed mod_rewrite.\n\nAlso, the problem only affects .htaccess files. And the people in the best position to spot and report the problem (that is, people who have a decent understanding of mod_rewrite) tend to have access to httpd.conf, and avoid .htaccess files, and so won't notice anyway.\n\n\nI really don't see any way to USE this behaviour, so correcting it shouldn't break any existing installations. It might break any workarounds that are in place (although if people were aware of the bug one hopes they would report it).\n\nFixing this bug would, I believe, significantly narrow the divide between httpd.conf and .htaccess.\n\nI'm willing to work on a fix for this myself but I really would like someone else to at least confirm the bug. It should not be hard to reproduce my example.\n\n\nA slight correction to the problem description:\n\"Note that there are five underscores but only four copies of PATH_INFO\"\nshould be\n\"Note that there are four underscores but only three superfluous copies of PATH_INFO\"\n\n\nThanks,\nAleksander Budzynowski", "id": 119238, "time": "2008-08-02T00:43:51Z", "bug_id": 44922, "creation_time": "2008-08-02T00:43:51Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 44922, "attachment_id": null, "text": "\"It's illogical and totally undocumented, and I'm certain that this\nbehaviour was not intended by those who designed mod_rewrite.\"\n\nPerhaps you misunderstood mod_rewrite, it is designed to accomplish\neverything under the multiverse ;-)  This is after all the swiss army\nknife of httpd.\n\nSeriously, commenting only so I go back and review the bug at a future date.", "id": 119239, "time": "2008-08-02T00:56:59Z", "creator": "wrowe@apache.org", "creation_time": "2008-08-02T00:56:59Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 44922, "attachment_id": null, "id": 119240, "time": "2008-08-02T03:36:05Z", "creator": "budzynowski@gmail.com", "creation_time": "2008-08-02T03:36:05Z", "is_private": false, "text": "\"This is after all the swiss army knife of httpd.\"\n\nAnd within .htaccess files it is more like a pair of plastic scissors because of this bug.\n\n\nLet me try to better explain the cause of the problem:\n\nI have only seen it happen during RewriteRules in .htaccess files. This late in the process, if the request is for a file in a non-existent directory (which I might add is the kind of situation you often want to use mod_rewrite for), the path will be split across r->filename and r->path_info.\n\nClearly the two parts need to be merged before a substitution is made. The current code does this.\n\nAfter a rule matches, the entire resultant path is saved to r->filename. This renders the contents of r->path_info invalid. However, the code does not do anything about this! If any subsequent rules match, the out-of-date r->path_info will be injected again. Herein lies the problem.\n"}, {"count": 4, "tags": [], "bug_id": 44922, "text": "(In reply to comment #3)\n> \"This is after all the swiss army knife of httpd.\"\n> \n> And within .htaccess files it is more like a pair of plastic scissors because\n> of this bug.\n\nThe behavior shouldn't be that limiting, a more careful pattern can be used to e.g. not capture PATH_INFO and re-insert it into the substitution.\n\n", "id": 119241, "time": "2008-08-02T05:14:52Z", "creator": "covener@gmail.com", "creation_time": "2008-08-02T05:14:52Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "budzynowski@gmail.com", "attachment_id": null, "id": 119307, "creation_time": "2008-08-02T16:23:59Z", "time": "2008-08-02T16:23:59Z", "bug_id": 44922, "text": "\"The behavior shouldn't be that limiting, a more careful pattern can be used to\ne.g. not capture PATH_INFO and re-insert it into the substitution.\"\n\nYou undervalue plastic scissors. But you're right in that workarounds exist.\n\nHowever, once you venture into looping territory (the N flag), these workarounds start getting ugly. You have to allow path_info to be appended just once at the start of the process.\n\n\nAnd to even do anything like that, one needs to know about this issue. It's undocumented.", "is_private": false}, {"count": 6, "tags": [], "bug_id": 44922, "attachment_id": null, "id": 119308, "time": "2008-08-02T17:28:55Z", "creator": "covener@gmail.com", "creation_time": "2008-08-02T17:28:55Z", "is_private": false, "text": "> However, once you venture into looping territory (the N flag), these\n> workarounds start getting ugly. You have to allow path_info to be appended just\n> once at the start of the process.\n\nThe N-flag isn't necessary though, right? You still get the failure in per-directory context by virtue of the per-directory running over and over until there are no changes?\n\nJust want to be sure it's not unique to the tighter loop of the N flag."}, {"count": 7, "tags": [], "bug_id": 44922, "text": "\"The N-flag isn't necessary though, right?\"\n\nNo, the N-flag only makes workarounds more complicated.\n\nThe problem happens if all these conditions are met:\n\n-in per-dir (.htaccess) context\n-PATH_INFO contains something\n-more than 1 RewriteRule matches", "id": 119309, "time": "2008-08-02T17:41:24Z", "creator": "budzynowski@gmail.com", "creation_time": "2008-08-02T17:41:24Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 44922, "attachment_id": null, "text": "This seems to be a duplicate of bug 38642\n\nYou may port the ugly patch provided there with r->notes to 2.2.9/trunk, it works at least.\n\n> I think the reason this bug wasn't reported ages ago is because people simply\n\nIt was reported in 2006.  ;-) I'll mark this bug as a dupe, because at least a patch is provided in 38642.\n\n*** This bug has been marked as a duplicate of bug 38642 ***", "id": 119822, "time": "2008-08-14T02:42:02Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2008-08-14T02:42:02Z", "is_private": false}]
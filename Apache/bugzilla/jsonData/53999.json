[{"count": 0, "text": "Hello!\n\nI would like to merge servers from Apache 2.2 to 2.4 but a deadlock that was quite rare in 2.2 makes 2.4 unusable. It is between listener_thread() in worker_mpm and at least these mod_fcgid functions: procmgr_send_spawn_cmd()/proctable_lock()/proctable_pm_lock(). In Apache 2.2 it occured only under heavy load while in 2.4 it occurs within few minutes, up to half hour after server start, even under low server load.\n\nDeadlock results in httpd process terminating itself and leaving many fcgid processes in busy state that never changes to idle. Busy processes turn into zombies after some time (possibly after process_kill_gracefully()) so process_kill_gracefully()/process_kill_force() in scan_busylist() is unable to kill them and since they are on busy list they are never collected by scan_idlelist_zombie(). The final result is full saturation of FcgidMaxProcessesPerClass limit by zombies for some VirtualHosts which in turn results in permanent 503 error until whole serwer is restarted (can be graceful).\n\nI am able to reproduce problem on machine with 2 processors by creating 5 VirtualHosts pointing to a separate Joomla installations and then executing the following test on all VirtualHosts simultaneously:\n\nab -n 10000 -c 10 vhostX/\n\nExample MPM/mod_fcgid configuration triggering deadlock:\n\n<IfModule worker.c>\n    ServerLimit                  3\n    ThreadLimit                100\n    StartServers                 1\n    MaxClients                 300\n    MinSpareThreads             50\n    MaxSpareThreads            175\n    ThreadsPerChild            100\n    MaxConnectionsPerChild  100000\n</IfModule>\n<IfModule mod_fcgid.c>\n   FcgidMaxProcesses 400\n   FcgidMinProcessesPerClass 0\n   FcgidMaxProcessesPerClass 5\n   FcgidMaxRequestsPerProcess 500\n   FcgidInitialEnv PHP_FCGI_MAX_REQUESTS 500\n   FcgidProcessLifeTime 135\n   FcgidSpawnScore 1\n   FcgidTerminationScore 1\n   FcgidTimeScore 100\n   FcgidSpawnScoreUpLimit 100\n   FcgidIOTimeout 65\n   FcgidIdleTimeout 60\n   FcgidIdleScanInterval 30\n   FcgidBusyTimeout 65\n   FcgidBusyScanInterval 60\n</IfModule>\n\nSystem: Debian 6.0.x 64 bit\nApache: 2.4.3\nmod_fcgid: SVN rev. 1397462 (bug also present in 2.3.7 and 2.3.6)\nCompilation flags: -O0 -ggdb\n\nDeadlock is usually triggered within 5 minutes after starting ab.\n\n----------[ Debug info from deadlock on the worker_mpm side ]----------\nError in logfile:\n\n[mpm_worker:emerg] [pid 13326:tid 139649122420480] (35)Resource deadlock avoided: AH00273: apr_proc_mutex_lock failed. Attempting to shutdown process gracefully.\n\nDeadlock in listener_thread() at worker.c:762:\n\n        /* We've already decremented the idle worker count inside                                                                                            \n         * ap_queue_info_wait_for_idler. */\n\n====>   if ((rv = SAFE_ACCEPT(apr_proc_mutex_lock(accept_mutex)))\n            != APR_SUCCESS) {\n\n            if (!listener_may_exit) {\n                accept_mutex_error(\"lock\", rv, process_slot);\n            }\n            break;                    /* skip the lock release */\n        }\n\nBacktrace:\n\n#0  0x00007f5003d9f45c in __pthread_kill (threadid=<value optimized out>, signo=<value optimized out>) at ../nptl/sysdeps/unix/sysv/linux/pthread_kill.c:63\n#1  0x000000000047bf64 in wakeup_listener () at worker.c:287\n#2  0x000000000047bf97 in signal_threads (mode=1) at worker.c:310\n#3  0x000000000047cd7c in accept_mutex_error (func=0x4929b8 \"lock\", rv=35, process_slot=0) at worker.c:678\n#4  0x000000000047d0b8 in listener_thread (thd=0x21ccb18, dummy=0x209b290) at worker.c:766\n#5  0x00007f5003fdbc03 in ?? () from /usr/lib/libapr-1.so.0\n#6  0x00007f5003d998ca in start_thread (arg=<value optimized out>) at pthread_create.c:300\n#7  0x00007f5003b0092d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:112\n#8  0x0000000000000000 in ?? ()\n\nLocal variables:\n\nti = 0x209b290\nprocess_slot = 0\ntpool = 0x21edb18\ncsd = 0x7f4fc4086d30\nptrans = 0x7f4fc4018a68\npollset = 0x21edb90\nrv = 35                  <=== EDEADLK\nlr = 0x1e97178\nhave_idle_worker = 1\nlast_poll_idx = 1\n\n----------[ Debug info from deadlock on the mod_fcgid side ]----------\nError in logfile:\n\n[fcgid:emerg] [pid 11624:tid 139810533033728] (35)Resource deadlock avoided: [client x.x.x.x:49337] mod_fcgid: can't get pipe mutex\n\nThere is also another one in proctable_lock()/proctable_pm_lock() but it is quite rare and I didn't get backtrace from it:\n\n[fcgid:emerg] [pid 27202:tid 140334891595520] (35)Resource deadlock avoided: [client x.x.x.x:33273] mod_fcgid: can't lock process table in pid 27202\n\nDeadlock in procmgr_send_spawn_cmd() at fcgid_pm_unix.c:467:\n\n         /* Get the global mutex before posting the request */\n====>    if ((rv = apr_global_mutex_lock(g_pipelock)) != APR_SUCCESS) {\n             ap_log_rerror(APLOG_MARK, APLOG_EMERG, rv, r,\n                           \"mod_fcgid: can't get pipe mutex\");\n             exit(0);\n         }\n\nBacktrace:\n#0  procmgr_send_spawn_cmd (command=0x7f5311e0b520, r=0x1403738) at fcgid_pm_unix.c:468\n#1  0x00007f532808082b in handle_request (r=0x1403738, role=1, cmd_conf=0x13fa380, output_brigade=0x1404f70) at fcgid_bridge.c:450\n#2  0x00007f5328081769 in bridge_request (r=0x1403738, role=1, cmd_conf=0x13fa380) at fcgid_bridge.c:765\n#3  0x00007f532807df92 in fcgid_handler (r=0x1403738) at mod_fcgid.c:290\n#4  0x000000000045662b in ap_run_handler (r=0x1403738) at config.c:169\n#5  0x0000000000456f0b in ap_invoke_handler (r=0x1403738) at config.c:432\n#6  0x0000000000473963 in ap_internal_redirect_handler (new_uri=0x1403718 \"/cgi-bin/php-fcgi/index.php\", r=0x1576880) at http_request.c:669\n#7  0x00007f53288ad394 in action_handler (r=0x1576880) at mod_actions.c:205\n#8  0x000000000045662b in ap_run_handler (r=0x1576880) at config.c:169\n#9  0x0000000000456f0b in ap_invoke_handler (r=0x1576880) at config.c:432\n#10 0x00000000004727b3 in ap_process_async_request (r=0x1576880) at http_request.c:317\n#11 0x0000000000472899 in ap_process_request (r=0x1576880) at http_request.c:363\n#12 0x000000000046ed81 in ap_process_http_sync_connection (c=0x13ef3b8) at http_core.c:190\n#13 0x000000000046ee97 in ap_process_http_connection (c=0x13ef3b8) at http_core.c:231\n#14 0x0000000000463bf2 in ap_run_process_connection (c=0x13ef3b8) at connection.c:41\n#15 0x00000000004640bf in ap_process_connection (c=0x13ef3b8, csd=0x13ef1a0) at connection.c:202\n#16 0x000000000047ca2c in process_socket (thd=0x1099478, p=0x13ef118, sock=0x13ef1a0, my_child_num=1, my_thread_num=42, bucket_alloc=0x13f1128)\n    at worker.c:620\n#17 0x000000000047d8a9 in worker_thread (thd=0x1099478, dummy=0x12056b0) at worker.c:979\n#18 0x00007f532dfc4c03 in ?? () from /usr/lib/libapr-1.so.0\n#19 0x00007f532dd828ca in start_thread (arg=<value optimized out>) at pthread_create.c:300\n#20 0x00007f532dae992d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:112\n#21 0x0000000000000000 in ?? ()\n\nLocal variables:\n\nrv = 35                <=== EDEADLK\nresult = 0\nnotifybyte = 0 '\\000'\nnbytes = 13160\n\n\nprocmgr_send_spawn_cmd() executes exit(0) on error when trying to lock mutex - shouldn't it return status code that indicates error? There is also lack of information that httpd process is actually terminated - \"mod_fcgid: can't get pipe mutex\" in logs does not look too harmful except for the emerg level.\n\nShould I fill separate bug report for busy zombies not being collected?", "bug_id": 53999, "is_private": false, "id": 162723, "time": "2012-10-13T01:30:50Z", "creator": "zerg2000-apachebug@astral.org.pl", "creation_time": "2012-10-13T01:30:50Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "zerg2000-apachebug@astral.org.pl", "attachment_id": null, "id": 167205, "time": "2013-05-14T22:40:58Z", "bug_id": 53999, "creation_time": "2013-05-14T22:40:58Z", "is_private": false, "text": "I was unable to reproduce this bug with event MPM using unencrypted connections but it is still present when using SSL, probably due to this: \"For SSL connections, this MPM will fall back to the behaviour of the worker MPM and reserve one worker thread per connection.\""}, {"count": 2, "tags": [], "bug_id": 53999, "text": "I'm unable to reproduce error on Linux 3.16.6 and Apache 2.4.10 anymore. I have received report that kernel upgrade in itself can fix this bug. Closing.", "id": 179709, "time": "2014-12-10T23:25:40Z", "creator": "zerg2000-apachebug@astral.org.pl", "creation_time": "2014-12-10T23:25:40Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 53999, "attachment_id": null, "text": "Unfortunately I am able to reproduce the problem with a Debian Jessie installation.\n\nUsing mpm_worker and mod_fcgid the following messages begin to appear in the error log under heavy load (also triggerable via ab -c15):\n\n[Mon Aug 17 15:21:13.509763 2015] [fcgid:emerg] [pid 21497:tid 139901035079424] (35)Resource deadlock avoided: [client XXX.XXX.XXX.XXX:38964] mod_fcgid: can't get pipe mutex\n[...]\n[Mon Aug 17 15:22:49.387129 2015] [fcgid:emerg] [pid 22016:tid 139900959545088] (35)Resource deadlock avoided: [client XXX.XXX.XXX.XXX:39590] mod_fcgid: can't lock process table in pid 22016\n[Mon Aug 17 15:22:53.479254 2015] [fcgid:emerg] [pid 22047:tid 139901035079424] (35)Resource deadlock avoided: [client XXX.XXX.XXX.XXX:39617] mod_fcgid: can't lock process table in pid 22047\n[...]\n\n\nAt the same time, gracefully terminated FCGI processes don't get wait()/waitpid() ed and are left in a zombie state by Apache until FcgidMaxProcessesPerClass are used up (then 503 errors).\n\nUsing mpm_event I was also able to reproduce the problem, however, the frequency was greatly reduced.\n\nThe only solution for me up to this point is using mpm_prefork, with which the error is not reproductible at all.\n\nApache version: 2.4.10\nmod_fcgid version: 2.3.9\nLinux kernel version: 3.16.7", "id": 184669, "time": "2015-08-20T14:58:44Z", "creator": "thomas@shadowweb.org", "creation_time": "2015-08-20T14:58:44Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 53999, "attachment_id": null, "id": 184944, "time": "2015-09-03T17:13:43Z", "creator": "asf-bugzilla@andreas-ziegler.de", "creation_time": "2015-09-03T17:13:43Z", "is_private": false, "text": "Unfortunately I can confirm this problem with another Debian Jessie installation.\n\nWhen using mpm_worker OR mpm_event and mod_fcgid i observed the same things as Thomas and could also resolve them by switching to mpm_prefork.\n\nApache version: 2.4.10-10+deb8u1\nmod_fcgid version: 2.3.9-1+b1\nLinux kernel version: 3.16.7-ckt11-1+deb8u3\nPHP versions: 5.6.12+dfsg-0+deb8u1, self-compiled 5.5.28, self-compiled 5.6.12"}, {"count": 5, "attachment_id": null, "creator": "peter@desk.nl", "text": "Another Debian Jessie user chiming in. I'm seeing this error too, but I'm not using mod_fcgi, but mod_fastcgi (which communicates via sockets with php-fpm):\n\n[Fri Oct 02 06:40:08.558059 2015] [mpm_worker:notice] [pid 29795:tid 140436668389248] AH00292: Apache/2.4.10 (Debian) mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_jk/1.2.37 OpenSSL/1.0.1k configured -- resuming normal operations\n[Fri Oct 02 06:40:08.558084 2015] [core:notice] [pid 29795:tid 140436668389248] AH00094: Command line: '/usr/sbin/apache2'\n[Fri Oct 02 08:06:43.819080 2015] [mpm_worker:emerg] [pid 10105:tid 140436228171520] (35)Resource deadlock avoided: AH00273: apr_proc_mutex_lock failed. Attempting to shutdown process gracefully.\n[Fri Oct 02 08:26:34.332824 2015] [mpm_worker:emerg] [pid 12883:tid 140436228171520] (35)Resource deadlock avoided: AH00273: apr_proc_mutex_lock failed. Attempting to shutdown process gracefully.\n[Fri Oct 02 10:06:00.666482 2015] [mpm_worker:emerg] [pid 25550:tid 140436228171520] (35)Resource deadlock avoided: AH00273: apr_proc_mutex_lock failed. Attempting to shutdown process gracefully.\n\nwe just switched this machine from prefork to worker to avoid an issue where mod_dbd would starve the database of connections.\n\napache2                               2.4.10-10+deb8u3\nlibapache2-mod-fastcgi                2.4.7~0910052141-1.1\nlibapache2-mod-jk                     1:1.2.37-4+deb8u1\nphp5-fpm                              5.6.13+dfsg-0+deb8u1  \nlinux-image-3.16.0-4-amd64            3.16.7-ckt11-1+deb8u4", "id": 185579, "time": "2015-10-02T09:04:13Z", "bug_id": 53999, "creation_time": "2015-10-02T09:04:13Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "did debian change to using fcntl by default? See this old thread, it seems unusable with multiple independent mutexes.\n\nhttp://mail-archives.apache.org/mod_mbox/apr-dev/200708.mbox/%3C1404e5910708190828t42013548td1a0c14d5669259d@mail.gmail.com%3E", "attachment_id": null, "bug_id": 53999, "id": 185583, "time": "2015-10-02T12:28:04Z", "creator": "covener@gmail.com", "creation_time": "2015-10-02T12:28:04Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 53999, "is_private": false, "id": 190224, "time": "2016-04-13T23:07:26Z", "creator": "hk@kapper.net", "creation_time": "2016-04-13T23:07:26Z", "tags": [], "text": "well, another debian v8.4 in this case.\n\nrecently switched for performance reasons to mpm_worker, now back to mpm_prefork for the same reason (and yet as we're on dbd too this fills up db-connections):\n\napache2                        2.4.10-10+deb8u4            amd64\napache2-mpm-worker             2.4.10-10+deb8u4            amd64\nphp5-fpm                       5.6.19+dfsg-0+deb8u1        amd64\n\nlibapache2-mod-fastcgi         2.4.7~0910052141-1.1+deb8u1 amd64\n\nKernel is a bit different: 2.6.32-44-pve\n\nany direction for debian build team to fix this would be highly appreciated.\n\nthx\nhk"}, {"count": 8, "tags": [], "creator": "thomas@shadowweb.org", "text": "@Andreas,Peter,Harald: Can you reproduce the bug with 'Mutex sem' (or a flock/pthread mutex)?\n\nNot using the default (file -> fcntl) Mutex seems to fix the issue for me, so Eric might be correct (even if the liked report seems to only mention Solaris).\n\nIf this is true, the Debian maintainer should be informed about this (and the default Mutex type should be changed to sem, pthread or flock) and this bug report may be closed.", "id": 190358, "time": "2016-04-18T16:52:41Z", "bug_id": 53999, "creation_time": "2016-04-18T16:52:41Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 53999, "text": "Thomas, we were getting the same problem, and your comment helped a lot.\n\n\"Mutex sem\" seems the solution.\n\nDid two tests in siege using this command:\nsiege -f /tmp/urls.sort1.awk.txt -i -d0 -c20 -v | grep -vE \"200   [01]\"\n\nI did only a change between first and second test: /etc/apache2/apache2.conf\n# Mutex file:${APACHE_LOCK_DIR} default   # Original config (1st Test)\nMutex sem  # (Config 2nd test)\n\n\nIn the first siege test:\nTransactions:                  32958 hits\nAvailability:                  99.43 %\nElapsed time:                 115.76 secs\nData transferred:              14.80 MB\nResponse time:                  0.07 secs\nTransaction rate:             284.71 trans/sec\nThroughput:                     0.13 MB/sec\nConcurrency:                   19.42\nSuccessful transactions:       32960\nFailed transactions:             189\nLongest transaction:            8.96\nShortest transaction:           0.00\n\nIn 115 seconds I had to stop because I got 115 PHP orphaned processes.\n\nIn the second siege test:\nTransactions:                  99533 hits\nAvailability:                  99.98 %\nElapsed time:                 292.05 secs\nData transferred:              44.50 MB\nResponse time:                  0.05 secs\nTransaction rate:             340.81 trans/sec\nThroughput:                     0.15 MB/sec\nConcurrency:                   17.80\nSuccessful transactions:       99533\nFailed transactions:              21\nLongest transaction:           29.04\nShortest transaction:           0.00\n\nAfter 5 minutes and 0 zombies and 0 orphaned processes.\n\nAs you can see it is slightly faster than the prior configuration. And 0.02% failure, which is 10x times less than before.\n\nI'm using Debian Jessie, kernel 4.4.4-xxxx-grs-ipv6-64 #7 SMP x86_64 GNU/Linux", "id": 193459, "time": "2016-09-02T06:49:42Z", "creator": "deavidsedice@gmail.com", "creation_time": "2016-09-02T06:49:42Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "text": "Just a note: if You have strange crashes/deadlocks while using \"Mutex sem\", then it might be related to semaphore arrays limit in the kernel, which is 128 by default. You can check semaphores currently used by Apache with \"ipcs -s\". Limit can be changed from 128 to e.g. 1024 using sysctl (last number is the limit):\n\nsysctl -w kernel.sem=\"250 32000 32 1024\"", "attachment_id": null, "bug_id": 53999, "id": 195373, "time": "2016-12-06T16:57:16Z", "creator": "zerg2000-apachebug@astral.org.pl", "creation_time": "2016-12-06T16:57:16Z", "is_private": false}]
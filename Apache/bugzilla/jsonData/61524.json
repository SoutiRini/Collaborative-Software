[{"count": 0, "tags": [], "bug_id": 61524, "attachment_id": null, "id": 200884, "time": "2017-09-15T12:06:22Z", "creator": "boris_petrov@live.com", "creation_time": "2017-09-15T12:06:22Z", "is_private": false, "text": "Hello, this has been happening on ALL 8.5.* versions (I've been upgrading to the newest version for a while now) and possible for a long time before that. Jersey's version is 2.25.1, Tomcat is 8.5.20. This is the stacktrace:\n\njava.lang.NullPointerException: null\n        at org.apache.coyote.http11.Http11OutputBuffer.commit(Http11OutputBuffer.java:368)\n        at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1304)\n        at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:258)\n        at org.apache.coyote.Response.action(Response.java:175)\n        at org.apache.coyote.Response.sendHeaders(Response.java:357)\n        at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:303)\n        at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:284)\n        at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118)\n        at org.glassfish.jersey.servlet.internal.ResponseWriter$NonCloseableOutputStreamWrapper.flush(ResponseWriter.java:330)\n        at org.glassfish.jersey.message.internal.CommittingOutputStream.flush(CommittingOutputStream.java:292)\n        at org.glassfish.jersey.message.internal.OutboundMessageContext.close(OutboundMessageContext.java:876)\n        at org.glassfish.jersey.server.ContainerResponse.close(ContainerResponse.java:412)\n        at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:784)\n        at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444)\n        at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434)\n        at org.glassfish.jersey.server.ServerRuntime$AsyncResponder$3.run(ServerRuntime.java:934)\n        at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)\n        at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)\n        at org.glassfish.jersey.internal.Errors.process(Errors.java:315)\n        at org.glassfish.jersey.internal.Errors.process(Errors.java:297)\n        at org.glassfish.jersey.internal.Errors.process(Errors.java:267)\n        at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)\n        at org.glassfish.jersey.server.ServerRuntime$AsyncResponder.resume(ServerRuntime.java:966)\n        at org.glassfish.jersey.server.ServerRuntime$AsyncResponder.resume(ServerRuntime.java:922)\n        at com.company.rest.Contents.lambda$getContent$3(Contents.java:146)\n        ...\n\nWhat we're doing in \"Contents.java:146\" is something like:\n\n\tEntityTag entityTag = getEntityTag(content);\n\tResponseBuilder responseBuilder = request.evaluatePreconditions(entityTag);\n\tif (responseBuilder == null) {\n\t\t// cached resource did change -> serve updated content\n\t\tresponseBuilder = createResponseBuilder(range, content).tag(entityTag);\n\t}\n\tasyncResponse.resume(responseBuilder.build());\n\nThis \"content\" thing is practically an InputStream - i.e. with this request a blob is returned. The funny thing is that this happens ALWAYS when returning \"tiff\" images. Not sure if this matters of course or if the problem isn't actually in something from our side. But anyways, this should not blow up with a NPE. :)\n\nPlease tell me if you need any more information."}, {"count": 1, "tags": [], "text": "We'll need a simple test case to reproduce the problem for this one.\n\nFrom the stack trace it looks like the async task is retaining a reference to the OutputStream after the associated AsyncContext has completed. There could be various root causes of that in both Tomcat and the app - hence the request for a test case.", "attachment_id": null, "bug_id": 61524, "id": 200889, "time": "2017-09-15T20:00:36Z", "creator": "markt@apache.org", "creation_time": "2017-09-15T20:00:36Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61524, "attachment_id": null, "id": 200931, "time": "2017-09-18T15:19:50Z", "creator": "boris_petrov@live.com", "creation_time": "2017-09-18T15:19:50Z", "is_private": false, "text": "Hello, I'm trying to reproduce it but that proves to be difficult.\n\nA few things that I noticed while trying stuff: as I said, this happens when we return \"tiff\" images as blobs. It happens when I open a simple page which has only a single <img> tag in it with the link to the tiff image. It blows up when I open this page in Chrome and Firefox. Doesn't blow up in Safari. Doesn't blow up when I hit the link to the image with curl and wget. The interesting thing is that Safari CAN display tiff images while Chrome and Firefox can't. Also, in the network tabs, it seems that the responses are smaller than the file is itself, which I guess means they didn't receive the full file. Is it possible that Chrome and Firefox are closing the connection before they receive the whole image, knowing that they can't actually display it, and that causes the NPE?\n\nI can actually debug in Eclipse the NPE (it stops there when it happens) so if I can help you somehow debug it via me... :) I could tell you values of variables, etc.\n\nI'll continue to try and create a reproduction but let's try to figure it out without that.\n\nThanks."}, {"count": 3, "tags": [], "bug_id": 61524, "attachment_id": null, "id": 201044, "time": "2017-09-21T15:02:42Z", "creator": "boris_petrov@live.com", "creation_time": "2017-09-21T15:02:42Z", "is_private": false, "text": "A little bit more info - I've updated Tomcat to 8.5.21 and Jersey to 2.26. The exception happens again. The following occurs:\n\n1) I hard-refresh the page where a tiff image is shown in an <img> tag. Nothing happens.\n\n2) I soft-refresh the page - the exception happens then. What is interesting is the request that Chrome has made - it contains a \"Range:bytes=519677-519677\" header. Our guess is that Chrome has cached the URL and \"knows\" this is an image and needs more bytes or something. We respond with \"content-length:1, content-range:bytes 519677-519677/27672280\" which causes the exception I guess.\n\nThis is the MessageBodyWriter we use:\n\n@Override\npublic void writeTo(ContentRangeProxy t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n\t\tMultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException {\n\n\ttry (InputStream inputStream = t.content.getStream()) {\n\t\tif (t.rangeHeader != null) {\n\t\t\ttry (InputStream cutInputStream = t.rangeHeader.cutStream(inputStream, t.content.getSize().getValue())) {\n\t\t\t\tByteStreams.copy(cutInputStream, entityStream);\n\t\t\t}\n\t\t} else {\n\t\t\tByteStreams.copy(inputStream, entityStream);\n\t\t}\n\t} catch (ClientAbortException exception) {\n\t\t// this is to handle the case when the HTTP connection is closed and the entityStream becomes unwritable\n\t}\n}\n\nAnd the cutStream method is implemented like so:\n\npublic InputStream cutStream(InputStream stream, Long contentLength) throws IOException {\n\tif (from != -1) {\n\t\tByteStreams.skipFully(stream, from);\n\t}\n\treturn to == -1 ?\n\t\tstream :\n\t\tByteStreams.limit(stream, contentLength == null ? ((to - from) + 1) : getContentLength(contentLength));\n}\n\nI hope this helps a bit more."}, {"count": 4, "tags": [], "text": "The issue appears also in Tomcat 9.0.1. The stacktrace:\n\njava.lang.NullPointerException: null\n    at org.apache.coyote.http11.Http11OutputBuffer.commit(Http11OutputBuffer.java:327)\n    at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1054)\n    at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:253)\n    at org.apache.coyote.Response.action(Response.java:178)\n    at org.apache.coyote.Response.sendHeaders(Response.java:376)\n    at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:280)\n    at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:261)\n    at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118)\n    at org.glassfish.jersey.servlet.internal.ResponseWriter$NonCloseableOutputStreamWrapper.flush(ResponseWriter.java:330)\n    at org.glassfish.jersey.message.internal.CommittingOutputStream.flush(CommittingOutputStream.java:287)\n    at org.glassfish.jersey.message.internal.OutboundMessageContext.close(OutboundMessageContext.java:847)\n    at org.glassfish.jersey.server.ContainerResponse.close(ContainerResponse.java:413)\n    at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:734)\n    at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:395)\n    at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:385)\n    at org.glassfish.jersey.server.ServerRuntime$AsyncResponder$3.run(ServerRuntime.java:884)\n    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)\n    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:316)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:298)\n    at org.glassfish.jersey.internal.Errors.process(Errors.java:268)\n    at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)\n    at org.glassfish.jersey.server.ServerRuntime$AsyncResponder.resume(ServerRuntime.java:916)\n    at org.glassfish.jersey.server.ServerRuntime$AsyncResponder.resume(ServerRuntime.java:872)\n    at com.company.rest.Contents.lambda$getContent$3(Contents.java:146)", "is_private": false, "id": 201263, "creator": "boris_petrov@live.com", "time": "2017-10-02T13:24:44Z", "bug_id": 61524, "creation_time": "2017-10-02T13:24:44Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "We still need a (simple) test case for this.\n\nMy analysis from comment #1 still applies.", "attachment_id": null, "bug_id": 61524, "id": 201984, "time": "2017-11-08T09:51:02Z", "creator": "markt@apache.org", "creation_time": "2017-11-08T09:51:02Z", "is_private": false}, {"count": 6, "tags": [], "text": "I spent quite some time trying to reproduce it but couldn't manage to do it in a simple test case. :( I really cannot help any more for now. If you prefer, you can close the issue and at some point, if I manage to create some reproduction, I can create a new one. Or you just leave this one open as a reminder.\n\nThanks for the time!", "is_private": false, "id": 202019, "creator": "boris_petrov@live.com", "time": "2017-11-09T10:01:48Z", "bug_id": 61524, "creation_time": "2017-11-09T10:01:48Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 61524, "attachment_id": null, "is_private": false, "id": 202036, "time": "2017-11-10T14:47:19Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-11-10T14:47:19Z", "text": "Set the following system property (if you have not set it yet):\n\norg.apache.catalina.connector.RECYCLE_FACADES=true\n\nSee the last section in https://wiki.apache.org/tomcat/FAQ/Troubleshooting_and_Diagnostics"}]
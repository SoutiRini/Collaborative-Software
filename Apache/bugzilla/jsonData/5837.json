[{"attachment_id": null, "tags": [], "creator": "sean.pritchard@ncr.com", "text": "When I attempt to use ant to build with the following project file:\n\n<project name=\"Test\u00c6\u00d8\u00c5\" default=\"CompileDBO\" \nbasedir=\"C://Teradata/TPS/generated/collaterals/Test\u00c6\u00d8\u00c5\">\n\t<property name=\"dest\" value=\"C://Teradata/TPS/generated/classes\"/>\n\t<property name=\"classpath\"  \nvalue=\"${dest};C://Teradata/TPS/generated/classes;C://Teradata/TPS/classes;C:/jb\nuilder5/jdk1.3/lib/tools.jar;;C://Teradata/TPS/lib/TPS.jar\"/>\n\n\t<target name=\"CompileDBO\">\n\t\t<javac srcdir=\".\" destdir=\"${dest}\" classpath=\"${classpath}\" \nincludes=\"**/*DBO*\"/>\n\t</target>\n</project>\n\n\nI get the following error:\n\nElement type \"project\" must be followed by either attribute specifications, \">\" \nor \"/>\".\n\n\nI invoke ant with the following code:\n\npublic static void callAnt (String command, String bFile, String lFile) throws \nCallAntException {\n        try {\n            System.setProperty\n(\"javax.xml.parsers.SAXParserFactory\", \"org.apache.xerces.jaxp.SAXParserFactoryI\nmpl\");\n            File buildFile = new File(bFile);\n            File lgFile = new File(lFile);\n            Project project = new Project();\n            project.init();\n            project.addBuildListener(createLogger(lgFile));\n            project.setUserProperty(\"ant.file\", buildFile.getAbsolutePath());\n            Class.forName(\"javax.xml.parsers.SAXParserFactory\");\n            ProjectHelper.configureProject(project, buildFile);\n            Vector targets = new Vector();\n            // make sure that we have a target to execute\n            if ((command != null) && (!command.equals(\"\"))) {\n                targets.addElement(command);\n            }\n            else {\n                targets.addElement(project.getDefaultTarget());\n            }\n            // actually do some work\n            project.executeTargets(targets); //exception occurs here\n        } catch (BuildException e) { //error handling here}\n}\n\nWhen I avoid using double-byte characters in the project file, everything works \nwithout problem.\n\nI have modified the ant code on my system as follows to correct the problem.\n\nOriginal code in org.apache.tools.ant.ProjectHelper (parse() method)\n\ninputStream = new FileInputStream(buildFile);\ninputSource = new InputSource(inputStream);\ninputSource.setSystemId(uri);\n\nmodified code:\n\ninputStream = new FileInputStream(buildFile);\ninputSource = new InputSource(new InputStreamReader(inputStream));\ninputSource.setSystemId(uri);", "count": 0, "id": 9610, "time": "2002-01-14T06:46:27Z", "bug_id": 5837, "creation_time": "2002-01-14T06:46:27Z", "is_private": false}, {"count": 1, "tags": [], "creator": "conor@apache.org", "text": "What encoding are you using? Is it UTF-8? Probably best to add your build file\nas an attachment to remove any munging by BugZilla so we can test it.", "id": 9644, "time": "2002-01-15T00:51:48Z", "bug_id": 5837, "creation_time": "2002-01-15T00:51:48Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "sean.pritchard@ncr.com", "attachment_id": 1004, "id": 9655, "time": "2002-01-15T05:39:56Z", "bug_id": 5837, "creation_time": "2002-01-15T05:39:56Z", "is_private": false, "text": "Created attachment 1004\nThe build file containing the problematic double-byte characters"}, {"attachment_id": null, "tags": [], "bug_id": 5837, "text": "We are using UTF-8 encoding.  I have experienced similar problems with JDOM's \nSaxBuilder and traced the root cause to passing an InputStream or URL in on the \nconstructor of the InputSource.  I have found that passing a Reader in on the \nInputSource constructor solves the problem in each case.", "count": 3, "id": 9656, "time": "2002-01-15T05:44:22Z", "creator": "sean.pritchard@ncr.com", "creation_time": "2002-01-15T05:44:22Z", "is_private": false}, {"count": 4, "tags": [], "text": "How are you generating your UTF-8 - it looks a bit strange to me\n\nod -t x1 -a 01_15_02\\ 05\\:39.txt\n0000000 3c 70 72 6f 6a 65 63 74 20 6e 61 6d 65 3d 22 54\n          <   p   r   o   j   e   c   t  sp   n   a   m   e   =   \"   T\n0000020 65 73 74 c6 d8 c5 22 20 64 65 66 61 75 6c 74 3d\n          e   s   t   F   X   E   \"  sp   d   e   f   a   u   l   t   =\n\n\nNote the sequence c6 d8 c5 22 - this does not look like valid UTF-8 to me\n(brushing off those rusty binary bit skills). When I load your file with jEdit,\nwhich has a UTF-8 mode, that sequence has become a single character (fffd -\nreplacement character). The quote char has been absorbed which is the source of\nthe XML parse error. Actually it is a bit strange - I would have expected a\nmalformed encoding exception. \n\nCan you check your file?", "is_private": false, "id": 9657, "creator": "conor@apache.org", "time": "2002-01-15T06:28:15Z", "bug_id": 5837, "creation_time": "2002-01-15T06:28:15Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "sean.pritchard@ncr.com", "attachment_id": 1005, "is_private": false, "id": 9659, "time": "2002-01-15T06:42:42Z", "bug_id": 5837, "creation_time": "2002-01-15T06:42:42Z", "text": "Created attachment 1005\nA second try at uploading the problematic buildfile"}, {"attachment_id": null, "tags": [], "creator": "conor@apache.org", "text": "OK, that isn't an Ant file but it also looks odd (same problem as before). It\nmay be a function of the upload process on BugZilla so I suggest you zip the\nnext one up and attach the zip\n", "count": 6, "id": 9661, "time": "2002-01-15T06:53:19Z", "bug_id": 5837, "creation_time": "2002-01-15T06:53:19Z", "is_private": false}, {"count": 7, "tags": [], "text": "Disregard the 2nd attachment (01/15/02 06:42).  It's completely the wrong file. \n\nOur UTF-8 is being generated by a guy from Denmark on a Win2000 computer set up \nfor the Danish language with a Danish keyboard.  Analyzing the characters as:\n<   p   r   o   j   e   c   t  sp   n   a   m   e   =   \"   T\ne   s   t   F   X   E   \"  sp   d   e   f   a   u   l   t   =\n\nis exactly the problem.  The project name is not \"TestFXE\"  It is \"Test\" \nfollowed by several characters whose names I do not know.  They look like a \ncapital A and E pushed together, followed by a capital O with a diagonal slash \nthrough it, followed by a capital A with a circle over it.  I agree that when \nanalyzed byte by byte, the trailing quote diappears.  I argue that when these \nare analyzed char by char using a java.io.Reader and the default encoding (UTF-\n8, I believe), the characters come out correctly.\n\nAs an example of this, you could take my first example attachment and use a \njava.io.FileInputStream to read it and the a java.io.FileOutputStream to write \nit to a new file.  Then do the same, but use a FileReader and FileWriter.  You \nwill see the Reader/Writer experiement keeps the characters intact.  Using the \nstream causes my machine to generate a \"?\" in the place of each of the extended \ncharacters.  \n\nWhen I modified the ProjectHelper class to use an InputStreamReader instead of \nan input stream, everything worked fine (see original post). ", "is_private": false, "bug_id": 5837, "id": 9662, "time": "2002-01-15T06:55:54Z", "creator": "sean.pritchard@ncr.com", "creation_time": "2002-01-15T06:55:54Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Created attachment 1006\nA zip archive containing the buildfile from the first attachment. generated with Winzip on NT4.", "is_private": false, "bug_id": 5837, "id": 9663, "time": "2002-01-15T06:57:54Z", "creator": "sean.pritchard@ncr.com", "creation_time": "2002-01-15T06:57:54Z", "attachment_id": 1006}, {"count": 9, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "id": 9664, "time": "2002-01-15T07:20:09Z", "bug_id": 5837, "creation_time": "2002-01-15T07:20:09Z", "is_private": false, "text": "The result from the zip is the same. I still feel it is not valid UTF-8\n\nGo here http://www.ietf.org/rfc/rfc2044.txt?number=2044 for the details. In\nparticular there is a section\n\n UCS-4 range (hex.)           UTF-8 octet sequence (binary)\n   0000 0000-0000 007F   0xxxxxxx\n   0000 0080-0000 07FF   110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx\n\n   0001 0000-001F FFFF   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n   0020 0000-03FF FFFF   111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n   0400 0000-7FFF FFFF   1111110x 10xxxxxx ... 10xxxxxx\n\nYou will see that the byte sequence from your file, c6 d8 c5 22, which in binary is\n\n11000110 11011000 11000101 00100010\n\nis not a valid sequence according to the above. \n\nBTW, don't worry about the FXE. The od command just cannot represent the chars\nc6 d8 c5 so it strips the high bit (FXE is 46 58 45). \n\nThe default for a Reader is not UTF-8 - it is the platform default encoding -\nsomething like Cp1252 on Windows. The squished AE thing is what you get when\nread your bytes as Cp1252. By using the reader with the default encoding you are\n bypassing the XML parser's normal default of UTF-8 (because you are feeding it\ncharacters, it assumes character decoding has been done outside parser)\n\nTry opening your reader as \n        is = new FileInputStream(inputFile);\n        reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n\nand see what happens.\n\n\n"}, {"count": 10, "tags": [], "bug_id": 5837, "attachment_id": null, "id": 9724, "time": "2002-01-18T01:12:49Z", "creator": "conor@apache.org", "creation_time": "2002-01-18T01:12:49Z", "is_private": false, "text": "I am going to close on the assumption that you are pursuing the problem\nelsewhere. Please reopen if you believe there remains any issue."}]
[{"count": 0, "tags": [], "text": "Tomcat allows to plug in Logger classes.\n\nIt could provide 2 new logger classes:\n-a Log4J logger proxy,\n-a jdk logging api logger proxy.\n\nThe parameters would be the log4j logger name, or appender if you prefer.\n\nThe catalina logger api maps almost directly to jdk log / log4j.", "is_private": false, "id": 57373, "creation_time": "2004-05-13T18:30:26Z", "time": "2004-05-13T18:30:26Z", "creator": "quartz12h@yahoo.com", "bug_id": 28961, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 28961, "attachment_id": null, "text": "this is mainly to delegate to more versatile logging systems,\nand also to work around the file logger that doesn't roll the files (risk\nrunning out of disk space).\n", "id": 57374, "time": "2004-05-13T18:32:04Z", "creator": "quartz12h@yahoo.com", "creation_time": "2004-05-13T18:32:04Z", "is_private": false}, {"count": 2, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "id": 58145, "time": "2004-05-26T17:14:12Z", "bug_id": 28961, "creation_time": "2004-05-26T17:14:12Z", "is_private": false, "text": "Most of tomcat already uses commons-logging and is configurable as such.  We \nplan to gradually migrate away from the Logger elements and into commons-\nlogging: this migration is ongoing.\n\nWe have been advising and continue to advise application developers to not rely \non Tomcat's Loggers, but to code to a logging framework like log4j or commons-\nlogging.\n\nIn addition, Tomcat does roll over its Logger log files, and provides the \nswallowOutput attribute to direct System.out/System.err logs into the rolled-\nover Logger destinations.  This prevents catalina.out from growing for \napplications that use System.out/System.err, which is not a recommended \npractice.\n\nSo given all those, I'm marking this request as WONTFIX, because no \nenhancements will be done on Tomcat's Loggers.\n"}, {"count": 3, "tags": [], "text": "From what I observed, it only changes filename every day, but doesn't deleted\nolder ones. If so, what is the rolling policy?\n-size? what size?\n-time? what duration?\n-number of files? how many?\n", "is_private": false, "id": 58152, "creation_time": "2004-05-26T19:27:38Z", "time": "2004-05-26T19:27:38Z", "creator": "quartz12h@yahoo.com", "bug_id": 28961, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "quartz12h@yahoo.com", "is_private": false, "count": 4, "id": 58153, "time": "2004-05-26T19:32:44Z", "bug_id": 28961, "creation_time": "2004-05-26T19:32:44Z", "text": "i have just looked at FileLogger in both 4.1.29 and 5.0.24.\nNone of them has rolling logic. They just close/open new file if current date\nchanged.\n"}, {"count": 5, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "is_private": false, "id": 58156, "time": "2004-05-26T19:43:13Z", "bug_id": 28961, "creation_time": "2004-05-26T19:43:13Z", "text": "That IS the rolling logic: date-based only.  Not number of files, not file \nsize.  If you don't need files older than today you can delete them.\n\nIt's simple: no new enhancements will be done on the Loggers.  I'm closing this \nitem again, hopefully for good, and I'm really starting to understand and \nsympathize more with Remy ;)"}, {"count": 6, "tags": [], "text": "System integrators consider this RFE seriously.\n\nPlease take your time to fully understand the consequence and do not discard the\nidea because the singular piece of code you seam to focus on will not be\nupdated. You are free to carry this RFE to the most up to date logging framework\ncatalina intent to use, but in the mean time, tomcat 5.0.24 user do not have\naccess to those updates.\n\nYou effectively said to every tomcat users, that they must start writing\nscripts, or task, or cron jobs, or logrotate setup, or background thread in a\nmonitoring servlet, that will monitor a file system for logs and delete older\nones manually. This is a waste of energy, as the logger itself can do a simple\ncheck, as it is already aware of every log details.\n\n\"Rolling\" implies the concept of circular buffer and means that the size of the\nstorage is finite.\n\nYou can't affrim your logs rotate unless you guaranty the log storage won't\nexceed a prescribes size, time or filecount.\n\nYou logger barely \"shifts\" files, which is just a convenient implementation\nchoice, but doesn't fulfill the \"rolling\" requirements.\n\nThe lack of this feature makes it difficult for system integrators to deploy\napps without having to worry about badly behaving loggers that effectively leaks\non hard disk.\n\nThanks for reconsidering this request.\n\nNote: I don't get that Remy thing you are refering to, but remember that\neveryone hears a voice when they read, and that voice is reflecting the mood and\nattitude of the reader. I don't know how my texts were interpreted, but I mostly\n push non-objectively when thing really don't make sense. That should ring a\nbell to you guys, that there is something serious going on, and not just a\nstupid guys personnal favor. I don't have time to waste on simple things. So if\nyou feel I'm harsh, I feel you are not very understanding at the same time, so\nwhy don't we read each other in a perfectly objective way, sifting only the core\nmessage. \n\nThanks.\n", "is_private": false, "bug_id": 28961, "id": 58207, "time": "2004-05-27T14:48:49Z", "creator": "quartz12h@yahoo.com", "creation_time": "2004-05-27T14:48:49Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 28961, "attachment_id": null, "id": 58344, "creation_time": "2004-05-28T18:09:32Z", "time": "2004-05-28T18:09:32Z", "creator": "yoavs@computer.org", "text": "The Remy I'm referring to is Remy Maucherat, another Tomcat developer.  Please \nignore that reference, though, as it is too long to explain and not a big deal \nanyways ;)\n\nI understand that to you rolling implies also deleting files as configured by \nthe deployer/integrator/administrator.  My concept of rolling is different, and \nincludes only the rolling itself, not removal or archival of any kind.  Those \nare separate concerns which merit separate policies, as we're doing for example \nin log4j 1.3.  \n\nSo yes, we ARE saying to tomcat deployers / integrators / administrators that \nthey're responsible for assuring their server logs don't run out of space.  \nJust like we tell application developers on the tomcat-user list to NOT use the \nLoggers, and use a logging toolkit like log4j if at all possible, because of \nthe enhanced features those toolkits provides.\n\nThough Loggers are required by the Servlet Specification, not even simple \nrolling is required, and so tomcat would be perfectly in line to just dump all \noutput to System.out.\n\nThat said, I can see the value in log4j/java.util.logging proxies, so if you \nsubmit code for them, I'll be glad to review/comment/commit it as needed.\n", "is_private": false}, {"count": 8, "tags": [], "text": "Precision:\n\nWe don't log to tomcat, we don't use tomcat nor servlet loggers.\nWe don't even write to system out. We do use log4j since the beginning.\n\nBut tomcat is logging by itself. And we want it to log whatever goes wrong with\nit. Only we can't tell it to \"roll-and-delete\".\n\nHope this makes more sense now.", "is_private": false, "id": 58360, "creation_time": "2004-05-28T22:21:25Z", "time": "2004-05-28T22:21:25Z", "creator": "quartz12h@yahoo.com", "bug_id": 28961, "attachment_id": null}, {"count": 9, "tags": [], "creator": "quartz12h@yahoo.com", "attachment_id": null, "is_private": false, "id": 58362, "time": "2004-05-28T23:38:32Z", "bug_id": 28961, "creation_time": "2004-05-28T23:38:32Z", "text": "package company.util;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\n\nimport org.apache.catalina.Container;\nimport org.apache.catalina.Logger;\n\n/**\n * in logging properties:\n * \n * log4j.category.tomcatlog=INFO, tomcat\n * \n * log4j.appender.tomcat=org.apache.log4j.RollingFileAppender\n * log4j.appender.tomcat.MaxFileSize=1000KB\n * log4j.appender.tomcat.MaxBackupIndex=9\n * log4j.appender.tomcat.Append=true\n * log4j.appender.tomcat.File=tomcat.log\n * log4j.appender.tomcat.layout=org.apache.log4j.PatternLayout\n * log4j.appender.tomcat.layout.ConversionPattern=%d %-5p [%t] %c - %m%n\n * \n * \n * In server.xml:\n * \n * <Logger verbosity=\"4\" className=\"company.util.Log4JLogger\"\nlog4JLoggerName=\"tomcatlog\"/>\n *\n * Drop log4j jar in tomcat's common/lib\n * \n * Drop this Log4JLogger class under proper tree under server/classes\n * \n */\npublic class Log4JLogger implements Logger {\n\n\tstatic final String info = Log4JLogger.class.getName()+\"/1.0\";\n\t\n\tPropertyChangeSupport support = new PropertyChangeSupport(this);\n\tContainer container = null;\n\tint debug = 0;\n\tint verbosity = ERROR;\n\tString loggerName;\n\t\n\torg.apache.log4j.Logger log4jLogger = null;\n\t\n\t\n\tpublic Log4JLogger() {\n\t\tlog4jLogger = org.apache.log4j.Logger.getLogger(Log4JLogger.class);\n\t}\n\t\n\tpublic void setLog4JLoggerName(String loggerName) {\n\t\tif(loggerName!=null) {\n\t\t\torg.apache.log4j.Logger l = org.apache.log4j.Logger.getLogger(loggerName);\n\t\t\tif(l!=null) {\n\t\t\t\tlog4jLogger = l;\n\t\t\t\tthis.loggerName = loggerName;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.loggerName = null;\n\t\t\tlog4jLogger = org.apache.log4j.Logger.getLogger(Log4JLogger.class);\n\t\t}\n\t}\n\t\n\tpublic String getLog4JLoggerName() {\n\t\treturn loggerName;\n\t}\n\t\n\t//----------\n\t\n\tpublic void log(Exception exception, String msg) {\n\t\tlog4jLogger.error(msg, exception);\n\t}\n\t\n\tpublic void log(String message, int verbosity) {\n\t\tif (this.verbosity >= verbosity) {\n\t\t\tswitch(verbosity) {\n\t\t\t\tcase FATAL: log4jLogger.fatal(message); break;\n\t\t\t\tcase ERROR: log4jLogger.error(message); break;\n\t\t\t\tcase WARNING: log4jLogger.warn(message); break;\n\t\t\t\tcase INFORMATION: log4jLogger.info(message); break;\n\t\t\t\tcase DEBUG: log4jLogger.debug(message); break;\n\t\t\t}\n\t\t}\n\t}\n\tpublic void log(String message, Throwable throwable, int verbosity) {\n\t\tif (this.verbosity >= verbosity) {\n\t\t\tswitch(verbosity) {\n\t\t\t\tcase FATAL: log4jLogger.fatal(message, throwable); break;\n\t\t\t\tcase ERROR: log4jLogger.error(message, throwable); break;\n\t\t\t\tcase WARNING: log4jLogger.warn(message, throwable); break;\n\t\t\t\tcase INFORMATION: log4jLogger.info(message, throwable); break;\n\t\t\t\tcase DEBUG: log4jLogger.debug(message, throwable); break;\n\t\t\t}\n\t\t}\n\t}\n\tpublic void log(String message, Throwable throwable) {\n\t\tlog4jLogger.error(message, throwable);\n\t}\n\t\n\tpublic void log(String message) {\n\t\tlog4jLogger.info(message);\n\t}\n\t\n\t//----------\n\t\n\tpublic Container getContainer() {\n\t\treturn (container);\n\t}\n\t\n\tpublic void setContainer(Container container) {\n\t\tContainer oldContainer = this.container;\n\t\tthis.container = container;\n\t\tsupport.firePropertyChange(\"container\", oldContainer, this.container);\n\t}\n\n\t\n\tpublic String getInfo() {\n\t\treturn (info);\n\t}\n\n\tpublic int getVerbosity() {\n\t\treturn (this.verbosity);\n\t}\n\n\tpublic void setVerbosity(int verbosity) {\n\t\tthis.verbosity = verbosity;\n\t}\n\t\n\tpublic void addPropertyChangeListener(PropertyChangeListener listener) {\n\t\tsupport.addPropertyChangeListener(listener);\n\t}\n\n\tpublic void removePropertyChangeListener(PropertyChangeListener listener) {\n\t\tsupport.removePropertyChangeListener(listener);\n\t}\n}\n\n"}, {"count": 10, "tags": [], "bug_id": 28961, "attachment_id": null, "text": "If you have specific requirements, you'll have to write custom code. If you want\nto submit it for inclusion later, it's fine, but I don't see any huge interest\nat this time to reinvent log4j features (esp since we'll likely get rid of them\nsoon after).", "id": 58383, "time": "2004-05-29T17:07:44Z", "creator": "remm@apache.org", "creation_time": "2004-05-29T17:07:44Z", "is_private": false}, {"count": 11, "text": "Yoav suggested I send code. I did.\nPlease let him deal with this RFE, now that we understand each other.\n\nOf all the replies I got, none of them helps fixing the problem.\nI understand that the whole logging thing as evolved.\n\nBut as long as there is any kind of logging, no matter how it is done,\nif it doesn't have a roll-delete size limiting feature, I will sustain this RFE.\n\nI'm more than curious to know how the \"new\" logging schema is done so I could\nadapt. But in the mean time, I took time to give you a full and simple solution\nand I hope  you will consider it.\n\nI'm glad to hear you will use common logging or log4j, but you must tell us how\nto set tomcat to log there. If tomcat loggers do not roll-delete and you won't\nfix it, I get it.\n\nBut Yoav seams interrested in this new Log4JLogger. Just insert it catalina.jar\nand add log4j to server/lib.\n\nOr just write an alternate version for appache common logging, as long as it\nroll-delete.\n\nThanks.", "bug_id": 28961, "attachment_id": null, "id": 58384, "time": "2004-05-29T18:39:01Z", "creator": "quartz12h@yahoo.com", "creation_time": "2004-05-29T18:39:01Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 58385, "time": "2004-05-29T18:48:37Z", "bug_id": 28961, "creation_time": "2004-05-29T18:48:37Z", "is_private": false, "text": "Obviously, we \"must not\" nothing. We do not owe you anything.\nAs I've said, the loggers will be refactored in favor of using commons-logging\n(with any provider it supports), but not in the current branch."}, {"count": 13, "tags": [], "bug_id": 28961, "attachment_id": null, "id": 58392, "creation_time": "2004-05-29T21:27:33Z", "time": "2004-05-29T21:27:33Z", "creator": "quartz12h@yahoo.com", "text": "Please read\nhttp://bugzilla.mozilla.org/page.cgi?id=etiquette.html", "is_private": false}]
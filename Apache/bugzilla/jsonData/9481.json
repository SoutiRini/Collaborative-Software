[{"count": 0, "tags": [], "bug_id": 9481, "attachment_id": null, "id": 16853, "time": "2002-05-29T06:47:54Z", "creator": "jani.kaarela@accenture.com", "creation_time": "2002-05-29T06:47:54Z", "is_private": false, "text": "Add a \"prefix\" attribute to ExpandProperties filter to allow limiting expansion \nto certain properties. For example \"<expandproperties prefix=\"foo\" />\" would \nonly expand properties beginning with \"foo.\"."}, {"count": 1, "tags": [], "bug_id": 9481, "attachment_id": 1962, "is_private": false, "id": 16854, "time": "2002-05-29T06:49:55Z", "creator": "jani.kaarela@accenture.com", "creation_time": "2002-05-29T06:49:55Z", "text": "Created attachment 1962\nA quick fix, probably needs further refining."}, {"attachment_id": null, "tags": [], "bug_id": 9481, "is_private": false, "count": 2, "id": 16866, "time": "2002-05-29T10:43:39Z", "creator": "umagesh@apache.org", "creation_time": "2002-05-29T10:43:39Z", "text": "A few questions just so it gets documented here:\n1.  Use case for limiting expansion of certain properties?\n2.  How to limit expansion of multiple \"prefixes\"?\n3.  Typically prefix has been associated with introduction of a prefix to the\n    property being used.  So, a better syntax IMO may be:\n    <expandproperties>\n      <include startswith=\"foo\"/>\n      <!-- and possibly -->\n      <exclude startswith=\"foobar\"/>\n    </expandproperties>\nSince this is an enhancement request, this will be tackled only in 1.6Alpha.\n"}, {"count": 3, "tags": [], "bug_id": 9481, "is_private": false, "id": 16867, "attachment_id": null, "creator": "jani.kaarela@accenture.com", "creation_time": "2002-05-29T11:12:24Z", "time": "2002-05-29T11:12:24Z", "text": "1. I bet you don't mean \"case\" as in \"uppercase\" and \"lowercase\". ;) The \nparticular use case I've encountered is Java policy files, which can and often \ndo contain system properties (which I'm not familiar with enough, as \ndemonstrated by my previous comment to bug #5842 - thanks for the ${user.dir} \ntip, Stefan). I do not want the system properties to be expanded, since I'm not \nnecessarily going to run my app on the same platform I'm building it on. Also, \nUnix shell scripts could also be using ${} constructs which may coincidentally \ncontain user/system properties and thus be accidentally expanded.\n\n2. Umm, I didn't understand your question. You mean that multiple \nprefix-attributes (well, they'd be nested elements, then) should be allowed and \nthe properties expanded?\n\n3. I actually ment it to be used similarly to \"prefix\" attribute on properties, \nafter all we are expanding properties here. In my particular use case, I've read \nplatform dependent properties from a file and want to read them again (possibly \nfrom another file) and assign them a prefix, and then expand the prefixed \nproperties (and ONLY the prefixed properties in order to not mess up a policy \nfile and shell scripts) in my \"template files\".\n"}, {"count": 4, "text": "3. Well, you DO have a point now that I think of it, but <echoproperties> does \nalready use prefix for filtering, so the consistent attribute naming you're \nprobably after has already been kind of broken.\n", "creator": "jani.kaarela@accenture.com", "attachment_id": null, "id": 16868, "time": "2002-05-29T11:19:39Z", "bug_id": 9481, "creation_time": "2002-05-29T11:19:39Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "umagesh@apache.org", "attachment_id": null, "id": 16869, "time": "2002-05-29T11:22:08Z", "bug_id": 9481, "creation_time": "2002-05-29T11:22:08Z", "is_private": false, "text": "I didn't doubt that you would have taken the trouble to write the code without\na need fo rit ;-)  I just wanted it written in here so that we realize why this\nenhancement is being requested...\n\nBy multiple prefixes, I mean the following:  say, the user wants to limit all\nproperties that begin with 'user' as well as 'system' from expansion.  Having it\nas an attribute with comma-spearated values will not be very nice.  Instead we\nwould need nested elements.  On the same lines, let us say, I want to limit\nexpansion of all properties that begin with 'user', but not necessarily the\nones that begin with 'user.ant', then <include>, <exclude> elements might be \nnice.\n\nThe only reservation I have with 'prefix' it is not generic enough - for \nexample, I may want to limit expansion of all properties that 'contain' the\nstring 'user.dir'... in which case my example would be written as <include\ncontains=\"user.dir\"/>\n\nWith regards to <echoproperties> and consistency, you have a point there ;-)"}, {"attachment_id": null, "tags": [], "creator": "jani.kaarela@accenture.com", "is_private": false, "count": 6, "id": 18101, "time": "2002-06-19T20:33:20Z", "bug_id": 9481, "creation_time": "2002-06-19T20:33:20Z", "text": "Umh, I guess I'll code the changes discussed here.\n"}, {"count": 7, "text": "Damnit, didn't intend to assign this to ant-dev, lets see if I can assign it to \nmyself...", "creator": "jani.kaarela@accenture.com", "attachment_id": null, "id": 18129, "time": "2002-06-20T08:39:26Z", "bug_id": 9481, "creation_time": "2002-06-20T08:39:26Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 9481, "attachment_id": null, "id": 18130, "time": "2002-06-20T08:47:26Z", "creator": "jani.kaarela@accenture.com", "creation_time": "2002-06-20T08:47:26Z", "is_private": false, "text": "I don't grok this... I bet this gets assigned to ant-dev if I try to change \nstatus to ASSIGNED - it's quite odd to have the Assigned To -entry show that \nthis is assigned to me but not have the status show ASSIGNED... Gentle(wo)men, \nplace your bets, I'm giving that inviting \"Accept bug\" dial a try.\n\n(Magesh or someone, anyone - say something, this is starting to seem as if I \nhave a few bolts loose and talk to myself!)\n"}, {"count": 9, "tags": [], "bug_id": 9481, "attachment_id": null, "text": "Anyone willing to comment on the preferred format:\n\n<expandproperties>\n  <include criterion=\"<startswith|contains|endswith>\" value=\"foo\" />\n  <exclude criterion=\"<startswith|contains|endswith>\" value=\"bar\" />\n</expandproperties>\n...naturally with shorthand expressions like <include startswith=\"foo\" />\n\nor...\n\n<expandproperties>\n  <include property=\"*foo\" /> <!-- equal to \"startswith\" -->\n  <exclude property=\"bar*\" /> <!-- \"endswith\" -->\n  <exclude property=\"*doh*\" /> <!-- \"contains\" -->\n</expandproperties>\n\n... also, would it be useful if <expandproperties> could also take a \n\"propertyfile\" attribute, read it in and only expand those?\n", "id": 18140, "time": "2002-06-20T09:15:21Z", "creator": "jani.kaarela@accenture.com", "creation_time": "2002-06-20T09:15:21Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 9481, "is_private": false, "text": "Has this bug/feature been abandoned?  In case you are waiting for input on the\npreferred format,  I like the second one with the wild-card '*'.", "id": 78550, "time": "2005-08-16T22:13:51Z", "creator": "wilsonj@ociweb.com", "creation_time": "2005-08-16T22:13:51Z", "attachment_id": null}, {"count": 11, "text": "I'm very much interested in seeing this implemented (I initially thought this \nto be a bug (i.e. I would have expected to see in-file property expansion \nworking when the properties files is used in a filterset). Thanks!", "bug_id": 9481, "attachment_id": null, "id": 98179, "time": "2007-01-17T07:18:55Z", "creator": "pv7721@yahoo.com", "creation_time": "2007-01-17T07:18:55Z", "tags": [], "is_private": false}, {"count": 12, "text": "Reset assignee so mails go to list.", "bug_id": 9481, "attachment_id": null, "id": 127825, "time": "2009-06-10T13:22:54Z", "creator": "markt@apache.org", "creation_time": "2009-06-10T13:22:54Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 9481, "attachment_id": null, "id": 145657, "time": "2011-04-08T16:30:28Z", "creator": "mbenson@apache.org", "creation_time": "2011-04-08T16:30:28Z", "is_private": false, "text": "Marking as duplicate; solving BZ 51044 is a more versatile solution to this report.\n\nGot it done in just under 9 years!  :P\n\n*** This bug has been marked as a duplicate of bug 51044 ***"}]
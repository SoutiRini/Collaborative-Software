[{"count": 0, "tags": [], "creator": "boris@folgmann.de", "attachment_id": null, "id": 84266, "time": "2006-01-05T15:04:09Z", "bug_id": 38137, "creation_time": "2006-01-05T15:04:09Z", "is_private": false, "text": "I've got a multi-threaded web application running on a heavily loaded server.\nMonitor deadlocks occured in log4j 1.2.13, which seem to be caused by improper\nuse of wait() and notify(). See the thread trace that shows the logging thread\nand the dispatcher thread waiting on each other on the same BoundedFIFO.\n\n\"TP-Processor163\" daemon prio=1 tid=0x08b564b0 nid=0x6369 in Object.wait()\n[0x6cee2000..0x6cee3558]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x4a854cf8> (a org.apache.log4j.helpers.BoundedFIFO)\n        at java.lang.Object.wait(Object.java:474)\n        at org.apache.log4j.AsyncAppender.append(AsyncAppender.java:104)\n        - locked <0x4a854cf8> (a org.apache.log4j.helpers.BoundedFIFO)\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230)\n        - locked <0x4b41d5f8> (a org.apache.log4j.AsyncAppender)\n        at\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:65)\n        at org.apache.log4j.Category.callAppenders(Category.java:203)\n        - locked <0x4b407ac0> (a org.apache.log4j.spi.RootLogger)\n        at org.apache.log4j.Category.forcedLog(Category.java:388)\n        at org.apache.log4j.Category.info(Category.java:663)\n[...]\n\n\"Dispatcher-Thread-17\" daemon prio=1 tid=0x69d6ce80 nid=0x4a83 in Object.wait()\n[0x6b4af000..0x6b4af7d8]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x4a854cf8> (a org.apache.log4j.helpers.BoundedFIFO)\n        at java.lang.Object.wait(Object.java:474)\n        at org.apache.log4j.Dispatcher.run(AsyncAppender.java:312)\n        - locked <0x4a854cf8> (a org.apache.log4j.helpers.BoundedFIFO)\n[...]\n\nAnd lots of other threads blocked by the deadlocked logger, e.g.:\n\"TP-Processor3\" daemon prio=1 tid=0x6a628430 nid=0x4ba4 waiting for monitor\nentry [0x6c957000..0x6c958458]\n        at org.apache.log4j.Category.callAppenders(Category.java:202)\n        - waiting to lock <0x4b407ac0> (a org.apache.log4j.spi.RootLogger)\n        at org.apache.log4j.Category.forcedLog(Category.java:388)\n        at org.apache.log4j.Category.info(Category.java:663)\n[...]\n\nPlease study again the producer and consumer pattern regarding monitors. See\nthis and the following pages:\nhttp://java.sun.com/docs/books/tutorial/essential/threads/waitAndNotify.html\n\nHaving a quick look at the AsyncAppender source code I suggest to remove the\nchecks wasEmpty() and wasFull() before sending the notify, so a notify is always\nsent."}, {"count": 1, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "I found a second situation where the buggy check bf.length() == 0 leads to a\ndeadlock:\n\nVery often it happens that AsyncAppender.close() hangs like this:\n\"TP-Processor251\" daemon prio=1 tid=0x699f7ed8 nid=0x39b7 in Object.wait()\n[0x70202000..0x70203558]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x4b4f6208> (a org.apache.log4j.Dispatcher)\n        at java.lang.Thread.join(Thread.java:1095)\n        - locked <0x4b4f6208> (a org.apache.log4j.Dispatcher)\n        at java.lang.Thread.join(Thread.java:1148)\n        at org.apache.log4j.AsyncAppender.close(AsyncAppender.java:144)\n\nand\n\n\"Dispatcher-Thread-134\" daemon prio=1 tid=0x08ebbaf8 nid=0x1bde in Object.wait()\n[0x6bc9c000..0x6bc9c658]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x4d420e68> (a org.apache.log4j.helpers.BoundedFIFO)\n        at java.lang.Object.wait(Object.java:474)\n        at org.apache.log4j.Dispatcher.run(AsyncAppender.java:312)\n        - locked <0x4d420e68> (a org.apache.log4j.helpers.BoundedFIFO)\n\nThe reason is, that Dispatcher.close() DID NOT notify Dispatcher.run(), so\nThread.join() in AsyncAppender.close() waits forever!\n\nPlease fix that now, since AsyncAppender is totally unusable with that many\nconcurrency bugs.\n\n", "id": 84724, "time": "2006-01-17T18:18:57Z", "creator": "boris@folgmann.de", "creation_time": "2006-01-17T18:18:57Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 38137, "attachment_id": 17468, "text": "Created attachment 17468\nHotfix for solving the problem now.\n\nThe patched version runs perfectly on our test and production servers.", "id": 84814, "time": "2006-01-20T13:00:05Z", "creator": "boris@folgmann.de", "creation_time": "2006-01-20T13:00:05Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "Since there was no reaction :-(, we had to fix the problem for ourselves. I\nstrongly urge everybody who uses the AsyncAppender to apply our patch to avoid\ndeadlock/starvation problems.\nThere might be possibilities to avoid some notify() calls, but it's always\nbetter to make no assumptions if a different thread is currently wait()ing or\nnot. Even when you programmed both threads, this technique is more fault tolerant.\n", "id": 84815, "time": "2006-01-20T13:04:35Z", "creator": "boris@folgmann.de", "creation_time": "2006-01-20T13:04:35Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "The patch appears to be in some binary form.  Can you provide a patch created by\nusing diff?\n\nThanks", "id": 84821, "time": "2006-01-20T17:53:16Z", "creator": "sdeboy@iname.com", "creation_time": "2006-01-20T17:53:16Z", "is_private": false}, {"count": 5, "tags": [], "creator": "boris@folgmann.de", "attachment_id": null, "is_private": false, "id": 84851, "time": "2006-01-21T16:56:28Z", "bug_id": 38137, "creation_time": "2006-01-21T16:56:28Z", "text": "It's only gzipped, seems that the suffix (.gz) was lost.\n"}, {"count": 6, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "is_private": false, "id": 86893, "time": "2006-03-16T06:07:20Z", "bug_id": 38137, "creation_time": "2006-03-16T06:07:20Z", "text": "I would appreciate if you could check if new AsyncAppender implementation (see\nbug 38982) resolves the issues observed.  See first patch file for instructions\non modifying a log4j 1.2 build to use the new AsyncAppender.  Any critique or\ncomments would be appreciated, particularly if you would recommend incorporating\nthe new AsyncAppender in a log4j 1.2 bug fix release or developing a more\nincremental modification.\n"}, {"count": 7, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "*** Bug 26224 has been marked as a duplicate of this bug. ***", "id": 86895, "time": "2006-03-16T06:21:23Z", "creator": "carnold@apache.org", "creation_time": "2006-03-16T06:21:23Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "*** Bug 28006 has been marked as a duplicate of this bug. ***", "id": 86897, "time": "2006-03-16T06:31:09Z", "creator": "carnold@apache.org", "creation_time": "2006-03-16T06:31:09Z", "is_private": false}, {"count": 9, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 90733, "time": "2006-06-28T16:17:57Z", "bug_id": 38137, "creation_time": "2006-06-28T16:17:57Z", "is_private": false, "text": "Still waiting for feedback if rewrite of log4j's AsyncAppender resolved your issue.  The SVN for the log4j \n1.2 branch now contains the new AsyncAppender, so you no longer have to back port the appender from \nlog4j 1.3.  Will eventually close this bug as resolved if there is no feedback."}, {"count": 10, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "Curt, we have also experienced this exact problem in our production system. We \nare running a multi-clustered J2EE application. I would recommend increasing \nthe priority on this Bug to P1 as this deadlock brings down our production \nsystem. We are implementing Boris' hotfix and will post the results as soon as \nthey are available. If the hotfix is valid, I would also recommend a new \nrelease of log4j immediately to address the issue. We are currently using log4j \n1.2.8.\nThanks,\nZev.", "id": 90836, "time": "2006-07-03T14:53:08Z", "creator": "beckermanz@saic.com", "creation_time": "2006-07-03T14:53:08Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "*** Bug 37904 has been marked as a duplicate of this bug. ***", "id": 92827, "time": "2006-08-31T21:12:39Z", "creator": "carnold@apache.org", "creation_time": "2006-08-31T21:12:39Z", "is_private": false}, {"count": 12, "tags": [], "creator": "kay.abendroth@raxion.net", "attachment_id": null, "text": "(In reply to comment #10)\n> [..] If the hotfix is valid, I would also recommend a new \n> release of log4j immediately to address the issue. We are currently using log4j \n> 1.2.8.\n> Thanks,\n> Zev.\n\nZev, does version 1.2.14 solve the issue for you?\n\n", "id": 95713, "time": "2006-11-12T02:43:43Z", "bug_id": 38137, "creation_time": "2006-11-12T02:43:43Z", "is_private": false}, {"count": 13, "tags": [], "creator": "beckermanz@saic.com", "is_private": false, "text": "We have modified our development and system test environments to use the 1.2.14 \nversion of log4j and we have not had any problems. We will deploy this new \nversion to production in about 6-8 weeks. If we have issues, i will post them \nhere. however, to date, we have not had any problems with the new version.\nZev.", "id": 95767, "time": "2006-11-13T07:39:40Z", "bug_id": 38137, "creation_time": "2006-11-13T07:39:40Z", "attachment_id": null}, {"count": 14, "attachment_id": null, "bug_id": 38137, "text": "If Boris has no issues with 1.2.14 and Zev doesn't re-reply to this bug within\nthe next 12 weeks, this bug can be closed around February.", "id": 95779, "time": "2006-11-13T10:07:18Z", "creator": "kay.abendroth@raxion.net", "creation_time": "2006-11-13T10:07:18Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "bug_id": 38137, "attachment_id": null, "text": "No problem reported with 1.2.14 AsyncAppender, closing issue.", "id": 99701, "time": "2007-02-22T13:59:30Z", "creator": "carnold@apache.org", "creation_time": "2007-02-22T13:59:30Z", "is_private": false}, {"count": 16, "tags": [], "creator": "yufeng_tsui@ml.com", "attachment_id": null, "id": 111282, "time": "2007-11-29T13:44:17Z", "bug_id": 38137, "creation_time": "2007-11-29T13:44:17Z", "is_private": false, "text": "(In reply to comment #6)\nI am seeing this bug in 1.2.14 version of log4j.  We are running standalone \njava process.  Here is the new thread dump:\n\"Thread xxxx\" prio=1 tid=0x0000002b3f8b4810 nid=0x6b91 in Object.wait() \n[0x0000000044270000..0x0000000044270c30] \u00a0\u00a0\u00a0\u00a0\nat java.lang.Object.wait(Native Method)\n \u00a0\u00a0\u00a0\u00a0- waiting on <0x0000002ade1969b0> (a java.util.ArrayList)\n \u00a0\u00a0\u00a0\u00a0at java.lang.Object.wait(Object.java:474)\n \u00a0\u00a0\u00a0 at org.apache.log4j.AsyncAppender.append(AsyncAppender.java:193)\n \u00a0\u00a0\u00a0\u00a0- locked < 0x0000002ade1969b0> (a java.util.ArrayList)\n \u00a0\u00a0\u00a0\u00a0at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230)\n \u00a0\u00a0\u00a0\u00a0- locked < 0x0000002ade1dbd30> (a org.apache.log4j.AsyncAppender)\n \u00a0\u00a0\u00a0\u00a0at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:65)\n \u00a0\u00a0\u00a0\u00a0at org.apache.log4j.Category.callAppenders(Category.java:203)\n \u00a0\u00a0\u00a0\u00a0- locked < 0x0000002ade21cf90> (a org.apache.log4j.spi.RootLogger)\n \u00a0\u00a0\u00a0\u00a0at org.apache.log4j.Category.forcedLog(Category.java:388)\n \u00a0\u00a0\u00a0\u00a0at org.apache.log4j.Category.log(Category.java:853)\n \u00a0\u00a0\u00a0\u00a0at org.apache.commons.logging.impl.Log4JLogger.debug(Log4JLogger.java:110)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.encoding.DeserializationContextImpl.endElement\n(DeserializationContextImpl.java:1034)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.message.SAX2EventRecorder.replay\n(SAX2EventRecorder.java:204)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.message.MessageElement.publishToHandler\n(MessageElement.java:722)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.message.RPCElement.deserialize(RPCElement.java:233)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.message.RPCElement.getParams(RPCElement.java:347)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.client.Call.invoke(Call.java:2272)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.client.Call.invoke(Call.java:2171)\n \u00a0\u00a0\u00a0\u00a0at org.apache.axis.client.Call.invoke(Call.java:1691)\n \u00a0\u00a0\u00a0\u00a0at com.ml.marginhub.fipb.MHBridgeSoapBindingStub.getHairCut(Unknown \nSource)\n \u00a0\u00a0\u00a0\u00a0at java.lang.Thread.run(Thread.java:595)"}, {"count": 17, "tags": [], "creator": "carnold@apache.org", "is_private": false, "text": "Comment #16 if it is a bug is a different bug and should be filed as a new bug.\n\nWaiting on line 193 is expected when blocking is set to true and the buffer is full.  Waiting there doesn't by \nitself doesn't indicate a bug.\n\nPlease retry using log4j 1.2.15 (only some slight changes since 1.2.14, but maybe enough) and if the \nproblem still occurs please describe the situation more fully, such as any deadlocks on other threads, the \nnature of the wrapped appender, any status on the dispatch thread, and diagnostic messages on the \nconsole, etc.  Please report if the situation is repeatable and if it occurs frequently, occasionally, etc.\n\n", "id": 111283, "time": "2007-11-29T14:27:02Z", "bug_id": 38137, "creation_time": "2007-11-29T14:27:02Z", "attachment_id": null}]
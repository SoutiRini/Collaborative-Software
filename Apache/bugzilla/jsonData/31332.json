[{"count": 0, "tags": [], "text": "Using environment variables in a 'require group' DN substantially increases\nflexibility of access control.  %{varName} is substitued for the variable's\nvalue when determining authorisation.\n\neg. the following can be used to authenticate against different LDAP groups for\ndifferent directories, both the directory structure and authorisation being\ndynamically updateble:\n\nRewriteRule ^/baseDir/([^/]*)/? - [env=dn1:$1]\nRequire group ou=%{dn1},cn=groups,dc=ricardo,dc=com\n\nThe following is the diff on mod_auth_ldap.c from 2.0.51 required to implement\nthis [expand_env() is based on do_expand() in mod_rewrite.c]:\n\n\n--- httpd-2.0.51/modules/experimental/mod_auth_ldap.c   2004-05-22\n00:39:41.000000000 +0100\n+++ httpd-2.0.51_var/modules/experimental/mod_auth_ldap.c       2004-09-20\n16:09:24.000000000 +0100\n@@ -103,6 +103,7 @@\n int mod_auth_ldap_check_user_id(request_rec *r);\n int mod_auth_ldap_auth_checker(request_rec *r);\n void *mod_auth_ldap_create_dir_config(apr_pool_t *p, char *d);\n+static void expand_env(request_rec *r, const char *input, char *buffer, int nbuf);\n\n /* ---------------------------------------- */\n\n@@ -582,6 +583,7 @@\n         else if (strcmp(w, \"group\") == 0) {\n             struct mod_auth_ldap_groupattr_entry_t *ent = (struct\nmod_auth_ldap_groupattr_entry_t *) sec->groupattr->elts;\n             int i;\n+            char group[MAX_STRING_LEN];\n\n             if (sec->group_attrib_is_dn) {\n                 if (req->dn == NULL || strlen(req->dn) == 0) {\n@@ -599,6 +601,9 @@\n                 }\n             }\n\n+            expand_env(r, t, group, sizeof(group));\n+            if (group[0]=='\\0') return HTTP_UNAUTHORIZED;\n+\n             ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n                           \"[%d] auth_ldap authorise: require group: testing for\ngroup membership in \\\"%s\\\"\",\n                          getpid(), t);\n@@ -606,9 +611,9 @@\n             for (i = 0; i < sec->groupattr->nelts; i++) {\n                ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n                               \"[%d] auth_ldap authorise: require group: testing\nfor %s: %s (%s)\", getpid(),\n-                              ent[i].name, sec->group_attrib_is_dn ? req->dn :\nreq->user, t);\n+                              ent[i].name, sec->group_attrib_is_dn ? req->dn :\nreq->user, group);\n\n-                result = util_ldap_cache_compare(r, ldc, sec->url, t, ent[i].name,\n+                result = util_ldap_cache_compare(r, ldc, sec->url, group,\nent[i].name,\n                                      sec->group_attrib_is_dn ? req->dn :\nreq->user);\n                 switch(result) {\n                     case LDAP_COMPARE_TRUE: {\n@@ -649,6 +654,54 @@\n     return HTTP_UNAUTHORIZED;\n }\n\n+/* ---------------------------------------- */\n+/* expand string with Apache environment variables */\n+static void expand_env(request_rec *r, const char *input, char *buffer, int nbuf) {\n+    const char *inp;\n+    char *outp;\n+    apr_size_t span, space;\n+\n+    inp = input;\n+    outp = buffer;\n+    space = nbuf - 1; /* room for '\\0' */\n+\n+    for (;;) {\n+        span = strcspn(inp, \"%\");\n+        if (span > space) {\n+            span = space;\n+        }\n+        memcpy(outp, inp, span);\n+        inp += span;\n+        outp += span;\n+        space -= span;\n+        if (space == 0 || *inp == '\\0') {\n+            break;\n+        }\n+        if (inp[1] == '{') {\n+            char *endp, *var, *val;\n+            endp = strchr(inp+2, '}');\n+            if (endp == NULL) {\n+                goto skip;\n+            }\n+            var  = apr_pstrndup(r->pool, inp+2, endp-inp-2);\n+            val=(char *) apr_table_get(r->subprocess_env, var);\n+            if (!val) { /* flag subs failed */\n+              buffer='\\0';\n+              break;\n+            }\n+            span = apr_cpystrn(outp, val, space) - outp;\n+            inp = endp+1;\n+            outp += span;\n+            space -= span;\n+            continue;\n+        }\n+        skip:\n+        *outp++ = *inp++;\n+        space--;\n+    }\n+    *outp++ = '\\0';\n+}\n+\n\n /* ---------------------------------------- */\n /* config directives */", "attachment_id": null, "id": 63953, "creator": "robert.leathley@ricardo.com", "time": "2004-09-21T09:51:20Z", "bug_id": 31332, "creation_time": "2004-09-21T09:51:20Z", "is_private": false}, {"attachment_id": 12813, "tags": [], "bug_id": 31332, "text": "Created attachment 12813\nmod_auth_ldap.c 2.0.51 patch to implement env var substitution", "count": 1, "id": 63955, "time": "2004-09-21T09:56:06Z", "creator": "robert.leathley@ricardo.com", "creation_time": "2004-09-21T09:56:06Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 31332, "text": "Would it be possible to create a patch for httpd v2.1?\n\nThe LDAP support in httpd v2.1 is no longer experiemental, it would be great to\ninclude this feature in the mod_authnz_ldap module.\n", "id": 69956, "time": "2005-01-21T23:09:42Z", "creator": "minfrin@apache.org", "creation_time": "2005-01-21T23:09:42Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 31332, "text": "2.4.x interpolates arguments to Require using the expression parser.", "id": 180327, "time": "2015-01-16T20:31:15Z", "creator": "covener@gmail.com", "creation_time": "2015-01-16T20:31:15Z", "is_private": false, "attachment_id": null}]
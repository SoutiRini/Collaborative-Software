[{"attachment_id": null, "tags": [], "bug_id": 21983, "text": "Coyote JK2 does not support accept count as documented in \nhttp://jakarta.apache.org/tomcat/tomcat-4.1-doc/config/jk2.html\n\nMy observation is that once all the threads are busy processing request - \nincoming requests are dropped and not queued as one would expect after setting \nthe accept count value on the connector. This means that if I need to have 100 \nrequests processed concurrently I need to make my connector use 100 threads \nsince there is no queueing of requests.\n\nIn file org.apache.jk.common.ChannelSocket (Line 320), in the init method I see \nthat the server socket is created with a Zero backlog in all cases, I think it \nshould have been created with the accept count value as the backlog.\n\n        for( int i=startPort; i<=maxPort; i++ ) {\n            try {\n                sSocket=new ServerSocket( i, 0, inet );\n                port=i;\n                break;\n            } catch( IOException ex ) {\n                log.info(\"Port busy \" + i + \" \" + ex.toString());\n                continue;\n            }\n        }\n\nThis is unlike the coyote HTTP 1.1 connector where the server socket is created \nwith the accept count as the backlog.", "count": 0, "id": 41745, "time": "2003-07-30T02:26:20Z", "creator": "sganapathy@vitria.com", "creation_time": "2003-07-30T02:26:20Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 21983, "text": "Yes, it should allow you to set the acceptCount.  However, the benefit of doing \nso is really really tiny.  (I'm assuming the pre-fork MPM, because it is easier \nto explain:  the other MPMs work similarly however.)  What happens is that each \nApache child is connected to a single Tomcat thread.  When the Tomcat thread \nfinishes the request, it won't go back to the ServerSocket:  It will wait until \nit's Apache child sends it another request.  The only thing that the \nacceptCount would help is the case where Apache suddenly needs to create a \nlarge number of new children (and even then, you'd probably need a pretty beefy \nbox to see a failure).\n\nFor what you want, you need to configure the \"backlog\" in Apache.", "id": 41749, "attachment_id": null, "creator": "william.barker@wilshire.com", "creation_time": "2003-07-30T03:24:48Z", "time": "2003-07-30T03:24:48Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 21983, "text": "As of November 15, 2004, JK2 is no longer supported. All bugs related to JK2 \nwill be marked as WONTFIX. In its place, some of its features have been \nbackported to jk1. Most of those features will be seen in 1.2.7, which is \nslated for release on November 30th, 2004.\n\nAnother alternative is the ajp addition to mod_proxy which will be part of \napache 2.\n\nFor more information on the Tomat connectors docs at\nhttp://jakarta.apache.org/tomcat/connectors-doc/\n", "id": 68845, "time": "2004-12-22T21:45:24Z", "creator": "markt@apache.org", "creation_time": "2004-12-22T21:45:24Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "Toshiya_Kobayashi@sunmoretec.co.jp", "attachment_id": null, "text": "William said that the benefit is tiny. But I don't think so.\nIt often happens that MaxClient of Apache is large and may not be changed.\nAssuming that MaxClient is 1000,\n1) maxThreads=1000 connectionTimeout=0 acceptCount=10\n2) maxThreads=100 connectionTimeout=2000 acceptCount=1000\n\n1) is recommended in docs/website. But 2) achieved a better throughput under \nheavy load. Too many working threads are not preferable, you know.\nWhen I choose 2) setting, queueing is really needed. To enable acceptCount, I \ndid this test with a fixed ChannelSocket.\n\n------------------\n\nline 114:\n    int backlog=50;\n\nline 258:\n    public void setBacklog(int i) {\n    \tbacklog = i;\n    }\n\nline 323:\n    sSocket=new ServerSocket( i, backlog, inet );\n\n-----------------\n\nBug#21983 is marked as WONTFIX because this is related to JK2.\nBut this fix can be done in Tomcat-side. I hope this will be reopened and \nfixed. (Or Should I move this bug report to JK category?)\n\n# It is said that a ServerSocket is created with a zero backlog.\n# But If a zero value is given for the backlog-argument, default backlog size \n(= 50) will be applied.", "id": 73147, "time": "2005-03-31T12:12:26Z", "bug_id": 21983, "creation_time": "2005-03-31T12:12:26Z", "is_private": false}]
[{"count": 0, "text": "PUT to an unmapped URL (DELETEd before) with\n\n  If-None-Match: *\n\ncurrently fails with 412, but should succeed (see\n<http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.14.26.p.8>).", "bug_id": 38034, "attachment_id": null, "id": 83972, "time": "2005-12-24T11:12:00Z", "creator": "julian.reschke@gmx.de", "creation_time": "2005-12-24T11:12:00Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "julian.reschke@gmx.de", "text": "It seems that If-Match and If-None-Match in general aren't evaluated properly\nwhen the target does not exist.\n\nFor instance:\n\nLOCK /unmapped\nIf-Match: \"*\"\n\nshould fail with 412, but creates the lock.\n\nOr\n\nLOCK /unmapped\nIf-None-Match: \"*\"\n\nshould succeed, but fails with 412.\n", "id": 99975, "time": "2007-03-02T07:56:27Z", "bug_id": 38034, "creation_time": "2007-03-02T07:56:27Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 38034, "attachment_id": 19658, "text": "Created attachment 19658\ntest cases for LOCK request with if-* headers", "id": 99976, "time": "2007-03-02T07:58:12Z", "creator": "julian.reschke@gmx.de", "creation_time": "2007-03-02T07:58:12Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 38034, "text": "Isn't there any programmer somewhere to help fix this bug.\nIt is a *severe* bug in mod_dav and it is open for at least four years, while\nIIS does it right.\n", "id": 105931, "time": "2007-07-25T04:09:00Z", "creator": "werner.baumann@onlinehome.de", "creation_time": "2007-07-25T04:09:00Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "werner.baumann@onlinehome.de", "text": "Created attachment 20552\nFixes If-Match: * and If-None-Match: * bug for mod_dav\n\nThe bug is in function ap_meets_conditions() in modules/http/http_protocol.c:\nit always evaluates \"If-Match: *\" to TRUE (is FALSE, if resource does not\nexist) and \"If-None-Match: *\" to FALSE (is TRUE, if the resource does not\nexist).\nThis function is called by mod_dav, function dav_validate_request(). In this\ncase, ap_meets_conditions() seems not able to get etag reliably (probably a bug\nin mod_dav).\nFix: A new function dav_meets_conditions() is created in\nmodules/dav/main/util.c. It is mostly a copy of ap_meets_conditions(), but\nfixes the mentioned errors. dav_validate_request() calls dav_meets_conditions()\ninstead of ap_meets_conditions().\nToDo: it would be better to fix this in ap_meets_conditions(). But to do this,\nthis functions must know, whether the resource exists, and it must be able to\nreliably get the etag of the resource. But as I am not familiar with\nApache-programming, I can't do this. I even doubt that it is possible without\nchanges in other Apache modules besides mod_dav.", "id": 105970, "time": "2007-07-26T11:30:39Z", "bug_id": 38034, "creation_time": "2007-07-26T11:30:39Z", "is_private": false, "attachment_id": 20552}, {"count": 5, "tags": [], "text": "Created attachment 20553\nTest results for conditional LOCK-requests\n\nHTTP-body and irrelevant headers are removed.\nClients should remove \"W/\" from weak Etags. Apache always creates weak Etags,\nwhen a request is sent within less than 1 second after the last modification.\nSo clients that use HEAD to get the Etag immediately after PUT will be fooled\nwhen they use this Etag some seconds later.", "attachment_id": 20553, "id": 105972, "creator": "werner.baumann@onlinehome.de", "time": "2007-07-26T11:41:31Z", "bug_id": 38034, "creation_time": "2007-07-26T11:41:31Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 38034, "attachment_id": null, "text": "Why would a client remove the weakness indicator?\n\nIf the server wants to make x and W/x match, it needs to implement Etag matching\nthat way. But clients should treat etags as opaque strings. IMHO.\n", "id": 105973, "time": "2007-07-26T11:54:03Z", "creator": "julian.reschke@gmx.de", "creation_time": "2007-07-26T11:54:03Z", "is_private": false}, {"count": 7, "tags": [], "creator": "werner.baumann@onlinehome.de", "attachment_id": null, "id": 105978, "time": "2007-07-26T14:05:55Z", "bug_id": 38034, "creation_time": "2007-07-26T14:05:55Z", "is_private": false, "text": "> Why would a client remove the weakness indicator?\nBecause the weakness indicator sent by Apache is nonsense.\n\nWhen I send a PUT request and immediately thereafter send a HEAD request, I\nalways get a weak Etag from Apache, say W/\"19e60b-20-279033c0\". If I do the HEAD\nrequest some seconds later, I get the strong Etag \"19e60b-20-279033c0\". Neither\nApache nor somebody else changed the content, it is just what I sent in the PUT\nrequest. And this makes no sense to the client.\n\nThe reason is in modules/http/http_etag.c, ap_make_etag():\n\n     * If the request was made within a second of the last-modified date,\n     * we send a weak tag instead of a strong one, since it could\n     * be modified again later in the second, and the validation\n     * would be incorrect.\n\nWhat should be the sense of this (would be nice if you could explain it to me)?\n\n- changes may happen at any time. Why are young files bad and old ones good?\n\n- are there race conditions within in Apache, so the Etag will not match the\nbody of the response (mtime and etag are evaluated at one time, the\nresponse-body some time later)? In this case a weak Etag is just as wrong as\nstrong one. Why should this race condition occur only within 1 second after the\nfile has been modified? If this realy is the case, it needs debugging.\n\n- when the Etag matches the body of the response, it is completely ok to change\nthe content on the server 0.1 microsecond later (because this will change Etag).\n\nAs long as Apache (or some module) does not distinguish between \"semantically\nsignificant changes\" and changing some byte, there is no reason for weak Etags\n(see RFC 2616, 13.3.3 Weak and Strong Validators).\n\nFor any caching WebDAV-client, it is essential to get the Etag of files uploaded\nto the server. If this is impossible, the client has to throw away the local\ncopy and download it from the server again -- but only after waiting at least\none second.\n\nReal world: As long as one uses only standard WebDAV (RFC 4918) with Apache\nmod_dav (I don't know about extension like versioning), or any other\nWebDAV-server, removing the weakness indicator is no problem at all. davfs2 does\nit, and I never heard of any problem that might be related to this.\n\nP.S.: Servers, that don't edit the body of a PUT, should send a strong Etag and\nLast-Modiefied in the PUT-response, allthough the WebDAV Working Group was not\nable to address this problem. It would avoid race conditions.\n"}, {"count": 8, "tags": [], "creator": "julian.reschke@gmx.de", "text": "(In reply to comment #7)\n> > Why would a client remove the weakness indicator?\n> Because the weakness indicator sent by Apache is nonsense.\n\nBut that doesn't mean that people should apply hacks to their clients.\n\n> When I send a PUT request and immediately thereafter send a HEAD request, I\n> always get a weak Etag from Apache, say W/\"19e60b-20-279033c0\". If I do the HEAD\n> request some seconds later, I get the strong Etag \"19e60b-20-279033c0\". Neither\n> Apache nor somebody else changed the content, it is just what I sent in the PUT\n> request. And this makes no sense to the client.\n\nIt makes perfect sense for clients that just need a weak etag, such as for\nmaking GET in the browser conditional.\n \n> The reason is in modules/http/http_etag.c, ap_make_etag():\n> \n>      * If the request was made within a second of the last-modified date,\n>      * we send a weak tag instead of a strong one, since it could\n>      * be modified again later in the second, and the validation\n>      * would be incorrect.\n> \n> What should be the sense of this (would be nice if you could explain it to me)?\n> \n> - changes may happen at any time. Why are young files bad and old ones good?\n\nAs long as the timestamp of the file equals the system time, it can't be used to\ncompute a strong etag (because the file can change again in the same interval).\nOnce it's not the same anymore, it can be used to compute a strong etag.\n\n> - are there race conditions within in Apache, so the Etag will not match the\n> body of the response (mtime and etag are evaluated at one time, the\n> response-body some time later)? In this case a weak Etag is just as wrong as\n> strong one. Why should this race condition occur only within 1 second after the\n> file has been modified? If this realy is the case, it needs debugging.\n> \n> - when the Etag matches the body of the response, it is completely ok to change\n> the content on the server 0.1 microsecond later (because this will change Etag).\n\nThat depends on the resolution of the system clock.\n\n> As long as Apache (or some module) does not distinguish between \"semantically\n> significant changes\" and changing some byte, there is no reason for weak Etags\n> (see RFC 2616, 13.3.3 Weak and Strong Validators).\n> \n> For any caching WebDAV-client, it is essential to get the Etag of files uploaded\n> to the server. If this is impossible, the client has to throw away the local\n> copy and download it from the server again -- but only after waiting at least\n> one second.\n\nYes, that's a problem. But putting hacks into the clients (removing the weakness\nindicator) is the wrong way to handle this.\n\n> Real world: As long as one uses only standard WebDAV (RFC 4918) with Apache\n> mod_dav (I don't know about extension like versioning), or any other\n> WebDAV-server, removing the weakness indicator is no problem at all. davfs2 does\n> it, and I never heard of any problem that might be related to this.\n\nThat's because nobody has tested with other WebDAV servers that may assign weak\netags for other reasons than the one you see in Apache/moddav.\n\n> P.S.: Servers, that don't edit the body of a PUT, should send a strong Etag and\n> Last-Modiefied in the PUT-response, allthough the WebDAV Working Group was not\n> able to address this problem. It would avoid race conditions.\n\nActually, servers should send the ETag always, no matter whether the body was\nchanged (IMHO). See proposal in\nhttp://greenbytes.de/tech/webdav/draft-reschke-http-etag-on-write-latest.html\n(follow ups with respect to this on the http-wg mailing list, please). \n", "id": 105985, "time": "2007-07-27T01:09:18Z", "bug_id": 38034, "creation_time": "2007-07-27T01:09:18Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "bug_id": 38034, "text": "Looks like this is the wrong place for our discussion. So I created a new bug\nreport. (#42987 Weak Etags in Apache are useless and violate RFC 2616, 13.3.3)\nPlease have a look at the test cases for the 'perfect sense' of apache-style\nweak etags in a conditional GET.\n", "id": 105996, "time": "2007-07-27T05:38:27Z", "creator": "werner.baumann@onlinehome.de", "creation_time": "2007-07-27T05:38:27Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 38034, "attachment_id": null, "text": "This bug is not specific to WebDAV! If-None-Match is a pure HTTP construct and\nas such fixing this bug should not touch mod_dav.\n\nI'll post a patch shortly.", "id": 111917, "time": "2007-12-19T12:23:42Z", "creator": "simon.perreault@viagenie.ca", "creation_time": "2007-12-19T12:23:42Z", "is_private": false}, {"count": 11, "tags": [], "text": "Created attachment 21295\nClean fix\n\nThis patch comes from mod_dav_acl-0.1.2 and was written by Jari Urpalainen.\n\nPlease consider applying and closing this bug.", "attachment_id": 21295, "id": 111918, "creator": "simon.perreault@viagenie.ca", "time": "2007-12-19T12:28:28Z", "bug_id": 38034, "creation_time": "2007-12-19T12:28:28Z", "is_private": false}, {"count": 12, "tags": [], "creator": "tolsen@alum.mit.edu", "attachment_id": null, "id": 111924, "time": "2007-12-19T13:22:39Z", "bug_id": 38034, "creation_time": "2007-12-19T13:22:39Z", "is_private": false, "text": "RFC 2616 says \"...or if \"*\" is given and any current entity exists for that\nresource, then the server MUST NOT perform the requested method.\"  Therefore,\nthis patch assumes that the absence of an etag implies the absence of the entity.\n\nIs this an assumption we want to make?"}, {"count": 13, "tags": [], "bug_id": 38034, "attachment_id": null, "id": 111925, "time": "2007-12-19T13:31:57Z", "creator": "tolsen@alum.mit.edu", "creation_time": "2007-12-19T13:31:57Z", "is_private": false, "text": "\nalso see the discussion at:\n\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/200710.mbox/%3c470E9A9F.8020202@pearsoncmg.com%3e\n\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/200711.mbox/%3c1b4c87db0711190838v69dd7593l15c0ceb4e4755b01@mail.gmail.com%3e"}, {"attachment_id": null, "tags": [], "creator": "simon.perreault@viagenie.ca", "text": "(In reply to comment #12)\n> Is this an assumption we want to make?\n\nI'm not qualified to provide advice on that question. But please note that the\npatch can easily be modified if this assumption turns out not to be valid. So\nthe only thing preventing this bug from being closed is making this decision.", "count": 14, "id": 111946, "time": "2007-12-20T05:46:01Z", "bug_id": 38034, "creation_time": "2007-12-20T05:46:01Z", "is_private": false}, {"count": 15, "tags": [], "creator": "simon.perreault@viagenie.ca", "text": "(In reply to comment #13)\n>\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/200710.mbox/%3c470E9A9F.8020202@pearsoncmg.com%3e\n>\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/200711.mbox/%3c1b4c87db0711190838v69dd7593l15c0ceb4e4755b01@mail.gmail.com%3e\n\nI didn't read everything slowly, but isn't all this related to a different bug?\nI mean, the problem in #38034 is fixed in a correct way easily enough, without\nrefactoring.", "id": 111947, "time": "2007-12-20T05:48:59Z", "bug_id": 38034, "creation_time": "2007-12-20T05:48:59Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 38034, "attachment_id": null, "text": "> I'm not qualified to provide advice on that question. But please note that the\n> patch can easily be modified if this assumption turns out not to be valid. So\n> the only thing preventing this bug from being closed is making this decision.\n\nThe main thing preventing this bug from being closed is an actual commit to the source code.  This bug \nhas been opened for almost 2 years (16593 has been open for over 4.5 years!) and has seen 3 or 4 \nproposed patches.\n\nWhen a bug sees this many patches and no action, then there is a scaling problem somewhere in the \ndevelopment process.\n\nAdoption of the litmus webdav test suite would also be good to prevent regressions.  I spoke to Greg \nStein at ApacheCon last month about this bug and he mentioned that he had tested If-Match / If-\nNone-Match behavior when he originally wrote mod_dav.  Unfortunately, mod_dav has regressed in \nthat regard.  An automated test would have caught the regression.", "id": 111953, "time": "2007-12-20T08:46:37Z", "creator": "tolsen@alum.mit.edu", "creation_time": "2007-12-20T08:46:37Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 38034, "attachment_id": null, "text": "(In reply to comment #14) \n> I'm not qualified to provide advice on that question. But please note that the\n> patch can easily be modified if this assumption turns out not to be valid. So\n> the only thing preventing this bug from being closed is making this decision.\n\n(Ok, my last reply was me venting.  Here is my more productive response ;-)\n\nThe patch may be easily modified to any particular state, but deciding on that state is the hard part ;-)  \nIn this case, if the assumption is not valid (which I do not believe it is), then we must decide on how we \nsignify that a resource does not exist (i.e. is null).  The email thread I pointed you to discusses that \nissue somewhat.  Chris Darroch proposed NON_EXTANT_RESOURCE or NO_RESOURCE.  Paritosh had \nalready submitted a patch with \"resource-exists\" but then later agreed with Chris on using \nNO_RESOURCE (a trivial change to the patch).   Then in the next month, after discussing this bug with \nPaul Querna at ApacheCon, Paritosh attempted to revive the thread and proposed another possible \napproach endorsed by Paul.  No one replied to Paritosh's email.\n\nAt that point, Paritosh and I decided not to invest more time in creating and testing yet another patch \nwhich may not make it into Apache.   We're not opposed to doing so in the future, but we'd like to get \nour own automated testing infrastructure setup specifically for our patches to Apache (there are more \nto come).  Testing that mod_dav_fs still works by hand for every patch (and every time a patch needs to \nbe changed) is time consuming.  \n\nRight now, we are under increasing pressure to tend more to our non-open-source-community tasks \nat our company.  We hope to devote more time to pushing fixes for bugs such as this one in the near \nfuture.  Hopefully, your and our efforts will not be in vain.\n\nbtw, please vote for this bug if you haven't done so already.\n\n", "id": 111954, "time": "2007-12-20T09:13:24Z", "creator": "tolsen@alum.mit.edu", "creation_time": "2007-12-20T09:13:24Z", "is_private": false}, {"count": 18, "tags": [], "creator": "werner.baumann@onlinehome.de", "attachment_id": null, "id": 111996, "time": "2007-12-21T12:15:51Z", "bug_id": 38034, "creation_time": "2007-12-21T12:15:51Z", "is_private": false, "text": "The patch proposed by Simon Perreault only treats the bug in \"If-None-Match: *\",\nbut the same bug is in \"If-Match: *\" and must be fixed too.\n\n>> Is this an assumption we want to make?\n>I'm not qualified to provide advice on that question. But please note that the\n>patch can easily be modified if this assumption turns out not to be valid. So\n>the only thing preventing this bug from being closed is making this decision.\n\nEvaluation of \"If-Match: *\" and \"If-None-Match: *\" depends on whether the\nresources does *exist*. I do not know, whether checking for the existence of an\nEtag is equivalent to checking for the existence of the resource. But if you\nwant to do it this way, you must *know*. I am worrying about the idea of making\na decision about making an *assumption*.\n\n>This bug is not specific to WebDAV! If-None-Match is a pure HTTP construct and\n>as such fixing this bug should not touch mod_dav.\n\nThis is true, and it is wrong. Most applications seem not to use \"If-None-Match:\n*\" and \"If-Match: *\" and will therefore not be affected by this bug. But these\nconditionals are essential for WebDAV. So\n- it would be *nice* to have a clean and general solution\n- it is *necessary* to fix that bug for WebDAV.\n\nAs it is, a WebDAV-client can either work reliable or work with Apache. These\ntwo options are exclusive.\n\nCheers\nWerner\n"}, {"count": 19, "tags": [], "creator": "werner.baumann@onlinehome.de", "attachment_id": null, "id": 112083, "time": "2007-12-22T01:52:00Z", "bug_id": 38034, "creation_time": "2007-12-22T01:52:00Z", "is_private": false, "text": "Additional remark an equivalence of \"check for existence\" and \"check for Etag\":\n\nI am not familiar with apache programming, so this is based on one assumption.\n- Apache modules can register their own, specialised ap_make_etag-function,\noverriding apaches generic ap_make_etag-function.\n\nIf this assumption is true, it would be perfectly reasonable for a module, to\nreturn an etag only if the resource is cacheable, and to return NULL if the\nresource is not cacheable. So checking for the existance of an etag can not\nreplace the check for existance of the resource.\n\nI think a clean, general solution should be in the line of the patch provided by\nParitosh Shah. There must also be a clean solution for the potential problems\nconsiderd by Paritosh Shah and Chris Darroch.\n\nAs I understand, a clean solution might possibly change some internal interface\nand possibly affect other modules. I fully understand that this needs serious\nconsideration and might take some time.\n\nIf it is therefore not possible to fix this bug in a clean, general way for the\nnext release, I suggest that the next release should fix the bug for mod_dav\nonly (so it will not affect other modules). You might use that ugly, code\ndublicating monster from me. As soon as a better solution is found, this\nmod_dav-only patch can be removed without side effects.\n\nWerner\n"}, {"count": 20, "tags": [], "bug_id": 38034, "text": "Created attachment 21343\nFix against 2.2.x\n\nWerner, can you please confirm that the attached patch against 2.2.x solves\nyour problem? This is the version of the patch that should be backported.", "id": 112484, "time": "2008-01-04T02:55:55Z", "creator": "rpluem@apache.org", "creation_time": "2008-01-04T02:55:55Z", "is_private": false, "attachment_id": 21343}, {"attachment_id": null, "tags": [], "creator": "werner.baumann@onlinehome.de", "text": "Referring to comment #20:\nI applied the patch to the Debian/Etch-version of Apache 2.2.3 and only\nexchanged mod_dav.so in the installed binary version.\n\nAll my tests succeeded (no errors).\n\nThe tests included (with response code):\n\nLOCK If-None-Match: *, file does not exist\n200 OK\n\nPUT If-None-Match: *, file does not exist\n201 Created\n\nPUT If-None-Match: *, file does exist\n412 Precondition Failed\n\nPUT If-Match: *, file does exist\n204 No Content\n\nPUT If-Match: \"af508-2c-69e15c40\", etag matches existing file\n204 No Content\n\nPUT If-Match: \"quatsch\", etag seems to not exactly match existing file\n412 Precondition Failed\n\nThanks\nWerner\n", "count": 21, "id": 112502, "time": "2008-01-04T11:49:48Z", "bug_id": 38034, "creation_time": "2008-01-04T11:49:48Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 38034, "attachment_id": null, "text": "Just to be crystal clear: Everything is now as you expect, right?", "id": 112503, "time": "2008-01-04T12:42:04Z", "creator": "rpluem@apache.org", "creation_time": "2008-01-04T12:42:04Z", "is_private": false}, {"count": 23, "tags": [], "text": "Yes!\n\nYour patch fixes bug 38034.\n\nWerner\n", "attachment_id": null, "id": 112506, "creator": "werner.baumann@onlinehome.de", "time": "2008-01-04T13:45:39Z", "bug_id": 38034, "creation_time": "2008-01-04T13:45:39Z", "is_private": false}, {"count": 24, "text": "Thanks for confirmation. I am sorry to say that it is likely that the patch\nmissed the boat for 2.2.7, but it is highly likely that it will be part of 2.2.8\nas it already has two votes for backport and only misses one:\n\nhttp://svn.apache.org/viewvc?view=rev&revision=609024\nhttp://svn.apache.org/viewvc/httpd/httpd/branches/2.2.x/STATUS?view=markup&pathrev=609024\n\nBut at least a accepted patch that is already in trunk is now available.\nThanks for being persistent.", "bug_id": 38034, "attachment_id": null, "id": 112507, "time": "2008-01-04T14:03:23Z", "creator": "rpluem@apache.org", "creation_time": "2008-01-04T14:03:23Z", "tags": [], "is_private": false}, {"count": 25, "tags": [], "creator": "michael@metaparadigm.com", "text": "Just a question related to this issue - not sure if I'm 100% correct in my\nthinking yet...\n\nDid ap_meet_condition fail because the ETag for the non-existant file is\nconstantly changing (mtime only ETag from http_etag.c) as there is no finfo\n(as a by product of it not existing)?\n\nlocks on non-existent files create a .DAV/.locknull so a resource does actually\nexist (a lock-null resource)? is this correct?\n\nI'm happy with the present work-around but if what i'm thinking is the case\nthen a cleaner fix in the future could be having mod_dav always\nproviding its ETags (overriding http_etag for DAV directories) and as it knows\nabout lock-null resources it could use the .locknull file for a constant\ninode-size-mtime Etag instead of just mtime, making ap_meets_condition happy?\n\nThat's if my assumptions are correct.", "id": 112512, "time": "2008-01-04T22:53:10Z", "bug_id": 38034, "creation_time": "2008-01-04T22:53:10Z", "is_private": false, "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 38034, "attachment_id": null, "id": 112513, "time": "2008-01-05T02:12:12Z", "creator": "werner.baumann@onlinehome.de", "creation_time": "2008-01-05T02:12:12Z", "is_private": false, "text": "In reply to comment #25:\n\nLock-null resources do *not* exist. Only the name is locked to prevent other\nclients from creating a resource with that name.\n\nLock-null resources have no etag and no mtime associated.\n\nGET requests on lock-null resources will fail with 404 NOT FOUND.\n\nAn LOCK If-None-Match: * must fail with \"423 LOCKED\" (not 412 PRECONDITION FAILED).\n\nFinally:\nLocked-null resources are deprecated by RFC 4918 in favour of locked-empty\nresources, which do exist. They will probably disappear in an overhaul of mod_dav.\n\nEtags in mod_dav and mod_dav_fs should be handled separately from the Apache\ncore. This is an open issue which cannot be solved that easy. Please see\nBug report #42987 as well as the discussion thread starting at\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/200710.mbox/%3c470E9A9F.8020202@pearsoncmg.com%3e\n\nWerner\n"}, {"attachment_id": null, "tags": [], "creator": "werner.baumann@onlinehome.de", "text": "Sorry, it's me again.\n\nThere seems to be a related bug in the way apache/mod_dav handles conditional\nPUT with header If-Unmodified-Since. It will always fail because\nap_meets_conditions does not know the mtime of the resource. This bug will not\nshow up most of the time as etag is checked first. I only noticed it, because a\nbug in davfs2 caused a PUT-request without If-Match-header and with\nIf-Unmodified-Since-header.\n\nAs the interface documentation of ap_meets_conditions in include/http_protocal.h\nsays, ap_meets_conditions is only ment for GET requests. It can't work with PUT.\nSo a future revision should either change ap_meets_conditions, as proposed by\nParitosh, or mod_dav should handle conditionals all of it's own (taking into\naccount that the requirements of WebDAV are quite different in this respect).\n\nWerner\n", "count": 27, "id": 112519, "time": "2008-01-05T08:41:26Z", "bug_id": 38034, "creation_time": "2008-01-05T08:41:26Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 38034, "text": "> So a future revision should either change ap_meets_conditions, as proposed by\n> Paritosh, or mod_dav should handle conditionals all of it's own (taking into\n> account that the requirements of WebDAV are quite different in this respect).\n\nThe requirements fot WebDAV are exactly the same as for plain HTTP, except for\nthe addition of the \"If\" header.\n\nOr am I missing something?\n", "id": 112526, "time": "2008-01-05T16:34:56Z", "creator": "julian.reschke@gmx.de", "creation_time": "2008-01-05T16:34:56Z", "is_private": false, "attachment_id": null}, {"count": 29, "tags": [], "creator": "werner.baumann@onlinehome.de", "attachment_id": null, "id": 112534, "time": "2008-01-06T03:23:15Z", "bug_id": 38034, "creation_time": "2008-01-06T03:23:15Z", "is_private": false, "text": "In reply to comment #28:\n\nYes, you missed the point.\n\nApache core does not handle PUT-requests and ap_meets_conditions is designed for\nGET/HEAD-requests only (this is documented behaviour). This is perfectly OK for\nthe vast majority of Web-servers (they don't need and don't want PUT). WebDAV is\nabout authoring and PUT is essential.\n\nWhy ap_meets_conditions cannot work with PUT:\nap_meets_conditions compares the validators from the request with the validators\nfrom the response. This is OK for GET.\nWith PUT-requests, the validators from the request have to be compared to the\nvalidators associated with the stored entity before the PUT-body is stored. The\nvalidators in the response will be different.\n\nIt is up to the decision by Apache developers, whether they want to\n- change ap_meets_conditions (this will change the interface), or\n- leave it to modules like mod_dav to check the conditions according to their needs.\n\nWerner\n"}, {"count": 30, "tags": [], "bug_id": 38034, "attachment_id": null, "id": 112535, "time": "2008-01-06T05:25:05Z", "creator": "julian.reschke@gmx.de", "creation_time": "2008-01-06T05:25:05Z", "is_private": false, "text": "What you're describing are the differences between Apache httpd and moddav, not\nbetween RFC2616 and RFC4918.\n\nPUT is part of RFC2616, so are all conditional headers (except \"If\"). Maybe an\nHTTP server implementation that does not support PUT can get away with a simpler\n*implementation*, but that doesn't really change the required semantics.\n"}, {"count": 31, "tags": [], "creator": "werner.baumann@onlinehome.de", "attachment_id": null, "id": 112539, "time": "2008-01-06T07:36:58Z", "bug_id": 38034, "creation_time": "2008-01-06T07:36:58Z", "is_private": false, "text": "Hello Julian,\n\nthe header ot this page says \"ASF Bugzilla\". I assume \"A\" stands for Apache, not\nfor Anything.\n\nWerner\n"}, {"count": 32, "tags": [], "creator": "tolsen@alum.mit.edu", "attachment_id": null, "id": 112564, "time": "2008-01-06T15:24:42Z", "bug_id": 38034, "creation_time": "2008-01-06T15:24:42Z", "is_private": false, "text": "(In reply to comment #29)\n> the vast majority of Web-servers (they don't need and don't want PUT). WebDAV is\n\nIf Apache just wants to keep the status quo, then yes.  But PUT is showing up in REST-style applications \n(although disguised as a POST) and in XForms.  Core Apache may eventually want to care about PUT \n\n"}, {"attachment_id": null, "tags": [], "creator": "rpluem@apache.org", "text": "Fixed in 2.2.8.", "count": 33, "id": 113011, "time": "2008-01-19T11:48:09Z", "bug_id": 38034, "creation_time": "2008-01-19T11:48:09Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "Robert_Flaherty@Hyperion.com", "attachment_id": null, "is_private": false, "id": 61147, "time": "2004-07-26T20:19:41Z", "bug_id": 30329, "creation_time": "2004-07-26T20:19:41Z", "text": "Change the implementation so that not every character is converted to &#xNNNN; \nform.  The response writer will take care of non latin characters as it is \ncreated with UTF-8.  Latin will be 1 byte instead of 6, and non latin will be \n3 instead of 8. \nOLD============================================================================\n    private String stringToCharacterRef(String val) {\n        StringBuffer result = new StringBuffer(val.length() * 8);\n        for (int i = 0; i < val.length(); i++) {\n            result.append(charToCharacterRef(val.charAt(i)));\n        }\n        return result.toString();\n    }\nNEW============================================================================\n<remove charToCharacterRef method>\n\n<probably should rename this to something like escapeHTML>\n\n    private String stringToCharacterRef(String val) {\n        StringBuffer result = new StringBuffer(val.length());\n        char ch;\n        for (int i = 0; i < val.length(); i++) {\n            ch = val.charAt(i);\n            switch (ch)\n            {\n                case '<':\n                    result.append(\"&lt;\");\n                    break;\n\n                case '>':\n                    result.append(\"&gt;\");\n                    break;\n\n                case '&':\n                    result.append(\"&amp;\");\n                    break;\n\n                default:\n                    result.append(ch);\n                    break;\n            }\n        }\n/*\n        StringBuffer result = new StringBuffer(val.length() * 8);\n        for (int i = 0; i < val.length(); i++) {\n            result.append(charToCharacterRef(val.charAt(i)));\n        }\n*/\n        return result.toString();\n    }"}]
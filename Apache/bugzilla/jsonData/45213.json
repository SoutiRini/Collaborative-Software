[{"count": 0, "tags": [], "text": "In a Tomcat server farm utilizing a shared work directory (that is, all Tomcat instances have the virtual 'Host' element attribute 'workDir' pointing to the same directory) it is possibly (even likely) that one Tomcat instance may recompile a changed JSP that another instance has already loaded. Under these circumstances, the second Tomcat instance will fail to reload the newly recompiled JSP.\n\nMethod to Duplicate:\n\n1) Bring up two instances of Tomcat (call them node1 and node2) that share a set of JSPs and a work directory (each node's server.xml has the default virtual host's appBase and workDir pointing to common shared directories).\n\n2) For each hit a common JSP\n\n3) Suspend the process running Tomcat for node1 ...\na) On windows you can use the Process Explorer (http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx) to suspend the process (right click on process and select Suspend).\nb) On *nix you can use send it a SIGSTOP to suspend it.\n\n4) Modify the JSP.\n\n5) Hit the page on node2. You should see the modification.\n\n6) Resume the suspended appserver process. (on unix you send SIGCONT; Process Explorer right click on process and select Resume).\n\n7) Hit the page on node1. Without this fix you should *not* see the modification. With the fix you should see the changes.\n\nAnalysis:\n\nThe shared JSP is correctly flagged for recompile and rebuilt. Note that there is a race condition (not the subject of the bug report) wherein any number (from one to all) Tomcat instances may try to recompile the changed JSP at the same time, depending on the timing of their JspRuntimeContext (JSP recompilation) threads. In the the procedure above we suspend one server to control which server performs the recompilation.\n\nThe awakened server will (within its JspRuntimeContext thread) detect that the JSP has changed and will \"request\" that it be reloaded. This occurs in JspServletWrapper.setServletClassLastModifiedTime in the call to JspServletWrapper.setReload(boolean) ... the calling sequence will be approximately JspRuntimeContext.checkCompile() -> JspCompilationContext.compile() -> Compiler.isOutDated() -> Compiler(isOutDated(boolean=true) -> JspServletWrapper.setServletClassLastModifiedTime(long) -> JspServletWrapper.setReload(boolean=true). JspServletWrapper.getServlet() will try to reload the JSP by calling JspCompilationContext.load(). However, the call to load() will return the *old* class, not the *new* one.\n\nThe underlying reason is that JspCompilationContext's class loader (property jspLoader) was never reset as a side effect of JspServletWrapper.setReload(boolean=true). As a result, the subsequent call to JspCompilationContext.load() continues to use the old class loader, and hence return the old class.\n\nAt present, the JspCompilationContext class loader is only reset as a side effect of performing a compilation *by this instance of Tomcat*. Thus an Tomcat instance may notice that a JSP has been recompiled (by another Tomcat instance) but will never reload the class because *it* didn't perform the recompiation.\n\nFix:\n\nThe following modification to Jasper addresses this behavior:\n\n- add a resetJspLoader() method to JspCompilationContext which throws\naway the current class loader thus allowing the JSP to be reloaded.\n- modify the setReload(boolean) method on JspServletWrapper\nto invoke JspCompilationContext.resetJspLoader() if the reload argument\nis true.\n\nDiffs:\n\nThe following diffs are against 5.5.20. The same modifications apply to 5.5.26 and 6.0.16, only the line numbers differ.\n\n--- /apache-tomcat-5.5.20-src/jasper/src/share/org/apache/jasper/JspCompilationContext.java   +++ /fix/org/apache/jasper/JspCompilationContext.java\n@@ -182,10 +182,14 @@\n                     rctxt.getCodeSource());\n         }\n         return jspLoader;\n     }\n\n+    public void resetJspLoader() {\n+        this.jspLoader = null;\n+    }\n+\n     /** ---------- Input/Output  ---------- */\n\n     /**\n      * The output directory to generate code into.  The output directory\n      * is make up of the scratch directory, which is provide in Options,\n@@ -557,11 +561,11 @@\n\n     public void compile() throws JasperException, FileNotFoundException {\n         createCompiler();\n         if (isPackagedTagFile || jspCompiler.isOutDated()) {\n             try {\n-                jspLoader = null;\n+                this.resetJspLoader();\n                 jspCompiler.compile();\n                 jsw.setReload(true);\n                 jsw.setCompilationException(null);\n             } catch (JasperException ex) {\n                 // Cache compilation exception\n\n\n\n--- apache-tomcat-5.5.20/jasper/src/share/org/apache/jasper/servlet/JspServletWrapper.java       +++ /fix/org/apache/jasper/servlet/JspServletWrapper.java\n@@ -128,10 +128,13 @@\n         return ctxt;\n     }\n\n     public void setReload(boolean reload) {\n         this.reload = reload;\n+        if (reload) {\n+            ctxt.resetJspLoader();\n+        }\n     }\n\n     public Servlet getServlet()\n         throws ServletException, IOException, FileNotFoundException\n     {\n@@ -187,11 +190,11 @@\n     public void setServletClassLastModifiedTime(long lastModified) {\n         if (this.servletClassLastModifiedTime < lastModified) {\n             synchronized (this) {\n                 if (this.servletClassLastModifiedTime < lastModified) {\n                     this.servletClassLastModifiedTime = lastModified;\n-                    reload = true;\n+                    this.setReload(true);\n                 }\n             }\n         }\n     }", "is_private": false, "id": 117722, "creator": "jhanlon@digitalriver.com", "time": "2008-06-16T10:11:39Z", "bug_id": 45213, "creation_time": "2008-06-16T10:11:39Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Sharing workDir between multiple instances is not a supported configuration. Whilst the docs don't explicitly say this, the description for workDir implies this and it was never, as far as I am aware, the intention of the Tomcat developers to allow multiple hosts to share the work directory.\n\nI am pleased you have a local fix that works for you but I am concerned that further down the line that you will discover a whole host of other things that break when using a shared work directory (such as the race condition you have identified). These issues would all need to be addressed (in a much larger patch) before any patch was committed.\n\nI do not believe the benefit obtained by getting this functionality working correctly justifies the additional complexity that would be required.\n\nSince this change would represent new functionality, I am changing it to an enhancement. I am also marking it as WONTFIX as I do not believe this would ever be implemented.", "is_private": false, "id": 117725, "creator": "markt@apache.org", "time": "2008-06-16T10:44:31Z", "bug_id": 45213, "creation_time": "2008-06-16T10:44:31Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "*** Bug 45214 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 117731, "creator": "markt@apache.org", "time": "2008-06-16T11:48:19Z", "bug_id": 45213, "creation_time": "2008-06-16T11:48:19Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 45213, "attachment_id": null, "id": 117733, "time": "2008-06-16T11:52:15Z", "creator": "jhanlon@digitalriver.com", "creation_time": "2008-06-16T11:52:15Z", "is_private": false, "text": "The shared work directory is convenient, but not central, to duplicating this bug. The same effect can be had by running the JspC ant task concurrent with a running server"}, {"count": 4, "tags": [], "bug_id": 45213, "attachment_id": null, "id": 117734, "time": "2008-06-16T12:00:26Z", "creator": "markt@apache.org", "creation_time": "2008-06-16T12:00:26Z", "is_private": false, "text": "That isn't supported either - for pretty much the same reasons. If you have two independent processes trying to do the same thing without co-ordination you are going to get race conditions."}]
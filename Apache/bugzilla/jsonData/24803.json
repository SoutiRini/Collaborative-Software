[{"count": 0, "text": "LevelMatchFilter works as documented but not as expected.  The logic used by \nthe decide(LogginEvent) method differs from what is expected by user and from \nlooking at the logic employed by the filter LevelRangeFilter.\n\nLevelRangeFilter's logic, and what I would expect LevelMatchFilter to use, is \nto return a Filter.DENY when the levels don't match,  Filter.ACCEPT if they \nmatch and property acceptOnMatch is true and Filter.NEUTRAL if acceptOnMatch \nis false to allow other filters to process a \"valid\" level event for this \nappender.\n\nRight now, I'm using an appender for which I would like to only process events \nthat are of level INFO.  So I assume a LevelMatchFilter would do the job since \nit attempt to do an exact match of levels.  Unfortunately, the appender is \nrecording ALL levels.  \n\nThe only way you can get it working as expected is to do what is stated in the \ncomment for bug #6773 http://nagoya.apache.org/bugzilla/show_bug.cgi?id=6773 \nwhich is to add a second filter DenyAllFilter.", "bug_id": 24803, "attachment_id": null, "id": 47588, "time": "2003-11-18T22:56:23Z", "creator": "egravel_fl@hotmail.com", "creation_time": "2003-11-18T22:56:23Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 24803, "text": "It would be worth posting the configuration information (i.e. config file \nsnippet) that you are using for the LevelMatchFilter.  That might assist us in \nhelping with any confusion.  Your requirements should be able to be met by the \nLevelMatchFilter without the need for another filter.\n\ncheers,\n\nPaul Smith", "id": 47589, "time": "2003-11-18T23:03:36Z", "creator": "paul.smith@lawlex.com.au", "creation_time": "2003-11-18T23:03:36Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "egravel_fl@hotmail.com", "attachment_id": null, "text": "What I'm trying to do is output to a log file only message that are of level \nINFO  using DailyRollingFileAppender.  Anything above or below info should not \nbe written to the log file.  So to do this I had added a LevelMatchFilter to \nmy appender with a match level of info.\n\nHere's the snippet...  \n\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" \ndebug=\"false\">\n\n  <appender name=\"AS400Connector_Info_FileAppender\" \nclass=\"org.apache.log4j.DailyRollingFileAppender\">\n    <param name=\"File\"   value=\"AS400_INFO.log\" />\n    <param name=\"Append\" value=\"true\" />\n    <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\" />\n    \n    <layout class=\"org.apache.log4j.PatternLayout\">\n      <param name=\"ConversionPattern\" value=\"[%d{EEEE, MMMM dd, yyyy - \nHH:mm:ss:SSS zzz}] %-5p - %m%n\"/>\n    </layout>      \n    \n    <filter class=\"com.interval.core.util.LevelMatchFilter\">\n      <param name=\"LevelToMatch\" value=\"INFO\" />\n      <param name=\"AcceptOnMatch\" value=\"true\" />\n    </filter>\n  </appender>\n\n  <logger name=\"com.interval.core.connector\" additivity=\"true\">\n    <level value=\"all\" />\n    <appender-ref ref=\"AS400Connector_Info_FileAppender\" />\n      <appender-ref ref=\"AS400Connector_Error_FileAppender\" />\n    <appender-ref ref=\"AS400Connector_Debug_FileAppender\" />\n  </logger>\n\n</log4j:configuration>", "id": 47625, "time": "2003-11-19T15:12:26Z", "bug_id": 24803, "creation_time": "2003-11-19T15:12:26Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "ccorsi@progress.com", "is_private": false, "count": 3, "id": 47626, "time": "2003-11-19T15:19:59Z", "bug_id": 24803, "creation_time": "2003-11-19T15:19:59Z", "text": "Paul,\n\nI have just recently noticed the same problem. The problem is within the decide\nmethod. The problem is if it does not find a match it will return Filter.NEUTRAL\nand this implies that the message can be logged. \n\nI would consider changing the code from:\n\n    if(matchOccured) {  \n      if(this.acceptOnMatch)\n\t  return Filter.ACCEPT;\n      else\n\t  return Filter.DENY;\n    } else {\n      return Filter.NEUTRAL;\n    }\n\nto:\n\n    if(this.acceptOnMatch) {\n      if(matchOccured)\n\t  return Filter.ACCEPT;\n      else\n\t  return Filter.DENY;\n    } else {\n      return Filter.NEUTRAL;\n    }\n\nThis seems to be the correct logic IMO.\n\nAgain, this needs to be reviewed by the log4j group.\n\n--Claudio\n\n"}, {"count": 4, "tags": [], "text": "Exactly, at least that's what I thought it should do.  The code that is \ncurrently there does what the javadocs says but not really what the class name \nseems to imply when comparing it to another filter such as LevelRangeFiler \nwhich returns DENY is level is out of range, ACCEPT if it matches and \nAcceptOnMatch is true else NEUTRAL.\n\nSo I went and create a LevelMatchFilter in my application utility package and \nmade the correction to the decide() method's logic.  \n\nNow I'm simply wondering if anyone else agrees and if this should be corrected \nin the distribution?", "attachment_id": null, "id": 47627, "creator": "egravel_fl@hotmail.com", "time": "2003-11-19T15:24:44Z", "bug_id": 24803, "creation_time": "2003-11-19T15:24:44Z", "is_private": false}, {"count": 5, "tags": [], "creator": "egravel_fl@hotmail.com", "attachment_id": null, "text": " \nArgh, I'm getting conflicting information now that I'm digging deeper in this \nissue.  I've been reviewing chapter 6 of Ceki's Log4J book and it clearly \nstates that messages are only to be DENY if they match and acceptOnMatch is \nfalse.  If it is set to true then ACCEPT is return.  So if there's no match \nthen NEUTRAL is returned.\n\nQuoting his book:\n\n[page 143, example with a StringMatchFilter followed by LevelMatchFilter]\n\n\"Contrary to the previous filter chain, instead of denying events on match, \nthis chain accepts events when a match occurs.  This filter chain is \nincorporated in the configuration script filter2.xml.  Applying it to the \nchapter6.Sample1 application you should notice that NOT ONLY ARE THE \nDESIGNATED EVENTS ALLOWED TO PASS THROUGH, BUT SO ARE ALL OTHER EVENTS.  \nIndeed, the filter chain in Example 6-2 is incomplete because it lets certain \nevents pass through but does not specify the events to block.  AT THE END OF \nTHE CHAIN, EVENTS THAT HAVE BEEN NEITHER REJECTED NOR ACCEPTED ARE PROCESS \nNORMALLY - THEY ARE IMPLICITLY ACCEPTED.  The following filter chain accepts \nevents containing the string \"teacher\" as well as all events of level INFO.  \nHowever, it denies all other events not matching these two criteria.\"\n\n\nIn order to filter out those that don't match, we need to add a DenyAllFilter \nat the end so that if an event is is NEUTRAL when it reaches the end, it is \nfiltered out.\n\n\nOk, so if I understand how filter really works this time... could it be that \nI'm getting confused by the way LevelRangeFilter works?  It denies if level is \nout of range and returns accept if it matches and acceptOnMatch is true, else \nreturns NEUTRAL?  This is the opposite logic of all the other filters I've \nlooked at now.", "id": 47631, "time": "2003-11-19T16:40:59Z", "bug_id": 24803, "creation_time": "2003-11-19T16:40:59Z", "is_private": false}, {"count": 6, "tags": [], "text": "Eric,\n\nI reread the LevelMatchFilter javadoc and what they developed was logically\ncorrect but the problem I have is that the name of the filter does not make\nsense to me. This class should really be renamed to something clearer.\n\nThe name of the class does not correctly describe its functionality because it\nwill accept the logging of messages if there is no match. This makes absolutely\nno sense to me because of the name of the filter.\n\nI have come to an understanding of why this filter was created this way. It was\ndesigned this way to allow someone to define multiple filters for logging. We\ncan add LevelMatchFilter for INFO, WARN, and FATAL. We would then expect to log\nonly messages with these different levels.\n\nThe way that the AppenderSkeleton class processes these filters is upon\nreceiving a single DENY result it will not log the message. It will log the\nmessage if it continues to see only NEUTRAL results or a single ACCEPT result.\n\nHere is the code within the AppenderSkeleton class:\n\n    Filter f = this.headFilter;\n    \n    FILTER_LOOP:\n    while(f != null) {\n      switch(f.decide(event)) {\n      case Filter.DENY: return;\n      case Filter.ACCEPT: break FILTER_LOOP;\n      case Filter.NEUTRAL: f = f.next;\n      }\n    }\n    \n    this.append(event);    \n\nThe other interesting point that I wanted to make about this Appender has to do\nwith the threshold. If the Appender threshold is less than or equal to the\nmessage level. It will be compared to the Appender filters. Since INFO is\nbasically the lowest level besides ALL. These messages will always be compared\nto the Appender filter.\n\nI then wonder why the filter check was done this way. It seems to me that it\ndoes not perform what is expected. I understand why they do not want to append a\nmessage that a filter return DENY but shouldn't it also consider continuing to\ncheck that the other filters don't return an ACCEPT result?\n\nI would then consider changing the while to do the following:\n\n    boolean isDenied = false;\n    boolean isAccepted = false;\n    Filter f = this.headFilter;\n    \n    while(f != null) {\n      switch(f.decide(event)) {\n      case Filter.DENY: isDenied = true; break;\n      case Filter.ACCEPT: isAccepted = true; break;\n      case Filter.NEUTRAL: break;\n      }\n      f = f.next;\n    }\n\n    // Only refuse events that have been denied and never accepted.\n    if( isDenied && ! isAccepted )\n       return;\n\n    this.append(event);    \n\nAgain, this is something that the log4j developers need to consider.\n", "is_private": false, "id": 47632, "creator": "ccorsi@progress.com", "time": "2003-11-19T16:42:44Z", "bug_id": 24803, "creation_time": "2003-11-19T16:42:44Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "egravel_fl@hotmail.com", "is_private": false, "count": 7, "id": 47636, "time": "2003-11-19T17:18:39Z", "bug_id": 24803, "creation_time": "2003-11-19T17:18:39Z", "text": "Claudio,\n\nThat's what I also gathered (see my post at 16:40) after reading over Ceki's \nbook and studying further the filter's code.  It's a matter of really \nunderstanding how filtering works.  I'm ok with the names now.  I would just \nlook at the LevelRangeFilter to make sure it's following this filtering \nstructure, which I don't think it is now.\n\n\nAs for what you were saying about continuing down the chain even on deny.  \nFrom what I see, the chain processing works in an OR fashion.  First match \nreturns, whether it be DENY or ACCEPT, and is logged if is NEUTRAL and there's \nno DenyAllFilter at the end.\n\nThis raised a question/concern that I posted in the user mailing list.  What \nif you want to use the filters in an AND condition fashion?  Example, only log \nevents if they are of level INFO and the message text contains \"test\".  I \ncan't figure out how you could do this currently?\n\n"}, {"attachment_id": null, "tags": [], "creator": "ccorsi@progress.com", "is_private": false, "count": 8, "id": 47644, "time": "2003-11-19T18:47:09Z", "bug_id": 24803, "creation_time": "2003-11-19T18:47:09Z", "text": "Eric,\n\nUnfortunately, you will need to create your own filter that is a combination of\nthe LevelMatchFilter and StringMatchFilter.\n\n--Claudio"}, {"count": 9, "text": "Thanks Claudio, that's what I thought I'd end up having to do.  \n\nBefore I continue with my findings on an AND type filter, I wanted to know if \nyou were able to verify if LevelRangeFilter (not LevelMatchFilter) does work \nthe way we have determined the filters to be working?\n\n\nI got a reply to my post on the user list about this issue and got a reply \nback from Scott Deboy.  He mentionned having contributed an ExpressionFilter \nthat should be in the next distribution, which should handle such case.\n\n\nHere's what he wrote:\n\nI'm not sure about whether this capability is available using the latest \ndistribution's set of filters, but I've contributed a simple expression \nlanguage and an ExpressionFilter (should be a part of the next release) which \nprovide support for expressions using a number of operators, grouping \n(parens), AND, OR and NOT operators, etc..  You will be able to define an \nexpression like:\n\n\"( LEVEL == INFO ) && ( MSG == TEST )\"", "bug_id": 24803, "attachment_id": null, "id": 47645, "time": "2003-11-19T18:55:47Z", "creator": "egravel_fl@hotmail.com", "creation_time": "2003-11-19T18:55:47Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "text": "ExpressionFilter is now part of the org.apache.log4j.varia package.  Please use \nthe log4j-user mailing list for such discussions, as Bugzilla is not a good \ndiscussion forum.  Thanks.", "is_private": false, "id": 68510, "creator": "yoavs@computer.org", "time": "2004-12-14T21:18:05Z", "bug_id": 24803, "creation_time": "2004-12-14T21:18:05Z", "attachment_id": null}]
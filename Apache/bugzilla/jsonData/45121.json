[{"count": 0, "tags": [], "creator": "steven.feinstein@ingenix.com", "attachment_id": null, "is_private": false, "id": 117292, "time": "2008-06-03T07:27:27Z", "bug_id": 45121, "creation_time": "2008-06-03T07:27:27Z", "text": "Using the following:\n        <javac srcdir=\"${src}:${version_src}\"\n                destdir=\"${build}/build/etl\"\n                debug=\"on\"\n                classpath=\"${cp};${maintainer_jar};${build}/build/etl\"\n                deprecation=\"on\"\n                includes=\"com/uhg/iegnpd/base/**, com/uhg/iegnpd/etl/**, com/uhg/iegnpd/version/**\"\n        />\n\nThe jar referenced by ${maintainer_jar} contains classes used by classes in the includes portion.  Those classes occur in the same source path as referenced by ${src}.\n\nWhen this executes, not only are the files in the includes compiled, but any file also under the ${src} tree that is referenced by them is compiled.\n\nI tried adding an excludes, but that did not help.\n\nThis worked fine under jdk 1.6 update 1.  So this seems to be specific to jdk 1.6 update 6."}, {"count": 1, "tags": [], "creator": "ddevienne@gmail.com", "attachment_id": null, "text": "This has been the behavior of Javac forever. You need to add sourcepath=\"\" to force Javac to not compile dependent classes. --DD", "id": 117293, "time": "2008-06-03T07:41:22Z", "bug_id": 45121, "creation_time": "2008-06-03T07:41:22Z", "is_private": false}]
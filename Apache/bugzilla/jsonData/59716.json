[{"count": 0, "tags": [], "bug_id": 59716, "attachment_id": 33957, "id": 191750, "time": "2016-06-17T14:43:16Z", "creator": "lucastheisen@apache.org", "creation_time": "2016-06-17T14:43:16Z", "is_private": false, "text": "Created attachment 33957\nSource code for the delegating filter and integration test.\n\nCurrently the CorsFilter is configured by init-param's.  This makes configuration compile time (as it would be stored in the deployment artifact).  In my experience, CORS configuration is environmental (I have a different set of allowed origins based on where I deploy my app: dev/qa/production), and as such should be runtime.  Pushing config to JNDI (or at least allowing override in JNDI) allows you to configure the same artifact differently depending on environment.  I have written a filter that delegates to the CorsFilter to allow for JNDI config (which i will attach), but it would be quite simple and useful to move this functionality into the core filter.  I would be willing to patch the filter as well if you are interested in this approach..."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Moving to an enhancement request.\n\nTomcat typically handles this via property replacement [1].\n\n[1] http://tomcat.apache.org/tomcat-9.0-doc/config/index.html", "id": 191850, "time": "2016-06-20T18:55:26Z", "bug_id": 59716, "creation_time": "2016-06-20T18:55:26Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Fair enough...  I just find it easier to have all my application config in one place (GlobalNamingResources), rather than multiple (setenv.sh and GlobalNamingResources).  In any case, your suggestion would satisfy my requirement to have a single build be configurable differently per environment, so feel free to close this ticket.", "attachment_id": null, "id": 191851, "creator": "lucastheisen@apache.org", "time": "2016-06-20T19:04:04Z", "bug_id": 59716, "creation_time": "2016-06-20T19:04:04Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 51653, "text": "Created attachment 27379\nSample webapp demonstrating the issue\n\nI use Tomcat 7.0.19, jdk 1.7.0-b147, Ubuntu Linux 11.04.\n\nSteps to reproduce:\n1. declare error page for 404 code in web.xml\n2. Set location of that page to some servlet (let's call it ErrorServlet)\n3. go to any invalid URL in webapp (to cause 404)\n4. ErrorServlet is called after requestDestroyed on any registered listener.\nThis kind of behaviour is not correct in my opinion because it\ncontradicts to contract of ServletRequestListener.\nAlso it breaks org.springframework.web.context.request.RequestContextListener\nif ErrorServlet uses session-scoped beans.\n\nDescription of the attached war file:\n1. wheleph.RequestContextListener sets a local variable in requestInitialized and resets it in requestDestroyed\n2. wheleph.SecondServlet writes to System.out the value of that variable thus showing whether it was called between requestInitialized and requestDestroyed or not. It's registered as 404 handler.\n3. To reproduce the bug go to any invalid url (like http://localhost:8080/SpringListenerPOC/abcd) and see the message in log: \n\"SecondServlet\nin scope: false\"\n\nThe relevant thread from dev.tomcat.apache.org:\n\nOn 09/08/2011 20:55, Volodymyr Sobotovich wrote:\n> Hello, everyone.\n>\n> I think I have found a bug in Tomcat's lifecycle handling of\n> ServletRequestListener. I'd like to discuss it here before posting.\n> Tomcat 7.0.19, jdk 1.7.0-b147, Ubuntu Linux 11.04\n> Steps to reproduce:\n> 1. declare error page for 404 code in web.xml\n> 2. Set location of that page to some servlet (let's call it ErrorServlet)\n> 3. go to any invalid URL in webapp (to cause 404)\n> 4. ErrorServlet is called after requestDestroyed on any registered listener.\n> This kind of behaviour is not correct in my opinion because it\n> contradicts to contract of ServletRequestListener.\n> Also it breaks org.springframework.web.context.request.RequestContextListener\n> if ErrorServlet uses session-scoped beans.\n>\n> What do you think about that. Should I post in to Bugzilla?\n\nHmm.\n\nThe error page handling is currently at the host level. One could argue\nthe listeners are being fired in the right place (when processing\nenters/leaves the context). However, custom error pages defined by the\nweb app are currently outside the listener calls and that doesn't seem\nright.\n\nAddressing this would mean either:\na) moving the error handling to the context (inside the calls to the\nServletRequestListener) or\nb) moving the calls to ServletRequestListener to the host level\n\nI am leaning towards a) but wondering why things are the way the are\ncurrently.\n\nI'd suggest leaving this on the dev list for other folks to comment and\nthen add it to BZ in a couple of days unless the consensus is that it is\nnot a bug. The next 7.0.x release won;t be until early Sept so there is\nplenty of time to get this right.\n\nMark\n\n=======================================================================\nMark,\n\nOn 8/9/2011 4:35 PM, Mark Thomas wrote:\n> Addressing this would mean either:\n> a) moving the error handling to the context (inside the calls to the\n> ServletRequestListener) or\n\n+1\n\nThis just feels like the right state management level to me. Certainly\nthe default error handler can be called just as easily from this level\nof the code.\n\n-chris", "id": 148577, "attachment_id": 27379, "creator": "wheleph@gmail.com", "creation_time": "2011-08-12T06:01:59Z", "time": "2011-08-12T06:01:59Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 51653, "is_private": false, "text": "This has been fixed in trunk and 7.0.x and will be included in 7.0.21 onwards.", "id": 148617, "time": "2011-08-15T17:08:35Z", "creator": "markt@apache.org", "creation_time": "2011-08-15T17:08:35Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "wheleph@gmail.com", "text": "Thanks for the prompt fix! I think it's also worth including in Tomcat 6 which is widely used now because this seems to be inaccuracy in implementation of Servlet specification. How do you think?", "id": 148618, "attachment_id": null, "bug_id": 51653, "creation_time": "2011-08-15T17:35:46Z", "time": "2011-08-15T17:35:46Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 51653, "is_private": false, "count": 3, "id": 149770, "time": "2011-09-26T17:48:19Z", "creator": "maminakis.stephan@ensco.com", "creation_time": "2011-09-26T17:48:19Z", "text": "Mark,\n\nI have just upgraded from 7.0.20 to 7.0.21 and I think this resolution has affected a very simple error page that I have had in my web app since Tomcat 5.  We have our own Realm which hits our Oracle database for the appropriate roles.\n\nI have the following in my web.xml:\n\n  <error-page>\n    <error-code>403</error-code>\n    <location>/badaccess.html</location>\n  </error-page>\n  ...\n  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>myadmin</web-resource-name>\n      <description>My Admin Application</description>\n      <url-pattern>/myadmin/*</url-pattern>\n      <http-method>GET</http-method>\n      <http-method>POST</http-method>\n    </web-resource-collection>\n    <auth-constraint>\n      <description>System Administrators</description>\n      <role-name>system_admin</role-name>\n    </auth-constraint>\n  </security-constraint>\n\nThe badaccess.html page lives in my web app (war) and simply displays a nice message to the user, letting him know he is going to an off-limits page.  Since I have upgraded to 7.0.21 this no longer works.  Instead, I get the standard Tomcat 403 error page.  Does the resolution to this issue require me to do something differently?  Again, this worked fine up until 7.0.20.\n\nThanks for any help,\nStephan"}, {"attachment_id": null, "tags": [], "bug_id": 51653, "is_private": false, "count": 4, "id": 149787, "time": "2011-09-27T00:49:36Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-09-27T00:49:36Z", "text": "(In reply to comment #3)\n> I have just upgraded from 7.0.20 to 7.0.21 and I think this resolution has\n> affected a very simple error page that I have had in my web app since Tomcat 5.\n\nYou are correct that this fix broke error pages processing for certain error codes. In short, for errors that occur before request reaches Context.\n\nIt has already been noticed and fixed. Will be in 7.0.22. (See changelog)."}, {"count": 5, "tags": [], "creator": "maminakis.stephan@ensco.com", "text": "Thanks for the confirmation and the information update!\n\nStephan", "id": 149831, "time": "2011-09-27T13:19:30Z", "bug_id": 51653, "creation_time": "2011-09-27T13:19:30Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "eitan.suez@gmail.com", "is_private": false, "count": 6, "id": 151202, "time": "2011-11-04T17:13:36Z", "bug_id": 51653, "creation_time": "2011-11-04T17:13:36Z", "text": "hello,\n i just upgraded a tomcat instance from v7.0.16 to v7.0.22.  the webapp in question uses spring security for login/authentication.  i noticed after upgrading that when triggering a logout using the spring-security-configured logout-url, i get this exception:\n\n----------------------\nSEVERE: Exception initializing page context\njava.lang.IllegalStateException: Cannot create a session after the response has been committed\n\tat org.apache.catalina.connector.Request.doGetSession(Request.java:2758)\n\tat org.apache.catalina.connector.Request.getSession(Request.java:2268)\n\tat org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:899)\n\tat javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:229)\n\tat org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:572)\n\tat org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:517)\n\tat org.apache.jasper.runtime.PageContextImpl._initialize(PageContextImpl.java:146)\n\tat org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:125)\n\tat org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:112)\n\tat org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:65)\n\tat org.apache.jsp.error_jsp._jspService(error_jsp.java:57)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:433)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)\n\tat org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:593)\n\tat org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:530)\n\tat org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:450)\n\tat org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:399)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:191)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:964)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:662)\n----------------------\n\ni narrowed down the version: 7.0.20 -- no exceptions\n7.0.21 -- i get the above exception\n\nmy guess is that code changes relating to this issue somehow causes the spring security logout url (which the spring security LogoutFilter handles) to be interpreted as an error.  After the LogoutFitler sends a redirect, tomcat's handling of the \"error\" request is somehow mucking with session after the response was committed.\n\ni wonder if the change introduced a bug or whether there's some configuration that perhaps i'm not doing properly on my end that could help me avoid this exception."}, {"count": 7, "tags": [], "bug_id": 51653, "is_private": false, "id": 151209, "creation_time": "2011-11-04T21:01:37Z", "time": "2011-11-04T21:01:37Z", "creator": "bugzilla@pidster.com", "text": "Did you just pick a bug at random and add your comments?\n\nPlease join the Tomcat Users mailing list and ask for help there - Bugzilla is not a support forum.", "attachment_id": null}, {"count": 8, "text": "(In reply to comment #7)\n> Did you just pick a bug at random and add your comments?\n> \nno.\n\n> Please join the Tomcat Users mailing list and ask for help there - Bugzilla is\n> not a support forum.\nok; got it, thanks.", "bug_id": 51653, "is_private": false, "id": 151272, "time": "2011-11-07T17:31:41Z", "creator": "eitan.suez@gmail.com", "creation_time": "2011-11-07T17:31:41Z", "tags": [], "attachment_id": null}]
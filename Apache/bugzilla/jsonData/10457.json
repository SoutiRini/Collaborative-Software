[{"count": 0, "tags": [], "bug_id": 10457, "attachment_id": null, "id": 18975, "time": "2002-07-03T21:26:29Z", "creator": "russtrotter@yahoo.com", "creation_time": "2002-07-03T21:26:29Z", "is_private": false, "text": "The following are two patches that I posted to the tomcat-dev mailing list but seemingly got ignored.   \nSomeone suggested I use the bug database to post the stuff so it could get better tracked.  So, here  \ngoes:  \n  \n  \nTwo patches cut-n-pasted below,   \ncatalina/src/share/org/apache/catalina/servlets/DefaultServlet.java  \ncatalina/src/share/org/apache/catalina/servlets/WebdavServlet.java  \n  \n  \nThere are two main pieces to this patch:  \n  \n  \n1)  The addition of an \"isDefaultServlet\" initialization parameter to the   \nWebdavServlet  \n   \n  \n   This allows the webdav servlet to be integrated as both the default servlet   \nas well as a url-pattern prefix servlet.  Some small mods are made to   \ngenerate correct HREF's in a PROPFIND request based on this parameter value.  \n  \n  \n2) Parameterize getResources() DefaultServlet and WebdavServlet to pass in a   \nHttpServletRequest object so that DirContext's  can be created by derived   \nservlets to return DirContext's on other request-based parameters, either in   \nthe URL or session or whatever.  The default behavior is to simply ignore the   \nHttpServletRequest parameter and return the same DirContext that has always   \nbeen returned (the one created on webapp initialization).  \n  \n  \nLemme know if this can be applied by somebody.  Thanks  \nruss  \n  \nIndex: WebdavServlet.java  \n===================================================================  \nRCS file:  \n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/servlets/WebdavServlet.java,v  \nretrieving revision 1.25.2.2  \ndiff -u -r1.25.2.2 WebdavServlet.java  \n--- WebdavServlet.java\t1 Apr 2002 18:17:43 -0000\t1.25.2.2  \n+++ WebdavServlet.java\t24 Jun 2002 18:33:09 -0000  \n@@ -1,5 +1,5 @@  \n /*  \n- * $Header:  \n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/servlets/WebdavServlet.java,v  \n1.25.2.2 2002/04/01 18:17:43 remm Exp $  \n+ * $Header:  \n/home/cvs/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/servlets/WebdavServlet.java,v  \n1.25.2.2 2002/04/01 18:17:43 remm Exp $  \n  * $Revision: 1.25.2.2 $  \n  * $Date: 2002/04/01 18:17:43 $  \n  *  \n@@ -249,6 +249,19 @@  \n      */  \n     private String secret = \"catalina\";  \n  \n+  \n+    /**  \n+     * This flag keeps track of whether the servlet is invoked as the \"default\"  \n+     * servlet for the web application.  We need to know the difference  \n+     * since the because we use HttpServletRequest methods to generate  \n+     * HREF's in the XML that gets returned for PROPFIND, etc.  In testing,  \n+     * depending on the Webdav client and if this servlet is  \n+     * a default servlet the behavior of getServletPath()  \n+     * and getPathInfo() varies.  A user must put \"true\" in the web.xml  \n+     * for this init parameter if the <url-pattern> for the servlet  \n+     * is the string \"/\".  \n+     */  \n+    private boolean isDefaultServlet = true;  \n  \n     // --------------------------------------------------------- Public Methods  \n  \n@@ -266,6 +279,9 @@  \n             value = getServletConfig().getInitParameter(\"secret\");  \n             if (value != null)  \n                 secret = value;  \n+  \n+            value = getServletConfig().getInitParameter(\"isDefaultServlet\");  \n+            isDefaultServlet = new Boolean(value).booleanValue();  \n         } catch (Throwable t) {  \n             ;  \n         }  \n@@ -292,7 +308,6 @@  \n         return documentBuilder;  \n     }  \n  \n-  \n     /**  \n      * Handles the special WebDAV methods.  \n      */  \n@@ -365,7 +380,7 @@  \n         String methodsAllowed = null;  \n  \n         // Retrieve the resources  \n-        DirContext resources = getResources();  \n+        DirContext resources = getResources(req);  \n  \n         if (resources == null) {  \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  \n@@ -504,7 +519,7 @@  \n         }  \n  \n         // Retrieve the resources  \n-        DirContext resources = getResources();  \n+        DirContext resources = getResources(req);  \n   \n         if (resources == null) {  \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  \n@@ -700,7 +715,7 @@  \n         }  \n   \n         // Retrieve the resources  \n-        DirContext resources = getResources();  \n+        DirContext resources = getResources(req);  \n   \n         if (resources == null) {  \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  \n@@ -1038,7 +1053,7 @@  \n         lock.path = path;  \n   \n         // Retrieve the resources  \n-        DirContext resources = getResources();  \n+        DirContext resources = getResources(req);  \n   \n         if (resources == null) {  \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  \n@@ -1594,7 +1609,7 @@  \n         // Overwriting the destination  \n   \n         // Retrieve the resources  \n-        DirContext resources = getResources();  \n+        DirContext resources = getResources(req);  \n   \n         if (resources == null) {  \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  \n@@ -1779,7 +1794,7 @@  \n         }  \n   \n         // Retrieve the resources  \n-        DirContext resources = getResources();  \n+        DirContext resources = getResources(req);  \n   \n         if (resources == null) {  \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  \n@@ -2003,6 +2018,12 @@  \n         generatedXML.writeElement(null, \"href\", XMLWriter.OPENING);  \n   \n         String href = req.getContextPath();  \n+        if (!isDefaultServlet)  \n+        {  \n+          // A non-default servlet will need to have the url-pattern from  \n+          // getServletPath() appended so the HREF's get generated correctly.  \n+          href += req.getServletPath();  \n+        }  \n         if ((href.endsWith(\"/\")) && (path.startsWith(\"/\")))  \n             href += path.substring(1);  \n         else \n \nIndex: DefaultServlet.java \n=================================================================== \nRCS file: \n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/servlets/DefaultServlet.java,v \nretrieving revision 1.39.2.6 \ndiff -u -r1.39.2.6 DefaultServlet.java \n--- DefaultServlet.java\t18 Apr 2002 03:08:04 -0000\t1.39.2.6 \n+++ DefaultServlet.java\t24 Jun 2002 18:33:23 -0000 \n@@ -1,5 +1,5 @@ \n /* \n- * $Header: \n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/servlets/DefaultServlet.java,v \n1.39.2.6 2002/04/18 03:08:04 billbarker Exp $ \n+ * $Header: \n/home/cvs/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/servlets/DefaultServlet.java,v \n1.39.2.6 2002/04/18 03:08:04 billbarker Exp $ \n  * $Revision: 1.39.2.6 $ \n  * $Date: 2002/04/18 03:08:04 $ \n  * \n@@ -344,6 +344,18 @@ \n \n \n     /** \n+     * Return a DirContext.  This can be overridden in subclasses to return \n+     * different kind of DirContexts if desired, perhaps based on data in the \n+     * request.  By, default we call DefaultServlet's getResources() to return \n+     * the context-configured resource. \n+     */ \n+    protected DirContext getResources(HttpServletRequest request) \n+    { \n+      return getResources(); \n+    } \n+ \n+ \n+    /** \n      * Get resources. This method will try to retrieve the resources through \n      * JNDI first, then in the servlet context if JNDI has failed (it could be \n      * disabled). It will return null. \n@@ -588,7 +600,7 @@ \n         } \n \n         // Retrieve the resources \n-        DirContext resources = getResources(); \n+        DirContext resources = getResources(req); \n \n         if (resources == null) { \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); \n@@ -655,7 +667,7 @@ \n \n         // Retrieve the Catalina context \n         // Retrieve the resources \n-        DirContext resources = getResources(); \n+        DirContext resources = getResources(req); \n \n         if (resources == null) { \n             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); \n@@ -1049,7 +1061,7 @@ \n         } \n \n         // Retrieve the Catalina context and Resources implementation \n-        DirContext resources = getResources(); \n+        DirContext resources = getResources(request); \n         ResourceInfo resourceInfo = new ResourceInfo(path, resources); \n  \n         if (!resourceInfo.exists) {"}, {"count": 1, "tags": [], "text": "Created attachment 2255\npatch for DefaultServlet", "is_private": false, "bug_id": 10457, "id": 18976, "time": "2002-07-03T21:29:02Z", "creator": "russtrotter@yahoo.com", "creation_time": "2002-07-03T21:29:02Z", "attachment_id": 2255}, {"count": 2, "tags": [], "creator": "russtrotter@yahoo.com", "attachment_id": 2256, "is_private": false, "id": 18977, "time": "2002-07-03T21:29:27Z", "bug_id": 10457, "creation_time": "2002-07-03T21:29:27Z", "text": "Created attachment 2256\npatch for WebdavServlet"}, {"count": 3, "tags": [], "bug_id": 10457, "attachment_id": null, "id": 142710, "time": "2010-12-14T18:06:00Z", "creator": "markt@apache.org", "creation_time": "2010-12-14T18:06:00Z", "is_private": false, "text": "The changes to the WebDAV servlet should be unecessary. The WebDAV sevrlet can be used as the DefaultServlet in all current Tomcat versions.\n\nThe changes to the DefaultServlet can no loonger be applied. The DefaultServlet has moved in a direction that is no longer compatible with this patch."}]
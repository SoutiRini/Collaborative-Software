[{"count": 0, "text": "Currently Realm authentication has no way to tell the user precisely what went\nwrong with their login request. The authenticate() methods in the Realm\ninterface return an authenticated Principal or null to indicate authentication\nfailure - no helpful information, such as 'Your Account has been disabled' or\n'Your Account has expired', can be returned by the underlying authentication\nservice.\n\nPersonally, I'm particularly interested in the JAASRealm implementation. JAAS\nallows the LoginContext implementation to return a\njavax.security.auth.login.LoginException in the case of failure, with useful\nsubclasses like 'AccountExpiredException'. Currently Catalina's JAASRealm will\nlog these exceptions, but due to the signature of the authenticate() method in\nthe Realm interface, can't return that information to the user and has to throw\nit away. (There's also the possibility of the JAAS authenticator making a\nTextOutputCallback, though this is currently unsupported by the catalina\nJAASCallbackHandler, and it's not immediately obvious to me how it could be...!)\n\nAdding the facility to return this information would allow a better user\nexperience to be supported - not at the expense of security, it's not the\nintention to return messages like 'You got the username right, but have another\ngo at the password!' - but it's hard to see how it could be done without a\nchange to the Realm interace, probably breaking external implementations of Realm.\n\nDo you fine folks have any ideas?!\n\ncheers,\n\nRoberto", "creator": "roberto.tyley@reuters.com", "attachment_id": null, "id": 50182, "time": "2004-01-07T14:40:28Z", "bug_id": 25953, "creation_time": "2004-01-07T14:40:28Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 25953, "attachment_id": null, "id": 51435, "time": "2004-01-29T22:29:25Z", "creator": "carlows@unerj.br", "creation_time": "2004-01-29T22:29:25Z", "is_private": false, "text": "The problem is that it doesn't worth the pain of changing the API just to make \nthis feature possible, maybe when refactoring the realms API (I'm not saying \nit's gonna happen) it can be done.  "}, {"count": 2, "tags": [], "bug_id": 25953, "attachment_id": null, "id": 51443, "time": "2004-01-29T23:23:52Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2004-01-29T23:23:52Z", "is_private": false, "text": "For the record, the design of the Realm API in this regard was intentional. \nTelling your user that they got the password wrong (for example) tells a\npotential hacker that they got the username right.  That's a bad security practice.\n\nCraig McClanahan"}, {"count": 3, "text": "Yep, that's obviously a case where you would be reducing security by handing the\npotential hacker information - though those kind of messages really aren't what\nthis RFE was for - I was trying to address the situation where a legitimate user\nhas the right username and password, but their account has been disabled or\nexpired for some reason, and the authentication mechanism would like to tell the\nuser why.\n\nI can understand that the API change isn't worth the pain though - if API\nfriction wasn't a problem, it would be nice to find a way to state a contract to\nonly return the 'right' sort of information, ie information that doesn't impact\non security. In the case of JAAS you could say that, hey, explicitly reporting\nan AccountExpiredException is ok, but a FailedLoginException should have a\ngeneric message.\n\nRoberto", "creator": "roberto.tyley@reuters.com", "is_private": false, "id": 51454, "time": "2004-01-30T09:45:42Z", "bug_id": 25953, "creation_time": "2004-01-30T09:45:42Z", "tags": [], "attachment_id": null}]
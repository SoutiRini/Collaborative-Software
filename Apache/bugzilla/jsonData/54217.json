[{"count": 0, "attachment_id": 29646, "creator": "informatik0101@gmail.com", "is_private": false, "id": 163693, "time": "2012-11-28T10:35:43Z", "bug_id": 54217, "creation_time": "2012-11-28T10:35:43Z", "tags": [], "text": "Created attachment 29646\nException stack trace\n\nI am developing a Java EE web application in Eclipse Juno. I have configured Tomcat to use JDBC connection pool (org.apache.tomcat.jdbc.pool) along with PostgreSQL database. Here are the configurations in my project's META-INF/context.xml:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Context>\n    <!-- Configuration for the Tomcat JDBC Connection Pool -->\n    <Resource name=\"jdbc/someDB\"\n        type=\"javax.sql.DataSource\"\n        auth=\"Container\"\n        factory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\n        driverClassName=\"org.postgresql.Driver\"\n        url=\"jdbc:postgresql://localhost:5432/somedb\"\n        username=\"postgres\"\n        password=\"12345\"\n        maxActive=\"100\"\n        minIdle=\"10\"\n        initialSize=\"10\"\n        validatonQuery=\"SELECT 1\"\n        validationInterval=\"30000\"\n        removeAbandoned=\"true\"\n        removeAbandonedTimeout=\"60\"\n        abandonWhenPercentageFull=\"50\" />\n</Context>\n\nMy application is deployed to Tomcat using Eclipse, and in Tomcat's context.xml an attribute reloadable is set to \"true\" to automatically reload the web application if a change is detected:\n\n<Context reloadable=\"true\">\n\nI have noticed that every time the above mentioned automatic reload is happening 10 more connections to PostgreSQL db is reserved (because in webapp's context.xml initialSize=\"10\"). So after 10 changes a PSQLException is thrown:\n\norg.postgresql.util.PSQLException: FATAL: sorry, too many clients already\n...\n(full stack in attachment)\n\nIf I manually restart Tomcat - everything is fine and just 10 connections are reserved. And I am closing all ResultSets, Statements/PrepareStatements, Connections in the finally block.\n\nWould be great if this issue could be fixed, so that it could be possible to develop with reloadable set to \"true\" and not cause pooling more connections every time the context is reloaded.\n\nP.S.\nApache Tomcat 7.0.32\nJava(TM) SE Runtime Environment (build 1.7.0_09-b05)\nEclipse Juno Service Release 1\nPostgreSQL version 9.1\nDB driver: postgresql-9.1-902.jdbc4.jar"}, {"count": 1, "tags": [], "text": "You are not closing your connection pool properly. You need to specify closeMethod=\"close\". Without that the pool would not know when to close those 10 \"minIdle\" connections.\n\nThe attribute is documented here:\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/context.html#Resource_Definitions\n\n\nThis is going to be close as INVALID. Just holding it open for a while as a chance to improve documentation: it would be better to add closeMethod to the examples in jndi-datasource-examples-howto.html", "is_private": false, "bug_id": 54217, "id": 163722, "time": "2012-11-29T06:21:42Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-11-29T06:21:42Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "informatik0101@gmail.com", "is_private": false, "id": 163736, "time": "2012-11-29T15:34:47Z", "bug_id": 54217, "creation_time": "2012-11-29T15:34:47Z", "tags": [], "text": "(In reply to comment #1)\n> You are not closing your connection pool properly. You need to specify\n> closeMethod=\"close\". Without that the pool would not know when to close\n> those 10 \"minIdle\" connections.\n> \n> The attribute is documented here:\n> http://tomcat.apache.org/tomcat-7.0-doc/config/context.\n> html#Resource_Definitions\n> \n> \n> This is going to be close as INVALID. Just holding it open for a while as a\n> chance to improve documentation: it would be better to add closeMethod to\n> the examples in jndi-datasource-examples-howto.html\n\nThank you so much for your help!\nI added the attribute closeMethod=\"close\" to the Resource element in my \n/META-INFO/context.xml and it works!\n\nI asked about how to handle this issue on stackoverflow.com and nobody seems to know. So I'll post the answer to my question myself referencing this page and your help.\n\n\u0421\u043f\u0430\u0441\u0438\u0431\u043e!"}, {"count": 3, "tags": [], "creator": "1983-01-06@gmx.net", "text": "(In reply to comment #1)\n> You are not closing your connection pool properly. You need to specify\n> closeMethod=\"close\". Without that the pool would not know when to close\n> those 10 \"minIdle\" connections.\n> \n> The attribute is documented here:\n> http://tomcat.apache.org/tomcat-7.0-doc/config/context.\n> html#Resource_Definitions\n> \n> \n> This is going to be close as INVALID. Just holding it open for a while as a\n> chance to improve documentation: it would be better to add closeMethod to\n> the examples in jndi-datasource-examples-howto.html\n\nThis attribute is not available to Tomcat 6, is it? I checked the docs. Seems to be Tomcat 7 specific. I am using JDBC Pool happily with Tomcat 6 in production.", "id": 163745, "time": "2012-11-30T19:00:57Z", "bug_id": 54217, "creation_time": "2012-11-30T19:00:57Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 54217, "text": "There looks to be a memory leak here. Stopping the context should make the connections eligible for GC but a reference is being retained by the PoolCleaner thread.", "id": 163778, "time": "2012-12-03T10:54:58Z", "creator": "markt@apache.org", "creation_time": "2012-12-03T10:54:58Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 54217, "attachment_id": null, "is_private": false, "id": 163785, "time": "2012-12-03T11:47:01Z", "creator": "markt@apache.org", "creation_time": "2012-12-03T11:47:01Z", "text": "Confirmed. This is a memory leak bug in jdbc-pool. PoolCleaner instances are retaining references to the ConnectionPool preventing it from being GC'd."}, {"count": 6, "tags": [], "bug_id": 54217, "is_private": false, "text": "This has been fixed in trunk and 7.0.x and will be included in 7.0.34 onwards.", "id": 163786, "time": "2012-12-03T11:48:44Z", "creator": "markt@apache.org", "creation_time": "2012-12-03T11:48:44Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "creator": "informatik0101@gmail.com", "text": "(In reply to comment #6)\n> This has been fixed in trunk and 7.0.x and will be included in 7.0.34\n> onwards.\n\nWow it turned out to be a bug. Glad I unintentionally found it )\n\nI will update my answer on StackOverflow.com\n\nThank you for the clarification!", "id": 163790, "time": "2012-12-03T12:38:46Z", "bug_id": 54217, "creation_time": "2012-12-03T12:38:46Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 54217, "attachment_id": null, "text": "(In reply to comment #5)\n> Confirmed. This is a memory leak bug in jdbc-pool. PoolCleaner instances are\n> retaining references to the ConnectionPool preventing it from being GC'd.\n\nIt still doesn't make the closeMethod call obsolete, does it?", "id": 163800, "time": "2012-12-03T16:55:51Z", "creator": "1983-01-06@gmx.net", "creation_time": "2012-12-03T16:55:51Z", "is_private": false}, {"count": 9, "tags": [], "creator": "markt@apache.org", "text": "As per the docs for closeMethod, that method exists solely to speed up the freeing of resources that would otherwise be freed by GC.", "id": 163801, "time": "2012-12-03T17:00:20Z", "bug_id": 54217, "creation_time": "2012-12-03T17:00:20Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 54217, "attachment_id": null, "is_private": false, "id": 172318, "time": "2014-01-13T03:30:38Z", "creator": "informatik0101@gmail.com", "creation_time": "2014-01-13T03:30:38Z", "text": "Hi.\n\nIt seems like the issue initially described in this bug report is still present for the currently latest Tomcat version 7.0.50. Although now Tomcat sometimes manages to close additional connections after reloading, sometimes the number of connections are increased after one reload and then kept steady.\n\nBut I still could reproduce the initially described issue (although again not that easy: it may be related to the frequency of successive reloads). Seems like it's just a matter of time, i.e. if Tomcat has enough time after reload, it manages the connection pool more or less as it should. As Mark mentioned in the \"Comment 9\" the closeMethod \"speeds up the freeing of resources that would otherwise be freed by GC.\", and it looks like the speed is the defining factor.\n\nWhen using the solution presented by Konstantin Kolinko (to use closeMethod=\"close\") all WORKS just fine, and the number of connections reserved are kept STRICTLY as defined in the context.xml file. So it appears that using closeMethod=\"close\" is the ONLY true way (at the moment) to avoid \"PSQLException: FATAL: sorry, too many clients already\" exception.\n\nI'll update my post at Stack Overflow (http://stackoverflow.com/questions/13595794/jdbc-connection-pool-runs-out-of-connections-when-context-reload-true-is-enabl) to reflect this situation."}, {"count": 11, "tags": [], "bug_id": 54217, "text": "There are two separate issues in this report and WONTFIX is not the correct status for either of them.\n\nThe actual memory leak found while investingating this bug has been fixed in 7.0.34 onwards as per comments #4 to #6.\n\nThe issue of the connections not being closed on reload is a result of the J2EE specification for JNDI resources and this part of the bug report is therefore invalid.\n\nI am restoring the state of this bug to fixed to reflect that the memory leak that did exist has been fixed.\n\nTo expandon why the failure to immediately close connection after relod is invalid, the J2EE specification provides no mechanism for the container to tell the resource it is no longer required. Therefore all the container can do is clear references to the resource and wait for garbage collection (which will trigger the closure of the pool and the associated connections).\n\nGarbage collection occurs at times determined by the JVM so this is why it takes an indeterminate amount of time for connections to be closed after a context reload as a garbage collection may not occur for some time.\n\nTomcat has added the Tomcat specific JNDI attribute closeMethod which can be used to trigger the explicit close of a JNDI resource when a context is stopped. If waiting for GC to clean up resources is not acceptable then simply use this parameter. Tomcat does not use this by default as it may have unexpected and unwanted side-effects for some JNDI resources.\n\nIf you'd like to see a standard mechanism provided for telling JNDI resources that they are no loger required then you need to lobby the J2EE expert group.", "id": 172322, "time": "2014-01-13T07:45:32Z", "creator": "markt@apache.org", "creation_time": "2014-01-13T07:45:32Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 54217, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #11)\n> There are two separate issues in this report and WONTFIX is not the correct\n> status for either of them.\n> \n> The actual memory leak found while investigating this bug has been fixed in\n> 7.0.34 onwards as per comments #4 to #6.\n> \n> The issue of the connections not being closed on reload is a result of the\n> J2EE specification for JNDI resources and this part of the bug report is\n> therefore invalid.\n> \n> I am restoring the state of this bug to fixed to reflect that the memory\n> leak that did exist has been fixed.\n> \n> To expand on why the failure to immediately close connection after reload is\n> invalid, the J2EE specification provides no mechanism for the container to\n> tell the resource it is no longer required. Therefore all the container can\n> do is clear references to the resource and wait for garbage collection\n> (which will trigger the closure of the pool and the associated connections).\n> \n> Garbage collection occurs at times determined by the JVM so this is why it\n> takes an indeterminate amount of time for connections to be closed after a\n> context reload as a garbage collection may not occur for some time.\n> \n> Tomcat has added the Tomcat specific JNDI attribute closeMethod which can be\n> used to trigger the explicit close of a JNDI resource when a context is\n> stopped. If waiting for GC to clean up resources is not acceptable then\n> simply use this parameter. Tomcat does not use this by default as it may\n> have unexpected and unwanted side-effects for some JNDI resources.\n> \n> If you'd like to see a standard mechanism provided for telling JNDI\n> resources that they are no longer required then you need to lobby the J2EE\n> expert group.\n\nThank you Mark for the explanation. I'll make a now third update to my Stack Overflow page and post this comment there. I knew it, it also had to do be about garbage collector.\n\nAgain thanks!", "id": 172324, "time": "2014-01-13T11:05:56Z", "creator": "informatik0101@gmail.com", "creation_time": "2014-01-13T11:05:56Z", "is_private": false}, {"count": 13, "attachment_id": null, "creator": "informatik0101@gmail.com", "is_private": false, "id": 180356, "time": "2015-01-18T15:59:18Z", "bug_id": 54217, "creation_time": "2015-01-18T15:59:18Z", "tags": [], "text": "(In reply to Mark Thomas from comment #11)\n> There are two separate issues in this report and WONTFIX is not the correct\n> status for either of them.\n> \n> The actual memory leak found while investingating this bug has been fixed in\n> 7.0.34 onwards as per comments #4 to #6.\n> \n> The issue of the connections not being closed on reload is a result of the\n> J2EE specification for JNDI resources and this part of the bug report is\n> therefore invalid.\n> \n> I am restoring the state of this bug to fixed to reflect that the memory\n> leak that did exist has been fixed.\n> \n> To expandon why the failure to immediately close connection after relod is\n> invalid, the J2EE specification provides no mechanism for the container to\n> tell the resource it is no longer required. Therefore all the container can\n> do is clear references to the resource and wait for garbage collection\n> (which will trigger the closure of the pool and the associated connections).\n> \n> Garbage collection occurs at times determined by the JVM so this is why it\n> takes an indeterminate amount of time for connections to be closed after a\n> context reload as a garbage collection may not occur for some time.\n> \n> Tomcat has added the Tomcat specific JNDI attribute closeMethod which can be\n> used to trigger the explicit close of a JNDI resource when a context is\n> stopped. If waiting for GC to clean up resources is not acceptable then\n> simply use this parameter. Tomcat does not use this by default as it may\n> have unexpected and unwanted side-effects for some JNDI resources.\n> \n> If you'd like to see a standard mechanism provided for telling JNDI\n> resources that they are no loger required then you need to lobby the J2EE\n> expert group.\n\nHi, Mark. A user on the Stack Overflow asked (quote from here http://stackoverflow.com/questions/13595794/jdbc-connection-pool-runs-out-of-connections-when-context-reload-true-is-enabl/13631242?noredirect=1#comment44403937_13631242):\n\"What is the \"unexpected and unwanted side-effects for some JNDI resources\" and does it apply to PostgreSQL connections?\"\n\nWould you be so kind to give a brief answer?"}, {"count": 14, "tags": [], "creator": "informatik0101@gmail.com", "text": "Thanks for the answer on Stack Overflow.", "id": 180358, "time": "2015-01-18T18:34:06Z", "bug_id": 54217, "creation_time": "2015-01-18T18:34:06Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 54217, "attachment_id": null, "is_private": false, "id": 180531, "time": "2015-01-23T12:27:56Z", "creator": "1983-01-06@gmx.net", "creation_time": "2015-01-23T12:27:56Z", "text": "Levan, you probably want to use such a listener: http://mo-tomcat-ext.sourceforge.net/user-guide.html#CloseableResourceListener"}, {"count": 16, "attachment_id": null, "creator": "informatik0101@gmail.com", "is_private": false, "id": 180532, "time": "2015-01-23T13:27:09Z", "bug_id": 54217, "creation_time": "2015-01-23T13:27:09Z", "tags": [], "text": "(In reply to Michael Osipov from comment #15)\n> Levan, you probably want to use such a listener:\n> http://mo-tomcat-ext.sourceforge.net/user-guide.\n> html#CloseableResourceListener\n\nThank you, Michael, for the suggestion. I have updated my answer on the Stack Overflow to mention your solution as an alternative.\n\nP.S.\nBtw, there is a typo in the description of the filter on this page http://mo-tomcat-ext.sourceforge.net/user-guide.html:\n\"Prevents memory leaks caused by left open resources during undepoyment.\"\nI mean the word \"undeployment\"."}, {"count": 17, "attachment_id": null, "creator": "1983-01-06@gmx.net", "is_private": false, "id": 180533, "time": "2015-01-23T14:01:42Z", "bug_id": 54217, "creation_time": "2015-01-23T14:01:42Z", "tags": [], "text": "Oh thanks, I have checked spelling so often that I missed this one."}]
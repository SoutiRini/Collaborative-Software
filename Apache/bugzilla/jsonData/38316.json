[{"count": 0, "tags": [], "text": "Attached is a fix for a couple issues in the Attributes2Impl class. This should\nresolve the following issues [1][2].\n\n[1]\nhttps://sourceforge.net/tracker/index.php?func=detail&aid=1207064&group_id=29449&atid=396219\n[2] http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6205431", "is_private": false, "bug_id": 38316, "id": 84763, "time": "2006-01-19T06:06:40Z", "creator": "ndbeyer@apache.org", "creation_time": "2006-01-19T06:06:40Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 38316, "is_private": false, "text": "Created attachment 17446\nAttributes2Impl patch\n\nA patch to resolve NPE and IndexOutOfBoundsExceptions.", "id": 84764, "time": "2006-01-19T06:08:07Z", "creator": "ndbeyer@apache.org", "creation_time": "2006-01-19T06:08:07Z", "attachment_id": 17446}, {"count": 2, "tags": [], "creator": "mrglavas@ca.ibm.com", "attachment_id": null, "text": "Hi Nathan,\n\nWith your patch there still appear to be conditions where an \nArrayIndexOutOfBoundsException could be thrown. Consider the case where the \nobject has been cleared (which sets the length to zero). The call to \nSystem.arraycopy() assumes that the length of the new array is longer than the \nold one, but if length < declared.length that isn't true so you would get an \nexception.\n\nAside from the exceptions thrown, the current code also has a performance \nissue. With the new size of the array always set to the length of the attribute \nlist, there will be a new array allocated and an array copy just about every \ntime an attributed is added. AttributesImpl doubles the size of its String \narray when it runs out of space in the current one. The same should probably be \ndone with the boolean arrays in Attributes2Impl.", "id": 84874, "time": "2006-01-23T06:27:27Z", "bug_id": 38316, "creation_time": "2006-01-23T06:27:27Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 38316, "text": "Created attachment 17543\nAttributes2Impl.java Patch\n\nI completely rewrote the implementation of this class. I tried to model it\nafter the implementations of the AttributesImpl class.\n\nLet me know what you think.", "id": 85244, "time": "2006-01-31T03:47:21Z", "creator": "ndbeyer@apache.org", "creation_time": "2006-01-31T03:47:21Z", "is_private": false, "attachment_id": 17543}, {"count": 4, "tags": [], "bug_id": 38316, "text": "Looks pretty good. A couple things jumped out at me while reviewing it. The use \nof java.util.Arrays creates a dependency on JDK 1.2. I'm pretty sure the SAX \nAPI otherwise compiles on JDK 1.1.8. The Arrays class is being used to set all \nof the values in the data array to false when the Attributes object is cleared. \nI don't see the benefit of that. It appears that when the data array is \ncreated, its initial size will always be 100 which seems a bit too large.\n\nA discussion [1] has just started on the SAX development list which has sparked \nthe possibility of a new maintenance release of SAX (I guess it would be SAX \n2.0.3). On the thread, I mentioned the bugs in Attributes2Impl and cited this \nreport (in addition to the other two [2][3]). I would like to see the ASF copy \nof SAX stay in synch with the official distribution. Perhaps your patch will \nget merged into it. I'm going to hold off making changes here until there's a \nresolution in the SAX community.\n\n[1] http://sourceforge.net/mailarchive/forum.php?thread_id=9795444&forum_id=1472\n[2] https://sourceforge.net/tracker/index.php?\nfunc=detail&aid=1207064&group_id=29449&atid=396219\n[3] http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6205431", "id": 86229, "time": "2006-02-25T08:23:50Z", "creator": "mrglavas@ca.ibm.com", "creation_time": "2006-02-25T08:23:50Z", "is_private": false, "attachment_id": null}]
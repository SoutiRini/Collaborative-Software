[{"count": 0, "tags": [], "creator": "wcchor89@gmail.com", "attachment_id": 35444, "is_private": false, "id": 201548, "time": "2017-10-20T08:15:20Z", "bug_id": 61638, "creation_time": "2017-10-20T08:15:20Z", "text": "Created attachment 35444\nScreenshot of data within the excel file\n\nGreetings, first of all I shall say thank you to show my appreciation for this great product, it really helped a lot on projects I've involved throughout my career.\n\nHowever recently I've found an issue with the result returned from function DataFormatter.formatCellValue(Cell cell).\n\nI have this excel sheet filled with \"166609647\" in one of the cell, and I applied format \"60#########\" on it. \"60166609647\" appears on my Excel program afterwards, as screenshot attached.\n\nUsing below code I'm trying to get what's appeared on the screen:\n\nCell cell = getTheCell();\nDataFormatter df = new DataFormatter();\nString displayValue = df.formatCellValue(cell);\n\nWhat I captured in displayValue is only \"166609647\", the leading \"60\" is nowhere to be found.\n\nIf I change the format to \"60000000000\", the code above works fine, I can get \"60166609647\".\n\nI'm already using latest library 3.17 and this issue still occurs."}, {"count": 1, "tags": [], "creator": "fanningpj@yahoo.com", "attachment_id": null, "text": "For this data format, POI is using the java.text.DecimalFormat class.\nThis class treats format \"60#########\" as illegal.\nFormats like \"AB########\" work but the Java class does not like the attempt to prefix the number with another number.\nThis format \"60#########\" does work in Excel.\nI still think that the Java behaviour is better than the Excel behaviour in the case. I think there are better ways to prepend 60 onto a number, eg using a formula like `=CONCATENATE(\"60\", A1)`.", "id": 201913, "time": "2017-11-04T21:38:13Z", "bug_id": 61638, "creation_time": "2017-11-04T21:38:13Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61638, "attachment_id": null, "id": 201923, "time": "2017-11-05T08:43:15Z", "creator": "apache@gagravarr.org", "creation_time": "2017-11-05T08:43:15Z", "is_private": false, "text": "The Java DecimalFormat version of \"60#########\" is \"'60'000000000\"\n\nNote that we have to escape the initial 60 to force it to always display, then swap the #s for 0s as the # in Java means \"display if exists\" while the 60 prefix means we always need to treat it as existing\n\nPutting that translation in may not be that easy, as I believe the following monster is valid in excel...\n\n[$-809][>=100][Red]60#########;[$-410][<-100][Green]92##,####,###;[Yellow]0,000\n\n(Interestingly, OpenOffice gets it slightly wrong too - it shows the leading 60 but not the \"missing\" 0s)"}, {"count": 3, "attachment_id": null, "bug_id": 61638, "text": "One situation worth noting though, ### is not always the same as 000.\n\nfor example, for an input of 12345678\n\nif the format is 60000000000, output will be 60012345678.\nif the format is 60#########, output will be 6012345678.", "id": 202018, "time": "2017-11-09T09:20:16Z", "creator": "wcchor89@gmail.com", "creation_time": "2017-11-09T09:20:16Z", "tags": [], "is_private": false}]
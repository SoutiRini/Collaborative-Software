[{"count": 0, "tags": [], "bug_id": 43053, "attachment_id": null, "id": 106434, "time": "2007-08-07T03:32:41Z", "creator": "keiichi.fujino@gmail.com", "creation_time": "2007-08-07T03:32:41Z", "is_private": false, "text": "I noticed a problem that the session doesn't do time-out when BackUpManager is \nused.\nTo detect the session time-out, ManagerBase.processExpires() of \nbackgroundProcess is executed. \nIn processExpires, the time-out of the session acquired in the \nManagerBase.findSessions() is checked(isValid()). \nAnd, in findSessions(), the list of the session is acquired from session map \n(sessions). \nWhen BackUpManager is used, session map (sessions) becomes the instance of \norg.apache.catalina.tribes.tipis.AbstractReplicatedMap. \n\nOnly the PRIMARY entry is returned in the method such as size(), entrySet() \nand keySet() of AbstractReplicatedMap. \n#PRIMARY entry means entry.isPrimary() returns true.\n#I found sizeFull(), keySetFull() and entrySetFull().\n#These methods return all the entries. \n\nTherefore, the target session by ManagerBase.processExpires() for the session \ntime-out check becomes only \nPRIMARY session. \nThe BACKUP session and the PROXY session become off the subject of the session \ntime-out check. \n\nWhen Tomcat in the cluster does Down, the session(PRIMARY) created by Tomcat \nthat does Down cannot do the time-out in BACKUP and PROXY. \n\nFor instance,\nIt has one session (sessionA) in three cluster configurations \n(tomcat1,tomcat2,tomcat3). \nThe first state of sessionA.\n sessionA is PRIMARY in tomcat1. \n sessionA is BACKUP in tomcat2. \n sessionA is PROXY in tomcat3. \n\nNow, tomcat1 does down (before doing the time-out).\nstate of sessionA is ...\n tomcat1 is down.\n sessionA is BACKUP in tomcat2. \n sessionA is PROXY in tomcat3. \n\nThis means PRIMARY doesn't exist. \nOf course if sessionA is accessed again, either tomcat2 or tomcat3 becomes \nPRIMARY. \nHowever, it is not guaranteed that sessionA is accessed again. \n\nThe target of the session time-out when BackUpManager is used is only PRIMARY.\n(see above)\nAs a result, sessionA never do time-out."}, {"count": 1, "tags": [], "bug_id": 43053, "is_private": false, "id": 106460, "creation_time": "2007-08-07T09:09:09Z", "time": "2007-08-07T09:09:09Z", "creator": "fhanik@apache.org", "text": "Feel free to come with ideas, your bug has brought up several different use\ncases that become very tricky quickly, \n\nFilip\n", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 43053, "text": "I think cause of this problem is the target of the session time-out is only \nprimary or a primary node does not exist in the cluster. \n\nThe first workaround is ...\n1:findSessions() method returns all sessions(include backup and proxy).\n2:Only primary session send message(session time-out or session remove) to \ncluster.\n\nThis might be hard ?\n\nThe another workaround is ...\n1:MapEntry has PrimaryNode. \n (MapEntry implements setPrimaryNodes and getPrimaryNodes method.)\n \n2:The following two condition is added with \nAbstractReplicatedMap.memberDisappeared method. \n The first condition:\n  When MapEntry is a backup node, and the disappearing member is primary node, \n  the following is done. \n    publishEntryInfo is executed. \n    A primary node and the backup node are set to the MapEntry.\n    \n The second condition:\n  When MapEntry is a proxy node, the following is done. \n    remove(e.getKey(), false);\n\n3:Processing that sets a primary node to AbstractReplicatedMap is added.\n get(Object key) : \n  localMember(channel.getLocalMember(true)) is set to a primary node.\n messageReceived(Serializable msg, Member sender) : \n  The sender(argument) is set to a primary node. \n\n", "id": 106518, "attachment_id": null, "creator": "keiichi.fujino@gmail.com", "creation_time": "2007-08-09T03:17:58Z", "time": "2007-08-09T03:17:58Z", "is_private": false}, {"count": 3, "tags": [], "creator": "fhanik@apache.org", "text": "I think the best thing would be to add the primary as part of the tracking in\nthe MapEntry object, that way, if there is no primary, then we can apply the\ntimeout to the backup, and if the backup goes down, we can clean up the proxy\nobjects\n\n", "id": 106541, "time": "2007-08-09T09:56:35Z", "bug_id": 43053, "creation_time": "2007-08-09T09:56:35Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "fhanik@apache.org", "text": "Created attachment 20627\nFixed in trunk, attached JAR\n\nThe bug has been fixed in trunk, let me know if it needs to be backported", "id": 106555, "time": "2007-08-09T16:26:23Z", "bug_id": 43053, "creation_time": "2007-08-09T16:26:23Z", "is_private": false, "attachment_id": 20627}, {"count": 5, "tags": [], "bug_id": 43053, "text": "Fixed in trunk", "id": 106556, "time": "2007-08-09T16:26:38Z", "creator": "fhanik@apache.org", "creation_time": "2007-08-09T16:26:38Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "fhanik@apache.org", "text": "Created attachment 20628\nFixed in 6.0.x branch\n\nSame fix as in trunk, merged back into 6.0.x", "id": 106557, "time": "2007-08-09T16:32:34Z", "bug_id": 43053, "creation_time": "2007-08-09T16:32:34Z", "is_private": false, "attachment_id": 20628}, {"count": 7, "tags": [], "bug_id": 43053, "attachment_id": 20629, "text": "Created attachment 20629\ncatalina-tribes.jar update 6.0.x branch", "id": 106558, "time": "2007-08-09T16:48:15Z", "creator": "fhanik@apache.org", "creation_time": "2007-08-09T16:48:15Z", "is_private": false}, {"count": 8, "tags": [], "creator": "fhanik@apache.org", "text": "Created attachment 20630\ncatalina-ha.jar update 6.0.x branch", "id": 106559, "time": "2007-08-09T16:48:57Z", "bug_id": 43053, "creation_time": "2007-08-09T16:48:57Z", "is_private": false, "attachment_id": 20630}, {"count": 9, "tags": [], "bug_id": 43053, "attachment_id": 20631, "id": 106560, "time": "2007-08-09T16:49:44Z", "creator": "fhanik@apache.org", "creation_time": "2007-08-09T16:49:44Z", "is_private": false, "text": "Created attachment 20631\ncatalina-tribes.jar update trunk"}, {"count": 10, "tags": [], "creator": "fhanik@apache.org", "attachment_id": 20632, "id": 106561, "time": "2007-08-09T16:50:12Z", "bug_id": 43053, "creation_time": "2007-08-09T16:50:12Z", "is_private": false, "text": "Created attachment 20632\ncatalina-ha.jar update trunk"}, {"count": 11, "tags": [], "bug_id": 43053, "text": "Ok, here is how I solved it.\nThe goal was to make the most non intrusive solution.\n\n1. Introduced a primary node in the map entry, so that every map keeps track of\nthe primary\n\n2. When a primary fails, the backup node takes over primary status and backs up\nthe session elsewhere\n\n3. If a backup and primary fails, proxies will be automatically deleted\n\n4. When a backup takes over primary role, the session expiration counter is\nreset, since we never replicate simple \"access\" calls without modifications\n\nI've uploaded binaries for both 6.0 and trunk code", "id": 106562, "attachment_id": null, "creator": "fhanik@apache.org", "creation_time": "2007-08-09T16:52:41Z", "time": "2007-08-09T16:52:41Z", "is_private": false}]
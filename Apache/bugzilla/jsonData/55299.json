[{"count": 0, "tags": [], "bug_id": 55299, "attachment_id": 30616, "is_private": false, "id": 168733, "time": "2013-07-23T12:15:09Z", "creator": "mweb@gmx.ch", "creation_time": "2013-07-23T12:15:09Z", "text": "Created attachment 30616\nPatch for apr\n\nThe apr_uri_parse failes ot recognise a valid URL like this:\n\n  login?src=http://www.apache.org\n\nIt returns APR_EGENERAL since it found a colon before the first slash.\n\nI added tests for this scenario and fixed the check.\n\nThe problem can be found within TRUNK of APR and within apr-util/branches/1.5.x"}, {"count": 1, "tags": [], "bug_id": 55299, "attachment_id": null, "text": "How is this a valid URI?  At first glance, it would seem:\n\n1. The ? is reserved, and marks \"src=http://www.apache.org\" as a query component.\n2. But within a query component, ':' and '/' are reserved and must be escaped.\n3. Therefore this is not a valid URI.", "id": 168858, "time": "2013-07-28T17:51:03Z", "creator": "nick@webthing.com", "creation_time": "2013-07-28T17:51:03Z", "is_private": false}, {"count": 2, "tags": [], "text": "According to the RFC 3986 it is possible to have a : or a / within the query parameter. See RFC 3986 3.4.\n\nHere is the copy of the definition of the query:\n\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\n   query         = *( pchar / \"/\" / \"?\" )\n\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                 / \"*\" / \"+\" / \",\" / \";\" / \"=\"", "attachment_id": null, "id": 168899, "creator": "mweb@gmx.ch", "time": "2013-07-29T11:16:31Z", "bug_id": 55299, "creation_time": "2013-07-29T11:16:31Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55299, "attachment_id": null, "id": 168911, "time": "2013-07-29T15:03:36Z", "creator": "nick@webthing.com", "creation_time": "2013-07-29T15:03:36Z", "is_private": false, "text": "Aha.  I was referencing RFC 2396, which is what apr_uri implements.  It's been quite a while since it's had more than small, incremental updates or fixes.\n\nYour report and reference to RFC changes leads me to think a more extensive review in the light of RFC changes might be overdue.  Do you know if there's a quick reference / cheat-sheet describing changes to the RFC?"}, {"count": 4, "tags": [], "bug_id": 55299, "attachment_id": null, "is_private": false, "id": 168915, "time": "2013-07-29T15:42:07Z", "creator": "jorton@redhat.com", "creation_time": "2013-07-29T15:42:07Z", "text": "Nick is right, that is not a valid URI even by RFC 3986.   It is a valid URI-reference.  I am not sure if apr_uri_parse() attempts to handle all valid URI-reference strings, however, the API only says \"URI\"."}, {"count": 5, "tags": [], "text": "(In reply to Nick Kew from comment #3)\n> Aha.  I was referencing RFC 2396, which is what apr_uri implements.  It's\n> been quite a while since it's had more than small, incremental updates or\n> fixes.\n> \n\nThere is already a reference to RFC 3986 within the code. The change with the reference to the RFC 3986 broke my Apache Plugin as this change came to the Apache 2.2\n\n> Your report and reference to RFC changes leads me to think a more extensive\n> review in the light of RFC changes might be overdue.  Do you know if there's\n> a quick reference / cheat-sheet describing changes to the RFC?\n\nThis might be a good Idea but I haven't seen a quick reference / cheat-sheet with the differences.", "is_private": false, "bug_id": 55299, "id": 168963, "time": "2013-07-31T06:20:14Z", "creator": "mweb@gmx.ch", "creation_time": "2013-07-31T06:20:14Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "mweb@gmx.ch", "attachment_id": null, "id": 168964, "time": "2013-07-31T06:26:40Z", "bug_id": 55299, "creation_time": "2013-07-31T06:26:40Z", "is_private": false, "text": "(In reply to Joe Orton from comment #4)\n> Nick is right, that is not a valid URI even by RFC 3986.   It is a valid\n> URI-reference.  I am not sure if apr_uri_parse() attempts to handle all\n> valid URI-reference strings, however, the API only says \"URI\".\n\nActually it is a valid URI. The apr_uri_parse must not try to parse an URI within a query but it should actually allow all valid characters for the query and not fail just because the colon character for example is not valid within the URI but would be allowed within the query part."}]
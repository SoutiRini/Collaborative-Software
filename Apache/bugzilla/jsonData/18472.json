[{"count": 0, "tags": [], "bug_id": 18472, "attachment_id": null, "is_private": false, "id": 34062, "time": "2003-03-28T14:55:09Z", "creator": "david.cassidy@db.com", "creation_time": "2003-03-28T14:55:09Z", "text": "When using the JkUriSet commands within a Location block the configuration gets\nconfused between vhosts.\n\nExample:\n\n<VirtualHost example1.com>\n#define remote server\nJkSet channel.socket:example1.port 8009\nJkSet channel.socket:example1.host server3\nJkSet ajp13:example1.channel channel.socket:example1\n\n<Location /examples/>\n  JkSetUri group ajp13:example1\n</Location>\n\n....\n</VirtualHost>\n\n<VirtualHost example2.com>\n#define remote server\nJkSet channel.socket:example2.port 8500\nJkSet channel.socket:example2.host server4\nJkSet ajp13:example2.channel channel.socket:example2\n\n<Location /examples/>\n  JkSetUri group ajp13:example2\n</Location>\n\n....\n</VirtualHost>\n\nAssuming that the hosts are specified in the order example1, example2 then all\nrequests for /examples/ will go to ajp13:example2 .\n\nIn mod_jk.c \nstatic void *jk2_create_dir_config(apr_pool_t *p, char *path)\n\ncalls for the given path \n\njk_bean_t *jkb=workerEnv->globalEnv->createBean2( \n     workerEnv->globalEnv,\n     workerEnv->pool, \"uri\",\n     (path==NULL)? \"\":path );\n\ncreateBean2 then checks to see if there is an existing config for the given\npath. If it is then the existing config is updated and returned. This means\nthat the first /examples will be created correctly and when the 2nd config is\nencountered createBean2 will return the config for the first /examples. This\nwill then be updated with the config of the second and so both /examples will \nuse the same config.\n\nI suggest (have implemented and tested) the following alteration to fix this\nproblem.\n\nThe create_dir_config sends a unique path name (by adding a numerical suffix)\nthis will ensure that createBean2 will generate a unique bean for apache to hand\nback to jk2_uriSet.\n\nSo that jkstatus will make any degree of sense I have updated jk2_uriSet so that\n it re-sets the path back to the original path without the numeric suffix.\n\nHere is the code for apache1.3 as a diff -c against the standard 4.1.21\n\nPlease let me know what you think \n\nDavid Cassidy\n\n***\n../../jakarta-tomcat-connectors-4.1.21-src-ORIG/jk/native2/server/apache13/mod_jk2.c\n2003-02-25 16:30:56.000000000 +0000\n--- native2/server/apache13/mod_jk2.c\t2003-03-27 11:31:59.000000000 +0000\n***************\n*** 1,3 ****\n--- 1,4 ----\n+ //  4.1.18 version\n  /* ========================================================================= *\n   *                                                                           *\n   *                 The Apache Software License,  Version 1.1                 *\n***************\n*** 105,110 ****\n--- 106,142 ----\n   * config. No good way to discover if it's the first time or not.\n   */\n  static jk_workerEnv_t *workerEnv;\n+ /* This is used to ensure that jk2_create_dir_config creates unique \n+  * dir mappings. This prevents vhost configs as configured through\n+  * httpd.conf from getting crossed.\n+  */\n+ static int dirCounter=0;\n+ \n+ /* This gives a slightly better 500 error message than the standard :)\n+  */\n+ static int jk_error( request_rec *r, char *extras)\n+ {\n+     // this is a little hack to get around the fact that the lb worker \n+     // might have already sent a page back ....\n+     if ( r->bytes_sent > 0 ) \n+ \t    return  OK;\n+ \n+     ap_table_setn(r->notes, \"error-notes\", ap_pstrcat(r->pool,\n+         \"<p>The mod_jk2 connector was unable handle the request for \",\n+         \"<em><a href=\\\"\", ap_escape_uri(r->pool, r->uri), \"\\\">\",\n+         ap_escape_html(r->pool, r->uri), \"</a></em></p>\\n\",\n+         \"<p>This may mean an application server could not be contacted to \"\n+         \"service this request. \",extras,\" <P>Please try again later.\", NULL));\n+ \n+     fprintf(stderr, \"Error .... send %d bytes ...\\n\", r->bytes_sent );\n+     /* Allow \"error-notes\" string to be printed by ap_send_error_response() */\n+     ap_table_setn(r->notes, \"verbose-error-to\", ap_pstrdup(r->pool, \"*\"));\n+ \n+     r->status_line = ap_psprintf(r->pool, \"%3.3u mod_jk2 error\",\n+                                  HTTP_INTERNAL_SERVER_ERROR);\n+     return HTTP_INTERNAL_SERVER_ERROR;\n+ }\n+ \n  \n  /* ==================== Options setters ==================== */\n  \n***************\n*** 127,133 ****\n          ap_get_module_config(s->module_config, &jk2_module);\n      jk_env_t *env=workerEnv->globalEnv;\n      int rc;\n!     \n      rc=workerEnv->config->setPropertyString( env, workerEnv->config, (char\n*)name, value );\n      if( rc!=JK_OK ) {\n          fprintf( stderr, \"mod_jk2: Unrecognized option %s %s\\n\", name, value);\n--- 159,165 ----\n          ap_get_module_config(s->module_config, &jk2_module);\n      jk_env_t *env=workerEnv->globalEnv;\n      int rc;\n! \n      rc=workerEnv->config->setPropertyString( env, workerEnv->config, (char\n*)name, value );\n      if( rc!=JK_OK ) {\n          fprintf( stderr, \"mod_jk2: Unrecognized option %s %s\\n\", name, value);\n***************\n*** 136,141 ****\n--- 168,311 ----\n      return NULL;\n  }\n  \n+ \n+ /**\n+  * Set a property associated with a URI, using native <Location> \n+  * directives.\n+  *\n+  * This is used if you want to use the native mapping and\n+  * integrate better into apache.\n+  *\n+  * Same behavior can be achieved by using uri.properties and/or JkSet.\n+  * \n+  * Example:\n+  *   <VirtualHost foo.com>\n+  *      <Location /examples>\n+  *         JkUriSet worker ajp13\n+  *      </Location>\n+  *   </VirtualHost>\n+  *\n+  * This is the best way to define a webapplication in apache. It is\n+  * scalable ( using apache native optimizations, you can have hundreds\n+  * of hosts and thousands of webapplications ), 'natural' to any\n+  * apache user.\n+  *\n+  * XXX This is a special configuration, for most users just use\n+  * the properties files.\n+  */\n+ static const char *jk2_uriSet(cmd_parms *cmd, void *per_dir, \n+                               const char *name, const char *val)\n+ {\n+     jk_uriEnv_t *uriEnv=(jk_uriEnv_t *)per_dir;\n+ \n+ \tchar *tmp, *tmp2;\n+ \tchar *tmp_virtual=NULL, *tmp_full_url=NULL;\n+     server_rec *s = cmd->server;\n+ \n+     // all of the objects that get passed in now are unique. create_dir adds a\nincrementing counter to the \n+     // uri that is used to create the object!\n+     // Here we must now 'fix' the content of the object passed in. \n+     // Apache doesn't care what we do here as it has the reference to the\nunique object that has been \n+     // created. What we need to do is ensure that the data given to mod_jk2 is\ncorrect. Hopefully in the long run \n+     // we can ignore some of the mod_jk details...\n+     \n+     // if applicable we will set the hostname etc variables.\n+     if ( s->server_hostname != NULL && (uriEnv->virtual==NULL  || !strchr(\nuriEnv->virtual, ':') || uriEnv->port != s->port ))\n+     {\n+ \ttmp_virtual  = (char *) ap_pcalloc(cmd->pool, sizeof(char *) *\n(strlen(s->server_hostname) + 8 )) ;\n+ \ttmp_full_url = (char *) ap_pcalloc(cmd->pool, sizeof(char *) *\n(strlen(s->server_hostname) + strlen(uriEnv->uri)+8 )) ;\n+ \tsprintf(tmp_virtual,  \"%s:%d\", s->server_hostname, s->port);\n+ \tsprintf(tmp_full_url, \"%s:%d%s\", s->server_hostname, s->port, uriEnv->uri );\n+ \n+ \turiEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean, \"uri\",\ntmp_full_url);\n+ \turiEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean, \"path\",\ncmd->path);\n+ \turiEnv->name=tmp_virtual;\n+ \turiEnv->virtual=tmp_virtual;\n+     \n+     } \n+     // now lets actually add the parameter set in the <Location> block \n+     uriEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean, (char\n*)name, (void *)val );\n+ \n+     return NULL;\n+ }\n+ \n+ \n+ static void *jk2_create_dir_config(pool *p, char *path)\n+ {\n+     /* We don't know the vhost yet - so path is not\n+      * unique. We'll have to generate a unique name\n+      */\n+     char *tmp=NULL;\n+     int a=0;\n+ \n+     path==NULL?a=10:(a=strlen(path)+10);\n+     tmp = (char *) ap_pcalloc(p, sizeof(char *) * (a )   ) ;\n+     sprintf(tmp, \"%s-%d\", path==NULL?\"\":path, dirCounter++);\n+ \n+     // the greatest annoyance here is that we can't create the uri correctly\nwith the hostname as well.\n+     // as apache doesn't give us the hostname .\n+     // we'll fix this in JkUriSet\n+ \n+     jk_bean_t *jkb=workerEnv->globalEnv->createBean2( workerEnv->globalEnv,\n+                                                       workerEnv->pool, \"uri\",\n+                                                       tmp);\n+     jk_uriEnv_t *newUri = jkb->object;\n+     newUri->workerEnv=workerEnv;\n+     newUri->mbean->setAttribute( workerEnv->globalEnv, newUri->mbean, \"path\",\ntmp ); \n+     // I'm hoping that setting the id won't break anything. I havn't noticed\nit breaking anything.\n+     newUri->mbean->id=(dirCounter -1);\n+     // this makes the display in the status display make more sense \n+     newUri->mbean->localName=path;\n+ \n+     return newUri;\n+ }\n+ \n+ /*\n+  * Need to re-do this to make more sense - like properly creating a new config\nand returning the merged config...\n+  * Looks like parent needs to be dominant.\n+  */\n+ static void *jk2_merge_dir_config(pool *p, void *childv, void *parentv)\n+ {\n+     jk_uriEnv_t *child =(jk_uriEnv_t *)childv;\n+     jk_uriEnv_t *parent = (jk_uriEnv_t *)parentv; \n+     jk_uriEnv_t *winner=NULL;\n+ \n+ \n+ /*        fprintf(stderr,\"Merging child & parent. (dir)\\n\");\n+ \tfprintf(stderr, \"Merging for  vhost child(%s) vhost parent(%s) uri child(%s)\nuri parent(%s) child worker (%s) parentworker(%s)\\n\",\n+               (child->virtual==NULL)?\"\":child->virtual,\n+ \t      (parent->virtual==NULL)?\"\":parent->virtual,\n+ \t      (child->uri==NULL)?\"\":child->uri,\n+               (parent->uri==NULL)?\"\":parent->uri,\n+ \t      (child->workerName==NULL)?\"\":child->workerName,\n+ \t      (parent->workerName==NULL)?\"\":parent->workerName\n+ \t      ); */\n+ \n+ \n+      if ( child == NULL || child->uri==NULL || child->workerName==NULL )\n+ \t     winner=parent;\n+      else if ( parent == NULL || parent->uri ==NULL || parent->workerName==NULL )\n+ \t     winner=child;\n+      // interresting bit... so far they are equal ...\n+      else if ( strlen(parent->uri) > strlen(child->uri) )\n+ \t     winner=parent;\n+      else \n+ \t     winner=child;\n+ \n+ /*     if ( winner == child )\n+ \tfprintf(stderr, \"Going with the child\\n\");\t\n+      else if ( winner == parent )\n+ \tfprintf(stderr, \"Going with the parent\\n\");\t\n+      else\n+ \tfprintf(stderr, \"Going with NULL\\n\");\t \n+ */\n+  \n+      return (void *) winner;\n+ \n+ }\n+ \n+ \n+ \n  #ifdef HAS_APR\n  apr_pool_t *jk_globalPool;\n  #endif\n***************\n*** 224,257 ****\n          */\n          { \"JkSet\", jk2_set2, NULL, RSRC_CONF, TAKE2,\n            \"Set a jk property, same syntax and rules as in JkWorkersFile\" },\n!         NULL\n      };\n  \n! /** Create default jk_config.\n!     This is the first thing called by apache ( or should be )\n   */\n  static void *jk2_create_config(ap_pool *p, server_rec *s)\n  {\n      jk_uriEnv_t *newUri;\n      jk_bean_t *jkb;\n  \n      if(  workerEnv==NULL ) {\n          jk2_create_workerEnv(p, s );\n      }\n      if( s->is_virtual == 1 ) {\n          /* Virtual host */\n!         fprintf( stderr, \"Create config for virtual host\\n\");\n      } else {\n          /* Default host */\n-         fprintf( stderr, \"Create config for main host\\n\");\n-     }\n- \n      jkb=workerEnv->globalEnv->createBean2( workerEnv->globalEnv,\n                                             workerEnv->pool,\n                                             \"uri\", \"\" );\n      newUri = jkb->object;\n      newUri->workerEnv=workerEnv;\n!     return newUri;\n  }\n  \n  \n--- 394,440 ----\n          */\n          { \"JkSet\", jk2_set2, NULL, RSRC_CONF, TAKE2,\n            \"Set a jk property, same syntax and rules as in JkWorkersFile\" },\n! \t{ \"JkUriSet\", jk2_uriSet, NULL, ACCESS_CONF, TAKE2,\n!           \"Defines a jk property associated with a Location\"},\n! \t  NULL\n      };\n  \n! /** This makes the config for the specified server_rec s\n!     This will include vhost info.\n   */\n  static void *jk2_create_config(ap_pool *p, server_rec *s)\n  {\n      jk_uriEnv_t *newUri;\n      jk_bean_t *jkb;\n+     char *tmp;\n  \n      if(  workerEnv==NULL ) {\n          jk2_create_workerEnv(p, s );\n      }\n      if( s->is_virtual == 1 ) {\n          /* Virtual host */\n! \n!     tmp = (char *) ap_pcalloc(p, sizeof(char *) * (strlen(s->server_hostname)\n+ 8 )) ;\n!     sprintf(tmp, \"%s:%d/\", s->server_hostname, s->port );\n! \n!     // for the sake of consistency we must have the port in the uri.\n!     // Really it isn't necessary to have one - but I would like in the future for \n!     // the server config to hold the workers for that server...\n!     jkb=workerEnv->globalEnv->createBean2( workerEnv->globalEnv,\n!                                            workerEnv->pool,\n!                                            \"uri\",  tmp );\n!     // DNC\n      } else {\n          /* Default host */\n      jkb=workerEnv->globalEnv->createBean2( workerEnv->globalEnv,\n                                             workerEnv->pool,\n                                             \"uri\", \"\" );\n+     }\n+ \n      newUri = jkb->object;\n      newUri->workerEnv=workerEnv;\n! \n!     return (void *) newUri;\n  }\n  \n  \n***************\n*** 266,273 ****\n      jk_uriEnv_t *base = (jk_uriEnv_t *) basev;\n      jk_uriEnv_t *overrides = (jk_uriEnv_t *)overridesv;\n      \n-     fprintf(stderr,  \"Merging workerEnv \\n\" );\n-     \n      /* The 'mountcopy' option should be implemented in common.\n       */\n      return overrides;\n--- 449,454 ----\n***************\n*** 278,285 ****\n   */\n  static int jk2_init(server_rec *s, ap_pool *pconf)\n  {\n!     jk_uriEnv_t *serverEnv=(jk_uriEnv_t *)\n!         ap_get_module_config(s->module_config, &jk2_module);\n      \n      jk_env_t *env=workerEnv->globalEnv;\n  \n--- 459,465 ----\n   */\n  static int jk2_init(server_rec *s, ap_pool *pconf)\n  {\n!     jk_uriEnv_t *serverEnv=(jk_uriEnv_t *)\nap_get_module_config(s->module_config, &jk2_module);\n      \n      jk_env_t *env=workerEnv->globalEnv;\n  \n***************\n*** 329,341 ****\n      jk_uriEnv_t *uriEnv;\n      jk_env_t *env;\n  \n-     uriEnv=ap_get_module_config( r->request_config, &jk2_module );\n- \n      /* If this is a proxy request, we'll notify an error */\n      if(r->proxyreq) {\n!         return HTTP_INTERNAL_SERVER_ERROR;\n      }\n  \n      /* not for me, try next handler */\n      if(uriEnv==NULL || strcmp(r->handler,JK_HANDLER)!= 0 )\n          return DECLINED;\n--- 509,527 ----\n      jk_uriEnv_t *uriEnv;\n      jk_env_t *env;\n  \n      /* If this is a proxy request, we'll notify an error */\n      if(r->proxyreq) {\n! \t return jk_error(r, \"<!-- We don't proxy requests. -->\");\n      }\n  \n+     // changed from r->request_config to r->per_dir_config. This should give\nus the one that was set in \n+     // either the translate phase (if it was a config added through\nworkers.properties) \n+     // or in the create_dir config.\n+     uriEnv=ap_get_module_config( r->request_config, &jk2_module );  // get one\nfor the dir\n+     if ( uriEnv == NULL ) {\n+ \t uriEnv=ap_get_module_config( r->per_dir_config, &jk2_module );  // get one\nspecific to this request if there isn't a dir one.\n+     }\n+     \n      /* not for me, try next handler */\n      if(uriEnv==NULL || strcmp(r->handler,JK_HANDLER)!= 0 )\n          return DECLINED;\n***************\n*** 369,374 ****\n--- 555,561 ----\n                            \"mod_jk.handler() finding worker for %s %#lx %#lx\\n\",\n                            uriEnv->workerName, worker, uriEnv );\n              uriEnv->worker=worker;\n+ \n          }\n      }\n  \n***************\n*** 376,382 ****\n          env->l->jkLog(env, env->l, JK_LOG_ERROR, \n                        \"mod_jk.handle() No worker for %s\\n\", r->uri); \n          workerEnv->globalEnv->releaseEnv( workerEnv->globalEnv, env );\n!         return 500;\n      }\n  \n      {\n--- 563,569 ----\n          env->l->jkLog(env, env->l, JK_LOG_ERROR, \n                        \"mod_jk.handle() No worker for %s\\n\", r->uri); \n          workerEnv->globalEnv->releaseEnv( workerEnv->globalEnv, env );\n!         return jk_error(r, \"<!-- No worker defined for this uri -->\");\n      }\n  \n      {\n***************\n*** 425,433 ****\n      }\n  \n      env->l->jkLog(env, env->l, JK_LOG_ERROR,\n!              \"mod_jk.handler() Error connecting to tomcat %d\\n\", rc);\n      workerEnv->globalEnv->releaseEnv( workerEnv->globalEnv, env );\n!     return 500;\n  }\n  \n  /** Use the internal mod_jk mappings to find if this is a request for\n--- 612,621 ----\n      }\n  \n      env->l->jkLog(env, env->l, JK_LOG_ERROR,\n!              \"mod_jk.handler() Error connecting to tomcat %d %s\\n\", rc,\nworker==NULL?\"\":worker->channelName==NULL?\"\":worker->channelName);\n      workerEnv->globalEnv->releaseEnv( workerEnv->globalEnv, env );\n!     \n!     return jk_error(r, \"<!-- Is your tomcat server down ? -->\");\n  }\n  \n  /** Use the internal mod_jk mappings to find if this is a request for\n***************\n*** 438,454 ****\n      jk_uriEnv_t *uriEnv;\n      jk_env_t *env;\n              \n      if(r->proxyreq) {\n          return DECLINED;\n      }\n      \n      /* Check JkMount directives, if any */\n  /*     if( workerEnv->uriMap->size == 0 ) */\n  /*         return DECLINED; */\n      \n      /* get_env() */\n      env = workerEnv->globalEnv->getEnv( workerEnv->globalEnv );\n-         \n      uriEnv = workerEnv->uriMap->mapUri(env, workerEnv->uriMap,\n                                         ap_get_server_name(r),\n                                         ap_get_server_port(r),\n--- 626,656 ----\n      jk_uriEnv_t *uriEnv;\n      jk_env_t *env;\n              \n+     jk_uriMap_t *uriMap;\n+     char *name=NULL;\n+     int i,n,io;\n      if(r->proxyreq) {\n          return DECLINED;\n      }\n      \n+     uriEnv=ap_get_module_config( r->per_dir_config, &jk2_module );\n+     if( uriEnv != NULL  &&  uriEnv->workerName!=NULL) {\n+         // jk2_handler tries to get the request_config and then falls back to\nthe per_dir one. \n+ \t// so no point setting the request_config \n+ \tr->handler=JK_HANDLER;\n+ \treturn OK;\n+     }\n+ \n+     \n+     uriMap= workerEnv->uriMap;\n+     n = uriMap->vhosts->size(env, uriMap->vhosts);\n+ \n      /* Check JkMount directives, if any */\n  /*     if( workerEnv->uriMap->size == 0 ) */\n  /*         return DECLINED; */\n      \n      /* get_env() */\n      env = workerEnv->globalEnv->getEnv( workerEnv->globalEnv );\n      uriEnv = workerEnv->uriMap->mapUri(env, workerEnv->uriMap,\n                                         ap_get_server_name(r),\n                                         ap_get_server_port(r),\n***************\n*** 473,489 ****\n  static const handler_rec jk2_handlers[] =\n  {\n      { JK_MAGIC_TYPE, jk2_handler },\n!     { JK_HANDLER, jk2_handler },    \n      NULL\n  };\n  \n  module MODULE_VAR_EXPORT jk2_module = {\n      STANDARD_MODULE_STUFF,\n      jk2_init,             /* module initializer */\n!     NULL,                       /* per-directory config creator */\n!     NULL,                       /* dir config merger */\n      jk2_create_config,           /* server config creator */\n!     jk2_merge_config,            /* server config merger */\n      jk2_cmds,                    /* command table */\n      jk2_handlers,                /* [7] list of handlers */\n      jk2_translate,               /* [2] filename-to-URI translation */\n--- 675,692 ----\n  static const handler_rec jk2_handlers[] =\n  {\n      { JK_MAGIC_TYPE, jk2_handler },\n!     { JK_HANDLER, jk2_handler },\n      NULL\n  };\n  \n  module MODULE_VAR_EXPORT jk2_module = {\n      STANDARD_MODULE_STUFF,\n      jk2_init,             /* module initializer */\n!     jk2_create_dir_config,                       /* per-directory config\ncreator */\n!     jk2_merge_dir_config,                       /* dir config merger */\n      jk2_create_config,           /* server config creator */\n! //    jk2_merge_config,            /* server config merger */\n!     NULL,\n      jk2_cmds,                    /* command table */\n      jk2_handlers,                /* [7] list of handlers */\n      jk2_translate,               /* [2] filename-to-URI translation */"}, {"count": 1, "tags": [], "text": "here's an apache2 version \ndiff -c against the tomcat 4.1.21 release of mod_jk2.c \nto fix the same problems as the apache13 version.\n(This sets the virtual host in the /jkstatus page as well as the apache13 version)\n\n\n***\n../../jakarta-tomcat-connectors-4.1.21-src-ORIG/jk/native2/server/apache2/mod_jk2.c\n2003-02-25 16:30:56.000000000 +0000\n--- native2/server/apache2/mod_jk2.c\t2003-03-31 10:25:49.000000000 +0100\n***************\n*** 77,82 ****\n--- 77,88 ----\n  static char  file_name[_MAX_PATH];\n  #endif\n  \n+ /* This is used to ensure that jk2_create_dir_config creates unique\n+  * dir mappings. This prevents vhost configs as configured through\n+  * httpd.conf from getting crossed.\n+  */\n+ static int dirCounter=0;\n+ \n  \n  #define JK_HANDLER          (\"jakarta-servlet2\")\n  #define JK_MAGIC_TYPE       (\"application/x-jakarta-servlet2\")\n***************\n*** 171,177 ****\n      jk_uriEnv_t *uriEnv=(jk_uriEnv_t *)per_dir;\n  \n      uriEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean, (char\n*)name, (void *)val );\n!     \n  /*     fprintf(stderr, \"JkUriSet  %s %s dir=%s args=%s\\n\", */\n  /*             uriEnv->workerName, cmd->path, */\n  /*             cmd->directive->directive, */\n--- 177,211 ----\n      jk_uriEnv_t *uriEnv=(jk_uriEnv_t *)per_dir;\n  \n      uriEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean, (char\n*)name, (void *)val );\n! \n!     char *tmp, *tmp2;\n!     char *tmp_virtual=NULL, *tmp_full_url=NULL;\n!     server_rec *s = cmd->server;\n! \n!     // all of the objects that get passed in now are unique. create_dir adds a\nincrementing counter to the\n!     // uri that is used to create the object!\n!     // Here we must now 'fix' the content of the object passed in.\n!     // Apache doesn't care what we do here as it has the reference to the\nunique object that has been\n!     // created. What we need to do is ensure that the data given to mod_jk2 is\ncorrect. Hopefully in the long run\n!     // we can ignore some of the mod_jk details...\n! \n!     // if applicable we will set the hostname etc variables.\n!     if ( s->server_hostname != NULL && (uriEnv->virtual==NULL  || !strchr(\nuriEnv->virtual, ':') || uriEnv->port != s->port ))\n!     {\n!           tmp_virtual  = (char *) ap_pcalloc(cmd->pool, sizeof(char *) *\n(strlen(s->server_hostname) + 8 )) ;\n!           tmp_full_url = (char *) ap_pcalloc(cmd->pool, sizeof(char *) *\n(strlen(s->server_hostname) + strlen(uriEnv->uri)+8 )) ;\n!           sprintf(tmp_virtual,  \"%s:%d\", s->server_hostname, s->port);\n!           sprintf(tmp_full_url, \"%s:%d%s\", s->server_hostname, s->port,\nuriEnv->uri );\n! \n!           uriEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean,\n\"uri\", tmp_full_url);\n!           uriEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean,\n\"path\", cmd->path);\n!           uriEnv->name=tmp_virtual;\n!           uriEnv->virtual=tmp_virtual;\n! \n!     }\n!     // now lets actually add the parameter set in the <Location> block\n!     uriEnv->mbean->setAttribute( workerEnv->globalEnv, uriEnv->mbean, (char\n*)name, (void *)val );\n! \n  /*     fprintf(stderr, \"JkUriSet  %s %s dir=%s args=%s\\n\", */\n  /*             uriEnv->workerName, cmd->path, */\n  /*             cmd->directive->directive, */\n***************\n*** 201,212 ****\n      /* We don't know the vhost yet - so path is not\n       * unique. We'll have to generate a unique name\n       */\n      jk_bean_t *jkb=workerEnv->globalEnv->createBean2( workerEnv->globalEnv,\n                                                        workerEnv->pool, \"uri\",\n!                                                       (path==NULL)? \"\":path );\n      jk_uriEnv_t *newUri = jkb->object;\n      newUri->workerEnv=workerEnv;\n!     newUri->mbean->setAttribute( workerEnv->globalEnv, newUri->mbean, \"path\",\npath );\n      return newUri;\n  }\n  \n--- 235,258 ----\n      /* We don't know the vhost yet - so path is not\n       * unique. We'll have to generate a unique name\n       */\n+    char *tmp=NULL;\n+    int a=0;\n+ \n+    path==NULL?a=10:(a=strlen(path)+10);\n+    tmp = (char *) ap_pcalloc(p, sizeof(char *) * (a )   ) ;\n+    sprintf(tmp, \"%s-%d\", path==NULL?\"\":path, dirCounter++);\n+ \n      jk_bean_t *jkb=workerEnv->globalEnv->createBean2( workerEnv->globalEnv,\n                                                        workerEnv->pool, \"uri\",\n!                                                       tmp );\n      jk_uriEnv_t *newUri = jkb->object;\n      newUri->workerEnv=workerEnv;\n!     newUri->mbean->setAttribute( workerEnv->globalEnv, newUri->mbean, \"path\",\ntmp );\n!     // I'm hoping that setting the id won't break anything. I havn't noticed\nit breaking anything.\n!     newUri->mbean->id=(dirCounter -1);\n!     // this makes the display in the status display make more sense\n!     newUri->mbean->localName=path;\n! \n      return newUri;\n  }\n  \n***************\n*** 215,260 ****\n  {\n      jk_uriEnv_t *child =(jk_uriEnv_t *)childv;\n      jk_uriEnv_t *parent = (jk_uriEnv_t *)parentv; \n  \n!     if( child->uri==NULL )\n!         return parentv;\n!     \n!     if( child->merged != JK_TRUE ) {\n!         /* Merge options from parent. \n!          */\n!         if( parent->mbean->debug > 0 ) /* Inherit debugging */\n!             child->mbean->debug = parent->mbean->debug;\n! \n!         if( child->workerName==NULL ) {\n!             child->workerName=parent->workerName;\n!             child->worker=parent->worker;\n!         }\n!         if( child->virtual==NULL ) {\n!             child->virtual=parent->virtual;\n!             child->aliases=parent->aliases;\n!         }\n!         if( child->contextPath==NULL ) {\n!             child->contextPath=parent->contextPath;\n!             child->ctxt_len=parent->ctxt_len;\n!         }\n!         /* XXX Shuld we merge env vars ?\n!          */\n!         \n!         /* When we merged to top - mark and stop duplicating the work\n!          */\n!         if( parent->uri == NULL ) \n!             child->merged=JK_TRUE;\n!     \n!         \n!         if( child->mbean->debug > -1 ) {\n!             fprintf(stderr, \"mod_jk2:mergeDirConfig() Merged dir config %#lx\n%s %s %s %s\\n\",\n!                     child, child->uri, parent->uri, child->workerName,\nparent->workerName);\n!             fprintf(stderr, \"mod_jk2:mergeDirConfig() Merged dir config %#lx\n%s %s %s %s\\n\",\n!                     child, child->uri, parent->uri, child->workerName,\nparent->workerName);\n!         }\n!     }\n  \n-     return childv;\n  }\n  \n  /** Basic initialization for jk2.\n--- 261,288 ----\n  {\n      jk_uriEnv_t *child =(jk_uriEnv_t *)childv;\n      jk_uriEnv_t *parent = (jk_uriEnv_t *)parentv; \n+     jk_uriEnv_t *winner=NULL;\n  \n!     if ( child == NULL || child->uri==NULL || child->workerName==NULL )\n!            winner=parent;\n!     else if ( parent == NULL || parent->uri ==NULL || parent->workerName==NULL )\n!            winner=child;\n!     // interresting bit... so far they are equal ...\n!     else if ( strlen(parent->uri) > strlen(child->uri) )\n!            winner=parent;\n!     else\n!            winner=child;\n! \n!     /*if ( winner == child )\n!          fprintf(stderr, \"Going with the child\\n\");\n!       else if ( winner == parent )\n!         fprintf(stderr, \"Going with the parent\\n\");\n!       else\n!         fprintf(stderr, \"Going with NULL\\n\");\n!     */\n! \n!     return (void *) winner;\n  \n  }\n  \n  /** Basic initialization for jk2.\n\n", "attachment_id": null, "id": 34313, "creator": "david.cassidy@db.com", "time": "2003-04-02T10:21:22Z", "bug_id": 18472, "creation_time": "2003-04-02T10:21:22Z", "is_private": false}, {"count": 2, "tags": [], "text": "*** Bug 18569 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 34371, "creator": "nacho@apache.org", "time": "2003-04-02T18:44:35Z", "bug_id": 18472, "creation_time": "2003-04-02T18:44:35Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "mturk@apache.org", "attachment_id": null, "id": 36062, "time": "2003-04-25T09:28:39Z", "bug_id": 18472, "creation_time": "2003-04-25T09:28:39Z", "is_private": false, "text": "\nFixed thanx to David, Costin, and others."}, {"count": 4, "tags": [], "creator": "david.cassidy@db.com", "attachment_id": 6075, "is_private": false, "id": 36269, "time": "2003-04-29T08:08:03Z", "bug_id": 18472, "creation_time": "2003-04-29T08:08:03Z", "text": "Created attachment 6075\ndiff -u3 to get the vhost JkSetUri stuff working for apache 1.3"}, {"count": 5, "tags": [], "creator": "david.cassidy@db.com", "attachment_id": null, "id": 36362, "time": "2003-04-30T07:47:48Z", "bug_id": 18472, "creation_time": "2003-04-30T07:47:48Z", "is_private": false, "text": "If we can have the apache 1.3 mod_jk2.c fixed with the attached,\n\nI'd be most grateful we still use apache 1.3 and not 2 :(\n\nTa\n"}, {"count": 6, "tags": [], "creator": "mturk@apache.org", "attachment_id": null, "id": 36624, "time": "2003-05-03T18:12:51Z", "bug_id": 18472, "creation_time": "2003-05-03T18:12:51Z", "is_private": false, "text": "\nCommited the latest changes to CVS.\nHopefully it works ;)."}, {"count": 7, "attachment_id": null, "bug_id": 18472, "is_private": false, "id": 50764, "time": "2004-01-19T19:25:24Z", "creator": "erik@codefaktor.de", "creation_time": "2004-01-19T19:25:24Z", "tags": [], "text": "*** Bug 26172 has been marked as a duplicate of this bug. ***"}, {"count": 8, "tags": [], "bug_id": 18472, "attachment_id": null, "text": "*** Bug 26172 has been marked as a duplicate of this bug. ***", "id": 50768, "time": "2004-01-19T19:32:08Z", "creator": "erik@codefaktor.de", "creation_time": "2004-01-19T19:32:08Z", "is_private": false}, {"count": 9, "tags": [], "text": "I am running the latest build of Tomcat 5 with mod_jk2 version 2.0.2 against \napache 2.0.48 and am having a related problem listed in bug 26172 (linked to \nthis bug).\n\nis there a packaged source or binary bundle that has addressed this issue... \nor do i need to include the source changes listed and rebuild the connector \nmyself ?", "is_private": false, "bug_id": 18472, "id": 50780, "time": "2004-01-19T20:41:20Z", "creator": "mike@doubleshift.com", "creation_time": "2004-01-19T20:41:20Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 18472, "attachment_id": null, "text": "Looking at the message from Mladen it looks like it made it into CVS\nCan you check out the latest version from CVS and see if this works for you ?", "id": 50803, "time": "2004-01-20T10:14:28Z", "creator": "david.cassidy@db.com", "creation_time": "2004-01-20T10:14:28Z", "is_private": false}, {"count": 11, "tags": [], "text": "Did something happen to this fix before the 2.0.4 release? I compiled from CVS a\nfew weeks ago and did not have this problem, but in the 2.0.4 release, the issue\nis once again present.", "is_private": false, "id": 54782, "creator": "mwelch@cadtrain.com", "time": "2004-03-28T02:47:07Z", "bug_id": 18472, "creation_time": "2004-03-28T02:47:07Z", "attachment_id": null}, {"count": 12, "attachment_id": null, "bug_id": 18472, "is_private": false, "id": 54853, "time": "2004-03-30T06:11:21Z", "creator": "hgomez@apache.org", "creation_time": "2004-03-30T06:11:21Z", "tags": [], "text": "Thanks to all to make a test against the released jk2 2.0.4.\n\nIf the problem is still in, thanks to provide a patch if available.\n\nAlso thanks to clarify if the problem exist in Apache 1.3 AND Apache 2.0.\n\nRegards"}, {"count": 13, "tags": [], "bug_id": 18472, "attachment_id": null, "id": 55021, "time": "2004-04-01T07:23:29Z", "creator": "hgomez@apache.org", "creation_time": "2004-04-01T07:23:29Z", "is_private": false, "text": "There was some change in jk2 code commited yesterday.\n\nThanks to check with latest HEAD and close the bug if it's fixed"}, {"attachment_id": null, "tags": [], "creator": "funkman@joedog.org", "is_private": false, "count": 14, "id": 67676, "time": "2004-12-01T02:58:55Z", "bug_id": 18472, "creation_time": "2004-12-01T02:58:55Z", "text": "As of November 15, 2004, JK2 is no longer supported. All bugs related to JK2 \nwill be marked as WONTFIX. In its place, some of its features have been \nbackported to jk1. Most of those features will be seen in 1.2.7, which is \nslated for release on November 30th, 2004.\n\nAnother alternative is the ajp addition to mod_proxy which will be part of \napache 2.\n\nFor more information on the Tomat connectors docs at\nhttp://jakarta.apache.org/tomcat/connectors-doc/"}]
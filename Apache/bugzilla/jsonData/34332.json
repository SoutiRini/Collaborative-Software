[{"count": 0, "tags": [], "creator": "albegley@apple.com", "is_private": false, "text": "The apr_socket_send() function in the UNIX version of sendrecv.c does a write() loop on the socket. If the \nwrite fails with EAGAIN, it does an apr_wait_for_io_or_timeout() and tries the write loop once more. If that \nwrite also fails with EAGAIN, it returns to the caller, instead of continuing to try.\n\nThe result is that an HTTP GET may abort prematurely, and only return the first 64K of a file.", "id": 73349, "time": "2005-04-06T18:15:02Z", "bug_id": 34332, "creation_time": "2005-04-06T18:15:02Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 34332, "attachment_id": null, "text": "Moving to the APR project.", "id": 73350, "time": "2005-04-06T18:18:58Z", "creator": "chip@force-elite.com", "creation_time": "2005-04-06T18:18:58Z", "is_private": false}, {"count": 2, "tags": [], "text": "I believe that apr_socket_send is documented to return EAGAIN and that the\ncaller is responsible for calling it again.\n\nAn alternative would be to add a apr_socket_sendfull() that would handle EAGAIN\nand keep trying to send in all cases.", "is_private": false, "bug_id": 34332, "id": 73351, "time": "2005-04-06T18:22:13Z", "creator": "chip@force-elite.com", "creation_time": "2005-04-06T18:22:13Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Per dev@httpd discussion, that is by design; if select/poll indicates\nwritability and the subsequence write() call fails with EAGAIN there is some\nother problem.  Paul mentioned it may be a Darwin issue....\n\n(I'd also check it's not another issue with the\nO_NONBLOCK-inheritance-over-accept-detection too)\n", "is_private": false, "bug_id": 34332, "id": 73631, "time": "2005-04-13T16:04:47Z", "creator": "jorton@redhat.com", "creation_time": "2005-04-13T16:04:47Z", "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 34332, "is_private": false, "id": 74529, "time": "2005-05-06T15:10:37Z", "creator": "albegley@apple.com", "creation_time": "2005-05-06T15:10:37Z", "tags": [], "text": "To help explore the possibility of a Darwin issue ... Current probes indicate that no code is waiting in \nselect or poll, or that poll/select/etc are returning right away indicating that the socket is ready for \nwriting. What mechanism does apache2 use to determine when a socket is writable? "}, {"count": 5, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "It uses poll() if available or select() otherwise.  I don't know which it is on\nDarwin.\n\nJeff commented on dev@httpd:\n\n> Another thing to check is if apr_poll() is telling the I/O routine\n> that data is ready when in fact it is not.  I recall some recent\n> complaints about APR using poll() on OS X 10.3, where poll() has some\n> negative attributes (I don't recall details).\n\nYou need to answer some of these question before we can help you any more on\nthis.  Specifically have you checked whether this is an O_NONBLOCK-inheritance\nissue?  What's the output from running:\n\nhttp://people.apache.org/~jorton/nonblock.c", "id": 74532, "time": "2005-05-06T15:44:06Z", "bug_id": 34332, "creation_time": "2005-05-06T15:44:06Z", "is_private": false}, {"count": 6, "tags": [], "text": "The output is:\n\nbound to 0.0.0.0:53696", "attachment_id": null, "id": 74533, "creator": "albegley@apple.com", "time": "2005-05-06T16:19:43Z", "bug_id": 34332, "creation_time": "2005-05-06T16:19:43Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 34332, "attachment_id": null, "text": "That means that APR has detected that O_NONBLOCK is inherited across accept(),\nwhich is expected for a BSDish platform.\n\nSo, the other question: which is used by APR on Darwin, poll or select?  Have\nyou tried forcing the decision one way or the other?", "id": 74614, "time": "2005-05-09T16:14:13Z", "creator": "jorton@redhat.com", "creation_time": "2005-05-09T16:14:13Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 34332, "is_private": false, "text": "It appears APR prefers poll() on Mac OS X 10.4 (note difference from Mac OS X 10.3, where bug 29985 \nwas encountered). Summary of poll-related log messages configuring Apache 2.0.53 on Mac OS X 10.4 \nServer:\n\n    checking for poll... yes\n    checking poll.h usability... yes\n    checking poll.h presence... yes\n    checking for poll.h... yes\n    checking sys/poll.h usability... yes\n    checking sys/poll.h presence... yes\n    checking for sys/poll.h... yes\n    checking for POLLIN in poll.h sys/poll.h... yes\n\nI'm not certain this is the best way to force it not to use poll(), but after running ./configure I set the \nfollowing in httpd-2.0.53/srclib/apr/include/arch/unix/apr_private.h:\n\n    #define HAVE_POLL 0\n    #define HAVE_POLLIN 0\n    #define HAVE_POLL_H 0\n\nBuilt this way, apache2 still behaves the same way:\n\ny:/tmp al$ curl -o 1.2m.html http://xx.apple.com:8080/1.2M.html\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  4 1280k    4 65536    0     0   4339      0  0:05:02  0:00:15  0:04:47     0\ncurl: (18) transfer closed with 1245184 bytes remaining to read", "id": 74627, "time": "2005-05-09T20:05:33Z", "creator": "albegley@apple.com", "creation_time": "2005-05-09T20:05:33Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 34332, "attachment_id": null, "id": 75238, "time": "2005-05-23T21:42:20Z", "creator": "wsanchez@apache.org", "creation_time": "2005-05-23T21:42:20Z", "is_private": false, "text": "From a kernel developer:\n\nSelect does not guarantee writability; merely that at the time that the select wakeup was issued (not the \ntime the caller runs) the socket was writable.  There are many reasons that the socket may become \nunwritable again (resource shortages, competing access), and the caller should simply accept this and re-\nselect.\n\nThis implies we aren't doing the right thing in APR.\n"}, {"count": 10, "attachment_id": null, "bug_id": 34332, "is_private": false, "id": 75243, "time": "2005-05-23T22:17:39Z", "creator": "trawick@apache.org", "creation_time": "2005-05-23T22:17:39Z", "tags": [], "text": ">There are many reasons that the socket may become\n>unwritable again (resource shortages, competing access),\n\nCompeting access isn't an issue here.  There is one thread checking for\nwritability, and no other threads will consume the writeability characteristic.\n\nIt seems very odd that an obscure problem such as a resource shortage (lack of\nmbufs ?) is the explanation for what is going on, since since this problem is so\neasily recreatable for you.\n\nIs there any way to get a syscall trace of the httpd process during the failure\nscenario so we can see this explicitly?"}, {"count": 11, "tags": [], "bug_id": 34332, "attachment_id": null, "is_private": false, "id": 75252, "time": "2005-05-24T02:09:20Z", "creator": "wsanchez@apache.org", "creation_time": "2005-05-24T02:09:20Z", "text": "I'm not sure that resource contention is in fact a problem; the point was that getting EWOULDBLOCK \n(EAGAIN) on write after poll() tells you that it's writeable is valid behavior and that we should probably deal \nwith that case by continuing to retry rather than giving up and sending the errno up to the caller.\n\nIn this case, httpd isn't aware that it's dealing with a non-blocking socket, so that it can get the EAGAIN \nseems like a bug in APR.  I worked around this (in r160348 on httpd HEAD) by having httpd retry the write \nif it gets EAGAIN, but I think that the fix probably should move down to APR, since httpd shouldn't have to \nanticipate an EAGAIN from APR."}, {"count": 12, "tags": [], "text": "Created attachment 15135\ntry again\n\nAttaching Al's patch to APR for reference.  Rather than trying one, and then if\nfailure, try one more time, just keep trying.", "attachment_id": 15135, "id": 75253, "creator": "wsanchez@apache.org", "time": "2005-05-24T02:16:40Z", "bug_id": 34332, "creation_time": "2005-05-24T02:16:40Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 34332, "is_private": false, "text": "The above patch would have to be applied to the other functions as well, if it's appropriate.  The question \nis whether apr_socket_send() and friends are supposed to yiled EAGAIN to the caller if the caller is doing \nblocking I/O.", "id": 75254, "time": "2005-05-24T02:21:36Z", "creator": "wsanchez@apache.org", "creation_time": "2005-05-24T02:21:36Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "1) using \"#define HAVE_POLL 0\" in apr_private.h will not force use of select;\nit's a defined-or-not constant, not a defined-to-1-or-0 constant.\n\nI'd really like to see conclusive results of using select() over poll() first. \nThere are many independent reports that poll() is broken (not to mention\nunsupported) in Darwin, e.g. http://curl.haxx.se/mail/lib-2005-05/0122.html\n\nPreferable way to force use of select is:\n\nexport ac_cv_func_poll=no\n./configure ...\n\n(and check apr_private.h does *not* define HAVE_POLL at all after that)\n\n2) echoing other comment: our kernel guys here agree that this kind of situation\n*can* occur in rare circumstance (e.g. memory pressure) etc with other kernels\nalso.  That does not seem to be what is happening here; but it seems APR should\nindeed cope with it in _recv() and _send() (and ...) at least.  A loop would be\nbetter than a goto, of course!", "is_private": false, "bug_id": 34332, "id": 75295, "time": "2005-05-24T23:09:22Z", "creator": "jorton@redhat.com", "creation_time": "2005-05-24T23:09:22Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 34332, "attachment_id": null, "id": 75307, "time": "2005-05-25T01:24:18Z", "creator": "albegley@apple.com", "creation_time": "2005-05-25T01:24:18Z", "is_private": false, "text": "OK, I configured Apache 2.0.54 as Joe suggested, and verified that the unix version of apr_private.h does \nnot define HAVE_POLL. Built that way, Apache no longer encounters the problem on Mac OS X 10.4. I was \nable to download not only the 1.2M file but also a roughly 2.3G file without incident:\n\n[y:/tmp] albegley% curl -o 2.3G.html http://xx.apple.com:8080/2.3G.html\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 2465M  100 2465M    0     0  10.0M      0  0:04:04  0:04:04 --:--:-- 10.4M"}, {"count": 16, "tags": [], "bug_id": 34332, "attachment_id": null, "id": 75323, "time": "2005-05-25T08:28:49Z", "creator": "jorton@redhat.com", "creation_time": "2005-05-25T08:28:49Z", "is_private": false, "text": "OK, I checked in the fix to prevent use of poll() on Darwin too.  Thanks for\ninvestigating this.\n\nhttp://svn.apache.org/viewcvs?rev=178386&view=rev"}, {"count": 17, "tags": [], "bug_id": 34332, "attachment_id": null, "id": 75382, "time": "2005-05-25T22:42:34Z", "creator": "wsanchez@apache.org", "creation_time": "2005-05-25T22:42:34Z", "is_private": false, "text": "Joe, I fixed APR's usage of poll/select earlier yesterday (http://svn.apache.org/viewcvs.cgi?\nview=rev&rev=178340) which removes the need to disable poll() on Darwin.  Anyway, it at least makes Al's \nproblem go away.\n\nThe POLLIN/POLLHUP issue mentioned in the curl list message doesn't seem to be related...\n\nThe upshot being that disabling poll() may not be necessary."}, {"count": 18, "tags": [], "text": "For reference; see\n\nhttp://mail-archives.apache.org/mod_mbox/apr-dev/200505.mbox/%3c222760D2-EF04-4481-B731-C90D7123CA2D@wsanchez.net%3e\n\nfor the conclusion.", "attachment_id": null, "bug_id": 34332, "id": 76990, "time": "2005-07-05T12:21:22Z", "creator": "jorton@redhat.com", "creation_time": "2005-07-05T12:21:22Z", "is_private": false}]
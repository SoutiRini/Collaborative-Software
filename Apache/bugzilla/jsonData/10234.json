[{"count": 0, "attachment_id": null, "bug_id": 10234, "is_private": false, "id": 18581, "time": "2002-06-26T00:43:44Z", "creator": "markrose@acm.org", "creation_time": "2002-06-26T00:43:44Z", "tags": [], "text": "To reproduce:\n- Send an HTTP request with at least one \"very long\" HTTP header. (Not sure what \nthe minimum size is.)\n\nExpected result: server sends valid HTTP response\nActual result:   server closes socket early; browser reports empty response\n\nBecause of a corruption in my cookies.txt file in my Netscape 4.7 browser, a \nvery long \"Cookie:\" header was being sent to Tomcat. That caused HttpProcessor \nto fail with an exception in parseHeaders(). (My workaround was to fix my \ncookies.txt file.) It seeems like this problem should be handled more gracefully \nin the server. I had to use a network sniffer to diagnose the problem, as there \nwas no useful information in the logs showing what was causing the parse to \nfail. And it would probably be good to catch all exceptions in \nHttpProcessor.process() and report the error in an HTTP response, rather than \njust aborting the request.\n\nException stack trace:\n\n2002-06-25 15:10:32 HttpProcessor[8080][4] process.parse\njava.io.IOException: Line too long\n\tat \norg.apache.catalina.connector.http.SocketInputStream.readHeader(SocketInputStrea\nm.java:466)\n\tat \norg.apache.catalina.connector.http.HttpProcessor.parseHeaders(HttpProcessor.java\n:579)\n\tat \norg.apache.catalina.connector.http.HttpProcessor.process(HttpProcessor.java:977)\n\tat \norg.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.java:1125)\n\tat java.lang.Thread.run(Thread.java:536)"}, {"count": 1, "tags": [], "text": "Most HTTP daemons set limits on the HTTP header size. Coyote still has limits,\nbut will return an error to the client.", "is_private": false, "id": 18597, "creator": "remm@apache.org", "time": "2002-06-26T07:57:29Z", "bug_id": 10234, "creation_time": "2002-06-26T07:57:29Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "peter.hamann@eu.fkilogistex.com", "attachment_id": null, "text": "When getting data from a cell containing af formula, using getNumericCellValue, \nI get a lot of digits that I dont find in the sheet if opened in excel.\n\nE.g. when opened in excel a cell might show the value 0,3, but when getting the \nsame cell-value from getNumericCellValue () I will get 0,300000001. \n\nWhy is that ?\n\n/ Peter", "id": 61761, "time": "2004-08-10T16:27:16Z", "bug_id": 30565, "creation_time": "2004-08-10T16:27:16Z", "is_private": false}, {"count": 1, "tags": [], "creator": "gopal_sharma@freddiemac.com", "is_private": false, "text": "related bug 30248: HSSFCell.getNumericCellValue() cannot handle large/small ... \n\nNot just from formula, but from any numeric cell, the numer of digits returned \nfor even simple numeric values are \"more\" precise (or wrong). A method to get \nthe value of the cell as a text string would definitely be helpful, so that \nuser may use the value to do whatever required. Currently if the cell has \nsomething like 1092544061.35, the getNumericCellValue returns \n1092544061.3499994 !\n\nI am going to add an attachment", "id": 82221, "time": "2005-11-08T15:13:48Z", "bug_id": 30565, "creation_time": "2005-11-08T15:13:48Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 30565, "attachment_id": 16912, "text": "Created attachment 16912\nxls file being tested", "id": 82232, "time": "2005-11-08T19:14:19Z", "creator": "gopal_sharma@freddiemac.com", "creation_time": "2005-11-08T19:14:19Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 30565, "attachment_id": null, "id": 82233, "time": "2005-11-08T19:16:45Z", "creator": "gopal_sharma@freddiemac.com", "creation_time": "2005-11-08T19:16:45Z", "is_private": false, "text": "(In reply to comment #2)\n> Created an attachment (id=16912) [edit]\n> xls file being tested\n\nHere is the Java code for the reader, which prints different values than those \npresent on the excel.\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.math.BigDecimal;\n\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.util.CellReference;\n\npublic class ReadFirstNumericCell {\n\n\t// will just read one cell and tell the value\n\tpublic static void main(String[] args) {\n\t\ttest();\n\t}\n\n\tprivate static void test() { \n\t\tString TEST_FILE_NAME = \"c:\\\\test.xls\";\n\t\ttry {\n\t\t\t// get work book\n\t\t\tHSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(\n\t\t\t\t\tTEST_FILE_NAME));\n\t\t\tHSSFCell a1 = printNumericCellValueAt(wb, 0, 0);\n\t\t\tHSSFCell a2 = printNumericCellValueAt(wb, 1, 0);\n\t\t\tHSSFCell a3 = printNumericCellValueAt(wb, 2, 0);\n\t\t\tHSSFCell a4 = printNumericCellValueAt(wb, 3, 0);\n\t\t\tHSSFCell a5 = printNumericCellValueAt(wb, 4, 0);\t\n\t\t\n\t\t\t\n\t\t\tprintNumericCellValueAt(wb, 0, 2); \n\t\t\tprintNumericCellValueAt(wb, 1, 2);\n\t\t\tprintNumericCellValueAt(wb, 2, 2);\n\t\t\tprintNumericCellValueAt(wb, 3, 2);\n\t\t\tprintNumericCellValueAt(wb, 4, 2);\t\n\n\t\t\t\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\n\tprivate static HSSFCell printNumericCellValueAt(HSSFWorkbook wb, int \nidxRow, int idxCol) {\n\t\tHSSFCell cell = wb.getSheet(\"Sheet1\").getRow(idxRow).getCell\n((short) idxCol);\n\t\tString ref = (new CellReference(idxRow, idxCol)).toString();\n\t\tif (HSSFCell.CELL_TYPE_NUMERIC == cell.getCellType()) {\n\t\t\tBigDecimal val = new BigDecimal(Double.toString\n(cell.getNumericCellValue()));\n\t\t\tSystem.out.println(ref + \" value : \" + val);\n\t\t}\n\t\treturn cell; \n\t}\n}\n\n"}, {"count": 4, "tags": [], "creator": "poi-support@buni.org", "is_private": false, "text": "they aren't wrong you just are using a display format that gives more percision.\n Use NumberFormat to munge it to the expected number of decimals..", "id": 82249, "time": "2005-11-08T20:57:58Z", "bug_id": 30565, "creation_time": "2005-11-08T20:57:58Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 30565, "attachment_id": null, "id": 83015, "time": "2005-11-30T15:01:06Z", "creator": "gopal_sharma@freddiemac.com", "creation_time": "2005-11-30T15:01:06Z", "is_private": false, "text": "I think i didnt make it very clear. \n\nIn the excel file attached before (at c:\\test.xls), i made the format of all \nthe cell to 10 places of decimal. Now, all the values are \"displayed\" to 10 \nplaces after decimal in the excel file, as suggested : 1820311666.4400000000 \nand 0.10000000000 \n\nHowever, now when i run the attached code, the values returned are: \nA1 value : 1820311666.440002\nA2 value : 1820311666.44\nA3 value : 1820311666.440002\nA4 value : 1820311666.44\nA5 value : 0.1\nC1 value : 1820311666.44\nC2 value : 1820311666.44\nC3 value : 1820311666.44\nC4 value : 1820311666.44\nC5 value : 0.1\n\nThe issue is with the cells being displayed as 1820311666.4400000000 in the \nexcel sheet, but being retrieved as 1820311666.440002! \n\nIs this a bug in HSSF POI? Why does the value returned from POI not show as \n1820311666.4400000000 ?\n\nThanks, \nGopal"}, {"count": 6, "tags": [], "creator": "avik@apache.org", "attachment_id": null, "text": "POI does not return 1820311666.4400000000 because that's not what excel stores. \nRead up on the precision issues with binary->decimal floating point \nconversions.  \n \nThis is how excel stores it, this is how we will return it. Excel formats it  \nbefore display, you can do the same.   \n  \nGopal, please dont add people as CC's to bugs without their consent. All bug  \nactivity goes to the POI dev lists. The poi user lists are also the best place  \nto ask questions and seek clarifications.   ", "id": 83016, "time": "2005-11-30T15:06:58Z", "bug_id": 30565, "creation_time": "2005-11-30T15:06:58Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 30565, "attachment_id": null, "text": "Read this: http://en.wikipedia.org/wiki/Floating_point\n\nThese are floating point numbers.  Its not POIs fault that floating point\nnumbers are not precise.  You can make them LOOK like what you want with\nnumberformat, but  floating point numbers are the lies your computer tells you\nto make you feel good about the precision of its estimations.  Excel is lying to\nyou.  It has no idea whether 1820311666.4400000000 is 1820311666.4400000002 or\n1820311666.4400000003 or what. ", "id": 83023, "time": "2005-11-30T19:20:37Z", "creator": "poi-support@buni.org", "creation_time": "2005-11-30T19:20:37Z", "is_private": false}]
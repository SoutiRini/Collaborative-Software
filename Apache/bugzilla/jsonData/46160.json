[{"count": 0, "tags": [], "bug_id": 46160, "attachment_id": null, "id": 122248, "time": "2008-11-06T07:09:32Z", "creator": "paul.suckling@gmail.com", "creation_time": "2008-11-06T07:09:32Z", "is_private": false, "text": "When using DocBook I encounter the problem that long landscape tables just disappear off the side of the page rather than being split across multiple pages.\n\nI would like to request an extension that breaks landscape elements across multiple pages automatically just like Antenna House does."}, {"count": 1, "tags": [], "bug_id": 46160, "attachment_id": null, "text": "Hi,\n\nThanks for taking the time of creating a bug report. However, I must say that you shouldn't expect this feature to be implemented any time soon. It's not trivial and I don't think anybody among the active developers has enough interest to work on this. Moreover, FOP doesn't implement the whole XSL-FO spec yet, so before working on extensions...\n\nVincent", "id": 122272, "time": "2008-11-07T03:41:56Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-11-07T03:41:56Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46160, "attachment_id": null, "id": 122273, "time": "2008-11-07T04:32:31Z", "creator": "paul.suckling@gmail.com", "creation_time": "2008-11-07T04:32:31Z", "is_private": false, "text": "Thanks for the feedback about time scales Vincent. I appreciate that there is a lot of much higher priority work on the FOP to-do list, and that it would be a very tricky request to implement. I just thought I'd register the request for the record. \n\nCheers."}, {"count": 3, "tags": [], "bug_id": 46160, "text": "\nI don't mean to get your hopes up, but it seems like in the future, we may not even need an extension...\n\nsee: http://www.w3.org/TR/2008/WD-xslfo20-req-20080326/#N66228", "id": 122749, "time": "2008-11-23T03:15:25Z", "creator": "adelmelle@apache.org", "creation_time": "2008-11-23T03:15:25Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46160, "attachment_id": null, "text": "Is the solution really that difficult? Portrait-mode tables already break fairly well at page boundaries. It's the landscape ones that don't.", "id": 124683, "time": "2009-02-05T13:48:54Z", "creator": "darrell.nelson@dmiindustries.com", "creation_time": "2009-02-05T13:48:54Z", "is_private": false}, {"count": 5, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "text": "(In reply to comment #4)\n> Is the solution really that difficult? Portrait-mode tables already break\n> fairly well at page boundaries. It's the landscape ones that don't.\n\nIt actually depends on how landscape tables are implemented by the DocBook XSLT stylesheets. I believe they use an fo:block-container with a reference-orientation of 90 or -90, in which case I don't even know what the behaviour is supposed to be. But we can always try to have a look.\n\nPaul, would you mind attaching a small DocBook document illustrating your request, /and/ the XSL-FO file resulting from the transformation by the DocBook XSLT stylesheets?\n\nThanks,\nVincent", "id": 125276, "time": "2009-03-03T03:29:56Z", "bug_id": 46160, "creation_time": "2009-03-03T03:29:56Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 46160, "attachment_id": null, "id": 125299, "time": "2009-03-03T14:38:20Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-03T14:38:20Z", "is_private": false, "text": "(In reply to comment #5)\n> It actually depends on how landscape tables are implemented by the DocBook XSLT\n> stylesheets. I believe they use an fo:block-container with a\n> reference-orientation of 90 or -90, in which case I don't even know what the\n> behaviour is supposed to be. But we can always try to have a look.\n\nA rotated block-container (+/-90) with auto-width/-height and a nested table\n=> the block-container's height/bpd will be equal to the table's height/bpd, but since the block-container is also rotated WRT the page/region-body, we only get possible situations of overflow in inline-progression-direction. \nEither the block-container's content is too large to fit in the available width --example: table inline-progression-dimension=\"200%\"--  or the block-container grows too high --due to added table-rows-- thus exceeding the page width. The governing \"overflow\" and \"clip\" properties determine what happens with the content exceeding the reference-area boundaries.\n\nOnce you specify explicit dimensions on the block-container, IIC FOP interprets this to be an unbreakable piece of content.\n\nTesting some combinations, I've just noticed a small error in FOP Trunk: reference-orientation is treated as an inherited property, while it most certainly is not. Since a lot of tests seem to be depending on it, it may take a while to fix this, although, purely codewise, it's only a matter of changing a boolean switch in FOPropertyMapping... :-/"}, {"count": 7, "attachment_id": null, "bug_id": 46160, "text": "(In reply to comment #6)\n> \n> Testing some combinations, I've just noticed a small error in FOP Trunk:\n> reference-orientation is treated as an inherited property, while it most\n> certainly is not. Since a lot of tests seem to be depending on it, it may take\n> a while to fix this, although, purely codewise, it's only a matter of changing\n> a boolean switch in FOPropertyMapping... :-/\n\nI'm currently looking closer into this one, and it seems the related checks in the tests are entirely correct (mainly simple-page-master_reference-orientation_*). \nOnly, somehow the erroneous inheritance of the property has been taken into account when creating the region-viewport/region-reference area pair.\n\nCurrently, in Page.makeRegionViewport(), an absolute rectangle is created (in page-coordinates) for the viewport-area. When setting the region-reference-area position, however, the 'width/ipd' that is obtained from this absolute rectangle should actually be the 'height/bpd' of the region-reference-area. What happens is that the absolute rectangle takes into account the reference-orientation specified on the simple-page-master. When creating the reference-area, though, we use the same pageCTM, but with the region's reference-orientation (which is 0, meaning no rotation with respect to the viewport).", "id": 125443, "time": "2009-03-09T11:06:32Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-09T11:06:32Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "text": "Created attachment 23363\nLandscape table example\n\nSorry for the delay in getting an example out to you.\n\nAttached is an archive containing, DocBook XML source, fo and Apache FOP PDF output for a landscape table example.\n\nLandscapeTableExampleWanted.xml.pdf is an example of the type of output I would like to be able to generate.\n\nPaul", "attachment_id": 23363, "id": 125454, "creator": "paul.suckling@gmail.com", "time": "2009-03-09T17:19:28Z", "bug_id": 46160, "creation_time": "2009-03-09T17:19:28Z", "is_private": false}, {"count": 9, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "text": "Hi,\n\n(In reply to comment #8)\n> Created an attachment (id=23363) [details]\n> Landscape table example\n> \n> Sorry for the delay in getting an example out to you.\n> \n> Attached is an archive containing, DocBook XML source, fo and Apache FOP PDF\n> output for a landscape table example.\n> \n> LandscapeTableExampleWanted.xml.pdf is an example of the type of output I would\n> like to be able to generate.\n\nThanks for the simple example. I've been reading and re-reading the specification for a while and can't find any reason why the rotated block shouldn't be broken over pages. Compared to a 'normal' (non-rotated) block-container, the only additional restriction that applies to a rotated block is that the inline-progression-dimension be specified, which is the case in the sample file. (And that restriction doesn't even look necessary to me, if it were left to 'auto' the ipd could simply be set to the remaining space on the page \u2014but this is another topic.)\n\nThere is this 'overflow' property, but I don't think it applies here. After all, it doesn't prevent non-rotated blocks from being broken over pages by the layout engine, so I don't see why it should be the case for rotated ones. Actually, I think it /should/ prevent page breaking in /both/ cases, if it is left to its default value of 'auto' (which for a print format can reasonably be re-interpreted into 'visible'). Only when its value is set to 'repeat' would page breaking be allowed. But this is not what any of the formatters I've tried does, and adopting this strict behaviour is likely to puzzle many users anyway.\n\nSo, I think no extension is necessary at all in this case. The rotated block should simply be broken once it reaches the right margin. This is what XSL Formatter does once the keep-together is reset to auto in the sample file.\n\nI would re-qualify this feature request into a bug. That means that its status will be changed from \"It's not likely to be implemented any time soon\" to \"It's likely to be fixed at some point\"... In practice that doesn't change much about an expectable date for the fix. However, this is an issue that we can keep in mind while working on the new layout engine.\n\nVincent", "id": 127104, "time": "2009-05-18T04:18:22Z", "bug_id": 46160, "creation_time": "2009-05-18T04:18:22Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 46160, "attachment_id": null, "text": "resetting P2 open bugs to P3 pending further review", "id": 157392, "time": "2012-04-07T01:42:18Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:42:18Z", "is_private": false}]
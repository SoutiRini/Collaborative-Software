[{"count": 0, "tags": [], "bug_id": 36082, "is_private": false, "id": 78227, "creation_time": "2005-08-08T15:35:35Z", "time": "2005-08-08T15:35:35Z", "creator": "mm@arcus.com.au", "text": "Jeremias wrote on fop-dev: Basically, I've stumbled upon a few anomalies with\nrelative paths and resource access in general. Images were not properly loaded\nand I think there were differences in behaviour between FOP and Batik.\n\nThe problem can be easily reproduced by running fop from a different directory\nas the fo/xml input file and the input file has a relative URI reference to an\nexternal image.\n\nThe problem is caused by the FOUserAgent.getBaseURL() method always returning a\nURL even if it is not set and the InputHandler.render() method only setting the\nbase URL in the FOUserAgent if getBaseURL() returns null which it never does.\n\nThe attached patch fixes that by making getBaseURL() returning null if no\nbaseURL is set. Doing this on its own would have lost the functionality of\ndefaulting the baseURL to the current directory if not set. I therefore added a\nfunction getBaseURLasURL to FOUserAgent which returns the current baseURL as a\njava.net.URL and defaults that to a file: URL pointing to the current directory\nif baseURL is not set. It also ports some URL normalisation code for relative\nURLs from 0.20.5 FopImageFactory to ImageFactory.", "attachment_id": null}, {"count": 1, "tags": [], "creator": "mm@arcus.com.au", "is_private": false, "id": 78228, "attachment_id": 15955, "bug_id": 36082, "creation_time": "2005-08-08T15:36:22Z", "time": "2005-08-08T15:36:22Z", "text": "Created attachment 15955\nThe patch file"}, {"count": 2, "tags": [], "creator": "mm@arcus.com.au", "attachment_id": 15956, "is_private": false, "id": 78229, "time": "2005-08-08T15:42:37Z", "bug_id": 36082, "creation_time": "2005-08-08T15:42:37Z", "text": "Created attachment 15956\nSimple test case file for different URI references to external-graphic\n\nThis file contains some hardcoded paths (refering to my directory layout) and\nis therefore not really suitable for incluision into SVN. Not sure how I can\nhave \"dynamic\" absolute paths in URI refs."}, {"count": 3, "tags": [], "text": "I've had a look at this patch and there's a problem. You removed the call to \nFOUserAgent.getStream(). FOUserAgent can be subclassed by users to supply \nspecial behaviour on certain URIs, i.e. that they can supply their own \nInputStream for a particular URI. I've seen your TODO line in openStream() and \nthis tells me that you didn't realize what that the getStream() method was for.\n\nThe other problem is indeed the test case. I'm reluctant to add it to the \nother test cases because of the hard-coded absolute paths. With some tweaking \nof the testcase2fo.xsl stylesheet the attribute replacement mechanism could \nprobably be enhanced to replace only subsets of a string. That way, we could \nprovide a default variable holding the root directory of the test cases as an \nabsolute path.\n\nBTW, while I was looking at image loading earlier I had that idea of creating \na small object which carries the original URI, the resolved URL, if any, and \nthe opened stream with it so it is easier to give Batik a base URI for the SVG \nhandling. As far as I can remember that's currently not possible since only \nthe InputStream is passed to the analyzer. Something like that. Maybe that \nhelps further with the relative URI resolution stuff (especially with SVG, of \ncourse).\n\nSo I'm not going to apply this patch right now. I'd rather you look at this \nagain. Thanks!", "is_private": false, "bug_id": 36082, "id": 78333, "time": "2005-08-10T11:47:10Z", "creator": "jeremias@apache.org", "creation_time": "2005-08-10T11:47:10Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "The FOUserAgent.openStream() method is currently empty that's why I removed the \ncall and put the comment in. However, I since worked on the GIF crashing issue. \nTo make it work I had to change the interfaces. Instead of an InputStream the \nImageFactory.openStream function (renamed to openURLConnection()) returns a \nURLConnection. This is then stored in addition to the InputStream in the \nFopImage.ImageInfo structure so GifImage can use it to get the \nproperURLImageSource.\n\nHowever, all this is done without using FOUserAgent. To move this logic into \nFOUserAgent we would need a function in FOUserAgent like:\n\n   URL getURL(String url) \nor may be better named\n   URL resolveURL(String url) \n\nThis would take the string argument url and combine it with the baseURL to form \na proper absolute URL.\n\nThis would be the main function someone would overwrite in a FOUserAgent \nsubclass to provide custom URL resolution and to implement custom URL schemes.\n\nWe could then add helper functions to FOUserAgent like:\n    URLConnection openConnection(String url)\nwhich would first resolve the url and then do an openConnection on it and \nsimilar:\n    InputStream openStream(String url)\nwhich would call openConnection(url) first and then return its InputStream.\n\nThese helpers may save a few lines of code in a few places in fop but are not \nreally core.\n\nComments please ? Am I on the right track?", "is_private": false, "bug_id": 36082, "id": 78336, "time": "2005-08-10T13:48:57Z", "creator": "mm@arcus.com.au", "creation_time": "2005-08-10T13:48:57Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 78342, "time": "2005-08-10T14:32:18Z", "bug_id": 36082, "creation_time": "2005-08-10T14:32:18Z", "is_private": false, "text": "(In reply to comment #4)\n> The FOUserAgent.openStream() method is currently empty that's why I removed \nthe \n> call and put the comment in. \n\nI see. I've just improved the documentation.\nhttp://svn.apache.org/viewcvs?rev=231213&view=rev\n\n> However, I since worked on the GIF crashing issue. \n> To make it work I had to change the interfaces. Instead of an InputStream \nthe \n> ImageFactory.openStream function (renamed to openURLConnection()) returns a \n> URLConnection. This is then stored in addition to the InputStream in the \n> FopImage.ImageInfo structure so GifImage can use it to get the \n> properURLImageSource.\n> However, all this is done without using FOUserAgent. To move this logic into \n> FOUserAgent we would need a function in FOUserAgent like:\n>    URL getURL(String url) \n> or may be better named\n>    URL resolveURL(String url) \n> This would take the string argument url and combine it with the baseURL to \nform \n> a proper absolute URL.\n\nOk, THAT is normal URI resolution which is also on the task list and should be \ndone through a standard interface, i.e. these two:\n- http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/URIResolver.html\n- http://java.sun.com/j2se/1.4.2/docs/api/org/xml/sax/EntityResolver.html\n\nBecause this allows, among other things, the usage of XML Commons Resolver \nwhich is a frequently asked feature:\nhttp://xml.apache.org/commons/components/resolver/index.html\n\n\n> This would be the main function someone would overwrite in a FOUserAgent \n> subclass to provide custom URL resolution and to implement custom URL \nschemes.\n\nActually, when the standard resolver interfaces are used, it should not be \nnecessary to override FOUserAgent but simply to set a URIResolver and/or a \nEntityResolver.\n\n> We could then add helper functions to FOUserAgent like:\n>     URLConnection openConnection(String url)\n\nI'm against that. That would mean that people would have to have URLConnection \nimplementations for their custom code and cannot simply provide an \nInputStream. Our code should manage to handle that, too. Implementing \nURLConnection subclasses may be too much hassle for some developers.\n\n> which would first resolve the url and then do an openConnection on it and \n> similar:\n>     InputStream openStream(String url)\n> which would call openConnection(url) first and then return its InputStream.\n> These helpers may save a few lines of code in a few places in fop but are \nnot \n> really core.\n\nWe should also make sure we don't do too much and therefore make the whole \nFOUserAgent too complicated. URI resolution using the standard interfaces is a \nmust at some point, getStream() is nice to have and should be sufficient for \nmost people. If GIF can't be loaded through a pure InputStream, we have to \nfind a different solution.\n\n> Comments please ? Am I on the right track?\n\nDon't bite too much into GIF. If we can't make GIF support work properly with \nthe (old) classes from the JDK, it's not a big deal IMO to require Jimi or JAI \nto be present under JDK 1.3. Under JDK 1.4 we have ImageIO \n(javax.imageio.ImageIO) that should provide easier access to a GIF codec if my \nmemory doesn't desert me. So it might finally be the right time to introduce \nan AbstractFopImage subclass using ImageIO (placed under src/java-1.4). I've \nstarted such a class but never committed it since the priorization of image \nproviders was not sufficient. I can retest that class and commit it if \nnecessary.\n\nSo to sum:\n- FOUserAgent.getStream() is cool and very easy to use (now that it's properly \ndocumented). People will want to load images from a CMS without having to \nwrite an URL handler. URIs like \"cms:823746843?lng=fr\" for example.\n- URI resolution using XML Commons Resolver should be possible, i.e. \nURIResolver and ideally EntityResolver should be supported, i.e. FOP should be \nable to extract the necessary infos out of Source and InputSource instances \nwhen loading images.\n- If you can make the whole thing work for GIF by directly working with an \nURLConnection that's cool, but I wouldn't expose something like URLConnection \nto the outside of FOP.\n- Investigate ImageIO as an alternative means to load GIF.\n\nSorry for the trouble and and I hope I'm making sense."}, {"count": 6, "tags": [], "text": "> I see. I've just improved the documentation.\n> http://svn.apache.org/viewcvs?rev=231213&view=rev\n\nAm I missing something - that revision appears to have nothing to do with the\nissue discussed?", "attachment_id": null, "bug_id": 36082, "id": 78357, "time": "2005-08-10T17:08:30Z", "creator": "mm@arcus.com.au", "creation_time": "2005-08-10T17:08:30Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "is_private": false, "id": 78358, "time": "2005-08-10T17:12:43Z", "bug_id": 36082, "creation_time": "2005-08-10T17:12:43Z", "text": "Oops. Looks like my copy/paster buffer has deceived me. That should have been:\nhttp://svn.apache.org/viewcvs?rev=231215&view=rev\n\n(In reply to comment #6)\n> > I see. I've just improved the documentation.\n> > http://svn.apache.org/viewcvs?rev=231213&view=rev\n> Am I missing something - that revision appears to have nothing to do with the\n> issue discussed?\n\n"}, {"count": 8, "tags": [], "bug_id": 36082, "is_private": false, "id": 78365, "creation_time": "2005-08-10T17:39:15Z", "time": "2005-08-10T17:39:15Z", "creator": "mm@arcus.com.au", "text": "> - FOUserAgent.getStream() is cool and very easy to use (now that it's properly\n> documented). People will want to load images from a CMS without having to\n> write an URL handler. URIs like \"cms:823746843?lng=fr\" for example.\nOK\n\n> - URI resolution using XML Commons Resolver should be possible, i.e.\n> URIResolver and ideally EntityResolver should be supported, i.e. FOP should\n> be able to extract the necessary infos out of Source and InputSource\n> instances when loading images.\nAre you thinking of having set/getURIResolver methods on FOUserAgent?\n\n> - If you can make the whole thing work for GIF by directly working with an\n> URLConnection that's cool, but I wouldn't expose something like URLConnection\n> to the outside of FOP.\nOK\n> - Investigate ImageIO as an alternative means to load GIF.\nHmm, want to look at some other items in the image handling stuff first.", "attachment_id": null}, {"count": 9, "tags": [], "text": "(In reply to comment #8)\n> > - URI resolution using XML Commons Resolver should be possible, i.e.\n> > URIResolver and ideally EntityResolver should be supported, i.e. FOP should\n> > be able to extract the necessary infos out of Source and InputSource\n> > instances when loading images.\n> Are you thinking of having set/getURIResolver methods on FOUserAgent?\n\nExactly.\n\n> > - Investigate ImageIO as an alternative means to load GIF.\n> Hmm, want to look at some other items in the image handling stuff first.\n\nThat's ok. One thing after the other. :-) You may have seen, I've uploaded the \ninitial ImageIOImage implementation.\nhttp://svn.apache.org/viewcvs?rev=231223&view=rev\n", "is_private": false, "bug_id": 36082, "id": 78367, "time": "2005-08-10T17:46:24Z", "creator": "jeremias@apache.org", "creation_time": "2005-08-10T17:46:24Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "mm@arcus.com.au", "attachment_id": 16031, "is_private": false, "id": 78464, "time": "2005-08-13T15:35:57Z", "bug_id": 36082, "creation_time": "2005-08-13T15:35:57Z", "text": "Created attachment 16031\nRevised patch\n\nA revised patch for the uri resolving issue. This patch does actually do a few\nthings:\n\n1. Addresses the URI resolving issue as discussed in this bug by providing a\nFOP implementation of the URIResolver interface as well as the capabilities to\nset resolver on the FOUserAgent object.\n\n2. Modifies the BMPReader to extract the resolution information.\n\n3. Fixes a possible array bounds exception in BMPImage which can happen for BMP\nimages with extra bytes at the end.\n\n4. Provides some infrastructure in ImageFactory in preparation of external\nconfiguration of multiple prioritised image providers per mime type.\n\n5. Sets a proper base URL in SVGElement.\n\n6. Provides test cases and test images for the different formats and\nresolutions."}, {"count": 11, "tags": [], "bug_id": 36082, "attachment_id": 16032, "text": "Created attachment 16032\nNew class providing the FOP default implementation of the URIResolver interface", "id": 78465, "time": "2005-08-13T15:36:58Z", "creator": "mm@arcus.com.au", "creation_time": "2005-08-13T15:36:58Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 36082, "attachment_id": 16033, "text": "Created attachment 16033\nTest images required by the test cases - to go into test/resources/images", "id": 78466, "time": "2005-08-13T15:38:44Z", "creator": "mm@arcus.com.au", "creation_time": "2005-08-13T15:38:44Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 36082, "is_private": false, "id": 78467, "creation_time": "2005-08-13T15:39:45Z", "time": "2005-08-13T15:39:45Z", "creator": "mm@arcus.com.au", "text": "Created attachment 16034\nThe test case files - to go into test/layoutengine/testcases", "attachment_id": 16034}, {"count": 14, "tags": [], "bug_id": 36082, "attachment_id": null, "text": "Applied. Thanks a lot, Manuel. This is a big step in the right direction!\nhttp://svn.apache.org/viewcvs?rev=232786&view=rev\n\nI'll commit a couple of JUnit test cases in a minute that uses a custom \nURIResolver and demonstrates how this stuff is used. It also shows a couple of \nproblems the will eventually need to be solved:\n- The URI Resolution does not yet affect URIs in Batik.\n- The ImageFactory should not rely on the InputStream on the StreamSource to \nbe set, as components like XML Commons Resolver don't do that. They only set \nthe resolved URL on a (Stream?)Source object. This means that in the \nFOUserAgent, a Source should be returned, not a StreamSource. For SVG graphics \nyou might even want to supply a DOMSource, but that's only nice-to-have and \nfor later. I'm resolving this issue now since it's purpose is fulfilled now.", "id": 78502, "time": "2005-08-15T12:43:52Z", "creator": "jeremias@apache.org", "creation_time": "2005-08-15T12:43:52Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 36082, "is_private": false, "id": 78519, "creation_time": "2005-08-15T18:23:03Z", "time": "2005-08-15T18:23:03Z", "creator": "mm@arcus.com.au", "text": "Created attachment 16053\nNext revision\n\nMade changes as per this conversation:\n\n> > - The ImageFactory should not rely on the InputStream on the\n> > StreamSource to be set, as components like XML Commons Resolver don't\n> > do that. They only set the resolved URL on a (Stream?)Source object.\n> > This means that in the FOUserAgent, a Source should be returned, not\n> > a StreamSource. For SVG graphics you might even want to supply a\n> > DOMSource, but that's only nice-to-have and for later. I'm resolving\n> > this issue now since it's purpose is fulfilled now.\n> I was considering that as well but I am still hesitant to change \n> internal interfaces around too much. If it is agreeable to either \n> abolish the FOUserAgent.getStream() function or replace it with a \n> getSource() function I'll be happy to do this.\n\nI'd actually simply call it \"resolveURI(String)\" and return a Source,\nsimilar to the resolve() method in URIResolver. Source and its\nimplementations provide all the different access variant for getting at\nsources. ATM, it suffices to support arbitrary sources which simply\nreturn a SystemID (which you can simply convert to a URL) and\nStreamSource whose getInputStream() returns a non-null value which you\nalready implemented. DOMSource can wait till later and other stuff can\nbe added as needed. We simply need to support providing InputStreams\n(done) and XML Commons URIResolver (open).", "attachment_id": 16053}, {"count": 16, "tags": [], "bug_id": 36082, "attachment_id": null, "text": "(In reply to comment #15)\n> Created an attachment (id=16053) [edit]\n> Next revision\n> Made changes as per this conversation:\n\nVery cool! Applied. Thanks a lot. My XML Commons Resolver example works now, \ntoo. I'll expand a little on the test case to demostrate different resolution \nschemes.\nhttp://svn.apache.org/viewcvs?rev=232949&view=rev\n", "id": 78531, "time": "2005-08-16T08:55:09Z", "creator": "jeremias@apache.org", "creation_time": "2005-08-16T08:55:09Z", "is_private": false}, {"count": 17, "tags": [], "creator": "gadams@apache.org", "is_private": false, "id": 155776, "attachment_id": null, "bug_id": 36082, "creation_time": "2012-04-01T06:40:04Z", "time": "2012-04-01T06:40:04Z", "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed"}]
[{"count": 0, "tags": [], "bug_id": 48259, "text": "Created attachment 24582\nUse HashMap for keeping values distribution instead of ArrayList\n\nThere is no actually need to store *each* value separately in StatCalculator class. It's enough to save only counter of occurrences for every value. I propose HashMap class for that instead of ArrayList.\n\nHashMap provides several major benefits:\n - It occupies less memory than ArrayList, especially for large data sets, because every inserted value will be kept within just one pair (key-value).\n - It has faster data insert (there is no need to call Collections.binarySearch() for every addValue(), insert into HashMap has O(1) complexity)\n - It still stays quite fast for reading. It calls for sorting in modified getPercentPoint() method, but sorts only keys. A number of unique keys is usually much less than total count of inserted values.\n\nSorry, I didn't check modified StatCalculator on real data yet, just run JMeter tests. I will do it after the weekend. But I think it will work fine.\n\nI worked at SVN build 883037.", "id": 132197, "time": "2009-11-21T21:58:14Z", "creator": "andrey.hitrin@gmail.com", "creation_time": "2009-11-21T21:58:14Z", "is_private": false, "attachment_id": 24582}, {"count": 1, "tags": [], "bug_id": 48259, "text": "Thanks for the patch.\n\nThis has been applied to SVN:\n\nURL: http://svn.apache.org/viewvc?rev=890589&view=rev\nLog:\nBug 48259 - Improve StatCalculator performance by using HashMap\n\nI made a few changes:\n- instead of sorting the keys and using last or first to get max and min the code keeps track of the values.\n- the sorted TreeSet is cached\n- use MutableLong (Commons LANG) instead of Long", "id": 132816, "time": "2009-12-14T16:59:20Z", "creator": "sebb@apache.org", "creation_time": "2009-12-14T16:59:20Z", "is_private": false, "attachment_id": null}]
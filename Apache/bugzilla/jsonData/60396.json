[{"count": 0, "tags": [], "bug_id": 60396, "text": "The setWrapText doesn't correctly interpret new line characters when using the streaming version the Excel renderer. This can be demonstrated using and amending the example code as follows:\n\n        SXSSFWorkbook wb = new SXSSFWorkbook(100); \n        Sheet sh = wb.createSheet();\n        for(int rownum = 0; rownum < 1000; rownum++){\n            Row row = sh.createRow(rownum);\n            for(int cellnum = 0; cellnum < 10; cellnum++) {\n                \n                Cell cell = row.createCell(cellnum);\n                String address = new CellReference(cell).formatAsString();\n\n                CellStyle cellStyle = wb.createCellStyle();\n                cellStyle.setWrapText(true);\n\n                cell.setCellStyle(cellStyle);\n\n                address += \"\\ntest\";\n\n                row.setHeightInPoints((2*sh.getDefaultRowHeightInPoints()));\n\n                cell.setCellValue(address);                \n            }\n        }\n\nSwitching the above code to use the XSSFWorkbook instead will correctly render the spreadsheet.", "id": 195095, "time": "2016-11-21T00:44:35Z", "creator": "marc@schregardus.com.au", "creation_time": "2016-11-21T00:44:35Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 195103, "time": "2016-11-21T10:58:40Z", "bug_id": 60396, "creation_time": "2016-11-21T10:58:40Z", "is_private": false, "text": "In Excel, cell styles are workbook scoped not cell scoped. If you create lots, you'll run out...\n\nWhat happens if you move the cell style creation outside of the loop, so you create the style only once?"}, {"count": 2, "tags": [], "bug_id": 60396, "attachment_id": null, "id": 195134, "time": "2016-11-21T23:54:58Z", "creator": "marc@schregardus.com.au", "creation_time": "2016-11-21T23:54:58Z", "is_private": false, "text": "In my production code, the styles are cached and I still get the same issue. To demonstrate, I've amended the code below to create the style outside the loop (so only 1 style is created), and there is still the problem with wrapping for the streamed version of the renderer.\n\n        SXSSFWorkbook wb = new SXSSFWorkbook(100); \n//        XSSFWorkbook wb = new XSSFWorkbook(); \n\n        CellStyle cellStyle = wb.createCellStyle();\n        cellStyle.setWrapText(true);\n        \n        Sheet sh = wb.createSheet();\n        for(int rownum = 0; rownum < 1000; rownum++){\n            Row row = sh.createRow(rownum);\n            for(int cellnum = 0; cellnum < 10; cellnum++) {\n                \n                Cell cell = row.createCell(cellnum);\n                String address = new CellReference(cell).formatAsString();\n                address += \"\\ntest\";\n\n                row.setHeightInPoints((2*sh.getDefaultRowHeightInPoints()));\n\n                cell.setCellStyle(cellStyle);\n                cell.setCellValue(address);                \n            }\n        }\n\nIf you switch to the XSSFWorkbook (commented out), then the spreadsheet is rendered correctly"}, {"count": 3, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 195891, "time": "2017-01-06T14:13:39Z", "bug_id": 60396, "creation_time": "2017-01-06T14:13:39Z", "is_private": false, "text": "I tried to reproduce this with the following test, but LibreOffice does show both resulting files equally, let's see if it is the same on Excel itself for me.\n\n\n    @Test\n    public void bug60396() throws Exception {\n        writeWithWrappedText(new SXSSFWorkbook(100), \"60396s\");\n        writeWithWrappedText(new XSSFWorkbook(), \"60396\");\n    }\n\n    private void writeWithWrappedText(Workbook wb, String file) throws Exception {\n        CellStyle cellStyle = wb.createCellStyle();\n        cellStyle.setWrapText(true);\n\n        Sheet sh = wb.createSheet();\n        for(int rownum = 0; rownum < 1000; rownum++){\n            Row row = sh.createRow(rownum);\n            for(int cellnum = 0; cellnum < 10; cellnum++) {\n\n                Cell cell = row.createCell(cellnum);\n                String address = new CellReference(cell).formatAsString();\n                address += \"\\ntest\";\n\n                row.setHeightInPoints((2*sh.getDefaultRowHeightInPoints()));\n\n                cell.setCellStyle(cellStyle);\n                cell.setCellValue(address);\n            }\n        }\n\n        OutputStream out = new FileOutputStream(\"/tmp/\" + file +  \".xlsx\");\n        try {\n            wb.write(out);\n        } finally {\n            out.close();\n        }\n\n        // also reformat the resulting files to make it easier to compare them\n        OOXMLPrettyPrint.main(new String[] {\n                \"/tmp/\" + file +  \".xlsx\",\n                \"/tmp/\" + file +  \"-pretty.xlsx\"\n        } );\n\n        wb.close();\n    }"}, {"count": 4, "attachment_id": null, "bug_id": 60396, "is_private": false, "id": 199230, "time": "2017-06-16T11:01:55Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-06-16T11:01:55Z", "tags": [], "text": "I have now tried with latest trunk and could not reproduce this, if you are still having this issue with the latest version of POI then please reopen this issue and attach screenshots that show the difference that you see together with the exact version of Excel that you are using."}]
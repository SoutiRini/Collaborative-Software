[{"count": 0, "tags": [], "creator": "drzewo@post.pl", "attachment_id": null, "text": "o.a.c.r.DataSourceRealm leaks connections (does not return to the pool) in\ngetRoles(String). The new connection is obtained from the data source, but never\nreturned. Bedides there seems to be a slight performance optimization possible\nso that the getRoles makes use of the very same connection the authenticate()\ndoes. Right now the whole authentication process i.e. authentication and\nretrieval of user roles (which I consider as a whole and non-separable) requires\n*two* connections of which one is never returned. I observe the increase of the\nnumber of database backend. It eventually reaches the limit rendering the Realm\nunusable.\n\nOne might workaround it by adding the following attributes in her datasource\nResource definition: removeAbandoned=\"true\" removeAbandonedTimeout=\"15\". But for\nheavy loaded applications which extensively use the Realm facility 15 seconds\nmight be way too much.\n\nHere is what logAbandoned=\"true\" produced:\n\nDBCP object created 2005-02-02 14:40:38 by the following code was never closed:\njava.lang.Exception\n   at\norg.apache.tomcat.dbcp.dbcp.AbandonedTrace.setStackTrace(AbandonedTrace.java:157)\n   at\norg.apache.tomcat.dbcp.dbcp.AbandonedObjectPool.borrowObject(AbandonedObjectPool.java:76)\n   at\norg.apache.tomcat.dbcp.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:95)\n   at\norg.apache.tomcat.dbcp.dbcp.BasicDataSource.getConnection(BasicDataSource.java:540)\n   at org.apache.catalina.realm.DataSourceRealm.open(DataSourceRealm.java:407)\n   at org.apache.catalina.realm.DataSourceRealm.getRoles(DataSourceRealm.java:538)\n   at\norg.apache.catalina.realm.DataSourceRealm.authenticate(DataSourceRealm.java:360)\n   at\norg.apache.catalina.realm.DataSourceRealm.authenticate(DataSourceRealm.java:284)\n   at\norg.apache.catalina.authenticator.FormAuthenticator.authenticate(FormAuthenticator.java:256)\n   at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:391)\n   at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:526)\n   at org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:365)\n   at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n   at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n   at\norg.apache.catalina.valves.FastCommonAccessLogValve.invoke(FastCommonAccessLogValve.java:481)\n   at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n   at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n   at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:825)\n   at\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:738)\n   at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:526)\n   at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n   at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n   at java.lang.Thread.run(Unknown Source)\n\nI volunteer to fix this bug as well as rework the DataSourceRealm which seems a\nbit messy to me IMHO. Particularly the fact that two connections are reqired is\nthe most annoying.", "id": 70374, "time": "2005-02-02T15:06:11Z", "bug_id": 33357, "creation_time": "2005-02-02T15:06:11Z", "is_private": false}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "Didn't you mention the problem earlier in another report ? I remember something\nlike this, but didn't see anything obvious in the code (which I'm not too\nfamiliar with).\n\nYes, refactoring and removing the need for using two connections would be\nuseful. Be careful not to introduce new bugs, though ;)", "id": 70377, "time": "2005-02-02T16:17:39Z", "bug_id": 33357, "creation_time": "2005-02-02T16:17:39Z", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "drzewo@post.pl", "is_private": false, "id": 70405, "time": "2005-02-02T20:07:46Z", "bug_id": 33357, "creation_time": "2005-02-02T20:07:46Z", "tags": [], "text": "(In reply to comment #1)\n> Didn't you mention the problem earlier in another report ? I remember something\n> like this, but didn't see anything obvious in the code (which I'm not too\n> familiar with).\nYou might have confused it with this enhancement proposal:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=33266\n\nBoth issues emerged while trying to setup a self-contained webapp (with its own\ndatasource, realm and database driver in WEB-INF/lib). The one decribed in this\nreport is however far more severe. "}, {"count": 3, "tags": [], "bug_id": 33357, "text": "Created attachment 14165\nRefactored o.a.c.realm.DataSourceRealm", "id": 70435, "time": "2005-02-03T01:20:36Z", "creator": "drzewo@post.pl", "creation_time": "2005-02-03T01:20:36Z", "is_private": false, "attachment_id": 14165}, {"count": 4, "tags": [], "bug_id": 33357, "attachment_id": 14166, "id": 70437, "time": "2005-02-03T01:25:09Z", "creator": "drzewo@post.pl", "creation_time": "2005-02-03T01:25:09Z", "is_private": false, "text": "Created attachment 14166\nModified o.a.c.realm.LocalStrings.properties\n\nFixed two message keys for more consistent look (uppercesed 's' in a word\ndatasourceRealm). The rest of resource bundles do not contain fixed keys."}, {"count": 5, "tags": [], "bug_id": 33357, "text": "Why not ...\n\nDo you know the purpose of the\n            if( !dbConnection.getAutoCommit() ) {\n                dbConnection.commit();             \n            }\nwhich was in the code before ? I do not see any writes being made.", "id": 70439, "time": "2005-02-03T01:38:31Z", "creator": "remm@apache.org", "creation_time": "2005-02-03T01:38:31Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "drzewo@post.pl", "attachment_id": null, "text": "(In reply to comment #5)\n> Why not ...\n> \n> Do you know the purpose of the\n>             if( !dbConnection.getAutoCommit() ) {\n>                 dbConnection.commit();             \n>             }\n> which was in the code before ? I do not see any writes being made.\n\nI'll look into it (by forcing autoCommit off) and let you know if it might have\nany impact.\n\n", "id": 70448, "time": "2005-02-03T10:28:57Z", "bug_id": 33357, "creation_time": "2005-02-03T10:28:57Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 33357, "text": "Created attachment 14168\no.a.c.realm.DataSourceRealm\n\nIndeed, according to jdbc specs, some resources (locks particularly) might not\nget released when leaving the connection uncommited. I added the required block\nback in a single place, just before closing the dbConnection (or should I say\nreturning to the pool)", "id": 70450, "time": "2005-02-03T10:56:24Z", "creator": "drzewo@post.pl", "creation_time": "2005-02-03T10:56:24Z", "is_private": false, "attachment_id": 14168}, {"count": 8, "tags": [], "bug_id": 33357, "text": "I have applied your patch.", "id": 70540, "time": "2005-02-05T11:36:58Z", "creator": "remm@apache.org", "creation_time": "2005-02-05T11:36:58Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "*** Bug 33526 has been marked as a duplicate of this bug. ***", "id": 70861, "time": "2005-02-11T21:39:35Z", "bug_id": 33357, "creation_time": "2005-02-11T21:39:35Z", "is_private": false}, {"count": 10, "tags": [], "text": "*** Bug 33938 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 72091, "creator": "remm@apache.org", "time": "2005-03-09T23:27:06Z", "bug_id": 33357, "creation_time": "2005-03-09T23:27:06Z", "attachment_id": null}]
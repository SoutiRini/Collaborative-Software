[{"count": 0, "text": "Inspired by a recent javadoc fix commit r1723681.\n\n     /**\n-     * Support for \"stateManageable\" JSR77\n+     * @return support for \"stateManageable\" JSR77\n      */\n     public boolean isStateManageable() {\n         return true;\n\n     /**\n-     * JSR 77. Always return false.\n+     * @return JSR 77. Always return <code>false</code>.\n      */\n     public boolean isStateManageable() {\n         return false;\n     }\n\nThe above methods are implemented by StandardContext and StandardWrapper respectively.\n\nJSR77:\nhttps://jcp.org/en/jsr/detail?id=77\n\nI have not read JSR77 in detail, just a quick review.\n\n reviewed ch.77.5 State Management\n\nA StateManageable object is defined as implementing the following properties:\n\nstate: int\nstartTime: long\n\nmethods:\n\nstart()\nstartRecursive()\nstop()\n\nand sending events when a state changes.\n\nThe state is defined as 5 states coded by integer values,\n0 STARTING\n1 RUNNING\n2 STOPPING\n3 STOPPED\n4 FAILED\n\nActual implementation in Tomcat:\n\nStandardWrapper: - Tomcat 6\n========================\n\n    public boolean isEventProvider() {\n        return false;\n    }\n   \n    public boolean isStateManageable() {\n        return false;\n    }\n   \n    public boolean isStatisticsProvider() {\n        return false;\n    }\n\nThe \"eventProvider\", \"stateManageable\", \"statisticsProvider\" properties exposed to JMX.\n\nThe methods start(), stop() are implemented, but are our internal methods -- they are not exposed to JMX.\n\nThere is no implementation of getState(), getStartTime(), startRecursive().\n\nStandardWrapper - Tomcat 7\n=======\nThe \"eventProvider\", \"stateManageable\", \"statisticsProvider\" properties exposed to JMX.\n\nMethods isEventProvider(), isStatisticsProvider() are declared as deprecated.\n\nStandardWrapper - Tomcat 8, 9\n=======\n\"stateManageable\" is exposed to JMX.\n\nMethods isEventProvider(), isStatisticsProvider() and their JMX properties removed.\n\nStandardContext - Tomcat 6\n============\nStandardContext implements all the above properties / methods, although \"startRecursive\" is not exposed to JMX.\n\n[[[\n    public int getState() {\n        if( started ) {\n            return 1; // RUNNING\n        }\n        if( initialized ) {\n            return 0; // starting ?\n        }\n        if( ! available ) {\n            return 4; //FAILED\n        }\n        // 2 - STOPPING\n        return 3; // STOPPED\n    }\n]]]\n\nStandardContext - Tomcat 7\n============\nLifecycle was redefined, the getState() method is defined in Lifecycle interface and now returns a LifecycleState\nThe \"state\" property is no longer exposed to JMX.\n\nstartRecursive(), isEventProvider(), isStatisticsProvider() methods deprecated. \n\nStandardContext - Tomcat 7/9\n============\nisStateManageable()/start()/stop()/getStartTime() are OK.\nDeprecated methods are removed.", "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 187502, "time": "2016-01-08T15:05:49Z", "bug_id": 58827, "creation_time": "2016-01-08T15:05:49Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 58827, "text": "Thoughts\n=========\n1. It may still be possible to support that StateManageable \"interface\"  -- I think with a custom MBean modeler object that will provide that \"state\" property, -- but I do not see much point.\n\nNobody complained since removal of \"state\" property in Tomcat 7.\n\n\n2. isStateManageable() can be safely removed from StandardWrapper.\n\nThe wrapper did not expose its start/stop methods via JMX, nor the \"state\" property.\n\n\n3. isStateManageable() in StandardContext\n\nI think it is OK to keep it,\nbut update a comment to say that we do not really implement JSR 77.", "id": 187503, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2016-01-08T15:15:54Z", "time": "2016-01-08T15:15:54Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58827, "text": "My initial reaction was to say fix the JSR77 implementation.\n\nHowever, having seen that this was broken back in Tomcat 7 and that no-one has complained, my preference would be to mark anything JSR77 related deprecated in 8.0.x and remove it entirely in 9.0.x.", "id": 187582, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2016-01-12T21:40:37Z", "time": "2016-01-12T21:40:37Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58827, "attachment_id": null, "is_private": false, "id": 188105, "time": "2016-02-01T11:11:55Z", "creator": "markt@apache.org", "creation_time": "2016-02-01T11:11:55Z", "text": "The remains of the JSR-77 implementation have been removed from 9.0.x."}, {"count": 4, "tags": [], "bug_id": 58827, "attachment_id": null, "is_private": false, "id": 188136, "time": "2016-02-02T00:33:06Z", "creator": "markt@apache.org", "creation_time": "2016-02-02T00:33:06Z", "text": "And deprecated in 8.0.x for 8.0.32 onwards."}]
[{"count": 0, "tags": [], "bug_id": 44956, "attachment_id": null, "id": 116396, "time": "2008-05-08T17:00:34Z", "creator": "giedrius.noreikis@gmail.com", "creation_time": "2008-05-08T17:00:34Z", "is_private": false, "text": "We are having problems with an org.apache.xml.security.signature.XMLSignature instance creation in a multi-threaded environment: sometimes an ArrayIndexOutOfBoundsException is thrown:\n\njava.lang.ArrayIndexOutOfBoundsException: 38\nat java.util.ArrayList.add(Unknown Source)\nat org.apache.xml.security.keys.KeyInfo.<init>(Unknown Source)\nat org.apache.xml.security.signature.XMLSignature.<init>(Unknown Source)\n...\n\nThe XMLSignature constructor being used is:\npublic XMLSignature(Element element, String BaseURI)\n\nLooking further at the sources I found out that:\n1. The KeyInfo constructor being invoked by the XMLSignature constructor must be public KeyInfo(Element element, String BaseURI) (XMLSignature:297).\n2. The exact line producing the exception must be _storageResolvers.add(null) (KeyInfo:123).\n3. Upon the creation, the _storageResolvers variable of *each* KeyInfo instance holds a reference to the *single* static nullList variable (KeyInfo:1067). Thus, adding null to that list effectively modifies the single shared ArrayList instance, while concurrent access and structural modifications of an ArrayList instance are not allowed.\n4. The entire _storageResolvers.add(null) statement seems to be useless and probably could be simply removed.\n5. IMHO, such a strange invention :) as that nullList should be evaluated and probably removed as well."}, {"count": 1, "tags": [], "bug_id": 44956, "attachment_id": null, "id": 116564, "time": "2008-05-13T07:49:14Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-05-13T07:49:14Z", "is_private": false, "text": "I'd like Raul to comment on this one, since I think this is part of his \nperformance improvement changes. It seems that if we just removed line 123\nof KeyInfo.java, it would fix the problem:\n\n      _storageResolvers.add(null);\n\nIf there is a simple, low-risk fix then I am open to adding this to 1.4.2.\n\n\n(In reply to comment #0)\n> We are having problems with an org.apache.xml.security.signature.XMLSignature\n> instance creation in a multi-threaded environment: sometimes an\n> ArrayIndexOutOfBoundsException is thrown:\n> \n> java.lang.ArrayIndexOutOfBoundsException: 38\n> at java.util.ArrayList.add(Unknown Source)\n> at org.apache.xml.security.keys.KeyInfo.<init>(Unknown Source)\n> at org.apache.xml.security.signature.XMLSignature.<init>(Unknown Source)\n> ...\n> \n> The XMLSignature constructor being used is:\n> public XMLSignature(Element element, String BaseURI)\n> \n> Looking further at the sources I found out that:\n> 1. The KeyInfo constructor being invoked by the XMLSignature constructor must\n> be public KeyInfo(Element element, String BaseURI) (XMLSignature:297).\n> 2. The exact line producing the exception must be _storageResolvers.add(null)\n> (KeyInfo:123).\n> 3. Upon the creation, the _storageResolvers variable of *each* KeyInfo instance\n> holds a reference to the *single* static nullList variable (KeyInfo:1067).\n> Thus, adding null to that list effectively modifies the single shared ArrayList\n> instance, while concurrent access and structural modifications of an ArrayList\n> instance are not allowed.\n> 4. The entire _storageResolvers.add(null) statement seems to be useless and\n> probably could be simply removed.\n> 5. IMHO, such a strange invention :) as that nullList should be evaluated and\n> probably removed as well.\n> \n\n"}, {"count": 2, "tags": [], "bug_id": 44956, "text": "According to my tests, removing this line fixes the problem.\nIf more radical changes are undesirable due to a higher risk, to prevent such bugs in future I would propose at least making that nullList final and unmodifiable:\n\n    static final List nullList;\n    static {\n\t    List list = new ArrayList();\n\t    list.add(null);\n\t    nullList = Collections.unmodifiableList(list);\n    }\n\n\nBTW, currently I'm working on a project using xmlsec library, and I have to fix such issues anyway (just made own build).. So, in case you need help, I could contribute more, by fixing bugs I've found, for example.\n\n\n(In reply to comment #1)\n> I'd like Raul to comment on this one, since I think this is part of his \n> performance improvement changes. It seems that if we just removed line 123\n> of KeyInfo.java, it would fix the problem:\n>       _storageResolvers.add(null);\n> If there is a simple, low-risk fix then I am open to adding this to 1.4.2.\n> (In reply to comment #0)\n> > We are having problems with an org.apache.xml.security.signature.XMLSignature\n> > instance creation in a multi-threaded environment: sometimes an\n> > ArrayIndexOutOfBoundsException is thrown:\n> > \n> > java.lang.ArrayIndexOutOfBoundsException: 38\n> > at java.util.ArrayList.add(Unknown Source)\n> > at org.apache.xml.security.keys.KeyInfo.<init>(Unknown Source)\n> > at org.apache.xml.security.signature.XMLSignature.<init>(Unknown Source)\n> > ...\n> > \n> > The XMLSignature constructor being used is:\n> > public XMLSignature(Element element, String BaseURI)\n> > \n> > Looking further at the sources I found out that:\n> > 1. The KeyInfo constructor being invoked by the XMLSignature constructor must\n> > be public KeyInfo(Element element, String BaseURI) (XMLSignature:297).\n> > 2. The exact line producing the exception must be _storageResolvers.add(null)\n> > (KeyInfo:123).\n> > 3. Upon the creation, the _storageResolvers variable of *each* KeyInfo instance\n> > holds a reference to the *single* static nullList variable (KeyInfo:1067).\n> > Thus, adding null to that list effectively modifies the single shared ArrayList\n> > instance, while concurrent access and structural modifications of an ArrayList\n> > instance are not allowed.\n> > 4. The entire _storageResolvers.add(null) statement seems to be useless and\n> > probably could be simply removed.\n> > 5. IMHO, such a strange invention :) as that nullList should be evaluated and\n> > probably removed as well.\n> > \n\n", "id": 116585, "time": "2008-05-13T16:23:53Z", "creator": "giedrius.noreikis@gmail.com", "creation_time": "2008-05-13T16:23:53Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 44956, "attachment_id": null, "id": 116618, "time": "2008-05-14T14:11:29Z", "creator": "raul-info@r-bg.com", "creation_time": "2008-05-14T14:11:29Z", "is_private": false, "text": "Good Analysis. I don't know why I forgot to remove add(null) in the contractor that was the purpose of nullList, don't create and add a null to a list that 98% percent of the time will just have a null. And not to change the rest of the code that depend on the null, as we don't have enough (any?) testcases that check that behavior.\nI have just add all the lines(including the unmodifiableList) even after checking that the only add left checks before if the list is the null one. It looks like a good way to detect the next error.\nThanks for detecting and for the report.\n\nRegards"}]
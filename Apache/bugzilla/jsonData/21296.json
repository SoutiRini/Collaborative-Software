[{"count": 0, "tags": [], "bug_id": 21296, "attachment_id": null, "id": 39901, "time": "2003-07-02T23:32:58Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2003-07-02T23:32:58Z", "is_private": false, "text": "At least according to OptimizeIt, Ant doing an empty incremental build (i.e.\nnothing actually needs to be done but it doesn't know that yet) seems to spend a\nbunch of time matching paths, which is relatively concentrated code that should\nbe optimizable. SelectorUtils methods in particular seemed to be called heavily\n- tokenizePath(String), and match(String,String,boolean).\n\nTry this patch; at least for me it seems to shave off a few percent from the\nuser CPU usage. Tested on NetBeans sources, script nbbuild/build.xml, target\nall-web/advanced - this builds many subprojects, each of which typically runs\n<javac> and <jar> and a couple of other things.\n\nI tried to use Collections classes in place of Hashtable + Vector, maybe saving\na little bit of useless synchronization. (If Ant sources can indeed assume JDK\n1.2 now, there seems little reason to use the older and slower classes.)\n\nAnt also seems to waste a bunch of time cloning AntTypeDefinition's if you have\na lot of subprojects, and generally copying every attribute and definition from\nthe parent project to the child. Probably this kind of thing could be made\nlighter weight with an inheritance or copy-on-write model for the subproject,\nsince typically the subproject will only define a few more properties and maybe\na couple of tasks. But that is a potentially bigger code change that I didn't\nwant to get into. Especially given the potential for breaking some rarely-used\nAPI contract relating to mutability or identity of some Hashtable returned from\nsome method on Project etc.\n\nProject also wastes some time & memory cloning its Vector of buildListeners\nevery time it logs a message, which seems silly. Not even sure why any of that\nis synchronized at all, unless <parallel> relies on it."}, {"count": 1, "attachment_id": 7076, "creator": "jesse.glick@netbeans.com", "is_private": false, "id": 39902, "time": "2003-07-02T23:33:55Z", "bug_id": 21296, "creation_time": "2003-07-02T23:33:55Z", "tags": [], "text": "Created attachment 7076\nPossible patch; at least all the standard unit tests seem to pass"}, {"count": 2, "tags": [], "text": "Oh, and heap usage was suffering from various classes creating collections\n(Hashtable's etc.) that they often never used. Patch simply changes some of the\nworst offenders to init the member only on demand.", "attachment_id": null, "id": 39903, "creator": "jesse.glick@netbeans.com", "time": "2003-07-02T23:35:23Z", "bug_id": 21296, "creation_time": "2003-07-02T23:35:23Z", "is_private": false}, {"count": 3, "tags": [], "text": "I will have a look at the copying of AntTypeDefinitions (I am guilty of this).\nThe reason for copying the contents rather that just the pointer\nwas to get a correct project reference. A previous version of the code used the\nwrong project and the solution was to copy the full definition.\nThis is not good, I will have a look again at a different way to do this.\n", "is_private": false, "id": 39914, "creation_time": "2003-07-03T08:16:24Z", "time": "2003-07-03T08:16:24Z", "creator": "peter.reilly@corvil.com", "bug_id": 21296, "attachment_id": null}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 39972, "time": "2003-07-04T07:05:48Z", "bug_id": 21296, "creation_time": "2003-07-04T07:05:48Z", "is_private": false, "text": "I'll look into Jesse's patch.\n\nAs far as cloning the listeners goes - if anybody used <record> inside <parallel>\nthis could get us into trouble if we used the live list of listeners.  Same goes\nfor tasks that clean up AntClassLoader instances (and thus remove a listener).\n"}, {"count": 5, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 39983, "time": "2003-07-04T08:49:03Z", "bug_id": 21296, "creation_time": "2003-07-04T08:49:03Z", "is_private": false, "text": "I've committed the patch with two minor changes:\n\n* reverted the import * lines\n\n* Collections.replaceAll is JDK 1.4, changed it to code similar to the original\n  code (Target.replaceChild).\n\nLeaving this open for Peter and AntTypeDefinition part for now."}, {"count": 6, "tags": [], "bug_id": 21296, "attachment_id": null, "is_private": false, "id": 39988, "time": "2003-07-04T10:00:18Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-07-04T10:00:18Z", "text": "Commited the changes to AntTypeDefinition so that\nit is not copied into the sub-projects."}, {"count": 7, "text": "Thanks all for the quick handling! Sorry about the JDK 1.4 call, I missed that one.\n\nRe. cloning Project.listeners - I think there may be a safe way to do it, unless\nI am missing something. I will try to create a separate patch/bug for evaluation.", "bug_id": 21296, "attachment_id": null, "id": 39998, "time": "2003-07-04T15:44:40Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2003-07-04T15:44:40Z", "tags": [], "is_private": false}, {"count": 8, "text": "ComponentHelper.initSubProject still shows up as a big allocator (of Hashtable\nentries). Not sure how much it matters though.", "bug_id": 21296, "attachment_id": null, "id": 40003, "time": "2003-07-04T16:39:13Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2003-07-04T16:39:13Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "text": "The hashtable entries would be the typedefinitions.\nEach sub-project is allowed to define its own types, and these\ndefinitions do not bubble up to the parent. A chained hashtable\ncould be implemented - but it is probally not worth it.\n", "attachment_id": null, "id": 40005, "creation_time": "2003-07-04T16:47:17Z", "time": "2003-07-04T16:47:17Z", "creator": "peter.reilly@corvil.com", "bug_id": 21296, "is_private": false}, {"count": 10, "tags": [], "bug_id": 21296, "attachment_id": null, "id": 40011, "time": "2003-07-05T12:14:58Z", "creator": "conor@apache.org", "creation_time": "2003-07-05T12:14:58Z", "is_private": false, "text": "Regarding listener cloning, it is a side effect of using the getBuildListeners()\nmethod. This is used, in general, because Listeners can unregister themselves\nwhen they receive a BuildEvent. This is typically done in the BuildFinished\nevent and causes a error in the processing of the listeners, typically the next\nlistener not receiving the event and possibly a NoSuchElement or similar exception.\n\nWhether it is safe to assume that listeners cannot remove themselves when\nprocessing message events, I'm not sure. If it is, this \"contract\" can be\nenforced through checking the loggingMessage boolean."}]
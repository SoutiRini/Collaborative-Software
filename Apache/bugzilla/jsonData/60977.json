[{"count": 0, "tags": [], "creator": "therock@cyberrock.net", "text": "Created attachment 34909\nExample created file\n\nWhen adding a custom property, and invalid .xlsx is created.\n\nusing the java code:\n\ntry (final XSSFWorkbookworkbook = new XSSFWorkbook()) {\n   final POIXMLProperties properties = workbook.getProperties();\n   final POIXMLProperties.CustomProperties customProperties = properties.getCustomProperties();\n   customProperties.addProperty(\"Project\", project.getName());\n\n   workbook.write(outputStream);\n\n   try (final java.io.FileOutputStream fs = new java.io.FileOutputStream(\"C:\\\\temp\\\\temp.xlsx\")) {\n      workbook.write(fs);\n   }\n\n   \n When you try to open temp.xlsx in Excel, you get a \"file is corrupted\" warning.\n \n Upon disassembling the .xlsx file, I found the following incorrect custom.xml file in docProps:\n \n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><property pid=\"2\" fmtid=\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\" name=\"Project\"><vt:lpwstr>test</vt:lpwstr></property></Properties><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><property pid=\"2\" fmtid=\"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\" name=\"Project\"><vt:lpwstr>test</vt:lpwstr></property></Properties>\n\nNote the file seems to be written twice.", "id": 198271, "time": "2017-04-12T19:13:40Z", "bug_id": 60977, "creation_time": "2017-04-12T19:13:40Z", "is_private": false, "attachment_id": 34909}, {"attachment_id": null, "tags": [], "bug_id": 60977, "is_private": false, "count": 1, "id": 198274, "time": "2017-04-13T00:06:16Z", "creator": "onealj@apache.org", "creation_time": "2017-04-13T00:06:16Z", "text": "> workbook.write(outputStream);\n> workbook.write(fs);\n\nMight be because the workbook is being written out twice (which shouldn't be an issue unless the output streams map to the same file).\n\nCould you try this in the latest trunk build?"}, {"count": 2, "tags": [], "bug_id": 60977, "attachment_id": null, "is_private": false, "id": 198532, "time": "2017-04-25T19:00:14Z", "creator": "therock@cyberrock.net", "creation_time": "2017-04-25T19:00:14Z", "text": "Ok, I finally had some time to revisit this.  I was calling workbook.write twice, once to write to a memory stream, and again (only in debug) to save to a temp file for validation.\n\nI removed the 2nd call and instead just streamed the byte buffer to the temp file, and it now works properly.\n\nStill seems to me though this is a bug.  Shouldn't you be able to call .write multiple times without corrupting the spreadsheet?"}, {"count": 3, "tags": [], "bug_id": 60977, "attachment_id": null, "is_private": false, "id": 198534, "time": "2017-04-26T01:25:47Z", "creator": "onealj@apache.org", "creation_time": "2017-04-26T01:25:47Z", "text": "Were the 2 streams that you wrote to connected in some way?\n\nCan you post a short example of what you were doing, specifically the opening of the workbook, the creation of each OutputStream and the closure of the workbook and both output streams?\n\nIf you read the workbook in from a file, was that the same file as one of the output streams.\n\nI'm trying to get an idea where we should start for unit testing this. I agree that concatenating the contents of an xml file twice should not happen and result in an error, so long as it's within POI's ability to do so."}, {"count": 4, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "I narrowed this down to MemoryPackagePart accumulating the data across multiple writes via ZipPackage. However I did not see an easy fix as this is also used on the read-side and in many other places, so a simple clean in there did not work...", "id": 200990, "time": "2017-09-20T07:19:18Z", "bug_id": 60977, "creation_time": "2017-09-20T07:19:18Z", "is_private": false, "attachment_id": null}, {"attachment_id": 35357, "tags": [], "bug_id": 60977, "is_private": false, "count": 5, "id": 201046, "time": "2017-09-21T15:43:28Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-09-21T15:43:28Z", "text": "Created attachment 35357\nReproducing testcase, open the resulting files"}]
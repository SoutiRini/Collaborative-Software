[{"count": 0, "tags": [], "bug_id": 49985, "attachment_id": null, "text": "r998053\nhttp://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/el/parser/AstInteger.java\nhttp://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/el/parser/AstFloatingPoint.java\nhttp://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk/java/org/apache/el/parser/AstString.java\n\nUse lazy init without any synchronization in methods getInteger(), getFloatingPoint(), getString(), respectively.\n \nConsider AstInteger:\n\nprivate Number number;\n\n    protected Number getInteger() {\n        if (this.number == null) {\n            try {\n                this.number = new Long(this.image);\n            } catch (ArithmeticException e1) {\n                this.number = new BigInteger(this.image);\n            }\n        }\n        return number;\n    }\n\n\nData races on variable number :37\nin method getInteger() :39\nconcurrent read on line 40\nconcurrent write on lines 42, 44", "id": 140102, "time": "2010-09-23T08:55:42Z", "creator": "sergeyvorobyev@google.com", "creation_time": "2010-09-23T08:55:42Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 49985, "text": "I don't see any way this could cause a problem.\n\nIf you have a scenario where this could lead to unexpected behaviour, feel free to re-open this issue and add an explanation.", "id": 140342, "time": "2010-09-30T18:27:27Z", "creator": "markt@apache.org", "creation_time": "2010-09-30T18:27:27Z", "is_private": false, "attachment_id": null}, {"count": 2, "text": "First and most obviously, two or more Long/BigInteger objects could be allocated. It's not dangerous, but not good.\n\nSecond consider following:\n\nThread1:\nprotected Number getInteger() {\n        if (this.number == null) {\n            try {\n->              this.number = new Long(this.image); // this.number isn't null, but not fully complete.\n\nThread2:\nprotected Number getInteger() {\n        if (this.number == null) { // break, because this.number isn't null already.\n            ...\n        }\n->      return number; // publish not fully complete object link.\n    }\n\nFor more reasons see http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n(It's about dcl, but about lazy initialization generally two. First example become to this code exactly)", "bug_id": 49985, "attachment_id": null, "id": 140346, "time": "2010-10-01T04:06:16Z", "creator": "sergeyvorobyev@google.com", "creation_time": "2010-10-01T04:06:16Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 49985, "text": "AIUI making \"number\" volatile would prevent the re-ordering that can result in the object reference being set up before construction is complete. Yes?", "id": 140355, "time": "2010-10-01T07:56:05Z", "creator": "sebb@apache.org", "creation_time": "2010-10-01T07:56:05Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 49985, "is_private": false, "id": 140357, "time": "2010-10-01T08:07:19Z", "creator": "sergeyvorobyev@google.com", "creation_time": "2010-10-01T08:07:19Z", "tags": [], "text": "(In reply to comment #3)\n> AIUI making \"number\" volatile would prevent the re-ordering that can result in\n> the object reference being set up before construction is complete. Yes?\n\nYes, the reason is object reference being set up before construction is complete. One of possible solutions is making \"number\" volatile."}, {"count": 5, "tags": [], "bug_id": 49985, "attachment_id": null, "id": 140358, "time": "2010-10-01T08:15:36Z", "creator": "markt@apache.org", "creation_time": "2010-10-01T08:15:36Z", "is_private": false, "text": "I've yet to be convinced that there is an real issue here. I don't see any multi-threaded code paths into instances of those classes.\n\nIf we change anything (on the basis there might be a way for multiple threads to use one of these objects at the same time) then using volatile should prevent misbehaviour with minimal impact. I'm not concerned about possible additional object creation."}, {"count": 6, "text": "Lock at this stack-traces to see how this method can be on invoked from a number of threads:\n(I'm using dacapo tomcat benchmark)\n\nAstInteger:\n\n   Thread 22\n    #0  org/apache/el/parser/AstInteger.getInteger AstInteger.java:42\n    #1  org/apache/el/parser/AstInteger.getValue AstInteger.java:57\n    #2  org/apache/el/parser/AstDiv.getValue AstDiv.java:39\n    #3  org/apache/el/parser/AstGreaterThan.getValue AstGreaterThan.java:41\n    #4  org/apache/el/ValueExpressionImpl.getValue ValueExpressionImpl.java:186\n    #5  org/apache/jasper/runtime/PageContextImpl.proprietaryEvaluate PageContextImpl.java:935\n    #6  org/apache/jsp/jsp/jsp2/el/basic_002dcomparisons_jsp._jspService basic_002dcomparisons_jsp.java:115\n    #7  org/apache/jasper/runtime/HttpJspBase.service HttpJspBase.java:70\n    #8  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #9  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:377\n    #10 org/apache/jasper/servlet/JspServlet.serviceJspFile JspServlet.java:313\n    #11 org/apache/jasper/servlet/JspServlet.service JspServlet.java:260\n  \n Thread 28\n    #0  org/apache/el/parser/AstInteger.getInteger AstInteger.java:40\n    #1  org/apache/el/parser/AstInteger.getValue AstInteger.java:57\n    #2  org/apache/el/parser/AstDiv.getValue AstDiv.java:39\n    #3  org/apache/el/parser/AstGreaterThan.getValue AstGreaterThan.java:41\n    #4  org/apache/el/ValueExpressionImpl.getValue ValueExpressionImpl.java:186\n    #5  org/apache/jasper/runtime/PageContextImpl.proprietaryEvaluate PageContextImpl.java:935\n    #6  org/apache/jsp/jsp/jsp2/el/basic_002dcomparisons_jsp._jspService basic_002dcomparisons_jsp.java:115\n    #7  org/apache/jasper/runtime/HttpJspBase.service HttpJspBase.java:70\n    #8  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #9  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:377\n  \n\nAstFloatingPoint:\n\n   Thread 22\n    #0  org/apache/el/parser/AstFloatingPoint.getFloatingPoint AstFloatingPoint.java:40\n    #1  org/apache/el/parser/AstFloatingPoint.getValue AstFloatingPoint.java:52\n    #2  org/apache/el/parser/AstGreaterThanEqual.getValue AstGreaterThanEqual.java:37\n    #3  org/apache/el/ValueExpressionImpl.getValue ValueExpressionImpl.java:186\n    #4  org/apache/jasper/runtime/PageContextImpl.proprietaryEvaluate PageContextImpl.java:935\n    #5  org/apache/jsp/jsp/jsp2/el/basic_002dcomparisons_jsp._jspService basic_002dcomparisons_jsp.java:121\n    #6  org/apache/jasper/runtime/HttpJspBase.service HttpJspBase.java:70\n    #7  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #8  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:377\n    #9  org/apache/jasper/servlet/JspServlet.serviceJspFile JspServlet.java:313\n    #10 org/apache/jasper/servlet/JspServlet.service JspServlet.java:260\n    #11 javax/servlet/http/HttpServlet.service HttpServlet.java:717\n  \n Thread 28\n    #0  org/apache/el/parser/AstFloatingPoint.getFloatingPoint AstFloatingPoint.java:42\n    #1  org/apache/el/parser/AstFloatingPoint.getValue AstFloatingPoint.java:52\n    #2  org/apache/el/parser/AstGreaterThanEqual.getValue AstGreaterThanEqual.java:37\n    #3  org/apache/el/ValueExpressionImpl.getValue ValueExpressionImpl.java:186\n    #4  org/apache/jasper/runtime/PageContextImpl.proprietaryEvaluate PageContextImpl.java:935\n    #5  org/apache/jsp/jsp/jsp2/el/basic_002dcomparisons_jsp._jspService basic_002dcomparisons_jsp.java:121\n    #6  org/apache/jasper/runtime/HttpJspBase.service HttpJspBase.java:70\n    #7  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #8  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:377\n    #9  org/apache/jasper/servlet/JspServlet.serviceJspFile JspServlet.java:313\n \nAstString:\n   Thread 22\n    #0  org/apache/el/parser/AstString.getString AstString.java:38\n    #1  org/apache/el/parser/AstString.getValue AstString.java:51\n    #2  org/apache/el/parser/AstLessThan.getValue AstLessThan.java:37\n    #3  org/apache/el/ValueExpressionImpl.getValue ValueExpressionImpl.java:186\n    #4  org/apache/jasper/runtime/PageContextImpl.proprietaryEvaluate PageContextImpl.java:935\n    #5  org/apache/jsp/jsp/jsp2/el/basic_002dcomparisons_jsp._jspService basic_002dcomparisons_jsp.java:179\n    #6  org/apache/jasper/runtime/HttpJspBase.service HttpJspBase.java:70\n    #7  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #8  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:377\n    #9  org/apache/jasper/servlet/JspServlet.serviceJspFile JspServlet.java:313\n    #10 org/apache/jasper/servlet/JspServlet.service JspServlet.java:260\n    #11 javax/servlet/http/HttpServlet.service HttpServlet.java:717\n \n  Thread 28\n    #0  org/apache/el/parser/AstString.getString AstString.java:39\n    #1  org/apache/el/parser/AstString.getValue AstString.java:51\n    #2  org/apache/el/parser/AstLessThan.getValue AstLessThan.java:37\n    #3  org/apache/el/ValueExpressionImpl.getValue ValueExpressionImpl.java:186\n    #4  org/apache/jasper/runtime/PageContextImpl.proprietaryEvaluate PageContextImpl.java:935\n    #5  org/apache/jsp/jsp/jsp2/el/basic_002dcomparisons_jsp._jspService basic_002dcomparisons_jsp.java:179\n    #6  org/apache/jasper/runtime/HttpJspBase.service HttpJspBase.java:70\n    #7  javax/servlet/http/HttpServlet.service HttpServlet.java:717\n    #8  org/apache/jasper/servlet/JspServletWrapper.service JspServletWrapper.java:377\n    #9  org/apache/jasper/servlet/JspServlet.serviceJspFile JspServlet.java:313", "bug_id": 49985, "is_private": false, "id": 140361, "time": "2010-10-01T08:28:06Z", "creator": "sergeyvorobyev@google.com", "creation_time": "2010-10-01T08:28:06Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 49985, "attachment_id": null, "text": "(In reply to comment #6)\n> Lock at this stack-traces to see how this method can be on invoked from a\n> number of threads:\n\nBut is each thread in the pair using the same instance?  There's no evidence of that in the published trace.", "id": 140362, "time": "2010-10-01T09:25:13Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2010-10-01T09:25:13Z", "is_private": false}, {"count": 8, "attachment_id": null, "bug_id": 49985, "is_private": false, "id": 140363, "time": "2010-10-01T09:34:45Z", "creator": "sergeyvorobyev@google.com", "creation_time": "2010-10-01T09:34:45Z", "tags": [], "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > Lock at this stack-traces to see how this method can be on invoked from a\n> > number of threads:\n> \n> But is each thread in the pair using the same instance?  There's no evidence of\n> that in the published trace.\n\nI omit first line of race report, sorry.\n\nWARNING: Possible data race during write of size 1 at 0x76a1569c: {{{\n ...\n\nWhere 0x76a1569c is hashCode of object and field.\n\nAlso I always add something like this in critical sections:\n\nint hash = System.identityHashCode(this);\nlong tid = Thread.currentThread().getId();\nSystem.out.println(\">>VER>> START WRITE/READ \" + tid + \" \" + hash);\ntry {\n\tThread.sleep(10);\n} catch (InterruptedException e) {\nthrow new RuntimeException(e);\n}\n\nSystem.out.println(\">>VER>> END WRITE/READ \" + tid + \" \" + hash);    \n\nAnd analise stdout. \nThis race was verified."}, {"count": 9, "tags": [], "bug_id": 49985, "attachment_id": null, "text": "Really a pity some attention has been paid to the drones during Tomcat 7 development, I knew it would just attract more of them :)", "id": 140365, "time": "2010-10-01T09:51:41Z", "creator": "remm@apache.org", "creation_time": "2010-10-01T09:51:41Z", "is_private": false}, {"count": 10, "tags": [], "creator": "markt@apache.org", "text": "Fixed in trunk (will be in 7.0.3 onwards) and proposed for 6.0.x.\n\nThere are many places were static analysis incorrectly reports thread safety issues in the Tomcat code base. Bug reports that look like copy and pasted output from these tools tends to get ignored / resolved as invalid. In this case it took a close inspection of the EL parser to spot the place where these objects were cached to confirm this as a potential issue.\n\nIf you have done the analysis that demonstrates that there really is an issue it saves a lot of time all round if you include that in the initial bug report.", "id": 140388, "time": "2010-10-02T14:56:56Z", "bug_id": 49985, "creation_time": "2010-10-02T14:56:56Z", "is_private": false, "attachment_id": null}, {"count": 11, "text": "(In reply to comment #10)\n> Fixed in trunk (will be in 7.0.3 onwards) and proposed for 6.0.x.\n> \n> There are many places were static analysis \nThis is why we use dynamic analysis :) \nWe are experimenting with ThreadSanitizer for Java (search for it if curious). \nNot something we can offer to users yet, but already 'sort of works for us'. \n\n> incorrectly reports thread safety\n> issues in the Tomcat code base. Bug reports that look like copy and pasted\n> output from these tools tends to get ignored / resolved as invalid. In this\n> case it took a close inspection of the EL parser to spot the place where these\n> objects were cached to confirm this as a potential issue.\n> \n> If you have done the analysis that demonstrates that there really is an issue\n> it saves a lot of time all round if you include that in the initial bug report.\nAgree.", "bug_id": 49985, "attachment_id": null, "id": 140390, "time": "2010-10-02T16:10:45Z", "creator": "konstantin.s.serebryany@gmail.com", "creation_time": "2010-10-02T16:10:45Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "(In reply to comment #10)\n> (...) In this\n> case it took a close inspection of the EL parser to spot the place where these\n> objects were cached to confirm this as a potential issue.\n> \nFor reference: the caching of EL nodes is performed by\no.a.el.lang.ExpressionBuilder#createNodeInternal(String)\n(using o.a.el.lang.ExpressionBuilder#cache)", "id": 140410, "time": "2010-10-03T14:48:42Z", "bug_id": 49985, "creation_time": "2010-10-03T14:48:42Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": null, "bug_id": 49985, "is_private": false, "id": 140461, "time": "2010-10-04T17:16:33Z", "creator": "markt@apache.org", "creation_time": "2010-10-04T17:16:33Z", "tags": [], "text": "This has been fixed in 6.0.x and will be included in 6.0.30 onwards."}]
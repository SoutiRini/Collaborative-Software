[{"count": 0, "tags": [], "text": "Created attachment 26106\nPatched MathX based on version 776505 (3.7b3)\n\nThe formula 'mod(13,12)' entered into Excel produces the answer of '1'.  POI is evaluating 'mod(13,12)' to '0.9999999999999991'.\n\nI have attached a patched version of MathX based on version 776505 which fixes the problem.  Also attached is an updated TestMathX with the previously empty 'testMod' method filled in.  It still has some oddities when one or the other values are negative (returning '0.6000000000000001' vs '0.6' for 'mod(-3.4,2.0)' for instance), but that was a pre-existing condition prior to my change.", "attachment_id": 26106, "bug_id": 50033, "id": 140329, "time": "2010-09-30T14:03:56Z", "creator": "java@skow.org", "creation_time": "2010-09-30T14:03:56Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 50033, "attachment_id": 26107, "id": 140330, "time": "2010-09-30T14:04:42Z", "creator": "java@skow.org", "creation_time": "2010-09-30T14:04:42Z", "is_private": false, "text": "Created attachment 26107\nTest case which exposes the issue."}, {"count": 2, "tags": [], "bug_id": 50033, "text": "Thanks for the patch, applied in r1003504\n\nThe fact that in some cases the results are slightly 'off' is normal, it is the way floating-point arithmetic works. In particular, the value of 1.4 cannot be represented as an exact value, on low-level it is a result of a truncated series. A way to check it is via BigDecimal(1.4).toString() which returns 3.399999999999999911182158029987476766109466552734375. \n\n\nA smarter version of MathX.mod might use BigDecimal for calculations:\n\n    public static double mod(double n, double d) {\n        BigDecimal number = new BigDecimal(n);\n        BigDecimal divisor = new BigDecimal(d);\n\n        double result;\n\n        if (d == 0) {\n            result = Double.NaN;\n        }\n        else if (sign(n) == sign(d)) {\n            result = number.remainder(divisor).doubleValue();\n        }\n        else {\n            result = number.remainder(divisor).add(divisor).remainder(divisor).doubleValue();\n        }\n\n        return result;\n    }\n\n\n\nIn the case of MathX.mode this seems OK, but I'm reluctant to make this change. Using BigDecimal for calculations should be project-wide.\n\nRegards,\nYegor", "id": 140356, "time": "2010-10-01T08:04:02Z", "creator": "yegor@dinom.ru", "creation_time": "2010-10-01T08:04:02Z", "is_private": false, "attachment_id": null}]
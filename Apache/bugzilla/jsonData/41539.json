[{"count": 0, "tags": [], "creator": "jason.polites@gmail.com", "attachment_id": null, "id": 98964, "time": "2007-02-05T03:21:10Z", "bug_id": 41539, "creation_time": "2007-02-05T03:21:10Z", "is_private": false, "text": "java.lang.NullPointerException\n        at\norg.apache.naming.resources.WARDirContext.treeLookup(WARDirContext.java:792)\n        at\norg.apache.naming.resources.WARDirContext.getAttributes(WARDirContext.java:443)\n        at\norg.apache.naming.resources.WARDirContext.getAttributes(WARDirContext.java:424)\n        at\norg.apache.naming.resources.BaseDirContext.getAttributes(BaseDirContext.java:724)\n        at\norg.apache.naming.resources.ProxyDirContext.cacheLoad(ProxyDirContext.java:1525)\n        at\norg.apache.naming.resources.ProxyDirContext.cacheLookup(ProxyDirContext.java:1448)\n        at\norg.apache.naming.resources.ProxyDirContext.lookup(ProxyDirContext.java:282)\n        at\norg.apache.tomcat.util.http.mapper.Mapper.internalMapWrapper(Mapper.java:781)\n        at org.apache.tomcat.util.http.mapper.Mapper.internalMap(Mapper.java:625)\n        at org.apache.tomcat.util.http.mapper.Mapper.map(Mapper.java:515)\n        at\norg.apache.catalina.connector.CoyoteAdapter.postParseRequest(CoyoteAdapter.java:272)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:146)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n        at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n        at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)\n\n---------------------\n\nOccurs when restarting an instance of org.apache.catalina.startup.Embedded\n\nSingle WAR context (DocBase points directly to WAR file).  Restart is issued by\nstop(), then destroy(), followed by standard start-up process.  Application runs\nsuccessfully until restart.\n\nVarious combinations of stop() vs. destroy() have been used.  No change in result."}, {"count": 1, "tags": [], "bug_id": 41539, "is_private": false, "id": 99032, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2007-02-06T17:39:47Z", "time": "2007-02-06T17:39:47Z", "text": "Can you provide the source for a simple test case that exhibits this issue?"}, {"count": 2, "tags": [], "creator": "jason.polites@gmail.com", "attachment_id": null, "id": 99040, "time": "2007-02-06T23:44:34Z", "bug_id": 41539, "creation_time": "2007-02-06T23:44:34Z", "is_private": false, "text": "It's difficult to pull out an isolated test case, an I know this makes it\ndifficult to diagnose, however I do have some additional info:\n\nWhen debugging, I noticed that after the stop command is issued, not all\nconnectors die. It seems that internally tomcat establishes an HTTP connection,\nwhich causes the HTTP connector to \"re-initialise\".  Because the connector had\npreviously been stopped, it is in an uninitialised state but the \"initialised\"\nboolean value within the Connector is still set to true.  Hence Embedded thinks\nthe Connector is initialised (and I get a \"Connector already initialised\" INFO\nlog) and so the subsequent intialisation issued by the \"start\" command is\nignored.  The end result is that the connector is in a misaligned state\n(destroyed, but marked as initialised).\n\nEven though I am creating a \"new\" Embedded, somehow the \"old\" connector is being\nreused (I have verified this during debug).. perhaps some static references\nbeing held somewhere?\n\nI haven't tried altering the source for testing, and am not sure if this\ninitialisation confusion is the problem, but it seems to me the \"initialised\"\nboolean should be reset when the Connector is destroyed.  Alternatively (and\npreferrably), perhaps there should not be any static references held after the\nEmbedded instance is stopped?"}, {"count": 3, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "I can reproduce a variation of this. Looking at the JavaDoc for the Embedded class:\n<quote>\nAfter normal operations have begun, you can add and remove Connectors, Engines,\nHosts, and Contexts on the fly. However, once you have removed a particular\ncomponent, it must be thrown away -- you can create a new one with the same\ncharacteristics if you merely want to do a restart.\n</quote>\n\nI don't believe the current code supports what you are trying to do. I am going\nto  change this to an enhancement but I haven't looked into how feasible it\nwould be to implement. As always, patches are welcomed.", "id": 99873, "time": "2007-02-27T19:56:27Z", "bug_id": 41539, "creation_time": "2007-02-27T19:56:27Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 147164, "time": "2011-06-15T21:35:53Z", "bug_id": 41539, "creation_time": "2011-06-15T21:35:53Z", "is_private": false, "text": "This isn't going to be fixed for the 5.5.x branch but the new o.a.c.startup.Tomcat class in 7.0.x should be able to handle this."}]
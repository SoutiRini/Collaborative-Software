[{"count": 0, "tags": [], "bug_id": 10249, "attachment_id": null, "is_private": false, "id": 18608, "time": "2002-06-26T15:05:52Z", "creator": "webmaster@cienciapura.com.br", "creation_time": "2002-06-26T15:05:52Z", "text": "I have an environment with multiple virtual hosts. One of my users put an \nInterclient JDBC driver in his area and after trying to use it, Tomcat hangs. \nThe curious is that 'connectionless' JSP pages work fine. Servlets and JSP \npages that tries to connect to other databases, like MySQL, hangs too. I had \ntop restart Tomcat.\n\nIt might be a bug with JDBC2.0 or even in the driver, but I think Tomcat should \nbe robust enough and harm other user's application.\n\nSteps to reproduce:\n- download the driver:\nhttp://www.kpi.com.au/interbase/files/interclient.jar\n( you don't need to have Interbase server running anywhere !!)\n\n- servlet:\nimport java.io.*;\nimport java.sql.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\npublic class Interbase extends HttpServlet {\n\n public void doGet(HttpServletRequest req, HttpServletResponse res)\n                               throws ServletException, IOException {\n\n   Connection con = null;\n   Statement stmt = null;\n   ResultSet rs = null;\n\n   res.setContentType(\"text/html\");\n   PrintWriter out = res.getWriter();\n\n   try {\n\n      Class.forName(\"interbase.interclient.Driver\");\n\n      Connection con = DriverManager.getConnection\n(\"jdbc:interbase://localhost/data/mydb.gdb\",\"SYSDBA\",\"masterkey\");\n      stmt = con.createStatement();\n\n      rs = stmt.executeQuery(\"SELECT * from users\");\n\n      out.println(\"<HTML>\");\n      out.println(\"<BODY>\");\n        while (rs.next()) {\n         out.println(rs.getString(1));\n      }\n      rs.close();\n      con.close();\n\n      out.println(\"</BODY></HTML>\");\n\n    }\n    catch(ClassNotFoundException e) {\n      out.println(\"ERROR \" + e.getMessage());\n    }\n    catch(SQLException e) {\n      out.println(\"ERROR \" + e.getMessage());\n    }\n    finally {\n      // Always close the database connection.\n      try {\n        if (con != null) con.close();\n      }\n      catch (SQLException ignored) { }\n      out.flush();\n      out.close();\n    }\n  }\n}"}, {"count": 1, "tags": [], "text": "This doesn't look like it is caused by Tomcat. If you think it is a bug in \nTomcat, please tell us where (we unfortunately don't have time to debug JDBC \ndrivers).\n\nPeople are able to use JDBC from servlets or JSP fine, so you probably have a \nconfiguration problem of some sort.", "attachment_id": null, "id": 18649, "creator": "remm@apache.org", "time": "2002-06-27T13:26:56Z", "bug_id": 10249, "creation_time": "2002-06-27T13:26:56Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 10249, "attachment_id": null, "is_private": false, "id": 18669, "time": "2002-06-27T16:44:06Z", "creator": "webmaster@cienciapura.com.br", "creation_time": "2002-06-27T16:44:06Z", "text": "Hi Remy,\n\nMy point here is not 'exactly' towards the interclient JDBC driver. You can \ncount on this as an example of a bad application in one virtual host that \ninfluences the whole Tomcat. If tell me that if somebody puts a bad a \napplication on a context that freezes the whole Tomcat is normal and there is \nnothing we can do, I'm fine with the explanation. Otherwise, I think Tomcat \nshould be robust enough NOT to fail ( it can degrades performance, etc, but I \ndon't failing is acceptable ).\n\nThanks !"}, {"count": 3, "tags": [], "bug_id": 10249, "attachment_id": null, "is_private": false, "id": 18670, "time": "2002-06-27T16:49:30Z", "creator": "webmaster@cienciapura.com.br", "creation_time": "2002-06-27T16:49:30Z", "text": "One more point. It's definitely not a bad config. If I change the Driver class \nto Postgres, MySQL, it works/fails nicely and Tomcat is not affected."}, {"count": 4, "tags": [], "bug_id": 10249, "attachment_id": null, "id": 18934, "time": "2002-07-03T13:45:11Z", "creator": "remm@apache.org", "creation_time": "2002-07-03T13:45:11Z", "is_private": false, "text": "As I said, this does not look like a Tomcat bug. If you can actually prove that\nthis is caused by the Tomcat code, you can reopen the bug; otherwise please don't."}, {"count": 5, "tags": [], "bug_id": 10249, "attachment_id": null, "id": 34315, "time": "2003-04-02T10:29:25Z", "creator": "o.rode@deutschepost.de", "creation_time": "2003-04-02T10:29:25Z", "is_private": false, "text": "I had the same bug with Oracle DB. It's very unlikely that this driver hangs. \n\nThe problem is caused in the \"endless\" loop at \norg.apache.commons.pool.impl.GenericObjectPool.borrowObject().\n\nAfter creating the new connection, some check is done:\n\nif(_testOnBorrow && !_factory.validateObject(pair.value)) {\n\nIn my configuration the ValidationQuery parameter was generated by the manager \nbut i left it empty. This caused validateObject() to return false, which then \ncaused the endless loop. I would expect an Error or any appropriate handling \nin this case since it is a fatal misconfiguration.\n\nWorkaround: Remove the parameter for the validation query from the config in \nserver.xml"}, {"count": 6, "tags": [], "creator": "dirk.verbeeck@pandora.be", "attachment_id": null, "id": 44399, "creation_time": "2003-09-21T13:53:50Z", "time": "2003-09-21T13:53:50Z", "bug_id": 10249, "text": "Fixed in nightly build of DBCP (you also need to upgrade commons-pool)\n\nMore info:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=23081", "is_private": false}, {"count": 7, "text": "The latest version of tomcat 4.1 is using the newer versions of pool and dbcp.", "creator": "funkman@joedog.org", "attachment_id": null, "id": 51874, "time": "2004-02-07T14:57:23Z", "bug_id": 10249, "creation_time": "2004-02-07T14:57:23Z", "tags": [], "is_private": false}]
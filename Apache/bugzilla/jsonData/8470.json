[{"count": 0, "tags": [], "bug_id": 8470, "attachment_id": null, "id": 14634, "time": "2002-04-24T14:22:03Z", "creator": "amilkowski@unicast.com", "creation_time": "2002-04-24T14:22:03Z", "is_private": false, "text": "The following defect occured several months ago, when we deployed Tomcat 3.2.2 \n(beta 4) w/ AJP12 Connector in production environment, \n\nWe are now considering an upgrade to Tomcat 4 with AJP13 (AJP14?) connector\nbut it is imperative to us, if the following defect was solved, by ree-\nengineering or patch to either the Connector or the Container.\n\nWhat follows is an email send out to the Tomcat  dev newsgroup:\n\n------------------------------------------------------------------------------\n\nit will be best if I describe our configuration at first:\n\nWe are running Solaris 7, Tomcat 3.2.2 b4 (beta 4) + AJP12 Connector (Tomcat\nconfigured with max of 500 threads), JVM: Sun 1.3.0_02 Hot Spot Native\nThreads, Apache 1.3.19 (max of 1024 child processes)\n\nWe have had substantial traffic on our server (we have 7 servers load\nbalanced with the configuration specified above)\n\nWe found that if the incoming HTTP request has content-length missing from\nthe header, and the request gets channeled\nvia the AJP12 connector to the Tomcat and the servlet, it appears that all\nsubsequent request are causing AJP12 connections\nto raise (All in ESTABLISHED mode) and Tomcat refuses to process any more\nrequest , eventually eating up great deal of CPU time, we needed to do\nrestart and both Apache and the Tomcat to recover from this condition.\n\nWe have then decided to bypass all requests with the content-length missing\nin the Ajp12ConnectionHandler.java\n\n\tint contentLength = reqA.getMimeHeaders().getIntHeader(\"content-\nlength\");\n\tif (contentLength != -1) {\n\t\tBufferedServletInputStream sis =\n\t\t    (BufferedServletInputStream)reqA.getInputStream();\n\t\tsis.setLimit(contentLength);\n\t \t}\n+\telse {\n+\t\tresA.finish();\n+\t\tsocket.close();\n+\t\treturn;\n+\t}\n\n\t    contextM.service( reqA, resA );\n\t    //resA.finish(); // is part of contextM !\n\t    socket.close();\n\t} catch (Exception e) {\n            // XXX\n\t    // this isn't what we want, we want to log the problem somehow\n\t    System.out.println(\"HANDLER THREAD PROBLEM: \" + e);\n\t    e.printStackTrace();\n\t}\n\nNote that in the above socket.close() is not executed when an exception is\nthrown in the service method\n\nwe are considering adding a \"finally\" clause to handle such a case: i.e\n\n    contextM.service( reqA, resA );\n\t    //resA.finish(); // is part of contextM !\n-\t    socket.close();\n\t} catch (Exception e) {\n            // XXX\n\t    // this isn't what we want, we want to log the problem somehow\n\t    System.out.println(\"HANDLER THREAD PROBLEM: \" + e);\n\t    e.printStackTrace();\n\t}\n+\t} finally() {\n+\t\tif (socket != null)\n+\t\t\tsocket.close();\n+\t}\n\n----------------------------------------------------------------------------\n-----------------------------\n\nI believe that potential offending code could in the servlet application\nthat tries to read input stream \"request.getInputStream() without the\ncontent-length\n\nfollowing is what the servlet code looks like:\n\nprivate int readInputStream(HttpServletRequest request) {\n\n        int clientDayOfYear = 0;\n\n        try {\n            InputStreamReader isr=new\nInputStreamReader(request.getInputStream());\n            BufferedReader br=new BufferedReader(isr);\n            clientDayOfYear = new\nInteger(br.readLine().toString()).intValue();\n\t        isr.close();\n\t        isr=null;\n            br.close();\n            br=null;\n        } catch (IOException e) {\n            clientDayOfYear=0;\n        }\n        return clientDayOfYear;\n    }\n\n\nWe know that our change to the Tomcat code is temporary at best (it allows\nus to go on!) I am looking for the feedback\non the \"quality\" of our code change as well as maybe to a deeper reasons why\ncontent-length missing from the header\ntogether with request.getInputStream() would cause Apache/AJP12 to have\nconnections open (All in ESTABLISHED mode) and\neventually eat up all available CPU resources"}, {"count": 1, "tags": [], "text": "Under the HTTP/1.1 RFC, sending the content-length is optional.  The browser \nmay choose to send it with chunked-encoding.  This is probably what you are \nseeing.\n\nIf you upgrade to 3.3.1, then the AJP12Connector won't die (with smarter, but \nsimilar, logic than below).  If you also upgrade to the AJP13Connector, then \nTomcat will be able to handle the case of chunked-encoding. \n\nMarking as WONTFIX, since the 3.2.x line is no longer under active development, \nand the AJP12Connector is deprecated in 3.3.x.\n\n", "attachment_id": null, "bug_id": 8470, "id": 14960, "time": "2002-04-29T02:02:35Z", "creator": "william.barker@wilshire.com", "creation_time": "2002-04-29T02:02:35Z", "is_private": false}]
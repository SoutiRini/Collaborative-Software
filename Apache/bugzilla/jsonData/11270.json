[{"count": 0, "tags": [], "creator": "william_ferguson@versata.com", "is_private": false, "id": 20391, "attachment_id": null, "bug_id": 11270, "creation_time": "2002-07-30T02:28:40Z", "time": "2002-07-30T02:28:40Z", "text": "Ie\n\n<fileset dir=\"d:\\temp\\some-nonexistent-dir\">\n    <include name=\"**\\foo.java\"/>\n</fileset>\n\nwill cause the build to break, whereas it should probably just return an empty \nfileset. The current behaviour causes build files to become twisted just to \ncircumvent unexpected build breakages. Ie it becomes necessary to include \nchecks for directory existent before configuring any FileSet.\n\nIt is particularly annoying when you have a build system made up of reuseable \ncomponents and it is not always certain that the directories for all possible \ngenerated artfects will exist at a certain point in time."}, {"count": 1, "tags": [], "creator": "cote@computer.org", "attachment_id": null, "id": 20396, "creation_time": "2002-07-30T08:01:44Z", "time": "2002-07-30T08:01:44Z", "bug_id": 11270, "text": "Solving this bug should also solve bug 11214.  The bug 11214 is about fileset\nused in the uptodate task.  I proposed a patch for bug 11214 that assume that it\nis the desire behavior that the fileset throws a Exception when we called\ngetDirectoryScanner, except when it's done for a task.\n\nWhat is the wished behavior for task using inexisting fileset.  Do we never want\na exception, or do we want a exception for some task and not for others?  I\nthink task like copy should throws a exception if the fileset is for a\ninexisting directory.\n\nThere the link to the pacth of bug 11214\n\nhttp://nagoya.apache.org/bugzilla/showattachment.cgi?attach_id=2513\nhttp://nagoya.apache.org/bugzilla/showattachment.cgi?attach_id=2514", "is_private": false}, {"count": 2, "tags": [], "bug_id": 11270, "attachment_id": null, "id": 20467, "time": "2002-07-31T09:53:59Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2002-07-31T09:53:59Z", "is_private": false, "text": "I think the best solution for this issue is allow a new attribute\n\"emptyOnNotfound\" or some other shorter and better name, which when set to true \nwill cause the fileset/dirset to just be empty. \n\nI have in mind a particular situation when I have several components with some \ndirectories that are optional and the build has to go over hoops involving \nseveral targets with \"if\", usage of available, etc. With this things could be \nquite simple."}, {"count": 3, "tags": [], "creator": "cote@computer.org", "attachment_id": null, "text": "Regarding comments of Jose Alberto Fernandez\n\nIf I got the following task\n\n        <uptodate property=\"toto.notRequired\">\n            <srcfiles refid=\"toto.class.fileset\"/>\n            <srcfiles refid=\"toto.otherfiles.fileset\"/>\n            <mapper type=\"merge\" to=\"${toto.dir}/ejb-jar.xml\"/>\n        </uptodate>\n\nSuppose the fileset toto.class.fileset point to a inexisting directory just\nafter a clean.  And that some file in toto.otherfiles.fileset always exist.  If\nthey are uptodate regarding ejb-jar.xml, the task will conclude that the file\nare uptodate.  The behavior I would like would be to that task with inexisting\nfileset are never uptodate.\n\nI think fileset for directory that doesn't exist should always throws a error\nwhen used from task like compile.  It's only when called from task like uptodate\nthat it is acceptable.  I think what we need is different behavior when the\nfileset is called from different task, not a attribute that modify the behavior\nfor all task.\n\n", "id": 20517, "time": "2002-08-01T07:39:05Z", "bug_id": 11270, "creation_time": "2002-08-01T07:39:05Z", "is_private": false}, {"count": 4, "tags": [], "text": "Under my proposal, if you want for <*set> to throw an exception, then do not \npass the emptyOnNotfound=\"true\" attribute. In this case, as it is today you \nwill get the expected exception. But if for some reason someone wants to be \nable to specify that some directory is optional (in a copy, a compile, or what \nhave you) there is no reason why users should not be able to say so.\n\nActually, a good name for the attribute would be: 'optionaldir=\"true\"' (the \ndefault being \"false\".\n\nFor the particular case of <uptodate> I think the problem is that it does not \naccept <filelist>/<dirlist> as possible elements. Take a look at <dependset> \ntask, for how that is used. I think that would fix your problem.\n\n", "attachment_id": null, "bug_id": 11270, "id": 20523, "time": "2002-08-01T09:18:17Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2002-08-01T09:18:17Z", "is_private": false}, {"count": 5, "tags": [], "text": "I like 'optionaldir=\"true\"', sounds about right.\n\nJose, could you please explain the relevance of <uptodate> accepting a \n<filelist>/<dirlist>.", "is_private": false, "id": 20578, "creator": "william_ferguson@versata.com", "time": "2002-08-01T23:38:25Z", "bug_id": 11270, "creation_time": "2002-08-01T23:38:25Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 11270, "text": "FileList/DirList allow you to define files on your dependencies even if they do \nnot exists yet. FileSet/DirSet only allow you to talk about things that exist.\nIt appears to me that the problem you are trying to solve is the fact that you \ncannot express in <uptodate> things about files that may not exist yet.\n\nAnother thing to consider, would be to make <uptodate> usable from inside a \n<condition> task, like <available>. That would allow you to define more complex \nexpressions that may solve your problem:\n\n  <condition property=\"toto.notRequired\">\n    <and>\n        <available file=\"${toto.class.dir}\" type=\"dir\">\n        <uptodate>\n            <srcfiles refid=\"toto.class.fileset\"/>\n            <srcfiles refid=\"toto.otherfiles.fileset\"/>\n            <mapper type=\"merge\" to=\"${toto.dir}/ejb-jar.xml\"/>\n        </uptodate>\n    </and>\n  </condition>\n\nBoth may be complemantary, bu this last may be a better reflection of your\nparticular kind of special case scenario.\n", "id": 20593, "time": "2002-08-02T06:55:13Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2002-08-02T06:55:13Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "william_ferguson@versata.com", "is_private": false, "id": 20594, "attachment_id": null, "bug_id": 11270, "creation_time": "2002-08-02T07:29:36Z", "time": "2002-08-02T07:29:36Z", "text": "Actually, I'm not attempting to get uptodate to work.\nI have several places where this hurts, one example is attemptying to jar \nartefacts that may not have been created.\n\n<jar jarfile=\"${jar.name}.jar\" >\n  <fileset dir=\"${src.res.dir}\"/>\n  <fileset dir=\"${generated.res.dir}\"/>\n</jar>\n\nWhere generated.res.dir may or may not exist."}, {"count": 8, "tags": [], "text": "We have a number of optional components, such as images, resources, the compiled \ncode, and the like, and all of these should be included in the jar if they are on the \nfilesystem.  Without a \"emptyIfNotFound\" flag, one writes filesets relative to directories \nmuch farther up the filesystem, or a separate jar task for each option.  These are both \nuglier than simply having a zipfileset or fileset attribute that suppresses the exception if \nnot found problem.", "attachment_id": null, "id": 20671, "creator": "scott@alodar.com", "time": "2002-08-05T21:42:31Z", "bug_id": 11270, "creation_time": "2002-08-05T21:42:31Z", "is_private": false}, {"count": 9, "tags": [], "creator": "scott@alodar.com", "is_private": false, "id": 21142, "attachment_id": null, "bug_id": 11270, "creation_time": "2002-08-15T23:40:59Z", "time": "2002-08-15T23:40:59Z", "text": "The following patch adds an errorOnMissingDirectory attribute that suppresses the error \nif set on a fileset.\n\nThis allows constructs like:\n    <jar\n      jarfile=\"${jar.dist}/${jar.baseName}.jar\">\n      <fileset dir=\"${compile.classes}\"/>\n      <fileset dir=\"${jar.resources}\" errorOnMissingDir=\"false\"/>\n   </jar>\n\n\n\n[localhost:~/Documents/coding/ant] work% diff -rc jakarta-ant-1.5 jakarta-ant-1.5-modified/\nOnly in jakarta-ant-1.5/lib: README\ndiff -rc jakarta-ant-1.5/src/main/org/apache/tools/ant/DirectoryScanner.java jakarta-ant-\n1.5-modified/src/main/org/apache/tools/ant/DirectoryScanner.java\n*** jakarta-ant-1.5/src/main/org/apache/tools/ant/DirectoryScanner.java Tue Jul  9 \n08:27:44 2002\n--- jakarta-ant-1.5-modified/src/main/org/apache/tools/ant/DirectoryScanner.javThu Aug \n15 16:19:37 2002\n***************\n*** 234,239 ****\n--- 234,244 ----\n      protected boolean isCaseSensitive = true;\n  \n      /**\n+      * Whether a missing base directory is an error.\n+      */\n+     protected boolean errorOnMissingDir = true;\n+ \n+     /**\n       * Whether or not symbolic links should be followed.\n       *\n       * @since Ant 1.5\n***************\n*** 425,430 ****\n--- 430,445 ----\n      }\n  \n      /**\n+      * Sets whether or not a missing base directory is an error\n+      *\n+      * @param errorOnMissingDir whether or not a missing base directory\n+      *                        is an error\n+      */\n+     public void setErrorOnMissingDir(boolean errorOnMissingDir) {\n+         this.errorOnMissingDir = errorOnMissingDir;\n+     }\n+ \n+     /**\n       * Sets whether or not symbolic links should be followed.\n       *\n       * @param followSymlinks whether or not symbolic links should be followed\n***************\n*** 529,540 ****\n              throw new IllegalStateException(\"No basedir set\");\n          }\n          if (!basedir.exists()) {\n!             throw new IllegalStateException(\"basedir \" + basedir\n                                              + \" does not exist\");\n!         }\n!         if (!basedir.isDirectory()) {\n!             throw new IllegalStateException(\"basedir \" + basedir\n!                                             + \" is not a directory\");\n          }\n  \n          if (includes == null) {\n--- 544,558 ----\n              throw new IllegalStateException(\"No basedir set\");\n          }\n          if (!basedir.exists()) {\n!             if (errorOnMissingDir){\n!                 throw new IllegalStateException(\"basedir \" + basedir\n                                              + \" does not exist\");\n!             }\n!         } else {\n!             if (!basedir.isDirectory()) {\n!                 throw new IllegalStateException(\"basedir \" + basedir\n!                                                 + \" is not a directory\");\n!             }\n          }\n  \n          if (includes == null) {\n***************\n*** 554,559 ****\n--- 572,581 ----\n          dirsNotIncluded  = new Vector();\n          dirsExcluded     = new Vector();\n          dirsDeselected   = new Vector();\n+ \n+         if (!basedir.exists() && !errorOnMissingDir){\n+             return;\n+         }\n  \n          if (isIncluded(\"\")) {\n              if (!isExcluded(\"\")) {\ndiff -rc jakarta-ant-1.5/src/main/org/apache/tools/ant/types/AbstractFileSet.java jakarta-\nant-1.5-modified/src/main/org/apache/tools/ant/types/AbstractFileSet.java\n*** jakarta-ant-1.5/src/main/org/apache/tools/ant/types/AbstractFileSet.java   Tue Jul  9 \n08:27:33 2002\n--- jakarta-ant-1.5-modified/src/main/org/apache/tools/ant/types/AbstractFileSet.java   Thu \nAug 15 16:08:38 2002\n***************\n*** 90,95 ****\n--- 90,96 ----\n      private boolean useDefaultExcludes = true;\n      private boolean isCaseSensitive = true;\n      private boolean followSymlinks = true;\n+     private boolean errorOnMissingDir = true;\n  \n      public AbstractFileSet() {\n          super();\n***************\n*** 103,108 ****\n--- 104,110 ----\n          this.useDefaultExcludes = fileset.useDefaultExcludes;\n          this.isCaseSensitive = fileset.isCaseSensitive;\n          this.followSymlinks = fileset.followSymlinks;\n+         this.errorOnMissingDir = fileset.errorOnMissingDir;\n          setProject(fileset.getProject());\n      }\n  \n***************\n*** 282,287 ****\n--- 284,299 ----\n      }\n  \n      /**\n+      * Sets whether an error is thrown if a directory does not exist\n+      *\n+      * @param errorOnMissingDir \"true\"|\"on\"|\"yes\" if missing directories cause errors,\n+      *                           \"false\"|\"off\"|\"no\" if not.\n+      */\n+     public void setErrorOnMissingDir(boolean errorOnMissingDir) {\n+         this.errorOnMissingDir = errorOnMissingDir;\n+     }\n+ \n+     /**\n       * Sets whether or not symbolic links should be followed.\n       *\n       * @param followSymlinks whether or not symbolic links should be followed\n***************\n*** 329,338 ****\n                                       + getDataTypeName() + \".\");\n          }\n  \n!         if (!dir.exists()) {\n              throw new BuildException(dir.getAbsolutePath() + \" not found.\");\n          }\n!         if (!dir.isDirectory()) {\n              throw new BuildException(dir.getAbsolutePath()\n                                       + \" is not a directory.\");\n          }\n--- 341,350 ----\n                                       + getDataTypeName() + \".\");\n          }\n  \n!         if (!dir.exists() && errorOnMissingDir) {\n              throw new BuildException(dir.getAbsolutePath() + \" not found.\");\n          }\n!         if (!dir.isDirectory() && errorOnMissingDir) {\n              throw new BuildException(dir.getAbsolutePath()\n                                       + \" is not a directory.\");\n          }\n***************\n*** 340,345 ****\n--- 352,358 ----\n          DirectoryScanner ds = new DirectoryScanner();\n          setupDirectoryScanner(ds, p);\n          ds.setFollowSymlinks(followSymlinks);\n+         ds.setErrorOnMissingDir(errorOnMissingDir);\n          ds.scan();\n          return ds;\n      }"}, {"count": 10, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "id": 31591, "time": "2003-02-19T12:54:02Z", "bug_id": 11270, "creation_time": "2003-02-19T12:54:02Z", "is_private": false, "text": "Marking as an enhancement for now - will get to this after 1.5.2 release."}, {"count": 11, "tags": [], "text": "*** Bug 18862 has been marked as a duplicate of this bug. ***", "attachment_id": null, "bug_id": 11270, "id": 34811, "time": "2003-04-09T15:12:16Z", "creator": "conor@apache.org", "creation_time": "2003-04-09T15:12:16Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 11270, "attachment_id": null, "id": 35789, "time": "2003-04-22T14:19:49Z", "creator": "cfouque@montrouge.sema.slb.com", "creation_time": "2003-04-22T14:19:49Z", "is_private": false, "text": "Whatever the attribute name, we are very much in need of this feature, and we \nhope it can be implemented in ANT 1.6.\n\nAs much as possible, attributes concerning similar concepts should REUSE the \nsame name.\n\nFor the attribute name used to prevent <*Set> elements from failing when the \nspecified directory does not exist :\n\n'emptyOnNotFound', 'optionaldir' and 'errorOnMissingDir' were proposed, but I \nsuggest that it should be the same as for the <copy> and <move> tasks :\n\nIt should be 'failonerror'.\n"}, {"count": 13, "tags": [], "text": "*** Bug 21723 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 43762, "creation_time": "2003-09-05T16:27:00Z", "time": "2003-09-05T16:27:00Z", "creator": "jan@materne.de", "bug_id": 11270, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 11270, "attachment_id": null, "id": 72231, "time": "2005-03-11T20:11:41Z", "creator": "mbenson@apache.org", "creation_time": "2005-03-11T20:11:41Z", "is_private": false, "text": "*** Bug 22540 has been marked as a duplicate of this bug. ***"}, {"count": 15, "tags": [], "bug_id": 11270, "attachment_id": null, "id": 75555, "time": "2005-05-28T00:36:12Z", "creator": "mbenson@apache.org", "creation_time": "2005-05-28T00:36:12Z", "is_private": false, "text": "From Ant 1.7 forth you can use a <files> resource collection with the leading \ndirectory in the pattern (there is no \"base\" directory).  Then, if that \ndirectory doesn't exist, no harm, no foul."}, {"count": 16, "tags": [], "bug_id": 11270, "attachment_id": null, "id": 98650, "time": "2007-01-28T10:02:45Z", "creator": "bsalvucci@rjlg.com", "creation_time": "2007-01-28T10:02:45Z", "is_private": false, "text": "I don't see how that can be used in a jar task to handle the situation that the\noriginal post was about.\n\nI have something like:\n\n<jar jarfile=\"my.jar\">\n  <fileset dir=\"${basedir}/conf/properties\" includes=\"*.properties\"/>\n  <fileset dir=\"${basedir}/classes\" includes=\"**/*.classes\"/>\n</jar>\n\nIf there is a conf/properties directory, I want all the properties files to be\nin the jar with no path. If the directory, doesn't exist, I want it to go on to\nthe next patternset. I don't see how the <files> approach be used to do this.\n\nThe failonerror attribute would have been so simple.\n\n"}, {"count": 17, "tags": [], "bug_id": 11270, "attachment_id": null, "text": "(In reply to comment #16)\n> I don't see how that can be used in a jar task to handle the situation that the\n> original post was about.\n> \n> I have something like:\n> \n> <jar jarfile=\"my.jar\">\n>   <fileset dir=\"${basedir}/conf/properties\" includes=\"*.properties\"/>\n>   <fileset dir=\"${basedir}/classes\" includes=\"**/*.classes\"/>\n> </jar>\n> \n> If there is a conf/properties directory, I want all the properties files to be\n> in the jar with no path. If the directory, doesn't exist, I want it to go on to\n> the next patternset. I don't see how the <files> approach be used to do this.\n> \n> The failonerror attribute would have been so simple.\n> \n\nActually, it does seem that using <files> does not constitute a complete\nsolution, due to the fact that files included by this collection would not have\nany leading path information; any archive created this way would be flat!  :o \nThere is still talk about supporting this behavior, so I will reopen this report.\n\n\n> \n\n", "id": 98689, "time": "2007-01-29T09:06:46Z", "creator": "mbenson@apache.org", "creation_time": "2007-01-29T09:06:46Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 11270, "attachment_id": null, "id": 98920, "time": "2007-02-02T16:21:40Z", "creator": "jglick@apache.org", "creation_time": "2007-02-02T16:21:40Z", "is_private": false, "text": "+1 from me. I have personally had to rework build scripts in complicated ways to\nwork around missing basedirs.\n\nI'm not convinced 'failonerror' is the right attribute name - it's not obvious\nwhen looking at a build script what sort of \"error\" is being referred to in a\nfileset, which is after all just a data structure, not a task.\n'errorOnMissingDir' is IMO clearer, though it sounds a little awkward."}, {"count": 19, "tags": [], "creator": "peterreilly@apache.org", "text": "I have applied Scott's patch (except that if the\nfile exists and is *not* a directory, an error will\nstill be reported).\nI do not know why this took so long to get in ant!\n", "id": 107013, "time": "2007-08-22T01:31:21Z", "bug_id": 11270, "creation_time": "2007-08-22T01:31:21Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 122478, "time": "2008-11-14T06:45:01Z", "bug_id": 11270, "creation_time": "2008-11-14T06:45:01Z", "is_private": false, "text": "*** Bug 40259 has been marked as a duplicate of this bug. ***"}]
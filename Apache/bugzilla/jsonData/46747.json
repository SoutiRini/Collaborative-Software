[{"count": 0, "tags": [], "creator": "skoppehel@intersoft.de", "attachment_id": null, "id": 125022, "time": "2009-02-20T08:02:07Z", "bug_id": 46747, "creation_time": "2009-02-20T08:02:07Z", "is_private": false, "text": "I've only tested this on Linux, I assume it is the same on all Unix-like operating systems that support symlinks. Suppose you have in a directory a subdirectory and a symbolic link to it. Then you try, via ant, to sync another directory to it that contains neither. The sync task will try to delete both, and will fail.\n\nTo set up a test case, do:\n\n    mkdir t s t/n\n    ln -s n t/m\n\nand then execute the following ant target:\n\n    <target name=\"synchro\">\n        <sync todir=\"t\">\n            <fileset dir=\"s\">\n                <include name=\"**/*\" />\n            </fileset>\n        </sync>\n    </target>\n\nWhat will happen is this:\n\nBuildfile: build.xml\n\nsynchro:\n\nBUILD FAILED\njava.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.Sync.removeOrphanFiles(Sync.java:218)\n        at org.apache.tools.ant.taskdefs.Sync.execute(Sync.java:118)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1337)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1306)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1189)\n        at org.apache.tools.ant.Main.runBuild(Main.java:758)\n        at org.apache.tools.ant.Main.startAnt(Main.java:217)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\n\nTotal time: 0 seconds"}, {"count": 1, "tags": [], "text": "Created attachment 23295\nPatch to test for null\n\nThe attached patch makes the NPE go away by testing f.list() for null before looking at length. Whether or not the fact that a non-listable file appears at this point is indicative of a deeper bug somewhere else, I cannot say. The test case I described now works as expected, the dead link gets deleted.", "attachment_id": 23295, "bug_id": 46747, "id": 125057, "time": "2009-02-22T05:36:56Z", "creator": "skoppehel@intersoft.de", "creation_time": "2009-02-22T05:36:56Z", "is_private": false}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 125079, "time": "2009-02-23T05:14:44Z", "bug_id": 46747, "creation_time": "2009-02-23T05:14:44Z", "text": "patch applied as svn revision 747004\n\nThanks!"}]
[{"count": 0, "tags": [], "creator": "carlo.bramix@libero.it", "attachment_id": 22847, "text": "Created attachment 22847\nFix for this bug\n\nThis patch adds complete support for mingw+msys.\nAlso tested with cygwin and Debian etch 4.0r4.", "id": 122332, "time": "2008-11-10T02:08:09Z", "bug_id": 46175, "creation_time": "2008-11-10T02:08:09Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 46175, "text": "Great stuff, thanks!  IF this fixes all issues, and none of the other open\ncygwin/mingw bug patches are still applicable, it would be really cool if you\ncould close those with a pointer to this bug.\n\nReviewing to apply later in this week.  (search - commented by 'me' is how\nI find stuff I need to follow up on).", "id": 122345, "time": "2008-11-10T12:46:50Z", "creator": "wrowe@apache.org", "creation_time": "2008-11-10T12:46:50Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "Sorry for not responding earlier.\n\nThis patch is frozen, primarily due to the number of unintended consequences\nintroduced by modification of apr.h.in across a broad number of platforms,\nand the fact that the vast majority of changes to apr.h.in are not required\nfor the external consumers, nor the public interface.\n\nThus far; the tlhelp32.h should never have been included, and this has been\nadded for both to include/arch/win32/apr_arch_misc.h and removed from apr.hw.\n\nSimilarly other things should be clarified, and apr.h.in treated as the reference\nfile to *avoid* changing.  Other mistakes in the patch, such as;\n\n /* Mechanisms to properly type numeric literals */\n+#ifdef _MSC_VER\n+#define APR_INT64_C(val) (val##i64)\n+#define APR_UINT64_C(val) (val##Ui64)\n+#else\n @int64_literal@\n @uint64_literal@\n+#endif\n\nshould have been corrected by adjusting [u]int64_literal definitions within\nthe autoconf script.\n\nSo this patch is in need of further explanation and clarification and absolutely\ncannot be applied as-is to the stable shipping branch.\n\nI'll try to piece through it, but in the future, consider submitting a number\nof smaller single-function patches, so that the ones which are correct can be\napplied immediately, while the ones which are incorrect can be clarified and\ndiscussed.", "id": 127541, "time": "2009-06-01T19:41:49Z", "bug_id": 46175, "creation_time": "2009-06-01T19:41:49Z", "is_private": false}, {"count": 3, "tags": [], "creator": "jayvdb@gmail.com", "attachment_id": null, "text": "I see this patch adds -lmswsock.  I noticed that this was needed for bug 49535.  I didnt investigate why.\n\nAlso, this patch replaces APR_CHECK_DLL_FUNC with AC_LIBTOOL_WIN32_DLL; what is the minimum version of libtool where this works well?  That could mean a later version of autoconf is needed (currently APR depends on autoconf 2.59, which was released in Dec-2003).\n\nIf APR_CHECK_DLL_FUNC is being replaced, build/apr_win32.m4 should be deleted.\n\nIf mingw32 has sendfile, the configure script needs to find it.\n\nI see you have removed APR_REMOVEFROM(CFLAGS,-O2)/APR_ADDTO(CFLAGS,-O0).  Does that mean your patch runs all tests with -O2.  That would be very good news, and I'd be keen to figure out what was the cause and help get the fix into trunk.", "id": 138048, "time": "2010-07-01T02:51:00Z", "bug_id": 46175, "creation_time": "2010-07-01T02:51:00Z", "is_private": false}, {"count": 4, "tags": [], "creator": "zdavatz@gmail.com", "attachment_id": null, "text": "Hi\n\nI am also interested in pushing this forward.\n\nBest\nZeno", "id": 143953, "time": "2011-02-03T06:04:51Z", "bug_id": 46175, "creation_time": "2011-02-03T06:04:51Z", "is_private": false}, {"count": 5, "tags": [], "creator": "carlo.bramix@libero.it", "attachment_id": 26607, "id": 143994, "creation_time": "2011-02-04T14:38:55Z", "time": "2011-02-04T14:38:55Z", "bug_id": 46175, "text": "Created attachment 26607\nFix for this bug\n\nAfter long long time I decided to do another try for improving the support for mingw+msys on APR.\nAll my changes were done against the most recent sources I could find into the SVN repository.\nHowever, I must signal to you that I was not able to create configure script at first try, I had to process the following sources with dos2unix tool for changing all CRLF into LF, otherwise the creation failed:\n\nbuildconf\nbuild/buildcheck.sh\nbuild/PrintPath\nbuild/get-version.sh\n\nAfter bypassing this little trouble, I was able to start my inspection.\nAs you can see, I trashed all previous fixes I did for BeOS since at current time I could not test them anymore.\nI also trashed the fixes to APR_INT64_C and APR_UINT64_C for MSVC.\nIn the past I did that change because I though that it could be useful to use directly the apr.h file generated from configure script with mingw in VisualStudio, perhaps with just some little eventual adjustment if some libraries are available in mingw at configure time while they are not in MSVC.\nIn other words, my intention was to create a facility for the maintenance of apr.hw (you can also notice that I had modified a bit apr.hw to be very similar to generated apr.h for simplify file comparison), which could be updated with a simple copy paste action.\nSince apr.h.in already included some tests for __GNUC__, I though it would not be a big problem to add one test for _MSC_VER in that point.\n\nMy fixes to current trunk can be resumed as:\n\n1) Build process was not able to create a shared library.\nFor creating a DLL, libtool requires the -no-undefined flag al linking stage. This flag has been added in $LT_LDFLAGS macro.\nUnfortunately, in some places the $LT_LDFLAGS was placed wrongly before calling the driver, in other words was at the same level of macro LTFLAGS and as result those options were given direclt to libtool rather than the driver.\nI fixed that mistake in these files:\ntest/Makefile.in\nconfigure.in\n\n2) I was a bit out of idea when I tried to understand the reasons for testing shell32, advapi32, ws2_32 and rpcrt4 in that manner in configure script.\nSince these tests where done in the mingw section, that reason is still arcane to me...\nAnother thing that should be avoided is to add -lkernel32 in the command line: for some reasons, mingw hates this and anyways you do not need to write them as well as user32 and msvcrt: you will have them by default.\nIf you had to add them previously, probably your compiler or at least your SPEC file is very outdated and so the best solution is to update it.\n\n3) I modified a piece of hand written code for using APR_SETIFNULL instead. I also added declaration of some variables that may be left empty regarding the platform.\n\n4) I'm able to compile APR without problems with -O2 flag.\nI'm using the stable gcc-3.4.5-20060117-3.\nExperimental gcc-4.x probably will work fine too, but I suggest to use the stable version since it's really stable in its word sense and with my experience it seems to me it is able to generate more efficient code.\nIf you are using the cross compiler that you may find in a linux distrubution, you can encounter problems because some bugs in the toolchain: when working for building a native port of GUILE for Windows, some people noticed that it was not able to export data from DLL but only functions, while I was perfectly able to build it.\nIt may be possible that the compiler used by somebody in the past had a similar defect.\nIf you are working on that bugged cross compiler, the only solution is to replace it with a working one. You may compile it yourself with the sources of the mingw stable (that I recommend) or other precompiled binaries, like the ones provided by mingw-w64 or the ones included into the RosBE enviroment for linux that we use for compiling ReactOS.\nAnother alternative that could cause that old trouble at linking could be a mistake in support macro for forcing the usage of shared runtime (missing _DLL, __MSVCRT__ and so on...) but since there are not informations about, it's difficult to make more theories...\n\n5) support/unix/waitio.c failed to compile.\nSince the pollset member of apr_file_t structure is made conditional to APR_FILES_AS_SOCKETS value, I simply added its test.\n\n\n\nPROBLEMS:\nWhile I was able to compile and install APR, I got some new problems.\n\nThe first problem happened because I installed sqlite3 in my build enviroment.\nDuring configuration, sqlite3 has been detected correctly and enabled.\nBut when linking the DLL, it showed an error saying that apr_dbd_sqlite3_driver was undefined.\nI do not know what's wrong exactly, but the only solution was to disable sqlite3 support.\n\nThe creation of the DLL also failed because it was not adding iconv when linking and infact it complained about unresolved libiconv symbols.\nActually I fixed it directly in the generated makefile by manually add \"-liconv\" but it must be fixed correctly.\nProbably a more cleaner solution exists and perhaps it would be better to trash all that current code and simply use AM_ICONV for detecting this stuff.\n\n\nNOTES:\nAC_LIBTOOL_WIN32_DLL is (was) a macro for activating the support for the creation of dynamic linking libraries in Windows.\nAlthough it's deprecated (there is a new technique, as it has also been written in your configure.in), it will be maintained for compatibility with all future scripts, at least this is what I remember I read.\nBut I do not see much relation with your APR_CHECK_DLL_FUNC macro.\nAnyways I think it could be removed since it's unused if you will apply my patch.\n\nSincerely,\n\nCarlo Bramini.", "is_private": false}, {"count": 6, "tags": [], "bug_id": 46175, "text": "Hi\n\nI applied dos2unix to the files as mentioned above. But I still get the following errors when doing \n\nC:\\Users\\zdavatz\\software\\apr>sh buildconf\nbuildconf: checking installation...\nbuildconf: python version 2.5 (ok)\nbuildconf: autoconf version 2.67 (ok)\nbuildconf: libtool version 2.4 (ok)\nbuildconf: copying libtool helper files using /c/MinGW/bin/libtoolize\nbuildconf: creating include/arch/unix/apr_private.h.in ...\nautom4te-2.67: m4sugar/m4sugar.m4: no such file or directory\nautoheader-2.67: failed to run '/c/MinGW/bin/autom4te-2.67': Bad file number\nbuildconf: creating configure ...\nautom4te-2.67: m4sugar/m4sugar.m4: no such file or directory\nbuildconf: generating 'make' outputs ...\nbuildconf: rebuilding rpm spec file\n\non the way I have to kill mktemp.exe 3 times.\n\nBest\nZeno", "id": 144040, "time": "2011-02-08T05:23:45Z", "creator": "zdavatz@gmail.com", "creation_time": "2011-02-08T05:23:45Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "carlo.bramix@libero.it", "attachment_id": null, "id": 144129, "creation_time": "2011-02-10T07:24:21Z", "time": "2011-02-10T07:24:21Z", "bug_id": 46175, "text": "I have not that problem... tested with msys and cygwin too.\nThe \"missing\" file is actually provided by autoconf-2.67 package and I have it here:\n/share/autoconf/m4sugar/m4sugar.m4\nor here (which is just an alias of previous path):\n/usr/share/autoconf/m4sugar/m4sugar.m4\n\nBy reading your message, it looks like you are mixing mingw tools and msys tools together, this is not exactly a lighted idea since I remember you can encounter problems with path interpretation and other things too.\nIn my enviroment, I put all mingw stuff in c:\\mingw and all msys stuff in c:\\msys and everything always worked fine.\nI could try to do the same thing.", "is_private": false}, {"count": 8, "tags": [], "creator": "zdavatz@gmail.com", "attachment_id": null, "text": "Thanks, I solved that bit with some help of G\u00fcnter. My msys came after my Git-Msys in my Path so that was the problem. Configure now runs, but make does not.\n\nPlease also see this message from G\u00fcnter: \n\nhttp://www.mail-archive.com/dev@apr.apache.org/msg23583.html\n\nbest\nZeno", "id": 144130, "time": "2011-02-10T07:33:22Z", "bug_id": 46175, "creation_time": "2011-02-10T07:33:22Z", "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 46175, "text": "a very tiny bit was committed with \n\nhttp://svn.apache.org/viewvc?rev=1083038&view=rev\n\nsorry it wasn't more; I spent most of my available time getting a build environment  (wasn't bad at all, but the clock hands did spin; more progress next time)", "id": 145097, "time": "2011-03-18T16:29:40Z", "creator": "trawick@apache.org", "creation_time": "2011-03-18T16:29:40Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 46175, "attachment_id": null, "id": 145110, "time": "2011-03-19T14:07:55Z", "creator": "trawick@apache.org", "creation_time": "2011-03-19T14:07:55Z", "is_private": false, "text": "more committed with\nhttp://svn.apache.org/viewvc?rev=1083242&view=rev"}, {"count": 11, "tags": [], "bug_id": 46175, "text": "trying this part of the patch (below), I get this failure in the test dir:\n\n.libs/globalmutexchild.o: In function `main':\nc:\\Users\\Trawick\\svn\\apr-xx\\test/globalmutexchild.c:38: undefined reference to `\napr_initialize'\nc:\\Users\\Trawick\\svn\\apr-xx\\test/globalmutexchild.c:39: undefined reference to `\napr_terminate'\n(and so on)\n\nIndex: test/Makefile.in\n===================================================================\n--- test/Makefile.in\t(revision 1083243)\n+++ test/Makefile.in\t(working copy)\n@@ -74,7 +74,7 @@\n \n # link programs using -no-install to get real executables not\n # libtool wrapper scripts which link an executable when first run.\n-LINK_PROG = $(LIBTOOL) $(LTFLAGS) --mode=link $(LT_LDFLAGS) $(COMPILE) \\\n+LINK_PROG = $(LIBTOOL) $(LTFLAGS) --mode=link $(COMPILE) $(LT_LDFLAGS) \\\n \t    @LT_NO_INSTALL@ $(ALL_LDFLAGS) -o $@\n \n # STDTEST_PORTABLE;\nIndex: configure.in\n===================================================================\n--- configure.in\t(revision 1083243)\n+++ configure.in\t(working copy)\n@@ -292,7 +292,7 @@\n if test \"x$use_libtool\" = \"xyes\"; then\n       lt_compile='$(LIBTOOL) $(LTFLAGS) --mode=compile $(COMPILE) -o $@ -c $< && touch $@'\n       LT_VERSION=\"-version-info `$get_version libtool $version_hdr APR`\"\n-      link=\"\\$(LIBTOOL) \\$(LTFLAGS) --mode=link \\$(LT_LDFLAGS) \\$(COMPILE) \\$(LT_VERSION) \\$(ALL_LDFLAGS) -o \\$@\"\n+      link=\"\\$(LIBTOOL) \\$(LTFLAGS) --mode=link \\$(COMPILE) \\$(LT_LDFLAGS) \\$(LT_VERSION) \\$(ALL_LDFLAGS) -o \\$@\"\n       so_ext='lo'\n       lib_target='-rpath $(libdir) $(OBJECTS)'\n       export_lib_target='-rpath \\$(libdir) \\$(OBJECTS)'\n@@ -308,6 +308,9 @@\n     *-solaris2*)\n         apr_platform_runtime_link_flag=\"-R\"\n         ;;\n+    *-mingw*)\n+        LT_LDFLAGS=\"$LT_LDFLAGS -no-undefined\"\n+        ;;\n     *)\n         ;;\n esac", "id": 145111, "time": "2011-03-19T14:31:27Z", "creator": "trawick@apache.org", "creation_time": "2011-03-19T14:31:27Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 46175, "attachment_id": null, "id": 145112, "time": "2011-03-19T21:02:18Z", "creator": "carlo.bramix@libero.it", "creation_time": "2011-03-19T21:02:18Z", "is_private": false, "text": "I confirm that the compilation fails when launching \"make test\".\nAnyways, the problem is not related the last patch you applied (that fix is correct), it happens because into apr.h.in is missing the handling of APR_DECLARE_EXPORT and APR_DECLARE_STATIC for generating correct macro for:\n\nAPR_DECLARE(type)       \nAPR_DECLARE_NONSTD(type)\nAPR_DECLARE_DATA        \n\nAt the moment only APR_MODULE_DECLARE_DATA is handled correctly in apr.h.in as it has been done in apr.hw (and infact, if you check the content of libapr-0.dll you will just find some exported data).\nAs you can see the solution is quite easy, all depends if a change will be allowed to apr.h.in or not, otherwise it seems to me that you will be able to use APR only if configure is launched with \"--enable-static --disable-shared\".\nOf course, configure script also need to handle APR_DECLARE_EXPORT and APR_DECLARE_STATIC somewhere, to make it working, depending on the above options given for libtool."}, {"count": 13, "tags": [], "creator": "carlo.bramix@libero.it", "attachment_id": 26812, "text": "Created attachment 26812\nFix for this bug\n\nThis new patch includes the fixes of previous one (excluding the ones that you have already committed) and it includes these news:\n\ntest/Makefile.in:\nmod_test depends on libapr-2 so I must add its reference when linking.\n\ninclude/apr.h.in:\nCopied the same code written into apr.hw for handling these macro:\nAPR_DECLARE\nAPR_DECLARE_NONSTD\nAPR_DECLARE_DATA\nActually, I could not see many other ways for doing it...\nI did my best to think something that could be handled by configure itself, but the fact to have different declarations when building the library itself (read: dllexport) and derived code (read: dllimport) limited a lot the alternatives.\nPerhaps it would not be a big problem having these macros fixed here because it seems they have some sense only when building for Windows and they are technically useless on other enviroments.\n\nconfigure.in:\nAdded detection of build type, if user configured libtool for static or shared build, APR_DECLARE_STATIC or APR_DECLARE_EXPORT will be defined.\n\nxml/apr_xml_internal.h:\nDeclaration of apr_xml_parser_create_ex was bugged because it was not prefixed by APR_DECLARE and it was not exported as expected. Now it's fixed.\n\n\nI configure APR with:\n\n../apr-svn/configure --disable-static --enable-shared --prefix=$HOME/inst_apr --with-sqlite3=no --with-iconv=no\n\nand with:\n\n../apr-svn/configure --enable-static --disable-shared --prefix=$HOME/inst_apr --with-sqlite3=no --with-iconv=no\n\nand compilation was completed successfully on both.\nNow, \"make test\" works, but I'm getting these results at the end:\n\n\nFailed Tests            Total   Fail    Failed %\n===================================================\ntestdso                     5      4     80.00%\ntestfile                   36      1      2.78%\ntestpipe                   10      1     10.00%\ntestsock                   10      1     10.00%\ntestpass                    4      2     50.00%\n\n\nI'm getting the same exact report for both static and shared build.\nI do not know if Windows platform dependant sources have been ever tested by this testsuite.", "id": 145380, "time": "2011-03-29T14:07:55Z", "bug_id": 46175, "creation_time": "2011-03-29T14:07:55Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 46175, "attachment_id": null, "id": 145391, "time": "2011-03-29T18:32:54Z", "creator": "trawick@apache.org", "creation_time": "2011-03-29T18:32:54Z", "is_private": false, "text": "The correction to the linkage of apr_xml_parser_create_ex() was checked in as 1086790.\n\nYour testall output looks vaguely like I saw recently with a Microsoft toolchain build, but now that build is broken so I can't confirm.\n\n(more eyes on the rest of the patch soon)"}, {"count": 15, "tags": [], "bug_id": 46175, "text": "Created attachment 26817\nFix for this bug\n\nI did a quick check on the failure that happens in testfile entry.\nThis failure happens in test_file_trunc() and it fails to truncate the file when it is open with APR_FOPEN_BUFFERED flag.\nI think there is also a bug in use of SetFilePointer API.\nInstead of fixing all places where it is called, I made an utility function \"SetFilePointerApr\" that should handle the task correctly and it simplifies a lot the code too.\n\nI also did a quick compilation on CygWin with latest APR sources and I updated the patch a bit with its fixes too.\n\nbuild/apr_hints.m4:\nDo not add an useless macro, if you want to test CygWin at compile time, simply use __CYGWIN__\n\nfile_io/unix/open.c:\nThere is a bug into apr_file_open(): 'rv' is used also in line 244, near apr_file_info_get(), so declaring it inside an #if APR_HAS_THREADS ... #endif made compilation to fail if APR_HAS_THREADS=0.\n\nfile_io/win32/seek.c\nFixed usage of SetFilePointer() and truncation of the file.\n\n\n\nAfter launching \"make test\" on CygWin, I got these result:\n\n============\n\nThis program won't work on this platform because there is no support for threads\n.\nThis test requires APR thread support.\ntestatomic          : SUCCESS\ntestdir             : SUCCESS\ntestdso             : FAILED 8 of 9\ntestdup             : SUCCESS\ntestenv             : SUCCESS\ntestfile            : SUCCESS\ntestfilecopy        : SUCCESS\ntestfileinfo        : SUCCESS\ntestflock           : SUCCESS\ntestfmt             : SUCCESS\ntestfnmatch         : SUCCESS\ntestargs            : SUCCESS\ntesthash            : SUCCESS\ntesthooks           : SUCCESS\ntestipsub           : FAILED 1 of 5\ntestlock            : SUCCESS\ntestcond            : SUCCESS\ntestlfs             : SUCCESS\ntestmmap            : SUCCESS\ntestnames           : SUCCESS\ntestoc              : SUCCESS\ntestpath            : SUCCESS\ntestpipe            : SUCCESS\ntestpoll            : SUCCESS\ntestpools           : SUCCESS\ntestproc            : |proc_child:./.libs/lt-proc_child.c:233: FATAL: couldn't f\nind proc_child.\nFAILED 2 of 3\ntestprocmutex       : -/bin/sh: line 2:  2860 Bad system call         PATH=\"`ech\no \"../dbm/.libs:../dbd/.libs:../ldap/.libs:$PATH\" | sed -e 's/::*$//'`\" ./$prog\nUsage: /home/Carlo/apr/test/./.libs/dbd driver-name [params]\n$\nmake[1]: *** [check] Error 140\nmake[1]: Leaving directory `/home/Carlo/apr/test'\nmake: *** [check] Error 2\n\n\nUnfortunately, I do not know exactly what happens at the end.\nI also do not understand the sentence \"no support for threads\".", "id": 145407, "time": "2011-03-30T12:31:27Z", "creator": "carlo.bramix@libero.it", "creation_time": "2011-03-30T12:31:27Z", "is_private": false, "attachment_id": 26817}, {"count": 16, "attachment_id": null, "bug_id": 46175, "text": "Carlo,\n\nyour report...\n\n\"I did a quick check on the failure that happens in testfile entry.\nThis failure happens in test_file_trunc() and it fails to truncate the file\nwhen it is open with APR_FOPEN_BUFFERED flag.\nI think there is also a bug in use of SetFilePointer API.\nInstead of fixing all places where it is called, I made an utility function\n\"SetFilePointerApr\" that should handle the task correctly and it simplifies a\nlot the code too.\n\nis a pretty serious bug.\n\nHowever, it has nothing to do with the subject of this incident.  Modifying\nthis patch over and over to fix *unrelated bugs* makes the changes very hard\nto follow, puts all of the work on the one developer who's patiently been\ngoing through the suggested mingw/msys changes, depriving him of his time and\ndepriving the rest of the developers the chance to review this specific bug.\n\nCan you please stay focused on \"these requirements to build using msys/mingw\"\non this incident, and create new incidents when you spot other bugs, please?", "id": 145409, "time": "2011-03-30T13:19:11Z", "creator": "wrowe@apache.org", "creation_time": "2011-03-30T13:19:11Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 145411, "creation_time": "2011-03-30T13:35:56Z", "time": "2011-03-30T13:35:56Z", "bug_id": 46175, "text": "Hi Carlo, \n\nFirst, thanks for all your efforts.  I was about to say approx. the same thing as Bill :)\n\nI will go ahead and handle the trivial variable declaration issue in unix/open.c but not attribute it to any particular bug.\n\nOpen a bug (or post patch + commentary to dev@apr) for just the file ptr issue.\n\nOpen another bug (or post patch + comm...) for just the Cygwin build issue(s).\n\nCan you split the remaining MinGW stuff up to by issue (perhaps 2-3 issues in there)?\n\nAs far as this bug...  Much of the reported issues are now resolved in 1.4.x through trunk now and it is seemingly usable, so I think we should close this one out and add a note in 1.4.x/CHANGES indicating that we have experimental MinGW/MSys support.  I think the word \"experimental\" is important because until we have at least the feature selection (e.g., APR_HAVE_IPV6 and the like) fixed, we can't promise an equivalent build for MinGW when replacing 1.4.x with 1.4.y and using the same build commands.\n\nConcerns?", "is_private": false}, {"count": 18, "tags": [], "creator": "carlo.bramix@libero.it", "attachment_id": null, "id": 145423, "creation_time": "2011-03-30T18:30:53Z", "time": "2011-03-30T18:30:53Z", "bug_id": 46175, "text": "Hello friends,\nthank you very much for your replies.\nPlease excuse me if I made some confusion with patches, I was thinking that it could be useful to have all fixes for compiling APR with autotools on Windows in a single patch.\nEvidently, I got the bad idea when I estimated those fixes to be ridiculously small.\nBut hopefully, this is also the easiest thing to fix :D\nActually the only remaining serious problem to overcome for closing this bug is the limited set of fixes for generating a shared library.\nIf it's ok for you, I will do a smaller patch that you could review, for fixing just this defect, hopefully there is not really much work to do before reaching this target.\nThen I will create two different bugs for proposing a fix to the problem I think I have found in file truncation and for removing a macro defined for CygWin that is totally redundant (and also unused).\nSorry for the trouble...\n\nSincerely,\n\nCarlo Bramini.", "is_private": false}, {"count": 19, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 145426, "creation_time": "2011-03-30T19:23:43Z", "time": "2011-03-30T19:23:43Z", "bug_id": 46175, "text": "sure, getting the shared library support working as one last patch for this bug works for me\n\ntake care!", "is_private": false}, {"count": 20, "tags": [], "bug_id": 46175, "text": "Created attachment 26821\nFix for this bug\n\nThis last patch should fix creation of shared libraries (DLL) under MinGW+MSys.\nThe corrections can be resumed in:\n\ntest/Makefile.in:\n* $(LT_LDFLAGS) must be placed after the driver, otherwise it will act exactly like $(LTFLAGS). This is required, otherwise libtool will be never able to recognize the \"-no-undefined\" flag.\n* if mod_test.la does not specify $(LOCAL_LIBS), compilation will fail (this is required by both static and shared builds).\n\ninclude/apr.h.in:\n* It is required to declare APR_DECLARE, APR_DECLARE_NONSTD and APR_DECLARE_DATA as they are in apr.hw, otherwise the generate DLL won't export any symbol. APR_MODULE_DECLARE_DATA is already included, but previous ones are not.\n\nconfigure.in:\n* $(LT_LDFLAGS) must be placed after the driver, as described for test/Makefile.in.\n* Added \"-no-undefined\" flag to $(LT_LDFLAGS) if the target platform is Windows.\n* Declare APR_DECLARE_EXPORT or APR_DECLARE_STATIC, required by the macro added in include/apr.h.in.\n* Removed the \"strange\" libraries detection (btw, probably it was also breaking platforms without __stdcall calling convention, like Windows CE/Mobile/Phone, since function names were decorated), linker gave error without sense if adding \"-lkernel32\", probably because it creates a conflict of library precedence and dependency.\n\nThat's all, all these topic have also a good description in previous posts, if you think that something else should be adjusted in this patch, let me know!\n\nSincerely,\n\nCarlo Bramini.", "id": 145439, "time": "2011-03-31T15:01:21Z", "creator": "carlo.bramix@libero.it", "creation_time": "2011-03-31T15:01:21Z", "is_private": false, "attachment_id": 26821}, {"count": 21, "tags": [], "bug_id": 46175, "text": "About the use of APR_DECLARE_STATIC/APR_DECLARE_EXPORT:\n\n(And yes, I probably am confused; just tell me where.)\n\nThe Microsoft toolchain build is set up to be able to generate statically- and dynamically-linked versions of APR which can coexist in the APR installation directory, and the user defines one of those symbols when building their application so that the one copy of the include files declare the correct linkage depending on whether the application will be statically or dynamically linked with APR.  (Yeah, they're also used in the APR build itself since there's one apr.h for both builds.)\n\nThe autoconf-based toolchain can only generate static or dynamic in one build, and they apparently cannot coexist.  A couple of examples:\n\n1. There can only be one apr-2-config, and \"apr-2-config --cflags\" will have either APR_DECLARE_STATIC or APR_DECLARE_EXPORT, depending on the last one which was installed.  (That could be ripped out of apr-2-config, and maybe Windows users won't make use of that anyway.)\n\n2. (Fuzzy recollection, unfortunately) I installed a dynamic build then a static build into the same directory; when I linked my app, the link step would reference the apr DLL if libapr-2.dll.la existed in the INSTALLDIR/lib directory; when the la was removed it would statically link with apr.\n\nIf the coexistence of static/dynamic is not practical with the autoconf-based build, I don't think we need to expose the APR_DECLARE_STATIC/APR_DECLARE_EXPORT \"choice\" for that build.  IOW, don't add it to CPPFLAGS, and substitute the proper linkage when apr.h is generated (\"#define APR_DECLARE(type)  @aprdcl@\" and the like) and there won't be multiple versions in the final apr.h.\n\nThoughts?\n\nBTW, the patch has three versions of the declare macros:\n\nif APR_DECLARE_STATIC\n  foo\nelse if APR_DECLARE_EXPORT\n  bar\nelse\n  baz\nendif\n\nWhat is that default set of definitions used for?  I thought one of those APR_DECLARE_ would always be defined.", "id": 145444, "time": "2011-03-31T20:44:07Z", "creator": "trawick@apache.org", "creation_time": "2011-03-31T20:44:07Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "APR_DECLARE_STATIC - undecorated normal linkage\n\nAPR_DECLARE_EXPORT - INTERNAL apr build mechanic\n\nno defines - external apr library linkage\n\nMost .dll consumers need to define nothing, while .lib users aught to define\nAPR_DECLARE_STATIC.", "id": 145447, "time": "2011-03-31T23:12:16Z", "bug_id": 46175, "creation_time": "2011-03-31T23:12:16Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 46175, "attachment_id": null, "id": 145457, "time": "2011-04-01T07:17:37Z", "creator": "trawick@apache.org", "creation_time": "2011-04-01T07:17:37Z", "is_private": false, "text": "Thanks, Bill.  I can't read the README or the code properly :(\n\nThat shows why two flavors of the declarations are required for dynamic builds -- one for internal, one for external.  (We would still have the dynamic and static support in apr.h, as if the two installs could coexist, but that's a minor detail.)\n\nAPR_DECLARE_EXPORT definitely can't leak outside of the APR build, independent of other issues.  Right now it shows up in \"apr-2-config --cppflags\"."}, {"count": 24, "tags": [], "bug_id": 46175, "attachment_id": null, "id": 145464, "time": "2011-04-01T09:25:23Z", "creator": "trawick@apache.org", "creation_time": "2011-04-01T09:25:23Z", "is_private": false, "text": "BTW, I plan to commit the current patch, close this bug, and open another for the apr-2-config glitch (exposing the EXPORT in app CPPFLAGS).\n\nCo-resident static and dynamic installs are yet another potential concern (not to me, as long as we document it ;) )."}, {"count": 25, "attachment_id": null, "bug_id": 46175, "text": "You are right, this fact escaped to my attention.\nThe presence of \"-DAPR_DECLARE_EXPORT\" into apr-2-config is a damage because the declaration of public functions will be always prefixed by __dllexport rather than __dllimport.\nInstead, \"-DAPR_DECLARE_STATIC\" is required for a static build even by client applications.\nIn my opinion the solution is to separate the flags used by compilation of APR itself from the ones used by client applications:\nstatic build: APR_DECLARE_STATIC for both.\nshared build: APR_DECLARE_EXPORT when compiling APR and no additional macros for client apps.\n\nIs there already this chance available in APR building system?\n\nThere is also another alternative, that could automatically solve the trouble, at least in theory: remove all APR_DECLARE_STATIC and APR_DECLARE_EXPORT additions (and also APU_MODULE_DECLARE_STATIC since we are fixing) to apr.h.in, remove the same addition in configure.in and just tell to libtool to export all symbols, we just need to add an options to its flags.\n\nI think that the second choice would be better, if things are getting too complicated.", "id": 145466, "time": "2011-04-01T09:34:12Z", "creator": "carlo.bramix@libero.it", "creation_time": "2011-04-01T09:34:12Z", "tags": [], "is_private": false}, {"count": 26, "tags": [], "creator": "carlo.bramix@libero.it", "attachment_id": 26832, "text": "Created attachment 26832\nAlternative fix for this bug.", "id": 145479, "time": "2011-04-01T10:37:36Z", "bug_id": 46175, "creation_time": "2011-04-01T10:37:36Z", "is_private": false}, {"count": 27, "attachment_id": null, "bug_id": 46175, "text": "This seems to work for creating CPPFLAGS which are used only for the build of APR itself:\n\nIndex: configure.in\n===================================================================\n--- configure.in\t(revision 1087516)\n+++ configure.in\t(working copy)\n@@ -2668,6 +2668,7 @@\n \n dnl ----------------------------- Construct the files\n \n+AC_SUBST(INTERNAL_CPPFLAGS)\n AC_SUBST(LDLIBS)\n AC_SUBST(INCLUDES)\n AC_SUBST(AR)\nIndex: build/apr_hints.m4\n===================================================================\n--- build/apr_hints.m4\t(revision 1087516)\n+++ build/apr_hints.m4\t(working copy)\n@@ -119,6 +119,7 @@\n \tAPR_ADDTO(CPPFLAGS, [-DHPUX -D_REENTRANT])\n \t;;\n     *-linux*)\n+        APR_ADDTO(INTERNAL_CPPFLAGS, -DJEFF)\n         case `uname -r` in\n \t    2.* )  APR_ADDTO(CPPFLAGS, [-DLINUX=2])\n \t           ;;\nIndex: build/apr_rules.mk.in\n===================================================================\n--- build/apr_rules.mk.in\t(revision 1087516)\n+++ build/apr_rules.mk.in\t(working copy)\n@@ -55,6 +55,10 @@\n EXTRA_LIBS=@EXTRA_LIBS@\n EXTRA_INCLUDES=@EXTRA_INCLUDES@\n \n+# CPPFLAGS which are valid only while building APR itself\n+#\n+INTERNAL_CPPFLAGS=@INTERNAL_CPPFLAGS@\n+\n # NOTEST_* are flags and libraries that can be added by the user without\n # causing them to be used in configure tests (necessary for things like\n # -Werror and other strict warnings that maintainers like to use).\n@@ -70,7 +74,7 @@\n # left-to-right precedence and CPPFLAGS may include user-defined overrides.\n #\n ALL_CFLAGS   = $(EXTRA_CFLAGS) $(NOTEST_CFLAGS) $(CFLAGS)\n-ALL_CPPFLAGS = $(DEFS) $(EXTRA_CPPFLAGS) $(NOTEST_CPPFLAGS) $(CPPFLAGS)\n+ALL_CPPFLAGS = $(DEFS) $(INTERNAL_CPPFLAGS) $(EXTRA_CPPFLAGS) $(NOTEST_CPPFLAGS) $(CPPFLAGS)\n ALL_LDFLAGS  = $(EXTRA_LDFLAGS) $(NOTEST_LDFLAGS) $(LDFLAGS)\n ALL_LIBS     = $(LIBS) $(NOTEST_LIBS) $(EXTRA_LIBS)\n ALL_INCLUDES = $(INCLUDES) $(EXTRA_INCLUDES)", "id": 145488, "time": "2011-04-01T11:28:04Z", "creator": "trawick@apache.org", "creation_time": "2011-04-01T11:28:04Z", "tags": [], "is_private": false}, {"count": 28, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 145496, "creation_time": "2011-04-01T16:00:36Z", "time": "2011-04-01T16:00:36Z", "bug_id": 46175, "text": "Two installs -can- coexist rather easily.  (.so's alongside .a's, and they\nshould likely be named libapr-2.dll.a vs libapr-2.a)  But -building- them\nside by side, I'd presume the .o targets would clash.", "is_private": false}, {"count": 29, "tags": [], "bug_id": 46175, "text": "Building them side by side wasn't an issue (make extraclean or presumably VPATH).  The issues I noted were with coexisting installs.\n\nCarlo, what about the lack of __stdcall vs. __cdecl, dllexport vs. dllimport vs. nothing in your latest patch?", "id": 145497, "time": "2011-04-01T16:24:26Z", "creator": "trawick@apache.org", "creation_time": "2011-04-01T16:24:26Z", "is_private": false, "attachment_id": null}, {"count": 30, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 145499, "creation_time": "2011-04-01T17:19:44Z", "time": "2011-04-01T17:19:44Z", "bug_id": 46175, "text": "Note that the __stdcall semantic is absolutely required if we are going to be\nable to build a binary targeting libapr-2.dll (irrespective of whether it came\nfrom a msvc or mingw build).", "is_private": false}, {"count": 31, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "I think I just take Carlo's patch n-1, add the trick for internal-only CPPFLAGS in order to avoid the dllimport vs. dllexport issue in that patch, and the linkage is resolved.", "id": 145510, "time": "2011-04-02T08:07:31Z", "bug_id": 46175, "creation_time": "2011-04-02T08:07:31Z", "is_private": false}, {"count": 32, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "thanks all!\n(r1088023)", "id": 145514, "time": "2011-04-02T09:51:05Z", "bug_id": 46175, "creation_time": "2011-04-02T09:51:05Z", "is_private": false}, {"count": 33, "tags": [], "bug_id": 46175, "text": "*** Bug 51369 has been marked as a duplicate of this bug. ***", "id": 147089, "time": "2011-06-13T23:17:17Z", "creator": "trawick@apache.org", "creation_time": "2011-06-13T23:17:17Z", "is_private": false, "attachment_id": null}, {"count": 34, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "This has been merged to the 1.5.x branch for apr future 1.5.0.\n(Thanks again!)", "id": 161311, "time": "2012-08-12T22:56:41Z", "bug_id": 46175, "creation_time": "2012-08-12T22:56:41Z", "is_private": false}, {"count": 35, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "A few pieces had to be committed to apr-util 1.5.x.  They're ready for upcoming apr-util 1.5.1.\n\nhttp://svn.apache.org/viewvc?view=revision&revision=1372546", "id": 161347, "time": "2012-08-13T18:47:20Z", "bug_id": 46175, "creation_time": "2012-08-13T18:47:20Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "lalit.mishra@airtightnetworks.com", "attachment_id": null, "id": 138763, "creation_time": "2010-07-30T07:09:09Z", "time": "2010-07-30T07:09:09Z", "bug_id": 49678, "text": "This issue is reported in bug#39621. \nOpening this bug in product APR.\n\nThe address returned is not actually an IPv6 address, but looks like one. \n\nWe faced this problem with RedHat 9 only when IPv6 is disabled.\nLinux 2.6.12.3 #1 SMP Tue Jun 10 17:56:55 IST 2008 i686 i686 i386 GNU/Linux\n(this is not the stock kernel in RH 9).\n\nAPR version 1.3.9.\n\nAbsence of AI_ADDRCONFIG flag for getaddrinfo in glibc (2.3.2-27.9.7) is the root cause. \nFrom man getaddrinfo -\n\n    If hints.ai_flags includes the AI_ADDRCONFIG flag, then IPv4 addresses are\nreturned in the list pointed to by result only if the  local system has at lea\nst one IPv4 address configured, and IPv6 addresses are only returned if the\nlocal system has at least one IPv6 address configured.\n\nWhen tomcat searches for local address to bind, it finally calls call_resolver\nfunction of sockaddr.c in APR with hostname=null. As AI_ADDRCONFIG flag is not\npresent, getaddrinfo returns \"::\" and 0.0.0.0 in the list of available\naddresses.  The tcnative method (Address.info, see address.c) prefers the IPv6\n(::) address among these and returns this to Tomcat, and Tomcat specifies this\naddress to bind to the socket (surprisingly, the kernel does not complain when\nbinding an IPv6 address to an AF_INET socket). Therefore, APR code falsely ends\nup setting AF_INET6 to local_addr->family and (later when accept returns) to\nremote_addr->family as well. Thus when an IPv4 host connects, though accept\nreturns proper IPv4 address to APR, APR still believes it to be IPv6 address\nand messes up while translating to presentation format.\n\nFix:\nIf AI_ADDRCONFIF flag is not present, we need to determine if IPv6 is\n*actually* available or not. This can be achieved by trying to open an IPv6\nsocket. If this fails then set hints.ai_family to AF_INET so that getaddrinfo\nreturns IPv4 addresses only. Of course do this only when family has been\nspecified as AF_UNSPEC. We do not want to return IPv4 addresses when asked\nspecifically for IPv6 addresses.\nPlease see attached patch (for APR 1.3.9).", "is_private": false}, {"count": 1, "tags": [], "creator": "lalit.mishra@airtightnetworks.com", "attachment_id": 25822, "text": "Created attachment 25822\nPatch as described in description", "id": 138764, "time": "2010-07-30T07:10:04Z", "bug_id": 49678, "creation_time": "2010-07-30T07:10:04Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 49678, "attachment_id": null, "id": 138768, "time": "2010-07-30T07:37:10Z", "creator": "jorton@redhat.com", "creation_time": "2010-07-30T07:37:10Z", "is_private": false, "text": "\"messes up while translating to presentation format.\"\n\nmesses up how?  It sounds like you are trying to work around some bug in handling v4-mapped IPv6 addresses.  What is the actual bug?"}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> \"messes up while translating to presentation format.\"\n> \n> messes up how?  It sounds like you are trying to work around some bug in\n> handling v4-mapped IPv6 addresses.  What is the actual bug?\n\nThis issue is happening when IPv6 is *disabled*. So the socket is actually bound with AF_INET while APR believes it has been bound with AF_INET6. So, accept actually returns IPv4 and not v4 mapped IPv6 address. So the conversion to presentation format essentially produces garbage, which looks like some IPv6 address. For example: ::68f3:7fbd:dcdb:240, ::78f4:dfbd:dcdb:240, etc.\n\nThe actual bug is because of \"getaddrinfo\". It returns IPv6 address \"::\" even when IPv6 is disabled. This behavior of getaddrinfo can be bypassed with AI_ADDRCONFIG flag, which is absent in RH9 and hence the bug.", "is_private": false, "id": 138805, "creator": "lalit.mishra@airtightnetworks.com", "time": "2010-08-02T02:18:47Z", "bug_id": 49678, "creation_time": "2010-08-02T02:18:47Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 49678, "attachment_id": null, "is_private": false, "id": 138816, "time": "2010-08-02T08:48:42Z", "creator": "jorton@redhat.com", "creation_time": "2010-08-02T08:48:42Z", "text": "This explanation is still not clear to me.\n\nWhat do you mean precisely by having \"IPv6 disabled\"?\n\nAre you saying there is a kernel bug here which needs to be worked around?\n\nMaybe you could give a minimal example of code needed to reproduce this with APR, the output of running that code, and the output from running it under strace (or similar)."}, {"count": 5, "tags": [], "bug_id": 49678, "attachment_id": null, "is_private": false, "id": 138817, "time": "2010-08-02T10:55:45Z", "creator": "lalit.mishra@airtightnetworks.com", "creation_time": "2010-08-02T10:55:45Z", "text": "(In reply to comment #4)\n \n> What do you mean precisely by having \"IPv6 disabled\"?\n\nIt means that \"ipv6\" modules has not been loaded, though kernel was compiled with IPv6 support enabled. No IPv6 addresses are assigned on any network interfaces.\n \n> Are you saying there is a kernel bug here which needs to be worked around?\n\nDifferent results are obtained on same kernel with different glibc version.\nRH9 uses 2.3.2 - gives wrong result\nCentOS 5.2 uses 2.5-24 - gives correct result\n\n> Maybe you could give a minimal example of code needed to reproduce this with\n> APR, the output of running that code, and the output from running it under\n> strace (or similar).\n\nConsider following code :\n\n#include \"apr.h\"\n#include \"apr_pools.h\"\n#include \"apr_network_io.h\"\n#include \"apr_strings.h\"\n#include \"apr_mmap.h\"\n#include \"stdio.h\"\n\nint main() {\n        apr_pool_t *pool = NULL;\n        apr_sockaddr_t *sa, *sl;\n        apr_int32_t f = 0;\n\n        apr_initialize();\n        apr_pool_create(&pool, NULL);\n\n        apr_sockaddr_info_get(&sa, NULL, AF_UNSPEC, 0, f, pool);\n\n        sl = sa;\n\n        while(sl) {\n                char addrStr[100];\n\n                memset(addrStr, '\\0', 100);\n\n                apr_sockaddr_ip_getbuf(addrStr, 99, sl);\n                printf(\"%s\\n\", addrStr);\n\n                sl = sl->next;\n        }\n}\n\nNow let's consider output on two machines\n\nCentOS Machine (with IPv6 disabled)\n===================================\n\nifconfig \neth0      Link encap:Ethernet  HWaddr xx:xx:xx:xx:xx:xx  \n          inet addr:192.168.8.215  Bcast:192.168.11.255  Mask:255.255.252.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1146747 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:28212 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:100 \n          RX bytes:72940682 (69.5 MiB)  TX bytes:30817941 (29.3 MiB)\n          Memory:d0200000-d0220000 \n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:16436  Metric:1\n          RX packets:4557 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:4557 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:1540826 (1.4 MiB)  TX bytes:1540826 (1.4 MiB)\n\n./getLocalAddr \n0.0.0.0\n\nRH9 Machine (with IPv6 disabled)\n==============================\n\nifconfig \neth0      Link encap:Ethernet  HWaddr xx:xx:xx:xx:xx:xx  \n          inet addr:192.168.8.97  Bcast:192.168.11.255  Mask:255.255.252.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:27661 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:760 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:1848721 (1.7 Mb)  TX bytes:154774 (151.1 Kb)\n          Base address:0x2000 Memory:48180000-481a0000 \n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:16436  Metric:1\n          RX packets:4553 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:4553 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:1045939 (1021.4 Kb)  TX bytes:1045939 (1021.4 Kb)\n\n./getLocalAddr \n::\n0.0.0.0\n\nNote that on RH9 \"::\" address (sl->family == AF_INET6) was returned. This makes APR believe that IPv6 is enabled. On CentOS presence of AI_ADDRCONFIG prevents \"::\" from appearing here."}, {"count": 6, "attachment_id": null, "bug_id": 49678, "is_private": false, "id": 138874, "time": "2010-08-04T06:50:13Z", "creator": "jorton@redhat.com", "creation_time": "2010-08-04T06:50:13Z", "tags": [], "text": "This is what you'd expect to see on a machine without AI_ADDRCONFIG support.  Where is the bug in \"presentation format\" that you mentioned?  accept() will fail if you try to bind to the AF_INET6 address, too, presumably.  What is the bug?"}, {"count": 7, "tags": [], "text": "Sorry I meant bind() will fail there.", "attachment_id": null, "id": 138875, "creator": "jorton@redhat.com", "time": "2010-08-04T06:51:31Z", "bug_id": 49678, "creation_time": "2010-08-04T06:51:31Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 49678, "text": "(In reply to comment #7)\n> Sorry I meant bind() will fail there.\n\nAs mentioned in bug description \n\n> (surprisingly, the kernel does not complain when\nbinding an IPv6 address to an AF_INET socket).\n\nbind() does not fail.\n\nLet me illustrate the whole problem with a minimal program. This listing is extension of previous program. Still this code follows the same behavior as AprEndPoint.init() does.\n\n\n#include \"apr.h\"\n#include \"apr_pools.h\"\n#include \"apr_arch_networkio.h\"\n#include \"apr_network_io.h\"\n#include \"apr_strings.h\"\n#include \"apr_mmap.h\"\n#include \"stdio.h\"\n\nint main() {\n\tapr_pool_t *pool = NULL;\n\tapr_sockaddr_t *sa, *sl, *bindAddr = NULL;\n\tapr_int32_t f = 0;\n\tapr_socket_t *socket, *acceptedSocket;\n\tint ret_val = 0;\n\n\tapr_initialize();\n\tapr_pool_create(&pool, NULL);\n\n\tapr_sockaddr_info_get(&sa, NULL, AF_UNSPEC, 1756, f, pool);\n\n\tsl = sa;\n\n        /* if there is an IPv6 address returned, prefer to use that (tcnative\n         * has similar behavior).\n\twhile(sl) {\n\t\tchar addrStr[100];\n\n\t\tmemset(addrStr, '\\0', 100);\n\n\t\tif(sl->family == AF_INET6) {\n\t\t\tapr_sockaddr_ip_getbuf (addrStr, 99, sl);\n\t\t\tprintf(\"Found IPv6 address %s. Breaking.\\n\", addrStr);\n\t\t\tbindAddr = sl;\n\t\t}\n\n\t\tsl = sl->next;\n\t}\n\n\tif(bindAddr == NULL) \n\t\tbindAddr = sa;\n\t\n\tret_val = apr_socket_create(&socket, AF_UNSPEC, SOCK_STREAM, APR_PROTO_TCP, pool);\n\n\tret_val = apr_socket_bind(socket, bindAddr);\n\n\tret_val = apr_socket_listen(socket, 1);\n\n\tret_val = apr_socket_accept(&acceptedSocket, socket, pool);\n\n\t{\n\t\tchar remoteAddrStr[100];\n\t\tmemset(remoteAddrStr, '\\0', 100);\n\t\tapr_sockaddr_ip_getbuf(remoteAddrStr, 99, acceptedSocket->remote_addr);\n\t\tprintf(\"Remote address %s\\n\", remoteAddrStr);\n\t}\n}\n\n\nIn both following cases after running this program, I'd simply telnet to the machine on the chosen port (1756 in this case) from a different machine (192.168.11.184).\n\nWhen run on CentOS machine with IPv6 disabled\n=============================================\n\nifconfig \neth0      Link encap:Ethernet  HWaddr xx:xx:xx:xx:xx:xx  \n          inet addr:192.168.8.215  Bcast:192.168.11.255  Mask:255.255.252.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:10648137 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:272642 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:100 \n          RX bytes:1111501223 (1.0 GiB)  TX bytes:230566540 (219.8 MiB)\n          Memory:d0200000-d0220000 \n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:16436  Metric:1\n          RX packets:67332 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:67332 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:24496050 (23.3 MiB)  TX bytes:24496050 (23.3 MiB)\n\n./getLocalAddr \nRemote address 192.168.11.184\n\ntelnet 192.168.8.215 1756\nTrying 192.168.8.215...\nConnected to 192.168.8.215.\nEscape character is '^]'.\nConnection closed by foreign host.\n\nWhen run on RH9 machine with IPv6 disabled\n==========================================\n\nifconfig \neth0      Link encap:Ethernet  HWaddr xx:xx:xx:xx:xx:xx  \n          inet addr:192.168.8.97  Bcast:192.168.11.255  Mask:255.255.252.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:6696363 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:205660 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:482996699 (460.6 Mb)  TX bytes:70162877 (66.9 Mb)\n          Base address:0x2000 Memory:48180000-481a0000 \n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          UP LOOPBACK RUNNING  MTU:16436  Metric:1\n          RX packets:214777 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:214777 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:47510460 (45.3 Mb)  TX bytes:47510460 (45.3 Mb)\n\n\n./getLocalAddr \nFound IPv6 address ::. Breaking.\nRemote address ::9b1b:0:28b3:fcb7\n\ntelnet 192.168.8.97 1756\nTrying 192.168.8.97...\nConnected to 192.168.8.97.\nEscape character is '^]'.\nConnection closed by foreign host.\n\nNote the remote address returned on RH9 machine. I hope this clears what is happening here.\nThe problem is because apr_socket_t.local_addr is IPv6 and so it believes apr_socket_t.remote_addr will also be IPv6. So the while converting from network to presentation format, we are trying to convert bytes which are actually IPv4 address believing those bytes represent an IPv6 address. There is no bug in the conversion to presentation format.", "id": 138893, "time": "2010-08-05T03:10:27Z", "creator": "lalit.mishra@airtightnetworks.com", "creation_time": "2010-08-05T03:10:27Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "jorton@redhat.com", "attachment_id": 25874, "text": "Created attachment 25874\npossible fix\n\nDoes it work if you apply this patch to APR?", "id": 139024, "time": "2010-08-10T06:57:11Z", "bug_id": 49678, "creation_time": "2010-08-10T06:57:11Z", "is_private": false}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n> Created an attachment (id=25874) [details]\n> possible fix\n> \n> Does it work if you apply this patch to APR?\n\nYes, this works as well.", "is_private": false, "id": 139026, "creator": "lalit.mishra@airtightnetworks.com", "time": "2010-08-10T08:39:40Z", "bug_id": 49678, "creation_time": "2010-08-10T08:39:40Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "Thanks.  You should use:\n\n        apr_socket_addr_get(&sa, APR_REMOTE, acceptedSocket);\n\n        apr_sockaddr_ip_getbuf(remoteAddrStr, 99, sa);\n\nrather than attempting to dereference the socket object, BTW.", "is_private": false, "id": 139028, "creator": "jorton@redhat.com", "time": "2010-08-10T09:47:07Z", "bug_id": 49678, "creation_time": "2010-08-10T09:47:07Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 49678, "attachment_id": null, "id": 143354, "time": "2011-01-15T10:15:32Z", "creator": "jorton@redhat.com", "creation_time": "2011-01-15T10:15:32Z", "is_private": false, "text": "Fixed in r1059351."}]
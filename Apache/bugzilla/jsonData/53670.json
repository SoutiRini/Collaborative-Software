[{"count": 0, "tags": [], "bug_id": 53670, "attachment_id": null, "id": 161146, "time": "2012-08-07T14:03:14Z", "creator": "shtumff@gmail.com", "creation_time": "2012-08-07T14:03:14Z", "is_private": false, "text": "Hello all!\n\nIn documentation I see: \n\nobjectName ?insert? ?arrayName? (-option | option | ...)\n\nProbably should be as this: db insert {array} -table {table}\n\nbut an insert method uses another syntax: db insert {table} {array}\n\nThat introduces confusion."}, {"count": 1, "tags": [], "creator": "mxmanghi@apache.org", "attachment_id": null, "id": 161315, "creation_time": "2012-08-12T23:16:23Z", "time": "2012-08-12T23:16:23Z", "bug_id": 53670, "text": "The documentation is wrong because the 'insert' method has two arguments\n\n method insert {table arrayName} {\n\tupvar 1 $arrayName $arrayName $arrayName array\n\tset req [build_insert_query array [::array names array] $table]\n\n\tset res [exec $req]\n\tif {[$res error]} {\n\t    set errinf [$res errorinfo]\n\t    $res destroy\n\t    return -code error \"Got '$errinf' executing '$req'\"\n\t}\n\t$res destroy\n\treturn 1\n    }\n\nyou're right in that insert should be conforming with other methods of this class which assume the table had be configured beforehand or passed as switch, e.g.\n\n method update {arrayName args} {\n ...\n}\n\nThe docs will be fixed soon", "is_private": false}, {"count": 2, "tags": [], "creator": "mxmanghi@apache.org", "attachment_id": null, "id": 161447, "creation_time": "2012-08-15T21:47:37Z", "time": "2012-08-15T21:47:37Z", "bug_id": 53670, "text": "patch committed in trunk", "is_private": false}, {"count": 3, "tags": [], "bug_id": 53670, "attachment_id": null, "id": 161477, "time": "2012-08-16T22:37:07Z", "creator": "nagarajanchinnasamy@gmail.com", "creation_time": "2012-08-16T22:37:07Z", "is_private": false, "text": "I feel it's the other way. Code should be fixed and the documentation is right. insert is the only odd command out in mandating the table argument. Why should it be that way? Shouldn't we re-open this bug and fix insert method as per the documentation?\n\n(In reply to comment #1)\n> The documentation is wrong because the 'insert' method has two arguments\n> \n>  method insert {table arrayName} {\n> \tupvar 1 $arrayName $arrayName $arrayName array\n> \tset req [build_insert_query array [::array names array] $table]\n> \n> \tset res [exec $req]\n> \tif {[$res error]} {\n> \t    set errinf [$res errorinfo]\n> \t    $res destroy\n> \t    return -code error \"Got '$errinf' executing '$req'\"\n> \t}\n> \t$res destroy\n> \treturn 1\n>     }\n> \n> you're right in that insert should be conforming with other methods of this\n> class which assume the table had be configured beforehand or passed as\n> switch, e.g.\n> \n>  method update {arrayName args} {\n>  ...\n> }\n> \n> The docs will be fixed soon"}, {"count": 4, "tags": [], "bug_id": 53670, "attachment_id": null, "is_private": false, "id": 162048, "time": "2012-09-10T10:34:05Z", "creator": "mxmanghi@apache.org", "creation_time": "2012-09-10T10:34:05Z", "text": " A second argument will probably always exist in this method, though wrong in design. We could assign it a empty string default value and rely on the -table switch in case this argument goes unmodified. Using a second argument for the arrayName should be also reported in the docs even though as deprecated.\n\nI wish to keep this open and target its fix for a release subsequent to 2.1 allowing time for testing"}, {"count": 5, "tags": [], "text": "Though wrong in design insert will stay as is for now. In fact I speculated we could analyze the input arguments and detect whether a -table was passed  instead of a tableName argument or a table had been set already in the class. A much better case would have been if the original designer had choosen to put the data array as first argument, as this is required anyway (otherwise we wouldn't know even what data to insert). Since this is not the case, my plan to redisign the input arguments while preserving backward compatibility is (though probably viable) rather tricky as the whole argument list should be kept variable. This would require a thorough testing phase and the benefits are questionable. I will fix the docs in view of the next imminent release but I will leave this change to a major redesign of DIO.", "is_private": false, "id": 162359, "creator": "mxmanghi@apache.org", "time": "2012-09-23T22:23:50Z", "bug_id": 53670, "creation_time": "2012-09-23T22:23:50Z", "attachment_id": null}]
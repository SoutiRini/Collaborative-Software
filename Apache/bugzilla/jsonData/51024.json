[{"count": 0, "tags": [], "bug_id": 51024, "attachment_id": null, "id": 145565, "time": "2011-04-05T12:06:34Z", "creator": "thomas.themel@mirai-solutions.com", "creation_time": "2011-04-05T12:06:34Z", "is_private": false, "text": "Hi,\n\nThere seems to be a problem with \"empty\" arguments in Excel formulae, at least for VLOOKUP and HLOOKUP. Excel accepts formulae of the form \"=VLOOKUP(B2;B5:C7;2;)\" as equivalent to \"=VLOOKUP(B2;B5:C6;2)\", but POI fails to evaluate this field with  \"Unexpected eval type (org.apache.poi.ss.formula.eval.MissingArgEval)\".\n\nProbably Var3or4ArgFunction and its cousins should check for the last argument to be of type MissingArgEval as well?"}, {"count": 1, "tags": [], "bug_id": 51024, "text": "I've just added a unit test for this, which passes just fine:\n\n       HSSFWorkbook wb = new HSSFWorkbook();\n       HSSFSheet s = wb.createSheet();\n       HSSFRow r1 = s.createRow(0);\n       HSSFRow r2 = s.createRow(1);\n       \n       r1.createCell(0).setCellValue(\"v A1\");\n       r2.createCell(0).setCellValue(\"v A2\");\n       r1.createCell(1).setCellValue(\"v B1\");\n       \n       HSSFCell c = r1.createCell(4);\n       \n       HSSFFormulaEvaluator eval = new HSSFFormulaEvaluator(wb);\n       \n       c.setCellFormula(\"VLOOKUP(\\\"v A1\\\", A1:B2, 1)\");\n       assertEquals(\"v A1\", eval.evaluate(c).getStringValue());\n       \n       c.setCellFormula(\"VLOOKUP(\\\"v A1\\\", A1:B2, 1, 1)\");\n       assertEquals(\"v A1\", eval.evaluate(c).getStringValue());\n       \n       c.setCellFormula(\"VLOOKUP(\\\"v A1\\\", A1:B2, 1, )\");\n       assertEquals(\"v A1\", eval.evaluate(c).getStringValue());\n       \n       \n       c.setCellFormula(\"HLOOKUP(\\\"v A1\\\", A1:B2, 1)\");\n       assertEquals(\"v A1\", eval.evaluate(c).getStringValue());\n       \n       c.setCellFormula(\"HLOOKUP(\\\"v A1\\\", A1:B2, 1, 1)\");\n       assertEquals(\"v A1\", eval.evaluate(c).getStringValue());\n       \n       c.setCellFormula(\"HLOOKUP(\\\"v A1\\\", A1:B2, 1, )\");\n       assertEquals(\"v A1\", eval.evaluate(c).getStringValue());\n\n\nPlease make sure you're using a new enough version of POI", "id": 145649, "time": "2011-04-08T11:25:21Z", "creator": "apache@gagravarr.org", "creation_time": "2011-04-08T11:25:21Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "I am experiencing this bug in poi-3.9\nIt happens to me with an xlsx file, so maybe the test case should consider XSSF workbook.\nThe formula contains VLOOKUP(refereceArg;range;2;) so the parser believes it is a 4 args formula and when calling LookupUtils.resolveRangeLookupArg with a MissingArgEval it throws a runtime exception.\n\nI believe it is enough to add:\n\nif (valEval instanceof MissingArgEval) {\n    return true; /* true is default is last arg is missing */\n}\n\nin LookupUtils.resolveRangeLookupArg to solve this bug, or maybe it breaks something and it should be addressed at parser level or even at Var3or4ArgFunction, making args.length be 3 if last one is an instance of MissingArgEval.\n\nIf needed i can attach an xlsx file and some code to reproduce the bug", "attachment_id": null, "id": 172185, "creator": "g.nespolino@gmail.com", "time": "2014-01-08T15:19:28Z", "bug_id": 51024, "creation_time": "2014-01-08T15:19:28Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 51024, "text": "The existing testcase for this bug is executed against XSSF and HSSF and shows that the original case of this bug is not reproducible, I think it would be best if you verify that this still happens with the latest version 3.12-beta1 and report a new bug with a sample XLSX-file that you use for reproducing together with sample code, preferably as unit test or at least self-suffient piece of code.", "id": 181962, "time": "2015-03-22T19:17:57Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-03-22T19:17:57Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 3730, "attachment_id": null, "text": "here is the test program:\n\n\nimport com.oroinc.text.regex.*;\nimport java.io.*;\n\npublic class bug_report\n{\n    public static void main(String[] args) throws Exception\n    {\n        String regex  = \"\\010[(]GAME +GID:([^;]+); +GDATE:([^;]*); +GSTART:([^;]\n*); +GSITE:([^;]*); +GNEUTRAL:([^;]*); +GSTAT:([^;]*); +GPERIOD:([^;]*);[^\\r\\n]*\n[\\r\\n]+\"\n                       +\"(\"\n                       +\"(\\010[(]TEAM +TNAME:([^;]*);( +[^:]+:[^;]*;){3} \n+THOME: *([Yy][Ee][Ss]); +TSCORE:([^;]*); +TSTAT:([^;]*)[^\\r\\n]*[\\r\\n]+)\"\n                       +\"|\"\n                       +\"(\\010[(]TEAM +TNAME:([^;]*);( +[^:]+:[^;]*;){3} \n+THOME: *([Nn][Oo]); +TSCORE:([^;]*); +TSTAT:([^;]*)[^\\r\\n]*[\\r\\n]+)\"\n                       +\"){2}\";\n\n\n        String input  = \"\b(GAME GID:13805; GDATE:11/01/2000; GSTART:19:30; \nGSITE:Charlotte Coliseum; GNEUTRAL:NO; GSTAT:Final; GPERIOD:4; \\n\"\n                       +\"\b(TEAM TNAME:Hornets; TLOCALE:Charlotte; \nTCONF:Eastern; TDIV:Central; THOME:YES; TSCORE:77; TSTAT:LOST; TID:9;)\\n\"\n                       +\"\b(TEAM TNAME:Wizards; TLOCALE:Washington; \nTCONF:Eastern; TDIV:Atlantic; THOME:NO; TSCORE:95; TSTAT:WON; TID:7;))\\n\";\n\n        String input2 = \"\b(GAME GID:13789; GDATE:10/31/2000; GSTART:19:30; \nGSITE:TD Waterhouse Centre; GNEUTRAL:NO; GSTAT:Final; GPERIOD:4; \\n\"\n                       +\"\b(TEAM TNAME:Magic; TLOCALE:Orlando; TCONF:Eastern; \nTDIV:Atlantic; THOME:YES; TSCORE:97; TSTAT:WON; TID:5;)\\n\"\n                       +\"\b(TEAM TNAME:Wizards; TLOCALE:Washington; \nTCONF:Eastern; TDIV:Atlantic; THOME:NO; TSCORE:86; TSTAT:LOST; TID:7;))\\n\";\n        \t\n\t    Perl5Compiler p5compiler = new Perl5Compiler();\n\t    Perl5Pattern p5pattern = null;\n\t    Perl5Matcher p5matcher = new Perl5Matcher();\n\t    PatternMatcherInput p5input = new PatternMatcherInput(input2);\n\t    \n\t\ttry {\n\t\t\tp5pattern = (Perl5Pattern) p5compiler.compile(regex,\n\t\t\t\t        Perl5Compiler.SINGLELINE_MASK |\n\t\t\t\t        Perl5Compiler.READ_ONLY_MASK  );\n\t\t} catch(MalformedPatternException e) {\n\t\t\tSystem.out.println(\"Error:  Bad Perl5 pattern.\");\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t\t\n\t\tboolean result = p5matcher.matchesPrefix(p5input, p5pattern);\n\t\t\n\t\tif( result )\n\t\t{\n            MatchResult mr = p5matcher.getMatch();\n            int groups     = mr.groups();\n            int start      = -1;\n            int end        = -1;\n            String matchStr = null;\n            for( int x = 0; x < groups; x++ )\n            {\n                start = mr.beginOffset(x);\n                end   = mr.endOffset(x);\n                //matchStr = mr.group(x);\n                \n                //System.out.print\n(\"Pos: \"+x+\"\\tStart: \"+start+\"\\tEnd: \"+end+\"\\tMatch: \"+matchStr);\n                System.out.print(\"Pos: \"+x+\"\\tStart: \"+start+\"\\tEnd: \"+end);\n                \n                if( start > end )\n                    System.out.println( \" -- ERROR\" );\n                else\n                    System.out.println();\n            }\n\t\t}\n\t\telse\n\t\t{\n\t\t    System.out.println(\"No Match\");\n\t\t}\n\t\tSystem.out.println(\"Program terminating\");\n    }\n    \n}    \n\n\nand here is some output:\n\nPos: 0    Start: 0    End: 338\nPos: 1    Start: 11    End: 16\nPos: 2    Start: 24    End: 34\nPos: 3    Start: 43    End: 48\nPos: 4    Start: 56    End: 76\nPos: 5    Start: 87    End: 89\nPos: 6    Start: 97    End: 102\nPos: 7    Start: 112    End: 113\nPos: 8    Start: 224    End: 338\nPos: 9    Start: 224    End: 224\nPos: 10    Start: 237    End: 237\nPos: 11    Start: 280    End: 295\nPos: 12    Start: 302    End: 192 -- ERROR\nPos: 13    Start: 201    End: 203\nPos: 14    Start: 211    End: 214\nPos: 15    Start: 224    End: 338\nPos: 16    Start: 237    End: 244\nPos: 17    Start: 280    End: 295\nPos: 18    Start: 302    End: 304\nPos: 19    Start: 313    End: 315\nPos: 20    Start: 323    End: 327\nProgram terminating\n\n\n\nif you'll notice, Pos 12 and Pos 18 share the same Start value.  In the regex\nthey have the same pattern.  Granted, there are many similar sub patterns as a\nmatter of fact lines 2 and 3 of the pattern are almost exatly the same except \nfor [Yy][Ee][Ss] and [Nn][Oo]...", "id": 5785, "time": "2001-09-19T14:26:27Z", "creator": "jamesv@screamingmedia.com", "creation_time": "2001-09-19T14:26:27Z", "is_private": false}, {"count": 1, "tags": [], "text": "same problem for 2.0.4 version", "is_private": false, "id": 5786, "creator": "jamesv@screamingmedia.com", "time": "2001-09-19T15:07:34Z", "bug_id": 3730, "creation_time": "2001-09-19T15:07:34Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 3730, "text": "This behavior is consistent with Perl 5.003_07 and is not a bug.  The\ncontents of a group is not guaranteed to be the last succesful match\nwhen contained within an alternation. In other words, group 18 is the\nvalid match while group 12 did not match anything on its last attempt.\nIn Perl5MatchResult, groups that failed to match on their last attempt\nas part of the NFA are indicated when  the start offset is greater than\nthe end offset (this may be a documentation bug since it may not appear\nin the javadocs) and when accessed via group(int) they return null.\nSubgroups that weren't reached a final time during the NFA execution\n(perhaps because an earlier subgroup failed) will retain their old values.\n\nLater versions of Perl regularized the behavior of subgroups so that they\nwould always contain the last value matched rather than a potentially\nempty value based on a final failed subgroup match attempt.  Perl5Matcher\nwill implement this behavior as part of the Perl 5.6 compatibility work.", "id": 5787, "time": "2001-09-19T15:36:57Z", "creator": "dfs@apache.org", "creation_time": "2001-09-19T15:36:57Z", "tags": [], "is_private": false}]
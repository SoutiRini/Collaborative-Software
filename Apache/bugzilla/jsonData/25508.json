[{"attachment_id": null, "tags": [], "creator": "colson@prettyhealth.biz", "text": "I labeled this bug as Major because of its fundamental nature and because I \nspent about 3 weaks trying to figure this one out.  I wanted to use JNDI to \naccess a data source and access environmental variables defined in server.xml.  \nI got the exception:\n\njavax.naming.NameNotFoundException: Name comp is not bound in this Context\n\nSee transcripts below from the Tomcat Users Mailing List about the problem and \nerrors in server.xml, but briefly:\n\n1) I used multiple <Service> tags\n2) I tried using JNDI in the 2nd <Service> tag\n3) In the first <Service> tag I used 2 <Context> tags\n4) In the first <Service> tag, the <Host> tag sets autoDeploy.\n\n5a) Multiple <Context> tags in the first <Service> tag causes the exception\n5b) Setting autoDeploy=\"true\" in the above <Host> tag causes the exception.\n\nFix 5a and 5B and JNDI works.\n\nThese symptoms and behaviors are not documented, hence the 3 weeks mentioned \nabove.  Either <Service> tags should not allow multiple <Context> tags (in \nwhich case the failure to notify or burp is a bug) or JNDI should not be \naffected by multiple <Context> tags.  Also, JNDI should not depend on the value \nof autoDeploy.\n\nThanks\n=============  Transcript From Tomcat User Mailing List ===============\n\nI narrowed down the problem a bit more.  I found 2 things which look like they \nmay be bugs.\n\n1)  In the first <Service> tag I had a <Engine> tag and a <Host> tag as seen \nbelow:\n\n  <Service name=\"XXX\">\n\n    <Engine name=\"Standalone\"\n            defaultHost=\"localhost\"\n            debug=\"0\">\n\n      <Host name=\"localhost\" debug=\"0\" appBase=\"webapps\"\n       unpackWARs=\"true\" autoDeploy=\"false\">\n\n        <Context>...</Context>\n\n        <Context>...</Context>\n\nWith <Host autoDeploy=\"true\"> JNDI doesn't work.  When I set autoDeploy \nto \"false\" JNDI works.\n\n2) I had 2 <Context> tags in the above <Service> tag.  When I commented out the \n2nd <Context> tag JNDI worked.\n\n\n \nTony \n\n-----Original Message-----\nFrom: Tony Colson [mailto:colson@prettyhealth.biz] \nSent: Friday, December 12, 2003 10:31 PM\nTo: 'Tomcat Users List'; tony@prettyhealth.biz\nSubject: RE: JNDI comp namespace - Tomcat Developers Please Read\n\nAs per my suspicion, multiple <Service> seemed to cause the problem as I had \nthe JNDI resources defined in the second <Service>.  Removing the first service \ntemporarily seemed to \"fix\" it.\n\nIs this a bug in Tomcat?  Or is there something else I need to specify?\n\nI will do some more testing to see if I can't narrow it down further.\n\n \nTony\n\n-----Original Message-----\nFrom: Tony Colson [mailto:colson@prettyhealth.biz] \nSent: Friday, December 12, 2003 1:23 PM\nTo: 'Tomcat Users List'; tony@prettyhealth.biz\nSubject: RE: JNDI comp namespace\n\nHi,\n\nThanks for the tip.  Actually, this is how my server.xml was set up \noriginally.  I changed the resource name to java:comp/env/jdbc/NNT under the \nnotion that it might create the comp namespace if it saw it in the xml file.\n\nI am beginning to wonder if the problem is related to the fact that I have \ndifferent ports running web apps?\n\nThanks,\n \nTony Colson\n \n-----Original Message-----\nFrom: Altankov Peter [mailto:PAltankov@globul.bg] \n Howdy,Try this setup in your context definition:\n   <Resource name=\"jdbc/NNT\" auth=\"Container\" type=\"javax.sql.DataSource\"/>\n\n   <ResourceParams name=\"jdbc/NNT\"> .........\n\n\nAfter that in the source where u access it go for:\nContext ictx = new InitialContext();\nif (ictx == null) {\n\tthrow new Exception(\"Boom - No Context\");\n}\nDtataSource ds = (DataSource) ictx.lookup(\"java:comp/env/jdbc/NNT\");\n\nI don't have the time to go into JNDI details, but im pretty sure that wold \nwork for you\n\n\n-----Original Message-----\nFrom: Tony Colson [mailto:colson@prettyhealth.biz] \nSent: 12 ???????? 2003 ?. 10:48\nTo: 'Tomcat Users List'\nSubject: RE: JNDI comp namespace\n\n\nAs per a suggestion I am posting my server.xml file.\n\nI have several applications on different ports.  I am trying to use JNDI on the \nNNT application running on port 9000.  Do a search for \"9000\" and you will be \nat the <Service...> tag.  Just scroll down to see the <Context> and <Resource> \ntags to look at my setup.  (Also note that I am trying to use \n<GlobalNamingResources> as seen at the top of the file.)\n\nThanks\nTony\n===================== START SERVER.XML ==========================\n\n<!-- Example Server Configuration File -->\n<!-- Note that component elements are nested corresponding to their\n     parent-child relationships with each other -->\n\n<!-- A \"Server\" is a singleton element that represents the entire JVM,\n     which may contain one or more \"Service\" instances.  The Server\n     listens for a shutdown command on the indicated port.\n\n     Note:  A \"Server\" is not itself a \"Container\", so you may not\n     define subcomponents such as \"Valves\" or \"Loggers\" at this level.\n-->\n\n<Server port=\"8005\" shutdown=\"SHUTDOWN\" debug=\"0\">\n\n\n  <!-- Comment these entries out to disable JMX MBeans support -->\n  <!-- You may also configure custom components (e.g. Valves/Realms) by \n       including your own mbean-descriptor file(s), and setting the \n       \"descriptors\" attribute to point to a ';' seperated list of paths\n       (in the ClassLoader sense) of files to add to the default list.\n       e.g. descriptors=\"/com/myfirm/mypackage/mbean-descriptor.xml\"\n  -->\n  <Listener className=\"org.apache.catalina.mbeans.ServerLifecycleListener\"\n            debug=\"0\"/>\n  <Listener \nclassName=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"\n            debug=\"0\"/>\n\n  <!-- Global JNDI resources -->\n  <GlobalNamingResources>\n\n    <!-- Test entry for demonstration purposes -->\n    <Environment name=\"simpleValue\" type=\"java.lang.Integer\" value=\"30\"/>\n\n    <!-- Editable user database that can also be used by\n         UserDatabaseRealm to authenticate users -->\n    <Resource name        = \"UserDatabase\" \n              auth        = \"Container\"\n              type        = \"org.apache.catalina.UserDatabase\"\n              description = \"User database that can be updated and saved\">\n    </Resource>\n    <ResourceParams name=\"UserDatabase\">\n      <parameter>\n        <name>factory</name>\n \n<value>org.apache.catalina.users.MemoryUserDatabaseFactory</value>\n      </parameter>\n      <parameter>\n        <name>pathname</name>\n        <value>conf/tomcat-users.xml</value>\n      </parameter>\n    </ResourceParams>\n\n    <!-- The PostgreSQL NNT database on horse -->\n\n\n\n  </GlobalNamingResources>\n\n  <!-- A \"Service\" is a collection of one or more \"Connectors\" that share\n       a single \"Container\" (and therefore the web applications visible\n       within that Container).  Normally, that Container is an \"Engine\",\n       but this is not required.\n\n       Note:  A \"Service\" is not itself a \"Container\", so you may not\n       define subcomponents such as \"Valves\" or \"Loggers\" at this level.\n   -->\n\n  <!-- Define the Tomcat Stand-Alone Service -->\n  <Service name=\"Tomcat-Standalone\">\n\n    <!-- A \"Connector\" represents an endpoint by which requests are received\n         and responses are returned.  Each Connector passes requests on to the\n         associated \"Container\" (normally an Engine) for processing.\n\n         By default, a non-SSL HTTP/1.1 Connector is established on port 8080.\n         You can also enable an SSL HTTP/1.1 Connector on port 8443 by\n         following the instructions below and uncommenting the second Connector\n         entry.  SSL support requires the following steps (see the SSL Config\n         HOWTO in the Tomcat 4.0 documentation bundle for more detailed\n         instructions):\n         * Download and install JSSE 1.0.2 or later, and put the JAR files\n           into \"$JAVA_HOME/jre/lib/ext\".\n         * Execute:\n             %JAVA_HOME%\\bin\\keytool -genkey -alias tomcat -keyalg RSA\n(Windows)\n             $JAVA_HOME/bin/keytool -genkey -alias tomcat -keyalg RSA\n(Unix)\n           with a password value of \"changeit\" for both the certificate and\n           the keystore itself.\n\n         By default, DNS lookups are enabled when a web application calls\n         request.getRemoteHost().  This can have an adverse impact on\n         performance, so you can disable it by setting the\n         \"enableLookups\" attribute to \"false\".  When DNS lookups are disabled,\n         request.getRemoteHost() will return the String version of the\n         IP address of the remote client.\n    -->\n\n    <!-- Define a non-SSL Coyote HTTP/1.1 Connector on port 8080 -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"8080\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"8443\"\n               acceptCount=\"100\" debug=\"0\" connectionTimeout=\"20000\"\n               useURIValidationHack=\"false\" disableUploadTimeout=\"true\" />\n    <!-- Note : To disable connection timeouts, set connectionTimeout value \n     to -1 -->\n\n    <!-- Define a SSL Coyote HTTP/1.1 Connector on port 8443 -->\n    <!--\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"8443\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\"\n\t       acceptCount=\"100\" debug=\"0\" scheme=\"https\" secure=\"true\"\n               useURIValidationHack=\"false\" disableUploadTimeout=\"true\">\n      <Factory className=\"org.apache.coyote.tomcat4.CoyoteServerSocketFactory\"\n               clientAuth=\"false\" protocol=\"TLS\" />\n    </Connector>\n    -->\n\n    <!-- Define a Coyote/JK2 AJP 1.3 Connector on port 8009 -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"8009\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"8443\"\n               acceptCount=\"10\" debug=\"0\" connectionTimeout=\"0\"\n               useURIValidationHack=\"false\"\n \nprotocolHandlerClassName=\"org.apache.jk.server.JkCoyoteHandler\"/>\n\n    <!-- Define an AJP 1.3 Connector on port 8009 -->\n    <!--\n    <Connector className=\"org.apache.ajp.tomcat4.Ajp13Connector\"\n               port=\"8009\" minProcessors=\"5\" maxProcessors=\"75\"\n               acceptCount=\"10\" debug=\"0\"/>\n    -->\n\n    <!-- Define a Proxied HTTP/1.1 Connector on port 8082 -->\n    <!-- See proxy documentation for more information about using this.\n-->\n    <!--\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"8082\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\"\n               acceptCount=\"100\" debug=\"0\" connectionTimeout=\"20000\"\n               proxyPort=\"80\" useURIValidationHack=\"false\"\n               disableUploadTimeout=\"true\" />\n    -->\n\n    <!-- Define a non-SSL legacy HTTP/1.1 Test Connector on port 8083\n-->\n    <!--\n    <Connector className=\"org.apache.catalina.connector.http.HttpConnector\"\n               port=\"8083\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"8443\"\n               acceptCount=\"10\" debug=\"0\" />\n    -->\n\n    <!-- Define a non-SSL HTTP/1.0 Test Connector on port 8084 -->\n    <!--\n    <Connector className=\"org.apache.catalina.connector.http10.HttpConnector\"\n               port=\"8084\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"8443\"\n               acceptCount=\"10\" debug=\"0\" />\n    -->\n\n    <!-- An Engine represents the entry point (within Catalina) that processes\n         every request.  The Engine implementation for Tomcat stand alone\n         analyzes the HTTP headers included with the request, and passes them\n         on to the appropriate Host (virtual host). -->\n\n    <!-- You should set jvmRoute to support load-balancing via JK/JK2 ie\n:\n    <Engine name=\"Standalone\" defaultHost=\"localhost\" debug=\"0\"\njmvRoute=\"jvm1\">         \n    --> \n         \n    <!-- Define the top level container in our container hierarchy -->\n    <Engine name=\"Standalone\" defaultHost=\"localhost\" debug=\"0\">\n\n      <!-- The request dumper valve dumps useful debugging information about\n           the request headers and cookies that were received, and the response\n           headers and cookies that were sent, for all requests received by\n           this instance of Tomcat.  If you care only about requests to a\n           particular virtual host, or a particular application, nest this\n           element inside the corresponding <Host> or <Context> entry instead.\n\n           For a similar mechanism that is portable to all Servlet 2.3\n           containers, check out the \"RequestDumperFilter\" Filter in the\n           example application (the source for this filter may be found in\n           \"$CATALINA_HOME/webapps/examples/WEB-INF/classes/filters\").\n\n           Request dumping is disabled by default.  Uncomment the following\n           element to enable it. -->\n      <!--\n      <Valve className=\"org.apache.catalina.valves.RequestDumperValve\"/>\n      -->\n\n      <!-- Global logger unless overridden at lower levels -->\n      <Logger className=\"org.apache.catalina.logger.FileLogger\"\n              prefix=\"catalina_log.\" suffix=\".txt\"\n              timestamp=\"true\"/>\n\n      <!-- Because this Realm is here, an instance will be shared globally -->\n\n      <!-- This Realm uses the UserDatabase configured in the global JNDI\n           resources under the key \"UserDatabase\".  Any edits\n           that are performed against this UserDatabase are immediately\n           available for use by the Realm.  -->\n      <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                 debug=\"0\" resourceName=\"UserDatabase\"/>\n\n      <!-- Comment out the old realm but leave here for now in case we\n           need to go back quickly -->\n      <!--\n      <Realm className=\"org.apache.catalina.realm.MemoryRealm\" />\n      -->\n\n      <!-- Replace the above Realm with one of the following to get a Realm\n           stored in a database and accessed via JDBC -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"org.gjt.mm.mysql.Driver\"\n          connectionURL=\"jdbc:mysql://localhost/authority\"\n         connectionName=\"test\" connectionPassword=\"test\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"oracle.jdbc.driver.OracleDriver\"\n          connectionURL=\"jdbc:oracle:thin:@ntserver:1521:ORCL\"\n         connectionName=\"scott\" connectionPassword=\"tiger\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"sun.jdbc.odbc.JdbcOdbcDriver\"\n          connectionURL=\"jdbc:odbc:CATALINA\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!-- Define the default virtual host -->\n      <Host name=\"localhost\" debug=\"0\" appBase=\"webapps\" \n       unpackWARs=\"true\" autoDeploy=\"true\">\n\n        <!-- Normally, users must authenticate themselves to each web app\n             individually.  Uncomment the following entry if you would like\n             a user to be authenticated the first time they encounter a\n             resource protected by a security constraint, and then have that\n             user identity maintained across *all* web applications contained\n             in this virtual host. -->\n        <!--\n        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\"\n                   debug=\"0\"/>\n        -->\n\n        <!-- Access log processes all requests for this virtual host. By\n             default, log files are created in the \"logs\" directory relative to\n             $CATALINA_HOME.  If you wish, you can specify a different\n             directory with the \"directory\" attribute.  Specify either a \nrelative\n             (to $CATALINA_HOME) or absolute path to the desired directory.\n        -->\n        <!--\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\"\n                 directory=\"logs\"  prefix=\"localhost_access_log.\" suffix=\".txt\"\n                 pattern=\"common\" resolveHosts=\"false\"/>\n        -->\n\n        <!-- Logger shared by all Contexts related to this virtual host. By\n             default (when using FileLogger), log files are created in \nthe \"logs\"\n             directory relative to $CATALINA_HOME.  If you wish, you can specify\n             a different directory with the \"directory\" attribute. Specify \neither a\n             relative (to $CATALINA_HOME) or absolute path to the desired\n             directory.-->\n        <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                 directory=\"logs\"  prefix=\"localhost_log.\" suffix=\".txt\"\n\t        timestamp=\"true\"/>\n\n        <!-- Define properties for each web application.  This is only needed\n             if you want to set non-default properties, or have web application\n             document roots in places other than the virtual host's appBase\n             directory.  -->\n\n        <!-- Tomcat Root Context -->\n        <!--\n          <Context path=\"\" docBase=\"ROOT\" debug=\"0\"/>\n        -->\n\n        <!-- Tomcat Examples Context -->\n        <Context path=\"/examples\" docBase=\"examples\" debug=\"0\"\n                 reloadable=\"true\" crossContext=\"true\">\n          <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                     prefix=\"localhost_examples_log.\" suffix=\".txt\"\n        \t  timestamp=\"true\"/>\n          <Ejb   name=\"ejb/EmplRecord\" type=\"Entity\"\n                 home=\"com.wombat.empl.EmployeeRecordHome\"\n               remote=\"com.wombat.empl.EmployeeRecord\"/>\n\n          <!-- If you wanted the examples app to be able to edit the\n               user database, you would uncomment the following entry.\n               Of course, you would want to enable security on the\n               application as well, so this is not done by default!\n               The database object could be accessed like this:\n\n               Context initCtx = new InitialContext();\n               Context envCtx = (Context) initCtx.lookup(\"java:comp/env\");\n               UserDatabase database =\n                    (UserDatabase) envCtx.lookup(\"userDatabase\");\n          -->\n<!--\n          <ResourceLink name=\"userDatabase\" global=\"UserDatabase\"\n                        type=\"org.apache.catalina.UserDatabase\"/>\n-->\n\n\n          <!-- PersistentManager: Uncomment the section below to test \nPersistent \n\t\t       Sessions.\n                         \n               saveOnRestart: If true, all active sessions will be saved\n                 to the Store when Catalina is shutdown, regardless of\n                 other settings. All Sessions found in the Store will be\n\n                 loaded on startup. Sessions past their expiration are\n                 ignored in both cases.\n               maxActiveSessions: If 0 or greater, having too many active \n                 sessions will result in some being swapped out. minIdleSwap\n                 limits this. -1 or 0 means unlimited sessions are allowed.\n                 If it is not possible to swap sessions new sessions will\n                 be rejected.\n                 This avoids thrashing when the site is highly active.\n               minIdleSwap: Sessions must be idle for at least this long\n                 (in seconds) before they will be swapped out due to \n                 activity.\n                 0 means sessions will almost always be swapped out after\n                 use - this will be noticeably slow for your users.\n               maxIdleSwap: Sessions will be swapped out if idle for this\n                 long (in seconds). If minIdleSwap is higher, then it will\n                 override this. This isn't exact: it is checked periodically.\n                 -1 means sessions won't be swapped out for this reason,\n                 although they may be swapped out for maxActiveSessions.\n                 If set to >= 0, guarantees that all sessions found in the\n                 Store will be loaded on startup.\n               maxIdleBackup: Sessions will be backed up (saved to the Store,\n                 but left in active memory) if idle for this long (in seconds), \n                 and all sessions found in the Store will be loaded on startup.\n                 If set to -1 sessions will not be backed up, 0 means they\n                 should be backed up shortly after being used.\n\n               To clear sessions from the Store, set maxActiveSessions, \nmaxIdleSwap,\n               and minIdleBackup all to -1, saveOnRestart to false, then \nrestart \n               Catalina.\n          -->\n\t\t  <!--\n          <Manager className=\"org.apache.catalina.session.PersistentManager\"\n              debug=\"0\"\n              saveOnRestart=\"true\"\n              maxActiveSessions=\"-1\"\n              minIdleSwap=\"-1\"\n              maxIdleSwap=\"-1\"\n              maxIdleBackup=\"-1\">\n                <Store className=\"org.apache.catalina.session.FileStore\"/>\n          </Manager>\n\t\t  -->\n          <Environment name=\"maxExemptions\" type=\"java.lang.Integer\"\n                      value=\"15\"/>\n          <Parameter name=\"context.param.name\" value=\"context.param.value\"\n                     override=\"false\"/>\n          <Resource name=\"jdbc/EmployeeAppDb\" auth=\"SERVLET\"\n                    type=\"javax.sql.DataSource\"/>\n          <ResourceParams name=\"jdbc/EmployeeAppDb\">\n \n<parameter><name>username</name><value>sa</value></parameter>\n            <parameter><name>password</name><value></value></parameter>\n            <parameter><name>driverClassName</name>\n              <value>org.hsql.jdbcDriver</value></parameter>\n            <parameter><name>url</name>\n              <value>jdbc:HypersonicSQL:database</value></parameter>\n          </ResourceParams>\n          <Resource name=\"mail/Session\" auth=\"Container\"\n                    type=\"javax.mail.Session\"/>\n          <ResourceParams name=\"mail/Session\">\n            <parameter>\n              <name>mail.smtp.host</name>\n              <value>localhost</value>\n            </parameter>\n          </ResourceParams>\n          <ResourceLink name=\"linkToGlobalResource\" \n                    global=\"simpleValue\"\n                    type=\"java.lang.Integer\"/>\n        </Context>\n\n\n        <Context path=\"\" docBase=\"/var/NNT-Official\" debug=\"0\"\n                 reloadable=\"false\" crossContext=\"true\">\n          <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                     prefix=\"NNT_context-log.\" suffix=\".txt\"\n        \t  timestamp=\"true\"/>\n        </Context>\n<!--\n        <Context path=\"/tony\"\n                 docBase=\"/home/colson/develop/source/NNT\"\n                 debug=\"9\"\n                 reloadable=\"true\"\n                 crossContext=\"true\">\n          <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                     prefix=\"tony_test.\" suffix=\".txt\"\n                  timestamp=\"true\"/>\n        </Context>\n-->\n      </Host>\n\n    </Engine>\n\n  </Service>\n\n  <!-- The MOD_WEBAPP connector is used to connect Apache 1.3 with Tomcat 4.0\n       as its servlet container. Please read the README.txt file coming with\n       the WebApp Module distribution on how to build it.\n       (Or check out the \"jakarta-tomcat-connectors/webapp\" CVS\nrepository)\n\n       To configure the Apache side, you must ensure that you have the\n       \"ServerName\" and \"Port\" directives defined in \"httpd.conf\". Then,\n       lines like these to the bottom of your \"httpd.conf\" file:\n\n         LoadModule webapp_module libexec/mod_webapp.so\n         WebAppConnection warpConnection warp localhost:8008\n         WebAppDeploy examples warpConnection /examples/\n\n       The next time you restart Apache (after restarting Tomcat, if\nneeded)\n       the connection will be established, and all applications you make\n       visible via \"WebAppDeploy\" directives can be accessed through Apache.\n  -->\n\n  <!-- Define an Apache-Connector Service -->\n<!--\n  <Service name=\"Tomcat-Apache\">\n\n    <Connector className=\"org.apache.catalina.connector.warp.WarpConnector\"\n     port=\"8008\" minProcessors=\"5\" maxProcessors=\"75\"\n     enableLookups=\"true\" appBase=\"webapps\"\n     acceptCount=\"10\" debug=\"0\"/>\n\n    <Engine className=\"org.apache.catalina.connector.warp.WarpEngine\"\n     name=\"Apache\" debug=\"0\">\n\n      <Logger className=\"org.apache.catalina.logger.FileLogger\"\n              prefix=\"apache_log.\" suffix=\".txt\"\n              timestamp=\"true\"/>\n\n      <Realm className=\"org.apache.catalina.realm.MemoryRealm\" />\n\n    </Engine>\n\n  </Service>\n-->\n\n  <Service name=\"NNT - Tony's NNT Testing Service\">\n\n    <!-- Define a non-SSL Coyote HTTP/1.1 Connector on port 8080 -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n                                port=\"9000\" \n                       minProcessors=\"5\" \n                       maxProcessors=\"75\"\n                       enableLookups=\"true\" \n                        redirectPort=\"8443\"\n                         acceptCount=\"100\" \n                               debug=\"0\" \n                   connectionTimeout=\"20000\"\n                useURIValidationHack=\"false\" \n                disableUploadTimeout=\"true\" />\n\n    <!-- Note : To disable connection timeouts, set connectionTimeout value \n     to -1 -->\n\n\n    <!-- Define the top level container in our container hierarchy -->\n    <Engine        name=\"Standalone\" \n            defaultHost=\"localhost\" \n                  debug=\"0\">\n\n      <!-- Because this Realm is here, an instance will be shared globally -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"oracle.jdbc.driver.OracleDriver\"\n          connectionURL=\"jdbc:oracle:thin:@ntserver:1521:ORCL\"\n         connectionName=\"scott\" connectionPassword=\"tiger\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!-- Define the default virtual host -->\n      <Host       name=\"localhost\" \n                 debug=\"0\"\n               appBase=\"/home/colson/NNT\" \n            unpackWARs=\"true\" \n            autoDeploy=\"true\">\n\n        <Valve className=\"org.apache.catalina.valves.RequestDumperValve\"/>\n\n        <!-- Access log processes all requests for this virtual host. By\n             default, log files are created in the \"logs\" directory relative to\n             $CATALINA_HOME.  If you wish, you can specify a different\n             directory with the \"directory\" attribute.  Specify either a \nrelative\n             (to $CATALINA_HOME) or absolute path to the desired directory.\n        -->\n        \n        <Valve   className=\"org.apache.catalina.valves.AccessLogValve\"\n                 directory=\"/home/colson/NNT/logs\"  \n                    prefix=\"buggy_access_log.\" \n                    suffix=\".txt\"\n                   pattern=\"common\" \n              resolveHosts=\"false\"/>\n        \n\n        <!-- Logger shared by all Contexts related to this virtual host. By\n             default (when using FileLogger), log files are created in \nthe \"logs\"\n             directory relative to $CATALINA_HOME.  If you wish, you can specify\n             a different directory with the \"directory\" attribute. Specify \neither a\n             relative (to $CATALINA_HOME) or absolute path to the desired\n             directory.-->\n\n        <Logger  className=\"org.apache.catalina.logger.FileLogger\"\n                 directory=\"/home/colson/NNT/logs\"\n                    prefix=\"buggy_log.\" \n                    suffix=\".txt\"\n\t         timestamp=\"true\"/>\n\n        <!-- Define properties for each web application.  This is only needed\n             if you want to set non-default properties, or have web application\n             document roots in places other than the virtual host's appBase\n             directory.  -->\n\n\n        <Context       path=\"\" \n                    docBase=\"/home/colson/NNT\" \n                      debug=\"0\"\n                 reloadable=\"true\"\n                 useNaming=\"true\" \n               crossContext=\"true\">\n\n          <Logger    className=\"org.apache.catalina.logger.FileLogger\"\n                     directory=\"/home/colson/NNT/logs\"\n                        prefix=\"buggy_context-log.\"\n                        suffix=\".txt\"\n        \t     timestamp=\"true\"/>\n\n    <Environment name=\"Christmas\"  value=\"Tree\"  type=\"java.lang.String\" />\n\n\n    <Resource name        = \"java:comp/env/jdbc/NNT\" \n              auth        = \"Servlet\"\n              type        = \"javax.sql.DataSource\"\n              description = \"Main database for NNT applications.\"/>\n\n\n    <ResourceParams name=\"java:comp/env/jdbc/NNT\">\n\n\n      <parameter>\n        <name>factory</name>\n        <value>org.apache.commons.dbcp.BasicDataSourceFactory</value>\n      </parameter>\n      <parameter>\n        <name>driverClassName</name>\n        <value>org.postgresql.Driver</value>\n      </parameter>\n      <parameter>\n        <name>url</name>\n        <!--\n           <value>jdbc:postgresql://127.0.0.1:5432/mydb</value>\n         -->\n        <value>jdbc:postgresql://horse:5432/NNT</value>\n      </parameter>\n      <parameter>\n        <name>username</name>\n        <value>user</value>\n      </parameter>\n      <parameter>\n        <name>password</name>\n        <value>passwd</value>\n      </parameter>\n      <parameter>\n        <name>maxActive</name>\n        <value>20</value>\n      </parameter>\n      <parameter>\n        <name>maxIdle</name>\n        <value>10</value>\n      </parameter>\n      <parameter>\n        <name>maxWait</name>\n        <value>-1</value>\n      </parameter>\n\n    <!-- Garbage collection for abandoned database connections -->\n\n      <parameter>\n         <name>removeAbandoned</name>\n         <value>true</value>\n      </parameter>\n\n    <!-- Default is 300\n      <parameter>\n         <name>removeAbandonedTimeout</name>\n         <value>60</value>\n      </parameter>\n    -->\n\n      <parameter>\n         <name>logAbandoned</name>\n         <value>true</value>\n      </parameter>\n\n\n    </ResourceParams>\n\n\n        </Context>\n      </Host>\n\n    </Engine>\n\n  </Service>\n\n  <Service name=\"NNT - Tony's Investing Testing Service\">\n\n    <!-- Define a non-SSL Coyote HTTP/1.1 Connector on port 8080 -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n                                port=\"9001\" \n                       minProcessors=\"5\" \n                       maxProcessors=\"75\"\n                       enableLookups=\"true\" \n                        redirectPort=\"8443\"\n                         acceptCount=\"100\" \n                               debug=\"0\" \n                   connectionTimeout=\"20000\"\n                useURIValidationHack=\"false\" \n                disableUploadTimeout=\"true\" />\n\n    <!-- Note : To disable connection timeouts, set connectionTimeout value \n     to -1 -->\n\n\n    <!-- Define the top level container in our container hierarchy -->\n    <Engine        name=\"Standalone\" \n            defaultHost=\"localhost\" \n                  debug=\"0\">\n\n      <!-- Because this Realm is here, an instance will be shared globally -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"oracle.jdbc.driver.OracleDriver\"\n          connectionURL=\"jdbc:oracle:thin:@ntserver:1521:ORCL\"\n         connectionName=\"scott\" connectionPassword=\"tiger\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!-- Define the default virtual host -->\n      <Host       name=\"localhost\" \n                 debug=\"0\"\n               appBase=\"/home/colson/WebInvest\" \n            unpackWARs=\"true\" \n            autoDeploy=\"true\">\n\n        <Valve className=\"org.apache.catalina.valves.RequestDumperValve\"/>\n\n        <!-- Access log processes all requests for this virtual host. By\n             default, log files are created in the \"logs\" directory relative to\n             $CATALINA_HOME.  If you wish, you can specify a different\n             directory with the \"directory\" attribute.  Specify either a \nrelative\n             (to $CATALINA_HOME) or absolute path to the desired directory.\n        -->\n        \n        <Valve   className=\"org.apache.catalina.valves.AccessLogValve\"\n                 directory=\"/home/colson/WebInvest/logs\"  \n                    prefix=\"buggy_access_log.\" \n                    suffix=\".txt\"\n                   pattern=\"common\" \n              resolveHosts=\"false\"/>\n        \n\n        <!-- Logger shared by all Contexts related to this virtual host. By\n             default (when using FileLogger), log files are created in \nthe \"logs\"\n             directory relative to $CATALINA_HOME.  If you wish, you can specify\n             a different directory with the \"directory\" attribute. Specify \neither a\n             relative (to $CATALINA_HOME) or absolute path to the desired\n             directory.-->\n\n        <Logger  className=\"org.apache.catalina.logger.FileLogger\"\n                 directory=\"/home/colson/WebInvest/logs\"\n                    prefix=\"buggy_log.\" \n                    suffix=\".txt\"\n\t         timestamp=\"true\"/>\n\n        <!-- Define properties for each web application.  This is only needed\n             if you want to set non-default properties, or have web application\n             document roots in places other than the virtual host's appBase\n             directory.  -->\n\n\n        <Context       path=\"\" \n                    docBase=\"/home/colson/WebInvest\" \n                      debug=\"0\"\n                 reloadable=\"true\" \n               crossContext=\"true\">\n\n          <Logger    className=\"org.apache.catalina.logger.FileLogger\"\n                     directory=\"/home/colson/WebInvest/logs\"\n                        prefix=\"buggy_context-log.\"\n                        suffix=\".txt\"\n        \t     timestamp=\"true\"/>\n        </Context>\n      </Host>\n\n    </Engine>\n\n  </Service>\n</Server>\n\n====================== END SERVER.XML ===========================\n\n\n\n\n-----Original Message-----\nHi Tony,\n\nI have - and it allways proved to be my fault in the end ;) I would suggest \nthat you post your server xml to have someone look it over. Don't forget to \nchange your connect data and password before though! Is the resource bound in \nthe appropriate context or globally?\n\nCheers, Jan\n\n> -----Ursprungliche Nachricht-----\n> Dear Tomcat Users,\n> \n> I am using Tomcat 4 and trying to use JNDI to connect to a data source \n> and environment variables.  I get the following when trying to access \n> the InitialContext via\n> \n> DataSource ds = (DataSource)initialContext.lookup(\n> \"java:comp/env/jdbc/mydb\" );\n> \n> javax.naming.NameNotFoundException: Name comp is not bound in this \n> Context\n> \n> I have read all the documentation many times and cannot see what I am \n> doing wrong.  The server.xml seems to be fine; I can see the \n> appropriate context entries in the tomcat manager application.  But \n> for some reason the comp namespace does not seem to get set up; \n> basically Tomcat doesn't do what the documentation says it should.\n> \n> Has anybody encountered this type of situation before and found a \n> solution? Thanks\n> \n> Tony", "count": 0, "id": 49089, "time": "2003-12-14T07:09:35Z", "bug_id": 25508, "creation_time": "2003-12-14T07:09:35Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 25508, "is_private": false, "text": "Bumped severity down to minor as this is a rarely used configuration (more than \none Service) in a no-longer-developed branch (4.1).", "id": 49431, "time": "2003-12-19T14:11:10Z", "creator": "yoavs@computer.org", "creation_time": "2003-12-19T14:11:10Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "b.armintor@its.utexas.edu", "text": "There is a work around for this: the problem goes away (at least it does for me\nin 4.1.29) if you ensure that the names of the chain of containers leading to\nyour Context are unique.  For example, make sure that multiple Engines and/or\nHosts have different names.  I think this bug results from the way that\nNamingContexts are registered, which is static, but by a name derived from\nvalues with no reference to the actual instance.  The name derivation happens in\norg.apache.catalina.core.StandardContext.getNamingContextName(), which builds a\nname by concatenating the names in the container chain together separated by\nslashes.  When a listener for a context is created with a duplicate name, it is\ngoing to go unregistered when it subsequently fails the ContextAccessController\nsecurity checks based on its name (which is already registered) and its\ncontainer, which is the wrong token for the registered Context.", "id": 53162, "time": "2004-02-27T23:35:40Z", "bug_id": 25508, "creation_time": "2004-02-27T23:35:40Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 69745, "time": "2005-01-16T19:07:08Z", "bug_id": 25508, "creation_time": "2005-01-16T19:07:08Z", "is_private": false, "text": "Fixed in TC4.1.x"}]
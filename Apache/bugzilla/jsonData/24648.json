[{"count": 0, "tags": [], "bug_id": 24648, "attachment_id": null, "id": 47251, "time": "2003-11-12T15:06:09Z", "creator": "achepati67@yahoo.es", "creation_time": "2003-11-12T15:06:09Z", "is_private": false, "text": "Dear Sr,\n \nOverview:\nI have detected that the junit task doesn't take into account a change on the \nvariable user.language, for example on the invokation: ant -Duser.language=en \n(my deafult language is spanish). The user.language takes effect, but the junit \ntest class read wrong the properties file (for the default language instead of \nthe user.language value). This situation ONLY occurs when I test the class \nusing the junit task under Ant, if run java for my testing class for english \nand spanish language it works!!!\n \nI am sending to you my testing example in order to be reproduced the problem by \nyou:\nPurpose of the Test: The class AntAndProperties, load a properties file, when \nit is defined the key hello. The method, printHello(), just returns and print \nthe value of the returned key hello. I want to test that when I change the \nuser.language value, the value associated with the key hello changes and the \nvalue of the key is the expected.\n \nExpected Result: The expected result is to the appropiate key value on each \ncase for the given user.language value. The expected result holds when I run \nthe testing class directly from java, but it get the wrong result when a test \nthe class using the junit task.\n \nDescription of the files:\n \nAntAndProperties: This class simply loads the Properties Resources, for a given \ndefault language (that is the value of user.language).\n \nResources.properties Properties file for the default language: let say english. \nDefines the key hello.\n \nResources_es.properties The corresponding Properties file for the spanish  \nlocale.\n \nAntAndPropertiesTest: Testing class for checking under testing process that the \nkey hello has the expected value for a given value of the property \nuser.language.\n \nbuild.xml: Buld files, that simply invokes the junit task.\n \nIf you run the class AntAndPropertiesTest \njava -Duser.language=es AntAndPropertiesTest\njava -Duser.language=en AntAndPropertiesTest\n \nfor both configurations it works!!!\n \nNevertheless, the simple build file, for testing the class using the junit task:\n \nP:\\bugs>ant -Duser.language=es\nBuildfile: build.xml\ninvoke-junit:\n     [echo]\n     [echo]          user language: es\n     [echo]\n    [junit] Running AntAndPropertiesTest\n    [junit] testPrintHello\n    [junit] user.language=es\n    [junit] Hola Mundo!!!\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0,016 sec\nBUILD SUCCESSFUL\nTotal time: 1 second\nP:\\bugs>ant -Duser.language=en\nBuildfile: build.xml\ninvoke-junit:\n     [echo]\n     [echo]          user language: en\n     [echo]\n    [junit] Running AntAndPropertiesTest\n    [junit] testPrintHello\n    [junit] user.language=en\n    [junit] Hola Mundo!!!\n    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0,047 sec\n    [junit] TEST AntAndPropertiesTest FAILED\n\nso, the test failed for the english configuration, so the test is running with \nthe user.language with value: \"en\", but the value of the key hello is in \nspanish!!!!!, you can see: Hola Mundo, instead of Hello World and testing class \ndetect this contradiction.\n  \nI am copying the files used for the test:\n1. AntAndProperties.java:\npublic class AntAndProperties {\n    public String printHello() {\n        java.util.ResourceBundle bundle \n                = java.util.ResourceBundle.getBundle(\"Resources\");\n        final String HELLO = bundle.getString(\"hello\");\n        System.out.println(HELLO);\n        return HELLO;\n    }\n}\n \n2. AntAndPropertiesTest.java:\nimport junit.framework.*;\npublic class AntAndPropertiesTest extends TestCase {    \n    public AntAndPropertiesTest(java.lang.String testName) {\n        super(testName);\n    }    \n    public static Test suite() {\n        TestSuite suite = new TestSuite(AntAndPropertiesTest.class);\n        return suite;\n    }\n    public void testPrintHello() {\n        System.out.println(\"testPrintHello\");\n        final String USER_LANGUAGE = System.getProperty(\"user.language\");\n        System.out.println(\"user.language=\" + USER_LANGUAGE);        \n        AntAndProperties bug = new AntAndProperties();\n        final String RESULT = bug.printHello();\n        if (\"es\".equals(USER_LANGUAGE)) {\n            assertTrue(\"Hola Mundo!!!\".equals(RESULT));\n        } else if (\"en\".equals(USER_LANGUAGE)) {\n            assertTrue(\"Hello World!!!\".equals(RESULT));\n        }\n    }    \n    public static void main (String[] args){\n        junit.textui.TestRunner.run (AntAndPropertiesTest.class);\n    }        \n}\n \n3. Resources.properties:\nhello Hello World!!!\n \n4. Resources_es.properties:\nhello Hola Mundo!!!\n \n5. build.xml: Stefan Bodewin suggested me to use the <sysproperty> nested node \nin order to change the user.language value on the junit invokation.\n \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project basedir=\".\" default=\"invoke-junit\" name=\"bug\">\n    <property name = \"lib\" location = \"S:\\lib\"/>\n    <path id = \"classpath\">\n        <pathelement location = \"${basedir}\"/>\n        <pathelement location = \"${lib}/junit.jar\"/>\n    </path>\n    <target name = \"invoke-junit\">\n        <echo>\n         user language: ${user.language}\n        </echo>\n        <junit\n            printsummary        = \"true\"\n            includeantruntime   = \"false\"\n            showoutput          = \"true\">\n            <sysproperty key = \"user.language\" value = \"${user.language}\"/>\n            <classpath refid = \"classpath\"/>\n            <test name = \"AntAndPropertiesTest\"/>\n            <formatter type = \"plain\" usefile = \"true\"/>            \n        </junit>\n    </target>\n</project>\n \nThanks in advance,\n\nIf you want I can sent to you a zip file with all this information.\n\n\nDavid Leal"}, {"count": 1, "tags": [], "bug_id": 24648, "attachment_id": null, "id": 47255, "time": "2003-11-12T16:00:07Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-11-12T16:00:07Z", "is_private": false, "text": "You need to set the locale and not just\nthe \"user.language\" system property.\nIf the locale is not specified, the default locale is used. BUT\nthis is only set once: in java.util.Locale#getDefault()\nwhich uses the \"user.language\" property to find the\ndefault locale if the default is null.\nBy the time you call junit, the default locale would have\nbeen retrieved many times.\n\nYou can do one of two things:\n1) set default locale by hand in the test:\n   Locale.setDefault(new Locale(System.getProperty(\"user.language\")))\n2) call \"junit\" with the attribute \"fork\" = yes\n"}]
[{"count": 0, "tags": [], "creator": "ilya.kasnacheev@gmail.com", "is_private": false, "text": "Default ContentType (Layout.getContentType() method) is \"text/plain\", inherited by SimpleLayout.\nDefault ContentType for HTMLLayout is \"text/html\".\n\nThis is FALSE, because it is not. These layouts' messages are backed by java strings, and java strings are mandatorily unicode. Thus, the correct ContentType for layouts is `text/plain; charset=\"UTF-8\"' and `text/html; charset=\"UTF-8\"' respectively.\n\nThis becomes more and more important as various java libs internationalize their error messages. XALAN xslt processor does that, and Postgres database does that also. Trying to log these errors via SMTPAppender yields a crop of question-marks, which is not really useful since you probably wanted these to bring answers rather than questions.\n\nIf this can cause errors due to applications expecting no charset= field there, you can fix just SMTPAppender which really trashes its mails.\nFor now, I've just did\nnew SimpleLayout() {\n @Override\n public String getContentType()\n {\n  return \"text/plain; charset=\\\"UTF-8\\\"\";\n }\n}\nBut I think this bug should be addressed at your level.", "id": 114805, "time": "2008-03-20T02:57:54Z", "bug_id": 44644, "creation_time": "2008-03-20T02:57:54Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "thorbjoern@gmail.com", "is_private": false, "text": "If I understand you correctly the problem is that the HTMLLayout class does not have a character set part in its content type?\n\nOne thing is that characters are unicode internally, but the encoding might very well be single bytes (like ISO-Latin-1) so it is not necessarily so that it is UTF-8.\n\nCan you provide a simple test case showing an incorrectly encoded message?", "id": 119287, "time": "2008-08-02T14:41:15Z", "bug_id": 44644, "creation_time": "2008-08-02T14:41:15Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 44644, "text": "Surely I do!\n\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport org.apache.log4j.net.SMTPAppender;\n\npublic class testlog {\n\n        private static Logger logger =\n        Logger.getLogger(\"testlog\");\n\n        public static void main(String[] args)\n        {\n                        SMTPAppender appender = new SMTPAppender();\n                        appender.setSMTPHost(\"alt1.gmail-smtp-in.l.google.com\");\n                        appender.setFrom(args[0]);\n                        appender.setName(\"CHARSETMAIL\");\n                        appender.setSubject(\"Encoding FAIL\");\n                        appender.setTo(args[0]);\n                        appender.setLayout(new SimpleLayout() {\n                                @Override\n                                public String getContentType()\n                                {\n                                        return \"text/plain; charset=\\\"UTF-8\\\"\";\n                                }\n                        });\n                        appender.activateOptions();\n                        logger.addAppender(appender);\n\n                logger.error(\"\u039c\u03c0\u03bf\u03c1\u1ff6 \u03bd\u1f70 \u03c6\u03ac\u03c9 \u03c3\u03c0\u03b1\u03c3\u03bc\u03ad\u03bd\u03b1 \u03b3\u03c5\u03b1\u03bb\u03b9\u1f70 \u03c7\u03c9\u03c1\u1f76\u03c2 \u03bd\u1f70 \u03c0\u03ac\u03b8\u03c9 \u03c4\u03af\u03c0\u03bf\u03c4\u03b1. \\n Ek get eti\u00f0 gler \u00e1n \u00feess a\u00f0 ver\u00f0a s\u00e1r. \\n \u042f \u043c\u0430\u0433\u0443 \u0435\u0441\u0446\u0456 \u0448\u043a\u043b\u043e, \u044f\u043d\u043e \u043c\u043d\u0435 \u043d\u0435 \u0448\u043a\u043e\u0434\u0437\u0456\u0446\u044c.\\n\\n\");\n        }\n\n}\n\nTry running it as java -cp .:log4j-1.2.14.jar:mail.jar:activation.jar testlog {whoeveryouare}@gmail.com\nWith and without the anonymous subclass.\n\nWith it, you'll get proper message with greek and cyrillic; without it, you'll get question marks instead of those characters.", "id": 120179, "time": "2008-08-28T08:15:03Z", "creator": "ilya.kasnacheev@gmail.com", "creation_time": "2008-08-28T08:15:03Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": 22495, "bug_id": 44644, "text": "Created attachment 22495\nThe source file (UTF8)\n\nThis file can be used as a test case.", "id": 120180, "time": "2008-08-28T08:16:01Z", "creator": "ilya.kasnacheev@gmail.com", "creation_time": "2008-08-28T08:16:01Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "carnold@apache.org", "text": "The layout does have the correct values for contentType.  See http://en.wikipedia.org/wiki/MIME for a summary of the various fields of the MIME type (a little easier to read than the IETF RFC's).  The problem is with the SMTPAppender does not properly encode the message into the form specified by the RFC.  Could you try this and see if works for you?  Will have to dig a little deeper to see what to do when a contentType other than \"text/plain\" is specified.\n\n\nndex: src/main/java/org/apache/log4j/net/SMTPAppender.java\n===================================================================\n--- src/main/java/org/apache/log4j/net/SMTPAppender.java\t(revision 686147)\n+++ src/main/java/org/apache/log4j/net/SMTPAppender.java\t(working copy)\n@@ -322,10 +322,15 @@\n \t}\n       }\n       t = layout.getFooter();\n-      if(t != null)\n-\tsbuf.append(t);\n-      part.setContent(sbuf.toString(), layout.getContentType());\n-\n+      if(t != null) {\n+\t     sbuf.append(t);\n+      }\n+      String contentType = layout.getContentType();\n+      if (contentType == null || contentType.equals(\"text/plain\")) {\n+         part.setText(sbuf.toString(), \"UTF-8\");\n+      } else {\n+         part.setContent(sbuf.toString(), contentType);\n+      }\n       Multipart mp = new MimeMultipart();\n       mp.addBodyPart(part);\n       msg.setContent(mp);\n\n", "id": 120183, "time": "2008-08-28T09:23:26Z", "bug_id": 44644, "creation_time": "2008-08-28T09:23:26Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 44644, "attachment_id": null, "text": "I'll try it tomorrow, but I suppose you should support text/* (notably text/html) the same way.", "id": 120186, "time": "2008-08-28T10:12:04Z", "creator": "ilya.kasnacheev@gmail.com", "creation_time": "2008-08-28T10:12:04Z", "is_private": false}, {"count": 6, "tags": [], "creator": "carnold@apache.org", "is_private": false, "text": "Committed change in rev 705140 after much experimentation.  JavaMail documentation doesn't see to offer much guidance on creating messages containing non-ascii characters.  \n\nSubjects containing non-ASCII characters were also mangled.", "id": 121576, "time": "2008-10-15T21:58:45Z", "bug_id": 44644, "creation_time": "2008-10-15T21:58:45Z", "attachment_id": null}]
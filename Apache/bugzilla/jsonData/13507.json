[{"count": 0, "tags": [], "bug_id": 13507, "attachment_id": null, "id": 24311, "creation_time": "2002-10-10T19:14:19Z", "time": "2002-10-10T19:14:19Z", "creator": "pedietz@west.com", "text": "Currently mod_cgi captures all STDERR data and writes it to the error log via \nlog_script_err() or writes it into a report via log_script().\n\nI would like to write an independent 2.0 module, that is able to do \"it's own \nthing\" if \"stderr\" arrives after running mod_cgi().\n\nEither as a special hook that only mod_cgi(d) looks for:\n\n        if ((ret = ap_scan_script_header_err_brigade(r, bb, sbuf))) {\n            if (ap_has_stderr_hook()) {\n               return do_stderr_hook(r, conf, ret, dbuf, sbuf, bb, script_err);\n            }\n            return log_script(r, conf, ret, dbuf, sbuf, bb, script_err);\n        }\n\nOr at a global stage, like the other handlers  (though caching the results of \nstderr could be expensive).\n\nTCL throws cgi errors to stderr.  Currently we use a hacked up version of \nmod_cgi for this reason....when a cgierr happens, it escaltes the error to \ncertain people, and generates an HTML based report they can click on via a \nJavaScript confirm box \"A cgi error has occurred.  Do you want to see it ?\"\n\nPhil", "is_private": false}, {"count": 1, "tags": [], "text": "Pretty specialized use case, no patches, possible security issues with the\nproposal, going for a won't fix.", "is_private": false, "id": 83302, "creator": "chip@force-elite.com", "time": "2005-12-06T08:13:41Z", "bug_id": 13507, "creation_time": "2005-12-06T08:13:41Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 47510, "text": "Currently, tomcat only generates a new sessionid if it's not NULL and tries to reuse the existing one. However, in the case of tomcat configured with load balancer using jvmRoute and user switch between clusters on the same browser session, tomcat see jsession cookie(with old jvmroute value from another cluster) and reuse it and it's not correct. The fix is to check jvmRoute value and it's note the same, generate new sessionId.", "id": 128754, "time": "2009-07-11T13:10:13Z", "creator": "vujack@yahoo.com", "creation_time": "2009-07-11T13:10:13Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 23959\nBaseManager.java with a fix", "attachment_id": 23959, "bug_id": 47510, "id": 128755, "time": "2009-07-11T13:13:11Z", "creator": "vujack@yahoo.com", "creation_time": "2009-07-11T13:13:11Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 47510, "attachment_id": null, "text": "The patch is in the wrong format (full file rather than diff -u) and breaks the Manager API as described in the Javadocs. Without a justification of the \"it's not correct\" statement, I can't anything that is wrong with the current behaviour from a spec or functional point of view.", "id": 128925, "time": "2009-07-16T14:06:51Z", "creator": "markt@apache.org", "creation_time": "2009-07-16T14:06:51Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 47510, "text": "We are having the same problem.  We have 4 JBoss 4.2.3 servers in a cluster using sticky session but no session replication.  \n\nHere is the scenario.  If the first request gets routed to node1, the sessionid will end in \".node1\" and all requests will go back to that node.  Let's say node1 goes down and the next request gets sent to node2.  Since the session is not on node2, a new session is created.  The problem is that the same session id, the one ending in \".node1\" is reused instead of a whole new session id ending in \".node2\" being created.\n\nThere are 2 problems with this:\n\n1) There are still 3 other JBoss servers running.  All requests from the same browser using a session id ending in \".node1\" will go to random JBoss servers (no more sticky sessions). This pretty much renders the app useless.\n\n2) When node1 comes back up, the user again is switched back to node1 and remains there as sticky sessions kicks in.", "id": 131928, "time": "2009-11-13T07:02:39Z", "creator": "bmolof@systemax.com", "creation_time": "2009-11-13T07:02:39Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 132731, "time": "2009-12-10T13:16:49Z", "bug_id": 47510, "creation_time": "2009-12-10T13:16:49Z", "text": "For this to happen as described, a cookie intended for one cluster must be transmitted to a different cluster. This shouldn't happen. Given that the cookie will be selected by host and path, I don't see how this can happen. This looks like misconfiguration at this stage. I suggest you follow this up on the users list in the first instance. If that discussion concludes that there is a bug here, please re-open this issue and describe the steps to reproduce the bug.\n\nNote also that are are free to add custom valves and/or filters to manipulate the session cookie (or anything else) if necessary."}]
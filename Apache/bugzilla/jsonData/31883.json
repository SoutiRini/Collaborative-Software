[{"count": 0, "tags": [], "text": "Hi,\n\nCurrently the only way to use JNI under Tomcat is to invoke System.loadLibrary()\noutside the application. This is a documented release-note; it is also a\ndeployment nightmare.\n\nI propose Tomcat provide a new mechanism whereby webapps can identify classes\nloading libraries, and those classes can be instantiated from within a parent\nclassloader. The key is that we should be able to bundle these classes as part\nof a deployment WAR file without having to deploy stuff into Tomcat's system\nlibraries directory. It would also be nice (although not strictly necessary at\nthis stage) to be able to detect all applications that make use of the native\nclass, so that one could unmount them all, replace the DLL, and remount them\nall, without restarting all of Tomcat. If you want to get *really* fancy,\nintercept all calls to System.loadLibrary() automatically, and use the\nappropriate classloader on-the-fly without needing the user to explicitly point\nout any classes.\n\nThis issue is meant to be a focus of discussion and fuel feedback from the\ncommunity.", "is_private": false, "id": 65658, "creator": "cowwoc@bbs.darktech.org", "time": "2004-10-25T18:34:51Z", "bug_id": 31883, "creation_time": "2004-10-25T18:34:51Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 31883, "is_private": false, "id": 65659, "time": "2004-10-25T18:36:49Z", "creator": "yoavs@computer.org", "creation_time": "2004-10-25T18:36:49Z", "tags": [], "text": "Bugzilla is not a discussion forum.  Use the mailing list.\n\nAlso the current trend is anti-bloat, which is exactly what this would be.  I'm \nclosing this item pending a mailing list discussion.  IF that discussion takes \nplace and we come up with something that won't be -1'ed, please feel free to \nreopen this issue with more details."}]
[{"count": 0, "tags": [], "text": "Created attachment 33590\npatch for this issue\n\nNear the top of catalina.sh are a couple of case statements which check for a colon within the CATALINA_HOME and CATALINA_BASE environment variables.\n\nJust after this is a section which sanitizes those same variables to UNIX format, conditional to running under Cygwin.\n\nThe Cygwin section should come before the colon check.  \nIn a Cygwin environment it's entirely likely that CATALINA_HOEM and/or CATALINA_BASE will be set up using Windows semantics, which would include a colon.\n\nThe user is then be unable to start/stop etc.\n\nPatch attached.", "attachment_id": 33590, "bug_id": 59065, "id": 188772, "time": "2016-02-24T18:07:02Z", "creator": "ed.randall@ingenotech.com", "creation_time": "2016-02-24T18:07:02Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 59065, "attachment_id": null, "is_private": false, "id": 188785, "time": "2016-02-24T21:28:18Z", "creator": "chris@christopherschultz.net", "creation_time": "2016-02-24T21:28:18Z", "text": "I'm curious, what is the result of using this patch? If Cygwin is being used on Windows with CATALINA_BASE or CATALINA_HOME (or both) starting with a drive letter (this is presumably the use-case, here), then the CLASSPATH will be built with an embedded colon character.\n\nUnder this environment, how does the JVM interpret the CLASSPATH environment variable? Does it use the UNIX-style path separator (colon) or does it use the Windows-style path separator (semicolon)? I would imagine that Windows-based JVMs /always/ use semicolons as the path separator, regardless of the use of Cygwin or any other UNIX-like environment running inside of it.\n\nIn that case, shouldn't the colon-checking be replaced with semicolon-checking for Windows? The real issue is that a .sh file is being used on Windows instead of the .bat file (which is exclusively for Windows).\n\nI have only looked at the raw diff and not yet in context, but it sounds like moving the check is not appropriate for Cygwin-on-Windows. Changing the check to look for semicolon is the right fix.\n\nHave I misunderstood?"}, {"count": 2, "tags": [], "bug_id": 59065, "attachment_id": null, "id": 188790, "time": "2016-02-24T22:40:59Z", "creator": "ed.randall@ingenotech.com", "creation_time": "2016-02-24T22:40:59Z", "is_private": false, "text": "I think you are perhaps unfamiliar with cygwin and have misunderstood.\n\n\"cygpath --unix ${VARIABLE}\" transforms all drive letters, slashes, colons and semicolons into a unix-style which cygwin and bash will work with correctly.  For example if \n    CATALINA_HOME=C:\\apps\\apache-tomcat-8.0.32 \nthen it will become \n    /cygdrive/c/apps/apache-tomcat-8.0.32 \nafter the transformation. \n\nUnfortunately these new lines which detect \"colon\" in these base variables (and  have apparently been added since Tomcat 7) have been placed before the cygwin magic, so in my environment the script bombs immediately on seeing the \"C:\".  The fix is to simply move them after cygwin-specific transforms.  All is then well.  \n\nIn a non-cygwin environment the net effect of the patch is no change.\n\nCLASSPATH is not an issue here. \nThanks :)"}, {"count": 3, "tags": [], "bug_id": 59065, "attachment_id": null, "id": 189011, "time": "2016-03-02T10:50:02Z", "creator": "markt@apache.org", "creation_time": "2016-03-02T10:50:02Z", "is_private": false, "text": "Thanks for the report and the patch.\n\nI've tested this locally and I can confirm both the problem and the fix.\n\nThe patch has been applied to 9.0.x for 9.0.0.M4 onwards nd 8.0.x for 8.0.33 onwards."}]
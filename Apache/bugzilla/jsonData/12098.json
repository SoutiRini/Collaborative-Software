[{"count": 0, "tags": [], "creator": "peter.brant@courts.state.wi.us", "attachment_id": null, "id": 21824, "time": "2002-08-27T17:55:48Z", "bug_id": 12098, "creation_time": "2002-08-27T17:55:48Z", "is_private": false, "text": "I'm using Filip Hanik's session clustering which uses JavaGroups.  I also use \nJavaGroups within my application.  So the structure looks like this:\n\n[1] /server/lib/tomcat-javagroups.jar (Filip's replacement session manager)\n[2] /server/lib/javagroups-all.jar (main JavaGroups library)\n[3] /webapps/myapp/WEB-INF/lib/javagroups-all.jar\n\nWith Tomcat 4.0.3, this works great.\n\nWith 4.1.9, I get a ClassCastException when the session manager starts and \ntries to dynamically instantiate its protocol classes.  It loads these classes \nusing the context class loader.  It appears this references the webapp class \nloader, hence the ClassCastException.  The session manager starts when I move \n[2] to /common/lib and delete [3].  However, since JavaGroups doesn't have the \nbenefit of something like Catalina's CustomObjectInputStream and can't find the \nclasses in my webapp, it fails while de-serializing objects.\n\nIt seems like it might be better to have JavaGroups favor the current class \nloader instead of the context class loader when the class exists in both, but \nwhy does it work in 4.0.3?"}, {"count": 1, "attachment_id": null, "bug_id": 12098, "text": "Put more succintly in the start() method of the session manager implementation:\n\nIn 4.0.3:\nThread.currentThread().getContextClassLoader() is a WebappClassLoader\n\nIn 4.1.9\nThread.currentThread().getContextClassLoader() is a StandardClassLoader\n\nWas this an intentional change?  Easily worked around though.\n\n", "id": 21841, "time": "2002-08-27T20:26:46Z", "creator": "peter.brant@courts.state.wi.us", "creation_time": "2002-08-27T20:26:46Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 12098, "attachment_id": null, "text": "Sorry, but that just isn't true. Adding:\nSystem.out.println(\"CCL:\" + Thread.currentThread().getContextClassLoader());\nin StandardManager.start() reveals that the context CL is the webapp classloader.\n\nI have no idea if there's a custom manager for JavaGroups; if there's one, then\nit could be a problem with it, but there's no bug in Tomcat.", "id": 21873, "time": "2002-08-28T08:05:31Z", "creator": "remm@apache.org", "creation_time": "2002-08-28T08:05:31Z", "is_private": false}, {"count": 3, "tags": [], "creator": "peter.brant@courts.state.wi.us", "text": "Darn it, sorry, I got that backwards.  What I meant to say is that in \n\n4.0.3 -> context class loader is the StandardClassLoader\n4.1.9 -> context class loader is a WebappClassLoader\n\nAs mentioned, it's an easy fix to temporarily switch it back to the \nStandardClassLoader in the custom manager to make JavaGroups work.\n", "id": 21898, "time": "2002-08-28T14:16:02Z", "bug_id": 12098, "creation_time": "2002-08-28T14:16:02Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "remm@apache.org", "text": "The correct one is WebappClassLoader, though. StandardCL means that the internal\nCatalina CL is set as the context CL, which is not good.\nI think it should be fixed in Tomcat 4.0.4.", "id": 21946, "time": "2002-08-29T08:01:33Z", "bug_id": 12098, "creation_time": "2002-08-29T08:01:33Z", "is_private": false, "attachment_id": null}]
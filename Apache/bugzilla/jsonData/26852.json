[{"count": 0, "attachment_id": null, "bug_id": 26852, "text": "When executing a command (with spawn=\"true\") which prints a lot to stdout or\nstderr, the command blocks. This happens due to the limited buffers of stdout\nand stderr. Since those buffers are never emptied by the Exec task and since it\nis not possible to redirect those streams, a command which uses stdout or stderr\nwill block sooner or later.\n\nIt would be nice if the Exec task could empty the stdout and stderr streams\nconstantly (in background, so that the task didn't block) until the spawned\nprocess finished.", "id": 52102, "time": "2004-02-11T11:16:00Z", "creator": "daniel.spilker@hamburg.de", "creation_time": "2004-02-11T11:16:00Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 26852, "text": "Sorry, but redirection IS possible with attributes output, error, \noutputproperty and errorproperty. Input redirection is also possible.\n\nhttp://ant.apache.org/manual/CoreTasks/exec.html\n", "id": 52104, "time": "2004-02-11T11:42:58Z", "creator": "jan@materne.de", "creation_time": "2004-02-11T11:42:58Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "daniel.spilker@hamburg.de", "text": "But it is NOT possible when setting spawn to true.\n\nQuote from http://ant.apache.org/manual/CoreTasks/exec.html:\nThe input, output, error, and result property settings are not active when\nspawning a process.", "id": 52105, "time": "2004-02-11T12:04:36Z", "bug_id": 26852, "creation_time": "2004-02-11T12:04:36Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 26852, "text": "You need to wrap your command in a script which redirects the output and error\nstreams.", "id": 52115, "time": "2004-02-11T13:54:27Z", "creator": "antoine@apache.org", "creation_time": "2004-02-11T13:54:27Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 26852, "text": "I already did, but it isn't nice.", "id": 52119, "attachment_id": null, "creator": "daniel.spilker@hamburg.de", "creation_time": "2004-02-11T14:04:13Z", "time": "2004-02-11T14:04:13Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "stevel@apache.org", "is_private": false, "id": 52130, "time": "2004-02-11T15:17:15Z", "bug_id": 26852, "creation_time": "2004-02-11T15:17:15Z", "tags": [], "text": "This is hard to correct  for the following reason. spawn is designed to let you\nstart programs that outlast the ant run. Which means that you cannot hook inputs\nand outputs to bits of the ant JVM, as then when ant died, the app would be in\ntrouble.\n\nWhat may be possible would be for someone (you?) to tweak the system so that you\ncan specify input and output files and ant would generate the script for you. I\nwouldnt expand exec to do this though; it is complex enough. And given the cross\nplatform nature of the problem (code for every OS/shell that ant runs on), I am\nnot enthusastic about doing it myself. "}, {"count": 6, "tags": [], "text": "Would it be too much of a hack to change the implementation of spawn behavior \nto be carried out by forking a new JVM, which could redirect the I/O?  It does \nsound kind of convoluted, doesn't it?", "is_private": false, "id": 52142, "creator": "mbenson@apache.org", "time": "2004-02-11T17:08:39Z", "bug_id": 26852, "creation_time": "2004-02-11T17:08:39Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "And it the process forked is itself a JVM, that's two VMs which must run... \nWould be better to have a small C program doing the redirection, but of course \nthis is not cross-platform anymore, although probably more robust than using \nthe local platform's scripting abilities... --DD", "is_private": false, "id": 52144, "creator": "ddevienne@lgc.com", "time": "2004-02-11T17:19:32Z", "bug_id": 26852, "creation_time": "2004-02-11T17:19:32Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 26852, "text": "Actually we do just that in our Java programs - start launcher process, start a child process, start two threads to poll stdout and stderr, exit the launcher process, and the child process continues to work. It is working at least in JRE 1.3.1 and 1.4.2 .", "id": 52145, "time": "2004-02-11T17:25:05Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-02-11T17:25:05Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 26852, "attachment_id": null, "is_private": false, "id": 52146, "time": "2004-02-11T17:28:06Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-02-11T17:28:06Z", "text": "I meant in Java child processes can outlive their parents without problems and without additional JVM."}, {"count": 10, "tags": [], "bug_id": 26852, "text": "That's what spawning does now... but that puts us back to Steve's comment about \nI/O redirection working great... UNTIL the termination of the JVM controlling \nthose (daemon) Threads.  Unless I'm misunderstanding you.", "id": 52148, "time": "2004-02-11T17:32:02Z", "creator": "mbenson@apache.org", "creation_time": "2004-02-11T17:32:02Z", "is_private": false, "attachment_id": null}, {"count": 11, "attachment_id": 10321, "bug_id": 26852, "is_private": false, "id": 52149, "time": "2004-02-11T17:36:18Z", "creator": "daniel.spilker@hamburg.de", "creation_time": "2004-02-11T17:36:18Z", "tags": [], "text": "Created attachment 10321\nPatch for src/main/org/apache/tools/ant/taskdefs/Execute.java"}, {"count": 12, "attachment_id": null, "bug_id": 26852, "text": "I hacked a patch for src/main/org/apache/tools/ant/taskdefs/Execute.java which\npumps stdout and stderr of the spawned process to a dummy OutputStream. The\nstdin of process is closed. Works fine. \n\nAlso look at the javadoc of java.lang.Process which recommends this behaviour.\n\nWhen the Ant JVM exits, the other process might get some kind of \"IOExecption\"\nsince the pipe between the processed is closed. But this depends on the OS.", "id": 52150, "time": "2004-02-11T17:37:23Z", "creator": "daniel.spilker@hamburg.de", "creation_time": "2004-02-11T17:37:23Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "text": "I wonder whether it would not be more simple to create new ant runner scripts\nwhich do\nexec 1>file1 2>file2\nor\nexec >/dev/null 2>&1 if no output is wished\n...\nThen there is no problem any more when ant terminates, because the scripts are\nspawned.\nThis script could then delegate the rest of the work to the normal antRun scripts. \n", "is_private": false, "id": 52151, "creator": "antoine@apache.org", "time": "2004-02-11T17:57:47Z", "bug_id": 26852, "creation_time": "2004-02-11T17:57:47Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 26852, "text": "Back to the cross-platform dilemma, there, though.  I will quote Terence Parr \n(ANTLR) here:  \"Why program by hand in five days what you can spend five years \nof your life automating?\"  You could go either way depending on your personal \npreference.", "id": 52152, "time": "2004-02-11T18:04:44Z", "creator": "mbenson@apache.org", "creation_time": "2004-02-11T18:04:44Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 26852, "text": "Daniel:  Could you attach or post a build file snippet that demonstrates the \nproblem?  Most preferable would be something using a un*x executable that is \navailable with bash, and behaves comparably on both platforms (not excluding an \nsh-compatible shell script).  Your patch is obviously reasonable and I plan to \ncommit it or something similar, but would like to have some basis of comparison \nof \"before\" to \"after.\"\n\nThanks,\nMatt", "id": 52375, "time": "2004-02-16T18:30:03Z", "creator": "mbenson@apache.org", "creation_time": "2004-02-16T18:30:03Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 26852, "text": "OK, here comes the demo for Linux/Unix:\n\nrun the following build file:\n<project name=\"test\" default=\"test\">\n  <target name=\"test\">\n    <exec executable=\"sh\" spawn=\"true\">\n      <arg value=\"-c\"/>\n      <arg value=\"echo do not forget to kill $$$$ > out.txt; while true; do echo\n-n 1234567890 | tee -a out.txt; done\"/>\n    </exec>\n    <input message=\"done?\"/>\n  </target>\n</project>\n\nIt's no real world example, but it demonstrates the problem. It spawns a shell\nprocess which (simulates a server process and) echos a string to stdout an into\nout.txt in an endless loop. So out.txt should grow forever since a string is\nappended in an endless loop in background. Then the build file asks you for\ninput to block the ant process. If you do an 'tail -f out.txt' on another xterm\nyou should see that the file stops growing after a while. This is when the\nstdout buffer is full and the spawned process is blocked because of that. Now\npress enter in the Ant's xterm. Ant exits and the JVM closes the spawned\nprocess's stdout stream. Having a look at out.txt, you see it starts growing again.\nNow you should kill the shell process...\nUsing my proposed patch, the spawned process won't block and out.txt grows\ncontinously.\n\nActually my patch is too complicated. It should be sufficient to close the\nspawned process's stdout, stdin and stderr streams.\n\n", "id": 52571, "time": "2004-02-19T15:06:46Z", "creator": "daniel.spilker@hamburg.de", "creation_time": "2004-02-19T15:06:46Z", "is_private": false, "attachment_id": null}, {"count": 17, "attachment_id": null, "creator": "mbenson@apache.org", "text": "Of course I meant cygwin above.  :)", "id": 52874, "time": "2004-02-24T17:40:23Z", "bug_id": 26852, "creation_time": "2004-02-24T17:40:23Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "creator": "mbenson@apache.org", "text": "\n\n*** This bug has been marked as a duplicate of 23893 ***", "id": 52875, "time": "2004-02-24T17:42:16Z", "bug_id": 26852, "creation_time": "2004-02-24T17:42:16Z", "is_private": false, "attachment_id": null}, {"count": 19, "attachment_id": null, "bug_id": 26852, "is_private": false, "id": 55097, "time": "2004-04-01T19:17:41Z", "creator": "mbenson@apache.org", "creation_time": "2004-04-01T19:17:41Z", "tags": [], "text": "FYI the \"close all\" solution seems not to work as well as the original \nsuggestion of pumping the streams.  In particular, the spawn test of the \nExecTaskTest suite failed with that code modification.  The only change I made \nto the patch was to use the single (shared) output/error stream constructor of \nPumpStreamHandler.  Thanks."}]
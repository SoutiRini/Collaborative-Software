[{"count": 0, "tags": [], "creator": "slaurent@apache.org", "is_private": false, "text": "If the async thread calls asyncContext.getResponse() after the async timeout, it gets a null reference. \nIn the following example, it leads to a NPE.\n\nThe servlet spec is not very clear on the behavior to adopt after a timeout, but I don't think null should be returned. Maybe an IllegalStateException instead ? It seems to be the case if complete() is called after the timeout.\n\npackage test;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.AsyncContext;\nimport javax.servlet.AsyncEvent;\nimport javax.servlet.AsyncListener;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * Servlet implementation class MyServlet\n */\n@WebServlet(value = \"/MyServlet\", asyncSupported = true)\npublic class MyServlet extends HttpServlet implements AsyncListener {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void doGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException {\n\t\tfinal AsyncContext asyncContext = request.startAsync(request, response);\n\t\tasyncContext.addListener(this);\n\t\tasyncContext.setTimeout(10*1000);\n\n\t\tasyncContext.start(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"Entering async thread\");\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(20 * 1000);\n\t\t\t\t\tSystem.out.println(\"<Asyncthread> about to write response\");\n\t\t\t\t\tServletResponse response2 = asyncContext.getResponse();\n\t\t\t\t\tPrintWriter writer = response2.getWriter();\n\t\t\t\t\twriter.write(\"Hello world\");\n\t\t\t\t\tSystem.out.println(\"<Asyncthread> about to complete\");\n\t\t\t\t\tasyncContext.complete();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void onComplete(AsyncEvent evt) throws IOException {\n\t\tSystem.out.println(\"onComplete \" + evt);\n\t}\n\n\t@Override\n\tpublic void onError(AsyncEvent evt) throws IOException {\n\t\tSystem.out.println(\"onError \" + evt);\n\t}\n\n\t@Override\n\tpublic void onStartAsync(AsyncEvent evt) throws IOException {\n\t\tSystem.out.println(\"onStartAsync \" + evt);\n\t}\n\n\t@Override\n\tpublic void onTimeout(AsyncEvent evt) throws IOException {\n\t\tSystem.out.println(\"onTimeout \" + evt);\n\t\tevt.getAsyncContext().getResponse().getWriter().write(\"Timed out\");\n\t\tevt.getAsyncContext().complete();\n\t}\n}", "id": 142060, "time": "2010-11-27T17:45:41Z", "bug_id": 50353, "creation_time": "2010-11-27T17:45:41Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 50353, "attachment_id": null, "id": 142062, "time": "2010-11-27T18:04:53Z", "creator": "slaurent@apache.org", "creation_time": "2010-11-27T18:04:53Z", "is_private": false, "text": "Same behavior with getRequest() : it returns null. \nThis leads to a NPE if asyncContext.dispatch() is called after the timeout :\n\n\njava.lang.NullPointerException\n\tat org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:127)\n\tat test.MyServlet$1.run(MyServlet.java:42)\n\tat org.apache.catalina.core.AsyncContextImpl$RunnableWrapper.run(AsyncContextImpl.java:439)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:680)\n\n(with a variation of the above example)"}, {"count": 2, "tags": [], "bug_id": 50353, "attachment_id": null, "id": 142135, "time": "2010-11-29T12:22:10Z", "creator": "markt@apache.org", "creation_time": "2010-11-29T12:22:10Z", "is_private": false, "text": "Hmm. This is further complicated by the fact that Tomcat recycles Request and Response objects so they can't be kept around forever. I have added this to me list of things to nag the Servlet EG about.\n\nI'm currently neutral on whether or not the current behaviour should change.\n\nSwitching to an enhancement since I don't see an actual bug (as in non-spec compliant behaviour) here."}, {"count": 3, "tags": [], "bug_id": 50353, "attachment_id": null, "id": 147569, "time": "2011-06-28T17:23:38Z", "creator": "markt@apache.org", "creation_time": "2011-06-28T17:23:38Z", "is_private": false, "text": "*** Bug 51432 has been marked as a duplicate of this bug. ***"}, {"count": 4, "tags": [], "bug_id": 50353, "attachment_id": null, "id": 147570, "time": "2011-06-28T17:25:04Z", "creator": "markt@apache.org", "creation_time": "2011-06-28T17:25:04Z", "is_private": false, "text": "This has been fixed in trunk and will be included in 7.0.17 onwards."}, {"count": 5, "attachment_id": null, "bug_id": 50353, "is_private": false, "id": 148619, "time": "2011-08-15T18:32:35Z", "creator": "davidw53@msn.com", "creation_time": "2011-08-15T18:32:35Z", "tags": [], "text": "It now throws IllegalStateException which is an unchecked exception.\n\nI don't think i'm splitting hairs here, that I strongly believe it should be throwing a checked exception.\n\nMaybe there's a deficiency with the API, but in the application code, there's no way that I know to handle this case properly without handling the unchecked exception (an unchecked exception is supposed to be a bug e.g. nullpointerException).\n\nThe asyncContext error/timeout handler cannot be atomically synchronized with the causal event so in a Thread race between error/timout and writing a response it is possible to get this unchecked exsception and there is no proper way to write the code.\n\nSo really it has to ba a checked exception, and the API altered if necessary."}, {"count": 6, "tags": [], "bug_id": 50353, "attachment_id": null, "id": 148620, "time": "2011-08-15T18:37:30Z", "creator": "markt@apache.org", "creation_time": "2011-08-15T18:37:30Z", "is_private": false, "text": "NPE is also unchecked so the end result is the same and now there is a clearer explanation of what went wrong.\n\nAny API changes will require a change to the Servlet specification. For that, you'll need to lobby the Servlet EG. It is on my list of issues to raise but it won't hurt if you raise it first."}, {"count": 7, "tags": [], "bug_id": 50353, "attachment_id": null, "is_private": false, "id": 148621, "time": "2011-08-15T18:51:00Z", "creator": "davidw53@msn.com", "creation_time": "2011-08-15T18:51:00Z", "text": "Agreed - null is not specified (by the API) though it did provide a route in setting a local var and then testing for null (assuming the reference passed had volatile handling).\n\nThough without API support (unlikely) the checked exception idea seems a better way. Then the application code would handle it like e.g. java.io.IOException.\n\nHow do I \"lobby the Servlet EG\"?"}, {"count": 8, "tags": [], "text": "http://java.net/projects/servlet-spec/lists and post to the users list.", "attachment_id": null, "id": 148622, "creator": "markt@apache.org", "time": "2011-08-15T18:53:33Z", "bug_id": 50353, "creation_time": "2011-08-15T18:53:33Z", "is_private": false}]
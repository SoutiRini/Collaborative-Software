[{"count": 0, "tags": [], "bug_id": 5382, "text": "Xerces-J 1.4.4 cannot parse XML documents with a very large number of namespace \ndeclarations. (e.g. attribute such as: xmlns:prefix=\"uri\"). This bug has been \nencounter in a production system that uses XSLT (Xalan) to process very large \nXML documents.\nI propose a simple fix for this problem (see below).\n\n\nHOW TO REPRODUCE THIS BUG:\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo reproduce this bug try to parse an XML document structured as follows:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n    <a:para xmlns:a=\"urn:a\"/>          \n    <a:para xmlns:a=\"urn:a\"/>\n    <a:para xmlns:a=\"urn:a\"/>\n    ... \n    <a:para xmlns:a=\"urn:a\"/>\n    <a:para xmlns:a=\"urn:a\"/>\n    <a:para xmlns:a=\"urn:a\"/>\n\n    <b:test xmlns:b=\"urn:b\"/>\n</root>\n\nThere should be 16360 <a:para xmlns:a=\"urn:a\"/> child elements of the <root> \nelement to reproduce the bug. The text nodes containing only spaces used for \nthe indentation are important.\nIf you try to parse this kind of XML document with Xerces-J 1.4.4 the following \nNullPointerException is thrown:\n\njava.lang.NullPointerException\n\tat org.apache.xerces.dom.DeferredElementNSImpl.synchronizeData\n(DeferredElementNSImpl.java:154)\n\tat org.apache.xerces.dom.ElementImpl.getNodeName(ElementImpl.java:144)\n\tat NSLimitationBug.main(NSLimitationBug.java:26)\n\nHere is the source code of my NSLimitationBug class that produces the \nNullPointerException. You should change the path of the XML file to load.\n\nimport java.io.*;\nimport org.apache.xerces.parsers.*;\nimport org.w3c.dom.*;\nimport org.xml.sax.InputSource;\n\npublic class NSLimitationBug\n{\n    public static void main(String[] args)\n    {\n        try\n        {\n            File file = new File(\"E:\\\\XercesBug\\\\large-in.xml\");\n            Reader reader = new BufferedReader(new FileReader(file));\n\n            DOMParser parser = new DOMParser();\n            parser.setFeature(\"http://xml.org/sax/features/validation\", false);\n            parser.setFeature(\"http://apache.org/xml/features/dom/defer-node-\nexpansion\", true);\n            InputSource source = new InputSource(reader);\n            parser.parse(source);\n            Document doc = parser.getDocument();\n\n            NodeList children = doc.getDocumentElement().getChildNodes();\n            int count = children.getLength();\n            Element lastElem = (Element) children.item(count - 2); // The last \nchild is a text node\n\n            System.out.println(\"Name: '\" + lastElem.getNodeName() + \"'\");\n            System.out.println(\"Namespace URI: '\" + lastElem.getNamespaceURI() \n+ \"'\");\n        }\n        catch (Throwable t)\n        {\n            t.printStackTrace();\n        }\n    }\n}\n\nPROPOSED FIX:\n~~~~~~~~~~~~\nApparently this bug is due to a coding error in the \norg.apache.xerces.deom.DefferedDocumentImpl class.\nIn fact, in the method org.apache.xerces.dom.DefferedDocumentImpl#getNodeURI\n(int nodeIndex, boolean free) an integer is down casted into a short for no \nreason. For the last element child of the <root> element the integer to cast is \n32768. As the maximum short number is 32767, the integer 32768 is casted into \nthe short -32768.  In fact: (short)32768 == -32768 \nThis later results into the NullPointerException.\nTo fix this bug, simply remove the down casting into a short and change the \nreturn type of the two 'getNodeURI' to integer. \nHere is the code of these two methods after applying this fix:\n\n\n    /** Returns the URI of the given node. */\n    public int getNodeURI(int nodeIndex) {\n        return getNodeURI(nodeIndex, true);\n    }\n\n    /**\n     * Returns the URI of the given node.\n     * @param True to free URI index.\n     */\n    public int getNodeURI(int nodeIndex, boolean free) {\n\n        if (nodeIndex == -1) {\n            return -1;\n        }\n\n        int chunk = nodeIndex >> CHUNK_SHIFT;\n        int index = nodeIndex & CHUNK_MASK;\n        if (free) {\n            return clearChunkIndex(fNodeURI, chunk, index);\n        }\n        return getChunkIndex(fNodeURI, chunk, index);\n\n    } // getNodeURI(int):int\n\n\nNOTE:\n~~~~~\nI have first noted this bug in Xerces-J 1.2.0. With this version there is no \nNullPointerException. However the namespace URI of the last element is 'null' \ninstead of being 'urn:b'.", "id": 8825, "time": "2001-12-12T08:46:50Z", "creator": "bbeauvoir@yahoo.com", "creation_time": "2001-12-12T08:46:50Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "bbeauvoir@yahoo.com", "text": "Created attachment 888\nClass that reproduce the bug", "id": 8826, "time": "2001-12-12T08:50:29Z", "bug_id": 5382, "creation_time": "2001-12-12T08:50:29Z", "is_private": false, "attachment_id": 888}, {"count": 2, "tags": [], "bug_id": 5382, "text": "Created attachment 889\nLarge XML document that cannot be parsed by Xerces", "id": 8827, "time": "2001-12-12T08:53:46Z", "creator": "bbeauvoir@yahoo.com", "creation_time": "2001-12-12T08:53:46Z", "is_private": false, "attachment_id": 889}, {"count": 3, "attachment_id": 890, "creator": "bbeauvoir@yahoo.com", "text": "Created attachment 890\nDeferredDocumentImpl class with proposed fix (see lines 1119-1166)", "id": 8829, "time": "2001-12-12T08:58:11Z", "bug_id": 5382, "creation_time": "2001-12-12T08:58:11Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 5382, "text": "Is it at all possible to have this fix added in release 1.4.5? It is affecting \nmission-critical software that we are working with.", "id": 11159, "time": "2002-02-26T09:53:00Z", "creator": "bernard_perchman@uk.appl.net", "creation_time": "2002-02-26T09:53:00Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 5382, "text": "Hi there.  You may wish to try Xerces 2.0.0 (or 2.0.1 which should be available \nby end of week).  There don't seem to be many committers interested in working \non Xerces 1 now, since it has been superseded by Xerces2; so it seem unlikely \nthat there will be a Xerces 1.4.5.", "id": 11265, "attachment_id": null, "creator": "neilg@ca.ibm.com", "creation_time": "2002-02-27T23:29:21Z", "time": "2002-02-27T23:29:21Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 5382, "text": "Although Xerces1 is superseeded by Xerces2, \na lot of compagnies still use Xerces1.\nBugfix releases of Xerces V1 are very welcome,\nto improve the quality of all the products\nthat use Xerces1.\n\nWe also had the burden of this bug, but in a different situation.\nThe bug manifested itself, when we received a large XML-stream through\na SOAP RPC-call. Apache SOAP requires the Xerces1 DOM parser for\ndeserialisation. The Nullpointer exception occurred when parsing this \nlast part of the xml (notice the use of namespaces):\n\n    <MessageIDs xmlns:SOAPSDK2=\"http://www.w3.org/2001/XMLSchema\" \n                xmlns:SOAPSDK3=\"http://schemas.xmlsoap.org/soap/encoding/\" \n                      SOAPSDK3:arrayType=\"SOAPSDK2:int[1]\" \n                xmlns:SOAPSDK4=\"http://www.w3.org/2001/XMLSchema-instance\" \n                      SOAPSDK4:type=\"SOAPSDK3:Array\">\n       <SOAPSDK3:int>172193</SOAPSDK3:int>\n    </MessageIDs>\n  </SOAPSDK1:GetMessageDetailResponse>\n  </SOAP-ENV:Body>\n  </SOAP-ENV:Envelope>\n\nIt first it looked like the errors occurred at random. Of course the\nstringpool is like a big randomizer. Only when we had a reproducable\nsituation, we could solve the problem.\nI guess we have to switch to AXIS. AXIS is a follow-on to the Apache \nSOAP project. But it easier to oversee the consequences and riscs, by\ninstalling a patched/fixed xerces version.", "id": 35968, "time": "2003-04-24T10:06:42Z", "creator": "nico.hoogervorst@ezgov.com", "creation_time": "2003-04-24T10:06:42Z", "is_private": false, "attachment_id": null}]
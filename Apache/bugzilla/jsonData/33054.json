[{"count": 0, "tags": [], "bug_id": 33054, "attachment_id": null, "text": "sql:query appears to be using a TreeMap to hold row data.  This means\nthat it cannot be used to execute and display dynamic (user supplied)\nSQL, because the column order is incorrect.\n\nPlease consider using SequencedHashMap from Jakarta commons-collections,\nwhich will preserve entry order in the map.  I realize this will introduce\nsome backward compatibility issues for some people, but they probably\nshould be using the Map interface anyway.\n\nFYI, http://displaytag.sourceforge.net/ does a great job displaying\nthe output of sql:query, but since the columns are not in the right\norder, it's not very helpful.\n\nThis is in:\nhttp://cvs.apache.org/viewcvs.cgi/jakarta-taglibs/standard/src/org/apache/taglibs/standard/tag/common/sql/ResultImpl.java?rev=1.10&view=auto", "id": 69571, "time": "2005-01-11T23:33:53Z", "creator": "joachimm@yahoo.com", "creation_time": "2005-01-11T23:33:53Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 33054, "text": "Attempting to recreate (TreeMap definitely in use). The example to output the a\nsql statement seems to work fine:\n\n  <%-- Get the column names for the header of the table --%>\n  <c:forEach var=\"columnName\" items=\"${deejays.columnNames}\">\n    <th><c:out value=\"${columnName}\"/></th>\n  </c:forEach>\n\n  <%-- Get the value of each column while iterating over rows --%>\n  <c:forEach var=\"row\" items=\"${db.rowsByIndex}\">\n    <tr>\n      <c:forEach var=\"column\" items=\"${row}\">\n        <td><c:out value=\"${column}\"/></td>\n      </c:forEach>\n  </c:forEach>\n\nI suspect because the columnNames variable is the correct order. So that's a\ndefinite workaround for this issue.", "id": 97384, "time": "2006-12-27T17:07:28Z", "creator": "bayard@apache.org", "creation_time": "2006-12-27T17:07:28Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 33054, "text": "Scratch that last comment. It's not the columnNames.\n\nSo despite the TreeMap; I can't reproduce this easily. I have a pretty small\ntable (3 rows) and my select statement returns 28 columns without any obvious\nchange in the order. So needs more digging to understand how this might come about.", "id": 97385, "time": "2006-12-27T17:10:57Z", "creator": "bayard@apache.org", "creation_time": "2006-12-27T17:10:57Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 33054, "attachment_id": null, "text": "So here's a better test:\n\n  <c:forEach var=\"row\" items=\"${db.rows}\">\n    <tr>\n      <c:forEach var=\"column\" items=\"${row}\">\n        <td><c:out value=\"${column}\"/></td>\n      </c:forEach>\n    </tr>\n  </c:forEach>\n\nYou have to use rows and not rowIndex. The former uses the TreeMap and the\nlatter doesn't.\n\nDefinitely proves the bug. Things are ordered case insensitively by column name\n(as the code is pretty honest about). From the javadoc for getRows:\n\n     * Returns an array of SortedMap objects. The SortedMap\n     * object key is the ColumnName and the value is the ColumnValue.\n     * SortedMap was created using the CASE_INSENSITIVE_ORDER\n     * Comparator so the key is the case insensitive representation\n     * of the ColumnName.\n\nThere's nothing in the spec, so I think the next step here is to develop a\npatch, and then to consider whether a test can easily be created.", "id": 97386, "time": "2006-12-27T17:35:37Z", "creator": "bayard@apache.org", "creation_time": "2006-12-27T17:35:37Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 33054, "text": "Pulling in\nhttp://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk/src/java/org/apache/commons/collections/SequencedHashMap.java\nseems quite possible. Its deprecated because a version that is more embedded in\nCollections now exists (ListOrderedMap), but pulling that version in involves a\nlot more in the way of classes.\n\nIt's not thread-safe, but neither is TreeMap so that shouldn't be a problem. The\nonly backwards compatibility issue I can see is that TreeMap implements\nSortedMap which adds some methods which SequencedHashMap won't be offering. It\nseems unlikely that many people are using those methods.\n\nSo next up - a test case.", "id": 97579, "time": "2007-01-03T13:14:46Z", "creator": "bayard@apache.org", "creation_time": "2007-01-03T13:14:46Z", "tags": [], "is_private": false}, {"count": 5, "text": "Created attachment 19347\nUnit test for this issue\n\nAdds Derby as a dependency for the cactus tests", "bug_id": 33054, "attachment_id": 19347, "id": 97583, "time": "2007-01-03T14:43:56Z", "creator": "bayard@apache.org", "creation_time": "2007-01-03T14:43:56Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "So while I can happily test for this, and we can easily put a SequencedHashMap\nin, the spec API for javax.servlet.jsp.jstl.sql.Result defines the method\ngetRows() as returning a SortedMap and not a Map.\n\nSequencedHashMap is not a SortedMap - the insertion-ordering that this issue\ncalls for doesn't match the SortedMap API which indicates ordering should be\nmanaged via  comparator.\n\nIt would be possible to hack the fork of SequencedHashMap around a bit to make\nit a SortedMap implementation (given that it won't be public); but I think\nthat's abusing the spec far too much.\n\n---\n\nLooking at the sample page, I believe the following is a useable workaround for\nthis issue:\n\n  <%-- Get the column names for the header of the table --%>\n  <c:forEach var=\"columnName\" items=\"${db.columnNames}\">\n    <th><c:out value=\"${columnName}\"/></th>\n  </c:forEach>\n\n  <%-- Get the value of each column while iterating over rows --%>\n  <c:forEach var=\"row\" items=\"${db.rowsByIndex}\">\n    <tr>\n      <c:forEach var=\"column\" items=\"${row}\">\n        <td><c:out value=\"${column}\"/></td>\n      </c:forEach>\n  </c:forEach>\n\nWe should put that in a FAQ.", "attachment_id": null, "id": 97592, "creation_time": "2007-01-03T15:41:42Z", "time": "2007-01-03T15:41:42Z", "creator": "bayard@apache.org", "bug_id": 33054, "is_private": false}, {"count": 7, "tags": [], "text": "svn ci -m \"Adding unit test for Bug 33054 - however the assertion is turned off\nbecause this is not something we can fix. It's being added as an example of how\nto do a sql tag test so it doesn't get lost. \" \n\nSending        build-tests.xml\nSending        build_sample_standard.properties\nAdding         test/org/apache/taglibs/standard/tag/el/sql\nAdding         test/org/apache/taglibs/standard/tag/el/sql/Test33054.java\nAdding         test/web/org/apache/taglibs/standard/tag/el/sql\nAdding         test/web/org/apache/taglibs/standard/tag/el/sql/Test33054.jsp\nTransmitting file data ....\nCommitted revision 501245.", "attachment_id": null, "bug_id": 33054, "id": 98720, "time": "2007-01-29T16:25:41Z", "creator": "bayard@apache.org", "creation_time": "2007-01-29T16:25:41Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 33054, "attachment_id": null, "text": "Added to the FAQ:\n\nhttp://wiki.apache.org/jakarta-taglibs/Standard1%2e1%2e3FAQ\n\nOtherwise, I can't see us fixing this so I'm resoling it WONTFIX.", "id": 98725, "time": "2007-01-29T17:03:29Z", "creator": "bayard@apache.org", "creation_time": "2007-01-29T17:03:29Z", "is_private": false}]
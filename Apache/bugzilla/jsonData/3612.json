[{"count": 0, "tags": [], "bug_id": 3612, "attachment_id": null, "text": "Sometimes, a call to getServletPath() [in HttpServletRequest] returns the \npath \"/servlet\" instead of lets say \"/servlet/TestServlet\".\n\nIt seems as if this only occurs if the servlet is NOT loaded yet. Then \nonly /servlet is returned. A second call to the servlet returns the correct \npath information.\n\n(After a webapp-reload from within the manager application, the call still \nreturns the correct value. If the webapp is stopped and restarted, the first \ncall to a servlet returns the wrong value again.)\n\nJSP Pages always return correct path information.\n\n(I also have filters in front of my servlets)", "id": 5541, "time": "2001-09-14T07:03:23Z", "creator": "account.consult-smi@airbus.fr", "creation_time": "2001-09-14T07:03:23Z", "is_private": false}, {"count": 1, "tags": [], "creator": "craig.mcclanahan@sun.com", "attachment_id": null, "id": 5553, "time": "2001-09-14T09:31:10Z", "bug_id": 3612, "creation_time": "2001-09-14T09:31:10Z", "is_private": false, "text": "This works for me, every single time, with any combination of extra path info or\nnot, and query string or not.  There are unit tests in our test suite that\nvalidate this behavior as well.\n\nThe way that invoked servlets are handled, the only time such a bug could happen\nis on the very first request to a particular servlet -- the first time in, the\ninvoker servlet sets up a direct servlet mapping (/servlet/foo/*) for servlet\n\"foo\" that is used from then on, so the results will always be consistent.\n\nDo you have a reproducible test case for this?  If not, I'm going to have to\nresolve it with status WORKSFORME ...\n"}, {"count": 2, "attachment_id": 558, "bug_id": 3612, "is_private": false, "id": 5651, "time": "2001-09-17T04:51:04Z", "creator": "account.consult-smi@airbus.fr", "creation_time": "2001-09-17T04:51:04Z", "tags": [], "text": "Created attachment 558\nweb archive file conaining a simple webapp that demonstrates the bug"}, {"count": 3, "tags": [], "text": "Sorry craig,\nmy description of the bug was incorrect.\nThe bug seems to be within the filter implementation.\n\nI have written a simple webapp that demonstrates this bug.\n\nYou have to do the following:\n- install the war file which I have put into attachement 588\n- open a webbrowser and let it point to path /servlet/TestServlet\n- reload this page several times\n\nThe webpage that is displayed ALWAYS shows the correct servlet-path, but I have \nalso placed a filter in front of this servlet. This filter writes the requested \nservlet-path to System.out.\nThe FIRST time the filter is invoked, it displays \"/servlet\" as the servlet-\npath and afterwards does everything correctly.\n(I have tested this behaviour with Tomcat4-r1 and -rc2.)\n(The war file in attachement 588 also contains the source files.)\n", "is_private": false, "bug_id": 3612, "id": 5653, "time": "2001-09-17T05:02:34Z", "creator": "account.consult-smi@airbus.fr", "creation_time": "2001-09-17T05:02:34Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 3612, "is_private": false, "text": "Based on your use of a filter, this is not a bug.  In fact, if you use explicit\nservlet mappings, you will find that the servlet path is always returned\ncorrectly.\n\nConsider what Tomcat does when it receives a \"/servlet/foo\" request:\n* On the very first use of this request URI, Tomcat discovers that\n  the invoker servlet is mapped to \"/servlet/*\" so it matches.\n* At this point, request.getServletPath() correctly returns \"/servlet\"\n  because that is the path that was matched to select the servlet to be\n  executed -- exactly as the servlet spec requires.\n* The invoker servlet creates a new servlet definition, and a mapping\n  to \"/servlet/foo/*\" so that all subsequent invocations will go directly\n  to the newly defined servlet (bypassing the invoker).\n* After creating the new mapping, the invoker calls the service() method\n  of the servlet for *this* request -- but adjusts the servlet path seen\n  by the servlet to what it expects (/servlet/foo).\n* All subsequent requests will have a servlet path of \"/servlet/foo\"\n  bypass the invoker and go directly to the newly created servlet, so\n  they get a servlet path of \"/servlet/foo\".\n\nBecause your filter is invoked before the invoker servlet has had a chance to do\nanything the first time, it will see a servlet path of \"/servlet\".  This is what\nthe servlet spec requires, so it cannot be changed.\n\nTo work around this, you should use explicit servlet mappings rather than using\nthe invoker servlet (which is not in the servlet spec at all, so you cannot even\ncount on it being portable).  Then, your filter would see /servlet/foo every\nsingle time.\n", "id": 5672, "time": "2001-09-17T10:51:09Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-09-17T10:51:09Z", "attachment_id": null}]
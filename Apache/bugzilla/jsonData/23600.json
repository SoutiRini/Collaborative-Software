[{"count": 0, "tags": [], "creator": "remberson@outerharbor.com", "text": "The patch concerns how Ant does \"${}\" property replacement.\nCurrently, embedded \"${}\" are not evaluated, which is to say\n${com.acme.{jboss.service.name}.naming.host}\ncan not be evaluated.\nThere are many case in my Ant scripts where the use of\nparameterized properties would be a great simplification.\n\nSay one has two string, \"foo\" and \"bar\", and that there are a number\nof property names that are same except for an embedded \"foo\" or \"bar\", e.g.,\n\ncom.acme.foo.port\ncom.acme.bar.port\ncom.acme.foo.host\ncom.acme.bar.host\n\nIf one had a target such as:\n    \n    <target name=\"example\"> \n        <!-- do something with host and port -->\n        <echo>\n        port=${com.acme.${name}.port}\n        host=${com.acme.${name}.host}\n        </echo>\n    </target>\n        \nthen one could call the target:\n\n    <antcall target=\"example\">\n        <param name=\"name\" value=\"foo\"/>\n    </antcall>\n    <antcall target=\"example\">\n        <param name=\"name\" value=\"bar\"/>\n    </antcall>\n\nIncluded is a standalone file, PropertyReplacer.java, which allows one\nto test the new \"${}\" property replacement algorithm.\n\nI am submitting the new \"${}\" property replacement algorithm to the\nJBoss group also since it would be very useful in many of xml initialization\nscripts we use.\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nfile: PropertyReplacer.java\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nimport java.util.Properties;\n\npublic class PropertyReplacer {\n    // States used in property parsing\n    private static final int NORMAL = 0;\n    private static final int SEEN_DOLLAR = 1;\n    //private static final int SEEN_BRACKET = 2;\n    private static final int IN_BRACKET = 3;\n\n\n    public static String replace(String string, Properties props) {\n        if (string == null) {\n            return null;\n        }\n        int start = string.indexOf('$');\n        if (start == -1) {\n            return string;\n        }\n        final char[] chars = string.toCharArray();\n        StringBuffer buf = new StringBuffer(chars.length + 50);\n\n        if (start > 0) {\n            buf.append(chars, 0, start);\n        }\n//System.out.println(\"initial=\" + buf.toString());\n\n        int state = SEEN_DOLLAR;\n        int i = start+1;\n        while (i < chars.length) {\n            char c = chars[i];\n//System.out.println(\"c=\" + c);\n\n            if (state == NORMAL) {\n                if (c == '$') {\n                    state = SEEN_DOLLAR;\n                } else {\n                    buf.append(c);\n                }\n            } else if (state == SEEN_DOLLAR) {\n                if (c == '{') {\n                    i++;\n                    i = getPropName(chars, i, buf, props);\n                } else if (c == '$') {\n                    // this is how Ant escapes a '$'\n                    buf.append('$');\n                } else {\n                    buf.append('$');\n                    buf.append(c);\n                } \n                state = NORMAL;\n            }\n        \n            i++;\n        }\n\n        return buf.toString();\n    }       \n    private static int getPropName(char[] chars, int i, StringBuffer buf,\n                                    Properties props) {\n\n        StringBuffer propNameBuf = new StringBuffer(50);\n        int state = IN_BRACKET;\n        int prop_name_start = i;\n        while (i < chars.length) {\n            char c = chars[i];\n            if (state == IN_BRACKET) {\n                if (c == '}') {\n                    String name = propNameBuf.toString();\n//System.out.println(\"prop name=\" + name);\n                    String value = props.getProperty(name);\n                    if (value != null) {\n                        buf.append(value);\n                    } else {\n                        // What to do if there is no property\n                        // with the name? This is the Ant\n                        // behavior (which is imho allows for easier\n                        // error recovery than the jboss behavior).\n                        buf.append('$');\n                        buf.append('{');\n                        buf.append(name);\n                        buf.append('}');\n                    }\n                    prop_name_start = -1;\n                    break;\n\n                } else if (c == '$') {\n                    state = SEEN_DOLLAR;\n                } else {\n                    propNameBuf.append(c);\n                }\n            } else if (state == SEEN_DOLLAR) {\n                if (c == '{') {\n                    i++;            \n                    i = getPropName(chars, i, propNameBuf, props);\n                } else if (c == '$') { \n                    // this is how Ant escapes a '$'\n                    buf.append('$');\n                } else {\n                    propNameBuf.append('$');\n                    propNameBuf.append(c);\n                }\n                state = IN_BRACKET;\n            }\n            i++;    \n        }           \n        if ((i == chars.length) && (prop_name_start != -1)) {\n            // did not see '}' so append all of it\n            buf.append('$');\n            buf.append('{');\n            buf.append(chars, prop_name_start, i - prop_name_start);\n        }               \n        return i;       \n    }                   \n    private static void runtest(String inStr, String expected,\n                            Properties props) {\n        String outStr = replace(inStr, props);\n\n        if (inStr == null) {\n            if (outStr != null) {\n                System.err.println(\"Error: for null inStr\");\n                System.err.println(\"  but got non null \\\"\" + outStr + \"\\\"\");\n            }\n        } else if (outStr == null) {\n            System.err.println(\"Error: for inStr \\\"\" + inStr + \"\\\"\");\n            System.err.println(\"  but got null outStr\");\n        } else {\n            if (! outStr.equals(expected)) {\n                System.err.println(\"Error: for inStr \\\"\" + inStr + \"\\\"\");\n                System.err.println(\"  expected \\\"\" + expected + \"\\\"\");\n                System.err.println(\"  but got \\\"\" + outStr + \"\\\"\");\n            }\n        }\n    }\n    \n    public static void main(String[] args) {\n        Properties props = System.getProperties();\n        if (args.length > 0) {\n            // do arguments\n            for (int i =  0; i < args.length; i++) {\n                String arg = args[i];\n                String inStr = arg;\n                String outStr = replace(inStr, props);\n                System.out.println(\"(\"+inStr +\",\" +outStr+ \")\");\n            }\n        } else {\n            // do tests\n            runtest(\"XXX\", \"XXX\", props);\n            runtest(\"XXX$YY\", \"XXX$YY\", props);\n            runtest(\"XXX$$YY\", \"XXX$YY\", props);\n            runtest(\"XXX${aa$bb}\", \"XXX${aa$bb}\", props);\n            props.setProperty(\"foo\", \"bar\");\n            runtest(\"XXX.${foo}.YYY\", \"XXX.bar.YYY\", props);\n            runtest(\"XXX.$${foo}.YYY\", \"XXX.${foo}.YYY\", props);\n            runtest(\"XXX.${foo\", \"XXX.${foo\", props);\n            runtest(\"XXX.${foo}\", \"XXX.bar\", props);\n            props.setProperty(\"bigbar\", \"hoedeedoe\");\n            runtest(\"XXX.${big${foo}}.YYY\", \"XXX.hoedeedoe.YYY\", props);\n            props.setProperty(\"bigbarfly\", \"swatit\");\n            runtest(\"XXX.${big${foo}fly}.YYY\", \"XXX.swatit.YYY\", props);\n            runtest(\"XXX.${big${foo}x}.YYY\", \"XXX.${bigbarx}.YYY\", props);\n            props.setProperty(\"bar\", \"barvalue\");\n            runtest(\"XXX.${${foo}}.YYY\", \"XXX.barvalue.YYY\", props);\n            runtest(\"XXX.${noprop}.YYY.${}.ZZZ\", \n                            \"XXX.${noprop}.YYY.${}.ZZZ\", props);\n            runtest(\"XXX.${foo}.YYY.${aa${foo}bb}.ZZZ\", \n                            \"XXX.bar.YYY.${aabarbb}.ZZZ\", props);\n        }\n    }\n}", "id": 45062, "time": "2003-10-03T21:19:20Z", "bug_id": 23600, "creation_time": "2003-10-03T21:19:20Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 23600, "is_private": false, "text": "This has been asked for before, and probably isnt going to happen. If we do\nsomething like this, it will something moderately structured (like arrays), not\ngeneral purpose string expansion, and we will have to tread very, very\ncarefully, to avoid breaking existing builds. What if someone had used a { in a\nproperty name, for example.\n\nIf you do want to do it today, ant-contrib.sf.net has a task to do it...", "id": 45070, "time": "2003-10-03T23:46:10Z", "creator": "stevel@apache.org", "creation_time": "2003-10-03T23:46:10Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "derblaueklabautermann@gmail.com", "attachment_id": null, "text": "Invoking \n\norg.apache.poi.ss.usermodel.Sheet.autoSizeColumn(int column)\n\nin an interrupted thread (interrupted flag = \"true\") swallows the interrupted exception and resets the interrupted flag to \"false\". \nTherefore further checks whether the thread was interrupted or not will fail. This might cause some trouble.\n\nThis bug can be observed using both \"HSSF\" and \"XSSF\" workbooks (tested with the current beta-version (3.16-beta1-20161120)).\n\nCode example to reproduce the bug:\n\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\n\npublic class MainClass {\n\n\tpublic static void main(String[] args) {\n\n\t\tThread workerThread = new WorkerThread();\n\t\tworkerThread.start();\n\n\t\tSystem.out.println(\"Main thread will go to sleep for 2 seconds...\");\n\t\ttry {\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tSystem.out.println(\"Main thread interrupted while sleeping...\");\n\t\t}\n\t\tSystem.out.println(\"Main thread woke up...\");\n\t\tworkerThread.interrupt();\n\t\tSystem.out.println(\"Interrupting worker thread...\");\n\t}\n\n\tpublic static class WorkerThread extends Thread {\n\n\t\tprivate final Workbook workbook;\n\n\t\tpublic WorkerThread() {\n\t\t\t// this.workbook = new XSSFWorkbook();\n\t\t\tthis.workbook = new HSSFWorkbook();\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSheet sheet = this.workbook.createSheet();\n\n\t\t\tfor (int i = 0; i < 10; ++i) {\n\t\t\t\tsheet.createRow(i).createCell(0).setCellValue(\"Row \" + i);\n\t\t\t\tSystem.out.println(\"\\tWorkerThread - Before autosize: interrupted = \" + this.isInterrupted());\n\t\t\t\tsheet.autoSizeColumn(0);\n\t\t\t\tSystem.out.println(\"\\tWorkerThread - After autosize: interrupted = \" + this.isInterrupted());\n\t\t\t\t++i;\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\tthis.interrupt();\n\t\t\t\t\tSystem.out.println(\"\\tWorkerThread - Interrupted while sleeping...\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nOutput:\n\nMain thread will go to sleep for 2 seconds...\n\tWorkerThread - Before autosize: interrupted = false\n\tWorkerThread - After autosize: interrupted = false\n\tWorkerThread - Before autosize: interrupted = false\n\tWorkerThread - After autosize: interrupted = false\nMain thread woke up...\nInterrupting worker thread...\n\tWorkerThread - Interrupted while sleeping...\n\tWorkerThread - Before autosize: interrupted = true\n\tWorkerThread - After autosize: interrupted = false\n\tWorkerThread - Before autosize: interrupted = false\n\tWorkerThread - After autosize: interrupted = false\n\tWorkerThread - Before autosize: interrupted = false\n\tWorkerThread - After autosize: interrupted = false\n\nAs one can clearly see, the interrupted flag is reset when autoSizeColumn(int i) is invoked.\n\nThe problem seems to occur somewhere deep in java.awt.font.TextLayout. Thus it's probably out of your scope to fix \"the real bug\".\nHowever, I think it's still worth to have a look at it (and to be aware of this bug).", "id": 195193, "time": "2016-11-25T00:16:24Z", "bug_id": 60417, "creation_time": "2016-11-25T00:16:24Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60417, "attachment_id": null, "id": 195866, "time": "2017-01-05T09:43:33Z", "creator": "onealj@apache.org", "creation_time": "2017-01-05T09:43:33Z", "is_private": false, "text": "Auto-sizing columns is one of the slowest functions in POI relative to what users expect (auto-sizing is nearly instantaneous in Excel even for large workbooks). Bug 58896 and past discussion on the dev@ mailing list discuss ways to improve the speed of calculating the best-fit-width for a column.\n\nMerged cells and rich text severely slow down the auto-size calculations (though our implementation of auto-sizing may not be much faster for plain text).\n\nIf the problem resides in java.awt.font.TextLayout, maybe one way we could side-step this problem is by rewriting auto-sizing without TextLayout.\n\nPOI does very little with threads or interruptions, so you're probably right that the interruption isn't originating from POI code. The only thing in POI that gets close to this is creating ThreadLocal variables in LocaleUtil and a few other locations. A quick grep didn't reveal an usages of Thread or interrupt outside of our test suite for unencrypted HSSF workbooks."}]
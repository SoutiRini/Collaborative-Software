[{"count": 0, "tags": [], "creator": "slstpeter@gmail.com", "attachment_id": null, "id": 200152, "time": "2017-08-02T16:05:13Z", "bug_id": 61374, "creation_time": "2017-08-02T16:05:13Z", "is_private": false, "text": "We are getting the following error when attempting to open an Excel file that is running under CICS in an environment with EBCDIC as the default encoding. We only see this error under CICS, and do not see this issue running in ASCII environments.\n\norg.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: Package.init() : this exception should never happen, if you read this message please send a mail to the developers team.\n\tat org.apache.poi.openxml4j.opc.OPCPackage.init(OPCPackage.java:161)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.<init>(OPCPackage.java:136)\n\tat org.apache.poi.openxml4j.opc.Package.<init>(Package.java:54)\n\tat org.apache.poi.openxml4j.opc.ZipPackage.<init>(ZipPackage.java:81)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:220)\n\tat org.apache.poi.util.PackageHelper.open(PackageHelper.java:39)\n\tat org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:186)\n\tat com.optum.cire.tops.rdp.ReferenceDataProvider.parseXlsRDP(Unknown Source)\n\tat com.optum.cire.tops.rdp.ReferenceDataProvider.<init>(Unknown Source)\n\tat com.optum.cire.tops.rdp.ReferenceDataProvider.getInstance(Unknown Source)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:95)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:56)\n\tat java.lang.reflect.Method.invoke(Method.java:620)\n\nHere is the latest version of the code we are using to open the file. \nprivate void parseXlsRDP(String fileName, HashSet<String> set) {\n\t\ttry {\n\t\t\tProperties p = System.getProperties();\n\t\t    p.put(\"file.encoding\",\"ISO8859-1\");\n\t\t    System.setProperties(p);\n\t\t\tInputStream inputStream = getClass().getResourceAsStream(fileName);\t\n\t\t\n\t\t\tXSSFWorkbook exWorkBook= new XSSFWorkbook(inputStream);\n\t\t\tXSSFSheet sheet = exWorkBook.getSheetAt(0);\n\t\t\t\n\t\t\tXSSFFont wbFont;\n\t\t\twbFont=exWorkBook.createFont();\n\t\t\twbFont.setCharSet(HSSFFont.ANSI_CHARSET);\n\t\t\t\n\t\t\tRow row;\n\t\t\tCell cell;\n\t\t\tCell cell1;\n\t\t\tint noOfColumns = 0;\n\t\t\tfor (int rowIndex = 0; rowIndex <= sheet.getLastRowNum(); rowIndex++) {\n\t\t\t\trow = sheet.getRow(rowIndex);\n\t\t\t\tif (row != null) {\n\t\t\t\t\tnoOfColumns = sheet.getRow(0).getLastCellNum();\n\t\t\t\t\tif (noOfColumns == 2) {\n\t\t\t\t\t\tcell = row.getCell(0);\n\t\t\t\t\t\tcell1 = row.getCell(1);\n\t\t\t\t\t\tif (CellType.STRING == cell.getCellTypeEnum()  &&  CellType.STRING == cell1.getCellTypeEnum())\n\t\t\t\t\t\t\tset.add(new String(cell.getStringCellValue().getBytes(Charset.forName(\"UTF-8\")))+ new String(cell1.getStringCellValue().getBytes(Charset.forName(\"UTF-8\"))));\n\t\t\t\t\t\telse if (CellType.NUMERIC == cell.getCellTypeEnum()  &&  CellType.STRING == cell1.getCellTypeEnum())\n\t\t\t\t\t\t\tset.add(new String(String.valueOf(cell.getNumericCellValue()).getBytes(Charset.forName(\"UTF-8\")))+ new String(cell1.getStringCellValue().getBytes(Charset.forName(\"UTF-8\"))));\n\t\t\t\t\t\telse if (CellType.NUMERIC == cell.getCellTypeEnum()&& CellType.NUMERIC == cell1.getCellTypeEnum())\n\t\t\t\t\t\t\tset.add(new String(String.valueOf(cell.getNumericCellValue()).getBytes(Charset.forName(\"UTF-8\")))+ new String(String.valueOf(cell1.getNumericCellValue()).getBytes(Charset.forName(\"UTF-8\"))));\n\t\t\t\t\t\telse if (CellType.STRING == cell.getCellTypeEnum() && CellType.NUMERIC == cell1.getCellTypeEnum())\n\t\t\t\t\t\t\tset.add(new String(cell.getStringCellValue().getBytes(Charset.forName(\"UTF-8\")))+ new String(String.valueOf(cell1.getNumericCellValue()).getBytes(Charset.forName(\"UTF-8\"))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (int colIndex = 0; colIndex < noOfColumns; colIndex++) {\n\t\t\t\t\t\t\tcell = row.getCell(colIndex);\n\t\t\t\t\t\t\tif (CellType.NUMERIC == cell.getCellTypeEnum())\n\t\t\t\t\t\t\t\tset.add(new String(String.valueOf((long) cell.getNumericCellValue()).getBytes(Charset.forName(\"UTF-8\"))));\n\t\t\t\t\t\t\telse if (CellType.STRING== cell.getCellTypeEnum())\n\t\t\t\t\t\t\t\tset.add(new String(cell.getStringCellValue().getBytes(Charset.forName(\"UTF-8\"))));\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinputStream.close();\n\t\t\texWorkBook.close();\n\t\t\t//System.out.println(\":: ReferenceDataProvider :: parseXlsRDP :: Name: \"+fileName+\" File size read: \"+set.size());\n\t\t}"}, {"count": 1, "tags": [], "bug_id": 61374, "attachment_id": null, "text": "A few suggestions for your code:\n> for (int rowIndex=0; rowIndex <= sheet.getLastRowNum(); rowIndex++) {\n>     Row row = sheet.getRow(rowIndex);\n>     if (row != null) {\n>         ...\n>     }\ncan be replaced with\n> for (final Row row : sheet) {\n>     ...\n> }\nwhich will iterate over all non-null rows. That'll save you one indentation layer and improve readability.\n\nYou can close inputStream as soon as you're done opening the workbook. This may help with memory consumption. If you aren't reading from an embedded resource, it's even better to read straight from a File, which avoids buffering the contents of the file in memory prior to initializing the workbook.\n\n\nAddressing the issue at hand, based on your stack trace, it looks like  your issue arises from `new XSSFWorkbook(inputStream)`, so the rest of the example code is irrelevant. If this is correct, then the minimum test case that would reproduce the issue would look something like this:\n\nprivate void parseXlsRDP(String fileName) {\n    Properties p = System.getProperties();\n    p.put(\"file.encoding\",\"ISO8859-1\");\n    System.setProperties(p);\n\n    InputStream inputStream = getClass().getResourceAsStream(fileName);\t\n    XSSFWorkbook wb = new XSSFWorkbook(inputStream);\n    inputStream.close();\n    wb.close();\n}\n\nI don't have access to a CICS system to be able to test this issue, nor do I have the file you used that produced the problem, so I'll need your help to resolve this issue.\n1) Does this problem occur with certain files or all XLSX files on CICS? Could you try with a file that is known to work with POI, such as https://svn.apache.org/repos/asf/poi/trunk/test-data/spreadsheet/SampleSS.xlsx\n2) Does this problem occur when reading non-Excel OOXML file formats (docx, pptx)? \nhttps://svn.apache.org/repos/asf/poi/trunk/test-data/document/SampleDoc.docx\nhttps://svn.apache.org/repos/asf/poi/trunk/test-data/slideshow/SampleShow.pptx\n3) Does my guess at the minimum reproducing code reproduce your issue? Is setting the file.encoding system property required to reproduce the issue?\n4) If you open the XSSFWorkbook from a java.io.FileInputStream or java.io.File rather than a resource InputStream, does the problem still occur?\n5) Does the problem occur if you open the workbook from WorkbookFactory.create()?", "id": 200154, "time": "2017-08-02T17:07:01Z", "creator": "onealj@apache.org", "creation_time": "2017-08-02T17:07:01Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61374, "attachment_id": null, "text": "No response for over a month, so we can not analyse this with the amount of information provided and we don't have any such system available for testing, so we cannot do much here for now. Please reopen with more information if this is still an issue for you.", "id": 200855, "time": "2017-09-13T20:04:58Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-09-13T20:04:58Z", "is_private": false}]
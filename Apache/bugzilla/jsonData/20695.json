[{"count": 0, "tags": [], "creator": "david.jeschke@pobox.com", "attachment_id": null, "text": "If you set up Apache to filter mod_proxy output using mod_ext_filter then an \nApache thread and the filter process will deadlock in the cases where the \nproxied http response exceed one bucket.  \n\nThis occurs on the Windows NT/2K/XP platform.  I did not test the behavior on \nother platforms.\n\nThe deadlock occurs because:\n\nmod_proxy's ap_proxy_http_process_response calls\nap_pass_brigade which calls\nmod_ext_filter's ef_output_filter which calls\napr_file_read \nwhich blocks on WaitForSingleObject(.., INFINITE) because the pipe timeout is \nset to minus 1.\n\nAt this point Apache is waiting for the filter process to produce output but \nthe filter process is waiting for Apache's ap_proxy_http_process_response to \nresume and provide more input.  Deadlock!\n\nIt appears that this problem can be solved by setting the timeout on the \nfilter process's stdout to zero.  Immediately after the apr_proc_create() call \nin init_ext_filter_process() I put the following:\n\n    /* don't block on reading from child's stdout */\n    rc = apr_file_pipe_timeout_set(ctx->proc->out, 0);\n    ap_assert(rc == APR_SUCCESS);\n\nand it eliminated the deadlock because then apr_file_read will return \nAPR_STATUS_IS_EAGAIN when there is no more output from the filter process \nrather than blocking.\n\nI'm not familiar enough to know whether this problem affects other platforms \nor whether this suggested fix will adversely affect other platforms.\n\nI hope this helps!", "id": 38740, "time": "2003-06-12T00:12:58Z", "bug_id": 20695, "creation_time": "2003-06-12T00:12:58Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jim@apache.org", "attachment_id": null, "id": 106282, "time": "2007-08-03T08:03:27Z", "bug_id": 20695, "creation_time": "2007-08-03T08:03:27Z", "is_private": false, "text": "This is quite old. Please test/confirm with more recent versions and reopen if needed."}]
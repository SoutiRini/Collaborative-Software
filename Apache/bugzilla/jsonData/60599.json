[{"attachment_id": null, "tags": [], "bug_id": 60599, "is_private": false, "count": 0, "id": 196129, "time": "2017-01-18T06:45:41Z", "creator": "apache@wheelhouse.org", "creation_time": "2017-01-18T06:45:41Z", "text": "In a configuration with mod_cache, an HTTP/2 request with both \"Cache-Control: max-age=0\" and an If-Modified-Since: header that should generate a 304 response instead causes a connection reset.\n\nThis can be reproduced with the latest 2.4 SVN, using nghttp as an HTTP/2 client.  (The issue is also visible in Firefox and Chrome.)\n\nFirst, a request to load the URL into cache:\n\n$ nghttp -v https://www.example.org/test.txt\n[  0.073] Connected\nThe negotiated protocol: h2\n[  0.226] send SETTINGS frame <length=12, flags=0x00, stream_id=0>\n          (niv=2)\n          [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n          [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]\n[  0.226] send PRIORITY frame <length=5, flags=0x00, stream_id=3>\n          (dep_stream_id=0, weight=201, exclusive=0)\n[  0.226] send PRIORITY frame <length=5, flags=0x00, stream_id=5>\n          (dep_stream_id=0, weight=101, exclusive=0)\n[  0.226] send PRIORITY frame <length=5, flags=0x00, stream_id=7>\n          (dep_stream_id=0, weight=1, exclusive=0)\n[  0.226] send PRIORITY frame <length=5, flags=0x00, stream_id=9>\n          (dep_stream_id=7, weight=1, exclusive=0)\n[  0.226] send PRIORITY frame <length=5, flags=0x00, stream_id=11>\n          (dep_stream_id=3, weight=1, exclusive=0)\n[  0.227] send HEADERS frame <length=48, flags=0x25, stream_id=13>\n          ; END_STREAM | END_HEADERS | PRIORITY\n          (padlen=0, dep_stream_id=11, weight=16, exclusive=0)\n          ; Open new stream\n          :method: GET\n          :path: /test.txt\n          :scheme: https\n          :authority: www.example.org\n          accept: */*\n          accept-encoding: gzip, deflate\n          user-agent: nghttp2/1.14.1\n[  0.227] recv SETTINGS frame <length=6, flags=0x00, stream_id=0>\n          (niv=1)\n          [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n[  0.227] recv WINDOW_UPDATE frame <length=4, flags=0x00, stream_id=0>\n          (window_size_increment=2147418112)\n[  0.227] send SETTINGS frame <length=0, flags=0x01, stream_id=0>\n          ; ACK\n          (niv=0)\n[  0.299] recv SETTINGS frame <length=0, flags=0x01, stream_id=0>\n          ; ACK\n          (niv=0)\n[  0.300] recv (stream_id=13) :status: 200\n[  0.300] recv (stream_id=13) date: Wed, 18 Jan 2017 05:31:40 GMT\n[  0.300] recv (stream_id=13) server: Apache/2.4.25 (Unix) OpenSSL/1.0.2j\n[  0.300] recv (stream_id=13) last-modified: Wed, 18 Jan 2017 05:29:29 GMT\n[  0.300] recv (stream_id=13) content-length: 16\n[  0.300] recv (stream_id=13) etag: \"10-54657b3646338\"\n[  0.300] recv (stream_id=13) accept-ranges: bytes\n[  0.300] recv HEADERS frame <length=107, flags=0x04, stream_id=13>\n          ; END_HEADERS\n          (padlen=0)\n          ; First response header\nThis is a test.\n[  0.300] recv DATA frame <length=16, flags=0x01, stream_id=13>\n          ; END_STREAM\n[  0.300] send GOAWAY frame <length=8, flags=0x00, stream_id=0>\n          (last_stream_id=0, error_code=NO_ERROR(0x00), opaque_data(0)=[])\n\nThe second request can add the Cache-Control: and If-Modified-Since: headers to demonstrate the problem:\n\n$ nghttp -v -H 'Cache-Control: max-age=0' -H 'If-Modified-Since: Wed, 18 Jan 2017 05:29:29 GMT' https://www.example.org/test.txt\n[  0.073] Connected\nThe negotiated protocol: h2\n[  0.227] send SETTINGS frame <length=12, flags=0x00, stream_id=0>\n          (niv=2)\n          [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n          [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]\n[  0.227] send PRIORITY frame <length=5, flags=0x00, stream_id=3>\n          (dep_stream_id=0, weight=201, exclusive=0)\n[  0.227] send PRIORITY frame <length=5, flags=0x00, stream_id=5>\n          (dep_stream_id=0, weight=101, exclusive=0)\n[  0.227] send PRIORITY frame <length=5, flags=0x00, stream_id=7>\n          (dep_stream_id=0, weight=1, exclusive=0)\n[  0.227] send PRIORITY frame <length=5, flags=0x00, stream_id=9>\n          (dep_stream_id=7, weight=1, exclusive=0)\n[  0.227] send PRIORITY frame <length=5, flags=0x00, stream_id=11>\n          (dep_stream_id=3, weight=1, exclusive=0)\n[  0.227] send HEADERS frame <length=82, flags=0x25, stream_id=13>\n          ; END_STREAM | END_HEADERS | PRIORITY\n          (padlen=0, dep_stream_id=11, weight=16, exclusive=0)\n          ; Open new stream\n          :method: GET\n          :path: /test.txt\n          :scheme: https\n          :authority: www.example.org\n          accept: */*\n          accept-encoding: gzip, deflate\n          user-agent: nghttp2/1.14.1\n          cache-control: max-age=0\n          if-modified-since: Wed, 18 Jan 2017 05:29:29 GMT\n[  0.227] recv SETTINGS frame <length=6, flags=0x00, stream_id=0>\n          (niv=1)\n          [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]\n[  0.227] recv WINDOW_UPDATE frame <length=4, flags=0x00, stream_id=0>\n          (window_size_increment=2147418112)\n[  0.227] send SETTINGS frame <length=0, flags=0x01, stream_id=0>\n          ; ACK\n          (niv=0)\n[  0.299] recv SETTINGS frame <length=0, flags=0x01, stream_id=0>\n          ; ACK\n          (niv=0)\n[  0.300] recv RST_STREAM frame <length=4, flags=0x00, stream_id=13>\n          (error_code=PROTOCOL_ERROR(0x01))\n[  0.300] send GOAWAY frame <length=8, flags=0x00, stream_id=0>\n          (last_stream_id=0, error_code=NO_ERROR(0x00), opaque_data(0)=[])\nSome requests were not processed. total=1, processed=0\n\nThe RST_STREAM frame is received instead of the HEADERS frame.\n\nThe last revision where this worked properly appears to be r1763018.  After that and before r1765327, the connection hangs after receiving the SETTINGS frame.  At and after r1765327, the RST_STREAM occurs.\n\nA simple config used to reproduce the issue:\n\nLoadModule mpm_event_module       libexec/mod_mpm_event.so\nLoadModule ssl_module             libexec/mod_ssl.so\nLoadModule unixd_module           libexec/mod_unixd.so\nLoadModule authn_core_module      libexec/mod_authn_core.so\nLoadModule authz_core_module      libexec/mod_authz_core.so\nLoadModule cache_module           libexec/mod_cache.so\nLoadModule cache_disk_module      libexec/mod_cache_disk.so\nLoadModule http2_module           libexec/mod_http2.so\nLoadModule socache_shmcb_module   libexec/mod_socache_shmcb.so\n\nDocumentRoot        /data/apache/public/\nErrorLog            /data/apache/logs/error_log\nGroup               nobody\nListen              *:443\nServerName          www.example.org\nUser                nobody \n\nProtocols h2\n\nSSLEngine               on\nSSLCertificateFile      /data/apache/example.pem\nSSLCertificateKeyFile   /data/apache/example.pem\nSSLSessionCache         shmcb:/ssl-session-cache\n\nCacheEnable   disk /\nCacheRoot     /data/apache/cache\n\nIf there is anything further I can do or provide to help troubleshoot this, I am happy to do so.\n\nThanks!"}, {"attachment_id": 34643, "tags": [], "bug_id": 60599, "text": "Created attachment 34643\nProposed patch\n\nThis patch appears to address the issue, but I'm not at all convinced that the logic it uses is applicable in the general case.", "count": 1, "id": 196173, "time": "2017-01-19T05:09:13Z", "creator": "apache@wheelhouse.org", "creation_time": "2017-01-19T05:09:13Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 60599, "text": "Upon investigation, I found that when mod_cache is returning a revalidated response with a 304 status code, as is the case here, all it sends along the filter stack is a single EOS bucket, with the relevant headers already set in r->headers_out.\n\nmod_http2 appears to check for a body bucket before creating a h2_headers bucket.  Since there's not one in this case, the mod_http2 code treats this case as if there is no response at all.\n\nThe provided patch assumes that if there is no body and the status code is 304, then it is OK to go ahead with no body and just prepend the h2_headers bucket to the brigade.\n\nThis seems to work, but I suspect there may be various other cases where it's OK that there's no body that are not handled by this patch.  A more generic approach to determining that would possibly be more suitable.\n\nr->header_only sounds like it would be super helpful here but, alas, that seems not to be the case.\n\nThanks!", "count": 2, "id": 196174, "time": "2017-01-19T05:15:56Z", "creator": "apache@wheelhouse.org", "creation_time": "2017-01-19T05:15:56Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 60599, "text": "Thanks for the patch and the detailed setup description. With that it was easy to reproduce the bug. Your patch was in the correct location, I just modified it a tiny bit.\n\nThe fix is in Apache trunk and the 2.4.x branch and you can get it also from https://github.com/icing/mod_h2/releases/tag/1.8.10\n\nHope this works for you as well!", "id": 196342, "time": "2017-01-23T20:37:09Z", "creator": "stefan@eissing.org", "creation_time": "2017-01-23T20:37:09Z", "is_private": false, "attachment_id": null}]
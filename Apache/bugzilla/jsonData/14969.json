[{"count": 0, "tags": [], "bug_id": 14969, "attachment_id": null, "text": "PROPPATCH request:\n\n<propertyupdate xmlns='DAV:'><set><prop><test2 xmlns='xyz:'><name>Joe<abc:name \nxmlns:abc='abc:' ZZZ:attr='val' xmlns:ZZZ='def:'>Miller</abc:name></name>foo \nbar</test2></prop></set></propertyupdate>\n\nPROPFIND result:\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:multistatus xmlns:D=\"DAV:\">\n<D:response xmlns:ns0=\"DAV:\" xmlns:ns1=\"bar\" xmlns:ns2=\"xyz:\" xmlns:ns3=\"def:\" \nxmlns:ns4=\"abc:\" xmlns:lp1=\"DAV:\" xmlns:lp2=\"http://apache.org/dav/props/\">\n<D:href>/test/</D:href>\n<D:propstat>\n<D:prop>\n<ns2:test2><ns0:name>Joe<ns8:name \nns2:attr=\"val\">Miller</ns8:name></ns0:name>foo bar</ns2:test2>\n<lp1:creationdate>2002-06-18T16:31:04Z</lp1:creationdate>\n<lp1:getlastmodified>Wed, 19 Jun 2002 07:55:23 GMT</lp1:getlastmodified>\n<lp1:getetag>\"26548-0-c886786f\"</lp1:getetag>\n<lp1:resourcetype><D:collection/></lp1:resourcetype>\n<D:supportedlock>\n<D:lockentry>\n<D:lockscope><D:exclusive/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n<D:lockentry>\n<D:lockscope><D:shared/></D:lockscope>\n<D:locktype><D:write/></D:locktype>\n</D:lockentry>\n</D:supportedlock>\n<D:lockdiscovery/>\n<D:getcontenttype>httpd/unix-directory</D:getcontenttype>\n</D:prop>\n<D:status>HTTP/1.1 200 OK</D:status>\n</D:propstat>\n</D:response>\n</D:multistatus>\n\nNote that in the result, the namespace prefix \"ns8\" is used, but it isn't \ndeclared, making the response non-ns-wellformed.", "id": 27177, "time": "2002-11-29T19:53:51Z", "creator": "julian.reschke@gmx.de", "creation_time": "2002-11-29T19:53:51Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 14969, "attachment_id": null, "text": "Here's the crux of the problem, modules/dav/main/props.c#dav_prop_exec does not\npass the namespace to the store hook:\n\nerr = (*propdb->db_hooks->store)(propdb->db, &name, ctx->prop, propdb->mapping);\n\nThe function handling the \"store\" has no idea how to map the namespace id back\nto the name for deserialization. For the mod_dav_fs, it will have to store it in\nsome normalized form on the backend.\n\nIt should pass this namespace array, like:\n\nerr = (*propdb->db_hooks->store)(propdb->db, propdb->ns_xlate, &name, ctx->prop,\npropdb->mapping);\n\nor probably better would be to pass an apr_xml_doc type instead of apr_xml_elem.\n\n'course, this is going to break any backend to mod_dav, but it is critical to\nmaintaining namespaces in property value tags. I've tested this exact change and\nit resolved an issue with our backend (a variant on Catacomb.)", "id": 34098, "time": "2003-03-28T23:26:35Z", "creator": "Christopher.D.Knight@nasa.gov", "creation_time": "2003-03-28T23:26:35Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 14969, "text": "Wouldn't it be sufficient to ensure that the property value written contains \nall namespace attributes that are required to round-trip the document fragment?", "id": 34107, "attachment_id": null, "creator": "julian.reschke@gmx.de", "creation_time": "2003-03-29T09:19:29Z", "time": "2003-03-29T09:19:29Z", "is_private": false}, {"count": 3, "tags": [], "creator": "Christopher.D.Knight@nasa.gov", "text": "Yes, the problem is that the apr_xml_elem tree has namespace id's (integer index\ninto the xlate map). In case there is confusion, the propdb->mapping array is\nused to map one id to another, propdb->ns_xlate maps an integer to a namespace URI.", "id": 34127, "time": "2003-03-30T13:38:04Z", "bug_id": 14969, "creation_time": "2003-03-30T13:38:04Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 14969, "is_private": false, "text": "Better would be to add the namespace array to the end of the parameters for\nbackwards compatability.  Here's the patches required to make this work:\n\nmodules/dav/main/props.c:\n1063c1063\n<                                              propdb->mapping);\n---\n>                            propdb->mapping, propdb->ns_xlate);\n\n\nmodules/dav/main/mod_dav.h:\n1121c1121,1122\n<                          dav_namespace_map *mapping);\n---\n>                          dav_namespace_map *mapping,\n> \t\t\t apr_array_header_t *namespaces);", "id": 34820, "time": "2003-04-09T16:37:44Z", "creator": "Christopher.D.Knight@nasa.gov", "creation_time": "2003-04-09T16:37:44Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 14969, "is_private": false, "text": "Note that this bug fix has been tested and found to work (and pass all of the\nLitmus property tests) with the Catacomb backend module.", "id": 35574, "time": "2003-04-18T17:57:36Z", "creator": "Christopher.D.Knight@nasa.gov", "creation_time": "2003-04-18T17:57:36Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "gstein@gmail.com", "text": "No no... you mistake the propdb->mapping structure. That structure is under the\ncontrol and definition of the provider. You can easily capture all of the URIs\nfrom that when map_namespaces is called.\n\nmod_dav_fs::map_namespaces takes the provided set of ELEM_NS -> URI mappings,\nfolds in all unique URI values into its storage, and constructs an output\n\"mapping\" which maps ELEM_NS -> INTERNAL_NS, where INTERNAL_NS is a key into its\nown URI table.\n\nYou can simply return the passed-in 'namespaces' variable as the result\n'mapping'. The dav_namespace_map structure is opaque.\n\nIn fact, this bug is a duplicate of issue 11637, which has been fixed.\n\n*** This bug has been marked as a duplicate of 11637 ***", "id": 38326, "time": "2003-06-04T10:27:47Z", "bug_id": 14969, "creation_time": "2003-06-04T10:27:47Z", "is_private": false, "attachment_id": null}]
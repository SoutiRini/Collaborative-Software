[{"count": 0, "tags": [], "bug_id": 43067, "text": "I used to build a jar file (or any zip-format file: war, ear, etc.),\nwhich contents are extracted from other zip files.  For instance,\nzip file src.zip contains:\n\n+---main\n|   \\---org\n|       \\---apache\n|               Test.java\n|\n\\---test\n\nI just want the subtree under \"main\" (not include main directory) to be\npacked into my jar file:\n\n+---org\n    \\---apache\n            Test.java\n\nSo I wrote a build.xml to do this:\n\n<project default=\"src-jar\">\n    <target name=\"src-jar\">\n        <jar destfile=\"my-src.jar\">\n            <zipfileset src=\"src.zip\" includes=\"main/\"/>\n        </jar>\n    </target>\n</project>\n\nBut the result is not as expected:\n\n+---main       // I don't want this directory here\n    \\---org\n        \\---apache\n                Test.java\n\nIn order to take off the \"main\" directory, I modified some Ant classes. \nAttachment is the patch file from Ant 1.7.0 source.\n\nUsage:\n\n<project default=\"src-jar\">\n    <target name=\"src-jar\">\n        <jar destfile=\"my-src.jar\">\n            <!-- basedir instead of includes -->\n            <zipfileset src=\"src.zip\" basedir=\"main/\"/>\n        </jar>\n    </target>\n</project>\n\nThis is not the best solution I think.  Because it doesn't support tasks\nother than \"zip\", \"jar\", \"war\".  For example, the following build script\nwon't work:\n\n<project default=\"copy-src\">\n    <target name=\"copy-src\">\n        <copy destfile=\"srcdir\">\n            <zipfileset src=\"src.zip\" basedir=\"main/\"/>\n        </copy>\n    </target>\n</project>\n\nI suggest to improve class org.apache.tools.zip.ZipFile to support new zip\nfile format like \"src.zip!/main\".  By this way, any tasks use zipfileset\ndo not need to be changed.\n\nFor example,\n\n<project default=\"copy-src\">\n    <target name=\"copy-src\">\n        <copy destfile=\"srcdir\">\n            <zipfileset src=\"src.zip!/main\" includes=\"**/*.java\"/>\n        </copy>\n    </target>\n</project>\n\nPatch file to ant 1.7.0 lists below.\n\nIndex: org/apache/tools/ant/taskdefs/Zip.java\n===================================================================\n--- org/apache/tools/ant/taskdefs/Zip.java\t(revision 1)\n+++ org/apache/tools/ant/taskdefs/Zip.java\t(working copy)\n@@ -733,7 +733,7 @@\n                                       zOut, prefix, dirMode);\n                     }\n                     if (zf != null) {\n-                        ZipEntry ze = zf.getEntry(resources[i].getName());\n+                        ZipEntry ze = zf.getEntry(zfs.getBasedir() +\nresources[i].getName());\n                         addParentDirs(base, name, zOut, prefix,\n                                       ze.getUnixMode());\n                     } else {\n@@ -752,7 +752,7 @@\n                     zipFile(f, zOut, prefix + name, fileMode);\n                 } else if (!resources[i].isDirectory()) {\n                     if (zf != null) {\n-                    ZipEntry ze = zf.getEntry(resources[i].getName());\n+                    ZipEntry ze = zf.getEntry(zfs.getBasedir() +\nresources[i].getName());\n \n                     if (ze != null) {\n                         boolean oldCompress = doCompress;\nIndex: org/apache/tools/ant/types/ArchiveScanner.java\n===================================================================\n--- org/apache/tools/ant/types/ArchiveScanner.java\t(revision 1)\n+++ org/apache/tools/ant/types/ArchiveScanner.java\t(working copy)\n@@ -45,6 +45,11 @@\n      */\n     protected File srcFile;\n \n+    /**\n+     * The basedir from which this scanner begins to scan.\n+     */\n+    protected String basedir;\n+\n     // CheckStyle:VisibilityModifier ON\n \n     /**\n@@ -119,6 +124,32 @@\n     }\n \n     /**\n+     * Sets the basedir for scanning.\n+     *\n+     * @param basedir path name inside the zip file\n+     */\n+    public void setBasedir(String basedir) {\n+        if ((basedir != null) && (basedir.length() > 0)) {\n+\n+            // Make sure the basedir:\n+            // 1. BE separated by slash '/',\n+            // 2. NOT starts with slash '/'\n+            // 3. ALWAYS ends with slash '/'\n+            basedir = basedir.replace('\\\\', '/');\n+\n+            if (basedir.startsWith(\"/\")) {\n+                basedir = basedir.substring(1);\n+            }\n+\n+            if (!basedir.endsWith(\"/\")) {\n+                basedir += \"/\";\n+            }\n+\n+            this.basedir = basedir;\n+        }\n+    }\n+\n+    /**\n      * Sets encoding of file names.\n      * @param encoding the encoding format\n      * @since Ant 1.6\n@@ -331,5 +362,23 @@\n     protected static final String trimSeparator(String s) {\n         return s.endsWith(\"/\") ? s.substring(0, s.length() - 1) : s;\n     }\n+    \n+    /**\n+     * if the basedir was specified, and the entry name (path) is under the\nbasedir,\n+     * just save the relative path to the basedir.\n+     * Again, make sure the entry name is separated by slash '/'.\n+     */\n+    protected final String trimBasedir(String name) {\n+        name = name.replace('\\\\', '/');\n \n+        if (basedir != null) {\n+            if (name.startsWith(basedir)) {\n+                name = name.substring(basedir.length());\n+            } else {\n+                name = null;\n+            }\n+        }\n+\n+        return name;\n+    }\n }\nIndex: org/apache/tools/ant/types/ZipScanner.java\n===================================================================\n--- org/apache/tools/ant/types/ZipScanner.java\t(revision 1)\n+++ org/apache/tools/ant/types/ZipScanner.java\t(working copy)\n@@ -77,7 +77,15 @@\n             while (e.hasMoreElements()) {\n                 entry = (ZipEntry) e.nextElement();\n                 Resource r = new ZipResource(srcFile, encoding, entry);\n-                String name = entry.getName();\n+                String name = trimBasedir(entry.getName());\n+                \n+                if (name == null || name.length() == 0) {\n+                    continue;\n+                }\n+                \n+                // set basedir-trimmed name as resource name\n+                r.setName(name);\n+                \n                 if (entry.isDirectory()) {\n                     name = trimSeparator(name);\n                     dirEntries.put(name, r);\nIndex: org/apache/tools/ant/types/ArchiveFileSet.java\n===================================================================\n--- org/apache/tools/ant/types/ArchiveFileSet.java\t(revision 1)\n+++ org/apache/tools/ant/types/ArchiveFileSet.java\t(working copy)\n@@ -56,6 +56,7 @@\n         UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM;\n \n     private Resource src          = null;\n+    private String basedir        = null;\n     private String prefix         = \"\";\n     private String fullpath       = \"\";\n     private boolean hasDir        = false;\n@@ -87,6 +88,7 @@\n         src = fileset.src;\n         prefix = fileset.prefix;\n         fullpath = fileset.fullpath;\n+        basedir = fileset.basedir;\n         hasDir = fileset.hasDir;\n         fileMode = fileset.fileMode;\n         dirMode = fileset.dirMode;\n@@ -223,6 +225,42 @@\n     }\n \n     /**\n+     * Sets the basedir inside the source archive file.\n+     *\n+     * @param basedir the basedir\n+     */\n+    public void setBasedir(String basedir) {\n+        if ((basedir != null) && (basedir.length() > 0)) {\n+\n+            // Make sure the basedir:\n+            // 1. BE separated by slash '/',\n+            // 2. NOT starts with slash '/'\n+            // 3. ALWAYS ends with slash '/'\n+            basedir = basedir.replace('\\\\', '/');\n+\n+            if (basedir.startsWith(\"/\")) {\n+                basedir = basedir.substring(1);\n+            }\n+\n+            if (!basedir.endsWith(\"/\")) {\n+                basedir += \"/\";\n+            }\n+\n+            this.basedir = basedir;\n+        }\n+    }\n+\n+    /**\n+     * Gets the basedir inside the source archive file.\n+     *\n+     * @return the basedir\n+     */\n+    public String getBasedir() {\n+        return (basedir == null) ? \"\"\n+                                 : basedir;\n+    }\n+\n+    /**\n      * Creates a scanner for this type of archive.\n      * @return the scanner.\n      */\n@@ -250,6 +288,7 @@\n         }\n         ArchiveScanner as = newArchiveScanner();\n         as.setSrc(src);\n+        as.setBasedir(getBasedir());\n         super.setDir(p.getBaseDir());\n         setupDirectoryScanner(as, p);\n         as.init();", "id": 106511, "time": "2007-08-08T18:55:22Z", "creator": "zhouyuehong@21cn.com", "creation_time": "2007-08-08T18:55:22Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 43067, "attachment_id": 20618, "id": 106512, "time": "2007-08-08T18:56:50Z", "creator": "zhouyuehong@21cn.com", "creation_time": "2007-08-08T18:56:50Z", "is_private": false, "text": "Created attachment 20618\nPatch to ant 1.7.0 sources"}, {"count": 2, "tags": [], "bug_id": 43067, "attachment_id": null, "is_private": false, "id": 122474, "time": "2008-11-14T06:38:52Z", "creator": "bodewig@apache.org", "creation_time": "2008-11-14T06:38:52Z", "text": "\n\n*** This bug has been marked as a duplicate of bug 4240 ***"}, {"attachment_id": null, "tags": [], "bug_id": 43067, "is_private": false, "count": 3, "id": 122561, "time": "2008-11-17T08:01:58Z", "creator": "bodewig@apache.org", "creation_time": "2008-11-17T08:01:58Z", "text": "with Ant's trunk in svn revision 718263 the original problem can be solved with\n\n        <jar destfile=\"my-src.jar\">\n          <mappedresources>\n            <zipfileset src=\"src.zip\" includes=\"main/\"/>\n            <globmapper from=\"main/*\" to=\"*\"/>\n          </mappedresources>\n        </jar>\n\nit still needs to get documented, though."}]
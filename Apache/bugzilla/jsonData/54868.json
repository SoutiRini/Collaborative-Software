[{"count": 0, "tags": [], "creator": "emercoyle@hotmail.com", "text": "If I try to write strings containing numbers to cells using the\nCell.setCellValue(String) method, a warning is displayed on the cell saying\nthat a number is stored as text. If I manually mark this cell as having\ntype Text, the warning disappears. \nHow can I mimic this behaviour in the API ie by setting the type to Text, the warning is removed?", "id": 166707, "time": "2013-04-19T14:58:30Z", "bug_id": 54868, "creation_time": "2013-04-19T14:58:30Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 54868, "attachment_id": null, "text": "In my opinion, this is very far from being a bug. Excel allows the user to specify error checking rules, one of which is to flag text cells that contain numbers as being in error. To check on this, all you need to do is;\n\nOpen Excel.\nClick on the Office Button that you should see in the upper left hand corner of the screen.\nOn the pop-up screen that appears, look for a button that says 'Excel Options' and click on it.\nThis will open u another screen and you should look for the word 'Formulas' in the left hand list and then select it.\nThe right hand portion of the screen will now change and you should see a section entitled 'Error checking rules' which contains a host of check boxes. One of these checkboxes will say - Numbers formatted as text or preceded by an apostrophe'.\n\nThis is normally checked and is more than likely the reason you are seeing errors flagged when you view the sheet.\n\nThis is why I do not regard it as a bug, it is the default behaviour for Excel if this check box has been selected by the user. What I think you should be asking for is the ability to set these options through the application; an enchancement. As everyone who works on POI is a volunteer, it is impossible to say when this request would be filled and it might be better if you looked into doing it yourself and then contributing the patch to the project.", "id": 166723, "time": "2013-04-19T16:34:35Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2013-04-19T16:34:35Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 54868, "text": "I have found where you will need to look. There is an element within the xml markup for the sheet that allows you to specify which cell's errors ought to be ignored, it looks a little like this;\n\n   <ignoredErrors>\n      <ignoredError sqref=\"A2\" numberStoredAsText=\"1\"/>\n   </ignoredErrors>\n</worksheet>\n\nand, as you can see from this fragment, is positioned close to the bottom of the markup for the sheet. I am going to guess that you will need to create an ignoredError element for each cell and am further going to guess that within the xmlbeans layer for the sheet there should be an object to support this. You will need to dig around within this layer to identify it however and the best tool for this is a good IDE such as NetBeans or Eclipse.\n\nAs before, if you do find out the objects to use and are able to engineer a opatch, please contribute it to the project.", "id": 166738, "time": "2013-04-20T11:55:47Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2013-04-20T11:55:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Do you know why this warning doesn't appear when you manually set this type in Excel?", "attachment_id": null, "id": 166751, "creator": "emercoyle@hotmail.com", "time": "2013-04-22T08:27:58Z", "bug_id": 54868, "creation_time": "2013-04-22T08:27:58Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 54868, "text": "Well, it does, sort of.\n\nIf you enter an inverted comma symbol before the digit, then Excel will assume that you are forcing it to accept a number as text and will display that error message. Try entering '123 into a cell and you will see the error message displayed - at least I do when using Excel 2007.\n\nIf you enter just the number - say 123 - then Excel will silently convert this into a number for and store it into the file. When you press enter or click on the tick in the formula bar after entering 123 into the cell, you should see that it is automatically right aligned by Excel. You have the support of the user interface - Excel - when you are creating the file that way. When you are using POI, you do not have the support of the user interface and have to take responsibility for encoding into the file all of the instructions necessary to allow Excel to work correctly with the file at a later date.\n\nYou do have a few options if you do not feel up to patching the api. The first, is to explicitly set the type of the cell after assigning it a value, so;\n\nString cellValue = \"123\";\ncell.setCellValue(cellValue);\ncell.setCellType(Cell.CELL_TYPE_NUMERIC);\n\nbut I cannot guarantee that will work.\n\nAlternatively,you can check the values you are writing into the cells and pass an appropriate value to the setCellValue() method. A double value can be used for most numeric values so you could do something like this;\n\n// Assume the value you want to werite to the cell is in a String object\n// like this\nString cellValue = \"123.45\";\n\n// Try to create a Double value from that. If this falis, you will\n// see a NumberFormatException.\nDouble doubleValue = null;\n\ntry {\n   doubleValue = Double.parseDouble(cellValue);\n   cell.setCellValue(doubleValue.doubleValue());\n}\ncatch(NumberFormatException nfe) {\n   cell.setCellValue(cellValue);\n}\n\nNot the best way to use an Exception perhaps, but what the code tries to do is to create an instance of the Double class from the String. If that succeeds, then the String contained a valid number (a double in this case, there is an Integer alternative as well) and you can simply call the setCellValue(double) method and pass it a double. Behind the scenes, this will ensure that the cell's type is set correctly for you and you should not see an error when the file is opened with Excel. If a NumberFormatException is thrown, then the String did not contain a valid number and you can simply pass it to the setCellValue(String) method.\n\nOf course, life will be more complicated than this - not sure whether dates will work if you simply pas them in a String - but it is a start.", "id": 166762, "time": "2013-04-22T16:07:44Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2013-04-22T16:07:44Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "text": "This relates to bug #46136. Based on the progress with that bug, we have most of the underlying record support to add to the file that the warning should be ignored, but we don't have a design for how to expose that through UserModel, nor code to do it (nor unit tests either!)", "is_private": false, "id": 168039, "creator": "apache@gagravarr.org", "time": "2013-06-25T15:02:49Z", "bug_id": 54868, "creation_time": "2013-06-25T15:02:49Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "dtn-asfbugs@corefiling.co.uk", "text": "See also bug #56892", "id": 183486, "time": "2015-06-12T15:40:34Z", "bug_id": 54868, "creation_time": "2015-06-12T15:40:34Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 54868, "attachment_id": null, "text": "I've added bug 58641 which is the generalized RFE of what is being requested here.\n\n*** This bug has been marked as a duplicate of bug 58641 ***", "id": 186506, "time": "2015-11-23T21:50:55Z", "creator": "peterhansson_se@yahoo.com", "creation_time": "2015-11-23T21:50:55Z", "is_private": false}]
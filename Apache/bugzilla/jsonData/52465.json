[{"count": 0, "tags": [], "bug_id": 52465, "text": "There exists a code path where, if you have a directory <docroot>/foo (or similar aliased directory, and you do something like:\n\n<Location /foo>\n  RewriteRule ^ http://some.other.server%{REQUEST_URI} [P]\n</Location>\n\nIf you request /foo (no trailing slash), you go through your request phases, do URI->filename translation, lookup the file (and find it exists), so you set r->finfo up (particularly with r->finfo.filetype == APR_DIR) from the stat call, and then you get to your fixups.\n\nmod_rewrite does its fixup, rewriting r->filename to proxy:http://some.other.server/foo, as it should, it then sets up r->handler to be proxy_server, and sets r->proxyreq to be PROXY_REVERSE, as it should.\n\nUnfortunately, r->finfo.filetype is still set, so when mod_dir comes to do *its* fixups, it finds that the finfo.filetype is APR_DIR, it then finds that the uri doesn't have a trailing slash, so it helpfully redirects to one that does.\n\nThere are 2 possible fixes for this, and it might be worth applying both:\n(1) mod_dir.c:dir_fixups(), at the beginning add something that checks for r->proxyreq, r->filename and !strncmp(r->filename, \"proxy:\", 6), and returns DECLINED.\n(2) mod_rewrite.c:hook_fixup(), before the log line:\n            rewritelog((r, 1, dconf->directory, \"go-ahead with proxy request \"\n                        \"%s [OK]\", r->filename));\nadd: r->finfo.filetype = APR_NOFILE;\n\nEither, on their own will sort out the problem, but there may be other ways to get to either state, so it seems sensible to belt-and-braces...", "id": 152757, "time": "2012-01-13T16:53:00Z", "creator": "matthew.byng-maddick@bbc.co.uk", "creation_time": "2012-01-13T16:53:00Z", "is_private": false, "attachment_id": null}]
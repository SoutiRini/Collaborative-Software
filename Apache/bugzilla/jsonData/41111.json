[{"count": 0, "attachment_id": null, "bug_id": 41111, "text": "It would be nice if mod_deflate had a directive you could use to tell it to only\ndo compression if there are spare CPU cycles available.  I'm concerned about\nturning on mod_deflate because of the increased load on my server, especially if\nI were to be hit by badly-behaved robots, parallel downloaders, Slashdotting, etc.\n\nDefining \"spare CPU cycles available\" could be a bit tricky, of course.  It'd be\ngreat to be able to just tell it not to compress if doing so would peg the CPU\nto 100% (or a user-definable threshhold), but implementing that would be tricky\nsince different content can be more or less CPU-intensive to attempt to\ncompress.  An average-case or worst-case guess could be used, but it'd still\nvary by CPU type and speed as to how much of a dent that overhead would have on\navailable CPU cycles.  I suppose it'd have to benchmark itself to have good\npredictive ability, which would be starting to get pretty complex.\n\nA simpler approach could be to have the directive be called, e.g.\nDeflateIfCPUUsageBelow.  If the user specified 'DeflateIfCPUUsageBelow 75',\nmod_deflate would check to see if current CPU usage were below 75% in order to\ncompress the given content.  The user would be left to do their own measurements\nto see how much overhead mod_deflate uses for compression and thus where to set\nthat threshhold.\n\nAnd perhaps instead of basing the decision on instantaneous CPU usage for the\ncurrent CPU, it'd make more sense for the directive to work in terms of load\naverages, although I've always found those somewhat fuzzy and hard to use as a\nbasis for decision-making.\n\nIn any case, I think this would be a nice option because machines whose\nbandwidth is constrained enough to make mod_deflate highly desirable are often\ngoing to also not be the *fastest* machines in the world.", "id": 96549, "time": "2006-12-05T19:08:35Z", "creator": "apache-issues@harkless.org", "creation_time": "2006-12-05T19:08:35Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "An interesting suggestion.  Are you aware of mod_load_average, which does a\nsimilar job for handlers?\n\nYour comment about mod_deflate could apply to other filters in a similar manner,\nand a load_average check could apply in mod_filter.  Why isn't there a bugzilla\nentry for mod_filter?\n\nThe difficulty here (as in mod_load_average) is a cross-platform way to define load.\n\nAlso, bear in mind mod_cache for your own purposes.", "is_private": false, "bug_id": 41111, "id": 96558, "time": "2006-12-06T04:52:13Z", "creator": "nick@webthing.com", "creation_time": "2006-12-06T04:52:13Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "I agree with Nick. We should aim for a general solution here that could be used\nvia mod_filter. In my experience CPU usage is only usable if you use an average\nvalue of CPU usage over a reasonable amout of time. Otherwise you just get\nunreasonable flip flops. Thats why I would regard load average as more reliable.\nBut as Nick pointed out there is a problem to define and measure load platform\nindependently.\nBTW: Shouldn't we move this discussion to dev@httpd? I think continuing this\ndiscussion here is somewhat pointless.", "is_private": false, "bug_id": 41111, "id": 96573, "time": "2006-12-06T11:36:56Z", "creator": "rpluem@apache.org", "creation_time": "2006-12-06T11:36:56Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 41111, "text": "Ah yes, I think I did see a reference to mod_load_average some time back when I\nwas researching Apache throttling options, but I'd forgotten about it.  Seems to\nbe undocumented and not supported by its author, though.  It's not featured with\nhis other modules on http://www.outoforder.cc/, for instance.\n\nSounds good to make this general-purpose for filters.\n\nThanks for the pointer to mod_cache.  It might be good to add a note about it to\nthe mod_deflate documentation, as it wouldn't necessarily be obvious to people\nwho aren't experts on Apache internals that it would cache output from\nmod_deflate so it wouldn't have to be recompressed next time.  I was confused as\nto how caching would work with mod_deflate (without having a separate caching\nproxy instance) -- for instance, a lot of the stuff I read online (outside of\nhttpd.apache.org) about it claimed it did its *own* caching, but I couldn't find\nany evidence of that in the documentation.\n\nYes, good point about \"instantaneous CPU usage\", a la 'top', being a misnomer,\nsince clearly it has to average over some time period to be meaningful -- it's\njust a shorter time period than with load averages, without any extra factors\nthrown in to the calculation, and expressed in terms of an easy to understand\n0-100%, rather than load averages which can go arbitrarily high.  And yeah, I\nhadn't really thought about this on Windows -- load averages would be even\nharder to understand for Windows jockeys.", "id": 96576, "attachment_id": null, "creator": "apache-issues@harkless.org", "creation_time": "2006-12-06T12:20:35Z", "time": "2006-12-06T12:20:35Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 60902, "text": "Since cloneCellStyle is a method for a CellStyle, you always have to create a new CellStyle in order to clone a Style from another workbook, even if the style already exists - this may lead to a lot of redundant styles.\n\nI suggest a new method on the XSSFWorkbook called cloneCellStyle:\n\n/**\n* Searches in the current Workbook for an equivalent CellStyle to the given one (from another Workbook).\n* If none exists, it will be created.\n*\n* @param src The CellStyle that is going to be cloned\n* @return CellStyle The created or looked up CellStyle in the current Workbook\n*/\npublic XSSFCellStyle cloneCellStyle(XSSFCellStyle src) {\n  // ... TODO ...\n}\n\nI will attach a first (already working) patch.", "id": 197903, "time": "2017-03-22T14:15:12Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-22T14:15:12Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "dollinger.florian@gmx.de", "attachment_id": 34867, "id": 197904, "creation_time": "2017-03-22T14:16:20Z", "time": "2017-03-22T14:16:20Z", "bug_id": 60902, "text": "Created attachment 34867\nversion 1, adds a new cloneCellStyle method to the workbook", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 60902, "text": "The HSSF way is to use https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFOptimiser.html afterwards to tidy up duplicates. Might we be better off doing something similar for xssf instead?", "id": 197905, "time": "2017-03-22T14:49:36Z", "creator": "apache@gagravarr.org", "creation_time": "2017-03-22T14:49:36Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 60902, "text": "Ah okay! Hum, i don't know - personally i would prefer a method which is \"intelligent\" enough to check itself if a new object already exists, otherwise it feels a bit like \"making a mess and tidy up afterwards\".\n\nThe only reason I can think of (why the optimizer method is preferable) is for performance.\n\nAny other thoughts?", "id": 197907, "time": "2017-03-22T16:03:20Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-22T16:03:20Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "> The only reason I can think of (why the optimizer method is preferable) is\n> for performance.\nPerformance is a big reason. It's always tricky as a library developer to make choices that impact our users. For example, should I be choosing whether we should cache values at the expense of memory in order to make code run faster for certain cases (and perhaps slower for others)? In general I prefer to give the choice to the user, but try to do so without presenting an overwhelming API. HSSFOptimizer is probably a O(n\u00b2) operation, which could be done at the user's convenience, rather than executing O(n) comparisons every time a style is changed.\n\nCellUtil.setCellStyleProperties attempts to find a matching style before creating a new style. Maybe you could implement something along those lines, so a user can choose to eat the cost when modifying a cell style or when saving.", "id": 197914, "time": "2017-03-23T06:20:44Z", "bug_id": 60902, "creation_time": "2017-03-23T06:20:44Z", "is_private": false}, {"count": 5, "tags": [], "creator": "dollinger.florian@gmx.de", "attachment_id": null, "text": "I see, what's about another parameter \"clean\":\n\npublic XSSFCellStyle cloneCellStyle(XSSFCellStyle src, boolean clean) {...}\n\n* @param src The CellStyle that is going to be cloned\n* @param clean If set to true, this method attempts to find a already existing CellStyle in the current workbook which has the same properties as the given one.\n* @return CellStyle The created or looked up CellStyle in the current Workbook", "id": 197916, "time": "2017-03-23T06:35:29Z", "bug_id": 60902, "creation_time": "2017-03-23T06:35:29Z", "is_private": false}, {"count": 6, "tags": [], "creator": "dollinger.florian@gmx.de", "attachment_id": null, "text": "The main problem with CellUtil.setCellStyleProperties is that it is nearly useless (at least in my case) for XSSF workbooks - since only indexed colors are copied, no fonts, and so on (see bug 60895).\nI will try to fix that someday but for now I think  Workbook.cloneCellStyle() is not a bad idea?!", "id": 197917, "time": "2017-03-23T06:38:15Z", "bug_id": 60902, "creation_time": "2017-03-23T06:38:15Z", "is_private": false}, {"count": 7, "tags": [], "creator": "dollinger.florian@gmx.de", "attachment_id": 34869, "text": "Created attachment 34869\nversion 2, let the user decide if the method should search the existing styles", "id": 197927, "time": "2017-03-23T10:12:02Z", "bug_id": 60902, "creation_time": "2017-03-23T10:12:02Z", "is_private": false}, {"count": 8, "tags": [], "creator": "jmarkmurphy@apache.org", "attachment_id": null, "id": 197932, "creation_time": "2017-03-23T11:15:57Z", "time": "2017-03-23T11:15:57Z", "bug_id": 60902, "text": "(In reply to dollinger.florian from comment #6)\n> The main problem with CellUtil.setCellStyleProperties is that it is nearly\n> useless (at least in my case) for XSSF workbooks - since only indexed colors\n> are copied, no fonts, and so on (see bug 60895).\n> I will try to fix that someday but for now I think \n> Workbook.cloneCellStyle() is not a bad idea?!\n\nsetCellStyleProperties() doesn't copy anything. You have to put the properties you want in the map. that can include fonts if you choose. It does not handle colors other than indexed colors though, but that is due to the fact that HSSF only supports indexed colors, and CellUtil.setCellStyleProperties is part of the converged interface. POI would be better served if you found a way to handle the XSSF color differences in the converged interface rather than create a whole new set of methods. Probably need a way to convert themed colors to indexed colors if the user tries to use themed colors with an HSSF sheet. Other than themed colors, CellUtil.setStyleProperties() supports all the CellStyle attributes for XSSF.", "is_private": false}, {"count": 9, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 197935, "creation_time": "2017-03-23T11:47:12Z", "time": "2017-03-23T11:47:12Z", "bug_id": 60902, "text": "(In reply to Mark Murphy from comment #8)\n> setCellStyleProperties() doesn't copy anything. You have to put the\n> properties you want in the map. that can include fonts if you choose. It\n> does not handle colors other than indexed colors though, but that is due to\n> the fact that HSSF only supports indexed colors, and\n> CellUtil.setCellStyleProperties is part of the converged interface.\n\nThere's Common SS support for XSSF-style colours though - they're used in both XSSF and in some newer bits of HSSF like newer Conditional Formatting. The class you'd want to use is ExtendedColor - \nhttps://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/ExtendedColor.html\n\nNot sure if you could easily write totally generic code though, eg what happens if you give a custom red colour to HSSF? Error? Do what Excel does and down-mix to the nearest colour that XLS knows about?", "is_private": false}, {"count": 10, "attachment_id": null, "bug_id": 60902, "text": "(In reply to Nick Burch from comment #9)\n\n> Not sure if you could easily write totally generic code though, eg what\n> happens if you give a custom red colour to HSSF? Error? Do what Excel does\n> and down-mix to the nearest colour that XLS knows about?\n\nThat is one way to deal with it, but if there is nothing close, you could also use custom slots to add the color to the XLS pallet. I wonder if color matching is easy in Java. Or, there should be a suitable color matching algorithm that we can use.", "id": 197937, "time": "2017-03-23T12:36:22Z", "creator": "jmarkmurphy@apache.org", "creation_time": "2017-03-23T12:36:22Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "creator": "dollinger.florian@gmx.de", "attachment_id": null, "text": "(In reply to Mark Murphy from comment #8)\n> setCellStyleProperties() doesn't copy anything. You have to put the\n> properties you want in the map. that can include fonts if you choose. It\n> does not handle colors other than indexed colors though, but that is due to\n> the fact that HSSF only supports indexed colors, and\n> CellUtil.setCellStyleProperties is part of the converged interface. POI\n> would be better served if you found a way to handle the XSSF color\n> differences in the converged interface rather than create a whole new set of\n> methods. Probably need a way to convert themed colors to indexed colors if\n> the user tries to use themed colors with an HSSF sheet. Other than themed\n> colors, CellUtil.setStyleProperties() supports all the CellStyle attributes\n> for XSSF.\n\nYes, sorry for the inaccuracy.\n\n1) .setCellStyleProperties() is not the best choice for my use case. I want to copy cells including their properties from one workbook to another (since I am developing a table merging tool for my company).  I tried to use .cloneCellStyle() at first, but that somehow crashed the conditional formatting in the destination workbook/worksheet (bug 60845).\n\n2) I also tried .setCellStyleProperties(), but I gave it up (for now) since colors are not yet fully supported, and fonts have to be copied manually, and also because of some other problems (bug 60895)\n\n3) I then fixed the issue in 1), just to realize that, using .cloneCellStyle(), I will end up with many many redundant cellStyles. That's why i thought that a \"global\" .cloneCellStyle() is not a bad idea (bug 60902, this one)\n\n\nBut, yes - It is a good idea to extend .setCellStyleProperties() to XSSF, it would be also nice to have something like .getCellStyleProperties() - but thats a whole bunch of work and that's something I cannot do in the next weeks or months.\n\nBut what speaks against the solution above?", "id": 197946, "time": "2017-03-23T20:01:05Z", "bug_id": 60902, "creation_time": "2017-03-23T20:01:05Z", "is_private": false}, {"count": 12, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 197948, "creation_time": "2017-03-23T20:18:45Z", "time": "2017-03-23T20:18:45Z", "bug_id": 60902, "text": "For your use-case, copying from one workbook to another, I'd probably lean towards maintaining a Map<CellStyle,CellStyle> in your code + calling cloneStyleFrom for any you don't have. You'd then grab the cell style from the source workbook, grab the existing cloned style in the destination workbook if it was there, or clone+store+use if not. (Map is source workbook style to destination workbook style)\n\nSounds like we've got some bugs to solve in the existing cloneStyleFrom before that approach could work though", "is_private": false}, {"count": 13, "tags": [], "creator": "dollinger.florian@gmx.de", "attachment_id": null, "text": "(In reply to Nick Burch from comment #12)\n> For your use-case, copying from one workbook to another, I'd probably lean\n> towards maintaining a Map<CellStyle,CellStyle> in your code + calling\n> cloneStyleFrom for any you don't have. You'd then grab the cell style from\n> the source workbook, grab the existing cloned style in the destination\n> workbook if it was there, or clone+store+use if not. (Map is source workbook\n> style to destination workbook style)\n> \n> Sounds like we've got some bugs to solve in the existing cloneStyleFrom\n> before that approach could work though\n\nI will try that, thank you!\n\nBut again, what's the position of the developer team?\nIf I supply a fully functional and well integrated .cloneCellStyle() on workbooks, will you accept it?", "id": 197961, "time": "2017-03-24T06:41:01Z", "bug_id": 60902, "creation_time": "2017-03-24T06:41:01Z", "is_private": false}]
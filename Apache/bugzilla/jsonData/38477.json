[{"count": 0, "attachment_id": null, "bug_id": 38477, "is_private": false, "id": 85309, "time": "2006-02-01T16:48:03Z", "creator": "eduard.rindt@seznam.cz", "creation_time": "2006-02-01T16:48:03Z", "tags": [], "text": "Hello,\n\n I have faced a problem with building a JUnit report within a directory tree, \nwhich has a '#' character in its path. This happens for all versions of ANT I \nhave tried: 1.5.4, 1.6.2 and 1.6.5.\n\n Unfortunately, the CM Synergy (formerly Continuus) uses exactly such trouble-\nmaking names for checkout trees and hence avoiding the trouble needs quite an \neffort (if even possible).\n\n A short dive to the code exposes that the XMLResultAggregator tries to convert \na (source) file path onto a would-be URI just by adding a \"file:///\" prefix. \nHowever, the '#' is a reserved URI character and it cannot appear it an URI \npath. In turn, everything of the file path behind the cross-hatch gets cut off.\n\n An example of a failing source file path:\nD:\\ert\\workspaces\\CCM\\mmsc\\pra_mms_src01\n\\mmh#mmm1#1~pmm1#ert\\mmh\\reports\\test\\xml\\TEST-mmh.UtilTest.xml\nI can provide more detailed log-file etc., but I don't think it will show \nanything useful. If you want it anyway, just let me know.\n\nregards,\nEduard Rindt"}, {"count": 1, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "id": 85333, "time": "2006-02-02T07:50:58Z", "bug_id": 38477, "creation_time": "2006-02-02T07:50:58Z", "is_private": false, "text": "The '#' comes from the delimiters configured on the synergy server. You cant \nget rid off that by editing the workarea properties.\n\nIn the Synergy client on the root element\u00b4s (the project\u00b4s) context menu:\n\"Work Area Properties | Directory and Subdirectory Templates... (Button) | \nProjecct Subdirectory\"\nThere could be a string   %delimiter   which refers to the configured \ndelimiter. For you it\u00b4s '#' (we have '-' which makes fun in J2EE - think of web-\ninf/web.xml, ejb-jar.xml...).\n\nThe '#' is not reserved in paths, but for URIs it seperates the path to the \nfile from the location inside the file (html-anchor).\n\nThe part you said would be:\n\nXMLResultAggregator.java:0248: Document testsuiteDoc\nXMLResultAggregator.java:0249:   = builder.parse(\"file:///\" + \nfile.getAbsolutePath());\n\nMaybe FileUtils.getFileURL(File file) would help..."}, {"count": 2, "tags": [], "text": "I implemented a testcase - but it works for me. Tested with Java 1.5.0-b64 and \n1.2.1_004.\n\nhttp://marc.theaimsgroup.com/?l=ant-dev&m=113887099312187&w=2", "is_private": false, "bug_id": 38477, "id": 85335, "time": "2006-02-02T10:05:55Z", "creator": "jan@materne.de", "creation_time": "2006-02-02T10:05:55Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "eduard.rindt@seznam.cz", "text": "Of course it works, because the test treats the path as a file specification.\n\nTry to handle it a way XML parsers do, e.g. something like:\n\n  URL         url      = new URL(file:///\" + file.getAbsolutePath());\n  InputStream inStream = url.openStream();\n\n", "id": 85339, "time": "2006-02-02T12:48:13Z", "bug_id": 38477, "creation_time": "2006-02-02T12:48:13Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 38477, "text": "Ok, I did more tests\n\n    public void testSpecialSignsInHtmlPath() throws Exception {\n        executeTarget(\"testSpecialSignsInHtmlPath\");\n        File reportFile = new File(System.getProperty\n(\"root\"), \"src/etc/testcases/taskdefs/optional/junitreport/test/html# $%\u00a7&-!\nreport/index.html\");\n        // tests one the file object\n        assertTrue(\"No index.html present. Not generated?\", reportFile.exists\n() );\n        assertTrue(\"Cant read the report file.\", reportFile.canRead() );\n        assertTrue(\"File shouldnt be empty.\", reportFile.length() > 0 );\n        // conversion to URL via FileUtils like in XMLResultAggregator, not as \nsuggested in the bug report\n        URL reportUrl = new URL( FileUtils.getFileUtils().toURI\n(reportFile.getAbsolutePath()) );\n        InputStream reportStream = reportUrl.openStream();\n        assertTrue(\"This shouldnt be an empty stream.\", reportStream.available\n() > 0);\n    }\n\n\nBut that also works for me. Then I had a look at the latest source: the URI \nhandling has changed 7 weeks ago [1] so maybe that problem was (accidently :) \nresolved too.\n\nCan you build Ant from subversion and retest that on your machine?\n\n[1] \nhttp://svn.apache.org/viewcvs.cgi/ant/core/trunk/src/main/org/apache/tools/ant/t\naskdefs/optional/junit/XMLResultAggregator.java?\nrev=357131&r1=278261&r2=357131&diff_format=h\n\n\n", "id": 85386, "time": "2006-02-03T15:57:56Z", "creator": "jan@materne.de", "creation_time": "2006-02-03T15:57:56Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "eduard.rindt@seznam.cz", "text": "Bingo!\nWell, actually, I have some major good news and some minor bad news.\n\nGood news is that the recent (yesterday's) code handles the paths with a '#' \nproperly.\n\nBad news is that I see the recent code not cooperating properly with the \nJcoverage instrumentation task, which reports plenty of warnings '<Classfile \nXY> modified in the future.' It might be an improper current time passed to \nJcoverage classes or something alike, not excluding a bug in the Jcoverage.\nHowever, it is another story, isn't it?\n\nI think the case can be closed.\nThanks a lot for quick reaction and sorry for bothering :-)\n\nEduard", "id": 85589, "time": "2006-02-08T13:53:04Z", "bug_id": 38477, "creation_time": "2006-02-08T13:53:04Z", "is_private": false, "attachment_id": null}]
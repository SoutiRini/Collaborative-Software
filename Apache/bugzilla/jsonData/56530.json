[{"count": 0, "tags": [], "creator": "SebTardif@ncf.ca", "attachment_id": null, "id": 175253, "time": "2014-05-15T16:38:31Z", "bug_id": 56530, "creation_time": "2014-05-15T16:38:31Z", "is_private": false, "text": "I'm having some visible performance issue related to the use of method synchronized loadClass(String name, boolean resolve) in WebappClassLoader\n\nI see that the author or at least some of the author(s) of the class WebappClassLoader got the idea in other cases of a more specialize lock than WebappClassLoader instance.\n\nShould we just lock here using the name of the class we are looking for?\n\nAlso we should probably make the distinction between read and write.\n\nThe scenario here, is classic cache factory synchronization. So we could just copy the right locking pattern from other sources.\n\n\nMy partial threads stack dump:\n\n2014-05-14 12:36:01\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (20.45-b01 mixed mode):\n\n\"http-bio-31680-exec-57\" - Thread t@124\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t...\n\"http-bio-31680-exec-56\" - Thread t@123\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\"http-bio-31680-exec-55\" - Thread t@122\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n   Locked ownable synchronizers:\n\t- locked <444b3957> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)\n\n\"http-bio-31680-exec-54\" - Thread t@121\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:358)\n\t\n\"http-bio-31680-exec-53\" - Thread t@120\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\"http-bio-31680-exec-52\" - Thread t@119\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\"http-bio-31680-exec-51\" - Thread t@118\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.parsers.FactoryFinder.getProviderClass(FactoryFinder.java:119)\n\t\n\"http-bio-31680-exec-50\" - Thread t@117\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\n\"http-bio-31680-exec-49\" - Thread t@116\n   java.lang.Thread.State: RUNNABLE\n\tat java.lang.Class.getClassLoader0(Native Method)\n\tat java.lang.Class.getClassLoader(Class.java:589)\n\tat com.sun.xml.internal.bind.v2.model.annotation.LocatableAnnotation.create(LocatableAnnotation.java:63)\n\tat com.sun.xml.internal.bind.v2.model.annotation.RuntimeInlineAnnotationReader.getAllFieldAnnotations(RuntimeInlineAnnotationReader.java:60)\n\tat com.sun.xml.internal.bind.v2.model.annotation.RuntimeInlineAnnotationReader.getAllFieldAnnotations(RuntimeInlineAnnotationReader.java:42)\n\t\n\"http-bio-31680-exec-48\" - Thread t@115\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.bind.ContextFinder.safeLoadClass(ContextFinder.java:481)\n\t\n\"http-bio-31680-exec-47\" - Thread t@114\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.parsers.FactoryFinder.getProviderClass(FactoryFinder.java:119)\n\t\n\"http-bio-31680-exec-46\" - Thread t@113\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\"http-bio-31680-exec-45\" - Thread t@112\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:47)\n\t\n\n\"http-bio-31680-exec-44\" - Thread t@111\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:358)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.newInstance(ObjectFactory.java:303)\n\t\n\n\"http-bio-31680-exec-43\" - Thread t@110\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:358)\n\t\n\n\"http-bio-31680-exec-42\" - Thread t@109\n   java.lang.Thread.State: TIMED_WAITING\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait for <2aa68578> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)\n\tat java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:424)\n\tat org.apache.tomcat.util.threads.TaskQueue.poll(TaskQueue.java:86)\n\tat org.apache.tomcat.util.threads.TaskQueue.poll(TaskQueue.java:32)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:955)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:917)\n\tat java.lang.Thread.run(Thread.java:662)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"http-bio-31680-exec-40\" - Thread t@107\n   java.lang.Thread.State: TIMED_WAITING\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait for <2aa68578> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)\n\tat java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:424)\n\tat org.apache.tomcat.util.threads.TaskQueue.poll(TaskQueue.java:86)\n\tat org.apache.tomcat.util.threads.TaskQueue.poll(TaskQueue.java:32)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:955)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:917)\n\tat java.lang.Thread.run(Thread.java:662)\n\n   Locked ownable synchronizers:\n\t- None\n\n\"http-bio-31680-exec-39\" - Thread t@106\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:358)\n\t\n\n\"http-bio-31680-exec-38\" - Thread t@105\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.parsers.FactoryFinder.getProviderClass(FactoryFinder.java:119)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:154)\n\tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:241)\n\t\n\n\"http-bio-31680-exec-37\" - Thread t@104\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:47)\n\tat com.sun.xml.internal.bind.v2.model.impl.ModelBuilder.loadObjectFactory(ModelBuilder.java:249)\n\t\n\n\"http-bio-31680-exec-36\" - Thread t@103\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:358)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.newInstance(ObjectFactory.java:303)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.newInstance(ObjectFactory.java:289)\n\t\n\n\"http-bio-31680-exec-35\" - Thread t@102\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\n\"http-bio-31680-exec-34\" - Thread t@101\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\"http-bio-31680-exec-33\" - Thread t@100\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\n\"http-bio-31680-exec-32\" - Thread t@99\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:358)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.newInstance(ObjectFactory.java:303)\n\t\n\n\"http-bio-31680-exec-31\" - Thread t@98\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.parsers.FactoryFinder.getProviderClass(FactoryFinder.java:119)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:154)\n\t\n\n\"http-bio-31680-exec-30\" - Thread t@97\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.bind.ContextFinder.safeLoadClass(ContextFinder.java:481)\n\tat javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:185)\n\t\n\n\"http-bio-31680-exec-29\" - Thread t@96\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\t\n\n\"http-bio-31680-exec-28\" - Thread t@95\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.parsers.FactoryFinder.getProviderClass(FactoryFinder.java:119)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:154)\n\t\n\n\"http-bio-31680-exec-27\" - Thread t@94\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat javax.xml.parsers.FactoryFinder.getProviderClass(FactoryFinder.java:119)\n\t\n\n\"http-bio-31680-exec-26\" - Thread t@93\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:505)\n\tat com.sun.xml.internal.bind.v2.model.nav.ReflectionNavigator.findClass(ReflectionNavigator.java:47)\n\t\n\"http-bio-31680-exec-25\" - Thread t@92\n   java.lang.Thread.State: BLOCKED\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1605)\n\t- waiting to lock <264d40df> (a org.apache.catalina.loader.WebappClassLoader) owned by \"http-bio-31680-exec-41\" t@108\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.findProviderClass(ObjectFactory.java:358)\n\tat com.sun.org.apache.xerces.internal.utils.ObjectFactory.newInstance(ObjectFactory.java:303)\n\t\n.. and more"}, {"count": 1, "attachment_id": null, "creator": "SebTardif@ncf.ca", "is_private": false, "id": 175254, "time": "2014-05-15T16:39:37Z", "bug_id": 56530, "creation_time": "2014-05-15T16:39:37Z", "tags": [], "text": "The same exact application didn't have the issue with GlassFish 3.x latest."}, {"count": 2, "attachment_id": null, "creator": "SebTardif@ncf.ca", "text": "The same issues happen to others -> https://groups.google.com/forum/#!topic/optiq-dev/amCEv1psDrI", "id": 175258, "time": "2014-05-15T19:25:21Z", "bug_id": 56530, "creation_time": "2014-05-15T19:25:21Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "The partial stack trace is largely useless since it does not show what the critical thread (http-bio-31680-exec-41) is doing.\n\nWhen considering any proposed changes, keep this in mind:\nhttp://svn.apache.org/viewvc?view=revision&revision=927565", "attachment_id": null, "bug_id": 56530, "id": 175270, "time": "2014-05-16T11:33:31Z", "creator": "markt@apache.org", "creation_time": "2014-05-16T11:33:31Z", "is_private": false}, {"count": 4, "tags": [], "creator": "SebTardif@ncf.ca", "attachment_id": null, "id": 175273, "time": "2014-05-16T12:24:42Z", "bug_id": 56530, "creation_time": "2014-05-16T12:24:42Z", "is_private": false, "text": "Thanks for the link. It does mentions for an attempt to provide parallel classloading for Tomcat 7 but that doesn't seem to have happened. \n\nhttp-bio-31680-exec-41 is running loading a class. Any of the stack below will come to that state at some point. So you can pick anyone as a representative of http-bio-31680-exec-41. My application does work, it's just 15x slower than with GlassFish.\n\nThe thread dump was provided to show that we do have different code doing class lookup, about different classes, all waiting. The code triggering loading is not custom but JDK JAXB.\n\nMy understanding is that the problem is well understood, so a use case is not adding anything here. Everybody know it's creating problems, that doesn't look good, but it have been declared too hard to fix, and so progress stopped 4 years ago.\n\nPrevious deadlock issues may have been related to Java JDK version before 7 -> http://docs.oracle.com/javase/7/docs/technotes/guides/lang/cl-mt.html\n\nOptimized class loader -> https://github.com/jboss-modules/jboss-modules/blob/master/src/main/java/org/jboss/modules/ConcurrentClassLoader.java\n\nJava 7 was release July 28, 2011."}, {"count": 5, "tags": [], "text": "The implementation of GlassFish \"working\" on JDK 6, is avoiding \"systematic\" synchronization on the instance, and so that seems to have been enough to be fast, see http://grepcode.com/file/repo1.maven.org/maven2/org.glassfish.web/war-util/3.0/org/glassfish/web/loader/WebappClassLoader.java\n\nIn other words, they have at least tried to synchronized the smaller block as possible in all cases, and also with dubious construct, used some optimization similar to read/write lock.", "is_private": false, "bug_id": 56530, "id": 175274, "time": "2014-05-16T12:41:45Z", "creator": "SebTardif@ncf.ca", "creation_time": "2014-05-16T12:41:45Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 56530, "is_private": false, "text": "Again, please provide the full stack trace. It might tell us something it doesn't tell you.\n\nTomcat 7 has to run on Java 6 and experience to date has been that synchronizing on anything other than the method leads to problems for a small number if users.\n\nTomcat 8 is where there is scope to revisit parallel loading.", "id": 175278, "time": "2014-05-16T17:34:15Z", "creator": "markt@apache.org", "creation_time": "2014-05-16T17:34:15Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "text": "I've done some refactoring of WebappClassLoader and there is now also a ParallelWebappClassLoader that uses a lock based on the class name. This will be included in 8.0.13 onward.", "id": 177623, "attachment_id": null, "bug_id": 56530, "creation_time": "2014-09-08T11:14:29Z", "time": "2014-09-08T11:14:29Z", "is_private": false}, {"count": 8, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 177674, "time": "2014-09-09T14:42:33Z", "bug_id": 56530, "creation_time": "2014-09-09T14:42:33Z", "is_private": false, "text": "Just some documentation notes. As a reference about this new feature.\n\n1. This feature is off by default.\n2. To enable it, add the following XML element\neither to the context file of your web application,\nor to the global conf/context.xml (to enable this for all webapps by default):\n\n    <Loader loaderClass=\"org.apache.catalina.loader.ParallelWebappClassLoader\" />\n\nIt works for me with JDK 7u67.\n\nOnce 8.0.13 (or later) is officially released, the documentation will be at\n\nhttp://tomcat.apache.org/tomcat-8.0-doc/config/loader.html\n\n3. MBeans for the new class are visible in jconsole application, under Catalina/ParallelWebappClassloader. An ObjectName looks like\n\nCatalina:type=ParallelWebappClassLoader,host=localhost,context=/examples"}, {"count": 9, "tags": [], "creator": "stepan.melnik@gmail.com", "text": "Still not sure the problem is solved.\nThe problem tested in apache-tomcat-8.0.18 with ParallelWebappClassLoader loader. \nAnd apache-tomcat-7.0.35 has much better performance.\n\nDo you have unit tests to check where is a bottleneck? or there is better idea how to fix the problem with slow classloading?\n\n\nJConsole shows that org.apache.catalina.loader.WebappClassLoaderBase.loadClass is too slow in apache-tomcat-8.0.18:\n\nName: http-nio-8080-exec-20\nState: BLOCKED on org.apache.catalina.loader.WebappClassLoader@39d950df owned by: http-nio-8080-exec-80\nTotal blocked: 2\u00a0402  Total waited: 20\n\nStack trace: \norg.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1190)\norg.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1157)\njavax.el.ImportHandler.findClass(ImportHandler.java:196)\njavax.el.ImportHandler.resolveClass(ImportHandler.java:169)\njavax.servlet.jsp.el.ScopedAttributeELResolver.getValue(ScopedAttributeELResolver.java:62)\norg.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:110)\norg.apache.el.parser.AstIdentifier.getValue(AstIdentifier.java:80)\norg.apache.el.parser.AstEmpty.getValue(AstEmpty.java:46)\norg.apache.el.parser.AstNot.getValue(AstNot.java:43)\norg.apache.el.parser.AstAnd.getValue(AstAnd.java:37)\norg.apache.el.parser.AstOr.getValue(AstOr.java:42)\norg.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:184)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:936)\norg.apache.jsp.jsp.modules.category.breadCrumbs_jsp._jspx_meth_c_005fif_005f2(breadCrumbs_jsp.java:848)\norg.apache.jsp.jsp.modules.category.breadCrumbs_jsp._jspx_meth_v_005flist_005f0(breadCrumbs_jsp.java:817)\norg.apache.jsp.jsp.modules.category.breadCrumbs_jsp._jspService(breadCrumbs_jsp.java:221)\norg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)", "id": 180739, "attachment_id": null, "bug_id": 56530, "creation_time": "2015-02-03T16:49:57Z", "time": "2015-02-03T16:49:57Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 56530, "is_private": false, "text": "The stack trace shows you aren't using parallel class loading. The lock is on the ClassLoader rather than a class specific object.", "id": 180740, "time": "2015-02-03T18:08:32Z", "creator": "markt@apache.org", "creation_time": "2015-02-03T18:08:32Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "The problem occurred in eclipse and context.xml was not loaded properly.\n\nRight now everything works good.\nThanks for the help.", "is_private": false, "bug_id": 56530, "id": 180741, "time": "2015-02-03T18:52:28Z", "creator": "stepan.melnik@gmail.com", "creation_time": "2015-02-03T18:52:28Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "koturano@amazon.com", "attachment_id": null, "id": 181613, "time": "2015-03-09T20:37:48Z", "bug_id": 56530, "creation_time": "2015-03-09T20:37:48Z", "is_private": false, "text": "Hi, is it possible to port this change to Tomcat 7 in /tomcat/tc7.0.x/trunk/java/org/apache/catalina/loader/WebappClassLoader.java ?"}, {"count": 13, "tags": [], "creator": "markt@apache.org", "text": "No. It requires Java 7 and Tomcat 7 has to run on Java 6.", "id": 181615, "time": "2015-03-09T21:35:40Z", "bug_id": 56530, "creation_time": "2015-03-09T21:35:40Z", "is_private": false, "attachment_id": null}, {"text": "(In reply to Mark Thomas from comment #13)\n> No. It requires Java 7 and Tomcat 7 has to run on Java 6.\n\nCould we wrap some of this capability in Jre7Compat.isSupported()?\n\nLots of folks are running Tomcat 7 on Java 7+. Java 6 is EOL so ... pretty much everybody should have moved up by now.", "tags": [], "bug_id": 56530, "attachment_id": null, "count": 14, "id": 181616, "time": "2015-03-09T21:41:38Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-09T21:41:38Z", "is_private": false}, {"count": 15, "attachment_id": null, "creator": "markt@apache.org", "text": "Oracle's public support has ended for Java 6 but other vendors may have different policies and if you pay Oracle $ you can still get support, updates etc. (and lots of companies do).\n\nUsing JreCompat looks doable. The two key questions would be how invasive is the patch and what is the impact on performance.", "id": 181618, "time": "2015-03-09T22:36:42Z", "bug_id": 56530, "creation_time": "2015-03-09T22:36:42Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "bug_id": 56530, "is_private": false, "text": "*** Bug 57681 has been marked as a duplicate of this bug. ***", "id": 181620, "time": "2015-03-09T22:37:24Z", "creator": "markt@apache.org", "creation_time": "2015-03-09T22:37:24Z", "attachment_id": null}, {"count": 17, "attachment_id": null, "creator": "koturano@amazon.com", "text": "Please consider not only the performance impact but also stability of web application. I am seeing 2-10 sec pauses for all requests in my web application caused by some bad code in just one request.", "id": 181624, "time": "2015-03-09T23:13:37Z", "bug_id": 56530, "creation_time": "2015-03-09T23:13:37Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "text": "The performance hit would only occur during class loading. By the time a few requests have been processed, class loading should have settled-down quite a bit.\n\nSome thoughts about performance:\n\n1. This is mostly introducing a single \"if\" and a test against a static final field (Jre7Compat.forLanguageTagMethod). The JIT will likely inline that method.\n\n2. If the branch is not tolerable at runtime, perhaps the branch can be executed a single time to install a delegate adapter, something like this:\n\nWebappClassLoader:\n\npublic static Java7 extends WebappClassLoader\n\n // etc, do Java 7 stuff\n\npublic static Java6 extends WebappClassLoader\n\n // etc, do Java 6 stuff\n\n<init>:\n\n  if(JreCompat.getInstance().isJre7Supported())\n   delegate = new Java7ClassLoader();\n  else\n   delegate = new Java6ClassLoader();\n\nloadClass():\n\n  return delegate.loadClass();\n\nOr, if you don't want to use Java method dispatch because delegation is too slow, you can use WebappClassLoader like a factory like this:\n\nWebappClassLoader:\n\ngetInstance():\n\n  return JreCompat.getInstance().isJre7Supported() ? new Java7() : new Java6();\n\nReally, synchronization is going to dominate the performance equation here and not the presence (or absence) of a trivial null-check.", "attachment_id": null, "bug_id": 56530, "id": 181632, "time": "2015-03-10T14:54:51Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T14:54:51Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 56530, "is_private": false, "text": "(In reply to Christopher Schultz from comment #18)\n> \n> 2. If the branch is not tolerable at runtime, perhaps the branch can be\n> executed a single time to install a delegate adapter, something like this:\n> \n\nThis cannot be solved with an adapter that is installed atop the current WebappClassLoader class.\n\nSee [1]. The class itself and all of its parent classes must be registered as parallel-capable.\n\nThis needs\n1. Refactoring, involving extraction of common parent class.\n\n2. Implementation of alternative class loader class that is parallel-capable.\n\nThe default implementation (WebappClassLoader) must stay with being non parallel capable. The common parent class must be registered as parallel-capable.\n\nIf ClassLoader.registerAsParallelCapable() is called via reflection, I wonder whether the registerAsParallelCapable() method can correctly determine the calling class. We are not calling the method directly, but via reflection APIs. It needs a proof of concept.\n\n3. Testing, testing, testing...\n\n\n[1] http://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html#registerAsParallelCapable%28%29", "id": 181636, "time": "2015-03-10T15:25:18Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-03-10T15:25:18Z", "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 56530, "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #19)\n> (In reply to Christopher Schultz from comment #18)\n> > \n> > 2. If the branch is not tolerable at runtime, perhaps the branch can be\n> > executed a single time to install a delegate adapter, something like this:\n> > \n> \n> This cannot be solved with an adapter that is installed atop the current\n> WebappClassLoader class.\n> \n> See [1]. The class itself and all of its parent classes must be registered\n> as parallel-capable.\n\nAah, yes; I had forgotten about that. Well, that makes things ugly.\n\n> This needs\n> 1. Refactoring, involving extraction of common parent class.\n> \n> 2. Implementation of alternative class loader class that is parallel-capable.\n> \n> The default implementation (WebappClassLoader) must stay with being non\n> parallel capable. The common parent class must be registered as\n> parallel-capable.\n> \n> If ClassLoader.registerAsParallelCapable() is called via reflection, I\n> wonder whether the registerAsParallelCapable() method can correctly\n> determine the calling class. We are not calling the method directly, but via\n> reflection APIs. It needs a proof of concept.\n\nIf registerAsParallelCapable can't be called via reflection, then it means that both Java 6 and Java 7 are required to build Tomcat 7.\n\nWe already require Java 7 for building the (optional) WebSocket components. Could this simply be added to that list?\n\n> 3. Testing, testing, testing...\n\nSince the \"regular\" WebappClassLoader is still available (and the default CL), I think it's okay to mark it as an experimental feature and allow users to try it out.", "id": 181637, "time": "2015-03-10T15:34:41Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T15:34:41Z", "attachment_id": null}, {"count": 21, "tags": [], "creator": "koturano@amazon.com", "attachment_id": null, "id": 181641, "time": "2015-03-10T16:20:55Z", "bug_id": 56530, "creation_time": "2015-03-10T16:20:55Z", "is_private": false, "text": "Is there a use case were WebappClassLoader must not be parallel? \nIs it an option to re-implement jdk1.7 method java.lang.ClassLoader#getClassLoadingLock(String) directly in WebappClassLoader for Tomcat7.0?\nI attached a patch that solves my Tomcat7.0 problem with waiting on lock for 3-10 sec in https://bz.apache.org/bugzilla/show_bug.cgi?id=57681"}, {"count": 22, "attachment_id": null, "creator": "markt@apache.org", "text": "(In reply to Alex Koturanov from comment #21)\n> Is there a use case were WebappClassLoader must not be parallel?\n\nParallel class loading has proved to be unreliable in the past. Until the stability of parallel loading is demonstrated by experience, serial loading needs to remain the default.\n \n> Is it an option to re-implement jdk1.7 method\n> java.lang.ClassLoader#getClassLoadingLock(String) directly in\n> WebappClassLoader for Tomcat7.0?\n\nNo.\n\n> I attached a patch that solves my Tomcat7.0 problem with waiting on lock for\n> 3-10 sec in https://bz.apache.org/bugzilla/show_bug.cgi?id=57681\n\nAs I commented on that patch, that won't work.", "id": 181648, "time": "2015-03-10T17:17:26Z", "bug_id": 56530, "creation_time": "2015-03-10T17:17:26Z", "tags": [], "is_private": false}, {"count": 23, "tags": [], "text": "(In reply to Christopher Schultz from comment #20)\n> (In reply to Konstantin Kolinko from comment #19)\n\n> > This needs\n> > 1. Refactoring, involving extraction of common parent class.\n> > \n> > 2. Implementation of alternative class loader class that is parallel-capable.\n> > \n> > The default implementation (WebappClassLoader) must stay with being non\n> > parallel capable. The common parent class must be registered as\n> > parallel-capable.\n> > \n> > If ClassLoader.registerAsParallelCapable() is called via reflection, I\n> > wonder whether the registerAsParallelCapable() method can correctly\n> > determine the calling class. We are not calling the method directly, but via\n> > reflection APIs. It needs a proof of concept.\n> \n> If registerAsParallelCapable can't be called via reflection, then it means\n> that both Java 6 and Java 7 are required to build Tomcat 7.\n\nIf we are going to have to play reflection tricks then we might was well go all the way, change the access permissions and call ParallelLoaders.register() directly.\n\n> We already require Java 7 for building the (optional) WebSocket components.\n> Could this simply be added to that list?\n\nI'd really rather not. WebSocket is optional. The web application class loader is a little more fundamental.\n\n> > 3. Testing, testing, testing...\n> \n> Since the \"regular\" WebappClassLoader is still available (and the default\n> CL), I think it's okay to mark it as an experimental feature and allow users\n> to try it out.\n\nNo objections to that. With the usual caveats about minimal impact on the existing implementation of course.", "is_private": false, "bug_id": 56530, "id": 181649, "time": "2015-03-10T17:20:40Z", "creator": "markt@apache.org", "creation_time": "2015-03-10T17:20:40Z", "attachment_id": null}, {"count": 24, "tags": [], "creator": "koturano@amazon.com", "text": "(In reply to Mark Thomas from comment #22)\n> (In reply to Alex Koturanov from comment #21)\n> > I attached a patch that solves my Tomcat7.0 problem with waiting on lock for\n> > 3-10 sec in https://bz.apache.org/bugzilla/show_bug.cgi?id=57681\n> \n> As I commented on that patch, that won't work.\nA bit more details would be very helpful.", "id": 181650, "time": "2015-03-10T17:42:40Z", "bug_id": 56530, "creation_time": "2015-03-10T17:42:40Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "text": "We'd recently migrated from Weblogic 11g to Tomcat 8/Java 8.  We very quickly found this to be a critical problem as well in highly concurrent environment.  Glad to have come across it and have the remediation already available.  Curious as to why this wouldn't (at least at some point) be made the default?", "is_private": false, "bug_id": 56530, "id": 186851, "time": "2015-12-08T23:52:39Z", "creator": "jonesgav@oildex.com", "creation_time": "2015-12-08T23:52:39Z", "attachment_id": null}]
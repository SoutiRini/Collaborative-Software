[{"count": 0, "tags": [], "bug_id": 40888, "attachment_id": null, "id": 95399, "creation_time": "2006-11-03T07:17:05Z", "time": "2006-11-03T07:17:05Z", "creator": "czegledi.laszlo@freemail.hu", "text": "I have a problem using DailyRollingFileAppender with weekly rotation.\nThe problem is that the appender rolls over every month instead of every week.\nThe date pattern is:\nlog4j.appender.A1.DatePattern='.'yyyy-ww\nlog4j.appender.A1=org.apache.log4j.DailyRollingFileAppender\n\nLog4j version: 1.2.14, java 1.5.0_06-b05 on Fedora Core 5.\n\nOS environment settings:\nLANG=hu_HU\nTZ=Europe/Budapest\n\n\nI debugged the DailyRollingFileAppender and found that when determining the\nrotation period, method computeCheckPeriod() returns TOP_OF_MONTH instead of\nTOP_OF_WEEK. \nThe cause probably is that the getFirstDayOfWeek() call in\nRollingCalendar.getNextCheckDate() returns Sunday instead of Monday as it should\nin Hungary and in most part of Europe. Because the epoch and the first Sunday\nafter the epoch are on the same week, the method computeCheckPeriod() advances\nto the next period type, monthly rotation.\nReplacing getFirstDayOfWeek() with Calendar.getInstance().getFirstDayOfWeek()\nresolves the problem for us.\n\nThis simple test program logs the week number within the current year, and the\nlog should be rotates when a new week starts (if you change the system time).\n \nimport java.util.GregorianCalendar;\nimport org.apache.log4j.Logger;\n\npublic class LogTest \n{\n  private static final Logger log = Logger.getLogger(LogTest.class);\n  \n  public static void main(String args[]) \n  {\n      GregorianCalendar cal = new GregorianCalendar();\n      System.out.println(\"Sunday: \" + cal.SUNDAY);\n      System.out.println(\"Monday: \" + cal.MONDAY);\n      System.out.println(\"First day: \" + cal.getFirstDayOfWeek());\n      System.out.println(\"TimeZone: \" + cal.getTimeZone().getDisplayName());\n      try {\n          for(int i = 0; i < 100;i++) {\n              cal = new GregorianCalendar();\n              log.warn(\"Hello, \" + \"week number: \" + cal.get(cal.WEEK_OF_YEAR));\n              Thread.currentThread().sleep(10 * 1000); // sleep 10 seconds\n              System.out.println(i);\n          }\n      }\n      catch(Exception ex) { log.error(ex); }\n  }\n} \n\n\nI tested with the following settings and got the same result:\nLANG=en_GB\nTZ=Europe/London\n\nThanks,\nLaszlo", "is_private": false}, {"count": 1, "tags": [], "creator": "thorbjoern@gmail.com", "attachment_id": null, "is_private": false, "id": 118138, "time": "2008-06-30T14:18:02Z", "bug_id": 40888, "creation_time": "2008-06-30T14:18:02Z", "text": "This does not appear to have been addressed yet.  The code in question is that\n\nthe \"roll over\"-time is calculated to be\n\n    case DailyRollingFileAppender.TOP_OF_WEEK:\n\tthis.set(Calendar.DAY_OF_WEEK, getFirstDayOfWeek());\n\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\tthis.set(Calendar.MINUTE, 0);\n\tthis.set(Calendar.SECOND, 0);\n\tthis.set(Calendar.MILLISECOND, 0);\n\tthis.add(Calendar.WEEK_OF_YEAR, 1);\n\tbreak;\n\n\nand the loop is\n\n     for(int i = TOP_OF_MINUTE; i <= TOP_OF_MONTH; i++) {\n\tSimpleDateFormat simpleDateFormat = new SimpleDateFormat(datePattern);\n\tsimpleDateFormat.setTimeZone(gmtTimeZone); // do all date formatting in GMT\n\tString r0 = simpleDateFormat.format(epoch);\n\trollingCalendar.setType(i);\n\tDate next = new Date(rollingCalendar.getNextCheckMillis(epoch));\n\tString r1 =  simpleDateFormat.format(next);\n\t//System.out.println(\"Type = \"+i+\", r0 = \"+r0+\", r1 = \"+r1);\n\tif(r0 != null && r1 != null && !r0.equals(r1)) {\n\t  return i;\n\t}\n      }\n \nThe r1 and r0 will be identical in the case described by the original poster.\n\nWill it be sufficient in all cases to just ask the Calendar what the first day of the week is as suggested in the bug report?"}, {"attachment_id": 22420, "tags": [], "creator": "thorbjoern@gmail.com", "text": "Created attachment 22420\nremoval of locale to rollingcalendar", "count": 2, "id": 119646, "time": "2008-08-09T09:13:35Z", "bug_id": 40888, "creation_time": "2008-08-09T09:13:35Z", "is_private": false}, {"count": 3, "tags": [], "creator": "thorbjoern@gmail.com", "is_private": false, "text": "The problem is that RollingCalendar is using Locale.ENGLISH, and SimpleDateFormatter is using the default locale from the surroundings.\n\nThe default locale for the original poster has first day of the week to Monday, but RollingCalendar calculated to Sunday which is the first day of the week in Locale.English.  Hence this fails.\n\nThe patch sets RollingCalendar to use the default locale too.\n\n(I am in a similar locale so I see the bug too)\n\n", "id": 119647, "time": "2008-08-09T09:21:06Z", "bug_id": 40888, "creation_time": "2008-08-09T09:21:06Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 40888, "attachment_id": 22421, "id": 119649, "time": "2008-08-09T09:34:45Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-09T09:34:45Z", "is_private": false, "text": "Created attachment 22421\ntest case"}, {"count": 5, "tags": [], "creator": "carnold@apache.org", "is_private": false, "id": 119765, "creation_time": "2008-08-12T15:06:25Z", "time": "2008-08-12T15:06:25Z", "bug_id": 40888, "text": "Committed slightly different change in 685338.  Attached patches changed the signature of RollingCalendar which is not private so would be considered a breaking API change.  Was simpler just to pass Locale.getDefault() instead of Locale.ENGLISH in the call to new RollingCalendar.", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 40888, "text": "*** Bug 46851 has been marked as a duplicate of this bug. ***", "id": 131054, "time": "2009-10-10T11:24:26Z", "creator": "carnold@apache.org", "creation_time": "2009-10-10T11:24:26Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "gobrien@obriensrus.co.uk", "attachment_id": null, "id": 131258, "time": "2009-10-21T01:49:38Z", "bug_id": 48032, "creation_time": "2009-10-21T01:49:38Z", "is_private": false, "text": "The intermediate file format that is passed between the formatter and the renderer includes an xml:space=preserve attribute on every element.  Which is wasting memory, and cpu time as this could be set at the page element level or higher, as the spec details (see below), all elements within the element that defines xml:space=preserver inherit the option, unless overridden.  As for the other non text elements they don't care so we can save the processing and memory of the extra attrubute entries.\n\n==== XML Spec ======\n\nhttp://www.w3.org/TR/REC-xml/\n\nFrom Section 2.10\n\nThe value \"default\" signals that applications' default white-space processing modes are acceptable for this element; the value \"preserve\" indicates the intent that applications preserve all the white space. This declared intent is considered to apply to all elements within the content of the element where it is specified, unless overridden with another instance of the xml:space attribute."}, {"count": 1, "text": "I've played a bit with the IF serializer to try and find out whether setting xml:text higher up in the hierarchy would make any difference. It turns out that there is no gain in processing time. There are other factors that come into play and that have more impact on the process.\n\nHowever, there is a non-negligible gain in file size, of around 13%. Surprisingly enough that difference doesn't increase with the number of pages in the document. It's likely to be the biggest gain we can have, as I used a A4 document full of text (almost no empty space, no image) for the test. So I guess it's worth doing the change, if only to save on disk space (although that will be significant only if you store a lot of intermediate files).\n\nQuestion remains: is there any risk that other elements containing text may be affected by that xml:space? Also, is there any testing framework for the intermediate format, to test that change?\n\nVincent", "bug_id": 48032, "attachment_id": null, "id": 131566, "time": "2009-11-02T04:32:54Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-11-02T04:32:54Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "jeremias@apache.org", "text": "> Question remains: is there any risk that other elements containing text may be\n> affected by that xml:space?\n\nTo answer that I want to mention why I added the xml:space=preserve in the first place: Editing IF in an XML editor frequently messed up the formatting because of pretty-printing. FOP itself doesn't really profit from it (and can do without). The default behaviour is application-specific which is fine in FOP, but an XML editor doesn't know about that except if there's an XML Schema active in the XML editor which could supply the intended default behaviour. But I haven't tested whether that would really work.\n\n> Also, is there any testing framework for the intermediate format, to test that > change?\n\nThe only thing we do now is test using XPath statements and I don't think I've written any test that looks for the xml:space attribute. Essentially, you can simply remove the xml:space and the tests will run through as before. As said above, the only case where xml:space is useful is when it comes to manually editing the IF in an XML editor. It avoids breaking the content.", "id": 131575, "time": "2009-11-02T08:13:48Z", "bug_id": 48032, "creation_time": "2009-11-02T08:13:48Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "vhennebert@gmail.com", "text": "(In reply to comment #2)\n> > Question remains: is there any risk that other elements containing text may be\n> > affected by that xml:space?\n> \n> To answer that I want to mention why I added the xml:space=preserve in the\n> first place: Editing IF in an XML editor frequently messed up the formatting\n> because of pretty-printing.\n\nA comment in the source code explaining that would have been welcome.\n\n\n> FOP itself doesn't really profit from it (and can\n> do without). The default behaviour is application-specific which is fine in\n> FOP, but an XML editor doesn't know about that except if there's an XML Schema\n> active in the XML editor which could supply the intended default behaviour. But\n> I haven't tested whether that would really work.\n\nSo IIUC the xml:space attribute won't even be honoured by the XML editor if the schema is not associated with the document when it's loaded? Unless some code has been written in the editor to recognize the standard attributes in the xml namespace, even if not backed by a schema.\n\n\n> > Also, is there any testing framework for the intermediate format, to test that > change?\n> \n> The only thing we do now is test using XPath statements and I don't think I've\n> written any test that looks for the xml:space attribute. Essentially, you can\n> simply remove the xml:space and the tests will run through as before. As said\n> above, the only case where xml:space is useful is when it comes to manually\n> editing the IF in an XML editor. It avoids breaking the content.\n\nIf nobody objects I'm going to move the definition of the xml:space attribute to the <document> element. If its purpose only is to avoid overzealous pretty-printing by XML editors, FOP wouldn't be affected and those editors should still behave properly.\n\nVincent", "id": 131629, "time": "2009-11-03T09:33:18Z", "bug_id": 48032, "creation_time": "2009-11-03T09:33:18Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "Done in rev. 834020:\nhttp://svn.apache.org/viewvc?rev=834020&view=rev\n\nI chose to put the attribute on the <page-sequence> element instead. Most documents don't have more than a handful of page sequences anyway.\n\nVincent", "bug_id": 48032, "attachment_id": null, "id": 131809, "time": "2009-11-09T03:24:49Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-11-09T03:24:49Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "gadams@apache.org", "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 156180, "time": "2012-04-01T07:02:57Z", "bug_id": 48032, "creation_time": "2012-04-01T07:02:57Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 56452, "text": "When the following environment set, crash occured.\n* mod_jk 1.2.39 or latter\n* IPv6\n* JkLogLevel debug\n\nI think char buf[64] is too small.\n\n---mod_jk.log\n[Tue Apr 22 12:30:44.350 2014] [39832:140226284476384] [debug] jk_open_socket::jk_connect.c (766):\n socket 14 [2001:c0a8:1424:0:a00:1f49:::59892 -> 2001:c0a8:6422:0:3a35:3938:3932:0:8009] connected\n---\n\n---\n$ gdb /usr/sbin/httpd core.39832\n:\n(gdb) thread apply all backtrace\n:\n#5  0x00007f88ef48a587 in jk_open_socket (addr=<value optimized out>, keepalive=0, timeout=5, connect_timeout=5000,\n    sock_buf=<value optimized out>, l=0x7f88fbe832b8) at jk_connect.c:771\n#6  0x00007f88ef4a9055 in ajp_connect_to_endpoint (ae=0x7f88fbedb4a0, l=0x7f88fbe832b8) at jk_ajp_common.c:1011\n#7  0x00007f88ef4a94e9 in ajp_send_request (e=<value optimized out>, s=0x7fff4a6122d0, l=0x7f88fbe832b8,\n    ae=0x7f88fbedb4a0, op=0x7fff4a611090) at jk_ajp_common.c:1662\n:\n(gdb) f 5\n#5  0x00007f88ef48a587 in jk_open_socket (addr=<value optimized out>, keepalive=0, timeout=5, connect_timeout=5000,\n    sock_buf=<value optimized out>, l=0x7f88fbe832b8) at jk_connect.c:771\nwarning: Source file is more recent than executable.\n771\t}\n(gdb) l\n766\t            jk_log(l, JK_LOG_DEBUG, \"socket %d [%s] connected\",\n767\t                   sd, jk_dump_sinfo(sd, buf));\n768\t    }\n:\n---\n\n\n---jk_connect.c\njk_sock_t jk_open_socket(jk_sockaddr_t *addr, int keepalive,\n                         int timeout, int connect_timeout,\n                         int sock_buf, jk_logger_t *l)\n{\n    char buf[64];", "id": 174835, "time": "2014-04-24T08:54:16Z", "creator": "shimizuhiroto123@gmail.com", "creation_time": "2014-04-24T08:54:16Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Agreed.\n\nThe use of 'buf' when passed-into inet_ntop4|6 inside jk_dump_sinfo is also not sane: the final argument should be the length of the buffer available. It is blindly set to 16 (for IPv4) or 64 (for IPv6) instead of sending the real value which will be (64 - ps).\n\nUnfortunately, jk_dump_sinfo has no way of knowing the size of the buffer being passed to it. That could easily be fixed, as jk_dump_sinfo is only used internally to jk_connect.c (I don't know if anyone bothers using mod_jk as a library for anything else).\n\nI'm not increasing the severity of this bug to MAJOR because while it's a buffer-overrun crash, it only happens when in DEBUG mode.", "is_private": false, "id": 174858, "creator": "chris@christopherschultz.net", "time": "2014-04-24T21:11:57Z", "bug_id": 56452, "creation_time": "2014-04-24T21:11:57Z", "attachment_id": null}, {"count": 2, "attachment_id": 31557, "creator": "chris@christopherschultz.net", "text": "Created attachment 31557\nProposed patch (against mod_jk/trunk)\n\nI have raised the size of buf from 64 to 100 characters. The message looks like it will need 96 bytes for a complete IPv6 message (e.g. 2001:0db8:0000:0000:0000:ff00:0042:8329:65556 -> 2001:0db8:0000:0000:0000:ff00:0042:8329:65535 + \\0), so I just rounded up to 100 bytes.\n\nI've also added proper length-tracking to the buffer and more protection against overruns.", "id": 174863, "time": "2014-04-24T21:39:20Z", "bug_id": 56452, "creation_time": "2014-04-24T21:39:20Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 56452, "is_private": false, "text": "(In reply to Christopher Schultz from comment #2)\n> Created attachment 31557 [details]\n> Proposed patch (against mod_jk/trunk)\n> \n> I have raised the size of buf from 64 to 100 characters. The message looks\n> like it will need 96 bytes for a complete IPv6 message (e.g.\n> 2001:0db8:0000:0000:0000:ff00:0042:8329:65556 ->\n> 2001:0db8:0000:0000:0000:ff00:0042:8329:65535 + \\0), so I just rounded up to\n> 100 bytes.\n> \n> I've also added proper length-tracking to the buffer and more protection\n> against overruns.\n\nThe following discussion says that IPv6 address needs maximum 45 characters, not 39. So you would need 12 bytes more than 96 = 108.\n\nhttp://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address\n\nAlso see tmp buffer size here:\nhttp://svn.apache.org/viewvc/apr/apr/trunk/network_io/unix/inet_ntop.c?revision=573491&view=markup#l149", "id": 174864, "time": "2014-04-24T22:49:43Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-04-24T22:49:43Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "text": "(In reply to Konstantin Kolinko from comment #3)\n> (In reply to Christopher Schultz from comment #2)\n> > Created attachment 31557 [details]\n> > Proposed patch (against mod_jk/trunk)\n> > \n> > I have raised the size of buf from 64 to 100 characters. The message looks\n> > like it will need 96 bytes for a complete IPv6 message (e.g.\n> > 2001:0db8:0000:0000:0000:ff00:0042:8329:65556 ->\n> > 2001:0db8:0000:0000:0000:ff00:0042:8329:65535 + \\0), so I just rounded up to\n> > 100 bytes.\n> > \n> > I've also added proper length-tracking to the buffer and more protection\n> > against overruns.\n> \n> The following discussion says that IPv6 address needs maximum 45 characters,\n> not 39. So you would need 12 bytes more than 96 = 108.\n\nBah, I forgot about tunnelled-IPv4. However:\n\n\"0000:0000:0000:0000:0000:0000:192.168.0.1:65535 -> 0000:0000:0000:0000:0000:0000:192.168.0.1:65535\"\n\nThat's only 97 bytes plus a NULL-terminator. Where did you get the 39 from?\n\n> http://stackoverflow.com/questions/166132/maximum-length-of-the-textual-\n> representation-of-an-ipv6-address\n> \n> Also see tmp buffer size here:\n> http://svn.apache.org/viewvc/apr/apr/trunk/network_io/unix/inet_ntop.\n> c?revision=573491&view=markup#l149\n\nI did see that code in APR while researching. I suppose I could use that, but I figured that \"buf\" might be used for other things so I didn't consider it. I think it turns out that \"buf\" is really just for this purpose, so we could do something like this if you'd prefer:\n\n  char buf[sizeof \"0000:0000:0000:0000:0000:0000:192.168.0.1:65535 -> 0000:0000:0000:0000:0000:0000:192.168.0.1:65535\" + 1];", "id": 174884, "time": "2014-04-25T19:06:39Z", "bug_id": 56452, "creation_time": "2014-04-25T19:06:39Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 56452, "attachment_id": null, "is_private": false, "id": 174885, "time": "2014-04-25T19:22:57Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-04-25T19:22:57Z", "text": "(In reply to Christopher Schultz from comment #4)\n> That's only 97 bytes plus a NULL-terminator. Where did you get the 39 from?\n\n39 is the size of IPv6 address in the form used in your example. You have two IPv6 addresses in that string.\n\n45-39 = 6 characters missing  x 2 IPv6 addresses = 12 more characters are needed in the buffer.\n\n> we\n> could do something like this if you'd prefer:\n> \n>   char buf[sizeof \"0000:0000:0000:0000:0000:0000:192.168.0.1:65535 ->\n> 0000:0000:0000:0000:0000:0000:192.168.0.1:65535\" + 1];\n\nFirst, the above code has an error. The IPv4 address part can be longer by 4 decimal digits than the one written above.\n\nSecond, I do not care on the actual implementation. I mentioned APR code as an example of their output.\n\nThe stackoverflow article mentioned INET6_ADDRSTRLEN constant, but I do not know whether that is portable."}, {"count": 6, "attachment_id": null, "creator": "chris@christopherschultz.net", "text": "(In reply to Konstantin Kolinko from comment #5)\n> First, the above code has an error. The IPv4 address part can be longer by 4\n> decimal digits than the one written above.\n\nAah, yes. Thanks for pointing that out.\n\n> Second, I do not care on the actual implementation. I mentioned APR code as\n> an example of their output.\n> \n> The stackoverflow article mentioned INET6_ADDRSTRLEN constant, but I do not\n> know whether that is portable.\n\nOn Linux, I can see them here:\n$ grep 'INET\\(6\\)\\?_ADDRSTRLEN' `find /usr/include -name \"*.h\"`\n/usr/include/netinet/in.h:#define INET_ADDRSTRLEN 16\n/usr/include/netinet/in.h:#define INET6_ADDRSTRLEN 46\n\nMac OS X has them in comparable locations:\n$  grep 'INET\\(6\\)\\?_ADDRSTRLEN' `find /usr/include -name \"*.h\"`\n/usr/include/netinet/in.h:#define INET_ADDRSTRLEN                 16\n/usr/include/netinet6/in6.h:#define\tINET6_ADDRSTRLEN\t46\n\nThe Linux mac page for inet_ntop mentions both INET_ADDRSTRLEN and INET6_ADDRSTRLEN, and the \"COMFORMING TO\" section says POSIX.1-2001 with no caveats about those constants. If we like POSIX.1-2001 then I think we're all set.\n\nI like the use of INET_ADDRSTRLEN better than the sizeof thing for some reason, so I'll use that. Anyone with a problem can file a bug; it's easy to fix if someone has an old system. I'll update the patch.", "id": 174887, "time": "2014-04-25T21:15:40Z", "bug_id": 56452, "creation_time": "2014-04-25T21:15:40Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 56452, "is_private": false, "text": "Chris: any chance you've got the updated patch lying around somewhere? Or can do it during the next few days?", "id": 180097, "time": "2014-12-31T13:31:41Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2014-12-31T13:31:41Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 56452, "is_private": false, "text": "I committed a very similar patch in r1648948.\n\nIt would be very nice if you could check it, especially whether I got the math for the buffer size correct.\n\nThanks!", "id": 180118, "time": "2015-01-01T21:35:40Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-01-01T21:35:40Z", "attachment_id": null}]
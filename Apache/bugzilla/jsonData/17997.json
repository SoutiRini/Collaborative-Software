[{"count": 0, "tags": [], "text": "I've noticed that when using JspC with the -webapp\nswitch with a web application containing code in\nsubdirectories, JspC places the generated java files\nin the correct subdirectory beneath the given output\ndirectory.\n\nFor example:\nIf I run:\n  JspC -p com.company.myapp\n       -d ./src/com/company/myapp\n       -webapp ./jsp/myapp\n\nFor file:\n  myapp/mysubdir/myfile.jsp\nthis file is generated:\n  ./src/com/company/myapp/mysubdir/myfile_jsp.java\nbut the package name is still:\n  com.company.myapp\nrather than what I expected:\n  com.company.myapp.musubdir\nThis is fine and dandy so long as I don't also have a\nfile named myfile.jsp in the myapp directory or the\nmyapp/myothersubdir directory.\n\nIs there a reason that I'm overlooking as to why this\nshould work this way?\n\nI've applied the following changes to my copy of\nJspC.java to discover whether the package name needs\nextending similarly to the output directory.\n\nLet me know what you guys think about this change.\n\nthanks,\n\nStephen Aument\n\nThis refers to the JspC in 4.1.12.\n522,532d521\n<     public static String getPackageSuffix( String\njspUri ) {\n<         StringBuffer suffix = new StringBuffer();\n<         int lastIndex = jspUri.lastIndexOf( '/' );\n<         if ( lastIndex > 0 ) {\n<             suffix.append( \".\" );\n<             suffix.append( jspUri.substring( 1,\nlastIndex ) );\n<         }\n< \n<         return suffix.toString();\n<     }\n< \n539,540c528\n<             this.setOutputDir( baseDir\n<                     + jspUri.substring( 0,\njspUri.lastIndexOf( '/' ) ) );\n---\n>             this.setOutputDir( baseDir +\njspUri.substring( 0, jspUri.lastIndexOf( '/' ) ) );\n549,564c537,539\n<             \n<             /*\n<              * Here's what's different from the base\nclass. We generate a\n<              * tmpTargetPackage name from the\ntargetPackage and the uri of the\n<              * jsp page and set that as the servlet\npackage name.\n<              */\n<             String tmpTargetPackage\n<                     = targetPackage +\ngetPackageSuffix( jspUri );\n< \n<             if (tmpTargetPackage != null) {\n<                \nclctxt.setServletPackageName(tmpTargetPackage);\n<             }\n<             /*\n<              * End of changes.\n<              */\n<             \n---\n>             if (targetPackage != null) {\n>                \nclctxt.setServletPackageName(targetPackage);\n>             }", "is_private": false, "bug_id": 17997, "id": 33190, "time": "2003-03-14T14:46:53Z", "creator": "saument@yahoo.com", "creation_time": "2003-03-14T14:46:53Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "mike.bartlett@us.logical.com", "attachment_id": null, "id": 33309, "time": "2003-03-17T19:46:01Z", "bug_id": 17997, "creation_time": "2003-03-17T19:46:01Z", "is_private": false, "text": "I've found the same problem.  My webapp uses the same JSP filename in \ndifferent subdirectories which results in errors.\n\nI updated by JspC.java file as follows:\n\nAdded the following two lines to the public boolean processFile(String file) \nmethod:\n\nString packageSuffix = jspUri.substring(0, jspUri.lastIndexOf('/')).replace\n('/','.');\nclctxt.setServletPackageName(clctxt.getServletPackageName() + packageSuffix);\n\n\nI added the two lines right before the line:\n\nsetupContext(clcText);\n\n"}, {"count": 2, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "id": 35042, "time": "2003-04-11T23:28:54Z", "bug_id": 17997, "creation_time": "2003-04-11T23:28:54Z", "is_private": false, "text": "Fixed in TC5"}]
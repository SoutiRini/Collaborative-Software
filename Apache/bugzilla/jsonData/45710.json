[{"count": 0, "tags": [], "bug_id": 45710, "attachment_id": null, "id": 120194, "time": "2008-08-28T19:47:54Z", "creator": "kamalasekar.r@gmail.com", "creation_time": "2008-08-28T19:47:54Z", "is_private": false, "text": "We have two web applications, one running in Tomcat 5.0.30 (source) and the other one running in Tomcat 5.5.25 (target).\n\nThe target application (uses JSP pages) running in Tomcat 5.5.25 uses Form Based Authentication as Security Constraint for the web pages inside the application.\n\nThe source application running in Tomcat 5.0.30 programmatically authenticates the user and obtains a jsessionid. The jsessionid thus obtained is sent to the target web page along with other user defined parameters (parm1=value&parm2=value) using response.sendRedirect().\n\nBut, the target page (running in Tomcat 5.5.25) never receives the user defined parameters, leading to incorrect URL apparently causing the Page Not found error.\n\nPlease note that the difference in Tomcat versions does not have anything to do with the problem. Even, when I had both the applications (contexts) running in the same server, I saw the Page Not Found error.\n\nNote : I have the SSO turned on in my tomcat server(hosting target application).\n\nSteps to create the issue:\n-------------------------\n\n1) Create a sample JSP page in one Context that programmatically authenticates the other application running in same server.\n\n2) Once the jsessionid value is retrieved. Form the URL say\n\nhttp://localhost:8080/myapp2/Controller;jsessionid=164037ED017BDA8818ACBF930B6AD92F?view=myPage2.jsp&parm1=value1&parm2=value2\n\nwhere Controller is the servlet that directs request to the JSP page.\n\n3) In the target server, create a JSP page (myPage2.jsp) that will simply call the request.getParameter() to print the parameter values.\n\nI get null as the parameter value.\n\nPlease let me know if you need more information. I turned on the log level as debug for Catalina Core packages and I see the RequestDumper valve do print the queryString that contains parameter values while when it gets down to the Filter/Servlet, the queryString contains only the target page (i.e. view=myPage2.jsp) and not the parameter values"}, {"text": "There isn't enough information here, particularly on how the controller is coded, to reproduce this.\n\nThis looks like an application issue at the moment and therefore this should be explored further on the users list.\n\nI would suggest using ieHttpHeaders or LiveHttpHeaders to confirm exactly what the client is sending. This should enable you to construct a much simpler test case.\n\nIf the discussion on the users list IDs a Tomcat bug, please feel free to reopen this issue and attach the details.", "tags": [], "creator": "markt@apache.org", "attachment_id": null, "count": 1, "id": 120195, "time": "2008-08-29T03:26:45Z", "bug_id": 45710, "creation_time": "2008-08-29T03:26:45Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45710, "attachment_id": null, "id": 120503, "time": "2008-09-09T09:23:53Z", "creator": "kamalasekar.r@gmail.com", "creation_time": "2008-09-09T09:23:53Z", "is_private": false, "text": "Thanks Mark. I found the problem with my code where we retrieve the Jsessionid using an URL (that does include parameters) and the first request after the Jsessionid (authenticated using j_security_check) includes the parameters. Obviously, the request URLs are different now and the Tomcat 5.5 restores the URL (redirect Location) with no parameters that was used to retrieve the Jsessionid from the server.\n\nIn short, the approach I used is as follows (might help others looking for a solution)\n\nApp A uses Form Authentication\n\n1) Call the App A (running in Server 1) through URL (say with parameters)  from App B (running in server 2)\n2) The server returns the response with Jsessionid (iterate the headers/cookies to retrieve one)\n3) Append the Jsessionid to the j_security_check along with username/password and the response header returns the same Jsessionid (authenticated by server)\n4) Now, call the App A again with the same URL we used in Step 1.\n\n\n\n"}]
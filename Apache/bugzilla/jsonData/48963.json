[{"count": 0, "tags": [], "text": "load_headers and load_env do not honor the usual namespace rules for variable names that are not fully-qualified and it is invoked from within a proc.  Basically it should behave the same as how \"array set\" does.\n\nWhen called from a proc with unqualified variable name, I would expect a local variable to be created within the namespace of the proc.\n\nThe following test case (specifically \"test1\") demonstrates this failure:\n\n  \n<?\n\nproc cow {} {\n  load_headers hdr1\n  array set hdr1a { moo cow }\n  puts \"test1: [info exists hdr1] vs [info exists hdr1a]\"\n\n  load_headers ::hdr2\n  array set ::hdr2a { moo cow }\n  puts \"test2: [info exists ::hdr2] vs [info exists ::hdr2a]\"\n\n  global hdr3\n  load_headers hdr3\n  global hdr3a\n  array set hdr3a { moo cow }\n  puts \"test3: [info exists hdr3] vs [info exists hdr3a]\"\n}\n\n\nputs \"\"\n\nload_headers hdr0\narray set hdr0a { moo cow }\nputs \"test0: [info exists hdr0] vs [info exists hdr0a]\"\n\ncow\n\n?>\n\n\n\nThe output from running the above produces:\n\ntest0: 1 vs 1\ntest1: 0 vs 1\ntest2: 1 vs 1\ntest3: 1 vs 1\n\n\nI would expect all 1's...\n\n\nAfter discussing with karl, this appears to be caused by TclWeb_GetHeaderVars in src/apache-2/TclWebapache.c using the TCL_NAMESPACE_ONLY flag: \n\n \n       Tcl_ObjSetVar2(req->interp, headersvar,\n                       key, val, TCL_NAMESPACE_ONLY);\n\n\nTCL_NAMESPACE_ONLY is documented as\n\n             If this bit is set in flags then the variable is looked up  only\n             in the current namespace; if a procedure is active its variables\n             are ignored, and the global namespace is also ignored unless  it\n             is the current namespace.", "attachment_id": null, "id": 135544, "creator": "jlawson-apache@bovine.net", "time": "2010-03-22T23:01:55Z", "bug_id": 48963, "creation_time": "2010-03-22T23:01:55Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 48963, "attachment_id": null, "text": "If you change your code example in this way\n\nproc cow {} {\n\n# let's create an array in the proc scope\n  array set hdr1 {}\n\n  load_headers hdr1\n  array set hdr1a { moo cow }\n  puts \"test1: [info exists hdr1] vs [info exists hdr1a]\"\n....\n\nthen your tests would all turn into 1's. \n\nit seems to me that proc variables actually are not ignored, provided they have been initialized before Tcl_SetObjVar2 is called (tested with an array, don't know with a scalar but I have to presume scope resolution works for arrays and scalar variables alike)\n\nAfter all, having an array initialized before usage sounds to me a good programming style (also 'array unset hdr1' should work) partially surrogating a sort of variable declaration. Moreover the documented flags in Tcl_ObjSetVar2 don't list the functionality you wish to have out of the box, do you have a proposal for modifying TclWebapache.c?", "id": 148852, "time": "2011-08-26T23:44:47Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-26T23:44:47Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 48963, "text": "Sorry, I had it wrong. Completely. I assumed the hdr1 array just created was also filled with the headers values. I will come back on this next week when I hope I will have more time to spend on it.", "id": 148853, "time": "2011-08-27T00:07:23Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-27T00:07:23Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "Ok, I could not resist and went ahead reading again the page manual and paying more attention. It looks like restoring the normal way for scope resolution might be the way to get the command work they way you expect. It wouldn't certainly break my way of using load_headers and load_env and I cannot imagine possible side effects. Can you think of possible drawbacks?", "attachment_id": null, "id": 148854, "creator": "mxmanghi@apache.org", "time": "2011-08-27T00:35:28Z", "bug_id": 48963, "creation_time": "2011-08-27T00:35:28Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jlawson-apache@bovine.net", "text": "I agree that fixing it should be fine, since it is unlikely that anyone has written code using \"test1\" style addressing.  (The resulting location of the created variable is so unexpected and I think it can only be accessed by fully specifying the namespace as \"::request::hdr1\" after it was created it that way.)", "id": 148855, "time": "2011-08-27T03:09:22Z", "bug_id": 48963, "creation_time": "2011-08-27T03:09:22Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 48963, "attachment_id": null, "id": 148856, "time": "2011-08-27T04:33:52Z", "creator": "jlawson-apache@bovine.net", "creation_time": "2011-08-27T04:33:52Z", "is_private": false, "text": "Keep in mind that the original reason TCL_NAMESPACE_ONLY was specified was probably to encourage variables to be created below the page-specific ::request namespace, instead of the global :: namespace that is persisted between pages.  Of course proc-scoped variables are even narrower in scope and should be preferred if you're inside of a proc."}, {"count": 6, "tags": [], "creator": "mxmanghi@apache.org", "text": "(In reply to comment #5)\n> Keep in mind that the original reason TCL_NAMESPACE_ONLY was specified was\n> probably to encourage variables to be created below the page-specific ::request\n> namespace, instead of the global :: namespace that is persisted between pages. \n> Of course proc-scoped variables are even narrower in scope and should be\n> preferred if you're inside of a proc.\n\nAs a matter of fact .tcl scripts run in the global namespace, whereas .rvt scripts run in ::request namespace, so ther's a difference in the way they determine the default name of the array of variables. \n\nI prepared a patch where flags controlling scope resolution passed to Tcl_ObjSetVar2 have been set to 0. I tested it and commands now work the way you suggest. Default array names for command 'load_env' and 'load_headers' have been changed to their fully qualified expression (e.g. ::request::headers). Namespace ::request is guaranteed to be initialized and existing when a .tcl and/or .rvt, so there shouldn't be error occurring. The only drawback I can imagine is the breaking of the default behavior for .tcl scripts because load_env and load_headers now default into the ::request namespace.", "id": 148865, "time": "2011-08-28T10:27:09Z", "bug_id": 48963, "creation_time": "2011-08-28T10:27:09Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": 27442, "bug_id": 48963, "text": "Created attachment 27442\nnames for default arrays are now fully qualified", "id": 148870, "time": "2011-08-29T03:33:57Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-29T03:33:57Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 48963, "attachment_id": 27443, "text": "Created attachment 27443\nscope resolution method changed to default", "id": 148871, "time": "2011-08-29T03:34:28Z", "creator": "mxmanghi@apache.org", "creation_time": "2011-08-29T03:34:28Z", "is_private": false}, {"count": 9, "tags": [], "creator": "mxmanghi@apache.org", "text": "bug fix applied to Rivet >= 2.0.4", "id": 162112, "time": "2012-09-12T14:56:39Z", "bug_id": 48963, "creation_time": "2012-09-12T14:56:39Z", "is_private": false, "attachment_id": null}]
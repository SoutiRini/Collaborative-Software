[{"count": 0, "tags": [], "bug_id": 7059, "text": "The jasper compiler is using JarURLConnections to open tag library jar files\nin WEB-INF/lib. JarURLConnection caches the jar by default, and thus\na pointer to the jar (file descriptor?) is kept open so the jar cannot be\ndeleted. \n\nThis makes redeployment and reloading of web apps difficult, because\ntaglib jars cannot successfully be replaced. On windows, the delete\noperation fails. On Unix, the delete is successful, but the inode\nsticks around, and the jar file remains cached. This means that the \nnext compile of the JSP will use the old tag library rather than\nthe new one that was placed in WEB-INF/lib. \n\nA possible workaround might be to stop tomcat when taglib jars need\nto change. \n\nHowever, from a development tool perspective, this isn't quite\nsatisfactory. For example, in netbeans webapp support, the \njasper compiler is used to compile jsps to report errors without\nhaving to run them. When jsps are compiled in web contexts that\nhave tag libraries in WEB-INF/lib, those tag libaries can no longer\nbe deleted. \n\nLooking in more detail at the jasper compiler, in two files:\norg.apache.jasper.compiler.TagLibraryInfoImpl and\norg.apache.jasper.compiler.TldLocationsCache, \nJarURLConnections are used, and there is a fixme comment about\nthe jar url connections caching the jars:\n            // FIXME @@@\n            // -- it seems that the JarURLConnection class caches JarFile \n            // objects for particular URLs, and there is no way to get \n            // it to release the cached entry, so\n            // there's no way to redeploy from the same JAR file.  Wierd.\n\nIt turns out that there are two ways to prevent caching of the jar\nfiles. One is to call setUsesCache(false) on each JarURLConnection\nbefore calling getJarFile, e.g.:\n            JarURLConnection conn =\n                (JarURLConnection) url.openConnection();\n\t    conn.setUseCaches(false);\n            jarFile = conn.getJarFile();\n\nAnother way is to call URLConnection.setDefaultUseCaches(false), \nwhich will change the default caching behaviour. Unfortunately, that\nis not a static method (even though it sets a private static variable).\nAlso, it's kind of a large sledgehammer since it changes behaviour for \nall URLConnections. \n\nThere may be other places as well where JarURLConnections are used on \njars in WEB-INF/lib. They should all be setUseCaches(false)-ed.", "id": 11704, "time": "2002-03-12T20:02:13Z", "creator": "simran.gleason@sun.com", "creation_time": "2002-03-12T20:02:13Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "simran.gleason@sun.com", "attachment_id": null, "text": "org.apache.catalina.startup.ContextConfig also uses a JarURLConnection\non tag library jars in tldConfigJar(...)\n", "id": 11705, "time": "2002-03-12T20:16:40Z", "bug_id": 7059, "creation_time": "2002-03-12T20:16:40Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 7059, "text": "The same problem was exhibited in the manager servlet for installing\nweb apps from a war file at a remote URL.\n\nI tried setUseCaches(false) and that still did not fix the problem\nwith the war (jar) being cached by the JVM.  This was JRE 1.3x.", "id": 11706, "time": "2002-03-12T20:57:22Z", "creator": "glenn@apache.org", "creation_time": "2002-03-12T20:57:22Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "It (used to be) even worse than that ... Tomcat wouldn't let go of the WAR file\nwhen undeploying an application, either.  That one was fixed ... I'm walking\nthrough the other places where Tomcat opens a JAR file now.\n", "attachment_id": null, "id": 11711, "creator": "craig.mcclanahan@sun.com", "time": "2002-03-12T22:36:58Z", "bug_id": 7059, "creation_time": "2002-03-12T22:36:58Z", "is_private": false}, {"count": 4, "tags": [], "text": "Hmmm, my experience with setting setUseCaches(false) was the same as Glenn's --\nit did not seem to make any difference because the JAR file itself was left\nopen.  Adding a call to jarFile.close() after the TLD scan is complete, however,\ncauses more problems (such as two Watchdog failures on pages that reference TLDs\ninside of JAR files).  Apparently, the Jasper compiler reparses the TLD again at\npage compile time, even though it already pre-scanned it at app startup --\nthat's going to take some more study.\n", "attachment_id": null, "id": 11716, "creator": "craig.mcclanahan@sun.com", "time": "2002-03-13T00:56:50Z", "bug_id": 7059, "creation_time": "2002-03-13T00:56:50Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 7059, "text": "Adding a jarFile.close() on each use of the jar file fails for the two watchdog\ntests because jarFile is residing on a temp directory after its first use,\napparently as a result of caching by VM, and subsequent code such as\n\n\tJarURLConnection conn =\n                (JarURLConnection) url.openConnection();\n        jarFile = conn.getJarFile();\n\nis not reopening the jar file, but merely getting the cached version, and if\nthat's already closed, would get an \"zip file closed\" exception when it is\naccessed.\n\nTurned out adding a \"conn.setUseCaches(false);\" fixes this problem, and the two\nwatchdog failures now pass.\n\nSo my compiler has both \"conn.setUseCaches(false);\" and \"jarFile.close();\", and\none should be able to replace .jar files now.  However, the tag handler class\nthat was loaded by the class loader remain loaded, and replacing a jar file\nwould not force the class loader to reload it, so I don't think it solves the\noriginal requirement for redeploying and reloading of web applications.  But\nthat is another issue, right?\n\nI wonder if there is any value in committing my \"fixes\".", "id": 11858, "time": "2002-03-15T22:25:35Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-03-15T22:25:35Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "edburns@acm.org", "attachment_id": null, "text": "Hi Kin-Man,\n\nIt looks like you have a fix to this.  Should we continue to look at\nthis bug or should we put it back on your plate?\n\n------- Additional Comments From Kin-Man Chung 2002-03-15 22:25 -------\n\n[...]\n\n> Turned out adding a \"conn.setUseCaches(false);\" fixes this problem, and\n> the two watchdog failures now pass.\n\n> So my compiler has both \"conn.setUseCaches(false);\" and\n> \"jarFile.close();\", and one should be able to replace .jar files\n> now. However, the tag handler class that was loaded by the class\n> loaderremain loaded, and replacing a jar file would not force the\n> class loader to reload it, so I don't think it solves the original\n> requirement for redeploying and reloading of web applications.  But\n> that is another issue, right?\n\n> I wonder if there is any value in committing my \"fixes\".\n\nEd", "id": 15575, "time": "2002-05-06T22:19:26Z", "bug_id": 7059, "creation_time": "2002-05-06T22:19:26Z", "is_private": false}, {"count": 7, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "text": "No, my fix only fixed Craig's watch dog failures, and not the original problem. \nSince then, Remy had made changes to the class loader, and might have solved the\nredeployment problem, but I have no easy way of verifying that.  Can Simran\nverify if the problem is still there with the latest tomcat?", "id": 15667, "time": "2002-05-07T20:29:46Z", "bug_id": 7059, "creation_time": "2002-05-07T20:29:46Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 7059, "attachment_id": null, "id": 16111, "time": "2002-05-14T23:14:46Z", "creator": "roger.kitain@sun.com", "creation_time": "2002-05-14T23:14:46Z", "is_private": false, "text": "From a deployment tool perspective, the \"manager\" (tomcat) web application\nsatisfies the requirement of deployment (removal) of web apps while Tomcat\nis still running.  Therefore, it should be possible for other tools interfacing\nwith Tomcat to perform the same types of tasks - therefore, the responsibility \nof deployent/undeployment of a web app falls within the tools arena.  Both \nKin-Man and I are in agreement on this."}]
[{"count": 0, "tags": [], "bug_id": 56684, "text": "After upgrading to Java 7, I've noticed some applications fail after about 50 days f (for instance May 8 till June 27). This is suspiciously close to 2 ^ 32 -1 milliseconds:\n\nJun 27, 2014 9:24:47 AM org.apache.catalina.core.StandardServer await\nSEVERE: StandardServer.await: accept:\njava.net.SocketTimeoutException: Accept timed out\n        at java.net.PlainSocketImpl.socketAccept(Native Method)\n        at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:398)\n        at java.net.ServerSocket.implAccept(ServerSocket.java:530)\n        at java.net.ServerSocket.accept(ServerSocket.java:498)\n        at org.apache.catalina.core.StandardServer.await(StandardServer.java:431)\n        at org.apache.catalina.startup.Catalina.await(Catalina.java:676)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:628)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)\nJun 27, 2014 9:24:47 AM org.apache.coyote.http11.Http11AprProtocol pause\nINFO: Pausing Coyote HTTP/1.1 on http-51080\nJun 27, 2014 9:24:47 AM org.apache.coyote.ajp.AjpAprProtocol pause\nINFO: Pausing Coyote AJP/1.3 on ajp-51009\nJun 27, 2014 9:24:48 AM org.apache.catalina.core.StandardService stop\nINFO: Stopping service Catalina\n\nAfter this, the application is no longer listening.\n\nI suspect this may be due to a change in behavior in Java. See:\n\n$ $JAVA_HOME/bin/java -version\njava version \"1.7.0_60\"\nJava(TM) SE Runtime Environment (build 1.7.0_60-b19)\nJava HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)\n\n$ strace -f -o /tmp/hh groovy -e 'new ServerSocket(60001, 1, InetAddress.getByName(\"localhost\")).accept()'\nFile contains:\n2212  bind(47, {sa_family=AF_INET6, sin6_port=htons(60001), inet_pton(AF_INET6, \"::ffff:127.0.0.1\", &sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = 0\n2212  listen(47, 1)                     = 0\n2212  poll([{fd=47, events=POLLIN|POLLERR}], 1, 4294967295 <unfinished ...>\n\n$ $JAVA_HOME/bin/java -version\njava version \"1.6.0_45\"\nJava(TM) SE Runtime Environment (build 1.6.0_45-b06)\nJava HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)\n\n2661  bind(46, {sa_family=AF_INET6, sin6_port=htons(60001), inet_pton(AF_INET6, \"::ffff:127.0.0.1\", &sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = 0\n2661  listen(46, 1)                     = 0\n2661  accept(46,  <unfinished ...>\n\nWhile java6 calls accept(), java7 first waits for an event on the socket with poll(). However, it uses a timeout of 4294967295 milliseconds.", "id": 176117, "time": "2014-06-30T12:21:22Z", "creator": "gustavo@thehyve.nl", "creation_time": "2014-06-30T12:21:22Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 56684, "text": "Hmm. My initial impression is that that is a JRE bug. I've contacted someone at Oracle (see the dev list) who has been helpful in pointing us in the right direction to report bugs. Keep an eye on the dev list for progress on that.\n\nHowever, I can't repeat the results you report. When I run strace on the same Java version as you are using, I see a call to poll with a timeout of -1 which I am assuming is an infinite timeout.\n\nYou'll need to provide enough information about your environment to enable us (and Oracle) to repeat this otherwise this is going to get resolved as WORKSFORME.", "id": 176282, "time": "2014-07-07T21:36:26Z", "creator": "markt@apache.org", "creation_time": "2014-07-07T21:36:26Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 56684, "attachment_id": null, "text": "I tested this on Ubuntu Trusty amd64. I can also reproduce on my home machine, which runas arch (amd64).\n\nYou can try this Vagrantfile:\n\nVagrant.configure('2') do |config|\n  config.vm.box = \"ubuntu/trusty64\"\n\n  provision_script = <<-eos\n      cat > ~vagrant/run-test << eod\n#!/bin/bash\n\n# only one version of Java installed; no need to set JAVA_HOME\n# so Groovy picks the correct one\naptitude install -y oracle-java7-installer groovy\njava -version\nstrace -f -o /tmp/hh groovy -e 'new ServerSocket(60001, 1, InetAddress.getByName(\"localhost\")).accept()'\neod\n      chmod +x ~vagrant/run-test\n\n      apt-get install -y python-software-properties strace vim\n      add-apt-repository -y ppa:webupd8team/java\n      apt-get update\n    eos\n\n  config.vm.provision \"shell\", inline: provision_script\nend\n\nafter ssh'ing, run sudo ./run-test, accept the license and then Ctrl+C. You can then instpect /tmp/hh", "id": 176284, "time": "2014-07-07T22:44:30Z", "creator": "gustavo@thehyve.nl", "creation_time": "2014-07-07T22:44:30Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 56684, "text": "The strace output may actually be a bug in strace because poll() takes a signed int as timeout; it would seem strace is interpreting the value as an unsigned int. Indeed:\n\n$ cat a.c && gcc a.c && strace ./a.out \n#include <poll.h>\n#include <stdio.h>\n\nvoid main() {\n\tstruct pollfd fd = { .fd = fileno(stdin), .events = POLLIN };\n\tint timeout = -1;\n\n\tpoll(&fd, 1, timeout);\n}\nexecve(\"./a.out\", [\"./a.out\"], [/* 57 vars */]) = 0\nbrk(0)                                  = 0xeb5000\n(...)\npoll([{fd=0, events=POLLIN}], 1, 4294967295^CProcess 6565 detached\n\nThat leaves me (short of a bug in glibc or the kernel) with no explanation for the exception I got, which takes quite a while to reproduce, though if poll doesn't use the monotonic clock, there may be an faster way. I'll check tomorrow.", "id": 176285, "time": "2014-07-07T23:37:22Z", "creator": "gustavo@thehyve.nl", "creation_time": "2014-07-07T23:37:22Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 56684, "attachment_id": null, "text": "A quick observation: the poll syscall used to take a long, and now takes an int. Maybe strace hasn't been updated yet:\n\nhttp://lwn.net/Articles/483078/", "id": 176286, "time": "2014-07-07T23:53:04Z", "creator": "gustavo@thehyve.nl", "creation_time": "2014-07-07T23:53:04Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 56684, "attachment_id": null, "text": "I was testing on Ubuntu Precise. After updating to Trusty I see the same value as you of 4294967295. That, at least, explains why we were seeing different values.\n\nI've looked through both the Tomcat code and the Java 7 code and I don't see anything wrong (although I am no C/C++ expert). Neither do I see anything that explain the behaviour you are seeing.\n\nI think the next steps are to see if you can reproduce this issue with a test case that doesn't take ~50 days to run.", "id": 176291, "time": "2014-07-08T11:59:21Z", "creator": "markt@apache.org", "creation_time": "2014-07-08T11:59:21Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 56684, "text": "Javadoc for ServerSocket.accept() says that SocketTimeoutException can be thrown by the method \"if a timeout was previously set with setSoTimeout\". [1]\n\n\n[1] http://docs.oracle.com/javase/7/docs/api/java/net/ServerSocket.html#accept%28%29\n\nBTW,\nJavadoc for ServerSocket.setSoTimeout() says that to set an infinite timeout one uses the value of \"0\". Is somebody confusing '0' and '-1'?\n\nI think the javadoc for ServerSocket.accept() implies that the default timeout is infinite. So I think it is a JRE bug.\n\n\nIn general it makes some sense to protect against this. A timeout is not a \"receiving a valid shutdown command\" event, and encountering a timeout does not make the server socket an invalid one, so we should be able to continue.", "id": 176292, "time": "2014-07-08T12:08:51Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-07-08T12:08:51Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 56684, "attachment_id": null, "text": "(In reply to Konstantin Kolinko from comment #6)\n> BTW,\n> Javadoc for ServerSocket.setSoTimeout() says that to set an infinite timeout\n> one uses the value of \"0\". Is somebody confusing '0' and '-1'?\n\nNot that I can see having looked at the JRE code.\n\n> I think the javadoc for ServerSocket.accept() implies that the default\n> timeout is infinite. So I think it is a JRE bug.\n\nThat is a possibility, but having looked at the JRE code, I don't see where the problem is.\n\n> In general it makes some sense to protect against this. A timeout is not a\n> \"receiving a valid shutdown command\" event, and encountering a timeout does\n> not make the server socket an invalid one, so we should be able to continue.\n\nAgreed. There is no reason I can think of that accept should time out so we can certiainly add some protection against this issue here. We can probably add some useful debug info as well.", "id": 176293, "time": "2014-07-08T12:37:43Z", "creator": "markt@apache.org", "creation_time": "2014-07-08T12:37:43Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 56684, "attachment_id": null, "text": "Note that the protection and debug info is going to go into Tomcat 8. It would help a lot if you could upgrade at least one system experiencing this error to Tomcat 8.", "id": 176301, "time": "2014-07-08T20:32:22Z", "creator": "markt@apache.org", "creation_time": "2014-07-08T20:32:22Z", "is_private": false}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 176302, "time": "2014-07-08T22:09:11Z", "bug_id": 56684, "creation_time": "2014-07-08T22:09:11Z", "is_private": false, "text": "Workaround added to 8.0.x for 8.0.10 onwards. If the timout occurs a warning is logged that reports how long accept was blocking for before the timeout."}, {"count": 10, "tags": [], "bug_id": 56684, "text": "The workaround and simple debug code was pretty simple so I have backported it to 7.0.x (it will be in 7.0.55 onwards) and proposed if for 6.0.x.", "id": 176306, "time": "2014-07-09T10:35:47Z", "creator": "markt@apache.org", "creation_time": "2014-07-09T10:35:47Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 56684, "attachment_id": null, "text": "Work around added to 6.0.x for 6.0.42 onwards.", "id": 176746, "time": "2014-07-29T09:32:11Z", "creator": "markt@apache.org", "creation_time": "2014-07-29T09:32:11Z", "is_private": false}, {"count": 12, "tags": [], "creator": "fachhoch@gmail.com", "attachment_id": null, "id": 176906, "time": "2014-08-05T03:20:21Z", "bug_id": 56684, "creation_time": "2014-08-05T03:20:21Z", "is_private": false, "text": "is this fix available in tomcat 7.0.50?  I am getting this error in jdk1.7 64 bit tomcat 7.0.50"}, {"count": 13, "tags": [], "bug_id": 56684, "attachment_id": null, "text": "(In reply to fach hoch from comment #12)\n> is this fix available in tomcat 7.0.50?\n\nNo, it's in 7.0.55, as stated in comment #10.", "id": 176907, "time": "2014-08-05T03:27:38Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2014-08-05T03:27:38Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 61665, "text": "On making big amount of cell writes 10000-30000, XSSF speed is much slower than HSSF, about x5 - x10, what in general not suposed to be so, or at least not that much.\n\nIt can be reproduced by Apache POI test class:\nhttps://svn.apache.org/repos/asf/poi/trunk/src/examples/src/org/apache/poi/ss/examples/SSPerformanceTest.java.\n\nAccording another message on stackoverflow:\nhttps://stackoverflow.com/questions/34246083/apache-poi-performance\nthe problem could be not directly in poi, but in synchronized calls of xmlbeans and poi-ooxml-schemas. \n\nPlease also take a look at this messages:\n\nhttps://stackoverflow.com/questions/34995058/apache-poi-much-quicker-using-hssf-than-xssf-what-next\n\nhttp://apache-poi.1045710.n5.nabble.com/Performance-Issue-with-XSSF-as-compared-to-HSSF-in-POI-3-7-td3307475.html", "id": 201664, "time": "2017-10-25T10:13:00Z", "creator": "poi.bugzla@mail.ru", "creation_time": "2017-10-25T10:13:00Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "admin.apache@moparisthebest.com", "text": "So I ran into this too and settled on hacking HSSF to just calculate more cells/rows, though it can't read or write these:\n\nhttps://lists.apache.org/thread.html/0bc90a3ed386edddfcb9b93ce6c262ad145a6b0433d0fcfe70ef10a2@%3Cdev.poi.apache.org%3E\n\nThere has also been the recent change to disable synchronization in XmlBeans to hopefully avoid this, but I tested it, and it changed nothing.", "id": 201668, "time": "2017-10-25T13:39:53Z", "bug_id": 61665, "creation_time": "2017-10-25T13:39:53Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "XML as a serialization and deserialization format will always be slower than an optimized binary format. HApache POI's internal model for an xlsx file maintains XML beans, updating them as needed, writing out the XML beans as is. The benefit of this strategy is that features that POI doesn't understand or implement are kept, unmodified. Had we converted the information in the XML beans to pojos and discarded the XML beans immediately after reading the workbook, it's likely information would have been lost.\n\nWe are investigating replacing XMLBeans with a different XML library (constrained by ASL 2.0 license compatibility) that may be more performant and memory efficient, and this may provide some improvements in speed. This is an extremely large task that requires modifying nearly every XSSF class and OOXML class. Any help would be greatly appreciated.\n\nOn a smaller scale, if after profiling the code you find a section that can be improved, please submit your profiling results and a patch that doesn't break backwards compatibility.", "id": 201674, "time": "2017-10-25T18:31:45Z", "bug_id": 61665, "creation_time": "2017-10-25T18:31:45Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 61665, "text": "I did some analysis using Dynatrace AppMon and could not find any immediate items that we can improve here. The top-consumers are all deep down somewhere in XmlBeans, therefore I don't think we can do much here outside of the larger XmlBeans replacement work.\n\ngetT() \t6.37s \tCPU: 36 %, Sync: 0 %, Wait: 0 %, Suspension: 0 %, I/O: 64 % \torg.openxmlformats.schemas.spreadsheetml.x2006.main.impl.CTCellImpl \tOpenxmlformats\n\nhasTextEnsureOccupancy() \t6.37s \tCPU: 36 %, Sync: 0 %, Wait: 0 %, Suspension: 0 %, I/O: 64 % \torg.apache.xmlbeans.impl.store.Xobj \tXMLBeans\n\nembedCurs() \t6.37s \tCPU: 36 %, Sync: 0 %, Wait: 0 %, Suspension: 0 %, I/O: 64 % \torg.apache.xmlbeans.impl.store.Locale \tXMLBeans\n\n\nI have updated the FAQ entry slightly to adjust the expected timings via r1819415\n\nOne thing to note is that initially class loading was taking a considerable amount of time, therefore I added a way to do a \"warmup\" run to SSPerformanceTest so that the actual code is tested, not classloading, see r1819417", "count": 3, "id": 202942, "time": "2017-12-28T10:55:23Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-12-28T10:55:23Z", "is_private": false}]
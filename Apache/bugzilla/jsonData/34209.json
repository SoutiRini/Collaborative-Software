[{"count": 0, "tags": [], "creator": "david_arcuri@mgic.com", "attachment_id": null, "text": "Solaris 9, httpd 2.0.53, segfaults often resulting in gdb output similar to this:\nGNU gdb 6.0\nCopyright 2003 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"sparc-sun-solaris2.9\"...\nCore was generated by `/usr/local/apache2/bin/httpd -f\n/usr/local/apache2/conf/web-mi.mgic.com.conf -k'.\nProgram terminated with signal 11, Segmentation fault.\nReading symbols from /usr/local/apache2/lib/libaprutil-0.so.0...done.\nLoaded symbols for /usr/local/apache2/lib/libaprutil-0.so.0\nReading symbols from /usr/local/lib/libldap-2.2.so.7...done.\nLoaded symbols for /usr/local/lib/libldap-2.2.so.7\nReading symbols from /usr/lib/libgen.so.1...done.\nLoaded symbols for /usr/lib/libgen.so.1\nReading symbols from /usr/local/ssl/lib/libssl.so.0.9.7...done.\nLoaded symbols for /usr/local/ssl/lib/libssl.so.0.9.7\nReading symbols from /usr/local/ssl/lib/libcrypto.so.0.9.7...done.\nLoaded symbols for /usr/local/ssl/lib/libcrypto.so.0.9.7\nReading symbols from /usr/local/lib/liblber-2.2.so.7...done.\nLoaded symbols for /usr/local/lib/liblber-2.2.so.7\nReading symbols from /usr/local/apache2/lib/libexpat.so.0...done.\nLoaded symbols for /usr/local/apache2/lib/libexpat.so.0\nReading symbols from /usr/local/apache2/lib/libapr-0.so.0...done.\nLoaded symbols for /usr/local/apache2/lib/libapr-0.so.0\nReading symbols from /usr/lib/libsendfile.so.1...done.\nLoaded symbols for /usr/lib/libsendfile.so.1\nReading symbols from /usr/lib/librt.so.1...done.\nLoaded symbols for /usr/lib/librt.so.1\nReading symbols from /usr/lib/libm.so.1...done.\nLoaded symbols for /usr/lib/libm.so.1\nReading symbols from /usr/lib/libsocket.so.1...done.\nLoaded symbols for /usr/lib/libsocket.so.1\nReading symbols from /usr/lib/libnsl.so.1...done.\nLoaded symbols for /usr/lib/libnsl.so.1\nReading symbols from /usr/lib/libresolv.so.2...done.\nLoaded symbols for /usr/lib/libresolv.so.2\nReading symbols from /usr/lib/libpthread.so.1...done.\nLoaded symbols for /usr/lib/libpthread.so.1\nReading symbols from /usr/lib/libdl.so.1...done.\nLoaded symbols for /usr/lib/libdl.so.1\nReading symbols from /usr/lib/libc.so.1...done.\nLoaded symbols for /usr/lib/libc.so.1\nReading symbols from /usr/local/lib/libgcc_s.so.1...done.\nLoaded symbols for /usr/local/lib/libgcc_s.so.1\nReading symbols from /usr/lib/libaio.so.1...done.\nLoaded symbols for /usr/lib/libaio.so.1\nReading symbols from /usr/lib/libmd5.so.1...done.\nLoaded symbols for /usr/lib/libmd5.so.1\nReading symbols from /usr/lib/libmp.so.2...done.\nLoaded symbols for /usr/lib/libmp.so.2\nReading symbols from /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1...done.\nLoaded symbols for /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1\nReading symbols from /usr/lib/libthread.so.1...done.\nLoaded symbols for /usr/lib/libthread.so.1\n#0  util_ldap_search_node_free (cache=0xfecd0668, n=0x0) at util_ldap_cache.c:202\n202     util_ldap_cache.c: No such file or directory.\n        in util_ldap_cache.c\n(gdb) bt\n#0  util_ldap_search_node_free (cache=0xfecd0668, n=0x0) at util_ldap_cache.c:202\n#1  0x0002f7c8 in util_ald_destroy_cache (cache=0xfecd0668) at\nutil_ldap_cache_mgr.c:344\n#2  0x0002ea90 in util_ldap_url_node_free (cache=0xfecd0668, n=0xfecd63a0) at\nutil_ldap_cache.c:77\n(gdb)\n\n\n\nRelevant section of code in util_ldap_cache.c\n\nvoid util_ldap_search_node_free(util_ald_cache_t *cache, void *n)\n{\n    int i = 0;\n    util_search_node_t *node = (util_search_node_t *)n;\n    if (node->vals) {              /* CRASH HERE */\n        while (node->vals[i]) {\n            util_ald_free(cache, node->vals[i++]);\n        }\n        util_ald_free(cache, node->vals);\n    }\n    util_ald_free(cache, node->username);\n    util_ald_free(cache, node->dn);\n    util_ald_free(cache, node->bindpw);\n    util_ald_free(cache, node);\n}\n\n\nAnd this was called from:\n\nvoid util_ald_destroy_cache(util_ald_cache_t *cache)\n{\n    unsigned long i;\n    util_cache_node_t *p, *q;\n                                                                               \n                   \n    if (cache == NULL)\n        return;\n                                                                               \n                   \n    for (i = 0; i < cache->size; ++i) {\n        p = cache->nodes[i];\n        q = NULL;\n        while (p != NULL) {\n            q = p->next;\n           (*cache->free)(cache, p->payload);\n           util_ald_free(cache, p);\n           p = q;\n        }\n    }\n    util_ald_free(cache, cache->nodes);\n    util_ald_free(cache, cache);\n}\n\n\nAs you can see, p->payload is being passed as a NULL pointer to the free\nfunction, resulting in a segmentation fault.  I can add a NULL check to this\ncode but is there something farther up the line causing this problem in the\ncache code?", "id": 72928, "time": "2005-03-28T16:50:32Z", "bug_id": 34209, "creation_time": "2005-03-28T16:50:32Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 34209, "text": "\nFurther investigation reveals this condition is only reached when \"require\ngroup\" directive is present:\n\n<Directory \"/mysitestuff\">\n    Options FollowSymLinks\n    AllowOverride All\n    AuthAuthoritative Off\n    AuthType Basic\n    AuthName \"my stuff\"\n    AuthLDAPEnabled On\n    AuthLDAPURL \"ldap://ldapserver\"\n    require group cn=blah,o=foo\n    Order allow,deny\n    Allow from all\n\nChanging the \"require group\" to \"require ldap-attribute foo=bar\" does not\nproduce the segmentation faults in the cache free or compare code.\n\nI have backported only the 2.1 util_ldap_cache code dealing with this function,\nspecifically the addition of numvals to the node struct and the logic to iterate\nbased on this value.  Crashes still occur with this change.\n", "id": 73012, "attachment_id": null, "creator": "david_arcuri@mgic.com", "creation_time": "2005-03-29T21:07:18Z", "time": "2005-03-29T21:07:18Z", "is_private": false}, {"count": 2, "tags": [], "creator": "david_arcuri@mgic.com", "attachment_id": null, "id": 73109, "time": "2005-03-30T21:23:04Z", "bug_id": 34209, "creation_time": "2005-03-30T21:23:04Z", "is_private": false, "text": "\nMore stack traces, crashing consistently in the same place now:\n\n\n\n(gdb) where\n#0  util_ldap_search_node_compare (a=0x0, b=0xffbfd328) at util_ldap_cache.c:147\n#1  0x0002f8bc in util_ald_cache_fetch (cache=0xfecd04a0, payload=0xffbfd328)\n    at util_ldap_cache_mgr.c:373\n#2  0x0002d708 in util_ldap_cache_checkuserid (r=0x0, ldc=0xffbfd328,\nurl=0xffbfd411 \"&#65533;&#65533;t\",\n    basedn=0xffbfd3f0 \"(&(objectclass=*)(uid=test4806))\", scope=916296,\nattrs=0xc9c00,\n    filter=0xff0d9ae4 \"\\237&#65533;\\200\", bindpw=0x1939c8 \"/bliss_loan.cgi\",\nbinddn=0x0, retvals=0x3d)\n    at util_ldap.c:780\n(gdb) quit\n\n\n[emadea3@unixweb2 apache2]$ sudo pstack core\ncore 'core' of 17258:   /tmp/httpd -f\n/usr/local/apache2/conf/qa.web-mi.mgic.com.conf -k start\n 0002ebc0 util_ldap_search_node_compare (0, ffbfd328, c9e9069, f0000000,\nffbfd410, 0) + 4\n 0002f8b4 util_ald_cache_fetch (fecd04a0, ffbfd328, ffbfd411, ffbfd3f0, dfb48,\nc9c00) + 50\n 0002d700 util_ldap_cache_checkuserid (0, 13a758, 12ae48, 12ae90, 2, 0) + 98\n 00030784 mod_auth_ldap_check_user_id (0, ffffffff, 0, 99800, 99800, ffffdfe8) + 190\n 0008d128 ap_run_check_user_id (18efe0, 0, 1, 1905a0, 190528, 0) + 3c\n 0008da44 ap_process_request_internal (0, b5c00, 18efe0, 10, fecb0020, 1) + 210\n 0005c208 ap_process_request (18efe0, ce800, 4, 18efe0, ceb90, 0) + 9c\n 000576d8 ap_process_http_connection (186888, 1867b0, 1867b0, 4, ceb90, 138698) + f4\n 0008163c ap_run_process_connection (186888, 1867b0, 1867b0, 4, 1847e8, 18af98) + 3c\n 000746c0 child_main (184808, 1, cdc00, cf000, 18af98, 4e2e) + 3b0\n 00074814 make_child (73c00, 4, 3, 2, a, cdc00) + b4\n 00074a90 perform_idle_server_maintenance (da098, ce36c, ffbff8a0, da098, dfa28,\n0) + 150\n 000750d4 ap_mpm_run (cdc00, cdc00, 0, ce800, cdc00, cdc00) + 594\n 0007adbc main     (da098, dfa28, ffbff9cc, cf094, cdc00, cdc00) + 610\n 0002bb2c _start   (0, 0, 0, 0, 0, 0) + 5c\n\n\nThere's some garbage in the arguments, stack getting corrupted?  This does not\nhappen on every request -- I have a script running to continuously pump requests\nwith random ID/password into the server from a pool of 5000 LDAP objects so I\ncan fill the cache.  I can get generally 1 failure in every 100 requests until\nit starts purging the cache, then that number increases to approximately 1 in\n10.  This is not acceptable for production website so I have eliminated the\nissue by using ldap-attribute instead of group for now.\n"}, {"count": 3, "tags": [], "creator": "bnicholes@apache.org", "text": "I can see where there is the possibility of having a NULL payload in the cache \ndue to a node copy unable to succeed because of memory allocation issues, but \nI am unable to duplicate this problem on either NetWare or SUSE Linux.  Adding \na NULL check in the node free routine couldn't hurt.  \n\nThere are a couple of problems that I see with the example configuration.  \nFirst, are member and/or uniquemember attributes of the group object public?  \nIf not then all of your accesses will probably fail anyway unless you \nconfigure a username and password for util_ldap to use when accessing ldap.  \nAlso, there isn't a base context defined in the ldap url.  Was this just a \ntypo?  Anyway, with or without the mis-configuration, I am still unable to \nduplicate the problem.", "id": 73124, "time": "2005-03-31T00:02:57Z", "bug_id": 34209, "creation_time": "2005-03-31T00:02:57Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 34209, "attachment_id": null, "text": "\nyes, sorry, there's a base context in the \"real\" LDAP URL ... Everything does\nwork correctly -most- of the time.  The 2nd set of stack dumps (where it dumps\nin util_ldap_search_node_compare) is the most recent set of problems I am\nhaving.  I can replicate the intermittent crash (~ 1 out of 20) every time I use\na \"require group cn=foo,o=bar\" and it crashes every time in the same function\n(see above.)  And every time the stack trace via gdb seems to have corruption in\nthe arguments to the util_ldap_cache_checkuserid function.  I have tested this\nwith thousands of requests with random IDs from a pool, to stress both the cache\nfilling and purging.  It seems to not exhibit crashy behavior until after the\nfirst purge.\n\nIf you'd like any additional information, I can replicate this easily, and would\nbe happy to provide any other debugging information you need to examine this\nmore fully.\n\nUsing prefork, by the way, if that matters.  (Was debugging with single thread,\nstill got the crash.)\n", "id": 73126, "time": "2005-03-31T00:13:23Z", "creator": "david_arcuri@mgic.com", "creation_time": "2005-03-31T00:13:23Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 34209, "text": "\nThis is what happens when LDAPSharedCacheSize is too small and the out of memory\ncondition is not handled well.  There's no error or anything returned by the\ncalloc functions.  I suspect it's a problem in Solaris only, if no one can\nreplicate this on any other OS.  From reading past bug reports it seems the\nshared memory code on Solaris is problematic at best, anyway.  Increasing\nLDAPSharedCacheSize to a reasonably high value that will not be exceeded during\nregular webserver activity has made this problem go away.", "id": 73873, "attachment_id": null, "creator": "david_arcuri@mgic.com", "creation_time": "2005-04-20T22:17:24Z", "time": "2005-04-20T22:17:24Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 34209, "attachment_id": null, "text": "I think this error condition should be handled. A Crash is not acceptable to me.", "id": 73874, "time": "2005-04-20T23:23:19Z", "creator": "chip@force-elite.com", "creation_time": "2005-04-20T23:23:19Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 34209, "attachment_id": null, "text": "This Problem is reproducible in Redhat AS 2.1.\n\nIt is a little bit difficult to determine 'a reasonably high value' of \nLDAPSharedCacheSize. But I think the default value of \nLDAPSharedCacheSize '100KB' is too small for the default of \nLDAPCacheEntries '1024'.", "id": 73876, "time": "2005-04-21T02:56:36Z", "creator": "Toshiya_Kobayashi@sunmoretec.co.jp", "creation_time": "2005-04-21T02:56:36Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 34209, "attachment_id": null, "id": 73906, "time": "2005-04-21T15:57:27Z", "creator": "david_arcuri@mgic.com", "creation_time": "2005-04-21T15:57:27Z", "is_private": false, "text": "\nMaybe it would be helpful if the default settings in the documentation didn't\nreflect a 200k cache size with 1024 entries?  I have mine set to 1024000 with\n512 entries and 120 second timeouts and have just ran 40,000 test hits against\nthe cache with no failures.\n\n"}, {"count": 9, "tags": [], "bug_id": 34209, "attachment_id": 15811, "text": "Created attachment 15811\nfix cache corruption with full cache\n\nThis patch fixes the cache corruption at full cache for me.", "id": 77758, "time": "2005-07-28T12:43:27Z", "creator": "jorton@redhat.com", "creation_time": "2005-07-28T12:43:27Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 34209, "text": "Joe,\n\nWe have loaded tested with this patch applied and it appears to have fixed the cache corruption problem \nfor us as well.", "id": 77837, "attachment_id": null, "creator": "rmorgan@pobox.com", "creation_time": "2005-07-30T02:54:29Z", "time": "2005-07-30T02:54:29Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 34209, "attachment_id": null, "text": "Good to hear, Ryan.\n\nThis has been committed to the trunk and submitted for backport to 2.0.x.\n\nhttp://svn.apache.org/viewcvs?rev=225746&view=rev\n\nNote that there is at least one other bug I know if in the current 2.0.x code\nwhich could cause cache corruption; the fact that the mutex protecting the shm\nsegment is not initialized properly (see r105412).  I'll be proposing that for\nbackport too.", "id": 77943, "time": "2005-08-02T16:34:54Z", "creator": "jorton@redhat.com", "creation_time": "2005-08-02T16:34:54Z", "is_private": false}, {"count": 12, "tags": [], "creator": "jorton@redhat.com", "text": "Committed for 2.0.55.", "id": 78089, "time": "2005-08-04T12:03:35Z", "bug_id": 34209, "creation_time": "2005-08-04T12:03:35Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 34209, "text": "*** Bug 35695 has been marked as a duplicate of this bug. ***", "id": 78202, "time": "2005-08-07T19:39:02Z", "creator": "jorton@redhat.com", "creation_time": "2005-08-07T19:39:02Z", "is_private": false, "attachment_id": null}]
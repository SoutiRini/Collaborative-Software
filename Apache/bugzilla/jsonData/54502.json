[{"count": 0, "tags": [], "creator": "etienne.champetier@free.fr", "attachment_id": null, "text": "Hi\n\nWith kernel 3.2.9 (included) to 3.2.17 (excluded) there was an arbitrary limitation on epoll path (1000) which cause apache to deadlock when having 1001+ process. The first patch is http://git.kernel.org/?p=linux/kernel/git/torvalds/linux.git;a=commitdiff;h=28d82dc1c4edbc352129f97f4ca22624d1fe61de, which put the limit to 1000, and the second patch is http://git.kernel.org/?p=linux/kernel/git/torvalds/linux.git;a=commitdiff;h=93dc6107a76daed81c07f50215fa6ae77691634f, which doesn't limit epoll for non-nested path (so apache work again).\n\n\nThis limitation show a bug in apache which lead to a deadlock: if a httpd process get an error when doing epoll_ctl, it continue to run, and if he get the accept_mutex, epoll_wait will return 0 because epoll_ctl just failed, and apache will be blocked.\nHere follow a small strace of the 1001 process:\n-epoll_create1(O_CLOEXEC)    = 39\n-epoll_ctl(39, EPOLL_CTL_ADD, 6, {EPOLLIN, {u32=1010443880, u64=140193037952616}}) = -1 EINVAL (Invalid argument)\n-epoll_ctl(39, EPOLL_CTL_ADD, 4, {EPOLLIN, {u32=1010443880, u64=140193037952616}}) = -1 EINVAL (Invalid argument)\n-semop(14385470, {{0, -1, SEM_UNDO}}, 1 <unfinished ...>\n<... semop resumed> )       = 0\n-epoll_wait(39,  <unfinished ...>\n<... epoll_wait resumed> {}, 2, 10000) = 0\n\n\nTo reproduce:\n-get a kernel with the limitation (3.2.9 to 3.2.16 for the 3.2 branch)\n-configure httpd to listen on at least 2 ports (80 and 81) so that it use accept_mutex\n-configure httpd to \"StartServers 1001\"\n-start it with strace -f /etc/init.d/httpd start > ~/debug.log\n-make a lot of request until it stop responding\n\n\nThe httpd process that fail to epoll_ctl should kill it self or retry epoll_ctl.\n\n\nThis bug was uncovered on a centos 6.3 with httpd 2.2.15 and a 3.2.13 kernel, but i've read other thread speaking of the 1000 httpd process limit on ubuntu...\nhttps://bugs.launchpad.net/ubuntu/+source/apache2/+bug/1028470 (so still present in 2.2.22 for sure)\n\nI've put normal severity because by updating the kernel apache work again.", "id": 164925, "time": "2013-01-29T10:47:03Z", "bug_id": 54502, "creation_time": "2013-01-29T10:47:03Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 54502, "text": "In the latest Apache 2.2.x code,the child_main() function in prefork.c is not checking the status code after calling apr_pollset_add().\n\nHere is an excerpt:\n\n    for (lr = ap_listeners, i = num_listensocks; i--; lr = lr->next) {\n        apr_pollfd_t pfd = { 0 };\n\n        pfd.desc_type = APR_POLL_SOCKET;\n        pfd.desc.s = lr->sd;\n        pfd.reqevents = APR_POLLIN;\n        pfd.client_data = lr;\n\n        /* ### check the status */\n        (void) apr_pollset_add(pollset, &pfd);\n    }\n\nThis code has been improved in Apache 2.4.x.\nsvn blame shows the following revisions:\n\n101799     gstein     for (lr = ap_listeners, i = num_listensocks; i--; lr = lr->next) {\n101799     gstein         apr_pollfd_t pfd = { 0 };\n101799     gstein \n101799     gstein         pfd.desc_type = APR_POLL_SOCKET;\n101799     gstein         pfd.desc.s = lr->sd;\n101799     gstein         pfd.reqevents = APR_POLLIN;\n101799     gstein         pfd.client_data = lr;\n101799     gstein \n804764     rpluem         status = apr_pollset_add(pollset, &pfd);\n804764     rpluem         if (status != APR_SUCCESS) {\n1393382     jorton             /* If the child processed a SIGWINCH before setting up the\n1393382     jorton              * pollset, this error path is expected and harmless,\n1393382     jorton              * since the listener fd was already closed; so don't\n1393382     jorton              * pollute the logs in that case. */\n1393382     jorton             if (!die_now) {\n1393382     jorton                 ap_log_error(APLOG_MARK, APLOG_EMERG, status, ap_server_conf, APLOGNO(00157)\n1393382     jorton                              \"Couldn't add listener to pollset; check system or user limits\");\n1393382     jorton                 clean_child_exit(APEXIT_CHILDSICK);\n1393382     jorton             }\n1393382     jorton             clean_child_exit(0);\n804764     rpluem         }\n757853    trawick \n757853    trawick         lr->accept_func = ap_unixd_accept;\n 96102        rbb     }", "id": 164948, "time": "2013-01-30T22:37:17Z", "creator": "mike.rumph@oracle.com", "creation_time": "2013-01-30T22:37:17Z", "is_private": false, "attachment_id": null}]
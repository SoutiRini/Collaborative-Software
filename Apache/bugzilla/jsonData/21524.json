[{"count": 0, "tags": [], "bug_id": 21524, "text": "I have isolated this problem in the CoyoteConnector thread pooling. Upon every \nHTTP request the thread count goes up and never gets cleaned by the GC. I am \nable to monitor this through the windows task manager (added thread count \ncolumn). Tomcat initially starts with 45 threads; let the server run for 24 \nhours (about 70 to 80 HTTP requests) and the thread count is > 230. This \neventually results in server crash when the VM runs out of heap. Thread pool \nconfiguration is ...minProcessors=\"5\" maxProcessors=\"25 acceptCount=\"10 \nenableLookups=\"false\". Increasing JMV memory only delays the crash. This is \nturning out to be a serious problem in our production servers. Is there is work \naround? Server is running on windows-2000 SP3. Java version is 1.3.1_04-b02.", "id": 40501, "time": "2003-07-11T19:03:13Z", "creator": "rishi@quantal.com", "creation_time": "2003-07-11T19:03:13Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 21524, "is_private": false, "id": 40540, "time": "2003-07-12T07:20:56Z", "creator": "remm@apache.org", "creation_time": "2003-07-12T07:20:56Z", "tags": [], "text": "This works for me.\nIt's obviously easier to debug using TC 5's status monitor, where you can see\nwhat the threads are doing. You could try getting a thread dump which could give\nhints at to what's going on, or debug it further. Right now, we can't do\nanything with your report."}]
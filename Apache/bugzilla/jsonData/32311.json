[{"count": 0, "tags": [], "bug_id": 32311, "text": "When loadtesting our site with 10 users to a page which makes a lot of use of\nthe fmt:formatdate, the hits / seconds drop and fluctuate tremondously between 5\nhits / sec and 20 hits per sec.\nWith 1 or 2 users the hits per second maintain constantly at 20 hits / sec.\nUsing Weblogic 6.1 SP4, with 15 (default) execute threads, memory / garbage\ncollection is not a problem.\nAfter creating threaddumps is appears that almost all threads have these\nstacktraces on the top: \n       at java.util.Calendar.getInstance(Calendar.java:829)\n       at java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:326)\n       at java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:317)\n       at java.text.DateFormat.get(DateFormat.java:645)\n       at java.text.DateFormat.getTimeInstance(DateFormat.java:411)\n       at\norg.apache.taglibs.standard.tag.common.fmt.FormatDateSupport.createFormatter(FormatDateSupport.java:223)\n       at\norg.apache.taglibs.standard.tag.common.fmt.FormatDateSupport.doEndTag(FormatDateSupport.java:155)\n\nAnd are all \"waiting on monitor XXXXX\", it seems these calls are blocking each\nother, possible due to the fact that getInstance is synchronized?\n\nOther pages which are not using this tag are not a problem.", "id": 67205, "time": "2004-11-19T11:43:22Z", "creator": "nijlunsing_h@schiphol.nl", "creation_time": "2004-11-19T11:43:22Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 32311, "is_private": false, "text": "Since the date patterns, are likely to stay the same on each page. (Because \nusually the date is dynamic, and the date patterns static). Would it be an idea \nto have a pool of SimpleDateFormatters each with its own pattern + locale, so \nwe could reuse the same patterns to avoid unnecessary calls to \nCalendar.getInstance?\n\ne.g. in org.apache.taglibs.standard.tag.common.fmt.FormatDateSupport\n\nSomething like:\n    static Map sdfCache=new HashMap();\n\n    public synchronized SimpleDateFormat getSimpleDateFormat(String pattern, \nLocale locale) {\n    \tSystem.out.println(\"getSimpleDateFormat \"+pattern+\":\"+locale);\n    \tString key=pattern+locale;\n    \tSimpleDateFormat sdf;\n    \tif (sdfCache.containsKey(key)) {\n    \t\tsdf=(SimpleDateFormat) sdfCache.get(key);\n    \t}\n    \telse {\n        \tsdf=new SimpleDateFormat(pattern, locale);\n        \tsdfCache.put(key,sdf);\t    \t\t\n    \t}\n    \treturn sdf;\n    }\n\nAnd later:\nInstead of\n\t    DateFormat formatter = createFormatter(locale);\n            // Apply pattern, if present\n\t    if (pattern != null) {\n\t\ttry {\n\t\t    ((SimpleDateFormat) formatter).applyPattern(pattern);\n\t\t} catch (ClassCastException cce) {\n\t\t    formatter = new SimpleDateFormat(pattern, locale);\n\t\t}\n\t    }\n\nSomething like\n\t    DateFormat formatter = getSimpleDateFormat (pattern, locale);\t\n\t", "id": 67381, "time": "2004-11-23T10:40:18Z", "creator": "nijlunsing_h@schiphol.nl", "creation_time": "2004-11-23T10:40:18Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "nijlunsing_h@schiphol.nl", "is_private": false, "id": 67387, "attachment_id": null, "bug_id": 32311, "creation_time": "2004-11-23T12:05:23Z", "time": "2004-11-23T12:05:23Z", "text": "After making a prototype of the code mentioned earlier, I saw a tremendous \nincrease in the performance; and no calendar.getInstance appeared in the \nstacktrace...\nHowever... Now we are experiencing locking issues with this method:\norg.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager.getEvaluator\nByName(ExpressionEvaluatorManager.java:144)\norg.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager.evaluate\n(ExpressionEvaluatorManager.java:128)\n\nFortunatly I don't seem to be alone anymore with this problem:\nhttp://www.mail-archive.com/taglibs-user@jakarta.apache.org/msg04179.html\n\nIs there any progress on this? (After all the above message was posted over 1 \nyear ago)"}, {"count": 3, "tags": [], "bug_id": 32311, "text": "Ah the above locking seems to be resolved in 1.0.6:\nhttp://jakarta.apache.org/taglibs/doc/standard-1.0-doc/ReleaseNotes.html\n", "id": 67388, "time": "2004-11-23T12:53:31Z", "creator": "nijlunsing_h@schiphol.nl", "creation_time": "2004-11-23T12:53:31Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "bayard@apache.org", "is_private": false, "id": 96893, "attachment_id": null, "bug_id": 32311, "creation_time": "2006-12-13T15:29:57Z", "time": "2006-12-13T15:29:57Z", "text": "The suggestion below of a static cache seems bad as SimpleDateFormat is not\nthread safe. \n\nHowever we only access the formatter object in a very small location, so we\ncould change:\n\n            if (tz != null) {\n                formatter.setTimeZone(tz);\n            }\n            formatted = formatter.format(value);\n\nto\n\n         synchronized(formatter) {\n            if (tz != null) {\n                formatter.setTimeZone(tz);\n            }\n            formatted = formatter.format(value);\n         }\n\nThe current code does also access formatter when creating, but that's because\nit's doing daft things in creation. The code below gets rid of that.\n\nSo this is fixable and needs a demonstrative test to be created. "}, {"count": 5, "tags": [], "bug_id": 32311, "is_private": false, "text": "As with 17700, the question of what to do with the cache over time exists.\n\nIn this case it seems unlikely that we would have an enormous number of patterns\nbeing created; so I wouldn't expect the map to grow hugely.\n\nOne solution might be to implement a very basic pool - but that seems very\nlikely to lead to bugs while we get it right.", "id": 96894, "time": "2006-12-13T15:47:36Z", "creator": "bayard@apache.org", "creation_time": "2006-12-13T15:47:36Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 32311, "is_private": false, "text": "SPI style plugin cache added for this (see attachment to issue\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=31789 ).", "id": 99081, "time": "2007-02-07T17:33:08Z", "creator": "bayard@apache.org", "creation_time": "2007-02-07T17:33:08Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 32311, "text": "Created attachment 20900\nFix+Test patch\n\nAttaching a fix and a test. The test fails because Cactus does not seem to set\nthe locale on the request. The default action then is to print date.toString().\nSwitching that to use the Locale.getDefault() shows that the code is working.\n\nProbably have to just ditch the test and just go with the fix, along with a\nsample app showing that things are okay.", "id": 108826, "time": "2007-09-30T00:46:05Z", "creator": "bayard@apache.org", "creation_time": "2007-09-30T00:46:05Z", "is_private": false, "attachment_id": 20900}, {"count": 8, "tags": [], "bug_id": 32311, "text": "Created attachment 20987\nFix+More Tests\n\nAdding a few more tests, though it is more of a proof and not a test.", "id": 109371, "time": "2007-10-15T22:35:47Z", "creator": "bayard@apache.org", "creation_time": "2007-10-15T22:35:47Z", "is_private": false, "attachment_id": 20987}, {"count": 9, "tags": [], "bug_id": 32311, "is_private": false, "text": "svn ci -m \"Applying the fix and the tests from #32311 - LRUMap used as a caching\nsystem to improve on performance\"\n\nSending        src/org/apache/taglibs/standard/tag/common/fmt/FormatDateSupport.java\nAdding         test/org/apache/taglibs/standard/tag/el/fmt\nAdding         test/org/apache/taglibs/standard/tag/el/fmt/TestDateTag.java\nAdding         test/web/org/apache/taglibs/standard/tag/el/fmt\nAdding         test/web/org/apache/taglibs/standard/tag/el/fmt/TestDateTag.jsp\nTransmitting file data ...\nCommitted revision 585044.", "id": 109372, "time": "2007-10-15T22:40:56Z", "creator": "bayard@apache.org", "creation_time": "2007-10-15T22:40:56Z", "attachment_id": null}]
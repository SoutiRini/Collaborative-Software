[{"count": 0, "tags": [], "text": "Created attachment 34376\nexcel file used in test code\n\nI meet excetion when shift rows in sheet name Sheet\u30fb1 and named_range test_named_range include sheet name\n\nI add file in attactment and code used (tested with 3.15 and 3.16-beta1)\n\n    @Test\n    public void testShiftRows() throws IOException {\n        String in = \"data/book2.xlsx\";\n        try (XSSFWorkbook wb = new XSSFWorkbook(new FileInputStream(in))) {\n            XSSFSheet sheet = wb.getSheetAt(0);\n            sheet.shiftRows(1, 2, 3);\n        }\n    }\n\nException message:\n\norg.apache.poi.ss.formula.FormulaParseException: Specified named range 'Sheet' does not exist in the current workbook.\n\tat org.apache.poi.ss.formula.FormulaParser.parseNonRange(FormulaParser.java:898)\n\tat org.apache.poi.ss.formula.FormulaParser.parseRangeable(FormulaParser.java:490)\n\tat org.apache.poi.ss.formula.FormulaParser.parseRangeExpression(FormulaParser.java:311)\n\tat org.apache.poi.ss.formula.FormulaParser.parseSimpleFactor(FormulaParser.java:1509)\n\tat org.apache.poi.ss.formula.FormulaParser.percentFactor(FormulaParser.java:1467)\n\tat org.apache.poi.ss.formula.FormulaParser.powerFactor(FormulaParser.java:1454)\n\tat org.apache.poi.ss.formula.FormulaParser.Term(FormulaParser.java:1827)\n\tat org.apache.poi.ss.formula.FormulaParser.additiveExpression(FormulaParser.java:1955)\n\tat org.apache.poi.ss.formula.FormulaParser.concatExpression(FormulaParser.java:1939)\n\tat org.apache.poi.ss.formula.FormulaParser.comparisonExpression(FormulaParser.java:1896)\n\tat org.apache.poi.ss.formula.FormulaParser.intersectionExpression(FormulaParser.java:1869)\n\tat org.apache.poi.ss.formula.FormulaParser.unionExpression(FormulaParser.java:1849)\n\tat org.apache.poi.ss.formula.FormulaParser.parse(FormulaParser.java:1997)\n\tat org.apache.poi.ss.formula.FormulaParser.parse(FormulaParser.java:170)\n\tat org.apache.poi.xssf.usermodel.helpers.XSSFRowShifter.updateNamedRanges(XSSFRowShifter.java:91)\n\tat org.apache.poi.xssf.usermodel.XSSFSheet.shiftRows(XSSFSheet.java:3068)\n\tat org.apache.poi.xssf.usermodel.XSSFSheet.shiftRows(XSSFSheet.java:2925)\n\tat test.poi.TestExcel.testShiftRows(TestExcel.java:69)\n\nThank you very much for reading and support", "attachment_id": 34376, "id": 194463, "creator": "tuyenivt@gmail.com", "time": "2016-10-17T03:07:10Z", "bug_id": 60260, "creation_time": "2016-10-17T03:07:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60260, "text": "The exception also occurred while rename sheet", "id": 196002, "time": "2017-01-12T02:11:01Z", "creator": "tuyenivt@gmail.com", "creation_time": "2017-01-12T02:11:01Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "NamedRange(\n    name = \"test_named_range\",\n    refersTo = \"'Sheet\u30fb1'!A1:A9\"\n)\n\nThis is the first time I have seen the sheet name be non-ASCII, which probably breaks some of our assumptions and regular expressions.\n\nHow do you think this should be fixed?\nThe rename sheet [1] case will be easier to start with as it doesn't require understanding the parse tree.\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFWorkbook.java?revision=1777855&view=markup#l1656", "attachment_id": null, "id": 196004, "creator": "onealj@apache.org", "time": "2017-01-12T08:16:03Z", "bug_id": 60260, "creation_time": "2017-01-12T08:16:03Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 60260, "text": "I stand corrected. Renaming a sheet requires updating named ranges (and formulas) that refer to that sheet, which requires parsing the formula. We'll need to dig through the parse tree code either way.\n\nhttps://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xssf/usermodel/helpers/XSSFFormulaUtils.java?revision=1754521&view=markup", "count": 3, "id": 196005, "time": "2017-01-12T08:20:29Z", "creator": "onealj@apache.org", "creation_time": "2017-01-12T08:20:29Z", "is_private": false}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 196006, "time": "2017-01-12T08:32:39Z", "bug_id": 60260, "creation_time": "2017-01-12T08:32:39Z", "is_private": false, "text": "The formula parse tree assumes the formula contains only ASCII. It reads one **char** from the formula string at a time via GetChar() [1]. For multi-byte symbols in the formula, a char is returned for each byte in the symbol [2]. Perhaps we should be using String.codePointAt(int index) instead [3].\n\n> private char look;\n> ...\n> private void GetChar() {\n> ...\n>     look=_formulaString.charAt(_pointer);\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/formula/FormulaParser.java?revision=1776796&view=markup#l1134\n\n[2] http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#unicode\n[3] http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#codePointAt(int)"}, {"count": 5, "tags": [], "creator": "tuyenivt@gmail.com", "attachment_id": null, "id": 196009, "time": "2017-01-12T10:13:55Z", "bug_id": 60260, "creation_time": "2017-01-12T10:13:55Z", "is_private": false, "text": "In my test, maybe multi-byte char is invalid when isUnquotedSheetNameChar check sheet name chars [1], char '\u30fb' not match any case in \n> private static boolean isUnquotedSheetNameChar(char ch) {\n>   if (Character.isLetterOrDigit(ch)) {\n>     return true;\n>   }\n>   switch(ch) {\n>     case '.': // dot is OK\n>     case '_': // underscore is OK\n>         return true;\n>   }\n> ...\n[1] https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/formula/FormulaParser.java?revision=1776796&view=markup#l1178"}, {"count": 6, "tags": [], "bug_id": 60260, "attachment_id": null, "is_private": false, "id": 196010, "time": "2017-01-12T10:57:53Z", "creator": "onealj@apache.org", "creation_time": "2017-01-12T10:57:53Z", "text": "Added support for unicode (one and multi-char symbols) in r1778418 and docs in 1778419.\nNote that with these changes, look is a codepoint value, not a char, in the formula parser.\n\nThanks for the simple problem description, stack trace, unit test and test file.\n\nThese changes will be included in the next release, 3.16 beta 2."}, {"attachment_id": null, "tags": [], "bug_id": 60260, "text": "http://graphemica.com/%E3%83%BB\nThis is katakana middle dot (U+30FB)", "count": 7, "id": 196011, "time": "2017-01-12T11:15:01Z", "creator": "onealj@apache.org", "creation_time": "2017-01-12T11:15:01Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 60260, "text": "(In reply to Zero from comment #1)\n> The exception also occurred while rename sheet\n\nDo you have a unit test for this as well? Oddly, the two other unit tests that I wrote in r1778418 that started with a blank workbook passed without modifying Formula parser. It'd be good to have another meaningful unit test if you have it.", "id": 196044, "time": "2017-01-12T17:38:58Z", "creator": "onealj@apache.org", "creation_time": "2017-01-12T17:38:58Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 60260, "text": "(In reply to Javen O'Neal from comment #8)\n> (In reply to Zero from comment #1)\n> > The exception also occurred while rename sheet\n> \n> Do you have a unit test for this as well? Oddly, the two other unit tests\n> that I wrote in r1778418 that started with a blank workbook passed without\n> modifying Formula parser. It'd be good to have another meaningful unit test\n> if you have it.\n\nYour changes work with me, I try to test based on your unit test (renameSheetWithNamedRangeReferringToUnicodeSheetName), and all my case passed\n\n> @Test\n> public void renameSheetWithNamedRangeReferringToUnicodeSheetName() {\n>     List<String> specChars = Arrays.asList(\n>             \"\\u2018\", \"\\u300C\", \"\\u300D\", \"\\uFFE5\", \"\\uFF5B\",\n>             \"\\uFF5D\", \"\\uFF5C\", \"\\uFF1B\", \"\\u2019\", \"\\uFF1A\", \"\\u201D\",\n>             \"\\u30FC\", \"\\uFF5E\", \"\\uFF01\", \"\\uFF20\", \"\\uFF03\", \"\\uFF04\",\n>             \"\\uFF05\", \"\\uFF3E\", \"\\uFF06\", \"\\uFF0A\", \"\\uFF08\", \"\\uFF09\",\n>             \"\\uFF3F\", \"\\uFF1C\", \"\\uFF1E\", \"\\uFF1F\", \"\\u3001\", \"\\u3002\",\n>             \"\\u30FB\", \"\\u2605\", \"\\u2606\", \"\\uFF0B\", \"\\u25CF\", \"\\u203B\",\n>             \"\\uFF1D\", \"\\u2460\", \"\\u2461\", \"\\u2462\", \"\\u2463\", \"\\u2464\",\n>             \"\\u2465\", \"\\u2466\", \"\\u2467\", \"\\u2468\", \"\\u2469\", \"\\u246A\",\n>             \"\\u246B\", \"\\u246C\", \"\\u246D\", \"\\u246E\", \"\\u246F\", \"\\u2470\",\n>             \"\\u2471\", \"\\u2472\", \"\\u2473\", \"\\u24EB\", \"\\u24EC\", \"\\u24ED\",\n>             \"\\u24EE\", \"\\u24EF\", \"\\u24F0\", \"\\u24F1\", \"\\u24F2\", \"\\u24F3\",\n>             \"\\u24F4\", \"\\u3007\", \"\\uFF0E\", \"\\u30FB\", \"\\u3002\", \"\\u25CB\",\n>             \"\\u25CE\", \"\\u21D4\", \"\\u2192\", \"\\u2190\", \"\\u2191\", \"\\u2193\",\n>             \"\\u21D2\", \"\\u3010\", \"\\u3011\", \"\\u3014\", \"\\u3015\", \"\\u300A\",\n>             \"\\u300B\", \"\\u3008\", \"\\u3009\", \"\\u300E\", \"\\u300F\", \"\\uFF1C\",\n>             \"\\uFF1E\", \"\\u226A\", \"\\u226B\", \"\\u301D\", \"\\u301F\");\n>     XSSFWorkbook wb = new XSSFWorkbook();\n>     for (String specChar : specChars) {\n>         wb.createSheet(\"Sheet\" + specChar + \"1\");\n> \n>         Name name = wb.createName();\n>         name.setNameName(\"test_named_range\");\n>         name.setRefersToFormula(\"'Sheet\" + specChar + \"1'!A1:A6\");\n> \n>         wb.setSheetName(0, \"Sheet 1\");\n>         \n>         wb.removeName(name);\n>         wb.removeSheetAt(0);\n>     }\n>     IOUtils.closeQuietly(wb);\n> }\n\nThank you so much, Javen O'Neal", "id": 196049, "time": "2017-01-13T02:16:08Z", "creator": "tuyenivt@gmail.com", "creation_time": "2017-01-13T02:16:08Z", "is_private": false, "attachment_id": null}]
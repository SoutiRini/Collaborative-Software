[{"count": 0, "tags": [], "bug_id": 38447, "text": "the method addTextProperty use PropertyName object as key for the map \ntextProperties and the tokenStream method of IndexConfiguration.AnalyzerImpl use \nthe fieldName as key ...\n\nin the map there is a [PropertyName(\"DAV:\", \"displayname\") => SomeAnalyser()]\nand the AnalyzerImpl ask get(\"DAV:displayname\") and get 'null' then use the \ndefault analyzer", "id": 85196, "attachment_id": null, "creator": "dho@oma.be", "creation_time": "2006-01-30T15:38:26Z", "time": "2006-01-30T15:38:26Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 38447, "attachment_id": null, "id": 85197, "time": "2006-01-30T15:52:26Z", "creator": "dho@oma.be", "creation_time": "2006-01-30T15:52:26Z", "is_private": false, "text": "And, there is a patch,\n\nIndex: src/stores/org/apache/slide/index/lucene/IndexConfiguration.java\n===================================================================\n--- src/stores/org/apache/slide/index/lucene/IndexConfiguration.java\t\n(revision 373518)\n+++ src/stores/org/apache/slide/index/lucene/IndexConfiguration.java\t(working \ncopy)\n@@ -84,7 +84,7 @@\n \tprotected Set knownResourceTypes = new HashSet();\n \n \tpublic void addStringProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\tthis.stringProperties.add(key);\n \t\tthis.indexedProperties.add(key);\n \t}\n@@ -90,11 +90,11 @@\n \t}\n \n \tpublic boolean isStringProperty(PropertyName propertyName) {\n-\t\treturn this.stringProperties.contains(propertyName);\n+\t\treturn this.stringProperties.\ncontains(generateFieldName(propertyName));\n \t}\n \n \tpublic boolean isStringProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\treturn this.stringProperties.contains(key);\n \t}\n \n@@ -99,7 +99,7 @@\n \t}\n \n \tpublic void addDateProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\tthis.dateProperties.add(key);\n \t\tthis.indexedProperties.add(key);\n \t}\n@@ -105,11 +105,11 @@\n \t}\n \n \tpublic boolean isDateProperty(PropertyName propertyName) {\n-\t\treturn this.dateProperties.contains(propertyName);\n+\t\treturn this.dateProperties.contains(generateFieldName(propertyName)\n);\n \t}\n \n \tpublic boolean isDateProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\treturn this.dateProperties.contains(key);\n \t}\n \n@@ -114,7 +114,7 @@\n \t}\n \n \tpublic void addIntProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\tthis.intProperties.add(key);\n \t\tthis.indexedProperties.add(key);\n \t}\n@@ -120,11 +120,11 @@\n \t}\n \n \tpublic boolean isIntProperty(PropertyName propertyName) {\n-\t\treturn this.intProperties.contains(propertyName);\n+\t\treturn this.intProperties.contains(generateFieldName(propertyName));\n \t}\n \n \tpublic boolean isIntProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\treturn this.intProperties.contains(key);\n \t}\n \n@@ -129,7 +129,7 @@\n \t}\n \n \tpublic void addSupportsIsdefinedProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\tthis.supportsIsdefinedProperties.add(key);\n \t\tthis.indexedProperties.add(key);\n \t}\n@@ -135,11 +135,11 @@\n \t}\n \n \tpublic boolean supportsIsDefined(PropertyName propertyName) {\n-\t\treturn this.supportsIsdefinedProperties.contains(propertyName);\n+\t\treturn this.supportsIsdefinedProperties.\ncontains(generateFieldName(propertyName));\n \t}\n \n \tpublic boolean supportsIsDefined(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\treturn this.supportsIsdefinedProperties.contains(key);\n \t}\n \n@@ -144,7 +144,7 @@\n \t}\n \n \tpublic void addTextProperty(String namespace, String name, Analyzer \nanalyzer) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\tthis.textProperties.put(key, analyzer);\n \t\tthis.indexedProperties.add(key);\n \t}\n@@ -150,11 +150,11 @@\n \t}\n \n \tpublic boolean isTextProperty(PropertyName propertyName) {\n-\t\treturn this.textProperties.containsKey(propertyName);\n+\t\treturn this.textProperties.\ncontainsKey(generateFieldName(propertyName));\n \t}\n \n \tpublic boolean isTextProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\treturn this.textProperties.containsKey(key);\n \t}\n \n@@ -159,11 +159,11 @@\n \t}\n \n \tpublic boolean isIndexedProperty(PropertyName name) {\n-\t\treturn this.indexedProperties.contains(name);\n+\t\treturn this.indexedProperties.contains(generateFieldName(name));\n \t}\n \n \tpublic boolean isIndexedProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\treturn this.indexedProperties.contains(key);\n \t}\n \n@@ -175,7 +175,7 @@\n \t * @return\n \t */\n \tpublic boolean isComparableProperty(String namespace, String name) {\n-\t\tPropertyName key = PropertyName.getPropertyName(name, namespace);\n+\t\tString key = generateFieldName(name, namespace);\n \t\treturn this.stringProperties.contains(key)\n \t\t\t\t|| this.intProperties.contains(key)\n \t\t\t\t|| this.dateProperties.contains(key);\n@@ -182,9 +182,9 @@\n \t}\n \n \tpublic boolean isComparableProperty(PropertyName name) {\n-\t\treturn this.stringProperties.contains(name)\n-\t\t\t\t|| this.intProperties.contains(name)\n-\t\t\t\t|| this.dateProperties.contains(name);\n+\t\treturn this.stringProperties.contains(generateFieldName(name))\n+\t\t\t\t|| this.intProperties.contains(generateFieldName(name))\n+\t\t\t\t|| this.dateProperties.contains(generateFieldName(name)\n);\n \t}\n \n \tIterator knownResourceTypes() {\n@@ -385,6 +385,10 @@\n \tpublic String generateFieldName(String namespaceUri, String name) {\n \t\treturn namespaceUri + name;\n \t}\n+\t\n+\tpublic String generateFieldName(PropertyName propertyName) {\n+\t\treturn generateFieldName(propertyName.getNamespace(), propertyName.\ngetName());\n+\t}\n \n \tpublic String generateKey(String uri, NodeRevisionNumber number) {\n \t\treturn uri + \"#\" + number;\n"}]
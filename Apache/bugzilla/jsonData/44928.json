[{"count": 0, "tags": [], "creator": "errorken@yahoo.com", "attachment_id": null, "is_private": false, "id": 116175, "time": "2008-05-02T13:58:40Z", "bug_id": 44928, "creation_time": "2008-05-02T13:58:40Z", "text": "I'm using tomcat 6.0.16 in combination with JSF RI 1.2_04.\n\nI created a very simple page in which I have a form, one inputText and one commandButton. The inputText value binds to a backing bean with the property 'test' of type java.lang.Integer.\n\nSo, when I click the submit button the numeric value I have entered in the inputText gets set on the backing bean; all going fine.\n\nHowever, when I submit an empty value (I leave the inputText empty) I see that an Integer with value '0' is being set on the backing bean. This (logically) results in a '0' being shown in my inputText after submitting the form (since the property value of the backing has changed to '0').\n\nIt seems that the coerseNumber method of class \"org.apache.el.lang.ELSupport\" is returning \"ZERO\" (which is a new Long(0L)) when the object passed to the method is NULL. This cannot be right? Why would this implementation decide to return a value when the supplied value was null? The same goes for Boolean. When a NULL Boolean is given, it will return Boolean.FALSE...\n\nI tested the same application (with the same libraries) on glfassfish and I had no problems there...\n\nSo I'm wondering what is going wrong here on tomcat."}, {"count": 1, "attachment_id": null, "bug_id": 44928, "text": "Please take a look at https://issues.apache.org/bugzilla/show_bug.cgi?id=43285, specifically comment 7. I am guessing that this is what you are seeing. If not, please re-open this bug and attach a test case that demonstrates the problem.", "id": 116182, "time": "2008-05-02T14:47:25Z", "creator": "markt@apache.org", "creation_time": "2008-05-02T14:47:25Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 44928, "text": "Yes, you are right, thanks.\n\nBut why are there differences between the sun EL RI and apache's one?\nFurther more, why on earth is the spec saying that null should be converted to 0? Thats sounds like fuzy logic behavior to me.\n\nAlso, if I add a validator to the inputText, like:\n\n<h:inputText value=\"#{testBean.integer}\" required=\"false\">\n    <f:validateLongRange minimum=\"5\" maximum=\"10\"/>\n</h:inputText>\n\nNow it gets even more wrong. The first time I enter no value => submit succeeds. In my backing bean I'm receiving '0' which is normally not possible since the validator is forcing a value from 5 till 10.\n\nThen, when the page is re-rendered, a '0' appears in the text field since the value on the backing bean has become '0'. If I then re-submit again, I get a validation error \"Validation Error: Specified attribute is not between the expected values of 5 and 10\".\n\nSo, besides the fact this is setting values on my backing bean which are normally not allowed, imagine that I have a search page in wich I have like 5 numerical fields which are not required but must have a value greater then 0. The user will have to manually blank these fields out after each submit then? (if he leaves these fields empty in the first submit)", "id": 116195, "time": "2008-05-03T03:16:51Z", "creator": "errorken@yahoo.com", "creation_time": "2008-05-03T03:16:51Z", "tags": [], "is_private": false}]
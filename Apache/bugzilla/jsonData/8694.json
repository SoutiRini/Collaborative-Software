[{"count": 0, "tags": [], "bug_id": 8694, "attachment_id": null, "is_private": false, "id": 15235, "time": "2002-05-01T12:16:40Z", "creator": "Stefan.Kuehnel@frontis.com", "creation_time": "2002-05-01T12:16:40Z", "text": "The c:forEach fails with an \"java.security.AccessControlException: access denied\n(java.lang.RuntimePermission accessDeclaredMembers)\".  This is with the nightly\nbuild from 30-Apr-2002.\n\nEnvironment: J2SDK 1.4, J2EE 1.3.1_02\n\n=========\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jstl/core\" %>\n<%@ page import=\"java.util.HashMap\" %>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\"\n\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n<html>\n<head>\n  <title>ForEach Map-Test</title>\n</head>\n<body>\n<jsp:useBean id=\"myMap\" scope=\"page\" class=\"java.util.HashMap\"/>\n<c:set target=\"${myMap}\" property=\"key1\" value=\"value1\" />\n<c:set target=\"${myMap}\" property=\"key2\" value=\"value2\" />\n<c:set target=\"${myMap}\" property=\"key3\" value=\"value3\" />\n<c:forEach var=\"entry\" items=\"${myMap}\">\n  <c:set var=\"key\" value=\"${entry.key}\" />\n  <c:set var=\"value\" value=\"${entry.value}\" />\n\n  <c:out value=\"${key}\" /> = <c:out value=\"${value}\" />\n</c:forEach>\n</body>\n</html>\n=========\n\njava.security.AccessControlException: access denied (java.lang.RuntimePermission\naccessDeclaredMembers)\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:270)\n\tat java.security.AccessController.checkPermission(AccessController.java:401)\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:542)\n\tat java.lang.SecurityManager.checkMemberAccess(SecurityManager.java:1662)\n\tat java.lang.Class.checkMemberAccess(Class.java:1401)\n\tat java.lang.Class.getDeclaredMethod(Class.java:1218)\n\tat\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager.getPublicMethod(BeanInfoManager.java:376)\n\tat\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager.getPublicMethod(BeanInfoManager.java:390)\n\tat\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager.getPublicMethod(BeanInfoManager.java:353)\n\tat\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager.initialize(BeanInfoManager.java:245)\n\tat\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager.checkInitialized(BeanInfoManager.java:209)\n\tat\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager.getProperty(BeanInfoManager.java:294)\n\tat\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager.getBeanInfoProperty(BeanInfoManager.java:178)\n\tat org.apache.taglibs.standard.lang.jstl.ArraySuffix.evaluate(ArraySuffix.java:304)\n\tat org.apache.taglibs.standard.lang.jstl.ComplexValue.evaluate(ComplexValue.java:141)\n\tat org.apache.taglibs.standard.lang.jstl.ELEvaluator.evaluate(ELEvaluator.java:235)\n\tat org.apache.taglibs.standard.lang.jstl.ELEvaluator.evaluate(ELEvaluator.java:198)\n\tat org.apache.taglibs.standard.lang.jstl.Evaluator.evaluate(Evaluator.java:134)\n\tat\norg.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager.evaluate(ExpressionEvaluatorManager.java:112)\n\tat\norg.apache.taglibs.standard.tag.el.core.ExpressionUtil.evalNotNull(ExpressionUtil.java:85)\n\tat\norg.apache.taglibs.standard.tag.el.core.SetTag.evaluateExpressions(SetTag.java:147)\n\tat org.apache.taglibs.standard.tag.el.core.SetTag.doStartTag(SetTag.java:95)\n\tat org.apache.jsp.test$jsp._jspService(test$jsp.java:230)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:107)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat\norg.apache.jasper.servlet.JspServlet$JspServletWrapper.service(JspServlet.java:202)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:382)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:474)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:247)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.access$0(ApplicationFilterChain.java:197)\n\tat\norg.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:176)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:172)\n\tat\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:243)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:201)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\n\tat org.apache.catalina.valves.CertificatesValve.invoke(CertificatesValve.java:246)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContext.invoke(StandardContext.java:2343)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\n\tat\norg.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\n\tat org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:368)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:174)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.connector.http.HttpProcessor.process(HttpProcessor.java:1012)\n\tat org.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.java:1107)\n\tat java.lang.Thread.run(Thread.java:536)"}, {"count": 1, "tags": [], "text": "I believe this is a container bug; Nathan Abramson, the implementor of the EL\nagrees.  This works for me on Tomcat 4.0.4B2, the most recent Tomcat milestone.", "is_private": false, "bug_id": 8694, "id": 15254, "time": "2002-05-01T16:49:58Z", "creator": "bayern@essentially.net", "creation_time": "2002-05-01T16:49:58Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 8694, "text": "By the way, it could also just be a configuration issue:  can your security\nmanager be made less restrictive?", "id": 15257, "time": "2002-05-01T17:17:58Z", "creator": "bayern@essentially.net", "creation_time": "2002-05-01T17:17:58Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 8694, "text": "The security settings are the standard ones of a J2EE 1.3.1 RI installation.  In\n1.3.1 those were made a lot tighter than before, but not unreasonable except for\nthe fact that they don't allow writing to the servlet temp directory. BTW, I put\nall JSTL libraries into the lib directory of the web application, could have\nadded them as extensions but I'd assume this scenario is not unreasonable.\n\n=====\n\n// Standard extensions get all permissions by default\n\ngrant codeBase \"file:${java.home}/lib/ext/-\" {\n    permission java.security.AllPermission;\n};\n\ngrant codeBase \"file:${java.home}/../lib/tools.jar\" {\n    permission java.security.AllPermission;\n};\n\ngrant codeBase \"file:${com.sun.enterprise.home}/lib/-\" {\n    permission java.security.AllPermission;\n};\n\ngrant codeBase \"file:${jms.home}/classes/\" {\n    permission java.security.AllPermission;\n};\n\n// Drivers and other system classes should be stored in this \n// code base.\ngrant codeBase \"file:${com.sun.enterprise.home}/lib/system/-\" {\n    permission java.security.AllPermission;\n};\n\n// additional permissions for EJBs\ngrant codeBase \"file:${com.sun.enterprise.home}/ejb_impls/-\" {\n    permission java.lang.RuntimePermission \"queuePrintJob\";\n    permission java.io.FilePermission\n\"${com.sun.enterprise.home}${/}repository${/}-\", \"read\";\n};\n\n// additional permissions for servlets\ngrant codeBase \"file:${com.sun.enterprise.home}/public_html/-\" {\n    permission java.lang.RuntimePermission \"loadLibrary.*\";\n    permission java.lang.RuntimePermission \"accessClassInPackage.*\";\n    permission java.lang.RuntimePermission \"queuePrintJob\";\n    permission java.lang.RuntimePermission \"modifyThreadGroup\";\n    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write\";\n    permission java.io.FilePermission\n\"${com.sun.enterprise.home}${/}repository${/}-\", \"read,write,delete\";\n};\n\n// additional permissions for standalone resource adapters\ngrant codeBase \"file:${com.sun.enterprise.home}/connector/adapters/-\" {\n    permission javax.security.auth.PrivateCredentialPermission \"* * \\\"*\\\"\", \"read\";\n    permission java.io.FilePermission \"${com.sun.enterprise.home}${/}logs${/}-\",\n\"read,write\";\n};\n\n// permissions for other classes\ngrant codeBase \"file:${com.sun.enterprise.home}/repository/-\" {\n    permission java.lang.RuntimePermission \"loadLibrary.*\";\n    permission java.lang.RuntimePermission \"accessClassInPackage.*\";\n    permission java.lang.RuntimePermission \"queuePrintJob\";\n    permission java.lang.RuntimePermission \"modifyThreadGroup\";\n    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write\";\n    permission javax.security.auth.PrivateCredentialPermission \"* * \\\"*\\\"\", \"read\";\n};\n\n\n// permissions for default domain\ngrant {\n    permission java.net.SocketPermission \"*\", \"connect\";\n    permission java.util.PropertyPermission \"*\", \"read\";\n\n    // workaround missing doPrivileged blocks in javamail\n    permission java.io.FilePermission\n\"${com.sun.enterprise.home}${/}lib${/}j2ee.jar\", \"read\";\n\n    permission javax.security.auth.PrivateCredentialPermission\n\"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\", \"read\";\n    permission javax.security.auth.PrivateCredentialPermission\n\"javax.resource.spi.security.GenericCredential * \\\"*\\\"\", \"read\";\n\n};", "id": 15318, "time": "2002-05-02T09:06:12Z", "creator": "Stefan.Kuehnel@frontis.com", "creation_time": "2002-05-02T09:06:12Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 8694, "attachment_id": null, "id": 28862, "creation_time": "2003-01-03T22:03:29Z", "time": "2003-01-03T22:03:29Z", "creator": "cmlenz@apache.org", "text": "I'm having the same problem here. I very much hope this will be fixed: the JSTL\nRI should pretty please work out of the box with the J2EE RI, which it currently\ndoesn't when trying to get the 'key' or 'value' properties of Map.Entry objects\nfrom an EL expression (as sufficiently demonstrated in this bug report).\n\nThe core of the problem is that the BeanInfoManager in the EL is inappropriately\nassuming it has full reflection permissions, and uses Class.getDeclaredMethod()\nwithout even trying Class.getMethod() first.\n\nI'll attach a patch containing a possible remedy to this problem.", "is_private": false}, {"count": 5, "tags": [], "text": "Created attachment 4331\nPatch to make BeanInfoManager try Class.getMethod() before Class.getDeclaredMethod()", "attachment_id": 4331, "id": 28863, "creator": "cmlenz@apache.org", "time": "2003-01-03T22:07:09Z", "bug_id": 8694, "creation_time": "2003-01-03T22:07:09Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 8694, "attachment_id": null, "id": 28864, "time": "2003-01-03T22:37:58Z", "creator": "cmlenz@apache.org", "creation_time": "2003-01-03T22:37:58Z", "is_private": false, "text": "BTW, I'm not at all an expert about reflection, and the patch I've attached is\nquite certainly incorrect. I just wanted to make the point that with the patch\napplied my web-app works on J2EE-RI 1.3.1.\n\nSo somehow calling getMethod() before of getDeclaredMethod(), or resorting to\ngetMethod() when getDeclaredMethod() fails with a SecurityException, would be\nthe right direction to go."}, {"count": 7, "tags": [], "bug_id": 8694, "attachment_id": 4339, "id": 28873, "time": "2003-01-04T12:34:40Z", "creator": "cmlenz@apache.org", "creation_time": "2003-01-04T12:34:40Z", "is_private": false, "text": "Created attachment 4339\nImproved/fixed patch"}, {"count": 8, "tags": [], "bug_id": 8694, "is_private": false, "text": "I've attached a fix that preserves the current behaviour, and only resorts to\ncalling getMethod() when getDeclaredMethod() throws an AccessControlException.\nEssentially, the current functionality should continue to work in all cases, but\nerrors like the one described in this report should be fixed.", "id": 28874, "time": "2003-01-04T12:38:03Z", "creator": "cmlenz@apache.org", "creation_time": "2003-01-04T12:38:03Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 8694, "attachment_id": null, "id": 28914, "time": "2003-01-06T17:11:49Z", "creator": "bayern@essentially.net", "creation_time": "2003-01-06T17:11:49Z", "is_private": false, "text": "I believe the patch you've submitted is too general; note that if the declared \nmethods fail, we check methods declared through the interface and superclass \n(recursively).  The solution, as far as my analysis suggests, is simply to \nignore security-related exceptions received while focusing on the declared \nmethods of the present class (as distinct from its interfaces and parent \nclasses).\n\nLet me know if that more restricted change would work for you (simply a\n\n  try {\n    ...\n  } catch (AccessControlException ex) {\n    // no methods here; pass through to next check\n  }\n\n).  If it does, and once I think about it some more, I'll change the EL code."}, {"count": 10, "tags": [], "bug_id": 8694, "attachment_id": null, "id": 28917, "time": "2003-01-06T20:41:13Z", "creator": "cmlenz@apache.org", "creation_time": "2003-01-06T20:41:13Z", "is_private": false, "text": "This does not work. The problem as I understand it is that however far recursion\ngoes, or whether it's searching interfaces and super-classes, the code *always*\ncalls getDeclaredMembers(), and that is simply not allowed under J2EE-RI 1.3.1\n(thanks to a denied 'java.lang.RuntimePermission accessDeclaredMembers').\n\nAt some place, the routine would need to resort to a simple getMethod(), which\nwill work without problems under the described restrictions.\n\nI guess I don't quite understand why the BeanInfoManger.getPublicMethod needs to\ncall getDeclaredMethod() in all cases... however I'll do some more experimenting."}, {"count": 11, "tags": [], "bug_id": 8694, "attachment_id": null, "id": 28922, "time": "2003-01-06T22:43:21Z", "creator": "cmlenz@apache.org", "creation_time": "2003-01-06T22:43:21Z", "is_private": false, "text": "Okay, some more research...\n\nI actually believe the patch I proposed is pretty okay. I've inserted print\nstatements all over the place in the GetPublicMethod() methods of\nBeanInfoManager, and this is what I get when trying to access the 'key' property\nof a HashMap entry:\n\n> getPublicMethod(getKey)\n  Declaring class is java.util.HashMap$Entry\n  Class modifiers are 'private static'\n  > getPublicMethod(class java.util.HashMap$Entry, public java.lang.Object\njava.util.HashMap$Entry.getKey())\n    See if this is a public class declaring the method\n    [no]\n    Searching interfaces\n    Searching interface java.util.Map$Entry\n    > getPublicMethod(interface java.util.Map$Entry, public java.lang.Object\njava.util.HashMap$Entry.getKey())\n      See if this is a public class declaring the method\n      [yes]\n      Trying with getDeclaredMethod()\n      [my patch:] AccessControlException -> trying a simple getMethod()\n      [success]\n      Found method 'getKey'\n    Found method 'getKey'\n\n[indentation and comments in array notation added manually for better clarity]\n\nWhat I've learned from this: BeanInfoManager delegates tothe recursive\ngetPublicMethod(Class,Method) because the class HashMap$Entry is private.\nCorrectly, it looks for the interfaces/superclasses, and finds\njava.util.Map$Entry. The interface is public, but now the lookup of the 'getKey'\nmethod fails because we don't have permissions to 'accessDeclaredMembers'...\n\nIMHO this is a good place to try a simple Class.getMethod(). I have been playing\nwith several alternatives, but none of them seem as clean as what I proposed in\nthe last patch (sorry it's marked as text/plain BTW, should have been tar-gzip).\n\nIf you have any concerns, I'd really be interested in a scenario where the\nproposed change would alter behaviour for the worse. BTW, I'm testing this\nchange with a fairly large web-app, and everything is working as expected\n(though I might not have any real weirdo-beans flying around ;-) )."}, {"count": 12, "tags": [], "bug_id": 8694, "is_private": false, "text": "Okay, you've convinced me.  The JSTL spec doesn't specifically ask for \ngetDeclaredMethod(); I'm actually now thinking of simply replacing the call to \ngetDeclaredMethod() with one to getMethod().  But for now, I've adopted a \nslightly modified version of your patch that implements the logic you're \nsuggesting:  drop back to getMethod() on an AccessControlException.  Thanks \nfor the report, and let me know if you continue to experience problems.", "id": 29367, "time": "2003-01-14T20:52:39Z", "creator": "bayern@essentially.net", "creation_time": "2003-01-14T20:52:39Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "cmlenz@apache.org", "attachment_id": null, "id": 29564, "creation_time": "2003-01-16T19:29:16Z", "time": "2003-01-16T19:29:16Z", "bug_id": 8694, "text": "This change works for me. Agree it's not really elegant :-P", "is_private": false}]
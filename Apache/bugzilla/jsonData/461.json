[{"count": 0, "tags": [], "text": "I am testing the support of UNICODE input and output for Java servlets and JSP's.  I have a very simple servlet that creates a web page with a single entry field.  When the ServletResponse is created, I use setContentType(\"text/html charset=UTF-8\") to tell the web browsers this page contains eight bit compressed unicode.  This works, the data is placed from the servlet onto the web page in UTF8 style, and displayed by the web browser (IE and Netscape) correctly.  \r\nHowever, when data is entered by the web browser, the getParameterValues method ignores the character encoding and maps each byte to a seperate character.  It fails even when I use the setCharacterEncoding(\"UTF8\") method on the request before reading any parameter names or values.  \r\nSupport of character encoding on request input is critical to any users outside of Latin-1.", "is_private": false, "id": 430, "creator": "dev@tomcat.apache.org", "time": "2001-01-16T12:24:12Z", "bug_id": 461, "creation_time": "2001-01-16T12:24:12Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 461, "text": "*** Bug 460 has been marked as a duplicate of this bug. ***", "id": 5392, "attachment_id": null, "creator": "Larry.Isaacs@sas.com", "creation_time": "2001-09-11T19:41:39Z", "time": "2001-09-11T19:41:39Z", "is_private": false}, {"count": 2, "tags": [], "creator": "craig.mcclanahan@sun.com", "text": "This must really be related to Tomcat 4, because setCharacterEncoding() is a new\nServlet 2.3 feature.\n\nAlso, it relates to behavior that was fixed a long, long, time ago, so I am\nclosing the bug report as well.\n", "id": 5445, "time": "2001-09-12T17:43:25Z", "bug_id": 461, "creation_time": "2001-09-12T17:43:25Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 461, "text": "I found this bug again in Tomcat 4.1.29.\n\nWhat I did:\n\nI use Tomcat 4.1.29 and Struts 1.1 (it is not a bug in Struts, I'll show later)\n\nI created a JSP page with following link:\n\n<a href=\"http://localhost:8080/a/t1.do?name=%C3%A4\">reload</a>\n\nThe action \"t1\" does nothing else then give back the request parameter as value\nof a form bean (struts mechanism). But in the form bean there is a wrong value\nbecause Tomcat does not handle the UTF8 encoding the right way.\n\nI set file.encoding=UTF-8 for Tomcat. \nI put the encoding in the JSP page with the page directive.\nI set the request to UTF-8 in a request filter in Tomcat. \n\nIn the request filter i checked the parameter in the request and there it has\nalready the wrong value. It is as mentioned in the bug description above that\neach byte is URL decoded but not also UTF-8 decoded. So the automatic mapping of\na parameter value to a form bean property fails.\n\nBtw. this only fails for parameter values. Form values are handled correctly.\n\nAnd because the wrong decoding happens before the filter is executed it must\nhappen somewhere deep down in Tomcat and can not be in Struts.\n\nI hope somebody can tell me what I did wrong or what bug is in Tomcat.\n\nWith regards,\n\nUdo Walker", "id": 60542, "time": "2004-07-13T12:35:14Z", "creator": "Udo.Walker@abas.de", "creation_time": "2004-07-13T12:35:14Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "There have been numerous bug reports and queries on tomcat-user of this nature \nand I have tested this functionality to death. I am as certain as I can be \nthat this is not a bug. I have written some standard text on the subject which \nmay help you and have attached it below. \n\nREQUESTS\n========\n\nThere are a number of situations where there may be a requirement to use non-\nUS ASCII characters in a URI. These include:\n- Parameters in the query string\n- Servlet paths\n\nThere is a standard for encoding URIs (http://www.w3.org/International/O-URL-\ncode.html) but this standard is not consistently followed by clients. This \ncauses a number of problems.\n\nThe functionality provided by Tomcat (4 and 5) to handle this less than ideal \nsituation is described below.\n\n1. The Coyote HTTP/1.1 connector has a useBodyEncodingForURI attribute which \nif set to true will use the request body encoding to decode the URI query \nparameters.\n  - The default value is true for TC4 (breaks spec but gives consistent \nbehaviour across TC4 versions)\n  - The default value is false for TC5 (spec compliant but there may be \nmigration issues for some apps)\n2. The Coyote HTTP/1.1 connector has a URIEncoding attribute which defaults to \nISO-8859-1.\n3. The parameters class (o.a.t.u.http.Parameters) has a QueryStringEncoding \nfield which defaults to the URIEncoding. It must be set before the parameters \nare parsed to have an effect.\n\nThings to note regarding the servlet API:\n1. HttpServletRequest.setCharacterEncoding() normally only applies to the \nrequest body NOT the URI.\n2. HttpServletRequest.getPathInfo() is decoded by the web container.\n3. HttpServletRequest.getRequestURI() is not decoded by container.\n\nOther tips:\n1. Use POST with forms to return parameters as the parameters are then part of \nthe request body.\n\n\nRESPONSES\n=========\n\nHTML META\n tags are ignored by Tomcat. You may use <%@ page pagEncoding=\"...\" %> for \nJSPs.", "bug_id": 461, "attachment_id": null, "id": 60572, "time": "2004-07-13T21:19:37Z", "creator": "markt@apache.org", "creation_time": "2004-07-13T21:19:37Z", "tags": [], "is_private": false}]
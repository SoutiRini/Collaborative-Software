[{"count": 0, "tags": [], "creator": "kario@mermit.fi", "attachment_id": null, "id": 2143, "time": "2001-04-27T09:14:51Z", "bug_id": 1556, "creation_time": "2001-04-27T09:14:51Z", "is_private": false, "text": "I'm trying to use ant for testing classes which use JAXP (more particulary \norg.w3c.* and org.xml.* classes).\n\nI'm getting ClassLinkageErrors while trying to load those classes and \nIncompatibleClassChangeErrors while trying to use them.\n\n--- stack trace follows ---\n\njava.io.IOException: java.lang.LinkageError: Class org/w3c/dom/Document \nviolates loader constraints\n        at \norg.apache.tools.ant.AntClassLoader.getClassFromStream(AntClassLoader.java:439)\n        at \norg.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:492)\n        at \norg.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:465)\n        at \norg.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:369)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:253)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:313)\n        at \nfi.mermit.gateway.mediaclip.smartmessage.BrowserConfig.writeBytes(BrowserConfig.java:349)\n        at \nfi.mermit.gateway.mediaclip.smartmessage.BrowserConfig.<init>(BrowserConfig.java:151)\n        at \nfi.mermit.gateway.mediaclip.smartmessage.test.TC1_BrowserConfig.syntaxTest(TC1_BrowserConfig.java:\n139)\n        at \nfi.mermit.gateway.mediaclip.smartmessage.test.TC1_BrowserConfig$1.runTest(TC1_BrowserConfig.java:2\n6)\n        at junit.framework.TestCase.runBare(TestCase.java:130)\n        at junit.framework.TestResult$1.protect(TestResult.java:106)\n        at junit.framework.TestResult.runProtected(TestResult.java:124)\n        at junit.framework.TestResult.run(TestResult.java:109)\n        at junit.framework.TestCase.run(TestCase.java:121)\n        at junit.framework.TestSuite.runTest(TestSuite.java:157)\n        at junit.framework.TestSuite.run(TestSuite.java:152)\n        at \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:209)\n        at \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:409)\n        at \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:283)\n        at \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:263)\n        at org.apache.tools.ant.Target.execute(Target.java:153)\n        at org.apache.tools.ant.Project.runTarget(Project.java:898)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:536)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:510)\n        at org.apache.tools.ant.Main.runBuild(Main.java:421)\n        at org.apache.tools.ant.Main.main(Main.java:149)\n\n--- stack trace ends ---\n\nThe only explanation that I can think of is that the classes are loaded twice. \nFirst by the default system ClassLoader when Ant uses them to parse the \nbuild.xml file and the second time by AntClassLoader when my own classes use \nthem. These two versions somehow get mixed up.\n\nI've managed to get past this problem by adding the org.w3c.* and org.xml.* \nclasses into system classpath using addSystemPackageRoot method in the \nconstructor of AntClassLoader so that they are always loaded using the system \ndefault ClassLoader no matter what.\n\nHappy bughunting...\n\nJanne Kario\n<kario@mermit.fi>"}, {"count": 1, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "text": "Can you try forking the junit task (running junit with fork=\"yes\"). You'll need \nto add the ant junit classes into the classpath when you do. \n\nYour analysis is close to the mark. The classes when they are loaded are \nviolating loader constraints. These come about when a class in one loader \nrefers to methods or fields in a class loaded by another loader. It is \ndifficult to avoid when the package namespaces of the classloaders (system and \njunit task) overlap.\n\nForking is usually effective. If so, please let me know and I will close this \nbug.", "id": 2383, "time": "2001-05-10T07:34:36Z", "bug_id": 1556, "creation_time": "2001-05-10T07:34:36Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 1556, "text": "We have run into this same issue. <junit fork=\"yes\"> does work.  This error \nalso appears when running the JUnit SwingTestRunner class.\n\nMight this be a bug in a class loader implementation?\nIf a class is loaded by the system class loader and by another class loader, \nthen the system class loader definitions should always be used.  \n\nIf class definition precedence used, then what are the conditions where loader \nconstraints can be violated?", "id": 2984, "time": "2001-06-14T08:10:01Z", "creator": "james@loudfire.com", "creation_time": "2001-06-14T08:10:01Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "text": "For now forking is the best option here. \n\nJames asked \"Might this be a bug in a class loader implementation?\". Sort of :-\n). The usage of the AntClassLoader does not strictly respect \"class definition \nprecedence\" as you call it. If it were to do this, then you could only test \nclasses with the junit task which were on the system classpath. This is because \nthe junit classes themselves will be loaded by the system loader and would not \nbe able to see any classes in the classpath given to the junit task. For now, I \nam going to mark this as WONTFIX and advise you to use the fork option. I do \nhave some experiments to try.\n", "id": 3627, "time": "2001-07-11T07:04:44Z", "bug_id": 1556, "creation_time": "2001-07-11T07:04:44Z", "is_private": false}]
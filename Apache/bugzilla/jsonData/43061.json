[{"attachment_id": null, "tags": [], "creator": "ferenc.toth@siemens.com", "is_private": false, "count": 0, "id": 106487, "time": "2007-08-08T07:12:58Z", "bug_id": 43061, "creation_time": "2007-08-08T07:12:58Z", "text": "Hi All,\n\nin a project we needed to be able to flush a logfile regularly (besides using\nbuffered logger). I'm enclosing the patch to FileAppender. This introduces a new\nparameter called BufferFlushTime. This specifies how often (in seconds) should\nthe logfile be flushed. If not specified, nothing happens. Use it freely if you\nwish.\n\n--- FileAppender.java.orig\t2006-09-14 02:04:20.000000000 +0200\n+++ FileAppender.java\t2007-08-08 15:54:04.436673600 +0200\n@@ -64,6 +64,37 @@\n    */\n   protected int bufferSize = 8*1024;\n \n+  /**\n+   * Sets the time in seconds to flush the logfile unconditionally.\n+   */\n+  private int bufferFlushTime = -1;\n+\n+  /**\n+   * The instance that flushes the logfile periodically.\n+   */\n+  private LogFlusher logFlusher = null;\n+\n+  /**\n+   * Inner class to periodically flush the logfile.\n+   */\n+  class LogFlusher extends Thread {\n+    private boolean stop = false;\n+\n+    private void quit() {\n+       stop = true;\n+    }\n+\n+    public void run() {\n+      while (!stop) {\n+        try {\n+          Thread.sleep(FileAppender.this.bufferFlushTime * 1000);\n+        } catch (InterruptedException ie) {\n+          // ignore\n+        }\n+        FileAppender.this.flush();\n+      }\n+    }\n+  }\n \n   /**\n      The default constructor does not do anything.\n@@ -84,12 +115,17 @@\n     <p>If the <code>bufferedIO</code> parameter is <code>true</code>,\n     then buffered IO will be used to write to the output file.\n \n+    <p>If the <code>bufferFlushTime</code> parameter is set to a\n+    non-negative value, then the file will be flushed every\n+    <code>bufferFlushTime</code> seconds unconditionally.\n+\n   */\n   public\n   FileAppender(Layout layout, String filename, boolean append, boolean bufferedIO,\n-\t       int bufferSize) throws IOException {\n+\t       int bufferSize, final int bufferFlushTime) throws IOException {\n     this.layout = layout;\n     this.setFile(filename, append, bufferedIO, bufferSize);\n+    setBufferFlushTime(bufferFlushTime);\n   }\n \n   /**\n@@ -214,6 +250,18 @@\n \n \n   /**\n+     Get the value of the <b>BufferFlushTime</b> option.\n+\n+     <p>Setting BufferFlushTime will cause the log file to be periodally flushed.\n+\n+  */\n+  public\n+  int getBufferFlushTime() {\n+    return this.bufferFlushTime;\n+  }\n+\n+\n+  /**\n      The <b>Append</b> option takes a boolean value. It is set to\n      <code>true</code> by default. If true, then <code>File</code>\n      will be opened in append mode by {@link #setFile setFile} (see\n@@ -256,6 +304,25 @@\n   }\n \n   /**\n+     Set the value of the <b>BufferFlushTime</b> option.\n+\n+     <p>Setting BufferFlushTime will cause the log file to be periodally flushed.\n+\n+  */\n+  public\n+  void setBufferFlushTime(int bufferFlushTime) {\n+    this.bufferFlushTime = bufferFlushTime;\n+\n+    if (logFlusher != null) {\n+      logFlusher.quit();\n+    }\n+    logFlusher = new LogFlusher();\n+    logFlusher.setDaemon(true);\n+    logFlusher.start();\n+  }\n+\n+\n+  /**\n     <p>Sets and <i>opens</i> the file where the log output will\n     go. The specified file must be writable.\n \n@@ -339,5 +406,12 @@\n     this.fileName = null;\n     super.reset();\n   }\n+\n+  /**\n+     Flush the logfile.  */\n+  private\n+  void flush() {\n+    this.qw.flush();\n+  }\n }"}, {"count": 1, "tags": [], "bug_id": 43061, "attachment_id": null, "id": 107125, "time": "2007-08-22T20:25:32Z", "creator": "carnold@apache.org", "creation_time": "2007-08-22T20:25:32Z", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of 28647 ***"}, {"count": 2, "tags": [], "bug_id": 43061, "attachment_id": null, "id": 118391, "time": "2008-07-08T06:31:27Z", "creator": "ferenc.toth@siemens.com", "creation_time": "2008-07-08T06:31:27Z", "is_private": false, "text": "(In reply to comment #1)\n> \n> *** This bug has been marked as a duplicate of 28647 ***\n\nHi,\n\nI don't think it is. 28647 is about flushing the file once a given severity message is logged. This patch is about flushing the file at regular time intervals.\n\nFerenc\n"}, {"count": 3, "tags": [], "bug_id": 43061, "attachment_id": null, "is_private": false, "id": 131064, "time": "2009-10-10T20:11:39Z", "creator": "carnold@apache.org", "creation_time": "2009-10-10T20:11:39Z", "text": "Closed out bug 28647 by providing an protected WriterAppender.shouldFlush(LoggingEvent) that could be used to implement any arbitrary flushing strategy.  That hook should allow users to replace the flushing strategy with any arbitrary strategy\\."}]
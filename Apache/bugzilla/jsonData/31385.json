[{"attachment_id": null, "tags": [], "bug_id": 31385, "text": "Hi,\n\nI found some weird behaviour in mod_cache which I believe to be a bug. First of\nall my environment:\n\nI. Environment\n\nApache: 2.0.51\nOS: Linux\n\n\nExcerpt from my Apache configuration:\n\n<VirtualHost 192.168.2.4:80>\nServerName www.something.de\nServerAdmin admin@www.something.de\nDocumentRoot \"/var/httpd/test/www.something.de/docs\"\nErrorLog \"|/opt/apache-2.0.51/bin/rotatelogs\n/var/httpd/test/www.something.de/logs/error_log 86400\"\nCustomLog \"|/opt/apache-2.0.51/bin/rotatelogs\n/var/httpd/test/www.something.de/logs/access_log 86400\" combined\n \n \n<Directory /var/httpd/test/www.something.de/docs>\n   Options None\n   AllowOverride None\n</Directory>\n\n\n\nJkMount /* worker_ajp13\n \nCacheRoot /var/httpd/test/cache/cache\nCacheMaxFileSize 10000000\nCacheSize 256000\nCacheEnable disk /jsp-examples\nCacheDirLevels 5\nCacheDirLength 3\n \nCacheMaxExpire 120\nCacheIgnoreNoLastMod On\nCacheIgnoreCacheControl On\nCacheDefaultExpire 120\n\n\n</VirtualHost>\n\n\nII. Problem description\n\nAs you can see from my configuration excerpt I use mod_cache to cache answers\ndelivered by a Tomcat in the\nbackend. If I cache a large file from Tomcat at first glance everything seems to\nwork fine.\nThe file gets cached and delivered (1st request).\n\nIf I wait until this file is expired and request it again the file is delivered\ncorrectly\nbut it can be noticed that the cached file is about 8 KB shorter then the\nprevious one (2nd request).\nIf I do another request shortly afterwards (so that the file is not expired) the\nstart of the file is missing\n(3rd request).\n\n\nIII. Problem analysis\n\nI set the loglevel to debug and noticed that during the second request the\nCACHE_CONDITIONAL filter is used\nas seen from the error log:\n\n[Thu Sep 23 10:35:55 2004] [debug]\n/usr/src/redhat/BUILD/apache-2.0.51/httpd-2.0.51/modules/experimental/mod_cache.c(293):\ncache: running CACHE_CONDITIONAL \n\nfilter\n\n\nIV. Conclusion\n\nAs the missing data is about 8 Kb I think the first bucket of the brigade is not\nrunning through the CACHE_SAVE filter and thus\ndoes not get saved to the cache file. Having a look in cache_conditional_filter\nin modules/experimental/mod_cache.c I noticed\nthat after adding the appropriate filter (either CACHE_OUT or CACHE_SAVE)\nap_pass_brigade is called in line 300 with\nf->next as filter parameter. I believe that this is wrong, because f->next\npoints to the next filter after the CACHE_CONDITIONAL\nfilter and not to the newly added filter whichs ->next pointer points to f->next\nafter the deletion of the CACHE_CONDITIONAL filter.\n\n\nV. Solution proposal\n\nI think the filter returned by ap_add_output_filter_handle should be used in the\ncall of ap_pass_brigade instead of f->next. This\nresults in the following patch (which I will attach to this bug report):\n\n\n--- httpd-2.0.51.orig/modules/experimental/mod_cache.c\t2004-08-26\n18:59:44.000000000 +0200\n+++ httpd-2.0.51/modules/experimental/mod_cache.c\t2004-09-23 09:00:58.000000000\n+0200\n@@ -282,22 +282,24 @@ static int cache_out_filter(ap_filter_t \n \n static int cache_conditional_filter(ap_filter_t *f, apr_bucket_brigade *in)\n {\n+    ap_filter_t *replaced_filter;\n+ \n     ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, f->r->server,\n                  \"cache: running CACHE_CONDITIONAL filter\");\n \n     if (f->r->status == HTTP_NOT_MODIFIED) {\n         /* replace ourselves with CACHE_OUT filter */\n-        ap_add_output_filter_handle(cache_out_filter_handle, NULL,\n-                                    f->r, f->r->connection);\n+        replaced_filter = ap_add_output_filter_handle(cache_out_filter_handle,\nNULL,\n+                                                      f->r, f->r->connection);\n     }\n     else {\n         /* replace ourselves with CACHE_SAVE filter */\n-        ap_add_output_filter_handle(cache_save_filter_handle, NULL,\n-                                    f->r, f->r->connection);\n+        replaced_filter = ap_add_output_filter_handle(cache_save_filter_handle,\nNULL,\n+                                                      f->r, f->r->connection);\n     }\n     ap_remove_output_filter(f);\n \n-    return ap_pass_brigade(f->next, in);\n+    return ap_pass_brigade(replaced_filter, in);\n }\n \n\nI applied this patch and the problem was gone afterwards.\n\n\nRegards\n\nR\u00fcdiger Pl\u00fcm", "count": 0, "id": 64101, "time": "2004-09-23T10:32:48Z", "creator": "ruediger.pluem@vodafone.com", "creation_time": "2004-09-23T10:32:48Z", "is_private": false}, {"attachment_id": 12846, "tags": [], "bug_id": 31385, "text": "Created attachment 12846\nSolution proposal", "count": 1, "id": 64102, "time": "2004-09-23T10:33:37Z", "creator": "ruediger.pluem@vodafone.com", "creation_time": "2004-09-23T10:33:37Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 31385, "text": "This was already fixed in HEAD (in a completely different manner) and is already\nbackported to the 2.0.53 branch.\n\n(cache_conditional_filter was axed entirely.)\n\nThanks!", "id": 64337, "time": "2004-09-28T17:45:15Z", "creator": "jerenkrantz@apache.org", "creation_time": "2004-09-28T17:45:15Z", "is_private": false, "attachment_id": null}]
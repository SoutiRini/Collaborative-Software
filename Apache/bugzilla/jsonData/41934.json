[{"text": "/*\n * Copyright 1999-2005 The Apache Software Foundation.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.log4j;\n\nimport java.io.IOException;\nimport java.io.File;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport java.util.Locale;\n\nimport org.apache.log4j.helpers.LogLog;\nimport org.apache.log4j.spi.LoggingEvent;\n\n/**\n * DailyRollingFileAppender extends {@link FileAppender} so that the underlying\n * file is rolled over at a user chosen frequency.\n * \n * <p>\n * The rolling schedule is specified by the <b>DatePattern</b> option. This\n * pattern should follow the {@link SimpleDateFormat} conventions. In\n * particular, you <em>must</em> escape literal text within a pair of single\n * quotes. A formatted version of the date pattern is used as the suffix for \nthe\n * rolled file name.\n * \n * <p>\n * For example, if the <b>File</b> option is set to <code>/foo/bar.log</code>\n * and the <b>DatePattern</b> set to <code>'.'yyyy-MM-dd</code>, on\n * 2001-02-16 at midnight, the logging file <code>/foo/bar.log</code> will be\n * copied to <code>/foo/bar.log.2001-02-16</code> and logging for 2001-02-17\n * will continue in <code>/foo/bar.log</code> until it rolls over the next\n * day.\n * \n * <p>\n * Is is possible to specify monthly, weekly, half-daily, daily, hourly, or\n * minutely rollover schedules.\n * \n * <p>\n * <table border=\"1\" cellpadding=\"2\">\n * <tr>\n * <th>DatePattern</th>\n * <th>Rollover schedule</th>\n * <th>Example</th>\n * \n * <tr>\n * <td><code>'.'yyyy-MM</code>\n * <td>Rollover at the beginning of each month</td>\n * \n * <td>At midnight of May 31st, 2002 <code>/foo/bar.log</code> will be copied\n * to <code>/foo/bar.log.2002-05</code>. Logging for the month of June will\n * be output to <code>/foo/bar.log</code> until it is also rolled over the\n * next month.\n * \n * <tr>\n * <td><code>'.'yyyy-ww</code>\n * \n * <td>Rollover at the first day of each week. The first day of the week\n * depends on the locale.</td>\n * \n * <td>Assuming the first day of the week is Sunday, on Saturday midnight, June\n * 9th 2002, the file <i>/foo/bar.log</i> will be copied to\n * <i>/foo/bar.log.2002-23</i>. Logging for the 24th week of 2002 will be\n * output to <code>/foo/bar.log</code> until it is rolled over the next week.\n * \n * <tr>\n * <td><code>'.'yyyy-MM-dd</code>\n * \n * <td>Rollover at midnight each day.</td>\n * \n * <td>At midnight, on March 8th, 2002, <code>/foo/bar.log</code> will be\n * copied to <code>/foo/bar.log.2002-03-08</code>. Logging for the 9th day of\n * March will be output to <code>/foo/bar.log</code> until it is rolled over\n * the next day.\n * \n * <tr>\n * <td><code>'.'yyyy-MM-dd-a</code>\n * \n * <td>Rollover at midnight and midday of each day.</td>\n * \n * <td>At noon, on March 9th, 2002, <code>/foo/bar.log</code> will be copied\n * to <code>/foo/bar.log.2002-03-09-AM</code>. Logging for the afternoon of\n * the 9th will be output to <code>/foo/bar.log</code> until it is rolled over\n * at midnight.\n * \n * <tr>\n * <td><code>'.'yyyy-MM-dd-HH</code>\n * \n * <td>Rollover at the top of every hour.</td>\n * \n * <td>At approximately 11:00.000 o'clock on March 9th, 2002,\n * <code>/foo/bar.log</code> will be copied to\n * <code>/foo/bar.log.2002-03-09-10</code>. Logging for the 11th hour of the\n * 9th of March will be output to <code>/foo/bar.log</code> until it is rolled\n * over at the beginning of the next hour.\n * \n * \n * <tr>\n * <td><code>'.'yyyy-MM-dd-HH-mm</code>\n * \n * <td>Rollover at the beginning of every minute.</td>\n * \n * <td>At approximately 11:23,000, on March 9th, 2001,\n * <code>/foo/bar.log</code> will be copied to\n * <code>/foo/bar.log.2001-03-09-10-22</code>. Logging for the minute of\n * 11:23 (9th of March) will be output to <code>/foo/bar.log</code> until it\n * is rolled over the next minute.\n * \n * </table>\n * \n * <p>\n * Do not use the colon \":\" character in anywhere in the <b>DatePattern</b>\n * option. The text before the colon is interpeted as the protocol specificaion\n * of a URL which is probably not what you want.\n * \n * \n * @author Eirik Lygre\n * @author Ceki G&uuml;lc&uuml;\n */\npublic class DailyRollingFileAppender extends FileAppender {\n\n\t// The code assumes that the following constants are in a increasing\n\t// sequence.\n\tstatic final int TOP_OF_TROUBLE = -1;\n\n\tstatic final int TOP_OF_MINUTE = 0;\n\n\tstatic final int TOP_OF_HOUR = 1;\n\n\tstatic final int HALF_DAY = 2;\n\n\tstatic final int TOP_OF_DAY = 3;\n\n\tstatic final int TOP_OF_WEEK = 4;\n\n\tstatic final int TOP_OF_MONTH = 5;\n\n\t/**\n\t * The date pattern. By default, the pattern is set to \"'.'yyyy-MM-dd\"\n\t * meaning daily rollover.\n\t */\n\tprivate String datePattern = \"'.'yyyy-MM-dd\";\n\n\t/**\n\t * The log file will be renamed to the value of the scheduledFilename\n\t * variable when the next interval is entered. For example, if the \nrollover\n\t * period is one hour, the log file will be renamed to the value of\n\t * \"scheduledFilename\" at the beginning of the next hour.\n\t * \n\t * The precise time when a rollover occurs depends on logging activity.\n\t */\n\tprivate String scheduledFilename;\n\n\t/**\n\t * The next time we estimate a rollover should occur.\n\t */\n\tprivate long nextCheck = System.currentTimeMillis() - 1;\n\n\tDate now = new Date();\n\n\tSimpleDateFormat sdf;\n\n\tRollingCalendar rc = new RollingCalendar();\n\n\tint checkPeriod = TOP_OF_TROUBLE;\n\n\t// The gmtTimeZone is used only in computeCheckPeriod() method.\n\tstatic final TimeZone gmtTimeZone = TimeZone.getTimeZone(\"GMT\");\n\n\t/**\n\t * The default constructor does nothing.\n\t */\n\tpublic DailyRollingFileAppender() {\n\t}\n\n\t/**\n\t * Instantiate a <code>DailyRollingFileAppender</code> and open the \nfile\n\t * designated by <code>filename</code>. The opened filename will become\n\t * the ouput destination for this appender.\n\t * \n\t */\n\tpublic DailyRollingFileAppender(Layout layout, String filename,\n\t\t\tString datePattern) throws IOException {\n\t\tsuper(layout, filename, true);\n\t\tthis.datePattern = datePattern;\n\t\tactivateOptions();\n\t}\n\n\t/**\n\t * The <b>DatePattern</b> takes a string in the same format as \nexpected by\n\t * {@link SimpleDateFormat}. This options determines the rollover \nschedule.\n\t */\n\tpublic void setDatePattern(String pattern) {\n\t\tdatePattern = pattern;\n\t}\n\n\t/** Returns the value of the <b>DatePattern</b> option. */\n\tpublic String getDatePattern() {\n\t\treturn datePattern;\n\t}\n\tprivate String tempFileName=null;\n\tpublic void activateOptions() {\t\t\n\t\tif (datePattern != null && fileName != null) {\n\t\t\ttempFileName=fileName;\n\t\t\tnow.setTime(System.currentTimeMillis());\n\t\t\tsdf = new SimpleDateFormat(datePattern);\n\t\t\tint type = computeCheckPeriod();\n\t\t\tprintPeriodicity(type);\n\t\t\trc.setType(type);\n\t\t\tFile file = new File(fileName);\n\t\t\tDate d=new Date();\n\t\t\tif(file.exists())\n\t\t\t{\n\t\t\t\td=new Date(file.lastModified());\n\t\t\t}\n\t\t\tscheduledFilename = fileName\n\t\t\t\t\t+ sdf.format(d);\n\t\t\tsetFile(scheduledFilename);\n\t\t\tnow.setTime(System.currentTimeMillis());\n\t\t\tnextCheck = rc.getNextCheckMillis(now);\n\n\t\t} else {\n\t\t\tLogLog\n\t\t\t\t\t.error(\"Either File or DatePattern \noptions are not set for appender [\"\n\t\t\t\t\t\t\t+ name + \"].\");\n\t\t}\n\t\tsuper.activateOptions();\n\t}\n\n\tvoid printPeriodicity(int type) {\n\t\tswitch (type) {\n\t\tcase TOP_OF_MINUTE:\n\t\t\tLogLog.debug(\"Appender [\" + name + \"] to be rolled \nevery minute.\");\n\t\t\tbreak;\n\t\tcase TOP_OF_HOUR:\n\t\t\tLogLog.debug(\"Appender [\" + name\n\t\t\t\t\t+ \"] to be rolled on top of every \nhour.\");\n\t\t\tbreak;\n\t\tcase HALF_DAY:\n\t\t\tLogLog.debug(\"Appender [\" + name\n\t\t\t\t\t+ \"] to be rolled at midday and \nmidnight.\");\n\t\t\tbreak;\n\t\tcase TOP_OF_DAY:\n\t\t\tLogLog.debug(\"Appender [\" + name + \"] to be rolled at \nmidnight.\");\n\t\t\tbreak;\n\t\tcase TOP_OF_WEEK:\n\t\t\tLogLog.debug(\"Appender [\" + name\n\t\t\t\t\t+ \"] to be rolled at start of week.\");\n\t\t\tbreak;\n\t\tcase TOP_OF_MONTH:\n\t\t\tLogLog.debug(\"Appender [\" + name\n\t\t\t\t\t+ \"] to be rolled at start of every \nmonth.\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLogLog.warn(\"Unknown periodicity for appender [\" + \nname + \"].\");\n\t\t}\n\t}\n\n\t// This method computes the roll over period by looping over the\n\t// periods, starting with the shortest, and stopping when the r0 is\n\t// different from from r1, where r0 is the epoch formatted according\n\t// the datePattern (supplied by the user) and r1 is the\n\t// epoch+nextMillis(i) formatted according to datePattern. All date\n\t// formatting is done in GMT and not local format because the test\n\t// logic is based on comparisons relative to 1970-01-01 00:00:00\n\t// GMT (the epoch).\n\n\tint computeCheckPeriod() {\n\t\tRollingCalendar rollingCalendar = new RollingCalendar\n(gmtTimeZone,\n\t\t\t\tLocale.ENGLISH);\n\t\t// set sate to 1970-01-01 00:00:00 GMT\n\t\tDate epoch = new Date(0);\n\t\tif (datePattern != null) {\n\t\t\tfor (int i = TOP_OF_MINUTE; i <= TOP_OF_MONTH; i++) {\n\t\t\t\tSimpleDateFormat simpleDateFormat = new \nSimpleDateFormat(\n\t\t\t\t\t\tdatePattern);\n\t\t\t\tsimpleDateFormat.setTimeZone(gmtTimeZone); // \ndo all date\n\t\t\t\t// formatting in GMT\n\t\t\t\tString r0 = simpleDateFormat.format(epoch);\n\t\t\t\trollingCalendar.setType(i);\n\t\t\t\tDate next = new Date\n(rollingCalendar.getNextCheckMillis(epoch));\n\t\t\t\tString r1 = simpleDateFormat.format(next);\n\t\t\t\t// System.out.println(\"Type = \"+i+\", r0 \n= \"+r0+\", r1 = \"+r1);\n\t\t\t\tif (r0 != null && r1 != null && !r0.equals\n(r1)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn TOP_OF_TROUBLE; // Deliberately head for trouble...\n\t}\n\n\t/**\n\t * Rollover the current file to a new file.\n\t */\n\tvoid rollOver() throws IOException {\n\n\t\t/* Compute filename, but only if datePattern is specified */\n\t\tif (datePattern == null) {\n\t\t\terrorHandler.error(\"Missing DatePattern option in \nrollOver().\");\n\t\t\treturn;\n\t\t}\n\n\t\tString datedFilename =tempFileName+sdf.format(now);// \nfileName;//+ sdf.format(now)\n\t\t// It is too early to roll over because we are still within the\n\t\t// bounds of the current interval. Rollover will occur once the\n\t\t// next interval is reached.\n\t\tif (scheduledFilename.equals(datedFilename)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// close current file, and rename it to datedFilename\n\t\tthis.closeFile();\n\n\t\tFile target = new File(datedFilename);\n\t\tif (target.exists()) {\n\t\t\ttarget.delete();\n\t\t}\n\n//\t\tFile file = new File(fileName);\n//\t\tboolean result = file.renameTo(target);\n//\t\tif (result) {\n//\t\t\tLogLog.debug(fileName + \" -> \" + scheduledFilename);\n//\t\t} else {\n//\t\t\tLogLog.error(\"Failed to rename [\" + fileName + \"] to [\"\n//\t\t\t\t\t+ scheduledFilename + \"].\");\n//\t\t}\n\n\t\ttry {\n\t\t\t// This will also close the file. This is OK since \nmultiple\n\t\t\t// close operations are safe.\n\t\t\tthis.setFile(datedFilename, false, this.bufferedIO, \nthis.bufferSize);\n\t\t} catch (IOException e) {\n\t\t\terrorHandler.error(\"setFile(\" + fileName + \", false) \ncall failed.\");\n\t\t}\n\t\tscheduledFilename = datedFilename;\n\t}\n\n\t/**\n\t * This method differentiates DailyRollingFileAppender from its super \nclass.\n\t * \n\t * <p>\n\t * Before actually logging, this method will check whether it is time \nto do\n\t * a rollover. If it is, it will schedule the next rollover time and \nthen\n\t * rollover.\n\t */\n\tprotected void subAppend(LoggingEvent event) {\n\t\tlong n = System.currentTimeMillis();\n\t\tif (n >= nextCheck) {\n\t\t\tnow.setTime(n);\n\t\t\tnextCheck = rc.getNextCheckMillis(now);\n\t\t\ttry {\n\t\t\t\trollOver();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tLogLog.error(\"rollOver() failed.\", ioe);\n\t\t\t}\n\t\t}\n\t\tsuper.subAppend(event);\n\t}\n}\n\n/**\n * RollingCalendar is a helper class to DailyRollingFileAppender. Given a\n * periodicity type and the current time, it computes the start of the next\n * interval.\n */\nclass RollingCalendar extends GregorianCalendar {\n\n\tint type = DailyRollingFileAppender.TOP_OF_TROUBLE;\n\n\tRollingCalendar() {\n\t\tsuper();\n\t}\n\n\tRollingCalendar(TimeZone tz, Locale locale) {\n\t\tsuper(tz, locale);\n\t}\n\n\tvoid setType(int type) {\n\t\tthis.type = type;\n\t}\n\n\tpublic long getNextCheckMillis(Date now) {\n\t\treturn getNextCheckDate(now).getTime();\n\t}\n\n\tpublic Date getNextCheckDate(Date now) {\n\t\tthis.setTime(now);\n\n\t\tswitch (type) {\n\t\tcase DailyRollingFileAppender.TOP_OF_MINUTE:\n\t\t\tthis.set(Calendar.SECOND, 0);\n\t\t\tthis.set(Calendar.MILLISECOND, 0);\n\t\t\tthis.add(Calendar.MINUTE, 1);\n\t\t\tbreak;\n\t\tcase DailyRollingFileAppender.TOP_OF_HOUR:\n\t\t\tthis.set(Calendar.MINUTE, 0);\n\t\t\tthis.set(Calendar.SECOND, 0);\n\t\t\tthis.set(Calendar.MILLISECOND, 0);\n\t\t\tthis.add(Calendar.HOUR_OF_DAY, 1);\n\t\t\tbreak;\n\t\tcase DailyRollingFileAppender.HALF_DAY:\n\t\t\tthis.set(Calendar.MINUTE, 0);\n\t\t\tthis.set(Calendar.SECOND, 0);\n\t\t\tthis.set(Calendar.MILLISECOND, 0);\n\t\t\tint hour = get(Calendar.HOUR_OF_DAY);\n\t\t\tif (hour < 12) {\n\t\t\t\tthis.set(Calendar.HOUR_OF_DAY, 12);\n\t\t\t} else {\n\t\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\t\t\t\tthis.add(Calendar.DAY_OF_MONTH, 1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DailyRollingFileAppender.TOP_OF_DAY:\n\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\t\t\tthis.set(Calendar.MINUTE, 0);\n\t\t\tthis.set(Calendar.SECOND, 0);\n\t\t\tthis.set(Calendar.MILLISECOND, 0);\n\t\t\tthis.add(Calendar.DATE, 1);\n\t\t\tbreak;\n\t\tcase DailyRollingFileAppender.TOP_OF_WEEK:\n\t\t\tthis.set(Calendar.DAY_OF_WEEK, getFirstDayOfWeek());\n\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\t\t\tthis.set(Calendar.MINUTE, 0);\n\t\t\tthis.set(Calendar.SECOND, 0);\n\t\t\tthis.set(Calendar.MILLISECOND, 0);\n\t\t\tthis.add(Calendar.WEEK_OF_YEAR, 1);\n\t\t\tbreak;\n\t\tcase DailyRollingFileAppender.TOP_OF_MONTH:\n\t\t\tthis.set(Calendar.DATE, 1);\n\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n\t\t\tthis.set(Calendar.MINUTE, 0);\n\t\t\tthis.set(Calendar.SECOND, 0);\n\t\t\tthis.set(Calendar.MILLISECOND, 0);\n\t\t\tthis.add(Calendar.MONTH, 1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"Unknown periodicity \ntype.\");\n\t\t}\n\t\treturn getTime();\n\t}\n}", "tags": [], "creator": "qiujiayu@myce.net.cn", "is_private": false, "count": 0, "id": 100813, "time": "2007-03-22T20:33:52Z", "bug_id": 41934, "creation_time": "2007-03-22T20:33:52Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 19775\nDailyRollingFileAppender.java", "attachment_id": 19775, "id": 100814, "creator": "qiujiayu@myce.net.cn", "time": "2007-03-22T20:35:06Z", "bug_id": 41934, "creation_time": "2007-03-22T20:35:06Z", "is_private": false}, {"count": 2, "attachment_id": 19776, "bug_id": 41934, "is_private": false, "id": 100815, "time": "2007-03-22T20:35:42Z", "creator": "qiujiayu@myce.net.cn", "creation_time": "2007-03-22T20:35:42Z", "tags": [], "text": "Created attachment 19776\nlog4j.properties"}, {"count": 3, "tags": [], "bug_id": 41934, "attachment_id": null, "is_private": false, "id": 100816, "time": "2007-03-22T22:12:16Z", "creator": "carnold@apache.org", "creation_time": "2007-03-22T22:12:16Z", "text": "Could you describe the problem or problems you are trying to fix?\n\nThe attached DRFA.java has both formatting changes (indents and line breaks) and functional changes.  \nIdeally, functional changes are kept distinct from formatting changes so that you can cleanly review \nfunctional changes.  If it is possible, could you submit a patch with just the functional changes. "}, {"count": 4, "tags": [], "text": "Created attachment 20081\nCleaned patch\n\nI'm attaching a clean version of the patch - however I'm not sure what the\nproblem is. This was just an exercise in diff auditing. \n\nLooking at the new patch - it looks as though the bug might be getting an\nException (or maybe just a bad filename) when .lastModified() is called upon a\nfile that doesn't exist. In the new code it uses the current timestamp if the\nfile doesn't already exist.", "is_private": false, "id": 102695, "creator": "bayard@apache.org", "time": "2007-04-30T13:57:21Z", "bug_id": 41934, "creation_time": "2007-04-30T13:57:21Z", "attachment_id": 20081}, {"count": 5, "tags": [], "bug_id": 41934, "attachment_id": null, "id": 103775, "time": "2007-05-29T08:43:06Z", "creator": "bayard@apache.org", "creation_time": "2007-05-29T08:43:06Z", "is_private": false, "text": "I suggest this issue be resolved as WONTFIX as the original reporter has not\nexplained what the bug was."}]
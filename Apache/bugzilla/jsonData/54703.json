[{"count": 0, "tags": [], "creator": "sandy.meier@bosch-si.com", "attachment_id": null, "id": 165861, "creation_time": "2013-03-15T14:09:19Z", "time": "2013-03-15T14:09:19Z", "bug_id": 54703, "text": "input for parseMediaType() is\n\n----------\nmultipart/signed; protocol=\"application/pkcs7-signature\"; micalg=sha-256; \n\tboundary=\"----=_Part_121_929034657.1363355797756\"\n----------\n\nexception trace\n\njava.lang.NullPointerException\n        at org.apache.tomcat.util.http.parser.HttpParser.parseMediaType(HttpParser.java:215)\n        at org.apache.tomcat.util.http.parser.MediaTypeCache.parse(MediaTypeCache.java:54)\n        at org.apache.catalina.connector.Response.setContentType(Response.java:806)\n        at org.apache.catalina.connector.Response.checkSpecialHeader(Response.java:1119)\n        at org.apache.catalina.connector.Response.setHeader(Response.java:1446)\n        at org.apache.catalina.connector.ResponseFacade.setHeader(ResponseFacade.java:535)", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "New lines are not permitted in header values.", "id": 165862, "time": "2013-03-15T14:56:55Z", "bug_id": 54703, "creation_time": "2013-03-15T14:56:55Z", "is_private": false}, {"count": 2, "tags": [], "creator": "g.dimitrov@bg.seeburger.com", "attachment_id": null, "id": 166654, "creation_time": "2013-04-16T13:42:16Z", "time": "2013-04-16T13:42:16Z", "bug_id": 54703, "text": "Hi, please check the HTTP/1.1 RFC, http://www.ietf.org/rfc/rfc2616.txt, section 2.2. Here is a cite from it: \"HTTP/1.1 header field values can be folded onto multiple lines if the continuation line begins with a space or horizontal tab\".\n\nTherefore, I reopen the bug, as I am also experiencing this issue.", "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 166659, "creation_time": "2013-04-16T20:13:30Z", "time": "2013-04-16T20:13:30Z", "bug_id": 54703, "text": "When an application calls setHeader (or any of the related methods) is is required to pass in the header value, not the value that will appear on the wire. Any wrapping, escaping etc. is the container's responsibility (not the application's) and new lines are not permitted.", "is_private": false}, {"count": 4, "tags": [], "bug_id": 54703, "text": "Mark,\n\nWe ran into the same problem while upgrading Geronimo (while running TCK). It would be great if you can reconsider fixing this for the following reasons:\n\n1) This can be considered as a regression. A header value with LWS was accepted fine in Tomcat 7.0.27, for example. This, of course, makes things harded for the users as now they might be forced to change their code to work on the latest version of Tomcat.\n\n2) The Servlet 3.0 spec does not talk about (one way or the other) how the header value should look like when using addHeader()/setHeader() API.\n\n3) The HTTP/1.1 spec in section 2.1 talks about \"implied *LWS\":\n\n      \"The grammar described by this specification is word-based. Except\n      where noted otherwise, linear white space (LWS) can be included\n      between any two adjacent words (token or quoted-string), and\n      between adjacent words and separators, without changing the\n      interpretation of a field.\"\n\nSo that would allow LWS within almost any header value - or at least addHeader()/setHeader() should be able to deal with it.\n\n4) The HTTP/1.1 spec in section 2.2 talks about replacing LWS with a single SP before interpreting values. I think that mostly talks about the folding LWS (on the wire format) but since Tomcat is interpreting the values it maybe should follow the same logic in addHeader()/setHeader() API.", "id": 167067, "time": "2013-05-06T19:34:31Z", "creator": "jgawor@gmail.com", "creation_time": "2013-05-06T19:34:31Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Short version:\nThe arguments present here aren't valid but they did cause me to look at this again and there is a case for changing the current behaviour.\n\nLong version:\n1. A regression is when valid behaviour is broken. Using CR or LF in setHeader() is not valid behaviour (see point 2) so this is not a regression. The question here is how tolerant should Tomcat be when an application presents invalid input. Those goalposts may be moved and any changes in behaviour will not get treated as regressions (I usually withdraw an in progress release if we find a regression).\n\n2. If a HTTP header is folded, getHeader() returns the unfolded value. If it did anything else, lots of applications would break. Logically, setHeader() and getHeader() should be symmetric. Therefore, they work with the header value not the \"on the wire\" representation. If this was different, I'd expect to see it called out in the specification. It isn't. As an aside, cookies values are handled the same way to avoid a bunch of security issues. See CVE-2007-3385, CVE-2007-3382 & CVE-2007-5333.\n\n3. The format used on the wire is irrelevant. See point 2.\nNote that proxies are free to unfold headers if they wish. There is no point an application trying to specify that a header should be folded because a proxy can unfold it.\n\n4. The idea here is along the right lines but there is a better way to implement it. The skipping of LWS can be pulled out into a separate function and CR and LF added to the characters that are skipped. Currently they are not handled as for input Tomcat has already unfolded all headers and for output the application shouldn't use using them.\n\n\nI took a careful look at the Tomcat code while I was researching this response and I believe there is an argument for taking a different approach. Generally, Tomcat doesn't validate what gets passed to setHeader() but it does in a few cases where the header value has an impact on Tomcat's processing (Content-Type, Content-Length). Tomcat refers to these as special headers.\n\nIf the value passed to setHeader() for a special header is invalid (e.g. non-numeric content length) then Tomcat simply ignores it and passes it to the client as is on the basis the application really does know what it is doing. It is arguable that Tomcat should not do this (servers should be strict in what they send and tolerant in what they accept) but it does mean that applications are given some leeway to bend the HTTP spec if they need to on the understanding that if they shoot themselves in the foot then any resulting mess is an application responsibility (and with headers there are likely to be security implications). How far application servers should go to stop developers shooting themselves in the foot - particularly from a security perspective - is a matter of debate. Certainly validating all header values and dropping invalid ones should be more secure but it would come at a price both in code complexity (writing parsing code for all the headers in RFC2616 would not be fun) and performance.\n\nGetting back to the original point, it is clear from the current code that the intention is to parse headers where they can be parsed and ignore them otherwise - not to validate them and reject invalid headers. Therefore a CR or LF in a header value should not cause the response to fail.\n\nThe question is whether to just ignore the invalid header (and pass it through to the client as-is) or to do as suggested in point 4 and treat all LWS as a single space. I can't see any down side to the latter approach and it has the upside if that there is data there Tomcat needs it can extract it. Therefore I will look at implementing this for the next 7.0.x release. Note that this means that any folded content-type header values passed to setHeader() and friends will be unfolded by Tomcat before it is written to the wire.", "id": 167068, "time": "2013-05-06T20:54:13Z", "bug_id": 54703, "creation_time": "2013-05-06T20:54:13Z", "is_private": false}, {"count": 6, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Fixed in trunk and 7.0.x and will be included in 7.0.41 onwards.\n\nAs an added bonus the extra test cases identified some errors in the existing white space parsing that have also been fixed.", "id": 167079, "time": "2013-05-07T15:55:21Z", "bug_id": 54703, "creation_time": "2013-05-07T15:55:21Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jgawor@gmail.com", "attachment_id": null, "text": "Thanks for reconsidering and changing the code. Things look better on our end now. Thanks again!", "id": 167095, "time": "2013-05-08T15:46:12Z", "bug_id": 54703, "creation_time": "2013-05-08T15:46:12Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 54703, "attachment_id": null, "id": 177915, "time": "2014-09-16T23:36:34Z", "creator": "gregw@mortbay.com", "creation_time": "2014-09-16T23:36:34Z", "is_private": false, "text": "Note that such folded headers have been deprecated by RFC7230: http://tools.ietf.org/html/rfc7230#section-3.2.4"}]
[{"count": 0, "tags": [], "creator": "apache@ganyo.com", "attachment_id": null, "is_private": false, "id": 28919, "time": "2003-01-06T21:47:10Z", "bug_id": 15822, "creation_time": "2003-01-06T21:47:10Z", "text": "According to section 9.3.2 of the JSTL spec, the formatting locale for the\nNumberFormat should be determined like so:\n\n\"The locale lookup is similar to the resource bundle lookup described in Section\n8.3.1, except that instead of trying to match a resource bundle, the locale\nlookup tries to find a match in a list of available locales.\"\n\nInstead of this happening, though, it appears that only locales that have a\nresource bundle are included in the lookup.\n\nPerusing the source code (up to and including the nightly build), I think I've\nfound the problem.  At the beginning of the\norg.apache.taglibs.standard.tag.common.fmt.SetLocaleSupport::getFormattingLocale()\nmethod, there code like this:\n\n// Get formatting locale from enclosing <fmt:bundle>\nTag parent = findAncestorWithClass(fromTag, BundleSupport.class);\nif (parent != null) {\n  // removed for brevity\n}\n\n// Use locale from default I18N localization context, unless it is null\nif ((locCtxt = BundleSupport.getLocalizationContext(pc)) != null) {\n  // removed for brevity\n}\n\nThe trouble is that this default check will succeed in finding a localization\ncontext if a Fallback locale has been set.  This is in violation of the spec\nregarding NumberFormat.  I propose the default check be moved inside of the\n(parent != null) block.  This way the ResourceBundle checks won't interfere with\nthe NumberFormat resource checks.\n\nHere's a diff:\n\n--- SetLocaleSupport.java       2003-01-06 16:42:10.000000000 -0500\n+++ SetLocaleSupport.java.old   2003-01-06 16:30:18.000000000 -0500\n@@ -277,16 +277,16 @@\n                }\n                return locCtxt.getLocale();\n            }\n+       }\n\n-               // Use locale from default I18N localization context, unless it\nis null\n-               if ((locCtxt = BundleSupport.getLocalizationContext(pc)) != null\n) {\n-                   if (locCtxt.getLocale() != null) {\n-                       if (format) {\n-                           setResponseLocale(pc, locCtxt.getLocale());\n-                       }\n-                       return locCtxt.getLocale();\n-                   }\n+       // Use locale from default I18N localization context, unless it is null\n+       if ((locCtxt = BundleSupport.getLocalizationContext(pc)) != null) {\n+           if (locCtxt.getLocale() != null) {\n+               if (format) {\n+                   setResponseLocale(pc, locCtxt.getLocale());\n                }\n+               return locCtxt.getLocale();\n+           }\n        }\n\n\nThanks!"}, {"count": 1, "tags": [], "bug_id": 15822, "is_private": false, "id": 28991, "creation_time": "2003-01-08T00:18:36Z", "time": "2003-01-08T00:18:36Z", "creator": "pierre.delisle@sun.com", "text": "I have checked the RI, and it appears to be in compliance with the spec.\n\nSection 9.2 of the spec clearly states that if a localization context\nexists for a formatting action, it will have priority to establish the locale\nof the formatting action. \n\nA formatting action will establish a locale according to the algorithm \ndescribed in section 9.3 if and only if a localization context with a valid \nLocale cannot be established via an <fmt:bundle> ancestor or default \nlocalization context.\n", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 15822, "attachment_id": null, "id": 28994, "time": "2003-01-08T03:19:30Z", "creator": "apache@ganyo.com", "creation_time": "2003-01-08T03:19:30Z", "is_private": false, "text": "Yes, your reading of the spec seems correct.  Nevertheless, the implementation\nis wrong because there is no \"<fmt:bundle> ancestor or default localization\ncontext\" in this case.  There is only the fallback locale, which according to\nspec section 8.11.2: \"Specifies the fallback locale to be used by the\ni18n-capable formatting actions if none of the preferred match any of the\navailable locales.\"  In other words, the fallback locale should only be used\nonly after all other efforts to resolve a preferred locale have failed.\n\nSo, perhaps my diff is not the correct solution, but there is still a problem\nhere as the call \"BundleSupport.getLocalizationContext(pc)\" will return the\nfallback locale before the other algorithms in\n\"SetLocaleSupport.getFormattingLocale()\" method have had their chance to\nidentify a preferred locale."}, {"count": 3, "tags": [], "bug_id": 15822, "attachment_id": null, "id": 29036, "time": "2003-01-08T19:52:30Z", "creator": "pierre.delisle@sun.com", "creation_time": "2003-01-08T19:52:30Z", "is_private": false, "text": "Hummm, looked at the code again and it still looks fine to me.\n\nCould you run the test JSP page below and report what you get.\nWhen I run it, the preferred locale is picked up even though\na different fallback locale has been specified.\n\nMy output is as follows:\n\nDefault localization context: null\nFallback locale is: en\nPreferred locale: fr,sv,en \n\nformat 1234546789: 123 456 789\nformat today's date: 8 janv. 2003 \n\n    -- Pierre\n\n-----\n%@ page import=\"javax.servlet.jsp.jstl.core.Config\" %>\n<%@ page import=\"javax.servlet.jsp.PageContext\" %>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jstl/core\" %>\n<%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jstl/fmt\" %>\n\n<%\n  Config.set(pageContext, Config.FMT_FALLBACK_LOCALE, \"en\", \nPageContext.PAGE_SCOPE);\n%>\nDefault localization context: <%= Config.find(pageContext, \nConfig.FMT_LOCALIZATION_CONTEXT) %><br>\nFallback locale is: <%= Config.find(pageContext, Config.FMT_FALLBACK_LOCALE) \n%><br>\nPreferred locale: <%= request.getHeader(\"Accept-Language\") %>\n<p>\nformat 1234546789: \n<fmt:formatNumber>123456789</fmt:formatNumber><br>\nformat today's date: \n<jsp:useBean id=\"now\" class=\"java.util.Date\" />\n<fmt:formatDate value=\"${now}\" />\n"}, {"count": 4, "tags": [], "bug_id": 15822, "is_private": false, "id": 29085, "creation_time": "2003-01-09T18:41:31Z", "time": "2003-01-09T18:41:31Z", "creator": "apache@ganyo.com", "text": "Your code works correctly standalone.  But I think the reason it doesn't\nrecreate the problem for you is that you don't have a resource bundle that is\nassociated with the fallback locale.  When I made sure that there was an\nappropriate resource bundle for the fallback locale, this issue returned.", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 15822, "attachment_id": null, "id": 29087, "time": "2003-01-09T20:23:18Z", "creator": "pierre.delisle@sun.com", "creation_time": "2003-01-09T20:23:18Z", "is_private": false, "text": "I've ran more tests with a resource bundle that is associated\nwith the fallback locale, and I still don't see any problem.\n\nI'm afraid we can spend a lot of time going back and forth like this.\nIf you still feel there is a bug, please submit sample code and/or\ncomplete instructions to allow us to reproduce the problem (i.e. we have to be\nable to reproduce a behavior that you feel is a bug). Until then, I'll \nconsider this bug report invalid."}, {"count": 6, "tags": [], "creator": "apache@ganyo.com", "attachment_id": null, "id": 29089, "time": "2003-01-09T20:51:22Z", "bug_id": 15822, "creation_time": "2003-01-09T20:51:22Z", "is_private": false, "text": "You're right, that was getting us nowhere.  So, I've attached a test case. \nUnzip the test.jar into  /usr/local/tomcat/webapps or wherever you have your web\napps.\n\nGo the the /test/index.jsp page and this is similar to what you will see if you\nchoose Italian as your browser's preferred locale:\n\nDefault localization context: Resource\nFallback locale is: en_US\nPreferred locale: it,en-us;q=0.8,en;q=0.5,en-gb;q=0.3\n\nformat -12345467.89: ($1,234,567.89)\nformat today's date: Jan 9, 2003 \n\nAs you will note, the number and date formatting is according to the fallback\nlocale (US) and not according to the Italian locale.  On the other hand, if you\ndelete or move the WEB-INF/classes/Resource_en_us.properties file and restart\ntomcat, you will see this:\n\nDefault localization context: Resource\nFallback locale is: en_US\nPreferred locale: it,en-us;q=0.8,en;q=0.5,en-gb;q=0.3\n\nformat -12345467.89: -USD 1.234.567,89\nformat today's date: 9-gen-2003 \n\nRemoving that file makes everything happy for the Italians, but shouldn't be\nnecessary.  I hope this helps clear up the issue as I really need it fixed! :)"}, {"count": 7, "tags": [], "creator": "apache@ganyo.com", "attachment_id": 4387, "id": 29090, "time": "2003-01-09T20:52:04Z", "bug_id": 15822, "creation_time": "2003-01-09T20:52:04Z", "is_private": false, "text": "Created attachment 4387\ntest case"}, {"count": 8, "tags": [], "bug_id": 15822, "is_private": false, "id": 29096, "creation_time": "2003-01-10T00:57:19Z", "time": "2003-01-10T00:57:19Z", "creator": "pierre.delisle@sun.com", "text": "Scott,\n\nThanks for sending a complete test. Now I see why you get these\nresults.\n\nYou previously wrote:\n  Nevertheless, the implementation\n  is wrong because there is no \"<fmt:bundle> ancestor or default localization\n  context\" in this case.  There is only the fallback locale, which according to\n  spec section 8.11.2: \"Specifies the fallback locale to be used by the\n  i18n-capable formatting actions if none of the preferred match any of the\n  available locales.\"  In other words, the fallback locale should only be used\n  only after all other efforts to resolve a preferred locale have failed.\n\nHowever, this is *not* the environment you have for your test case. \nIn your test case, there is no <fmt:bundle> ancestor, \nbut there *is* a default localization context set in web.xml:\n\n  <!--\n  <context-param>\n    <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>\n    <param-value>Resource</param-value>\n  </context-param>\n  -->\n\nThis is therefore a totally different story...\n\nIn section 9.2 of the spec, it is stated that JSTL first looks for an\nancestor <fmt:bundle>, and then for the I18N default localization context\nbefore considering the \"formatting locale lookup\" of section 9.3.\n\nSince you have a default localization context, JSTL applies the following\nrule:\n\n  ... if the configuration setting is of type String, the formatting action\n  establishes its own i18n localization context and uses its locale as \n  the formatting locale (in this case, the resource bundle component of \n  the i18n localization context is determined according to the resource bundle \n  determination algorithm in Section 8.3, using the configuration setting as \n  the resource bundle basename). If the i18n localization context determined in \n  this step does not contain any locale, go to the next step.\n\nApplying the resource bundle determination algorithm in Section 8.3, we get\nthe following (assuming the preferred locale is French):\n\n  step 1: find a match within the ordered set of preferred locales\n    Resource_fr     --> does not exist\n\n  step 2: Find a match with the fallback locale (en_US in your test case)\n    Resource_en_US  --> exists!!!\n\n    A match is found --> the fallback locale and the matched resource \n    bundle are stored in the i18n localization context.\n\nThis is therefore why the fallback locale takes precendence in this case.\n\nPlease note that if no default localization context were specified,\nthen the \"french\" locale would be used because the resource bundle \ndetermination algorithm of Section 8.3 would not be applied.\n\nStill following?\n\nEssentially, the situation is as follows:\nYou've declared a default localization context as the resource bundle\nbasename \"Resources\". Whenever a message is to be internationalized\nin your webapp, JSTL will always fall back on that default localization \ncontext if a resource bundle is not specified explicitely.\n\nSo in the following situation:\n\n  <fmt:message key=\"hello\"/>\n  <fmt:message key=\"todaysDate\"/>\n  <jsp:useBean id=\"now\" class=\"java.util.Date\" />\n  <fmt:formatDate value=\"${now}\" />\n\nYou would get:\n\n  Hello! Today's date is: jan 9 2003\n\neven though the preferred locale might be french.\n\nThe expert group felt it was better than having:\n\n  Hello! Today's date is: 9 janv. 2003\n\nbecause in this second instance we would be mixing two locales\n(english for the localized message, french for the formatting action).\nIt was decided that sticking to a single locale made more sense.\n\nThe fact that you specify a default localization context therefore impacts\nthe locale of formatting actions if the preferred locale of the client\nis not supported by your resource bundles, but the fallback locale is.\n\nWhen you remove Resources.en_US, no locale is found for the default\nlocalization context, so the formatting locale lookup algorithm\nof section 9.3 kicks in.\n\nHope this helps...", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 15822, "attachment_id": null, "id": 29103, "time": "2003-01-10T03:31:30Z", "creator": "apache@ganyo.com", "creation_time": "2003-01-10T03:31:30Z", "is_private": false, "text": "So you're telling me that if I use any resource bundle at all to internationalize my text that I will lose the ability to format my dates and numbers according to the preferred locale instead of the resource bundles I have created?I hope not, because that seems awfully short-sighted.  Just because I'm displaying English text doesn't mean that all my numbers should be formatting using American-style formats.  There are a lot of French that can read English just fine.  So, I might not have translated all my text to French, but I think that they'd rather see the commonly accepted number (1.234,56) and date (dd-mm-yy) formats for their locale than the American numbers (1,234.56) and dates (mm-dd-yy).Is there really no way around this (rather severe) limitation other than creating a dummy resource bundle for every locale that I possibly want to have correct number and date formatting for?"}, {"count": 10, "tags": [], "text": "If you:\n  - specify a default localization context \"Resources\"\n  - do not specify a fallback locale\n  - provide a root bundle \"Resources\"\n\nthen you should get the behavior you're looking for.\n\nAlso, please note that there is an official alias to send comments regarding \nthe JSTL specification (jsr-52-comments@jcp.org). The expert group is always\nhappy to review *constructive* comments.\n", "attachment_id": null, "bug_id": 15822, "id": 29314, "time": "2003-01-13T22:25:20Z", "creator": "pierre.delisle@sun.com", "creation_time": "2003-01-13T22:25:20Z", "is_private": false}]
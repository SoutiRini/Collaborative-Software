[{"count": 0, "tags": [], "bug_id": 60769, "is_private": false, "text": "Created attachment 34775\nThe two sample applications reproducing the problems\n\nOn Tomcat 8.5.11 the attached sample.war, which declares UTF-8 encoding through a configuration element and Windows-1252 with the XML prolog of the test.jspx file, does not throw an exception and displays the jspx content. But it works as expected and throws an exception for the index.jsp, which declares again a different encoding from the one declared through JSP configuration in web.xml. I would expect that both the index.jsp and test.jspx from sample.war should throw an exception, as they do on Tomcat 8.5.5 for example.\n\nAlso, if in a jspx file I declare one and the same encoding (in my case Windows-1252) in both the XML prolog and the page directive pageEncoding property, I get the error message:\n\"Page-encoding specified in XML prolog (UTF-8) is different from that specified in page directive (WINDOWS-1252)\", while on Tomcat 8.5.5 I get no error and the page is displayed. This is in sample1.war, enctext.jspx file.\n\nThese behaviors are probably due to change\n\nhttps://github.com/apache/tomcat85/commit/a03c5755a6fa2d9daa43abe357628f475230fdb2 ?\n\nIf the two issues are unrelated I will open another bug report for the second one.\n\nReference to relating sections of JSP 2.3 spec:\n\nsection 3.3.4 (Declaring page encodings):\n\"It is also a translation-time error to name different encodings in the prolog / text declaration of the document in XML syntax and in a JSP configuration element matching the document. It is legal to name the same encoding through multiple mechanisms.\"\n\n\nsection 4.1.2 (XML Syntax):\n\"It is a translation-time error to name different encodings in two or more of the following: the XML prolog / text declaration of a JSP document, the pageEncoding attribute of the page directive of the JSP document, and in a JSP configuration element whose URL pattern matches the document.\"\n\nRegards,\nLazar", "id": 197219, "time": "2017-02-23T08:16:44Z", "creator": "lazar.kirchev@gmail.com", "creation_time": "2017-02-23T08:16:44Z", "attachment_id": 34775}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Yes, there was a regression in the refactoring. The detected BOM encoding was incorrectly taking precedence over the prolog specified encoding (if any).\n\nThanks for the report and the test case.", "id": 197363, "time": "2017-03-01T21:00:57Z", "bug_id": 60769, "creation_time": "2017-03-01T21:00:57Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 60769, "text": "Created attachment 34908\nA sample reproducing the problem with exotic encoding", "id": 198268, "time": "2017-04-12T15:51:08Z", "creator": "lazar.kirchev@gmail.com", "creation_time": "2017-04-12T15:51:08Z", "is_private": false, "attachment_id": 34908}, {"count": 3, "text": "Hello Marc,\n\nI noticed that the second scenario is still failing if the encoding is more exotic - I tried with IBM871 - IBM EBCDIC (Icelandic). \n\nI debugged a little and noticed that EncodingDetector.getPrologEncoding() returns null although there is an encoding attribute specified in the prolog. Then the if on lines 67 - 73 in EncodingDetector goes in the second branch as if there is no encoding specified in the prolog.\n\nI attach sample2.war, with which I reproduced it. It is essentially the same as sample1.war, only the encoding in enctest.jspx is IBM871.\n\nProbably this is an issue with the XMLStreamReader?", "bug_id": 60769, "is_private": false, "id": 198269, "time": "2017-04-12T15:56:05Z", "creator": "lazar.kirchev@gmail.com", "creation_time": "2017-04-12T15:56:05Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "text": "I've done some further testing and fixed an unrelated bug but as for as unusual encodings go, they have to be specified in the prolog else the JRE's XML parser doesn't have enough information to be able to reliably determine the encoding.", "id": 198287, "time": "2017-04-13T19:39:55Z", "bug_id": 60769, "creation_time": "2017-04-13T19:39:55Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 60769, "is_private": false, "count": 5, "id": 198292, "time": "2017-04-14T08:10:05Z", "creator": "lazar.kirchev@gmail.com", "creation_time": "2017-04-14T08:10:05Z", "text": "The content of the enctest.jspx is:\n\n<?xml version=\"1.0\" encoding=\"IBM871\"?>\n\n<html xmlns:jsp=\"http://java.sun.com/JSP/Page\">\n <jsp:directive.page pageEncoding=\"IBM871\" />\n <jsp:output omit-xml-declaration=\"no\"/>\n <body>\n You should see this text.\n </body>\n</html>\n\nSo actually there is an encoding attribute in the prolog. For some reason JRE XML parser does not detect it correctly. On the other hand, the deprecated XMLEncodingDetector from before the refactoring, which parsed the files itself, correctly detects the encoding from the prolog - for example, with Tomcat 8.5.4 the sample works correctly.\n\nI apologise for that my second attachment is an incorrect one - I noticed that by mistake I have attached the second war from the first attachment instead of the problematic war with IBM871 encoding. I attach now the correct one with name encsample.war"}, {"count": 6, "tags": [], "bug_id": 60769, "text": "Created attachment 34913\nSample war with jspx in exotic encoding", "id": 198293, "time": "2017-04-14T08:10:56Z", "creator": "lazar.kirchev@gmail.com", "creation_time": "2017-04-14T08:10:56Z", "is_private": false, "attachment_id": 34913}, {"count": 7, "tags": [], "creator": "lazar.kirchev@gmail.com", "attachment_id": 34913, "text": "Comment on attachment 34913\nSample war with jspx in exotic encoding\n\nInvalid jspx file within.", "id": 198297, "time": "2017-04-14T09:35:18Z", "bug_id": 60769, "creation_time": "2017-04-14T09:35:18Z", "is_private": false}, {"attachment_id": 34914, "tags": [], "bug_id": 60769, "is_private": false, "count": 8, "id": 198298, "time": "2017-04-14T09:36:09Z", "creator": "lazar.kirchev@gmail.com", "creation_time": "2017-04-14T09:36:09Z", "text": "Created attachment 34914\nCorrect war for reproducing the exotic encoding problem"}, {"count": 9, "tags": [], "bug_id": 60769, "is_private": false, "id": 198350, "creation_time": "2017-04-19T08:56:28Z", "time": "2017-04-19T08:56:28Z", "creator": "markt@apache.org", "text": "Thew \"unrelated bug\" I fixed appears to have fixed the issue you were seeing. The fix is r1791298. If you can test with 9.0.x trunk or 8.5.x trunk to confirm that would be great.", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 60769, "text": "Thanks Mark! I tried the fix from 8.5 trunk and it works.\n\nSomething I noticed while debugging, probably it is not a problem, but I prefer to mention it:\n\nIn EncodingDetector's constructor, on line 61 (https://github.com/apache/tomcat85/blob/c29a2b45f57e481380d88a8fa0c6f4f0f242aca1/java/org/apache/jasper/compiler/EncodingDetector.java#L61)\n\nThe buffered input stream is being reset, but on the next lines the number of bytes which should be skipped are read from the initial input stream and not from the buffered input stream. Is this intended? Because when the buffered input stream is reset, the underlying input stream is not reset and its position stays where it was - e.g., at 4. And then when the bytes which should be skipped are read from it its position goes to e.g. 8. Is this intended?", "id": 198358, "time": "2017-04-19T09:30:45Z", "creator": "lazar.kirchev@gmail.com", "creation_time": "2017-04-19T09:30:45Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 60769, "text": "Good catch. That would be a bug. I'll get it fixed.", "id": 198383, "time": "2017-04-19T20:21:20Z", "creator": "markt@apache.org", "creation_time": "2017-04-19T20:21:20Z", "is_private": false, "attachment_id": null}]
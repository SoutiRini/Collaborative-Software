[{"count": 0, "tags": [], "bug_id": 57296, "attachment_id": null, "text": "Beginning with 1.7.0_71 closing a CipherInputStream may result in a BadPaddingException on closing the stream, signaling there maybe still data left to read.\n\nGot this in my trace:\n\nCaused by: java.io.IOException: javax.crypto.BadPaddingException: Given final block not properly padded\n\tat javax.crypto.CipherInputStream.close(CipherInputStream.java:321) ~[na:1.8.0_25]\n\tat java.io.BufferedInputStream.close(BufferedInputStream.java:483) ~[na:1.8.0_25]\n\tat java.io.PushbackInputStream.close(PushbackInputStream.java:379) ~[na:1.8.0_25]\n\tat java.util.zip.InflaterInputStream.close(InflaterInputStream.java:227) ~[na:1.8.0_25]\n\tat java.util.zip.ZipInputStream.close(ZipInputStream.java:266) ~[na:1.8.0_25]\n\tat org.apache.poi.openxml4j.util.ZipInputStreamZipEntrySource.<init>(ZipInputStreamZipEntrySource.java:61) ~[poi-ooxml-3.10-FINAL-20140208.jar:3.10-FINAL]\n\nThis was changed with 71 and was silently ignored before, look here:\n\nhttps://bugs.openjdk.java.net/browse/JDK-8061\n\nLooking at the code it seems to me, that on the point where the stream is closed\" all is \"done\" and any IOException on \"closing\" the stream can be ignored because there is no ZipEntry left in the ZipInputStreamZipEntrySource, correct?\nCan you please add some fix here, so that close is something like:\n\ntry {\n inp.close();\n} catch(IOException e) {\n // ignore or log it\n}", "id": 179448, "time": "2014-12-02T15:12:54Z", "creator": "krah.tm+apache@gmail.com", "creation_time": "2014-12-02T15:12:54Z", "is_private": false}, {"count": 1, "tags": [], "text": "Upstream Link is incomplete:\n\nhttps://bugs.openjdk.java.net/browse/JDK-8061619", "attachment_id": null, "id": 179449, "creator": "krah.tm+apache@gmail.com", "time": "2014-12-02T15:14:10Z", "bug_id": 57296, "creation_time": "2014-12-02T15:14:10Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 57296, "attachment_id": null, "text": "I've update to Oracle JDK 7u72 and the decompiled CipherInputStream seems to be similar to the openjdk version. The ooxml based junit tests (TestDecryptor,TestAgileEncryptionParameters) passed, even when I've added a close() to TestDecryptor.zipOk().\n\nPlease attach your test file, so I can reproduce it.", "id": 179566, "time": "2014-12-05T21:59:19Z", "creator": "kiwiwings@apache.org", "creation_time": "2014-12-05T21:59:19Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 57296, "text": "Got a few of those documents which are showing this exception - however i am unable / not allowed to share those customer documents.\nAll common to them is that its docx files - still searching a way to create such a failing file which i am able to share.", "id": 179614, "time": "2014-12-08T09:53:48Z", "creator": "krah.tm+apache@gmail.com", "creation_time": "2014-12-08T09:53:48Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "krah.tm+apache@gmail.com", "attachment_id": 32267, "id": 179616, "time": "2014-12-08T10:32:47Z", "bug_id": 57296, "creation_time": "2014-12-08T10:32:47Z", "is_private": false, "text": "Created attachment 32267\nJUnit Testcase\n\nIncludes Java-Testcode, the failing document and the JCEKS keystore used to encrypt/decrypt"}, {"count": 5, "tags": [], "bug_id": 57296, "attachment_id": null, "is_private": false, "id": 179618, "time": "2014-12-08T10:41:40Z", "creator": "krah.tm+apache@gmail.com", "creation_time": "2014-12-08T10:41:40Z", "text": "AddOn: JCE-Extensions needs to be installed, its a 256 Bit AES-Key."}, {"count": 6, "text": "At your first post, I thought there's something wrong with the agile decryption routines, which use a \"NoPadding\" specifier - so BadPaddingException shouldn't be thrown on close() ... but who knows ...\n\nLooking at your test/use case now, it seems that you aren't handling password protected files (as in \"a password prompt opens in Word\"), but unwrap them yourself with a private key.\n\nIn this case you create the CipherInputStream and need to make sure that the Extractor don't need to handle cipher-based exceptions on close(), e.g. by using a custom FilterInputStream\n\nFeel free to reopen the bug with a password protected file and I'll have look into it.", "bug_id": 57296, "is_private": false, "id": 179633, "time": "2014-12-08T16:24:07Z", "creator": "kiwiwings@apache.org", "creation_time": "2014-12-08T16:24:07Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 57296, "attachment_id": null, "text": "The ticket is about a more robust usage of the close method and the exception handling of the provided InputStream - it has nothing to do in the first place about some password protected files or such stuff (didn't write anything about that).\n\nIts afaik good practice that libraries, such as poi, should not close InputStreams they did not create but are provided with.\nIts the responsibility of the creator to close it.\n\nIn this case if poi would not close those stream i could work with the Extractor:\n\n################\nInputStream in = ...\n\nUse poi stuff\n\nclose the stream and handle exception if needed\n################\n\nI would know exception would be at \"close\" time and not at reading the stream.\n\nCurrently POI closes the stram and i don't know that it was only at close time at runtime - i am only getting an IOException from POI - i don't know why without doing stack rewinding to look if it was from a read or close call.\nThe close call could be ignored in my case - the read of cause can't be ignore because it would be an invalid TextExtractor instance.\n\nBut POI does close the stream after it does successfully read all data from the stream.\n\nThe Interface from close from the InputStream does specify an IOException may be thrown - so any Stream provided may throw such an exception (the BadBadding one was only an example where this does happen now with the JDK upstream change) - that's why the subject of the ticket is called:\n\n\"should catch IOExceptions on \"close\" after successfully reading\"\n\nSo the question in this ticket is, why POI is not more robust here and handle those exception on close - because what was needed was read as far as i understand the Code i've looked at.\n\nIt doesn't make sense to wrap the close in another stream (which i am currently doing as a workaround until this is hopefully addressed) and ignore it there because in this case you would need to tell all users if they ever use this method from the Extractor with an InputStream, that they must provide an InputStream which must not throw an exception when closed, because they won't be able to use POI at all if they can't assure that - which not all users can make sure without wrapping it, because they may be also provided with an InputStream from which they don't know if it may throw an Exception on close - in doubt it may do so, because the Interface does allow it.\n\nSo my proposal is:\n\n1. Don't close the stream you did not create, just read from it until you are finished and let the creator of the stream handle the close.\n\n2. If you really want to close it be more robust and handle the exception - it can be ignored imho so you can at least catch and ignore or log it at this place.", "id": 179656, "time": "2014-12-09T09:39:14Z", "creator": "krah.tm+apache@gmail.com", "creation_time": "2014-12-09T09:39:14Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 57296, "attachment_id": null, "is_private": false, "id": 179725, "time": "2014-12-12T00:05:05Z", "creator": "kiwiwings@apache.org", "creation_time": "2014-12-12T00:05:05Z", "text": "I don't like the idea of catching the exception and using the log to bury it.\n\nThe question is, when we remove the close from the classes, how much is user code affected by or relying on that feature, i.e. when is the stream finalized.\nI normally close a stream, even it has been closed inside the poi classes - I think that's common habit.\n\nWe could make that handling configurable on a system or static property.\n\nBtw. in my $dayjob, we also had a similar problem, I think it was related to a database stream, so it might be common, that the closing is seen as annoying ...\n\nWhat do the other think?"}, {"count": 9, "tags": [], "creator": "krah.tm+apache@gmail.com", "attachment_id": null, "id": 179732, "time": "2014-12-12T10:09:27Z", "bug_id": 57296, "creation_time": "2014-12-12T10:09:27Z", "is_private": false, "text": "Yeah i make sure streams getting closed too, no matter if a library claims to do it or not - just to be sure not to leak file descriptors, but don't know if everyone does it, hope so.\nSo yes i know this may be a breaking change for users relying on it, don't know whats the best way to fix this - change and document it perhaps?"}, {"count": 10, "tags": [], "bug_id": 57296, "text": "Potentially fixed by bug 60128 in POI 3.15.", "id": 194274, "time": "2016-10-09T11:40:47Z", "creator": "onealj@apache.org", "creation_time": "2016-10-09T11:40:47Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 57296, "attachment_id": null, "is_private": false, "id": 197099, "time": "2017-02-17T05:38:27Z", "creator": "onealj@apache.org", "creation_time": "2017-02-17T05:38:27Z", "text": "(In reply to Javen O'Neal from comment #10)\n> Potentially fixed by bug 60128 in POI 3.15.\n\nTorsten, can you verify this (3 years later)?"}, {"count": 12, "tags": [], "bug_id": 57296, "attachment_id": null, "text": "POI is still closing the InputStream it did not create instead of just reading from it - so this is still a valid concern if close throws an exception but data needed could be successfully read.\nThe original case was fixed later in the JDK and at least my root case - the javax.crypto.BadPaddingException on close - is not thrown anymore - but the case itself here to not close the stream it did not create, e.g. like lucene does not close them and mentions that on the api docs:\n\nhttps://lucene.apache.org/core/4_9_0/analyzers-common/org/apache/lucene/analysis/hunspell/Dictionary.html\n\nDiscussable though.", "id": 197116, "time": "2017-02-17T11:52:26Z", "creator": "krah.tm+apache@gmail.com", "creation_time": "2017-02-17T11:52:26Z", "is_private": false}]
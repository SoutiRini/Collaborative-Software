[{"count": 0, "tags": [], "creator": "pascal.sancho@takoma.fr", "attachment_id": null, "text": "With 2 alternative s-p-m witch body have unequal left/right margins but equal i-p-d, I get an UnsupportedOperationException when content overflows on b-p-d axis.\n\nThis doesn't occur when margins are the same.", "id": 145637, "time": "2011-04-08T06:08:06Z", "bug_id": 51043, "creation_time": "2011-04-08T06:08:06Z", "is_private": false}, {"count": 1, "tags": [], "creator": "pascal.sancho@takoma.fr", "attachment_id": 26867, "text": "Created attachment 26867\nuse-case that demonstrates the issue", "id": 145638, "time": "2011-04-08T06:09:03Z", "bug_id": 51043, "creation_time": "2011-04-08T06:09:03Z", "is_private": false}, {"count": 2, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 145652, "time": "2011-04-08T12:51:40Z", "bug_id": 51043, "creation_time": "2011-04-08T12:51:40Z", "is_private": false, "text": "\nAt first glance, this seems to be due to a rounding issue. \nThe IPD for the first page's body region resolves to 510.237pt, while the second has only 510.236pt. As a result, the PageBreakingAlgorithm sees a difference, and restarts, while there is actually no reason to.\n\nA quick fix would be to only take into account differences greater than or equal to, say, 0.5pt.\nThe 'proper' fix would likely involve a full investigation on where exactly this happens, and a battery of tests to make sure that equal widths in different units of measurement always evaluate to the exact same value in 1/1000pt."}, {"attachment_id": null, "tags": [], "bug_id": 51043, "is_private": false, "count": 3, "id": 145664, "time": "2011-04-08T18:09:14Z", "creator": "adelmelle@apache.org", "creation_time": "2011-04-08T18:09:14Z", "text": "(In reply to comment #2)\n> \n> A quick fix would be to only take into account differences greater than or\n> equal to, say, 0.5pt.\n\nTo fix the rounding issue, was looking at fo.properties.FixedLength.convert().\nThere is a suspicious plain cast from double to int.\n\nIn case of the first page we get the following values in mpt: \npage-width = 210mm = 595275(.5907)\nmargin-left = 29mm = 82204(.72243)\nmargin-right = 1mm = 2834(.64567)\n=> 595275 - 82204 - 2834 = 510237\n\nFor the second:\npage-width = 210mm = 595275(.5907)\nmargin-left = 30mm = 85039(.3701)\nmargin-right = 0\n=> 595275 - 85039 = 510236\n\nRounding the values would also be wrong. In this case, that would simply flip the results. :-/\n\nScientists would reason:\nP1 = 595275(+1) - 82204(+1) - 2834(+1) = 510237(+/-3)\nP2 = 595275(+1) - 85039(+1) = 510236(+/-2)\n=> P1 ~ P2, or: close enough\n\nHowever, even after eliminating the difference of 1mpt, I get a NullPointerException.\nCould be my local copy, though. Will retry with a fresh trunk later..."}, {"count": 4, "tags": [], "bug_id": 51043, "text": "\n> Scientists would reason:\n> P1 = 595275(+1) - 82204(+1) - 2834(+1) = 510237(+/-3)\n> P2 = 595275(+1) - 85039(+1) = 510236(+/-2)\n\nErrm... Sleepy scientists. ;-)\n\n510237(+/-1) and 510236(+/-0)", "id": 145665, "time": "2011-04-08T18:14:09Z", "creator": "adelmelle@apache.org", "creation_time": "2011-04-08T18:14:09Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 51043, "attachment_id": null, "id": 145685, "time": "2011-04-11T03:26:33Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2011-04-11T03:26:33Z", "is_private": false, "text": "I have run into this before myself. For me an acceptable workaround was to change the units of left/right margins to match and avoid the rounding errors, e.g. instead of left-margin=\"10pt\" right-margin=\"10mm\" I changed the units to match left-margin=\"10pt\" right-margin=\"30pt\" The rounding errors are then avoided and the changing IPD algorithm is not started. It will be difficult to avoid rounding errors when the user specifies different units on the different measurements involved. The idea of using a within 1pt rule seems like a bit of hack to me..."}, {"count": 6, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 145709, "time": "2011-04-11T11:30:24Z", "bug_id": 51043, "creation_time": "2011-04-11T11:30:24Z", "is_private": false, "text": "(In reply to comment #5)\n> I have run into this before myself. For me an acceptable workaround was to\n> change the units of left/right margins to match and avoid the rounding errors,\n\nIn this case, even using \"mm\" everywhere leads to the issue, and it will be hard to fix this so it works for all cases, unless we either start storing the mpt values as double, and truncate only the result, or calculate with the original value, including the units. In that case, it would work here, too: 210 - 30 = 210 - 1 - 29 = 180.\n\nUsing a lower limit would indeed be a hack (hence: quick fix), but it could be argued that such small differences will normally not be the result from actual differences, intended by the author/user."}, {"count": 7, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "text": "> (In reply to comment #5)\n> > I have run into this before myself. For me an acceptable workaround was to\n> > change the units of left/right margins to match and avoid the rounding errors,\n> \n<snip /> \n> Using a lower limit would indeed be a hack (hence: quick fix), but it could be\n> argued that such small differences will normally not be the result from actual\n> differences, intended by the author/user.\n\nBTW, the earlier value of 0.5pt was just arbitrary. Thinking more about it, 0.005pt would seem reasonable enough. That gives enough wiggle-room for the roundings (unless you have expressions with more than 5 of such operands, obviously) and 5/72000in (~0.2\u00b5m) can hardly be considered a change that would affect layout in such a way that a restart is justified.\n\nIf all else fails, I assume that values specified in \"pt\" would also alleviate the trouble. At least, the conversion factor is a round figure there...", "id": 145710, "time": "2011-04-11T12:56:37Z", "bug_id": 51043, "creation_time": "2011-04-11T12:56:37Z", "is_private": false}, {"count": 8, "tags": [], "creator": "pascal.sancho@takoma.fr", "attachment_id": null, "text": "(In reply to comment #3)\n> page-width = 210mm = 595275(.5907)\n(...)\n> => 595275 - 82204 - 2834 = 510237\nHmm?\n210 * 72000 / 25.4 = 595275.5905512\nand: rounding page-with should give 595276 mpt\n\nNote that when using rounded rather than truncated values, the problem remains.\n\n(In reply to comment #6)\n> (...) unless we either start storing the\n> mpt values as double, and truncate only the result, or calculate with the\n> original value, including the units. In that case, it would work here, too: 210\n> - 30 = 210 - 1 - 29 = 180.\n\nDue to conversion side effects, I fully agree with that. There should remain only one value to be rounded, rather 3 in this use-case.\n\n(In reply to comment #5)\n> I have run into this before myself. For me an acceptable workaround was to\n> change the units of left/right margins to match and avoid the rounding errors,\n> (...) I changed the units to\n> match left-margin=\"10pt\" right-margin=\"30pt\"\n\nToo, this is acceptable for me. I tried 'in' witch gives expected behavior.\n\nFinally, since 'mm' to 'in' conversion is not based on an integer ratio, the 2 alternatives are:\n - avoid such conversion (workaround),\n - convert floats.", "id": 145717, "time": "2011-04-12T04:12:29Z", "bug_id": 51043, "creation_time": "2011-04-12T04:12:29Z", "is_private": false}, {"count": 9, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 145725, "time": "2011-04-12T14:58:09Z", "bug_id": 51043, "creation_time": "2011-04-12T14:58:09Z", "is_private": false, "text": "(In reply to comment #8)\n> (In reply to comment #3)\n> > page-width = 210mm = 595275(.5907)\n> (...)\n> > => 595275 - 82204 - 2834 = 510237\n> Hmm?\n> 210 * 72000 / 25.4 = 595275.5905512\n\nYes, for the entire page. 595275.5907 is the result of 210 * 2834.64567 (see fo.properties.FixedLength) \nSubtracting the left and right margins, gives you 510237 (if all values are first converted, then truncated).\n\n> and: rounding page-with should give 595276 mpt\n\nRounding would, but FOP currently just casts from double to int (which is the same as truncating, IIRC)\n\n> \n> Note that when using rounded rather than truncated values, the problem remains.\n\nIndeed, as I pointed out, the values then switch places, that is: 510236 for page 1, and 510237 for page 2, so the difference of 1mpt remains.\n\n> Too, this is acceptable for me. I tried 'in' witch gives expected behavior.\n> \n> Finally, since 'mm' to 'in' conversion is not based on an integer ratio...\n\nNote: FOP does no \"mm to in\" conversion. All units are converted/normalized to the unofficial \"mpt\"."}, {"count": 10, "tags": [], "creator": "gadams@apache.org", "text": "resetting P2 open bugs to P3 pending further review", "id": 157358, "time": "2012-04-07T01:41:52Z", "bug_id": 51043, "creation_time": "2012-04-07T01:41:52Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "andreas, any proposed resolution for this?", "is_private": false, "bug_id": 51043, "id": 157676, "time": "2012-04-08T08:48:09Z", "creator": "gadams@apache.org", "creation_time": "2012-04-08T08:48:09Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 51043, "attachment_id": null, "id": 158025, "time": "2012-04-13T11:09:41Z", "creator": "pascal.sancho@takoma.fr", "creation_time": "2012-04-13T11:09:41Z", "is_private": false, "text": "(In reply to comment #11)\n> andreas, any proposed resolution for this?\n\nthe ideal solution should be to use double rather than int for millipoint values, since either cm-to-mp or mm-to-mp conversions give float results."}, {"count": 13, "text": "(In reply to comment #11)\n> andreas, any proposed resolution for this?\n\nTwo proposals were already mentioned, admittedly rather vague. All that's left is the decision, which should be pretty simple. I would likely have committed the fix and closed the issue last year, if others had not insisted that FOP needs to avoid rounding altogether...\n\nThere is the so-called 'ideal' or 'proper' solution, which would be a more long-term effort that involves a thorough impact analysis. A switch to values in whatever unit, stored internally as float or double, will have consequences all over the codebase, and for what? \nJust for the sake of theoretical, mathematical precision --beyond the third decimal, for a value expressed in pt...? Please! :-/\nThis would cost quite some time and effort for a prize that is hardly worth it in this context.\nI do not see why FOP would even /need/ that level of precision, given the scale. It's not like FOP is in the business of splitting atoms, so settling on 1/1000pt, internally stored as integers is really not that bad. We are only talking about a few tenths of a \u00b5m of difference due to loss in precision, here. Oh well, maybe it's just me...\n\nA more 'appropriate' solution, at least from a practical, cost/benefit perspective, would be to simply allow for a margin in the particular comparison triggering the reported issue.\nThe line of code in question in PageBreakingAlgorithm[*] could be made to consider a value of 510237(mpt) as 'equal' to 510236(mpt). \nSounds reasonable, keeping in mind that:\n1\u00b0  'mpt' is an unofficial unit anyway, so FOP determines the calculation rules; why not have \"1=2\" when counting in those units?\n2\u00b0  converted back to standard units, the loss of 0.001pt would only yield a discernible difference provided that the output resolution is --yep, 72 *thousand* dpi.\n\nThe latter proposal is a single-line fix for this particular bug entry. The attachment could then basically serve as the only test case, extended with a few other cases, trying out different combinations of attributes/unit specs that yield the largest conceivable rounding differences when run through FixedLength.convert().\n\n[*] line 1138: 'Math.abs (...) <= m' instead of '... != 0', where m is half the amount of margin, in 'mpt', within which two page-widths are considered identical.\nAs a suggestion, I mentioned 0.005pt earlier, or around 0.2\u00b5m. Interestingly, I found out later that  typical light microscopes, assuming visible range light, have a theoretical resolution limit of just about that value. Might count as an argument pro: if your output target supported such a high pixel density, you would probably even miss it /even/ if you looked at it through a conventional microscope.", "creator": "adelmelle@apache.org", "attachment_id": null, "id": 158085, "time": "2012-04-14T19:23:50Z", "bug_id": 51043, "creation_time": "2012-04-14T19:23:50Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 51043, "is_private": false, "count": 14, "id": 158102, "time": "2012-04-16T08:19:04Z", "creator": "pascal.sancho@takoma.fr", "creation_time": "2012-04-16T08:19:04Z", "text": "(In reply to comment #13)\n> Just for the sake of theoretical, mathematical precision --beyond the third\n> decimal, for a value expressed in pt...? Please! :-/\n\nHmm, many countries use the metric system, so the mathematical precision is not only a theoretical goal, but a true life need.\n\nIMHO, I think that mp as FOP standard unit is not appropriate.\n\nWe should take benefit if the inner FOP unit was based on mm/pt ratio:\n254mm equals 720pt (= 10in)\n\nfor example, given this new unit (fd, for \"FOP dot size\"):\n\n1pt = 127fd\n1in = 9144fd\n1mm = 360fd\n\npro: we can keep integers values AND mathematical precision\n\nnote: if fd precision is not enough, a decimal multiple or other may be used (x25 if we want that 1/300in gives an integer value when converted in fd)."}, {"count": 15, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "id": 158241, "time": "2012-04-21T04:50:30Z", "bug_id": 51043, "creation_time": "2012-04-21T04:50:30Z", "is_private": false, "text": "http://svn.apache.org/viewvc?rev=1328581&view=rev\n\nDon't restart layout unless abs(ipd difference)>1 in order to prevent rounding issues from triggering false restart. Note that this change did not produce a junit regression, so either this corner case is (1) not sufficiently tested or (2) we will receive regression reports from users or (3) we may be safe with this change. Time will tell.\n\nUse of different units and different rounding policies may be further explored in future revisions."}]
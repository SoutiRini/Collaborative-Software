[{"count": 0, "tags": [], "bug_id": 12439, "attachment_id": null, "text": "Hi Nasser Matoorian,\n\nThank you for using our bug submit page.\n\nIt looks like the error is being generated in third party software.  See\nthe below link from the apache website:\nhttp://jakarta.apache.org/tomcat/tomcat-4.0-doc/catalina/docs/api/org/apache/catalina/connector/http10/HttpConnector.html\n\nPlease redirect this request to the apache team at \nhttp://jakarta.apache.org/site/bugs.html\n\nRegards,\nNathanael\n----------------- Original Bug Report-------------------\n\ncategory : java\nrelease : hopper-rc\nsubcategory : classes_net\ntype : bug\nsynopsis : HttpConnector[8080] No processor available, rejecting this connection\ndescription : FULL PRODUCT VERSION :\nJ2SE :j2sdk1.4.1-rc\n\nFULL OPERATING SYSTEM VERSION :\nWindow 2000 professional sp2\n\nA DESCRIPTION OF THE PROBLEM :\nHTTP comunication between applet and servlet, occurs\noccasionally.\n\nREGRESSION.  Last worked in version 1.4\n\nSTEPS TO FOLLOW TO REPRODUCE THE PROBLEM :\n1.we use the following java class for comunicating between\napplet and servlet:\n\npackage jsystems.servlet;\n\nimport java.net.*;\nimport java.util.*;\nimport java.io.*;\n\n\npublic class HttpMessage {\n  URL servlet = null;\n  String args = null;\n\n  public HttpMessage(URL servlet) {\n    this.servlet = servlet;\n  }\n\n  public HttpMessage() {\n  }\n\n\n//------------------------------------------------------------------------------\n\n  //Performs a GET request to the previously given servlet\n  //with no query string.\n  public InputStream sendGetMessage() throws IOException{\n    return sendGetMessage(null);\n  }\n\n//------------------------------------------------------------------------------\n\n  //Performs a GET request to the previously given servlet.\n  //Builds a query string from the supplied Prperties list.\n  public InputStream sendGetMessage(Properties args) throws\nIOException{\n    String argString = \"\";//default\n\n    if( args!= null){\n      argString = \"?\" + toEncodedString(args);\n    }\n    URL url = new URL(servlet.toExternalForm() + argString);\n\n    //trun off  caching\n    URLConnection con = url.openConnection();\n    con.setUseCaches(false);\n\n    return con.getInputStream();\n\n  }\n\n//------------------------------------------------------------------------------\n\n\n\n  //Performs a POST request to the previously given servlet\n  //with no query string.\n  public InputStream sendPostMessage() throws IOException{\n    return sendPostMessage(null);\n  }\n//------------------------------------------------------------------------------\n\n\n  //Performs a POST request to the previously given servlet.\n  //Builds a query string from the supplied Prperties list.\n  public InputStream sendPostMessage(Properties args) throws\nIOException{\n    String argString = \"\";//default\n\n    if( args!= null){\n      argString = toEncodedString(args); // notice no \"?\"\n    }\n    URL url = new URL(servlet.toExternalForm() + argString);\n\n\n    URLConnection con = url.openConnection();\n    //Prepare for both input and output\n    con.setDoInput(true);\n    con.setDoOutput(true);\n\n    //trun off  caching\n    con.setUseCaches(false);\n\n    //Work round a netscape bug\n    con.setRequestProperty(\"Content-Type\",\n\"application/x-www-form-urlencoded\");\n\n    //Write the arguments as post data\n    DataOutputStream out = new\nDataOutputStream(con.getOutputStream());\n    out.flush();\n    out.close();\n\n\n    return con.getInputStream();\n\n  }\n//------------------------------------------------------------------------------\n\n  //Uploads a serialized object with a POST request.\n  //Sets the content type to java-internal/classname.\n  public InputStream sendPostMessage(Serializable obj)\nthrows IOException{\n\n    URLConnection con = servlet.openConnection();\n    //Prepare for both input and output\n    con.setDoInput(true);\n    con.setDoOutput(true);\n\n    //trun off  caching\n    con.setUseCaches(false);\n\n    //Set the content type to be java-internal/classname\n    con.setRequestProperty(\"Content-Type\", \"java-internal/\"\n+ obj.getClass().getName());\n\n    //Write the serialized object as post data\n    ObjectOutputStream out = new\nObjectOutputStream(con.getOutputStream());\n    out.writeObject(obj);\n    out.flush();\n    out.close();\n\n    return con.getInputStream();\n  }\n//------------------------------------------------------------------------------\n\n\n  //Converts a Properties list to a URL-encoded query string\n  private String toEncodedString(Properties args){\n    StringBuffer buff = new StringBuffer();\n    Enumeration names = args.propertyNames();\n    while (names.hasMoreElements()){\n      String name = (String) names.nextElement();\n      String value = args.getProperty(name);\n      buff.append(URLEncoder.encode(name) + \"=\" +\nURLEncoder.encode(value));\n      if(names.hasMoreElements()) buff.append(\"&\");\n    }\n    return buff.toString();\n  }\n//------------------------------------------------------------------------------\n\n}\n\n\n\n\n\n\n\n\n2. The receiving servlet gets the serialized objects using\nthe following get / post :\n\npublic void doPost(HttpServletRequest request,\nHttpServletResponse response)\n                                  throws ServletException,\nIOException {\n        //doGet(request, response);\n        //response to indicate the result of the transaction\n        if(handler==null)handler=new AppointmentHandler();\n        ObjectOutputStream out = new\nObjectOutputStream(response.getOutputStream());\n        try{\n              //get data\n              ObjectInputStream in = new\nObjectInputStream(request.getInputStream());\n              HashMap hm = (HashMap)in.readObject();\n\n\t  //...\n                out.writeObject(new Integer(app_id));\n            }\n\n        }catch(Exception e){\n            out.writeObject(new Boolean(false));\n            e.printStackTrace();\n\n        }\n}\n\n\n\n3. the servlet end occasionaly refuses connection in\nj2sdk1.4.1-rc:\nHttpConnector[8080] No processor available, rejecting this\nconnection\n\n\n\n\n\nEXPECTED VERSUS ACTUAL BEHAVIOR :\nconnection refused with a message:\nHttpConnector[8080] No processor available, rejecting this\nconnection\n\nERROR MESSAGES/STACK TRACES THAT OCCUR :\nHttpConnector[8080] No processor available, rejecting this connection\n\nREPRODUCIBILITY :\nThis bug can be reproduced occasionally.\n\n---------- BEGIN SOURCE ----------\nApplet to Servlet communication.\n\nApplet side:\n\npackage jsystems.servlet;\n\nimport java.net.*;\nimport java.util.*;\nimport java.io.*;\n\n\npublic class HttpMessage {\n  URL servlet = null;\n  String args = null;\n\n  public HttpMessage(URL servlet) {\n    this.servlet = servlet;\n  }\n\n  public HttpMessage() {\n  }\n\n\n//------------------------------------------------------------------------------\n\n  //Performs a GET request to the previously given servlet\n  //with no query string.\n  public InputStream sendGetMessage() throws IOException{\n    return sendGetMessage(null);\n  }\n\n//------------------------------------------------------------------------------\n\n  //Performs a GET request to the previously given servlet.\n  //Builds a query string from the supplied Prperties list.\n  public InputStream sendGetMessage(Properties args) throws IOException{\n    String argString = \"\";//default\n\n    if( args!= null){\n      argString = \"?\" + toEncodedString(args);\n    }\n    URL url = new URL(servlet.toExternalForm() + argString);\n\n    //trun off  caching\n    URLConnection con = url.openConnection();\n    con.setUseCaches(false);\n\n    return con.getInputStream();\n\n  }\n\n//------------------------------------------------------------------------------\n\n\n\n  //Performs a POST request to the previously given servlet\n  //with no query string.\n  public InputStream sendPostMessage() throws IOException{\n    return sendPostMessage(null);\n  }\n//------------------------------------------------------------------------------\n\n\n  //Performs a POST request to the previously given servlet.\n  //Builds a query string from the supplied Prperties list.\n  public InputStream sendPostMessage(Properties args) throws IOException{\n    String argString = \"\";//default\n\n    if( args!= null){\n      argString = toEncodedString(args); // notice no \"?\"\n    }\n    URL url = new URL(servlet.toExternalForm() + argString);\n\n\n    URLConnection con = url.openConnection();\n    //Prepare for both input and output\n    con.setDoInput(true);\n    con.setDoOutput(true);\n\n    //trun off  caching\n    con.setUseCaches(false);\n\n    //Work round a netscape bug\n    con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n    //Write the arguments as post data\n    DataOutputStream out = new DataOutputStream(con.getOutputStream());\n    out.flush();\n    out.close();\n\n\n    return con.getInputStream();\n\n  }\n//------------------------------------------------------------------------------\n\n  //Uploads a serialized object with a POST request.\n  //Sets the content type to java-internal/classname.\n  public InputStream sendPostMessage(Serializable obj) throws IOException{\n\n    URLConnection con = servlet.openConnection();\n    //Prepare for both input and output\n    con.setDoInput(true);\n    con.setDoOutput(true);\n\n    //trun off  caching\n    con.setUseCaches(false);\n\n    //Set the content type to be java-internal/classname\n    con.setRequestProperty(\"Content-Type\", \"java-internal/\" +\nobj.getClass().getName());\n\n    //Write the serialized object as post data\n    ObjectOutputStream out = new ObjectOutputStream(con.getOutputStream());\n    out.writeObject(obj);\n    out.flush();\n    out.close();\n\n    return con.getInputStream();\n  }\n//------------------------------------------------------------------------------\n\n\n  //Converts a Properties list to a URL-encoded query string\n  private String toEncodedString(Properties args){\n    StringBuffer buff = new StringBuffer();\n    Enumeration names = args.propertyNames();\n    while (names.hasMoreElements()){\n      String name = (String) names.nextElement();\n      String value = args.getProperty(name);\n      buff.append(URLEncoder.encode(name) + \"=\" + URLEncoder.encode(value));\n      if(names.hasMoreElements()) buff.append(\"&\");\n    }\n    return buff.toString();\n  }\n//------------------------------------------------------------------------------\n\n}\n\n\n\nServlet side method:\n   \n\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n                                  throws ServletException, IOException {\n        //doGet(request, response);\n        //response to indicate the result of the transaction\n        if(handler==null)handler=new AppointmentHandler();\n        ObjectOutputStream out = new ObjectOutputStream(response.getOutputStream());\n        try{\n              //get data\n              ObjectInputStream in = new\nObjectInputStream(request.getInputStream());\n              HashMap hm = (HashMap)in.readObject();\n\n\t  //...\n                out.writeObject(new Integer(app_id));\n            }\n\n        }catch(Exception e){\n            out.writeObject(new Boolean(false));\n            e.printStackTrace();\n\n        }\n}\n\n\n\n---------- END SOURCE ----------\n\nCUSTOMER WORKAROUND :\nuse j2sdk1.4.0 instead of j2sdk1.4.1-rc\nworkaround : \nsuggested_val : \ncust_name : Nasser Matoorian\ncust_email : nasser.matoorian@tvu.ac.uk\njdcid : \nkeyword : webbug\ncompany : Thames Valley University\nhardware : x86\nOSversion : windows_2000\nbugtraqID : 0\ndateCreated : 2002-09-02 03:48:32.7\ndateEvaluated : 2002-09-03 16:17:51.58", "id": 22525, "time": "2002-09-09T14:46:57Z", "creator": "nasser.matoorian@tvu.ac.uk", "creation_time": "2002-09-09T14:46:57Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 12439, "is_private": false, "id": 50759, "time": "2004-01-19T19:03:27Z", "creator": "markt@apache.org", "creation_time": "2004-01-19T19:03:27Z", "tags": [], "text": "The log message is normal and indicates that Catalina has run out of \nprocessors to service requests. This can happen if clients keep connections \nopen.\n\nA slightly longer extract of your log might help to clarify this. See the \nexample log output in bug 6260 (from the JBoss/Tomcat bundle)."}]
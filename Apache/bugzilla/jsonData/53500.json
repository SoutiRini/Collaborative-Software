[{"count": 0, "tags": [], "bug_id": 53500, "attachment_id": 29023, "is_private": false, "id": 160417, "time": "2012-07-03T08:30:44Z", "creator": "j.herrmann@web.de", "creation_time": "2012-07-03T08:30:44Z", "text": "Created attachment 29023\nzip containing patch, test case, and test data\n\n[Patch] Getter for repeating rows and columns\n\nHello,\n\nclass Workbook provides a method setRepeatingRowsAndColumns(int,int,int,int,int), but no corresponding getter.\nThe provided patch adds the following methods to class Sheet:\n  - CellRangeAddress getRepeatingRows()\n  - CellRangeAddress getRepeatingColumns()\n\nA few notes & thoughts:\n\n1) the method setRepeatingRowsAndColumns(...) is defined in Workbook, although repeating rows/columns are actually Sheet properties. The rationale for the assignment is given in the Javadoc:\n     \"... This is function is included in the workbook because it creates/modifies name records which are stored at the workbook level...\"\nFor this are purely technical reasons, I would rather declare this method @deprecated and move it to class Sheet, in order to improve class coherence.\n\n2) It would be preferrable to split setRepeatingRowsAndColumns(...) into two methods setRepeatingRows(String rowRangeRef) and setRepeatingColumns(String columnRangeRef), as this maps more directly to the user interface fields, the getters, and it avoids slightly puzzling -1 parameters when the user only wants to define either repeating rows or columnns. E.g.:\nsetRepeatingRows(\"2:3\") or setRepeatingColumns(\"A:A\")\nA null parameter would indicate that repeating rows/columns should be removed.\n\n3) Regarding the returned class, CellRangeAddress: it appears that both AreaReference and CellRangeAddress have some limitations when it comes to handling Excel Version 97 versus 2007: both classes are a bit shaky when they are to decide if a cell range spans full rows/columns, as the different Excel versions support different maximum rows and columns.\nCellReference, which is used by both CellRangeAddress and AreaReference, has an inconspicuous comment which says :\n\"...// TODO - \"-1\" is a special value being temporarily used for whole row and whole column area references. ..\"\nThis is a quite informal specification for what I think is an important convention, as it offers a way to declare a whole row or column range in a spreadsheet version-independent way. Thus, I decided to stress this feature when using CellRangeAddress. However, the -1 convention seems to be implemented only in a sporadic selection of methods. E.g. CellRangeAddress.getNumberOfCells() returns wondrous results when operating with -1.\n\n3.1) A side note on CellRangeAddress and AreaReference: it seems that the reference classes do not exploit the full power that a rich class hierarchy could offer:\nE.g. in various contexts, a CellRangeAdress (or AreaReference) parameter is not exactly what is permitted, but only an apporximation.\nAn elaboorate reference class hierarchy could declare valid values more precisely. E.g.:\n  \n  CellSetRef <---+---- CellRangeRef <---------+----- CellRef\n                 |                    \\        \\\n                 |                     \\        \\\n                 +----- RowSetRef <----]\\[-- RowRangeRef <--- RowRef\n                 |                       \\\n                 |                        \\       \n                 +---ColumnSetRef <--- ColumnRangeRef <----- ColumnRef\n  \nRegards,\nJoachim"}, {"count": 1, "tags": [], "bug_id": 53500, "text": "Thanks for the excellent patch, applied in r1364061.\n\n> \n> 1) the method setRepeatingRowsAndColumns(...) is defined in Workbook,\n> although repeating rows/columns are actually Sheet properties. The rationale\n> for the assignment is given in the Javadoc:\n>      \"... This is function is included in the workbook because it\n> creates/modifies name records which are stored at the workbook level...\"\n> For this are purely technical reasons, I would rather declare this method\n> @deprecated and move it to class Sheet, in order to improve class coherence.\n>\n\nI'm OK to deprecate Workbook.setRepeatingRowsAndColumns. If we make this change we will need to change poi-examples to use the new methods. \n\n\n> 2) It would be preferrable to split setRepeatingRowsAndColumns(...) into two\n> methods setRepeatingRows(String rowRangeRef) and setRepeatingColumns(String\n> columnRangeRef), as this maps more directly to the user interface fields,\n> the getters, and it avoids slightly puzzling -1 parameters when the user\n> only wants to define either repeating rows or columnns. E.g.:\n> setRepeatingRows(\"2:3\") or setRepeatingColumns(\"A:A\")\n> A null parameter would indicate that repeating rows/columns should be\n> removed.\n>\n\nSounds good. I'd prefer setRepeatingRows(CellRangeAddress rowRangeRef) , in this case the type of the argument is the same in both getter and setter.\nA null paramater is certainly much more user-friendly than passing -1 .\n \n> 3) Regarding the returned class, CellRangeAddress: it appears that both\n> AreaReference and CellRangeAddress have some limitations when it comes to\n> handling Excel Version 97 versus 2007: both classes are a bit shaky when\n> they are to decide if a cell range spans full rows/columns, as the different\n> Excel versions support different maximum rows and columns.\n> CellReference, which is used by both CellRangeAddress and AreaReference, has\n> an inconspicuous comment which says :\n> \"...// TODO - \"-1\" is a special value being temporarily used for whole row\n> and whole column area references. ..\"\n> This is a quite informal specification for what I think is an important\n> convention, as it offers a way to declare a whole row or column range in a\n> spreadsheet version-independent way. Thus, I decided to stress this feature\n> when using CellRangeAddress. However, the -1 convention seems to be\n> implemented only in a sporadic selection of methods. E.g.\n> CellRangeAddress.getNumberOfCells() returns wondrous results when operating\n> with -1.\n>\n\nI see that this fix is in the patch. Thanks.\n \n> 3.1) A side note on CellRangeAddress and AreaReference: it seems that the\n> reference classes do not exploit the full power that a rich class hierarchy\n> could offer:\n> E.g. in various contexts, a CellRangeAdress (or AreaReference) parameter is\n> not exactly what is permitted, but only an apporximation.\n> An elaboorate reference class hierarchy could declare valid values more\n> precisely. E.g.:\n>   \n>   CellSetRef <---+---- CellRangeRef <---------+----- CellRef\n>                  |                    \\        \\\n>                  |                     \\        \\\n>                  +----- RowSetRef <----]\\[-- RowRangeRef <--- RowRef\n>                  |                       \\\n>                  |                        \\       \n>                  +---ColumnSetRef <--- ColumnRangeRef <----- ColumnRef\n>   \n\nIs CellSetRef  a subclass of CellRangeAddress  ? \n\nI'd rather stay with current design and tighten it up to throw IllegalArgumentException if a column range is passed instead of a row range, etc. \n\n\nYou are welcome to uplaod a patch with (1) and (2). \nPlease feel free to re-open this ticket or create a new one .\n\nRegards,\nYegor", "id": 160770, "time": "2012-07-21T10:55:46Z", "creator": "yegor@dinom.ru", "creation_time": "2012-07-21T10:55:46Z", "is_private": false, "attachment_id": null}, {"count": 2, "text": "Created attachment 29151\nPatch file", "bug_id": 53500, "attachment_id": 29151, "id": 161053, "time": "2012-08-02T09:58:23Z", "creator": "j.herrmann@web.de", "creation_time": "2012-08-02T09:58:23Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "j.herrmann@web.de", "text": "Hi Yegor,\n\nI finally had time to deal with the setRepatingRowsAndColumns() method.\nIt is now relocated to class Sheet, and split into two methods that expect a CellRangeAddress parameter, according to your suggestion.\n\nUnfortunately, a bunch of additional get, add, and remove methods for the HSSFName/XSSFName handling was needed, but as they are all package visible, the user interface should not be to much cluttered by this.\n\n\nRegards,\nJoachim", "id": 161054, "time": "2012-08-02T09:58:50Z", "bug_id": 53500, "creation_time": "2012-08-02T09:58:50Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "Thanks for the follow-up,\npatch applied in r1369290\n\nRegards,\nYegor", "bug_id": 53500, "attachment_id": null, "id": 161094, "time": "2012-08-04T08:57:10Z", "creator": "yegor@dinom.ru", "creation_time": "2012-08-04T08:57:10Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 53500, "text": "*** Bug 46800 has been marked as a duplicate of this bug. ***", "id": 183015, "time": "2015-05-18T20:16:50Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-05-18T20:16:50Z", "is_private": false, "attachment_id": null}]
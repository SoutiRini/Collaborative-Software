[{"count": 0, "tags": [], "bug_id": 13749, "attachment_id": null, "id": 24826, "time": "2002-10-17T19:23:20Z", "creator": "msiegenthaler@gmx.net", "creation_time": "2002-10-17T19:23:20Z", "is_private": false, "text": "We run into a big problem while switching a project to the embed version of \nxindice. It seems to mess up the symbols table since my documents (randomly) \ninterchange their tagnames. Example:\n\nI've a document document1 like this:\n\n<Person><Name>Mario Siegenthaler</Name><City>Berne</City></Person>\n\nand a document2 like this: \n<Lock><Timestamp>221321412</Timestamp><User>MSN</User><Resource>abcde</Resource\n></Lock>\n\nWhen I save those documents into xindice (first document1 into another \ncollection than document2, but that doesn't seem to matter) and retrieve them \nagain from xindice, document1 looks like the following (exact look varies from \ntime to time):\n\n<Lock><Timestame>Mario Siegenthaler</Timestamp><User>Berne</User></Lock>\n\nThis is very strange, since the \"tomcat\"-version works fine (just changing the \nxmldb:xindice urls). I switched to the filesystem-(reference)-implementation \n(which also works fine btw) for now, because we have to produce a version.. \nBut I'd like very much to stay with xindice.\n\nI tried various things like changing some of the embed.CollectionImpl methods \naso, but I never got a better result.. Can anybody help me with this? I don't \n(yet) have the insight into the \"storing\"-part of xindice so maybe one of you \nexperts have a better idea of the problem."}, {"count": 1, "tags": [], "bug_id": 13749, "attachment_id": null, "id": 24842, "time": "2002-10-18T06:00:01Z", "creator": "vladimir@bossicard.com", "creation_time": "2002-10-18T06:00:01Z", "is_private": false, "text": "I tried to reproduce the bug but it works for me. Sorry to say that but your\ndescription is not specific enough.  For example, how do you retrieve the\ndocument? Is there a name conflict with the documents' names? How are the files\ncoded?  What we really need is a very specific testcase that reproduces the bug.  \n\nI tried the following test and it passes:\n\npackage org.apache.xindice.integration.client.fixes;\n\nimport org.apache.xindice.integration.client.AbstractXmlDbClientTest;\n\npublic class BugzillaBugsTest\n        extends AbstractXmlDbClientTest {\n\n    /*\n     * Use case for bug 13749.\n     */\n    public void testInsertRetrieveDocument()\n            throws Exception {\n        this.client.insertDocument(TEST_COLLECTION_PATH, \"document1\",\n\"<Person><Name>Mario Siegenthaler</Name><City>Berne</City></Person>\");\n        this.client.insertDocument(TEST_COLLECTION_PATH, \"document2\",\n\"<Lock><Timestamp>221321412</Timestamp><User>MSN</User><Resource>abcde</Resource></Lock>\");\n\n        String doc = this.client.getDocument(TEST_COLLECTION_PATH, \"document1\");\n        assertEquals(\"<?xml version=\\\"1.0\\\"?>\\n<Person><Name>Mario\nSiegenthaler</Name><City>Berne</City></Person>\", doc);\n        doc = this.client.getDocument(TEST_COLLECTION_PATH, \"document2\");\n        assertEquals(\"<?xml\nversion=\\\"1.0\\\"?>\\n<Lock><Timestamp>221321412</Timestamp><User>MSN</User><Resource>abcde</Resource></Lock>\",\ndoc);\n    }\n\n}\n\nThis test must be included in the IntegrationEmbedTests class. \n\nSince it works for me can you try this test on your system?  If it passes\napparently it's not where the problem is, so you can write a JUnit test that\nreveals the bug (by simply copy-pasting your code).\n"}, {"count": 2, "tags": [], "creator": "Terry.Rosenbaum@gmail.com", "attachment_id": null, "text": "This is unlikely the cause of the problem, but since it\nis an outside possibility I will mention it:\n\nIf you have a collection configured with\n<collection compressed=\"false\" name=\"xmlproject\"> bla bla ...\nand you have a value index on an attribute in your\nquery, I have seen such behavior. Instead of using\nthe system's symbol table, a new symbol table\nis being created somewhere and thus the symbols used\nin processing the query get created with new values\nthat do not match their original values. The result\nis tag scrambling when retrieval uses an index.\n\nI say this is unlikely because it is unlikely that\nsomeone configured with \"compressed=false\". (But,\nI did once and discovered this behavior :).", "id": 24953, "time": "2002-10-21T16:00:35Z", "bug_id": 13749, "creation_time": "2002-10-21T16:00:35Z", "is_private": false}]
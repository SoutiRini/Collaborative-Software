[{"count": 0, "tags": [], "creator": "Joe.Mudd@sas.com", "attachment_id": null, "is_private": false, "id": 102993, "time": "2007-05-09T06:11:58Z", "bug_id": 42365, "creation_time": "2007-05-09T06:11:58Z", "text": "I am creating child processes with:\n\n   aStatus = apr_procattr_io_set(attr, APR_CHILD_BLOCK, APR_PARENT_BLOCK,\n                                 APR_PARENT_BLOCK);\n   ...\n   aStatus = apr_procattr_cmdtype_set(attr, APR_SHELLCMD);\n\nWhen created on Windows a console window is created.  I have added a new \nprocattr call (apr_procattr_terminal_set) to allow the suppression of the \nconsole window.  Below are the diffs associated with the update.\n\nThanks for your consideration.\n\n--- ../apr-1.2.8/./threadproc/netware/proc.c\tThu Aug  3 07:05:28 2006\n+++ ./threadproc/netware/proc.c\tWed May  9 08:35:35 2007\n@@ -47,6 +47,7 @@\n     /* Default to a current path since NetWare doesn't handle it very well */\n     apr_filepath_get(&((*new)->currdir), APR_FILEPATH_NATIVE, pool);\n     (*new)->detached = 1;\n+    (*new)->terminal = 1;\n     return APR_SUCCESS;\n \n }\n@@ -183,6 +184,13 @@\n     attr->detached = detach;\n     return APR_SUCCESS;\n }\n+\n+APR_DECLARE(apr_status_t) apr_procattr_terminal_set(apr_procattr_t *attr,\n+                                                 apr_int32_t terminal)\n+{\n+    attr->terminal = terminal;\n+    return APR_SUCCESS;\n+}\n \n #if APR_HAS_FORK\n APR_DECLARE(apr_status_t) apr_proc_fork(apr_proc_t *proc, apr_pool_t *pool)\n--- ../apr-1.2.8/./threadproc/win32/proc.c\tThu Aug  3 07:05:28 2006\n+++ ./threadproc/win32/proc.c\tWed May  9 08:38:57 2007\n@@ -58,6 +58,7 @@\n     (*new) = (apr_procattr_t *)apr_pcalloc(pool, sizeof(apr_procattr_t));\n     (*new)->pool = pool;\n     (*new)->cmdtype = APR_PROGRAM;\n+    (*new)->terminal = 1;\n     return APR_SUCCESS;\n }\n \n@@ -201,6 +202,13 @@\n     return APR_SUCCESS;\n }\n \n+APR_DECLARE(apr_status_t) apr_procattr_terminal_set(apr_procattr_t *attr,\n+                                                 apr_int32_t terminal)\n+{\n+    attr->terminal = terminal;\n+    return APR_SUCCESS;\n+}\n+\n static apr_status_t attr_cleanup(void *theattr)\n {\n     apr_procattr_t *attr = (apr_procattr_t *)theattr;    \n@@ -396,6 +404,15 @@\n     new->out = attr->parent_out;\n     new->err = attr->parent_err;\n \n+    if (!attr->terminal) {\n+        /* If we are launching a console application that is to run\n+         * without a console window and we are not Win9x, let Windows\n+         * know that we do not want a console.\n+         */\n+        if (apr_os_level >= APR_WIN_NT)\n+             dwCreationFlags |= CREATE_NO_WINDOW;\n+    }\n+\n     if (attr->detached) {\n         /* If we are creating ourselves detached, Then we should hide the\n          * window we are starting in.  And we had better redfine our\n--- ../apr-1.2.8/./threadproc/beos/proc.c\tThu Aug  3 07:05:28 2006\n+++ ./threadproc/beos/proc.c\tWed May  9 08:34:30 2007\n@@ -41,6 +41,7 @@\n     (*new)->currdir = NULL; \n     (*new)->cmdtype = APR_PROGRAM;\n     (*new)->detached = 0;\n+    (*new)->terminal = 1;\n     return APR_SUCCESS;\n }\n \n@@ -141,6 +142,13 @@\n     attr->detached = detach;\n     return APR_SUCCESS;\n }\n+\n+APR_DECLARE(apr_status_t) apr_procattr_terminal_set(apr_procattr_t *attr,\n+                                                 apr_int32_t terminal)\n+{\n+    attr->terminal = terminal;\n+    return APR_SUCCESS;\n+}\n \n APR_DECLARE(apr_status_t) apr_proc_fork(apr_proc_t *proc, apr_pool_t *pool)\n {\n--- ../apr-1.2.8/./threadproc/unix/proc.c\tThu Aug  3 07:05:28 2006\n+++ ./threadproc/unix/proc.c\tWed May  9 08:37:21 2007\n@@ -31,6 +31,7 @@\n     (*new)->pool = pool;\n     (*new)->cmdtype = APR_PROGRAM;\n     (*new)->uid = (*new)->gid = -1;\n+    (*new)->terminal = 1;\n     return APR_SUCCESS;\n }\n \n@@ -188,6 +189,13 @@\n     attr->detached = detach;\n     return APR_SUCCESS;\n }\n+\n+APR_DECLARE(apr_status_t) apr_procattr_terminal_set(apr_procattr_t *attr,\n+                                                 apr_int32_t terminal)\n+{\n+    attr->terminal = terminal;\n+    return APR_SUCCESS;\n+}\n \n APR_DECLARE(apr_status_t) apr_proc_fork(apr_proc_t *proc, apr_pool_t *pool)\n {\n--- ../apr-1.2.8/./threadproc/os2/proc.c\tThu Aug  3 07:05:28 2006\n+++ ./threadproc/os2/proc.c\tWed May  9 08:36:38 2007\n@@ -52,6 +52,7 @@\n     (*new)->currdir = NULL; \n     (*new)->cmdtype = APR_PROGRAM;\n     (*new)->detached = FALSE;\n+    (*new)->terminal = TRUE;\n     return APR_SUCCESS;\n }\n \n@@ -188,6 +189,13 @@\n     attr->detached = detach;\n     return APR_SUCCESS;\n }\n+\n+APR_DECLARE(apr_status_t) apr_procattr_terminal_set(apr_procattr_t *attr,\n+                                                 apr_int32_t terminal)\n+{\n+    attr->terminal = terminal;\n+    return APR_SUCCESS;\n+}\n \n APR_DECLARE(apr_status_t) apr_proc_fork(apr_proc_t *proc, apr_pool_t *pool)\n {\n--- ../apr-1.2.8/./include/apr_thread_proc.h\tThu Aug  3 07:05:28 2006\n+++ ./include/apr_thread_proc.h\tWed May  9 08:31:50 2007\n@@ -473,6 +473,16 @@\n APR_DECLARE(apr_status_t) apr_procattr_detach_set(apr_procattr_t *attr, \n                                                  apr_int32_t detach);\n \n+\n+/**\n+ * Determine if the child should start with a terminal.\n+ * @param attr The procattr we care about.\n+ * @param background Should the child start with a terminal?  Default is yes.\n+ */\n+APR_DECLARE(apr_status_t) apr_procattr_terminal_set(apr_procattr_t *attr,\n+                                                 apr_int32_t terminal);\n+\n+\n #if APR_HAVE_STRUCT_RLIMIT\n /**\n  * Set the Resource Utilization limits when starting a new process.\n--- ../apr-1.2.8/./include/arch/netware/apr_arch_threadproc.h\tThu Aug  3 \n07:05:28 2006\n+++ ./include/arch/netware/apr_arch_threadproc.h\tWed May  9 08:40:28 2007\n@@ -61,6 +61,7 @@\n     char *currdir;\n     apr_int32_t cmdtype;\n     apr_int32_t detached;\n+    apr_int32_t terminal;\n     apr_int32_t addrspace;\n };\n \n--- ../apr-1.2.8/./include/arch/win32/apr_arch_threadproc.h\tThu Aug  3 \n07:05:28 2006\n+++ ./include/arch/win32/apr_arch_threadproc.h\tWed May  9 08:39:47 2007\n@@ -55,6 +55,7 @@\n     char *currdir;\n     apr_int32_t cmdtype;\n     apr_int32_t detached;\n+    apr_int32_t terminal;\n     apr_child_errfn_t *errfn;\n     apr_int32_t errchk;\n #ifndef _WIN32_WCE\n--- ../apr-1.2.8/./include/arch/beos/apr_arch_threadproc.h\tThu Aug  3 \n07:05:28 2006\n+++ ./include/arch/beos/apr_arch_threadproc.h\tWed May  9 08:40:48 2007\n@@ -84,6 +84,7 @@\n     char *currdir;\n     apr_int32_t cmdtype;\n     apr_int32_t detached;\n+    apr_int32_t terminal;\n };\n \n struct apr_thread_once_t {\n--- ../apr-1.2.8/./include/arch/unix/apr_arch_threadproc.h\tThu Aug  3 \n07:05:28 2006\n+++ ./include/arch/unix/apr_arch_threadproc.h\tWed May  9 08:40:01 2007\n@@ -84,6 +84,7 @@\n     char *currdir;\n     apr_int32_t cmdtype;\n     apr_int32_t detached;\n+    apr_int32_t terminal;\n #ifdef RLIMIT_CPU\n     struct rlimit *limit_cpu;\n #endif\n--- ../apr-1.2.8/./include/arch/os2/apr_arch_threadproc.h\tThu Aug  3 \n07:05:28 2006\n+++ ./include/arch/os2/apr_arch_threadproc.h\tWed May  9 08:40:15 2007\n@@ -56,6 +56,7 @@\n     char *currdir;\n     apr_int32_t cmdtype;\n     apr_int32_t detached;\n+    apr_int32_t terminal;\n };\n \n struct apr_thread_once_t {"}, {"count": 1, "text": "A stub implementation of apr_procattr_terminal_set is missing for threadproc/unix.\nAlso, next time submit the patch as an attachment. Thanks.", "bug_id": 42365, "is_private": false, "id": 103130, "time": "2007-05-12T10:46:40Z", "creator": "davi@apache.org", "creation_time": "2007-05-12T10:46:40Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "creator": "davi@apache.org", "text": "(In reply to comment #1)\n> A stub implementation of apr_procattr_terminal_set is missing for threadproc/unix.\n> Also, next time submit the patch as an attachment. Thanks.\n\nOops, it's not. But the terminal flag won't be used then, do we really need it ?", "id": 103131, "time": "2007-05-12T10:49:16Z", "bug_id": 42365, "creation_time": "2007-05-12T10:49:16Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "You are correct.  The terminal flag is not needed in threadproc/unix.  I placed \nit there in case someone else found a need.  It can be removed.\n\nSorry about the inline vs attachment.", "is_private": false, "bug_id": 42365, "id": 103159, "time": "2007-05-14T04:23:57Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-05-14T04:23:57Z", "attachment_id": null}, {"count": 4, "attachment_id": 20511, "bug_id": 42365, "is_private": false, "id": 105409, "time": "2007-07-13T14:58:58Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-07-13T14:58:58Z", "tags": [], "text": "Created attachment 20511\napr_thread_proc.h.diff\n\nAdding individual diffs for the pieces/parts affected."}, {"count": 5, "tags": [], "creator": "Joe.Mudd@sas.com", "attachment_id": 20512, "id": 105410, "time": "2007-07-13T14:59:45Z", "bug_id": 42365, "creation_time": "2007-07-13T14:59:45Z", "is_private": false, "text": "Created attachment 20512\napr_arch_threadproc.h.diff.win32 (include/arch/win32/...)"}, {"count": 6, "text": "Created attachment 20513\nproc.c.diff.beos (threadproc/beos/proc.c)", "bug_id": 42365, "is_private": false, "id": 105411, "time": "2007-07-13T15:00:16Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-07-13T15:00:16Z", "tags": [], "attachment_id": 20513}, {"count": 7, "tags": [], "text": "Created attachment 20514\nproc.c.diff.netware (threadproc/netware/proc.c)", "is_private": false, "bug_id": 42365, "id": 105412, "time": "2007-07-13T15:00:42Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-07-13T15:00:42Z", "attachment_id": 20514}, {"count": 8, "attachment_id": 20515, "bug_id": 42365, "is_private": false, "id": 105413, "time": "2007-07-13T15:01:04Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-07-13T15:01:04Z", "tags": [], "text": "Created attachment 20515\nproc.c.diff.os2 (threadproc/os2/proc.c)"}, {"count": 9, "attachment_id": 20516, "bug_id": 42365, "is_private": false, "id": 105414, "time": "2007-07-13T15:01:27Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-07-13T15:01:27Z", "tags": [], "text": "Created attachment 20516\nproc.c.diff.unix (threadproc/unix/proc.c)"}, {"count": 10, "attachment_id": 20517, "bug_id": 42365, "is_private": false, "id": 105415, "time": "2007-07-13T15:01:57Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-07-13T15:01:57Z", "tags": [], "text": "Created attachment 20517\nproc.c.diff.win32 (threadproc/win32/proc.c)"}, {"count": 11, "attachment_id": null, "bug_id": 42365, "is_private": false, "id": 105416, "time": "2007-07-13T15:02:59Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-07-13T15:02:59Z", "tags": [], "text": "Updated the diffs to be against the latest greatest source and packaged them up \nas individual attachments."}, {"count": 12, "tags": [], "bug_id": 42365, "attachment_id": null, "text": "By default, we should be creating processes without a visible console.\n\nSimply put, APR needs to create similar behavior across platforms, and\nrelieve the application author from dealing with platform quirks (such\nas console windows popping up.)\n\nI don't have a huge issue with offering console windows as a platform\nfeature where they can be supported, in apr 1.3.0 or later, but certainly\nwouldn't want to see this become the default behavior.  terminal below\nmust default to 0.\n\nSo the gist of your patch (eliminating console windows) would be a good\naddition across APR 0.9, 1.2 and trunk.  Adding the option would be of\ninterest only as a new API in trunk for version 1.3 or 2.0 (whichever\ncomes first) per our versioning rules.\n\nBottom line rule to apply is the principle of least surprise to authors\nas they port from platform to platform.", "id": 105819, "time": "2007-07-21T16:49:50Z", "creator": "wrowe@apache.org", "creation_time": "2007-07-21T16:49:50Z", "is_private": false}, {"count": 13, "tags": [], "creator": "Joe.Mudd@sas.com", "attachment_id": null, "id": 108296, "time": "2007-09-17T13:56:43Z", "bug_id": 42365, "creation_time": "2007-09-17T13:56:43Z", "is_private": false, "text": "Do you require a new patch for 1.2 that always suppresses the console window?\n\nI agree that the window should be suppressed.  The current patch was written to \nkeep backwards compatibility in case there were uses that relied on the current \nbehavior.\n\nAlso, unless indicated otherwise, I do not see a need for a new API in 1.3 nor \n2.0 once the windows source is updated to always suppress the console window.\n\nThanks."}]
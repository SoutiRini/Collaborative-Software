[{"count": 0, "tags": [], "bug_id": 60232, "attachment_id": null, "text": "HTTP/2 connector of tomcat 8.5.5 is getting stuck (endless busy loop) when parsing a big (e.g. 30kb) http header.\n\nSteps to reproduce using apache-tomcat-8.5.5-windows-x86.zip on windows 7 (64) and jre 1.8.0_102 (32):\n1.) configure a https connector including http2 upgrade, e.g.\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\">\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"key.key\"\n                         certificateFile=\"cert.crt\"\n                         />\n        </SSLHostConfig>\n    </Connector>\n\n2.) Point Firefox to https://localhost:8443/, verify HTTP/2 is used using Network View in Developer Tools\n3.) For the verified request, use 'Edit and Resend' to add a big http header, e.g.\nX-Big-Header: <put 30kb of text here>\nand send that request\n4.) The request never returns, and Windows Task Manager shows that tomcat's java vm now fully uses one core\n5.) Stacktrace of the stuck thread looks like this:\n\nName: https-openssl-apr-8443-exec-6\nState: RUNNABLE\nTotal blocked: 0  Total waited: 1\n\nStack trace: \norg.apache.coyote.http2.HPackHuffman.decode(HPackHuffman.java:383)\norg.apache.coyote.http2.HpackDecoder.readHuffmanString(HpackDecoder.java:215)\norg.apache.coyote.http2.HpackDecoder.readHpackString(HpackDecoder.java:204)\norg.apache.coyote.http2.HpackDecoder.readHeaderName(HpackDecoder.java:188)\norg.apache.coyote.http2.HpackDecoder.decode(HpackDecoder.java:116)\norg.apache.coyote.http2.Http2Parser.readHeaderBlock(Http2Parser.java:404)\norg.apache.coyote.http2.Http2Parser.readHeadersFrame(Http2Parser.java:246)\norg.apache.coyote.http2.Http2Parser.readFrame(Http2Parser.java:96)\norg.apache.coyote.http2.Http2Parser.readFrame(Http2Parser.java:68)\norg.apache.coyote.http2.Http2UpgradeHandler.upgradeDispatch(Http2UpgradeHandler.java:314)\norg.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:54)\norg.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53)\norg.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802)\norg.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2241)\norg.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n   - locked org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper@cd6eb\njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\norg.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\njava.lang.Thread.run(Thread.java:745)\n\n\nIn case you're wondering what the use-case for such big headers is: they actually occur when using SPNEGO/Kerberos. The 'Negotiate'-Header can easily be dozens of KB long.", "id": 194304, "time": "2016-10-10T14:27:46Z", "creator": "barney2k7@gmail.com", "creation_time": "2016-10-10T14:27:46Z", "is_private": false}, {"count": 1, "tags": [], "text": "This issue still exists in tomcat 8.5.6, even though there seem to have been some bugfixes (e.g. bug  60173 ) in the affected area", "is_private": false, "id": 194389, "creation_time": "2016-10-13T07:07:38Z", "time": "2016-10-13T07:07:38Z", "creator": "barney2k7@gmail.com", "bug_id": 60232, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 60232, "attachment_id": null, "is_private": false, "id": 194575, "time": "2016-10-20T10:10:30Z", "creator": "markt@apache.org", "creation_time": "2016-10-20T10:10:30Z", "text": "Thanks for the report. This has been fixed in trunk for 9.0.0.M12 onwards and 8.5.x for 8.5.7 onwards."}]
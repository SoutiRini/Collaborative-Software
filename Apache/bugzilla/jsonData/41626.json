[{"count": 0, "tags": [], "bug_id": 41626, "attachment_id": null, "id": 99430, "time": "2007-02-15T09:37:23Z", "creator": "bulutoprak@hotmail.com", "creation_time": "2007-02-15T09:37:23Z", "is_private": false, "text": "Continuously resizing the size of the canvas is causing the memory to be leaked.\nCalling garbage collector does not fix the problem. To see the effect of memory\nleak, continously call the setSize method of the canvas and let the size grow. \nFor example: call increaseSize many times and decrease size. Each time memory\nincreases. Calling garbage collector reduces a little but in total always memory\nis increasing. Note that you should test the code with a large svg document so\nthat you can see the effect more quickly.\n\nincreaseSize()\n{\n Dimension size = svgCanvas.getSize();\n size.width*= 1.3;\n size.height*= 1.3;\n  svgCanvas.setSize(size);\n}  \n\ndecreaseSize()\n{\n Dimension size = svgCanvas.getSize();\n size.width/= 1.3;\n size.height/= 1.3;\n  svgCanvas.setSize(size);\n}"}, {"count": 1, "tags": [], "text": "Is this bug group being read by anyone? There is no clue if someone has read the\nbug i reported.", "attachment_id": null, "bug_id": 41626, "id": 99966, "time": "2007-03-02T01:47:58Z", "creator": "bulutoprak@hotmail.com", "creation_time": "2007-03-02T01:47:58Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 41626, "attachment_id": null, "is_private": false, "id": 99967, "time": "2007-03-02T02:50:57Z", "creator": "cam@apache.org", "creation_time": "2007-03-02T02:50:57Z", "text": "Hi.\n\nYeah I tried (briefly) to reproduce this yesterday, but had no success.  I did\nmanage to get OutOfMemoryErrors by resizing the canvas too large (because there\nwasn't enough heap space for a buffer covering the entire canvas), but not just\nfrom repeatedly growing/shrinking the canvas.\n\nI'll investigate more soon."}, {"count": 3, "tags": [], "bug_id": 41626, "attachment_id": null, "id": 108558, "time": "2007-09-24T20:21:16Z", "creator": "cam@apache.org", "creation_time": "2007-09-24T20:21:16Z", "is_private": false, "text": "OK I finally got some time to look at this, but was unable to reproduce the\nproblem.  This is what I tested with:\n\nimport java.awt.Dimension;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport javax.swing.JFrame;\nimport org.apache.batik.swing.JSVGCanvas;\n\npublic class Test {\n    public static void main(String[] args) {\n        JFrame f = new JFrame(\"test\");\n        f.setSize(300, 300);\n        f.getContentPane().setLayout(null);\n        final JSVGCanvas c = new JSVGCanvas();\n        f.getContentPane().add(c);\n        c.setSize(100, 100);\n        c.setURI(\"file:/home/cam/workspace/batik-app/test.svg\");\n        f.setVisible(true);\n        TimerTask tt = new TimerTask() {\n            double factor = 1.5;\n            public void run() {\n                Dimension size = c.getSize();\n                size.width *= factor;\n                size.height *= factor;\n                c.setSize(size);\n                factor = 1 / factor;\n            }\n        };\n        Timer t = new Timer();\n        t.schedule(tt, 5000, 1);\n    }\n}\n\nIt might be that I'm not using a particular feature in the SVG document that\ncauses the memory leak.  Do you have a self-contained program/document that does\nexhibit the leak?"}, {"count": 4, "tags": [], "text": "Seems there is a problem with creating the BufferedImage used by doubleBuffering. See Bug 48407. This might also be the reason for _this_ bug (?).", "attachment_id": null, "id": 132905, "creator": "christoph.bimminger@systema.info", "time": "2009-12-17T07:21:00Z", "bug_id": 41626, "creation_time": "2009-12-17T07:21:00Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 41626, "attachment_id": null, "is_private": false, "id": 132954, "time": "2009-12-19T12:20:21Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-12-19T12:20:21Z", "text": "(In reply to comment #4)\n> Seems there is a problem with creating the BufferedImage used by\n> doubleBuffering. See Bug 48407. This might also be the reason for _this_ bug\n> (?).\n\nWhat occurs to me is not the double buffering but embedding (raster) images instead: Cameron wasn't able to reproduce the issue as probably the \"test.svg\" used didn't use any images (either embedded or linked). If so then, as stated in bug 48407 comment 1, this was likely fixed in revision 793536.\n\nPlease try again using a nightly version [1] (or using the trunk source code [2]) and report back. In any case, a testcase would be helpful...\n\n\n[1] http://mcc.id.au/batik-nightly/\n[2] http://xmlgraphics.apache.org/batik/download.cgi#Subversion+repository"}]
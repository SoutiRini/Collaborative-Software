[{"count": 0, "tags": [], "creator": "dev@cumiskey.com", "attachment_id": null, "id": 122148, "time": "2008-11-03T10:15:54Z", "bug_id": 46141, "creation_time": "2008-11-03T10:15:54Z", "is_private": false, "text": "The ImageConverter*2G2D implementing classes in XG Commons make the assumption \nwhen creating their Graphics2DImagePainter implementations that the coordinate system used by the Graphics2D implementation follows the 'Standard' bottom to top ascending x and left to right y ascending axis.  This assumption is fine for most cases but in the case of AFPGraphics2D implementation the coordinate system is different and you have a descending y axis.\n\n^                     ------------------>\n|                     |\n|                     |\n|                     |\n|                     |\n|                     |\n|----------------->   |\n                      \nStandard              AFPGraphics2D (GOCA)\n\nSo for AFPGraphics2D you need to a different translation and scale AffineTransform matrix to paint correctly.  At the moment this translation and scale preparation is hardwired inside the paint(Graphics2D g2d, Rectangle2D area) method of the Graphics2DImagePainter implementation/instance.\n\nThere needs to be a separation of concerns between the painting and the preparation for painting (which can be Graphics2D implementation specific)."}, {"count": 1, "tags": [], "bug_id": 46141, "text": "Created attachment 22824\nExamples showing off the image loader framework\n\nThese image converters don't make any assumptions. They follow the requirements of the Graphics2DImagePainter interface. Or I hope they do if I've done my job right (but the example in the attachment proves that [1]). At least it worked for PDF, PS (both have LR-BT coordinate systems) and for Java2D and PCL (LR-TB). The interface has two methods:\n\n\"Dimension getImageSize()\" returns the image's intrisic size in millipoints. That's an absolute size which is useful for certain situations. FOP usually doesn't need that because it already knows the intrinsic size from the layout stage (from the ImageInfo object).\n\n\"void paint(Graphics2D g2d, Rectangle2D area)\" actually paints the image on the given Graphics2D object. The implementation has to paint the image (in its entirety) so it fits in the coordinates (user/any coordinates) given by the area. See also the Javadocs. Let me know if they are unclear.\n\nIMO, the contract is clear. The caller has to set up the coordinate system so the image is properly painted. If it is upside-down in your case, you've got a bug in your code. If you want help, I can take a look at the AFP code tomorrow (Tuesday is my FOP day this week).\n\n[1] When you run that example yourself, you need to change the base directory to a FOP working copy so it finds the images. Note that there seems to be a bug in PSGraphics2D that somehow messes up some of the text coming from the WMF example. The rest looks ok.", "id": 122155, "time": "2008-11-03T13:08:37Z", "creator": "jeremias@apache.org", "creation_time": "2008-11-03T13:08:37Z", "is_private": false, "attachment_id": 22824}, {"count": 2, "tags": [], "bug_id": 46141, "text": "I understand all that you are saying, but I repeat myself again, the ImageConverter is making an assumption about the coordinate system being used by the Graphics2D implementation.  I can provide an unsatisfactory workaround to invert the Y axis (g2d.translate(0, area.getHeight()); g2d.scale(1, -1)) prior to painting.  It would be better if there was a hook provided into each painter like setPreparator(PainterPreparator preparator) which could override any default implementation for the painting coordinate preparation phase.\n\n(In reply to comment #1)\n> Created an attachment (id=22824) [details]\n> Examples showing off the image loader framework\n> \n> These image converters don't make any assumptions. They follow the requirements\n> of the Graphics2DImagePainter interface. Or I hope they do if I've done my job\n> right (but the example in the attachment proves that [1]). At least it worked\n> for PDF, PS (both have LR-BT coordinate systems) and for Java2D and PCL\n> (LR-TB). The interface has two methods:\n> \n> \"Dimension getImageSize()\" returns the image's intrisic size in millipoints.\n> That's an absolute size which is useful for certain situations. FOP usually\n> doesn't need that because it already knows the intrinsic size from the layout\n> stage (from the ImageInfo object).\n> \n> \"void paint(Graphics2D g2d, Rectangle2D area)\" actually paints the image on the\n> given Graphics2D object. The implementation has to paint the image (in its\n> entirety) so it fits in the coordinates (user/any coordinates) given by the\n> area. See also the Javadocs. Let me know if they are unclear.\n> \n> IMO, the contract is clear. The caller has to set up the coordinate system so\n> the image is properly painted. If it is upside-down in your case, you've got a\n> bug in your code. If you want help, I can take a look at the AFP code tomorrow\n> (Tuesday is my FOP day this week).\n> \n> [1] When you run that example yourself, you need to change the base directory\n> to a FOP working copy so it finds the images. Note that there seems to be a bug\n> in PSGraphics2D that somehow messes up some of the text coming from the WMF\n> example. The rest looks ok.\n> \n\n", "id": 122169, "attachment_id": null, "creator": "dev@cumiskey.com", "creation_time": "2008-11-04T02:43:06Z", "time": "2008-11-04T02:43:06Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 46141, "text": "Adrian, can you please describe a test scenario where I can see the problem? Can I use the code currently in the AFP branch or do you need to commit anything before that?", "id": 122170, "time": "2008-11-04T03:24:09Z", "creator": "jeremias@apache.org", "creation_time": "2008-11-04T03:24:09Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46141, "attachment_id": null, "text": "Its committed with a workaround so nothing to worry about now.", "id": 122180, "time": "2008-11-04T09:24:08Z", "creator": "dev@cumiskey.com", "creation_time": "2008-11-04T09:24:08Z", "is_private": false}]
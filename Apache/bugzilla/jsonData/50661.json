[{"attachment_id": null, "tags": [], "bug_id": 50661, "is_private": false, "count": 0, "id": 143668, "time": "2011-01-26T11:26:19Z", "creator": "Sergiusz.Brzezinski@supersystem.pl", "creation_time": "2011-01-26T11:26:19Z", "text": "Sorry for my English.\n\nIn <c:forEach> implementation, there are two internal variables: rawItems and items. They hold a list, which is iterated with <c:forEach> statement. The problem is, that after the iteration has finished, the variables still hold the list! It would not be a problem if the Tag would be released after request ends. But IT IS a problem because the Tag (according to JSP specification) remains in memory and can be reused later by another request.\n\nSo, it is possible, that the list which is held by rawItems, remains in memory many hours until another request releases it. If there ist a VERY BIG LIST with VERY BIG OBJECTS, it could be a VERY BIG PROBLEM with memory on JVM. And it was - on my server.\n\nI did a workaround of this. I made a class which extendeds ForEachTag and I wrote such method:\n\n@Override\npublic int doEndTag() throws JspException\n{\n\tint wynik = super.doEndTag();\n\tthis.rawItems = null ;\n\tthis.items = null ;\n\treturn wynik ;\n}\n\nNow I use my own forEach tag.\n\nI think, such \"memory optimalization\" should be made in a standard implementation.\n\nSergiusz"}, {"count": 1, "tags": [], "bug_id": 50661, "attachment_id": null, "id": 143694, "time": "2011-01-27T02:57:56Z", "creator": "jboynes@apache.org", "creation_time": "2011-01-27T02:57:56Z", "is_private": false, "text": "As discussed in the related issue, the items cannot be released in doEndTag() as the tag is required by the spec to retain its attribute values until release() is called.\n\n*** This bug has been marked as a duplicate of bug 25623 ***"}]
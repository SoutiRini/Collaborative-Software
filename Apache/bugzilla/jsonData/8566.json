[{"count": 0, "tags": [], "bug_id": 8566, "attachment_id": null, "text": "http://qlink.queensu.ca/~9cw4/loop-bug.zip contains a simple web-app that\nproduces the bug and implements a simple workaround.\n\n* Problem:\n\nWhen a filter uses a ServletRequestWrapper to modify the request in doFilter,\nany changes made by ApplicationDispatcher will be completely ignored.\n\n* Workaround:\n\nWhen getRequest is called on the wrapper, its getServletPath reverts to calling\nsuper.getServletPath(). This works correctly in 4.0.3, but could be broken\neasily in future versions.\n\n* Context:\n\nIn org.apache.catalina.core.ApplicationDispatcher:\n\ndoForward(request, response) calls wrapRequest for HTTP path-based forwards.\n\nwrapRequest walks up the request chain past any ServletRequestWrappers and\ninserts a new ApplicationHttpRequest before the first wrapper, this new request\nis returned.\n\ndoForward modifies the returned request to match the target of the forward.\n\n* Discussion:\n\nWhy does the insertion need to take place before the first ServletRequestWrapper? \n\nConsidering the JSP spec specifically talks about using ServletRequestWrapper in\na Filter to redirect requests, it breaking forward is a serious problem.\nRemoving the chain walking code would seem to be the obvious fix, but I am\nworried about breaking includes or other behavior.", "id": 14861, "time": "2002-04-26T19:16:26Z", "creator": "cwolfe@globetrotter.qc.ca", "creation_time": "2002-04-26T19:16:26Z", "is_private": false}, {"count": 1, "tags": [], "text": "When processing a RequestDispatcher.forward() or RequestDispatcher.include()\ncall, the container is required to ensure that any wrapped request (or response)\nprovided by the calling servlet is the very same instance that is handed to the\ncalling servlet (Servlet 2.3 Spec, Section 6.2.2, last paragraph).  Therefore,\nit is not legal to implement request dispatcher processing by wrapping the\nrequest provided by the calling servlet.\n\nA consequence of this is that your wrapper class *must* delegate calls like\ngetServletPath() to its superclass in order to see the modified values set by\nthe container -- which are conceptually performed on the underlying \"real\"\nrequest object itself.  If your application fails to do this, then it is the\napplication's problem that the \"wrong\" answer is returned -- just as it would be\nif you overrode getServletPath() and always returned a null value, or some\nconstant String.\n", "attachment_id": null, "id": 14874, "creator": "craig.mcclanahan@sun.com", "time": "2002-04-26T20:57:59Z", "bug_id": 8566, "creation_time": "2002-04-26T20:57:59Z", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "funkman@joedog.org", "is_private": false, "id": 38040, "time": "2003-05-30T12:07:40Z", "bug_id": 8566, "creation_time": "2003-05-30T12:07:40Z", "tags": [], "text": "*** Bug 9754 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "bug_id": 8566, "is_private": false, "text": "*** Bug 21782 has been marked as a duplicate of this bug. ***", "id": 41112, "time": "2003-07-21T22:35:20Z", "creator": "funkman@joedog.org", "creation_time": "2003-07-21T22:35:20Z", "attachment_id": null}]